TITLE: Implementing a Python Remote Plugin for Neovim
DESCRIPTION: An example Python plugin called 'Limit' that exports a command, a function, and an autocmd. The plugin demonstrates how to use the pynvim module to interact with Neovim, track state, and handle different types of calls with sync settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/remote_plugin.txt#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
import pynvim

@pynvim.plugin
class Limit(object):
    def __init__(self, vim):
        self.vim = vim
        self.calls = 0

    @pynvim.command('Cmd', range='', nargs='*', sync=True)
    def command_handler(self, args, range):
        self._increment_calls()
        self.vim.current.line = (
            'Command: Called %d times, args: %s, range: %s' % (self.calls,
                                                               args,
                                                               range))

    @pynvim.autocmd('BufEnter', pattern='*.py', eval='expand("<afile>")',
                    sync=True)
    def autocmd_handler(self, filename):
        self._increment_calls()
        self.vim.current.line = (
            'Autocmd: Called %s times, file: %s' % (self.calls, filename))

    @pynvim.function('Func')
    def function_handler(self, args):
        self._increment_calls()
        self.vim.current.line = (
            'Function: Called %d times, args: %s' % (self.calls, args))

    def _increment_calls(self):
        if self.calls == 5:
            raise Exception('Too many calls!')
        self.calls += 1
```

----------------------------------------

TITLE: Interrupt Handling with Tasks
DESCRIPTION: Complex example showing how to handle user interrupts (CTRL-C) in a command loop with multiple tasks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_138

LANGUAGE: vim
CODE:
```
:function! TASK1()
:  sleep 10
:endfunction

:function! TASK2()
:  sleep 20
:endfunction

:while 1
:  let command = input("Type a command: ")
:  try
:    if command == ""
:      continue
:    elseif command == "END"
:      break
:    elseif command == "TASK1"
:      call TASK1()
:    elseif command == "TASK2"
:      call TASK2()
:    else
:      echo "\nIllegal command:" command
:      continue
:    endif
:  catch /^Vim:Interrupt$/
:    echo "\nCommand interrupted"
:  endtry
:endwhile
```

----------------------------------------

TITLE: Neovim Editor Commands Reference
DESCRIPTION: Structured list of Neovim commands showing the full command name, its abbreviated form in brackets, and a description of its functionality. This includes commands for navigation, editing, window management, scripting, and various editor modes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
|:ijump|    :ij[ump]    jump to definition of identifier
|:ilist|    :il[ist]    list lines where identifier matches
|:imap|     :im[ap]     like ":map" but for Insert mode
|:imapclear|    :imapc[lear]    like ":mapclear" but for Insert mode
[...additional commands truncated for brevity...]
```

----------------------------------------

TITLE: Feeding Keys into Neovim
DESCRIPTION: This example demonstrates how to feed keys into Neovim using `nvim_feedkeys()`. It shows how to replace termcodes to input special key sequences like `<C-o>`. The `nvim_replace_termcodes()` function is used to handle the keycode replacement, and the result is then passed to `nvim_feedkeys()`.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```

        :let key = nvim_replace_termcodes("<C-o>", v:true, v:false, v:true)
        :call nvim_feedkeys(key, 'n', v:false)

```

----------------------------------------

TITLE: Executing Vimscript Block in Neovim
DESCRIPTION: The 'nvim_exec2' function allows execution of Vimscript commands supporting script-scope and heredocs. Results include detailed output based on 'opts'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_38

LANGUAGE: Lua
CODE:
```
nvim_exec2\(\{src\}, \{opts\}\)
```

----------------------------------------

TITLE: Window Management Commands in Neovim
DESCRIPTION: Extensive set of window navigation and manipulation commands using CTRL-W prefix, enabling split window operations, window movement, resizing, and tab page interactions
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
CTRL-W s - split window horizontally
CTRL-W v - split window vertically
CTRL-W h/j/k/l - move between windows
```

----------------------------------------

TITLE: Configuring Lua Language Server in Neovim LSP
DESCRIPTION: Example configuration for the Lua language server (lua-language-server) using vim.lsp.config. Sets up server command, filetypes, root markers, and specific Lua settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_0

LANGUAGE: lua
CODE:
```
vim.lsp.config['luals'] = {
  -- Command and arguments to start the server.
  cmd = { 'lua-language-server' },

  -- Filetypes to automatically attach to.
  filetypes = { 'lua' },

  -- Sets the "root directory" to the parent directory of the file in the
  -- current buffer that contains either a ".luarc.json" or a
  -- ".luarc.jsonc" file. Files that share a root directory will reuse
  -- the connection to the same LSP server.
  root_markers = { '.luarc.json', '.luarc.jsonc' },

  -- Specific settings to send to the server. The schema for this is
  -- defined by the server. For example the schema for lua-language-server
  -- can be found here https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json
  settings = {
    Lua = {
      runtime = {
        version = 'LuaJIT',
      }
    }
  }
}
```

----------------------------------------

TITLE: Complex Exception Handling with Nested Try Blocks in Vim Script
DESCRIPTION: A comprehensive example that demonstrates nested try blocks, exception propagation, and examining exception information using v:exception and v:throwpoint variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_126

LANGUAGE: vim
CODE:
```
:function! Caught()
:  if v:exception != ""
:    echo 'Caught "' .. v:exception .. '" in ' .. v:throwpoint
:  else
:    echo 'Nothing caught'
:  endif
:endfunction
:
:function! Foo()
:  try
:    try
:      try
:         throw 4711
:      finally
:         call Caught()
:      endtry
:    catch /.*/
:      call Caught()
:      throw "oops"
:    endtry
:  catch /.*/
:    call Caught()
:  finally
:    call Caught()
:  endtry
:endfunction
:
:call Foo()
```

----------------------------------------

TITLE: Autocommand Group Definition Pattern
DESCRIPTION: Best practice pattern for defining autocommands within a group to avoid duplicate definitions when sourcing vimrc multiple times
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
augroup vimrc
  " Remove all vimrc autocommands
  autocmd!
  au BufNewFile,BufRead *.html so <sfile>:h/html.vim
augroup END
```

----------------------------------------

TITLE: Creating Autocommand Groups in Vim
DESCRIPTION: Example showing the recommended pattern for defining autocommand groups: creating the group, clearing previous autocommands, defining new ones, and ending the group definition.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_26

LANGUAGE: viml
CODE:
```
:augroup uncompress
:  au!
:  au BufEnter *.gz	%!gunzip
:augroup END
```

----------------------------------------

TITLE: Executing Vim Undo/Redo Commands
DESCRIPTION: Commands for undoing and redoing changes in Vim. Includes undo, redo, and restore last changed line operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
u       N  u		undo last N changes
CTRL-R  N  CTRL-R	redo last N undone changes
U          U		restore last changed line
```

----------------------------------------

TITLE: Using mapcheck for Mapping Validation
DESCRIPTION: Example showing how to safely add a new mapping by checking if it would conflict with existing mappings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_158

LANGUAGE: vim
CODE:
```
if mapcheck("_vv") == ""
   map _vv :set guifont=7x13<CR>
endif
```

----------------------------------------

TITLE: Asynchronous Request to All LSP Clients in Lua
DESCRIPTION: Sends an asynchronous request to all active LSP clients attached to a buffer, executing the handler with the combined results. Accepts buffer number, LSP method, parameters, and a completion handler, and returns a function to cancel all requests. Available since Neovim 0.5.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_23

LANGUAGE: Lua
CODE:
```
buf_request_all({bufnr}, {method}, {params}, {handler})
    Attributes: ~
        Since: 0.5.0

    Parameters: ~
      • {bufnr}    (`integer`) Buffer handle, or 0 for current.
      • {method}   (`string`) LSP method name
      • {params}   (`table|(fun(client: vim.lsp.Client, bufnr: integer): table?)?`)
                   Parameters to send to the server. Can also be passed as a
                   function that returns the params table for cases where
                   parameters are specific to the client.
      • {handler}  (`function`) Handler called after all requests are
                   completed. Server results are passed as a
                   `client_id:result` map.

    Return: ~
        (`function`) cancel Function that cancels all requests.
```

----------------------------------------

TITLE: LSP RPC Client Object Definition in Lua
DESCRIPTION: Defines the structure of a Client RPC object with methods for requests, notifications, and connection management.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_63

LANGUAGE: lua
CODE:
```
{
  request = function(method, params, callback, notify_reply_callback),
  notify = function(method, params),
  is_closing = function(),
  terminate = function()
}
```

----------------------------------------

TITLE: Command Registration for Non-Spec LSP Commands in Lua
DESCRIPTION: Registers client-side handlers for custom server-commands not defined in the LSP specification. Commands are defined in a table with functions triggered by LSP actions. Provides an example of registering a 'java.action.generateToStringPrompt' command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_25

LANGUAGE: Lua
CODE:
```
commands                                                    *vim.lsp.commands*
    If an LSP response contains a command which is not found in
    `vim.lsp.commands`, the command will be executed via the LSP server using
    `workspace/executeCommand`.

    Example: >lua
        vim.lsp.commands['java.action.generateToStringPrompt'] = function(_, ctx)
          require("jdtls.async").run(function()
            local _, result = request(ctx.bufnr, 'java/checkToStringStatus', ctx.params)
            local fields = ui.pick_many(result.fields, 'Include item in toString?', function(x)
              return string.format('%s: %s', x.name, x.type)
            end)
            local _, edit = request(ctx.bufnr, 'java/generateToString', { context = ctx.params; fields = fields; })
            vim.lsp.util.apply_workspace_edit(edit, offset_encoding)
          end)
        end
<
```

----------------------------------------

TITLE: CTRL-space mapping for triggering LSP completion
DESCRIPTION: Defines a key mapping to trigger LSP completion manually using CTRL-space, with a reminder to use CTRL-Y to select an item from the completion menu.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_41

LANGUAGE: lua
CODE:
```
-- Use CTRL-space to trigger LSP completion.
-- Use CTRL-Y to select an item. |complete_CTRL-Y|
vim.keymap.set('i', '<c-space>', function()
  vim.lsp.completion.get()
end)
```

----------------------------------------

TITLE: Setting up LSP-driven auto-completion
DESCRIPTION: Configures LSP-driven auto-completion with completeopt settings optimized for the LSP experience, including a custom conversion function to clean up completion items.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_40

LANGUAGE: lua
CODE:
```
-- Works best with completeopt=noselect.
-- Use CTRL-Y to select an item. |complete_CTRL-Y|
vim.cmd[[set completeopt+=menuone,noselect,popup]]
vim.lsp.start({
  name = 'ts_ls',
  cmd = …,
  on_attach = function(client, bufnr)
    vim.lsp.completion.enable(true, client.id, bufnr, {
      autotrigger = true,
      convert = function(item)
        return { abbr = item.label:gsub('%b()', '') }
      end,
    })
  end,
})
```

----------------------------------------

TITLE: Starting an LSP Client in Neovim
DESCRIPTION: Demonstrates how to create and start a new LSP client in Neovim. The example configures a language server with a name, command to execute, and root directory detection based on project files. This is typically used in a FileType autocmd or ftplugin file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_31

LANGUAGE: lua
CODE:
```
vim.lsp.start({
   name = 'my-server-name',
   cmd = {'name-of-language-server-executable'},
   root_dir = vim.fs.root(0, {'pyproject.toml', 'setup.py'}),
})
```

----------------------------------------

TITLE: Enabling LSP Configuration
DESCRIPTION: Example showing how to enable a previously defined LSP configuration using vim.lsp.enable().
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_1

LANGUAGE: lua
CODE:
```
vim.lsp.enable('luals')
```

----------------------------------------

TITLE: Basic Try-Catch-Finally Structure
DESCRIPTION: Illustrates the complete structure of a try-catch-finally block in Vim script, showing the proper syntax and organization.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_119

LANGUAGE: vim
CODE:
```
:try
:  ...
:  ...             TRY BLOCK
:  ...
:catch /{pattern}/
:  ...
:  ...             CATCH CLAUSE
:  ...
:catch /{pattern}/
:  ...
:  ...             CATCH CLAUSE
:  ...
:finally
:  ...
:  ...             FINALLY CLAUSE
:  ...
:endtry
```

----------------------------------------

TITLE: Sending Notifications to LSP in Lua
DESCRIPTION: Implements the `textDocument/did…` notifications required to track a buffer for any language server. The function attaches the specified client to a buffer, ensuring it receives change notifications. Required parameters include the buffer number and client id. Returns true on successful attachment.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_19

LANGUAGE: Lua
CODE:
```
buf_attach_client({bufnr}, {client_id})          *vim.lsp.buf_attach_client()*
    Parameters: ~
      • {bufnr}      (`integer`) Buffer handle, or 0 for current
      • {client_id}  (`integer`) Client id

    Return: ~
        (`boolean`) success `true` if client was attached successfully;
        `false` otherwise
```

----------------------------------------

TITLE: Setting Extended Marks in Neovim Buffers
DESCRIPTION: Function to create or modify extmarks in Neovim buffers. Supports range highlighting, virtual text, signs, and various display options. Used for buffer annotations and text decorations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_66

LANGUAGE: vimdoc
CODE:
```
nvim_buf_set_extmark({buffer}, {ns_id}, {line}, {col}, {opts})
```

----------------------------------------

TITLE: Basic Map Commands Overview in Neovim
DESCRIPTION: This section outlines various commands used for defining, removing, and listing key mappings in Neovim. It explains the concepts of left-hand side (lhs) and right-hand side (rhs) within these commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:map {lhs} {rhs}
```

LANGUAGE: vim
CODE:
```
:nm[ap] {lhs} {rhs}
```

LANGUAGE: vim
CODE:
```
:vm[ap] {lhs} {rhs}
```

LANGUAGE: vim
CODE:
```
:xm[ap] {lhs} {rhs}
```

LANGUAGE: vim
CODE:
```
:smap {lhs} {rhs}
```

LANGUAGE: vim
CODE:
```
:om[ap] {lhs} {rhs}
```

LANGUAGE: vim
CODE:
```
:map! {lhs} {rhs}
```

LANGUAGE: vim
CODE:
```
:im[ap] {lhs} {rhs}
```

LANGUAGE: vim
CODE:
```
:lm[ap] {lhs} {rhs}
```

LANGUAGE: vim
CODE:
```
:cm[ap] {lhs} {rhs}
```

LANGUAGE: vim
CODE:
```
:tma[p] {lhs} {rhs}
```

----------------------------------------

TITLE: Setting Basic Vim Configuration Options
DESCRIPTION: Basic configuration settings for Vim including backup and history options
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
set backup
set history=50
```

----------------------------------------

TITLE: Configuring Diagnostic Signs in Neovim with Lua
DESCRIPTION: This code snippet demonstrates how to configure the sign settings for different diagnostic severities within Neovim using Lua. It specifically sets configuration for signs like text, line highlighting, and number highlighting per the severity of the diagnostics. The snippet requires Neovim with a properly configured Lua environment. The inputs include diagnostic severity settings, and it modifies the visual representation of diagnostics in the UI.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_5

LANGUAGE: lua
CODE:
```
-- Highlight entire line for errors
-- Highlight the line number for warnings
vim.diagnostic.config({
    signs = {
        text = {
            [vim.diagnostic.severity.ERROR] = '',
            [vim.diagnostic.severity.WARN] = '',
        },
        linehl = {
            [vim.diagnostic.severity.ERROR] = 'ErrorMsg',
        },
        numhl = {
            [vim.diagnostic.severity.WARN] = 'WarningMsg',
        },
    },
})
```

----------------------------------------

TITLE: Basic Filetype Detection Autocommand
DESCRIPTION: Vim autocommand configuration to detect files with a specific extension (.xyz) and set their filetype accordingly. This goes in a custom filetype.vim file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
augroup filetypedetect
au BufNewFile,BufRead *.xyz	setf xyz
augroup END
```

----------------------------------------

TITLE: Highlighting Text with matchaddpos() in Vim
DESCRIPTION: Demonstrates using matchaddpos() to highlight specific positions in a buffer, then deleting the highlight using matchdelete(). This is faster than matchadd() for simple highlighting tasks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_165

LANGUAGE: vim
CODE:
```
highlight MyGroup ctermbg=green guibg=green
let m = matchaddpos("MyGroup", [[23, 24], 34])

```

LANGUAGE: vim
CODE:
```
call matchdelete(m)

```

----------------------------------------

TITLE: Handling LspRequest event in Lua
DESCRIPTION: This snippet demonstrates how to handle the LspRequest event, which is triggered for every change to the request's status. It tracks pending, canceling, and finished requests based on the request type.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_17

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd('LspRequest', {
  callback = function(args)
    local bufnr = args.buf
    local client_id = args.data.client_id
    local request_id = args.data.request_id
    local request = args.data.request
    if request.type == 'pending' then
      -- do something with pending requests
      track_pending(client_id, bufnr, request_id, request)
    elseif request.type == 'cancel' then
      -- do something with pending cancel requests
      track_canceling(client_id, bufnr, request_id, request)
    elseif request.type == 'complete' then
      -- do something with finished requests. this pending
      -- request entry is about to be removed since it is complete
      track_finish(client_id, bufnr, request_id, request)
    end
  end,
})
```

----------------------------------------

TITLE: Creating an Autocommand in Vim
DESCRIPTION: This snippet demonstrates how to create an autocommand that triggers a function just before writing a buffer to a file. The defined function updates a date stamp in the file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
:autocmd BufWritePre *  call DateInsert()
```

----------------------------------------

TITLE: Using map() Function with Lists and Dictionaries in Vim
DESCRIPTION: Demonstrates various ways to use the map() function in Vim, including with lists, dictionaries, and different types of callback functions (named function, lambda, and short lambda forms).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_156

LANGUAGE: vim
CODE:
```
call map(mylist, '"> " .. v:val .. " <"')

func KeyValue(key, val)
  return a:key .. '-' .. a:val
endfunc
call map(myDict, function('KeyValue'))

call map(myDict, {key, val -> key .. '-' .. val})

call map(myDict, {key -> 'item: ' .. key})

call map(myDict, {_, val -> 'item: ' .. val})

let tlist = map(copy(mylist), ' v:val .. "\t"')
```

----------------------------------------

TITLE: Loop Control in Vim Script
DESCRIPTION: Demonstrates while loops with continue and break statements in Vim script. Shows how to control loop execution flow.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_10

LANGUAGE: viml
CODE:
```
:while counter < 40
:  call do_something()
:  if skip_flag
:    continue
:  endif
:  if finished_flag
:    break
:  endif
:  sleep 50m
:endwhile
```

----------------------------------------

TITLE: Configuring Syntax Highlighting and Autocommands in Vim
DESCRIPTION: This snippet illustrates the use of autocommands to configure syntax highlighting in Vim based on file types. It shows how Vim uses these commands to load the appropriate syntax files from runtime paths, ensuring that each filetype is matched to its corresponding syntax. Dependencies include the presence of syntax and filetype vim scripts in the runtime path.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_6

LANGUAGE: Vim Script
CODE:
```
:au BufReadPost * if b:current_syntax == "csh"
:au BufReadPost *   do-some-things
:au BufReadPost * endif
```

LANGUAGE: Vim Script
CODE:
```
:let filetype_i = "asm"
:let b:asmsyntax = "nasm"
:let asmsyntax = "nasm"
```

----------------------------------------

TITLE: Creating Range Parameters for Current Position in Neovim LSP (Lua)
DESCRIPTION: Creates an object for LSP requests using the current position in the current buffer. Takes optional window ID and position encoding as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_58

LANGUAGE: lua
CODE:
```
make_range_params({window}, {position_encoding})
```

----------------------------------------

TITLE: Using For Loops with Lists in Vim
DESCRIPTION: Demonstrates how to iterate over lists using for loops in Vim, including using the range() function to create numeric lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
:let alist = ['one', 'two', 'three']
:for n in alist
:  echo n
:endfor

:for a in range(3)
:  echo a
:endfor

:for a in range(8, 4, -2)
:  echo a
:endfor
```

----------------------------------------

TITLE: Using Leader Mapping in Vim
DESCRIPTION: Shows how to define a mapping using the <Leader> prefix, which gets replaced with the value of mapleader variable. This mapping adds a new line in normal mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
map <Leader>A  oanother line<Esc>
```

----------------------------------------

TITLE: Advanced Filetype Detection with Multiple Patterns
DESCRIPTION: Extended filetype detection configuration that recognizes files both by extension and by directory location. Demonstrates how to handle multiple filetype patterns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
augroup filetypedetect
au BufNewFile,BufRead *.xyz			setf xyz
au BufNewFile,BufRead /usr/share/scripts/*	setf ruby
augroup END
```

----------------------------------------

TITLE: Basic Navigation Keys
DESCRIPTION: Home row keys for cursor movement in Vim's Normal mode: h (left), j (down), k (up), l (right).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
h   left
j   down
k   up
l   right
```

----------------------------------------

TITLE: Creating Autocommands with Lua Callback in Neovim
DESCRIPTION: Example of creating autocommands in Neovim using Lua. This creates event handlers for BufEnter and BufWinEnter events that trigger on C and header files and prints the event information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_84

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd({'BufEnter', 'BufWinEnter'}, {
  pattern = {'*.c', '*.h'},
  callback = function(ev)
    print(string.format('event fired: %s', vim.inspect(ev)))
  end
})
```

----------------------------------------

TITLE: Highlighting Document References in Neovim LSP (Lua)
DESCRIPTION: Shows a list of document highlights for a specific buffer. Takes buffer id, references array, and position encoding as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_48

LANGUAGE: lua
CODE:
```
buf_highlight_references({bufnr}, {references}, {position_encoding})
```

----------------------------------------

TITLE: Converting LSP Locations to Quickfix Items in Neovim (Lua)
DESCRIPTION: Converts LSP locations to items suitable for quickfix and location lists. Calculates byte positions and sorts the items.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_53

LANGUAGE: lua
CODE:
```
locations_to_items({locations}, {position_encoding})
```

----------------------------------------

TITLE: Creating Empty Vimrc Configuration in Neovim
DESCRIPTION: Commands to create a new init.vim configuration file in the standard Neovim config directory
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_01.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:call mkdir(stdpath('config'),'p')
:exe 'edit' stdpath('config').'/init.vim'
:write
```

----------------------------------------

TITLE: Enabling Syntax Highlighting in Neovim
DESCRIPTION: Commands to enable syntax highlighting in Neovim. Shows two equivalent methods using :syntax enable or :syntax on which internally sources the syntax.vim file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
:syntax enable

:syntax on
```

----------------------------------------

TITLE: Disabling Semantic Highlights in Lua
DESCRIPTION: This snippet shows how to disable semantic highlights for functions and all semantic highlights using Lua's `vim.api.nvim_set_hl` function. It iterates through the highlight groups to clear them. This is usually placed within a `ColorScheme` autocommand.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_12

LANGUAGE: lua
CODE:
```
-- Hide semantic highlights for functions
vim.api.nvim_set_hl(0, '@lsp.type.function', {})

-- Hide all semantic highlights
for _, group in ipairs(vim.fn.getcompletion("@lsp", "highlight")) do
  vim.api.nvim_set_hl(0, group, {})
end
```

----------------------------------------

TITLE: Creating User-Configurable Mappings in VimScript
DESCRIPTION: This snippet demonstrates how to create a mapping that can be customized by the user. It uses the <Leader> key and checks for existing mappings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_32

LANGUAGE: VimScript
CODE:
```
if !hasmapto('<Plug>TypecorrAdd;')
  map <unique> <Leader>a  <Plug>TypecorrAdd;
endif
```

----------------------------------------

TITLE: Applying Text Document Edit in Neovim LSP (Lua)
DESCRIPTION: Applies a TextDocumentEdit, which is a list of changes to a single document. Takes the edit object, an optional index, and the position encoding as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_44

LANGUAGE: lua
CODE:
```
vim.lsp.util.apply_text_document_edit(text_document_edit, index, position_encoding)
```

----------------------------------------

TITLE: Creating TreeSitter LanguageTree in Lua
DESCRIPTION: Demonstrates how to create a LanguageTree (parser object) for a given buffer and language using the vim.treesitter.get_parser() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_32

LANGUAGE: lua
CODE:
```
local parser = vim.treesitter.get_parser(bufnr, lang)
```

----------------------------------------

TITLE: Defining Character Classes in Vim Regular Expressions
DESCRIPTION: This snippet demonstrates various character class definitions used in Vim regular expressions. It includes predefined character classes for digits, hex digits, word characters, and more.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
\D  non-digit:            [^0-9]      */\D*
\x  hex digit:            [0-9A-Fa-f]  */\x*
\X  non-hex digit:        [^0-9A-Fa-f] */\X*
\o  octal digit:          [0-7]       */\o*
\O  non-octal digit:      [^0-7]      */\O*
\w  word character:       [0-9A-Za-z_] */\w*
\W  non-word character:   [^0-9A-Za-z_] */\W*
\h  head of word character: [A-Za-z_]   */\h*
\H  non-head of word character: [^A-Za-z_]  */\H*
\a  alphabetic character: [A-Za-z]     */\a*
\A  non-alphabetic character: [^A-Za-z]    */\A*
\l  lowercase character:  [a-z]       */\l*
\L  non-lowercase character: [^a-z]      */\L*
\u  uppercase character:  [A-Z]       */\u*
\U  non-uppercase character: [^A-Z]      */\U*
```

----------------------------------------

TITLE: Basic Autocommand Definition in Vim
DESCRIPTION: Example showing how to create an autocommand for HTML files that sources a related vim configuration file
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:au BufNewFile,BufRead *.html so <sfile>:h/html.vim
```

----------------------------------------

TITLE: Creating a TCP Echo Server using LibUV in Lua
DESCRIPTION: This snippet demonstrates the setup of a simple TCP echo server that binds to a local address and port, listens for incoming connections, and echoes back any received data. It uses the Lua bindings provided by the LibUV library to manage TCP network operations. The server prints a message indicating that it is listening for connections.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_0

LANGUAGE: lua
CODE:
```
local uv = vim.uv

local server = uv.new_tcp()
server:bind("127.0.0.1", 1337)
server:listen(128, function (err)
  assert(not err, err)
  local client = uv.new_tcp()
  server:accept(client)
  client:read_start(function (err, chunk)
    assert(not err, err)
    if chunk then
      client:write(chunk)
    else
      client:shutdown()
      client:close()
    end
  end)
end)
print("TCP server listening at 127.0.0.1 port 1337")
uv.run() -- an explicit run call is necessary outside of luvit
```

----------------------------------------

TITLE: Configuring LSP Client Defaults in Lua
DESCRIPTION: Sets default configurations for LSP clients or all clients using the special name '.*'. Offers examples such as adding root markers or capabilities. Configurations are either accessed or redefined through table-indexing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_26

LANGUAGE: Lua
CODE:
```
config({name}, {cfg})                                       *vim.lsp.config()*
    Sets the default configuration for an LSP client (or all clients if the
    special name "*" is used).

    Examples:
    • Add root markers for ALL clients: >lua
      vim.lsp.config('*', {
        root_markers = { '.git', '.hg' },
      })
<
    • Add capabilities to ALL clients: >lua
      vim.lsp.config('*', {
      capabilities = {
        textDocument = {
          semanticTokens = {
            multilineTokenSupport = true,
          }
        }
      }
    })
<
```

----------------------------------------

TITLE: Defining a Function in Dictionary Context - Vim Script
DESCRIPTION: This snippet demonstrates how to define a function that acts on a dictionary using the 'dict' attribute to access its properties via 'self'. The function calculates the length of the 'data' attribute. It returns the length of the data stored in the 'data' entry of the dictionary.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_58

LANGUAGE: vim
CODE:
```
:function Mylen() dict
:   return len(self.data)
:endfunction
:let mydict = {'data': [0, 1, 2, 3], 'len': function("Mylen")}
:echo mydict.len()
```

----------------------------------------

TITLE: Configuring LSP Folding with Treesitter Fallback in Lua
DESCRIPTION: Sets up folding configuration that uses LSP folding if available, and falls back to treesitter folding. The code sets the foldmethod to 'expr', configures treesitter for folding by default, and creates an autocommand to use LSP folding when a client with the folding capability connects.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_30

LANGUAGE: lua
CODE:
```
vim.o.foldmethod = 'expr'
-- Default to treesitter folding
vim.o.foldexpr = 'v:lua.vim.treesitter.foldexpr()'
-- Prefer LSP folding if client supports it
vim.api.nvim_create_autocmd('LspAttach', {
  callback = function(args)
    local client = vim.lsp.get_client_by_id(args.data.client_id)
    if client:supports_method('textDocument/foldingRange') then
      local win = vim.api.nvim_get_current_win()
      vim.wo[win][0].foldexpr = 'v:lua.vim.lsp.foldexpr()'
    end
  end,
})
```

----------------------------------------

TITLE: Synchronous Request to LSP Clients in Lua
DESCRIPTION: Sends a synchronous request to all server clients and waits for the responses. Parameters include buffer number, LSP method, parameters, and an optional timeout in milliseconds. Blocks Neovim while waiting for results and is effective from version 0.5.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_24

LANGUAGE: Lua
CODE:
```
buf_request_sync({bufnr}, {method}, {params}, {timeout_ms})
    Attributes: ~
        Since: 0.5.0

    Parameters: ~
      • {bufnr}       (`integer`) Buffer handle, or 0 for current.
      • {method}      (`string`) LSP method name
      • {params}      (`table|(fun(client: vim.lsp.Client, bufnr: integer): table?)?`)
                      Parameters to send to the server. Can also be passed as
                      a function that returns the params table for cases where
                      parameters are specific to the client.
      • {timeout_ms}  (`integer?`, default: `1000`) Maximum time in
                      milliseconds to wait for a result.

    Return (multiple): ~
        (`table<integer, {error: lsp.ResponseError?, result: any}>?`) result
        Map of client_id:request_result.
        (`string?`) err On timeout, cancel, or error, `err` is a string
        describing the failure reason, and `result` is nil.
```

----------------------------------------

TITLE: Expanding Tabs to Spaces
DESCRIPTION: Configuring Vim to convert tab key presses into spaces, ensuring consistent white space representation
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:set expandtab
```

----------------------------------------

TITLE: Comparing List References vs. Values in Vim
DESCRIPTION: Shows how the 'is' operator checks if two variables reference the same list, while '==' checks if two lists have the same values.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
:let alist = [1, 2, 3]
:let blist = [1, 2, 3]
:echo alist is blist
```

----------------------------------------

TITLE: LSP Server Startup with Custom Handlers
DESCRIPTION: Demonstrates starting an LSP server with custom handlers for specific methods
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_9

LANGUAGE: lua
CODE:
```
vim.lsp.start {
  ..., -- Other configuration omitted
  handlers = {
    ['textDocument/publishDiagnostics'] = my_custom_diagnostics_handler
  },
}
```

----------------------------------------

TITLE: Handling LspAttach event in Lua
DESCRIPTION: This snippet shows how to handle the LspAttach event, which is triggered after an LSP client attaches to a buffer. It overrides the default `client/registerCapability` handler to call custom on_attach logic.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_13

LANGUAGE: lua
CODE:
```
vim.lsp.handlers['client/registerCapability'] = (function(overridden)
  return function(err, res, ctx)
    local result = overridden(err, res, ctx)
    local client = vim.lsp.get_client_by_id(ctx.client_id)
    if not client then
      return
    end
    -- Call your custom on_attach logic...
    -- my_on_attach(client, vim.api.nvim_get_current_buf())
    return result
  end
end)(vim.lsp.handlers['client/registerCapability'])
```

----------------------------------------

TITLE: Placing Multiple Signs in Vim Buffers
DESCRIPTION: Examples of using sign_placelist() to place multiple signs at once. This function takes a list of sign definitions and places them in the specified buffers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_240

LANGUAGE: vim
CODE:
```
" Place sign s1 with id 5 at line 20 and id 10 at line
" 30 in buffer a.c
let [n1, n2] = sign_placelist([
    \ {'id' : 5,
    \  'name' : 's1',
    \  'buffer' : 'a.c',
    \  'lnum' : 20},
    \ {'id' : 10,
    \  'name' : 's1',
    \  'buffer' : 'a.c',
    \  'lnum' : 30}
    \ ])

" Place sign s1 in buffer a.c at line 40 and 50
" with auto-generated identifiers
let [n1, n2] = sign_placelist([
    \ {'name' : 's1',
    \  'buffer' : 'a.c',
    \  'lnum' : 40},
    \ {'name' : 's1',
    \  'buffer' : 'a.c',
    \  'lnum' : 50}
    \ ])
```

----------------------------------------

TITLE: Defining a Basic Vim Function
DESCRIPTION: Demonstrates the basic structure for defining a function in Vim, including function name, arguments, and body.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
:function {name}({var1}, {var2}, ...)
:  {body}
:endfunction
```

----------------------------------------

TITLE: Using Script-Local Variables in Vim Functions
DESCRIPTION: Example showing how to initialize and modify script-local variables that persist throughout plugin execution.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_38

LANGUAGE: vim
CODE:
```
let s:count = 4
..
function s:Add(from, correct)
..
  let s:count = s:count + 1
  echo s:count .. " corrections now"
endfunction
```

----------------------------------------

TITLE: List Manipulation Functions in Vim
DESCRIPTION: Examples of common functions for adding, removing, and manipulating items in Vim lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_33

LANGUAGE: vim
CODE:
```
:call insert(list, 'a')		" prepend item 'a'
:call insert(list, 'a', 3)	" insert item 'a' before list[3]
:call add(list, "new")		" append String item
:call add(list, [1, 2])		" append a List as one new item
:call extend(list, [1, 2])	" extend the list with two more items
:let i = remove(list, 3)	" remove item 3
:unlet list[3]			" idem
:let l = remove(list, 3, -1)	" remove items 3 to last item
:unlet list[3 : ]		" idem
:call filter(list, 'v:val !~ "x"')  " remove items with an 'x'
```

----------------------------------------

TITLE: Hover Information Display with LSP in Lua
DESCRIPTION: Shows how to configure Neovim to display hover information for symbols under the cursor using LSP, with an option to disable highlights. This setup is for Neovim users with LSP enabled.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_37

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd('ColorScheme', {
  callback = function()
    vim.api.nvim_set_hl(0, 'LspReferenceTarget', {})
  end,
})
```

----------------------------------------

TITLE: Splitting a window with another file
DESCRIPTION: This command opens a new window and starts editing the specified file. If a filename is provided, it will open that file in the new window; otherwise, it will open a new, empty file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
	:split two.c
```

----------------------------------------

TITLE: Using function() to Create Partial Functions in Vim Script
DESCRIPTION: Demonstrates how to use the function() call to create partial functions with predefined arguments in Vim script. It shows examples of passing arguments, using methods, and nesting function() calls.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_78

LANGUAGE: vim
CODE:
```
func Callback(arg1, arg2, name)
"...
endfunc
let Partial = function('Callback', ['one', 'two'])
"...
call Partial('name')
```

LANGUAGE: vim
CODE:
```
func Callback(one, two, three)
"...
endfunc
let Partial = function('Callback', ['two'])
"...
eval 'one'->Partial('three')
```

LANGUAGE: vim
CODE:
```
func Callback(arg1, arg2, name)
"...
endfunc
let Func = function('Callback', ['one'])
let Func2 = function(Func, ['two'])
"...
call Func2('name')
```

----------------------------------------

TITLE: Verbose Highlight Query
DESCRIPTION: Command to show detailed highlight information including where it was last set
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_188

LANGUAGE: vim
CODE:
```
:verbose hi Comment
```

----------------------------------------

TITLE: Registering Callbacks for LanguageTree (Lua)
DESCRIPTION: Registers callbacks for various events in the LanguageTree, such as changes to the tree, child additions/removals, and buffer detachment. Callbacks can be applied recursively to all children.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_38

LANGUAGE: lua
CODE:
```
LanguageTree:register_cbs({cbs}, {recursive})
```

----------------------------------------

TITLE: Checking Existing Mappings in Vim
DESCRIPTION: Shows how to check if a mapping already exists to a function and create a mapping only if one doesn't exist. This is useful in Vim scripts to avoid overriding user-defined mappings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_124

LANGUAGE: vim
CODE:
```
if !hasmapto('\ABCdoit')
   map <Leader>d \ABCdoit
endif
```

----------------------------------------

TITLE: Searching for 'foo' and Replacing with 'bar' in Vim
DESCRIPTION: This snippet demonstrates how to search for matches with a pattern 'foo' and replace it with 'bar' using Vim commands. It uses the search command, change command, and repeat search functionality.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
/foo<CR>    find "foo"
c//e<CR>    change until end of match
bar<Esc>    type replacement
//<CR>      go to start of next match
c//e<CR>    change until end of match
beep<Esc>   type another replacement
```

----------------------------------------

TITLE: For Loop Over List Items in Vim
DESCRIPTION: Demonstrates how to iterate over each item in a list using a for loop.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_35

LANGUAGE: vim
CODE:
```
:for item in mylist
:   call Doit(item)
:endfor
```

----------------------------------------

TITLE: Navigating to Quickfix Errors
DESCRIPTION: Commands for displaying and navigating to errors in the quickfix list, including jumping to specific error numbers and moving through errors sequentially.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:cc[!] [nr]
:[nr]cc[!]
```

----------------------------------------

TITLE: Creating and Manipulating Lists in Vim
DESCRIPTION: Shows how to create lists, add items to them, and concatenate lists in Vim scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
:let alist = ['aap', 'mies', 'noot']
:let alist = []
:call add(alist, 'foo')
:call add(alist, 'bar')
:echo alist
:echo alist + ['foo', 'bar']
:let alist = ['one']
:call extend(alist, ['two', 'three'])
:echo alist
```

----------------------------------------

TITLE: Executing External Commands in Vim
DESCRIPTION: Commands for executing external shell commands and looking up keywords using the 'keywordprg' program.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:!{command}	execute {command} with a shell
K		   K		lookup keyword under the cursor with
				   'keywordprg' program (default: "man")
```

----------------------------------------

TITLE: Setting Buffer Lines in Lua
DESCRIPTION: Sets (replaces) a line-range in the buffer. Allows for inserting, replacing, or deleting lines using start and end indices.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_57

LANGUAGE: lua
CODE:
```
nvim_buf_set_lines({buffer}, {start}, {end}, {strict_indexing}, {replacement})
```

----------------------------------------

TITLE: Handling LspNotify event in Lua
DESCRIPTION: This snippet shows how to handle the LspNotify event, which is triggered after each successful notification sent to an LSP server. It extracts the client ID, method, and parameters from the event data.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_15

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd('LspNotify', {
  callback = function(args)
    local bufnr = args.buf
    local client_id = args.data.client_id
    local method = args.data.method
    local params = args.data.params

    -- do something with the notification
    if method == 'textDocument/...' then
      update_buffer(bufnr)
    end
  end,
})
```

----------------------------------------

TITLE: Calling Funcref with Argument List Using call() in Vimscript
DESCRIPTION: This snippet demonstrates how to invoke a Funcref with a list of arguments using the `call()` function. This is useful when the arguments are stored in a list variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
	:let r = call(Fn, mylist)
```

----------------------------------------

TITLE: Demonstrating Variable Scopes in Vim
DESCRIPTION: This snippet shows how to use different variable scopes in Vim, including buffer-local, window-local, tab-local, global, and script-local variables. It also demonstrates how to access and manipulate these variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_85

LANGUAGE: vim
CODE:
```
:for k in keys(s:)
:    unlet s:[k]
:endfor

:if my_changedtick != b:changedtick
:   let my_changedtick = b:changedtick
:   call My_Update()
:endif

let s:counter = 0
function MyCounter()
  let s:counter = s:counter + 1
  echo s:counter
endfunction
command Tick call MyCounter()

let s:counter = 0
command Tick let s:counter = s:counter + 1 | echo s:counter
```

----------------------------------------

TITLE: Configuring Diagnostic Options Globally or by Namespace - Lua
DESCRIPTION: Configures global or namespace-specific diagnostic options in Neovim. The function allows users to enable or disable virtual text for diagnostics, with priority given to ephemeral configurations. It accepts an options table and a namespace identifier for granular control.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_9

LANGUAGE: Lua
CODE:
```
vim.diagnostic.config({ virtual_text = true })
```

----------------------------------------

TITLE: Defining an Autocommand Group in Vim
DESCRIPTION: This snippet shows how to define an autocommand group to manage related commands. It ensures that existing autocommands are cleared before defining new ones.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
:augroup updateDate
:  autocmd!
:  autocmd BufWritePre *  call DateInsert()
:augroup END
```

----------------------------------------

TITLE: Handling DiagnosticChanged Event in Neovim with Lua
DESCRIPTION: This snippet shows how to use the DiagnosticChanged event in Neovim, utilizing Lua to handle changes in diagnostics. An autocmd is created to automatically trigger a callback function, which receives new diagnostic data when changes occur. This requires Neovim version supporting Lua and the event API. It processes input as diagnostic change data and outputs this information using `vim.print` for debugging or logging purposes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_6

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd('DiagnosticChanged', {
  callback = function(args)
    local diagnostics = args.data.diagnostics
    vim.print(diagnostics)
  end,
})
```

----------------------------------------

TITLE: Auto-Completion Implementation in Lua
DESCRIPTION: Basic auto-completion setup using Neovim's Lua API, triggering completion on specific characters without external plugins
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_5

LANGUAGE: lua
CODE:
```
  local triggers = {'.'}\n  vim.api.nvim_create_autocmd('InsertCharPre', {\n    buffer = vim.api.nvim_get_current_buf(),\n    callback = function()\n      if vim.fn.pumvisible() == 1 or vim.fn.state('m') == 'm' then\n        return\n      end\n      local char = vim.v.char\n      if vim.list_contains(triggers, char) then\n        local key = vim.keycode('<C-x><C-n>')\n        vim.api.nvim_feedkeys(key, 'm', false)\n      end\n    end\n  })
```

----------------------------------------

TITLE: Enabling Filetype Detection and Plugins
DESCRIPTION: Configuration to enable filetype detection, plugins, and indentation
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
filetype plugin indent on
```

----------------------------------------

TITLE: Attaching to Buffer Events - Lua
DESCRIPTION: Attaches handlers for buffer update events, allowing for monitoring changes in buffer content. This function is particularly useful for implementing features that react to user input or other changes in buffers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_52

LANGUAGE: lua
CODE:
```
nvim_buf_attach({buffer}, {send_buffer}, {opts})  -- Activates updates on the specified buffer with optional callbacks
```

----------------------------------------

TITLE: Setting Extmark in Buffer in Lua
DESCRIPTION: Creates or updates an extmark in the buffer. Allows for specifying various options like highlighting, virtual text, and signs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_64

LANGUAGE: lua
CODE:
```
nvim_buf_set_extmark({buffer}, {ns_id}, {line}, {col}, {opts})
```

----------------------------------------

TITLE: Retrieving Named Node for Range in LanguageTree (Lua)
DESCRIPTION: Gets the smallest named node that contains a specified range. Takes a range table and optional settings as parameters. Returns a TSNode or nil.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_34

LANGUAGE: lua
CODE:
```
LanguageTree:named_node_for_range({range}, {opts})
```

----------------------------------------

TITLE: Complex Normal Mode Command Execution
DESCRIPTION: This snippet shows using the ':normal' command within ':execute' to perform a complex sequence of commands, inserting a line with the current date in files with a '.chg' extension.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
:autocmd BufReadPost *.chg execute "normal ONew entry:\<Esc>" | \ 1read !date
```

----------------------------------------

TITLE: Folding Expression Integration for Neovim LSP in Lua
DESCRIPTION: Provides integration between the built-in client and a `foldexpr` function. Demonstrates setting Neovim's `foldmethod` to expr and the `foldexpr` to use the Lua interface with LSP.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_29

LANGUAGE: Lua
CODE:
```
foldexpr({lnum})                                          *vim.lsp.foldexpr()*
    To use, set 'foldmethod' to "expr" and set the value of 'foldexpr': >lua
        vim.o.foldmethod = 'expr'
        vim.o.foldexpr = 'v:lua.vim.lsp.foldexpr()'
<
```

----------------------------------------

TITLE: Basic File Editing Commands in Vim
DESCRIPTION: Essential commands for opening and editing multiple files in Vim, including handling unsaved changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:edit foo.txt
:write
:edit! foo.txt
:hide edit foo.txt
```

----------------------------------------

TITLE: Adding Buffer and Setting Line in Neovim using Vim Script
DESCRIPTION: This snippet demonstrates how to create a new buffer with a specified name, load it, and set its content to a list of strings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
let bufnr = bufadd('someName')
call bufload(bufnr)
call setbufline(bufnr, 1, ['some', 'text'])
```

----------------------------------------

TITLE: Configuring Diagnostic Signs in Neovim with Lua
DESCRIPTION: This code snippet demonstrates how to configure diagnostic signs in Neovim using Lua. It shows how to map diagnostic severities to specific sign texts, effectively customizing the visual representation of errors, warnings, information, and hints in the sign column.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_7

LANGUAGE: Lua
CODE:
```
"vim.diagnostic.config({
  signs = { text = { [vim.diagnostic.severity.ERROR] = 'E', ... } }
})"
```

----------------------------------------

TITLE: Document Highlights with LSP in Lua
DESCRIPTION: Illustrates how to setup autocmd events in Neovim that trigger LSP document highlights upon certain actions like cursor hold or movement. Requires Neovim configured with LSP and appropriate highlight groups defined.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_36

LANGUAGE: lua
CODE:
```
autocmd CursorHold  <buffer> lua vim.lsp.buf.document_highlight()
autocmd CursorHoldI <buffer> lua vim.lsp.buf.document_highlight()
autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
```

----------------------------------------

TITLE: Using LocalLeader for Buffer-Local Mappings in Vim
DESCRIPTION: Defines a buffer-local mapping using <LocalLeader>, which uses the maplocalleader variable instead of mapleader. Useful for filetype-specific plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
:map <buffer> <LocalLeader>A  oanother line<Esc>
```

----------------------------------------

TITLE: Creating Floating Window with Scratch Buffer
DESCRIPTION: Example showing how to create a floating window with a scratch buffer, set its content and styling options
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
let buf = nvim_create_buf(v:false, v:true)
call nvim_buf_set_lines(buf, 0, -1, v:true, ["test", "text"])
let opts = {'relative': 'cursor', 'width': 10, 'height': 2, 'col': 0,
    \ 'row': 1, 'anchor': 'NW', 'style': 'minimal'}
let win = nvim_open_win(buf, 0, opts)
" optional: change highlight, otherwise Pmenu is used
call nvim_set_option_value('winhl', 'Normal:MyHighlight', {'win': win})
```

----------------------------------------

TITLE: Expression Mapping for List Numbering in Neovim
DESCRIPTION: This example demonstrates how to create expression mappings that insert a list number which increases with each use, and another mapping to reset the count. It utilizes global variables and functions to manage the list numbering logic.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
	let counter = 0
	inoremap <expr> <C-L> ListItem()
	inoremap <expr> <C-R> ListReset()

	func ListItem()
	  let g:counter += 1
	  return g:counter .. '. '
	endfunc

	func ListReset()
	  let g:counter = 0
	  return ''
	endfunc
```

----------------------------------------

TITLE: String Escape Example in Vim
DESCRIPTION: Demonstrates escaping special characters in strings using the escape() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_57

LANGUAGE: vim
CODE:
```
echo escape('c:\program files\vim', ' \')
```

----------------------------------------

TITLE: Vim Function with Variable Arguments
DESCRIPTION: Shows how to define a function that accepts a variable number of arguments and processes them.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
:function Show(start, ...)
:  echohl Title
:  echo "start is " .. a:start
:  echohl None
:  let index = 1
:  while index <= a:0
:    echo "  Arg " .. index .. " is " .. a:{index}
:    let index = index + 1
:  endwhile
:  echo ""
:endfunction
```

----------------------------------------

TITLE: Setting Color Scheme in Vim
DESCRIPTION: Command to change the color scheme to 'evening' theme
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:colorscheme evening
```

----------------------------------------

TITLE: Setting Custom TreeSitter Query in Lua
DESCRIPTION: Shows how to set a custom runtime query for a specific language. This example enables spellchecking of C identifiers by extending the default highlights query.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_29

LANGUAGE: lua
CODE:
```
vim.treesitter.query.set(
  'c',
  'highlights',
  [[;inherits c
  (identifier) @spell]])
]])
```

----------------------------------------

TITLE: Embedding Nvim using Vimscript and RPC
DESCRIPTION: A Vimscript example demonstrating how to embed Nvim via jobstart() and communicate using RPC functions. It shows starting a Nvim instance, sending an evaluation request, and closing the connection.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
let nvim = jobstart(['nvim', '--embed'], {'rpc': v:true})
echo rpcrequest(nvim, 'nvim_eval', '"Hello " . "world!"')
call jobstop(nvim)
```

----------------------------------------

TITLE: Using has() for feature detection in Vim
DESCRIPTION: Example of safely using the has() function to check for a feature before using functionality that requires it, avoiding syntax errors by placing if and endif on separate lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_118

LANGUAGE: vim
CODE:
```
if has('feature')
  let x = this_breaks_without_the_feature()
endif
```

----------------------------------------

TITLE: Handling Mouse Events for Background Selection
DESCRIPTION: These methods handle mouse move, press, and release events for the background selection widget. They manage hover states, selection, and deletion of backgrounds.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_5

LANGUAGE: C++
CODE:
```
void BackgroundBox::Inner::mouseMoveEvent(QMouseEvent *e) {
	const auto newOver = [&] {
		const auto x = e->pos().x();
		const auto y = e->pos().y();
		const auto width = st::backgroundSize.width();
		const auto height = st::backgroundSize.height();
		const auto skip = st::backgroundPadding;
		const auto row = int((y - skip) / (height + skip));
		const auto column = int((x - skip) / (width + skip));
		const auto result = row * kBackgroundsInRow + column;
		if (y - row * (height + skip) > skip + height) {
			return Selection();
		} else if (x - column * (width + skip) > skip + width) {
			return Selection();
		} else if (result >= _papers.size()) {
			return Selection();
		}
		auto &data = _papers[result].data;
		const auto deleteLeft = (column + 1) * (width + skip)
			- st::stickerPanDeleteIconBg.width();
		const auto deleteBottom = row * (height + skip) + skip
			+ st::stickerPanDeleteIconBg.height();
		const auto inDelete = (x >= deleteLeft)
			&& (y < deleteBottom)
			&& Data::IsCloudWallPaper(data)
			&& !Data::IsDefaultWallPaper(data)
			&& !Data::IsLegacy2DefaultWallPaper(data)
			&& !Data::IsLegacy3DefaultWallPaper(data)
			&& (_currentId != data.id());
		return (result >= _papers.size())
			? Selection()
			: inDelete
			? Selection(DeleteSelected{ result })
			: Selection(Selected{ result });
	}();
	if (_over != newOver) {
		repaintPaper(getSelectionIndex(_over));
		_over = newOver;
		repaintPaper(getSelectionIndex(_over));
		setCursor((!v::is_null(_over) || !v::is_null(_overDown))
			? style::cur_pointer
			: style::cur_default);
	}
}

void BackgroundBox::Inner::mousePressEvent(QMouseEvent *e) {
	_overDown = _over;
}

void BackgroundBox::Inner::mouseReleaseEvent(QMouseEvent *e) {
	if (base::take(_overDown) == _over && !v::is_null(_over)) {
		const auto index = getSelectionIndex(_over);
		if (index >= 0 && index < _papers.size()) {
			if (std::get_if<DeleteSelected>(&_over)) {
				_backgroundRemove.fire_copy(_papers[index].data);
			} else if (std::get_if<Selected>(&_over)) {
				auto &paper = _papers[index];
				if (!paper.dataMedia) {
					if (const auto document = paper.data.document()) {
						// Keep it alive while it is on the screen.
						paper.dataMedia = document->createMediaView();
					}
				}
				_backgroundChosen.fire_copy(paper.data);
			}
		}
	} else if (v::is_null(_over)) {
		setCursor(style::cur_default);
	}
}
```

----------------------------------------

TITLE: Converting Diagnostics to Quickfix Items in Vim
DESCRIPTION: The `vim.diagnostic.toqflist` function converts a list of diagnostics into quickfix list items. It requires the diagnostics to be in a `vim.Diagnostic[]` format and returns a table of quickfix list items which can be used with `setqflist()` or `setloclist()`.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
toqflist({diagnostics})                            *vim.diagnostic.toqflist()*
    Convert a list of diagnostics to a list of quickfix items that can be
    passed to |setqflist()| or |setloclist()|.

    Parameters: ~
      • {diagnostics}  (`vim.Diagnostic[]`) See |vim.Diagnostic|.

    Return: ~
        (`table[]`) Quickfix list items |setqflist-what|
```

----------------------------------------

TITLE: Parsing Diagnostics from a String - Lua
DESCRIPTION: Processes a string containing diagnostic information, extracting severity, line number, column, and message into a structured format. This function is particularly useful for integrating diagnostics from external tools or linters into Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_14

LANGUAGE: Lua
CODE:
```
local s = "WARNING filename:27:3: Variable 'foo' does not exist"
local pattern = "^(%w+) %w+:(%d+):(%d+): (.+)$"
local groups = { "severity", "lnum", "col", "message" }
vim.diagnostic.match(s, pattern, groups, { WARNING = vim.diagnostic.WARN })
```

----------------------------------------

TITLE: Mapping Function Key to Insert Date in Insert Mode
DESCRIPTION: This snippet shows how to map the F2 key to insert the current date below the cursor in Insert mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
:imap <F2> <CR>Date: <Esc>:read !date<CR>kJ
```

----------------------------------------

TITLE: Recursive Mapping for Version Number Update
DESCRIPTION: This recursive mapping updates version numbers in multiple files, demonstrating how to use mappings to repeat actions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
:map ,, :s/5.1/5.2/<CR>:wnext<CR>,,
```

----------------------------------------

TITLE: Appending Text to Buffer in Vimscript
DESCRIPTION: The append() function adds text lines to the current buffer below a specified line number. It can append single lines or multiple lines from a List.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_5

LANGUAGE: vimscript
CODE:
```
let failed = append(line('$'), "# THE END")
```

LANGUAGE: vimscript
CODE:
```
let failed = append(0, ["Chapter 1", "the beginning"])
```

----------------------------------------

TITLE: Setting Decoration Provider in Neovim Lua API
DESCRIPTION: Sets or changes the decoration provider for a namespace. This function allows Lua callbacks to be triggered during redraw, primarily for setting extmarks. Available since Neovim 0.5.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_68

LANGUAGE: lua
CODE:
```
nvim_set_decoration_provider({ns_id}, {opts})
```

----------------------------------------

TITLE: Catching Specific Exceptions in Vim Script
DESCRIPTION: Demonstrates how to catch specific types of exceptions using pattern matching in catch statements.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_106

LANGUAGE: vim
CODE:
```
try | sleep 100 | catch /^Vim:Interrupt$/ | endtry
try | edit | catch /^Vim(edit):E\d\+/ | echo "error" | endtry
```

----------------------------------------

TITLE: Enabling or Disabling Diagnostics - Lua
DESCRIPTION: Toggles the diagnostic display state in Neovim. It allows users to enable or disable diagnostics globally or for specific namespaces and buffers, providing versatility in controlling the visibility of diagnostic information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_11

LANGUAGE: Lua
CODE:
```
vim.diagnostic.enable(not vim.diagnostic.is_enabled())
```

----------------------------------------

TITLE: Text Substitution with Range and Flags
DESCRIPTION: Detailed syntax for performing text substitution with optional range, pattern, replacement, and flags in Neovim's command mode
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]
```

----------------------------------------

TITLE: Using substitute() in Vim Script
DESCRIPTION: Shows various ways to use the substitute() function for string replacement, including using expressions and function references.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_266

LANGUAGE: vim
CODE:
```
let &path = substitute(&path, ",\\=[^,]*$", "", "")
```

LANGUAGE: vim
CODE:
```
echo substitute("testing", ".*", "\\U\\0", "")
```

LANGUAGE: vim
CODE:
```
echo substitute(s, '%\(\x\x\)',
   \ '\=nr2char("0x" .. submatch(1))', 'g')
```

LANGUAGE: vim
CODE:
```
echo substitute(s, '%\(\x\x\)', SubNr, 'g')
```

LANGUAGE: vim
CODE:
```
echo substitute(s, '%\(\x\x\)', {m -> '0x' .. m[1]}, 'g')
```

----------------------------------------

TITLE: Setting Client Information - Lua
DESCRIPTION: This function identifies the client and sets optional attributes on the channel, including client name, version, and methods. It's recommended for clients to call this after connection to help with debugging.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_15

LANGUAGE: lua
CODE:
```
nvim_set_client_info({name}, {version}, {type}, {methods}, {attributes})
```

----------------------------------------

TITLE: Defining a Vim Function with Range
DESCRIPTION: Demonstrates how to define a function that handles a line range, counting words within the specified range.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
:function Count_words() range
:  let lnum = a:firstline
:  let n = 0
:  while lnum <= a:lastline
:    let n = n + len(split(getline(lnum)))
:    let lnum = lnum + 1
:  endwhile
:  echo "found " .. n .. " words"
:endfunction
```

----------------------------------------

TITLE: Getting Lines from Current Buffer in Vim
DESCRIPTION: The getline() function retrieves lines from the current buffer. It can return a single line or a range of lines. Line numbers can be specified as integers or special strings like '.' for the current line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_96

LANGUAGE: vim
CODE:
```
getline(1)
getline(".")
let start = line('.')
let end = search("^$") - 1
let lines = getline(start, end)
```

----------------------------------------

TITLE: Retrieving Inlay Hints in Neovim LSP (Lua)
DESCRIPTION: Gets a list of inlay hints, optionally filtered by buffer or range. Returns a table of hint objects containing buffer number, client ID, and inlay hint information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_43

LANGUAGE: lua
CODE:
```
local hint = vim.lsp.inlay_hint.get({ bufnr = 0 })[1] -- 0 for current buffer

local client = vim.lsp.get_client_by_id(hint.client_id)
local resp = client:request_sync('inlayHint/resolve', hint.inlay_hint, 100, 0)
local resolved_hint = assert(resp and resp.result, resp.err)
vim.lsp.util.apply_text_edits(resolved_hint.textEdits, 0, client.encoding)

location = resolved_hint.label[1].location
client:request('textDocument/hover', {
  textDocument = { uri = location.uri },
  position = location.range.start,
})
```

----------------------------------------

TITLE: Diagnosing Configurations with Diagnostics in Neovim
DESCRIPTION: The 'vim.diagnostic.config()' function is utilized to set up diagnostic configurations, including a 'jump' table for default behaviors in diagnostics jumping. This setup enhances the functionality of 'vim.diagnostic.jump()'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_4

LANGUAGE: lua
CODE:
```
vim.diagnostic.config({ jump = { ... } })
```

----------------------------------------

TITLE: Function Usage in Vim Script
DESCRIPTION: Demonstrates how to call built-in Vim functions and use their return values. Shows practical examples with search(), getline(), and substitute() functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_12

LANGUAGE: viml
CODE:
```
:call search("Date: ", "W")
:let line = getline(".")
:let repl = substitute(line, '\a', "*", "g")
:call setline(".", repl)
```

----------------------------------------

TITLE: Installing Neovim on Ubuntu - PPA Setup
DESCRIPTION: Complete set of commands to install Neovim from PPA including prerequisites and Python support.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_9

LANGUAGE: sh
CODE:
```
sudo apt-get install software-properties-common
sudo add-apt-repository ppa:neovim-ppa/stable
sudo apt-get update
sudo apt-get install neovim
sudo apt-get install python-dev python-pip python3-dev python3-pip
```

----------------------------------------

TITLE: Jumping Back with Backtick Command
DESCRIPTION: Command to return to the previous cursor position using the backtick (`) command. This allows quick navigation between two points in a file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
``
```

----------------------------------------

TITLE: Basic Substitution Pattern Replacement
DESCRIPTION: Demonstrates various text substitution techniques using special characters and pattern matching in Vim/Neovim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:s/a\|b/xxx\0xxx/g
```

LANGUAGE: vim
CODE:
```
:s/\([abc]\)\([efg]\)/\2\1/g
```

LANGUAGE: vim
CODE:
```
:s/\w\+/\u\0/g
```

----------------------------------------

TITLE: Defining a Custom Operator in Vim
DESCRIPTION: Shows how to define a mapping for a custom operator in Vim that utilizes the 'operatorfunc' option to define functionality based on motion commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
nnoremap <expr> <F4> CountSpaces()
```

LANGUAGE: vim
CODE:
```
xnoremap <expr> <F4> CountSpaces()
```

LANGUAGE: vim
CODE:
```
function CountSpaces(context = {}, type = '') abort
```

----------------------------------------

TITLE: Unique Mapping Example in Neovim
DESCRIPTION: This example demonstrates how to define a new mapping that will fail if it already exists. It checks for existing mappings at both global and buffer levels, ensuring uniqueness.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
	:map <unique> ,w  /[#&!]<CR>
	:map ,w  /[#&!]<CR>
	:map <buffer> <unique> ,w  /[.,;]<CR>
```

----------------------------------------

TITLE: Iterating Over Treesitter Query Captures in Lua
DESCRIPTION: Shows how to iterate over captures from a Treesitter query in Lua. The example demonstrates accessing capture names, node types, and ranges for each capture.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_27

LANGUAGE: lua
CODE:
```
for id, node, metadata, match in query:iter_captures(tree:root(), bufnr, first, last) do
  local name = query.captures[id] -- name of the capture in the query
  -- typically useful info about the node:
  local type = node:type() -- type of the captured node
  local row1, col1, row2, col2 = node:range() -- range of the capture
  -- ... use the info here ...
end
```

----------------------------------------

TITLE: Text Objects Selection in Neovim
DESCRIPTION: Provides a comprehensive list of text objects that can be used for selecting and manipulating text in different contexts, including quotes, brackets, words, and paragraphs
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
a" - select double quoted string
aw - select a word with white space
ip - select inner paragraph
```

----------------------------------------

TITLE: Case-Insensitive Find Function - Vim
DESCRIPTION: Implements a custom case-insensitive find function using getchar() to get user input and search through the current line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_85

LANGUAGE: vim
CODE:
```
nmap f :call FindChar()<CR>
function FindChar()
  let c = nr2char(getchar())
  while col('.') < col('$') - 1
    normal l
    if getline('.')[col('.') - 1] ==? c
      break
    endif
  endwhile
endfunction
```

----------------------------------------

TITLE: Installing Python Provider for Neovim
DESCRIPTION: Installs the pynvim Python module which is required for Python integration in Neovim. The --user flag installs it for the current user only, and --upgrade ensures the latest version is installed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_4

LANGUAGE: bash
CODE:
```
python3 -m pip install --user --upgrade pynvim
```

----------------------------------------

TITLE: LSP Feature Configuration with LspAttach
DESCRIPTION: Example showing how to configure LSP features like auto-completion and auto-formatting using LspAttach autocmd.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_4

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('my.lsp', {}),
  callback = function(args)
    local client = assert(vim.lsp.get_client_by_id(args.data.client_id))
    if client:supports_method('textDocument/implementation') then
      -- Create a keymap for vim.lsp.buf.implementation ...
    end

    -- Enable auto-completion. Note: Use CTRL-Y to select an item. |complete_CTRL-Y|
    if client:supports_method('textDocument/completion') then
      vim.lsp.completion.enable(true, client.id, args.buf, {autotrigger = true})
    end

    -- Auto-format ("lint") on save.
    -- Usually not needed if server supports "textDocument/willSaveWaitUntil".
    if not client:supports_method('textDocument/willSaveWaitUntil')
        and client:supports_method('textDocument/formatting') then
      vim.api.nvim_create_autocmd('BufWritePre', {
        group = vim.api.nvim_create_augroup('my.lsp', {clear=false}),
        buffer = args.buf,
        callback = function()
          vim.lsp.buf.format({ bufnr = args.buf, id = client.id, timeout_ms = 1000 })
        end,
      })
    end
  end,
})
```

----------------------------------------

TITLE: Catching Exceptions with Pattern Matching in Vim Script
DESCRIPTION: Example showing how to use try-catch blocks with pattern matching to handle different types of exceptions. The function catches numeric exceptions with a specific pattern and other strings with a more general pattern.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_123

LANGUAGE: vim
CODE:
```
:function! Foo(value)
:  try
:    throw a:value
:  catch /^\d\+$/
:    echo "Number thrown"
:  catch /.*/
:    echo "String thrown"
:  endtry
:endfunction
:
:call Foo(0x1267)
:call Foo('string')
```

----------------------------------------

TITLE: Command Mapping Example in Neovim
DESCRIPTION: This example demonstrates how to use `<Cmd>` to execute a command directly without changing modes. It is more flexible than using `:<C-U>` or `<C-O>:` because the commands are executed in the current mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
	noremap x <Cmd>echo mode(1)<CR>
	nnoremap <F3> aText <Cmd>echo mode(1)<CR> Added<Esc>
```

----------------------------------------

TITLE: LSP Client On List Handler Example - Lua
DESCRIPTION: Example showing how to customize the LSP client list handler to populate the quickfix list and jump to the first result. Used for operations like finding definitions and references.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_34

LANGUAGE: lua
CODE:
```
local function on_list(options)
    vim.fn.setqflist({}, ' ', options)
    vim.cmd.cfirst()
end

vim.lsp.buf.definition({ on_list = on_list })
vim.lsp.buf.references(nil, { on_list = on_list })
```

----------------------------------------

TITLE: Looping Over Dictionary Key-Value Pairs in Vim
DESCRIPTION: Shows how to iterate over both keys and values using the items() function with destructuring assignment.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_51

LANGUAGE: vim
CODE:
```
:for [key, value] in items(mydict)
:   echo key .. ': ' .. value
:endfor
```

----------------------------------------

TITLE: Getting Option Info for All Options - Lua
DESCRIPTION: Fetches detailed metadata for all available options in Neovim. Returns a dictionary with full option names as keys and their respective metadata. Useful for understanding what options are available and their properties.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_48

LANGUAGE: lua
CODE:
```
nvim_get_all_options_info()  -- Returns a dictionary of all options
```

----------------------------------------

TITLE: Enabling Automatic Rustfmt on Save
DESCRIPTION: Enables automatic formatting of Rust code when saving a buffer by running the :RustFmt command automatically.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
let g:rustfmt_autosave = 0
```

----------------------------------------

TITLE: Cursor Positioning - Lua
DESCRIPTION: The cursor function positions the cursor in the editor based on line number and column, allowing for precise control over text navigation. It accepts various argument formats to accommodate different use cases.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_43

LANGUAGE: lua
CODE:
```
cursor({lnum}, {col} [, {off}])                                       *cursor()*
cursor({list})
		Positions the cursor at the column (byte count) {col} in the
		line {lnum}.  The first column is one.

		When there is one argument {list} this is used as a |List|
		with two, three or four item:
		  [{lnum}, {col}]
		  [{lnum}, {col}, {off}]
		  [{lnum}, {col}, {off}, {curswant}]
		This is like the return value of |getpos()| or |getcurpos()|,
		but without the first item.

		To position the cursor using {col} as the character count, use
		|setcursorcharpos()|.

		Does not change the jumplist.
		{lnum} is used like with |getline()|, except that if {lnum} is
		zero, the cursor will stay in the current line.
		If {lnum} is greater than the number of lines in the buffer,
		the cursor will be positioned at the last line in the buffer.
		If {col} is greater than the number of bytes in the line,
		the cursor will be positioned at the last character in the
		line.
		If {col} is zero, the cursor will stay in the current column.
		If {curswant} is given it is used to set the preferred column
		for vertical movement.  Otherwise {col} is used.

		When 'virtualedit' is used {off} specifies the offset in
		screen columns from the start of the character.  E.g., a
		position within a <Tab> or after the last character.
		Returns 0 when the position could be set, -1 otherwise.

		Parameters: ~
		  • {list} (`integer[]`)

		Return: ~
		  (`any`)
```

----------------------------------------

TITLE: Setting Background Color in Vim
DESCRIPTION: Commands to set light or dark background for proper color contrast
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:set background=dark
```

LANGUAGE: vim
CODE:
```
:set background=light
```

----------------------------------------

TITLE: Creating User Configuration for Neovim in Vim
DESCRIPTION: This snippet demonstrates how to create and write to the init.vim file in Neovim using Vim commands. The file serves as the user configuration file where settings and script commands can be added.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:exe 'edit '.stdpath('config').'/init.vim'
:write ++p
```

----------------------------------------

TITLE: Shortened Mapping Example Using Remapping
DESCRIPTION: This set of mappings demonstrates how to use remapping to shorten and simplify key mappings across different modes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
:map <F2> G<F3>
:imap <F2> <Esc><F3>
:map <F3>  oDate: <Esc>:read !date<CR>kJ
```

----------------------------------------

TITLE: Setting Filetype with Autocommand in Vim
DESCRIPTION: This snippet explains how to automatically set the filetype for certain files when opened in Vim, using an autocommand with the appropriate file pattern.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
:autocmd BufReadPost *.gsm  set filetype=asm
```

----------------------------------------

TITLE: Version Check in Vim Script
DESCRIPTION: Example of checking Nvim version using the has() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
:if has("nvim-0.2.1")
```

----------------------------------------

TITLE: Implementing Job Control Callbacks in Vim
DESCRIPTION: Example showing how to set up job control callbacks for handling stdout, stderr, and exit events from spawned processes. Demonstrates spawning two bash shells and handling their output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
function! s:OnEvent(job_id, data, event) dict
  if a:event == 'stdout'
    let str = self.shell.' stdout: '.join(a:data)
  elseif a:event == 'stderr'
    let str = self.shell.' stderr: '.join(a:data)
  else
    let str = self.shell.' exited'
  endif

  call append(line('$'), str)
endfunction
let s:callbacks = {
\ 'on_stdout': function('s:OnEvent'),
\ 'on_stderr': function('s:OnEvent'),
\ 'on_exit': function('s:OnEvent')
\ }
let job1 = jobstart(['bash'], extend({'shell': 'shell 1'}, s:callbacks))
let job2 = jobstart(['bash', '-c', 'for i in {1..10}; do echo hello $i!; sleep 1; done'], extend({'shell': 'shell 2'}, s:callbacks))
```

----------------------------------------

TITLE: Setting Python 3 Host Path in Neovim
DESCRIPTION: Sets the path to the Python 3 interpreter for Neovim's Python provider. Setting this makes startup faster and is useful when working with virtualenvs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
let g:python3_host_prog = '/path/to/python3'
```

----------------------------------------

TITLE: Looping Over Sorted Dictionary Keys in Vim
DESCRIPTION: Shows how to loop over dictionary keys in sorted order by combining sort() and keys() functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_49

LANGUAGE: vim
CODE:
```
:for key in sort(keys(mydict))
```

----------------------------------------

TITLE: Reversing Line Order in Vim
DESCRIPTION: This snippet details how to reverse the order of lines in a file using the ':global' command in conjunction with ':move', allowing all lines to be moved to the top sequence.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:global/^/move 0
```

LANGUAGE: vim
CODE:
```
:g/^/m 0
```

LANGUAGE: vim
CODE:
```
:'t+1,.g/^/m 't
```

----------------------------------------

TITLE: Setting Automatic Line Breaks in Vim - Vim
DESCRIPTION: Configures Vim to automatically insert line breaks based on the specified 'textwidth'. This is particularly useful for maintaining readable text widths during editing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:set textwidth=30
```

----------------------------------------

TITLE: Creating a C Filetype Plugin
DESCRIPTION: Example Vim script for a C language filetype plugin that sets softtabstop to 4 and creates a local mapping for inserting comments. Includes an undo_ftplugin variable to clean up when changing filetypes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
setlocal softtabstop=4
noremap <buffer> <LocalLeader>c o/**************<CR><CR>/<Esc>
let b:undo_ftplugin = "setl softtabstop< | unmap <buffer> <LocalLeader>c"
```

----------------------------------------

TITLE: Complete Typing Correction Vim Plugin Example
DESCRIPTION: A full example of a Vim plugin that corrects typing mistakes, showing script initialization, mappings, functions, and proper cleanup.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_39

LANGUAGE: vim
CODE:
```
" Vim global plugin for correcting typing mistakes
" Last Change:	2000 Oct 15
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" License:	This file is placed in the public domain.

if exists("g:loaded_typecorr")
  finish
endif
let g:loaded_typecorr = 1

let s:save_cpo = &cpo
set cpo&vim

iabbrev teh the
iabbrev otehr other
iabbrev wnat want
iabbrev synchronisation
	\ synchronization
let s:count = 4

if !hasmapto('<Plug>TypecorrAdd;')
  map <unique> <Leader>a  <Plug>TypecorrAdd;
endif
noremap <unique> <script> <Plug>TypecorrAdd;  <SID>Add

noremenu <script> Plugin.Add\ Correction      <SID>Add

noremap <SID>Add  :call <SID>Add(expand("<cword>"), 1)<CR>

function s:Add(from, correct)
  let to = input("type the correction for " .. a:from .. ": ")
  exe ":iabbrev " .. a:from .. " " .. to
  if a:correct | exe "normal viws\<C-R>\" \b\e" | endif
  let s:count = s:count + 1
  echo s:count .. " corrections now"
endfunction

if !exists(":Correct")
  command -nargs=1  Correct  :call s:Add(<q-args>, 0)
endif

let &cpo = s:save_cpo
unlet s:save_cpo
```

----------------------------------------

TITLE: Jumping Through Snippets in Neovim Using Lua
DESCRIPTION: This snippet configures the <S-Tab> key mapping in Insert and Select mode to jump backwards through snippets, enhancing the snippet navigation experience for users. The relevant functionality is provided by the 'vim.snippet.jump' function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_3

LANGUAGE: lua
CODE:
```
vim.snippet.jump({ direction = -1 })
```

----------------------------------------

TITLE: Conditional Tab Completion in Vim - Vimscript
DESCRIPTION: This Vimscript function, 'CleverTab', conditionally inserts a tab character or starts a completion operation based on the content before the cursor. The function uses regular expressions to determine if the line is only whitespace. The function returns different sequences based on this check. The keymap binds this function to the Tab key in insert mode, requiring no additional input while modifying Tab key behavior in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_3

LANGUAGE: Vimscript
CODE:
```
function! CleverTab()
   if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
      return "\<Tab>"
   else
      return "\<C-N>"
   endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>
```

----------------------------------------

TITLE: Operator-pending Mapping Example in Neovim
DESCRIPTION: This example demonstrates how to create an operator-pending mapping (omap) to define a movement command that can be used with any operator. It shows how to extend existing operators with custom movement logic.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
	:omap { w
```

----------------------------------------

TITLE: Custom Paste Handler Definition in Neovim - Lua
DESCRIPTION: This snippet redefines the 'vim.paste()' function to implement a custom paste handler that utilizes 'vim.api.nvim_put' to insert lines at the current cursor position. It accepts 'lines' and 'phase' parameters to manage the paste operation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_25

LANGUAGE: lua
CODE:
```
vim.paste = (function(lines, phase)
  vim.api.nvim_put(lines, 'c', true, true)
end)
```

----------------------------------------

TITLE: Defining a Quickfix List with LSP in Lua
DESCRIPTION: Demonstrates how to use Neovim's LSP (Language Server Protocol) to define quickfix lists for navigating code definitions and references. This snippet requires Neovim with LSP support configured and assumes the availability of language server connections.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_35

LANGUAGE: lua
CODE:
```
vim.lsp.buf.definition({ loclist = true })
vim.lsp.buf.references(nil, { loclist = false })
```

----------------------------------------

TITLE: LSP Client Capabilities Generator in Lua
DESCRIPTION: Function to create a ClientCapabilities object describing LSP client capabilities.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_65

LANGUAGE: lua
CODE:
```
make_client_capabilities()
```

----------------------------------------

TITLE: Folding Commands in Vim
DESCRIPTION: Commands for creating and managing code folding in Vim, including setting fold methods, creating and removing folds, and opening/closing folds.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
set foldmethod=manual     # manual folding
set foldmethod=indent     # folding by indent
set foldmethod=expr       # folding by 'foldexpr'
set foldmethod=syntax     # folding by syntax regions
set foldmethod=marker     # folding by 'foldmarker'
zf{motion}                # operator: Define a fold manually
:{range}fold              # define a fold for {range} lines
zd                        # delete one fold under the cursor
zD                        # delete all folds under the cursor
zo                        # open one fold under the cursor
zO                        # open all folds under the cursor
zc                        # close one fold under the cursor
zC                        # close all folds under the cursor
zm                        # fold more: decrease 'foldlevel'
zM                        # close all folds: make 'foldlevel' zero
zr                        # reduce folding: increase 'foldlevel'
zR                        # open all folds: make 'foldlevel' max.
zn                        # fold none: reset 'foldenable'
zN                        # fold normal set 'foldenable'
zi                        # invert 'foldenable'
```

----------------------------------------

TITLE: Enabling Automatic Filetype Indentation in Vim
DESCRIPTION: Activates Vim's filetype detection system to automatically apply the appropriate indentation settings for different file types.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:filetype indent on
```

----------------------------------------

TITLE: Converting Existing Tabs to Spaces
DESCRIPTION: A command sequence to convert all indents from tabs to spaces while preserving existing formatting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
:set expandtab
:%retab
```

----------------------------------------

TITLE: Getting Detailed Option Info - Lua
DESCRIPTION: Retrieves detailed information about a specific option in Neovim. The function can provide contextual metadata based on the option's current settings in buffers or windows. It allows for various scopes to be specified for retrieving local or global information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_49

LANGUAGE: lua
CODE:
```
nvim_get_option_info2({name}, {opts})  -- Get option info based on specified parameters
```

----------------------------------------

TITLE: Adding Vim Configuration Contents to Neovim
DESCRIPTION: This snippet is used to maintain compatibility with existing Vim configurations by setting the runtime path and including the existing .vimrc contents into Neovim's configuration.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath
source ~/.vimrc
```

----------------------------------------

TITLE: Starting a Job with Output Handling in Vim
DESCRIPTION: Demonstrates how to use jobstart() to spawn a process and capture its output by using the on_stdout callback to append output to the current buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_146

LANGUAGE: vim
CODE:
```
call jobstart(['nvim', '-h'], {'on_stdout':{j,d,e->append(line('.'),d)}})
```

----------------------------------------

TITLE: Defining a Command with Arguments in Vim
DESCRIPTION: This snippet explains how to define a user command that takes a variable number of arguments, indicated by the -nargs option. It demonstrates the command 'Say' which echoes any provided arguments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:command -nargs=+ Say :echo "<args>"
```

----------------------------------------

TITLE: Normal-mode operator with lambda function
DESCRIPTION: This snippet demonstrates how to create a normal-mode operator in Vim using a lambda function.  It adds quotes around text in the current line. The `opfunc` option is set to a lambda that splits the current line, inserts quotes, joins it back, and sets it as the current line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_24

LANGUAGE: Vim Script
CODE:
```
nnoremap <F4> <Cmd>let &opfunc='{t ->
				\ getline(".")
				\ ->split("\\zs")
				\ ->insert("\"", col("'']"))
				\ ->insert("\"", col("''[") - 1)
				\ ->join("")
				\ ->setline(".")}'<CR>g@
```

----------------------------------------

TITLE: Custom Diagnostics Handler Configuration
DESCRIPTION: Shows how to set a custom handler for publishing diagnostics globally
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_8

LANGUAGE: lua
CODE:
```
vim.lsp.handlers['textDocument/publishDiagnostics'] = my_custom_diagnostics_handler
```

----------------------------------------

TITLE: Buffer Highlight Management - Lua Example
DESCRIPTION: Demonstrates how to create, modify and manage buffer highlights using extmarks in Lua. Shows creating highlights, changing highlight groups and positions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_4

LANGUAGE: lua
CODE:
```
-- create the highlight through an extmark
extid = vim.api.nvim_buf_set_extmark(buf, ns_id, line, col_start, {end_col = col_end, hl_group = hl_group})

-- example: modify the extmark's highlight group
vim.api.nvim_buf_set_extmark(buf, ns_id, line, col_start, {end_col = col_end, hl_group = NEW_HL_GROUP, id = extid})

-- example: change the highlight's position
vim.api.nvim_buf_set_extmark(buf, ns_id, NEW_LINE, col_start, {end_col = col_end, hl_group = NEW_HL_GROUP, id = extid})
```

----------------------------------------

TITLE: Temporarily Setting Current Buffer in Lua
DESCRIPTION: Example of using nvim_buf_call to temporarily switch to a buffer in order to execute functions that require the buffer to be current. This is particularly useful for Vimscript functions like jobstart with 'term' option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_53

LANGUAGE: lua
CODE:
```
vim.api.nvim_buf_call(0, function() -- some operation end)
```

----------------------------------------

TITLE: Trailing Whitespace Trim Command with Preview - Lua
DESCRIPTION: Implementation of a command that removes trailing whitespace with incremental preview support. Includes preview callback function that highlights trailing whitespace and main command function
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_34

LANGUAGE: lua
CODE:
```
local function trim_space_preview(opts, preview_ns, preview_buf)
  vim.cmd('hi clear Whitespace')
  local line1 = opts.line1
  local line2 = opts.line2
  local buf = vim.api.nvim_get_current_buf()
  local lines = vim.api.nvim_buf_get_lines(buf, line1 - 1, line2, false)
  local preview_buf_line = 0

  for i, line in ipairs(lines) do
    local start_idx, end_idx = string.find(line, '%s+$')

    if start_idx then
      vim.hl.range(
        buf,
        preview_ns,
        'Substitute',
        {line1 + i - 2, start_idx - 1},
        {line1 + i - 2, end_idx},
      )

      if preview_buf then
        local prefix = string.format('|%d| ', line1 + i - 1)

        vim.api.nvim_buf_set_lines(
          preview_buf,
          preview_buf_line,
          preview_buf_line,
          false,
          { prefix .. line }
        )
        vim.hl.range(
          preview_buf,
          preview_ns,
          'Substitute',
          {preview_buf_line, #prefix + start_idx - 1},
          {preview_buf_line, #prefix + end_idx},
        )
        preview_buf_line = preview_buf_line + 1
      end
    end
  end

  return 2
end

local function trim_space(opts)
  local line1 = opts.line1
  local line2 = opts.line2
  local buf = vim.api.nvim_get_current_buf()
  local lines = vim.api.nvim_buf_get_lines(buf, line1 - 1, line2, false)

  local new_lines = {}
  for i, line in ipairs(lines) do
    new_lines[i] = string.gsub(line, '%s+$', '')
  end
  vim.api.nvim_buf_set_lines(buf, line1 - 1, line2, false, new_lines)
end

vim.api.nvim_create_user_command(
  'TrimTrailingWhitespace',
  trim_space,
  { nargs = '?', range = '%', addr = 'lines', preview = trim_space_preview }
)
```

----------------------------------------

TITLE: Listing Command History in Neovim
DESCRIPTION: This snippet shows how to use the :history command to list the contents of various command histories in Neovim. It demonstrates different history types and how to specify ranges of entries.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:his[tory]
:his[tory] [{name}] [{first}][, [{last}]]

Examples:
:history / 6,12
:history all -2
:history all -2,
```

----------------------------------------

TITLE: Setting C-style Indentation in Vim
DESCRIPTION: Configures Vim for automatic C-style code indentation with a specified number of spaces for each level.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:set cindent shiftwidth=4
```

----------------------------------------

TITLE: Displaying Diagnostics in Vim
DESCRIPTION: The `vim.diagnostic.show` function displays diagnostics for a specified namespace and buffer. It supports optional display options and can handle lists of diagnostics through the `opts` parameter. The function provides flexibility by allowing diagnostics visualization across all buffers or specific ones if parameters are omitted.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
show({namespace}, {bufnr}, {diagnostics}, {opts})
    Display diagnostics for the given namespace and buffer.

    Parameters: ~
      • {namespace}    (`integer?`) Diagnostic namespace. When omitted, show
                       diagnostics from all namespaces.
      • {bufnr}        (`integer?`) Buffer number, or 0 for current buffer.
                       When omitted, show diagnostics in all buffers.
      • {diagnostics}  (`vim.Diagnostic[]?`) The diagnostics to display. When
                       omitted, use the saved diagnostics for the given
                       namespace and buffer. This can be used to display a
                       list of diagnostics without saving them or to display
                       only a subset of diagnostics. May not be used when
                       {namespace} or {bufnr} is nil. See |vim.Diagnostic|.
      • {opts}         (`vim.diagnostic.Opts?`) Display options. See
                       |vim.diagnostic.Opts|.
```

----------------------------------------

TITLE: Adding Diagnostics to Quickfix List in Vim
DESCRIPTION: The `vim.diagnostic.setqflist` function adds all diagnostics to the quickfix list. It requires a configuration table `opts` that can define the namespace, whether to open the list, and the title of the quickfix list. The function manages quickfix list creation or update based on the title and can filter diagnostics by severity.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
setqflist({opts})                                 *vim.diagnostic.setqflist()*
    Add all diagnostics to the quickfix list.

    Parameters: ~
      • {opts}  (`table?`) Configuration table with the following keys:
                • {namespace}? (`integer`) Only add diagnostics from the given
                  namespace.
                • {open}? (`boolean`, default: `true`) Open quickfix list
                  after setting.
                • {title}? (`string`) Title of quickfix list. Defaults to
                  "Diagnostics". If there's already a quickfix list with this
                  title, it's updated. If not, a new quickfix list is created.
                • {severity}? (`vim.diagnostic.SeverityFilter`) See
                  |diagnostic-severity|.
```

----------------------------------------

TITLE: Including POD Syntax in Perl Files with Vimscript
DESCRIPTION: This snippet demonstrates how to include and manage POD syntax in Perl files using Vim. It outlines the use of ':syntax include' to include a POD syntax file, and ':syntax region' to define regions within a Perl file that contain POD content. The snippet requires that the pod.vim file be in the same directory as the Perl syntax file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_19

LANGUAGE: Vimscript
CODE:
```
:syntax include @Pod <sfile>:p:h/pod.vim
:syntax region perlPOD start=/^=head/ end=/^=cut/ contains=@Pod
```

----------------------------------------

TITLE: Using printf() as a Method in Vim
DESCRIPTION: Shows how to use printf() as a method in Vim's expression syntax. The result of the Compute() function is passed as the second argument to printf().
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_191

LANGUAGE: vim
CODE:
```
Compute()->printf("result: %d")
```

----------------------------------------

TITLE: Retrieving Node for Range in LanguageTree (Lua)
DESCRIPTION: Gets the smallest node that contains a specified range. Takes a range table and optional settings as parameters. Returns a TSNode or nil.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_35

LANGUAGE: lua
CODE:
```
LanguageTree:node_for_range({range}, {opts})
```

----------------------------------------

TITLE: Creating a global user command in Neovim
DESCRIPTION: This function creates a global user-defined command in Neovim. The function requires the command name, the replacement command, and a dictionary of options. The command name must begin with an uppercase letter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_44

LANGUAGE: vim
CODE:
```
"                                                  *nvim_create_user_command()*\nnvim_create_user_command({name}, {command}, {opts})\n    Creates a global |user-commands| command.\n\n    For Lua usage see |lua-guide-commands-create|.\n\n    Example: >vim\n        :call nvim_create_user_command('SayHello', 'echo "Hello world!"', {'bang': v:true})\n        :SayHello\n        Hello world!\n<\n\n    Attributes: ~\n        Since: 0.7.0\n\n    Parameters: ~\n      • {name}     Name of the new user command. Must begin with an uppercase\n                   letter.\n      • {command}  Replacement command to execute when this user command is\n                   executed. When called from Lua, the command can also be a\n                   Lua function. The function is called with a single table\n                   argument that contains the following keys:\n                   • name: (string) Command name\n                   • args: (string) The args passed to the command, if any\n                     <args>\n                   • fargs: (table) The args split by unescaped whitespace\n                     (when more than one argument is allowed), if any <f-args>\n                   • nargs: (string) Number of arguments |:command-nargs|\n                   • bang: (boolean) "true" if the command was executed with a\n                     ! modifier <bang>\n                   • line1: (number) The starting line of the command range\n                     <line1>\n                   • line2: (number) The final line of the command range\n                     <line2>\n                   • range: (number) The number of items in the command range:\n                     0, 1, or 2 <range>\n                   • count: (number) Any count supplied <count>\n                   • reg: (string) The optional register, if specified <reg>\n                   • mods: (string) Command modifiers, if any <mods>\n                   • smods: (table) Command modifiers in a structured format.\n                     Has the same structure as the "mods" key of\n                     |nvim_parse_cmd()|.\n      • {opts}     Optional |command-attributes|.\n                   • Set boolean attributes such as |:command-bang| or\n                     |:command-bar| to true (but not |:command-buffer|, use\n                     |nvim_buf_create_user_command()| instead).\n                   • "complete" |:command-complete| also accepts a Lua\n                     function which works like\n                     |:command-completion-customlist|.\n                   • Other parameters:\n                     • desc: (string) Used for listing the command when a Lua\n                       function is used for {command}.\n                     • force: (boolean, default true) Override any previous\n                       definition.\n                     • preview: (function) Preview callback for 'inccommand'\n                       |:command-preview|
```

----------------------------------------

TITLE: Manually Loading a Library Script in Vim
DESCRIPTION: This snippet demonstrates how to manually load a library script in Vim while avoiding duplicate loading using the exists() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_55

LANGUAGE: vim
CODE:
```
if !exists('*MyLibFunction')
   runtime library/mylibscript.vim
endif
call MyLibFunction(arg)
```

----------------------------------------

TITLE: Getting Current Buffer of Window in Neovim Lua API
DESCRIPTION: Retrieves the current buffer in a specified window. Returns the buffer ID. Available since Neovim 0.1.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_74

LANGUAGE: lua
CODE:
```
nvim_win_get_buf({window})
```

----------------------------------------

TITLE: Spell checking with Treesitter
DESCRIPTION: This snippet demonstrates how to use the `@spell` capture to mark nodes, specifically comments, for spell checking by Neovim's built-in spell checker. The `@nospell` capture can be used to disable spellchecking.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
    (comment) @spell

```

----------------------------------------

TITLE: Setting Options Syntax in Vim Script
DESCRIPTION: This snippet illustrates the syntax for setting various options in Neovim with examples on how to show, toggle, and reset options. It demonstrates the various characters and options that can be used in command line operations to manipulate configuration settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:se[t][!]    Show all options that differ from their default value.

:se[t][!] all    Show all options.

:se[t] {option}?    Show value of {option}.

:se[t] {option}    Toggle option: set, switch it on.

:se[t] no{option}    Toggle option: Reset, switch it off.

:se[t] {option}&    Reset option to its default value.
:se[t] all&    Set all options to their default value.

:se[t] {option}={value}    Set string or number option to {value}.
:se[t] {option}+={value}    Add the {value} to a number option, or append the {value} to a string option.
:se[t] {option}^={value}    Multiply {value} to a number option, or prepend {value} to a string option.
:se[t] {option}-={value}    Subtract {value} from a number option, or remove {value} from a string option, if it is there.
```

----------------------------------------

TITLE: Buffer-Local Mappings in Vim
DESCRIPTION: Explains the precedence of buffer-local versus global mappings, and provides examples to illustrate this behavior.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
:map <buffer> <nowait> \a   :echo "Local \a"<CR>
```

LANGUAGE: vim
CODE:
```
:map                   \abc :echo "Global \abc"<CR>
```

----------------------------------------

TITLE: Installing a Vim Syntax File
DESCRIPTION: Details the process of installing a new syntax file in Vim by placing it within a 'syntax' directory under 'runtimepath'. The snippet explains how file recognition is based on file type names, and includes steps for adding to existing syntax files while maintaining original files unchanged.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_21

LANGUAGE: Vimscript
CODE:
```
:syntax keyword cType off_t uint
```

----------------------------------------

TITLE: Using Special Arguments in Key Mappings
DESCRIPTION: This section describes various special arguments such as '<buffer>', '<nowait>', and '<silent>' that can modify the behavior of mappings in Neovim. Each argument is explored with an example.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:map <buffer> ,w /[.,;]<CR>
```

LANGUAGE: vim
CODE:
```
:map <silent> ,h /Header<CR>
```

----------------------------------------

TITLE: Autocommand Pattern Example 1 in Vimscript
DESCRIPTION: This example shows how to set the 'et' option for all text files using the `BufRead` event and the `*.txt` pattern.  When a file ending with `.txt` is read, the 'et' option will be set.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
 ":autocmd BufRead *.txt\t\tset et"
```

----------------------------------------

TITLE: Replacing a Word in Vim
DESCRIPTION: This snippet demonstrates how to replace all occurrences of a specific word in a file using Vim's substitute command. The command can also match word boundaries to avoid incorrect replacements, with optional prompting for confirmation on each replacement.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
%s/four/4/g
```

LANGUAGE: vim
CODE:
```
%s/\<four/4/g
```

LANGUAGE: vim
CODE:
```
%s/\<four\>/4/g
```

LANGUAGE: vim
CODE:
```
%s/\<four\>/4/gc
```

LANGUAGE: vim
CODE:
```
%s/\<GetResp\>/GetAnswer/g
```

LANGUAGE: vim
CODE:
```
%s/\<GetResp\>/GetAnswer/ge
```

----------------------------------------

TITLE: LSP Client Environment Configuration Example in Lua
DESCRIPTION: Example showing how to configure environment variables for an LSP server using a table format. The values are coerced to strings when passed to the server.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_33

LANGUAGE: lua
CODE:
```
{ PORT = 8080; HOST = "0.0.0.0"; }
```

----------------------------------------

TITLE: Neovim Async Event Loop Implementation
DESCRIPTION: Pseudocode showing how Neovim handles asynchronous events. This demonstrates the difference between the traditional input loop and the event-based approach used in Neovim for supporting RPC, job control, and timers.
SOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/README.md#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
def state_enter(state_callback, data):
  do
    event = read_next_event()       # read an event from the operating system
  while state_callback(data, event) # invoke the callback for the current state
```

----------------------------------------

TITLE: Enable Treesitter Syntax Highlighting for Help Files in Lua
DESCRIPTION: Configures Treesitter to start for syntax highlighting help files. Dependencies include a functional Nvim setup with Treesitter installed. Creates a `.config/nvim/ftplugin/help.lua` file containing Lua code to initialize Treesitter syntax highlighting for better code example visualization in help files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_0

LANGUAGE: lua
CODE:
```
vim.treesitter.start()
```

----------------------------------------

TITLE: LSP Handler Function Signature
DESCRIPTION: Defines the standard signature for LSP response handlers with error, result, and context parameters
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_6

LANGUAGE: lua
CODE:
```
function(err, result, ctx)
    -- Handler implementation
end
```

----------------------------------------

TITLE: Navigating the Buffer List
DESCRIPTION: This snippet provides commands for navigating through the buffer list, enabling users to move to previous and next buffers easily. It also explains how to delete buffers and the effect of deletion on active windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:bnext
```

LANGUAGE: vim
CODE:
```
:bprevious
```

LANGUAGE: vim
CODE:
```
:bfirst
```

LANGUAGE: vim
CODE:
```
:blast
```

LANGUAGE: vim
CODE:
```
:bdelete 3
```

----------------------------------------

TITLE: Handling Partial Line Output in Job Control
DESCRIPTION: Example showing how to handle partial line output in job control callbacks by maintaining a buffer of chunks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
let s:chunks = ['']
func! s:on_stdout(job_id, data, event) dict
  let s:chunks[-1] .= a:data[0]
  call extend(s:chunks, a:data[1:])
endf
```

----------------------------------------

TITLE: Function to consume character after abbreviation
DESCRIPTION: This snippet defines a function `Eatchar` that consumes a character based on a pattern. It's used in an abbreviation to consume the space typed after the abbreviation.  The `getchar()` function reads a character, `nr2char()` converts it to a string, and the return value determines whether the character is consumed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_26

LANGUAGE: Vim Script
CODE:
```
func Eatchar(pat)
   let c = nr2char(getchar(0))
   return (c =~ a:pat) ? '' : c
endfunc
iabbr <silent> if if ()<Left><C-R>=Eatchar('\\s')<CR>
```

----------------------------------------

TITLE: Parsing Tree-sitter Tree in Lua
DESCRIPTION: Example demonstrating how to parse a tree-sitter tree for a buffer range before accessing nodes. This ensures the tree is valid before node operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_25

LANGUAGE: lua
CODE:
```
vim.treesitter.get_parser(bufnr):parse(range)
```

----------------------------------------

TITLE: Initializing Poll Handle in Lua with libuv
DESCRIPTION: This snippet details the initialization of a poll handle using a file descriptor. It sets the file descriptor to non-blocking mode and returns a `uv_poll_t` userdata. This is crucial for monitoring I/O on file descriptors without blocking the event loop. The snippet demonstrates two functions: `uv.new_poll(fd)` for general file descriptors and `uv.new_socket_poll(fd)` specifically for socket descriptors on Unix and Windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_19

LANGUAGE: lua
CODE:
```
uv.new_poll({fd})
```

LANGUAGE: lua
CODE:
```
uv.new_socket_poll({fd})
```

----------------------------------------

TITLE: Object-Oriented Job Control Implementation
DESCRIPTION: Advanced example showing an object-oriented approach to job control in Vim, with methods for handling stdout, stderr, and exit events.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
let Shell = {}

function Shell.on_stdout(_job_id, data, event)
  call append(line('$'),
        \ printf('[%s] %s: %s', a:event, self.name, join(a:data[:-2])))
endfunction

let Shell.on_stderr = function(Shell.on_stdout)

function Shell.on_exit(job_id, _data, event)
  let msg = printf('job %d ("%s") finished', a:job_id, self.name)
  call append(line('$'), printf('[%s] BOOM!', a:event))
  call append(line('$'), printf('[%s] %s!', a:event, msg))
endfunction

function Shell.new(name, cmd)
  let object = extend(copy(g:Shell), {'name': a:name})
  let object.cmd = ['sh', '-c', a:cmd]
  let object.id = jobstart(object.cmd, object)
  $
  return object
endfunction

let instance = Shell.new('bomb',
      \ 'for i in $(seq 9 -1 1); do echo $i 1>&$((i % 2 + 1)); sleep 1; done')
```

----------------------------------------

TITLE: Connecting to Nvim with Ruby using msgpack-rpc
DESCRIPTION: A Ruby script that demonstrates how to connect to a running Nvim instance via msgpack-rpc and execute a command to print "hello world!". The script can be run from within Nvim or from another shell by setting NVIM_LISTEN_ADDRESS.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_0

LANGUAGE: ruby
CODE:
```
#!/usr/bin/env ruby
# Requires msgpack-rpc: gem install msgpack-rpc
#
# To run this script, execute it from a running Nvim instance (notice the
# trailing '&' which is required since Nvim won't process events while
# running a blocking command):
#
#   :!./hello.rb &
#
# Or from another shell by setting NVIM_LISTEN_ADDRESS:
# $ NVIM_LISTEN_ADDRESS=[address] ./hello.rb

require 'msgpack/rpc'
require 'msgpack/rpc/transport/unix'

nvim = MessagePack::RPC::Client.new(MessagePack::RPC::UNIXTransport.new, ENV['NVIM_LISTEN_ADDRESS'])
result = nvim.call(:nvim_command, 'echo "hello world!"')
```

----------------------------------------

TITLE: Global Search and Replace in Vim
DESCRIPTION: Shows how to use the global command to perform a search and replace operation across the entire file. This example replaces all occurrences of 'pat' with 'PAT'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:g/pat/s//PAT/g
```

----------------------------------------

TITLE: Executing Normal Mode Commands in Global Command
DESCRIPTION: Illustrates how to use the :normal command within a global command to execute Normal mode commands on matching lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:g/pat/normal {commands}
```

----------------------------------------

TITLE: Searching for files with globpath in Vim
DESCRIPTION: Examples of using globpath() to search for files across multiple directories. The first example finds a syntax file in the runtimepath, while the second uses the list return format.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_114

LANGUAGE: vim
CODE:
```
echo globpath(&rtp, "syntax/c.vim")
```

----------------------------------------

TITLE: LSP Server Capabilities Resolver in Lua
DESCRIPTION: Function to normalize and resolve server capabilities into a standardized format.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_66

LANGUAGE: lua
CODE:
```
resolve_capabilities(server_capabilities)
```

----------------------------------------

TITLE: Accessing Nested List Elements in Vimscript
DESCRIPTION: This example shows how to access elements within nested lists.  Multiple bracketed indices are used to traverse the list structure to retrieve the desired element.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
	:let item = nestlist[0][1]	" get the first list, second item: 12
```

----------------------------------------

TITLE: Accessing List Elements in Vimscript
DESCRIPTION: This snippet demonstrates how to access elements in a Vimscript list using their index.  List indices are zero-based, and negative indices can be used to access elements from the end of the list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
	:let item = mylist[0]		" get the first item: 1
	:let item = mylist[2]		" get the third item: 3
```

----------------------------------------

TITLE: Overriding Built-in Signs Handler
DESCRIPTION: Example showing how to override Neovim's built-in signs handler to show only the highest severity diagnostic per line
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_2

LANGUAGE: lua
CODE:
```
local ns = vim.api.nvim_create_namespace("my_namespace")

local orig_signs_handler = vim.diagnostic.handlers.signs

vim.diagnostic.handlers.signs = {
  show = function(_, bufnr, _, opts)
    local diagnostics = vim.diagnostic.get(bufnr)

    local max_severity_per_line = {}
    for _, d in pairs(diagnostics) do
      local m = max_severity_per_line[d.lnum]
      if not m or d.severity < m.severity then
        max_severity_per_line[d.lnum] = d
      end
    end

    local filtered_diagnostics = vim.tbl_values(max_severity_per_line)
    orig_signs_handler.show(ns, bufnr, filtered_diagnostics, opts)
  end,
  hide = function(_, bufnr)
    orig_signs_handler.hide(ns, bufnr)
  end,
}
```

----------------------------------------

TITLE: Demonstrating List Reference Behavior in Vim
DESCRIPTION: Shows how lists in Vim are passed by reference, meaning changes to one variable affect another that references the same list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
:let bb = aa
:call add(aa, 4)
:echo bb
```

----------------------------------------

TITLE: Generating Random Numbers in Vim
DESCRIPTION: Example of using the rand() function to generate pseudo-random numbers with the xoshiro128** algorithm. Demonstrates basic random number generation, using a seed, and generating numbers within a specific range.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_198

LANGUAGE: vim
CODE:
```
echo rand()
let seed = srand()
echo rand(seed)
echo rand(seed) % 16  " random number 0 - 15
```

----------------------------------------

TITLE: Customizing statusline with byte count and modified flag in Vim
DESCRIPTION: Sets up a statusline with byte count, byte value, and a red-highlighted modified flag. It also defines a custom highlight group for the modified flag.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_69

LANGUAGE: vim
CODE:
```
set statusline=%<%f%=\ [%1*%M%*%n%R%H]\ %-19(%3l,%02c%03V%)%O'%02b'
hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red
```

----------------------------------------

TITLE: Applying Workspace Edit in Neovim LSP (Lua)
DESCRIPTION: Applies a WorkspaceEdit. Takes the WorkspaceEdit object and the position encoding as parameters. The position encoding is required.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_46

LANGUAGE: lua
CODE:
```
vim.lsp.util.apply_workspace_edit(workspace_edit, position_encoding)
```

----------------------------------------

TITLE: Defining Script-Local Functions in VimScript
DESCRIPTION: This code shows how to define a function that is local to the script, avoiding naming conflicts with other scripts. It uses the 's:' prefix for script-local scope.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_33

LANGUAGE: VimScript
CODE:
```
function s:Add(from, correct)
  let to = input("type the correction for " .. a:from .. ": ")
  exe ":iabbrev " .. a:from .. " " .. to
..
endfunction
```

----------------------------------------

TITLE: Editing the Current Directory with netrw
DESCRIPTION: This snippet demonstrates how to open the file browser in Vim for directory listing using the ':edit .' command. The netrw plugin displays directory contents and allows file operations such as browsing different directories, sorting, and file editing. Special keys like <Enter>, <F1>, and '-' provide navigation options within the browser.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_0

LANGUAGE: VimScript
CODE:
```
" ============================================================================ ~\n" Netrw Directory Listing                                        (netrw v109) ~\n"   Sorted by      name ~\n"   Sort sequence: [\/]$,\.h$,\.c$,\.cpp$,*,\.info$,\.swp$,\.o$\.obj$,\.bak$ ~\n"   Quick Help: <F1>:help  -:go up dir  D:delete  R:rename  s:sort-by  x:exec ~\n" ============================================================================ ~\n../ ~\n./ ~\ncheck/ ~\nMakefile ~\nautocmd.txt ~\nchange.txt ~\neval.txt~ ~\nfiletype.txt~ ~\nhelp.txt.info ~\n\nv
```

----------------------------------------

TITLE: Flattening a Nested List in Vim
DESCRIPTION: Shows how to use the flatten() function to flatten a nested list. Two examples are provided: one fully flattening the list, and another limiting the flattening to one level deep.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_71

LANGUAGE: vim
CODE:
```
echo flatten([1, [2, [3, 4]], 5])
```

LANGUAGE: vim
CODE:
```
echo flatten([1, [2, [3, 4]], 5], 1)
```

----------------------------------------

TITLE: Using Vim Quickfix Commands
DESCRIPTION: A set of commands for working with the quickfix list, including displaying errors, navigating through errors, and populating the quickfix list from various sources.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:cc [nr]	display error [nr] (default is the same again)
:cn		display the next error
:cp		display the previous error
:cl		list all errors
:cf		read errors from the file 'errorfile'
:cgetb		like :cbuffer but don't jump to the first error
:cg		like :cfile but don't jump to the first error
:cgete		like :cexpr but don't jump to the first error
:caddf		add errors from the error file to the current
		   quickfix list
:cad		add errors from an expression to the current
		   quickfix list
:cb		read errors from text in a buffer
:cex		read errors from an expression
:cq		quit without writing and return error code (to
		   the compiler)
:make [args]	start make, read errors, and jump to first
		   error
:gr[ep] [args]	execute 'grepprg' to find matches and jump to
		   the first one
```

----------------------------------------

TITLE: Building Neovim with CMake
DESCRIPTION: These commands build Neovim using CMake. It configures the CMake project in the `build` directory with the Ninja generator and RelWithDebInfo build type. Then, it builds Neovim using the configured CMake project.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_15

LANGUAGE: Shell
CODE:
```
"cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build"
```

----------------------------------------

TITLE: Setting Diagnostics for Namespace and Buffer in Vim
DESCRIPTION: The `vim.diagnostic.setloclist` is used to add buffer diagnostics to the location list. Dependencies include a valid diagnostics namespace, buffer number, and optional display options. It modifies the location list based on buffer diagnostics and supports configuration through the `opts` parameter, which can specify the namespace, window number, open behavior, title, and severity filter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
setloclist({opts})                               *vim.diagnostic.setloclist()*
    Add buffer diagnostics to the location list.

    Parameters: ~
      • {opts}  (`table?`) Configuration table with the following keys:
                • {namespace}? (`integer`) Only add diagnostics from the given
                  namespace.
                • {winnr}? (`integer`, default: `0`) Window number to set
                  location list for.
                • {open}? (`boolean`, default: `true`) Open the location list
                  after setting.
                • {title}? (`string`) Title of the location list. Defaults to
                  "Diagnostics".
                • {severity}? (`vim.diagnostic.SeverityFilter`) See
                  |diagnostic-severity|.
```

----------------------------------------

TITLE: Setting Case Sensitivity Options in Vim Search
DESCRIPTION: Commands for controlling case sensitivity during searches using the 'ignorecase' and 'smartcase' options. These settings allow for flexible case matching behavior when searching for patterns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:set ignorecase
```

LANGUAGE: vim
CODE:
```
:set noignorecase
```

LANGUAGE: vim
CODE:
```
:set ignorecase smartcase
```

----------------------------------------

TITLE: Creating and Managing Namespaces in Neovim
DESCRIPTION: Function to create a new namespace or retrieve an existing one. Used for buffer highlights and virtual text management. Returns a namespace ID that can be used with extmark operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_65

LANGUAGE: vimdoc
CODE:
```
nvim_create_namespace({name})
```

----------------------------------------

TITLE: Generating Single Tags File Recursively
DESCRIPTION: Command to generate a comprehensive tags file for an entire project directory using Universal or Exuberant ctags
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_3

LANGUAGE: shell
CODE:
```
cd ~/proj
ctags -R .
```

----------------------------------------

TITLE: Extracting Substring in Vim
DESCRIPTION: Shows how to use strpart() function to extract a substring from a given string, specifying start position and length in bytes or characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_260

LANGUAGE: vim
CODE:
```
echo strpart("abcdefg", 3, 2)    " returns 'de'
echo strpart("abcdefg", -2, 4)   " returns 'ab'
echo strpart("abcdefg", 5, 4)    " returns 'fg'
echo strpart("abcdefg", 3)	 " returns 'defg'
```

LANGUAGE: vim
CODE:
```
strpart(getline("."), col(".") - 1, 1, v:true)
```

----------------------------------------

TITLE: Toggling Inlay Hints in Neovim LSP (Lua)
DESCRIPTION: Enables or disables inlay hints for the LSP. Takes an optional boolean parameter to explicitly enable or disable, and an optional filter table for targeting specific buffers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_42

LANGUAGE: lua
CODE:
```
vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled())
```

----------------------------------------

TITLE: Running the Make Command in Vim
DESCRIPTION: The :make command runs the make program with specified arguments and captures the output for error navigation. This allows compiling directly from Vim and jumping to error locations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:make {arguments}
```

----------------------------------------

TITLE: Setting Up Python Virtualenv for Neovim
DESCRIPTION: Creates a dedicated Python virtualenv for Neovim and installs the pynvim package. This is useful for isolating Neovim's Python dependencies from project-specific virtualenvs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_2

LANGUAGE: bash
CODE:
```
pyenv install 3.4.4
pyenv virtualenv 3.4.4 py3nvim
pyenv activate py3nvim
python3 -m pip install pynvim
pyenv which python  # Note the path
```

----------------------------------------

TITLE: Fuzzy Matching with Positions using matchfuzzypos() in Vim
DESCRIPTION: Shows how to use matchfuzzypos() to get not only the matched strings but also the character positions and matching scores. This is useful for more detailed fuzzy matching results.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_168

LANGUAGE: vim
CODE:
```
echo matchfuzzypos(['testing'], 'tsg')

```

LANGUAGE: vim
CODE:
```
echo matchfuzzypos(['clay', 'lacy'], 'la')

```

----------------------------------------

TITLE: Throwing Custom Exceptions in Vim Script
DESCRIPTION: Shows how to throw a custom exception and catch it using a pattern match.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_107

LANGUAGE: vim
CODE:
```
:try | throw "oops" | catch /^oo/ | echo "caught" | endtry
```

----------------------------------------

TITLE: Displaying Syntax Stack Under Cursor in Vim
DESCRIPTION: This example shows how to display the syntax stack under the cursor using a for loop and the synstack and synIDattr functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_271

LANGUAGE: vim
CODE:
```
for id in synstack(line("."), col("."))
   echo synIDattr(id, "name")
endfor
```

----------------------------------------

TITLE: Retrieving History Items in Vim
DESCRIPTION: Examples of retrieving items from Vim's history using histget(). This includes reusing a previous search and defining a custom command to execute a specific history entry.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_127

LANGUAGE: vim
CODE:
```
execute '/' .. histget("search", -2)
```

LANGUAGE: vim
CODE:
```
command -nargs=1 H execute histget("cmd", 0+<args>)
```

----------------------------------------

TITLE: Clearing and Redrawing Screen in Neovim - Vim
DESCRIPTION: This snippet explains the functionality of commands for clearing and redrawing the screen in Neovim. It summarizes the CTRL-L and :redraw commands, which enable users to refresh the interface and clear search highlighting. These commands help maintain an organized workspace by ensuring the display is current and free of obstructions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
CTRL-L		Clears and redraws the screen.  The redraw may happen later, after processing typeahead.
		See also |nvim__redraw()|.
```

LANGUAGE: vim
CODE:
```
:redr[aw][!] 	Redraws pending screen updates now, or the entire screen if "!" is included.  To CLEAR the screen use |:mode| or |CTRL-L|.
		It can be used to redraw the screen in a script or function (or a mapping if |'lazyredraw'| is set).
		See also |nvim__redraw()|.
```

----------------------------------------

TITLE: Special Pattern Matching Atoms in Vim Regular Expressions
DESCRIPTION: This snippet shows special pattern matching atoms in Vim regular expressions. It includes atoms for matching specific characters like <Esc>, <Tab>, <CR>, and end-of-line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_26

LANGUAGE: vim
CODE:
```
\e  matches <Esc>                  */\e*
\t  matches <Tab>                  */\t*
\r  matches <CR>                   */\r*
\b  matches <BS>                   */\b*
\n  matches an end-of-line          */\n*
```

----------------------------------------

TITLE: Automatically Setting Syntax-Based Omni Completion for All Filetypes
DESCRIPTION: Autocmd configuration to set syntax-based completion for any filetype that doesn't already have a specific Omni completion function defined.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
if has("autocmd") && exists("+omnifunc")
    autocmd Filetype *
		    \	if &omnifunc == "" |
		    \		setlocal omnifunc=syntaxcomplete#Complete |
		    \	endif
endif
```

----------------------------------------

TITLE: Chain of Mapping Execution in Vim Plugin
DESCRIPTION: Shows how a user mapping (\a) gets translated through <Plug> to a script-local function call.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_35

LANGUAGE: vim
CODE:
```
\a  ->  <Plug>TypecorrAdd;  ->  <SID>Add  ->  :call <SID>Add()
```

----------------------------------------

TITLE: Making Corrections with Keyboard Commands in Vim
DESCRIPTION: Demonstrates how to correct mistakes in text using Vim's navigation and editing commands. Shows two approaches to fix a typing error: first using Normal mode commands and second using control keys while staying in Insert mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_0

LANGUAGE: vimdoc
CODE:
```
<Esc>4blraA
```

LANGUAGE: vimdoc
CODE:
```
<C-Left><C-Left><C-Left><C-Left><Right><Del>a<End>
```

----------------------------------------

TITLE: Implementing setTimeout and setInterval in Lua with UV Timer
DESCRIPTION: Example showing how to create setTimeout and setInterval wrappers using UV timer handles. Includes functions for creating timed callbacks and clearing intervals.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_14

LANGUAGE: lua
CODE:
```
local function setTimeout(timeout, callback)
  local timer = uv.new_timer()
  timer:start(timeout, 0, function ()
    timer:stop()
    timer:close()
    callback()
  end)
  return timer
end

local function setInterval(interval, callback)
  local timer = uv.new_timer()
  timer:start(interval, interval, function ()
    callback()
  end)
  return timer
end

local function clearInterval(timer)
  timer:stop()
  timer:close()
end
```

----------------------------------------

TITLE: Calling Functions with Dynamic Names in Vim
DESCRIPTION: Example of calling a function with a dynamically constructed name using curly braces. This allows selecting which function to call based on variable values at runtime.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_89

LANGUAGE: viml
CODE:
```
:let func_end='whizz'
:call my_func_{func_end}(parameter)
```

----------------------------------------

TITLE: Detaching Client from Buffer in Lua
DESCRIPTION: This function detaches a client from a specified buffer. It notifies the server that the text document (buffer) was closed, though the server may still send notifications. Accepts the buffer number and client id as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_20

LANGUAGE: Lua
CODE:
```
buf_detach_client({bufnr}, {client_id})          *vim.lsp.buf_detach_client()*
    Parameters: ~
      • {bufnr}      (`integer`) Buffer handle, or 0 for current
      • {client_id}  (`integer`) Client id
```

----------------------------------------

TITLE: Maintaining Persistent Script Variables in Vim
DESCRIPTION: Example showing how to maintain a counter across multiple executions of the same script. The code checks if a script-scoped variable exists and either initializes it or increments it, demonstrating variable persistence.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_87

LANGUAGE: viml
CODE:
```
if !exists("s:counter")
  let s:counter = 1
  echo "script executed for the first time"
else
  let s:counter = s:counter + 1
  echo "script executed " .. s:counter .. " times now"
endif
```

----------------------------------------

TITLE: Using get() Function for Lists, Blobs, and Dictionaries in Vim Script
DESCRIPTION: Demonstrates the usage of the get() function for retrieving items from lists, blobs, and dictionaries in Vim script. It shows how to provide default values and handle non-existent keys.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_80

LANGUAGE: vim
CODE:
```
let val = get(g:, 'var_name', 'default')
```

----------------------------------------

TITLE: Getting system name using vim.uv in Lua
DESCRIPTION: Example of using vim.uv.os_uname() in Lua to get the system name as an alternative to using has() for platform detection.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_117

LANGUAGE: lua
CODE:
```
print(vim.uv.os_uname().sysname)
```

----------------------------------------

TITLE: Converting LSP Input to Markdown in Neovim (Lua)
DESCRIPTION: Converts MarkedString, MarkedString[], or MarkupContent into a list of valid markdown lines. Useful for populating hover windows and parsing signature help results.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_50

LANGUAGE: lua
CODE:
```
convert_input_to_markdown_lines({input}, {contents})
```

----------------------------------------

TITLE: Stopping All LSP Clients in Neovim
DESCRIPTION: Shows how to stop all running LSP clients in Neovim. The example uses vim.lsp.get_clients() to get all active clients and passes them to vim.lsp.stop_client() to shut them down.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_32

LANGUAGE: lua
CODE:
```
vim.lsp.stop_client(vim.lsp.get_clients())
```

----------------------------------------

TITLE: Configuring WSL Clipboard Integration in Neovim
DESCRIPTION: Sets up a custom clipboard provider for Windows Subsystem for Linux (WSL) that uses clip.exe for copying and PowerShell for pasting. This bridges the Linux and Windows clipboard systems.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
let g:clipboard = {
  \   'name': 'WslClipboard',
  \   'copy': {
  \      '+': 'clip.exe',
  \      '*': 'clip.exe',
  \    },
  \   'paste': {
  \      '+': 'powershell.exe -NoLogo -NoProfile -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace("`r", ""))',
  \      '*': 'powershell.exe -NoLogo -NoProfile -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace("`r", ""))',
  \   },
  \   'cache_enabled': 0,
  \ }
```

----------------------------------------

TITLE: Finding local identifiers in current function (Vim)
DESCRIPTION: This snippet demonstrates how to find the first occurrence of the word under the cursor in the current function using the `gd` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_34

LANGUAGE: vim
CODE:
```
"gd"
```

----------------------------------------

TITLE: Configuring Window Border with Custom Highlights in Neovim
DESCRIPTION: Example showing how to configure a window border with custom highlight groups for different border components in Neovim's floating windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_82

LANGUAGE: viml
CODE:
```
[ ["+", "MyCorner"], ["x", "MyBorder"] ]
```

----------------------------------------

TITLE: Nested Try-Catch Blocks in Vim Script
DESCRIPTION: Demonstrates how an uncaught exception in an inner try block propagates to an outer try block while still executing the finally clause of the inner block.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_128

LANGUAGE: vim
CODE:
```
:try
:  try
:    throw "foo"
:  catch /foobar/
:    echo "foobar"
:  finally
:    echo "inner finally"
:  endtry
:catch /foo/
:  echo "foo"
:endtry
```

----------------------------------------

TITLE: Configuring Horizontal Scrolling Indicators in Neovim
DESCRIPTION: This VimL snippet demonstrates how to enhance horizontal scrolling when 'wrap' is disabled. It sets 'sidescroll' to 5 characters and adds special indicators to 'listchars' to show when text extends beyond the visible area.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_87

LANGUAGE: viml
CODE:
```
set sidescroll=5
set listchars+=precedes:<,extends:>
```

----------------------------------------

TITLE: Configuring PowerShell as Neovim Shell
DESCRIPTION: Complete configuration for using PowerShell as the shell in Neovim. Sets shell executable with fallback, configures proper encoding, parameters for command execution, output redirection and disables aliases that might interfere.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_62

LANGUAGE: vim
CODE:
```
let &shell = executable('pwsh') ? 'pwsh' : 'powershell'
let &shellcmdflag = '-NoLogo -NonInteractive -ExecutionPolicy RemoteSigned -Command [Console]::InputEncoding=[Console]::OutputEncoding=[System.Text.UTF8Encoding]::new();$PSDefaultParameterValues[\'Out-File:Encoding\']=\'utf8\';$PSStyle.OutputRendering=\'plaintext\';Remove-Alias -Force -ErrorAction SilentlyContinue tee;'
let &shellredir = '2>&1 | %%{ "$_" } | Out-File %s; exit $LastExitCode'
let &shellpipe  = '2>&1 | %%{ "$_" } | tee %s; exit $LastExitCode'
set shellquote= shellxquote=
```

----------------------------------------

TITLE: Vim Help Commands
DESCRIPTION: Various help commands for accessing Vim's documentation system
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:help
```

LANGUAGE: vim
CODE:
```
:help x
```

LANGUAGE: vim
CODE:
```
:help deleting
```

LANGUAGE: vim
CODE:
```
:help index
```

LANGUAGE: vim
CODE:
```
:help CTRL-A
```

LANGUAGE: vim
CODE:
```
:help i_CTRL-H
```

LANGUAGE: vim
CODE:
```
:help -t
```

LANGUAGE: vim
CODE:
```
:help 'number'
```

LANGUAGE: vim
CODE:
```
:help i_<Up>
```

LANGUAGE: vim
CODE:
```
:help E37
```

----------------------------------------

TITLE: Creating a Custom Window Layout in Vim
DESCRIPTION: This code creates a custom window layout in Vim with a help window at the top and a file explorer on the left side.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:help
CTRL-W w
:vertical split ~/
```

----------------------------------------

TITLE: Iterating TreeSitter Query Matches in Lua
DESCRIPTION: Demonstrates how to iterate over matches of a TreeSitter query within a given node range. This example shows how to access captured nodes, pattern IDs, and metadata for each match.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_28

LANGUAGE: lua
CODE:
```
for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, 0, -1) do
  for id, nodes in pairs(match) do
    local name = query.captures[id]
    for _, node in ipairs(nodes) do
      -- `node` was captured by the `name` capture in the match

      local node_data = metadata[id] -- Node level metadata
      -- ... use the info here ...
    end
  end
end
```

----------------------------------------

TITLE: Defining Functions Once in Vim Filetype Plugins
DESCRIPTION: This snippet demonstrates how to ensure a function is only defined once in a filetype plugin, which is sourced multiple times.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_51

LANGUAGE: vim
CODE:
```
:if !exists("*s:Func")
:  function s:Func(arg)
:    ...
:  endfunction
:endif
```

----------------------------------------

TITLE: Defining a Command in Vim
DESCRIPTION: This snippet shows how to define a new user command in Vim that deletes the first line of the current buffer when executed. The command is defined using the ':command' command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:command DeleteFirst 1delete
```

----------------------------------------

TITLE: Opening Preview Window for Function Definition
DESCRIPTION: Using the :ptag command to open a preview window showing the definition of a specific function without losing current editing context
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:ptag write_char
```

----------------------------------------

TITLE: Setting quickfix list title and properties in Vim/Neovim
DESCRIPTION: Examples of using setqflist() with the 'what' dictionary to set various properties like title and list number. These examples show how to modify an existing quickfix list or create a new one with specific attributes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_227

LANGUAGE: viml
CODE:
```
call setqflist([], 'r', {'title': 'My search'})
call setqflist([], 'r', {'nr': 2, 'title': 'Errors'})
call setqflist([], 'a', {'id':qfid, 'lines':["F1:10:L10"]})
```

----------------------------------------

TITLE: VimEnter Autocommand Example in Vimscript
DESCRIPTION: This snippet demonstrates how to use the `VimEnter` autocommand and the `v:vim_did_enter` variable to execute code only after Vim startup is complete. It checks if `v:vim_did_enter` is set; if so, it calls an initialization function; otherwise, it sets an autocommand to call the function when `VimEnter` is triggered.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
       "if v:vim_did_enter\n         call s:init()\n       else\n         au VimEnter * call s:init()\n       endif"
```

----------------------------------------

TITLE: Recording and Playing Back Macros in Neovim
DESCRIPTION: This Vimscript snippet demonstrates how to record a sequence of commands into a register to automate repetitive tasks. The recording starts with 'q' followed by a register name, and ends with 'q'. The macro can be executed using '@' followed by the register name. This method allows recording multiple commands, including movements, insertions, and deletions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_0

LANGUAGE: Vimscript
CODE:
```
qa
^
i#include "<Esc>
$
a"<Esc>
j
q
```

----------------------------------------

TITLE: Reordering List Items in Vim
DESCRIPTION: Shows functions for changing the order of items in a list: sorting, reversing, and removing duplicates.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_34

LANGUAGE: vim
CODE:
```
:call sort(list)		" sort a list alphabetically
:call reverse(list)		" reverse the order of items
:call uniq(sort(list))		" sort and remove duplicates
```

----------------------------------------

TITLE: Calling a Function with Arguments in Neovim using Vim Script
DESCRIPTION: The 'call' function invokes a given function with a list of arguments, optionally allowing a dictionary to set local variables, returning the result of the function call.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_27

LANGUAGE: vim
CODE:
```
call({func}, {arglist} [, {dict}])
```

----------------------------------------

TITLE: Configuring Diagnostic Severity in Lua
DESCRIPTION: Examples of different ways to specify diagnostic severity when using vim.diagnostic.get()
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_0

LANGUAGE: lua
CODE:
```
vim.diagnostic.get(0, { severity = vim.diagnostic.severity.WARN })

vim.diagnostic.get(0, { severity = { min = vim.diagnostic.severity.WARN } })

vim.diagnostic.get(0, { severity = {
    vim.diagnostic.severity.WARN,
    vim.diagnostic.severity.INFO,
} })
```

----------------------------------------

TITLE: Defining Lua Docstring with Class and Parameters
DESCRIPTION: Example showing how to document a Lua function with class definition and inline documentation for parameters using LuaCATS annotations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_2

LANGUAGE: lua
CODE:
```
--- Object with fields:
--- @class myOpts
--- @inlinedoc
---
--- Documentation for some field
--- @field somefield? integer

--- @param opts? myOpts
function foo(opts)
end
```

----------------------------------------

TITLE: Recursive Mappings in Vim
DESCRIPTION: Describes the concept of recursive mappings in Vim and how to avoid issues associated with them by using the :noremap command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
:map ab abcd
```

LANGUAGE: vim
CODE:
```
:noremap k j
```

LANGUAGE: vim
CODE:
```
:noremap j k
```

----------------------------------------

TITLE: Modifying List Ranges in Vim
DESCRIPTION: Shows how to change a range of items in a list by specifying start and end indices.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_30

LANGUAGE: vim
CODE:
```
:let list[3:5] = [3, 4, 5]
```

----------------------------------------

TITLE: Enabling Filetype Plugins for Omni Completion
DESCRIPTION: Configuration commands for enabling filetype plugins in Vim, which are required for Omni completion (intelligent code completion) to work properly.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_3

LANGUAGE: vimdoc
CODE:
```
filetype plugin on
```

LANGUAGE: vimdoc
CODE:
```
filetype plugin indent on
```

----------------------------------------

TITLE: Checking Executable Safety in Vim Scripts
DESCRIPTION: Function to determine if it's safe to execute a given executable for a specific filetype. It returns TRUE or FALSE based on security settings and takes filetype and executable as arguments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_141

LANGUAGE: vimdoc
CODE:
```
dist#vim#IsSafeExecutable(filetype, executable) ~

This function takes a filetype and an executable and checks whether it is safe
to execute the given executable.  For security reasons users may not want to
have Vim execute random executables or may have forbidden to do so for
specific filetypes by setting the "<filetype>_exec" variable (|plugin_exec|).

It returns |TRUE| or |FALSE| to indicate whether the plugin should run the given
executable.  It takes the following arguments:

	argument	type ~

	filetype	string
	executable	string
```

----------------------------------------

TITLE: Saving and Restoring Register Values in Vim
DESCRIPTION: Examples demonstrating how to save and restore register values using getreginfo(), getreg(), and setreg() functions in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_229

LANGUAGE: vim
CODE:
```
let var_a = getreginfo()
call setreg('a', var_a)
```

LANGUAGE: vim
CODE:
```
let var_a = getreg('a', 1, 1)
let var_amode = getregtype('a')
" ....
call setreg('a', var_a, var_amode)
```

----------------------------------------

TITLE: Creating Buffer-Relative Float in Lua
DESCRIPTION: Creates a floating window that follows buffer content as it scrolls, positioned relative to a specific buffer position.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_80

LANGUAGE: lua
CODE:
```
vim.api.nvim_open_win(0, false, 
  {relative='win', width=12, height=3, bufpos={100,10}})
```

----------------------------------------

TITLE: Dictionary Creation and Access in Vim
DESCRIPTION: Examples of creating and accessing dictionary data structures in Vim, including basic key-value pair usage.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_22

LANGUAGE: viml
CODE:
```
:let uk2nl = {'one': 'een', 'two': 'twee', 'three': 'drie'}
:echo uk2nl['two']
```

----------------------------------------

TITLE: Iterating Through Argument List in Vimscript
DESCRIPTION: This example demonstrates how to iterate through the argument list using argc() and argv() functions, creating a menu item for each argument.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_7

LANGUAGE: vimscript
CODE:
```
let i = 0
while i < argc()
  let f = escape(fnameescape(argv(i)), '.')
  exe 'amenu Arg.' .. f .. ' :e ' .. f .. '<CR>'
  let i = i + 1
endwhile
```

----------------------------------------

TITLE: Setting and Getting Extmarks in Neovim
DESCRIPTION: Example demonstrating how to create, get and manage extended marks (extmarks) in a buffer using namespaces
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
let g:mark_ns = nvim_create_namespace('myplugin')
let g:mark_id = nvim_buf_set_extmark(0, g:mark_ns, 0, 2, {})
```

LANGUAGE: vim
CODE:
```
echo nvim_buf_get_extmark_by_id(0, g:mark_ns, g:mark_id, {})
" => [0, 2]
```

LANGUAGE: vim
CODE:
```
echo nvim_buf_get_extmarks(0, g:mark_ns, 0, -1, {})
" => [[1, 0, 2]]
```

LANGUAGE: vim
CODE:
```
echo nvim_buf_get_extmark_by_id(0, g:mark_ns, g:mark_id, {})
" => [0, 1]
```

----------------------------------------

TITLE: Using wildcard to add directories to path (Vim)
DESCRIPTION: This snippet shows how to use the `*` wildcard to add multiple subdirectories to the 'path' option, making Vim search within them for include files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_27

LANGUAGE: vim
CODE:
```
":set path+=/usr/*/include"
```

----------------------------------------

TITLE: Setting Up Lua Linting with Stylua in CMake
DESCRIPTION: Creates a target for linting Lua files using stylua. The target checks Lua files in specified directories against stylua's formatting rules without modifying them.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_17

LANGUAGE: cmake
CODE:
```
add_glob_target(
  TARGET lintlua-stylua
  COMMAND ${STYLUA_PRG}
  FLAGS --color=always --check --respect-ignores
  GLOB_DIRS ${STYLUA_DIRS}
  GLOB_PAT *.lua
  TOUCH_STRATEGY PER_DIR)
```

----------------------------------------

TITLE: Applying Text Edits in Neovim LSP (Lua)
DESCRIPTION: Applies a list of text edits to a buffer. Takes an array of TextEdit objects, the buffer number, and the position encoding as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_45

LANGUAGE: lua
CODE:
```
vim.lsp.util.apply_text_edits(text_edits, bufnr, position_encoding)
```

----------------------------------------

TITLE: Lua Code Example for Treesitter Highlighting
DESCRIPTION: This Lua code snippet demonstrates a simple function definition. It will be parsed by treesitter, and the identifiers `foo` and `bar` within the parameters will be highlighted based on the `@variable.parameter` capture in the associated query.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_14

LANGUAGE: lua
CODE:
```
"function f(foo, bar) end"
```

----------------------------------------

TITLE: Executing Commands on Quickfix List Entries in Vim Script
DESCRIPTION: This Vim command executes a given command on each file in the quickfix list. It serves like a for-each loop over quickfix entries, using placeholder commands to iterate and execute. Ideal for batch processing files in a list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_26

LANGUAGE: vimscript
CODE:
```
:cfdo[!] {cmd}   Execute {cmd} in each file in the quickfix list.
It works like doing this: >
  :cfirst
  :{cmd}
  :cnfile
  :{cmd}
etc.
```

----------------------------------------

TITLE: Getting Autocommands with Multiple Criteria in Lua
DESCRIPTION: Example of using nvim_get_autocmds() with multiple criteria to retrieve autocommands. The first example shows matching all given criteria, while the second demonstrates retrieving all commands from a specific group.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_87

LANGUAGE: lua
CODE:
```
-- Matches all criteria
autocommands = vim.api.nvim_get_autocmds({
  group = 'MyGroup',
  event = {'BufEnter', 'BufWinEnter'},
  pattern = {'*.c', '*.h'}
})

-- All commands from one group
autocommands = vim.api.nvim_get_autocmds({
  group = 'MyGroup',
})
```

----------------------------------------

TITLE: Expression Mapping Example in Neovim
DESCRIPTION: This example illustrates how to create an expression mapping where the right-hand side (RHS) is evaluated to produce the actual mapping. It also shows the usage of script-local functions to avoid polluting the global namespace and potential issues with side effects.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
	:inoremap <expr> . <SID>InsertDot()
	func StoreColumn()
	  let g:column = col('.')
	  return 'x'
	endfunc
	nnoremap <expr> x StoreColumn()
	nmap ! f!x
	nmap ! f!<Ignore>x
```

----------------------------------------

TITLE: Anonymous Function Directly Assigned to Dictionary - Vim Script
DESCRIPTION: This snippet shows how to define an anonymous function directly assigned to a dictionary without the 'dict' attribute. This allows the function to obtain a reference via Funcref while using its own method of invoking.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_59

LANGUAGE: vim
CODE:
```
:let mydict = {'data': [0, 1, 2, 3]}
:function mydict.len()
:   return len(self.data)
:endfunction
:echo mydict.len()
```

----------------------------------------

TITLE: Command Line Completion Examples in Neovim
DESCRIPTION: Demonstrates file name and option completion using the Tab key.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:edit b<Tab>
:edit i<Tab>
:set isk<Tab>
:set iskeyword=@,48-57,_,192-255
```

----------------------------------------

TITLE: Handling Local Options
DESCRIPTION: This snippet provides guidance on how local options work in Neovim, particularly in relation to windows and buffers. It discusses how local options are instantiated and manipulated when editing or splitting windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
Some of the options only apply to a window or buffer. Each window or buffer has its own copy of this option. When splitting a window, the local options are copied to the new window.
```

----------------------------------------

TITLE: Using indexof() with string expressions and function references
DESCRIPTION: Shows how to use the indexof() function which evaluates an expression for each item in a list or blob until it returns true. Examples demonstrate using a string expression to check an object property and using function references with different start indices.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_131

LANGUAGE: vim
CODE:
```
let l = [#{n: 10}, #{n: 20}, #{n: 30}]
echo indexof(l, "v:val.n == 20")
echo indexof(l, {i, v -> v.n == 30})
echo indexof(l, "v:val.n == 20", #{startidx: 1})
```

----------------------------------------

TITLE: Getting Current Diagnostics - Lua
DESCRIPTION: Fetches current diagnostic messages from a specified buffer. This function is essential for retrieving detailed information about existing diagnostics, allowing users to analyze and respond to issues in their code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_12

LANGUAGE: Lua
CODE:
```
vim.diagnostic.get(bufnr, opts)
```

----------------------------------------

TITLE: Insert mode abbreviation example
DESCRIPTION: This snippet shows an example of how to create an insert mode abbreviation that inserts text and moves the cursor. It abbreviates 'if' to 'if ()' and places the cursor between the parentheses using `<Left>`.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_25

LANGUAGE: Vim Script
CODE:
```
:iab if if ()<Left>
```

----------------------------------------

TITLE: Appending Items to Lists in Vimscript
DESCRIPTION: The add() function appends an item to a List or Blob. It returns the modified List or Blob. For Lists, single items are appended as-is, even if they are Lists themselves.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_2

LANGUAGE: vimscript
CODE:
```
let alist = add([1, 2, 3], item)
```

LANGUAGE: vimscript
CODE:
```
call add(mylist, "woodstock")
```

----------------------------------------

TITLE: Getting Current Diagnostics Count - Lua
DESCRIPTION: Retrieves the current count of diagnostics present in a specified buffer or globally. It returns a table where the keys are severity levels and the values are counts, providing useful metrics for understanding the state of diagnostics in the editor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_10

LANGUAGE: Lua
CODE:
```
vim.diagnostic.count(bufnr, opts)
```

----------------------------------------

TITLE: Enable Experimental Vim Loader for Lua
DESCRIPTION: Activates the new experimental Vim loader that byte-compiles and caches Lua files for improved loading efficiency. Requires a modification in the `init.lua` file during Nvim setup. This snippet enhances file loading performance by enabling the `vim.loader.enable` function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_4

LANGUAGE: lua
CODE:
```
vim.loader.enable()
```

----------------------------------------

TITLE: Reducing Collections with reduce() in Vim
DESCRIPTION: Examples of using the reduce() function to process collections (lists, strings, blobs) by applying a function to accumulate results, including summation, concatenation, and conversion operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_203

LANGUAGE: vim
CODE:
```
echo reduce([1, 3, 5], { acc, val -> acc + val })
echo reduce(['x', 'y'], { acc, val -> acc .. val }, 'a')
echo reduce(0z1122, { acc, val -> 2 * acc + val })
echo reduce('xyz', { acc, val -> acc .. ',' .. val })
```

----------------------------------------

TITLE: Preserving cpoptions in VimScript
DESCRIPTION: This snippet shows how to preserve and restore the 'cpoptions' setting to avoid side effects when using line continuation in a Vim script.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_30

LANGUAGE: VimScript
CODE:
```
let s:save_cpo = &cpo
set cpo&vim
..
let &cpo = s:save_cpo
unlet s:save_cpo
```

----------------------------------------

TITLE: Content-Based Filetype Detection for Script Files
DESCRIPTION: Script to detect filetypes based on file contents rather than name. This example recognizes script files that start with a specific shebang line and sets their filetype appropriately.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_7

LANGUAGE: viml
CODE:
```
if did_filetype()
  finish
endif
if getline(1) =~ '^#!.*[/\\]xyz\>'
  setf xyz
endif
```

----------------------------------------

TITLE: Configuring Cursor Blinking in TUI
DESCRIPTION: Command to enable cursor blinking in Neovim's TUI with customizable blink timing
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.10.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
set guicursor+=n-v-c:blinkon500-blinkoff500
```

----------------------------------------

TITLE: Using nextgroup with skip options in Vim syntax
DESCRIPTION: Example demonstrating the 'nextgroup' argument with 'skipwhite' and 'skipempty' to create a multi-line if-statement syntax. This allows highlighting to continue across lines and skip whitespace.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_163

LANGUAGE: vim
CODE:
```
:syn match ifstart "\<if.*"    nextgroup=ifline skipwhite skipempty
:syn match ifline  "[^ \t].*" nextgroup=ifline skipwhite skipempty contained
:syn match ifline  "endif"    contained
```

----------------------------------------

TITLE: Copying v:event in TextYankPost Autocommand in Neovim VimL
DESCRIPTION: This snippet shows how to properly copy the v:event dictionary in an autocommand. It uses deepcopy() to create a safe copy of the event data.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
au TextYankPost * let g:foo = deepcopy(v:event)
```

----------------------------------------

TITLE: Environment Variables Expansion in Neovim
DESCRIPTION: This snippet explains how environment variables are expanded in specific string options within Neovim. It provides examples to illustrate how to use environment variables in setting options and the behavior of such expansion.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set term=$TERM.new
:set path=/usr/$INCLUDE,$HOME/include,.
```

----------------------------------------

TITLE: Retrieving Buffer Number in Neovim using Vim Script
DESCRIPTION: The 'bufnr' function returns the buffer number corresponding to a specified name, or creates a new buffer if the create argument is set to true.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
bufnr([{buf} [, {create}])
```

----------------------------------------

TITLE: Finding and Opening Files in Vim
DESCRIPTION: This snippet explains how to find and open files within Vim using the ':find' and ':sfind' commands. It demonstrates how to specify file paths and use Vim's path option to locate files effectively.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:find inits.h
```

LANGUAGE: vim
CODE:
```
vim "+find stdio.h"
```

----------------------------------------

TITLE: Insert Mode Commands Reference
DESCRIPTION: Lists all available commands and key combinations in Neovim's insert mode, including control sequences, special keys, and their corresponding actions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_0

LANGUAGE: vimdoc
CODE:
```
*index.txt*     Nvim

CTRL-@ 		insert previously inserted text and stop insert
CTRL-A 		insert previously inserted text
CTRL-C 		quit insert mode, without checking for abbreviation
CTRL-D 		delete one shiftwidth of indent in the current line
```

----------------------------------------

TITLE: Saving and Loading Sessions in Vim
DESCRIPTION: This snippet demonstrates how to save the current session, switch to a different project, and load a previously saved session in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:wall
:mksession! ~/.config/nvim/secret.vim
:source ~/.config/nvim/boring.vim
```

----------------------------------------

TITLE: Opening Quickfix Window in Vim Script
DESCRIPTION: This command opens a dedicated window to show the current list of errors. It supports specifying window height and toggles the focus between existing and new quickfix windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_29

LANGUAGE: vimscript
CODE:
```
:cope[n] [height]   Open a window to show the current list of errors.
```

----------------------------------------

TITLE: Using GDB for Crash Debugging
DESCRIPTION: Commands for using GDB to debug Vim crashes in test files. Demonstrates how to run Vim under GDB with specific test parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/debug.txt#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
cd testdir
gdb ../vim
run -u unix.vim -U NONE -s dotest.in test11.in
```

----------------------------------------

TITLE: Using New Buffer Management Functions
DESCRIPTION: Details the transition from deprecated buffer-related functions to their replacements. For example, vim.lsp.buf_get_clients() is replaced by vim.lsp.get_clients() with a buffer parameter for specific client queries.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_3

LANGUAGE: Lua
CODE:
```
vim.lsp.buf_get_clients()
```

----------------------------------------

TITLE: Creating Buffer-local Autocommands in Vim
DESCRIPTION: Examples of defining buffer-local autocommands that are attached to specific buffers rather than matching patterns. Shows different ways to specify buffer targets.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_22

LANGUAGE: viml
CODE:
```
:au CursorHold <buffer>  echo 'hold'
:au CursorHold <buffer=33>  echo 'hold'
:au BufNewFile * au CursorHold <buffer=abuf>  echo 'hold'
```

----------------------------------------

TITLE: Using Function References in Vim
DESCRIPTION: Demonstrates how to create and use function references, allowing dynamic function calls based on conditions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
:let result = 0		" or 1
:function! Right()
:  return 'Right!'
:endfunc
:function! Wrong()
:  return 'Wrong!'
:endfunc
:
:if result == 1
:  let Afunc = function('Right')
:else
:  let Afunc = function('Wrong')
:endif
:echo call(Afunc, [])
```

----------------------------------------

TITLE: Treesitter Highlight Query Example
DESCRIPTION: This snippet shows an example of a treesitter query used for syntax highlighting. It matches an `identifier` node inside a `parameters` node and assigns it to the `@variable.parameter` capture.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_13

LANGUAGE: query
CODE:
```
"(parameters (identifier) @variable.parameter)"
```

----------------------------------------

TITLE: Previewing Location in Floating Window for Neovim LSP (Lua)
DESCRIPTION: Previews a location in a floating window. Behavior depends on the type of location (Location or LocationLink).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_62

LANGUAGE: lua
CODE:
```
preview_location({location}, {opts})
```

----------------------------------------

TITLE: Search Behavior Settings
DESCRIPTION: Commands to configure search wrapping and incremental search behavior.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:set nowrapscan
:set noincsearch
```

----------------------------------------

TITLE: Syntax Group Sequencing in Vim
DESCRIPTION: Illustrates how to define syntax matches with nextgroup and skipwhite arguments for sequential highlighting patterns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:syntax match xIf /if/ nextgroup=xIfCondition skipwhite
:syntax match xIfCondition /([^)]*)/contained nextgroup=xThen skipwhite
:syntax match xThen /then/ contained
```

----------------------------------------

TITLE: Looping Over Dictionary Values in Vim
DESCRIPTION: Demonstrates how to iterate over all values in a dictionary using the values() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_50

LANGUAGE: vim
CODE:
```
:for v in values(mydict)
:   echo "value: " .. v
:endfor
```

----------------------------------------

TITLE: Expression Execution in Vim Script
DESCRIPTION: Shows how to execute expressions and Normal mode commands using :execute and :normal commands. Includes examples of string concatenation and special key handling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_11

LANGUAGE: viml
CODE:
```
:execute "tag " .. tag_name
:execute "normal Inew text \<Esc>"
```

----------------------------------------

TITLE: List and Dictionary Extension with extend()
DESCRIPTION: Examples demonstrating how to extend lists and add items at specific positions using the extend() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_64

LANGUAGE: vim
CODE:
```
echo sort(extend(mylist, [7, 5]))
call extend(mylist, [2, 3], 1)
let newlist = [1, 2, 3] + [4, 5]
```

----------------------------------------

TITLE: Creating Position Parameters in Neovim LSP (Lua)
DESCRIPTION: Creates a TextDocumentPositionParams object for the current buffer and cursor position. Takes optional window ID and position encoding as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_57

LANGUAGE: lua
CODE:
```
make_position_params({window}, {position_encoding})
```

----------------------------------------

TITLE: Setting Buffer-Local Options in Vim Filetype Plugins
DESCRIPTION: This snippet shows how to use the :setlocal command to set options that only affect the current buffer in a filetype plugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_45

LANGUAGE: vim
CODE:
```
:setlocal
```

----------------------------------------

TITLE: Saving and Restoring Mappings
DESCRIPTION: Examples showing how to save and restore individual or multiple mappings using mapset.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_162

LANGUAGE: vim
CODE:
```
let save_map = maparg('K', 'n', 0, 1)
nnoremap K somethingelse
" ...
call mapset('n', 0, save_map)
```

LANGUAGE: vim
CODE:
```
let save_maps = maplist()->filter(
			\ {_, m -> m.lhs == 'K'})
nnoremap K somethingelse
cnoremap K somethingelse2
" ...
unmap K
for d in save_maps
    call mapset(d)
endfor
```

----------------------------------------

TITLE: Reading Binary Data from Files with readblob() in Vim
DESCRIPTION: Examples of reading binary data from files using the readblob() function, including reading from specific offsets, reading limited sizes, and reading from character devices.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_200

LANGUAGE: vim
CODE:
```
echo readblob('file.bin', -12)
```

LANGUAGE: vim
CODE:
```
echo readblob('file.bin', 0, 100)
```

LANGUAGE: vim
CODE:
```
echo readblob('/dev/ttyS0', 0, 10)
```

----------------------------------------

TITLE: Using OR Operator in Vim Patterns
DESCRIPTION: Demonstrates how to use the \| operator to match alternative patterns in Vim searches.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
/foo\|bar
/one\|two\|three
/\(foo\|bar\)\+
/end\(if\|while\|for\)
```

----------------------------------------

TITLE: Vim Visual Search Mapping
DESCRIPTION: A mapping that enables searching for selected text in Visual mode using the y register
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:vmap X y/<C-R>"<CR>
```

----------------------------------------

TITLE: Basic Help Navigation Commands in Nvim
DESCRIPTION: Essential commands for navigating in Nvim and its help system, including movement keys, closing windows, jumping to topics, and searching for help.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/help.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
Move around:  Use the cursor keys, or "h" to go left, "j" to go down, "k" to go up, "l" to go right.
Close this window:  Use ":q<Enter>".
Get out of Vim:  Use ":qa!<Enter>" (careful, all changes are lost!).

Jump to a subject:  Position the cursor on a tag (e.g. |bars|) and hit CTRL-].
With the mouse:  Double-click the left mouse button on a tag, e.g. |bars|.
Jump back:  Type CTRL-O.  Repeat to go further back.

Search for help:  Type ":help word", then hit CTRL-D to see matching help entries for "word".
Or use ":helpgrep word". |:helpgrep|
```

----------------------------------------

TITLE: Jumping to Function Definition
DESCRIPTION: Demonstrates Vim commands for navigating to function definitions using tags, including using :tag and CTRL-] commands to explore code structure
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:tag startlist
CTRL-]
```

----------------------------------------

TITLE: Vim line types visualization showing buffer, logical, window and screen lines
DESCRIPTION: ASCII diagram illustrating the four types of lines in Vim (buffer lines, logical lines, window lines, and screen lines) and how they relate to folding and display.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_8

LANGUAGE: text
CODE:
```
  buffer lines    logical lines   window lines    screen lines
  -----------------------------------------------------------------------
  1. one          1. one          1. +-- folded   1.  +-- folded
  2. two          2. +-- folded   2. five         2.  five
  3. three        3. five         3. six          3.  six
  4. four         4. six          4. seven        4.  seven
  5. five         5. seven                        5.  === status line ===
  6. six                                          6.  aaa
  7. seven                                        7.  bbb
                                                  8.  ccc ccc c
  1. aaa          1. aaa          1. aaa          9.  cc
  2. bbb          2. bbb          2. bbb          10. ddd
  3. ccc ccc ccc  3. ccc ccc ccc  3. ccc ccc c    11. ~
  4. ddd          4. ddd          4. cc           12. === status line ===
                                  5. ddd          13. (command line)
                                  6. ~
```

----------------------------------------

TITLE: Configuring a scratch buffer in Vim
DESCRIPTION: This code sets up a scratch buffer, which is used for temporary text that can be discarded. It sets the buffer type to 'nofile', hides the buffer instead of unloading it when it's no longer displayed, and disables the swap file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_9

LANGUAGE: vimdoc
CODE:
```
:setlocal buftype=nofile
:setlocal bufhidden=hide
:setlocal noswapfile
```

----------------------------------------

TITLE: Navigation Between Jumping Positions
DESCRIPTION: Demonstrates using commands to navigate between different cursor positions, including jumping to line numbers, searching, and using CTRL-O and CTRL-I for older and newer positions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
33G
/^The
CTRL-O
```

----------------------------------------

TITLE: Help Context Prefixes in Nvim
DESCRIPTION: Prefixes to use with the :help command to specify different contexts for help topics, such as normal mode commands, visual mode commands, and options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/help.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
WHAT			PREPEND    EXAMPLE	~
Normal mode command		   :help x
Visual mode command	i_	   :help v_u
Insert mode command	i_	   :help i_<Esc>
Command-line command	:	   :help :quit
Command-line editing	c_	   :help c_<Del>
Vim command argument	-	   :help -r
Option			'	   :help 'textwidth'
Regular expression	/	   :help /[
```

----------------------------------------

TITLE: Splitting Filetype Detection Across Different Files
DESCRIPTION: Example showing how to split filetype detection rules across primary and 'after' directories to control precedence. The first file detects text files while the second handles script files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
augroup filetypedetect
au BufNewFile,BufRead *.txt			setf text
augroup END
```

----------------------------------------

TITLE: Opening the Command Line Window in Vim
DESCRIPTION: This snippet shows how to open the command line window in Vim using the `q:` command.  The command line window allows you to edit previous commands using normal mode commands before executing them.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
	q:
```

----------------------------------------

TITLE: Defining Sync Patterns for Syntax Highlighting in Vim
DESCRIPTION: These snippets demonstrate how to define sync patterns for syntax highlighting in Vim. They show the usage of 'grouphere' and 'groupthere' arguments to specify syntax groups for parsing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_178

LANGUAGE: viml
CODE:
```
:syntax sync match {sync-group-name} grouphere {group-name} "pattern" ..

:syntax sync match {sync-group-name} groupthere {group-name} "pattern" ..
```

----------------------------------------

TITLE: Quitting all windows
DESCRIPTION: Closes all windows. If any windows contain unsaved changes, Vim will not exit, and the cursor will be placed in the window with changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
	:qall
```

----------------------------------------

TITLE: Allargs Command with Complex Argument Handling
DESCRIPTION: Demonstrates advanced command creation using <q-args> to execute a command across multiple files in the argument list
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_37

LANGUAGE: vim
CODE:
```
function Allargs(command)
   let i = 0
   while i < argc()
     if filereadable(argv(i))
        execute "e " .. argv(i)
        execute a:command
     endif
     let i = i + 1
   endwhile
endfunction
command -nargs=+ -complete=command Allargs call Allargs(<q-args>)
```

----------------------------------------

TITLE: Implementing Slow Month Completion Function in Vim
DESCRIPTION: This function demonstrates a custom completion function for month names that simulates a slow search process. It uses complete_add() and complete_check() to handle incremental completion.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
fun! CompleteMonths(findstart, base)
  if a:findstart
    " locate the start of the word
    let line = getline('.')
    let start = col('.') - 1
    while start > 0 && line[start - 1] =~ '\a'
      let start -= 1
    endwhile
    return start
  else
    " find months matching with "a:base"
    for m in split("Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec")
      if m =~ '^' .. a:base
        call complete_add(m)
      endif
      sleep 300m	" simulate searching for next match
      if complete_check()
        break
      endif
    endfor
    return []
  endif
endfun
set completefunc=CompleteMonths
```

----------------------------------------

TITLE: Integrating Treesitter Features in Neovim Using Lua
DESCRIPTION: The 'vim.treesitter.get_node()' function is enhanced to include an option for returning anonymous nodes, enriching the capabilities of node retrieval with Treesitter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_8

LANGUAGE: lua
CODE:
```
vim.treesitter.get_node({ include_anonymous = true })
```

----------------------------------------

TITLE: Defining Function Breakpoint
DESCRIPTION: This command sets a breakpoint in the function named 'Explore'. When the 'Explore' function is called, the debugger will halt execution. This allows examination of the function's behavior.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
":breakadd func Explore"
```

----------------------------------------

TITLE: Mapping Function Keys in Vim
DESCRIPTION: Demonstrates how to create mappings using function keys in Vim. It includes examples of keyboard mappings and shows the expected behavior when triggering those mappings with counts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
:map <F3>  o#include
```

LANGUAGE: vim
CODE:
```
:map <M-g> /foo<CR>cwbar<Esc>
```

LANGUAGE: vim
CODE:
```
:map _x    d/END/e<CR>
```

LANGUAGE: vim
CODE:
```
:map! qq   quadrillion questions
```

LANGUAGE: vim
CODE:
```
:map <F4>  3w
```

LANGUAGE: vim
CODE:
```
:map <F4>  @='3w'<CR>
```

----------------------------------------

TITLE: Emulating 'insertmode' in Neovim using Vimscript and Lua
DESCRIPTION: This code snippet provides a way to emulate Vim's 'insertmode' option in Neovim using a combination of autocmds, key mappings, and a Lua function. It starts insert mode automatically and handles various mode transitions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
autocmd BufWinEnter * startinsert
inoremap <Esc> <C-X><C-Z><C-]>
inoremap <C-C> <C-X><C-Z>
inoremap <C-L> <C-X><C-Z><C-]><Esc>
inoremap <C-Z> <C-X><C-Z><Cmd>suspend<CR>
noremap <C-C> <Esc>
snoremap <C-C> <Esc>
noremap <C-\><C-G> <C-\><C-N><Cmd>startinsert<CR>
cnoremap <C-\><C-G> <C-\><C-N><Cmd>startinsert<CR>
inoremap <C-\><C-G> <C-X><C-Z>
autocmd CmdwinEnter * noremap <buffer> <C-C> <C-C>
autocmd CmdwinEnter * inoremap <buffer> <C-C> <C-C>

lua << EOF
  vim.on_key(function(c)
    if c == '\27' then
      local mode = vim.api.nvim_get_mode().mode
      if mode:find('^[nvV\22sS\19]') and vim.fn.getcmdtype() == '' then
        vim.schedule(function()
          vim.cmd('startinsert')
        end)
      end
    end
  end)
EOF
```

----------------------------------------

TITLE: Visual Mode Range Selection in Vim Script
DESCRIPTION: Illustrates selecting a range of lines in Visual mode and using colon commands on that selection. The '<' and '>' marks define the start and end of the visually selected range, allowing line-based operations. Expected input is a line selection command, with outputs being modifications to those selected lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_4

LANGUAGE: Vim Script
CODE:
```

  :'<,'>
```

----------------------------------------

TITLE: Creating Buffer-Local Mappings in Vim Filetype Plugins
DESCRIPTION: This snippet shows how to create mappings that only work in the current buffer using the :map <buffer> command in a filetype plugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_47

LANGUAGE: vim
CODE:
```
:map <buffer>
```

----------------------------------------

TITLE: Performing Substitution with Ranges in Neovim
DESCRIPTION: This snippet demonstrates how to perform a substitution operation over a specific range of lines using the ':substitute' command. This technique is useful for applying changes only within delimited sections of a file, improving the specificity of large-scale text edits.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_2

LANGUAGE: Vimscript
CODE:
```
:[range]substitute/from/to/[flags]
```

----------------------------------------

TITLE: Multi-Item Matching in Vim
DESCRIPTION: This snippet explains how to utilize multi-item matching expressions in Vim regex to repeat patterns a specified number of times. It illustrates variations for greedy and non-greedy matching with examples of common usage.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
5. Multi items			*pattern-multi-items*

An atom can be followed by an indication of how many times the atom can be
matched and in what way.  This is called a multi.  See |/multi| for an
overview.

				*/star* */\star*
*\t(use \* when 'magic' is not set)
\t	Matches 0 or more of the preceding atom, as many as possible.
\t\tExample  'nomagic'\tmatches ~
\ta*\t\ta\*\t\t"", "a", "aa", "aaa", etc.
\t.*\t\t\.\*\t\tanything, also an empty string, no end-of-line
\t\_.*\t\t\_.\*\teverything up to the end of the buffer
\t\_.*END\t\_.\*END\teverything up to and including the last "END"
\t\tin the buffer

\t\tException: When "*" is used at the start of the pattern or just after
\t"^" it matches the star character.

\t\tBe aware that repeating "\_." can match a lot of text and take a long
time.  For example, "\_.*END" matches all text from the current
\tposition to the last occurrence of "END" in the file.  Since the "*"
wills match as many as possible, this first skips over all lines until
\tthe end of the file and then tries matching "END", backing up one
\tcharacter at a time.
```

----------------------------------------

TITLE: Setting Option Value - Lua
DESCRIPTION: Sets the value of a specific option within Neovim, allowing the modification of both global and local settings depending on the provided parameters. It's crucial for dynamically updating configuration within Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_51

LANGUAGE: lua
CODE:
```
nvim_set_option_value({name}, {value}, {opts})  -- Sets a new value for a specified option
```

----------------------------------------

TITLE: Parsing Buffer with TreeSitter LanguageTree in Lua
DESCRIPTION: Shows how to parse a buffer using a LanguageTree object to access the current syntax tree. This method returns a table of immutable tree objects representing the current state of the buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_33

LANGUAGE: lua
CODE:
```
local tree = parser:parse({ start_row, end_row })
```

----------------------------------------

TITLE: Creating Dictionaries in Vim
DESCRIPTION: Demonstrates how to create dictionaries with key-value pairs using curly braces syntax.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_42

LANGUAGE: vim
CODE:
```
:let mydict = {1: 'one', 2: 'two', 3: 'three'}
:let emptydict = {}
```

----------------------------------------

TITLE: Controlling Match Start and End Positions
DESCRIPTION: Explains zero-width assertions (\zs and \ze) to define where a match should start or end within a pattern. Useful for focusing search results on specific parts of the text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_16

LANGUAGE: regex
CODE:
```
"\\zs"
"\\ze"
```

----------------------------------------

TITLE: Iterating Over List Items in Vim Script
DESCRIPTION: Demonstrates how to use a for loop to iterate over items in a list, assigning each item to multiple variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_104

LANGUAGE: vim
CODE:
```
:for [lnum, col] in [[1, 3], [2, 5], [3, 8]]
   :echo getline(lnum)[col]
:endfor
```

----------------------------------------

TITLE: Getting Option Value - Lua
DESCRIPTION: Obtains the current value of a specified option, respecting its local or global scope. This function is essential for querying the current state of options during Neovim sessions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_50

LANGUAGE: lua
CODE:
```
nvim_get_option_value({name}, {opts})  -- Retrieves the value of an option, using order of local and global
```

----------------------------------------

TITLE: Handling LspTokenUpdate event in Lua
DESCRIPTION: This snippet shows how to handle the LspTokenUpdate event, which is triggered when a visible semantic token is sent or updated by the LSP server.  It highlights mutable variables with a custom highlight group.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_18

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd('LspTokenUpdate', {
  callback = function(args)
    local token = args.data.token
    if token.type == 'variable' and not token.modifiers.readonly then
      vim.lsp.semantic_tokens.highlight_token(
        token, args.buf, args.data.client_id, 'MyMutableVariableHighlight'
      )
    end
  end,
})
```

----------------------------------------

TITLE: Configuring Query Linting Events in Neovim (Lua)
DESCRIPTION: This snippet configures the events that trigger query linting for treesitter queries.  It sets `vim.g.query_lint_on` to a table containing `'InsertLeave'` and `'TextChanged'`, meaning linting will occur when leaving insert mode and after text changes. Requires treesitter and the query plugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_30

LANGUAGE: lua
CODE:
```
	vim.g.query_lint_on = { 'InsertLeave', 'TextChanged' }
```

----------------------------------------

TITLE: Multiple Tags Files Configuration
DESCRIPTION: Setting the 'tags' option to search for tags files in multiple directories, allowing comprehensive code navigation across different project structures
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:set tags=./tags,./../tags,./*/tags
:set tags=~/proj/**/tags
```

----------------------------------------

TITLE: Accessing String or List Items by Index in Neovim
DESCRIPTION: Shows how to access individual bytes in a string or items in a list using array notation. Includes a practical example for getting the character under the cursor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_73

LANGUAGE: vim
CODE:
```
:let c = getline(".")[col(".") - 1]
```

----------------------------------------

TITLE: Configuring Vim Syntax Highlighting Options
DESCRIPTION: Sets various options for Vim syntax highlighting, including synchronization minlines and maxlines, embedded script highlighting, folding, and error highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_151

LANGUAGE: vim
CODE:
```
g:vimsyn_minlines : used to set synchronization minlines
g:vimsyn_maxlines : used to set synchronization maxlines

g:vimsyn_embed == 0      : disable (don't embed any scripts)
g:vimsyn_embed == 'lpPr' : support embedded Lua, Perl, Python and Ruby

g:vimsyn_folding == 0 or doesn't exist: no syntax-based folding
g:vimsyn_folding =~ 'a' : fold augroups
g:vimsyn_folding =~ 'f' : fold functions
g:vimsyn_folding =~ 'h' : fold heredocs
g:vimsyn_folding =~ 'l' : fold Lua      script
g:vimsyn_folding =~ 'p' : fold Perl     script
g:vimsyn_folding =~ 'P' : fold Python   script
g:vimsyn_folding =~ 'r' : fold Ruby     script

let g:vimsyn_noerror = 1
```

----------------------------------------

TITLE: Directory Search with Depth Argument
DESCRIPTION: The function |vim.fs.dir()| has been updated to include an `opts` argument featuring a depth field, enabling recursive directory tree searches. This allows more granular control over directory explorations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_6



----------------------------------------

TITLE: Setting Buffer-Local Keymap in Lua
DESCRIPTION: Sets a buffer-local mapping for the given mode. Takes parameters for buffer id, mode, left-hand side, right-hand side, and options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_56

LANGUAGE: lua
CODE:
```
nvim_buf_set_keymap({buffer}, {mode}, {lhs}, {rhs}, {opts})
```

----------------------------------------

TITLE: Replacing an operator with a Unicode glyph using Treesitter
DESCRIPTION: This snippet shows how to replace the `!=` operator with a Unicode glyph (≠) while maintaining the same highlighting as other operators. The `(#set! conceal "≠")` replaces the content of the node with the specified Unicode glyph.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
    "!=" @operator (#set! conceal "≠")

```

----------------------------------------

TITLE: Using Ternary Operator in Neovim Vimscript
DESCRIPTION: Demonstrates how to use the ternary conditional operator in Neovim, with both a single-line format and a more readable multi-line format using line-continuation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_67

LANGUAGE: vim
CODE:
```
:echo lnum == 1 ? "top" : lnum == 1000 ? "last" : lnum
```

LANGUAGE: vim
CODE:
```
:echo lnum == 1
:\	? "top"
:\	: lnum == 1000
:\		? "last"
:\		: lnum
```

----------------------------------------

TITLE: Common Dictionary Functions in Vim - Vim Script
DESCRIPTION: This snippet illustrates several common operations that can be performed on a dictionary in Vim, such as checking for keys, counting items, and generating string representations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_60

LANGUAGE: vim
CODE:
```
:if has_key(dict, 'foo')  " TRUE if dict has entry with key "foo"
:if empty(dict)           " TRUE if dict is empty
:let l = len(dict)       " number of items in dict
:let big = max(dict)     " maximum value in dict
:let small = min(dict)   " minimum value in dict
:let xs = count(dict, 'x')" count nr of times 'x' appears in dict
:let s = string(dict)    " String representation of dict
:call map(dict, '">> " .. v:val')  " prepend ">> " to each item
```

----------------------------------------

TITLE: Treesitter Parse Tree Example
DESCRIPTION: This is an example of a treesitter parse tree.  It visually represents the structure of the Lua code snippet provided. This allows developers to create precise highlight queries.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_15

LANGUAGE: query
CODE:
```
"(function_declaration ; [1:1 - 24]\n  name: (identifier) ; [1:10 - 10]\n  parameters: (parameters ; [1:11 - 20]\n    name: (identifier) ; [1:12 - 14]\n    name: (identifier))) ; [1:17 - 19])"
```

----------------------------------------

TITLE: Enable LSP Server on Buffer Open in Lua
DESCRIPTION: Enables an LSP server for automatic starting when a buffer is opened, using configurations defined in `vim.lsp.config`. Demonstrated through examples of enabling specific clients like 'clangd'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_27

LANGUAGE: Lua
CODE:
```
enable({name}, {enable})                                    *vim.lsp.enable()*
    Enable an LSP server to automatically start when opening a buffer.

    Examples: >lua
          vim.lsp.enable('clangd')

          vim.lsp.enable({'luals', 'pyright'})
<
```

----------------------------------------

TITLE: Disabling Default Filetype Plugin in Vim
DESCRIPTION: This snippet shows how to disable loading the default filetype plugin completely by setting a buffer-local variable in a custom filetype plugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_43

LANGUAGE: vim
CODE:
```
let b:did_ftplugin = 1
```

----------------------------------------

TITLE: Demonstrating matchstr() in Vim
DESCRIPTION: These snippets show various uses of the matchstr() function to extract substrings based on pattern matching, including examples with different start positions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_171

LANGUAGE: vim
CODE:
```
echo matchstr("testing", "ing")
```

LANGUAGE: vim
CODE:
```
echo matchstr("testing", "ing", 2)
```

LANGUAGE: vim
CODE:
```
echo matchstr("testing", "ing", 5)
```

----------------------------------------

TITLE: Setting the Current Buffer - Lua
DESCRIPTION: This API call sets the current window's buffer to a specified buffer ID. It cannot be executed when text lock is active.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_16

LANGUAGE: lua
CODE:
```
nvim_set_current_buf({buffer})
```

----------------------------------------

TITLE: Detecting Floating Windows in Neovim
DESCRIPTION: Code snippet showing how to check if a window is floating using the nvim_win_get_config API
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
if vim.api.nvim_win_get_config(window_id).relative ~= '' then
  -- window with this window_id is floating
end
```

----------------------------------------

TITLE: Asserting Command Failure with Exception Check
DESCRIPTION: Demonstrates how to use assert_fails() and assert_exception() to verify that a command throws a specific error
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
try
  commandthatfails
  call assert_false(1, 'command should have failed')
catch
  call assert_exception('E492:')
endtry
```

----------------------------------------

TITLE: Using Repetition Patterns in Vim Search
DESCRIPTION: Various repetition pattern modifiers that allow matching patterns multiple times. These include asterisk (*), plus (\+), and optional (\=) operators for flexible pattern matching.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
/a*
```

LANGUAGE: vim
CODE:
```
/\(ab\)*
```

LANGUAGE: vim
CODE:
```
/ab\+
```

LANGUAGE: vim
CODE:
```
/folders\=
```

----------------------------------------

TITLE: Reading and Processing Files with readfile() in Vim
DESCRIPTION: Example of using the readfile() function to read a limited number of lines from a file and process them, specifically searching for lines containing 'Date'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_202

LANGUAGE: vim
CODE:
```
for line in readfile(fname, '', 10)
  if line =~ 'Date' | echo line | endif
endfor
```

----------------------------------------

TITLE: Portable Neovim Configuration Setup
DESCRIPTION: This snippet provides a solution for sharing Neovim configurations across multiple machines, including different OS setups. It uses a source command in Windows to reference a main configuration file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
source ~/.config/nvim/init.vim
```

----------------------------------------

TITLE: Character Class Matching
DESCRIPTION: Describes matching using pre-defined character classes such as '\i', '\k', '\f', which are defined in Vim options, supporting both single-byte and multibyte characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_23

LANGUAGE: regex
CODE:
```
"\\i"
"\\I"
"\\k"
"\\K"
"\\f"
"\\F"
"\\p"
"\\P"
```

----------------------------------------

TITLE: Using input() with file completion
DESCRIPTION: Demonstrates using input() with completion support, specifically for file paths. This allows users to use tab completion when entering a filename.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_134

LANGUAGE: vim
CODE:
```
let fname = input("File: ", "", "file")
```

----------------------------------------

TITLE: Managing Vim Sessions
DESCRIPTION: Demonstrates creating, saving, and restoring Vim editing sessions across different instances and startup scenarios
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:mksession vimbook.vim
:source vimbook.vim
vim -S vimbook.vim
:set sessionoptions+=resize
```

----------------------------------------

TITLE: Executing Global Commands in Vim Script
DESCRIPTION: Details the functionality of the ':global' command in Vim, used for applying commands over a pattern match across the entire text file. Dependencies include understanding of pattern matching and Vim's substitute commands. Expected inputs include pattern expressions and commands wrapped in global syntax.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_6

LANGUAGE: Vim Script
CODE:
```

  :[range]global/{pattern}/{command}
```

----------------------------------------

TITLE: Creating Window-Relative Float in Lua
DESCRIPTION: Creates a floating window positioned relative to the current window with specific dimensions and position offsets.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_79

LANGUAGE: lua
CODE:
```
vim.api.nvim_open_win(0, false, 
  {relative='win', row=3, col=3, width=12, height=3})
```

----------------------------------------

TITLE: Object-Oriented Pattern in Vim Script
DESCRIPTION: Demonstrates object-oriented programming patterns using dictionaries as objects with inheritance via copying.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_25

LANGUAGE: viml
CODE:
```
:let transdict = {}
:function transdict.translate(line) dict
:  return join(map(split(a:line), 'get(self.words, v:val, "???")'))
:endfunction
```

----------------------------------------

TITLE: Using Mappings with Counts
DESCRIPTION: Explains how to effectively use counts in mappings and how they interact with the custom defined mappings for repeatable commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
:map <F4> @='3w'<CR>
```

----------------------------------------

TITLE: Visual Mode Block Selection in Neovim
DESCRIPTION: Shows how to use CTRL-V for block-wise visual selection to manipulate columnar text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_04.txt#2025-04-20_snippet_3

LANGUAGE: vimdoc
CODE:
```
name        Q1      Q2      Q3
pierre      123     455     234
john        0       90      39
steve       392     63      334
```

----------------------------------------

TITLE: Change Operator Usage in Neovim
DESCRIPTION: Shows how to use the change operator 'c' to modify text, including examples of changing words and dealing with whitespace behavior.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_04.txt#2025-04-20_snippet_1

LANGUAGE: vimdoc
CODE:
```
To err is human
c2wbe<Esc>
To be human
```

----------------------------------------

TITLE: Setting the Current Directory in Vim
DESCRIPTION: Demonstrates command usage for setting Vim's current directory to simplify file paths. The ':cd' command changes the current directory, while ':lcd' sets a local directory for a window. ':pwd' displays the current directory, and 'cd -' reverts to the previous directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_1

LANGUAGE: VimScript
CODE:
```
:cd VeryLongFileName\n:edit file1.txt\n:edit file2.txt\n:edit file3.txt\n:pwd\n/home/Bram/VeryLongFileName\n:cd /etc\n:pwd\n/etc\n:cd -\n:pwd\n/home/Bram/VeryLongFileName\n:cd -\n:pwd\n/etc
```

----------------------------------------

TITLE: Window Execute Command Example
DESCRIPTION: Demonstrates how to execute a command in the context of a specific window using win_execute().
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_284

LANGUAGE: vim
CODE:
```
call win_execute(winid, 'syntax enable')
```

----------------------------------------

TITLE: Using input() with inputsave() and inputrestore() in a mapping
DESCRIPTION: Shows how to properly use input() within a mapping by using inputsave() and inputrestore() to preserve and restore typeahead. This prevents the mapping from consuming characters meant for the input function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_136

LANGUAGE: vim
CODE:
```
nmap \x :call GetFoo()<CR>:exe "/" .. Foo<CR>
function GetFoo()
  call inputsave()
  let g:Foo = input("enter search pattern: ")
  call inputrestore()
endfunction
```

----------------------------------------

TITLE: Sorting Lists with sort Function in Neovim
DESCRIPTION: Demonstrates various ways to sort lists using the sort function in Neovim, including case-insensitive sorting, locale-based sorting, and custom comparison functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_247

LANGUAGE: vim
CODE:
```
func MyCompare(i1, i2)
   return a:i1 == a:i2 ? 0 : a:i1 > a:i2 ? 1 : -1
endfunc
eval mylist->sort("MyCompare")

func MyCompare(i1, i2)
   return a:i1 - a:i2
endfunc

eval mylist->sort({i1, i2 -> i1 - i2})
```

----------------------------------------

TITLE: Fuzzy Matching with matchfuzzy() in Vim
DESCRIPTION: Demonstrates various uses of matchfuzzy() for fuzzy matching strings and dictionaries. It can be used with buffer names, file names, and custom data structures.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_167

LANGUAGE: vim
CODE:
```
echo matchfuzzy(["clay", "crow"], "cay")

```

LANGUAGE: vim
CODE:
```
echo getbufinfo()->map({_, v -> v.name})->matchfuzzy("ndl")

```

LANGUAGE: vim
CODE:
```
echo getbufinfo()->matchfuzzy("ndl", {'key' : 'name'})

```

LANGUAGE: vim
CODE:
```
echo getbufinfo()->matchfuzzy("spl",
					\ {'text_cb' : {v -> v.name}})

```

LANGUAGE: vim
CODE:
```
echo v:oldfiles->matchfuzzy("test")

```

LANGUAGE: vim
CODE:
```
let l = readfile("buffer.c")->matchfuzzy("str")

```

LANGUAGE: vim
CODE:
```
echo ['one two', 'two one']->matchfuzzy('two one')

```

LANGUAGE: vim
CODE:
```
echo ['one two', 'two one']->matchfuzzy('two one',
					\ {'matchseq': 1})

```

----------------------------------------

TITLE: Creating Custom Diagnostic Handler with Notifications
DESCRIPTION: Example of creating a custom diagnostic handler that uses vim.notify() to display diagnostic information
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_1

LANGUAGE: lua
CODE:
```
vim.diagnostic.handlers["my/notify"] = {
  show = function(namespace, bufnr, diagnostics, opts)
    local level = opts["my/notify"].log_level

    local name = vim.diagnostic.get_namespace(namespace).name
    local msg = string.format("%d diagnostics in buffer %d from %s",
                              #diagnostics,
                              bufnr,
                              name)
    vim.notify(msg, level)
  end,
}

vim.diagnostic.config({
  ["my/notify"] = {
    log_level = vim.log.levels.INFO,
    severity = vim.diagnostic.severity.ERROR,
  }
})
```

----------------------------------------

TITLE: Implementing Asynchronous File Reading in Lua with Luv
DESCRIPTION: A function that reads a file asynchronously using Luv's file system operations. It uses callbacks to handle each step of the process: opening the file, getting stats, reading the content, and closing the file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_45

LANGUAGE: lua
CODE:
```
local function readFile(path, callback)
  uv.fs_open(path, "r", 438, function(err, fd)
    assert(not err, err)
    uv.fs_fstat(fd, function(err, stat)
      assert(not err, err)
      uv.fs_read(fd, stat.size, 0, function(err, data)
        assert(not err, err)
        uv.fs_close(fd, function(err)
          assert(not err, err)
          return callback(data)
        end)
      end)
    end)
  end)
end

readFile("main.lua", function(data)
  print("asynchronous read", data)
end)
```

----------------------------------------

TITLE: Quitting all without saving
DESCRIPTION: Quits Vim and discards all changes without saving. This command should be used with caution.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
	:qall!
```

----------------------------------------

TITLE: Custom Search Direction Mapping - Vim
DESCRIPTION: Creates custom mappings for ; and , keys that maintain consistent forward/backward search direction using getcharsearch().
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_86

LANGUAGE: vim
CODE:
```
nnoremap <expr> ; getcharsearch().forward ? ';' : ','
nnoremap <expr> , getcharsearch().forward ? ',' : ';'
```

----------------------------------------

TITLE: Handling Buffered Output in Ruby with Job Control
DESCRIPTION: Example demonstrating how to handle buffered output in Ruby when using Neovim job control, including auto-flushing configuration.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
function! Receive(job_id, data, event)
  echom printf('%s: %s',a:event,string(a:data))
endfunction
call jobstart(['ruby', '-e',
  \ '$stdout.sync = true; 5.times do sleep 1 and puts "Hello Ruby!" end'],
  \ {'on_stdout': 'Receive'})
```

----------------------------------------

TITLE: Using Curly Braces for Dynamic Variable Names in Vim
DESCRIPTION: Examples of using curly braces to create dynamic variable names in Vim. This allows referencing variables whose names are constructed at runtime by evaluating expressions inside braces.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_88

LANGUAGE: viml
CODE:
```
echo my_{&background}_message
```

LANGUAGE: viml
CODE:
```
echo my_{adverb}_{adjective}_message
```

LANGUAGE: viml
CODE:
```
echo my_{ad{end_of_word}}_message
```

LANGUAGE: viml
CODE:
```
:let foo='a + b'
:echo c{foo}d
```

----------------------------------------

TITLE: Defining Autoload Variables in Vim
DESCRIPTION: This snippet shows how to define variables in a library script that uses the autoload mechanism in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_60

LANGUAGE: vim
CODE:
```
let dutch#weekdays = ['zondag', 'maandag', 'dinsdag', 'woensdag',
    \ 'donderdag', 'vrijdag', 'zaterdag']
```

----------------------------------------

TITLE: Using matchstrlist() in Vim
DESCRIPTION: These examples demonstrate the use of matchstrlist() function to perform pattern matching on lists of strings, including an example with submatch information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_172

LANGUAGE: vim
CODE:
```
echo matchstrlist(['tik tok'], '\<\k\+\>')
```

LANGUAGE: vim
CODE:
```
echo matchstrlist(['a', 'b'], '\<\k\+\>')
```

LANGUAGE: vim
CODE:
```
echo matchstrlist(['acd'], '\(a\)\?\(b\)\?\(c\)\?\(.*\)',
					\ #{submatches: v:true})
```

----------------------------------------

TITLE: String Pattern Matching in Vim
DESCRIPTION: Demonstrates pattern matching behavior with newlines in strings using matchstr() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_297

LANGUAGE: vim
CODE:
```
let a = "aaaa\nxxxx"
echo matchstr(a, "..\n..")
echo matchstr(a, "a.x")
```

----------------------------------------

TITLE: Using CTRL-W } to view function definition in preview window (Vim)
DESCRIPTION: This snippet shows how to use the CTRL-W } command in Vim to display the definition of a function in the preview window. The function name needs to be under the cursor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
"CTRL-W }"
```

----------------------------------------

TITLE: Analyzing Window Layout in Vim
DESCRIPTION: These snippets demonstrate the use of winlayout() function to retrieve the layout of windows in a tabpage. It shows different scenarios including single window, horizontally split windows, and complex layouts with nested splits.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_287

LANGUAGE: vim
CODE:
```
" Only one window in the tab page
echo winlayout()
```

LANGUAGE: vim
CODE:
```
" Two horizontally split windows
echo winlayout()
```

LANGUAGE: vim
CODE:
```
" The second tab page, with three horizontally split
" windows, with two vertically split windows in the
" middle window
echo winlayout(2)
```

----------------------------------------

TITLE: Deleting Files - Lua
DESCRIPTION: The delete function removes a file specified by its name. It can handle symbolic links, and different flags allow for directory removals under certain conditions. The return value indicates whether the deletion was successful.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_46

LANGUAGE: lua
CODE:
```
delete({fname} [, {flags}])                                           *delete()*
		Without {flags} or with {flags} empty: Deletes the file by the
		name {fname}.

		This also works when {fname} is a symbolic link.  The symbolic
		link itself is deleted, not what it points to.

		When {flags} is "d": Deletes the directory by the name
		{fname}.  This fails when directory {fname} is not empty.

		When {flags} is "rf": Deletes the directory by the name
		{fname} and everything in it, recursively.  BE CAREFUL!
		Note: on MS-Windows it is not possible to delete a directory
		that is being used.

		The result is a Number, which is 0/false if the delete
		operation was successful and -1/true when the deletion failed
		or partly failed.

		Parameters: ~
		  • {fname} (`string`)
		  • {flags} (`string?`)

		Return: ~
		  (`integer`)
```

----------------------------------------

TITLE: Setting the Current Tabpage - Lua
DESCRIPTION: This function sets the current tabpage to the specified tab ID. It is not allowed when text lock is active.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_19

LANGUAGE: lua
CODE:
```
nvim_set_current_tabpage({tabpage})
```

----------------------------------------

TITLE: Customizing C Indentation Style in Vim
DESCRIPTION: Configures specific C indentation behavior using the cinoptions setting, allowing customization of brace placement and other style elements.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:set cinoptions+={2
```

----------------------------------------

TITLE: Executing an Ex command in Neovim
DESCRIPTION: This function executes an Ex command in Neovim. It accepts a structured dictionary representing the command and optional parameters. It returns the command output if the `output` option is true, otherwise an empty string.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_43

LANGUAGE: vim
CODE:
```
nvim_cmd({cmd}, {opts})                                           *nvim_cmd()*\n    Executes an Ex command.\n\n    Unlike |nvim_command()| this command takes a structured Dict instead of a\n    String. This allows for easier construction and manipulation of an Ex\n    command. This also allows for things such as having spaces inside a\n    command argument, expanding filenames in a command that otherwise doesn't\n    expand filenames, etc. Command arguments may also be Number, Boolean or\n    String.\n\n    The first argument may also be used instead of count for commands that\n    support it in order to make their usage simpler with |vim.cmd()|. For\n    example, instead of `vim.cmd.bdelete{ count = 2 }`, you may do\n    `vim.cmd.bdelete(2)`.\n\n    On execution error: fails with Vimscript error, updates v:errmsg.\n\n    Attributes: ~\n        Since: 0.8.0\n\n    Parameters: ~\n      • {cmd}   Command to execute. Must be a Dict that can contain the same\n                values as the return value of |nvim_parse_cmd()| except\n                "addr", "nargs" and "nextcmd" which are ignored if provided.\n                All values except for "cmd" are optional.\n      • {opts}  Optional parameters.\n                • output: (boolean, default false) Whether to return command\n                  output.\n\n    Return: ~\n        Command output (non-error, non-shell |:!|) if `output` is true, else\n        empty string.\n\n    See also: ~\n      • |nvim_exec2()|\n      • |nvim_command()|
```

----------------------------------------

TITLE: Example Usage of Grepadd with Argdo in Vim
DESCRIPTION: This Vim script demonstrates how to use the `grepadd!` command in conjunction with `argdo` to grep through all files in the argument list. The `try`/`catch` block handles the `E480` error that might occur if a file does not contain a match.  The `silent` command suppresses output from the `grepadd!` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_35

LANGUAGE: vim
CODE:
```
:silent argdo try
  \ | grepadd! something %
  \ | catch /E480:/
  \ | endtry"
```

----------------------------------------

TITLE: Merging Dictionaries in Vim
DESCRIPTION: Shows how to merge two dictionaries using the extend() function to add entries from one dictionary to another.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_55

LANGUAGE: vim
CODE:
```
:call extend(adict, bdict)
```

----------------------------------------

TITLE: Starting Neovim in Diff Mode
DESCRIPTION: Demonstrates how to start Neovim in diff mode to compare two files side by side. This command opens two vertically split windows showing the differences between the files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_20

LANGUAGE: shell
CODE:
```
nvim -d main.c~ main.c
```

----------------------------------------

TITLE: Defining Default Mappings in Vim Filetype Plugins
DESCRIPTION: This example demonstrates how to define default mappings in a filetype plugin, checking if the user has already defined a mapping and using <LocalLeader>.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_48

LANGUAGE: vim
CODE:
```
if !hasmapto('<Plug>JavaImport;')
  map <buffer> <unique> <LocalLeader>i <Plug>JavaImport;
endif
noremap <buffer> <unique> <Plug>JavaImport; oimport ""<Left><Esc>
```

----------------------------------------

TITLE: Multiple Pattern Autocommands for File Types
DESCRIPTION: Collection of autocommands showing how to handle multiple file patterns and different settings for various file types.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_33

LANGUAGE: vim
CODE:
```
:autocmd BufRead   *  set tw=79 nocin ic infercase fo=2croq
:autocmd BufRead   .letter set tw=72 fo=2tcrq
:autocmd BufEnter  .letter set dict=/usr/lib/dict/words
:autocmd BufLeave  .letter set dict=
:autocmd BufRead,BufNewFile   *.c,*.h set tw=0 cin noic
:autocmd BufEnter  *.c,*.h  abbr FOR for (i = 0; i < 3; ++i)<CR>{<CR>}<Esc>O
:autocmd BufLeave  *.c,*.h  unabbr FOR
```

----------------------------------------

TITLE: Handling Gzip Files with Autocommands in Vim
DESCRIPTION: Example autocommands for automatically handling gzip compressed files, including reading, writing, and appending operations. Uses buffer and file events to manage compression/decompression.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_30

LANGUAGE: vim
CODE:
```
:augroup gzip
:  autocmd!
:  autocmd BufReadPre,FileReadPre *.gz set bin
:  autocmd BufReadPost,FileReadPost *.gz '[,']!gunzip
:  autocmd BufReadPost,FileReadPost *.gz set nobin
:  autocmd BufReadPost,FileReadPost *.gz execute ":doautocmd BufReadPost " .. expand("%:r")
:  autocmd BufWritePost,FileWritePost *.gz !mv <afile> <afile>:r
:  autocmd BufWritePost,FileWritePost *.gz !gzip <afile>:r

:  autocmd FileAppendPre  *.gz !gunzip <afile>
:  autocmd FileAppendPre  *.gz !mv <afile>:r <afile>
:  autocmd FileAppendPost  *.gz !mv <afile> <afile>:r
:  autocmd FileAppendPost  *.gz !gzip <afile>:r
:augroup END
```

----------------------------------------

TITLE: Configuring Custom TypeScript Compiler Command
DESCRIPTION: Example of setting a custom TypeScript compiler command using npx with the --noEmit flag, which checks for errors without generating output files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_59

LANGUAGE: vim
CODE:
```
let b:tsc_makeprg = "npx tsc --noEmit"
```

----------------------------------------

TITLE: Using Autoload Mechanism for Library Scripts in Vim
DESCRIPTION: This snippet shows how to use Vim's autoload mechanism to simplify loading and calling functions from library scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_56

LANGUAGE: vim
CODE:
```
call mylib#myfunction(arg)
```

----------------------------------------

TITLE: Setting Active Highlight Namespace - Lua
DESCRIPTION: This function sets the active namespace for highlights defined, allowing for highlights to be applied to specific windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_22

LANGUAGE: lua
CODE:
```
nvim_set_hl_ns({ns_id})
```

----------------------------------------

TITLE: Creating TextDocumentIdentifier in Neovim LSP (Lua)
DESCRIPTION: Creates a TextDocumentIdentifier object for the current or specified buffer. Takes an optional buffer number as a parameter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_59

LANGUAGE: lua
CODE:
```
make_text_document_params({bufnr})
```

----------------------------------------

TITLE: Configuring Wildcard Completion Behavior in Neovim
DESCRIPTION: These snippets show how to configure wildcard completion behavior in Neovim using various options and mappings. They demonstrate emulating tcsh's autolist completion and setting wildmode options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:cnoremap X <C-L><C-D>
```

LANGUAGE: vim
CODE:
```
:set wildmode=longest,list
```

----------------------------------------

TITLE: Adding Highlighted Matches
DESCRIPTION: Example showing how to add and remove highlighted matches in the current window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_164

LANGUAGE: vim
CODE:
```
highlight MyGroup ctermbg=green guibg=green
let m = matchadd("MyGroup", "TODO")
call matchdelete(m)
```

----------------------------------------

TITLE: Escaping Filenames in Execute Commands
DESCRIPTION: Demonstrates proper filename escaping techniques for both Vim and shell commands using fnameescape() and shellescape().
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_115

LANGUAGE: vim
CODE:
```
:execute "e " .. fnameescape(filename)
:execute "!ls " .. shellescape(filename, 1)
```

----------------------------------------

TITLE: Exception Handling in Vim Script
DESCRIPTION: Example of try-catch error handling in Vim, showing how to catch specific error codes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_26

LANGUAGE: viml
CODE:
```
:try
:   read ~/templates/pascal.tmpl
:catch /E484:/
:   echo "Sorry, the Pascal template file cannot be found."
:endtry
```

----------------------------------------

TITLE: Executing Normal Mode Commands from a Vim Script
DESCRIPTION: This snippet explains how to run a series of Normal mode commands in Vim using a script, highlighting the execution of commands recorded in a script file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_5

LANGUAGE: Vim
CODE:
```
vim -s script file.txt ...
```

----------------------------------------

TITLE: Finding Mappings for Specific Modes
DESCRIPTION: Example showing how to find all mappings available in Normal, Insert, or Command-line modes using mode_bits.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_160

LANGUAGE: vim
CODE:
```
let saved_maps = []
for m in maplist()
    if and(m.mode_bits, 0x19) != 0
	eval saved_maps->add(m)
    endif
endfor
echo saved_maps->mapnew({_, m -> m.lhs})
```

----------------------------------------

TITLE: File Path Completion Function Example - Vim
DESCRIPTION: Implementation of a custom completion function that returns filenames from directories specified in the 'path' option
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_33

LANGUAGE: vim
CODE:
```
:com -nargs=1 -bang -complete=customlist,EditFileComplete
			\ EditFile edit<bang> <args>
:fun EditFileComplete(A,L,P)
:    return split(globpath(&path, a:A), "\n")
:endfun
```

----------------------------------------

TITLE: Insert Mode Events in Neovim
DESCRIPTION: Documents events related to Insert mode including InsertChange, InsertCharPre, InsertEnter, InsertLeavePre, and InsertLeave.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
InsertChange
InsertCharPre
InsertEnter
InsertLeavePre
InsertLeave
```

----------------------------------------

TITLE: Searching for a word in the current and included files (Vim)
DESCRIPTION: This snippet shows how to search for a word in the current file and any included files using the `:psearch` command. The match is displayed in the preview window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
":psearch popen"
```

----------------------------------------

TITLE: Joining Paragraphs into Single Lines
DESCRIPTION: Global command that finds all non-empty lines and joins each paragraph (until the next empty line) into a single line, useful for preparing text for word processors.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:g/./,/^$/join
```

----------------------------------------

TITLE: Finding Neovim Installation Paths
DESCRIPTION: Commands to locate where Neovim is installed on the system by displaying the program path and runtime directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:echo v:progpath
:echo $VIMRUNTIME
```

----------------------------------------

TITLE: Iterating Over Dictionary Items in Vim
DESCRIPTION: Shows how to use the items() function to retrieve all key-value pairs from a dictionary as a list of [key, value] pairs, enabling easy iteration through the dictionary.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_145

LANGUAGE: vim
CODE:
```
for [key, value] in items(mydict)
   echo key .. ': ' .. value
endfor
```

----------------------------------------

TITLE: Batch Processing Vim Commands with a Shell Script
DESCRIPTION: This snippet provides a shell script to run Vim in batch mode for replacing specific text in multiple files and printing the results. It's ideal for large edits across many files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_3

LANGUAGE: Shell
CODE:
```
for file in *.txt; do
  vim -e -s $file < change.vim
  lpr -r tempfile
.done

```

----------------------------------------

TITLE: Disabling TreeSitter Query Pattern in Lua
DESCRIPTION: Shows how to disable a specific pattern in a TreeSitter query. This example disables the | links in vimdoc while keeping other @markup.link highlights.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_31

LANGUAGE: lua
CODE:
```
local link_pattern = 9 -- from :Inspect!
local query = vim.treesitter.query.get('vimdoc', 'highlights')
query.query:disable_pattern(link_pattern)
local tree = vim.treesitter.get_parser():parse()[1]
```

----------------------------------------

TITLE: Creating a vertical split
DESCRIPTION: The `:vsplit` command creates a new window to the left of the current one. It can be used with or without a filename to open.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
	:vsplit
```

LANGUAGE: vim
CODE:
```
	:vsplit two.c
```

----------------------------------------

TITLE: String/List Repetition with repeat()
DESCRIPTION: Examples of repeating strings and lists using the repeat() function
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_209

LANGUAGE: vim
CODE:
```
let separator = repeat('-', 80)
let longlist = repeat(['a', 'b'], 3)
```

----------------------------------------

TITLE: Vim Python Syntax Configuration
DESCRIPTION: Settings for controlling Python syntax highlighting features including number highlighting, builtins, and space errors
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_100

LANGUAGE: vim
CODE:
```
let python_no_number_highlight = 1
let python_no_builtin_highlight = 1
let python_no_exception_highlight = 1
let python_highlight_all = 1
```

----------------------------------------

TITLE: Dictionary Method Definition in Vim
DESCRIPTION: Shows how to define and use methods in dictionary objects, implementing a translation function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_24

LANGUAGE: viml
CODE:
```
:function uk2nl.translate(line) dict
:  return join(map(split(a:line), 'get(self, v:val, "???")'))
:endfunction
```

----------------------------------------

TITLE: Configuring Python Indentation in Vim
DESCRIPTION: This snippet shows how to configure Python code indentation using Vim's 'g:python_indent' dictionary. It allows customization of indentation for open and nested parentheses, continuation lines, and closing parentheses alignment. Users can adjust the searchpair timeout or disable certain indenting features for performance improvements.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_10

LANGUAGE: VimL
CODE:
```
let g:python_indent = {}
let g:python_indent.open_paren = 'shiftwidth() * 2'
let g:python_indent.nested_paren = 'shiftwidth()'
let g:python_indent.continue = 'shiftwidth() * 2'
let g:python_indent.closed_paren_align_last_line = v:false
let g:python_indent.searchpair_timeout = 500
let g:python_indent.disable_parentheses_indenting = 1
```

----------------------------------------

TITLE: Converting File to Hex Dump using xxd
DESCRIPTION: This command pipes the current buffer through the 'xxd' program, converting the file to a hexadecimal dump format. This displays the file content as hexadecimal values alongside their ASCII representations.  It is used when editing binary files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
	:%!xxd
```

----------------------------------------

TITLE: Adding ASCII value of cursor character to statusline in Vim
DESCRIPTION: Configures the statusline to include the ASCII value of the character under the cursor, similar to the 'ga' command, along with other standard information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_68

LANGUAGE: vim
CODE:
```
set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P
```

----------------------------------------

TITLE: Adding Dictionary Watcher - Lua
DESCRIPTION: The dictwatcheradd function attaches a watcher to a specified dictionary to track changes based on a key pattern. When changes occur, a callback function is invoked with information about the change, making it useful for plugins that need to monitor state.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_48

LANGUAGE: lua
CODE:
```
dictwatcheradd({dict}, {pattern}, {callback})                 *dictwatcheradd()*
		Adds a watcher to a dictionary. A dictionary watcher is
		identified by three components:

		- A dictionary({dict});
		- A key pattern({pattern});
		- A function({callback}).

		After this is called, every change on {dict} and on keys
		matching {pattern} will result in {callback} being invoked.

		For example, to watch all global variables: >vim
			silent! call dictwatcherdel(g:, '*', 'OnDictChanged')
			function! OnDictChanged(d,k,z)
			  echomsg string(a:k) string(a:z)
			endfunction
			call dictwatcheradd(g:, '*', 'OnDictChanged')
		<
		For now {pattern} only accepts very simple patterns that can
		contain a "*" at the end of the string, in which case it will
		match every key that begins with the substring before the "*".
		That means if "*" is not the last character of {pattern}, only
		keys that are exactly equal as {pattern} will be matched.

		The {callback} receives three arguments:

		- The dictionary being watched.
		- The key which changed.
		- A dictionary containing the new and old values for the key.

		The type of change can be determined by examining the keys
		present on the third argument:

		- If contains both `old` and `new`, the key was updated.
		- If it contains only `new`, the key was added.
		- If it contains only `old`, the key was deleted.

		This function can be used by plugins to implement options with
		validation and parsing logic.

		Parameters: ~
		  • {dict} (`table`)
		  • {pattern} (`string`)
		  • {callback} (`function`)

		Return: ~
		  (`any`)
```

----------------------------------------

TITLE: Using nested wildcards to add directories to path (Vim)
DESCRIPTION: This snippet shows how to use the `**` wildcard to recursively add directories to the 'path' option, instructing Vim to search within all subdirectories for include files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_28

LANGUAGE: vim
CODE:
```
":set path+=/projects/invent/**/include"
```

----------------------------------------

TITLE: Getting Current Timestamp in Lua
DESCRIPTION: This function returns the current timestamp in milliseconds.  The timestamp is cached at the start of the event loop tick. Don't make assumptions about the starting point. Returns an integer. Use `uv.hrtime()` for sub-millisecond granularity.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_11

LANGUAGE: lua
CODE:
```
"uv.now()                                                              *uv.now()*\n\n                Returns the current timestamp in milliseconds. The timestamp\n                is cached at the start of the event loop tick, see\n                |uv.update_time()| for details and rationale.\n\n                The timestamp increases monotonically from some arbitrary\n                point in time. Don't make assumptions about the starting\n                point, you will only get disappointed.\n\n                Returns: `integer`\n\n                Note: Use |uv.hrtime()| if you need sub-millisecond\n                granularity."
```

----------------------------------------

TITLE: Using index() to find items in a list or blob
DESCRIPTION: Demonstrates how to use the index() function to find elements in lists or values in blobs. The function returns the index of the item or -1 if not found. The examples show checking for a word in a list and a number in another list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_130

LANGUAGE: vim
CODE:
```
let idx = index(words, "the")
if index(numbers, 123) >= 0
  " ...
endif
```

----------------------------------------

TITLE: Defining Functions with Script Variables in Vim
DESCRIPTION: Example of how script variables remain accessible when functions are defined inside other functions in Vim. This demonstrates scope persistence with nested function definitions using the 's:' prefix for script-scoped variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_86

LANGUAGE: viml
CODE:
```
let s:counter = 0
function StartCounting(incr)
  if a:incr
    function MyCounter()
      let s:counter = s:counter + 1
    endfunction
  else
    function MyCounter()
      let s:counter = s:counter - 1
    endfunction
  endif
endfunction
```

----------------------------------------

TITLE: Function Reference (Funcref) Example in Vimscript
DESCRIPTION: This snippet shows how to create a function reference (Funcref) in Vimscript using the `function()` function. The Funcref can then be used to call the referenced function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
	:let Fn = function("MyFunc")
	:echo Fn()
```

----------------------------------------

TITLE: Accessing Last Element of List in Vimscript
DESCRIPTION: This snippet demonstrates accessing the last element of a list using a negative index (-1). Negative indices count from the end of the list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
	:let last = mylist[-1]		" get the last item: "four"
```

----------------------------------------

TITLE: Joining List Items with Newline Character in Vim
DESCRIPTION: Example of using the join() function to combine items in a list with newline separators. This adds an additional newline at the end using the string concatenation operator.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_149

LANGUAGE: vim
CODE:
```
let lines = join(mylist, "\n") .. "\n"
```

----------------------------------------

TITLE: Trimming Whitespace in Vim
DESCRIPTION: Examples of using the trim() function to remove whitespace from strings in Vim. Demonstrates various use cases including trimming from both ends, specific ends, and with custom characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_276

LANGUAGE: vim
CODE:
```
echo trim("   some text ")
echo trim("  \r\t\t\r RESERVE \t\n\x0B\xA0") .. "_TAIL"
echo trim("rm<Xrm<>X>rrm", "rm<>")
echo trim("  vim  ", " ", 2)
```

----------------------------------------

TITLE: Synchronous Scrolling in Vim
DESCRIPTION: Commands and behaviors for binding windows together so they scroll synchronously using the 'scrollbind' option. Includes the :syncbind command to force all bound windows to the same position.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:syncbind       Force all 'scrollbind' windows to have the same relative offset.
```

----------------------------------------

TITLE: Checking Job Status with jobwait in Vim
DESCRIPTION: Example of using jobwait with a timeout of 0 to check if a job is still running. This creates a boolean variable indicating whether the job is running without waiting for it to complete.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_148

LANGUAGE: vim
CODE:
```
let running = jobwait([{job-id}], 0)[0] == -1
```

----------------------------------------

TITLE: Comparison Operators in Neovim
DESCRIPTION: Examples of string and value comparison in Neovim, demonstrating case-sensitive and case-insensitive comparisons using the various equality operators.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_70

LANGUAGE: vim
CODE:
```
"abc" ==# "Abc"	  evaluates to 0
"abc" ==? "Abc"	  evaluates to 1
"abc" == "Abc"	  evaluates to 1 if 'ignorecase' is set, 0 otherwise
```

LANGUAGE: vim
CODE:
```
echo 4 == '4'
1
echo 4 is '4'
0
echo 0 is []
0
```

LANGUAGE: vim
CODE:
```
echo 0 == 'x'
1
```

LANGUAGE: vim
CODE:
```
echo [0] == ['x']
0
```

LANGUAGE: vim
CODE:
```
"foo\nbar" =~ "\n"	evaluates to 1
"foo\nbar" =~ "\\n"	evaluates to 0
```

----------------------------------------

TITLE: Character Replacement in Neovim
DESCRIPTION: Demonstrates using the 'r' command to replace single characters and multiple characters with counts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_04.txt#2025-04-20_snippet_2

LANGUAGE: vimdoc
CODE:
```
there is somerhing grong here
rT     rt    rw
There is something wrong here
```

----------------------------------------

TITLE: Subexpression Matching in Vim Regular Expressions
DESCRIPTION: This snippet demonstrates subexpression matching in Vim regular expressions. It shows how to use parentheses for grouping and backreferences for matching previously matched subexpressions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_27

LANGUAGE: vim
CODE:
```
\(\)  A pattern enclosed by escaped parentheses.  */\(* */\(\)* */\)*
       E.g., "\(^a\)" matches 'a' at the start of a line.
       There can only be nine of these. You can use "\%(" to add more, but
       not counting it as a sub-expression.

\1     Matches the same string that was matched by  */\1* *E65*
       the first sub-expression in \( and \).
       Example: "\([a-z]\).\1" matches "ata", "ehe", "tot", etc.
\2     Like "\1", but uses second sub-expression,  */\2*
   ...
\9     Like "\1", but uses ninth sub-expression.   */\9*
```

----------------------------------------

TITLE: Setting Buffer Text in Lua
DESCRIPTION: Sets (replaces) a range in the buffer. Recommended for modifying parts of a line while preserving extmarks on non-modified parts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_59

LANGUAGE: lua
CODE:
```
nvim_buf_set_text({buffer}, {start_row}, {start_col}, {end_row}, {end_col}, {replacement})
```

----------------------------------------

TITLE: List Utility Functions in Vim
DESCRIPTION: Examples of various utility functions for working with lists in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_40

LANGUAGE: vim
CODE:
```
:let r = call(funcname, list)	" call a function with an argument list
:if empty(list)			" check if list is empty
:let l = len(list)		" number of items in list
:let big = max(list)		" maximum value in list
:let small = min(list)		" minimum value in list
:let xs = count(list, 'x')	" count nr of times 'x' appears in list
:let i = index(list, 'x')	" index of first 'x' in list
:let lines = getline(1, 10)	" get ten text lines from buffer
:call append('$', lines)	" append text lines in buffer
:let list = split("a b c")	" create list from items in a string
:let string = join(list, ', ')	" create string from list items
:let s = string(list)		" String representation of list
:call map(list, '">> " .. v:val')  " prepend ">> " to each item
```

----------------------------------------

TITLE: Execute Command Example in Vim
DESCRIPTION: Shows how to execute commands and capture their output using the execute() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_58

LANGUAGE: vim
CODE:
```
echo execute('echon "foo"')
echo execute(['echon "foo"', 'echon "bar"'])
execute('args')->split("\n")
```

----------------------------------------

TITLE: Using inputlist() for menu selection
DESCRIPTION: Demonstrates the inputlist() function which displays a list of options and prompts the user to select one by number. The example shows a color selection menu where items are numbered for clarity.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_137

LANGUAGE: vim
CODE:
```
let color = inputlist(['Select color:', '1. red',
	\ '2. green', '3. blue'])
```

----------------------------------------

TITLE: Cursor Style Management with Autocommands
DESCRIPTION: Autocommands to manage cursor style when entering, leaving, suspending or resuming Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
  \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
  \,sm:block-blinkwait175-blinkoff150-blinkon175

au VimLeave,VimSuspend * set guicursor=a:block-blinkon0
```

----------------------------------------

TITLE: Selecting an Item in the Completion Popup Menu - Lua
DESCRIPTION: This function allows the selection of an item in the completion popup menu for Neovim. It requires the item index and has options to insert the selection and finish the completion. If no popup menu is active, the call is ignored.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_14

LANGUAGE: lua
CODE:
```
nvim_select_popupmenu_item({item}, {insert}, {finish}, {opts})
```

----------------------------------------

TITLE: Matching Patterns with Custom Keywords in Vim Script
DESCRIPTION: Handles custom keyword definitions by modifying the 'iskeyword' option or using pattern matching. This is particularly useful when unconventional characters are part of keywords or when defining abbreviated keywords.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_4

LANGUAGE: Vim Script
CODE:
```
:setlocal iskeyword+=-
:syntax keyword xStatement when-not
:syntax keyword xStatement n[ext]
```

----------------------------------------

TITLE: Disabling LSP Default Settings
DESCRIPTION: Example showing how to remove or override buffer-local LSP defaults using LspAttach autocmd.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_2

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd('LspAttach', {
  callback = function(args)
    -- Unset 'formatexpr'
    vim.bo[args.buf].formatexpr = nil
    -- Unset 'omnifunc'
    vim.bo[args.buf].omnifunc = nil
    -- Unmap K
    vim.keymap.del('n', 'K', { buffer = args.buf })
  end,
})
```

----------------------------------------

TITLE: Using Finally for Cleanup Code in Vim Script
DESCRIPTION: Demonstrates using a finally block to ensure settings are restored whether the script completes normally, encounters an error, or is interrupted.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_132

LANGUAGE: vim
CODE:
```
:try
:  let s:saved_ts = &ts
:  set ts=17
:
:  " Do the hard work here.
:
:finally
:  let &ts = s:saved_ts
:  unlet s:saved_ts
:endtry
```

----------------------------------------

TITLE: Retrieving Matches in Vim
DESCRIPTION: The getmatches() function returns a list of all matches previously defined for the current window using matchadd() and :match commands. It can be used with setmatches() to save and restore matches.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_99

LANGUAGE: vim
CODE:
```
echo getmatches()
let m = getmatches()
call clearmatches()
echo getmatches()
call setmatches(m)
echo getmatches()
unlet m
```

----------------------------------------

TITLE: Setting Up Automatic View Saving for C Files
DESCRIPTION: Autocommand configuration to automatically save and restore views for C files. When leaving a window with a .c file, the view is saved, and when entering it again, the view is restored.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
au BufWinLeave *.c mkview
au BufWinEnter *.c silent! loadview
```

----------------------------------------

TITLE: Preferred Namespace Interface Pattern
DESCRIPTION: Demonstrates a recommended single interface pattern for namespace operations with flexible scoping
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_6

LANGUAGE: lua
CODE:
```
nvim_ns_add(
  ns_id: int,
  filter: {
    handle: integer (buf/win/tabpage id)
    scope: "global" | "win" | "buf" | "tabpage"
  }
): { ok: boolean }
```

----------------------------------------

TITLE: Searching Files with Vim's Built-in Grep Command
DESCRIPTION: Uses Vim's internal :grep command to search for 'error_string' in all C files. This command opens the first file with a match and positions the cursor on the matching line. Results can be navigated with :cnext, :cprev, and :clist commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:grep error_string *.c
```

----------------------------------------

TITLE: Generating Cryptographically Strong Random Bytes with uv.random()
DESCRIPTION: Fills a string with cryptographically strong random bytes of specified length. Can be used synchronously or asynchronously with a callback.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_102

LANGUAGE: lua
CODE:
```
uv.random({len}, {flags} [, {callback}])
```

----------------------------------------

TITLE: Mapping with Count in Neovim VimL
DESCRIPTION: This snippet demonstrates how to create a mapping that echoes the count given for the last Normal mode command. It uses the v:count variable and removes the line range with <C-U>.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
:map _x :<C-U>echo "the count is " .. v:count<CR>
```

----------------------------------------

TITLE: Modifying List Items in Vim
DESCRIPTION: Demonstrates how to change specific items in a list using indexing and assignment.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_29

LANGUAGE: vim
CODE:
```
:let list[4] = "four"
:let listlist[0][3] = item
```

----------------------------------------

TITLE: Searching for Nested Pairs with searchpair() in Neovim (Vimscript)
DESCRIPTION: This example demonstrates how to use searchpair() to find matching 'if' and 'endif' statements in a Vim script, skipping comments at the start of a line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_220

LANGUAGE: vim
CODE:
```
echo searchpair('\<if\>', '\<el\%[seif]\>', '\<en\%[dif]\>', 'W',
\ 'getline(".") =~ "^\\s*\""')
```

----------------------------------------

TITLE: Configuring SpotBugs Buffer Autocommands in Vim
DESCRIPTION: Example configuration for setting up buffer-local autocommands that will trigger SpotBugs actions on BufWritePost and Signal events. This code would typically be placed in a Java filetype plugin file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_52

LANGUAGE: vim
CODE:
```
if exists(':SpotBugsDefineBufferAutocmd') == 2
	SpotBugsDefineBufferAutocmd BufWritePost Signal
endif
```

----------------------------------------

TITLE: Allowing Users to Disable Mappings in Vim Filetype Plugins
DESCRIPTION: This snippet shows how to give users the option to disable mappings in a filetype plugin without disabling everything, using global variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_49

LANGUAGE: vim
CODE:
```
if !exists("no_plugin_maps") && !exists("no_mail_maps")
  " Quote text by inserting "> "
  if !hasmapto('<Plug>MailQuote;')
    vmap <buffer> <LocalLeader>q <Plug>MailQuote;
    nmap <buffer> <LocalLeader>q <Plug>MailQuote;
  endif
  vnoremap <buffer> <Plug>MailQuote; :s/^/> /<CR>
  nnoremap <buffer> <Plug>MailQuote; :.,$s/^/> /<CR>
endif
```

----------------------------------------

TITLE: Getting Color by Name in Neovim
DESCRIPTION: This example demonstrates how to retrieve a color's RGB value by name using `nvim_get_color_by_name()`. The function can accept either a color name (e.g., "Pink") or a hexadecimal color code (e.g., "#cbcbcb"). The returned value is a 24-bit RGB value.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```

        :echo nvim_get_color_by_name("Pink")
        :echo nvim_get_color_by_name("#cbcbcb")

```

----------------------------------------

TITLE: Retrieving Buffer Viewport Width in Vim
DESCRIPTION: This snippet shows how to use getwininfo() to calculate the actual text width of a window, excluding UI elements like the sign column. It's useful for scripts that need to know the true text area width.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_292

LANGUAGE: vim
CODE:
```
:echo getwininfo(win_getid())[0].width - getwininfo(win_getid())[0].textoff
```

----------------------------------------

TITLE: Nested Parentheses Syntax Highlighting
DESCRIPTION: Creates three levels of nested parentheses highlighting with different colors using syntax regions
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_158

LANGUAGE: viml
CODE:
```
:sy region par1 matchgroup=par1 start=/(/ end=/)/ contains=par2
:sy region par2 matchgroup=par2 start=/(/ end=/)/ contains=par3 contained
:sy region par3 matchgroup=par3 start=/(/ end=/)/ contains=par1 contained
:hi par1 ctermfg=red guifg=red
:hi par2 ctermfg=blue guifg=blue
:hi par3 ctermfg=darkgreen guifg=darkgreen
```

----------------------------------------

TITLE: Getting Mark List in Vim
DESCRIPTION: The getmarklist() function returns a list of all global marks or local marks for a specified buffer. Each item in the list is a dictionary containing information about the mark, including its name, position, and associated file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_98

LANGUAGE: vim
CODE:
```
getmarklist([{buf}])
```

----------------------------------------

TITLE: Creating and Using Lambda Expressions in Vim
DESCRIPTION: This snippet shows how to create and use lambda expressions in Vim. It demonstrates the syntax for defining lambda functions and provides examples of using them with built-in Vim functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_84

LANGUAGE: vim
CODE:
```
:let F = {arg1, arg2 -> arg1 - arg2}
:echo F(5, 2)

:let F = {-> 'error function'}
:echo F('ignored')

:function Foo(arg)
:  let i = 3
:  return {x -> x + i - a:arg}
:endfunction
:let Bar = Foo(4)
:echo Bar(6)

:echo map([1, 2, 3], {idx, val -> val + 1})
:echo sort([3,7,2,1,4], {a, b -> a - b})

:let timer = timer_start(500,
        \ {-> execute("echo 'Handler called'", "")},
        \ {'repeat': 3})
```

----------------------------------------

TITLE: Setting Treesitter Fold Expression in Lua
DESCRIPTION: Example showing how to set the fold expression to use treesitter folding in Neovim. This sets the window-local foldexpr option to use vim.treesitter.foldexpr().
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_24

LANGUAGE: lua
CODE:
```
vim.wo.foldexpr = 'v:lua.vim.treesitter.foldexpr()'
```

----------------------------------------

TITLE: String Variables in VimL
DESCRIPTION: This snippet explains how to use string variables in VimL, distinguishing between single and double-quoted strings, and handling of escape sequences in strings, essential for managing text data in Vim scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_6

LANGUAGE: VimL
CODE:
```
:let name = "peter"
:echo name
:let name = "\"peter\""
:echo name
:let name = '"peter"'
:echo name
```

----------------------------------------

TITLE: Splitting a window
DESCRIPTION: This command splits the current window horizontally, creating two views of the same file. The cursor remains in the top window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
	:split
```

----------------------------------------

TITLE: Running the libuv Event Loop in Lua
DESCRIPTION: This function runs the libuv event loop in different modes: default, once, and nowait. Each mode has a different behavior for polling I/O and handling callbacks, as well as different return conditions.  It returns a boolean or fail. Luvit implicitly calls uv.run() but direct luv bindings require explicit calls.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_4

LANGUAGE: lua
CODE:
```
"uv.run([{mode}])                                                      *uv.run()*\n\n                Parameters:\n                - `mode`: `string` or `nil` (default: `\"default\"`)\n\n                This function runs the event loop. It will act differently\n                depending on the specified mode:\n\n                  - `\"default\"`: Runs the event loop until there are no more\n                    active and referenced handles or requests. Returns `true`\n                    if |uv.stop()| was called and there are still active\n                    handles or requests. Returns `false` in all other cases.\n\n                  - `\"once\"`: Poll for I/O once. Note that this function\n                    blocks if there are no pending callbacks. Returns `false`\n                    when done (no active handles or requests left), or `true`\n                    if more callbacks are expected (meaning you should run the\n                    event loop again sometime in the future).\n\n                  - `\"nowait\"`: Poll for I/O once but don't block if there are\n                    no pending callbacks. Returns `false` if done (no active\n                    handles or requests left), or `true` if more callbacks are\n                    expected (meaning you should run the event loop again\n                    sometime in the future).\n\n                Returns: `boolean` or `fail`\n\n                Note: Luvit will implicitly call `uv.run()` after loading user\n                code, but if you use the luv bindings directly, you need to\n                call this after registering your initial set of event\n                callbacks to start the event loop."
```

----------------------------------------

TITLE: Substituting Text Across Multiple Files in Vim
DESCRIPTION: This snippet illustrates the use of ':args' and ':argdo' commands to perform substitutions across multiple C source files. It shows how to replace variable names effectively without altering other text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_2

LANGUAGE: Vim
CODE:
```
"Put all relevant C files in the argument list
:args *.c
" Execute substitution command on all files
:argdo %s/\<x_cnt\>/x_counter/ge | update
```

----------------------------------------

TITLE: Re-indenting Code in Vim
DESCRIPTION: Commands for re-indenting code at different scopes, from a single line to an entire file, using Vim's indentation engine.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
==
```

LANGUAGE: vim
CODE:
```
=a{
```

LANGUAGE: vim
CODE:
```
gg=G
```

----------------------------------------

TITLE: Generating Tags for C Files
DESCRIPTION: Command to generate a tags file for all C files in the current directory using ctags, enabling efficient code navigation and exploration
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
ctags *.c
```

----------------------------------------

TITLE: Opening a new file in vertical split
DESCRIPTION: Opens a new, empty file in a vertically split window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
	:vnew
```

LANGUAGE: vim
CODE:
```
	:vertical new
```

----------------------------------------

TITLE: Offset Pattern Matching in Vim
DESCRIPTION: Shows how to use pattern offsets to fine-tune the exact portion of text that gets highlighted.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
:syntax region xCond start=/if\s*(/ms=e+1 end=/)/me=s-1
```

----------------------------------------

TITLE: Recursive Syntax Region Definitions in Vim Script
DESCRIPTION: Illustrates recursive nesting of syntax regions with examples of code blocks within blocks, using start and end patterns to identify nested elements. These examples use curly braces typical of many programming languages.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_8

LANGUAGE: Vim Script
CODE:
```
:syntax region xBlock start=/{/ end=/}/ contains=xBlock
```

----------------------------------------

TITLE: Arithmetic and Concatenation Operators in Neovim
DESCRIPTION: Examples of arithmetic operators and string concatenation in Neovim. Shows the difference between addition and string concatenation and explains operator precedence.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_71

LANGUAGE: vim
CODE:
```
"123" + "456" = 579
"123" . "456" = "123456"
```

LANGUAGE: vim
CODE:
```
1 . 90 + 90.0
```

LANGUAGE: vim
CODE:
```
(1 . 90) + 90.0
```

LANGUAGE: vim
CODE:
```
1 . 90 * 90.0
```

LANGUAGE: vim
CODE:
```
1 . (90 * 90.0)
```

----------------------------------------

TITLE: Customizing Runtimepath in Vim
DESCRIPTION: Example configuration for the 'runtimepath' option that changes the runtime file search order. It prioritizes a personal runtime directory, then a group directory, followed by the default Vim runtime directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_57

LANGUAGE: vim
CODE:
```
set runtimepath=~/vimruntime,/mygroup/vim,$VIMRUNTIME
```

----------------------------------------

TITLE: Retabbing Indented Text in Vim - Vim
DESCRIPTION: Uses the ':retab' command to adjust existing tabs in a file after setting 'tabstop'. This is useful for maintaining consistent indentation when opening files with different tab settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:set tabstop=3
```

LANGUAGE: vim
CODE:
```
:retab 8
```

----------------------------------------

TITLE: Using Escaped Arguments in Custom Commands
DESCRIPTION: This snippet illustrates how to handle special characters in arguments using '<q-args>' within a user-defined command, ensuring that special characters are escaped correctly.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:command -nargs=+ Say :echo <q-args>
```

----------------------------------------

TITLE: Accessing Nested Dictionary and List Entries in Vim
DESCRIPTION: Shows how to access nested entries in complex data structures combining dictionaries and lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_47

LANGUAGE: vim
CODE:
```
:echo dict.key[idx].key
```

----------------------------------------

TITLE: Using a Function for Fold Expressions in Vim
DESCRIPTION: A more efficient approach to fold expressions that uses a function without arguments. This defers the complexity to a separate function while using v:lnum for line information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:set foldexpr=MyFoldLevel()
```

----------------------------------------

TITLE: Checking Python availability in Vim script
DESCRIPTION: Conditional statements to test if Python support is available in Neovim using the has() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_10

LANGUAGE: viml
CODE:
```
if has('pythonx')
  echo 'there is Python'
endif
if has('python3')
  echo 'there is Python 3.x'
endif
```

----------------------------------------

TITLE: Defining Regions for Strings in Vim Script
DESCRIPTION: Creates syntax regions for string elements within double quotes and accounts for escaped quote marks using the 'skip' keyword. This prevents premature region termination inside strings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_6

LANGUAGE: Vim Script
CODE:
```
:syntax region xString start=/"/ end=/"/
:syntax region xString start=/"/ skip=/\\"/ end=/"/
```

----------------------------------------

TITLE: Accessing Buffer Variables Example - Vim
DESCRIPTION: Demonstrates how to use getbufvar() to access buffer-local options and variables. Shows retrieving the 'modified' option and a custom variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_83

LANGUAGE: vim
CODE:
```
let bufmodified = getbufvar(1, "&mod")
echo "todo myvar = " .. getbufvar("todo", "myvar")
```

----------------------------------------

TITLE: Setting Tab and Trailing Space Characters
DESCRIPTION: Configures listchars to show tabs with '>' followed by '-' characters, and trailing spaces as '-'. This improves visibility of whitespace characters in the editor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_44

LANGUAGE: viml
CODE:
```
set lcs=tab:>-,trail:-
```

----------------------------------------

TITLE: Removing Dictionary Entries in Vim
DESCRIPTION: Demonstrates different ways to remove entries from a dictionary using remove() or unlet.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_54

LANGUAGE: vim
CODE:
```
:let i = remove(dict, 'aaa')
:unlet dict.aaa
:unlet dict['aaa']
```

----------------------------------------

TITLE: Creating a Quickload Vim Plugin
DESCRIPTION: This example shows how to create a plugin that loads quickly by defining commands and mappings first, and deferring function definitions until they are needed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_54

LANGUAGE: vim
CODE:
```
if !exists("s:did_load")
    command -nargs=* BNRead  call BufNetRead(<f-args>)
    map <F19> :call BufNetWrite('something')<CR>

    let s:did_load = 1
    exe 'au FuncUndefined BufNet* source ' .. expand('<sfile>')
    finish
endif

function BufNetRead(...)
    echo 'BufNetRead(' .. string(a:000) .. ')'
    " read functionality here
endfunction

function BufNetWrite(...)
    echo 'BufNetWrite(' .. string(a:000) .. ')'
    " write functionality here
endfunction
```

----------------------------------------

TITLE: Forcing OSC 52 Clipboard in Neovim - Lua
DESCRIPTION: This code configures Neovim to exclusively use the OSC 52 provider for clipboard operations by setting 'vim.g.clipboard' to 'osc52'. It specifies clipboard operations for both the '+' and '*' registers, requiring 'require('vim.ui.clipboard.osc52')' as a dependency.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_23

LANGUAGE: lua
CODE:
```
vim.g.clipboard = 'osc52'
```

----------------------------------------

TITLE: Lua Error Handling in Neovim
DESCRIPTION: Shows how Lua error messages are emitted with additional context in Neovim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_11

LANGUAGE: lua
CODE:
```
:lua error('TEST')
```

----------------------------------------

TITLE: Getting Existing Autocommand Group in Lua
DESCRIPTION: Lua example showing how to get an existing autocommand group ID without clearing its existing commands by setting the clear option to false.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_83

LANGUAGE: lua
CODE:
```
local id = vim.api.nvim_create_augroup('my.lsp.config', {
    clear = false
})
```

----------------------------------------

TITLE: Opening files in split windows
DESCRIPTION: Opens each specified file in a separate window. The layout will be horizontal splits.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_19

LANGUAGE: bash
CODE:
```
	vim -o one.txt two.txt three.txt
```

----------------------------------------

TITLE: Controlling Vim Syntax Settings
DESCRIPTION: Commands for controlling syntax highlighting behavior, including turning syntax on/off globally.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_74

LANGUAGE: vim
CODE:
```
set syntax=OFF
set syntax=ON
```

----------------------------------------

TITLE: Buffer List Management Commands in Vim
DESCRIPTION: Commands for managing the buffer list in Vim, including listing buffers, navigating between buffers, loading and unloading buffers, and buffer deletion.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
:buffers  or  :files     # list all known buffer and file names
:ball     or  :sball     # edit all args/buffers
:unhide   or  :sunhide   # edit all loaded buffers
:badd {fname}            # add file name {fname} to the list
:bunload[!] [N]          # unload buffer [N] from memory
:bdelete[!] [N]          # unload buffer [N] and delete it from the buffer list
:[N]buffer [N]           # to arg/buf N (in current window)
:[N]sbuffer [N]          # to arg/buf N (in new window)
:[N]bnext [N]            # to Nth next arg/buf (in current window)
:[N]sbnext [N]           # to Nth next arg/buf (in new window)
:[N]bNext [N]            # to Nth previous arg/buf (in current window)
:[N]sbNext [N]           # to Nth previous arg/buf (in new window)
:[N]bprevious [N]        # to Nth previous arg/buf (in current window)
:[N]sbprevious [N]       # to Nth previous arg/buf (in new window)
:bfirst                  # to first arg/buf (in current window)
:sbfirst                 # to first arg/buf (in new window)
:blast                   # to last arg/buf (in current window)
:sblast                  # to last arg/buf (in new window)
:[N]bmod [N]             # to Nth modified buf (in current window)
:[N]sbmod [N]            # to Nth modified buf (in new window)
```

----------------------------------------

TITLE: Modifying Options with Let Command in Vim
DESCRIPTION: Examples of setting and modifying Vim options using the :let command with the & prefix, including global and local option variants.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_94

LANGUAGE: viml
CODE:
```
:let &{option-name} = {expr1}
```

LANGUAGE: viml
CODE:
```
:let &path = &path .. ',/usr/local/include'
```

LANGUAGE: viml
CODE:
```
:let &{option-name} .= {expr1}
```

LANGUAGE: viml
CODE:
```
:let &{option-name} += {expr1}
:let &{option-name} -= {expr1}
```

LANGUAGE: viml
CODE:
```
:let &l:{option-name} = {expr1}
:let &l:{option-name} .= {expr1}
:let &l:{option-name} += {expr1}
:let &l:{option-name} -= {expr1}
```

LANGUAGE: viml
CODE:
```
:let &g:{option-name} = {expr1}
:let &g:{option-name} .= {expr1}
:let &g:{option-name} += {expr1}
:let &g:{option-name} -= {expr1}
```

----------------------------------------

TITLE: Configuring grepprg for ripgrep in Neovim
DESCRIPTION: Sets the 'grepprg' option to use ripgrep with specific flags for the :grep command. This configuration enables case-insensitive searching and includes hidden files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_22

LANGUAGE: viml
CODE:
```
set grepprg=rg --vimgrep -uu
```

----------------------------------------

TITLE: Matching Start-of-Line and End-of-Line
DESCRIPTION: This section describes how to match the start-of-line and end-of-line in Vim patterns using special characters like '^', '\$', and their variations with backslashes. It includes examples for matching lines starting or ending with specific sequences.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_13

LANGUAGE: regex
CODE:
```
"^beep("
"\\^"
"\\_^"
"\\_s*\\_^foo"
"$"
"\\$"
"foo\\_$\\_s*"
```

----------------------------------------

TITLE: Defining Key Mappings in Vim
DESCRIPTION: Examples of key mappings including formatting command Q and grep search functionality
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
map Q gq
vnoremap _g y:exe "grep /" .. escape(@", '\\/') .. "/ *.c *.h"<CR>
```

----------------------------------------

TITLE: Closing all other windows
DESCRIPTION: This command closes all windows except the current one. If any of the other windows contain unsaved changes, an error message will be displayed, and the window will not be closed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
	:only
```

----------------------------------------

TITLE: Getting Mouse Position in Vim
DESCRIPTION: The getmousepos() function returns a dictionary with the last known position of the mouse. It includes screen coordinates, window information, and text position details. Useful for mouse click mappings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_100

LANGUAGE: vim
CODE:
```
getmousepos()
```

----------------------------------------

TITLE: Creating Formatting Parameters in Neovim LSP (Lua)
DESCRIPTION: Creates a DocumentFormattingParams object for the current buffer and cursor position. Takes optional formatting options as a parameter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_55

LANGUAGE: lua
CODE:
```
make_formatting_params({options})
```

----------------------------------------

TITLE: Creating a Key Mapping to Save Current Session
DESCRIPTION: Example of a mapping that saves all files and updates the current session file. The mapping uses the v:this_session variable to determine which session file to update, then prepares to load another session.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:nmap <F2> :wa<Bar>exe "mksession! " .. v:this_session<CR>:so ~/sessions/
```

----------------------------------------

TITLE: Mapping Function Keys in Neovim
DESCRIPTION: This snippet demonstrates how to map the F2 key to insert the current date and time using the strftime function. It appends the result after the cursor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:map <F2> a<C-R>=strftime("%c")<CR><Esc>
```

----------------------------------------

TITLE: Mapping Function Key to Insert Date in Neovim
DESCRIPTION: This snippet demonstrates how to map the F2 key to insert the current date at the end of the file in Normal mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
:map <F2> GoDate: <Esc>:read !date<CR>kJ
```

----------------------------------------

TITLE: Starting Profiling in Vim
DESCRIPTION: These commands demonstrate how to start profiling a Vim script. It starts profiling, specifies the file to profile and the output location, sources the target script, and then exits Vim to generate the profiling report.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_26

LANGUAGE: vim
CODE:
```
":profile start /tmp/one_script_profile"
		":profile file one_script.vim"
		":source one_script.vim"
		":exit"
```

----------------------------------------

TITLE: Parsing Treesitter Parser in Lua
DESCRIPTION: This Lua code snippet initializes a Treesitter parser for the C language, explicitly parses the syntax tree. It requires the Treesitter plugin with the parsers properly installed. The primary parameter is the language identifier ('c' in this case), and the expected behavior is to parse and manage syntax structure, with no direct output returned as the purpose is internal parsing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_1

LANGUAGE: lua
CODE:
```
local p = vim.treesitter.get_parser(0, 'c')
p:parse()
```

----------------------------------------

TITLE: Creating a Function-Based Clipboard Provider in Neovim
DESCRIPTION: Sets up a custom clipboard provider using Vim functions instead of external commands. This example uses g:foo as a fake clipboard storage, demonstrating the lambda function approach.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
let g:clipboard = {
  \   'name': 'myClipboard',
  \   'copy': {
  \      '+': {lines, regtype -> extend(g:, {'foo': [lines, regtype]}) },
  \      '*': {lines, regtype -> extend(g:, {'foo': [lines, regtype]}) },
  \    },
  \   'paste': {
  \      '+': {-> get(g:, 'foo', [])},
  \      '*': {-> get(g:, 'foo', [])},
  \   },
  \ }
```

----------------------------------------

TITLE: Configuring Soft Tab Stops in Vim
DESCRIPTION: Setting the 'softtabstop' option to modify tab behavior, allowing cursor movement and text insertion across 4-column boundaries
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:set softtabstop=4
```

----------------------------------------

TITLE: Checking if Variables are Locked in Vim
DESCRIPTION: Shows how to use the islocked() function to determine if a variable or list element is locked from modification. The function returns 1 for locked variables and 0 for unlocked variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_143

LANGUAGE: vim
CODE:
```
let alist = [0, ['a', 'b'], 2, 3]
lockvar 1 alist
echo islocked('alist')        " 1
echo islocked('alist[1]')    " 0
```

----------------------------------------

TITLE: Setting finer-grained commentstrings in Treesitter
DESCRIPTION: This snippet showcases how to set finer-grained 'commentstring's using the `bo.commentstring` metadata property, which is used by the built-in |commenting| plugin. This is useful for languages like JSX that have different comment syntax depending on the code region.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
    ((jsx_element) @_tag (#set! @_tag bo.commentstring "{/* %s */}"))

```

----------------------------------------

TITLE: Filtering Dictionary Entries in Vim
DESCRIPTION: Demonstrates how to remove entries from a dictionary based on a condition using the filter() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_56

LANGUAGE: vim
CODE:
```
:call filter(dict, 'v:val =~ "x"')
```

----------------------------------------

TITLE: In-place List Concatenation in Vimscript
DESCRIPTION: This snippet demonstrates two ways to concatenate a list with another list in-place (modifying the original list): using the `+=` operator and the `extend()` function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
	:let mylist += [7, 8]
	:call extend(mylist, [7, 8])
```

----------------------------------------

TITLE: Using max() function in Vim
DESCRIPTION: This example demonstrates how to use the max() function to find the maximum value in a list of variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_174

LANGUAGE: vim
CODE:
```
echo max([apples, pears, oranges])
```

----------------------------------------

TITLE: Adding HTML Brackets to matchpairs
DESCRIPTION: Adds angle brackets to the matchpairs option, enabling the % command to jump between matching '<' and '>' characters, which is particularly useful for HTML editing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_50

LANGUAGE: viml
CODE:
```
set mps+=<:>
```

----------------------------------------

TITLE: Syntax Toggle Function in Neovim
DESCRIPTION: Command to toggle syntax highlighting on/off using g:syntax_on variable
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
:if exists("g:syntax_on") | syntax off | else | syntax enable | endif
```

----------------------------------------

TITLE: Specific Count Matching in Vim Search Patterns
DESCRIPTION: Using count specifications in search patterns to match items a specific number of times. The \{n,m} syntax provides precise control over repetition frequency.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
/ab\{3,5}
```

----------------------------------------

TITLE: Mapping Completion Commands in Vim - Vimscript
DESCRIPTION: This code snippet provides custom key mappings for improving the efficiency of completion commands in Vim. Dependencies include the 'inoremap' command in Vim and an understanding of Vim insert mode mappings. These mappings change default combinations to easier shortcuts. No additional inputs are needed to apply these settings, and the output affects only the behavior of the insert mode in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_2

LANGUAGE: Vimscript
CODE:
```
:inoremap <C-]> <C-X><C-]>
:inoremap <C-F> <C-X><C-F>
:inoremap <C-D> <C-X><C-D>
:inoremap <C-L> <C-X><C-L>
```

----------------------------------------

TITLE: Copying text to registers in Vim
DESCRIPTION: This snippet demonstrates how to copy text to named registers (a-z) in Vim, allowing for multiple copy operations between files. The register name precedes the yank command. This enables you to copy multiple blocks of text into different registers, and then paste them in any order.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
	"fyas
```

LANGUAGE: vim
CODE:
```
	"l3yy
```

LANGUAGE: vim
CODE:
```
	CTRL-Vjjww"by
```

LANGUAGE: vim
CODE:
```
	"fp
```

----------------------------------------

TITLE: Deep Copying Data Structures - Lua
DESCRIPTION: The deepcopy function creates a duplicate of the provided expression. For Lists, it performs a full copy, allowing for independent manipulation. The function supports a parameter to control reference handling during copying.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_45

LANGUAGE: lua
CODE:
```
deepcopy({expr} [, {noref}])                                   *deepcopy()* *E698*
		Make a copy of {expr}.  For Numbers and Strings this isn't
		different from using {expr} directly.
		When {expr} is a |List| a full copy is created.  This means
		that the original |List| can be changed without changing the
		copy, and vice versa.  When an item is a |List|, a copy for it
		is made, recursively.  Thus changing an item in the copy does
		not change the contents of the original |List|.

		When {noref} is omitted or zero a contained |List| or
		|Dictionary| is only copied once.  All references point to
		this single copy.  With {noref} set to 1 every occurrence of a
		|List| or |Dictionary| results in a new copy.  This also means
		that a cyclic reference causes deepcopy() to fail.
						*E724*
		Nesting is possible up to 100 levels.  When there is an item
		that refers back to a higher level making a deep copy with
		{noref} set to 1 will fail.
		Also see |copy()|.

		Parameters: ~
		  • {expr} (`T`)
		  • {noref} (`boolean?`)

		Return: ~
		  (`T`)
```

----------------------------------------

TITLE: Square Root Calculation using sqrt()
DESCRIPTION: Examples of using the sqrt() function for calculating square roots of numbers, including handling negative numbers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_250

LANGUAGE: vim
CODE:
```
echo sqrt(100)
echo sqrt(-4.01)
```

----------------------------------------

TITLE: Parent-Child Nvim Communication Example in Lua
DESCRIPTION: Demonstrates how to detect and communicate with a parent Nvim process from a child Nvim instance using the $NVIM environment variable and RPC calls.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_9

LANGUAGE: lua
CODE:
```
if vim.env.NVIM then
  local ok, chan = pcall(vim.fn.sockconnect, 'pipe', vim.env.NVIM, {rpc=true})
  if ok and chan then
    local client = vim.api.nvim_get_chan_info(chan).client
    local rv = vim.rpcrequest(chan, 'nvim_exec_lua', [[return ... + 1]], { 41 })
    vim.print(('got "%s" from parent Nvim'):format(rv))
  end
end
```

----------------------------------------

TITLE: Setting a Global Variable in Neovim
DESCRIPTION: Sets a global variable using 'nvim_set_var'. This API requires the name and value of the variable as strings. Errors if the variable cannot be set.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_25

LANGUAGE: Lua
CODE:
```
nvim_set_var\(\{name\}, \{value\}\)
```

----------------------------------------

TITLE: Window Quitting Examples in Vim
DESCRIPTION: Examples showing different ways to quit windows by number in Vim using counts with the quit command. Demonstrates quitting specific windows by position or relative reference.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:1quit  " quit the first window
:$quit  " quit the last window
:9quit  " quit the last window
        " if there are fewer than 9 windows opened
:-quit  " quit the previous window
:+quit  " quit the next window
:+2quit " quit the second next window
```

----------------------------------------

TITLE: Setting Undo Variables in Vim Filetype Plugins
DESCRIPTION: This example shows how to set the b:undo_ftplugin variable to undo the settings in a filetype plugin when the filetype changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_52

LANGUAGE: vim
CODE:
```
let b:undo_ftplugin = "setlocal fo< com< tw< commentstring<"
    \ .. "| unlet b:match_ignorecase b:match_words b:match_skip"
```

----------------------------------------

TITLE: Retrieving Placed Signs in Vim Buffers
DESCRIPTION: Examples of using sign_getplaced() to get information about signs placed in buffers. This function can return signs from specific buffers, groups, or with specific attributes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_237

LANGUAGE: vim
CODE:
```
" Get a List of signs placed in eval.c in the
" global group
echo sign_getplaced("eval.c")

" Get a List of signs in group 'g1' placed in eval.c
echo sign_getplaced("eval.c", {'group' : 'g1'})

" Get a List of signs placed at line 10 in eval.c
echo sign_getplaced("eval.c", {'lnum' : 10})

" Get sign with identifier 10 placed in a.py
echo sign_getplaced("a.py", {'id' : 10})

" Get sign with id 20 in group 'g1' placed in a.py
echo sign_getplaced("a.py", {'group' : 'g1',
                               \  'id' : 20})

" Get a List of all the placed signs
echo sign_getplaced()
```

----------------------------------------

TITLE: Using getbufinfo() Function to Retrieve Buffer Information in Vim Script
DESCRIPTION: Shows how to use the getbufinfo() function to get information about buffers in Vim script. It demonstrates iterating over buffer information and checking for specific buffer properties.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_81

LANGUAGE: vim
CODE:
```
for buf in getbufinfo()
    echo buf.name
endfor
for buf in getbufinfo({'buflisted':1})
    if buf.changed
        " ....
    endif
endfor
```

LANGUAGE: vim
CODE:
```
getbufvar({bufnr}, '&option_name')
```

----------------------------------------

TITLE: Line and Column Specific Matching
DESCRIPTION: Covers using line ('\%23l') and column ('\%23c') specific matches, including above ('\%<23') and below ('\%>23') operators for more targeted searches.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_21

LANGUAGE: regex
CODE:
```
"\\%23l"
"\\%<23l"
"\\%>23l"
"\\%.l"
"\\%.c"
":"exe '/\\% .. line(".") .. 'l'"
":"exe '/\\% .. col(".") .. 'c'"
```

----------------------------------------

TITLE: Compound Assignment Operations in Vim
DESCRIPTION: Various compound assignment operators in Vim that combine an operation with assignment. These operate on different variable types, including numbers, strings, lists, and blobs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_91

LANGUAGE: viml
CODE:
```
:let {var} += {expr1}
:let {var} -= {expr1}
`:let {var} *= {expr1}`
:let {var} /= {expr1}
:let {var} %= {expr1}
:let {var} .= {expr1}
:let {var} ..= {expr1}
```

----------------------------------------

TITLE: Dictionary Access in Vim Script
DESCRIPTION: Demonstrates dictionary creation and access using dot notation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_78

LANGUAGE: vim
CODE:
```
:let dict = {"one": 1, 2: "two"}\n:echo dict.one\n:echo dict.2\n:echo dict .2
```

----------------------------------------

TITLE: Calling Environment Functions with libcall in Vim
DESCRIPTION: Example of using libcall() to call the getenv() function from the C library to retrieve the HOME environment variable. This demonstrates interfacing with external system libraries.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_151

LANGUAGE: vim
CODE:
```
echo libcall("libc.so", "getenv", "HOME")
```

----------------------------------------

TITLE: Performing Bitwise Inversion in Vim
DESCRIPTION: Demonstrates how to use the invert() function to perform bitwise inversion on an integer value. The example shows toggling bits in a variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_140

LANGUAGE: vim
CODE:
```
let bits = invert(bits)
```

----------------------------------------

TITLE: Installing Node.js Provider for Neovim
DESCRIPTION: Installs the neovim NPM package globally, which is required for Node.js integration in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_13

LANGUAGE: bash
CODE:
```
npm install -g neovim
```

----------------------------------------

TITLE: Filter Command Example - Filtering XML Files
DESCRIPTION: Demonstrates using the :filter command to restrict output to only XML files when listing oldfiles.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
:filter /\.xml$/ oldfiles
```

----------------------------------------

TITLE: Retrieving Buffer List for All Tab Pages in Vim
DESCRIPTION: This example shows how to get a list of all buffers in all tab pages using a for loop and the tabpagebuflist function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_275

LANGUAGE: vim
CODE:
```
let buflist = []
for i in range(tabpagenr('$'))
   call extend(buflist, tabpagebuflist(i + 1))
endfor
```

----------------------------------------

TITLE: Managing Buffer-local Autocommands in Vim
DESCRIPTION: Commands for managing buffer-local autocommands, showing how to remove, list, and apply them to specific buffers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_23

LANGUAGE: viml
CODE:
```
:au! * <buffer>                " remove buffer-local autocommands for
                              " current buffer
:au! * <buffer=33>              " remove buffer-local autocommands for
                              " buffer #33
:bufdo :au! CursorHold <buffer>  " remove autocmd for given event for all
                              " buffers
:au * <buffer>                 " list buffer-local autocommands for
                              " current buffer
```

----------------------------------------

TITLE: Retrieving Syntax Item Color in Vim
DESCRIPTION: This example shows how to echo the color of the syntax item under the cursor using synID, synIDtrans, and synIDattr functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_269

LANGUAGE: vim
CODE:
```
echo synIDattr(synIDtrans(synID(line("."), col("."), 1)), "fg")
```

----------------------------------------

TITLE: Replacing Diagnostic Functions in Neovim
DESCRIPTION: Explains migration from deprecated diagnostic functions to newer alternatives in Neovim. It includes dependencies on vim.diagnostic module for updated functions. Functions like vim.lsp.diagnostic.get_count() are replaced with vim.diagnostic.count(), enhancing functionality and performance.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_2

LANGUAGE: Lua
CODE:
```
vim.lsp.diagnostic.get_count()
```

----------------------------------------

TITLE: Using glob2regpat to match filenames in Vim
DESCRIPTION: Example of using glob2regpat() to convert a glob pattern into a regular expression pattern that can be used with the =~ operator to match a filename.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_112

LANGUAGE: vim
CODE:
```
if filename =~ glob2regpat('Make*.mak')
  " ...
endif
```

----------------------------------------

TITLE: List Slice Operations in Vim Script
DESCRIPTION: Examples of list slicing operations including getting first four items and creating shallow copies.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_76

LANGUAGE: vim
CODE:
```
:let l = mylist[:3]\n:let l = mylist[4:4]\n:let l = mylist[:]
```

----------------------------------------

TITLE: Setting automatic fold closing
DESCRIPTION: Configures folds to automatically close when the cursor moves out of them. This applies the foldlevel to folds not containing the cursor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_10

LANGUAGE: vimdoc
CODE:
```
:set foldclose=all
```

----------------------------------------

TITLE: Setting indent-based folding method
DESCRIPTION: Changes the folding method to use indentation levels for determining fold regions. This is useful for structured code with consistent indentation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_15

LANGUAGE: vimdoc
CODE:
```
:set foldmethod=indent
```

----------------------------------------

TITLE: Parsing Regions in LanguageTree (Lua)
DESCRIPTION: Recursively parses all regions in the language tree using treesitter parsers. Can parse specific ranges or the entire source. Supports asynchronous parsing with a callback function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_37

LANGUAGE: lua
CODE:
```
LanguageTree:parse({range}, {on_parse})
```

----------------------------------------

TITLE: Configuring Clipboard for All Operations in Neovim
DESCRIPTION: Configures Neovim to use the system clipboard for all operations by adding 'unnamedplus' to the clipboard option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
set clipboard+=unnamedplus
```

----------------------------------------

TITLE: Using Substitute Command with Range in Vim
DESCRIPTION: This snippet demonstrates how to use the substitute command with a range and the 'c' flag in Vim. It searches for 'Pattern' from the cursor position to line 300, prompting for action at each match.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
:.,300s/Pattern//gc
```

----------------------------------------

TITLE: LSP Configuration Examples and Merging
DESCRIPTION: Example demonstrating LSP configuration merging behavior across different configuration sources.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_3

LANGUAGE: lua
CODE:
```
-- Defined in init.lua
vim.lsp.config('*', {
  capabilities = {
    textDocument = {
      semanticTokens = {
        multilineTokenSupport = true,
      }
    }
  },
  root_markers = { '.git' },
})

-- Defined in <rtp>/lsp/clangd.lua
return {
  cmd = { 'clangd' },
  root_markers = { '.clangd', 'compile_commands.json' },
  filetypes = { 'c', 'cpp' },
}

-- Defined in init.lua
vim.lsp.config('clangd', {
  filetypes = { 'c' },
})
```

----------------------------------------

TITLE: Using Hide Command with Buffer in Vim
DESCRIPTION: Example showing how to use the :hide command with another command to edit a new file while hiding the current buffer, regardless of the 'hidden' option setting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:hide edit Makefile
```

----------------------------------------

TITLE: Checking Buffer Existence in Neovim using Vim Script
DESCRIPTION: The function 'bufexists' checks if a buffer exists by accepting either a buffer number or a string name. Returns 1 if it exists, otherwise returns 0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
bufexists({buf})
```

----------------------------------------

TITLE: Defining Perl Functions in Vim Scripts
DESCRIPTION: Example of defining a Perl function within a Vim function using heredoc syntax, demonstrating how to include Perl code in Vim scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_perl.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
function! MyVimMethod()
perl << EOF
sub my_vim_method
{
	print "Hello World!\n";
}
EOF
endfunction
```

----------------------------------------

TITLE: Defining Keywords in Vim Script
DESCRIPTION: Defines keywords within a specified syntax group for highlighting, with examples using 'xType' and 'xStatement'. It also connects these groups to standard Vim groups using the ':highlight link' command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_3

LANGUAGE: Vim Script
CODE:
```
:syntax keyword {group} {keyword} ...
:syntax keyword xType int long char
:syntax keyword xStatement if then else endif
:highlight link xType Type
:highlight link xStatement Statement
```

----------------------------------------

TITLE: Insert Mode Completion Example - Month List
DESCRIPTION: Demonstrates how to implement custom insert mode completion using the complete() function to display a list of months.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_35

LANGUAGE: vim
CODE:
```
inoremap <F5> <C-R>=ListMonths()<CR>

func ListMonths()
  call complete(col('.'), ['January', 'February', 'March',
    \ 'April', 'May', 'June', 'July', 'August', 'September',
    \ 'October', 'November', 'December'])
  return ''
endfunc
```

----------------------------------------

TITLE: Configuring Wildmode Completion Behavior
DESCRIPTION: Examples of different wildmode configurations for controlling command-line completion behavior and menu display.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_84

LANGUAGE: vim
CODE:
```
set wildmode=full
set wildmode=longest,full
set wildmode=list:full
set wildmode=list,full
set wildmode=longest,list
set wildmode=noselect:full
set wildmode=noselect:lastused,full
```

----------------------------------------

TITLE: Parsing a command line in Neovim
DESCRIPTION: This function parses a command line string in Neovim. The function requires the command line string and optional parameters. It returns a dictionary containing the parsed command information. It does not check the validity of command arguments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_47

LANGUAGE: vim
CODE:
```
nvim_parse_cmd({str}, {opts})                               *nvim_parse_cmd()*\n    Parse command line.\n\n    Doesn't check the validity of command arguments.\n\n    Attributes: ~\n        |api-fast|\n        Since: 0.8.0\n\n    Parameters: ~\n      • {str}   Command line string to parse. Cannot contain "\n".
```

----------------------------------------

TITLE: Setting Buffer for Window in Neovim Lua API
DESCRIPTION: Sets the current buffer in a window without side effects. Not allowed when textlock is active. Available since Neovim 0.3.2.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_76

LANGUAGE: lua
CODE:
```
nvim_win_set_buf({window}, {buffer})
```

----------------------------------------

TITLE: Heredoc Syntax for Multi-line Text in Vim
DESCRIPTION: Using the heredoc syntax in Vim to assign multi-line text to a variable as a List. Supports both literal text and evaluated expressions with the 'eval' option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_96

LANGUAGE: viml
CODE:
```
:let {var-name} =<< [trim] [eval] {endmarker}
text...
text...
{endmarker}
```

----------------------------------------

TITLE: Echo Example in Lua
DESCRIPTION: Example showing how to use nvim_echo API to print formatted messages with highlighting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_8

LANGUAGE: lua
CODE:
```
vim.api.nvim_echo({ { 'chunk1-line1\nchunk1-line2\n' }, { 'chunk2-line1' } }, true, {})
```

----------------------------------------

TITLE: Platform detection with has() in Vim
DESCRIPTION: Example of using has() to check if the current system is Windows before executing platform-specific code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_120

LANGUAGE: vim
CODE:
```
if has("win32")
  " ...
endif
```

----------------------------------------

TITLE: File Status Operation in Lua
DESCRIPTION: Retrieves file status information including size, permissions, and timestamps. Equivalent to stat(2).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_50

LANGUAGE: lua
CODE:
```
uv.fs_stat({path} [, {callback}])
```

----------------------------------------

TITLE: Getting All Trees in LanguageTree (Lua)
DESCRIPTION: Returns all trees of the regions parsed by this parser, excluding child languages. The result is list-like under certain conditions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_41

LANGUAGE: lua
CODE:
```
LanguageTree:trees()
```

----------------------------------------

TITLE: Using submatch() in Vim Script
DESCRIPTION: Demonstrates the usage of submatch() function to retrieve submatches in a substitute command or substitute() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_265

LANGUAGE: vim
CODE:
```
s/\d\+/\=submatch(0) + 1/
```

LANGUAGE: vim
CODE:
```
echo substitute(text, '\d\+', '\=submatch(0) + 1', '')
```

----------------------------------------

TITLE: Basic Arithmetic Operations in Vim Script
DESCRIPTION: Demonstrates basic mathematical operations and string concatenation in Vim script. Shows operator precedence and grouping with parentheses.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_8

LANGUAGE: viml
CODE:
```
:echo 10 + 5 * 2
:echo (10 + 5) * 2
:echo "foo" .. "bar"
```

----------------------------------------

TITLE: Buffer-local abbreviation example
DESCRIPTION: This snippet demonstrates how to create a buffer-local abbreviation.  The abbreviation 'FF' is defined for the current buffer only, and it expands to a `for` loop structure in C.  This is typically used within a filetype plugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_27

LANGUAGE: Vim Script
CODE:
```
:abb <buffer> FF  for (i = 0; i < ; ++i)
```

----------------------------------------

TITLE: Creating a Multiline Paste Mapping in Lua
DESCRIPTION: This snippet demonstrates how to use nvim_paste to create a keymap that inserts multiline text. The function creates a buffer-local mapping that pastes predefined text when 'x' is pressed in normal mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_13

LANGUAGE: lua
CODE:
```
vim.keymap.set('n', 'x', function()
  vim.api.nvim_paste([[
    line1
    line2
    line3
  ]], false, -1)
end, { buffer = true })
```

----------------------------------------

TITLE: Configuring LSP Start Default Keymaps in Neovim
DESCRIPTION: This snippet outlines how `vim.lsp.start()` sets default keymaps for LSP servers in Neovim, such as mapping `K` in Normal mode to `vim.lsp.buf.hover()`. The functionality assumes server support and depends on Neovim's LSP integration. Users can customize 'keywordprg' prior to calling `vim.lsp.start()`. The input is a function call, and it outputs configured keymaps within Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.10.txt#2025-04-20_snippet_2

LANGUAGE: lua
CODE:
```
vim.lsp.start()
```

----------------------------------------

TITLE: Setting File Formats in Vim
DESCRIPTION: This command sets the 'fileformats' option to specify the order in which Vim should try to detect file formats. It tells Vim to try Unix format first and MS-DOS format second. This helps Vim automatically handle line-break differences between operating systems.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
	:set fileformats=unix,dos
```

----------------------------------------

TITLE: File Editing Commands in Vim
DESCRIPTION: Commands for editing files, including file loading, reloading, finding, and navigating between files. Also includes directory manipulation commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:e[dit][!] {file}    edit {file}
:e[dit][!]           reload the current file
:ene[w][!]           edit a new, unnamed buffer
:fin[d][!] {file}    find {file} in 'path' and edit it

N  CTRL-^           edit alternate file N (equivalent to ":e #N")
gf  or ]f           edit the file whose name is under the cursor
:pwd                print the current directory name
:cd [path]          change the current directory to [path]
:cd -               back to previous current directory
:f[ile]             print the current file name and the cursor position
:f[ile] {name}      set the current file name to {name}
:files              show alternate file names
```

----------------------------------------

TITLE: Disabling Function Key with <Nop> in Vim
DESCRIPTION: Demonstrates how to disable a key (F8 in this example) by mapping it to <Nop>, which produces no output. The mapping is done for both normal and insert/command modes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
:map  <F8>  <Nop>
:map! <F8>  <Nop>
```

----------------------------------------

TITLE: Synchronizing Syntax with Vimscript
DESCRIPTION: Shows how to use the ':syntax sync' command to synchronize syntax highlighting in Vim. The snippet includes setting minimum and maximum line limits for scanning, skipping certain syntax items for faster syncing, and specifying custom syntax groups for various programming constructs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_20

LANGUAGE: Vimscript
CODE:
```
:syntax sync ccomment
:syntax sync ccomment minlines=10 maxlines=500
:syntax sync ccomment xAltComment
:syntax sync minlines=150
:syntax sync match {sync-group-name} \ \\grouphere {group-name} {pattern}
:syntax sync match shIfSync grouphere shIf "\\<if\\>"
:syntax sync match shIfSync groupthere NONE "\\<fi\\>"
:syntax sync match xSpecial /{.*}/
```

----------------------------------------

TITLE: Normal Mode Commands Reference
DESCRIPTION: Documents commands available in Neovim's normal mode, including cursor movements, text manipulation, and window operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_1

LANGUAGE: vimdoc
CODE:
```
CTRL-@ 		not used
CTRL-A 		add N to number at/after cursor
CTRL-B 		scroll N screens Backwards
CTRL-C 		interrupt current (search) command
CTRL-D 		scroll Down N lines (default: half a screen)
```

----------------------------------------

TITLE: Basic Exception Throwing
DESCRIPTION: Shows how to throw exceptions in Vim script using literals and expressions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_120

LANGUAGE: vim
CODE:
```
:throw 4711
:throw "string"
:throw 4705 + strlen("string")
:throw strpart("strings", 0, 6)
```

----------------------------------------

TITLE: Setting Terminal True Colors in Neovim
DESCRIPTION: Configuration snippet to enable true color (24-bit) support in compatible terminals.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
set termguicolors
```

----------------------------------------

TITLE: Lua Bitwise Operations Examples
DESCRIPTION: Presents examples of various bitwise operations including tobit, tohex, bnot, bor, band, bxor, lshift, rshift, arshift, rol, and ror, each showcasing its purpose and the expected output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_3

LANGUAGE: Lua
CODE:
```
print(0xffffffff)                --> 4294967295 (see Note)
print(bit.tobit(0xffffffff))     --> -1
printx(bit.tobit(0xffffffff))    --> 0xffffffff
print(bit.tobit(0xffffffff + 1)) --> 0
print(bit.tobit(2^40 + 1234))    --> 1234

```

LANGUAGE: Lua
CODE:
```
print(bit.tohex(1))              --> 00000001
print(bit.tohex(-1))             --> ffffffff
print(bit.tohex(0xffffffff))     --> ffffffff
print(bit.tohex(-1, -8))         --> FFFFFFFF
print(bit.tohex(0x21, 4))        --> 0021
print(bit.tohex(0x87654321, 4))  --> 4321

```

LANGUAGE: Lua
CODE:
```
print(bit.bnot(0))            --> -1
printx(bit.bnot(0))           --> 0xffffffff
print(bit.bnot(-1))           --> 0
print(bit.bnot(0xffffffff))   --> 0
printx(bit.bnot(0x12345678))  --> 0xedcba987

```

LANGUAGE: Lua
CODE:
```
print(bit.bor(1, 2, 4, 8))                --> 15
printx(bit.band(0x12345678, 0xff))        --> 0x00000078
printx(bit.bxor(0xa5a5f0f0, 0xaa55ff00))  --> 0x0ff00ff0

```

LANGUAGE: Lua
CODE:
```
print(bit.lshift(1, 0))              --> 1
print(bit.lshift(1, 8))              --> 256
print(bit.lshift(1, 40))             --> 256
print(bit.rshift(256, 8))            --> 1
print(bit.rshift(-256, 8))           --> 16777215
print(bit.arshift(256, 8))           --> 1
print(bit.arshift(-256, 8))          --> -1
printx(bit.lshift(0x87654321, 12))   --> 0x54321000
printx(bit.rshift(0x87654321, 12))   --> 0x00087654
printx(bit.arshift(0x87654321, 12))  --> 0xfff87654

```

LANGUAGE: Lua
CODE:
```
printx(bit.rol(0x12345678, 12))   --> 0x45678123
printx(bit.ror(0x12345678, 12))   --> 0x67812345

```

LANGUAGE: Lua
CODE:
```
printx(bit.bswap(0x12345678)) --> 0x78563412
printx(bit.bswap(0x78563412)) --> 0x12345678

```

----------------------------------------

TITLE: Defining a User Command in Vim/Neovim
DESCRIPTION: Example of defining a user command named 'Rename' using the :command directive. This demonstrates the basic syntax for creating a custom command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_29

LANGUAGE: viml
CODE:
```
:command Rename ...
```

----------------------------------------

TITLE: Mapping Commands in Vim
DESCRIPTION: This snippet provides Vim mappings to navigate code blocks using custom keybindings. The key sequences map specific keystrokes to search and navigate through code blocks, such as '{' and '}'. Dependencies include having Vim installed and appropriate configuration loaded. This enables efficient code navigation by customizing directional controls like searches.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:map [[ ?{<CR>w99[{\n:map ][ /}<CR>b99]}\n:map ]] j0[[%/{<CR>\n:map [] k$][%?}<CR>
```

----------------------------------------

TITLE: Mapping Cursor Keys to Visual Line Movement
DESCRIPTION: Mappings to bind the Up and Down cursor keys to gk and gj commands for more intuitive navigation in wrapped lines, allowing movement by visible lines rather than logical lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:map <Up> gk
:map <Down> gj
```

----------------------------------------

TITLE: Sample Health Check Module Implementation in Lua
DESCRIPTION: Example implementation of a health check module for a plugin, showing the basic structure and usage of health reporting functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_5

LANGUAGE: lua
CODE:
```
local M = {}

M.check = function()
  vim.health.start("foo report")
  -- make sure setup function parameters are ok
  if check_setup() then
    vim.health.ok("Setup is correct")
  else
    vim.health.error("Setup is incorrect")
  end
  -- do some more checking
  -- ...
end

return M
```

----------------------------------------

TITLE: Matchgroup Region Definition in Vim
DESCRIPTION: Examples of using matchgroup to highlight region boundaries differently from their content.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
:syntax region xInside matchgroup=xParen start=/(/ end=/)/
:syntax region xInside matchgroup=xParen start=/(/
	\ matchgroup=xParenEnd end=/)/
```

----------------------------------------

TITLE: Jumping to a Placed Sign in Vim
DESCRIPTION: Example of using sign_jump() to move the cursor to a specific sign in a buffer. This function opens the buffer or jumps to the window containing the sign.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_238

LANGUAGE: vim
CODE:
```
" Jump to sign 10 in the current buffer
call sign_jump(10, '', '')
```

----------------------------------------

TITLE: Unary Operators in Neovim
DESCRIPTION: Examples of unary operators in Neovim, including logical NOT (!), unary minus (-), and unary plus (+). Shows how these operators can be combined.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_72

LANGUAGE: vim
CODE:
```
!-1	    == 0
!!8	    == 1
--9	    == 9
```

----------------------------------------

TITLE: Using function() with Dictionaries for Dict Functions in Vim Script
DESCRIPTION: Shows how to use function() with dictionaries to create dict functions in Vim script. It demonstrates passing a dictionary as 'self' to the function and combining argument lists with dictionaries.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_79

LANGUAGE: vim
CODE:
```
function Callback() dict
   echo "called for " .. self.name
endfunction
"...
let context = {"name": "example"}
let Func = function('Callback', context)
"...
call Func()	" will echo: called for example
```

LANGUAGE: vim
CODE:
```
function Callback(arg1, count) dict
"...
endfunction
let context = {"name": "example"}
let Func = function('Callback', ['one'], context)
"...
call Func(500)
```

----------------------------------------

TITLE: Custom Patch Expression Function in Vim
DESCRIPTION: Example implementation of a custom patch expression function that applies patches to files using the system patch command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_6

LANGUAGE: viml
CODE:
```
set patchexpr=MyPatch()
function MyPatch()
   :call system("patch -o " .. v:fname_out .. " " .. v:fname_in ..
   \  " < " .. v:fname_diff)
endfunction
```

----------------------------------------

TITLE: Autocommand Management in Vim
DESCRIPTION: Commands for defining, listing, and managing automatic commands that execute on certain events. Provides syntax for creating event patterns and removing autocommands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
:au                     # list all autocommands
:au {event}               # list all autocommands for {event}
:au {event} {pat}         # list all autocommands for {event} with {pat}
:au {event} {pat} {cmd}   # enter new autocommands for {event} with {pat}
:au!                     # remove all autocommands
:au! {event}              # remove all autocommands for {event}
:au! * {pat}              # remove all autocommands for {pat}
:au! {event} {pat}        # remove all autocommands for {event} with {pat}
:au! {event} {pat} {cmd}  # remove all autocommands for {event} with {pat} and enter new one
```

----------------------------------------

TITLE: Vim Configuration File Edit
DESCRIPTION: Commands to edit Vim configuration file and add search settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:edit ~/.config/nvim/init.vim
Go:set hlsearch<Esc>
ZZ
```

----------------------------------------

TITLE: Using Marks in Vim Script
DESCRIPTION: Demonstrates the use of marks 't' and 'b' in Vim to specify line ranges for commands. This allows users to refer to specific lines without manually counting line numbers. Inputs include mark placements and typical commands applied to the ranges between 't' and 'b'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_3

LANGUAGE: Vim Script
CODE:
```

  :'t,'b
```

----------------------------------------

TITLE: Using Character Offsets in Vim Search
DESCRIPTION: Various character offset techniques in Vim search patterns that allow positioning the cursor at specific character positions relative to the match, including at the end of matches.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
/const/e
```

LANGUAGE: vim
CODE:
```
/const/e+1
```

LANGUAGE: vim
CODE:
```
/const/e-1
```

LANGUAGE: vim
CODE:
```
/const/b+2
```

----------------------------------------

TITLE: Listing Runtime Directories in Neovim
DESCRIPTION: Command to list all runtime directories and packages with Lua paths using nvim_get_runtime_file function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
" List all runtime dirs and packages with Lua paths.
:echo nvim_get_runtime_file("lua/", v:true)
```

----------------------------------------

TITLE: Enabling Basic Filetype Detection in Vim
DESCRIPTION: Basic command to enable Vim's filetype detection system. This loads filetype.lua and filetype.vim from VIMRUNTIME.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:filetype on
```

----------------------------------------

TITLE: Executing Normal Mode Command with Register and Count in Neovim
DESCRIPTION: This snippet shows a more advanced use of CTRL-O in Insert mode, utilizing a register and count with the command 'g3dw'. It deletes up to the third word into register 'g', illustrating the flexibility of command execution in Insert mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_6

LANGUAGE: text
CODE:
```
CTRL-O "g3dw
```

----------------------------------------

TITLE: Counting Matched Texts in Neovim Buffer (Vimscript)
DESCRIPTION: This snippet demonstrates how to use searchcount() to count occurrences of a specific pattern in the current buffer. It also shows how to restore the old search count.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_218

LANGUAGE: vim
CODE:
```
" Count '\<foo\>' in this buffer
" (Note that it also updates search count)
let result = searchcount(#{pattern: '\<foo\>'})

" To restore old search count by old pattern,
" search again
call searchcount()
```

----------------------------------------

TITLE: Detailed OSC 52 Clipboard Configuration in Neovim - Lua
DESCRIPTION: This snippet provides a detailed Lua table configuration for using the OSC 52 clipboard provider in Neovim. It specifies the 'copy' and 'paste' functions to handle the '+' and '*' registers, leveraging 'vim.ui.clipboard.osc52'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_24

LANGUAGE: lua
CODE:
```
vim.g.clipboard = {
  name = 'OSC 52',
  copy = {
    ['+'] = require('vim.ui.clipboard.osc52').copy('+'),
    ['*'] = require('vim.ui.clipboard.osc52').copy('*'),
  },
  paste = {
    ['+'] = require('vim.ui.clipboard.osc52').paste('+'),
    ['*'] = require('vim.ui.clipboard.osc52').paste('*'),
  },
}
```

----------------------------------------

TITLE: Zero-width Assertions in Vim Regex
DESCRIPTION: This snippet covers zero-width assertions in Vim regex, illustrating how to use different types of conditions, such as lookaheads (\@=) and lookbehinds (\@<=), along with their specific use cases and examples.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
*/\@=*\
\@=\tMatches the preceding atom with zero width.
\tLike "(?=pattern)" in Perl.
\tExample\tmatches ~
\tfoo\(bar\)\@=\t"foo" in "foobar"
\tfoo\(bar\)\@=foo\tnothing

\t\tUsing "\@=" (or "^", "$", "\<", "\>") no characters are included
\tin the match.  These items are only used to check if a match can be
\tmade.  This can be tricky, because a match with following items will
\tbe done in the same position.  The last example above will not match
\t"foobarfoo", because it tries match "foo" in the same position where
\t"bar" matched.
```

----------------------------------------

TITLE: Optimizing Fold Expression Performance with Caching in Vim
DESCRIPTION: A performance optimization technique for fold expressions that caches fold levels in a buffer-local variable. This reduces computation by only recalculating fold levels when the buffer has been changed, using b:changedtick as a trigger.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
func MyFoldFunc()
  if b:lasttick == b:changedtick
    return b:foldlevels[v:lnum - 1]
  endif
  let b:lasttick = b:changedtick
  let b:foldlevels = []
  " compute foldlevels ...
  return b:foldlevels[v:lnum - 1]
enddef
set foldexpr=s:MyFoldFunc()
```

----------------------------------------

TITLE: Customizing Colorscheme in Vim
DESCRIPTION: This snippet demonstrates how to customize a colorscheme in Vim. It shows how to create a new colorscheme file, load an existing one, and modify specific highlight groups.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_184

LANGUAGE: viml
CODE:
```
runtime colors/evening.vim
hi Statement ctermfg=Blue guifg=Blue
```

----------------------------------------

TITLE: Managing Case Sensitivity in Vim Syntax Files
DESCRIPTION: Defines whether language syntax in Vim should be case-sensitive or not. Useful for languages with varying case sensitivity. Can be placed anywhere in a syntax file to affect subsequent definitions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_2

LANGUAGE: Vim Script
CODE:
```
:syntax case match
:syntax case ignore
```

----------------------------------------

TITLE: Cargo Command Shortcuts (Vim)
DESCRIPTION: These commands provide shortcuts for invoking various Cargo commands directly from within Vim. Each command maps to a specific cargo action such as build, clean, doc, init, run, test, update, bench, search, publish, install, and runtarget.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_27

LANGUAGE: vim
CODE:
```
:Cargo <args>                                                       *:Cargo*
                Runs `cargo` with the provided arguments.

:Cbuild <args>                                                     *:Cbuild*
                Shortcut for `cargo build` .

:Cclean <args>                                                     *:Cclean*
                Shortcut for `cargo clean` .

:Cdoc <args>                                                         *:Cdoc*
                Shortcut for `cargo doc` .

:Cinit <args>                                                       *:Cinit*
                Shortcut for `cargo init` .

:Crun <args>                                                         *:Crun*
                Shortcut for `cargo run` .

:Ctest <args>                                                       *:Ctest*
                Shortcut for `cargo test` .

:Cupdate <args>                                                   *:Cupdate*
                Shortcut for `cargo update` .

:Cbench <args>                                                     *:Cbench*
                Shortcut for `cargo bench` .

:Csearch <args>                                                   *:Csearch*
                Shortcut for `cargo search` .

:Cpublish <args>                                                 *:Cpublish*
                Shortcut for `cargo publish` .

:Cinstall <args>                                                 *:Cinstall*
                Shortcut for `cargo install` .

:Cruntarget <args>                                                 *:Cruntarget*
                Shortcut for `cargo run --bin` or `cargo run --example`,
                depending on the currently open buffer.
```

----------------------------------------

TITLE: Mapping Escape Key in Neovim
DESCRIPTION: This Neovim-specific snippet maps the Escape key to a terminal mode command escape sequence. This mapping is enclosed in a conditional block to ensure it only applies when Neovim is being used.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
if has('nvim')
    tnoremap <Esc> <C-\><C-n>
endif
```

----------------------------------------

TITLE: Autocommand with Environment Variable in Vimscript
DESCRIPTION: This demonstrates how to use an environment variable in an autocommand pattern. The 'expandtab' option will be set for all text files in the `$VIMRUNTIME/doc/` directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
 ":autocmd BufRead $VIMRUNTIME/doc/*.txt  set expandtab"
```

----------------------------------------

TITLE: List Unpacking in Vim
DESCRIPTION: Examples of unpacking lists into multiple variables in Vim, including basic unpacking, compound operations, and collecting remaining items into a variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_95

LANGUAGE: viml
CODE:
```
:let [s, item] = GetItem(s)
```

LANGUAGE: viml
CODE:
```
:let x = [0, 1]
:let i = 0
:let [i, x[i]] = [1, 2]
:echo x
```

LANGUAGE: viml
CODE:
```
:let [{name1}, {name2}, ...] .= {expr1}
:let [{name1}, {name2}, ...] += {expr1}
:let [{name1}, {name2}, ...] -= {expr1}
```

LANGUAGE: viml
CODE:
```
:let [a, b; rest] = ["aval", "bval", 3, 4]
```

LANGUAGE: viml
CODE:
```
:let [{name}, ..., ; {lastname}] .= {expr1}
:let [{name}, ..., ; {lastname}] += {expr1}
:let [{name}, ..., ; {lastname}] -= {expr1}
```

----------------------------------------

TITLE: Partial Application (Funcref with Bound Args) in Vimscript
DESCRIPTION: This snippet demonstrates the creation of a Partial, a Funcref with bound arguments and/or a Dictionary, using the `function()` function.  When the Partial is called, the bound arguments and Dictionary are passed to the underlying function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
	let Cb = function('Callback', ['foo'], myDict)
	call Cb('bar')
```

----------------------------------------

TITLE: Creating and Removing Mode-Specific Mappings in Vim
DESCRIPTION: Demonstrates how to define a mapping for all modes and then remove it for specific modes. This example defines 'xx' for all modes, then removes it for operator-pending mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:map    xx something-difficult
:ounmap xx
```

----------------------------------------

TITLE: Example Vimgrep Usage in Vim
DESCRIPTION: This Vim script demonstrates how to use the `vimgrep` command to search for the function `read_file` in all `.c` files. Then subsequently search for the function `msg` in all `.c` files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_37

LANGUAGE: vim
CODE:
```
:vimgrep /\<read_file\>/ *.c
```

LANGUAGE: vim
CODE:
```
:vimgrep /\<msg\>/ *.c
```

----------------------------------------

TITLE: Getting Position in Vim
DESCRIPTION: The getpos() function retrieves the position for a given string expression. It can return cursor position, last line, mark positions, and visible line ranges. Useful for working with marks and Visual mode selections.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_102

LANGUAGE: vim
CODE:
```
getpos({expr})
```

----------------------------------------

TITLE: File Path Expansion with expand()
DESCRIPTION: Examples showing how to use expand() function to handle file paths and modifiers in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_62

LANGUAGE: vim
CODE:
```
let &tags = expand("%:p:h") .. "/tags"
```

LANGUAGE: vim
CODE:
```
let doesntwork = expand("%:h.bak")
```

LANGUAGE: vim
CODE:
```
let doeswork = expand("%:h") .. ".bak"
```

LANGUAGE: vim
CODE:
```
echo expand(expand("<cfile>"))
```

LANGUAGE: vim
CODE:
```
echo expand("**/README")
```

----------------------------------------

TITLE: Defining an Autoload Function in a Subdirectory in Vim
DESCRIPTION: This snippet shows how to define a function in a library script that uses subdirectories with the autoload mechanism in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_58

LANGUAGE: vim
CODE:
```
function netlib#ftp#read(fname)
    "  Read the file fname through ftp
endfunction
```

----------------------------------------

TITLE: Defining Script-Local Mappings Using <SID> in Vim
DESCRIPTION: Example of using <SID> in mappings to create script-specific identifiers. This shows how to map user commands to script-local functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_34

LANGUAGE: vim
CODE:
```
noremap <unique> <script> <Plug>TypecorrAdd;  <SID>Add
noremap <SID>Add  :call <SID>Add(expand("<cword>"), 1)<CR>
```

----------------------------------------

TITLE: Using Magic and Nomagic Patterns in Vim
DESCRIPTION: This snippet demonstrates the use of magic and nomagic prefixes in Vim regex patterns, which control the interpretation of characters in search patterns. The patterns include flags for ignoring case and matching specific Unicode characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
|/\c|\c\c	ignore case, do not use the 'ignorecase' option
|/\C|\C\C	match case, do not use the 'ignorecase' option
|/\Z|\Z\Z	ignore differences in Unicode "combining characters".
			Useful when searching voweled Hebrew or Arabic text.

		magic   nomagic	matches ~
|/\m|\m\m	'magic' on for the following chars in the pattern
|/\M|\M\M	'magic' off for the following chars in the pattern
|/\v|\v\v	the following chars in the pattern are "very magic"
|/\V|\V\V	the following chars in the pattern are "very nomagic"
|/\%#=|   \%#=1   \%#=1	select regexp engine |/zero-width|
```

----------------------------------------

TITLE: Finding Window Number for a Buffer in Neovim using Vim Script
DESCRIPTION: The 'bufwinnr' function behaves similarly to 'bufwinid', returning the window number associated with a given buffer, or -1 if not found.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
bufwinnr({buf})
```

----------------------------------------

TITLE: Setting the Current Line - Lua
DESCRIPTION: Sets the text of the current line in the active buffer. This function is restricted when text lock is active.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_18

LANGUAGE: lua
CODE:
```
nvim_set_current_line({line})
```

----------------------------------------

TITLE: Buffer Attachment Check for LSP Client in Lua
DESCRIPTION: Checks whether a specific buffer is attached to a given LSP client. This utility function takes the buffer handle and client id, returning a boolean indicating the attachment status.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_21

LANGUAGE: Lua
CODE:
```
buf_is_attached({bufnr}, {client_id})              *vim.lsp.buf_is_attached()*
    Parameters: ~
      • {bufnr}      (`integer`) Buffer handle, or 0 for current
      • {client_id}  (`integer`) the client id
```

----------------------------------------

TITLE: Cursor Position Save and Restore in Vim
DESCRIPTION: Example demonstrating how to save and restore cursor position using getcurpos() and setpos() functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_89

LANGUAGE: vim
CODE:
```
let save_cursor = getcurpos()
MoveTheCursorAround
call setpos('.', save_cursor)
```

----------------------------------------

TITLE: Pattern Search with Flags Example
DESCRIPTION: Demonstration of using search() with multiple flags to find specific keywords
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_215

LANGUAGE: vim
CODE:
```
echo search('\<if\|\(else\)\|\(endif\)', 'ncpe')
```

----------------------------------------

TITLE: Formatting an Entire File in Vim
DESCRIPTION: Uses a combination of commands to navigate to the first line (gg), apply the format operator (gq), and move to the last line (G).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
gggqG
```

----------------------------------------

TITLE: Getting Cursor Position in Window in Neovim Lua API
DESCRIPTION: Gets the (1,0)-indexed, buffer-relative cursor position for a given window. Returns a (row, col) tuple. Available since Neovim 0.1.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_75

LANGUAGE: lua
CODE:
```
nvim_win_get_cursor({window})
```

----------------------------------------

TITLE: Wildmenu Control Mapping
DESCRIPTION: Shows how to map Ctrl-J to work like Down arrow in wildmenu mode using conditional mapping.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_283

LANGUAGE: vim
CODE:
```
cnoremap <expr> <C-j> wildmenumode() ? "\<Down>\<Tab>" : "\<c-j>"
```

----------------------------------------

TITLE: Sorting a List in Vim
DESCRIPTION: This snippet shows how to sort a list of items in Vim by utilizing an external 'sort' command. It details selection and sorting methods while ensuring line continuity with backslashes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
/^OBJS
```

LANGUAGE: vim
CODE:
```
j
```

LANGUAGE: vim
CODE:
```
:.,/^$/-1!sort
```

LANGUAGE: vim
CODE:
```
A \<Esc>
```

----------------------------------------

TITLE: Interrupting Script Execution in Vim
DESCRIPTION: Shows how to use the interrupt() function to abort script execution from within a function. This example creates an autocommand that checks filenames before saving and interrupts if a potential typo is detected.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_139

LANGUAGE: vim
CODE:
```
function s:check_typoname(file)
   if fnamemodify(a:file, ':t') == '['
       echomsg 'Maybe typo'
       call interrupt()
   endif
endfunction
au BufWritePre * call s:check_typoname(expand('<amatch>'))
```

----------------------------------------

TITLE: Getting All Environment Variables with uv.os_environ()
DESCRIPTION: Returns a table containing all environment variables as key-value pairs. This function is not thread-safe.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_94

LANGUAGE: lua
CODE:
```
uv.os_environ()
```

----------------------------------------

TITLE: Clearing a List or Dictionary in Vim
DESCRIPTION: Demonstrates how to use the filter() function to remove all items from a list or dictionary, effectively clearing it.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_67

LANGUAGE: vim
CODE:
```
call filter(var, 0)
```

----------------------------------------

TITLE: Various Vim Commands Reference
DESCRIPTION: A collection of various Vim commands for operations like screen display, file information, character inspection, and mode switching.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
CTRL-L        clear and redraw the screen
CTRL-G        show current file name (with path) and cursor position
ga            show ascii value of character under cursor in decimal, hex, and octal
g8            for utf-8 encoding: show byte sequence for character under cursor in hex
g CTRL-G      show cursor column, line, and character position
CTRL-C        during searches: Interrupt the search
<Del>         while entering a count: delete last character
:ve[rsion]    show version information
:norm[al][!] {commands}  execute Normal mode commands
gQ            switch to "Ex" mode

:redir >{file}         redirect messages to {file}
:silent[!] {command}  execute {command} silently
:confirm {command}     quit, write, etc., asking about unsaved changes or read-only files
:browse {command}      open/read/write file, using a file selection dialog
```

----------------------------------------

TITLE: Multi-Window Commands in Vim
DESCRIPTION: Commands for managing multiple windows in Vim, including splitting windows horizontally and vertically, navigating between windows, and adjusting window sizes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
CTRL-W s  or  :split      # split window into two parts
:split {file}             # split window and edit {file} in one of them
:vsplit {file}            # same, but split vertically
:vertical {cmd}           # make {cmd} split vertically
:sf[ind] {file}           # split window, find {file} in 'path' and edit it
:terminal {cmd}           # open a terminal window
CTRL-W ]                 # split window and jump to tag under cursor
CTRL-W f                 # split window and edit file name under the cursor
CTRL-W ^                 # split window and edit alternate file
CTRL-W n  or  :new       # create new empty window
CTRL-W q  or  :q[uit]    # quit editing and close window
CTRL-W c  or  :clo[se]   # make buffer hidden and close window
CTRL-W o  or  :on[ly]    # make current window only one on the screen
CTRL-W j                 # move cursor to window below
CTRL-W k                 # move cursor to window above
CTRL-W CTRL-W            # move cursor to window below (wrap)
CTRL-W W                 # move cursor to window above (wrap)
CTRL-W t                 # move cursor to top window
CTRL-W b                 # move cursor to bottom window
CTRL-W p                 # move cursor to previous active window
CTRL-W r                 # rotate windows downwards
CTRL-W R                 # rotate windows upwards
CTRL-W x                 # exchange current window with next one
CTRL-W =                 # make all windows equal height & width
CTRL-W -                 # decrease current window height
CTRL-W +                 # increase current window height
CTRL-W _                 # set current window height (default: very high)
CTRL-W <                 # decrease current window width
CTRL-W >                 # increase current window width
CTRL-W |                 # set current window width (default: widest possible)
```

----------------------------------------

TITLE: Restricting LSP Formatting by Client Name in Lua
DESCRIPTION: Defines a filter predicate in Neovim to avoid using certain language servers, like `typescript-language-server`, for formatting operations. Applicable for Neovim configurations using LSP.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_38

LANGUAGE: lua
CODE:
```
vim.lsp.buf.format {
  filter = function(client) return client.name ~= "ts_ls" end
}
```

----------------------------------------

TITLE: Custom Completion Function Example - Vim
DESCRIPTION: Example showing how to implement a custom completion function that lists usernames for a Finger command using /etc/passwd data
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_32

LANGUAGE: vim
CODE:
```
:com -complete=custom,ListUsers -nargs=1 Finger !finger <args>
:fun ListUsers(A,L,P)
:    return system("cut -d: -f1 /etc/passwd")
:endfun
```

----------------------------------------

TITLE: Autocommands for Loading C Types Highlighting
DESCRIPTION: Vim autocommands to load the types.vim file when opening C source or header files, applying type highlighting automatically.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_206

LANGUAGE: vim
CODE:
```
" load the types.vim highlighting file, if it exists
autocmd BufRead,BufNewFile *.[ch] let fname = expand('<afile>:p:h') .. '/types.vim'
autocmd BufRead,BufNewFile *.[ch] if filereadable(fname)
autocmd BufRead,BufNewFile *.[ch]   exe 'so ' .. fname
autocmd BufRead,BufNewFile *.[ch] endif
```

----------------------------------------

TITLE: Spawning a Process with Pipe Communication in Lua UV
DESCRIPTION: Demonstrates how to spawn a 'cat' process with stdin, stdout, and stderr pipes. The example shows how to initialize pipes, start the process, read from stdout and stderr, write to stdin, and properly clean up resources when finished.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_22

LANGUAGE: lua
CODE:
```
local stdin = uv.new_pipe()
local stdout = uv.new_pipe()
local stderr = uv.new_pipe()

print("stdin", stdin)
print("stdout", stdout)
print("stderr", stderr)

local handle, pid = uv.spawn("cat", {
  stdio = {stdin, stdout, stderr}
}, function(code, signal) -- on exit
  print("exit code", code)
  print("exit signal", signal)
end)

print("process opened", handle, pid)

uv.read_start(stdout, function(err, data)
  assert(not err, err)
  if data then
    print("stdout chunk", stdout, data)
  else
    print("stdout end", stdout)
  end
end)

uv.read_start(stderr, function(err, data)
  assert(not err, err)
  if data then
    print("stderr chunk", stderr, data)
  else
    print("stderr end", stderr)
  end
end)

uv.write(stdin, "Hello World")

uv.shutdown(stdin, function()
  print("stdin shutdown", stdin)
  uv.close(handle, function()
    print("process closed", handle, pid)
  end)
end)
```

----------------------------------------

TITLE: Setting Indentexpr in Vim
DESCRIPTION: This Vim command sets the 'indentexpr' option to call a custom function for determining indentation. The function 'GetMyIndent()' would need to be defined elsewhere in the Vim configuration to provide the indentation logic.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_34

LANGUAGE: vim
CODE:
```
set indentexpr=GetMyIndent()
```

----------------------------------------

TITLE: Highlighting Debugging Functions in Haskell
DESCRIPTION: This snippet illustrates how to highlight the names of debugging functions in Haskell code.  The 'hs_highlight_debug' variable must be set to 1 in your vimrc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_47

LANGUAGE: vim
CODE:
```
	:let hs_highlight_debug = 1
```

----------------------------------------

TITLE: Creating Floating Window Options in Neovim LSP (Lua)
DESCRIPTION: Creates a table with default options for a floating window. Takes width, height, and optional additional options as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_54

LANGUAGE: lua
CODE:
```
make_floating_popup_options({width}, {height}, {opts})
```

----------------------------------------

TITLE: Defining Signs in Vim
DESCRIPTION: Examples of using sign_define() function to define new signs or modify existing ones in Vim, demonstrating both single sign definition and defining multiple signs at once.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_235

LANGUAGE: vim
CODE:
```
call sign_define("mySign", {
	\ "text" : "=>",
	\ "texthl" : "Error",
	\ "linehl" : "Search"})
```

LANGUAGE: vim
CODE:
```
call sign_define([
	\ {'name' : 'sign1',
	\  'text' : '=>'},
	\ {'name' : 'sign2',
	\  'text' : '!!'}
	\ ])
```

----------------------------------------

TITLE: Using Lists for Strict Type Comparison in Vim
DESCRIPTION: Shows how putting values in lists can be used for more strict type comparison, avoiding automatic conversion.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_26

LANGUAGE: vim
CODE:
```
:let a = 5
:let b = "5"
:echo a == b
```

----------------------------------------

TITLE: Sourcing nosyntax.vim to Disable Syntax
DESCRIPTION: Actual command executed by ':syntax off', which sources the nosyntax.vim file from the $VIMRUNTIME directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_202

LANGUAGE: vim
CODE:
```
:source $VIMRUNTIME/syntax/nosyntax.vim
```

----------------------------------------

TITLE: Iterating Over a Blob - Vim Script
DESCRIPTION: This snippet demonstrates the use of a for loop to iterate through each byte in a Blob and perform operations with it using a callable function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_63

LANGUAGE: vim
CODE:
```
:for byte in 0z112233
:   call Doit(byte)
:endfor
```

----------------------------------------

TITLE: Moving between #ifdef, #else, and #endif (Vim)
DESCRIPTION: This snippet demonstrates using the `%` key to jump between matching preprocessor directives like `#ifdef`, `#else`, and `#endif` in C code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_10

LANGUAGE: c
CODE:
```
"#ifdef USE_POPEN\n    fd = popen(\"ls\", \"r\")\n#else\n    fd = fopen(\"tmp\", \"w\")\n#endif"
```

----------------------------------------

TITLE: Configuring Autocmd for Incsearch Highlight in Vim
DESCRIPTION: This Vim script sets up an autocommand group to automatically enable 'hlsearch' when entering a search command and disable it when leaving. This provides highlighting for all matches during incremental search without keeping 'hlsearch' on permanently.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_33

LANGUAGE: vim
CODE:
```
augroup vimrc-incsearch-highlight
  autocmd!
  autocmd CmdlineEnter /,\? :set hlsearch
  autocmd CmdlineLeave /,\? :set nohlsearch
augroup END
```

----------------------------------------

TITLE: Overriding Default Filetype Plugin Settings in Vim
DESCRIPTION: This example demonstrates how to override a specific setting from the default filetype plugin by placing it in an 'after' directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_44

LANGUAGE: vim
CODE:
```
setlocal textwidth=70
```

----------------------------------------

TITLE: Customizing an Existing Color Scheme in VimL
DESCRIPTION: This example shows how to customize an existing colorscheme by loading it with the runtime command and then overriding specific highlight groups.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
" load the "evening" colorscheme
runtime colors/evening.vim
" change the color of statements
hi Statement ctermfg=Blue guifg=Blue
```

----------------------------------------

TITLE: Retrieving Quickfix List Information in Vim
DESCRIPTION: These examples demonstrate how to use getqflist() with a dictionary argument to retrieve specific information about quickfix lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_105

LANGUAGE: vim
CODE:
```
echo getqflist({'all': 1})
echo getqflist({'nr': 2, 'title': 1})
echo getqflist({'lines' : ["F1:10:L10"]})
```

----------------------------------------

TITLE: Defining a User Command in Vim Plugin
DESCRIPTION: Code to define a custom user command that calls a script-local function, with a check to avoid overriding existing commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_37

LANGUAGE: vim
CODE:
```
if !exists(":Correct")
  command -nargs=1  Correct  :call s:Add(<q-args>, 0)
endif
```

----------------------------------------

TITLE: Removing Multiple Signs with sign_unplacelist in Neovim
DESCRIPTION: Shows how to use the sign_unplacelist function to remove multiple signs from different buffers in a single call. Accepts a list of dictionaries specifying the signs to remove.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_244

LANGUAGE: vim
CODE:
```
" Remove sign with id 10 from buffer a.vim and sign
" with id 20 from buffer b.vim
call sign_unplacelist([
	\ {'id' : 10, 'buffer' : "a.vim"},
	\ {'id' : 20, 'buffer' : 'b.vim'},
	\ ])
```

----------------------------------------

TITLE: Running Health Check Command in Vim
DESCRIPTION: Basic command to run all health checks in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:checkhealth
```

----------------------------------------

TITLE: Deleting a user command in Neovim
DESCRIPTION: This function deletes a global user-defined command in Neovim. The function requires the name of the command to delete.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_45

LANGUAGE: vim
CODE:
```
nvim_del_user_command({name})                        *nvim_del_user_command()*\n    Delete a user-defined command.\n\n    Attributes: ~\n        Since: 0.7.0\n\n    Parameters: ~\n      • {name}  Name of the command to delete.
```

----------------------------------------

TITLE: Setting Shell with Spaces using let-& Syntax in Vim
DESCRIPTION: A more readable way to set the 'shell' option with spaces in the path using the let-& syntax. This approach simplifies the escaping needed for shell paths with spaces.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_61

LANGUAGE: vim
CODE:
```
let &shell='"C:\Program Files\unix\sh.exe" -f'
```

----------------------------------------

TITLE: State Checking Example using state()
DESCRIPTION: Shows how to check Neovim's current state for specific conditions using the state() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_252

LANGUAGE: vim
CODE:
```
if state('s') == ''
   " screen has not scrolled
```

----------------------------------------

TITLE: Creating Async Handle in Lua with libuv
DESCRIPTION: This snippet demonstrates how to create an async handle using libuv in Lua. The async handle allows operations to be performed in a non-blocking manner by running a callback when the async operation is triggered. The `async:send()` method is called to wake up the event loop and execute the callback function. The `async:close()` method is used to close the async handle after the operation completes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_18

LANGUAGE: lua
CODE:
```
local async
async = uv.new_async(function()
  print("async operation ran")
  async:close()
end)

async:send()
```

----------------------------------------

TITLE: Exception Handling with v:exception in Neovim VimL
DESCRIPTION: This snippet demonstrates how to use v:exception to catch and echo an exception in a try-catch block.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
try
  throw "oops"
catch /.*/
  echo "caught " .. v:exception
endtry
```

----------------------------------------

TITLE: Executing Vimscript Function in Neovim
DESCRIPTION: Calls a Vimscript function using 'nvim_call_function', providing support for passing arguments within an array. Errors update 'v:errmsg'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_35

LANGUAGE: Lua
CODE:
```
nvim_call_function\(\{fn\}, \{args\}\)
```

----------------------------------------

TITLE: Recursive directory search using globpath in Vim
DESCRIPTION: Using the '**' pattern with globpath() to recursively search for README.txt files in all directories and subdirectories within the runtimepath.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_116

LANGUAGE: vim
CODE:
```
echo globpath(&rtp, "**/README.txt")
```

----------------------------------------

TITLE: Change Name Format in Vim
DESCRIPTION: This snippet outlines how to change the format of names from 'Last, First' to 'First Last' within a file using Vim's substitute command with backreferences for matched groups.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:%s/\([^,]*\), \(.*\)/\2 \1/
```

----------------------------------------

TITLE: Executing Normal Mode Command to Delete from Cursor to End of Line in Neovim
DESCRIPTION: This snippet demonstrates how to use CTRL-O followed by 'D' to delete from the cursor position to the end of the line while in Insert mode in Neovim. This provides a quick way to modify text without leaving Insert mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_5

LANGUAGE: text
CODE:
```
CTRL-O D
```

----------------------------------------

TITLE: Custom Filetype.vim Configuration
DESCRIPTION: Example of creating a custom filetype.vim file for defining multiple file type detection rules.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
" my filetype file
if exists("did_load_filetypes")
  finish
endif
augroup filetypedetect
  au! BufRead,BufNewFile *.mine		setfiletype mine
  au! BufRead,BufNewFile *.xyz		setfiletype drawing
augroup END
```

----------------------------------------

TITLE: Handling LspProgress event in Vim
DESCRIPTION: This snippet shows how to handle the LspProgress event, which is triggered upon receipt of a progress notification from the server.  It simply redraws the status line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
autocmd LspProgress * redrawstatus
```

----------------------------------------

TITLE: Using CTRL-R for Register Insertion in Neovim Command-line
DESCRIPTION: This snippet explains how to use CTRL-R to insert the contents of registers in Neovim's command-line mode. It includes an example of using the expression register with setcmdpos() to manipulate the cursor position.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_1

LANGUAGE: vimdoc
CODE:
```
<C-R><C-R>=setcmdpos(2)[-1]<CR>
```

----------------------------------------

TITLE: Looping Over Dictionary Keys in Vim
DESCRIPTION: Demonstrates how to loop over all keys in a dictionary using the keys() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_48

LANGUAGE: vim
CODE:
```
:for key in keys(mydict)
:   echo key .. ': ' .. mydict[key]
:endfor
```

----------------------------------------

TITLE: Finally Block Usage in Vim Script
DESCRIPTION: Demonstrates using try-finally for cleanup operations like temporary file handling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_27

LANGUAGE: viml
CODE:
```
:let tmp = tempname()
:try
:   exe ".,$write " .. tmp
:   exe "!filter " .. tmp
:   .,$delete
:   exe "$read " .. tmp
:finally
:   call delete(tmp)
:endtry
```

----------------------------------------

TITLE: Opening Floating Preview Window in Neovim LSP (Lua)
DESCRIPTION: Shows contents in a floating window. Takes content lines, syntax, and optional configuration parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_61

LANGUAGE: lua
CODE:
```
open_floating_preview({contents}, {syntax}, {opts})
```

----------------------------------------

TITLE: Checking if FileType Set - Lua
DESCRIPTION: The did_filetype function verifies if the FileType event has triggered at least once during the execution of autocommands. This can help scripts avoid re-triggering the event unnecessarily for performance improvement.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_50

LANGUAGE: lua
CODE:
```
did_filetype()                                                  *did_filetype()*
		Returns |TRUE| when autocommands are being executed and the
		FileType event has been triggered at least once.  Can be used
		to avoid triggering the FileType event again in the scripts
		that detect the file type. |FileType|
		Returns |FALSE| when `:setf FALLBACK` was used.
		When editing another file, the counter is reset, thus this
		really checks if the FileType event has been triggered for the
		current buffer.  This allows an autocommand that starts
		editing another buffer to set 'filetype' and load a syntax
		file.

		Return: ~
		  (`integer`)
```

----------------------------------------

TITLE: Basic Vim Search Pattern
DESCRIPTION: Demonstrates how to search for the word 'include' in Vim using forward slash command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
/include
```

----------------------------------------

TITLE: Evaluating Vimscript Expression in Neovim
DESCRIPTION: Uses 'nvim_eval' to recursively evaluate a Vimscript expression. Recursive expansion applies to dicts and lists, errors reflect in 'v:errmsg'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_37

LANGUAGE: Lua
CODE:
```
nvim_eval\(\{expr\}\)
```

----------------------------------------

TITLE: Custom Filetype Detection Configuration
DESCRIPTION: Example of creating custom filetype detection rules in a user's ftdetect directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
au BufRead,BufNewFile *.mine		set filetype=mine
```

----------------------------------------

TITLE: Filtering Lines Through External Programs
DESCRIPTION: Demonstrates methods for passing text through external filters to modify content, using various motion and range selectors in Neovim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
!{motion}{filter}
!!{filter}
{Visual}!{filter}
:{range}![!]{filter}
```

----------------------------------------

TITLE: Toggling Diagnostic Virtual Lines
DESCRIPTION: Example of creating a keymap to toggle diagnostic virtual lines display
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_3

LANGUAGE: lua
CODE:
```
vim.keymap.set('n', 'gK', function()
  local new_config = not vim.diagnostic.config().virtual_lines
  vim.diagnostic.config({ virtual_lines = new_config })
end, { desc = 'Toggle diagnostic virtual_lines' })
```

----------------------------------------

TITLE: LineNumber Command Implementation in Vim Script
DESCRIPTION: A practical example showing how to create a :LineNumber command that displays the line number where it was called by using v:throwpoint information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_127

LANGUAGE: vim
CODE:
```
:function! LineNumber()
:    return substitute(v:throwpoint, '.*\D\(\d\+\).*', '\1', "")
:endfunction
:command! LineNumber try | throw "" | catch | echo LineNumber() | endtry
```

----------------------------------------

TITLE: Mapping with Multiple Ex Commands and Line Terminators in Vim
DESCRIPTION: Creates a mapping that executes multiple Ex commands by using <CR> as line terminators. This example lists file details and then displays a message.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
:map  _ls  :!ls -l %:S<CR>:echo "the end"<CR>
```

----------------------------------------

TITLE: Implementing Custom Pre-Compiler Commands for SpotBugs
DESCRIPTION: Defines functions for handling pre-compiler commands with autocmd hooks for both regular and test compilation in SpotBugs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_50

LANGUAGE: vim
CODE:
```
function! GenericPreCompilerCommand(arguments) abort
	if !exists('g:spotbugs_compilation_done')
		doautocmd java_spotbugs_post User
		execute 'make ' . a:arguments
		" only run doautocmd when :make was synchronous
		" see note below
		doautocmd java_spotbugs_post ShellCmdPost " XXX: (a)
		let g:spotbugs_compilation_done = 1
	else
		cc
	endif
endfunction

function! GenericPreCompilerTestCommand(arguments) abort
	if !exists('g:spotbugs_test_compilation_done')
		doautocmd java_spotbugs_post User
		execute 'make ' . a:arguments
		" only run doautocmd when :make was synchronous
		" see note below
		doautocmd java_spotbugs_post ShellCmdPost " XXX: (b)
		let g:spotbugs_test_compilation_done = 1
	else
		cc
	endif
endfunction

let g:spotbugs_properties = {
	\ 'compiler':		'maven',
	\ 'DefaultPreCompilerCommand':
		\ function('GenericPreCompilerCommand'),
	\ 'DefaultPreCompilerTestCommand':
		\ function('GenericPreCompilerTestCommand'),
	\ 'PostCompilerActionExecutor':
		\ function('GenericPostCompilerActionExecutor'),
\ }
```

----------------------------------------

TITLE: Working with exists() Function Examples
DESCRIPTION: Additional examples showing proper and improper usage of the exists() function for checking command existence.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_60

LANGUAGE: vim
CODE:
```
echo exists(":make")
```

LANGUAGE: vim
CODE:
```
echo exists(":make install")
```

LANGUAGE: vim
CODE:
```
echo exists(bufcount)
```

----------------------------------------

TITLE: Trimming Blanks in Vim
DESCRIPTION: This snippet shows how to remove trailing whitespace at the end of each line in a file using Vim's substitute command. It highlights the importance of proper matching for whitespace patterns to clean up text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:%s/\s\+$//
```

LANGUAGE: vim
CODE:
```
/ 
```

----------------------------------------

TITLE: Autocommand Pattern Example 4 in Vimscript
DESCRIPTION: This shows how to use `*` to match part of a path, but not from the root. This will be executed for files like `/tmp/doc/xx.txt` and `/usr/home/piet/doc/yy.txt`.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
 ":autocmd BufRead */doc/*.txt\tset tw=78"
```

----------------------------------------

TITLE: Character Collections in Vim Regular Expressions
DESCRIPTION: This snippet explains how to use character collections in Vim regular expressions. It covers the syntax for defining collections, ranges, and special cases like matching end-of-line within collections.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_28

LANGUAGE: vim
CODE:
```
[]   (with 'nomagic': \[])    */[]* */\[]* */\_[]* */collection* *E76*
\_[]
A collection.  This is a sequence of characters enclosed in square
brackets.  It matches any single character in the collection.
Example     matches ~
[xyz]      any 'x', 'y' or 'z'
[a-zA-Z]$  any alphabetic character at the end of a line
\c[a-z]$   same
[А-яЁё]    Russian alphabet (with utf-8 and cp1251)
```

----------------------------------------

TITLE: Autowrite Configuration in Vim
DESCRIPTION: Commands to enable or disable automatic file saving when switching between files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:set autowrite
:set noautowrite
```

----------------------------------------

TITLE: Alternative includeexpr using tr() in Vim
DESCRIPTION: An alternative way to set the 'includeexpr' option using the tr() function. This achieves the same result as the previous example but avoids the need for escaping backslashes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_31

LANGUAGE: vim
CODE:
```
setlocal includeexpr=tr(v:fname,'.','/')
```

----------------------------------------

TITLE: Handling LspDetach event in Lua
DESCRIPTION: This snippet demonstrates how to handle the LspDetach event, which is triggered before an LSP client detaches from a buffer. It removes the autocommand for formatting the buffer on save, if it exists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_14

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd('LspDetach', {
  callback = function(args)
    -- Get the detaching client
    local client = vim.lsp.get_client_by_id(args.data.client_id)

    -- Remove the autocommand to format the buffer on save, if it exists
    if client:supports_method('textDocument/formatting') then
      vim.api.nvim_clear_autocmds({
        event = 'BufWritePre',
        buffer = args.buf,
      })
    end
  end,
})
```

----------------------------------------

TITLE: Defining Alias for Vim Command in C Shell
DESCRIPTION: This snippet defines an alias `lvim` in a C shell descendant, which executes Vim with a normal mode command to jump to the last cursor position.  The single quotes and double quotes are carefully escaped to be interpreted correctly by the shell.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_13

LANGUAGE: Shell
CODE:
```
alias lvim vim -c '"'normal '"'0'"'
```

----------------------------------------

TITLE: Error Handling with v:errmsg in Neovim VimL
DESCRIPTION: This snippet demonstrates how to use the v:errmsg variable for error handling. It clears the error message, attempts a command silently, and then checks if an error occurred.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
let v:errmsg = ""
silent! next
if v:errmsg != ""
  " ... handle error
```

----------------------------------------

TITLE: Deleting a Buffer in Lua
DESCRIPTION: Example of how to delete a buffer using nvim_buf_delete with the behavior similar to :bdelete command. This involves setting buflisted to false and passing the unload parameter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_54

LANGUAGE: lua
CODE:
```
vim.bo.buflisted = false
vim.api.nvim_buf_delete(0, { unload = true })
```

----------------------------------------

TITLE: Pattern Matching Examples
DESCRIPTION: Examples demonstrating the use of match() function with strings and lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_163

LANGUAGE: vim
CODE:
```
echo match("testing", "ing")	" results in 4
echo match([1, 'x'], '\a')	" results in 1
```

----------------------------------------

TITLE: Restore Cursor Position Autocommand
DESCRIPTION: Autocommand group to restore cursor position when reopening files, with special handling for certain filetypes
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
augroup RestoreCursor
  autocmd!
  autocmd BufReadPre * autocmd FileType <buffer> ++once
    \ let s:line = line("'\"")
    \ | if s:line >= 1 && s:line <= line("$") && &filetype !~# 'commit'
    \      && index(['xxd', 'gitrebase'], &filetype) == -1
    \      && !&diff
    \ |   execute "normal! g`\""
    \ | endif
augroup END
```

----------------------------------------

TITLE: Code Formatting Commands (Vim)
DESCRIPTION: These commands allow formatting Rust code using rustfmt. :RustFmt formats the entire buffer, while :RustFmtRange formats a selected range. They utilize the rustfmt executable specified by g:rustfmt_command and respect the options defined in g:rustfmt_options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_28

LANGUAGE: vim
CODE:
```
:RustFmt                                                       *:RustFmt*
		Runs |g:rustfmt_command| on the current buffer. If
		|g:rustfmt_options| is set then those will be passed to the
		executable.

		If |g:rustfmt_fail_silently| is 0 (the default) then it
		will populate the |location-list| with the errors from
		|g:rustfmt_command|. If |g:rustfmt_fail_silently| is set to 1
		then it will not populate the |location-list|.

:RustFmtRange                                                  *:RustFmtRange*
		Runs |g:rustfmt_command| with selected range. See
		|:RustFmt| for any other information.
```

----------------------------------------

TITLE: Accessing Exception Information in Vim Script
DESCRIPTION: Shows how to use v:exception to access the thrown exception value and v:throwpoint to see where the exception was thrown.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_125

LANGUAGE: vim
CODE:
```
:  catch /^\d\+$/
:    echo "Number thrown.  Value is" v:exception
```

----------------------------------------

TITLE: Enabling Additional Java Syntax Highlighting Features
DESCRIPTION: Configures options for highlighting generics, debug statements, and Javadoc comments in Java code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_65

LANGUAGE: VimScript
CODE:
```
:let g:java_highlight_generics = 1
:let g:java_highlight_debug = 1
:let g:java_ignore_javadoc = 1
:let g:java_ignore_html = 1
:let g:java_ignore_markdown = 1
```

----------------------------------------

TITLE: Getting Extmarks in Buffer Range in Lua
DESCRIPTION: Gets extmarks in 'traversal order' from a charwise region defined by buffer positions. Supports various options for filtering and formatting results.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_63

LANGUAGE: lua
CODE:
```
nvim_buf_get_extmarks({buffer}, {ns_id}, {start}, {end}, {opts})
```

----------------------------------------

TITLE: Operator-pending Mapping to Start Visual Mode in Neovim
DESCRIPTION: This example shows how to use an operator-pending mapping to start Visual mode, allowing the mapping to select text to be operated on. This enables more complex selection logic within operator mappings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
	:omap { w
makes "y{" work like "yw" and "d{" like "dw".

To ignore the starting cursor position and select different text, you can have
the omap start Visual mode to select the text to be operated upon.  Example
that operates on a function name in the current line: >
```

----------------------------------------

TITLE: Explicit Dictionary Binding to Function in Vimscript
DESCRIPTION: This snippet demonstrates how to explicitly bind a function to a dictionary using the `function()` command when creating the Funcref. Even if the Funcref is assigned to another dictionary, it will still be called with the original dictionary bound to it.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
	let myDict.myFunction = function(MyFunction, myDict)
	let otherDict.myFunction = myDict.myFunction
	call otherDict.myFunction()
```

----------------------------------------

TITLE: Horizontal Scrolling in Vim
DESCRIPTION: Commands for scrolling the text horizontally, which only work when 'wrap' is off. Includes zl, zh, zL, zH, zs, and ze commands for moving the view left and right.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
z<Right> or zl  Move view [count] characters right.
z<Left> or zh   Move view [count] characters left.
zL              Move view half screenwidth right.
zH              Move view half screenwidth left.
zs              Scroll to position cursor at start of screen.
ze              Scroll to position cursor at end of screen.
```

----------------------------------------

TITLE: Implementing Synchronous File Reading in Lua with Luv
DESCRIPTION: A function that reads a file synchronously using Luv's file system operations. It opens the file, gets its stats, reads the content, and closes the file, all in a blocking manner.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_44

LANGUAGE: lua
CODE:
```
local function readFileSync(path)
  local fd = assert(uv.fs_open(path, "r", 438))
  local stat = assert(uv.fs_fstat(fd))
  local data = assert(uv.fs_read(fd, stat.size, 0))
  assert(uv.fs_close(fd))
  return data
end

local data = readFileSync("main.lua")
print("synchronous read", data)
```

----------------------------------------

TITLE: Auto-Activating Netrw Directory Browser on Vim Startup
DESCRIPTION: Vim autocmd configuration to automatically open netrw directory browser when starting Vim without specifying a filename.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
" Augroup VimStartup:
augroup VimStartup
  au!
  au VimEnter * if expand("%") == "" | e . | endif
augroup END
```

----------------------------------------

TITLE: Formatting Date and Time in Vim
DESCRIPTION: Illustrates the usage of strftime() function to format dates and times with various format strings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_258

LANGUAGE: vim
CODE:
```
echo strftime("%c")		   " Sun Apr 27 11:49:23 1997
echo strftime("%Y %b %d %X")	   " 1997 Apr 27 11:53:25
echo strftime("%y%m%d %T")	   " 970427 11:53:55
echo strftime("%H:%M")		   " 11:55
echo strftime("%c", getftime("file.c"))
				   " Show mod time of file.c.
```

----------------------------------------

TITLE: Run Lua Scripts with Nvim from Shell
DESCRIPTION: Illustrates running a Lua script 'foo.lua' using Nvim with the '-l' flag, accepting optional arguments. It's a command-line operation requiring Nvim installation and a compatible shell environment. Prints Lua execution results to standard output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_2

LANGUAGE: shell
CODE:
```
nvim -l foo.lua --arg1 --arg2
```

----------------------------------------

TITLE: Mapping Operator-Pending Mode for C Program Block Selection
DESCRIPTION: This mapping defines F7 to select a C program block (text enclosed in curly braces) in operator-pending mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
:omap <F7> a{
```

----------------------------------------

TITLE: Using printf() Function for String Formatting in Vim
DESCRIPTION: Demonstrates how to use printf() to format strings with various placeholders. This example formats line numbers, error codes, and messages with specific alignment and width constraints.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_190

LANGUAGE: vim
CODE:
```
echo printf("%4d: E%d %.30s", lnum, errno, msg)
```

----------------------------------------

TITLE: Using Unicode in the GUI with Vim - Vimscript
DESCRIPTION: This snippet illustrates how to set Vim to use Unicode internally and configure the GUI font for proper display of Unicode characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_2

LANGUAGE: Vim
CODE:
```
:set encoding=utf-8
```

LANGUAGE: Vim
CODE:
```
:set guifont=-misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1
```

LANGUAGE: Vim
CODE:
```
:set guifont=courier_new:h12
```

----------------------------------------

TITLE: Dictionary Reference Behavior in Vim
DESCRIPTION: Demonstrates that dictionaries are passed by reference, with changes affecting all variables referencing the same dictionary.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_52

LANGUAGE: vim
CODE:
```
:let onedict = {'a': 1, 'b': 2}
:let adict = onedict
:let adict['a'] = 11
:echo onedict['a']
```

----------------------------------------

TITLE: Getting User Home Directory with uv.os_homedir()
DESCRIPTION: Returns the path to the current user's home directory. This function is not thread-safe.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_95

LANGUAGE: lua
CODE:
```
uv.os_homedir()
```

----------------------------------------

TITLE: Navigating Through Compilation Errors in Vim
DESCRIPTION: Commands for moving through the error list after compilation, allowing easy navigation between errors for efficient debugging.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:cnext
```

LANGUAGE: vim
CODE:
```
:cc
```

LANGUAGE: vim
CODE:
```
:clist
```

LANGUAGE: vim
CODE:
```
:clist!
```

LANGUAGE: vim
CODE:
```
:cprevious
```

LANGUAGE: vim
CODE:
```
:cfirst
```

LANGUAGE: vim
CODE:
```
:clast
```

LANGUAGE: vim
CODE:
```
:cc 3
```

----------------------------------------

TITLE: Opening URLs and File Paths in Neovim - Vim
DESCRIPTION: This snippet details commands that allow users to open file paths or URLs from Neovim using the system's default handler, via the gx command and its visual mode equivalent. This functionality enhances user productivity by providing easy access to files and links directly from the editor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
gx		Opens the current filepath or URL (decided by |<cfile>|, 'isfname') at cursor using the system default handler, by calling |vim.ui.open()|.
```

LANGUAGE: vim
CODE:
```
{Visual}gx		Opens the selected text using the system default handler, by calling |vim.ui.open()|.
```

----------------------------------------

TITLE: Using the :compiler Command in Vim
DESCRIPTION: Shows the syntax for the :compiler command which sets options to work with a specific compiler. It can be used with or without the ! modifier to set options globally or locally.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_39

LANGUAGE: vim
CODE:
```
:comp[iler][!] {name}
```

----------------------------------------

TITLE: Allowing Hash Operator in Haskell
DESCRIPTION: This snippet configures Haskell syntax highlighting to treat operators starting with '#' as operators rather than errors.  The 'hs_allow_hash_operator' variable must be set to 1 in your vimrc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_48

LANGUAGE: vim
CODE:
```
	:let hs_allow_hash_operator = 1
```

----------------------------------------

TITLE: Using searchpairpos() in Neovim (Vimscript)
DESCRIPTION: This example demonstrates how to use searchpairpos() to find the position of a matching brace pair and store the result in variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_222

LANGUAGE: vim
CODE:
```
let [lnum,col] = searchpairpos('{', '', '}', 'n')
```

----------------------------------------

TITLE: Using getbufline() Function to Retrieve Buffer Lines in Vim Script
DESCRIPTION: Demonstrates how to use the getbufline() function to retrieve lines from a buffer in Vim script. It shows how to specify line ranges and handle special cases like the last line of the buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_82

LANGUAGE: vim
CODE:
```
let lines = getbufline(bufnr("myfile"), 1, "$")
```

----------------------------------------

TITLE: Getting Line Numbers with line() Function in Vim
DESCRIPTION: Examples of using the line() function to get line numbers of cursor position and marks. This demonstrates different ways to reference positions in a buffer, including with a specific window ID.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_153

LANGUAGE: vim
CODE:
```
echo line(".")            " line number of the cursor
echo line(".", winid)        " idem, in window "winid"
echo line("'t")            " line number of mark t
echo line("'" .. marker)    " line number of mark marker
```

----------------------------------------

TITLE: Creating Autocommands with Ex Command in Neovim
DESCRIPTION: Example of creating autocommands in Neovim using an Ex command as the handler. This displays a message when entering C or C++ files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_85

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd({'BufEnter', 'BufWinEnter'}, {
  pattern = {'*.c', '*.h'},
  command = "echo 'Entering a C or C++ file'",
})
```

----------------------------------------

TITLE: Syntax Highlighting Control Commands
DESCRIPTION: Commands to control syntax highlighting behavior including clearing, disabling, and manual mode
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:syntax clear
:syntax off
:syntax manual
:set syntax=ON
```

----------------------------------------

TITLE: Listing Defined Syntax Items in Vim Script
DESCRIPTION: Lists currently defined syntax items and their colors, aiding in debugging and experimenting with syntax files. The command takes an optional group name to list specific syntax groups or clusters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_1

LANGUAGE: Vim Script
CODE:
```
:syntax
:syntax list {group-name}
```

----------------------------------------

TITLE: Basic Help Command Examples
DESCRIPTION: Examples showing basic help command usage for searching and navigating help documentation
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_0

LANGUAGE: vimscript
CODE:
```
:help options
:help z?
:help z.
:help :?
:help cont<Ctrl-D>
```

----------------------------------------

TITLE: Deleting Buffer Lines - Lua
DESCRIPTION: The deletebufline function removes lines from a specified buffer based on given start and end line numbers. If the end line is omitted, only the start line is deleted. It ensures only loaded buffers are affected.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_47

LANGUAGE: lua
CODE:
```
deletebufline({buf}, {first} [, {last}])                       *deletebufline()*
		Delete lines {first} to {last} (inclusive) from buffer {buf}.
		If {last} is omitted then delete line {first} only.
		On success 0 is returned, on failure 1 is returned.

		This function works only for loaded buffers. First call
		|bufload()| if needed.

		For the use of {buf}, see |bufname()| above.

		{first} and {last} are used like with |getline()|. Note that
		when using |line()| this refers to the current buffer. Use "$"
		to refer to the last line in buffer {buf}.

		Parameters: ~
		  • {buf} (`integer|string`)
		  • {first} (`integer|string`)
		  • {last} (`integer|string?`)

		Return: ~
		  (`any`)
```

----------------------------------------

TITLE: Ignoring Specific Events
DESCRIPTION: These snippets configure 'eventignore' to prevent certain events from triggering autocommands, with examples for ignoring window enter and leave events, all events altogether, and resetting to normal.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
:set eventignore=WinEnter,WinLeave
```

LANGUAGE: vim
CODE:
```
:set eventignore=all
```

LANGUAGE: vim
CODE:
```
:set eventignore=
```

----------------------------------------

TITLE: Word Boundary Search
DESCRIPTION: Search patterns using word boundary markers for exact word matches.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
/the\>
/\<the\>
```

----------------------------------------

TITLE: Lambda Expression in Vim Script
DESCRIPTION: Example of using lambda expressions with method chaining.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_80

LANGUAGE: vim
CODE:
```
GetPercentage()->{x -> x * 100}()->printf('%d%%')
```

----------------------------------------

TITLE: For Loop with Destructuring in Vim
DESCRIPTION: Demonstrates how to use destructuring assignment within a for loop when iterating over a list of lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_37

LANGUAGE: vim
CODE:
```
:for [lnum, col] in [[1, 3], [2, 8], [3, 0]]
:   call Doit(lnum, col)
:endfor
```

----------------------------------------

TITLE: Listing LSP Handlers in Neovim
DESCRIPTION: Demonstrates how to list available LSP handlers using Lua print function
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_5

LANGUAGE: lua
CODE:
```
:lua vim.print(vim.tbl_keys(vim.lsp.handlers))
```

----------------------------------------

TITLE: Checking if Buffer is Loaded in Neovim using Vim Script
DESCRIPTION: The 'bufloaded' function checks if a buffer is loaded and returns 1 for loaded buffers and 0 for unloaded ones.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
bufloaded({buf})
```

----------------------------------------

TITLE: Displaying UI Information in Lua
DESCRIPTION: This snippet demonstrates how to check if the TUI (Terminal UI) is running by inspecting the client name of the attached UI. It uses nvim_list_uis and nvim_get_chan_info functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_11

LANGUAGE: lua
CODE:
```
vim.print(vim.api.nvim_get_chan_info(vim.api.nvim_list_uis()[1].chan).client.name)
```

----------------------------------------

TITLE: Configuring Java Syntax Highlighting for Comments and Errors
DESCRIPTION: Sets options for highlighting strings in comments, folding behavior, and marking whitespace errors in Java code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_66

LANGUAGE: VimScript
CODE:
```
:let g:java_comment_strings = 1
:let g:java_foldtext_show_first_or_second_line = 1
:let g:java_space_errors = 1
:let g:java_no_trail_space_error = 1
:let g:java_no_tab_space_error = 1
```

----------------------------------------

TITLE: Defining tcsh-style Editing Keys in Neovim Command-line
DESCRIPTION: This snippet demonstrates how to remap keys for tcsh-style editing in Neovim's command-line mode. It defines common navigation and editing shortcuts using the :cnoremap command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_0

LANGUAGE: vimdoc
CODE:
```
:cnoremap <C-A> <Home>
:cnoremap <C-F> <Right>
:cnoremap <C-B> <Left>
:cnoremap <Esc>b <S-Left>
:cnoremap <Esc>f <S-Right>
```

----------------------------------------

TITLE: Nesting Autocommands in Vim with doautocmd
DESCRIPTION: Example showing how to nest autocommands by using the doautocmd command to apply autocommands from one file type to another.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_28

LANGUAGE: viml
CODE:
```
:au BufEnter *.cpp so ~/.config/nvim/init_cpp.vim
:au BufEnter *.cpp doau BufEnter x.c
```

----------------------------------------

TITLE: Including Specific Syntax Groups for PHP Omni Completion
DESCRIPTION: Configuration to include JavaScript and HTML syntax groups in PHP files for syntax-based Omni completion, using either regex patterns or specific group names.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
let g:omni_syntax_group_include_php = 'php\w\+,javaScript\w\+,html\w\+'
let g:omni_syntax_group_include_php = 'phpFunctions,phpMethods'
```

----------------------------------------

TITLE: Prime Counting using Sieve of Eratosthenes in Lua
DESCRIPTION: An implementation of the Sieve of Eratosthenes algorithm in Lua using the BitOp module to count primes up to a specified number. Demonstrates the use of bitwise operations for manipulating a bit-vector stored in a Lua table.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_4

LANGUAGE: Lua
CODE:
```
local bit = require("bit")
local band, bxor = bit.band, bit.bxor
local rshift, rol = bit.rshift, bit.rol

local m = tonumber(arg and arg[1]) or 100000
if m < 2 then m = 2 end
local count = 0
local p = {}

for i=0,(m+31)/32 do p[i] = -1 end

for i=2,m do
  if band(rshift(p[rshift(i, 5)], i), 1) ~= 0 then
    count = count + 1
    for j=i+i,m,i do
      local jx = rshift(j, 5)
      p[jx] = band(p[jx], rol(-2, j))
    end
  end
end

io.write(string.format("Found %d primes up to %d\n", count, m))

```

----------------------------------------

TITLE: Autocmd configuration for LSP CodeLens refresh
DESCRIPTION: Sets up an autocmd to refresh CodeLens on specific events (BufEnter, CursorHold, InsertLeave) for the current buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_39

LANGUAGE: vim
CODE:
```
autocmd BufEnter,CursorHold,InsertLeave <buffer> lua vim.lsp.codelens.refresh({ bufnr = 0 })
```

----------------------------------------

TITLE: Checking for Vim patches with version comparison in Vim
DESCRIPTION: Complex version checking example using v:version and has("patch") to determine if Vim is at version 6.02 with patch 148 or higher.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_121

LANGUAGE: vim
CODE:
```
if v:version > 602 || v:version == 602 && has("patch148")
  " ...
endif
```

----------------------------------------

TITLE: Increasing window size
DESCRIPTION: Increases the height of the current window by a specified number of lines.  A count can be prepended to increase the height by multiple lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
	CTRL-W +
```

----------------------------------------

TITLE: Appending Diagnostic Messages with Suffix - Lua
DESCRIPTION: Creates a function to format and append a suffix to LSP diagnostic error codes. If the severity of the diagnostic is an error, it formats the message to include 'E:' prefix; otherwise, it returns the message as-is. This function is useful for customizing how diagnostics are displayed in the editor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_8

LANGUAGE: Lua
CODE:
```
function(diagnostic)
    if diagnostic.severity == vim.diagnostic.severity.ERROR then
      return string.format("E: %s", diagnostic.message)
    end
    return diagnostic.message
end
```

----------------------------------------

TITLE: Closing Handles Using uv.walk Example
DESCRIPTION: Example demonstrating how to use uv.walk to iterate through and close all handles that aren't already in a closing state.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_13

LANGUAGE: lua
CODE:
```
uv.walk(function (handle)
  if not handle:is_closing() then
    handle:close()
  end
end)
```

----------------------------------------

TITLE: Vim Module Usage Examples
DESCRIPTION: Collection of examples showing various ways to interact with Vim from Python
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:python from vim import *
:python current.line = str.upper(current.line)
:python print("Hello")
:python str = current.buffer[42]
```

----------------------------------------

TITLE: Configuring ShaDa File Options
DESCRIPTION: Demonstrates how to configure Vim's ShaDa file to save and restore editor state, including marks, registers, and history
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:set shada='1000,f1,<500
```

----------------------------------------

TITLE: Character Range Matching in Vim
DESCRIPTION: Shows how to use character ranges with [] syntax to match specific sets of characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
/[a-z]
/[0123456789abcdef]
/[0-9a-f]
```

----------------------------------------

TITLE: Customizing Java Syntax Highlighting Colors
DESCRIPTION: Demonstrates how to customize colors for nested parentheses and concept kinds in Java syntax highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_67

LANGUAGE: VimScript
CODE:
```
:hi link javaParen Comment
:hi javaParen ctermfg=blue guifg=#0000ff
:hi link javaConceptKind NonText
```

----------------------------------------

TITLE: Handling Terminal Response with Autocommand in Neovim using Lua
DESCRIPTION: This snippet demonstrates how to create an autocommand in Neovim using Lua to handle terminal responses.  It specifically queries the terminal palette for the RGB value of color 1 (red) using OSC 4 and extracts the RGB components from the response.  The autocommand is set to run only once when a 'TermResponse' event is triggered.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_11

LANGUAGE: lua
CODE:
```
"-- Query the terminal palette for the RGB value of color 1
-- (red) using OSC 4
vim.api.nvim_create_autocmd('TermResponse', {
  once = true,
  callback = function(args)
    local resp = args.data.sequence
    local r, g, b = resp:match("\027%]4;1;rgb:(%w+)/(%w+)/(%w+)")
  end,
})
io.stdout:write("\027]4;1;?\027\\")"
```

----------------------------------------

TITLE: Configuring Shada Settings Example in Vim
DESCRIPTION: Example of setting the 'shada' option to control how Neovim stores and retrieves information between sessions. This example configures marks, register contents, skip size limit, command history, and shada file location.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_59

LANGUAGE: vim
CODE:
```
set shada='50,<1000,s100,:0,n~/nvim/shada
```

----------------------------------------

TITLE: Counting Words in Current File using External Command
DESCRIPTION: Pipes the current file content to the Unix 'wc' command to count words, lines, and characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
:write !wc
```

----------------------------------------

TITLE: Next Command with Escaped Spaces
DESCRIPTION: Example showing how to use the next command with filenames containing spaces that need to be escaped.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:next foo\ bar goes\ to school\
```

----------------------------------------

TITLE: Creating Workspace Parameters in Neovim LSP (Lua)
DESCRIPTION: Creates workspace parameters for LSP requests. Takes arrays of added and removed workspace folders as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_60

LANGUAGE: lua
CODE:
```
make_workspace_params({added}, {removed})
```

----------------------------------------

TITLE: Executing Shell Commands from Vim
DESCRIPTION: Shows various methods of executing shell commands and interacting with external programs directly from the Vim editor
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:!ls
:!dir
:r !{program}
:w !{program}
:[range]!{program}
```

----------------------------------------

TITLE: Retrieving Clipboard Content in Vim
DESCRIPTION: This snippet shows how to retrieve the content of the clipboard (system register '*') using the getreg() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_106

LANGUAGE: vim
CODE:
```
let cliptext = getreg('*')
```

----------------------------------------

TITLE: Using printf() with Variable Field Width in Vim
DESCRIPTION: Example of using printf() with an asterisk to specify variable field width and precision. The width parameter controls how many characters from the line are displayed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_192

LANGUAGE: vim
CODE:
```
echo printf("%d: %.*s", nr, width, line)
```

----------------------------------------

TITLE: Visual Area Matching
DESCRIPTION: Describes matching patterns within the Visual area of Vim using '\%V'. These patterns ensure matches stay within a visually selected range.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_18

LANGUAGE: regex
CODE:
```
"\\%V"
```

----------------------------------------

TITLE: Establishing a TCP Connection
DESCRIPTION: Establishes a TCP connection to the specified host and port. A callback function can be provided to handle the result of the connection attempt, enabling error handling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_28

LANGUAGE: lua
CODE:
```
uv.tcp_connect({tcp}, {host}, {port}, {callback})
```

----------------------------------------

TITLE: Job Control Basic Commands
DESCRIPTION: Examples of basic job control commands including sending data to stdin and stopping jobs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:call chansend(job1, "ls\n")
:call chansend(job1, "invalid-command\n")
:call chansend(job1, "exit\n")
:call jobstop(job1)
```

----------------------------------------

TITLE: Setting guifont for Mac OSX in Neovim
DESCRIPTION: Configures the 'guifont' option specifically for Mac OSX, setting the Monaco font with a size of 10 points.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_25

LANGUAGE: viml
CODE:
```
set guifont=Monaco:h10
```

----------------------------------------

TITLE: Accessing Recently Edited Files
DESCRIPTION: Shows how to view and restore recently edited files using Vim's :oldfiles and :browse oldfiles commands
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:oldfiles
:e #<2
:browse oldfiles
```

----------------------------------------

TITLE: Creating Portable Vim Syntax Files
DESCRIPTION: Outlines best practices for creating portable syntax files that can be shared among Vim users. Suggestions include defining unique group names for highlighting, avoiding user preferences in syntax files, and ensuring compatibility across various color schemes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_22

LANGUAGE: Vimscript
CODE:
```
" Vim syntax file
" Language:	C
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last Change:	2001 Jun 18
" Remark:	Included by the C++ syntax.

if exists("b:current_syntax")
  finish
endif

hi def link nameString	String
hi def link nameNumber	Number
hi def link nameCommand	Statement
```

----------------------------------------

TITLE: Preventing Key Mapping Ambiguity in Neovim
DESCRIPTION: This section discusses how ambiguity occurs when two mappings start with the same sequence and offers an example of how it works with the 'aa' mapping. This is important for understanding user-defined key sequences.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:imap aa foo
```

LANGUAGE: vim
CODE:
```
:imap aaa bar
```

----------------------------------------

TITLE: Listing Buffers in Vim
DESCRIPTION: This snippet describes how to list active and inactive buffers using the ':buffers' and ':ls' commands. It presents the structure and details displayed in the buffer list, including buffer numbers and flags.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:buffers
```

LANGUAGE: vim
CODE:
```
:ls
```

----------------------------------------

TITLE: Retrieving Jump List in Vim
DESCRIPTION: The getjumplist() function returns the jump list for a specified window. It can take optional window and tab number arguments. The result is a list containing jump locations and the last used jump position number.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_95

LANGUAGE: vim
CODE:
```
getjumplist([{winnr} [, {tabnr}]])
```

----------------------------------------

TITLE: Word Boundary Matching
DESCRIPTION: Details patterns to match the start ('\\<') and end ('\\>') of words, governed by the 'iskeyword' option in Vim. These patterns are zero-width and facilitate precise word boundary identification.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_15

LANGUAGE: regex
CODE:
```
"\\<"
"\\>"
```

----------------------------------------

TITLE: Implementing Custom Month Completion Function in Vim
DESCRIPTION: This function demonstrates a basic implementation of a custom completion function in Vim for month names. It handles both the initial find start position and the actual completion phases.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
fun! CompleteMonths(findstart, base)
  if a:findstart
    " locate the start of the word
    let line = getline('.')
    let start = col('.') - 1
    while start > 0 && line[start - 1] =~ '\a'
      let start -= 1
    endwhile
    return start
  else
    " find months matching with "a:base"
    let res = []
    for m in split("Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec")
      if m =~ '^' .. a:base
        call add(res, m)
      endif
    endfor
    return res
  endif
endfun
set completefunc=CompleteMonths
```

----------------------------------------

TITLE: Setting Window-Local Syntax in Neovim
DESCRIPTION: Command to set a window-specific syntax highlighting scheme that's separate from other windows displaying the same buffer. Useful for viewing the same file with different highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_207

LANGUAGE: vim
CODE:
```
:ownsyntax foo
```

----------------------------------------

TITLE: Configuring Mouse Behavior
DESCRIPTION: Commands to make the mouse behave similar to Microsoft Windows standards
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
set selection=exclusive
set selectmode=mouse,key
set keymodel=startsel,stopsel
```

----------------------------------------

TITLE: Filtering List Items in Vim
DESCRIPTION: Demonstrates how to use the filter() function to remove items from a list based on a condition. The example removes items containing 'OLD' from mylist.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_65

LANGUAGE: vim
CODE:
```
call filter(mylist, 'v:val !~ "OLD"')
```

----------------------------------------

TITLE: VimLeavePre Autocommand Example in Vimscript
DESCRIPTION: This snippet shows how to define a `VimLeavePre` autocommand to execute a cleanup function before Vim exits. The autocommand is triggered for all files (`*` pattern) and calls the `CleanupStuff()` function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
   ":autocmd VimLeavePre * call CleanupStuff()"
```

----------------------------------------

TITLE: Syntax Highlighting Commands in Vim
DESCRIPTION: Commands for configuring syntax highlighting in Vim, including enabling/disabling syntax highlighting, defining syntax elements, and configuring highlighting groups.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
:syntax on                # start using syntax highlighting
:syntax off               # stop using syntax highlighting
:syntax keyword {group-name} {keyword} ..  # add a syntax keyword item
:syntax match {group-name} {pattern} ...    # add syntax match item
:syntax region {group-name} {pattern} ...   # add syntax region item
:syntax sync [ccomment | lines {N} | ...]  # tell syntax how to sync
:syntax [list]            # list current syntax items
:syntax clear             # clear all syntax info
:highlight clear          # clear all highlight info
:highlight {group-name} {key}={arg} ..     # set highlighting for {group-name}
:filetype on              # switch on file type detection, without syntax highlighting
:filetype plugin indent on # switch on file type detection, with automatic indenting and settings
```

----------------------------------------

TITLE: Filtering Dictionary Items in Vim
DESCRIPTION: Shows how to use the filter() function to remove items from a dictionary based on a key condition. The example removes items with keys below 8 from mydict.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_66

LANGUAGE: vim
CODE:
```
call filter(mydict, 'v:key >= 8')
```

----------------------------------------

TITLE: Conditional Bitwise Operations in Lua
DESCRIPTION: This snippet demonstrates how to correctly handle conditionals when converting C/C++ bitwise operations to Lua, highlighting the need for explicit comparisons with zero. It is crucial to ensure correct boolean handling in Lua, where all numbers except nil and false are truthy.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_5

LANGUAGE: lua
CODE:
```
    if band(x, 3) ~= 0 then ... -- correct!
```

----------------------------------------

TITLE: Setting Marker-based Folding in Vim
DESCRIPTION: Demonstrates how to enable marker-based folding in Vim using the foldmethod option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
:set foldmethod=marker
```

----------------------------------------

TITLE: Creating a buffer-local user command in Neovim
DESCRIPTION: This function creates a user-defined command that is specific to a buffer in Neovim. The command is associated with the given buffer ID. The function requires the buffer ID, the command name, the replacement command, and a dictionary of options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_40

LANGUAGE: vim
CODE:
```
"                                              *nvim_buf_create_user_command()*\nnvim_buf_create_user_command({buffer}, {name}, {command}, {opts})\n    Creates a buffer-local command |user-commands|.\n\n    Attributes: ~\n        Since: 0.7.0\n\n    Parameters: ~\n      • {buffer}   Buffer id, or 0 for current buffer.\n\n    See also: ~\n      • nvim_create_user_command
```

----------------------------------------

TITLE: Complete Info Examples
DESCRIPTION: Shows different ways to use complete_info() function to get information about the current completion state.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_36

LANGUAGE: vim
CODE:
```
" Get all items
call complete_info()
" Get only 'mode'
call complete_info(['mode'])
" Get only 'mode' and 'pum_visible'
call complete_info(['mode', 'pum_visible'])
```

----------------------------------------

TITLE: Directory Change Events in Neovim
DESCRIPTION: Documents directory-related events DirChanged and DirChangedPre that trigger when the current directory changes. Includes scope patterns and event variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
DirChanged
DirChangedPre
```

----------------------------------------

TITLE: Getting global user commands in Neovim
DESCRIPTION: This function retrieves a map of global user-defined commands in Neovim. The function requires optional parameters, currently only supporting {"builtin":false}. The return value is a map of maps describing commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_46

LANGUAGE: vim
CODE:
```
nvim_get_commands({opts})                                *nvim_get_commands()*\n    Gets a map of global (non-buffer-local) Ex commands.\n\n    Currently only |user-commands| are supported, not builtin Ex commands.\n\n    Attributes: ~\n        Since: 0.3.0\n\n    Parameters: ~\n      • {opts}  Optional parameters. Currently only supports {"builtin":false}\n\n    Return: ~\n        Map of maps describing commands.\n\n    See also: ~\n      • |nvim_get_all_options_info()|
```

----------------------------------------

TITLE: Using Wincmd for Window Navigation in Vim
DESCRIPTION: Examples demonstrating the :wincmd command, which allows executing CTRL-W window commands as Ex commands. Useful in situations where Normal mode commands cannot be used.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:wincmd j
```

----------------------------------------

TITLE: Implementing FindGitFiles Function for Vim's findfunc Setting
DESCRIPTION: A Vim function that uses git ls-files to find files in a git repository, filtering results based on the command argument. This function is assigned to the findfunc setting to customize file finding behavior in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
func FindGitFiles(cmdarg, cmdcomplete)
	let fnames = systemlist('git ls-files')
	return fnames->filter('v:val =~? a:cmdarg')
endfunc
set findfunc=FindGitFiles
```

----------------------------------------

TITLE: Character Column Position Example in Vim
DESCRIPTION: Shows the difference between charcol() and col() functions when handling multibyte characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_31

LANGUAGE: vim
CODE:
```
echo charcol('.')	" returns 3
echo col('.')		" returns 7
```

----------------------------------------

TITLE: Getting the Name of a Buffer in Neovim using Vim Script
DESCRIPTION: The 'bufname' function retrieves the name of a specified buffer, returning the current buffer name if no arguments are provided.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
bufname([{buf}])
```

----------------------------------------

TITLE: Changing the file name in Vim
DESCRIPTION: This snippet demonstrates how to change the file name in Vim using the `:saveas` and `:file` commands. `:saveas` saves the current buffer under a new name and continues editing that file. `:file` changes the file name associated with the current buffer without saving it.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
	:edit copy.c
```

LANGUAGE: vim
CODE:
```
	:saveas move.c
```

LANGUAGE: vim
CODE:
```
	:file move.c
```

----------------------------------------

TITLE: Creating Directory Structure for Filetype Plugins in Neovim
DESCRIPTION: Shell command to create the necessary directory structure for custom filetype plugins. Creates the ftplugin directory within the user's Neovim configuration directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
mkdir -p ~/.config/nvim/ftplugin
```

----------------------------------------

TITLE: Binding a TCP Handle
DESCRIPTION: Binds a TCP handle to a specified host and port. This function ensures that a TCP socket can listen for incoming connections. The host can be an IP address, while flags can dictate certain behaviors, such as IPv6 usage.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_25

LANGUAGE: lua
CODE:
```
uv.tcp_bind({tcp}, {host}, {port} [, {flags}])
```

----------------------------------------

TITLE: Creating Directory with Protection Flags in Vim
DESCRIPTION: Example of using mkdir() to create a directory with specific protection flags. Creates a directory in the user's home directory with restricted permissions (0o700).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_178

LANGUAGE: vim
CODE:
```
call mkdir($HOME .. "/tmp/foo/bar", "p", 0o700)
```

----------------------------------------

TITLE: Enabling Automatic Rustfmt Based on Config Presence
DESCRIPTION: Automatically enables rustfmt on save if a rustfmt.toml configuration file is detected in any parent directory of the current file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
let g:rustfmt_autosave_if_config_present = 0
```

----------------------------------------

TITLE: Configuring Errorformat for Ant with Both Javac and Jikes in Vim
DESCRIPTION: Sets properties in an Ant build.xml file to use Jikes compiler with the +E switch for one-line error messages, followed by the Vim errorformat configuration that handles both Javac and Jikes output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_65

LANGUAGE: xml
CODE:
```
<property name = "build.compiler"       value = "jikes"/>
<property name = "build.compiler.emacs" value = "true"/>
```

LANGUAGE: vim
CODE:
```
:set efm=\ %#[javac]\ %#%f:%l:%c:%*\\d:%*\\d:\ %t%[%^:]%#:%m,
	   \%A\ %#[javac]\ %f:%l:\ %m,%-Z\ %#[javac]\ %p^,%-C%.%#
```

----------------------------------------

TITLE: Namespace Naming Example in Lua
DESCRIPTION: Demonstrates the recommended namespace naming convention using the 'nvim.foo.bar' format for creating namespaces in Neovim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_4

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_namespace('nvim.lsp.codelens')
```

----------------------------------------

TITLE: Visual mode mapping with count example
DESCRIPTION: Example of creating a visual mode mapping that uses v:prevcount to access the previous command count
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:vmap % <Esc>:call MyFilter(v:prevcount)<CR>
```

----------------------------------------

TITLE: Setting Wildignore Patterns
DESCRIPTION: Configures file patterns to be ignored during wildcard expansion and file completion, specifically ignoring object files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_82

LANGUAGE: vim
CODE:
```
set wildignore=*.o,*.obj
```

----------------------------------------

TITLE: Overriding LSP Method Handling
DESCRIPTION: Example of requesting a definition from an LSP client directly
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_7

LANGUAGE: lua
CODE:
```
local client = assert(vim.lsp.get_clients()[1])
client:request('textDocument/definition')
```

----------------------------------------

TITLE: Loading a Buffer in Neovim using Vim Script
DESCRIPTION: This function 'bufload' ensures that a specified buffer is loaded, returning to the user to either read from a file if it exists or leave it empty if it does not.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
bufload({buf})
```

----------------------------------------

TITLE: Conditional Statements in Vim Script
DESCRIPTION: Shows the syntax for if-else conditionals in Vim script, including else and elseif clauses. Includes a practical example checking terminal type.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_9

LANGUAGE: viml
CODE:
```
:if &term == "xterm"
:  " Do stuff for xterm
:elseif &term == "vt100"
:  " Do stuff for a vt100 terminal
:else
:  " Do something for other terminals
:endif
```

----------------------------------------

TITLE: VIM Module Usage Examples in Perl
DESCRIPTION: Various examples of using the VIM module to interact with Neovim, including accessing buffers, windows, and evaluating Vim expressions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_perl.txt#2025-04-20_snippet_4

LANGUAGE: perl
CODE:
```
print "Hello"
VIM::Msg("Hello")
VIM::SetOption("ai")
$nbuf = VIM::Buffers()
@buflist = VIM::Buffers()
$mybuf = (VIM::Buffers('a.c'))[0]
@winlist = VIM::Windows()
$nwin = VIM::Windows()
($success, $v) = VIM::Eval('&path')
($success, $v) = VIM::Eval('&xyz')
$v = VIM::Eval('expand("<cfile>")')
$curwin->SetHeight(10)
@pos = $curwin->Cursor()
@pos = (10, 10)
$curwin->Cursor(@pos)
$curwin->Cursor(10,10)
$mybuf = $curwin->Buffer()
$curbuf->Name()
$curbuf->Number()
$curbuf->Count()
$l = $curbuf->Get(10)
@l = $curbuf->Get(1 .. 5)
$curbuf->Delete(10)
$curbuf->Delete(10, 20)
$curbuf->Append(10, "Line")
$curbuf->Append(10, "L1", "L2", "L3")
@l = ("L1", "L2", "L3")
$curbuf->Append(10, @l)
$curbuf->Set(10, "Line")
$curbuf->Set(10, "Line1", "Line2")
$curbuf->Set(10, @l)
```

----------------------------------------

TITLE: Creating Custom Filetype Detection Script
DESCRIPTION: Script to detect filetypes based on file content by checking first line patterns and setting appropriate filetype.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
if did_filetype()
  finish
endif
if getline(1) =~ '^#!.*\<mine\>'
  setfiletype mine
elseif getline(1) =~? '\<drawing\>'
  setfiletype drawing
endif
```

----------------------------------------

TITLE: Lua Yank Ring Implementation
DESCRIPTION: Begins implementation of a yank ring feature that stores yanked text in registers 1-9 using an autocmd for TextYankPost events.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_9

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_autocmd('TextYankPost', {
  callback = function()
    if vim.v.event.operator == 'y' then
```

----------------------------------------

TITLE: Navigating to Last Quickfix Error
DESCRIPTION: Command for displaying the last error in the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
:cla[st][!] [nr]
```

----------------------------------------

TITLE: XML Completion Usage Example in Vim
DESCRIPTION: This Vim example demonstrates how XML completion works with namespaces. It shows how to use the :XMLns command to load data files and connect them with namespaces, as well as how to use XML completion in different scenarios.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
	:XMLns xhtml10s
	:XMLns xsl xsl
```

----------------------------------------

TITLE: Checking Vim compatibility version with has() in Vim
DESCRIPTION: Example of using has() with the patch-x.y.z format to check if Nvim is compatible with Vim version 7.4.237 or later.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_122

LANGUAGE: vim
CODE:
```
if has("patch-7.4.237")
  " ...
endif
```

----------------------------------------

TITLE: Sourcing Vim Script Files in Neovim
DESCRIPTION: Demonstrates how to source Vim script files or Lua code files using the :runtime command. This example sources all plugin files during startup.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:runtime! plugin/**/*.{vim,lua}
```

----------------------------------------

TITLE: Manipulating Window Numbers in Vim
DESCRIPTION: This snippet shows various ways to use the winnr() function to get window numbers, including the current window, last window, and relative window positions. It's useful for scripts that need to navigate between windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_288

LANGUAGE: vim
CODE:
```
let window_count = winnr('$')
let prev_window = winnr('#')
let wnum = winnr('3k')
```

----------------------------------------

TITLE: Setting Cursor Position in Window in Neovim Lua API
DESCRIPTION: Sets the (1,0)-indexed cursor position in the window. This scrolls the window even if it is not the current one. Available since Neovim 0.1.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_77

LANGUAGE: lua
CODE:
```
nvim_win_set_cursor({window}, {pos})
```

----------------------------------------

TITLE: Creating and using pipes with pipe_open in Lua
DESCRIPTION: This snippet demonstrates how to create a pair of connected pipe handles using `uv.pipe` in Lua, open them with `pipe_open`, and then write and read data between them. The `nonblock` flag is set to true for both read and write operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_36

LANGUAGE: lua
CODE:
```
                    -- Simple read/write with pipe_open
                    local fds = uv.pipe({nonblock=true}, {nonblock=true})

                    local read_pipe = uv.new_pipe()
                    read_pipe:open(fds.read)

                    local write_pipe = uv.new_pipe()
                    write_pipe:open(fds.write)

                    write_pipe:write("hello")
                    read_pipe:read_start(function(err, chunk)
                      assert(not err, err)
                      print(chunk)
                    end)
```

----------------------------------------

TITLE: Setting comments option in Vim
DESCRIPTION: This snippet demonstrates how to set the 'comments' option in Vim to define different comment types. The example shows how to include both "-" and "->" as comment leaders using the f flag.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
":set comments=f:->,f:-"
```

----------------------------------------

TITLE: Changing the Global Working Directory - Lua
DESCRIPTION: This function changes the global working directory for Neovim. It requires a valid directory path and does not have any additional constraints.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_17

LANGUAGE: lua
CODE:
```
nvim_set_current_dir({dir})
```

----------------------------------------

TITLE: Filtering Mappings with MultiMatch Pattern
DESCRIPTION: Example demonstrating how to filter mapping list to show all mappings containing 'MultiMatch' in their right-hand side.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_159

LANGUAGE: vim
CODE:
```
echo maplist()->filter({_, m ->
	match(get(m, 'rhs', ''), 'MultiMatch') >= 0
	})
```

----------------------------------------

TITLE: C Code Folding Configuration in VimL
DESCRIPTION: Sets up code folding in C files based on syntax methods, specifically controlling the folding behavior of comments and conditional blocks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_13

LANGUAGE: VimL
CODE:
```
:let c_no_comment_fold = 1
```

LANGUAGE: VimL
CODE:
```
:let c_no_if0_fold = 1
```

----------------------------------------

TITLE: List Item Removal with remove()
DESCRIPTION: Examples of removing items from a list, either single items or ranges
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_206

LANGUAGE: vim
CODE:
```
echo "last item: " .. remove(mylist, -1)
call remove(mylist, 0, 9)
```

----------------------------------------

TITLE: Setting Script Encoding in Vim
DESCRIPTION: The :scriptencoding command specifies the character encoding used in the script, allowing for conversion between different encodings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:scripte[ncoding] [encoding]
```

----------------------------------------

TITLE: Resetting a TCP Connection
DESCRIPTION: Resets a TCP connection by sending a RST packet, effectively closing the connection. This method has certain platform inconsistencies that developers should be aware of.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_29

LANGUAGE: lua
CODE:
```
uv.tcp_close_reset([{callback}])
```

----------------------------------------

TITLE: Creating Sublists in Vimscript
DESCRIPTION: This code demonstrates how to create a sublist from an existing list using the slicing notation `[start:end]`. The `start` index is inclusive, and the `end` index is also inclusive.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
	:let shortlist = mylist[2:-1]	" get List [3, "four"]
```

----------------------------------------

TITLE: Ineffective Catch Order in Vim Script
DESCRIPTION: Example demonstrating why catch patterns should be ordered from specific to general. The first catch with the general pattern will always match, making the second catch unreachable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_124

LANGUAGE: vim
CODE:
```
:  catch /.*/
:    echo "String thrown"
:  catch /^\d\+$/
:    echo "Number thrown"
```

----------------------------------------

TITLE: Configuring Custom Typst Compiler Command Path
DESCRIPTION: Example of setting a custom path to the Typst document compiler command, allowing users to specify an alternative location for the Typst executable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_60

LANGUAGE: vim
CODE:
```
let g:typst_cmd = "/path/to/other/command"
```

----------------------------------------

TITLE: Getting Parent Tree in LanguageTree (Lua)
DESCRIPTION: Returns the parent tree of the current LanguageTree. Returns nil for the root tree.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_36

LANGUAGE: lua
CODE:
```
LanguageTree:parent()
```

----------------------------------------

TITLE: Creating Directory with Recursive Deletion Flag
DESCRIPTION: Example showing mkdir() usage with recursive deletion flag. Creates nested directories that will be scheduled for deletion at the end of the current function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_179

LANGUAGE: vim
CODE:
```
call mkdir('subdir/tmp/autoload', 'pR')
```

----------------------------------------

TITLE: Navigating Command History with Partial Input in Vim
DESCRIPTION: This snippet demonstrates how to use the <Up> key to navigate command history based on the text already typed. Vim filters the history to only show lines that start with the entered text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
	:se<Up>
```

----------------------------------------

TITLE: Configuring C-Style Multi-Part Comments in Vim
DESCRIPTION: Defines three-part C-style comment formatting with /* start, * middle, and */ end patterns. Includes spacing and formatting rules for each part.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
:set comments=s1:/*,mb:*,ex:*/
```

----------------------------------------

TITLE: Loading Vim Package with :packadd Command
DESCRIPTION: The :packadd command loads a single package from the 'packpath' directory, adding it to 'runtimepath' and sourcing plugin files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:packadd[!] {name}
```

----------------------------------------

TITLE: Checking PythonX version in Neovim
DESCRIPTION: Commands to import the sys module and display the Python version information using the PythonX interface.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_12

LANGUAGE: viml
CODE:
```
:pyx import sys
:pyx print(sys.version)
```

----------------------------------------

TITLE: Moving windows up
DESCRIPTION: Moves the current window to the very top, and if the window is vertically split, occupies the full width of the vim window
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
	CTRL-W K
```

----------------------------------------

TITLE: Implementing Auto-Maximize Current Window on Startup in Neovim
DESCRIPTION: This VimL snippet demonstrates how to use the VimEnter event to automatically set winheight to 999 after Vim startup is complete. This effectively makes the current window fill most of the screen while still allowing multiple windows to be created during startup.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_85

LANGUAGE: viml
CODE:
```
au VimEnter * set winheight=999
```

----------------------------------------

TITLE: Restoring Specific View Settings in Vim
DESCRIPTION: This snippet shows how to use winrestview() to restore specific view settings, such as the cursor's desired column position. It's useful for maintaining cursor position after performing operations that might move it.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_290

LANGUAGE: vim
CODE:
```
call winrestview({'curswant': 4})
```

----------------------------------------

TITLE: Getting Number of Filler Lines in Diff - Lua
DESCRIPTION: The diff_filler function returns the count of filler lines above a specific line in a diff'ed window. These lines are used for display purposes and do not exist in the actual buffer, which aids in managing views during diff sessions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_51

LANGUAGE: lua
CODE:
```
diff_filler({lnum})                                              *diff_filler()*
		Returns the number of filler lines above line {lnum}.
		These are the lines that were inserted at this point in
		another diff'ed window.  These filler lines are shown in the
		display but don't exist in the buffer.
		{lnum} is used like with |getline()|.  Thus "." is the current
		line, "'m" mark m, etc.
		Returns 0 if the current window is not in diff mode.

		Parameters: ~
```

----------------------------------------

TITLE: Creating Aggregate Linting Target in CMake
DESCRIPTION: Creates a composite target that depends on all linting targets (C, Lua, and shell scripts), allowing all linting to be run with a single command.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_21

LANGUAGE: cmake
CODE:
```
add_custom_target(lint)
add_dependencies(lint lintc lintlua lintsh)
```

----------------------------------------

TITLE: Implementing custom findfunc using glob() in Vim
DESCRIPTION: Example of a custom findfunc implementation using glob() to find files for the :find command in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_19

LANGUAGE: viml
CODE:
```
func FindFuncGlob(cmdarg, cmdcomplete)
    let pat = a:cmdcomplete ? ${a:cmdarg}* : a:cmdarg
    return glob(pat, v:false, v:true)
endfunc
set findfunc=FindFuncGlob
```

----------------------------------------

TITLE: Building Neovim with Ninja on MSYS2/MinGW
DESCRIPTION: CMake commands to build Neovim on Windows using MSYS2/MinGW toolchain with the Ninja generator, including building dependencies.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_7

LANGUAGE: cmd
CODE:
```
cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo
cmake --build .deps
cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo
cmake --build build
```

----------------------------------------

TITLE: Mouse Event Handling in Neovim JSON
DESCRIPTION: This snippet defines mouse event handling with actions for enabling or disabling mouse support in Neovim. It is particularly useful for embedding applications or terminal UIs where mouse interactions might conflict.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_2

LANGUAGE: json
CODE:
```
["mouse_on"] ~
["mouse_off"] ~
	'mouse' was enabled/disabled in the current editor mode. Useful for
a terminal UI, or embedding into an application where Nvim mouse would
conflict with other usages of the mouse. Other UI:s may ignore this event.
```

----------------------------------------

TITLE: Modifying Dictionary Entries in Vim
DESCRIPTION: Shows how to add or change entries in a dictionary using bracket notation or dot notation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_53

LANGUAGE: vim
CODE:
```
:let dict[4] = "four"
:let dict['one'] = item
```

----------------------------------------

TITLE: Defining Expression Breakpoint
DESCRIPTION: This command sets a breakpoint that triggers whenever the value of the global variable 'g:lnum' changes.  It's a useful way to monitor variables and halt execution when they are modified.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
":breakadd expr g:lnum"
```

----------------------------------------

TITLE: Heredoc String Assignment in Vim
DESCRIPTION: Demonstrates using heredoc-style syntax for multiline string assignment with optional trim and eval modifiers
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_97

LANGUAGE: vim
CODE:
```
let lines =<< trim eval END
  some text
  See the file {$HOME}/.vimrc
  more text
END
```

----------------------------------------

TITLE: Finding Matching Braces with searchpair() in Neovim (Vimscript)
DESCRIPTION: This snippet shows how to use searchpair() to find a matching opening brace for a closing brace, searching backwards and ignoring matches in syntax-highlighted strings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_221

LANGUAGE: vim
CODE:
```
echo searchpair('{', '', '}', 'bW',
     \ 'synIDattr(synID(line("."), col("."), 0), "name") =~? "string"')
```

----------------------------------------

TITLE: Opening Diff Mode from within Vim
DESCRIPTION: Shows how to enter diff mode after already editing a file in Vim. This creates a vertical split and compares the current file with its backup version.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
:edit main.c
:vertical diffsplit main.c~
```

----------------------------------------

TITLE: Moving to Specific Window by Number in Vim
DESCRIPTION: Example showing how to navigate to a specific window by number using the :wincmd command with expression concatenation, useful in scripts or functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:exe nr .. "wincmd w"
```

----------------------------------------

TITLE: Connecting to Nvim with Python using pynvim
DESCRIPTION: A Python example showing how to connect to Nvim using the pynvim package in an interactive REPL session. It demonstrates attaching to a socket and executing a command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
>>> from pynvim import attach
>>> nvim = attach('socket', path='[address]')
>>> nvim.command('echo "hello world!"')
```

----------------------------------------

TITLE: Matching Any Character or Line
DESCRIPTION: Illustrates the use of '.' to match any character excluding end-of-line, and '\_.' to include end-of-line. It warns about the potential of '\_.*' to match until the end of the buffer, potentially leading to unintended matches.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_14

LANGUAGE: regex
CODE:
```
"."
"\\_."
```

----------------------------------------

TITLE: Retrieving Ada Entity Name with ada#Word Function
DESCRIPTION: Function to get the full name of an Ada entity under the cursor or at a given line/column, with whitespace and newlines stripped properly.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
ada#Word([{line}, {col}])
```

----------------------------------------

TITLE: Loading Custom Parser in Lua
DESCRIPTION: Shows how to load a custom parser from a specific filepath using the Treesitter API.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_0

LANGUAGE: lua
CODE:
```
vim.treesitter.language.add('python', { path = "/path/to/python.so" })
```

----------------------------------------

TITLE: Timestamp-based Backup Extension AutoCommand
DESCRIPTION: BufWritePre autocommand that dynamically changes the backup extension to include a timestamp before writing the file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
au BufWritePre * let &bex = '-' .. strftime("%Y%b%d%X") .. '~'
```

----------------------------------------

TITLE: Retrieving Highlight Group Attributes in Vim
DESCRIPTION: Demonstrates how to get information about a highlight group using hlID() and related functions. This example retrieves the background color of the "Comment" highlight group.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_129

LANGUAGE: vim
CODE:
```
echo synIDattr(synIDtrans(hlID("Comment")), "bg")
```

----------------------------------------

TITLE: Example User Autocommand in Vimscript
DESCRIPTION: This example showcases how to create and trigger a custom 'User' autocommand in Vimscript.  The autocommand 'MyPlugin' is defined to echo a message when triggered. The `:doautocmd` command is then used to manually trigger the autocommand.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
    ":autocmd User MyPlugin echom 'got MyPlugin event'\n    :doautocmd User MyPlugin"
```

----------------------------------------

TITLE: Plugin Dependency Example
DESCRIPTION: Example showing how to structure plugins with shared dependencies using autoload functionality.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
pack/foo/start/one/plugin/one.vim
call foolib#getit()

pack/foo/start/two/plugin/two.vim
call foolib#getit()

pack/foo/start/lib/autoload/foolib.vim
func foolib#getit()
```

----------------------------------------

TITLE: Counting Words in Vim
DESCRIPTION: This snippet describes how to count words in a file or a selected range using the 'g CTRL-G' command in Vim, providing statistics about the text being worked on.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
g CTRL-G
```

----------------------------------------

TITLE: LSP RPC Response Error Constructor in Lua
DESCRIPTION: Function to create an RPC response error table with code, message, and optional data.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_64

LANGUAGE: lua
CODE:
```
rpc_response_error(code, message, data)
```

----------------------------------------

TITLE: Help Commands with Pattern Matching
DESCRIPTION: Examples showing advanced help navigation using tags and patterns
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_2

LANGUAGE: vimscript
CODE:
```
:help index
:tselect /.*mode
```

----------------------------------------

TITLE: Configuring Shell Script Indentation in Vim
DESCRIPTION: This snippet details configuring shell script indentation in Vim by setting keys in the 'b:sh_indent_defaults' dictionary. Users can specify indentation amounts for general cases, continuation lines, case labels and statements, providing comprehensive control over shell script formatting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_12

LANGUAGE: VimL
CODE:
```
b:sh_indent_options["default"]
b:sh_indent_options["continuation-line"]
b:sh_indent_options["case-labels"]
b:sh_indent_options["case-statements"]
b:sh_indent_options["case-breaks"]
```

----------------------------------------

TITLE: Environment Check Example in Vim
DESCRIPTION: Shows how to check for existence of environment variables using environ() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_56

LANGUAGE: vim
CODE:
```
echo has_key(environ(), 'HOME')

echo index(keys(environ()), 'HOME', 0, 1) != -1
```

----------------------------------------

TITLE: Measuring Syntax Highlighting Performance
DESCRIPTION: Commands for measuring and analyzing syntax highlighting performance, useful for syntax file authors to identify slow patterns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_209

LANGUAGE: vim
CODE:
```
:syntime on
[ redraw the text at least once with CTRL-L ]
:syntime report
```

----------------------------------------

TITLE: Processing Quickfix List Entries in Vim
DESCRIPTION: This example shows how to iterate through quickfix list entries after running vimgrep, displaying the filename, line number, and text for each match.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_104

LANGUAGE: vim
CODE:
```
vimgrep /theword/jg *.c
for d in getqflist()
   echo bufname(d.bufnr) ':' d.lnum '=' d.text
endfor
```

----------------------------------------

TITLE: Configuring Custom Options for Pylint Python Linter
DESCRIPTION: Example of setting custom parameters for the Pylint Python linter, using the current buffer's textwidth setting to set the maximum line length allowed by the linter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_56

LANGUAGE: vim
CODE:
```
let b:pylint_makeprg_params = "--max-line-length "..&textwidth
```

----------------------------------------

TITLE: Mapping Spacebar to Move Forward a Word
DESCRIPTION: This snippet maps the spacebar to move forward a blank-separated word, demonstrating the use of <Space> in mappings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_6

LANGUAGE: viml
CODE:
```
:map <Space> W
```

----------------------------------------

TITLE: Silent Redirection Example
DESCRIPTION: Shows how to redirect command output to a file silently using :redir and :silent commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
:redir >/tmp/foobar
:silent g/Aap/p
:redir END
```

----------------------------------------

TITLE: Converting SignatureHelp to Markdown in Neovim LSP (Lua)
DESCRIPTION: Converts textDocument/signatureHelp response to markdown lines. Takes signature help object, optional filetype, and optional trigger characters as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_51

LANGUAGE: lua
CODE:
```
convert_signature_help_to_markdown_lines({signature_help}, {ft}, {triggers})
```

----------------------------------------

TITLE: Setting Language for Messages in Vim - Vimscript
DESCRIPTION: This code snippet demonstrates how to check and set the language for messages in Vim. The command ':language' shows the current language, while setting the environment variable LANG changes language before starting Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_0

LANGUAGE: Vim
CODE:
```
:language
```

LANGUAGE: Vim
CODE:
```
env LANG=de_DE.ISO_8859-1  vim
```

LANGUAGE: Vim
CODE:
```
:language fr_FR.ISO_8859-1
```

----------------------------------------

TITLE: Configuring Vim Syntax Region with Skip Pattern
DESCRIPTION: Example showing syntax region definition with start, skip and end patterns using external references
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_169

LANGUAGE: vim
CODE:
```
:syn region foo start="start \z(\I\i*\)" skip="not end \z1" end="end \z1"
```

----------------------------------------

TITLE: Repeating Changes with Visual Mode in Vim
DESCRIPTION: This snippet demonstrates how to use Visual mode and the 'gv' command in Vim to repeat a substitution across a selected range of lines. It illustrates changing specific text occurrences efficiently.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_0

LANGUAGE: Vim
CODE:
```
"Example of changing years in a text block
:s/2001/2002/g
" Now reselect the same text and make the second change
"gv" will select the same area again
:s/2000/2001/g
```

----------------------------------------

TITLE: Configuring PHP Indentation and Formatting in Vim
DESCRIPTION: This section describes various Vim global variables used to control PHP code indentation and formatting. Features include removing carriage returns, extra indentation for comments and default line indentation, aligning PHP escape tags, and configuring behavior for braces and multi-line chained calls. Options allow fine-tuning of PHP code style to achieve desired indentation patterns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_9

LANGUAGE: VimL
CODE:
```
let g:PHP_autoformatcomment = 0
let g:PHP_outdentSLComments = N
let g:PHP_default_indenting = N
let g:PHP_outdentphpescape = 0
let g:PHP_removeCRwhenUnix = 1
let g:PHP_BracesAtCodeLevel = 1
let g:PHP_vintage_case_default_indent = 1
let g:PHP_noArrowMatching = 1
let g:PHP_IndentFunctionCallParameters = 1
let g:PHP_IndentFunctionDeclarationParameters = 1
```

----------------------------------------

TITLE: Setting Syntax in C Files with Modeline
DESCRIPTION: Examples of setting syntax highlighting through modelines in C files, including basic and combined syntax settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_73

LANGUAGE: c
CODE:
```
/* vim: set syntax=idl : */
/* vim: set syntax=c.doxygen : */
```

----------------------------------------

TITLE: Sourcing Other Vim Scripts Relatively
DESCRIPTION: Example of sourcing another Vim script file relative to the current script's location using the <sfile> special string.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:source <sfile>:h/other.vimrc
```

----------------------------------------

TITLE: Formatting Text Using the 'gq' Operator - Vim
DESCRIPTION: Utilizes the 'gq' operator in combination with visual selections to reformat a selected paragraph of text. This is essential for adjusting spacing and improving text alignment within Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
v4jgq
```

LANGUAGE: vim
CODE:
```
gq}
```

LANGUAGE: vim
CODE:
```
gqap
```

LANGUAGE: vim
CODE:
```
gggqG
```

----------------------------------------

TITLE: Setting specific fold level
DESCRIPTION: Sets the fold level to determine which folds are closed. Folds with a level higher than the specified number will be closed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_16

LANGUAGE: vimdoc
CODE:
```
:set foldlevel=3
```

----------------------------------------

TITLE: Limiting Search Range in Vim
DESCRIPTION: This snippet shows how to limit the search command to a certain range of lines in Vim. It uses the \%>l item to match the word 'limit' between lines 199 and 300.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
/\%>199l\%<300llimit
```

----------------------------------------

TITLE: Scrolling Downwards in Vim
DESCRIPTION: Commands to move the edit window downwards in the buffer, showing more lines below. Includes CTRL-E, CTRL-D, PageDown, CTRL-F, and z+ commands with their behaviors.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
CTRL-E          Scroll window [count] lines downwards in the buffer.
CTRL-D          Scroll window Downwards in the buffer.
<S-Down> or <PageDown> or CTRL-F    Scroll window [count] pages Forwards.
z+              Redraw with the line just below the window at the top.
```

----------------------------------------

TITLE: Installing and Configuring Neovim AppImage on Linux
DESCRIPTION: Commands to download, make executable, and configure Neovim AppImage on Linux systems.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_3

LANGUAGE: sh
CODE:
```
./nvim-linux-x86_64.appimage --appimage-extract
./squashfs-root/AppRun --version

# Optional: exposing nvim globally.
sudo mv squashfs-root /
sudo ln -s /squashfs-root/AppRun /usr/bin/nvim
nvim
```

----------------------------------------

TITLE: Setting Background Color Based on Terminal Type
DESCRIPTION: Example of conditionally setting the background color option based on terminal type in Vim configuration.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
if $TERM ==# "xterm"
  set background=dark
endif
```

----------------------------------------

TITLE: Setting Local Scrolloff Values in Vim
DESCRIPTION: Code demonstrating how to reset the scrolloff option to either global value or disable it locally in a window. This controls the minimum number of screen lines kept visible above and below the cursor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_58

LANGUAGE: vim
CODE:
```
setlocal scrolloff<
setlocal scrolloff=-1
```

----------------------------------------

TITLE: Retrieving File Modification Time in Vim
DESCRIPTION: The getftime() function returns the last modification time of a given file as a number of seconds since January 1, 1970. It can be used with strftime() for formatting. Returns -1 if the file is not found.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_93

LANGUAGE: vim
CODE:
```
getftime({fname})
```

----------------------------------------

TITLE: Concealing an entire line with Treesitter
DESCRIPTION: This snippet demonstrates how to conceal an entire line by using the `conceal_lines` metadata. The `(#set! conceal_lines "")` hides the entire line from being drawn, effectively removing it from the view.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
    ((comment) @comment @spell
      (#set! conceal_lines ""))

```

----------------------------------------

TITLE: Documenting Vim Paste Handler
DESCRIPTION: Example of documenting the vim.paste handler function with comprehensive docstring including description, example usage, and parameter documentation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_3

LANGUAGE: lua
CODE:
```
--- Paste handler, invoked by |nvim_paste()| when a conforming UI
--- (such as the |TUI|) pastes text into the editor.
---
--- Example: To remove ANSI color codes when pasting:
---
--- ```lua
--- vim.paste = (function()
---   local overridden = vim.paste
---   ...
--- end)()
--- ```
---
--- @since 12
--- @see |paste|
---
--- @param lines  ...
--- @param phase  ...
--- @returns false if client should cancel the paste.
```

----------------------------------------

TITLE: Using Thesaurus for Completion in Vim - Vimscript
DESCRIPTION: The 'Thesaur' function facilitates word completion based on a thesaurus when the 'thesaurusfunc' option is set in Vim. The function leverages the external tool 'aiksaurus' to generate completion matches. It requires the 'aiksaurus' command to be accessible in the system environment. Input involves specifying the starting point and base word, and it outputs a list of words with similar meanings for completion. The function runs in environments supporting Vim with '+thesaurusfunc'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_4

LANGUAGE: Vimscript
CODE:
```
func Thesaur(findstart, base)
  if a:findstart
    return searchpos('\<', 'bnW', line('.'))[1] - 1
  endif
  let res = []
  let h = ''
  for l in systemlist('aiksaurus ' .. shellescape(a:base))
    if l[:3] == '=== '
      let h = '(' .. substitute(l[4:], ' =*$', ')', '')
    elseif l ==# 'Alphabetically similar known words are: '
      let h = "\U0001f52e"
    elseif l[0] =~ '\a' || (h ==# "\U0001f52e" && l[0] ==# "\t")
      call extend(res, map(split(substitute(l, '^\t', '', ''), ', '), {_, val -> {'word': val, 'menu': h}}))
    endif
  endfor
  return res
endfunc

if exists('+thesaurusfunc')
  set thesaurusfunc=Thesaur
endif
```

----------------------------------------

TITLE: Directory Creation Example with mkdir()
DESCRIPTION: Illustrates the changed behavior of directory creation in Neovim's mkdir() function
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
mkdir('/tmp/foo/bar', 'p', 0700)
```

----------------------------------------

TITLE: String Splitting Examples using split()
DESCRIPTION: Shows different ways to split strings using the split() function, including splitting by whitespace, pattern matching, and character separation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_249

LANGUAGE: vim
CODE:
```
let words = split(getline('.'), '\W\+')

for c in split(mystring, '\zs') | endfor

echo split('abc:def:ghi', ':\zs')

let items = split(line, ':', 1)
```

----------------------------------------

TITLE: Building Neovim without Bundled Dependencies
DESCRIPTION: These commands build Neovim using system-wide dependencies. The `USE_BUNDLED` and `USE_BUNDLED_TS` flags are set to OFF and ON, respectively, during the CMake configuration to control which dependencies are bundled.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_16

LANGUAGE: Shell
CODE:
```
"cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_BUNDLED=OFF -DUSE_BUNDLED_TS=ON\ncmake --build .deps\ncmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build"
```

----------------------------------------

TITLE: Navigating to Location List Error After Cursor Position
DESCRIPTION: Command for going to the error after the current cursor position in the current buffer from the location list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
:[count]laf[ter]
```

----------------------------------------

TITLE: Configuring Specific Language Syntax in Vim
DESCRIPTION: This snippet shows how to customize syntax highlighting for specific languages in Vim. Users can define syntax-related variables in their vimrc files to enable or disable parts of the syntax highlighting. Variables like `abel_obsolete_ok` and `g:asy_syn_plain` control the highlighting behavior for ABEL and Asymptote syntax, respectively.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_7

LANGUAGE: Vim Script
CODE:
```
:let abel_obsolete_ok=1
:unlet abel_obsolete_ok
```

LANGUAGE: Vim Script
CODE:
```
:let g:asy_syn_plain = 1
:let g:asy_syn_three = 1
:let g:asy_syn_texcolors = 1
:let g:asy_syn_x11colors = 1
```

----------------------------------------

TITLE: Notifying LSP Server in Lua
DESCRIPTION: Sends a notification to the LSP server. Requires buffer number, the method name, and parameters to be sent, returning true on success. This is utilized starting from Neovim version 0.5.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_22

LANGUAGE: Lua
CODE:
```
buf_notify({bufnr}, {method}, {params})                 *vim.lsp.buf_notify()*
    Attributes: ~
        Since: 0.5.0

    Parameters: ~
      • {bufnr}   (`integer?`) The number of the buffer
      • {method}  (`string`) Name of the request method
      • {params}  (`any`) Arguments to send to the server

    Return: ~
        (`boolean`) success true if any client returns true; false otherwise
```

----------------------------------------

TITLE: Finding and Editing Include Files in C
DESCRIPTION: Illustrates the use of the 'gf' command to find and edit files such as included headers in C programs. The 'path' option specifies directories for Vim to search for files, supporting both absolute and relative paths to manage file locations effectively.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_2

LANGUAGE: VimScript
CODE:
```
:set path+=c:/prog/include\n:set path+=./proto\n#include "inits.h" ~\ngf
```

----------------------------------------

TITLE: Next Non-Blank Line Check
DESCRIPTION: Example of using nextnonblank() to find the first non-blank line and check if it contains a specific pattern.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_183

LANGUAGE: vim
CODE:
```
if getline(nextnonblank(1)) =~ "Java" | endif
```

----------------------------------------

TITLE: List Unpacking in Vim
DESCRIPTION: Demonstrates how to unpack items from a list into individual variables using square bracket notation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_27

LANGUAGE: vim
CODE:
```
:let [var1, var2] = mylist
```

----------------------------------------

TITLE: Ex Ranges in Vim
DESCRIPTION: Reference for specifying line ranges in Ex commands, including line number specifiers, position markers, pattern references, and arithmetic operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
,               separates two line numbers
;               idem, set cursor to the first line number before interpreting the second one

{number}        an absolute line number
.               the current line
$               the last line in the file
%               equal to 1,$ (the entire file)
*               equal to '<,'> (visual area)
't              position of mark t
/{pattern}[/]   the next line where {pattern} matches
?{pattern}[?]   the previous line where {pattern} matches

+[num]          add [num] to the preceding line number (default: 1)
-[num]          subtract [num] from the preceding line number (default: 1)
```

----------------------------------------

TITLE: SQL Objects Pattern Definition in Vim
DESCRIPTION: Default pattern definition for SQL objects used in navigation, including tables, procedures, events and other database objects with support for existing and temporary tables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_0

LANGUAGE: vimdoc
CODE:
```
let g:ftplugin_sql_objects = 'function,procedure,event,' ..
		\ '\\(existing\\\\|global\\s\\+temporary\\s\\+\\)\\{,1}' ..
		\ 'table,trigger' ..
		\ ',schema,service,publication,database,datatype,domain' ..
		\ ',index,subscription,synchronization,view,variable'
```

----------------------------------------

TITLE: Getting Namespace Properties in Neovim Lua API
DESCRIPTION: Experimental function to get properties for a namespace. Returns a map defining the namespace properties.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_69

LANGUAGE: lua
CODE:
```
nvim__ns_get({ns_id})
```

----------------------------------------

TITLE: Autocommand Group Naming Example in Lua
DESCRIPTION: Shows the recommended autocommand group naming convention using the 'nvim.foo.bar' format
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_5

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_augroup('nvim.treesitter.dev')
```

----------------------------------------

TITLE: Non-Greedy Pattern Matching in Vim
DESCRIPTION: Search patterns that match as few characters as possible using the non-greedy modifier \{-}. These patterns match the minimum required characters rather than the maximum possible.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
/ab\{-1,3}
```

LANGUAGE: vim
CODE:
```
/a.\{-}b
```

LANGUAGE: vim
CODE:
```
/a.*b
```

----------------------------------------

TITLE: Sign Place List Commands in Neovim
DESCRIPTION: Commands for listing placed signs in files and buffers with various group specifications
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_5

LANGUAGE: vimdoc
CODE:
```
:sign place file={fname}
:sign place group={group} file={fname}
:sign place group=* file={fname}
:sign place buffer={nr}
:sign place group={group} buffer={nr}
:sign place group=* buffer={nr}
:sign place
:sign place group={group}
:sign place group=*
```

----------------------------------------

TITLE: Search and Select Next Match in Visual Mode in Neovim
DESCRIPTION: This command searches forward for the last used search pattern and starts Visual mode to select the match. If the cursor is already on a match, it selects that match. If an operator is pending, the operator is applied to the match.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
"gn"
```

----------------------------------------

TITLE: Equivalent While Loop for List Iteration in Vim
DESCRIPTION: Shows the equivalent while loop implementation of iterating through a list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_36

LANGUAGE: vim
CODE:
```
:let index = 0
:while index < len(mylist)
:   let item = mylist[index]
:   :call Doit(item)
:   let index = index + 1
:endwhile
```

----------------------------------------

TITLE: Nested Autocommand Example
DESCRIPTION: Demonstrates how to use nested autocommands with the ++nested flag to allow autocommand nesting for specific file operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_31

LANGUAGE: vim
CODE:
```
:autocmd FileChangedShell *.c ++nested e!
```

----------------------------------------

TITLE: Parsing Vimscript Expression in Neovim
DESCRIPTION: Parses a Vimscript expression with 'nvim_parse_expression', accommodating multiple flags influencing parsing behavior.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_39

LANGUAGE: Lua
CODE:
```
nvim_parse_expression\(\{expr\}, \{flags\}, \{highlight\}\)
```

----------------------------------------

TITLE: Expression Mapping with getchar() in Neovim
DESCRIPTION: This snippet demonstrates how to use `getchar()` within an expression mapping to consume typeahead and dynamically determine the mapping's behavior based on the next character entered.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
  inoremap <expr> <C-L> nr2char(getchar())
  inoremap <expr> <C-L>x "foo"
```

----------------------------------------

TITLE: Using foreach() Function in Vim Script
DESCRIPTION: Demonstrates the foreach() function which iterates over each item in a List, String, Blob, or Dictionary and executes a command for each item. The example shows using v:val to access the current item value.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_77

LANGUAGE: vim
CODE:
```
call foreach(mylist, 'let used[v:val] = v:true')
```

----------------------------------------

TITLE: Customizing Quickfix Window Display with quickfixtextfunc in Vim
DESCRIPTION: Example of using the 'quickfixtextfunc' option to customize how entries are displayed in the quickfix window, specifically showing a simplified file path for a list of old files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_69

LANGUAGE: vim
CODE:
```
" create a quickfix list from v:oldfiles
call setqflist([], ' ', {'lines' : v:oldfiles, 'efm' : '%f',
					\ 'quickfixtextfunc' : 'QfOldFiles'})
func QfOldFiles(info)
	" get information about a range of quickfix entries
	let items = getqflist({'id' : a:info.id, 'items' : 1}).items
	let l = []
	for idx in range(a:info.start_idx - 1, a:info.end_idx - 1)
	    " use the simplified file name
	  call add(l, fnamemodify(bufname(items[idx].bufnr), ':p:.'))
	endfor
	return l
endfunc
```

----------------------------------------

TITLE: Basic Delete Operations in Neovim
DESCRIPTION: Demonstrates using the delete operator 'd' with motion commands like 'w' to delete words and text segments. Shows how the motion determines whether the target character is included.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_04.txt#2025-04-20_snippet_0

LANGUAGE: vimdoc
CODE:
```
To err is human. To really foul up you need a computer.
d4w
To err is human. you need a computer.
```

----------------------------------------

TITLE: Creating Paragraph Folds with Blank Line Separators in Vim
DESCRIPTION: A fold expression that creates folds for paragraphs separated by blank lines. This method detects when a non-blank line follows a blank line to identify the start of a paragraph fold.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set foldexpr=getline(v:lnum)=~'^\s*$'&&getline(v:lnum+1)=~'\S'?'<1':1
```

----------------------------------------

TITLE: Embedding AWK Syntax Highlighting in Shell Scripts
DESCRIPTION: A script to enable AWK syntax highlighting within shell scripts. This allows AWK code in single quotes following the 'awk' command to be highlighted properly.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_127

LANGUAGE: vim
CODE:
```
" AWK Embedding:
" ==============
" Shamelessly ripped from aspperl.vim by Aaron Hope.
if exists("b:current_syntax")
  unlet b:current_syntax
endif
syn include @AWKScript syntax/awk.vim
syn region AWKScriptCode matchgroup=AWKCommand start=+[=\\]\@<!'+ skip=+\\'+ end=+'+ contains=@AWKScript contained
syn region AWKScriptEmbedded matchgroup=AWKCommand start=+\<awk\>+ skip=+\\$+ end=+[=\\]\@<!'+me=e-1 contains=@shIdList,@shExprList2 nextgroup=AWKScriptCode
syn cluster shCommandSubList add=AWKScriptEmbedded
hi def link AWKCommand Type
```

----------------------------------------

TITLE: Conditional Packaging Setup in CMake
DESCRIPTION: Conditionally includes the packaging configuration if this is the top-level CMake project, which helps with generating installation packages.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_28

LANGUAGE: cmake
CODE:
```
if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
  add_subdirectory(cmake.packaging)
endif()
```

----------------------------------------

TITLE: Checking if a Path is Absolute in Vim
DESCRIPTION: Shows how to use the isabsolutepath() function to determine if a path is absolute on both Unix and Windows systems. The function returns 1 for absolute paths and 0 for relative paths.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_141

LANGUAGE: vim
CODE:
```
echo isabsolutepath('/usr/share/')    " 1
echo isabsolutepath('./foobar')        " 0
echo isabsolutepath('C:\Windows')    " 1
echo isabsolutepath('foobar')        " 0
echo isabsolutepath('\\remote\file')    " 1
```

----------------------------------------

TITLE: Creating Dictionaries with Literal Syntax in Vim
DESCRIPTION: Shows the #{} syntax for creating dictionaries without requiring quotes around keys.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_43

LANGUAGE: vim
CODE:
```
:let mydict = #{zero: 0, one_key: 1, two-key: 2, 333: 3}
```

----------------------------------------

TITLE: Configuring SSH and SCP for Windows with Netrw in VimL
DESCRIPTION: This snippet demonstrates how to configure Netrw to use plink, pscp, and psftp for SSH and SCP operations on Windows. It sets up the list command and optionally specifies paths for sftp and scp executables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_52

LANGUAGE: VimL
CODE:
```
" list files, it's the key setting, if you haven't set,
" you will get a blank buffer
let g:netrw_list_cmd = "plink HOSTNAME ls -Fa"
" if you haven't add putty directory in system path, you should
" specify scp/sftp command.  For examples:
"let g:netrw_sftp_cmd = "d:\\dev\\putty\\PSFTP.exe"
"let g:netrw_scp_cmd = "d:\\dev\\putty\\PSCP.exe"
```

----------------------------------------

TITLE: Complex Exception Handling with Function Calls
DESCRIPTION: Demonstrates how exceptions affect function evaluation in complex expressions with multiple function calls.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_121

LANGUAGE: vim
CODE:
```
:function! Foo(arg)
:  try
:    throw a:arg
:  catch /foo/
:  endtry
:  return 1
:endfunction
:
:function! Bar()
:  echo "in Bar"
:  return 4710
:endfunction
:
:throw Foo("arrgh") + Bar()
```

----------------------------------------

TITLE: Implementing File Operations in Neovim with Lua
DESCRIPTION: This snippet demonstrates the use of 'vim.fs.rm()' to delete files and directories, allowing for efficient file management in user scripts and configurations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_7

LANGUAGE: lua
CODE:
```
vim.fs.rm('path/to/file')
```

----------------------------------------

TITLE: Disabling Recommended Rust Style
DESCRIPTION: Disables the recommended Rust styling conventions (4-space indentation and 99-character text width) that are enabled by default.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
let g:rust_recommended_style = 0
```

----------------------------------------

TITLE: Listing Syntax Items in Vim
DESCRIPTION: These commands demonstrate how to list syntax items in Vim. They show how to list all syntax items, items for a specific group, and items in a cluster.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_182

LANGUAGE: viml
CODE:
```
:sy[ntax] [list]

:sy[ntax] list {group-name}

:sy[ntax] list @{cluster-name}
```

----------------------------------------

TITLE: Using Vertical Split with File Example in Vim
DESCRIPTION: This example demonstrates how to use command modifiers to create a vertically split window that occupies the full height of the Vim interface, opening the 'tags' file on the far left.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:vertical topleft split tags
```

----------------------------------------

TITLE: Repeating Global Command with Pattern Matching in Vim
DESCRIPTION: Demonstrates how to use the global command to find lines matching a pattern and execute a command on those lines. In this example, it deletes lines starting with 'Obsolete'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:g/^Obsolete/d _
```

----------------------------------------

TITLE: Removing Signs with sign_unplace in Neovim
DESCRIPTION: Demonstrates various ways to remove signs from buffers using the sign_unplace function in Neovim. Shows examples of removing signs by group, buffer, or ID.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_243

LANGUAGE: vim
CODE:
```
" Remove all the signs in group 'g2' from buffer 10
call sign_unplace('g2', {'buffer' : 10})

" Remove sign 30 in group 'g3' from all the buffers
call sign_unplace('g3', {'id' : 30})

" Remove all the signs placed in buffer 5
call sign_unplace('*', {'buffer' : 5})

" Remove the signs in group 'g4' from all the buffers
call sign_unplace('g4')

" Remove sign 40 from all the buffers
call sign_unplace('*', {'id' : 40})

" Remove all the placed signs from all the buffers
call sign_unplace('*')
```

----------------------------------------

TITLE: Vim Jumplist Example State
DESCRIPTION: Shows the state of a jumplist after three jump commands, displaying the jump number, line number, column number, and file/text information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_6

LANGUAGE: viml
CODE:
```
jump line  col file/text
  3     1    0 some text
  2    70    0 another line
  1  1154   23 end.
 >
```

----------------------------------------

TITLE: Setting Line Continuation Indicators
DESCRIPTION: Configures listchars to show indicators when text extends beyond the visible area or precedes the visible area when wrap is disabled, using '>' and '<' characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_46

LANGUAGE: viml
CODE:
```
set lcs=extends:>,precedes:<
```

----------------------------------------

TITLE: Testing for Buffer-local Autocommands in Vim
DESCRIPTION: Examples showing how to check for the existence of buffer-local autocommands using the exists() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_24

LANGUAGE: viml
CODE:
```
:if exists("#CursorHold#<buffer=12>") | ... | endif
:if exists("#CursorHold#<buffer>") | ... | endif    " for current buffer
```

----------------------------------------

TITLE: Ubuntu/Debian Build Prerequisites
DESCRIPTION: Installs the necessary packages on Ubuntu/Debian systems to build Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_20

LANGUAGE: Shell
CODE:
```
"sudo apt-get install ninja-build gettext cmake curl build-essential"
```

----------------------------------------

TITLE: Removing Placed Signs in Vim Buffers
DESCRIPTION: Examples of using sign_unplace() to remove placed signs from buffers. This function can remove signs based on group, buffer, and sign identifier.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_242

LANGUAGE: vim
CODE:
```
" Remove sign 10 from buffer a.vim
call sign_unplace('', {'buffer' : "a.vim", 'id' : 10})

" Remove sign 20 in group 'g1' from buffer 3
call sign_unplace('g1', {'buffer' : 3, 'id' : 20})
```

----------------------------------------

TITLE: Joining Threads in Lua with Libuv
DESCRIPTION: Waits for the specified thread to finish executing its entry function. Can be used as a method on a thread object.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_65

LANGUAGE: lua
CODE:
```
uv.thread_join({thread})
```

----------------------------------------

TITLE: Navigating to Error After Cursor Position
DESCRIPTION: Command for going to the error after the current cursor position in the current buffer from the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:[count]caf[ter]
```

----------------------------------------

TITLE: Interacting With Environment Variables and Options
DESCRIPTION: Demonstrates accessing environment variables and options within VimL using the $ and & symbols respectively. It highlights how VimL can interact with and manipulate related data. No prerequisites aside from basic VimL syntax understanding.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_7

LANGUAGE: VimL
CODE:
```
:echo "The value of 'tabstop' is" &ts
:echo "Your home directory is" $HOME
```

----------------------------------------

TITLE: Fixing Encoding with QuickFixCmdPost in Vim
DESCRIPTION: This Vim script defines a function `QfMakeConv` to convert the encoding of error messages in the quickfix list from `cp936` to `utf-8`. It then uses the `QuickfixCmdPost` autocommand to automatically call this function after each make command, ensuring correct encoding of error messages.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_32

LANGUAGE: vim
CODE:
```
function QfMakeConv()
   let qflist = getqflist()
   for i in qflist
      let i.text = iconv(i.text, "cp936", "utf-8")
   endfor
   call setqflist(qflist)
endfunction

au QuickfixCmdPost make call QfMakeConv()
```

----------------------------------------

TITLE: Installing Neovim via Scoop on Windows
DESCRIPTION: Commands to install Neovim using the Scoop package manager on Windows.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_0

LANGUAGE: sh
CODE:
```
scoop bucket add main
scoop install neovim
```

----------------------------------------

TITLE: Moving forward to the start of the next function (Vim)
DESCRIPTION: This snippet shows how to move forward to the start of the next function using the `]]` command. The end of a function is defined by a `}` in the first column.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
"]]"
```

----------------------------------------

TITLE: Setting window height
DESCRIPTION: Sets the height of the current window to a specified number of lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
	{height}CTRL-W _
```

----------------------------------------

TITLE: Getting Context from Stack - Lua
DESCRIPTION: The ctxget function retrieves a Dictionary representing the context at the specified index from the top of the context stack. If no index is provided, it defaults to 0, which refers to the top context. This function is useful for accessing the state of the editor at different points.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_38

LANGUAGE: lua
CODE:
```
ctxget([{index}])                                                     *ctxget()*
		Returns a |Dictionary| representing the |context| at {index}
		from the top of the |context-stack| (see |context-dict|).
		If {index} is not given, it is assumed to be 0 (i.e.: top).

		Parameters: ~
		  • {index} (`integer?`)

		Return: ~
		  (`table`)
```

----------------------------------------

TITLE: Evaluating String with Msgpack in Vim
DESCRIPTION: Transforms a string produced by msgpack#string() into a value suitable for msgpackdump(). It manages special values and maintains key order when evaluating maps.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
msgpack#eval({string}, {dict})
```

----------------------------------------

TITLE: Playpen Integration Command (Vim)
DESCRIPTION: The :RustPlay command sends the current selection (or the entire buffer if no selection exists) to the Rust playpen. It depends on the web-api.vim plugin and uses global variables like g:rust_playpen_url, g:rust_shortener_url, and g:rust_clip_command to configure the playpen URL, URL shortener, and clipboard command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_29

LANGUAGE: vim
CODE:
```
:RustPlay                                                          *:RustPlay*
		This command will only work if you have web-api.vim installed
		(available at https://github.com/mattn/webapi-vim).  It sends the
		current selection, or if nothing is selected, the entirety of the
		current buffer to the Rust playpen, and emits a message with the
		shortened URL to the playpen.

		|g:rust_playpen_url| is the base URL to the playpen, by default
		"https://play.rust-lang.org/".

		|g:rust_shortener_url| is the base url for the shorterner, by
		default "https://is.gd/"

		|g:rust_clip_command| is the command to run to copy the
		playpen url to the clipboard of your system.
```

----------------------------------------

TITLE: Force File Encoding When Writing File in Vim
DESCRIPTION: Example of forcing UTF-8 encoding when saving a Russian text file, effectively converting the file encoding.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:write ++enc=utf-8 russian.txt
```

----------------------------------------

TITLE: Using getscriptinfo() to Retrieve Vim Script Information
DESCRIPTION: Example of using getscriptinfo() to retrieve information about loaded Vim scripts. The first example searches for scripts matching a name pattern, while the second retrieves variables from a specific script using its script ID.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_108

LANGUAGE: vim
CODE:
```
echo getscriptinfo({'name': 'myscript'})
echo getscriptinfo({'sid': 15})[0].variables
```

----------------------------------------

TITLE: Creating a fold with the zf operator
DESCRIPTION: Creates a fold around a paragraph using the zf operator with the ap text object selection. This command is used in Normal mode to manually create a fold.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_0

LANGUAGE: vimdoc
CODE:
```
zfap
```

----------------------------------------

TITLE: Adding Items to History in Vim
DESCRIPTION: Demonstrates how to add items to the input history in Vim using histadd(). This example adds the current date to the input history before prompting the user for a date input.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_125

LANGUAGE: vim
CODE:
```
call histadd("input", strftime("%Y %b %d"))
let date=input("Enter date: ")
```

----------------------------------------

TITLE: Creating a New Tab with Split
DESCRIPTION: Demonstrates how to create a new tab page with a split view of the current buffer. This creates a new tab with the same file open.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_28

LANGUAGE: vim
CODE:
```
:tab split
```

----------------------------------------

TITLE: Checking for Null Values in Vim
DESCRIPTION: Example of checking for null values in Vim using the v:null special variable. This is preferred over checking the type for null.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_279

LANGUAGE: vim
CODE:
```
if myvar is v:null | endif
```

----------------------------------------

TITLE: Managing Error Lists in Vim
DESCRIPTION: Commands to navigate between different error lists from previous compilation attempts, allowing review of warnings and errors from earlier builds.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:colder
```

LANGUAGE: vim
CODE:
```
:cnewer
```

----------------------------------------

TITLE: Vim Highlight Command Example (Language Specific)
DESCRIPTION: This snippet demonstrates how to specify language-specific highlight groups in Vim. It shows how to set different foreground colors for comments in C and Lua, and how to link a documentation comment in Java to the String highlight group.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
hi @comment.c guifg=Blue\nhi @comment.lua guifg=DarkBlue\nhi link @comment.documentation.java String
```

----------------------------------------

TITLE: Demonstrating menu_get() in Vim
DESCRIPTION: These examples show how to use the menu_get() function to retrieve information about menus, including retrieving all menus and menus with a specific path.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_175

LANGUAGE: vim
CODE:
```
echo menu_get('File','')
```

LANGUAGE: vim
CODE:
```
echo menu_get('')
```

LANGUAGE: vim
CODE:
```
nnoremenu &Test.Test inormal
inoremenu Test.Test insert
vnoremenu Test.Test x
echo menu_get("")
```

----------------------------------------

TITLE: Test Screen Visualization Setup in Lua
DESCRIPTION: Code to setup screen visualization for debugging functional tests by attaching a screen object that can take snapshots.
SOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_0

LANGUAGE: lua
CODE:
```
local Screen = require('test.functional.ui.screen')
local screen = Screen.new()
screen:attach()
```

----------------------------------------

TITLE: Insert Mode Navigation (Vim)
DESCRIPTION: Navigation and control commands available while in Insert mode, including cursor movement and mode switching.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
<Esc>          end Insert mode, back to Normal mode
CTRL-C          like <Esc>, but do not use abbreviation
CTRL-O {cmd}    execute {cmd} and return to Insert mode
cursor keys     move cursor left/right/up/down
shift-left/right one word left/right
shift-up/down   one screenful backward/forward
<End>           cursor after last character in line
<Home>          cursor to first character in line
```

----------------------------------------

TITLE: Using Vim Modelines (First Form)
DESCRIPTION: Examples of the first form of modelines that can be used to set Vim options within a file. Modelines are special comments that allow configuring editor options on a per-file basis.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
vi:noai:sw=3 ts=6
```

LANGUAGE: viml
CODE:
```
vim: tw=77
```

----------------------------------------

TITLE: Converting Float to Integer in Vim
DESCRIPTION: Demonstrates the use of float2nr() function to convert floating-point numbers to integers by truncating the decimal part. Several examples with different input values are shown.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_72

LANGUAGE: vim
CODE:
```
echo float2nr(3.95)
```

LANGUAGE: vim
CODE:
```
echo float2nr(-23.45)
```

LANGUAGE: vim
CODE:
```
echo float2nr(1.0e100)
```

LANGUAGE: vim
CODE:
```
echo float2nr(-1.0e150)
```

LANGUAGE: vim
CODE:
```
echo float2nr(1.0e-100)
```

----------------------------------------

TITLE: Vim Heredoc Multiple Examples
DESCRIPTION: Multiple examples of heredoc usage including plain text, trimmed data, and evaluated code
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_99

LANGUAGE: vim
CODE:
```
let var1 =<< END
Sample text 1
    Sample text 2
Sample text 3
END

let data =<< trim DATA
		1 2 3 4
		5 6 7 8
DATA

let code =<< trim eval CODE
   let v = {10 + 20}
   let h = "{$HOME}"
   let s = "{Str1()} abc {Str2()}"
   let n = {MyFunc(3, 4)}
CODE
```

----------------------------------------

TITLE: Error Message Viewing Commands
DESCRIPTION: Commands for viewing the last error message and message history in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:echo v:errmsg
:messages
```

----------------------------------------

TITLE: Triggering Autocommands Manually
DESCRIPTION: This snippet is used to manually trigger an autocommand by simulating a BufReadPost event for files ending in '.new'. It uses the ':execute' command to dynamically construct and run the resultant command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
:autocmd BufReadPost *.new  execute "doautocmd BufReadPost " . expand("<afile>:r")
```

----------------------------------------

TITLE: Running Neovim with Development Lua Modules
DESCRIPTION: Command to run Neovim with development Lua modules for testing runtime changes.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_6

LANGUAGE: bash
CODE:
```
VIMRUNTIME=./runtime ./build/bin/nvim --luamod-dev
```

----------------------------------------

TITLE: Simplifying File Paths with simplify in Neovim
DESCRIPTION: Demonstrates the use of the simplify function to reduce file paths to their simplest form without changing their meaning. Does not resolve shortcuts or symbolic links.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_245

LANGUAGE: vim
CODE:
```
simplify("./dir/.././/file/") == "./file/"
```

----------------------------------------

TITLE: Configuring Vim Syntax Sync from Start
DESCRIPTION: Example showing how to configure syntax to always parse from the start of file
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_175

LANGUAGE: vim
CODE:
```
:syntax sync fromstart
```

----------------------------------------

TITLE: Creating a Terminal Highlighter Command in Lua
DESCRIPTION: Implements a custom 'TermHl' command that converts and displays ANSI terminal codes with proper highlighting. This allows using Nvim as a terminal scrollback pager for reviewing and colorizing terminal output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_12

LANGUAGE: lua
CODE:
```
vim.api.nvim_create_user_command('TermHl', function()
  local b = vim.api.nvim_create_buf(false, true)
  local chan = vim.api.nvim_open_term(b, {})
  vim.api.nvim_chan_send(chan, table.concat(vim.api.nvim_buf_get_lines(0, 0, -1, false), '\n'))
  vim.api.nvim_win_set_buf(0, b)
end, { desc = 'Highlights ANSI termcodes in curbuf' })
```

----------------------------------------

TITLE: Checking Window Height in Vim
DESCRIPTION: This example shows how to use the winheight() function to get the height of the current window. It's helpful for scripts that need to adjust layout based on available space.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_286

LANGUAGE: vim
CODE:
```
echo "Current window has " .. winheight(0) .. " lines."
```

----------------------------------------

TITLE: Digraph List Example in Vim
DESCRIPTION: Shows how to retrieve lists of digraphs, both user-defined and all available digraphs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_53

LANGUAGE: vim
CODE:
```
" Get user-defined digraphs
echo digraph_getlist()

" Get all the digraphs, including default digraphs
echo digraph_getlist(1)
```

----------------------------------------

TITLE: Binary File Copy in Vim
DESCRIPTION: Example of copying a file byte by byte using readfile() and writefile() with binary mode flag.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_295

LANGUAGE: vim
CODE:
```
let fl = readfile("foo", "b")
call writefile(fl, "foocopy", "b")
```

----------------------------------------

TITLE: Using strptime() in Vim Script
DESCRIPTION: Demonstrates the usage of strptime() function to parse date and time strings according to a specified format.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_261

LANGUAGE: vim
CODE:
```
echo strptime("%Y %b %d %X", "1997 Apr 27 11:49:23")
```

LANGUAGE: vim
CODE:
```
echo strftime("%c", strptime("%y%m%d %T", "970427 11:53:55"))
```

LANGUAGE: vim
CODE:
```
echo strftime("%c", strptime("%Y%m%d%H%M%S", "19970427115355") + 3600)
```

----------------------------------------

TITLE: Getting Source Content of LanguageTree (Lua)
DESCRIPTION: Returns the source content of the language tree, which can be either a buffer number or a string.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_39

LANGUAGE: lua
CODE:
```
LanguageTree:source()
```

----------------------------------------

TITLE: Using Execute Command with Buffer Navigation
DESCRIPTION: Demonstrates using the :execute command to dynamically select a buffer using a variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_111

LANGUAGE: vim
CODE:
```
:execute "buffer" nextbuf
```

----------------------------------------

TITLE: Defining and Placing a Sign in Vim
DESCRIPTION: Example demonstrating how to define a sign named 'piet' with '>>' text and Search highlighting, then placing it on line 23 of the current file
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:sign define piet text=>> texthl=Search
:exe ":sign place 2 line=23 name=piet file=" .. expand("%:p")
```

----------------------------------------

TITLE: Virtual Column Matching
DESCRIPTION: Includes match patterns specific to virtual columns like '\%23v' and their relational counterparts '\%<23v' and '\%>23v', taking tab stops and window dimensions into account.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_22

LANGUAGE: regex
CODE:
```
"\\%23v"
"\\%<23v"
"\\%>23v"
```

----------------------------------------

TITLE: Starting a Job in a Terminal Buffer in Vim
DESCRIPTION: Shows how to use jobstart() with the term option to spawn a process in a terminal that's connected to the current buffer, providing an interactive terminal interface.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_147

LANGUAGE: vim
CODE:
```
call jobstart(['nvim', '-h'], {'term':v:true})
```

----------------------------------------

TITLE: Setting Keywordprg Option in Vim
DESCRIPTION: Examples of setting the keywordprg option which defines the program used for the K command. Shows how to set it to man pages or Vim's internal help system.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_35

LANGUAGE: vim
CODE:
```
set keywordprg=man\ -s
set keywordprg=:Man
```

----------------------------------------

TITLE: Setting Shell with Spaces in Path in Vim
DESCRIPTION: Example showing how to set the 'shell' option when the shell path contains spaces. This demonstrates the need for escaping quotes and spaces in option values.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_60

LANGUAGE: vim
CODE:
```
set shell=\"c:\program\ files\unix\sh.exe\"\  -f
```

----------------------------------------

TITLE: Getting Effective Shiftwidth in Vim
DESCRIPTION: Example of creating a function to get the effective shiftwidth value in Vim, ensuring backwards compatibility with indent plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_234

LANGUAGE: vim
CODE:
```
if exists('*shiftwidth')
  func s:sw()
    return shiftwidth()
  endfunc
else
  func s:sw()
    return &sw
  endfunc
endif
```

----------------------------------------

TITLE: Getting Network Interface Information with uv.interface_addresses()
DESCRIPTION: Returns a table containing information about all network interfaces on the system, including IP addresses, address family, netmask, internal flag, and MAC address.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_85

LANGUAGE: lua
CODE:
```
uv.interface_addresses()
```

----------------------------------------

TITLE: Jumping to the start of the outer code block (Vim)
DESCRIPTION: This snippet shows how to move to the start of the outer code block using the `[[` command, assuming that the `{` and `}` are in the first column.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
"[["
```

----------------------------------------

TITLE: Getting Resource Usage Information with LibUV in Lua
DESCRIPTION: Functions for retrieving detailed resource usage statistics for the current process or thread, including CPU time, memory usage, and context switch information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_78

LANGUAGE: lua
CODE:
```
uv.getrusage()                                                  *uv.getrusage()*
```

LANGUAGE: lua
CODE:
```
uv.getrusage_thread()                                    *uv.getrusage_thread()*
```

----------------------------------------

TITLE: Customizing HTML Indentation Styles
DESCRIPTION: This snippet details the configuration of indentation settings for HTML tags within Vim. It allows setting indent levels for script and style blocks as well as for HTML attributes, enhancing readability and maintainability of HTML code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_5

LANGUAGE: Vim
CODE:
```
:let g:html_indent_script1 = "inc"
:let g:html_indent_style1 = "inc"
:let g:html_indent_attribute = 1
```

----------------------------------------

TITLE: Closing the preview window (Vim)
DESCRIPTION: This snippet demonstrates how to close the preview window in Vim using the `:pclose` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
":pclose"
```

----------------------------------------

TITLE: List Concatenation in Vim
DESCRIPTION: Demonstrates how to add items to a list in-place using the += operator for list concatenation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_31

LANGUAGE: vim
CODE:
```
:let listA = [1, 2]
:let listA += [3, 4]
```

----------------------------------------

TITLE: Setting Keyword Options in Neovim (Vim)
DESCRIPTION: This snippet shows how to configure the 'iskeyword' option in Neovim, allowing specific characters to be part of words. It illustrates adding a dash and removing an underscore to the keyword list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:set iskeyword
<	iskeyword=@,48-57,_,192-255 ~
```

LANGUAGE: vim
CODE:
```
:set iskeyword+=-
:set iskeyword
<	iskeyword=@,48-57,_,192-255,- ~
```

LANGUAGE: vim
CODE:
```
:set iskeyword-=_
:set iskeyword
<	iskeyword=@,48-57,192-255,- ~
```

----------------------------------------

TITLE: Enabling Mouse Support in Normal and Visual Modes in Neovim
DESCRIPTION: Example of configuring the 'mouse' option to enable mouse support specifically for Normal mode and Visual mode in Neovim. This allows using the mouse for cursor positioning and text selection in these modes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_53

LANGUAGE: vim
CODE:
```
set mouse=nv
```

----------------------------------------

TITLE: Mouse Position Handling Example - Vim
DESCRIPTION: Shows how to handle mouse click events using getchar() and position the cursor accordingly using mouse position variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_84

LANGUAGE: vim
CODE:
```
let c = getchar()
if c == "\<LeftMouse>" && v:mouse_win > 0
  exe v:mouse_win .. "wincmd w"
  exe v:mouse_lnum
  exe "normal " .. v:mouse_col .. "|"
endif
```

----------------------------------------

TITLE: Basic Python Print Command in Vim
DESCRIPTION: Simple example showing how to execute a Python print statement from within Vim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:python print("Hello")
```

----------------------------------------

TITLE: Summing List Numbers in Vim
DESCRIPTION: Shows a technique to sum all numbers in a list by joining them with '+' and evaluating the expression.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_41

LANGUAGE: vim
CODE:
```
:exe 'let sum = ' .. join(nrlist, '+')
```

----------------------------------------

TITLE: Writing Files with Append Mode in Vim
DESCRIPTION: Demonstrates using writefile() function with append mode flag to add lines to a log file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_293

LANGUAGE: vim
CODE:
```
call writefile(["foo"], "event.log", "a")
call writefile(["bar"], "event.log", "a")
```

----------------------------------------

TITLE: Configuring Syntastic with Cargo Check (Vim)
DESCRIPTION: These global (g:) and buffer-local (b:) variables configure the Syntastic plugin to include examples, tests, and benches when running cargo check. Setting these options to 1 ensures that Syntastic lints code in the specified directories.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
	                                                 *g:rust_cargo_check_examples*
                                                 *b:rust_cargo_check_examples*
g:rust_cargo_check_examples ~
	When set to 1, the `--examples` option will be passed to cargo when
	Syntastic executes it, to prevent the exclusion of examples from
	linting. The examples are normally under the `examples/` directory of
	the crate.
	The default is 0.

                                                    *g:rust_cargo_check_tests*
                                                    *b:rust_cargo_check_tests*
g:rust_cargo_check_tests ~
	When set to 1, the `--tests` option will be passed to cargo when
	Syntastic executes it, to prevent the exclusion of tests from linting.
	The tests are normally under the `tests/` directory of the crate.
	The default is 0.

                                                  *g:rust_cargo_check_benches*
                                                  *b:rust_cargo_check_benches*
g:rust_cargo_check_benches ~
	When set to 1, the `--benches` option will be passed to cargo when
	Syntastic executes it.  The benches are normally under the `benches/`
	directory of the crate.
	The default is 0.
```

----------------------------------------

TITLE: Converting File Format in Vim
DESCRIPTION: This command sets the 'fileformat' option to 'unix', converting the file to Unix format. Followed by the ':write' command, the file will be saved in the specified format. This provides a way to convert between file formats (e.g., from DOS to Unix) directly within Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
	:set fileformat=unix
	:write
```

----------------------------------------

TITLE: Checking Variable Existence with exists()
DESCRIPTION: Examples demonstrating how to check for existence of various Vim entities like variables, functions, commands and autocommands using the exists() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_59

LANGUAGE: vim
CODE:
```
echo exists("&mouse")
echo exists("$HOSTNAME")
echo exists("*strftime")
echo exists("*s:MyFunc")
echo exists("*MyFunc")
echo exists("*v:lua.Func")
echo exists("bufcount")
echo exists(":Make")
echo exists("#CursorHold")
echo exists("#BufReadPre#*.gz")
echo exists("#filetypeindent")
echo exists("#filetypeindent#FileType")
echo exists("#filetypeindent#FileType#*")
echo exists("##ColorScheme")
```

----------------------------------------

TITLE: Retrieving Location List in Vim
DESCRIPTION: The getloclist() function returns the location list for a specified window. It can take an optional dictionary argument to filter the returned information. Similar to getqflist() but for location lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_97

LANGUAGE: vim
CODE:
```
echo getloclist(3, {'all': 0})
echo getloclist(5, {'filewinid': 0})
```

----------------------------------------

TITLE: Jumping to the start of the current code block (Vim)
DESCRIPTION: This snippet shows how to move to the start of the current block using the `[{` command. It skips over pairs of {} at the same level.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
"[{"
```

----------------------------------------

TITLE: Additional C Syntax Highlighting using cCommentGroup
DESCRIPTION: Defines additional syntax highlighting for C comments by leveraging custom clusters, enabling users to add keywords dynamically within comments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_12

LANGUAGE: VimL
CODE:
```
:au Syntax c call MyCadd()
:function MyCadd()
:  syn keyword cMyItem contained Ni
:  syn cluster cCommentGroup add=cMyItem
:  hi link cMyItem Title
:endfun
```

----------------------------------------

TITLE: Setting formatoptions in Neovim
DESCRIPTION: Configures the 'formatoptions' option to control automatic text formatting behavior. The default value is 'tcqj'. Users can modify this option using the += and -= features of :set to add or remove flags.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_21

LANGUAGE: viml
CODE:
```
set formatoptions=tcqj
```

----------------------------------------

TITLE: Deleting History Items in Vim
DESCRIPTION: Shows various ways to delete history items using histdel(). Examples include clearing the entire expression history, removing items matching a pattern, and deleting the most recent search history entry.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_126

LANGUAGE: vim
CODE:
```
call histdel("expr")
```

LANGUAGE: vim
CODE:
```
call histdel("/", '^\*')
```

LANGUAGE: vim
CODE:
```
call histdel("search", histnr("search"))
call histdel("search", -1)
call histdel("search", '^' .. histget("search", -1) .. '$')
```

LANGUAGE: vim
CODE:
```
call histdel("search", -1)
let @/ = histget("search", -1)
```

----------------------------------------

TITLE: Debugging Program Process - Lua
DESCRIPTION: The debugbreak function interrupts a running program identified by its process id (pid). When called, it sends a SIGTRAP to the specified process, effectively allowing control during debugging sessions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_44

LANGUAGE: lua
CODE:
```
debugbreak({pid})                                                 *debugbreak()*
		Specifically used to interrupt a program being debugged.  It
		will cause process {pid} to get a SIGTRAP.  Behavior for other
		processes is undefined. See |terminal-debug|.
		(Sends a SIGINT to a process {pid} other than MS-Windows)

		Returns |TRUE| if successfully interrupted the program.
		Otherwise returns |FALSE|.

		Parameters: ~
		  • {pid} (`integer`)

		Return: ~
		  (`any`)
```

----------------------------------------

TITLE: Blob Operations in Vim Script
DESCRIPTION: Examples of blob slicing and copying operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_77

LANGUAGE: vim
CODE:
```
:let b = 0zDEADBEEF\n:let bs = b[1:2]\n:let bs = b[]
```

----------------------------------------

TITLE: Custom Format Function Implementation
DESCRIPTION: Implementation of a custom formatting function that removes trailing whitespace from selected text. Used with formatexpr option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
func! format#Format()
  " only reformat on explicit gq command
  if mode() != 'n'
    " fall back to Vim's internal reformatting
    return 1
  endif
  let lines = getline(v:lnum, v:lnum + v:count - 1)
  call map(lines, {key, val -> substitute(val, '\s\+$', '', 'g')})
  call setline('.', lines)

  " do not run internal formatter!
  return 0
endfunc
```

----------------------------------------

TITLE: Copying text from one file to another in Vim
DESCRIPTION: This snippet outlines how to copy text from one file to another within Vim. It demonstrates using visual mode ('v'), movement commands, and the 'y' (yank) command to copy text, and the 'p' command to paste it into another file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
	:edit thisfile
	/This
	vjjjj$y
```

LANGUAGE: vim
CODE:
```
	:edit otherfile
	/There
	p
```

----------------------------------------

TITLE: Defining Custom Netrw Tree Squeeze Mapping in Vim
DESCRIPTION: This snippet shows how to create a custom key mapping to squeeze (close) the current directory in Netrw's tree listing mode. It should be placed in the user's Netrw-specific ftplugin file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
nmap <buffer> <silent> <nowait> YOURKEYCOMBO  <Plug>NetrwTreeSqueeze
```

----------------------------------------

TITLE: Setting Line Continuation Pattern for Syntax Sync in Vim
DESCRIPTION: This code shows how to set a line continuation pattern for syntax syncing in Vim. It uses the 'linecont' argument to specify a pattern that indicates line continuation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_179

LANGUAGE: viml
CODE:
```
:syntax sync linecont {pattern}
```

----------------------------------------

TITLE: Counting Lines for Range Specification in Vim Script
DESCRIPTION: Defines the use of numeric input to specify a range of lines from the current line downward, allowing efficient line-based command application. The range command starts from the current line extending to four lines below. Inputs include numeric line count commands, and outputs are the commands applied within the specified range.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_5

LANGUAGE: Vim Script
CODE:
```

  :.,.+4
```

----------------------------------------

TITLE: Setting Wildchar Completion Key
DESCRIPTION: Demonstrates different ways to set the wildchar key for command-line completion, including using numeric value, character, control key notation, and special key notation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_80

LANGUAGE: vim
CODE:
```
:set wc=27
:set wc=X
:set wc=^I
set wc=<Tab>
```

----------------------------------------

TITLE: Reading Stream Data with uv.read_start in Lua
DESCRIPTION: Shows how to read data from an incoming stream using read_start method. The callback will be called repeatedly until there is no more data or read_stop is called. When EOF is reached, data will be nil.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_24

LANGUAGE: lua
CODE:
```
stream:read_start(function (err, chunk)
  if err then
    -- handle read error
  elseif chunk then
    -- handle data
  else
    -- handle disconnect
  end
end)
```

----------------------------------------

TITLE: Converting Hex Dump Back to Binary using xxd
DESCRIPTION: This command pipes the current buffer through 'xxd -r', converting the hexadecimal dump back into the original binary format. It's used after editing a file that was previously converted to a hex dump using ':%!xxd'.  Only changes made to the hex part are applied.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
	:%!xxd -r
```

----------------------------------------

TITLE: Executing Normal Mode Commands in Autocommand
DESCRIPTION: The snippet demonstrates executing normal mode commands during an autocommand triggered by the BufReadPost event for '.log' files. It moves the cursor to the last line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
:autocmd BufReadPost *.log normal G
```

----------------------------------------

TITLE: Conditional Python Script Execution
DESCRIPTION: Example showing how to conditionally execute Python code based on Python support
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
if has('python')
  python << EOF
    print("python works")
EOF
endif
```

----------------------------------------

TITLE: Basic Vim Recovery Command
DESCRIPTION: Command to start Vim in recovery mode for a specific file using the -r flag.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
vim -r help.txt
```

----------------------------------------

TITLE: Configuring Relative Line Numbers on Mode Change (Vim)
DESCRIPTION: Demonstrates using the ModeChanged event to dynamically toggle relative line numbers based on the current mode, specifically when entering visual modes
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:au ModeChanged [vV\x16]*:* let &l:rnu = mode() =~# '^[vV\x16]'
:au ModeChanged *:[vV\x16]* let &l:rnu = mode() =~# '^[vV\x16]'
:au WinEnter,WinLeave * let &l:rnu = mode() =~# '^[vV\x16]'
```

----------------------------------------

TITLE: Configuring Selective LaTeX Conceal Mode with VimL
DESCRIPTION: Setting to control which character sets use conceal mode in LaTeX documents. The letters determine which types of characters will be concealed and replaced with utf-8 glyphs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_143

LANGUAGE: viml
CODE:
```
let g:tex_conceal= "admgs"
```

----------------------------------------

TITLE: Configuring Custom Tmux Clipboard in Neovim
DESCRIPTION: Sets up a custom clipboard provider that integrates with tmux. It defines the commands for copying to and pasting from the tmux buffer, and enables caching.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
let g:clipboard = {
  \   'name': 'myClipboard',
  \   'copy': {
  \      '+': ['tmux', 'load-buffer', '-'],
  \      '*': ['tmux', 'load-buffer', '-'],
  \    },
  \   'paste': {
  \      '+': ['tmux', 'save-buffer', '-'],
  \      '*': ['tmux', 'save-buffer', '-'],
  \   },
  \   'cache_enabled': 1,
  \ }
```

----------------------------------------

TITLE: Configuring Tab Display in List Mode
DESCRIPTION: Enables list mode and sets listchars to display tabs as spaces, which changes the cursor behavior to appear at the start of tab characters rather than at the end.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_41

LANGUAGE: viml
CODE:
```
set listchars=eol:\x24
```

----------------------------------------

TITLE: Emulating standard status line with ruler in Vim
DESCRIPTION: Sets the statusline option to emulate the standard status line with the ruler set. It includes file name, flags, and position information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_67

LANGUAGE: vim
CODE:
```
set statusline=%<%f\ %h%w%m%r%=%-14.(%l,%c%V%)\ %P
```

----------------------------------------

TITLE: LSP Protocol Constant Lookup
DESCRIPTION: Shows how to lookup constants in the LSP protocol module
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_10

LANGUAGE: lua
CODE:
```
vim.lsp.protocol.TextDocumentSyncKind.Full == 1
vim.lsp.protocol.TextDocumentSyncKind[1] == "Full"
```

----------------------------------------

TITLE: Variable Assignment with Let Command in Vim
DESCRIPTION: Examples of using the :let command in Vim to assign values to variables, including regular variables, list items, and ranges within lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_90

LANGUAGE: viml
CODE:
```
:let {var-name} = {expr1}
```

LANGUAGE: viml
CODE:
```
:let {var-name}[{idx}] = {expr1}
```

LANGUAGE: viml
CODE:
```
:let {var-name}[{idx1}:{idx2}] = {expr1}
```

----------------------------------------

TITLE: Logical Operators in Neovim Expressions
DESCRIPTION: Examples of using logical OR (||) and logical AND (&&) operators in Neovim. Shows how operators can be concatenated and demonstrates short-circuit evaluation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_69

LANGUAGE: vim
CODE:
```
&nu || &list && &shell == "csh"
```

LANGUAGE: vim
CODE:
```
&nu || (&list && &shell == "csh")
```

LANGUAGE: vim
CODE:
```
let a = 1
echo a || b
```

LANGUAGE: vim
CODE:
```
echo exists("b") && b == "yes"
```

----------------------------------------

TITLE: Deleting Autocommands in a Group
DESCRIPTION: This snippet demonstrates how to remove all autocommands within the 'cprograms' group. It uses the ':autocmd!' command which requires specifying the group name to clear.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
:autocmd! cprograms
```

----------------------------------------

TITLE: Getting Byte Position in Vim
DESCRIPTION: This command displays information about the current cursor position, including the byte position in the file.  It accounts for the 'fileformat' setting. This helps you navigate and identify specific locations within the file when working with binary data.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
	g CTRL-G
```

----------------------------------------

TITLE: Defining Operator-Pending Mode Mapping in Vim
DESCRIPTION: Creates an operator-pending mapping for 'F' that selects a function name. It uses CTRL-U to remove any automatically inserted range, then finds the first parenthesis and selects the word before it.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
onoremap <silent> F :<C-U>normal! 0f(hviw<CR>
```

----------------------------------------

TITLE: Removing Dictionary Watcher - Lua
DESCRIPTION: The dictwatcherdel function removes an existing watcher from a dictionary. It requires that all three parameters match those used when the watcher was added to ensure accurate removal.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_49

LANGUAGE: lua
CODE:
```
dictwatcherdel({dict}, {pattern}, {callback})                 *dictwatcherdel()*
		Removes a watcher added  with |dictwatcheradd()|. All three
		arguments must match the ones passed to |dictwatcheradd()| in
		order for the watcher to be successfully deleted.

		Parameters: ~
		  • {dict} (`any`)
		  • {pattern} (`string`)
		  • {callback} (`function`)

		Return: ~
		  (`any`)
```

----------------------------------------

TITLE: Saving and Loading Custom Window Layouts in Vim
DESCRIPTION: These commands demonstrate how to save a custom window layout as a session and later load it when starting Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:mksession ~/.config/nvim/mine.vim
```

LANGUAGE: vim
CODE:
```
vim -S ~/.config/nvim/mine.vim
```

----------------------------------------

TITLE: Example of Defining the eqnarray Math Zone in LaTeX with VimL
DESCRIPTION: Concrete example of creating a new math zone for the eqnarray environment. The 'D' is a unique suffix, and '1' indicates it has a starred form (eqnarray*).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_141

LANGUAGE: viml
CODE:
```
call TexNewMathZone("D","eqnarray",1)
```

----------------------------------------

TITLE: Setting Automatic Indentation in Vim - Vim
DESCRIPTION: Enables automatic indentation for new lines based on the previous line's indent using the 'autoindent' option. This simplifies editing structured text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:set autoindent
```

----------------------------------------

TITLE: Nvim Stdin Handling Examples
DESCRIPTION: Examples of how to pipe text into Nvim through stdin and handle different input modes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_2

LANGUAGE: shell
CODE:
```
echo text | nvim - file
echo text | nvim file
echo "ifoo" | nvim -s -
echo "echo getpid()" | nvim -e - -V1
echo foo | nvim -- -
```

----------------------------------------

TITLE: Character Index Examples in Vim
DESCRIPTION: Demonstrates charidx() function usage with different parameters to handle multibyte characters and UTF-16.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_32

LANGUAGE: vim
CODE:
```
echo charidx('áb́ć', 3)		" returns 1
echo charidx('áb́ć', 6, 1)	" returns 4
echo charidx('áb́ć', 16)		" returns -1
echo charidx('a😊😊', 4, 0, 1)	" returns 2
```

----------------------------------------

TITLE: Preventing Multiple Plugin Loads in VimScript
DESCRIPTION: This code checks if the plugin has already been loaded and prevents multiple loading. It uses a global variable to track the loaded state.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_31

LANGUAGE: VimScript
CODE:
```
if exists("g:loaded_typecorr")
  finish
endif
let g:loaded_typecorr = 1
```

----------------------------------------

TITLE: Defining VarExists function for conditional statusline elements in Vim
DESCRIPTION: Defines a VarExists function used to conditionally display elements in the statusline based on the existence of a variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_71

LANGUAGE: vim
CODE:
```
function VarExists(var, val)
    if exists(a:var) | return a:val | else | return '' | endif
endfunction
```

----------------------------------------

TITLE: Vim Visual Text Replacement with Date
DESCRIPTION: A mapping to replace selected text with the output of the date command
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:vmap _a <Esc>`>a<CR><Esc>`<i<CR><Esc>!!date<CR>kJJ
```

----------------------------------------

TITLE: Starting Insert Mode in Command Window - VimL
DESCRIPTION: This snippet sets Neovim to automatically enter Insert mode when the command window is opened. It's helpful for users who want to start typing commands immediately without extra keystrokes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_14

LANGUAGE: VimL
CODE:
```
:au CmdwinEnter [/?]  startinsert
```

----------------------------------------

TITLE: Simulating Rethrow in Vim Script
DESCRIPTION: Since Vim has no built-in rethrow mechanism, this example shows how to simulate it by throwing v:exception.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_130

LANGUAGE: vim
CODE:
```
:function! Bar()
:  try
:    call Foo()
:  catch /.*/
:    echo "Rethrow" v:exception
:    throw v:exception
:  endtry
:endfunction
```

----------------------------------------

TITLE: Querying Buffer Line Count in Lua
DESCRIPTION: Returns the number of lines in the given buffer. Takes a buffer id parameter, with 0 representing the current buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_55

LANGUAGE: lua
CODE:
```
nvim_buf_line_count({buffer})
```

----------------------------------------

TITLE: Using `memset` for C Struct Initialization
DESCRIPTION: This snippet demonstrates how to use the `memset` function to initialize a struct to zero in C. It involves setting every byte of the struct to zero, aiding in initializing or resetting a struct without manual assignment. This can be used when exact values aren't known, or a full reset is desired.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_5

LANGUAGE: C
CODE:
```
Struct data;
memset(&data, 0, sizeof(data));
```

----------------------------------------

TITLE: Creating a complex syntax chain with nextgroup in Vim
DESCRIPTION: Example of using the 'nextgroup' argument to create a sequence of syntax matches. This highlights 'Foo' and 'Bar' differently, but only when they appear in a specific sequence.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_162

LANGUAGE: vim
CODE:
```
:syntax match  ccFoobar  "Foo.\{-}Bar"  contains=ccFoo
:syntax match  ccFoo     "Foo"        contained nextgroup=ccFiller
:syntax region ccFiller  start="."  matchgroup=ccBar  end="Bar"  contained
```

----------------------------------------

TITLE: Starting and Stopping Polling in Lua with libuv
DESCRIPTION: This snippet covers how to start polling on a file descriptor using `uv.poll_start(poll, events, callback)`, where `events` specifies the types of events to watch (readable or writable). It also illustrates stopping the polling with `uv.poll_stop(poll)`. The callback function is triggered upon the detection of specified events.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_20

LANGUAGE: lua
CODE:
```
uv.poll_start({poll}, {events}, {callback})
```

LANGUAGE: lua
CODE:
```
uv.poll_stop({poll})
```

----------------------------------------

TITLE: Starting Vim in Diff Mode (VimL)
DESCRIPTION: Command to start Vim in diff mode for comparing multiple files. Options are automatically set for diff viewing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
nvim -d file1 file2 [file3 [file4]]
```

----------------------------------------

TITLE: Python Module Installation
DESCRIPTION: Commands to install and upgrade the required Python modules for Neovim support.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_7

LANGUAGE: bash
CODE:
```
python -m pip install setuptools
python -m pip install --upgrade pynvim
python3 -m pip install --upgrade pynvim
```

----------------------------------------

TITLE: Navigating to First Location List Error
DESCRIPTION: Command for displaying the first error in the location list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
:lr[ewind][!] [nr]
```

----------------------------------------

TITLE: Configuring Health Window Style in Lua
DESCRIPTION: Configuration example for setting the health check display style to use a floating window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_4

LANGUAGE: lua
CODE:
```
vim.g.health = { style = 'float' }
```

----------------------------------------

TITLE: Syntax Autocommands in Neovim
DESCRIPTION: Example autocommands for loading C and CPP syntax files
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
:au Syntax c    runtime! syntax/c.vim
:au Syntax cpp   runtime! syntax/cpp.vim
```

----------------------------------------

TITLE: Defining Breakpoint at Cursor
DESCRIPTION: This command sets a breakpoint at the current line of the current file.  It provides a quick way to pause execution at the cursor position to examine the program's state.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
":breakadd file <cursor-line> <current-file>"
```

----------------------------------------

TITLE: Search and Select Previous Match in Visual Mode in Neovim
DESCRIPTION: This command searches backward for the last used search pattern and starts Visual mode to select the match, similar to using `N`. It mirrors the functionality of `gn` but in the reverse direction.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
"gN"
```

----------------------------------------

TITLE: Managing LSP Diagnostic Representation in Lua
DESCRIPTION: The 'vim.lsp.diagnostic.from()' function is introduced for converting Neovim diagnostics into their LSP compatible representations, streamlining the integration of Neovim with LSP servers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_6

LANGUAGE: lua
CODE:
```
vim.lsp.diagnostic.from(diagnostics_list)
```

----------------------------------------

TITLE: Syntax Toggle Mapping in Neovim
DESCRIPTION: Key mapping to toggle syntax highlighting using F7 key
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
:map <F7> :if exists("g:syntax_on") <Bar>
	\   syntax off <Bar>
	\ else <Bar>
	\   syntax enable <Bar>
	\ endif <CR>
```

----------------------------------------

TITLE: Defining a Command with Line Range in Vim
DESCRIPTION: This snippet shows how to define a command that operates on a specified line range using the -range option, allowing the user to save a defined range to a specified file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:command -range=% SaveIt :<line1>,<line2>write! save_file
```

----------------------------------------

TITLE: Using matchlist() in Vim
DESCRIPTION: This example demonstrates the use of matchlist() function to perform regex matching. It matches a pattern with optional submatches against a string.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_170

LANGUAGE: vim
CODE:
```
echo matchlist('acd', '\(a\)\?\(b\)\?\(c\)\?\(.*\)')
```

----------------------------------------

TITLE: Creating and Reading Blobs - Vim Script
DESCRIPTION: This snippet describes how to create a Blob from a hexadecimal literal and read a binary file into a Blob object in Vim, specifying the reading type.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_61

LANGUAGE: vim
CODE:
```
:let b = 0zFF00ED015DAF
:let b = readfile('image.png', 'B')
```

----------------------------------------

TITLE: Using CTRL-A for Incrementing Numbers in Vim
DESCRIPTION: This snippet shows how to use the CTRL-A command in Vim to increment numbers systematically in a document, demonstrating its ease of use for changing years in text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_1

LANGUAGE: Vim
CODE:
```
"Search for years in the text
/19[0-9][0-9]\|20[0-9][0-9]
" Use CTRL-A to increment the year
CTRL-A

```

----------------------------------------

TITLE: Using Case Modifiers in Vim Search Patterns
DESCRIPTION: Pattern modifiers '\c' and '\C' for overriding case sensitivity settings for specific searches. These modifiers take precedence over the 'ignorecase' and 'smartcase' options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
\Cword
```

LANGUAGE: vim
CODE:
```
\CWord
```

LANGUAGE: vim
CODE:
```
\cword
```

LANGUAGE: vim
CODE:
```
\cWord
```

----------------------------------------

TITLE: Inspecting Variable in Debug Mode
DESCRIPTION: This command displays the value of the variable 'idx' within the current function's scope during debugging.  It's essential for understanding the state of the program at different execution points.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
"echo idx"
```

----------------------------------------

TITLE: Opening Diagnostic Float with Suffix Option
DESCRIPTION: The function |vim.diagnostic.open_float()| now accepts a `suffix` option for displaying LSP error codes by default. This enhances the diagnostic float's contextual information presentation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_5



----------------------------------------

TITLE: Backward Search Pattern
DESCRIPTION: Demonstrates backward search functionality using the question mark command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
?word
```

----------------------------------------

TITLE: Configuring DOS Batch Syntax Highlighting Options
DESCRIPTION: Sets options for DOS batch file syntax highlighting, including Windows command extensions version and comment handling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_26

LANGUAGE: VimScript
CODE:
```
let dosbatch_cmdextversion = 1
let dosbatch_colons_comment = 1
let g:dosbatch_syntax_for_btm = 1
```

----------------------------------------

TITLE: Whitespace and Digit Matching
DESCRIPTION: Covers matching patterns for whitespace ('\s') and digits ('\d'), essential for structured text searches. Highlights distinctions between whitespace and non-whitespace, as well as digit and non-digit matches.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_24

LANGUAGE: regex
CODE:
```
"\\s"
"\\S"
"\\d"
```

----------------------------------------

TITLE: Setting Autocommands for C and CPP Files
DESCRIPTION: This snippet sets specific shift width and soft tab stop values for .c, .h, and .cpp files using the BufReadPost event. Dependencies include having these file extensions recognized by Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
:  autocmd BufReadPost *.c,*.h :set sw=4 sts=4
```

LANGUAGE: vim
CODE:
```
:  autocmd BufReadPost *.cpp   :set sw=3 sts=3
```

LANGUAGE: vim
CODE:
```
:augroup END
```

----------------------------------------

TITLE: Finding Window ID for a Buffer in Neovim using Vim Script
DESCRIPTION: The 'bufwinid' function returns the window ID of the first window associated with a given buffer, or -1 if the buffer does not exist.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
bufwinid({buf})
```

----------------------------------------

TITLE: Clipboard Operations
DESCRIPTION: Commands demonstrating how to interact with the system clipboard using registers
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
"*P
"+y$
"+P
```

----------------------------------------

TITLE: Matching Start and End of File
DESCRIPTION: Uses '\%^' to match the start and '\%$' for the end of a file or string. These patterns help in locating items based on their positional relationship to the file boundaries.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_17

LANGUAGE: regex
CODE:
```
"\\%^"
"\\%$"
```

----------------------------------------

TITLE: Setting mkspellmem for Systems with 1GB RAM in Neovim
DESCRIPTION: Example of setting the 'mkspellmem' option to optimize memory usage for spell checking on systems with 1GB of RAM. This increases the available memory before compression, allows more words before each compression cycle, and permits more words to be added after compression.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_52

LANGUAGE: vim
CODE:
```
set mkspellmem=900000,3000,800
```

----------------------------------------

TITLE: Conditional Package Loading Example
DESCRIPTION: Example showing how to conditionally load different versions of a plugin based on compiler version.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
if foo_compiler_version > 34
  packadd foo_new
else
  packadd foo_old
endif
```

----------------------------------------

TITLE: Using Nested Autocommands
DESCRIPTION: The snippet adds the '++nested' flag to make sure that triggering an event will also execute other related autocommands, using the FileChangedShell event as an example.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
:autocmd FileChangedShell * ++nested  edit
```

----------------------------------------

TITLE: Setting Syntax-Based Omni Completion for Current Buffer
DESCRIPTION: Command to enable syntax-based code completion for the current buffer, providing minimal language-sensitive completion based on Vim's syntax highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
setlocal omnifunc=syntaxcomplete#Complete
```

----------------------------------------

TITLE: Remote File Editing with SCP
DESCRIPTION: Example of editing remote files using SCP protocol in Neovim. Demonstrates how to open files on remote hosts directly.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_1

LANGUAGE: vimscript
CODE:
```
vim scp://hostname/path/to/file
```

----------------------------------------

TITLE: Configuring Markdown Syntax Highlighting Options in Vim
DESCRIPTION: Sets options for Markdown syntax highlighting, including increasing the number of lines for syncing, enabling fenced code block highlighting, and disabling syntax concealing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_82

LANGUAGE: VimScript
CODE:
```
:let g:markdown_minlines = 500

:let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']

:let g:markdown_syntax_conceal = 0
```

----------------------------------------

TITLE: Recovering Swap Files in Vim
DESCRIPTION: This snippet provides the command to recover a file from the swap file in Vim, particularly useful when you want changes that are not saved in the main file. The command can be used if the user is aware of the presence of a swap file containing recoverable changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_5

LANGUAGE: Vim
CODE:
```
:recover
```

----------------------------------------

TITLE: List Reference Behavior with Concatenation in Vim
DESCRIPTION: Shows how concatenation affects both variables when they reference the same list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_32

LANGUAGE: vim
CODE:
```
:let listA = [1, 2]
:let listB = listA
:let listB += [3, 4]
:echo listA
```

----------------------------------------

TITLE: Calculating Absolute Value in Vimscript
DESCRIPTION: The abs() function returns the absolute value of a number or float expression. It handles both integer and float inputs, returning the same type as the input.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_0

LANGUAGE: vimscript
CODE:
```
echo abs(1.456)
```

LANGUAGE: vimscript
CODE:
```
echo abs(-5.456)
```

LANGUAGE: vimscript
CODE:
```
echo abs(-4)
```

----------------------------------------

TITLE: Configuring Greek Language Mapping in Vim
DESCRIPTION: Example of setting langmap option for Greek keyboard layout in UTF-8, allowing Greek characters to be mapped to their English equivalents for normal mode commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_36

LANGUAGE: vim
CODE:
```
set langmap=ΑA,ΒB,ΨC,ΔD,ΕE,ΦF,ΓG,ΗH,ΙI,ΞJ,ΚK,ΛL,ΜM,ΝN,ΟO,ΠP,QQ,ΡR,ΣS,ΤT,ΘU,ΩV,WW,ΧX,ΥY,ΖZ,αa,βb,ψc,δd,εe,φf,γg,ηh,ιi,ξj,κk,λl,μm,νn,οo,πp,qq,ρr,σs,τt,θu,ωv,ςw,χx,υy,ζz
```

----------------------------------------

TITLE: Checking Ruby Version in Neovim
DESCRIPTION: Demonstrates how to print the Ruby version used in Neovim using the :ruby command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_ruby.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
:ruby print RUBY_VERSION
```

----------------------------------------

TITLE: Saving and Restoring Mark Position in Vim
DESCRIPTION: This snippet demonstrates how to save the position of a mark ('a) and restore it later using getpos() and setpos() functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_103

LANGUAGE: vim
CODE:
```
let save_a_mark = getpos("'a")
" ...
call setpos("'a", save_a_mark)
```

----------------------------------------

TITLE: Repeating Spell Replacement in Vim
DESCRIPTION: Command to repeat the replacement done by z= for all matches with the replaced word in the current window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_4

LANGUAGE: vimdoc
CODE:
```
:spellr[epall]
```

----------------------------------------

TITLE: Remote Server Control Example
DESCRIPTION: Example showing how to send commands to a remote server to write all files and exit.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/remote.txt#2025-04-20_snippet_3

LANGUAGE: bash
CODE:
```
nvim --server ~/.cache/nvim/server.pipe --remote-send '<C-\><C-N>:wqa<CR>'
```

----------------------------------------

TITLE: Disabling Cargo Workspace Directory Avoidance
DESCRIPTION: Controls whether Cargo commands in a workspace should operate at the crate level (default) or at the workspace level. Working at the workspace level may be slower but can check dependencies between crates.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
let g:rust_cargo_avoid_whole_workspace = 0
```

----------------------------------------

TITLE: Editing Buffers by Number
DESCRIPTION: This snippet illustrates how to edit specific buffers by their number using the ':buffer' command, allowing users to quickly switch between buffers without typing full file names.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:buffer 2
```

LANGUAGE: vim
CODE:
```
:buffer help
```

LANGUAGE: vim
CODE:
```
:sbuffer 3
```

----------------------------------------

TITLE: Enabling Rails Environment Detection for Ruby Omni Completion
DESCRIPTION: Vim configuration to enable detection of Rails environment for files within a Rails project, enhancing Ruby Omni completion.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
let g:rubycomplete_rails = 1
```

----------------------------------------

TITLE: Insert Mode Abbreviations for Raku Unicode Operators
DESCRIPTION: Comprehensive set of Vim insert mode abbreviations that automatically convert ASCII-based operators to their Unicode equivalents for Raku programming.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_raku.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
iabbrev <buffer> !(<) ⊄
iabbrev <buffer> !(<=) ⊈
iabbrev <buffer> !(>) ⊅
iabbrev <buffer> !(>=) ⊉
iabbrev <buffer> !(cont) ∌
iabbrev <buffer> !(elem) ∉
iabbrev <buffer> != ≠
iabbrev <buffer> (&) ∩
iabbrev <buffer> (+) ⊎
iabbrev <buffer> (-) ∖
iabbrev <buffer> (.) ⊍
iabbrev <buffer> (<) ⊂
iabbrev <buffer> (<+) ≼
iabbrev <buffer> (<=) ⊆
iabbrev <buffer> (>) ⊃
iabbrev <buffer> (>+) ≽
iabbrev <buffer> (>=) ⊇
iabbrev <buffer> (\|) ∪
iabbrev <buffer> (^) ⊖
iabbrev <buffer> (atomic) ⚛
iabbrev <buffer> (cont) ∋
iabbrev <buffer> (elem) ∈
iabbrev <buffer> * ×
iabbrev <buffer> **0 ⁰
iabbrev <buffer> **1 ¹
iabbrev <buffer> **2 ²
iabbrev <buffer> **3 ³
iabbrev <buffer> **4 ⁴
iabbrev <buffer> **5 ⁵
iabbrev <buffer> **6 ⁶
iabbrev <buffer> **7 ⁷
iabbrev <buffer> **8 ⁸
iabbrev <buffer> **9 ⁹
iabbrev <buffer> ... …
iabbrev <buffer> / ÷
iabbrev <buffer> << «
iabbrev <buffer> <<[=]<< «=«
iabbrev <buffer> <<[=]>> «=»
iabbrev <buffer> <= ≤
iabbrev <buffer> =~= ≅
iabbrev <buffer> >= ≥
iabbrev <buffer> >> »
iabbrev <buffer> >>[=]<< »=«
iabbrev <buffer> >>[=]>> »=»
iabbrev <buffer> Inf ∞
iabbrev <buffer> atomic-add-fetch ⚛+=
iabbrev <buffer> atomic-assign ⚛=
iabbrev <buffer> atomic-fetch ⚛
iabbrev <buffer> atomic-dec-fetch --⚛
iabbrev <buffer> atomic-fetch-dec ⚛--
iabbrev <buffer> atomic-fetch-inc ⚛++
iabbrev <buffer> atomic-inc-fetch ++⚛
iabbrev <buffer> atomic-sub-fetch ⚛−=
iabbrev <buffer> e 𝑒
iabbrev <buffer> o ∘
iabbrev <buffer> pi π
iabbrev <buffer> set() ∅
iabbrev <buffer> tau τ
```

----------------------------------------

TITLE: Autocommand Pattern Example 2 in Vimscript
DESCRIPTION: This example illustrates how to set the 'cindent' option for C files in the `/vim/src` directory using the `BufRead` event and the `/vim/src/*.c` pattern. When a C file within that directory is read, the 'cindent' option will be set.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
 ":autocmd BufRead /vim/src/*.c\tset cindent"
```

----------------------------------------

TITLE: Conditional Mouse Support Configuration in Neovim
DESCRIPTION: This snippet shows how to conditionally apply the mouse support configuration based on whether Neovim is being used. It prevents errors in Neovim due to deprecated options like 'ttymouse'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
if !has('nvim')
    set ttymouse=xterm2
endif
```

----------------------------------------

TITLE: Reading Files in Vim
DESCRIPTION: Example of using the ':read' command to insert file contents above the first line of a file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:0read patch
```

----------------------------------------

TITLE: Enabling Custom HTML Rendering
DESCRIPTION: This snippet allows users to redefine HTML syntax groups for custom rendering. To enable this, you need to redefine all required syntax groups and define the 'html_my_rendering' variable in your vimrc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_52

LANGUAGE: vim
CODE:
```
	:let html_my_rendering=1
```

----------------------------------------

TITLE: Shell Error Handling in Vim Script
DESCRIPTION: Example showing how to check shell command execution status using v:shell_error variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
!mv foo bar
if v:shell_error
  echo 'could not rename "foo" to "bar"!'
endif
```

----------------------------------------

TITLE: Vim PHP Syntax Configuration
DESCRIPTION: Configuration options for PHP syntax highlighting including SQL, HTML, and folding settings
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_99

LANGUAGE: vim
CODE:
```
let php_sql_query = 1
let php_baselib = 1
let php_htmlInStrings = 1
let php_oldStyle = 1
let php_asp_tags = 1
```

----------------------------------------

TITLE: Building Neovim with Custom Install Location
DESCRIPTION: Commands to build and install Neovim to a custom location using CMake. This allows installation to a non-default directory path.
SOURCE: https://github.com/neovim/neovim/blob/master/README.md#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=/full/path/
make install
```

----------------------------------------

TITLE: Getting Extmark Position in Lua
DESCRIPTION: Gets the position (0-indexed) of an extmark. Returns a tuple or empty list if the extmark id is absent.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_62

LANGUAGE: lua
CODE:
```
nvim_buf_get_extmark_by_id({buffer}, {ns_id}, {id}, {opts})
```

----------------------------------------

TITLE: Handling System Command Output with Split in Vim
DESCRIPTION: This snippet demonstrates how to handle system command output by splitting it into a list, preserving empty lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_274

LANGUAGE: vim
CODE:
```
echo split(system('echo hello'), '\n', 1)
```

----------------------------------------

TITLE: Custom Cursor Color Configuration
DESCRIPTION: Advanced cursor styling configuration that sets different colors for insert and normal modes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:set termguicolors
:hi Cursor guifg=green guibg=green
:hi Cursor2 guifg=red guibg=red
:set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50
```

----------------------------------------

TITLE: Filetype Detection in After Directory
DESCRIPTION: Continuation of the split filetype detection example, showing the content that would go in the 'after' directory to be processed later in the detection sequence.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_6

LANGUAGE: viml
CODE:
```
augroup filetypedetect
au BufNewFile,BufRead /usr/share/scripts/*	setf ruby
augroup END
```

----------------------------------------

TITLE: Joining Paragraphs with Improved Blank Line Handling
DESCRIPTION: Enhanced global command for joining paragraphs that works with blank lines (containing spaces/tabs) by finding all lines with non-whitespace characters and joining until the next line that is blank or empty.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:g/\S/,/^\s*$/join
```

----------------------------------------

TITLE: Restoring fold state from view
DESCRIPTION: Restores previously saved fold states and view settings. This is used after returning to a file where you previously used mkview.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_12

LANGUAGE: vimdoc
CODE:
```
:loadview
```

----------------------------------------

TITLE: Creating DiffOrig Command for Comparing with Original File (VimL)
DESCRIPTION: Defines a custom command 'DiffOrig' to compare the current buffer with the original file version.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
command DiffOrig vert new | set buftype=nofile | read ++edit # | 0d_
   \ | diffthis | wincmd p | diffthis
```

----------------------------------------

TITLE: Getting System Load Average with uv.loadavg()
DESCRIPTION: Returns the system load average as a triad of numbers representing 1, 5, and 15 minute averages. Not supported on Windows platforms.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_88

LANGUAGE: lua
CODE:
```
uv.loadavg()
```

----------------------------------------

TITLE: Case Sensitivity Settings
DESCRIPTION: Commands to toggle case sensitivity in search patterns using set commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:set ignorecase
:set noignorecase
```

----------------------------------------

TITLE: Defining Syntax with End Constraints in Vim Script
DESCRIPTION: Handles syntax items with end constraints, using examples such as preprocessor directives that may include contained comments, ensuring the outer syntax region ends appropriately even with inner contained items.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_9

LANGUAGE: Vim Script
CODE:
```
:syntax region xComment start=/%/ end=/$/ contained
:syntax region xPreProc start=/#/ end=/$/ contains=xComment
```

----------------------------------------

TITLE: Hiding Currently Displayed Diagnostics - Lua
DESCRIPTION: Clears the visible diagnostic decorations from the buffer. This function only removes the display of diagnostics and does not erase the diagnostics themselves, allowing for redisplay when necessary.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_13

LANGUAGE: Lua
CODE:
```
vim.diagnostic.hide(namespace, bufnr)
```

----------------------------------------

TITLE: Using Deferred File Deletion in Vim
DESCRIPTION: Shows how to use the 'D' flag with writefile() to delete a file when the current function ends.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_294

LANGUAGE: vim
CODE:
```
defer delete({fname})
```

----------------------------------------

TITLE: Perl String Statement Example
DESCRIPTION: Example showing how Perl strings are highlighted differently based on perl_string_as_statement setting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_98

LANGUAGE: perl
CODE:
```
"hello world!"; qq|hello world|;
```

----------------------------------------

TITLE: Pattern Matching Assertion Example
DESCRIPTION: Demonstrates assert_match() function with pattern matching and start/end anchors
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
call assert_match('^f.*o$', 'foobar')
```

----------------------------------------

TITLE: Repeating Searches with Different Offsets in Vim
DESCRIPTION: Commands for repeating the previous search with modified or same offsets. These shortcuts allow efficient repetition of searches with different positioning behavior.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
/that
```

LANGUAGE: vim
CODE:
```
//e
```

LANGUAGE: vim
CODE:
```
/
```

LANGUAGE: vim
CODE:
```
//
```

----------------------------------------

TITLE: Time Measurement with reltimestr
DESCRIPTION: Shows how to measure and format execution time as a string with microsecond precision
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_205

LANGUAGE: vim
CODE:
```
let start = reltime()
call MyFunction()
echo reltimestr(reltime(start))
echo split(reltimestr(reltime(start)))[0]
```

----------------------------------------

TITLE: Setting Semantic Highlight Groups in Vim
DESCRIPTION: This snippet demonstrates how to define custom highlight groups for semantic tokens in Vim using the `hi` command.  It sets the foreground color for function names, Lua variables, deprecated symbols, and asynchronous functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
hi @lsp.type.function guifg=Yellow        " function names are yellow
hi @lsp.type.variable.lua guifg=Green     " variables in lua are green
hi @lsp.mod.deprecated gui=strikethrough  " deprecated is crossed out
hi @lsp.typemod.function.async guifg=Blue " async functions are blue
```

----------------------------------------

TITLE: Testing PythonX availability in Vim script
DESCRIPTION: Conditional statement to check if PythonX functions and commands are available in Neovim using the has() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_13

LANGUAGE: viml
CODE:
```
if has('pythonx')
  echo 'pyx* commands are available. (Python ' .. &pyx .. ')'
endif
```

----------------------------------------

TITLE: Using searchdecl() in Neovim (Vimscript)
DESCRIPTION: This example shows how to use the searchdecl() function to search for the declaration of a variable and echo the line containing the declaration if found.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_219

LANGUAGE: vim
CODE:
```
if searchdecl('myvar') == 0
   echo getline('.')
endif
```

----------------------------------------

TITLE: Getting Byte Index in a String in Neovim using Vim Script
DESCRIPTION: The 'byteidx' function calculates the byte index of a specified character in a provided string, taking into account multibyte characters and returns -1 for invalid indices.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
byteidx({expr}, {nr} [, {utf16}])
```

----------------------------------------

TITLE: Using For Loop and Range in VimL
DESCRIPTION: This snippet is a more compact version of the while loop, using a for loop. It iterates over a range from 1 to 4, printing each number. This snippet highlights the for loop's efficiency in iterating over sequences in VimL. Understanding of Vim scripting and the :for and range() functionality is necessary.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_1

LANGUAGE: VimL
CODE:
```
:for i in range(1, 4)
:  echo "count is" i
:endfor
```

----------------------------------------

TITLE: Comprehensive Exception Handling
DESCRIPTION: Example showing a complete exception handling structure with specific and catch-all handlers, including interrupt and custom exception handling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_139

LANGUAGE: vim
CODE:
```
:try
:
:  " do the hard work here
:
:catch /MyException/
:
:  " handle known problem
:
:catch /^Vim:Interrupt$/
:    echo "Script interrupted"
:catch /.*/
:  echo "Internal error (" .. v:exception .. ")"
:  echo " - occurred at " .. v:throwpoint
:endtry
```

----------------------------------------

TITLE: Reselecting Previous Visual Area in Neovim
DESCRIPTION: This command reselects the same area as the previous Visual selection, using the same mode (characterwise, linewise, or blockwise). It exchanges the current and previous Visual areas in Visual mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
"gv"
```

----------------------------------------

TITLE: Calculating Text Display Width in Neovim
DESCRIPTION: Uses 'nvim_strwidth' to determine the number of display cells a string occupies. Control characters are counted as single cells.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_27

LANGUAGE: Lua
CODE:
```
nvim_strwidth\(\{text\}\)
```

----------------------------------------

TITLE: Defining a function for foldtext in Vim
DESCRIPTION: This example demonstrates defining a Vim function and using it to customize the foldtext. This improves readability and allows for more complex foldtext logic. It retrieves the first line, substitutes patterns, and prepends dashes indicating the fold level.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:set foldtext=MyFoldText()
:function MyFoldText()
:  let line = getline(v:foldstart)
:  let sub = substitute(line, '/\*\|\*/\|{{{\d\=', '', 'g')
:  return v:folddashes .. sub
:endfunction
```

----------------------------------------

TITLE: Starting Vim with a Previously Saved Session
DESCRIPTION: Shows how to quickly start editing with a previously saved Session file using the -S command-line argument. This loads all windows, settings, and files from the specified session.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_9

LANGUAGE: bash
CODE:
```
vim -S Session.vim
```

----------------------------------------

TITLE: Mapping Mouse Buttons in Neovim
DESCRIPTION: This snippet demonstrates how to remap Shift-LeftMouse actions to RightMouse actions in Neovim, allowing customization of mouse behavior. These mappings affect how mouse buttons interact with selections and editor functionality.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_54

LANGUAGE: vim
CODE:
```
map <S-LeftMouse>     <RightMouse>
map <S-LeftDrag>      <RightDrag>
map <S-LeftRelease>   <RightRelease>
map <2-S-LeftMouse>   <2-RightMouse>
map <2-S-LeftDrag>    <2-RightDrag>
map <2-S-LeftRelease> <2-RightRelease>
map <3-S-LeftMouse>   <3-RightMouse>
map <3-S-LeftDrag>    <3-RightDrag>
map <3-S-LeftRelease> <3-RightRelease>
map <4-S-LeftMouse>   <4-RightMouse>
map <4-S-LeftDrag>    <4-RightDrag>
map <4-S-LeftRelease> <4-RightRelease>
```

----------------------------------------

TITLE: Accessing Option Values in Vim Expressions
DESCRIPTION: This snippet demonstrates how to access option values in Vim expressions. It shows how to use the '&' prefix to get local or global option values.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_83

LANGUAGE: vim
CODE:
```
echo "tabstop is " .. &tabstop
if &expandtab
```

----------------------------------------

TITLE: Creating and Loading Views in Vim
DESCRIPTION: These commands demonstrate how to create and load views in Vim, which store window-specific settings and can be numbered for multiple views per file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:mkview
```

LANGUAGE: vim
CODE:
```
:loadview
```

LANGUAGE: vim
CODE:
```
:mkview 1
```

LANGUAGE: vim
CODE:
```
:loadview 1
```

----------------------------------------

TITLE: Character Conversion Examples
DESCRIPTION: Demonstrations of using nr2char() to convert number values to characters, including ASCII and UTF-8 examples.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_184

LANGUAGE: vim
CODE:
```
echo nr2char(64)		" returns '@'
echo nr2char(32)		" returns ' '
```

LANGUAGE: vim
CODE:
```
echo nr2char(300)		" returns I with bow character
```

----------------------------------------

TITLE: Executing Vim Command with Normal Mode
DESCRIPTION: This snippet shows how to start Vim and execute a normal mode command to jump to the last cursor position when Vim was exited (mark '0). This is done using the `-c` option to pass the command `normal '0` to Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_12

LANGUAGE: Shell
CODE:
```
vim -c "normal '0"
```

----------------------------------------

TITLE: Remote File Editing with FTP
DESCRIPTION: Example of editing remote files using FTP protocol in Neovim. Shows how to open files on FTP hosts directly.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_2

LANGUAGE: vimscript
CODE:
```
vim ftp://hostname/path/to/file
```

----------------------------------------

TITLE: Using While Loop in VimL
DESCRIPTION: This snippet demonstrates the use of a while loop in VimL. The loop initializes a variable i to 1, checks whether it is less than 5, and prints the current value while incrementing it by one in each iteration. The goal is to illustrate the implementation of a loop structure in Vim script. Dependencies include understanding Vim scripting basics and using the :let and :echo commands. Inputs specify initial and condition values for loop execution, while outputs are printed values during loop execution.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_0

LANGUAGE: VimL
CODE:
```
:let i = 1
:while i < 5
:  echo "count is" i
:  let i += 1
:endwhile
```

----------------------------------------

TITLE: Configuring tmux terminal overrides
DESCRIPTION: This code snippet shows how to configure tmux to properly handle cursor shape changes sent by Neovim. It sets the `terminal-overrides` option in the tmux configuration file to define the `Ss` and `Se` capabilities, which control the cursor shape.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_3

LANGUAGE: bash
CODE:
```
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
```

----------------------------------------

TITLE: Error in Finally Block in Vim Script
DESCRIPTION: Shows a problematic case where an error in a finally clause can prevent proper handling of an interrupt, emphasizing the need for careful error handling in cleanup code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_135

LANGUAGE: vim
CODE:
```
:try
:  try
:    echo "Press CTRL-C for interrupt"
:    while 1
:    endwhile
:  finally
:    unlet novar
:  endtry
:catch /novar/
:endtry
:echo "Script still running"
:sleep 1
```

----------------------------------------

TITLE: Filetype Detection in Vim Plugins
DESCRIPTION: Shows how to create a filetype detection pattern that sets the appropriate filetype for specific file extensions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_41

LANGUAGE: vim
CODE:
```
au BufNewFile,BufRead *.foo			set filetype=foofoo
```

----------------------------------------

TITLE: Setting Verilog indentation width
DESCRIPTION: Configures the indentation width for Verilog files. The default width is 'shiftwidth', but this can be customized by setting the b:verilog_indent_width variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
let b:verilog_indent_width = 4
let b:verilog_indent_width = shiftwidth() * 2
```

----------------------------------------

TITLE: Creating Number Sequences with range() in Vim
DESCRIPTION: Examples of using the range() function to generate lists of sequential numbers with different starting points, end points, and stride values.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_199

LANGUAGE: vim
CODE:
```
echo range(4)		" [0, 1, 2, 3]
echo range(2, 4)	" [2, 3, 4]
echo range(2, 9, 3)	" [2, 5, 8]
echo range(2, -2, -1)	" [2, 1, 0, -1, -2]
echo range(0)		" []
echo range(2, 0)	" error!
```

----------------------------------------

TITLE: Setting showbreak String in Vim
DESCRIPTION: Examples of setting the showbreak option which defines the string displayed at the start of wrapped lines. Shows two common patterns for visual indication of wrapped lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_64

LANGUAGE: vim
CODE:
```
let &showbreak = "> "
let &showbreak = '+++ '
```

----------------------------------------

TITLE: WinScrolled Event Handler Example
DESCRIPTION: Example structure of the v:event dictionary provided by the WinScrolled autocommand event, showing window change information including dimensions and scroll positions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
{
   all: {width: 0, height: 2, leftcol: 0, skipcol: 0, topline: 1, topfill: 0},
   1003: {width: 0, height: -1, leftcol: 0, skipcol: 0, topline: 0, topfill: 0},
   1006: {width: 0, height: 1, leftcol: 0, skipcol: 0, topline: 1, topfill: 0},
}
```

----------------------------------------

TITLE: File Iteration Search and Replace Example
DESCRIPTION: Example of iterating through files in arglist to perform search and replace operations
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_214

LANGUAGE: vim
CODE:
```
let n = 1
while n <= argc()     " loop over all files in arglist
  exe "argument " .. n
  " start at the last char in the file and wrap for the
  " first search to find match at start of file
  normal G$
  let flags = "w"
  while search("foo", flags) > 0
    s/foo/bar/g
    let flags = "W"
  endwhile
  update            " write the file if modified
  let n = n + 1
endwhile
```

----------------------------------------

TITLE: Basic Match Pattern Configuration in Vim
DESCRIPTION: Example of setting basic match patterns for if/endif and while/continue/break/endwhile keywords using b:match_words variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:let b:match_words = '\<if\>:\<endif\>,' . '\<while\>:\<continue\>:\<break\>:\<endwhile\>'
```

----------------------------------------

TITLE: Retrieving Environment Variable Value with uv.os_getenv()
DESCRIPTION: Gets the value of a specified environment variable with an optional buffer size parameter. Returns the value or an error code if the variable doesn't exist or exceeds buffer size.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_91

LANGUAGE: lua
CODE:
```
uv.os_getenv({name} [, {size}])
```

----------------------------------------

TITLE: Changing the Shell Command Runner for Cargo Commands
DESCRIPTION: Specifies how shell commands for Cargo should be executed. By default, :terminal is used, but this can be changed to use the :! command instead.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
let g:cargo_shell_command_runner = '!'
```

----------------------------------------

TITLE: Three-piece comment example in Vim
DESCRIPTION: This snippet demonstrates how to define a three-piece comment (start, middle, and end) for C-style comments using the 'comments' option.  It includes the sr (start), mb (middle), and ex (end) flags, along with an explanation of the 'b' flag to prevent recognizing "*ptr" as a comment.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
":set comments=sr:/*,mb:*,ex:*/"
```

----------------------------------------

TITLE: Uninstalling and Reinstalling Python Modules for Neovim
DESCRIPTION: Uninstalls both the old 'neovim' module and the new 'pynvim' module, then reinstalls 'pynvim'. This is useful when troubleshooting Python integration issues.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_5

LANGUAGE: bash
CODE:
```
python -m pip uninstall neovim pynvim
python -m pip install --user --upgrade pynvim
```

----------------------------------------

TITLE: Autocommand Pattern Example 3 in Vimscript
DESCRIPTION: This example demonstrates how to set the 'ts=5' option for C files in the `/tmp` directory. If a link from `/tmp/test.c` points to `/home/nobody/vim/src/test.c`, editing `/tmp/test.c` will trigger this autocommand.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
 ":autocmd BufRead /tmp/*.c\tset ts=5"
```

----------------------------------------

TITLE: Navigating to Error in Next File
DESCRIPTION: Command for displaying the first error in the next file in the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
:[count]cnf[ile][!]
```

----------------------------------------

TITLE: Centering Text in Vim - Vim
DESCRIPTION: Centers specified lines of text within Vim using the ':center' command. Optionally allows setting the width for centering, defaulting to 'textwidth' if not provided.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:1,5center 40
```

----------------------------------------

TITLE: Checking Python version in Neovim
DESCRIPTION: Commands to import the sys module and display the Python version information in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_8

LANGUAGE: viml
CODE:
```
:py3 import sys
:py3 print(sys.version)
```

----------------------------------------

TITLE: Confirm Dialog Example
DESCRIPTION: Demonstrates how to create an interactive dialog with multiple choices using the confirm() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_37

LANGUAGE: vim
CODE:
```
let choice = confirm("What do you want?",
			\ "&Apples\n&Oranges\n&Bananas", 2)
if choice == 0
	echo "make up your mind!"
elseif choice == 3
	echo "tasteful"
else
	echo "I prefer bananas myself."
endif
```

----------------------------------------

TITLE: C Code with Folding Markers Example
DESCRIPTION: Example of C code using folding markers to define collapsible sections. The markers use {{{ and }}} syntax to define fold boundaries.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_18

LANGUAGE: c
CODE:
```
/* foobar () {{{ */
int foobar()
{
    /* return a value {{{ */
    return 42;
    /* }}} */
}
/* }}} */
```

----------------------------------------

TITLE: Using prevnonblank() Function for Line Navigation in Vim
DESCRIPTION: Example of using prevnonblank() to find the nearest non-blank line above the current position. Commonly used in indent scripts to determine the indentation of the previous non-empty line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_189

LANGUAGE: vim
CODE:
```
let ind = indent(prevnonblank(v:lnum - 1))
```

----------------------------------------

TITLE: Automatic Clipboard Provider Reloading in Neovim
DESCRIPTION: Function to automatically reload the clipboard provider when g:clipboard changes using dictwatcheradd.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
function! s:clipboard_changed(...) abort
  if exists('g:loaded_clipboard_provider')
    unlet g:loaded_clipboard_provider
  endif
  runtime autoload/provider/clipboard.vim
endfunction

if !exists('s:loaded")
  call dictwatcheradd(g:, 'clipboard', function('s:clipboard_changed'))
endif
let s:loaded = v:true
```

----------------------------------------

TITLE: Ascii Value and Hex Display Command - Vim
DESCRIPTION: This snippet demonstrates the usage of the 'ga' command in Neovim to print the ASCII value of the character under the cursor. It includes additional details on how to interpret the displayed values in decimal, hexadecimal, and octal formats, as well as information on dealing with non-standard ASCII characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
ga		Print the ascii value of the character under the cursor in decimal, hexadecimal and octal.
		Mnemonic: Get Ascii value.
```

----------------------------------------

TITLE: Defining a Comment region with character offsets in Vim
DESCRIPTION: Example of using character offsets to exclude delimiters from highlighting. This defines a Comment region where the '/*' and '*/' delimiters are not included in the highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_164

LANGUAGE: vim
CODE:
```
:syntax region Comment start="/\*"hs=e+1 end="\*/"he=s-1
```

----------------------------------------

TITLE: Using searchpos() in Neovim (Vimscript)
DESCRIPTION: This snippet shows how to use searchpos() to find the position of a pattern match and store the result in variables. It also demonstrates using the 'p' flag to get sub-pattern match information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_223

LANGUAGE: vim
CODE:
```
let [lnum, col] = searchpos('mypattern', 'n')
```

LANGUAGE: vim
CODE:
```
let [lnum, col, submatch] = searchpos('\(\l\)\|\(\u\)', 'np')
```

----------------------------------------

TITLE: Retrieving System Time with uv.gettimeofday()
DESCRIPTION: Cross-platform implementation of the gettimeofday(2) system call that returns the seconds and microseconds of Unix time as a pair of integers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_84

LANGUAGE: lua
CODE:
```
uv.gettimeofday()
```

----------------------------------------

TITLE: Navigating to First Quickfix Error
DESCRIPTION: Commands for displaying the first error in the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
:cr[ewind][!] [nr]
```

----------------------------------------

TITLE: Configuring Clipboard Provider in Neovim
DESCRIPTION: Configuration snippet for reloading the clipboard provider after changing settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
let g:clipboard = { 'name' : ... }
if exists('g:loaded_clipboard_provider')
  unlet g:loaded_clipboard_provider
  runtime autoload/provider/clipboard.vim
endif
```

----------------------------------------

TITLE: Setting Default Shell Type to POSIX Shell
DESCRIPTION: Configuring Vim to use POSIX shell syntax highlighting as the default for shell scripts when the shell type cannot be determined automatically.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_115

LANGUAGE: vim
CODE:
```
let g:is_posix     = 1
```

----------------------------------------

TITLE: Trigonometric Function Examples
DESCRIPTION: Demonstrates usage of atan() and atan2() mathematical functions
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
echo atan(100)
echo atan(-4.01)
echo atan2(-1, 1)
echo atan2(1, -1)
```

----------------------------------------

TITLE: Vim For Loop with List Modification
DESCRIPTION: Demonstrates for loop usage with list manipulation and copy operations
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_103

LANGUAGE: vim
CODE:
```
:for item in copy(mylist)

for item in mylist
   call remove(mylist, 0)
endfor
```

----------------------------------------

TITLE: Argument List Commands in Vim
DESCRIPTION: Commands for manipulating and navigating through the argument list, including displaying arguments, writing files with navigation, and opening files in current or new windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
:ar[gs]              print the argument list, with the current file in "[]"
:all  or :sall       open a window for every file in the arg list
:wn[ext][!]          write file and edit next file
:wn[ext][!] {file}   write to {file} and edit next file, unless {file} exists; With !, overwrite existing file
:wN[ext][!] [file]   write file and edit previous file

# in current window    in new window
:argu[ment] N         :sar[gument] N      edit file N
:n[ext]               :sn[ext]           edit next file
:n[ext] {arglist}     :sn[ext] {arglist} define new arg list and edit first file
:N[ext]               :sN[ext]           edit previous file
:fir[st]              :sfir[st]          edit first file
:la[st]               :sla[st]           edit last file
```

----------------------------------------

TITLE: Defining a Custom Post-Compiler Command for SpotBugs
DESCRIPTION: Creates a custom function for handling post-compiler commands in SpotBugs and assigns it to the DefaultPostCompilerCommand property.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_48

LANGUAGE: vim
CODE:
```
function! GenericPostCompilerCommand(arguments) abort
	execute 'make ' . a:arguments
endfunction

let g:spotbugs_properties = {
	\ 'DefaultPostCompilerCommand':
		\ function('GenericPostCompilerCommand'),
\ }
```

----------------------------------------

TITLE: Reading from Standard Input in Vim
DESCRIPTION: This snippet demonstrates how to edit output from a shell command directly in Vim by using standard input. It shows how to leverage the '-' argument for editing streamed data.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_4

LANGUAGE: Vim
CODE:
```
ls | vim -
```

----------------------------------------

TITLE: Finding global identifiers with included files (Vim)
DESCRIPTION: This snippet shows how to find the declaration of an identifier (variable, function, etc.) in the current file and all included files using the `[I` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
"[I"
```

----------------------------------------

TITLE: Creating a new UDP handle in Lua
DESCRIPTION: Creates and initializes a new UDP handle. The function accepts optional flags to specify the address family and number of messages to receive at once.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_38

LANGUAGE: lua
CODE:
```
uv.new_udp([{flags}])
```

----------------------------------------

TITLE: Mapping CTRL-H to <Home> in Vim
DESCRIPTION: Examples of mapping CTRL-H to the <Home> key using different escape techniques in Vim configuration. Demonstrates how to use key notation and escaping special characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:imap <C-H> \<Home>
```

LANGUAGE: vim
CODE:
```
:imap <C-H> <lt>Home>
```

----------------------------------------

TITLE: Writing and Quitting Commands in Vim
DESCRIPTION: Commands for saving files, appending to files, executing commands with file content as input, and exiting Vim with various options for handling unsaved changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
:[range]w[rite][!]                  write to the current file
:[range]w[rite] {file}              write to {file}, unless it already exists
:[range]w[rite]! {file}             write to {file}.  Overwrite an existing file
:[range]w[rite][!] >>                append to the current file
:[range]w[rite][!] >> {file}         append to {file}
:[range]w[rite] !{cmd}               execute {cmd} with [range] lines as standard input
:[range]up[date][!]                  write to current file if modified
:wa[ll][!]                           write all changed buffers

:q[uit]                              quit current buffer, unless changes have been made
:q[uit]!                             quit current buffer always, discard any changes
:qa[ll]                              exit Vim, unless changes have been made
:qa[ll]!                             exit Vim always, discard any changes
:cq                                  quit without writing and return error code

:wq[!]                               write the current file and exit
:wq[!] {file}                        write to {file} and exit
```

----------------------------------------

TITLE: Closing Quickfix or Location List Windows in Vim Script
DESCRIPTION: These commands close the quickfix or location list windows to free up the display. They provide cleanup and manageable ways to toggle visibility of error and location lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_30

LANGUAGE: vimscript
CODE:
```
:ccl[ose]   Close the quickfix window.
:lcl[ose]   Close the window showing the location list for the current window.
```

----------------------------------------

TITLE: Switch Visual Selection End Point in Neovim
DESCRIPTION: This command switches the active end of the highlighted text, making the current cursor position the new start and moving the cursor to the opposite end, while keeping the selected area consistent.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
"o"
```

----------------------------------------

TITLE: Vim Syntax Utility Scripts
DESCRIPTION: Utility scripts for HTML conversion, color testing, highlight inspection, and whitespace visualization in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/syntax/README.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
2html.vim      # Converts highlighted file to HTML
colortest.vim  # Check color names and screen display
hitest.vim     # View current highlight settings
whitespace.vim # View Tabs and Spaces
```

----------------------------------------

TITLE: Regex Engine Selection in Vim
DESCRIPTION: Shows syntax for forcing specific regex engine selection in patterns
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
\%#=0
\%#=1
\%#=2
```

----------------------------------------

TITLE: File System Write Operation in Lua
DESCRIPTION: Writes data to a file descriptor at optional offset. Equivalent to pwritev(2). Returns number of bytes written.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_48

LANGUAGE: lua
CODE:
```
uv.fs_write({fd}, {data} [, {offset} [, {callback}]])
```

----------------------------------------

TITLE: Configuring Ruler Format in Vim
DESCRIPTION: Example showing how to set a custom ruler format with a specific width of 15 characters. This ruler will display the cursor's column position, virtual column position, and the file position as a percentage.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_56

LANGUAGE: vim
CODE:
```
set rulerformat=%15(%c%V\ %p%%%)
```

----------------------------------------

TITLE: Vim Register Mapping Command
DESCRIPTION: Disables middle mouse button paste functionality in both normal and insert modes to prevent accidental pasting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:map <MiddleMouse> <Nop>
:imap <MiddleMouse> <Nop>
```

----------------------------------------

TITLE: Setting file suffixes priority in Vim
DESCRIPTION: Configures the 'suffixes' option to set priority for files with specific extensions when multiple files match a wildcard.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_72

LANGUAGE: vim
CODE:
```
set suffixesadd=.java
```

----------------------------------------

TITLE: Using fnamemodify() Function in Vim Script
DESCRIPTION: Demonstrates the fnamemodify() function which modifies a file name according to the specified modifiers. In this example, it extracts the directory path (:p:h) of a file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_76

LANGUAGE: vim
CODE:
```
echo fnamemodify("main.c", ":p:h")
```

----------------------------------------

TITLE: Configuring HTML Syntax Synchronization Lines
DESCRIPTION: This snippet allows configuration of the number of lines Vim synchronizes syntax to before the first displayed line. Set the 'html_minlines' variable to the desired number in your vimrc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_54

LANGUAGE: vim
CODE:
```
	:let html_minlines = 500
```

----------------------------------------

TITLE: Checking the File Format in Vim
DESCRIPTION: This command displays the current value of the 'fileformat' option, showing which file format Vim has detected for the currently edited file. It's useful for verifying that Vim has correctly identified the file format (e.g., unix, dos, mac).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
	:set fileformat?
```

----------------------------------------

TITLE: Defining Vim Syntax Cluster Groups
DESCRIPTION: Examples showing how to define and use syntax clusters to group related syntax items
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_170

LANGUAGE: vim
CODE:
```
:syntax match Thing "# [^#]\+ #" contains=@ThingMembers
:syntax cluster ThingMembers contains=ThingMember1,ThingMember2
```

----------------------------------------

TITLE: Customizing Syntax Colors in Vim
DESCRIPTION: Example of customizing syntax highlighting colors for comments
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:highlight Comment ctermfg=green guifg=green
```

----------------------------------------

TITLE: Setting Language for Menus in Vim - Vimscript
DESCRIPTION: This code snippet shows how to set the language for menus in Vim. You can switch to English menus or specify a different language using the 'langmenu' option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_1

LANGUAGE: Vim
CODE:
```
:set langmenu=none
```

LANGUAGE: Vim
CODE:
```
:set langmenu=nl_NL.ISO_8859-1
```

LANGUAGE: Vim
CODE:
```
:source $VIMRUNTIME/delmenu.vim
```

LANGUAGE: Vim
CODE:
```
:set langmenu=de_DE.ISO_8859-1
```

LANGUAGE: Vim
CODE:
```
:source $VIMRUNTIME/menu.vim
```

----------------------------------------

TITLE: Search Range Examples in Vim
DESCRIPTION: Examples of using search() with stopline parameter to restrict search range to visible window area
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_213

LANGUAGE: vim
CODE:
```
let match = search('(', 'b', line("w0"))
let end = search('END', '', line("w$"))
```

----------------------------------------

TITLE: Opening Help in a New Tab
DESCRIPTION: Shows how to open a help topic in a new tab page. This command opens the help for 'gt' in a new tab.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_29

LANGUAGE: vim
CODE:
```
:tab help gt
```

----------------------------------------

TITLE: Adding Menu Entries with Script-Local Functions in Vim
DESCRIPTION: Example of creating a menu entry that calls a script-local function using <SID> prefix.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_36

LANGUAGE: vim
CODE:
```
noremenu <script> Plugin.Add\ Correction      <SID>Add
```

----------------------------------------

TITLE: Copying Plugin to Global Plugin Directory - Vim
DESCRIPTION: This snippet demonstrates the command used to copy a plugin file into the global plugin directory, allowing for immediate use of its functionality within Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_7

LANGUAGE: Vim
CODE:
```
cp /tmp/yourplugin.vim ~/.local/share/nvim/site/plugin
```

----------------------------------------

TITLE: Finding local identifiers in the current file (Vim)
DESCRIPTION: This snippet shows how to search for the first place where the word under the cursor is used in the current file using the `gD` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_33

LANGUAGE: vim
CODE:
```
"gD"
```

----------------------------------------

TITLE: Enabling PL/SQL Folding in Neovim
DESCRIPTION: This command sets the `g:plsql_fold` variable to `1`, enabling syntax folding for PL/SQL filetypes. Requires the plsql plugin to be installed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_28

LANGUAGE: vim
CODE:
```
	:let g:plsql_fold = 1
```

----------------------------------------

TITLE: Customizing Window Highlighting in Neovim
DESCRIPTION: This VimL snippet shows how to use the 'winhighlight' option to set different highlight groups for active and non-active windows. It overrides the Normal highlight group with custom highlight groups MyNormal and MyNormalNC.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_86

LANGUAGE: viml
CODE:
```
set winhighlight=Normal:MyNormal,NormalNC:MyNormalNC
```

----------------------------------------

TITLE: Resetting Syntax Highlighting to Defaults
DESCRIPTION: Command to reset syntax highlighting colors to their defaults. Note that this affects only colors, not syntax items, and will override colors from your vimrc and color schemes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_203

LANGUAGE: vim
CODE:
```
:syntax reset
```

----------------------------------------

TITLE: File Operation Events in Neovim
DESCRIPTION: Documents events related to file operations like FileAppendCmd, FileReadCmd, FileWriteCmd, and their Pre/Post variants.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
FileAppendCmd
FileAppendPost
FileAppendPre
FileReadCmd
FileReadPost
FileReadPre
FileWriteCmd
FileWritePost
FileWritePre
```

----------------------------------------

TITLE: Printf Positional Arguments Examples in Vim
DESCRIPTION: Shows how to use positional arguments in printf to control argument order and formatting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_194

LANGUAGE: vim
CODE:
```
echo printf("In The Netherlands, vim's creator's name is: %1$s %2$s", "Bram", "Moolenaar")
```

LANGUAGE: vim
CODE:
```
echo printf("In Belgium, vim's creator's name is: %2$s %1$s", "Bram", "Moolenaar")
```

----------------------------------------

TITLE: Generating Local Tags for Help Files - Vim
DESCRIPTION: This snippet describes how to generate a local tags file for a help file associated with a plugin, making it easier to navigate to the relevant documentation within Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_10

LANGUAGE: Vim
CODE:
```
:helptags ~/.local/share/nvim/site/doc
```

----------------------------------------

TITLE: Disabling TreeSitter Query Capture in Lua
DESCRIPTION: Demonstrates how to disable a specific capture in a TreeSitter query. This example disables the @variable.parameter capture in the vimdoc highlights query.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_30

LANGUAGE: lua
CODE:
```
local query = vim.treesitter.query.get('vimdoc', 'highlights')
query.query:disable_capture("variable.parameter")
vim.treesitter.get_parser():parse()
```

----------------------------------------

TITLE: Autocommand with Home Directory in Vimscript
DESCRIPTION: This demonstrates how to use `~` to represent the home directory in an autocommand pattern. The first autocommand sources the `init.vim` file after it's written and the second set a file as readonly when the user try to open file under the `~archive/*` path.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
 ":autocmd BufWritePost ~/.config/nvim/init.vim   so <afile>\n\t:autocmd BufRead ~archive/*      set readonly"
```

----------------------------------------

TITLE: Enabling Folding for Baan Syntax in Vim
DESCRIPTION: This snippet demonstrates how to enable syntax folding for Baan code in Vim. By setting specific variables in the init.vim, developers can enable folding at function, block, and SQL levels. It notes that some folding can be CPU intensive if complex levels are enabled.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_8

LANGUAGE: Vim Script
CODE:
```
:let baan_fold=1
:let baan_fold_block=1
:let baan_fold_sql=1
```

----------------------------------------

TITLE: Using doautoall with Autocommand Groups in Vim
DESCRIPTION: Example demonstrating how doautoall applies autocommands to all loaded buffers, showing the relationship between the autocommand pattern and buffer application.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_29

LANGUAGE: viml
CODE:
```
augroup mine
  autocmd!
  autocmd FileType * echo expand('<amatch>')
augroup END
doautoall mine FileType Loaded-Buffer
```

----------------------------------------

TITLE: Starting Vim Commands and Options
DESCRIPTION: Command-line options for starting Vim, including file specification, view options, recovery, swap settings, and script handling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
vim [options] {file} ..   start editing one or more files
vim [options] -           read file from stdin
vim [options] -t {tag}    edit the file associated with {tag}
vim [options] -q [fname]  start editing in QuickFix mode, display the first error

+[num]              put the cursor at line [num] (default: last line)
+{command}          execute {command} after loading the file
+/{pat} {file} ..   put the cursor at the first occurrence of {pat}
-e                  Ex mode, start vim in Ex mode
-R                  Read-only mode, implies -n
-m                  modifications not allowed (resets 'write' option)
-d                  diff-mode
-b                  binary mode
-l                  lisp mode
-A                  Arabic mode ('arabic' is set)
-H                  Hebrew mode (Hebrew keymap & 'rightleft' are set)
-V                  Verbose, give informative messages
-r                  give list of swap files
-r {file} ..        recover aborted edit session
-n                  do not create a swap file
-o [num]            open [num] windows (default: one for each file)
-s {scriptin}       first read commands from the file {scriptin}
-w {scriptout}      write typed chars to file {scriptout} (append)
-W {scriptout}      write typed chars to file {scriptout} (overwrite)
-u {vimrc}          read inits from {vimrc} instead of other inits
-i {shada}          read info from {shada} instead of other files
--                  end of options, other arguments are file names
--help              show list of arguments and exit
--version           show version info and exit
-                   read file from stdin
```

----------------------------------------

TITLE: Using globpath with list return format in Vim
DESCRIPTION: Example of using globpath() with the list return format (fourth parameter set to 1) to get results as a Vim List rather than a newline-separated string.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_115

LANGUAGE: vim
CODE:
```
echo globpath(&rtp, "syntax/c.vim", 0, 1)
```

----------------------------------------

TITLE: Enabling Doxygen Syntax Highlighting for C/C++/PHP Files
DESCRIPTION: Configures Vim to automatically apply Doxygen syntax highlighting to C, C++, C#, IDL, and PHP files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_27

LANGUAGE: VimScript
CODE:
```
let g:load_doxygen_syntax=1
```

----------------------------------------

TITLE: Creating Folds for C-style Comments in Vim
DESCRIPTION: An example of using fold level changes to create folds for multi-line C comments. The expression uses 'a1' to start a fold when a '/*' is found and 's1' to end the fold after a line containing '*/'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
if match(thisline, '/\*') >= 0
  return 'a1'
elseif match(thisline, '\*/') >= 0
  return 's1'
else
  return '='
endif
```

----------------------------------------

TITLE: Checking Variable Existence in VimL
DESCRIPTION: Demonstrates the use of the exists() function to check for a variable's existence and conditionally assign a value if it's undefined. It ensures that variables maintain continuity throughout various script executions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_5

LANGUAGE: VimL
CODE:
```
:if !exists("s:call_count")
:  let s:call_count = 0
:endif
:let s:call_count = s:call_count + 1
:echo "called" s:call_count "times"
```

----------------------------------------

TITLE: For Loop Over String Characters in Vim
DESCRIPTION: Demonstrates iterating over each character in a string using a for loop.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_39

LANGUAGE: vim
CODE:
```
for c in text
  echo 'This character is ' .. c
endfor
```

----------------------------------------

TITLE: Setting variable tab width in Vim
DESCRIPTION: Example of configuring vartabstop to define different widths for each tab position, making the first tab 4 spaces wide, second 20 spaces, third 10 spaces, and all subsequent tabs 8 spaces.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_78

LANGUAGE: viml
CODE:
```
set vartabstop=4,20,10,8
```

----------------------------------------

TITLE: Exception Hierarchy Implementation
DESCRIPTION: Demonstrates implementing exception hierarchies and parameterized exceptions in Vim script with mathematical and I/O error handling examples.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_140

LANGUAGE: vim
CODE:
```
:function! CheckRange(a, func)
:  if a:a < 0
:    throw "EXCEPT:MATHERR:RANGE(" .. a:func .. ")"
:  endif
:endfunction

:function! Add(a, b)
:  call CheckRange(a:a, "Add")
:  call CheckRange(a:b, "Add")
:  let c = a:a + a:b
:  if c < 0
:    throw "EXCEPT:MATHERR:OVERFLOW"
:  endif
:  return c
:endfunction

:function! Div(a, b)
:  call CheckRange(a:a, "Div")
:  call CheckRange(a:b, "Div")
:  if (a:b == 0)
:    throw "EXCEPT:MATHERR:ZERODIV"
:  endif
:  return a:a / a:b
:endfunction

:function! Write(file)
:  try
:    execute "write" fnameescape(a:file)
:  catch /^Vim(write):/
:    throw "EXCEPT:IO(" .. getcwd() .. ", " .. a:file .. "):WRITEERR"
:  endtry
:endfunction
```

----------------------------------------

TITLE: Using maparg() Function to Remap Keys in Vim
DESCRIPTION: Shows how to use the maparg() function to retrieve an existing key mapping and use it to create a new mapping that includes the original functionality.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_157

LANGUAGE: vim
CODE:
```
exe 'nnoremap <Tab> ==' .. maparg('<Tab>', 'n')
```

----------------------------------------

TITLE: Configuring Verilog Indentation in Vim
DESCRIPTION: This snippet provides configuration for Verilog code indentation in Vim. By setting the 'b:verilog_indent_modules' variable, users can enable or disable indentation for module blocks. Additional autocmd statements demonstrate applying these settings selectively for Verilog files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_13

LANGUAGE: VimL
CODE:
```
let b:verilog_indent_modules = 1
:unlet b:verilog_indent_modules
au BufReadPost * if exists("b:current_syntax")
au BufReadPost *   if b:current_syntax == "verilog"
au BufReadPost *     let b:verilog_indent_modules = 1
au BufReadPost *   endif
au BufReadPost * endif
```

----------------------------------------

TITLE: Using fnameescape() Function in Vim Script
DESCRIPTION: Demonstrates the fnameescape() function which escapes special characters in a string to make it safe for use as a filename in commands. Characters like %, |, spaces, and others are escaped with backslashes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_75

LANGUAGE: vim
CODE:
```
let fname = '+some str%nge|name'
exe "edit " .. fnameescape(fname)
```

LANGUAGE: vim
CODE:
```
edit \+some\ str\%nge\|name
```

----------------------------------------

TITLE: Ruby VIM Module Usage Examples
DESCRIPTION: Provides examples of using the VIM module in Ruby to interact with Neovim, including executing commands, accessing windows and buffers, and manipulating text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_ruby.txt#2025-04-20_snippet_3

LANGUAGE: ruby
CODE:
```
print "Hello"                        # displays a message
VIM.command(cmd)                    # execute an Ex command
num = VIM::Window.count             # gets the number of windows
w = VIM::Window[n]                  # gets window "n"
cw = VIM::Window.current            # gets the current window
num = VIM::Buffer.count             # gets the number of buffers
b = VIM::Buffer[n]                  # gets buffer "n"
cb = VIM::Buffer.current            # gets the current buffer
w.height = lines                    # sets the window height
w.cursor = [row, col]               # sets the window cursor position
pos = w.cursor                      # gets an array [row, col]
name = b.name                       # gets the buffer file name
line = b[n]                         # gets a line from the buffer
num = b.count                       # gets the number of lines
b[n] = str                          # sets a line in the buffer
b.delete(n)                         # deletes a line
b.append(n, str)                    # appends a line after n
line = VIM::Buffer.current.line     # gets the current line
num = VIM::Buffer.current.line_number # gets the current line number
VIM::Buffer.current.line = "test"   # sets the current line number
```

----------------------------------------

TITLE: Configuring Syntax Sync with ccomment in Vim
DESCRIPTION: This snippet demonstrates how to configure syntax syncing using the 'ccomment' argument in Vim. It sets up syncing for C-style comments, with an option to specify an alternate group name.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_176

LANGUAGE: viml
CODE:
```
:syntax sync ccomment

:syntax sync ccomment javaComment
```

----------------------------------------

TITLE: Exiting Vim Commands
DESCRIPTION: Commands for exiting Vim with various behaviors for saving changes. Includes commands like :xit, ZZ, ZQ, and options for writing all buffers when exiting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
:x[it][!] [file]     # like ":wq" but write only when changes have been made
ZZ                  # same as ":x"
ZQ                  # same as ":q!"
:xa[ll][!]  or :wqall[!]  # write all changed buffers and exit
:st[op][!]         # suspend Vim or start new shell
CTRL-Z             # same as ":stop"
```

----------------------------------------

TITLE: Setting Window Variables in Vim
DESCRIPTION: Examples of using settabwinvar() and setwinvar() functions to set window-specific variables and options in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_231

LANGUAGE: vim
CODE:
```
call settabwinvar(1, 1, "&list", 0)
call settabwinvar(3, 2, "myvar", "foobar")
```

LANGUAGE: vim
CODE:
```
call setwinvar(1, "&list", 0)
call setwinvar(2, "myvar", "foobar")
```

----------------------------------------

TITLE: Starting Nvim Server Example
DESCRIPTION: Example command showing how to start an Nvim server listening on a named pipe at a specific location.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/remote.txt#2025-04-20_snippet_0

LANGUAGE: bash
CODE:
```
nvim --listen ~/.cache/nvim/server.pipe
```

----------------------------------------

TITLE: VimLeave Autocommand with Dying Check in Neovim VimL
DESCRIPTION: This snippet shows an autocommand that checks if Vim is terminating abnormally using the v:dying variable. It echoes a message if a deadly signal was caught.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
:au VimLeave * if v:dying | echo "\nAAAAaaaarrrggghhhh!!!\n" | endif
```

----------------------------------------

TITLE: Remote File Editing Example
DESCRIPTION: Example command demonstrating how to edit a file in a remote Nvim server instance using the --remote flag.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/remote.txt#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
nvim --server ~/.cache/nvim/server.pipe --remote file.txt
```

----------------------------------------

TITLE: Inserting Items in Lists or Blobs in Vim
DESCRIPTION: Demonstrates how to use the insert() function to add elements to a List or Blob. The function inserts an item either at the start of the list (default), before a specific index, or at a specific position using a negative index.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_138

LANGUAGE: vim
CODE:
```
let mylist = insert([2, 3, 5], 1)
call insert(mylist, 4, -1)
call insert(mylist, 6, len(mylist))
```

----------------------------------------

TITLE: Syntax Cluster Definition in Vim
DESCRIPTION: Shows how to create and use syntax clusters to group related syntax elements.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
:syntax cluster xState contains=xNumber,xIdent
:syntax match xFor /^for.*/ contains=@xState
:syntax match xIf /^if.*/ contains=@xState
:syntax match xWhile /^while.*/ contains=@xState
```

----------------------------------------

TITLE: Combined Concat Pattern Example in Vim
DESCRIPTION: Shows a pattern that matches lines containing both specified strings
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
.*Peter\&.*Bob
```

----------------------------------------

TITLE: Typing Unicode Characters in Vim
DESCRIPTION: Demonstrates how to input Unicode characters using hexadecimal notation when system input methods do not support UTF-8 directly.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
CTRL-V u 1234
```

----------------------------------------

TITLE: Deleting Variables in VimL
DESCRIPTION: Illustrates how to delete a variable using the :unlet command to free up memory. Includes an example using script-local variable deletion with an optional bang (!) to avoid errors if the variable does not exist.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_4

LANGUAGE: VimL
CODE:
```
:unlet s:count
:unlet! s:count
```

----------------------------------------

TITLE: File System Read Operation in Lua
DESCRIPTION: Reads data from a file descriptor with specified size and optional offset. Equivalent to preadv(2). Returns read data or empty string for EOF.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_47

LANGUAGE: lua
CODE:
```
uv.fs_read({fd}, {size} [, {offset} [, {callback}]])
```

----------------------------------------

TITLE: Setting Diff Context Lines (VimL)
DESCRIPTION: Command to set the number of context lines shown around differences in diff mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
:set diffopt=filler,context:3
```

----------------------------------------

TITLE: Setting a Highlight Group - Lua
DESCRIPTION: Updates or creates a highlight group definition in Neovim. Unlike the :highlight command, this function completely replaces existing definitions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_21

LANGUAGE: lua
CODE:
```
nvim_set_hl({ns_id}, {name}, {val})
```

----------------------------------------

TITLE: Retrieving System Memory Information with LibUV in Lua
DESCRIPTION: Functions for querying available system memory. Includes methods to get free memory, constrained memory, and available memory to the process in bytes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_77

LANGUAGE: lua
CODE:
```
uv.get_constrained_memory()                        *uv.get_constrained_memory()*
```

LANGUAGE: lua
CODE:
```
uv.get_available_memory()                            *uv.get_available_memory()*
```

LANGUAGE: lua
CODE:
```
uv.resident_set_memory()                              *uv.resident_set_memory()*
```

----------------------------------------

TITLE: Configuring Ruby Syntax Highlighting Options in Vim
DESCRIPTION: Controls operator highlighting, whitespace error detection, code folding, performance optimizations, and string spellchecking for Ruby files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_108

LANGUAGE: vim
CODE:
```
let ruby_operators = 1
let ruby_space_errors = 1
let ruby_fold = 1
let ruby_foldable_groups = 'if case %'
let ruby_no_expensive = 1
let ruby_minlines = 100
let ruby_spellcheck_strings = 1
```

----------------------------------------

TITLE: Configuring PApp Syntax HTML Inclusion
DESCRIPTION: Enables HTML syntax highlighting inside phtml sections of PApp files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_95

LANGUAGE: vim
CODE:
```
:let papp_include_html=1
```

----------------------------------------

TITLE: Configuring Wildcharm for Mapped Completions
DESCRIPTION: Sets up wildcharm for use in mappings that invoke completion mode, with an example of session file completion mapping.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_81

LANGUAGE: vim
CODE:
```
set wcm=<C-Z>
cnoremap ss so $vim/sessions/*.vim<C-Z>
```

----------------------------------------

TITLE: Navigating Changes in Diff Mode
DESCRIPTION: Demonstrates commands for jumping between changes in diff mode. These commands allow quick navigation to next and previous differences.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
]c
[c
```

----------------------------------------

TITLE: Starting Function Profiling in Vim/Neovim
DESCRIPTION: Commands to start profiling and direct the output to a temporary file. This snippet demonstrates how to begin profiling a specific function named MyFunc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_28

LANGUAGE: vim
CODE:
```
profile start /tmp/vimprofile
profile func MyFunc
```

----------------------------------------

TITLE: Controlling Search Wrapping in Vim
DESCRIPTION: Command to disable search wrapping in Vim. When disabled, searches will stop at the end or beginning of the file instead of wrapping around to continue from the opposite end.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:set nowrapscan
```

----------------------------------------

TITLE: Example Usage of Grepadd with Bufdo in Vim
DESCRIPTION: This Vim script demonstrates how to use the `grepadd!` command in conjunction with `bufdo` to grep through all buffers. The `setqflist([])` command ensures an empty error list, and the `try`/`catch` block handles the `E480` error that might occur if a file does not contain a match.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_34

LANGUAGE: vim
CODE:
```
:call setqflist([])
:bufdo grepadd! something %

```

----------------------------------------

TITLE: Obtaining Function Name from Funcref in Vimscript
DESCRIPTION: This snippet shows how to obtain the name of the function referenced by a Funcref using the `string()` function. This returns the function name as a string.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
	:let func = string(Fn)
```

----------------------------------------

TITLE: Command Expansion with expandcmd()
DESCRIPTION: Examples showing how to use expandcmd() to expand special items in command strings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_63

LANGUAGE: vim
CODE:
```
echo expandcmd('make %<.o')
```

LANGUAGE: vim
CODE:
```
echo expandcmd('make %<.o', {'errmsg': v:true})
```

----------------------------------------

TITLE: Setting guifont for GUI Vim
DESCRIPTION: Configures the 'guifont' option to set the font used in GUI Vim. This example sets multiple font options, allowing Vim to try each font in order until a valid one is found.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_24

LANGUAGE: viml
CODE:
```
set guifont=Screen15,\ 7x13,font\,with\,commas
```

----------------------------------------

TITLE: String to Number Conversion in Vimscript
DESCRIPTION: This demonstrates string to number conversion in Vimscript. If a string starts with digits, those digits are converted to a number. If the string does not start with digits, the result is zero.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
	String "456"	-->	Number 456 ~
	String "6bar"	-->	Number 6 ~
	String "foo"	-->	Number 0 ~
	String "0xf1"	-->	Number 241 ~
	String "0100"	-->	Number 64 ~
	String "0o100"	-->	Number 64 ~
	String "0b101"	-->	Number 5 ~
	String "-8"	-->	Number -8 ~
	String "+8"	-->	Number 0 ~
```

----------------------------------------

TITLE: Search Count Status Line Integration
DESCRIPTION: Function to display search match counts in the status line with various formatting options
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_216

LANGUAGE: vim
CODE:
```
function! LastSearchCount() abort
  let result = searchcount(#{recompute: 0})
  if empty(result)
    return ''
  endif
  if result.incomplete ==# 1     " timed out
    return printf(' /%s [?/??]', @/)
  elseif result.incomplete ==# 2 " max count exceeded
    if result.total > result.maxcount &&
    \  result.current > result.maxcount
      return printf(' /%s [>%d/>%d]', @/,
      \             result.current, result.total)
    elseif result.total > result.maxcount
      return printf(' /%s [%d/>%d]', @/,
      \             result.current, result.total)
    endif
  endif
  return printf(' /%s [%d/%d]', @/,
  \             result.current, result.total)
endfunction
let &statusline ..= '%{LastSearchCount()}'
```

----------------------------------------

TITLE: Accessing Netrw Internal Variables with Expose Function
DESCRIPTION: Example of using netrw#Expose() to access internal netrw script-local variables, specifically retrieving the marked file list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_50

LANGUAGE: vim
CODE:
```
let netrwmarkfilelist= netrw#Expose("netrwmarkfilelist")
```

----------------------------------------

TITLE: Basic Errorformat Pattern Example - Python
DESCRIPTION: Error format pattern for parsing Python test failure output, capturing file path, line number and error message.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_61

LANGUAGE: vim
CODE:
```
:set efm=%C\ %.%#,%A\ \ File\ \"%f"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
```

----------------------------------------

TITLE: Scrolling Upwards in Vim
DESCRIPTION: Commands to move the edit window upwards in the buffer, showing more lines above. Includes CTRL-Y, CTRL-U, PageUp, CTRL-B, and z^ commands with their behaviors.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
CTRL-Y          Scroll window [count] lines upwards in the buffer.
CTRL-U          Scroll window Upwards in the buffer.
<S-Up> or <PageUp> or CTRL-B    Scroll window [count] pages Backwards.
z^              Redraw with line above window at the bottom.
```

----------------------------------------

TITLE: Checking for unfound include files (Vim)
DESCRIPTION: This snippet shows how to check for included files that cannot be found in the 'path' option using the `:checkpath` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
":checkpath"
```

----------------------------------------

TITLE: Basic Exception Propagation Example in Vim Script
DESCRIPTION: Demonstrates how exceptions propagate to the caller of a command, showing that when an exception is thrown in a function called from a conditional, neither branch of the conditional is executed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_122

LANGUAGE: vim
CODE:
```
:if Foo("arrgh")
:  echo "then"
:else
:  echo "else"
:endif
```

----------------------------------------

TITLE: Checking If Buffer is Listed in Neovim using Vim Script
DESCRIPTION: The 'buflisted' function determines if a buffer is listed and returns 1 if it is, otherwise returns 0, using a similar argument structure as 'bufexists'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
buflisted({buf})
```

----------------------------------------

TITLE: Setting C++ Style Comments in Vim
DESCRIPTION: Configures Vim to recognize C++ style single-line comments starting with //
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
:set comments=://
```

----------------------------------------

TITLE: Setting Diff Context for Fold Display in Vim
DESCRIPTION: Configuration example for the 'diff' folding method that specifies the context (number of unchanged lines) to show around changes. This uses the diffopt option to set a context of 8 lines around each change.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:set diffopt=filler,context:8
```

----------------------------------------

TITLE: Viewing Neovim Log File Location
DESCRIPTION: Vim command to display the location of Neovim's log file using the NVIM_LOG_FILE environment variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
:echo $NVIM_LOG_FILE
```

----------------------------------------

TITLE: Clearing the quickfix list in Vim/Neovim
DESCRIPTION: Example of using setqflist() to clear the current quickfix list by passing an empty list with the 'r' (replace) action.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_226

LANGUAGE: viml
CODE:
```
call setqflist([], 'r')
```

----------------------------------------

TITLE: License Plate Pattern Matching
DESCRIPTION: Different approaches to match California license plate format with one digit, three uppercase letters, and three digits.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
/\d\u\u\u\d\d\d
/\d\u\{3}\d\{3}
/[0-9][A-Z]\{3}[0-9]\{3}
```

----------------------------------------

TITLE: Asserting Equality in Vimscript
DESCRIPTION: The assert_equal() function compares two values for equality. If they are not equal, it adds an error message to v:errors. This is useful for writing tests in Vimscript.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_9

LANGUAGE: vimscript
CODE:
```
call assert_equal('foo', 'bar', 'baz')
```

----------------------------------------

TITLE: Jumping to a numbered match in the [I list (Vim)
DESCRIPTION: This snippet shows how to jump to a specific numbered item in the list produced by `[I` by typing the number followed by `[<Tab>`.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_31

LANGUAGE: vim
CODE:
```
"3[<Tab>"
```

----------------------------------------

TITLE: Testing if an Option Exists in Vim Script
DESCRIPTION: Code snippets demonstrating how to test if an option is valid or supported in Vim script. The first checks if an option exists, while the second verifies if it's actually supported rather than hidden.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_9

LANGUAGE: viml
CODE:
```
if exists('&foo')
```

LANGUAGE: viml
CODE:
```
if exists('+foo')
```

----------------------------------------

TITLE: Working Directory Access in Vim
DESCRIPTION: Examples showing equivalent ways to get the current working directory using getcwd() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_90

LANGUAGE: vim
CODE:
```
getcwd(0)
getcwd(0, 0)
```

----------------------------------------

TITLE: Using Confirmation Dialog when Editing a New File in Vim
DESCRIPTION: This snippet demonstrates how to use the confirmation dialog when attempting to edit a new file while the current buffer has unsaved changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:confirm edit foo.txt
```

----------------------------------------

TITLE: Jumping to the next #else or #endif (Vim)
DESCRIPTION: This snippet shows how to jump forward to the next `#else` or `#endif` using the `]#` command, skipping any nested `#if` blocks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
"]#"
```

----------------------------------------

TITLE: Fortran Indent Configuration with Buffer Commands
DESCRIPTION: This snippet provides instructions for configuring indentation settings specific to Fortran code in Vim. It includes commands for setting buffer flags that dictate how loops and program units are indented based on file types.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_6

LANGUAGE: Vim
CODE:
```
let fortran_do_enddo=1
au! BufRead,BufNewFile *.f90 let b:fortran_do_enddo=1
```

----------------------------------------

TITLE: Vim List and Dictionary Manipulation
DESCRIPTION: Examples of unletting (removing) items from Lists and Dictionaries
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_100

LANGUAGE: vim
CODE:
```
:unlet list[3]	  " remove fourth item
:unlet list[3:]   " remove fourth item to last
:unlet dict['two']
:unlet dict.two
```

----------------------------------------

TITLE: Executing Commands Without Affecting Search History in Neovim
DESCRIPTION: This snippet demonstrates the :keeppatterns command, which allows executing a command without modifying the search history or last substitute pattern in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:keepp[atterns] {command}
```

----------------------------------------

TITLE: Conditional dot command execution
DESCRIPTION: This snippet conditionally executes a dot command based on a context. It gets the 'virtualedit' option from either a 'save' context or an 'a:context', depending on 'a:context.dot_command'. It then sets 'a:context.dot_command' to `v:true` within a `try...finally` block to ensure it's always set, even if an error occurs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_28

LANGUAGE: Vim Script
CODE:
```
let [&l:virtualedit, &g:virtualedit] = get(a:context.dot_command ? save : a:context, 'virtualedit')
let a:context.dot_command = v:true
```

----------------------------------------

TITLE: Setting the Make Program in Vim
DESCRIPTION: Commands to configure the program used by :make, allowing customization for different compilers and build systems.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:set makeprg=nmake
```

LANGUAGE: vim
CODE:
```
:set makeprg=nmake\ -f\ project.mak
```

LANGUAGE: vim
CODE:
```
:set makeprg=make\ %:S
```

LANGUAGE: vim
CODE:
```
:set makeprg=make\ %:r:S.o
```

----------------------------------------

TITLE: Mapping Rare Word Addition in Vim
DESCRIPTION: Example of mapping keys to add words as rare to the spell file and internal word list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_6

LANGUAGE: vimdoc
CODE:
```
nnoremap z?  :exe ':spellrare  ' .. expand('<cWORD>')<CR>
nnoremap z/  :exe ':spellrare! ' .. expand('<cWORD>')<CR>
```

----------------------------------------

TITLE: Optimizing color terminal performance in Neovim
DESCRIPTION: This code snippet shows how to optimize Neovim's performance in slow color terminals by preventing redundant drawing of whitespace. By setting the `NonText` highlight group's `cterm` and `ctermfg` attributes to `NONE`, the default colors are used, allowing Neovim to optimize drawing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
hi NonText cterm=NONE ctermfg=NONE
```

----------------------------------------

TITLE: Creating an unlisted buffer in Vim
DESCRIPTION: This command creates an unlisted buffer, which is not shown in the buffer list and is typically used for temporary purposes like showing help files or remembering file names or marks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_10

LANGUAGE: vimdoc
CODE:
```
:setlocal nobuflisted
```

----------------------------------------

TITLE: Limiting Sync Search Range in Vim
DESCRIPTION: This snippet demonstrates how to limit the number of lines searched for a sync point in Vim. It uses the 'maxlines' argument to restrict the search range.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_180

LANGUAGE: viml
CODE:
```
:syntax sync maxlines=100
```

----------------------------------------

TITLE: Modifying Option Values in Vim Filetype Plugins
DESCRIPTION: This example demonstrates how to modify option values that are lists of flags or items, preserving existing values and resetting to defaults first.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_46

LANGUAGE: vim
CODE:
```
:setlocal formatoptions& formatoptions+=ro
```

----------------------------------------

TITLE: Filtering Text Through External Program in Vim
DESCRIPTION: Using the '!' command to filter lines 1-5 through the external 'sort' program, replacing those lines with the sorted output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
!5Gsort
```

----------------------------------------

TITLE: Location List Diagnostic Handler
DESCRIPTION: Example of creating a handler to show diagnostics in the location list window
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_4

LANGUAGE: lua
CODE:
```
vim.diagnostic.handlers.loclist = {
  show = function(_, _, _, opts)
    opts.loclist.open = opts.loclist.open or false
    local winid = vim.api.nvim_get_current_win()
    vim.diagnostic.setloclist(opts.loclist)
    vim.api.nvim_set_current_win(winid)
  end
}

vim.diagnostic.config({
  loclist = {
    open = true,
    severity = { min = vim.diagnostic.severity.WARN },
  }
})
```

----------------------------------------

TITLE: Using File Browser with Split Command in Vim
DESCRIPTION: This snippet demonstrates how to use the file browser with the split command in Vim. The 'browse' keyword is prepended to the split command to open the file browser.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:browse split
```

----------------------------------------

TITLE: Creating DiffOrig Command
DESCRIPTION: Custom command to show differences between the current buffer and the original file
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
      \ | wincmd p | diffthis
```

----------------------------------------

TITLE: Basic Cinkeys Configuration for Emacs-style Indentation
DESCRIPTION: Example configuration for emacs-style indent mode where lines are only indented when pressing Tab instead of automatically on Enter
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:set cinkeys=0{,0},:,0#,!<Tab>,!^F
```

----------------------------------------

TITLE: Typical Netrw Tree Display Usage in Vim
DESCRIPTION: Demonstrates a common workflow for using Netrw's tree display, including opening files in split windows and navigating between Netrw and file windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
vim .
(use i until a tree display shows)
navigate to a file
v  (edit as desired in vertically split window)
ctrl-w h  (to return to the netrw listing)
P (edit newly selected file in the previous window)
ctrl-w h  (to return to the netrw listing)
P (edit newly selected file in the previous window)
...etc...
```

----------------------------------------

TITLE: Retrieving Tree for Range in LanguageTree (Lua)
DESCRIPTION: Gets the tree that contains a specified range. Takes a range table and optional settings as parameters. Returns a TSTree or nil.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_40

LANGUAGE: lua
CODE:
```
LanguageTree:tree_for_range({range}, {opts})
```

----------------------------------------

TITLE: Configuring SGML Rendering in Vim
DESCRIPTION: Setting a user-defined variable to enable custom SGML tag rendering. This allows users to redefine syntax highlighting groups for SGML tags.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_112

LANGUAGE: vim
CODE:
```
let sgml_my_rendering=1
```

----------------------------------------

TITLE: Configuring Custom Compiler Options for PyTest
DESCRIPTION: Example of setting custom command-line options for the PyTest testing framework, adding verbose output and suppressing summary and warnings in the output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_57

LANGUAGE: vim
CODE:
```
let b:pytest_makeprg_params = "--verbose --no-summary --disable-warnings"
```

----------------------------------------

TITLE: Setting matchpairs for Programming Languages
DESCRIPTION: Uses an autocommand to set matchpairs for C, C++, and Java files, adding the ability to jump between '=' and ';' in assignment statements with the % command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_51

LANGUAGE: viml
CODE:
```
au FileType c,cpp,java set mps+==:;
```

----------------------------------------

TITLE: Changing Case to Uppercase in Vim
DESCRIPTION: Uses the 'gU' operator with 'w' motion to convert the current word to uppercase.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
gUw
```

----------------------------------------

TITLE: Disabling Vim Filetype Plugin Mappings
DESCRIPTION: Configuration to disable default mappings for Vim filetype
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_40

LANGUAGE: vim
CODE:
```
let g:no_vim_maps = 1
```

----------------------------------------

TITLE: Using pathshorten() Function in Vim
DESCRIPTION: Examples of using pathshorten() to abbreviate path components while preserving the filename. The first example uses default length of 1, while the second specifies a length of 2 characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_186

LANGUAGE: vim
CODE:
```
echo pathshorten('~/.config/nvim/autoload/file1.vim')
```

LANGUAGE: vim
CODE:
```
echo pathshorten('~/.config/nvim/autoload/file2.vim', 2)
```

----------------------------------------

TITLE: Toggling Line Numbers in Vim
DESCRIPTION: Commands to enable and disable line numbers in Vim using the number option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set number
:set nonumber
```

----------------------------------------

TITLE: Getting Executable Path in Lua with Libuv
DESCRIPTION: Returns the path of the current executable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_70

LANGUAGE: lua
CODE:
```
uv.exepath()
```

----------------------------------------

TITLE: Saving and Loading Named Views in Vim
DESCRIPTION: This snippet shows how to save a view with a custom name and later load it, which can be used to quickly switch between different file configurations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:mkview ~/.config/nvim/main.vim
```

LANGUAGE: vim
CODE:
```
:source ~/.config/nvim/main.vim
```

----------------------------------------

TITLE: Disabling Spell Checking in LaTeX Comments with VimL
DESCRIPTION: Configuration to disable spell checking only in comments within LaTeX documents. Useful when comments contain code or other content that shouldn't be spell-checked.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_133

LANGUAGE: viml
CODE:
```
let g:tex_comment_nospell= 1
```

----------------------------------------

TITLE: Configuring Multiple Special Characters in listchars
DESCRIPTION: Sets listchars to display tabs, end-of-line markers, and non-breaking spaces with special characters, improving visibility of these otherwise invisible characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_45

LANGUAGE: viml
CODE:
```
set lcs=tab:>-,eol:<,nbsp:%
```

----------------------------------------

TITLE: Enabling Virtual Editing Mode for Table Editing
DESCRIPTION: Command to enable virtual editing mode, which allows the cursor to be placed anywhere in the display, including positions where no text exists, making table editing easier.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
set virtualedit=all
```

----------------------------------------

TITLE: Clearing All Dictionary Entries in Vim
DESCRIPTION: Shows how to remove all entries from a dictionary by using filter() with a false condition.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_57

LANGUAGE: vim
CODE:
```
call filter(dict, 0)
```

----------------------------------------

TITLE: Combined Highlight Attributes Example
DESCRIPTION: Example showing combined highlighting attributes including terminal color, GUI color and GUI attributes
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_187

LANGUAGE: vim
CODE:
```
:hi Comment	ctermfg=Cyan guifg=#80a0ff gui=bold
```

----------------------------------------

TITLE: Configuring LSP Diagnostic Namespace in Lua
DESCRIPTION: This Lua code adjusts the configuration for LSP diagnostics by specifying a diagnostic namespace using the 'vim.lsp.diagnostic.get_namespace' method. This requires an active LSP setup with a valid client ID. Key parameters include the configuration object and the client_namespace retrieved with a client ID, which helps in segmenting diagnostics per LSP client, with no direct visual output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_2

LANGUAGE: lua
CODE:
```
vim.diagnostic.config(config, vim.lsp.diagnostic.get_namespace(client_id))
```

----------------------------------------

TITLE: Buffer Event Example - Lua Callback
DESCRIPTION: Example showing how to access new text content inside a buffer update callback using nvim_buf_get_lines API call.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_3

LANGUAGE: lua
CODE:
```
vim.api.nvim_buf_get_lines(buf, firstline, new_lastline, true)
```

----------------------------------------

TITLE: Jumping to a match in the [I list (Vim)
DESCRIPTION: This snippet shows how to jump to the first item in the list produced by `[I` using `[<Tab>`.  `[ CTRL-I` also works.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_30

LANGUAGE: vim
CODE:
```
"[<Tab>"
```

----------------------------------------

TITLE: Keepjumps Example in Vim
DESCRIPTION: Demonstrates how to use keepjumps command to prevent adding positions to the jumplist when making automatic changes, such as updating a timestamp in the first line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
:let lnum = line(".")
:keepjumps normal gg
:call SetLastChange()
:keepjumps exe "normal " .. lnum .. "G"
```

----------------------------------------

TITLE: Nvim Lua Script Shebang
DESCRIPTION: Example of a shebang line for making Lua scripts executable with Nvim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_5

LANGUAGE: shell
CODE:
```
#!/usr/bin/env -S nvim -l
```

----------------------------------------

TITLE: Accessing Dictionary Entries with Dot Notation in Vim
DESCRIPTION: Demonstrates using dot notation to access dictionary entries when keys are valid identifiers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_46

LANGUAGE: vim
CODE:
```
:let val = mydict.one
:let mydict.four = 4
```

----------------------------------------

TITLE: Updating Search Count in Neovim (Vimscript)
DESCRIPTION: This function updates the search count using a timer. It calls searchcount() with specific options and redraws the status line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_217

LANGUAGE: vim
CODE:
```
function! s:update_searchcount(timer) abort
  if a:timer ==# s:searchcount_timer
    call searchcount(#{
    \ recompute: 1, maxcount: 0, timeout: 100})
    redrawstatus
  endif
endfunction
```

----------------------------------------

TITLE: Changing Default Syntax Highlighting in Neovim
DESCRIPTION: Example command to place in after/syntax/{filetype}.vim to change the default link for cComment syntax group to Question highlight group.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_197

LANGUAGE: vim
CODE:
```
highlight! default link cComment Question
```

----------------------------------------

TITLE: Undefining Signs in Vim
DESCRIPTION: Examples of using sign_undefine() to remove sign definitions. This function can undefine a single sign, multiple signs, or all defined signs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_241

LANGUAGE: vim
CODE:
```
" Delete a sign named mySign
call sign_undefine("mySign")

" Delete signs 'sign1' and 'sign2'
call sign_undefine(["sign1", "sign2"])

" Delete all the signs
call sign_undefine()
```

----------------------------------------

TITLE: Disabling showbreak Setting Locally
DESCRIPTION: Example of how to disable the showbreak setting specifically for the current window while preserving the global value.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_65

LANGUAGE: vim
CODE:
```
setlocal showbreak=NONE
```

----------------------------------------

TITLE: Vim Jumplist After CTRL-O
DESCRIPTION: Demonstrates the state of the jumplist after using CTRL-O to move to a previous position, showing how the pointer (>) moves in the list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_7

LANGUAGE: viml
CODE:
```
jump line  col file/text
  2     1    0 some text
  1    70    0 another line
 >  0  1154   23 end.
  1  1167    0 foo bar
```

----------------------------------------

TITLE: Signal Event Handler Example (Vim)
DESCRIPTION: Shows how to define an autocmd to handle specific signals, in this case processing SIGUSR1
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
autocmd Signal SIGUSR1 call some#func()
```

----------------------------------------

TITLE: Navigating to Error Below Current Line
DESCRIPTION: Command for going to the error below the current line in the current buffer from the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:[count]cbel[ow]
```

----------------------------------------

TITLE: Implicit Dictionary Binding to Function in Vimscript
DESCRIPTION: This snippet illustrates implicit dictionary binding when a function is assigned as a member of a dictionary. When the function is called through the dictionary, the dictionary itself is passed as the 'self' argument to the function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
	let myDict.myFunction = MyFunction
	call myDict.myFunction()
```

----------------------------------------

TITLE: Configuring Lisp Indentation Options in Vim
DESCRIPTION: Sets lispoptions to use indentexpr for Lisp indenting when the option is set, changing how the Vim editor handles Lisp code indentation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_40

LANGUAGE: viml
CODE:
```
set list lcs=tab:\ \
```

----------------------------------------

TITLE: Handling Completion with Events in Neovim
DESCRIPTION: The 'CompleteDone' event has been extended to include a 'reason' key in 'v:event', providing more context about the completion trigger. It supports a more granular control over completion actions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_5

LANGUAGE: lua
CODE:
```
vim.on_key(function() return '' end)
```

----------------------------------------

TITLE: Creating a Pair of Connected Sockets
DESCRIPTION: Creates a pair of connected sockets that can be used for inter-process communication or other purposes. Offers options for non-blocking behavior and specific socket types.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_30

LANGUAGE: lua
CODE:
```
uv.socketpair([{socktype}, [{protocol}, [{flags1}, [{flags2}]]]])
```

----------------------------------------

TITLE: Loading WASM Parser in Lua
DESCRIPTION: Example of loading a WebAssembly parser when Nvim is built with ENABLE_WASMTIME support.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_2

LANGUAGE: lua
CODE:
```
vim.treesitter.language.add('python', { path = "/path/to/python.wasm" })
```

----------------------------------------

TITLE: Using character offsets for String highlighting in Vim
DESCRIPTION: Example showing how to use character offsets to adjust the highlighted area of a match. This highlights the content of a string but excludes the quotation marks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_165

LANGUAGE: vim
CODE:
```
:syn match String  /"[^"]*"/hs=s+1,he=e-1
```

----------------------------------------

TITLE: Moving to a Specific Byte in Vim
DESCRIPTION: This command moves the cursor to a specific byte position in the file. Replace '2345' with the desired byte number. This allows for precise navigation to specific locations when editing binary files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
	2345go
```

----------------------------------------

TITLE: Closing Window in Neovim Lua API
DESCRIPTION: Closes a window, similar to :close command. Can force close with unsaved changes. Available since Neovim 0.4.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_72

LANGUAGE: lua
CODE:
```
nvim_win_close({window}, {force})
```

----------------------------------------

TITLE: Print Lua Code with Nvim from Stdin
DESCRIPTION: Executes Lua code passed via standard input using the Nvim '-l' flag. This integrates scripting with Nvim and assumes a functioning Nvim and shell setup. Demonstrated by piping a simple `print` statement yielding an output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_3

LANGUAGE: shell
CODE:
```
echo "print(42)" | nvim -l -
```

----------------------------------------

TITLE: Clearing Last Used Search Pattern in Vim
DESCRIPTION: This snippet demonstrates how to clear the last used search pattern in Vim using a Vim script command. This effectively clears the search history.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
:let @/ = ""
```

----------------------------------------

TITLE: Setting Grepprg and Grepformat for id-utils in Vim
DESCRIPTION: This Vim script demonstrates how to configure the `grepprg` and `grepformat` options to work with the GNU id-utils. This allows Vim's `:grep` command to leverage `lid` for searching based on identifiers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_36

LANGUAGE: vim
CODE:
```
:set grepprg=lid\ -Rgrep\ -s
:set grepformat=%f:%l:%m
```

----------------------------------------

TITLE: Concat Pattern Example in Vim Regular Expressions
DESCRIPTION: Demonstrates concatenated patterns with the \& operator requiring both patterns to match
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
foobeep\&...
```

----------------------------------------

TITLE: Displaying Unprintable Characters in Hex in Vim
DESCRIPTION: This command sets the 'display' option to 'uhex', which makes Vim display unprintable characters in hexadecimal format. This is useful when editing binary files, as it allows you to see the underlying byte values of characters that would otherwise appear as garbled or empty.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
	:set display=uhex
```

----------------------------------------

TITLE: Using Search Offsets in Vim
DESCRIPTION: This snippet shows examples of using search offsets in Vim. Offsets allow you to position the cursor relative to the found match, including line offsets and character offsets.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
/test/+1    one line below "test", in column 1
/test/e     on the last t of "test"
/test/s+2   on the 's' of "test"
/test/b-3   three characters before "test"
```

----------------------------------------

TITLE: Creating Signal Handler in Lua with libuv
DESCRIPTION: This snippet shows how to create a new signal handler using `uv.new_signal()`, which allows the application to respond to specific Unix signals. It demonstrates starting the signal handler with `uv.signal_start(signal, signame, callback)`, specifying the signal to watch for and executing a callback function when the signal is received. Additionally, `uv.signal_stop(signal)` is used to stop the signal handling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_21

LANGUAGE: lua
CODE:
```
-- Create a new signal handler
local signal = uv.new_signal()
-- Define a handler function
uv.signal_start(signal, "sigint", function(signame)
  print("got " .. signame .. ", shutting down")
  os.exit(1)
end)
```

LANGUAGE: lua
CODE:
```
uv.new_signal()
```

LANGUAGE: lua
CODE:
```
uv.signal_stop({signal})
```

----------------------------------------

TITLE: Setting showmatch Option in Vim
DESCRIPTION: Command to enable the showmatch feature, which briefly highlights matching parentheses, brackets, and braces when typing the closing character.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_1

LANGUAGE: vimdoc
CODE:
```
:set showmatch
```

----------------------------------------

TITLE: Getting Runtime File Paths in Neovim
DESCRIPTION: Retrieves file paths in runtime directories using 'nvim__get_runtime'. You can specify patterns and options to refine search, returning a list of paths.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_29

LANGUAGE: Lua
CODE:
```
nvim__get_runtime\(\{pat\}, \{all\}, \{opts\}\)
```

----------------------------------------

TITLE: Configuring JSON Syntax Highlighting in Vim
DESCRIPTION: Sets options for JSON syntax highlighting, including disabling concealment and error highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_69

LANGUAGE: VimScript
CODE:
```
let g:vim_json_conceal = 0
let g:vim_json_warnings = 0
```

----------------------------------------

TITLE: Appending to a Register in Neovim
DESCRIPTION: This snippet illustrates appending commands to an existing register. Using an uppercase register name allows concatenating additional commands to the existing recorded sequence. This is useful for extending macros without starting over.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_1

LANGUAGE: Vimscript
CODE:
```
qC/word<Enter>q
```

----------------------------------------

TITLE: Using Complete Control Structures in Execute
DESCRIPTION: Demonstrates a valid approach to using control structures with :execute by including the entire block in one string.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_117

LANGUAGE: vim
CODE:
```
:execute 'while i < 5 | echo i | let i = i + 1 | endwhile'
```

----------------------------------------

TITLE: File Recovery Commands
DESCRIPTION: Commands for recovering file contents from swap files, with optional force flag for modified buffers
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/recover.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:rec[over] [file]
:rec[over]! [file]
```

----------------------------------------

TITLE: Trim Directive Example in Treesitter Query (All Whitespace)
DESCRIPTION: This code demonstrates using the `trim!` directive to remove all whitespace (both linewise and charwise) from both sides of a node matched in the treesitter query.  It sets all trim parameters to 1.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_10

LANGUAGE: query
CODE:
```
"(#trim! @fold 1 1 1 1)"
```

----------------------------------------

TITLE: Lua Keystroke Callback Replacement
DESCRIPTION: Describes the replacement of vim.register_keystroke_callback() with vim.on_key() in Lua, emphasizing improved handling of keystrokes across plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_4

LANGUAGE: Lua
CODE:
```
vim.register_keystroke_callback()
```

----------------------------------------

TITLE: Vim Visual Search Prevention Mapping
DESCRIPTION: A mapping to prevent the / command from extending the Visual area, instead searching for highlighted text
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:vmap / y/<C-R>"<CR>
```

----------------------------------------

TITLE: Highlighting Older Inform Language Features
DESCRIPTION: This snippet is for highlighting language features conforming to older Inform development environments. To enable, set the 'inform_highlight_old' variable to 1.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_63

LANGUAGE: vim
CODE:
```
	:let inform_highlight_old=1
```

----------------------------------------

TITLE: Including HTML in R Markdown Files in Neovim
DESCRIPTION: This command sets the `rmd_include_html` variable to `1`, which forces ftplugin/html.vim to be sourced when editing R Markdown files. This is useful for syntax highlighting and other features of HTML within R Markdown documents.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_33

LANGUAGE: vim
CODE:
```
	let rmd_include_html = 1
```

----------------------------------------

TITLE: Command Concatenation with Bar in Vim
DESCRIPTION: Examples demonstrating how to use the bar character to concatenate multiple commands on a single line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:execute 'r !ls' | '[
```

----------------------------------------

TITLE: Using a Custom Function for Filtering in Vim
DESCRIPTION: Shows how to use a custom function with filter() to keep odd-indexed items in a list. The function 'Odd' is defined to check if the index is odd.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_68

LANGUAGE: vim
CODE:
```
func Odd(idx, val)
  return a:idx % 2 == 1
endfunc
call filter(mylist, function('Odd'))
```

----------------------------------------

TITLE: Echoing Error Messages in Vim Script
DESCRIPTION: Shows how to echo an error message that will be saved in the message history and can be raised as an exception.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_109

LANGUAGE: vim
CODE:
```
:echoerr "This script just failed!"
```

----------------------------------------

TITLE: Conditional Vimrc Setup for Diff Mode (VimL)
DESCRIPTION: Vimrc code snippet to apply different configurations based on whether Vim is started in diff mode or not.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
if &diff
   setup for diff mode
else
   setup for non-diff mode
endif
```

----------------------------------------

TITLE: Highlighting Haskell Delimiter Characters
DESCRIPTION: This snippet shows how to enable highlighting of delimiter characters in Haskell code.  This is achieved by setting the 'hs_highlight_delimiters' variable to 1 in your vimrc file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_43

LANGUAGE: vim
CODE:
```
	:let hs_highlight_delimiters = 1
```

----------------------------------------

TITLE: Running Commands in Neovim - Vim
DESCRIPTION: This snippet introduces various commands that enable users to execute shell commands directly from Neovim. It highlights the :!cmd command for running external commands, with additional context on command execution behavior concerning interactive shells and background tasks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:!{cmd}		Execute {cmd} with 'shell'. See also |:terminal|.
		The command runs in a non-interactive shell connected to a pipe (not a terminal).
```

----------------------------------------

TITLE: Sign Jump Commands in Neovim
DESCRIPTION: Commands for jumping to specific signs in files and buffers, with optional group specifications
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_6

LANGUAGE: vimdoc
CODE:
```
:sign jump {id} file={fname}
:sign jump {id} group={group} file={fname}
:sign jump {id} [buffer={nr}]
:sign jump {id} group={group} [buffer={nr}]
```

----------------------------------------

TITLE: Setting iskeyword Option in Vim
DESCRIPTION: Command to reset the iskeyword option to its default value, which affects how Vim determines word boundaries.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:set iskeyword&
```

----------------------------------------

TITLE: Querying Defined Signs in Vim
DESCRIPTION: Examples of using sign_getdefined() to retrieve information about defined signs. This function can return attributes of all signs or a specific sign.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_236

LANGUAGE: vim
CODE:
```
" Get a list of all the defined signs
echo sign_getdefined()

" Get the attribute of the sign named mySign
echo sign_getdefined("mySign")
```

----------------------------------------

TITLE: Setting Vietnamese Keymap in Neovim
DESCRIPTION: Command to enable the Vietnamese Telex input method with UTF-8 encoding. This allows typing Vietnamese characters in Insert mode and search commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vietnamese.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:set keymap=vietnamese-telex_utf-8
```

----------------------------------------

TITLE: Replacing text within a fold in Vim
DESCRIPTION: This example demonstrates using an Ex command to replace text within all lines of a closed fold. The range of the command is automatically adjusted to include all lines within the fold.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
	:s/foo/bar/g
```

----------------------------------------

TITLE: Exception Handling in Vim Script
DESCRIPTION: Shows how to catch and inspect exception information using v:throwpoint variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
try
  throw "oops"
catch /.*/ 
  echo "Exception from" v:throwpoint
endtry
```

----------------------------------------

TITLE: Editing Files with Different Encodings in Vim - Vimscript
DESCRIPTION: This snippet explains the internal handling of 16-bit Unicode files in Vim, highlighting the necessity of encoding conversion when editing files with different encodings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_4



----------------------------------------

TITLE: Moving backward to the end of a function (Vim)
DESCRIPTION: This snippet shows how to move backward to the end of a function using the `[]` command. The end of a function is defined by a `}` in the first column.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
"[]"
```

----------------------------------------

TITLE: Demonstrating matchfuzzypos() in Vim
DESCRIPTION: This snippet shows how to use the matchfuzzypos() function to perform fuzzy matching on a list of dictionaries. It matches the string 'll' against the 'text' key of the dictionary.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_169

LANGUAGE: vim
CODE:
```
echo [{'text': 'hello', 'id' : 10}]
	\->matchfuzzypos('ll', {'key' : 'text'})
```

----------------------------------------

TITLE: Pattern Branch Example in Vim Regular Expressions
DESCRIPTION: Shows how branch patterns are matched using the \| operator to match alternative patterns
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
foo\|beep
```

----------------------------------------

TITLE: C Code with Numbered Folding Markers
DESCRIPTION: Example of C code using numbered folding markers to create hierarchical folds with specific levels.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_19

LANGUAGE: c
CODE:
```
/* global variables {{{1 */
int varA, varB;

/* functions {{{1 */
/* funcA() {{{2 */
void funcA() {}

/* funcB() {{{2 */
void funcB() {}
/* }}}1 */
```

----------------------------------------

TITLE: Enabling Cargo Check for All Targets
DESCRIPTION: When enabled, passes the '--all-targets' option to Cargo when Syntastic performs linting, allowing checking of all targets under the package including tests, examples, and benchmarks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
let g:rust_cargo_check_all_targets = 0
```

----------------------------------------

TITLE: API Documentation Example in C
DESCRIPTION: Demonstrates the docstring format for documenting Nvim API functions in C source code. Shows how to document parameters, examples, and formatting for nvim_open_win() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_1

LANGUAGE: c
CODE:
```
/// Opens a new window.
/// ...
///
/// Example (Lua): window-relative float
///
/// ```lua
/// vim.api.nvim_open_win(0, false, {
///   relative='win',
///   row=3,
///   col=3,
///   width=12,
///   height=3,
/// })
/// ```
///
/// @param buffer Buffer to display
/// @param enter  Enter the window
/// @param config Map defining the window configuration. Keys:
///   - relative: Sets the window layout, relative to:
///      - "editor" The global editor grid.
///      - "win"    Window given by the `win` field.
///      - "cursor" Cursor position in current window.
/// ...
/// @param[out] err Error details, if any
///
```

----------------------------------------

TITLE: Creating Spell File with mkspell Command
DESCRIPTION: Basic command syntax for generating a Vim spell file from word lists, with optional ascii flag and support for multiple input files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:mkspell /tmp/nl nl_NL.words
```

----------------------------------------

TITLE: Standard Path Retrieval using stdpath()
DESCRIPTION: Example of retrieving standard configuration path using stdpath() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_253

LANGUAGE: vim
CODE:
```
echo stdpath("config")
```

----------------------------------------

TITLE: Retabulation and Whitespace Manipulation
DESCRIPTION: Demonstrates commands for manipulating tab stops and whitespace across files with different tab configurations
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:auto BufReadPost	*.xx	retab! 4
:auto BufWritePre	*.xx	retab! 8
:auto BufWritePost	*.xx	retab! 4
:auto BufNewFile	*.xx	set ts=4
```

----------------------------------------

TITLE: Configuring Zig Plugin Settings
DESCRIPTION: Configuration options for Zig filetype plugin including style settings and standard library path
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_41

LANGUAGE: vim
CODE:
```
setlocal expandtab shiftwidth=4 softtabstop=4 tabstop=8
let g:zig_recommended_style = 0
let g:zig_std_dir = json_decode(system('zig env'))['std_dir']
```

----------------------------------------

TITLE: Deleting text to a register in Vim
DESCRIPTION: This snippet demonstrates how to delete text into a named register in Vim. It shows how to use the register specification before the delete command to store the deleted text in the specified register.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
	"wdaw
```

----------------------------------------

TITLE: Dictionary Key Iteration in Vim
DESCRIPTION: Demonstrates iterating over dictionary keys using loops and sorting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_23

LANGUAGE: viml
CODE:
```
:for key in keys(uk2nl)
:  echo key
:endfor

:for key in sort(keys(uk2nl))
:  echo key
:endfor
```

----------------------------------------

TITLE: Auto-resetting iminsert in Vim
DESCRIPTION: Example of using an insert mode mapping to automatically reset the 'iminsert' option to 0 when leaving Insert mode. This ensures that the Input Method (IM) is turned off when returning to Normal mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_29

LANGUAGE: vim
CODE:
```
inoremap <ESC> <ESC>:set iminsert=0<CR>
```

----------------------------------------

TITLE: Demonstrating UTF-8, UTF-16, and UTF-32 Offsets in Vim
DESCRIPTION: This snippet shows the different offsets for the string "a©😊" in UTF-8, UTF-16, and UTF-32 encodings. It demonstrates how characters are represented in different Unicode encodings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_82

LANGUAGE: vim
CODE:
```
UTF-8 offsets:
    [0]: 61, [1]: C2, [2]: A9, [3]: F0, [4]: 9F, [5]: 98, [6]: 8A
UTF-16 offsets:
    [0]: 0061, [1]: 00A9, [2]: D83D, [3]: DE0A
UTF-32 (character) offsets:
    [0]: 00000061, [1]: 000000A9, [2]: 0001F60A
```

----------------------------------------

TITLE: Calling Function Reference Using :call in Vimscript
DESCRIPTION: This snippet demonstrates how to call a function reference using the `:call` command. This is an alternative method to calling the function directly using parentheses.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
	:call Fn()
	:call dict.init()
```

----------------------------------------

TITLE: Enabling Control Structure Folding for Shell Scripts
DESCRIPTION: Setting the shell folding option to 4 to enable folding of if/do/for structures in shell scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_122

LANGUAGE: vim
CODE:
```
let g:sh_fold_enabled= 4
```

----------------------------------------

TITLE: Rust Test Command (Vim)
DESCRIPTION: The :RustTest command runs tests within a Cargo project or a standalone Rust file. It leverages `cargo test` for projects and `rustc --test` for individual files. The command supports specifying the size of the new window, running all tests regardless of the cursor position, and passing options to the underlying cargo or rustc command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_31

LANGUAGE: vim
CODE:
```
:[N]RustTest[!] [options]                                       *:RustTest*
		Runs a test under the cursor when the current buffer is in a
		cargo project with "cargo test" command. If the command did
		not find any test function under the cursor, it stops with an
		error message.

		When N is given, adjust the size of the new window to N lines
		or columns.

		When ! is given, runs all tests regardless of current cursor
		position.

		When [options] is given, it is passed to "cargo" command
		arguments.

		When the current buffer is outside cargo project, the command
		runs `rustc --test` command instead of "cargo test" as
		fallback. All tests are run regardless of adding ! since there
		is no way to run specific test function with rustc. [options]
		is passed to `rustc` command arguments in the case.

		Takes optional modifiers (see |<mods>|):  >vim
		    :tab RustTest
		    :belowright 16RustTest
		    :leftabove vert 80RustTest
<
```

----------------------------------------

TITLE: Calculating UTF-16 Indices in Vim
DESCRIPTION: Examples of using the utf16idx() function to calculate UTF-16 code unit indices for characters in a string. Demonstrates various use cases including different input strings and parameter combinations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_281

LANGUAGE: vim
CODE:
```
echo utf16idx('a😊😊', 3)	" returns 2
echo utf16idx('a😊😊', 7)	" returns 4
echo utf16idx('a😊😊', 1, 0, 1)	" returns 2
echo utf16idx('a😊😊', 2, 0, 1)	" returns 4
echo utf16idx('aą́c', 6)		" returns 2
echo utf16idx('aą́c', 6, 1)	" returns 4
echo utf16idx('a😊😊', 9)	" returns -1
```

----------------------------------------

TITLE: Default Highlight Link Example for C Comments
DESCRIPTION: Example showing how to set default highlight linking for C comments in a syntax file, and how to override it in a user's vimrc file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_196

LANGUAGE: viml
CODE:
```
:highlight default link cComment Comment
:highlight link cComment Question
```

----------------------------------------

TITLE: Setting fillchars option in Vim
DESCRIPTION: Example of setting the fillchars option to customize various UI elements in Vim, including statusline, vertical separators, and fold indicators.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_18

LANGUAGE: viml
CODE:
```
set fillchars=stl:\ ,stlnc:\ ,vert:│,fold:·,diff:-
```

----------------------------------------

TITLE: Language-aware Script Example
DESCRIPTION: Conditional script that outputs different messages based on the user's language setting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mlang.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
:if v:lang =~ "de_DE"
:  echo "Guten Morgen"
:else
:  echo "Good morning"
:endif
```

----------------------------------------

TITLE: Writing all modified files
DESCRIPTION: Writes all modified files. Vim only writes files with changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
	:wall
```

----------------------------------------

TITLE: GUI Menu Commands in Vim
DESCRIPTION: Commands for managing menus in Vim's graphical user interface, including listing, creating, and removing menu items and adding tooltips.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
:menu                     # list all menus
:menu {mpath}             # list menus starting with {mpath}
:menu {mpath} {rhs}        # add menu {mpath}, giving {rhs}
:menu {pri} {mpath} {rhs}  # idem, with priorities {pri}
:menu ToolBar.{name} {rhs} # add toolbar item, giving {rhs}
:tmenu {mpath} {text}      # add tooltip to menu {mpath}
:unmenu {mpath}           # remove menu {mpath}
```

----------------------------------------

TITLE: Opening a file in read-only mode in Vim
DESCRIPTION: This snippet shows how to open a file in read-only mode in Vim, preventing accidental modifications. This prevents accidental writes by displaying an error message when the user tries to write the file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
	vim -R file
```

LANGUAGE: vim
CODE:
```
	view file
```

LANGUAGE: vim
CODE:
```
	vim -M file
```

LANGUAGE: vim
CODE:
```
	:set modifiable
	:set write
```

----------------------------------------

TITLE: Setting Text Width for Automatic Line Breaks
DESCRIPTION: Sets the 'textwidth' option to 78 characters, which will automatically break lines at 78 characters when entering text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
:set textwidth=78
```

----------------------------------------

TITLE: HTML Last Modified Date Insertion
DESCRIPTION: Function and autocommands to automatically update the last modified date in HTML files when writing them. Searches first 20 lines for the modification date line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_34

LANGUAGE: vim
CODE:
```
:autocmd BufWritePre,FileWritePre *.html   ks|call LastMod()|'s
:fun LastMod()
:  if line("$") > 20
:    let l = 20
:  else
:    let l = line("$")
:  endif
:  exe "1," .. l .. "g/Last modified: /s/Last modified: .*/Last modified: " ..
:  \ strftime("%Y %b %d")
:endfun
```

----------------------------------------

TITLE: Calculating Character Offset in Neovim LSP (Lua)
DESCRIPTION: Returns the UTF-32 and UTF-16 offsets for a position in a buffer. Takes buffer number, row, column, and optional offset encoding as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_49

LANGUAGE: lua
CODE:
```
character_offset({buf}, {row}, {col}, {offset_encoding})
```

----------------------------------------

TITLE: Finding Spelling Suggestions in Vim
DESCRIPTION: Normal mode command to suggest correctly spelled words for the word under or after the cursor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_3

LANGUAGE: vimdoc
CODE:
```
z=
```

----------------------------------------

TITLE: Customizing Matchparen Highlighting in Neovim
DESCRIPTION: Example of how to customize the colors used for highlighting matching parentheses by modifying the MatchParen highlight group.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_paren.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
:hi MatchParen ctermbg=blue guibg=lightblue
```

----------------------------------------

TITLE: Using getwinpos to poll for window position in Vim
DESCRIPTION: Code snippet demonstrates how to poll for the window position using getwinpos(), waiting until a valid position is received while doing some work in the meantime.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_109

LANGUAGE: vim
CODE:
```
while 1
  let res = getwinpos(1)
  if res[0] >= 0
    break
  endif
  " Do some work here
endwhile
```

----------------------------------------

TITLE: Executing System Command with Simplified Escaping in Vim
DESCRIPTION: This example shows an alternative way to execute a system command using the ::S modifier for simplified escaping of special characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_273

LANGUAGE: vim
CODE:
```
echo system('ls '..expand('%:h:S'))
```

----------------------------------------

TITLE: Ambiguous Insert Mode Mappings Example
DESCRIPTION: This example demonstrates ambiguous mappings in Insert mode, showing how Vim handles overlapping key sequences.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_7

LANGUAGE: viml
CODE:
```
:imap aa foo
:imap aaa bar
```

----------------------------------------

TITLE: Appending to a File in Vim
DESCRIPTION: Shows how to append the current line to an existing file using the '>>' operator.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:.write >>collection
```

----------------------------------------

TITLE: Enabling HTML Syntax Folding
DESCRIPTION: This snippet configures Vim to enable syntax folding for HTML files. This is enabled by setting 'g:html_syntax_folding' to 1 and setting 'foldmethod' to syntax.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_56

LANGUAGE: vim
CODE:
```

	:let g:html_syntax_folding = 1
	:set foldmethod=syntax

```

----------------------------------------

TITLE: Adding Comments After Echo Commands
DESCRIPTION: Shows how to properly add comments after commands like :echo by using the command separator.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_118

LANGUAGE: vim
CODE:
```
:echo "foo" | "this is a comment
```

----------------------------------------

TITLE: Using Custom CTags Definitions for Rust
DESCRIPTION: Disables the built-in CTags definitions for Rust provided by rust.vim in favor of user-defined custom definitions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
let g:rust_use_custom_ctags_defs = 1
```

----------------------------------------

TITLE: Opening all folds completely
DESCRIPTION: Reduces all folding levels completely, opening all folds in the file regardless of nesting depth.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_5

LANGUAGE: vimdoc
CODE:
```
zR
```

----------------------------------------

TITLE: Setting Verbose Option in Debug Mode
DESCRIPTION: This command sets the 'verbose' option to level 20 in Vim, which will display detailed information about executed commands.  This is useful for closely observing the program's behavior during debugging.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
":set verbose=20"
```

----------------------------------------

TITLE: Installing Perl Provider for Neovim
DESCRIPTION: Installs the Neovim::Ext CPAN package required for Perl integration in Neovim. The -n option skips tests which might be necessary for troubleshooting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_10

LANGUAGE: bash
CODE:
```
cpanm -n Neovim::Ext
```

----------------------------------------

TITLE: Converting String to Number in Vim
DESCRIPTION: Demonstrates the use of str2nr() function to convert a string to a number, ignoring quotes and handling different bases.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_256

LANGUAGE: vim
CODE:
```
let nr = str2nr('0123')
```

----------------------------------------

TITLE: Setting undolevels to 0 for Vi compatibility in Vim
DESCRIPTION: Code to set the undolevels option to 0, which provides Vi compatibility by allowing only one level of undo where 'u' undoes itself.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_75

LANGUAGE: viml
CODE:
```
set ul=0
```

----------------------------------------

TITLE: Configuring Neovim to Use Python Virtualenv
DESCRIPTION: Sets the Python 3 interpreter path in Neovim's configuration to use a specific virtualenv, which avoids needing to install pynvim in every project virtualenv.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
let g:python3_host_prog = '/path/to/py3nvim/bin/python'
```

----------------------------------------

TITLE: Disabling Python 3 Support in Neovim
DESCRIPTION: Disables the Python 3 provider in Neovim by setting the g:loaded_python3_provider variable to 0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
let g:loaded_python3_provider = 0
```

----------------------------------------

TITLE: String to List Conversion Examples
DESCRIPTION: Demonstrates converting strings to lists of character values using str2list() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_255

LANGUAGE: vim
CODE:
```
echo str2list(" ")        " returns [32]
echo str2list("ABC")        " returns [65, 66, 67]
echo str2list("á")        " returns [97, 769]
```

----------------------------------------

TITLE: Expression-based Substitution with Character Manipulation
DESCRIPTION: Shows advanced substitution techniques using expressions and special character replacements
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:s@\n@\="\r" .. expand("$HOME") .. "\r"@
```

LANGUAGE: vim
CODE:
```
s/E/\="\<Char-0x20ac>"/g
```

----------------------------------------

TITLE: Running the Sort Command in Unix/Windows
DESCRIPTION: Demonstrates using external sort command to sort input.txt and write the result to output.txt.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_20

LANGUAGE: shell
CODE:
```
sort <input.txt >output.txt
```

----------------------------------------

TITLE: Character Class Expressions in Vim Regular Expressions
DESCRIPTION: This snippet shows various character class expressions available in Vim regular expressions. It includes classes for alphanumeric characters, whitespace, punctuation, and more.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_29

LANGUAGE: vim
CODE:
```
*[:alnum:]*   [:alnum:]   isalnum ASCII letters and digits
*[:alpha:]*   [:alpha:]   isalpha ASCII letters
*[:blank:]*   [:blank:]       space and tab
*[:cntrl:]*   [:cntrl:]   iscntrl ASCII control characters
*[:digit:]*   [:digit:]       decimal digits '0' to '9'
*[:graph:]*   [:graph:]   isgraph ASCII printable characters excluding space
*[:lower:]*   [:lower:]   (1)    lowercase letters (all letters when 'ignorecase' is used)
*[:print:]*   [:print:]   (2)    printable characters including space
*[:punct:]*   [:punct:]   ispunct ASCII punctuation characters
*[:space:]*   [:space:]       whitespace characters: space, tab, CR, NL, vertical tab, form feed
*[:upper:]*   [:upper:]   (3)    uppercase letters (all letters when 'ignorecase' is used)
*[:xdigit:]*  [:xdigit:]      hexadecimal digits: 0-9, a-f, A-F
*[:return:]*  [:return:]      the <CR> character
*[:tab:]*     [:tab:]         the <Tab> character
*[:escape:]*  [:escape:]      the <Esc> character
*[:backspace:]* [:backspace:]   the <BS> character
*[:ident:]*   [:ident:]       identifier character (same as "\i")
*[:keyword:]* [:keyword:]     keyword character (same as "\k")
*[:fname:]*   [:fname:]       file name character (same as "\f")
```

----------------------------------------

TITLE: Python Script Execution with Arguments
DESCRIPTION: Example showing how to pass arguments to a Python script executed in Vim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:python sys.argv = ["foo", "bar"]
:pyfile myscript.py
```

----------------------------------------

TITLE: Configuring Email Reply Comments in Vim
DESCRIPTION: Sets up nested comment recognition for email replies using > and ! characters as comment markers
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
:set comments=n:>,n:!
```

----------------------------------------

TITLE: Defining Color Scheme Based on Background Setting in VimL
DESCRIPTION: This approach uses the default Normal color and automatically adjusts to the value of 'background'. It demonstrates conditional highlighting based on whether the background is light or dark.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
highlight clear Normal
set background&
highlight clear
if &background == "light"
  highlight Error ...
  ...
else
  highlight Error ...
  ...
endif
```

----------------------------------------

TITLE: Setting Custom Source Path for Rust Files
DESCRIPTION: Sets a custom path to be prepended to the 'path' option for Rust source files, making it easier to navigate to Rust standard library sources.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
let g:ftplugin_rust_source_path = $HOME . '/dev/rust'
```

----------------------------------------

TITLE: Stop Visual Mode with Escape in Neovim
DESCRIPTION: This command stops Visual mode. ALT (|META|) may act like <Esc> if the chord is not mapped. For example <A-x> acts like <Esc>x if <A-x> does not have a visual-mode mapping.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
"<Esc>"
```

----------------------------------------

TITLE: Diff-based Folding Configuration
DESCRIPTION: Vim settings to enable folding of unchanged lines when comparing files in diff mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
:setlocal diff foldmethod=diff scrollbind nowrap foldlevel=1
```

----------------------------------------

TITLE: Disabling Node.js Support in Neovim
DESCRIPTION: Disables the Node.js provider in Neovim by setting the g:loaded_node_provider variable to 0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
:let g:loaded_node_provider = 0
```

----------------------------------------

TITLE: Executing Perl Statements in Neovim
DESCRIPTION: Examples of using the :perl command to execute Perl statements within Neovim, including printing and manipulating the current line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_perl.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:perl print "Hello"
:perl $current->line (uc ($current->line))
:perl my $str = $current->buffer->[42]; print "Set \$str to: $str"
```

----------------------------------------

TITLE: Configuring R Restructured Text Syntax Highlighting in Vim
DESCRIPTION: Enables syntax highlighting for R code in knitr chunk headers within R Restructured Text files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_104

LANGUAGE: vim
CODE:
```
let rrst_syn_hl_chunk = 1
```

----------------------------------------

TITLE: SQLite Syntax and Indent Files
DESCRIPTION: Defines the locations for SQLite syntax and indent files within the Neovim configuration directory. These files allow customization of syntax highlighting and indentation for SQLite files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
	~/.config/nvim/syntax/sqlite.vim
	~/.config/nvim/indent/sqlite.vim
```

----------------------------------------

TITLE: Visual Mode Key Mapping Example
DESCRIPTION: Demonstrates how to execute normal mode commands using the previous visual mode selection type.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_282

LANGUAGE: vim
CODE:
```
exe "normal " .. visualmode()
```

----------------------------------------

TITLE: Clearing Syntax Definitions in Vim Script
DESCRIPTION: Begins a syntax file by clearing existing syntax definitions to start fresh. It's useful during experimentation and prior to defining new syntax rules. No required dependencies. No inputs or outputs, as it serves as a preparatory command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_0

LANGUAGE: Vim Script
CODE:
```
:syntax clear
```

----------------------------------------

TITLE: Implementing a Min Function in Vim
DESCRIPTION: Shows how to define a function that returns the smaller of two numbers, demonstrating conditional statements and local variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
:function Min(num1, num2)
:  if a:num1 < a:num2
:    let smaller = a:num1
:  else
:    let smaller = a:num2
:  endif
:  return smaller
:endfunction
```

----------------------------------------

TITLE: Filetype Plugin Initialization Check
DESCRIPTION: Code to check if a filetype plugin has already been loaded for the current buffer to prevent duplicate initialization.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_42

LANGUAGE: vim
CODE:
```
" Only do this when not done yet for this buffer
if exists("b:did_ftplugin")
  finish
endif
let b:did_ftplugin = 1
```

----------------------------------------

TITLE: WinDbg Minidump Generation
DESCRIPTION: Command for generating a minidump file in WinDbg for crash analysis.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/debug.txt#2025-04-20_snippet_3

LANGUAGE: shell
CODE:
```
.dump vim.dmp
```

----------------------------------------

TITLE: Navigating the Quickfix Window in Vim Script
DESCRIPTION: These commands allow navigation within the quickfix window, such as moving the cursor to the bottom. It's useful for asynchronous updates to ensure visibility of recent entries.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_31

LANGUAGE: vimscript
CODE:
```
:cb[ottom]   Put the cursor in the last line of the quickfix window
and scroll to make it visible.
```

----------------------------------------

TITLE: Adding Buffer-Specific User Commands in Vim Filetype Plugins
DESCRIPTION: This example shows how to add a user command that can only be used in one buffer using the -buffer argument to :command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_50

LANGUAGE: vim
CODE:
```
:command -buffer  Make  make %:r.s
```

----------------------------------------

TITLE: Basic Highlight Command Example
DESCRIPTION: Simple example showing how to set bold GUI attribute for Comment highlighting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_186

LANGUAGE: vim
CODE:
```
:hi Comment	gui=bold
```

----------------------------------------

TITLE: Checking Nvim version with has() in Vim
DESCRIPTION: Example of using has() to check if the current Nvim version is 0.2.1 or later before using version-specific features.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_119

LANGUAGE: vim
CODE:
```
if has("nvim-0.2.1")
  " ...
endif
```

----------------------------------------

TITLE: RPC Notification Example
DESCRIPTION: Example of sending an asynchronous RPC notification on VimLeave event
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_210

LANGUAGE: vim
CODE:
```
au VimLeave call rpcnotify(0, "leaving")
```

----------------------------------------

TITLE: Configuring MATLAB Function Indenting in Vim
DESCRIPTION: This snippet configures MATLAB function indentation in Vim by setting the 'g:MATLAB_function_indent' variable. This controls whether nested functions and all functions are indented. Users can choose between Classic (0), Indent nested functions (1), and Indent all functions (2) formats.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_8

LANGUAGE: VimL
CODE:
```
let g:MATLAB_function_indent = {0, 1 or 2 (default)}
```

----------------------------------------

TITLE: Executing Ex Command in Neovim
DESCRIPTION: Executes an Ex command with 'nvim_command'. Prefer using 'nvim_cmd()' or 'nvim_exec2()' for a more structured command execution.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_36

LANGUAGE: Lua
CODE:
```
nvim_command\(\{command\}\)
```

----------------------------------------

TITLE: Getting File Type in Vim
DESCRIPTION: The getftype() function returns a string describing the type of the given file. It can return various types like 'file', 'dir', 'link', etc. Returns an empty string if the file doesn't exist.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_94

LANGUAGE: vim
CODE:
```
getftype("/home")
```

----------------------------------------

TITLE: Setting HTML Omni Completion Variable for Custom XML Data
DESCRIPTION: Example showing how b:html_omni_flavor can be used to point to a custom XML data file, allowing mixing of PHP completion with any XML dialect.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
b:html_omni_flavor
```

----------------------------------------

TITLE: Register Shifting Loop in Vim
DESCRIPTION: Shifts the contents of numbered registers down by one position, from register 9 to 1.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
for i = 9, 1, -1 do
  vim.fn.setreg(tostring(i), vim.fn.getreg(tostring(i - 1)))
end
```

----------------------------------------

TITLE: Shell Escaping in Vim
DESCRIPTION: Examples of using shellescape() function to escape strings for use as shell command arguments in Vim, demonstrating its use with :! command and system() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_233

LANGUAGE: vim
CODE:
```
exe '!dir ' .. shellescape(expand('<cfile>'), 1)
```

LANGUAGE: vim
CODE:
```
call system("chmod +w -- " .. shellescape(expand("%")))
```

----------------------------------------

TITLE: Using UDP try_send2 Method for Multiple Datagrams in Lua
DESCRIPTION: Demonstrates how to send multiple UDP datagrams using the try_send2 method with both connected and non-connected UDP clients. When a client is not connected, you must specify the destination address.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_43

LANGUAGE: lua
CODE:
```
-- If client:connect(...) was not called
local addr = { ip = "127.0.0.1", port = 1234 }
client:try_send2({
  { data = "Message 1", addr = addr },
  { data = "Message 2", addr = addr },
})
-- If client:connect(...) was called
client:try_send2({
  { data = "Message 1" },
  { data = "Message 2" },
})
```

----------------------------------------

TITLE: Configuring Command Height in Neovim (Vim)
DESCRIPTION: This snippet demonstrates how to set the 'cmdheight' option in Neovim, which controls the number of lines used for displaying messages at the bottom. This option impacts the available space for editing text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:set cmdheight=3
```

----------------------------------------

TITLE: Demonstrating matchstrpos() in Vim
DESCRIPTION: These snippets show how to use matchstrpos() function to get the matched string along with its start and end positions, including examples with different start positions and list input.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_173

LANGUAGE: vim
CODE:
```
echo matchstrpos("testing", "ing")
```

LANGUAGE: vim
CODE:
```
echo matchstrpos("testing", "ing", 2)
```

LANGUAGE: vim
CODE:
```
echo matchstrpos("testing", "ing", 5)
```

LANGUAGE: vim
CODE:
```
echo matchstrpos([1, '__x'], '\a')
```

----------------------------------------

TITLE: Back Reference Pattern Configuration
DESCRIPTION: Example of using back references in match patterns to match corresponding text patterns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:let b:match_words = '\<b\(o\+\)\>:\(h\)\1\>'
```

----------------------------------------

TITLE: Using Highlight Command in Vim
DESCRIPTION: These snippets show various uses of the highlight command in Vim. They demonstrate how to list highlight groups, clear highlighting, and modify highlight groups.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_185

LANGUAGE: viml
CODE:
```
:hi[ghlight]

:hi[ghlight] {group-name}

:hi[ghlight] clear

:hi[ghlight] clear {group-name}
:hi[ghlight] {group-name} NONE

:hi[ghlight] [default] {group-name} {key}={arg} ..
```

----------------------------------------

TITLE: Basic State Machine Implementation in Python
DESCRIPTION: Pseudocode showing how Neovim implements its basic state machine structure. This demonstrates how the editor reads user input and processes it through state-specific callbacks.
SOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/README.md#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
def state_enter(state_callback, data):
  do
    key = readkey()                 # read a key from the user
  while state_callback(data, key)   # invoke the callback for the current state
```

----------------------------------------

TITLE: Increasing Shell Syntax Synchronization Lines
DESCRIPTION: Setting the minimum number of lines for shell syntax synchronization to improve highlighting accuracy during backward scrolling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_124

LANGUAGE: vim
CODE:
```
let sh_minlines = 500
```

----------------------------------------

TITLE: Using matchbufline() to Find Matches in Vim Buffer
DESCRIPTION: Shows how to use matchbufline() to find matches in a specific buffer. It returns a list of dictionaries containing match information, including line numbers and byte indices.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_166

LANGUAGE: vim
CODE:
```
" Assuming line 3 in buffer 5 contains "a"
echo matchbufline(5, '\<\k\+\>', 3, 3)

```

LANGUAGE: vim
CODE:
```
" Assuming line 4 in buffer 10 contains "tik tok"
echo matchbufline(10, '\<\k\+\>', 1, 4)

```

LANGUAGE: vim
CODE:
```
" Assuming line 2 in buffer 2 contains "acd"
echo matchbufline(2, '\(a\)\?\(b\)\?\(c\)\?\(.*\)', 2, 2
					\ {'submatches': v:true})

```

----------------------------------------

TITLE: Setting Maximum Shell Syntax Synchronization Lines
DESCRIPTION: Setting the maximum number of lines for shell syntax synchronization to improve performance in large files at the cost of potentially reduced highlighting accuracy.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_125

LANGUAGE: vim
CODE:
```
let sh_maxlines = 100
```

----------------------------------------

TITLE: Defining File Breakpoint
DESCRIPTION: This command sets a breakpoint on line 43 of the 'init.vim' file. Vim will pause execution when this line is reached during sourcing of the file. This can be used to examine the state of the program at a particular point.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
":breakadd file 43 init.vim"
```

----------------------------------------

TITLE: Comparing Numbers vs. Strings in Vim
DESCRIPTION: Shows that when comparing numbers and strings directly in Vim, there is automatic type conversion.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
echo 4 == "4"
```

----------------------------------------

TITLE: Configuring Third-party Dependencies URL
DESCRIPTION: Example of how to specify a custom commit or local path for third-party dependencies in cmake.deps/deps.txt file.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_9

LANGUAGE: bash
CODE:
```
LUAJIT_URL https://github.com/LuaJIT/LuaJIT/archive/<sha>.tar.gz
```

LANGUAGE: bash
CODE:
```
LUAJIT_URL /home/user/luajit
```

----------------------------------------

TITLE: Calculating Arc Cosine in Vimscript
DESCRIPTION: The acos() function returns the arc cosine of a number in radians. It accepts inputs in the range [-1, 1] and returns a float in the range [0, pi].
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_1

LANGUAGE: vimscript
CODE:
```
echo acos(0)
```

LANGUAGE: vimscript
CODE:
```
echo acos(-0.5)
```

----------------------------------------

TITLE: Writing a Vim Compiler Plugin
DESCRIPTION: This snippet demonstrates the structure of a compiler plugin, including the use of the current_compiler variable and the CompilerSet command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_53

LANGUAGE: vim
CODE:
```
:if exists("current_compiler")
:  finish
:endif
:let current_compiler = "mine"

CompilerSet errorformat&    " use the default 'errorformat'
CompilerSet makeprg=nmake
```

----------------------------------------

TITLE: Grid Line Redraw Event in Neovim JSON
DESCRIPTION: This snippet is for drawing a line in a grid at specified coordinates, critical for updating visible text and highlights effectively.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_6

LANGUAGE: json
CODE:
```
["grid_line", grid, row, col_start, cells, wrap] ~
	Redraw a continuous part of a `row` on a `grid`, starting at the column
`col_start`. `cells` is an array of arrays each with 1 to 3 items:
`[text(, hl_id, repeat)]`. `text` is the UTF-8 text that should be put in
a cell, with the highlight `hl_id` defined by a previous `hl_attr_define`
call.
```

----------------------------------------

TITLE: Setting Register Values in Vim
DESCRIPTION: Examples of using setreg() function to set register values in Vim. This function allows setting register contents with various options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_228

LANGUAGE: vim
CODE:
```
call setreg(v:register, @*)
call setreg('*', @%, 'ac')
call setreg('a', "1\n2\n3", 'b5')
call setreg('"', { 'points_to': 'a'})
```

----------------------------------------

TITLE: Disabling Automatic Release Updates in Changelog
DESCRIPTION: Setting to disable the automatic prompting for release number updates when changes are detected, preventing the plugin from asking to increase the release number.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
let spec_chglog_never_increase_release = 1
```

----------------------------------------

TITLE: Saving fold state with view
DESCRIPTION: Saves the current fold state and other view-related settings to be restored later. This preserves manually created folds when switching files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_11

LANGUAGE: vimdoc
CODE:
```
:mkview
```

----------------------------------------

TITLE: Enabling Cursor Position Display in Vim
DESCRIPTION: Command to enable the ruler option that displays cursor position in the bottom right corner. This helps track your position when navigating through search results.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:set ruler
```

----------------------------------------

TITLE: Creating Custom User Map for Netrw
DESCRIPTION: Example of creating a custom mapping 'gu' to clear the marked file list in netrw by implementing a user-defined function and registering it with g:Netrw_UserMaps.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_48

LANGUAGE: vim
CODE:
```
" ExampleUserMap: {{{2
fun! ExampleUserMap(islocal)
  call netrw#Modify("netrwmarkfilelist",[])
  call netrw#Modify('netrwmarkfilemtch_{bufnr("%")}',"")
  let retval= ["refresh"]
  return retval
endfun
let g:Netrw_UserMaps= [["gu","ExampleUserMap"]]
```

----------------------------------------

TITLE: Calculating String Character Length in Vim
DESCRIPTION: Shows how to use strchars() function to count characters in a string, with an option to include or ignore composing characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_257

LANGUAGE: vim
CODE:
```
if has("patch-7.4.755")
  function s:strchars(str, skipcc)
    return strchars(a:str, a:skipcc)
  endfunction
else
  function s:strchars(str, skipcc)
    if a:skipcc
      return strlen(substitute(a:str, ".", "x", "g"))
    else
      return strchars(a:str)
    endif
  endfunction
endif
```

----------------------------------------

TITLE: Start of Line Pattern Configuration
DESCRIPTION: Setting up patterns to match keywords at line start or after semicolons with optional whitespace.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:let s:sol = '\%(^\|;\)\s*'
```

----------------------------------------

TITLE: Setting End-of-Line Character with Unicode
DESCRIPTION: Sets the end-of-line character in listchars to the U+21B5 (↵) character using Unicode notation. This provides a graphical representation of line endings in list mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_43

LANGUAGE: viml
CODE:
```
set listchars=eol:\U000021b5
```

----------------------------------------

TITLE: Setting Modeline Options in Vim
DESCRIPTION: These examples demonstrate how to use modelines in Vim to set file-specific options, and how to configure Vim to recognize modelines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
/* vim:set shiftwidth=4: */
```

LANGUAGE: vim
CODE:
```
:set modelines=10
```

LANGUAGE: vim
CODE:
```
:set nomodeline
```

LANGUAGE: vim
CODE:
```
// vim:set textwidth=72 dir=c\:\tmp:  use c:\tmp here
```

----------------------------------------

TITLE: Setting Normal Group Colors
DESCRIPTION: Example of setting terminal colors for the Normal highlight group
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_189

LANGUAGE: vim
CODE:
```
:highlight Normal ctermfg=grey ctermbg=darkblue
```

----------------------------------------

TITLE: Vim New Line Insertion
DESCRIPTION: Shows how to insert a new line below the cursor using the 'o' command in Vim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
oThat liked using Vim<Esc>
```

----------------------------------------

TITLE: Try-Catch-Finally Block in Vim Script
DESCRIPTION: Shows how to use a try-catch-finally block to handle errors and perform cleanup actions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_105

LANGUAGE: vim
CODE:
```
try | call Unknown() | finally | echomsg "cleanup" | endtry
echomsg "not reached"
```

----------------------------------------

TITLE: Mark Position Matching
DESCRIPTION: Explains pattern matching using marks in Vim. Patterns like '\%'m', '\%>'m', and '\%<'m' facilitate searches relative to these referential positions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_20

LANGUAGE: regex
CODE:
```
"\\%'m"
"\\%<'m"
"\\%>'m"
```

----------------------------------------

TITLE: Setting Browse Directory to Current Working Directory in Vim
DESCRIPTION: This example sets the 'browsedir' option to use the current working directory when opening the file browser, then opens the browser for editing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:set browsedir=current
:browse edit
```

----------------------------------------

TITLE: Customizing LaTeX Superscript and Subscript Concealment with VimL
DESCRIPTION: Settings to control which characters can be displayed as superscripts and subscripts in concealed LaTeX syntax. Can be adjusted based on font support for unicode characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_144

LANGUAGE: viml
CODE:
```
let g:tex_superscripts= "[0-9a-zA-W.,:;+-<>/()=]"
let g:tex_subscripts= "[0-9aehijklmnoprstuvx,+-/().]"
```

----------------------------------------

TITLE: Setting Browse Directory to Current Buffer's Directory in Vim
DESCRIPTION: This snippet sets the 'browsedir' option to use the same directory as the current buffer when opening the file browser, then opens the browser for editing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:set browsedir=buffer
:browse edit
```

----------------------------------------

TITLE: Continuation Line Handling in Vim
DESCRIPTION: Demonstrates how to handle syntax highlighting for continuation lines in preprocessor directives.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
:syntax region xPreProc start=/^#/ end=/$/ contains=xLineContinue
:syntax match xLineContinue "\\$" contained
```

----------------------------------------

TITLE: Post-Recovery File Writing
DESCRIPTION: Commands for saving a recovered file under a new name and comparing it with the original using diff mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:write help.txt.recovered
:edit #
:diffsp help.txt
```

----------------------------------------

TITLE: Disabling Shell Syntax Folding
DESCRIPTION: Setting the shell folding option to 0 to disable all syntax-based folding in shell scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_119

LANGUAGE: vim
CODE:
```
let g:sh_fold_enabled= 0
```

----------------------------------------

TITLE: Using serverstart() in Neovim (Vimscript)
DESCRIPTION: This example demonstrates how to use the serverstart() function without arguments to start a server with a default address and echo the result.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_225

LANGUAGE: vim
CODE:
```
echo serverstart()
```

----------------------------------------

TITLE: Disabling Cursor Shape Changes
DESCRIPTION: Configuration to disable cursor shape changes and prevent plugins from modifying cursor behavior.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set guicursor=
:autocmd OptionSet guicursor noautocmd set guicursor=
```

----------------------------------------

TITLE: Installing Ruby Provider for Neovim
DESCRIPTION: Installs the neovim RubyGem which is required for Ruby integration in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_6

LANGUAGE: bash
CODE:
```
gem install neovim
```

----------------------------------------

TITLE: Setting Rustc Path in Vim Configuration
DESCRIPTION: Sets the path to the Rust compiler (rustc) for use with the :RustRun and :RustExpand commands. If not set, rustc will be found in the system PATH.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
let g:rustc_path = $HOME."/bin/rustc"
```

----------------------------------------

TITLE: List Available Keymap Files in Vim
DESCRIPTION: Command to show all available keymap files in the runtime path.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:echo globpath(&rtp, "keymap/*.vim")
```

----------------------------------------

TITLE: Setting Node.js Host Program Path in Neovim
DESCRIPTION: Sets the path to the Node.js host program. This makes startup faster by avoiding the slow 'npm root -g' lookup.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
let g:node_host_prog = '/usr/local/bin/neovim-node-host'
```

----------------------------------------

TITLE: Setting includeexpr for Java in Vim
DESCRIPTION: Example of setting the 'includeexpr' option for Java files in Vim. This expression transforms the file names found by the 'include' option, replacing dots with forward slashes to match Java package structures.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_30

LANGUAGE: vim
CODE:
```
setlocal includeexpr=substitute(v:fname,'\\.','/','g')
```

----------------------------------------

TITLE: Executing System Command with File Expansion in Vim
DESCRIPTION: This snippet demonstrates how to use the system function to execute a shell command with proper file name expansion and escaping.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_272

LANGUAGE: vim
CODE:
```
echo system('ls '..shellescape(expand('%:h')))
```

----------------------------------------

TITLE: Multiple Command Examples with Bar Separator
DESCRIPTION: Various examples showing different ways to use the bar separator for command chaining and mapping.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:!ls | wc
:r !ls | wc
:%g/foo/p|>
:%s/foo/bar/|>
:map q 10^V|
:map q 10\| map \ l
```

----------------------------------------

TITLE: Using UV Check Handle for Post-I/O Operations
DESCRIPTION: Example showing how to use a check handle to execute code after I/O polling in the event loop.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_16

LANGUAGE: lua
CODE:
```
local check = uv.new_check()
check:start(function()
  print("After I/O polling")
end)
```

----------------------------------------

TITLE: Clearing Syntax in Current Buffer
DESCRIPTION: Command to clear all syntax highlighting in the current buffer. Useful when switching off syntax highlighting or switching to a different syntax.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_198

LANGUAGE: vim
CODE:
```
:syntax clear
```

----------------------------------------

TITLE: Navigating to Last Location List Error
DESCRIPTION: Command for displaying the last error in the location list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
:lla[st][!] [nr]
```

----------------------------------------

TITLE: Creating Custom Mapping for SpecChangelog in Vim
DESCRIPTION: Example of how to create a custom mapping for the SpecChangelog functionality, binding it to the F5 key for spec files only.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
au FileType spec map <buffer> <F5> <Plug>SpecChangelog
```

----------------------------------------

TITLE: Time Measurement with reltimefloat
DESCRIPTION: Demonstrates measuring execution time of a function using reltime() and reltimefloat()
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_204

LANGUAGE: vim
CODE:
```
let start = reltime()
call MyFunction()
let seconds = reltimefloat(reltime(start))
```

----------------------------------------

TITLE: Getting Thread Affinity in Lua with Libuv
DESCRIPTION: Retrieves the CPU affinity settings for a specified thread. Takes a thread object and an optional mask size parameter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_60

LANGUAGE: lua
CODE:
```
uv.thread_getaffinity({thread} [, {mask_size}])
```

----------------------------------------

TITLE: Setting Modula-2 Syntax Highlighting Options in Vim
DESCRIPTION: Configures options for Modula-2 syntax highlighting, including setting the default dialect and allowing specific syntax features for different dialects.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_85

LANGUAGE: VimScript
CODE:
```
let g:modula2_default_dialect = 'm2pim'
```

----------------------------------------

TITLE: Rust File Evaluation Commands (Vim)
DESCRIPTION: These commands are designed for working with standalone Rust files, allowing compilation, execution, expansion, and IR/assembly code generation. They include :RustRun, :RustExpand, :RustEmitIr, and :RustEmitAsm. The commands rely on the rustc compiler and respect the g:rustc_path configuration if set.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_30

LANGUAGE: vim
CODE:
```
:RustRun  [args]                                                    *:RustRun*
:RustRun! [rustc-args] [--] [args]
		Compiles and runs the current file. If it has unsaved changes,
		it will be saved first using |:update|. If the current file is
		an unnamed buffer, it will be written to a temporary file
		first. The compiled binary is always placed in a temporary
		directory, but is run from the current directory.

		The arguments given to |:RustRun| will be passed to the
		compiled binary.

		If ! is specified, the arguments are passed to rustc instead.
		A "--" argument will separate the rustc arguments from the
		arguments passed to the binary.

		If |g:rustc_path| is defined, it is used as the path to rustc.
		Otherwise it is assumed rustc can be found in $PATH.

:RustExpand  [args]                                              *:RustExpand*
:RustExpand! [TYPE] [args]
		Expands the current file using `--pretty` and displays the
		results in a new split. If the current file has unsaved
		changes, it will be saved first using |:update|. If the
		current file is an unnamed buffer, it will be written to a
		temporary file first.

		The arguments given to |:RustExpand| will be passed to rustc.
		This is largely intended for specifying various `--cfg`
		configurations.

		If ! is specified, the first argument is the expansion type to
		pass to `rustc --pretty` . Otherwise it will default to
		"expanded".

		If |g:rustc_path| is defined, it is used as the path to rustc.
		Otherwise it is assumed rustc can be found in $PATH.

:RustEmitIr [args]                                               *:RustEmitIr*
		Compiles the current file to LLVM IR and displays the results
		in a new split. If the current file has unsaved changes, it
		will be saved first using |:update|. If the current file is an
		unnamed buffer, it will be written to a temporary file first.

		The arguments given to |:RustEmitIr| will be passed to rustc.

		If |g:rustc_path| is defined, it is used as the path to rustc.
		Otherwise it is assumed rustc can be found in $PATH.

:RustEmitAsm [args]                                             *:RustEmitAsm*
		Compiles the current file to assembly and displays the results
		in a new split. If the current file has unsaved changes, it
		will be saved first using |:update|. If the current file is an
		unnamed buffer, it will be written to a temporary file first.

		The arguments given to |:RustEmitAsm| will be passed to rustc.

		If |g:rustc_path| is defined, it is used as the path to rustc.
		Otherwise it is assumed rustc can be found in $PATH.
```

----------------------------------------

TITLE: Using Lambda Functions for Filtering in Vim
DESCRIPTION: Demonstrates how to use lambda functions with filter() for more concise filtering. Two examples are shown: one keeping items where index * value <= 42, and another keeping odd-indexed items.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_69

LANGUAGE: vim
CODE:
```
call filter(myList, {idx, val -> idx * val <= 42})
```

LANGUAGE: vim
CODE:
```
call filter(myList, {idx -> idx % 2 == 1})
```

----------------------------------------

TITLE: Managing Sessions and Shada in Vim
DESCRIPTION: This snippet shows how to save and restore both a session and shada (shared data) file in Vim, allowing for complete state preservation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:mksession! ~/.config/nvim/secret.vim
:wshada! ~/.local/state/nvim/shada/secret.shada
```

LANGUAGE: vim
CODE:
```
:source ~/.config/nvim/secret.vim
:rshada! ~/.local/state/nvim/shada/secret.shada
```

----------------------------------------

TITLE: Adjusting Syntax Synchronization for LaTeX in VimL
DESCRIPTION: Commands to adjust synchronization settings for LaTeX syntax highlighting. Can be tuned based on computer performance to optimize syntax highlighting speed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_136

LANGUAGE: viml
CODE:
```
:syn sync maxlines=200
:syn sync minlines=50
```

----------------------------------------

TITLE: Trim Directive Example in Treesitter Query (Both Sides)
DESCRIPTION: This snippet illustrates the use of the `trim!` directive to trim whitespace, including blank lines, from both the beginning and end of the matched node. It shows the parameters required for trimming both sides.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_9

LANGUAGE: query
CODE:
```
"(#trim! @fold 1 0 1 0)"
```

----------------------------------------

TITLE: Blob to List Conversion
DESCRIPTION: Shows how to convert a blob to a list of byte values
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
blob2list(0z0102.0304)  " returns [1, 2, 3, 4]
blob2list(0z)        " returns []
```

----------------------------------------

TITLE: Using perldo for Line-by-Line Processing
DESCRIPTION: Examples of using the :perldo command to process each line in a range, including reversing lines and adding line numbers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_perl.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:perldo $_ = reverse($_);
:perldo $_ = "".$linenr." => $line";
```

----------------------------------------

TITLE: Configuring PowerShell Script Block Folding in Vim
DESCRIPTION: Vim configuration setting to disable folding of PowerShell script blocks in the syntax highlighting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ps1.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:let g:ps1_nofold_blocks = 1
```

----------------------------------------

TITLE: RGB Color Definition
DESCRIPTION: Example of setting RGB colors using hexadecimal values
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_194

LANGUAGE: vim
CODE:
```
:highlight Comment guifg=#11f0c3 guibg=#ff00ff
```

----------------------------------------

TITLE: Enum Switch Statement in C
DESCRIPTION: Example showing proper handling of switch statements for enumerated types.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_17

LANGUAGE: c
CODE:
```
case A:
  ...
case B:
  ...
case C:
  ...
case D:
case E:
case F:
  ...
```

----------------------------------------

TITLE: Forcing File Overwrite in Vim
DESCRIPTION: Shows how to overwrite an existing file when writing a line range by appending '!' to the write command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:.,$write! tempo
```

----------------------------------------

TITLE: Inclusive Syntax Containment in Vim
DESCRIPTION: Shows how to create syntax regions that can contain all other syntax items or exclude specific groups.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:syntax region xList start=/\[/ end=/\]/ contains=ALL
:syntax region xList start=/\[/ end=/\]/ contains=ALLBUT,xString
```

----------------------------------------

TITLE: Setting Backup Directory Configuration in Vim
DESCRIPTION: Example of setting backup directory paths with escaped characters to handle spaces and commas in directory names.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
set bdir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
```

----------------------------------------

TITLE: Disabling Spell Checking in LaTeX Documents with VimL
DESCRIPTION: Configuration to disable spell checking throughout an entire LaTeX document. This setting needs to be placed in your vimrc file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_132

LANGUAGE: viml
CODE:
```
let g:tex_nospell=1
```

----------------------------------------

TITLE: Reading Directory Contents into Vim
DESCRIPTION: Shows how to insert the output of ls (Unix) or dir (Windows) commands into the current file below the cursor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
:read !ls
```

LANGUAGE: vim
CODE:
```
:read !dir
```

----------------------------------------

TITLE: Opening URL in Vim
DESCRIPTION: This command opens a file specified by a URL.  Move the cursor to any character of the URL and then use this command, Vim will figure out which program to use for downloading the file, download it and edit the copy. It uses the netrw plugin to handle the network access.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
	gf
```

----------------------------------------

TITLE: Disabling Filetype Detection in Neovim Init File
DESCRIPTION: Add this line to init.vim to disable the default filetype detection in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
:filetype off
```

----------------------------------------

TITLE: Getting Process Priority with uv.os_getpriority()
DESCRIPTION: Returns the scheduling priority of the specified process ID as a number.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_100

LANGUAGE: lua
CODE:
```
uv.os_getpriority({pid})
```

----------------------------------------

TITLE: Moving windows to the left
DESCRIPTION: Moves the current window to the far left.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
	CTRL-W H
```

----------------------------------------

TITLE: Enabling ReStructuredText Style in Neovim
DESCRIPTION: This command sets the `g:rst_style` variable to `1`, enabling the optional formatting settings (expandtab, shiftwidth=3, softtabstop=3, tabstop=8) for ReStructuredText files. Requires the rst plugin to be installed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_36

LANGUAGE: vim
CODE:
```
	let g:rst_style = 1
```

----------------------------------------

TITLE: Automatically Opening Directory Listing on GVim Startup in VimL
DESCRIPTION: This snippet demonstrates how to configure GVim to automatically open a directory listing on startup when no files are specified. It uses an autocommand to check startup conditions and open the current directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_56

LANGUAGE: VimL
CODE:
```
augroup VimStartup
  au!
  au VimEnter * if expand("%") == "" && argc() == 0 &&
  \ (v:servername =~ 'GVIM\d*' || v:servername == "")
  \ | e . | endif
augroup END
```

----------------------------------------

TITLE: Channel Send Data Example in Vim
DESCRIPTION: Shows how to send data through a channel using chansend() function, demonstrating list handling and newline processing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_29

LANGUAGE: vim
CODE:
```
call chansend(id, ["abc", "123\n456", ""])
```

----------------------------------------

TITLE: Registering Filetypes with Treesitter Language
DESCRIPTION: Demonstrates how to associate specific filetypes with a Treesitter language parser.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_1

LANGUAGE: lua
CODE:
```
vim.treesitter.language.register('xml', { 'svg', 'xslt' })
```

----------------------------------------

TITLE: Setting Russian keymap in Vim
DESCRIPTION: Command to set a Russian keymap in Vim, which allows switching between languages independently from system keyboard settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/russian.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:set keymap=russian-jcukenwin
```

----------------------------------------

TITLE: Starting GUI Vim in Foreground Mode
DESCRIPTION: This command starts gvim in foreground mode, which prevents it from disconnecting from the shell. This is useful when editing files from other programs that wait for the editor to finish.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_11

LANGUAGE: bash
CODE:
```
gvim -f file.txt
```

----------------------------------------

TITLE: Using UV Idle Handle for Loop Iteration Operations
DESCRIPTION: Example demonstrating how to use an idle handle to execute code on every loop iteration before prepare handles.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_17

LANGUAGE: lua
CODE:
```
local idle = uv.new_idle()
idle:start(function()
  print("Before I/O polling, no blocking")
end)
```

----------------------------------------

TITLE: Simple Word Wrapping Mappings
DESCRIPTION: Key mappings for surrounding words with brackets and parentheses
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
map <F5> i{<Esc>ea}<Esc>
map \p i(<Esc>ea)<Esc>
map \c i{<Esc>ea}<Esc>
```

----------------------------------------

TITLE: Setting System Locale for makeencoding
DESCRIPTION: Sets the makeencoding option to use the system locale encoding ('char') for reading output from external commands, which is particularly useful on Windows systems.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_47

LANGUAGE: viml
CODE:
```
set makeencoding=char	" system locale is used
```

----------------------------------------

TITLE: Enabling Cargo Check with All Features
DESCRIPTION: When enabled, passes the '--all-features' option to Cargo when Syntastic performs linting, enabling all features of the package during the check regardless of their default status.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
let g:rust_cargo_check_all_features = 0
```

----------------------------------------

TITLE: Basic Function Documentation in C
DESCRIPTION: Example showing how to document a function without using Doxygen comments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_8

LANGUAGE: c
CODE:
```
// Note that we don't use Doxygen comments here.
Iterator *get_iterator(void *arg1, void *arg2)
{
  ...
}
```

----------------------------------------

TITLE: Setting guifont in Vim
DESCRIPTION: Examples of setting the 'guifont' option in Vim, which specifies the font used for the GUI version of Vim. The option allows for various font properties to be set, including name, size, weight, and character set.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_26

LANGUAGE: vim
CODE:
```
set guifont=courier_new:h12:w5:b:cRUSSIAN
set guifont=Andale_Mono:h7.5:w4.5
```

----------------------------------------

TITLE: Editing a specific file in the preview window (Vim)
DESCRIPTION: This snippet shows how to edit a specific file in the preview window using the `:pedit` command, useful for editing header files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
":pedit defs.h"
```

----------------------------------------

TITLE: Starting Blockwise Visual Mode in Neovim
DESCRIPTION: This command starts blockwise Visual mode, allowing for rectangular selections of text. The [count] argument can be used to specify the dimensions of the block to be selected.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
"[count]CTRL-V"
```

----------------------------------------

TITLE: Expression-based Folding for Email Quotes
DESCRIPTION: Vim configuration for folding email quoted text based on '>' characters at the start of lines using foldexpr.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
:set foldmethod=expr
:set foldexpr=strlen(substitute(substitute(getline(v:lnum),'\\s','','g'),'[^>].*','',''))
```

----------------------------------------

TITLE: Force File Encoding When Opening File in Vim
DESCRIPTION: Example of forcing a specific encoding (KOI8-R) when opening a Russian text file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:edit ++enc=koi8-r russian.txt
```

----------------------------------------

TITLE: Square Bracket Navigation Commands in Neovim
DESCRIPTION: Advanced navigation commands using square brackets for moving between sections, changes, marks, and searching through code and included files
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
[ CTRL-D - jump to first #define
[I - list lines containing word under cursor
]] - move to next section
```

----------------------------------------

TITLE: Searching Files with Unix Grep and Vim
DESCRIPTION: Opens Vim to edit all C files containing the word 'frame_counter'. Uses backticks to execute the grep command and feed its results as file arguments to Vim. The -l flag makes grep only output matching filenames.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_7

LANGUAGE: shell
CODE:
```
vim `grep -l frame_counter *.c`
```

----------------------------------------

TITLE: Disabling hlsearch highlight in Vim
DESCRIPTION: Example of using the :nohlsearch command to temporarily disable the highlighting of search matches without changing the 'hlsearch' option value. This is useful when the highlighting becomes distracting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_28

LANGUAGE: vim
CODE:
```
:nohlsearch
```

----------------------------------------

TITLE: Environment Variable Access in Vim
DESCRIPTION: Example showing how to get the value of HOME environment variable using getenv() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_91

LANGUAGE: vim
CODE:
```
myHome = getenv('HOME')
```

----------------------------------------

TITLE: Checking Neovim Runtime Path
DESCRIPTION: Vim command to display the current runtime path setting, which shows where Neovim looks for configuration files including filetype plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
set runtimepath?
```

----------------------------------------

TITLE: Customizing Navigation Keys for Column/Table Lists
DESCRIPTION: Allows the user to customize the keys for navigating between table and column lists in the dynamic completion popup.  This example shows how to set the right and left arrow keys.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
                                let g:ftplugin_sql_omni_key_right = '<Right>'
                                let g:ftplugin_sql_omni_key_left  = '<Left>'
```

----------------------------------------

TITLE: Sending Redraw Batch in RPC Notification for Nvim UI
DESCRIPTION: Example of a typical 'redraw' batch sent in a single RPC notification to update the UI. It includes various events like grid_resize, grid_line, msg_showmode, win_pos, grid_cursor_goto, and flush.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_0

LANGUAGE: json
CODE:
```
['notification', 'redraw',
  [
    ['grid_resize', [2, 77, 36]],
    ['grid_line',
      [2, 0, 0, [[' ' , 0, 77]], false],
      [2, 1, 0, [['~', 7], [' ', 7, 76]], false],
      [2, 9, 0, [['~', 7], [' ', 7, 76]], false],
      ...
      [2, 35, 0, [['~', 7], [' ', 7, 76]], false],
      [1, 36, 0, [['[', 9], ['N'], ['o'], [' '], ['N'], ['a'], ['m'], ['e'], [']']], false],
      [1, 36, 9, [[' ', 9, 50]], false],
      [1, 36, 59, [['0', 9], [','], ['0'], ['-' ], ['1'], [' ', 9, 10], ['A'], ['l', 9, 2]], false]
    ],
    ['msg_showmode', [[]]],
    ['win_pos', [2, 1000, 0, 0, 77, 36]],
    ['grid_cursor_goto', [2, 0, 0]],
    ['flush', []]
  ]
]
```

----------------------------------------

TITLE: Using Nested Syntax Items in Vim Script
DESCRIPTION: Allows for nested syntax highlighting, such as highlighting specific words within comments, by defining contained items and specifying which items may contain others.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_7

LANGUAGE: Vim Script
CODE:
```
:syntax keyword xTodo TODO contained
:syntax match xComment /%.*/ contains=xTodo
```

----------------------------------------

TITLE: Creating Custom Color Scheme Directory
DESCRIPTION: Commands to create a custom color scheme directory and copy an existing scheme as template
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_5

LANGUAGE: shell
CODE:
```
!mkdir -p ~/.config/nvim/colors
!cp $VIMRUNTIME/colors/morning.vim ~/.config/nvim/colors/mine.vim
```

----------------------------------------

TITLE: Configuring Dotnet Compiler Output Options
DESCRIPTION: Configuration for the .NET CLI compiler to limit output to errors only and suppress project name in error messages.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_41

LANGUAGE: vim
CODE:
```
let dotnet_errors_only = v:true
let dotnet_show_project_file = v:false
compiler dotnet
```

----------------------------------------

TITLE: Parsing Treesitter Query in Lua
DESCRIPTION: Demonstrates how to parse a Treesitter query string and iterate over captures in Lua. The example parses a 'vimdoc' query, retrieves the syntax tree, and prints node types and text for each capture.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_26

LANGUAGE: lua
CODE:
```
local query = vim.treesitter.query.parse('vimdoc', [[
  ; query
  ((h1) @str
    (#trim! @str 1 1 1 1))
]])
local tree = vim.treesitter.get_parser():parse()[1]
for id, node, metadata in query:iter_captures(tree:root(), 0) do
   -- Print the node name and source text.
   vim.print({node:type(), vim.treesitter.get_node_text(node, vim.api.nvim_get_current_buf())})
end
```

----------------------------------------

TITLE: Enhancing Clojure Syntax Highlighting in VimL
DESCRIPTION: Adds additional symbols to Clojure syntax highlighting via the 'g:clojure_syntax_keywords' dictionary. Users can also toggle core keyword highlighting and enable code folding.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_15

LANGUAGE: VimL
CODE:
```
let g:clojure_syntax_keywords = { 'clojureMacro': ["defproject", "defcustom"], 'clojureFunc': ["string/join", "string/replace"] }
```

----------------------------------------

TITLE: Retrieving API Metadata in Vimscript
DESCRIPTION: The api_info() function returns a Dictionary containing Neovim API metadata. It can be used to inspect the available API functions and their parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_4

LANGUAGE: vimscript
CODE:
```
lua vim.print(vim.fn.api_info())
```

----------------------------------------

TITLE: Creating Nested Dictionaries in Vim
DESCRIPTION: Demonstrates how to create nested dictionaries with dictionaries as values.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_44

LANGUAGE: vim
CODE:
```
:let nestdict = {1: {11: 'a', 12: 'b'}, 2: {21: 'c'}}
```

----------------------------------------

TITLE: File Navigation Commands in Vim
DESCRIPTION: Examples of various file navigation and command syntax including line printing and searching.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:|
:3|
:3
:1,$:s/pat/string
```

----------------------------------------

TITLE: Setting guicursor for mode-specific cursor styles in Neovim
DESCRIPTION: Configures the 'guicursor' option to set different cursor styles for various Vim modes. This example sets block cursors for normal/visual modes, a vertical bar for insert mode, and a horizontal bar for replace mode, with custom blinking settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_23

LANGUAGE: viml
CODE:
```
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
  \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
  \,sm:block-blinkwait175-blinkoff150-blinkon175
```

----------------------------------------

TITLE: Window Equalizing Command
DESCRIPTION: Command to equalize window sizes vertically or horizontally using wincmd. Shows how to make windows equally high or wide while respecting winheight and winwidth settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
vertical wincmd =
horizontal wincmd =
```

----------------------------------------

TITLE: Enabling multiline scalar detection in YAML
DESCRIPTION: Enables detection of multiline scalars in YAML files. By default, the YAML indent script does not try to detect multiline scalars.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
let g:yaml_indent_multiline_scalar = 1
```

----------------------------------------

TITLE: Identifier Pattern Matching
DESCRIPTION: Patterns for matching programming language identifiers that start with a letter and contain letters, digits, and underscores.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
/\<\h\w*\>
/\w\@<!\h\w*\w\@!
```

----------------------------------------

TITLE: Setting Namespace Properties in Neovim Lua API
DESCRIPTION: Experimental function to set properties for a namespace. Allows setting optional parameters like a list of windows to be scoped in.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_70

LANGUAGE: lua
CODE:
```
nvim__ns_set({ns_id}, {opts})
```

----------------------------------------

TITLE: Getting $VIMRUNTIME value using nvim command
DESCRIPTION: This command executes nvim in headless mode with a clean environment to echo the value of the $VIMRUNTIME environment variable. This is particularly useful for scripts that need to locate support files like documentation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_7

LANGUAGE: Shell
CODE:
```
"VIMRUNTIME=\"$(nvim --clean --headless --cmd 'echo $VIMRUNTIME|q')\""
```

----------------------------------------

TITLE: Loading specific numbered view
DESCRIPTION: Loads the second numbered view that was previously saved. This allows managing multiple view configurations for the same file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_14

LANGUAGE: vimdoc
CODE:
```
:loadview 2
```

----------------------------------------

TITLE: Disabling Translated Headers in Diff Syntax Highlighting
DESCRIPTION: Turns off translation of headers in Vim's diff syntax highlighting to improve performance for files with very long lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_23

LANGUAGE: VimScript
CODE:
```
let diff_translations = 0
```

----------------------------------------

TITLE: Custom Diff Expression Function in Vim
DESCRIPTION: Example implementation of a custom diff expression function that handles case sensitivity and whitespace options when comparing files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
set diffexpr=MyDiff()
function MyDiff()
   let opt = ""
   if &diffopt =~ "icase"
     let opt = opt .. "-i "
   endif
   if &diffopt =~ "iwhite"
     let opt = opt .. "-b "
   endif
   silent execute "!diff -a --binary " .. opt .. v:fname_in .. " " .. v:fname_new ..
	\  " > " .. v:fname_out
   redraw!
endfunction
```

----------------------------------------

TITLE: Switch Statement Best Practices in C
DESCRIPTION: Example showing proper formatting and handling of switch statements with default case.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_16

LANGUAGE: c
CODE:
```
switch (var) {
  case 0:
    ...
    break;
  case 1:
    ...
    break;
  default:
    abort();
}
```

----------------------------------------

TITLE: Configuring TeX Flavor for LaTeX Compilation
DESCRIPTION: Example of setting the TeX flavor for compiling TeX documents, specifically configuring amstex as the processing engine for the current buffer when working with AMS-TeX files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_58

LANGUAGE: vim
CODE:
```
:let b:tex_flavor = 'amstex'
:compiler tex
[editing...]
:make mypaper
```

----------------------------------------

TITLE: Defining a Custom Sign with Multiple Attributes
DESCRIPTION: Example showing how to define a sign named 'MySign' with text, text highlighting and line highlighting attributes
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:sign define MySign text=>> texthl=Search linehl=DiffText
```

----------------------------------------

TITLE: Using UV Prepare Handle for Pre-I/O Operations
DESCRIPTION: Example demonstrating how to use a prepare handle to execute code before I/O polling in the event loop.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_15

LANGUAGE: lua
CODE:
```
local prepare = uv.new_prepare()
prepare:start(function()
  print("Before I/O polling")
end)
```

----------------------------------------

TITLE: Setting Language in Neovim
DESCRIPTION: Command to change the language/locale setting within Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:language ja_JP.EUC
```

----------------------------------------

TITLE: Activating Form Enhanced Color Mode in Vim
DESCRIPTION: Enhances the color distinction for FORM programs in Vim, beneficial for dark theme users, by setting 'form_enhanced_color' to 1. There's a focus on distinguishing header statements from body statements with specific color changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_33

LANGUAGE: VimScript
CODE:
```
:let form_enhanced_color=1
```

----------------------------------------

TITLE: Removing Toolbar from GUI
DESCRIPTION: Command to permanently disable the toolbar in gVim by modifying guioptions
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set guioptions-=T
```

----------------------------------------

TITLE: Custom EditorConfig Property Implementation
DESCRIPTION: Demonstrates how to add a custom EditorConfig property named 'foo' that validates against charset and sets a buffer-local variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/editorconfig.txt#2025-04-20_snippet_1

LANGUAGE: lua
CODE:
```
require('editorconfig').properties.foo = function(bufnr, val, opts)
  if opts.charset and opts.charset ~= "utf-8" then
    error("foo can only be set when charset is utf-8", 0)
  end
  vim.b[bufnr].foo = val
end
```

----------------------------------------

TITLE: Function Arguments Documentation in C
DESCRIPTION: Examples of documenting function arguments with poor and improved comment styles.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_12

LANGUAGE: c
CODE:
```
bool success = calculate_something(interesting_value,
                                   10,
                                   false,
                                   NULL);  // What are these arguments??
```

----------------------------------------

TITLE: Script-Local Variables in VimL
DESCRIPTION: This snippet emphasizes the use of script-local variables to avoid conflicts when sourcing different scripts in VimL. By using s: prefix, variables are confined to the script, preventing interference. This example demonstrates using a counter within a script call, which remains unaffected by external script inclusions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_3

LANGUAGE: VimL
CODE:
```
:let s:count = 1
:while s:count < 5
:  source other.vim
:  let s:count += 1
:endwhile
```

----------------------------------------

TITLE: Truncating Floating-Point Numbers in Vim
DESCRIPTION: Examples of using the trunc() function to truncate floating-point numbers towards zero in Vim. Shows behavior for positive and negative numbers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_277

LANGUAGE: vim
CODE:
```
echo trunc(1.456)
echo trunc(-5.456)
echo trunc(4.0)
```

----------------------------------------

TITLE: Basic Syntax Region Definition in Vim
DESCRIPTION: Demonstrates defining contained syntax regions with keepend argument to prevent double end-of-line matching.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:syntax region xComment start=/%/ end=/$/ contained
:syntax region xPreProc start=/#/ end=/$/ contains=xComment keepend
```

----------------------------------------

TITLE: Enabling Erlang Special Atoms Highlighting in Vim
DESCRIPTION: This snippet enables syntax highlighting for special atoms in Erlang within Vim by setting the 'g:erlang_highlight_special_atoms' variable to 1. No additional plugins or dependencies are required.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_32

LANGUAGE: VimScript
CODE:
```
:let g:erlang_highlight_special_atoms = 1
```

----------------------------------------

TITLE: Setting mapleader Variable in Vim
DESCRIPTION: Sets the mapleader variable to a comma, changing the prefix used by <Leader> mappings from the default backslash to a comma.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
let mapleader = ","
```

----------------------------------------

TITLE: Printf Width and Precision Examples in Vim
DESCRIPTION: Demonstrates using width and precision specifiers with printf formatting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_195

LANGUAGE: vim
CODE:
```
echo printf("%1$*2$.*3$d", 1, 2, 3)
```

LANGUAGE: vim
CODE:
```
echo printf("%1$4.*2$f", 1.4142135, 6)
```

----------------------------------------

TITLE: Getting buffer-local user commands in Neovim
DESCRIPTION: This function retrieves a map of buffer-local user-defined commands in Neovim. The function requires the buffer ID and optional parameters. The return value is a map of maps describing commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_42

LANGUAGE: vim
CODE:
```
nvim_buf_get_commands({buffer}, {opts})              *nvim_buf_get_commands()*\n    Gets a map of buffer-local |user-commands|.\n\n    Attributes: ~\n        Since: 0.3.0\n\n    Parameters: ~\n      • {buffer}  Buffer id, or 0 for current buffer\n      • {opts}    Optional parameters. Currently not used.\n\n    Return: ~\n        Map of maps describing commands.
```

----------------------------------------

TITLE: Moving windows to the bottom
DESCRIPTION: Moves the current window to the bottom.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
	CTRL-W J
```

----------------------------------------

TITLE: Retrieving System Information with uv.os_uname()
DESCRIPTION: Returns a table containing system information including operating system name, release, version, and machine architecture.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_89

LANGUAGE: lua
CODE:
```
uv.os_uname()
```

----------------------------------------

TITLE: Comment alignment example in Vim
DESCRIPTION: This snippet illustrates the use of alignment flags ('r' and offset) within the 'comments' option to customize the appearance of a comment. It demonstrates how the 'r' flag and the offset are used to align the start and end of a comment.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
":set comments=sr:/***,m:**,ex-2:******/"
```

----------------------------------------

TITLE: Disabling PDF Maps in Neovim
DESCRIPTION: This command sets the `g:no_pdf_maps` variable to `1`, which disables the default key mappings (<C-]> and <C-T>) for navigating PDF files. It requires the pdf plugin to be installed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_27

LANGUAGE: vim
CODE:
```
	:let g:no_pdf_maps = 1
```

----------------------------------------

TITLE: Random Number Seed Initialization with srand()
DESCRIPTION: Demonstrates initializing random number generator seed using srand() function with and without parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_251

LANGUAGE: vim
CODE:
```
let seed = srand()
let seed = srand(userinput)
echo rand(seed)
```

----------------------------------------

TITLE: List Unpacking with Rest Parameter in Vim
DESCRIPTION: Shows how to handle extra list items during unpacking by using a semicolon and rest variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_28

LANGUAGE: vim
CODE:
```
:let [var1, var2; rest] = mylist
```

----------------------------------------

TITLE: Creating a New Tab Page
DESCRIPTION: Shows how to create a new tab page and open a file in it. This command creates a new tab and opens 'thatfile' for editing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_27

LANGUAGE: vim
CODE:
```
:tabedit thatfile
```

----------------------------------------

TITLE: Chaining Execute with Other Commands
DESCRIPTION: Demonstrates executing an external shell command and then echoing text afterward, bypassing Vim's command separator limitations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_113

LANGUAGE: vim
CODE:
```
:execute '!ls' | echo "theend"
```

----------------------------------------

TITLE: Retrieving Vim Process ID
DESCRIPTION: The getpid() function returns the process ID of the Vim process as a number. This ID is unique until Vim exits.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_101

LANGUAGE: vim
CODE:
```
getpid()
```

----------------------------------------

TITLE: Setting Autoread Local to Global Value
DESCRIPTION: Command to switch back to using the global value for the autoread option when it has a local value.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
set autoread<
```

----------------------------------------

TITLE: Setting Unix Backup Directory Paths
DESCRIPTION: Example of configuring backup directory paths for Unix systems, including hidden backup directories.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
set backupdir=./.backup,~/.backup,.,/tmp
```

----------------------------------------

TITLE: GDB Stack Trace Commands
DESCRIPTION: Commands for examining stack traces in GDB during Vim debugging sessions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/debug.txt#2025-04-20_snippet_1

LANGUAGE: shell
CODE:
```
where
frame 3
```

----------------------------------------

TITLE: Comparing Lists with Different Types in Vim
DESCRIPTION: Demonstrates that Vim lists with different types (number vs string) are considered not equal, unlike direct comparison.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
echo [4] == ["4"]
```

----------------------------------------

TITLE: Configuring R Indentation in Vim
DESCRIPTION: This snippet configures R code indentation by modifying Vim variables such as 'r_indent_align_args', 'r_indent_ess_comments', and 'r_indent_comment_column'. It addresses alignment of function arguments, comment indentation, and compatibility with Emacs/ESS indentation behavior. Users can achieve desired layout by setting these variables in their Vimrc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_11

LANGUAGE: VimL
CODE:
```
let r_indent_align_args = 0
let r_indent_ess_comments = 1
let r_indent_comment_column = 30
let r_indent_ess_compatible = 1
```

----------------------------------------

TITLE: Installing Neovim from Pre-built Linux Archive
DESCRIPTION: Shell commands to download and install Neovim from pre-built archive on Linux systems.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_2

LANGUAGE: sh
CODE:
```
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
sudo rm -rf /opt/nvim
sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz
```

----------------------------------------

TITLE: Gsub Directive Example in Treesitter Query
DESCRIPTION: This code snippet demonstrates the usage of the `gsub!` directive within a treesitter query. It shows how to use regular expressions to replace parts of the matched node's text and stores the result in the metadata.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_7

LANGUAGE: query
CODE:
```
"(#gsub! @_node \".*%.(.*)\" \"%1\")"
```

----------------------------------------

TITLE: Getting Process Title in Lua with Libuv
DESCRIPTION: Retrieves the title of the current process.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_73

LANGUAGE: lua
CODE:
```
uv.get_process_title()
```

----------------------------------------

TITLE: Configuring R Code Syntax Highlighting in Vim
DESCRIPTION: Sets configuration options for R syntax highlighting, including the number of lines to parse backwards, ROxygen highlighting, folding options, and function pattern highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_102

LANGUAGE: vim
CODE:
```
let r_syntax_minlines = 60
let r_syntax_hl_roxygen = 0
let r_syntax_folding = 1
let r_syntax_fun_pattern = 1
```

----------------------------------------

TITLE: Listing Sourced Scripts in Vim
DESCRIPTION: The :scriptnames command lists all sourced script names in the order they were first sourced, including their script ID.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:scr[iptnames]
```

----------------------------------------

TITLE: Cleanup Before Loading New Color Scheme in VimL
DESCRIPTION: This autocmd example demonstrates how to clean up resources just before loading another colorscheme using the ColorSchemePre event. It unregisters itself after executing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
let g:term_ansi_colors = ...
augroup MyColorscheme
  au!
  au ColorSchemePre * unlet g:term_ansi_colors
  au ColorSchemePre * au! MyColorscheme
augroup END
```

----------------------------------------

TITLE: Setting makeprg for LaTeX Non-stop Mode in Vim
DESCRIPTION: Configures the makeprg option to run LaTeX in non-stop mode, so it continues processing even when errors are encountered, making it possible to collect multiple errors at once.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_67

LANGUAGE: vim
CODE:
```
:set makeprg=latex\ \\\\nonstopmode\ \\\\input\\{$*}
```

----------------------------------------

TITLE: Getting Script Number in Vim/Neovim Function
DESCRIPTION: A function to retrieve the unique script number for use in complex scripts. It uses the expand() function with <SID> to extract the script number.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_30

LANGUAGE: viml
CODE:
```
func s:ScriptNumber()
  return matchstr(expand('<SID>'), '<SNR>\zs\d\+\ze_')
endfunc
```

----------------------------------------

TITLE: Netrw Sort Options Configuration in VimL
DESCRIPTION: Example showing how to configure g:netrw_sort_options to use case-insensitive sorting in the Netrw file browser. This setting is added to the :sort command used by Netrw internally.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_39

LANGUAGE: viml
CODE:
```
let g:netrw_sort_options="i"
```

----------------------------------------

TITLE: Repeating a Functional Test
DESCRIPTION: This command repeats a specified functional test a defined number of times using the BUSTED_ARGS environment variable to modify the test execution parameters, specifically to repeat and avoid maintaining the current state across runs.
SOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_7

LANGUAGE: bash
CODE:
```
BUSTED_ARGS="--repeat=100 --no-keep-going" TEST_FILE=test/functional/foo_spec.lua make functionaltest
```

LANGUAGE: bash
CODE:
```
cmake -E env "TEST_FILE=test/functional/foo_spec.lua" cmake -E env BUSTED_ARGS="--repeat=100 --no-keep-going" cmake --build build --target functionaltest
```

----------------------------------------

TITLE: Configuring C# Raw String Literal Highlighting in Vim
DESCRIPTION: Sets the maximum number of quote marks and interpolation braces recognized for C# raw string literals in Vim syntax highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_21

LANGUAGE: VimScript
CODE:
```
let g:cs_raw_string_quote_count = 8
let g:cs_raw_string_interpolation_brace_count = 8
```

----------------------------------------

TITLE: Binding a Pipe to a Name
DESCRIPTION: Binds a pipe handle to a specified file path or name, making it ready for listening or communication. This function takes note of platform-specific considerations for naming conventions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_32

LANGUAGE: lua
CODE:
```
uv.pipe_bind({pipe}, {name})
```

----------------------------------------

TITLE: Enabling Heredoc Folding for Shell Scripts
DESCRIPTION: Setting the shell folding option to 2 to enable folding of heredocs in shell scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_121

LANGUAGE: vim
CODE:
```
let g:sh_fold_enabled= 2
```

----------------------------------------

TITLE: Enabling Directory Tracking in Netrw
DESCRIPTION: Setting to make the current directory track the browsing location in netrw by disabling the keepdir option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_47

LANGUAGE: vim
CODE:
```
let g:netrw_keepdir= 0
```

----------------------------------------

TITLE: Equivalent regex matching for filenames in Vim
DESCRIPTION: An equivalent example to the glob2regpat() usage, using a direct regular expression pattern to match filenames with the =~ operator.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_113

LANGUAGE: vim
CODE:
```
if filename =~ '^Make.*\.mak$'
  " ...
endif
```

----------------------------------------

TITLE: Swap File Location Check
DESCRIPTION: Command to list all swap files in the current directory and standard swap file locations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
vim -r
```

----------------------------------------

TITLE: Setting Right-to-Left Mode in Neovim
DESCRIPTION: Toggles the window orientation to right-to-left mode, which is necessary for proper Arabic text display.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_6

LANGUAGE: VimScript
CODE:
```
:set rightleft
```

----------------------------------------

TITLE: Example Lua Code with Comments
DESCRIPTION: Sample Lua code demonstrating comment structure for query examples.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_4

LANGUAGE: lua
CODE:
```
-- TODO: This is a\n-- very long\n-- comment (just imagine it)
```

----------------------------------------

TITLE: Setting filetype in a C file comment
DESCRIPTION: Example of setting the filetype option in a C file comment to specify the file as an IDL file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_16

LANGUAGE: c
CODE:
```
/* vim: set filetype=idl : */
```

----------------------------------------

TITLE: Cinoptions Function Brace Placement
DESCRIPTION: Demonstrates function opening brace placement with different 'f' cinoption values
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_3

LANGUAGE: C
CODE:
```
  func()
  {
      int foo;
```

----------------------------------------

TITLE: Getting Current Process ID with uv.os_getpid()
DESCRIPTION: Returns the process ID of the current process as a number.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_98

LANGUAGE: lua
CODE:
```
uv.os_getpid()
```

----------------------------------------

TITLE: Finding files with backticks using glob in Vim
DESCRIPTION: Using the glob() function with backticks to execute an external command ('find' in this case) to locate tag files, then processing the result to set the 'tags' option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_111

LANGUAGE: vim
CODE:
```
let tagfiles = glob("`find . -name tags -print`")
let &tags = substitute(tagfiles, "\n", ",", "g")
```

----------------------------------------

TITLE: Valgrind Memory Leak Detection
DESCRIPTION: Command for running Vim under Valgrind to detect memory leaks with full leak checking enabled.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/debug.txt#2025-04-20_snippet_2

LANGUAGE: shell
CODE:
```
valgrind --log-file=valgrind.log --leak-check=full ./vim
```

----------------------------------------

TITLE: Conditional Folding in Fortran Files in Vim
DESCRIPTION: Enables the creation of fold regions for Fortran's conditional constructs (e.g., do loops, if blocks) by setting 'fortran_fold_conditionals'. This aids in managing complex control structures in large files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_41

LANGUAGE: VimScript
CODE:
```
:let fortran_fold_conditionals=1
```

----------------------------------------

TITLE: Silent Error Handling Example
DESCRIPTION: Demonstrates error handling with :silent! command and checking v:errmsg.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_7

LANGUAGE: viml
CODE:
```
:let v:errmsg = ""
:silent! /^begin
:if v:errmsg != ""
: ... pattern was not found
```

----------------------------------------

TITLE: Disabling Line Wrapping in Vim
DESCRIPTION: This command disables line wrapping by setting the 'nowrap' option. This is helpful when editing files with long lines, such as binary files, as it prevents Vim from breaking the lines and making it difficult to view the content.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
	:set nowrap
```

----------------------------------------

TITLE: Query Pattern with Any-Match Predicate
DESCRIPTION: Query pattern demonstrating the any-match? predicate for flexible comment matching.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_6

LANGUAGE: query
CODE:
```
(((comment)+ @comment)\n (#any-match? @comment "TODO"))
```

----------------------------------------

TITLE: Setting Environment Variable with uv.os_setenv()
DESCRIPTION: Sets an environment variable with the specified name and value. This function is not thread-safe.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_92

LANGUAGE: lua
CODE:
```
uv.os_setenv({name}, {value})
```

----------------------------------------

TITLE: Creating Custom Autocommand for File Processing
DESCRIPTION: Example of defining an autocommand that checks the first line of a file for a specific string and calls a function if found, providing an alternative to modelines for custom file processing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_8

LANGUAGE: viml
CODE:
```
au BufReadPost * if getline(1) =~ "VAR" | call SetVar() | endif
```

----------------------------------------

TITLE: Defining a NewGrep Command in Vim
DESCRIPTION: This Vim command defines a new command called `NewGrep` that executes a silent grep command with the provided arguments and then opens the quickfix window with 42 lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_33

LANGUAGE: vim
CODE:
```
command! -nargs=+ NewGrep execute 'silent grep! <args>' | copen 42
```

----------------------------------------

TITLE: Comprehensive Errorformat Configuration for LaTeX in Vim
DESCRIPTION: Sets a complex errorformat that properly parses LaTeX's multi-line error and warning messages, handles file inclusions, and filters out irrelevant information from the LaTeX compiler output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_68

LANGUAGE: vim
CODE:
```
:set efm=%E!\ LaTeX\ %trror:\ %m,
	\%E!\ %m,
	\%+WLaTeX\ %.%#Warning:\ %.%#line\ %l%.%#,
	\%+W%.%#\ at\ lines\ %l--%*\\d,
	\%WLaTeX\ %.%#Warning:\ %m,
	\%Cl.%l\ %m,
	\%+C\ \ %m.,
	\%+C%.%#-%.%#,
	\%+C%.%#[]%.%#,
	\%+C[]%.%#,
	\%+C%.%#%[{}\\]%.%#,
	\%+C<%.%#>%.%#,
	\%C\ \ %m,
	\%-GSee\ the\ LaTeX%m,
	\%-GType\ \ H\ <return>%m,
	\%-G\ ...%.%#,
	\%-G%.%#\ (C)\ %.%#,
	\%-G(see\ the\ transcript%.%#),
	\%-G\\s%#,
	\%+O(%f)%r,
	\%+P(%f%r,
	\%+P\ %\\=(%f%r,
	\%+P%*[^()](%f%r,
	\%+P[%\\d%[^()]%#(%f%r,
	\%+Q)%r,
	\%+Q%*[^()])%r,
	\%+Q[%\\d%*[^()])%r
```

----------------------------------------

TITLE: Column Position Examples in Vim
DESCRIPTION: Demonstrates various ways to get column positions using col() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_34

LANGUAGE: vim
CODE:
```
echo col(".")			" column of cursor
echo col("$")			" length of cursor line plus one
echo col("'t")			" column of mark t
echo col("'" .. markname)	" column of mark markname
```

----------------------------------------

TITLE: Changing Case to Lowercase in Vim
DESCRIPTION: Uses the 'gu' operator with 'w' motion to convert the current word to lowercase.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
guw
```

----------------------------------------

TITLE: Setting Java Source Path
DESCRIPTION: Code snippets showing how to configure Java source path for .jar or .zip files and update the path option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
let g:ftplugin_java_source_path = '/path/to/src.jar'
let g:ftplugin_java_source_path = '/path/to/src.zip'
let g:ftplugin_java_source_path = $JDK_SRC_PATH
let &l:path = g:ftplugin_java_source_path . ',' . &l:path
```

----------------------------------------

TITLE: Deleting a User Command in Vim
DESCRIPTION: This snippet describes how to delete a user-defined command in Vim. The example shows deleting a command named 'SaveIt'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
:delcommand SaveIt
```

----------------------------------------

TITLE: Getting Msgpack Type with Msgpack in Vim
DESCRIPTION: Returns the name of the key in v:msgpack_types for a given Msgpack value. It always returns a type description and never zero.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
msgpack#type({msgpack-value})
```

----------------------------------------

TITLE: Resetting SQL Completion Cache
DESCRIPTION: Defines a key mapping to reset the SQL completion plugin's cache. This is useful when database schema changes occur, requiring a refresh of the completion suggestions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
    imap <buffer> <C-C>R <C-\><C-O>:call sqlcomplete#Map('ResetCache')<CR><C-X><C-O>
```

----------------------------------------

TITLE: Disabling isKeyword Option for Syntax Omni Completion
DESCRIPTION: Configuration to disable the use of isKeyword option for syntax-based Omni completion, forcing the plugin to break on word characters instead of using filetype-specific word boundaries.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
let g:omni_syntax_use_iskeyword = 0
```

----------------------------------------

TITLE: Moving Vim Window to Specific Position in GUI
DESCRIPTION: This command moves the Vim window to a specific position on the screen, specified in pixels. In this example, it moves the window 172 pixels from the left and 103 pixels from the top.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:winpos 172 103
```

----------------------------------------

TITLE: Configuring Vim Syntax Matches with Leading Context
DESCRIPTION: Example demonstrating syntax matches with leading context and no-backslash patterns
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_167

LANGUAGE: vim
CODE:
```
:syn match ZNoBackslash "[^\\]z"ms=s+1
:syn match WNoBackslash "[^\\]w"lc=1
:syn match Underline "_\+"
```

----------------------------------------

TITLE: Setting File Encodings Example in Vim
DESCRIPTION: Example of configuring fileencodings to try different character encodings when reading files, falling back to Japanese encoding (sjis) if UTF-8 detection fails.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:set fileencodings=ucs-bom,utf-8,sjis
```

----------------------------------------

TITLE: Setting foldtext expression in Vim
DESCRIPTION: This snippet shows how to customize the text displayed for a closed fold using the 'foldtext' option.  It uses a Vim command to set the 'foldtext' to an expression that removes certain patterns from the first line of the fold.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:set foldtext=v:folddashes.substitute(getline(v:foldstart),'/\\*\\\|\\*/\\\|{{{\\d\\=','','g')
```

----------------------------------------

TITLE: EndOfBuffer and Normal Highlighting Fix
DESCRIPTION: Configuration to fix cursor flickering in tmux by setting background colors to NONE.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE
hi Normal ctermbg=NONE ctermfg=200 cterm=NONE
```

----------------------------------------

TITLE: Accessing Bytes in a Blob - Vim Script
DESCRIPTION: This code snippet shows how to access bytes within a Blob using indexing, with support for both positive and negative indexing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_62

LANGUAGE: vim
CODE:
```
:let myblob = 0z00112233
:let byte = myblob[0]   " get the first byte: 0x00
:let byte = myblob[2]   " get the third byte: 0x22
:let last = myblob[-1]  " get the last byte: 0x33
```

----------------------------------------

TITLE: Setting Highlight Namespace for Window in Neovim Lua API
DESCRIPTION: Sets the highlight namespace for a window, using highlights defined with nvim_set_hl() for this namespace. Falls back to global highlights when missing. Available since Neovim 0.8.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_78

LANGUAGE: lua
CODE:
```
nvim_win_set_hl_ns({window}, {ns_id})
```

----------------------------------------

TITLE: Enabling Markdown Folding in Neovim
DESCRIPTION: This command sets the `g:markdown_folding` variable to `1`, which enables folding in Markdown files. Requires the markdown plugin to be installed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
	let g:markdown_folding = 1
```

----------------------------------------

TITLE: Configuring Vim Syntax Synchronization
DESCRIPTION: Example showing syntax synchronization configuration with maximum lines constraint
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_173

LANGUAGE: vim
CODE:
```
:syntax sync maxlines=500 ccomment
```

----------------------------------------

TITLE: Opening Files in Multiple Horizontal Windows with Command Line Arguments
DESCRIPTION: Command to open Vim with three files, each in its own horizontally split window. The '-o' argument creates horizontal splits, while '-O' would create vertical splits.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
vim -o file1 file2 file3
```

----------------------------------------

TITLE: Compressed File Writing Autocommands
DESCRIPTION: Alternative method for writing compressed files using FileWritePre and FileWritePost events with binary mode handling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_32

LANGUAGE: vim
CODE:
```
:autocmd FileWritePre *.gz   set bin|'[,']!gzip
:autocmd FileWritePost *.gz  undo|set nobin
```

----------------------------------------

TITLE: Setting Up Lua Formatting with Stylua in CMake
DESCRIPTION: Creates a target for formatting Lua files using stylua. The target processes Lua files in specified directories and applies stylua's formatting rules to modify them.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_22

LANGUAGE: cmake
CODE:
```
add_glob_target(
  TARGET formatlua
  COMMAND ${STYLUA_PRG}
  FLAGS --respect-ignores
  GLOB_DIRS ${STYLUA_DIRS}
  GLOB_PAT *.lua
  TOUCH_STRATEGY PER_DIR)
```

----------------------------------------

TITLE: Adjusting Indentation Settings in Vim - Vim
DESCRIPTION: Modifies the indentation behavior in Vim by setting 'shiftwidth' and 'softtabstop'. This ensures that pressing the <Tab> key inserts the desired number of spaces.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:set shiftwidth=4
```

LANGUAGE: vim
CODE:
```
:set softtabstop=4
```

----------------------------------------

TITLE: Writing Line Ranges to Files in Vim
DESCRIPTION: Demonstrates how to write a range of lines from current position to end of file into a new file named 'tempo'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:.,$write tempo
```

----------------------------------------

TITLE: Extending Fortran Line Length in Vim
DESCRIPTION: Allows longer line lengths up to 132 characters for Fortran code in Vim by setting 'fortran_extended_line_length'. Useful for modern compilers which support extended line lengths.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_36

LANGUAGE: VimScript
CODE:
```
:let fortran_extended_line_length=1
```

----------------------------------------

TITLE: Customizing JQ Syntax Highlighting in Vim
DESCRIPTION: Configures options for JQ syntax highlighting, including number color and quote highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_70

LANGUAGE: VimScript
CODE:
```
hi link jqNumber Normal
let g:jq_quote_highlight = 1
```

----------------------------------------

TITLE: Using Falsy (Null Coalescing) Operator in Neovim
DESCRIPTION: Shows how to use the falsy operator (??) to provide default values when an expression evaluates to a falsy value. Includes examples and comparison with the ternary operator.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_68

LANGUAGE: vim
CODE:
```
echo theList ?? 'list is empty'
echo GetName() ?? 'unknown'
```

LANGUAGE: vim
CODE:
```
expr2 ?? expr1
expr2 ? expr2 : expr1
```

----------------------------------------

TITLE: Setting Compiler Options for Cppcheck
DESCRIPTION: Example of setting custom parameters for the cppcheck compiler in Vim, including adding git repository folders to the path.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_40

LANGUAGE: vim
CODE:
```
let &l:path = join(systemlist('git ls-tree -d --name-only -r HEAD'), ',')
```

----------------------------------------

TITLE: Highlighting Spaces in ChangeLog Files in VimL
DESCRIPTION: Customizes highlight options for spaces in ChangeLog files by toggling the 'changelog_spacing_errors' variable and linking highlight groups to 'Error' or 'NONE' as needed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_14

LANGUAGE: VimL
CODE:
```
let g:changelog_spacing_errors = 0
```

LANGUAGE: VimL
CODE:
```
:hi link ChangelogError Error
```

LANGUAGE: VimL
CODE:
```
:hi link ChangelogError NONE
```

----------------------------------------

TITLE: Modifying Tag Stack in Vim
DESCRIPTION: Examples of using settagstack() function to modify the tag stack of a window in Vim, including emptying the stack and saving/restoring it.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_232

LANGUAGE: vim
CODE:
```
call settagstack(3, {'items' : []})
```

LANGUAGE: vim
CODE:
```
let stack = gettagstack(1003)
" do something else
call settagstack(1003, stack)
unlet stack
```

----------------------------------------

TITLE: Configuring Path Workaround for SpotBugs with Spaces in Paths
DESCRIPTION: Workaround configuration for SpotBugs to handle directories with spaces in their names, which SpotBugs doesn't natively support in textui mode. Creates a symbolic link alternative path mapping.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_53

LANGUAGE: vim
CODE:
```
let g:spotbugs_alternative_path = {
	\ 'fromPath':	'path/to/dir_without_blanks',
	\ 'toPath':	'path/to/dir with blanks',
\ }
```

----------------------------------------

TITLE: Creating Named Marks
DESCRIPTION: Shows how to create named marks (a through z) in a file and navigate to them. Demonstrates marking positions and jumping to specific marks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
ma      # Mark current position as mark 'a'
`a      # Jump to mark 'a'
's      # Jump to mark 's'
'e      # Jump to mark 'e'
```

----------------------------------------

TITLE: Creating Custom File Edit Command with Multiple Files
DESCRIPTION: Defines a custom command 'MyEdit' that allows opening multiple files using file expansion and modifiers
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_35

LANGUAGE: vim
CODE:
```
command! -nargs=+ -complete=file MyEdit
\ for f in expand(<q-args>, 0, 1) |
\ exe '<mods> split ' .. f |
\ endfor
```

----------------------------------------

TITLE: Vim PostScript Syntax Configuration
DESCRIPTION: Configuration options for PostScript language version and feature highlighting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_101

LANGUAGE: vim
CODE:
```
let postscr_level = 2
let postscr_display = 1
let postscr_ghostscript = 1
let postscr_fonts = 1
let postscr_encodings = 1
```

----------------------------------------

TITLE: Method Chaining in Vim Script
DESCRIPTION: Example of method chaining using the arrow operator for filter, map, sort, and join operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_79

LANGUAGE: vim
CODE:
```
mylist->filter(filterexpr)->map(mapexpr)->sort()->join()
```

----------------------------------------

TITLE: Getting Peer Name of Pipe Connection
DESCRIPTION: Obtains the name of the peer connected to the pipe handle. This is particularly important for debugging and monitoring communication endpoints.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_35

LANGUAGE: lua
CODE:
```
uv.pipe_getpeername({pipe})
```

----------------------------------------

TITLE: Provider Reload Example in Vim
DESCRIPTION: Shows how to reload a provider by unsetting its loaded flag and reloading the provider script. Used when a GUI or application needs to force provider reload.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:unlet g:loaded_clipboard_provider
:runtime autoload/provider/clipboard.vim
```

----------------------------------------

TITLE: SQL Macro Pattern Definition
DESCRIPTION: Regular expression pattern for finding SQL macro definitions, supporting VARIABLE, DECLARE, IN, OUT, and INOUT declarations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_1

LANGUAGE: vimdoc
CODE:
```
\c\<\(VARIABLE\|DECLARE\|IN\|OUT\|INOUT\)\>
```

----------------------------------------

TITLE: Customizing NROFF Definition Highlighting
DESCRIPTION: Sets custom highlighting for NROFF definition and special definition groups.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_92

LANGUAGE: vim
CODE:
```
hi def nroffDefinition cterm=italic gui=reverse
hi def nroffDefSpecial cterm=italic,bold gui=reverse,bold
```

----------------------------------------

TITLE: Defining Match Syntax Items in Vim Script
DESCRIPTION: Uses pattern matching to define syntax items, such as lowercase identifiers and comments. Keywords take precedence over match items, ensuring that defined keywords are highlighted.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_5

LANGUAGE: Vim Script
CODE:
```
:syntax match xIdentifier /\<\l\+\>/
:syntax match xComment /#.*/
```

----------------------------------------

TITLE: Temporary Directory Management in Nvim
DESCRIPTION: Example of handling temporary file creation and error scenarios related to tempdir management in Neovim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
E5431: tempdir disappeared (2 times)
```

----------------------------------------

TITLE: Configuring SED Syntax Highlighting in Vim
DESCRIPTION: Controls tab highlighting and comment style (GNU vs BSD) in SED files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_111

LANGUAGE: vim
CODE:
```
let g:sed_highlight_tabs = 1
let g:sed_dialect = "bsd"
```

----------------------------------------

TITLE: Retrieving window variables with getwinvar in Vim
DESCRIPTION: Examples of using getwinvar() to retrieve window-local variables and options. The first example gets the 'list' option from window 2, and the second retrieves a custom variable 'myvar' from window 1.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_110

LANGUAGE: vim
CODE:
```
let list_is_on = getwinvar(2, '&list')
echo "myvar = " .. getwinvar(1, 'myvar')
```

----------------------------------------

TITLE: Opening the tutorial format guide in Vim
DESCRIPTION: Command to open the 'tutor.tutor' file which explains the format used for creating vim-tutor-mode tutorials.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_tutor.txt#2025-04-20_snippet_0

LANGUAGE: vimscript
CODE:
```
:Tutor tutor
```

----------------------------------------

TITLE: Backup File Configuration in Vim
DESCRIPTION: Commands for configuring backup file behavior including naming and location.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:set backup
:set backupext=.bak
:set patchmode=.orig
```

----------------------------------------

TITLE: Stop Visual Mode with CTRL-C in Neovim
DESCRIPTION: This command stops Visual mode.  When insert mode is pending (the mode message shows "-- (insert) VISUAL --"), it is also stopped. On MS-Windows, you may need to press CTRL-Break.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
"CTRL-C"
```

----------------------------------------

TITLE: Adding Custom Extensions to Zip Browser via BufReadCmd Autocmd
DESCRIPTION: Adds support for additional file extensions to be treated as zip archives by creating an autocmd that calls the zip#Browse function when opening files with the specified extensions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_zip.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
au BufReadCmd *.jar,*.xpi call zip#Browse(expand("<amatch>"))
```

----------------------------------------

TITLE: Getting Current History Entry Number in Vim
DESCRIPTION: Shows how to retrieve the current entry number in the history using histnr(). This example saves the current index of the expression history.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_128

LANGUAGE: vim
CODE:
```
let inp_index = histnr("expr")
```

----------------------------------------

TITLE: Setting Maximum Window Height in Vim
DESCRIPTION: Example of setting the maximum possible window height using the lines option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_39

LANGUAGE: vim
CODE:
```
set lines=999
```

----------------------------------------

TITLE: Placing Signs with Groups and Priorities
DESCRIPTION: Examples showing various ways to place signs with different groups and priority values
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:sign place 5 line=3 name=sign1 file=a.py
:sign place 6 group=g2 line=2 name=sign2 file=x.py
:sign place 9 group=g2 priority=50 line=5 name=sign1 file=a.py
```

----------------------------------------

TITLE: Starting Vim with Specific Locale
DESCRIPTION: Shell commands to start Vim with a specific locale setting for both sh and csh shells.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_4

LANGUAGE: shell
CODE:
```
LANG=ko vim {vim-arguments}
env LANG=ko vim {vim-arguments}
```

----------------------------------------

TITLE: Disabling Dynamic Comments in RNoweb Files in Neovim
DESCRIPTION: This command sets the `rnw_dynamic_comments` variable to `0`, which prevents Neovim from dynamically setting the 'formatexpr' option for R code and LaTeX code in RNoweb files. This allows users to configure their own preferred formatting expressions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_37

LANGUAGE: vim
CODE:
```
	let rnw_dynamic_comments = 0
```

----------------------------------------

TITLE: Generating Neovim Help Documentation
DESCRIPTION: Commands to generate and validate Neovim's help documentation files using make commands.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_7

LANGUAGE: bash
CODE:
```
make doc
```

LANGUAGE: bash
CODE:
```
make lintdoc
```

----------------------------------------

TITLE: Setting Right-to-Left Window Orientation in Vim
DESCRIPTION: This snippet shows how to set the window orientation to right-to-left using the 'rightleft' option in Vim. It's a key setting for working with right-to-left languages.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/rileft.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
'rightleft' ('rl') sets window orientation to right-to-left.
```

----------------------------------------

TITLE: Vim Text Append Command
DESCRIPTION: Demonstrates how to append text at the end of a line using the 'a' command in Vim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
a!!!<Esc>
```

----------------------------------------

TITLE: Vim Put Expression Register Example
DESCRIPTION: Demonstrates using the expression register to put text with escaped characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:put ='path' .. ",/test"
```

----------------------------------------

TITLE: Clearing Document References in Neovim LSP (Lua)
DESCRIPTION: Removes document highlights from a buffer. Takes an optional buffer number parameter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_47

LANGUAGE: lua
CODE:
```
buf_clear_references({bufnr})
```

----------------------------------------

TITLE: Command Line Escape Mapping - Vim
DESCRIPTION: Creates a mapping to escape characters in the command line using getcmdline().
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_87

LANGUAGE: vim
CODE:
```
cmap <F7> <C-\>eescape(getcmdline(), ' \')<CR>
```

----------------------------------------

TITLE: Configuring Errorformat for Apache Ant with Javac in Vim
DESCRIPTION: Sets the errorformat option to parse error messages from Apache Ant with the javac compiler, handling the '[javac]' prefix in output lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_64

LANGUAGE: vim
CODE:
```
:set efm=%A\ %#[javac]\ %f:%l:\ %m,%-Z\ %#[javac]\ %p^,%-C%.%#
```

----------------------------------------

TITLE: Silencing Rustfmt Errors
DESCRIPTION: Prevents rustfmt from populating the location list with errors when formatting fails, allowing for silent failures.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
let g:rustfmt_fail_silently = 0
```

----------------------------------------

TITLE: Appending an Option Setting to vimrc Using Expression Register
DESCRIPTION: Demonstrates how to add a configuration option to your vimrc file by using the expression register to insert the current value of an option. This example shows how to append a 'guifont' setting to your configuration file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
o:set guifont=<C-R>=&guifont<CR><Esc>
```

----------------------------------------

TITLE: Combining Confirmation and Browse Commands in Vim
DESCRIPTION: This example shows how to combine the confirmation dialog with the file browser when editing a new file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:confirm browse edit
```

----------------------------------------

TITLE: Configuring variable-width tab stops in Vim
DESCRIPTION: Example of setting varsofttabstop option for assembly language files, where statements start at column 9 and comments at column 41, using a mixture of spaces and tabs.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_77

LANGUAGE: viml
CODE:
```
set varsofttabstop=8,32,8
```

----------------------------------------

TITLE: Defining Build Variables and Paths
DESCRIPTION: Sets up key build variables including output paths for generated files, documentation sources, and compiler command exports.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_5

LANGUAGE: CMake
CODE:
```
#-------------------------------------------------------------------------------
# Variables
#-------------------------------------------------------------------------------
set(FUNCS_DATA ${PROJECT_BINARY_DIR}/funcs_data.mpack)
set(TOUCHES_DIR ${PROJECT_BINARY_DIR}/touches)
set(VTERM_TEST_FILE ${PROJECT_BINARY_DIR}/test/vterm_test_output)

file(GLOB DOCFILES CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/runtime/doc/*.txt)

if(NOT CI_BUILD)
  set(CMAKE_INSTALL_MESSAGE NEVER)
endif()

if(${CMAKE_VERSION} VERSION_LESS 3.20)
  set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
endif()

if(${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.26)
  set(COPY_DIRECTORY copy_directory_if_different)
else()
  set(COPY_DIRECTORY copy_directory)
endif()
```

----------------------------------------

TITLE: Adding a directory to the 'path' option (Vim)
DESCRIPTION: This snippet shows how to add a directory to the 'path' option, which specifies where Vim searches for included files.  This example adds `/usr/local/X11` to the path.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_26

LANGUAGE: vim
CODE:
```
":set path+=/usr/local/X11"
```

----------------------------------------

TITLE: Using floor() Function in Vim Script
DESCRIPTION: Demonstrates the floor() function which returns the largest integer value less than or equal to the given number. It works with both positive and negative floating-point numbers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_73

LANGUAGE: vim
CODE:
```
echo floor(1.856)
```

LANGUAGE: vim
CODE:
```
echo floor(-5.456)
```

LANGUAGE: vim
CODE:
```
echo floor(4.0)
```

----------------------------------------

TITLE: Writing to a Collection File in Vim
DESCRIPTION: Demonstrates how to write the current line to a new file named 'collection'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:.write collection
```

----------------------------------------

TITLE: Format Function Configuration
DESCRIPTION: Command to enable custom formatting function by setting the formatexpr option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
setlocal formatexpr=format#Format()
```

----------------------------------------

TITLE: Configuring Idris2 Indentation in Vim
DESCRIPTION: This snippet shows how to set Vim global variables to control indentation levels for different constructs in Idris2 code. Key indentation areas include 'if', 'case', 'let', 'rewrite', 'where', and 'do' blocks. Users can modify the default indentation by changing the values of these variables accordingly.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_7

LANGUAGE: VimL
CODE:
```
let g:idris2_indent_if = 2
let g:idris2_indent_case = 4
let g:idris2_indent_let = 4
let g:idris2_indent_rewrite = 8
let g:idris2_indent_where = 6
let g:idris2_indent_do = 3
```

----------------------------------------

TITLE: Example Mark Usage in Vim
DESCRIPTION: Demonstrates using marks for navigation between files and within buffers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:delmarks a      deletes mark a
:delmarks a b 1    deletes marks a, b and 1
:delmarks Aa       deletes marks A and a
:delmarks p-z      deletes marks in the range p to z
:delmarks ^.[]     deletes marks ^ . [ ]
:delmarks \"      deletes mark \"
```

----------------------------------------

TITLE: Running Specific Plugin Health Checks in Vim
DESCRIPTION: Command example for running health checks for specific Neovim plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:checkhealth vim.health
```

----------------------------------------

TITLE: Setting Default Shell Type to Dash
DESCRIPTION: Configuring Vim to use Dash shell syntax highlighting as the default for shell scripts when the shell type cannot be determined automatically.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_117

LANGUAGE: vim
CODE:
```
let g:is_dash      = 1
```

----------------------------------------

TITLE: Enabling Function Folding for Shell Scripts
DESCRIPTION: Setting the shell folding option to 1 to enable folding of function bodies in shell scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_120

LANGUAGE: vim
CODE:
```
let g:sh_fold_enabled= 1
```

----------------------------------------

TITLE: Trim Directive Example in Treesitter Query (Blank Lines)
DESCRIPTION: This example showcases how to use the `trim!` directive in a treesitter query to remove whitespace from a node, specifically blank lines from the end.  It demonstrates the basic usage with only the capture ID.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_8

LANGUAGE: query
CODE:
```
"(#trim! @fold)"
```

----------------------------------------

TITLE: Basic Treesitter Query Pattern
DESCRIPTION: Shows a basic query pattern using eq? predicate to match specific identifiers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_3

LANGUAGE: query
CODE:
```
((identifier) @variable.builtin\n  (#eq? @variable.builtin "self"))
```

----------------------------------------

TITLE: C Synctax Synchronization in VimL
DESCRIPTION: Adjusts syntax synchronization for C files to manage highlighting errors when scrolling, aiming to start syntax checks a number of lines before the currently displayed line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_11

LANGUAGE: VimL
CODE:
```
:let c_minlines = 100
```

----------------------------------------

TITLE: Implementing Special File Edit Function
DESCRIPTION: Creates a function 'SpecialEdit' that supports file expansion and custom split modifiers for opening multiple files
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_36

LANGUAGE: vim
CODE:
```
function! SpecialEdit(files, mods)
    for f in expand(a:files, 0, 1)
        exe a:mods .. ' split ' .. f
    endfor
endfunction
command! -nargs=+ -complete=file Sedit
\ call SpecialEdit(<q-args>, <q-mods>)
```

----------------------------------------

TITLE: File System Rename Operation in libuv
DESCRIPTION: Renames a file from one path to another. Equivalent to rename(2) system call. Supports both synchronous and asynchronous operations through an optional callback.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_51

LANGUAGE: lua
CODE:
```
uv.fs_rename({path}, {new_path} [, {callback}])
```

----------------------------------------

TITLE: Including Pod Syntax in Perl Configuration
DESCRIPTION: Example showing how to include Pod syntax within Perl syntax configuration
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_172

LANGUAGE: vim
CODE:
```
:syntax include @Pod <sfile>:p:h/pod.vim
:syntax region perlPOD start="^=head" end="^=cut" contains=@Pod
```

----------------------------------------

TITLE: Setting multicast membership for UDP handle in Lua
DESCRIPTION: Sets membership for a multicast address. Allows joining or leaving a multicast group.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_41

LANGUAGE: lua
CODE:
```
uv.udp_set_membership({udp}, {multicast_addr}, {interface_addr}, {membership})
```

----------------------------------------

TITLE: Getting Socket Name of TCP Handle
DESCRIPTION: Obtains the address to which the TCP handle is bound. This includes details such as IP address, address family, and port information of the local socket.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_27

LANGUAGE: lua
CODE:
```
uv.tcp_getsockname({tcp})
```

----------------------------------------

TITLE: Setting showbreak for improved readability with line numbers in Vim
DESCRIPTION: Sets the 'showbreak' option to eight spaces, which indents wrapped lines for better visual distinction when the 'number' option is enabled.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
:set showbreak=\ \ \ \ \ \ \ \ 
```

----------------------------------------

TITLE: Vim screen layout diagram showing windows and status lines
DESCRIPTION: ASCII diagram showing the layout of a Vim screen with multiple windows, status lines, and command line at the bottom.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_7

LANGUAGE: text
CODE:
```
+-------------------------------+
 screen | window 1      | window 2      |
        |               |               |
        |               |               |
        |= status line =|= status line =|
        | window 3                      |
        |                               |
        |                               |
        |==== status line ==============|
        |command line                   |
        +-------------------------------+
```

----------------------------------------

TITLE: Setting Nvim as Manpager in Bash
DESCRIPTION: This command sets the `MANPAGER` environment variable to `nvim +Man!`, which configures Neovim to be used as the default manpage viewer.  When `man` is invoked from the shell, it will launch Nvim to display the manpage.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_21

LANGUAGE: bash
CODE:
```
export MANPAGER='nvim +Man!'
```

----------------------------------------

TITLE: Command Line Completion Example in Vim
DESCRIPTION: Example showing how to get command line completion results after a :call command using getcompletion() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_88

LANGUAGE: vim
CODE:
```
echo getcompletion('call ', 'cmdline')
```

----------------------------------------

TITLE: Alternative First Location List Error Command
DESCRIPTION: An alternative command for displaying the first error in the location list, equivalent to :lrewind.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
:lfir[st][!] [nr]
```

----------------------------------------

TITLE: Checking libuv Loop Activity in Lua
DESCRIPTION: This function returns `true` if there are referenced active handles, active requests, or closing handles in the loop; otherwise, it returns `false`. It's a way to determine if the event loop has any pending work.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_7

LANGUAGE: lua
CODE:
```
"uv.loop_alive()                                                *uv.loop_alive()*\n\n                Returns `true` if there are referenced active handles, active\n                requests, or closing handles in the loop; otherwise, `false`.\n\n                Returns: `boolean` or `fail`"
```

----------------------------------------

TITLE: File List Management in Vim
DESCRIPTION: Commands for managing and viewing lists of files in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:args
:args five.c six.c seven.h
:args *.txt
```

----------------------------------------

TITLE: Setting sidescrolloff Options in Vim
DESCRIPTION: Examples showing how to set and reset the sidescrolloff option, which controls horizontal scrolling behavior when 'nowrap' is enabled. The first example resets to global value, the second demonstrates practical usage with sidescroll and listchars.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_66

LANGUAGE: vim
CODE:
```
setlocal sidescrolloff<
setlocal sidescrolloff=-1
```

LANGUAGE: vim
CODE:
```
set nowrap sidescroll=1 listchars=extends:>,precedes:<
set sidescrolloff=1
```

----------------------------------------

TITLE: ColdFusion Comment Highlighting in VimL
DESCRIPTION: Activates syntax highlighting for ColdFusion-style comments, building upon the existing HTML syntax highlighting framework.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_17

LANGUAGE: VimL
CODE:
```
:let html_wrong_comments = 1
```

----------------------------------------

TITLE: Configuring Java Markdown Formatting
DESCRIPTION: Code snippets for enabling Markdown comment formatting in Java files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
setlocal formatexpr=g:javaformat#RemoveCommonMarkdownWhitespace()
setlocal formatexpr=javaformat#RemoveCommonMarkdownWhitespace()
```

----------------------------------------

TITLE: Constants-based Function Arguments in C
DESCRIPTION: Example showing the use of constants for self-documenting code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_14

LANGUAGE: c
CODE:
```
const int kDefaultBaseValue = 10;
const bool kFirstTimeCalling = false;
Callback *null_callback = NULL;
bool success = calculate_something(interesting_value,
                                   kDefaultBaseValue,
                                   kFirstTimeCalling,
                                   null_callback);
```

----------------------------------------

TITLE: Treesitter Query Modeline Example (Inherits and Extends)
DESCRIPTION: This example demonstrates the use of treesitter query modelines to inherit queries from other languages and extend existing queries. It shows the syntax for specifying multiple languages to inherit from and extending the current query.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_11

LANGUAGE: query
CODE:
```
";; inherits: typescript,jsx\n;; extends"
```

----------------------------------------

TITLE: Inserting Special Characters via Execute and Normal
DESCRIPTION: Shows how to use :execute with the normal command to insert text followed by an Escape key press.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_114

LANGUAGE: vim
CODE:
```
:execute "normal ixxx\<Esc>"
```

----------------------------------------

TITLE: Configuring MOO Syntax Highlighting Options in Vim
DESCRIPTION: Sets various options for MOO syntax highlighting, including extended C-style comment matching, pronoun substitution, regexp highlighting, and builtin function recognition.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_86

LANGUAGE: VimScript
CODE:
```
:let moo_extended_cstyle_comments = 1

:let moo_no_pronoun_sub = 1

:let moo_no_regexp = 1

:let moo_unmatched_quotes = 1

:let moo_builtin_properties = 1

:let moo_unknown_builtin_functions = 1

:syn keyword mooKnownBuiltinFunction sprintf contained
```

----------------------------------------

TITLE: Using Ada Folding Options in Neovim
DESCRIPTION: Configuration for Ada code folding with different strategies including syntax folding, gnat pretty print folding, and indent folding. The value is a string where each character represents a different folding option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
g:ada_folding = "sigpft"
```

----------------------------------------

TITLE: Modular Arithmetic with Bitwise Operations in Lua
DESCRIPTION: This snippet illustrates how to handle modular arithmetic with bitwise operations in Lua, emphasizing the behavior of integer wrap-around when the result exceeds the defined range. It explains the normalization process for different Lua number types.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_7

LANGUAGE: lua
CODE:
```
                bit.tobit(0xffffffff + 1)
```

----------------------------------------

TITLE: Moving in braces (Vim)
DESCRIPTION: This snippet shows how to move in parenthesis using the `[(` and `])` commands, analogous to `[{` and `]}` for curly braces.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
"[("
```

LANGUAGE: vim
CODE:
```
"])"
```

----------------------------------------

TITLE: Register Content Insertion Comparison
DESCRIPTION: Example demonstrating the difference between regular and literal register content insertion, using a register containing backspace characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_1

LANGUAGE: vimdoc
CODE:
```
CTRL-R a		results in "ac".
CTRL-R CTRL-R a		results in "ab^Hc".
```

----------------------------------------

TITLE: Quitting Vim from Python
DESCRIPTION: Correct approach to exit Vim from Python by using vim.command() instead of raising SystemExit exception.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_9

LANGUAGE: viml
CODE:
```
:py vim.command("qall!")
```

----------------------------------------

TITLE: Unsilent Argdo Example
DESCRIPTION: Shows how to use :unsilent within a :silent command to selectively show output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_8

LANGUAGE: viml
CODE:
```
:silent argdo unsilent echo expand('%') .. ": " .. getline(1)
```

----------------------------------------

TITLE: Finding Date Lines with Vim Script
DESCRIPTION: A script to search lines 1-20 for dates and echo any found dates using pattern matching.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_21

LANGUAGE: viml
CODE:
```
:for line in getline(1, 20)
:  if line =~ "Date: "
:    echo matchstr(line, 'Date: \zs.*')
:  endif
:endfor
```

----------------------------------------

TITLE: Saving specific numbered view
DESCRIPTION: Saves the current view as the third numbered view. You can save up to ten different views for the same file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_13

LANGUAGE: vimdoc
CODE:
```
:mkview 3
```

----------------------------------------

TITLE: ShaDa MessagePack Entry Type Format
DESCRIPTION: Specification for the MessagePack-based ShaDa file format showing the structure of different entry types including Header, SearchPattern, SubString, HistoryEntry and Register entries
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_17

LANGUAGE: messagepack
CODE:
```
1. Entry Type (unsigned integer)
2. Timestamp (unsigned integer)
3. Length (unsigned integer)
4. Data (map or array)
```

----------------------------------------

TITLE: Specifying Custom Rustfmt Command
DESCRIPTION: Sets the name of the rustfmt executable to use for code formatting. Defaults to 'rustfmt' if not specified.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
let g:rustfmt_command = 'rustfmt'
```

----------------------------------------

TITLE: Changing Tree Top in Netrw with :Ntree Command
DESCRIPTION: Uses the :Ntree command to specify a new top directory for tree listings in Netrw. Without an argument, it uses the current line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
:Ntree [dirname]
```

----------------------------------------

TITLE: Customizing URL Shortener Service
DESCRIPTION: Overrides the default URL shortener service used when generating shareable links to Rust code examples.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
let g:rust_shortener_url = 'https://is.gd/'
```

----------------------------------------

TITLE: Running Submodule Health Checks in Vim
DESCRIPTION: Examples of running health checks for specific Neovim submodules using dot notation or wildcards.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:checkhealth vim.lsp vim.treesitter
:checkhealth vim*
```

----------------------------------------

TITLE: Disabling Recommended Markdown Style in Neovim
DESCRIPTION: This command sets the `g:markdown_recommended_style` variable to `0`, which disables the default 'expandtab' setting for Markdown files.  This allows users to configure their own preferred tab settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
	let g:markdown_recommended_style = 0
```

----------------------------------------

TITLE: Using input() with custom highlighting
DESCRIPTION: A complex example showing how to use input() with custom highlighting. The example creates a rainbow parentheses highlighting function that colors matching parentheses in different colors.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_135

LANGUAGE: vim
CODE:
```
highlight RBP1 guibg=Red ctermbg=red
highlight RBP2 guibg=Yellow ctermbg=yellow
highlight RBP3 guibg=Green ctermbg=green
highlight RBP4 guibg=Blue ctermbg=blue
let g:rainbow_levels = 4
function! RainbowParens(cmdline)
  let ret = []
  let i = 0
  let lvl = 0
  while i < len(a:cmdline)
    if a:cmdline[i] is# '('
      call add(ret, [i, i + 1, 'RBP' .. ((lvl % g:rainbow_levels) + 1)])
      let lvl += 1
    elseif a:cmdline[i] is# ')'
      let lvl -= 1
      call add(ret, [i, i + 1, 'RBP' .. ((lvl % g:rainbow_levels) + 1)])
    endif
    let i += 1
  endwhile
  return ret
endfunction
call input({'prompt':'>','highlight':'RainbowParens'})
```

----------------------------------------

TITLE: Installing Neovim to custom location
DESCRIPTION: Command to install the Neovim executable to a custom directory specified by CMAKE_INSTALL_PREFIX.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_3

LANGUAGE: bash
CODE:
```
make CMAKE_INSTALL_PREFIX=$HOME/local/nvim install
```

----------------------------------------

TITLE: Search History Examples
DESCRIPTION: Sequence of search patterns demonstrating search history functionality.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
/one
/two
/three
```

----------------------------------------

TITLE: Enabling Ruby Buffer Loading for Omni Completion
DESCRIPTION: Vim configuration to enable loading/evaluating Ruby code for Omni completion, which allows for more accurate suggestions but may execute code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
let g:rubycomplete_buffer_loading = 1
```

----------------------------------------

TITLE: Setting up a directory buffer in Vim
DESCRIPTION: This snippet shows how to configure a buffer to display directory contents, typically used by file explorer plugins. It sets the buffer type to 'nowrite', hides the buffer when it's no longer displayed, and disables the swap file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_8

LANGUAGE: vimdoc
CODE:
```
:setlocal buftype=nowrite
:setlocal bufhidden=delete
:setlocal noswapfile
```

----------------------------------------

TITLE: Adding Mac File Format to Fileformats in Vim
DESCRIPTION: This command adds the "mac" file format to the 'fileformats' option.  This instructs Vim to also check for Mac file format even on Unix systems, where it's less common. This is useful when you anticipate editing Mac files on a Unix system.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
	:set fileformats+=mac
```

----------------------------------------

TITLE: Configuring Custom Options for Ruff Python Linter
DESCRIPTION: Example of setting custom parameters for the Ruff Python linter, using the current buffer's textwidth setting to set the maximum line length allowed by the linter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_55

LANGUAGE: vim
CODE:
```
let b:ruff_makeprg_params = "--max-line-length "..&textwidth
```

----------------------------------------

TITLE: Configuring Typst Plugin Settings
DESCRIPTION: Configuration options for Typst filetype plugin including folding settings
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_39

LANGUAGE: vim
CODE:
```
let g:typst_folding = 1
let g:typst_foldnested = 0
```

----------------------------------------

TITLE: Setting Syntastic Rust Checkers
DESCRIPTION: Configures which checkers Syntastic should use for Rust files. The default is 'cargo', but it can be changed to use direct 'rustc' compilation or other checkers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
let g:syntastic_rust_checkers = ['cargo']
```

----------------------------------------

TITLE: Redrawing the Screen in Vim
DESCRIPTION: Uses Ctrl-L to force Vim to redraw the screen, useful after external commands have produced output that may have affected the display.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
CTRL-L
```

----------------------------------------

TITLE: Installing Neovim from Source
DESCRIPTION: Commands to build and install Neovim from source code with custom installation path.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_10

LANGUAGE: sh
CODE:
```
make CMAKE_BUILD_TYPE=Release
sudo make install
```

----------------------------------------

TITLE: Forcibly Terminating LaTeX Zones with the stopzone Comment
DESCRIPTION: Special TeX comment to forcibly terminate highlighting of texZone or texMathZone regions. Useful for synchronization issues with regions delineated by $ and $$.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_135

LANGUAGE: viml
CODE:
```
%stopzone
```

----------------------------------------

TITLE: Disabling Erlang BIF Highlighting in Vim
DESCRIPTION: This snippet disables the default highlighting of Erlang's built-in functions (BIFs) in Vim. No dependencies other than Vim are required. It sets a Vim script variable 'g:erlang_highlight_bifs' to 0 to disable BIF highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_31

LANGUAGE: VimScript
CODE:
```
:let g:erlang_highlight_bifs = 0
```

----------------------------------------

TITLE: Close Folds of Specific Kind in Lua
DESCRIPTION: Closes all folds of a specified kind in a window. It includes an example of automatically folding imports when opening a file using an autocommand, emphasizing its utility for organizing code views.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_28

LANGUAGE: Lua
CODE:
```
foldclose({kind}, {winid})                               *vim.lsp.foldclose()*
    Close all {kind} of folds in the window with {winid}.

    To automatically fold imports when opening a file, you can use an autocmd: >lua
        vim.api.nvim_create_autocmd('LspNotify', {
          callback = function(args)
            if args.data.method == 'textDocument/didOpen' then
              vim.lsp.foldclose('imports', vim.fn.bufwinid(args.buf))
            end
          end,
        })
<
```

----------------------------------------

TITLE: Getting Peer Name of TCP Connection
DESCRIPTION: Retrieves the address of the peer connected to the TCP handle. This provides details about the connected remote address, including IP, address family, and port.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_26

LANGUAGE: lua
CODE:
```
uv.tcp_getpeername({tcp})
```

----------------------------------------

TITLE: Ceiling Function Example in Vim
DESCRIPTION: Demonstrates the ceil() function usage to round floating point numbers up to the nearest integer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_28

LANGUAGE: vim
CODE:
```
echo ceil(1.456)
echo ceil(-5.456)
echo ceil(4.0)
```

----------------------------------------

TITLE: Suspending Vim and Returning to Shell
DESCRIPTION: Demonstrates how to suspend Vim using CTRL-Z and return to the original shell context using the 'fg' command on Unix systems
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
CTRL-Z
{any sequence of shell commands}
fg
```

----------------------------------------

TITLE: Switching Compilers in Vim
DESCRIPTION: The :compiler command switches between different compiler configurations, setting appropriate options for error format and make program.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:compiler msvc
```

----------------------------------------

TITLE: Setting priority for highlighting in Treesitter
DESCRIPTION: This snippet illustrates how to change the priority of an individual query pattern using the `priority` metadata attribute. Setting the priority allows you to control the order in which highlights are applied, which is important when multiple queries match the same region.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
    ((super_important_node) @superimportant (#set! priority 105))

```

----------------------------------------

TITLE: List Identity in Vimscript
DESCRIPTION: This example demonstrates how assigning one list variable to another creates a reference, not a copy.  Modifying one variable will affect the other, as they both point to the same list in memory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
	:let aa = [1, 2, 3]
```

----------------------------------------

TITLE: Getting Current CPU in Lua with Libuv
DESCRIPTION: Returns the CPU number on which the calling thread is currently running. The first CPU is returned as number 1.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_61

LANGUAGE: lua
CODE:
```
uv.thread_getcpu()
```

----------------------------------------

TITLE: ShaDa File Commands in Vim
DESCRIPTION: Commands for reading from and writing to the ShaDa file, which stores Vim session information like registers, marks, and history.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
:rsh[ada] [file]     # read info from ShaDa file [file]
:rsh[ada]! [file]    # idem, overwrite existing info
:wsh[ada] [file]     # add info to ShaDa file [file]
:wsh[ada]! [file]    # write info to ShaDa file [file]
```

----------------------------------------

TITLE: Verbose Runtime Check Example
DESCRIPTION: Demonstrates checking for runtime errors using :silent, :verbose, and v:statusmsg.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_9

LANGUAGE: viml
CODE:
```
:let v:statusmsg = ""
:silent verbose runtime foobar.vim
:if v:statusmsg != ""
:  " foobar.vim could not be found
:endif
```

----------------------------------------

TITLE: Configuring Scheme Syntax Highlighting in Vim
DESCRIPTION: Enables support for CHICKEN Scheme compiler extensions in addition to standard R7RS keywords.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_109

LANGUAGE: vim
CODE:
```
let b:is_chicken = 1
let g:is_chicken = 1
```

----------------------------------------

TITLE: Styling Table Cells with CSS and Font Properties in HTML
DESCRIPTION: HTML markup for rendering table cells with consistent styling. Each cell has bottom and left borders, right alignment, Arial font, red colored bold number 5 as content. This pattern is repeated across multiple cells in a table row.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_3

LANGUAGE: HTML
CODE:
```
<td style="border-bottom windowtext 0.5pt solid; border-left windowtext;" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>
```

----------------------------------------

TITLE: Disabling Cursor Highlighting for Matchparen
DESCRIPTION: Sets a variable to prevent the matchparen plugin from highlighting the paren under the cursor, only highlighting the matching paren instead.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_paren.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
:let matchparen_disable_cursor_hl = 1
```

----------------------------------------

TITLE: Mapping Alt Keys in Vim
DESCRIPTION: Provides guidance on mapping keys with the Alt modifier in Vim, detailing the potential issues and scenarios for terminal use.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
:imap <A-b> barritone
```

----------------------------------------

TITLE: Starting Vim Editor Command
DESCRIPTION: Basic command to start Vim editor with a new file. Can be used in both Unix and Windows command prompts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
gvim file.txt
```

----------------------------------------

TITLE: Navigating to Location List Error in Previous File
DESCRIPTION: Commands for displaying the last error in the previous file in the location list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
:[count]lNf[ile][!]
:[count]lpf[ile][!]
```

----------------------------------------

TITLE: For Loop with Rest Parameter in Vim
DESCRIPTION: Shows how to use a rest parameter when destructuring items in a for loop over lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_38

LANGUAGE: vim
CODE:
```
:for [i, j; rest] in listlist
:   call Doit(i, j)
:   if !empty(rest)
:      echo "remainder: " .. string(rest)
:   endif
:endfor
```

----------------------------------------

TITLE: Setting Thread Priority in Lua with Libuv
DESCRIPTION: Sets the scheduling priority for a specified thread. Takes a thread object and a priority value, which can be one of the predefined constants.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_62

LANGUAGE: lua
CODE:
```
uv.thread_setpriority({thread}, {priority})
```

----------------------------------------

TITLE: Appending to a file in Vim
DESCRIPTION: This snippet shows how to append the contents of the current file to another file in Vim. This allows you to quickly add the contents of the current buffer to the end of an existing file without needing to open and edit the target file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
	:write >> logfile
```

----------------------------------------

TITLE: Excluding Specific Syntax Groups for PHP Omni Completion
DESCRIPTION: Configuration to exclude specific PHP syntax groups from Omni completion, using either specific group names or regex patterns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
let g:omni_syntax_group_exclude_php = 'phpCoreConstant,phpConstant'
let g:omni_syntax_group_exclude_php = 'php\w*Constant'
```

----------------------------------------

TITLE: Creating a New GNAT Object
DESCRIPTION: Function to create a new GNAT object that manages GNAT compiles. The object is created automatically when the first Ada source file is loaded if g:ada_default_compiler is set to 'gnat'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_7

LANGUAGE: viml
CODE:
```
gnat#New()
```

----------------------------------------

TITLE: Displaying a Manpage in the Current Window in Neovim
DESCRIPTION: This command uses the `:Man` command with the `:hide` modifier to display the manpage for `printf` in the current window. This reuses the current window without opening a new one.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
":hide Man printf"
```

----------------------------------------

TITLE: Validating Raw Size Against Integer Size
DESCRIPTION: This C snippet checks if `raw_size` is smaller than the size of an integer and logs an error message if it is. This is necessary for ensuring sufficient buffer space is available for integer processing, thus avoiding potential truncation or data loss.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_7

LANGUAGE: C
CODE:
```
if (raw_size < sizeof(int)) {
  fprintf(stderr, "compressed record not big enough for count: %ju", raw_size);
  return false;
}
```

----------------------------------------

TITLE: Configuring Lisp Syntax Highlighting Options in Vim
DESCRIPTION: Sets options for Lisp syntax highlighting, including instring highlighting and rainbow parentheses coloring.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_76

LANGUAGE: VimScript
CODE:
```
g:lisp_instring : If it exists, then "(...)" strings are highlighted
			  as if the contents of the string were lisp.
			  Useful for AutoLisp.
g:lisp_rainbow  : If it exists and is nonzero, then differing levels
			  of parenthesization will receive different
			  highlighting.
```

----------------------------------------

TITLE: Configuring Vim Syntax Region with Offsets
DESCRIPTION: Example showing syntax region definition with highlight groups and offsets for start/end patterns
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_166

LANGUAGE: vim
CODE:
```
:syn region Exa matchgroup=Foo start="foo"hs=s+2,rs=e+2 matchgroup=Bar end="bar"me=e-1,he=e-1,re=s-1
```

----------------------------------------

TITLE: Basic Neovim Motion Code Examples
DESCRIPTION: Code examples demonstrating basic mapping and filtering operations in Neovim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:map CTRL-V<BS>     X
```

LANGUAGE: vim
CODE:
```
d:call search("f")<CR>
```

LANGUAGE: vim
CODE:
```
d:if 1<CR>
   call search("f")<CR>
endif<CR>
```

----------------------------------------

TITLE: Helpgrep Command Examples
DESCRIPTION: Examples demonstrating usage of helpgrep for searching through help files
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_4

LANGUAGE: vimscript
CODE:
```
:helpgrep Uganda
:helpgrep uganda\c
:helpgrep backspace@fr
```

----------------------------------------

TITLE: Supporting Gsplit Features
DESCRIPTION: The function |vim.gsplit()| integrates all features available in |vim.split()|, ensuring backward compatibility and offering enhanced capabilities for string and buffer splitting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_7



----------------------------------------

TITLE: Clearing Syntax Sync Settings in Vim
DESCRIPTION: These snippets show how to clear syntax sync settings in Vim. The first command clears all sync settings, while the second clears specific sync patterns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_181

LANGUAGE: viml
CODE:
```
:syntax sync clear

:syntax sync clear {sync-group-name} ..
```

----------------------------------------

TITLE: Disabling Dynamic Comments in R ReStructuredText Files in Neovim
DESCRIPTION: This command sets the `rrst_dynamic_comments` variable to `0`, which prevents Neovim from dynamically setting the 'formatexpr' option for R code and ReStructuredText code in R ReStructuredText files. This allows users to configure their own preferred formatting expressions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_35

LANGUAGE: vim
CODE:
```
	let rrst_dynamic_comments = 0
```

----------------------------------------

TITLE: Customizing HTML/OS Function Color
DESCRIPTION: This snippet customizes the color of functions in HTML/OS files. It involves setting the 'Function' highlight group using the ':hi' command to change its ctermfg and cterm attributes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_57

LANGUAGE: vim
CODE:
```
  :hi Function cterm=bold ctermfg=LightGray
```

----------------------------------------

TITLE: Configuring Vim Behavior After behave Removal
DESCRIPTION: Configuration commands to replicate the behavior of the removed :behave xterm and :behave mswin commands
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.10.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
set mousemodel=extend
```

LANGUAGE: vim
CODE:
```
set selection=exclusive
set selectmode=mouse,key
set mousemodel=popup
set keymodel=startsel,stopsel
```

----------------------------------------

TITLE: Setting Terminal Color Support in Shell
DESCRIPTION: Commands to set the terminal type for color support in different shell environments
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
setenv TERM xterm-color
```

LANGUAGE: shell
CODE:
```
TERM=xterm-color; export TERM
```

----------------------------------------

TITLE: Expanding Path Patterns for Autocommands in Neovim
DESCRIPTION: Example showing how to properly expand file paths like ~ for use in autocommand patterns, as Neovim doesn't automatically expand these patterns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_86

LANGUAGE: lua
CODE:
```
pattern = vim.fn.expand('~') .. '/some/path/*.py'
```

----------------------------------------

TITLE: Executing Vim Commands on Marked Files (netrw-mv)
DESCRIPTION: The 'mv' command executes arbitrary Vim commands on each marked file individually. Files are processed by opening each one in a split, executing the command, and then saving and closing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_31

LANGUAGE: viml
CODE:
```
* 1split
* sil! keepalt e file
* run vim command
* sil! keepalt wq!
```

----------------------------------------

TITLE: GDB Remote Debugging Connection
DESCRIPTION: Command to connect GDB to a remote debugging session.
SOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_2

LANGUAGE: sh
CODE:
```
gdb -ex 'target remote localhost:7777' build/bin/nvim
```

----------------------------------------

TITLE: Asserting Command Failure with Error Pattern
DESCRIPTION: Shows how to use assert_fails() with different error pattern matching strategies
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
call assert_fails('bad cmd', 'E987:')
call assert_fails('cmd', ['E987:.*expected bool'])
call assert_fails('cmd', ['', 'E987:'])
```

----------------------------------------

TITLE: Search Highlighting Commands
DESCRIPTION: Commands to control search result highlighting behavior.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:set nohlsearch
:set hlsearch
:nohlsearch
```

----------------------------------------

TITLE: Setting Minimum Lines for Syntax Sync in Vim
DESCRIPTION: This code shows how to set a minimum number of lines for syntax syncing in Vim. It uses the 'minlines' argument to specify the number of lines to parse before the current line.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_177

LANGUAGE: viml
CODE:
```
:syntax sync minlines=50
```

----------------------------------------

TITLE: Setting End-of-Line Character with Hex Value
DESCRIPTION: Sets the end-of-line character in listchars to the dollar sign using hex notation. This affects how end-of-line markers appear when list mode is enabled.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_42

LANGUAGE: viml
CODE:
```
set listchars=eol:\u21b5
```

----------------------------------------

TITLE: Treating Primitive Types as Keywords in Haskell
DESCRIPTION: This snippet demonstrates how to treat primitive type names as keywords in Haskell syntax highlighting. It involves setting the 'hs_highlight_types' variable to 1 in your vimrc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_45

LANGUAGE: vim
CODE:
```
	:let hs_highlight_types = 1
```

----------------------------------------

TITLE: Alternative Paragraph Folding Expression in Vim
DESCRIPTION: An alternative fold expression that also creates folds for paragraphs separated by blank lines. This method detects when a non-blank line follows a blank line in a slightly different way than the previous example.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:set foldexpr=getline(v:lnum-1)=~'^\s*$'&&getline(v:lnum)=~'\S'?'>1':1
```

----------------------------------------

TITLE: Get Option Value with Filetype Parameter
DESCRIPTION: |nvim_get_option_value()| has been updated to include a `filetype` option, allowing users to retrieve default option values specific to the filetype in use.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_12



----------------------------------------

TITLE: Setting Up Lua Linting with Luacheck in CMake
DESCRIPTION: Creates a target for linting Lua files using luacheck. The target scans runtime, scripts, src, and test directories for .lua files and uses a custom Lua runner script.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_16

LANGUAGE: cmake
CODE:
```
add_glob_target(
  TARGET lintlua-luacheck
  COMMAND $<TARGET_FILE:nvim_bin>
  FLAGS -ll ${PROJECT_SOURCE_DIR}/test/lua_runner.lua ${CMAKE_BINARY_DIR}/usr luacheck -q
  GLOB_DIRS runtime scripts src test
  GLOB_PAT *.lua
  TOUCH_STRATEGY PER_DIR)
add_dependencies(lintlua-luacheck lua_dev_deps)
```

----------------------------------------

TITLE: Setting Indentation Options for Clojure
DESCRIPTION: This snippet provides an example of setting up indentation options for Clojure code within Vim. It defines custom patterns and blacklists for fuzzy indentation, leveraging Vim's flexible indenting capabilities.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_4

LANGUAGE: Vim
CODE:
```
" Default
let g:clojure_fuzzy_indent = 1
let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let']
let g:clojure_fuzzy_indent_blacklist = \
  ['-fn$', '\v^with-%(meta|out-str|loading-context)$']
```

----------------------------------------

TITLE: Targeting Glulx/Glk in Inform Programs
DESCRIPTION: This snippet shows how to configure Inform syntax highlighting for Glulx/Glk environments.  Set the 'inform_highlight_glulx' variable to 1 in your startup sequence.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_61

LANGUAGE: vim
CODE:
```
	:let inform_highlight_glulx=1
```

----------------------------------------

TITLE: Configuring ReStructured Text Syntax Options in Vim
DESCRIPTION: Controls syntax highlighting for code blocks, emphasis text coloring, and section folding in ReStructured Text files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_106

LANGUAGE: vim
CODE:
```
let rst_syntax_code_list = ['vim', 'lisp', ...]
let rst_syntax_code_list = {
	\ 'cpp': ['cpp', 'c++'],
	\ 'bash': ['bash', 'sh'],
	...
\ }
let rst_use_emphasis_colors = 1
let rst_fold_enabled = 1
```

----------------------------------------

TITLE: Registering VimEnter Autocmd in Lua for Nvim UI Startup
DESCRIPTION: Lua code to register a VimEnter autocmd during UI startup. This allows the UI to perform additional setup after user configuration is loaded.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_1

LANGUAGE: lua
CODE:
```
nvim_command("autocmd VimEnter * call rpcrequest(1, 'vimenter')")
```

----------------------------------------

TITLE: Translating System Error Codes with uv.translate_sys_error()
DESCRIPTION: Converts platform-specific error codes to libuv error messages and names, handling both POSIX errors on Unix and Win32 error codes on Windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_103

LANGUAGE: lua
CODE:
```
uv.translate_sys_error({errcode})
```

----------------------------------------

TITLE: Changing Register Type in Vim
DESCRIPTION: Example of changing the type of a register by appending nothing using setreg() function in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_230

LANGUAGE: vim
CODE:
```
call setreg('a', '', 'al')
```

----------------------------------------

TITLE: Placing Signs in Vim Buffers
DESCRIPTION: Examples of using sign_place() to place signs in buffers. This function allows specifying sign attributes such as id, group, name, buffer, line number, and priority.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_239

LANGUAGE: vim
CODE:
```
" Place a sign named sign1 with id 5 at line 20 in
" buffer json.c
call sign_place(5, '', 'sign1', 'json.c',
                           \ {'lnum' : 20})

" Updates sign 5 in buffer json.c to use sign2
call sign_place(5, '', 'sign2', 'json.c')

" Place a sign named sign3 at line 30 in
" buffer json.c with a new identifier
let id = sign_place(0, '', 'sign3', 'json.c',
                           \ {'lnum' : 30})

" Place a sign named sign4 with id 10 in group 'g3'
" at line 40 in buffer json.c with priority 90
call sign_place(10, 'g3', 'sign4', 'json.c',
                \ {'lnum' : 40, 'priority' : 90})
```

----------------------------------------

TITLE: Search Pattern Register Example
DESCRIPTION: Example of writing to the search pattern register in Vim to modify search highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:let @/ = "the"
```

----------------------------------------

TITLE: Setting Global Key Mapping - Lua
DESCRIPTION: Creates a global mapping for a specified mode in Neovim. This includes options for setting buffer-local mappings and handles whitespace in key bindings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_24

LANGUAGE: lua
CODE:
```
nvim_set_keymap({mode}, {lhs}, {rhs}, {opts})
```

----------------------------------------

TITLE: Configuring tmux terminal overrides for Konsole
DESCRIPTION: This code snippet provides a specific configuration for Konsole 18.07.70 or older to handle cursor shape changes. Due to differences in how Konsole interprets control sequences, a more complex `terminal-overrides` setting is required.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_4

LANGUAGE: bash
CODE:
```
set -ga terminal-overrides 'xterm*:\E]50;CursorShape=%?%p1%{3}%<%t%{0}%e%{1}%;%d\007'
```

----------------------------------------

TITLE: Setting includeexpr to a script-local function in Vim
DESCRIPTION: Examples of setting the 'includeexpr' option to script-local functions in Vim. This allows for more complex file name transformations using custom functions defined in the script.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_32

LANGUAGE: vim
CODE:
```
setlocal includeexpr=s:MyIncludeExpr()
setlocal includeexpr=<SID>SomeIncludeExpr()
```

----------------------------------------

TITLE: Tabline Update Event
DESCRIPTION: Provides event for updating tabline with current tab, tab list, current buffer, and buffer list information
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
["tabline_update", curtab, tabs, curbuf, buffers]
```

----------------------------------------

TITLE: JavaScript DOM Compatibility Table
DESCRIPTION: A table showing compatibility between Internet Explorer, Firefox, W3C standards, and what is available in Omni completion. Indicates feature support with '+' or '-' marks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_9

LANGUAGE: text
CODE:
```
>
		IE	FF	W3C  Omni completion ~
		+/-	+/-	+    +		     ~
		+	+	-    +		     ~
		+	-	-    -		     ~
		-	+	-    -		     ~
<
```

----------------------------------------

TITLE: Ada Tag Listing with ada#List_Tag Function
DESCRIPTION: Function to list all occurrences of an Ada entity under the cursor or at a given line/column in the quickfix window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
ada#List_Tag([{line}, {col}])
```

----------------------------------------

TITLE: Cursor-Relative Scrolling in Vim
DESCRIPTION: Commands that reposition the edit window while keeping the cursor on the same line. Includes z<CR>, zt, z{height}<CR>, z., zz, z-, and zb commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
z<CR>           Redraw, line [count] at top of window.
zt              Like "z<CR>", but leave cursor in same column.
z{height}<CR>   Redraw, make window {height} lines tall.
z.              Redraw, line [count] at center of window.
zz              Like "z.", but leave cursor in same column.
z-              Redraw, line [count] at bottom of window.
zb              Like "z-", but leave cursor in same column.
```

----------------------------------------

TITLE: Enabling CUDA Fortran Highlighting in Vim
DESCRIPTION: Activates syntax highlighting for CUDA Fortran extensions by setting 'fortran_CUDA' to 1. This customization is for developers using CUDA extensions in Fortran.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_37

LANGUAGE: VimScript
CODE:
```
:let fortran_CUDA=1
```

----------------------------------------

TITLE: Neovim Workflow Implementation in Python
DESCRIPTION: Extended pseudocode showing how Neovim handles different editor states and mode transitions. It demonstrates the implementation of normal mode, command-line mode, operator states, and insert mode with their respective callbacks.
SOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/README.md#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
def main()
  state_enter(normal_state, {})

def normal_state(data, key):
  if key == ':':
    state_enter(command_line_state, {})
  elif key == 'i':
    state_enter(insert_state, {})
  elif key == 'd':
    state_enter(delete_operator_state, {})
  elif key == 'g':
    state_enter(g_command_state, {})
  elif is_number(key):
    state_enter(get_operator_count_state, {'count': key})
  elif key == 'G'
    jump_to_eof()
  return true

def command_line_state(data, key):
  if key == '<cr>':
    if data['input']:
      execute_ex_command(data['input'])
    return false
  elif key == '<esc>'
    return false

  if not data['input']:
    data['input'] = ''

  data['input'] += key
  return true

def delete_operator_state(data, key):
  count = data['count'] or 1
  if key == 'w':
    delete_word(count)
  elif key == '$':
    delete_to_eol(count)
  return false  # return to normal mode

def g_command_state(data, key):
  if key == 'g':
    go_top()
  elif key == 'v':
    reselect()
  return false  # return to normal mode

def get_operator_count_state(data, key):
  if is_number(key):
    data['count'] += key
    return true
  unshift_key(key)  # return key to the input buffer
  state_enter(delete_operator_state, data)
  return false

def insert_state(data, key):
  if key == '<esc>':
    return false  # exit insert mode
  self_insert(key)
  return true
```

----------------------------------------

TITLE: Displaying Command History in Vim
DESCRIPTION: This snippet shows how to display the history of colon commands using the `:history` command. This command lists all the previously executed colon commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
	:history
```

----------------------------------------

TITLE: Generic Syntax Group Include Variable Pattern
DESCRIPTION: Template for the variable used to include specific syntax groups in Omni completion for any filetype, using regex patterns or comma-separated syntax group names.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
let g:omni_syntax_group_include_{filetype} = 'regex,comma,separated'
```

----------------------------------------

TITLE: Configuring Unit Tests with Lua FFI Check
DESCRIPTION: Sets up the unit test target with LuaJIT FFI dependency check. Creates a unittest target if FFI is available, otherwise displays a warning message.
SOURCE: https://github.com/neovim/neovim/blob/master/test/CMakeLists.txt#2025-04-20_snippet_1

LANGUAGE: cmake
CODE:
```
check_lua_module(${LUA_PRG} "ffi" LUA_HAS_FFI)
if(LUA_HAS_FFI)
  add_custom_target(unittest
    COMMAND ${CMAKE_COMMAND}
      -D TEST_TYPE=unit
      ${TEST_OPTIONS}
      -P ${PROJECT_SOURCE_DIR}/cmake/RunTests.cmake
    USES_TERMINAL)
  add_dependencies(unittest lua_dev_deps nvim)
else()
  message(WARNING "disabling unit tests: no Luajit FFI in ${LUA_PRG}")
endif()
```

----------------------------------------

TITLE: Disabling Bold Highlighting for Manpages in Neovim
DESCRIPTION: This command uses the `:highlight` command to link the `manBold` highlight group to the `Normal` highlight group, effectively disabling bold highlighting in manpages.  This makes the manpages display without any bold text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
":highlight link manBold Normal"
```

----------------------------------------

TITLE: Getting Socket Name of Pipe Handle
DESCRIPTION: Retrieves the name associated with the Unix domain socket or named pipe to which the handle is connected. This is useful for understanding the connection context.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_34

LANGUAGE: lua
CODE:
```
uv.pipe_getsockname({pipe})
```

----------------------------------------

TITLE: Working with Hidden Buffers
DESCRIPTION: This snippet shows how to edit hidden buffers in Vim using the ':hide' command. It explains how buffers become hidden and the importance of saving changes to hidden buffers to avoid data loss.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:hide edit two.txt
```

----------------------------------------

TITLE: Using :echoerr to Generate Error Exceptions in Vim Script
DESCRIPTION: Example showing how to use :echoerr to convert an exception into a Vim error exception that can be caught elsewhere.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_131

LANGUAGE: vim
CODE:
```
:try
:  try
:    asdf
:  catch /.*/
:    echoerr v:exception
:  endtry
:catch /.*/
:  echo v:exception
:endtry
```

----------------------------------------

TITLE: Alternate Buffer Register Manipulation
DESCRIPTION: Examples of working with the alternate file register (#) in Vim, showing how to store and restore buffer numbers and names.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
let altbuf = bufnr(@#)
...
let @# = altbuf
```

LANGUAGE: vim
CODE:
```
let @# = 'buffer_name'
```

----------------------------------------

TITLE: Basic usage of input() function
DESCRIPTION: Demonstrates basic usage of the input() function which prompts the user for input on the command line. The example shows a simple conditional based on user response.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_132

LANGUAGE: vim
CODE:
```
if input("Coffee or beer? ") == "beer"
  echo "Cheers!"
endif
```

----------------------------------------

TITLE: Setting Colors Name Variable Dynamically in VimL
DESCRIPTION: This code snippet demonstrates how to set the g:colors_name variable dynamically based on the current file name, which is a recommended practice when creating color schemes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
let g:colors_name = expand('<sfile>:t:r')
```

----------------------------------------

TITLE: Jumping to the end of the current code block (Vim)
DESCRIPTION: This snippet shows how to jump to the end of the current code block using the `]}` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
"]}"
```

----------------------------------------

TITLE: Disabling Dynamic Comments in R Markdown Files in Neovim
DESCRIPTION: This command sets the `rmd_dynamic_comments` variable to `0`, which prevents Neovim from dynamically setting the 'formatexpr' option for R code and Markdown code in R Markdown files. This allows users to configure their own preferred formatting expressions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_34

LANGUAGE: vim
CODE:
```
	let rmd_dynamic_comments = 0
```

----------------------------------------

TITLE: Custom operator mapping example
DESCRIPTION: Example of creating a custom operator mapping that uses v:operator to preserve the original operator
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:omap O <Esc>:call MyMotion(v:operator)<CR>
```

----------------------------------------

TITLE: Customizing Left/Right Keys in Wildmenu
DESCRIPTION: Remaps left and right arrow keys to move the cursor instead of selecting different matches in wildmenu completion.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_83

LANGUAGE: vim
CODE:
```
cnoremap <Left> <Space><BS><Left>
cnoremap <Right> <Space><BS><Right>
```

----------------------------------------

TITLE: Retrieving Buffer Number for Window in Vim
DESCRIPTION: This snippet demonstrates how to use the winbufnr() function to get the buffer number associated with the current window. It's useful for identifying which buffer is displayed in a specific window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_285

LANGUAGE: vim
CODE:
```
echo "The file in the current window is " .. bufname(winbufnr(0))
```

----------------------------------------

TITLE: Grepping in Marked Files (netrw-mg) Pattern Examples
DESCRIPTION: Examples of pattern formats that can be used with the 'mg' command for grepping through marked files. Shows standard search pattern, negated pattern, and plain pattern formats.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_34

LANGUAGE: viml
CODE:
```
/pattern/[g][j]
! /pattern/[g][j]
pattern
```

----------------------------------------

TITLE: Converting WTF-8 Length to UTF-16 in Lua
DESCRIPTION: This function calculates the length in UTF-16 code units of a WTF-8 string after converting it to UTF-16 (or UCS-2). Note that the number of bytes needed for the UTF-16 string is twice the number of code units.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_108

LANGUAGE: lua
CODE:
```
uv.wtf8_length_as_utf16({wtf16})
```

----------------------------------------

TITLE: Setting Perl Filetype in Vim
DESCRIPTION: This command configures the filetype of the current buffer to Perl within Vim, executing the relevant settings and plugins defined in ftplugin/perl.vim. It supports Perl syntax completion plugins, facilitating the use of omni-completion features.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_10

LANGUAGE: vimscript
CODE:
```
:set ft=perl
```

----------------------------------------

TITLE: Setting Autoindent with Comment in Vim
DESCRIPTION: Example showing how to set the autoindent option with an inline comment using double quotes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:set ai		"set 'autoindent' option
```

----------------------------------------

TITLE: Static SQL Completion Mappings
DESCRIPTION: Defines the default key mappings for static SQL completion in Vim. These mappings trigger the sqlcomplete#Map function to suggest items based on syntax highlighting groups.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
    imap <buffer> <C-C>a <C-\><C-O>:call sqlcomplete#Map('syntax')<CR><C-X><C-O>
    imap <buffer> <C-C>k <C-\><C-O>:call sqlcomplete#Map('sqlKeyword')<CR><C-X><C-O>
    imap <buffer> <C-C>f <C-\><C-O>:call sqlcomplete#Map('sqlFunction')<CR><C-X><C-O>
    imap <buffer> <C-C>o <C-\><C-O>:call sqlcomplete#Map('sqlOption')<CR><C-X><C-O>
    imap <buffer> <C-C>T <C-\><C-O>:call sqlcomplete#Map('sqlType')<CR><C-X><C-O>
    imap <buffer> <C-C>s <C-\><C-O>:call sqlcomplete#Map('sqlStatement')<CR><C-X><C-O>
```

----------------------------------------

TITLE: Implementing Less-like Initialization Function in Vim
DESCRIPTION: Example function that sets up Vim options when using it as a less/more replacement viewer. Disables cursor column and line highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_10

LANGUAGE: viml
CODE:
```
func LessInitFunc()
  set nocursorcolumn nocursorline
endfunc
```

----------------------------------------

TITLE: Static SQL Completion Mapping Example
DESCRIPTION: Provides an example of a static SQL completion mapping using regular expressions.  This allows more flexible matching of syntax groups for completion.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
    imap <buffer> <C-C>k <C-\><C-O>:call sqlcomplete#Map('sqlKeyword')<CR><C-X><C-O>
    imap <buffer> <C-C>k <C-\><C-O>:call sqlcomplete#Map('sqlKeyword\w*')<CR><C-X><C-O>
```

----------------------------------------

TITLE: Continue and Break with Finally in Vim Script
DESCRIPTION: Shows how finally blocks still execute when the try block or catch clauses are exited via continue or break statements.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_133

LANGUAGE: vim
CODE:
```
:let first = 1
:while 1
:  try
:    if first
:      echo "first"
:      let first = 0
:      continue
:    else
:      throw "second"
:    endif
:  catch /.*/
:    echo v:exception
:    break
:  finally
:    echo "cleanup"
:  endtry
:  echo "still in while"
:endwhile
:echo "end"
```

----------------------------------------

TITLE: Restoring Window Sizes in Vim
DESCRIPTION: This example demonstrates how to use winrestcmd() to save and restore window sizes. It's useful for temporarily changing window layouts and then reverting them back to their original state.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_289

LANGUAGE: vim
CODE:
```
let cmd = winrestcmd()
call MessWithWindowSizes()
exe cmd
```

----------------------------------------

TITLE: Profiling Using Bpftrace in Neovim
DESCRIPTION: This bpftrace script is used to track performance bottlenecks in Neovim by analyzing slow functions and printing files opened during execution. It highlights functions that exceed a set execution time and prints a histogram of function timing. Prerequisites include having bpftrace installed and the ability to run scripts with sudo.
SOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/README.md#2025-04-20_snippet_1

LANGUAGE: bpftrace
CODE:
```
#!/usr/bin/env bpftrace

BEGIN {
  @depth = -1;
}

tracepoint:sched:sched_process_fork /@pidmap[args->parent_pid]/ {
  @pidmap[args->child_pid] = 1;
}

tracepoint:sched:sched_process_exit /@pidmap[args->pid]/ {
  delete(@pidmap[args->pid]);
}

usdt:build/bin/nvim:neovim:eval__call_func__entry {
    @pidmap[pid] = 1;
    @depth++;
    @funcentry[@depth] = nsecs;
}

usdt:build/bin/nvim:neovim:eval__call_func__return {
    $func = str(arg0);
    $msecs = (nsecs - @funcentry[@depth]) / 1000000;

    @time_histo = hist($msecs);

    if ($msecs >= 1000) {
      printf("%u ms for %s\n", $msecs, $func);
      print(@files);
    }

    clear(@files);
    delete(@funcentry[@depth]);
    @depth--;
}

tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat {
  if (@pidmap[pid] == 1 && @depth >= 0) {
    @files[str(args->filename)] = count();
  }
}

END {
  clear(@depth);
}

$ sudo bpftrace funcslower.bt
1527 ms for Slower
@files[/usr/lib/libstdc++.so.6]: 2
@files[/etc/fish/config.fish]: 2
<snip>

^C
@time_histo:
[0]                71430 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[1]                  346 |                                                    |
[2, 4)               208 |                                                    |
[4, 8)                91 |                                                    |
[8, 16)               22 |                                                    |
[16, 32)              85 |                                                    |
[32, 64)               7 |                                                    |
[64, 128)              0 |                                                    |
[128, 256)             0 |                                                    |
[256, 512)             6 |                                                    |
[512, 1K)              1 |                                                    |
[1K, 2K)               5 |                                                    |
```

----------------------------------------

TITLE: Retrieving Namespaces in Neovim Lua API
DESCRIPTION: Gets existing, non-anonymous namespaces. Returns a dictionary mapping names to namespace IDs. Available since Neovim 0.3.2.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_67

LANGUAGE: lua
CODE:
```
nvim_get_namespaces()
```

----------------------------------------

TITLE: Enabling Arabic Settings in Neovim
DESCRIPTION: Enables Arabic support, including keymap, right-to-left mode, and Arabic shaping. This is a shortcut command that sets up multiple Arabic-related options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_2

LANGUAGE: VimScript
CODE:
```
:set arabic
```

----------------------------------------

TITLE: Treesitter Query Modeline Example (Extends and Inherits)
DESCRIPTION: This example demonstrates the use of treesitter query modelines to extend existing queries and inherit queries from another language, showcasing that the directives can be separated by comments. It shows the syntax for specifying multiple languages to inherit from and extending the current query.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_12

LANGUAGE: query
CODE:
```
";; extends\n;;\n;; inherits: css"
```

----------------------------------------

TITLE: Verbose Autocommand Example
DESCRIPTION: Example showing verbose output format when listing autocommands with the verbose option enabled
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:verbose autocmd BufEnter
FileExplorer  BufEnter
    *     call s:LocalBrowse(expand("<amatch>"))
    Last set from /usr/share/vim/vim-7.0/plugin/NetrwPlugin.vim
```

----------------------------------------

TITLE: Changing Mouse Model in Neovim
DESCRIPTION: Change the 'mousemodel' option to 'extend' to make right-click extend selection instead of showing the popup menu.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_6

LANGUAGE: viml
CODE:
```
set mousemodel=extend
```

----------------------------------------

TITLE: Navigating to Location List Errors
DESCRIPTION: Command for displaying errors from a window-local location list, similar to the :cc command for the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:ll[!] [nr]
:[nr]ll[!]
```

----------------------------------------

TITLE: Python String Replacement Function
DESCRIPTION: Example demonstrating string replacement using Python with Vim registers
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:py3 << EOF
needle = vim.eval('@a')
replacement = vim.eval('@b')

def py_vim_string_replace(str):
	return str.replace(needle, replacement)
EOF
:'<,'>py3do return py_vim_string_replace(line)
```

----------------------------------------

TITLE: Cursor Movement Events in Neovim
DESCRIPTION: Documents cursor-related events including CursorHoldI, CursorMoved, CursorMovedC, and CursorMovedI. These events trigger on various cursor movements in different modes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
CursorHoldI
CursorMoved
CursorMovedC
CursorMovedI
```

----------------------------------------

TITLE: Reducing folding level
DESCRIPTION: Opens more folds by reducing the fold level. This command can be repeated to progressively open more nested folds.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_3

LANGUAGE: vimdoc
CODE:
```
zr
```

----------------------------------------

TITLE: String Slice Operations in Vim Script
DESCRIPTION: Examples of string slicing operations including getting last byte, whole string, and substring operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_75

LANGUAGE: vim
CODE:
```
:let c = name[-1:]\n:let c = name[0:-1]\n:let c = name[-2:-2]\n:let s = line(".")[4:]\n:let s = s[:-3]
```

----------------------------------------

TITLE: Navigating to Location List Error Below Current Line
DESCRIPTION: Command for going to the error below the current line in the current buffer from the location list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:[count]lbel[ow]
```

----------------------------------------

TITLE: List Creation in Vimscript
DESCRIPTION: This code snippet demonstrates how to create lists in Vimscript. Lists can contain items of any type and are created using square brackets with comma-separated items. An empty list can be created using empty square brackets.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
	:let mylist = [1, two, 3, "four"]
	:let emptylist = []
```

----------------------------------------

TITLE: Evaluating Expressions with Side Effects in Vim Script
DESCRIPTION: Demonstrates how to use the eval command to evaluate expressions with side effects, such as appending text to a buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_110

LANGUAGE: vim
CODE:
```
:eval Getlist()->Filter()->append('$')
```

----------------------------------------

TITLE: Conditional Autocommand Loading
DESCRIPTION: Pattern for ensuring autocommands are only loaded once using a variable check
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:if !exists("autocommands_loaded")
:  let autocommands_loaded = 1
:  au ...
:endif
```

----------------------------------------

TITLE: Setting Right-to-Left Orientation for Command-Line in Vim
DESCRIPTION: This option sets the command-line to use right-to-left orientation in certain modes like search. It enhances the right-to-left experience in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/rileft.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
'rightleftcmd' ('rlc') sets the command-line within certain modes
     (such as search) to be utilized in right-to-left orientation as well.
```

----------------------------------------

TITLE: Setting fold open options
DESCRIPTION: Configures which commands will automatically open folds. Setting it to 'all' means folds will always open when the cursor moves to them.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_8

LANGUAGE: vimdoc
CODE:
```
:set foldopen=all
```

----------------------------------------

TITLE: Msgpack Parsing from Shada File
DESCRIPTION: Example of reading and parsing msgpack data from a Neovim shada file using readfile() and msgpackparse().
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_182

LANGUAGE: vim
CODE:
```
let fname = expand('~/.config/nvim/shada/main.shada')
let mpack = readfile(fname, 'b')
let shada_objects = msgpackparse(mpack)
```

----------------------------------------

TITLE: Configuring Go Recommended Style
DESCRIPTION: Code snippet for disabling the default Go style settings in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
let g:go_recommended_style = 0
```

----------------------------------------

TITLE: Configuring Double-Click Behavior for Netrw in VimL
DESCRIPTION: This snippet demonstrates how to disable Netrw's default mouse mappings and set up a double-click mapping to open files or directories in Netrw. It involves modifying the .vimrc and creating a Netrw-specific ftplugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_54

LANGUAGE: VimL
CODE:
```
let g:netrw_mousemaps= 0
```

LANGUAGE: VimL
CODE:
```
nmap <buffer> <2-leftmouse> <CR>
```

----------------------------------------

TITLE: Starting Charwise Visual Mode in Neovim
DESCRIPTION: This command starts Visual mode per character, allowing for selection based on character positions.  The [count] argument allows for extending a previous selection or selecting a specific number of characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
"[count]v"
```

----------------------------------------

TITLE: Closing all folds completely
DESCRIPTION: Closes all folds in the file completely, regardless of nesting depth. This is the opposite of the zR command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_6

LANGUAGE: vimdoc
CODE:
```
zM
```

----------------------------------------

TITLE: Using Method Chaining for Syntax Item Color Retrieval in Vim
DESCRIPTION: This snippet demonstrates an alternative way to retrieve the syntax item color using method chaining in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_270

LANGUAGE: vim
CODE:
```
echo synID(line("."), col("."), 1)->synIDtrans()->synIDattr("fg")
```

----------------------------------------

TITLE: Resolving Differences in Diff Mode
DESCRIPTION: Demonstrates commands for resolving differences by moving text between windows in diff mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_26

LANGUAGE: vim
CODE:
```
dp
do
```

----------------------------------------

TITLE: Windows FTP Credentials Example
DESCRIPTION: Example content for Windows FTP credentials file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_12

LANGUAGE: text
CODE:
```
userid
password
```

----------------------------------------

TITLE: SQL Dialect Configuration Example
DESCRIPTION: Example configuration for setting the default SQL dialect type in Vim initialization file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_2

LANGUAGE: vimdoc
CODE:
```
let g:sql_type_default = 'sqlanywhere'
let g:sql_type_default = 'sqlinformix'
let g:sql_type_default = 'mysql'
```

----------------------------------------

TITLE: Configuring DTD Syntax Highlighting Options
DESCRIPTION: Sets options for DTD syntax highlighting, including case sensitivity and parameter entity highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_28

LANGUAGE: VimScript
CODE:
```
let dtd_ignore_case=1
let dtd_no_tag_errors=1
let dtd_no_param_entities=1
```

----------------------------------------

TITLE: Configuring Hare Recommended Style Settings
DESCRIPTION: Default indentation and formatting settings following the official Hare style guide.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_hare.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
setlocal noexpandtab
setlocal shiftwidth=0
setlocal softtabstop=0
setlocal tabstop=8
setlocal textwidth=80
```

----------------------------------------

TITLE: Cinoptions Indentation Examples - Basic
DESCRIPTION: Demonstrates basic indentation patterns with different cinoptions settings using if-condition blocks
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_1

LANGUAGE: C
CODE:
```
  if (cond)
  {
      foo;
  }
```

----------------------------------------

TITLE: Restoring Old Default Color Scheme in Neovim Color Scheme File
DESCRIPTION: Add this line to your color scheme file to restore the old default color scheme links and colors in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
:source $VIMRUNTIME/colors/vim.lua
```

----------------------------------------

TITLE: Time Measurement Functions with LibUV in Lua
DESCRIPTION: High-resolution time measurement functions for system uptime, monotonic and real-time clocks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_81

LANGUAGE: lua
CODE:
```
uv.hrtime()                                                        *uv.hrtime()*
```

LANGUAGE: lua
CODE:
```
uv.clock_gettime({clock_id})                                *uv.clock_gettime()*
```

LANGUAGE: lua
CODE:
```
uv.uptime()                                                        *uv.uptime()*
```

----------------------------------------

TITLE: Stream Type Detection with LibUV in Lua
DESCRIPTION: Function to detect what type of stream should be used with a given file descriptor, typically used during initialization to determine stdio stream types.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_83

LANGUAGE: lua
CODE:
```
uv.guess_handle({fd})                                        *uv.guess_handle()*
```

----------------------------------------

TITLE: Re-throwing Exceptions in Vim Script
DESCRIPTION: Shows how to catch an exception in one function and throw a new one to be caught elsewhere, demonstrating exception chaining.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_129

LANGUAGE: vim
CODE:
```
:function! Foo()
:  throw "foo"
:endfunction
:
:function! Bar()
:  try
:    call Foo()
:  catch /foo/
:    echo "Caught foo, throw bar"
:    throw "bar"
:  endtry
:endfunction
:
:try
:  call Bar()
:catch /.*/
:  echo "Caught" v:exception
:endtry
```

----------------------------------------

TITLE: Text Insertion Commands (Vim)
DESCRIPTION: Commands for inserting text in different modes and positions, including normal insertion, append, and line operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
a               append text after the cursor (N times)
A               append text at the end of the line (N times)
i               insert text before the cursor (N times)
I               insert text before first non-blank in line (N times)
gI              insert text in column 1 (N times)
o               open new line below current line (N times)
O               open new line above current line (N times)
:startinsert    start Insert mode
:startreplace   start Replace mode
```

----------------------------------------

TITLE: Disable EditorConfig in Lua Configuration
DESCRIPTION: Disables the default builtin EditorConfig support in Nvim. This Lua snippet sets the `vim.g.editorconfig` global variable to `false` within the user configuration file. It assumes Nvim is correctly installed and configured.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_1

LANGUAGE: lua
CODE:
```
vim.g.editorconfig = false
```

----------------------------------------

TITLE: Disabling TypeScript Host-Specific API Highlighting with VimL
DESCRIPTION: Configuration to disable highlighting of host-specific APIs like addEventListener in TypeScript syntax highlighting. Set to 0 to disable this feature.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_149

LANGUAGE: viml
CODE:
```
let g:typescript_host_keyword = 0
```

----------------------------------------

TITLE: Setting Language Preferences in Vim
DESCRIPTION: Example of language commands and their output showing how to view and set language preferences
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mlang.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
:language
Current language: C
:language de_DE.ISO_8859-1
:language mes
Current messages language: de_DE.ISO_8859-1
:lang mes en
```

----------------------------------------

TITLE: Conditional Function Deletion Based on Profiling Status
DESCRIPTION: A condition check that deletes a function only if profiling is not active. This prevents functions from being deleted during profiling, which would prevent collecting their performance data.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_29

LANGUAGE: vim
CODE:
```
:if !v:profiling
:   delfunc MyFunc
:endif
```

----------------------------------------

TITLE: Toggling Case in Vim
DESCRIPTION: Uses the 'g~' operator to swap the case of characters (line example shows the full line case swapping with g~~).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
g~~
```

----------------------------------------

TITLE: Setting Embedded Languages for Typst Files in Vim
DESCRIPTION: Configures a list of language names whose syntax definitions will be included in Typst files using the g:typst_embedded_languages variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_150

LANGUAGE: vim
CODE:
```
let g:typst_embedded_languages = ['python', 'r']
```

----------------------------------------

TITLE: Rust Plugin Debugging Commands (Vim)
DESCRIPTION: These commands are intended for debugging the Rust plugin itself. :RustInfo emits debugging information, :RustInfoToClipboard saves the info to the clipboard, and :RustInfoToFile saves it to a specified file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_32

LANGUAGE: vim
CODE:
```
:RustInfo                                                          *:RustInfo*
		Emits debugging info of the Vim Rust plugin.

:RustInfoToClipboard                                      *:RustInfoClipboard*
		Saves debugging info of the Vim Rust plugin to the default
		register.

:RustInfoToFile [filename]                                   *:RustInfoToFile*
		Saves debugging info of the Vim Rust plugin to the given file,
		overwriting it.
```

----------------------------------------

TITLE: Shell Command Example with Marked Files (netrw-mx)
DESCRIPTION: Example of using the 'mx' command to apply shell commands to marked files. The command demonstrates how 'cat' would be applied to each marked file individually.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_32

LANGUAGE: viml
CODE:
```
(mark files)
mx
Enter command: cat

The result is a series of shell commands:
cat 'file1'
cat 'file2'
...
```

----------------------------------------

TITLE: Configuring Idris2 Tab Settings
DESCRIPTION: Code snippet for allowing tab characters in Idris2 files instead of spaces.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
let g:idris2#allow_tabchar = 1
```

----------------------------------------

TITLE: Search with Negative Line Offset in Vim
DESCRIPTION: Example of a search pattern with a negative line offset that moves the cursor upward from the match. This demonstrates how line offsets can navigate in either direction.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
/const/-2
```

----------------------------------------

TITLE: Setting Default Shell Type to Korn Shell
DESCRIPTION: Configuring Vim to use Korn shell syntax highlighting as the default for shell scripts when the shell type cannot be determined automatically.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_114

LANGUAGE: vim
CODE:
```
let g:is_kornshell = 1
```

----------------------------------------

TITLE: Grid Resize Event in Neovim JSON
DESCRIPTION: This snippet defines the grid resize event specifying dimensions for a grid in Neovim, allowing for responsive UI adjustments when client grids are manipulated.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_4

LANGUAGE: json
CODE:
```
["grid_resize", grid, width, height] ~
	Resize a `grid`. If `grid` wasn't seen by the client before, a new grid is
being created with this size.
```

----------------------------------------

TITLE: Saving Custom Scripts File
DESCRIPTION: Command to save custom filetype detection scripts to the user's Neovim configuration directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
w ~/.config/nvim/scripts.vim
```

----------------------------------------

TITLE: Navigating to Previous Location List Error
DESCRIPTION: Commands for displaying the previous error in the location list, similar to :cNext and :cprevious for the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:[count]lN[ext][!]
:[count]lp[revious][!]
```

----------------------------------------

TITLE: Configuring Right-to-Left Command-Line Mode
DESCRIPTION: Sets or unsets right-to-left mode for command-line editing, particularly useful for search commands in Arabic.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_7

LANGUAGE: VimScript
CODE:
```
:set rightleftcmd=search
```

LANGUAGE: VimScript
CODE:
```
:set rightleftcmd=
```

----------------------------------------

TITLE: Disabling Diff Translations in Vim
DESCRIPTION: Code to disable localization in diff syntax highlighting for better performance with long lines by setting a global variable and reloading syntax.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
let g:diff_translations = 0
set syntax=diff
```

----------------------------------------

TITLE: Vim Mark Navigation Command
DESCRIPTION: Example of jumping to the last known position in a file using mark command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
g`\"
```

----------------------------------------

TITLE: Closing libuv Loop Resources in Lua
DESCRIPTION: This function closes all internal libuv loop resources. It's automatically called when the loop is garbage collected by Lua.  It should only be called after the loop has finished executing and all open handles/requests are closed.  Returns `EBUSY` if called prematurely.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_3

LANGUAGE: lua
CODE:
```
"uv.loop_close()                                                *uv.loop_close()*\n\n                Closes all internal loop resources. In normal execution, the\n                loop will automatically be closed when it is garbage collected\n                by Lua, so it is not necessary to explicitly call\n                `loop_close()`. Call this function only after the loop has\n                finished executing and all open handles and requests have been\n                closed, or it will return `EBUSY`.\n\n                Returns: `0` or `fail`"
```

----------------------------------------

TITLE: Navigating to Previous Quickfix Error
DESCRIPTION: Commands for displaying the previous error in the quickfix list that includes a file name.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:[count]cN[ext][!]
:[count]cp[revious][!]
```

----------------------------------------

TITLE: Msgpack Data Writing Example
DESCRIPTION: Demonstrates writing msgpack-encoded data to a file using msgpackdump(). Shows two methods: using writefile() with a list and with a Blob.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_181

LANGUAGE: vim
CODE:
```
call writefile(msgpackdump([{}]), 'fname.mpack', 'b')
```

LANGUAGE: vim
CODE:
```
call writefile(msgpackdump([{}], 'B'), 'fname.mpack')
```

----------------------------------------

TITLE: Setting Fold Expression for Tab-Indented Lines in Vim
DESCRIPTION: A fold expression that creates a fold for all consecutive lines that start with a tab character. This uses the 'foldexpr' option with a simple expression that checks if the first character of the line is a tab.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:set foldexpr=getline(v:lnum)[0]=="\t"
```

----------------------------------------

TITLE: Defining a syntax region with ALLBUT containment in Vim
DESCRIPTION: Example of defining a syntax region that accepts all groups except specific ones. This creates a Block region that starts with '{' and ends with '}', containing all syntax groups except Function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_159

LANGUAGE: vim
CODE:
```
:syntax region Block start="{" end="}" ... contains=ALLBUT,Function
```

----------------------------------------

TITLE: Setting a V Variable in Neovim
DESCRIPTION: Sets a v: variable with 'nvim_set_vvar', provided it is not readonly. Define both the name and value as strings, similar to global variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_26

LANGUAGE: Lua
CODE:
```
nvim_set_vvar\(\{name\}, \{value\}\)
```

----------------------------------------

TITLE: Checking Variable Types in Vim
DESCRIPTION: Examples of using the type() function to determine the type of variables in Vim. Demonstrates checks for various data types including numbers, strings, functions, lists, dictionaries, floats, and booleans.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_278

LANGUAGE: vim
CODE:
```
if type(myvar) == type(0) | endif
if type(myvar) == type("") | endif
if type(myvar) == type(function("tr")) | endif
if type(myvar) == type([]) | endif
if type(myvar) == type({}) | endif
if type(myvar) == type(0.0) | endif
if type(myvar) == type(v:true) | endif
```

----------------------------------------

TITLE: Configuring Virtual Text in Lua Diagnostic Handler
DESCRIPTION: This code snippet enables the 'virtual_text' option in the Lua diagnostic configuration, allowing virtual text to be displayed for diagnostics. No specific dependencies are required other than having a working Lua environment with Nvim's diagnostic API. The main parameter is the option to enable virtual_text, and it does not return an output as it directly modifies the diagnostic behavior.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_0

LANGUAGE: lua
CODE:
```
vim.diagnostic.config({ virtual_text = true })
```

----------------------------------------

TITLE: Setting Test Environment Variables in Vim
DESCRIPTION: Examples of setting environment variables within Vim to control test execution behavior, including test filtering, skipping tests, and handling failing tests.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/README.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:let $TEST_MAY_FAIL = 'Test_channel_one'
:let $TEST_FILTER = '_set_mode'
:let $TEST_SKIP_PAT = 'Test_loop_forever'
:let $TEST_NO_RETRY = 'yes'
:let $TEST_FILTER = ''
```

----------------------------------------

TITLE: Adding Basic Digraphs in Vim
DESCRIPTION: Example showing how to add digraphs for special characters using decimal representation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/digraph.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:digr e: 235 a: 228
```

----------------------------------------

TITLE: Help Command with Pipe Operator
DESCRIPTION: Examples showing how to combine help command with other commands using the pipe operator
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_3

LANGUAGE: vimscript
CODE:
```
:help |
:help k| only
:help so<C-V><CR>only
```

----------------------------------------

TITLE: SSH Key Generation and Setup for Passwordless Authentication
DESCRIPTION: Commands for setting up SSH passwordless authentication through public/private key pairs. This sequence generates keys, creates necessary directories, and configures authorized keys to enable password-free access for SSH and SCP operations used by Netrw.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_29

LANGUAGE: bash
CODE:
```
ssh-keygen -t rsa
```

LANGUAGE: bash
CODE:
```
cd
mkdir -p .ssh
chmod 0700 .ssh
```

LANGUAGE: bash
CODE:
```
ssh {serverhostname} cat '>>' '~/.ssh/authorized_keys2' < ~/.ssh/id_rsa.pub
```

LANGUAGE: bash
CODE:
```
ssh {serverhostname} cat '>>' '~/.ssh/authorized_keys' < ~/.ssh/id_rsa.pub
```

LANGUAGE: bash
CODE:
```
ssh {serverhostname}
```

LANGUAGE: bash
CODE:
```
ssh-agent $SHELL
ssh-add
ssh {serverhostname}
```

LANGUAGE: bash
CODE:
```
ssh-agent vim
```

LANGUAGE: bash
CODE:
```
:!ssh-add
```

LANGUAGE: bash
CODE:
```
ssh-agent xterm &
```

----------------------------------------

TITLE: Compound Word Flag Definition
DESCRIPTION: Shows how to define compound word flags using COMPOUNDFLAG and COMPOUNDRULE directives
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_16

LANGUAGE: spelling-definition
CODE:
```
COMPOUNDFLAG c ~

COMPOUNDRULE c+ ~
COMPOUNDRULE se ~
```

----------------------------------------

TITLE: Configuring Mouse Scroll Settings in Neovim
DESCRIPTION: Example of setting the mousescroll option in Neovim to control vertical and horizontal scrolling behavior. This configures Neovim to scroll 5 lines vertically and 2 columns horizontally when using the mouse wheel.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_55

LANGUAGE: vim
CODE:
```
set mousescroll=ver:5,hor:2
```

----------------------------------------

TITLE: Digraph Set Example in Vim
DESCRIPTION: Example of setting a custom digraph with whitespace.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_54

LANGUAGE: vim
CODE:
```
call digraph_set('  ', 'あ')
```

----------------------------------------

TITLE: Creating Shallow Copies of Lists in Vim
DESCRIPTION: Demonstrates how copy() creates a shallow copy of a list, where nested elements are still references to the original elements.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
:let aa = [[1, 'a'], 2, 3]
:let bb = copy(aa)
:call add(aa, 4)
:let aa[0][1] = 'aaa'
:echo aa
```

----------------------------------------

TITLE: Recognizing Vendor Intrinsics in Fortran with Vim
DESCRIPTION: Enables syntax recognition of common, non-standard, vendor-supplied intrinsics in Fortran files by setting 'fortran_vendor_intrinsics' to 1. This helps in highlighting additional functions provided by various Fortran compilers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_38

LANGUAGE: VimScript
CODE:
```
:let fortran_vendor_intrinsics=1
```

----------------------------------------

TITLE: Increasing TCSH Syntax Synchronization Lines
DESCRIPTION: Setting the minimum number of lines for TCSH syntax synchronization to improve highlighting accuracy during backward scrolling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_129

LANGUAGE: vim
CODE:
```
let tcsh_minlines = 1000
```

----------------------------------------

TITLE: Enabling BASH Extensions for Readline Syntax Highlighting
DESCRIPTION: Adds highlighting for BASH-specific commands and options in Readline files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_105

LANGUAGE: vim
CODE:
```
let readline_has_bash = 1
```

----------------------------------------

TITLE: Searching Git History for Code Changes
DESCRIPTION: Example of using git log to search for specific code changes in the repository history
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_2

LANGUAGE: bash
CODE:
```
git log -p -G reset_option_was_set
```

----------------------------------------

TITLE: Getting libuv Version Integer in Lua
DESCRIPTION: This function returns the libuv version packed into a single integer. It is useful for programmatic version comparisons.  8 bits are used for each component, with the patch number stored in the 8 least significant bits (e.g., 0x010203 for libuv 1.2.3).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_1

LANGUAGE: lua
CODE:
```
"uv.version()                                                      *uv.version()*\n\n                Returns the libuv version packed into a single integer. 8 bits\n                are used for each component, with the patch number stored in\n                the 8 least significant bits. For example, this would be\n                0x010203 in libuv 1.2.3.\n\n                Returns: `integer`"
```

----------------------------------------

TITLE: Removing Specific Popup Menu Items in Neovim
DESCRIPTION: Remove specific items from the default popup menu in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_9

LANGUAGE: viml
CODE:
```
aunmenu PopUp.How-to\ disable\ mouse
aunmenu PopUp.-2-
```

----------------------------------------

TITLE: Configuring Perl Syntax Options
DESCRIPTION: Sets various Perl syntax highlighting options including POD inclusion and variable parsing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_97

LANGUAGE: vim
CODE:
```
:let perl_include_pod = 0
```

LANGUAGE: vim
CODE:
```
:let perl_no_scope_in_variables = 1
```

LANGUAGE: vim
CODE:
```
:let perl_no_extended_vars = 1
```

----------------------------------------

TITLE: Setting SQL Filetype in Vim
DESCRIPTION: The line sets the filetype to SQL in Vim, triggering the SQL-specific plugin located at ftplugin/sql.vim. This setup configures buffer-specific maps for SQL syntax completion and determines how to toggle between different completion functionalities like omni-completion.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_9

LANGUAGE: vimscript
CODE:
```
:set filetype=sql
```

----------------------------------------

TITLE: System Processor Architecture Detection for ARM64
DESCRIPTION: Normalizes the system processor identifier to 'arm64' when running on aarch64 architecture.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.packaging/CMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: cmake
CODE:
```
if(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
  set(CMAKE_SYSTEM_PROCESSOR arm64)
endif()
```

----------------------------------------

TITLE: Finding the previous start of a method in C++/Java (Vim)
DESCRIPTION: This snippet shows how to find the previous start of a method when inside a class in C++ or Java using the `[m` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
"[m"
```

----------------------------------------

TITLE: Creating a Custom Post-Compiler Action Executor for SpotBugs
DESCRIPTION: Defines a function that decides whether to execute post-compiler actions based on the current compiler status.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_49

LANGUAGE: vim
CODE:
```
function! GenericPostCompilerActionExecutor(action) abort
	try
		cc
	catch /\<E42:/
		execute a:action
	endtry
endfunction
```

----------------------------------------

TITLE: Setting Arabic Keymap in Neovim
DESCRIPTION: Activates the Arabic keymap, remapping the keyboard to a standard Arabic layout. This can be toggled with CTRL-^ in insert mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_4

LANGUAGE: VimScript
CODE:
```
:set keymap=arabic
```

----------------------------------------

TITLE: Implementing Mouse Drawing for XPM Files in Vim
DESCRIPTION: Defines functions and mappings to enable drawing with the mouse in XPM files using Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_154

LANGUAGE: vim
CODE:
```
:function! GetPixel()
:   let c = getline(".")[col(".") - 1]
:   echo c
:   exe "noremap <LeftMouse> <LeftMouse>r" .. c
:   exe "noremap <LeftDrag>	<LeftMouse>r" .. c
:endfunction
:noremap <RightMouse> <LeftMouse>:call GetPixel()<CR>
:set guicursor=n:hor20	   " to see the color beneath the cursor
```

----------------------------------------

TITLE: Optimized Lookbehind Pattern for Syntax Highlighting
DESCRIPTION: Examples of optimizing syntax patterns with lookbehind assertions by adding a maximum size. This improves performance by limiting the search area.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_210

LANGUAGE: vim
CODE:
```
"<\@<=span"	"Matches "span" in "<span".  This tries matching with "<" in
		many places.
"<\@1<=span"	"Matches the same, but only tries one byte before "span".
```

----------------------------------------

TITLE: Controlling LaTeX Delimiter Matching with VimL
DESCRIPTION: Setting to determine which delimiters are checked for proper matching in LaTeX documents. Can be adjusted to avoid false positives in specific contexts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_146

LANGUAGE: viml
CODE:
```
let g:tex_matchcheck= '[{}]'
```

----------------------------------------

TITLE: Aligned Comments in C
DESCRIPTION: Example showing how to align multiple line comments for better readability.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_11

LANGUAGE: c
CODE:
```
do_something();                      // Comment here so the comments line up.
do_something_else_that_is_longer();  // Comment here so there are two spaces between
                                     // the code and the comment.
{ // One space before comment when opening a new scope is allowed,
  // thus the comment lines up with the following comments and code.
  do_something_else();  // Two spaces before line comments normally.
}
```

----------------------------------------

TITLE: Using Subdirectories with Autoload in Vim
DESCRIPTION: This example demonstrates how to use subdirectories with the autoload mechanism for organizing complex library scripts in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_57

LANGUAGE: vim
CODE:
```
call netlib#ftp#read('somefile')
```

----------------------------------------

TITLE: Basic FTP URL Example in Vim
DESCRIPTION: Example showing basic FTP URL usage in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
vim ftp://hostname/path/to/file
```

----------------------------------------

TITLE: Setting Up Platform-specific Lua Language Server Configuration in CMake
DESCRIPTION: Determines the appropriate architecture (arm64 or x64) based on the system processor for downloading the Lua Language Server.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_31

LANGUAGE: cmake
CODE:
```
if (CMAKE_SYSTEM_PROCESSOR MATCHES arm64)
  set(LUALS_ARCH arm64)
else()
  set(LUALS_ARCH x64)
endif()
```

----------------------------------------

TITLE: Quitting Vim with Error Code
DESCRIPTION: Command for quitting Vim with a specified error code, useful when Vim is called from another program.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
:cq[uit][!]
:{N}cq[uit][!]
:cq[uit][!] {N}
```

----------------------------------------

TITLE: Configuring Maven Compiler Options
DESCRIPTION: Sets additional parameters for the Maven compiler by configuring the maven_makeprg_params variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_43

LANGUAGE: vim
CODE:
```
let g:maven_makeprg_params = "-DskipTests -U -X"
```

----------------------------------------

TITLE: Starting Vim in Binary Mode
DESCRIPTION: This command starts Vim in binary mode.  The '-b' argument sets the 'binary' option, which disables certain features that could interfere with editing binary files. This is important to prevent unintended modifications, such as automatic formatting, when working with binary data.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
	vim -b datafile
```

----------------------------------------

TITLE: Preventing Matcher Inclusion in Styled Regions with VimL
DESCRIPTION: Setting to prevent the texMatcher group from being included in bold and italicized regions. Helps avoid unwanted delimiter matching in these contexts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_147

LANGUAGE: viml
CODE:
```
let g:tex_excludematcher= 1
```

----------------------------------------

TITLE: Running Multiple Plugin Health Checks in Vim
DESCRIPTION: Example of running health checks for multiple plugins named 'foo' and 'bar'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:checkhealth foo bar
```

----------------------------------------

TITLE: Specific Error Pattern Catching
DESCRIPTION: Shows how to catch specific write errors using a pattern match, which is the recommended approach to avoid catching unrelated errors.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_137

LANGUAGE: vim
CODE:
```
:try
:  write
:catch /^Vim(write):/
:endtry
```

----------------------------------------

TITLE: Using pattern matching in contains argument for Vim syntax
DESCRIPTION: Example showing how to use patterns in the 'contains' argument to include multiple groups that match a pattern. This includes all groups starting with 'Comment' and keywords named 'Keyw0' through 'Keyw3'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_160

LANGUAGE: vim
CODE:
```
... contains=Comment.*,Keyw[0-3]
```

----------------------------------------

TITLE: Runtime Path Directory Creation
DESCRIPTION: Shell command to create Neovim user runtime directory for custom configurations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_5

LANGUAGE: shell
CODE:
```
mkdir -p ~/.config/nvim
```

----------------------------------------

TITLE: Setting TEX Flavor Configuration in Vim
DESCRIPTION: Configuration options to set the default TEX flavor (plain, context, or latex) for .tex files
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_38

LANGUAGE: vim
CODE:
```
let g:tex_flavor = "plain"
let g:tex_flavor = "context"
let g:tex_flavor = "latex"
```

----------------------------------------

TITLE: Checking PythonX functionality in Vim script
DESCRIPTION: Command to verify the PythonX integration is working by printing a hello message.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_11

LANGUAGE: viml
CODE:
```
:pyx print("Hello")
```

----------------------------------------

TITLE: Inspecting Global Variable in Debug Mode
DESCRIPTION: This command prints the value of the global variable 'idx' during a debugging session. The `g:` prefix specifies that the variable is in the global scope.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
"echo g:idx"
```

----------------------------------------

TITLE: Enabling Concealment for Module Path Separators
DESCRIPTION: Enables concealment for the path connecting token "::" in Rust code, which can make deeply nested module paths more readable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
let g:rust_conceal_mod_path = 1
```

----------------------------------------

TITLE: Busy State Indication in Neovim JSON
DESCRIPTION: This snippet indicates the busy state of the Neovim UI, providing event occurrences to manage rendering, even though the naming may be misleading regarding actual usage.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_3

LANGUAGE: json
CODE:
```
["busy_start"] ~
["busy_stop"] ~
	Indicates to the UI that it must stop rendering the cursor. This event
is misnamed and does not actually have anything to do with busyness.
```

----------------------------------------

TITLE: Navigating to Location List Error in Next File
DESCRIPTION: Command for displaying the first error in the next file in the location list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
:[count]lnf[ile][!]
```

----------------------------------------

TITLE: File System Sync Operation in libuv
DESCRIPTION: Synchronizes a file's contents to disk. Equivalent to fsync(2) system call. Takes a file descriptor and optional callback for async operations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_52

LANGUAGE: lua
CODE:
```
uv.fs_fsync({fd} [, {callback}])
```

----------------------------------------

TITLE: Configuring Lua Bytecode Compilation
DESCRIPTION: Sets up options for pre-compiling Lua sources into bytecode to be included in the binary, with support for both standard Lua and LuaJIT compilers.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_14

LANGUAGE: CMake
CODE:
```
option(COMPILE_LUA "Pre-compile Lua sources into bytecode (for sources that are included in the binary)" ON)
if(COMPILE_LUA AND NOT WIN32)
  if(PREFER_LUA)
    foreach(CURRENT_LUAC_PRG luac5.1 luac)
      find_program(_CHECK_LUAC_PRG ${CURRENT_LUAC_PRG})
      if(_CHECK_LUAC_PRG)
        set(LUAC_PRG "${_CHECK_LUAC_PRG} -s -o - %s" CACHE STRING "Format for compiling to Lua bytecode")
        break()
      endif()
    endforeach()
  elseif(LUA_PRG MATCHES "luajit")
    check_lua_module(${LUA_PRG} "jit.bcsave" LUAJIT_HAS_JIT_BCSAVE)
    if(LUAJIT_HAS_JIT_BCSAVE)
      set(LUAC_PRG "${LUA_PRG} -b -s %s -" CACHE STRING "Format for compiling to Lua bytecode")
    endif()
  endif()
endif()
mark_as_advanced(LUAC_PRG)
if(LUAC_PRG)
  message(STATUS "Using Lua compiler: ${LUAC_PRG}")
endif()
```

----------------------------------------

TITLE: Moving windows to the right
DESCRIPTION: Moves the current window to the far right.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
	CTRL-W L
```

----------------------------------------

TITLE: Disabling Arabic Support in Neovim
DESCRIPTION: Disables Arabic support, resetting keymap and turning off right-to-left mode without affecting global settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_3

LANGUAGE: VimScript
CODE:
```
:set noarabic
```

----------------------------------------

TITLE: Customizing Time Format in Netrw File Listings
DESCRIPTION: Setting custom time format for file listings in netrw by modifying the g:netrw_timefmt variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_46

LANGUAGE: vim
CODE:
```
let g:netrw_timefmt= "%X"  (where X is the option)
```

----------------------------------------

TITLE: Setting helplang in Vim
DESCRIPTION: Example of setting the 'helplang' option in Vim, which specifies the preferred languages for help files. This option allows users to prioritize help file languages, with English always used as a last resort.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_27

LANGUAGE: vim
CODE:
```
set helplang=de,it
```

----------------------------------------

TITLE: Filtering Directory Contents with readdir() in Vim
DESCRIPTION: Examples of using the readdir() function to list and filter directory contents, including filtering by file extension and excluding hidden and backup files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_201

LANGUAGE: vim
CODE:
```
echo readdir(dirname, {n -> n =~ '.txt$'})
```

LANGUAGE: vim
CODE:
```
echo readdir(dirname, {n -> n !~ '^\.|\~$'})
```

LANGUAGE: vim
CODE:
```
function! s:tree(dir)
    return {a:dir : map(readdir(a:dir),
    \ {_, x -> isdirectory(x) ?
    \          {x : s:tree(a:dir .. '/' .. x)} : x})}
endfunction
echo s:tree(".")
```

----------------------------------------

TITLE: Python Class Definition in Vim Heredoc
DESCRIPTION: Example showing how to define a Python class using Vim's heredoc syntax within a Vim function
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
function! IcecreamInitialize()
python << EOF
class StrawberryIcecream:
	def __call__(self):
		print('EAT ME')
EOF
endfunction
```

----------------------------------------

TITLE: Restoring default fold open options
DESCRIPTION: Resets the foldopen option to its default value, which only opens folds for specific commands like horizontal movements.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_9

LANGUAGE: vimdoc
CODE:
```
:set foldopen&
```

----------------------------------------

TITLE: Creating Vertical Split Window in Lua
DESCRIPTION: Creates a vertical split window to the left of the current window using the Neovim API.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_81

LANGUAGE: lua
CODE:
```
vim.api.nvim_open_win(0, false, {
  split = 'left',
  win = 0
})
```

----------------------------------------

TITLE: Enabling Horizontal Scrollbar in Vim GUI
DESCRIPTION: Command to enable the horizontal scrollbar at the bottom of the Vim window in GUI mode by modifying the guioptions setting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:set guioptions+=b
```

----------------------------------------

TITLE: Displaying Vim Window Position in GUI
DESCRIPTION: This command shows the current position of the Vim window on the screen in pixels. It only works in the GUI version of Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:winpos
```

----------------------------------------

TITLE: Allowing Wrong HTML Comments
DESCRIPTION: This snippet allows the use of incorrect HTML comment styles (starts with <!-- and ends with -->). Setting the 'html_wrong_comments' variable to 1 enables this feature.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_55

LANGUAGE: vim
CODE:
```
	:let html_wrong_comments=1
```

----------------------------------------

TITLE: Visual Mode Text Selection in Vim
DESCRIPTION: This example demonstrates how to use getregion() to retrieve the selected text in visual mode, including the selection type.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_107

LANGUAGE: vim
CODE:
```
xnoremap <CR>
\ <Cmd>echom getregion(
\ getpos('v'), getpos('.'), #{ type: mode() })<CR>
```

----------------------------------------

TITLE: Using pow() Function for Mathematical Calculations in Vim
DESCRIPTION: Examples of using pow() to calculate power operations in Vim. Demonstrates integer exponents, large results, and fractional exponents, all returning floating-point results.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_188

LANGUAGE: vim
CODE:
```
echo pow(3, 3)
```

LANGUAGE: vim
CODE:
```
echo pow(2, 16)
```

LANGUAGE: vim
CODE:
```
echo pow(32, 0.20)
```

----------------------------------------

TITLE: Painting Individual Background Papers
DESCRIPTION: This method paints individual background papers, including thumbnails and selection indicators. It handles different states such as current selection and delete hover states.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_4

LANGUAGE: C++
CODE:
```
void BackgroundBox::Inner::paintPaper(
		QPainter &p,
		const Paper &paper,
		int column,
		int row) const {
	const auto x = st::backgroundPadding + column * (st::backgroundSize.width() + st::backgroundPadding);
	const auto y = st::backgroundPadding + row * (st::backgroundSize.height() + st::backgroundPadding);
	validatePaperThumbnail(paper);
	if (!paper.thumbnail.isNull()) {
		p.drawPixmap(x, y, paper.thumbnail);
	}

	const auto over = !v::is_null(_overDown) ? _overDown : _over;
	if (paper.data.id() == _currentId) {
		const auto checkLeft = x + st::backgroundSize.width() - st::overviewCheckSkip - st::overviewCheck.size;
		const auto checkTop = y + st::backgroundSize.height() - st::overviewCheckSkip - st::overviewCheck.size;
		_check->paint(p, checkLeft, checkTop, width());
	} else if (Data::IsCloudWallPaper(paper.data)
		&& !Data::IsDefaultWallPaper(paper.data)
		&& !Data::IsLegacy2DefaultWallPaper(paper.data)
		&& !Data::IsLegacy3DefaultWallPaper(paper.data)
		&& !v::is_null(over)
		&& (&paper == &_papers[getSelectionIndex(over)])) {
		const auto deleteSelected = v::is<DeleteSelected>(over);
		const auto deletePos = QPoint(x + st::backgroundSize.width() - st::stickerPanDeleteIconBg.width(), y);
		p.setOpacity(deleteSelected ? st::stickerPanDeleteOpacityBgOver : st::stickerPanDeleteOpacityBg);
		st::stickerPanDeleteIconBg.paint(p, deletePos, width());
		p.setOpacity(deleteSelected ? st::stickerPanDeleteOpacityFgOver : st::stickerPanDeleteOpacityFg);
		st::stickerPanDeleteIconFg.paint(p, deletePos, width());
		p.setOpacity(1.);
	}
}
```

----------------------------------------

TITLE: Checking for NaN Values in Vim
DESCRIPTION: Demonstrates how to use the isnan() function to determine if a floating-point value is Not-a-Number (NaN). The function returns 1 for NaN values and 0 otherwise.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_144

LANGUAGE: vim
CODE:
```
echo isnan(0.0 / 0.0)
"1
```

----------------------------------------

TITLE: Building Help Documentation
DESCRIPTION: Generates help tags for main Neovim documentation and creates runtime target depending on generated files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/CMakeLists.txt#2025-04-20_snippet_3

LANGUAGE: cmake
CODE:
```
add_custom_command(OUTPUT ${GENERATED_HELP_TAGS}
  COMMAND ${CMAKE_COMMAND} -E remove_directory doc
  COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${PROJECT_SOURCE_DIR}/runtime/doc doc
  COMMAND $<TARGET_FILE:nvim_bin>
    -u NONE -i NONE -e --headless -c "helptags ++t doc" -c quit
  DEPENDS
    nvim_bin
    nvim_runtime_deps
  WORKING_DIRECTORY "${GENERATED_RUNTIME_DIR}"
)

add_custom_target(
  nvim_runtime
  DEPENDS
    ${GENERATED_SYN_VIM}
    ${GENERATED_HELP_TAGS}
    ${GENERATED_PACKAGE_TAGS}
)
```

----------------------------------------

TITLE: Mapping ScrollWheel Actions in VimScript
DESCRIPTION: This snippet shows how to map mouse scroll actions to keyboard commands in Neovim. The ':map' command reassigns the "<ScrollWheelUp>" action to scroll a page up, and "<ScrollWheelDown>" to scroll a page down using '<C-B>' and '<C-F>' respectively. These mappings help customize scrolling behavior in normal mode. There are no additional dependencies required.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_5

LANGUAGE: VimScript
CODE:
```
:map <ScrollWheelUp> <C-B>
:map <ScrollWheelDown> <C-F>
```

----------------------------------------

TITLE: Example of Conditionals Not Working in Execute
DESCRIPTION: Shows an invalid use of :execute with control structures, where Vim can't properly track blocks due to conditional evaluation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_116

LANGUAGE: vim
CODE:
```
:if 0
: execute 'while i > 5'
:  echo "test"
: endwhile
:endif
```

----------------------------------------

TITLE: Pausing Thread Execution in Lua with Libuv
DESCRIPTION: Pauses the execution of the current thread for a specified number of milliseconds.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_69

LANGUAGE: lua
CODE:
```
uv.sleep({msec})
```

----------------------------------------

TITLE: Setting Free Source Form for Fortran in Vim
DESCRIPTION: Configures Vim to always assume a free source form for new Fortran files by setting 'fortran_free_source' to 1, aligning with modern Fortran standards for syntax highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_35

LANGUAGE: VimScript
CODE:
```
:let fortran_free_source=1
```

----------------------------------------

TITLE: Complex Back Reference Pattern Configuration
DESCRIPTION: Examples of complex pattern matching using multiple back references.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:let b:match_words = '\(\(foo\)\(bar\)\):\3\2:end\1'
```

----------------------------------------

TITLE: Setting g:netrw_winsize Example Configuration
DESCRIPTION: Example configuration showing recommended netrw settings for preview window behavior, including vertical splitting, tree-style listing, and window size customization.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_40

LANGUAGE: viml
CODE:
```
let g:netrw_preview   = 1
let g:netrw_liststyle = 3
let g:netrw_winsize   = 30
```

----------------------------------------

TITLE: Configuring Dependencies Paths and Auto-Building
DESCRIPTION: Sets up paths for finding dependencies, with logic to automatically build bundled dependencies when running from certain IDEs like CLion or Visual Studio.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_6

LANGUAGE: CMake
CODE:
```
# Prefer our bundled versions of dependencies.
if(DEFINED ENV{DEPS_BUILD_DIR})
  set(DEPS_PREFIX "$ENV{DEPS_BUILD_DIR}/usr" CACHE PATH "Path prefix for finding dependencies")
else()
  set(DEPS_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/.deps/usr" CACHE PATH "Path prefix for finding dependencies")
  # When running from within CLion or Visual Studio,
  # build bundled dependencies automatically.
  if(NOT EXISTS ${DEPS_PREFIX}
     AND (DEFINED ENV{CLION_IDE}
          OR DEFINED ENV{VisualStudioEdition}))
    message(STATUS "Building dependencies...")
    set(DEPS_BUILD_DIR ${PROJECT_BINARY_DIR}/.deps)
    file(MAKE_DIRECTORY ${DEPS_BUILD_DIR})
    execute_process(
      COMMAND ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}
        -D CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -D CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -D CMAKE_C_COMPILER=${CMAKE_C_COMPILER}
        -D CMAKE_C_FLAGS=${CMAKE_C_FLAGS}
        -D CMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG}
        -D CMAKE_C_FLAGS_MINSIZEREL=${CMAKE_C_FLAGS_MINSIZEREL}
        -D CMAKE_C_FLAGS_RELWITHDEBINFO=${CMAKE_C_FLAGS_RELWITHDEBINFO}
        -D CMAKE_C_FLAGS_RELEASE=${CMAKE_C_FLAGS_RELEASE}
        -D CMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}
        ${PROJECT_SOURCE_DIR}/cmake.deps
      WORKING_DIRECTORY ${DEPS_BUILD_DIR})
    execute_process(
      COMMAND ${CMAKE_COMMAND} --build ${DEPS_BUILD_DIR}
        --config ${CMAKE_BUILD_TYPE})
    set(DEPS_PREFIX ${DEPS_BUILD_DIR}/usr)
  endif()
endif()

list(INSERT CMAKE_PREFIX_PATH 0 ${DEPS_PREFIX})
```

----------------------------------------

TITLE: Disabling Modelines in YAML Files
DESCRIPTION: Example of using a modeline at the start of a YAML file to disable modeline detection, which is useful when the file contains text that might be misinterpreted as a modeline.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
# vim: nomodeline
```

----------------------------------------

TITLE: Creating Plugin Header in VimScript
DESCRIPTION: This code snippet demonstrates how to create a header for a Vim plugin. It includes information about the plugin's purpose, last change date, maintainer, and licensing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_29

LANGUAGE: VimScript
CODE:
```
" Vim global plugin for correcting typing mistakes
" Last Change:	2000 Oct 15
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" License:	This file is placed in the public domain.
```

----------------------------------------

TITLE: Retrieving Event Loop Idle Time with uv.metrics_idle_time()
DESCRIPTION: Returns the accumulated time the event loop has been idle in the kernel's event provider. The loop must be configured to collect idle time metrics first.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_104

LANGUAGE: lua
CODE:
```
uv.metrics_idle_time()
```

----------------------------------------

TITLE: Popping Context from Stack - Lua
DESCRIPTION: The ctxpop function restores the context at the top of the context stack, effectively popping the latest state that was saved. This is important for reverting state in the editor when navigating back.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_39

LANGUAGE: lua
CODE:
```
ctxpop()                                                              *ctxpop()*
		Pops and restores the |context| at the top of the
		|context-stack|.

		Return: ~
		  (`any`)
```

----------------------------------------

TITLE: Setting Default Shell Type to Bourne Shell
DESCRIPTION: Configuring Vim to use Bourne shell syntax highlighting as the default for shell scripts when the shell type cannot be determined automatically.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_118

LANGUAGE: vim
CODE:
```
let g:is_sh        = 1
```

----------------------------------------

TITLE: Cleaning Spell Files with VimScript
DESCRIPTION: Script command for cleaning up comment lines in .add spell files. Only preserves comments starting with ##.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_7

LANGUAGE: viml
CODE:
```
:runtime spell/cleanadd.vim
```

----------------------------------------

TITLE: Disabling Hare Space Error Highlighting
DESCRIPTION: Configuration to disable highlighting of trailing whitespace and tabs preceded by spaces.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_hare.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
let g:hare_space_error = 0
```

----------------------------------------

TITLE: Enabling @ in Command Names for LaTeX Documents with VimL
DESCRIPTION: Buffer-local setting to allow the use of @ in LaTeX command names outside of .sty files. Useful when using \makeatletter in regular .tex files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_142

LANGUAGE: viml
CODE:
```
:let b:tex_stylish = 1
:set ft=tex
```

----------------------------------------

TITLE: Configuring Input Handling with Unsilent Commands in Vim
DESCRIPTION: Examples showing how to use the unsilent command to work around Neovim's default shortmess+=F setting for inputlist and echomsg functionality.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
unsilent let var = inputlist(['1. item1', '2. item2'])
autocmd BufNewFile * unsilent echomsg 'The autocmd has been fired.'
```

----------------------------------------

TITLE: Setting DocBook Type and Version for Syntax Highlighting
DESCRIPTION: Configures the DocBook type (XML or SGML) and version for proper syntax highlighting in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_25

LANGUAGE: VimScript
CODE:
```
let docbk_type = "xml"
let docbk_ver = 3
:set filetype=docbkxml
```

----------------------------------------

TITLE: Setting Long Listing Style as Default for Netrw
DESCRIPTION: Configuration to set the long listing style (detailed view) as the default display mode for netrw file browsing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_45

LANGUAGE: vim
CODE:
```
let g:netrw_liststyle= 1
```

----------------------------------------

TITLE: Starting Linewise Visual Mode in Neovim
DESCRIPTION: This command starts Visual mode linewise, selecting entire lines. The optional [count] argument can be used to select a specific number of lines or extend a previous linewise selection.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
"[count]V"
```

----------------------------------------

TITLE: Creating Ada Tags with ada#Create_Tags Function
DESCRIPTION: Function to create tag files for Ada code using Ctags. Takes an option parameter that can be 'file' for the current file, 'dir' for the directory of the current file, or a specific filename.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
ada#Create_Tags({option})
```

----------------------------------------

TITLE: Checking for all include files (Vim)
DESCRIPTION: This snippet demonstrates how to get a verbose list of included files using `:checkpath!`.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_29

LANGUAGE: vim
CODE:
```
":checkpath!"
```

----------------------------------------

TITLE: Generic Syntax Group Exclude Variable Pattern
DESCRIPTION: Template for the variable used to exclude specific syntax groups from Omni completion for any filetype, using regex patterns or comma-separated syntax group names.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
let g:omni_syntax_group_exclude_{filetype} = 'regex,comma,separated'
```

----------------------------------------

TITLE: Setting Lua Version Configuration
DESCRIPTION: Code snippet showing how to set the Lua version for syntax highlighting and include expressions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
let g:lua_version = 5
let g:lua_subversion = 1
```

----------------------------------------

TITLE: Checking Python functionality in Vim script
DESCRIPTION: Simple command to verify Python integration is working by printing a hello message.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_7

LANGUAGE: viml
CODE:
```
:py3 print("Hello")
```

----------------------------------------

TITLE: No Swapfile Command Modifier
DESCRIPTION: Command modifier to execute a command without creating a swap file for new buffers
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/recover.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:nos[wapfile] {command}
```

----------------------------------------

TITLE: Navigating to Next Location List Error
DESCRIPTION: Command for displaying the next error in the location list, similar to the :cnext command for the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:[count]lne[xt][!]
```

----------------------------------------

TITLE: Setting XFree86 Version for XF86Config Syntax Highlighting
DESCRIPTION: Configures the XFree86 version for proper syntax highlighting of XF86Config files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_152

LANGUAGE: vim
CODE:
```
:let xf86conf_xfree86_version=3
```

----------------------------------------

TITLE: List Keymap Mappings in Vim
DESCRIPTION: Command to display all current keymap mappings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:lmap
```

----------------------------------------

TITLE: Connecting to a Pipe
DESCRIPTION: Establishes a connection to a named pipe, allowing for data transfer. A callback may be provided to manage the connection's success or failure.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_33

LANGUAGE: lua
CODE:
```
uv.pipe_connect({pipe}, {name} [, {callback}])
```

----------------------------------------

TITLE: Checking for be64toh macros in C
DESCRIPTION: Tests if the system provides be64toh macros for byte order conversion by attempting to compile a program that uses be64toh on a 64-bit integer. The test includes various endian header files based on platform availability.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_6

LANGUAGE: C
CODE:
```
  #define _BSD_SOURCE 1
  #define _DEFAULT_SOURCE 1
  #include <stdint.h>

  #include <${ENDIAN_INCLUDE_FILE}>
  #ifndef be64toh
  # error No be64toh macros
  #endif
  int main(int argc,char**argv)
{
  uint64_t i=0x0102030405060708ULL;
    uint64_t j = be64toh(i);
    return (j == 0);  // j must not be zero
  }
```

----------------------------------------

TITLE: Checking Existence of Type Variables in Vim
DESCRIPTION: Example of checking if the v:t_ type variables exist in Vim. This can be useful for compatibility checks in scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_280

LANGUAGE: vim
CODE:
```
if exists('v:t_number') | endif
```

----------------------------------------

TITLE: Creating Range Parameters in Neovim LSP (Lua)
DESCRIPTION: Creates an object similar to make_range_params using a given range in the current buffer. Takes start position, end position, buffer number, and position encoding as parameters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_56

LANGUAGE: lua
CODE:
```
make_given_range_params({start_pos}, {end_pos}, {bufnr}, {position_encoding})
```

----------------------------------------

TITLE: Directory Change Example in Vim
DESCRIPTION: Shows how to safely change directory using chdir() with proper directory restoration.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_33

LANGUAGE: vim
CODE:
```
let save_dir = chdir(newdir)
if save_dir != ""
   " ... do some work
   call chdir(save_dir)
endif
```

----------------------------------------

TITLE: Setting UTF-8 Encoding for Arabic Support
DESCRIPTION: Sets the character encoding to UTF-8, which is required for proper Arabic text handling in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_1

LANGUAGE: VimScript
CODE:
```
:set encoding=utf-8
```

----------------------------------------

TITLE: Configuring NROFF Space Error Detection
DESCRIPTION: Enables highlighting of trailing spaces and multiple spaces after punctuation as errors in NROFF files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_91

LANGUAGE: vim
CODE:
```
:let nroff_space_errors = 1
```

----------------------------------------

TITLE: List Management (C)
DESCRIPTION: This snippet illustrates changes in list management between Vim and Neovim. It describes how to access list elements, iterate through lists, and manipulate list metadata using the new tv_list_* functions.  The use of TV_LIST_ITER and TV_LIST_ITER_CONST are emphasized for safer iteration.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_6

LANGUAGE: C
CODE:
```
"  Old                             New                                  Comment
  ------------------------------- ------------------------------------------------------
  list->lv_first                  tv_list_first(list)
  list->lv_last                   tv_list_last(list)
  li->li_next                     TV_LIST_ITEM_NEXT(list, li)          To be avoided if possible, must use list which li belongs to.
  li->li_prev                     TV_LIST_ITEM_PREV(list, li)          To be avoided if possible, must use list which li belongs to.
                                  Suggestion by @ZyX-l:                Use TV_LIST_ITER or indexing instead of the previous two calls.
  list->lv_len                    tv_list_len(list)
  list->lv_lock                   tv_list_locked(list)
  &li->li_tv                      TV_LIST_ITEM_TV(li)
  list->lv_refcount++             tv_list_ref(list)
  val = list->lv_copyID           val = tv_list_copyid(list)
  list->lv_copyID = val           tv_list_set_copyid(list, val)

  for (li = list->lv_first;       TV_LIST_ITER_CONST(list, li,         Use TV_LIST_ITER(...) if you need to
  li != NULL && another_cond;     { if (another_cond) {break;} code})  modify list items (note: assigning copyID is also modification and this happens
  li = li->li_next) code                                               always when recursively traversing a list)."
```

----------------------------------------

TITLE: Legacy COBOL Code Highlighting in VimL
DESCRIPTION: Enables or disables specialized syntax highlighting for legacy COBOL code, based on specific usage scenarios in existing code bases.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_16

LANGUAGE: VimL
CODE:
```
:let cobol_legacy_code = 1
```

LANGUAGE: VimL
CODE:
```
:unlet cobol_legacy_code
```

----------------------------------------

TITLE: Modeline Configuration in Vim
DESCRIPTION: Syntax for setting automatic options when editing a file using modelines, which are special comments in the first and last lines of a file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
vim:{set-arg}: ..    # In the first and last lines of the file (see 'ml' option), {set-arg} is given as an argument to ":set"
```

----------------------------------------

TITLE: Transparent Nested Regions in Vim
DESCRIPTION: Demonstrates using transparent regions for nested structures that inherit highlighting from their container.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
:syntax region cWhile matchgroup=cWhile start=/while\s*(/ end=/)/
	\ contains=cCondNest
:syntax region cFor matchgroup=cFor start=/for\s*(/ end=/)/
	\ contains=cCondNest
:syntax region cCondNest start=/(/ end=/)/ contained transparent
```

----------------------------------------

TITLE: Styling Table Cell with Borders and Colored Text in HTML
DESCRIPTION: This HTML snippet defines a table cell with specific border styling and red-colored text content. It uses inline CSS for styling and nested font tags for text formatting.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_5

LANGUAGE: HTML
CODE:
```
<td style="border-bottom windowtext 0.5pt solid; border-left windowtext;" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>
```

----------------------------------------

TITLE: Setting Up Test Environment Variables in CMake
DESCRIPTION: Configures test environment options including build directories, program paths, and working directories for test execution. These variables are used across different test targets.
SOURCE: https://github.com/neovim/neovim/blob/master/test/CMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: cmake
CODE:
```
set(TEST_OPTIONS
      -D BUILD_DIR=${CMAKE_BINARY_DIR}
      -D CIRRUS_CI=$ENV{CIRRUS_CI}
      -D CI_BUILD=${CI_BUILD}
      -D DEPS_INSTALL_DIR=${DEPS_INSTALL_DIR}
      -D NVIM_PRG=$<TARGET_FILE:nvim_bin>
      -D TEST_DIR=${CMAKE_CURRENT_SOURCE_DIR}
      -D WORKING_DIR=${PROJECT_SOURCE_DIR})
```

----------------------------------------

TITLE: Adding Word as Wrong in Vim Spell Checker
DESCRIPTION: Normal mode command to mark the word under the cursor as a wrong (bad) word in the first entry of 'spellfile'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_2

LANGUAGE: vimdoc
CODE:
```
zw
```

----------------------------------------

TITLE: Backward Searching with Offsets in Vim
DESCRIPTION: Example of backward searching with character offsets in Vim. The syntax uses question marks instead of forward slashes but offset behavior remains the same.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
?const?e-2
```

----------------------------------------

TITLE: Using serverlist() in Neovim (Vimscript)
DESCRIPTION: This example shows how to use the serverlist() function to get a list of server addresses and echo the result.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_224

LANGUAGE: vim
CODE:
```
echo serverlist()
```

----------------------------------------

TITLE: Setting Maple Syntax Highlighting Options in Vim
DESCRIPTION: Configures package function highlighting for Maple V syntax, allowing users to select specific packages or enable all package functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_81

LANGUAGE: VimScript
CODE:
```
:let mvpkg_all= 1
```

----------------------------------------

TITLE: Enabling Release Information in Changelog Entries
DESCRIPTION: Setting to automatically insert release information (package name, version, and release) in each changelog entry by enabling the spec_chglog_release_info variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
let spec_chglog_release_info = 1
```

----------------------------------------

TITLE: Nvim Script Mode Examples
DESCRIPTION: Examples of using Nvim in script/silent mode for automated text processing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_4

LANGUAGE: shell
CODE:
```
printf "put ='foo'\n%%print\n" | nvim -es
printf "foo\n" | nvim -Es +"%print"
```

----------------------------------------

TITLE: NixOS/Nix Development Shell with Development Package
DESCRIPTION: Enters a nix-shell with the neovim-dev package for development.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_29

LANGUAGE: Shell
CODE:
```
"nix-shell '<nixpkgs>' -A neovim-dev"
```

----------------------------------------

TITLE: Modifying a Blob - Vim Script
DESCRIPTION: This snippet shows how to modify specific bytes in a Blob and also how to change sequences of bytes using slicing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_65

LANGUAGE: vim
CODE:
```
:let blob[4] = 0x44
:let blob[1:3] = 0z445566
```

----------------------------------------

TITLE: Setting Vim Configuration for Netrw
DESCRIPTION: Basic Vim configuration needed to enable netrw functionality, including setting nocompatible mode and enabling filetype plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
set nocp
if version >= 600
  filetype plugin indent on
endif
```

----------------------------------------

TITLE: List Item Access in Vim Script
DESCRIPTION: Demonstrates accessing the last item of a list using negative indexing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_74

LANGUAGE: vim
CODE:
```
:let item = mylist[-1]
```

----------------------------------------

TITLE: Finding the next start of a method in C++/Java (Vim)
DESCRIPTION: This snippet shows how to find the next start of a method when inside a class in C++ or Java using the `]m` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
"]m"
```

----------------------------------------

TITLE: Viewing Vim Runtime Spell Files
DESCRIPTION: Command to view spell configuration files in Vim's runtime directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_9

LANGUAGE: viml
CODE:
```
:next $VIMRUNTIME/spell/*.vim
```

----------------------------------------

TITLE: Sending data over UDP socket in Lua
DESCRIPTION: Sends data over the UDP socket. If the socket is not previously bound, it will be bound to 0.0.0.0 and a random port.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_42

LANGUAGE: lua
CODE:
```
uv.udp_send({udp}, {data}, {host}, {port}, {callback})
```

----------------------------------------

TITLE: Configuring Lex Syntax Highlighting in Vim
DESCRIPTION: Sets the number of lines for syntax synchronization in Lex files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_74

LANGUAGE: VimScript
CODE:
```
:syn sync minlines=300
```

----------------------------------------

TITLE: Blob Identity and Equality - Vim Script
DESCRIPTION: This code snippet illustrates how to compare Blobs for equality and identity, as well as the implications of variable references in Blob usage.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_66

LANGUAGE: vim
CODE:
```
:if blob == 0z001122
:if blob is otherblob
```

----------------------------------------

TITLE: Setting Zip Plugin Default Options
DESCRIPTION: Shows the default values for various zip plugin configuration options including the unzip command, zip command, and extract command. These options control the external programs used by the plugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_zip.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
let g:zip_unzipcmd= "unzip"
```

LANGUAGE: vim
CODE:
```
let g:zip_zipcmd= "zip"
```

LANGUAGE: vim
CODE:
```
let g:zip_extractcmd= g:zip_unzipcmd
```

----------------------------------------

TITLE: Cmdline Show Event Implementation
DESCRIPTION: Handles displaying and updating the command-line interface with complex content, cursor positioning, and highlighting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
["cmdline_show", content, pos, firstc, prompt, indent, level, hl_id]
```

----------------------------------------

TITLE: RPC Request Example
DESCRIPTION: Example of making a synchronous RPC request and waiting for response
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_211

LANGUAGE: vim
CODE:
```
let result = rpcrequest(rpc_chan, "func", 1, 2, 3)
```

----------------------------------------

TITLE: Setting Process Title in Lua with Libuv
DESCRIPTION: Sets the title of the current process to the specified string.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_74

LANGUAGE: lua
CODE:
```
uv.set_process_title({title})
```

----------------------------------------

TITLE: 64-bit Integer Constants in C
DESCRIPTION: Example showing proper use of LL and ULL suffixes for creating 64-bit constants
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_4

LANGUAGE: c
CODE:
```
int64_t my_value = 0x123456789LL;
uint64_t my_mask = 3ULL << 48;
```

----------------------------------------

TITLE: Translation Enable Check and Dependencies
DESCRIPTION: Initial configuration to enable translations and verify required dependencies like Gettext, xgettext, and iconv are present
SOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/po/CMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: cmake
CODE:
```
option(ENABLE_TRANSLATIONS "Localizations to build" OFF)
if(NOT ENABLE_TRANSLATIONS)
  return()
endif()

find_package(Gettext REQUIRED)
find_program(XGETTEXT_PRG xgettext)
find_program(ICONV_PRG iconv)
mark_as_advanced(
  GETTEXT_MSGFMT_EXECUTABLE
  GETTEXT_MSGMERGE_EXECUTABLE
  ICONV_PRG
  XGETTEXT_PRG)
```

----------------------------------------

TITLE: Disabling Virtual Editing Mode
DESCRIPTION: Command to turn off virtual editing mode and return to standard cursor movement behavior where the cursor can only be placed on actual text characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
:set virtualedit=
```

----------------------------------------

TITLE: Using a Patch File in Diff Mode
DESCRIPTION: Demonstrates how to apply and view a patch file in diff mode. This command opens the file to be patched and shows the differences from the patch file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
:edit main.c
:vertical diffpatch main.c.diff
```

----------------------------------------

TITLE: Disabling Python Recommended Style in Neovim
DESCRIPTION: This command sets the `g:python_recommended_style` variable to `0`, disabling the default PEP8-compliant settings (expandtab, shiftwidth=4, softtabstop=4, tabstop=8) for Python files.  This allows users to configure their own preferred indentation and tab settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_29

LANGUAGE: vim
CODE:
```
	let g:python_recommended_style = 0
```

----------------------------------------

TITLE: Enabling Deletion of Combining Characters in UTF-8 Encoded Languages
DESCRIPTION: This setting allows the removal of composing characters in UTF-8 encoded languages. It's useful for languages that use combining characters extensively.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/rileft.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
'delcombine' ('deco'), boolean, if editing UTF-8 encoded languages,
     allows one to remove a composing character which gets superimposed
     on those that preceded them (some languages require this).
```

----------------------------------------

TITLE: Jumping to the end of the outer code block (Vim)
DESCRIPTION: This snippet shows how to find the end of the outer block using the `][' command, assuming that the `{` and `}` are in the first column.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
"][`"
```

----------------------------------------

TITLE: Defining a contained keyword with containedin for C comments
DESCRIPTION: Example of how to add a syntax item to be contained within an existing syntax group without modifying the original definition. This highlights the word 'HELP' within C comments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_161

LANGUAGE: vim
CODE:
```
:syn keyword myword HELP containedin=cComment contained
```

----------------------------------------

TITLE: Configuring OCaml Syntax Options
DESCRIPTION: Sets options for OCaml syntax highlighting including revised syntax and end error highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_93

LANGUAGE: vim
CODE:
```
:let ocaml_revised = 1
```

LANGUAGE: vim
CODE:
```
:let ocaml_noend_error = 1
```

----------------------------------------

TITLE: Redrawing Components in Neovim
DESCRIPTION: The 'nvim__redraw' function instructs Neovim to update various components. Parameters allow targeting specific windows, buffers, cursors, and more.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_34

LANGUAGE: Lua
CODE:
```
nvim__redraw\(\{opts\}\)
```

----------------------------------------

TITLE: Help Tag Language Example - Vim
DESCRIPTION: Examples showing how to access help documentation in specific languages using two-letter language codes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:he user-manual@it
:he user-manual@en
```

----------------------------------------

TITLE: Disabling Automatic Indentation for a Specific File Type
DESCRIPTION: A method to disable automatic indentation for a specific file type by creating a file with a special flag
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:let b:did_indent = 1
```

----------------------------------------

TITLE: Message Show Event Structure
DESCRIPTION: Manages displaying various types of messages with detailed attributes including kind, content, replacement behavior, and history tracking
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
["msg_show", kind, content, replace_last, history]
```

----------------------------------------

TITLE: Path Examples for SCP Protocol in Vim
DESCRIPTION: Examples showing how to use SCP protocol with relative and absolute paths in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
vim scp://user@host/somefile
vim scp://user@host/subdir1/subdir2/somefile
```

----------------------------------------

TITLE: Enabling Ruler in Vim
DESCRIPTION: Command to enable the ruler option which displays cursor position in the bottom right corner of Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:set ruler
```

----------------------------------------

TITLE: Getting Total System Memory in Lua with Libuv
DESCRIPTION: Returns the total amount of system memory in bytes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_75

LANGUAGE: lua
CODE:
```
uv.get_total_memory()
```

----------------------------------------

TITLE: Setting Vim Window Size in Characters
DESCRIPTION: These commands set the size of the Vim window to 50 lines and 80 columns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:set lines=50
:set columns=80
```

----------------------------------------

TITLE: Setting HTML/OS Syntax
DESCRIPTION: This snippet shows how to enable HTML/OS syntax highlighting for a file.  The syntax is set to `htmlos` using the `:set syntax=htmlos` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_58

LANGUAGE: vim
CODE:
```
  :set syntax=htmlos
```

----------------------------------------

TITLE: Neovim Help File Header
DESCRIPTION: Standard Vim help file header defining the document title and basic structure
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_theme.txt#2025-04-20_snippet_0

LANGUAGE: vimdoc
CODE:
```
*dev_theme.txt*          Nvim


                            NVIM REFERENCE MANUAL


Nvim colorscheme guidelines                                   *dev-theme*
```

----------------------------------------

TITLE: Netrw URL-based File Editing
DESCRIPTION: Example showing how to edit a remote file using FTP protocol with URL notation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:e ftp://[user@]machine/path
```

----------------------------------------

TITLE: macOS Homebrew Wget Certificate Fix
DESCRIPTION: Installs curl-ca-bundle and configures wget to use it to resolve certificate errors on older macOS versions.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_34

LANGUAGE: Shell
CODE:
```
"brew install curl-ca-bundle\necho CA_CERTIFICATE=$(brew --prefix curl-ca-bundle)/share/ca-bundle.crt >> ~/.wgetrc"
```

----------------------------------------

TITLE: Disabling undo for current buffer in Vim
DESCRIPTION: Code to disable undo functionality completely for the current buffer by setting undolevels to -1 locally, which helps when running out of memory for a single change.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_76

LANGUAGE: viml
CODE:
```
setlocal ul=-1
```

----------------------------------------

TITLE: Substitution within C++ Comments Using Vim Script
DESCRIPTION: Performs text substitution only within C++ style comments (lines starting with '//') using the ':global' command where the pattern includes slashes. Modifies text within specified patterns. Inputs include a search pattern and substitution text, outputs the file with applied changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_7

LANGUAGE: Vim Script
CODE:
```

  :g+//+s/foobar/barfoo/g
```

----------------------------------------

TITLE: Setting Hare Documentation Filetype Detection
DESCRIPTION: Configuration to enable automatic detection of Hare module README files as haredoc filetype.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_hare.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
let g:filetype_haredoc = 1
```

----------------------------------------

TITLE: Tag Navigation Commands (Vim)
DESCRIPTION: Commands for navigating and managing tags in Neovim, including jumping to tags and managing preview windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:tl[ast][!]     jump to last matching tag
:pt[ag] {tag}   open a preview window to show tag {tag}
CTRL-W }        like CTRL-] but show tag in preview window
:pts[elect]     like ":tselect" but show tag in preview window
:ptj[ump]       like ":tjump" but show tag in preview window
:pc[lose]       close tag preview window
CTRL-W z        close tag preview window
```

----------------------------------------

TITLE: Custom Netrw Syntax Highlighting Example in VimL
DESCRIPTION: Example showing how to link a Netrw file group to Vim's Visual highlight group in your .vimrc file. This demonstrates how to customize the appearance of compressed files in the Netrw browser.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_37

LANGUAGE: viml
CODE:
```
hi link netrwCompress Visual
```

----------------------------------------

TITLE: Configuring Make Syntax Highlighting Options in Vim
DESCRIPTION: Sets options for Make syntax highlighting, including disabling command highlighting, comment highlighting, and specifying the Make flavor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_80

LANGUAGE: VimScript
CODE:
```
:let make_no_commands = 1

:let make_no_comments = 1

:let g:make_flavor = 'bsd'  " or
:let g:make_flavor = 'gnu'  " or
:let g:make_flavor = 'microsoft'
```

----------------------------------------

TITLE: Finding a File in Vim's Path
DESCRIPTION: Demonstrates how to use the findfile() function to search for a file named 'tags.vim' in the current directory and upwards.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_70

LANGUAGE: vim
CODE:
```
echo findfile("tags.vim", ".;")
```

----------------------------------------

TITLE: Defining Vim Here-Document Syntax Region
DESCRIPTION: Example showing how to define a syntax region for here-documents using external pattern matching
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_168

LANGUAGE: vim
CODE:
```
:syn region hereDoc start="<<\z(\I\i*\)" end="^\z1$"
```

----------------------------------------

TITLE: Return Argument Dictionary in Neovim
DESCRIPTION: The function 'nvim__id_dict' returns a dictionary argument, serving testing purposes and shouldn't be relied upon in plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_32

LANGUAGE: Lua
CODE:
```
nvim__id_dict\(\{dct\}\)
```

----------------------------------------

TITLE: Popupmenu Show Event Specification
DESCRIPTION: Defines the event for displaying a completion popupmenu with details about items, selection, and positioning
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
["popupmenu_show", items, selected, row, col, grid]
```

----------------------------------------

TITLE: Checking for execinfo backtrace support in C
DESCRIPTION: Tests if the system supports backtrace functionality from the execinfo.h header by attempting to compile a simple program that calls the backtrace function.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: C
CODE:
```
#include <execinfo.h>
int main(void)
{
  void *trace[1];
  backtrace(trace, 1);
  return 0;
}
```

----------------------------------------

TITLE: Basic Error Catching in Vim
DESCRIPTION: Demonstrates basic error catching for a write command, though this simple form is not recommended as it may catch unintended errors.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_136

LANGUAGE: vim
CODE:
```
:try
:  write
:catch
:endtry
```

----------------------------------------

TITLE: Cursor Position Matching
DESCRIPTION: Focuses on matching patterns relative to the cursor position in Vim. Patterns like '\%#' match exactly under the cursor, highlighting the limitations when the cursor moves.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_19

LANGUAGE: regex
CODE:
```
"\\%#"
```

----------------------------------------

TITLE: Loading a ShaDa file in Neovim
DESCRIPTION: This snippet demonstrates how to load a specific ShaDa file using the `:rshada!` command within the Neovim configuration file. The `!` forces overwriting existing data with the contents of the specified ShaDa file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_15

LANGUAGE: Vim Script
CODE:
```
:rshada! ~/.my.shada
```

----------------------------------------

TITLE: Setting Mathematica File Type in Vim
DESCRIPTION: Configures Vim to recognize .m files as Mathematica files instead of Matlab files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_83

LANGUAGE: VimScript
CODE:
```
let filetype_m = "mma"
```

----------------------------------------

TITLE: Enabling Prepend Mode for Changelog Items in Vim
DESCRIPTION: Setting to make new changelog items appear before existing ones rather than after them by enabling the spec_chglog_prepend variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
let spec_chglog_prepend = 1
```

----------------------------------------

TITLE: List Concatenation in Vimscript
DESCRIPTION: This code shows how to concatenate two lists using the `+` operator in Vimscript. The result is a new list containing all elements from both original lists. The order of concatenation matters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
	:let longlist = mylist + [5, 6]
	:let longlist = [5, 6] + mylist
```

----------------------------------------

TITLE: Getting File Size with line2byte in Vim
DESCRIPTION: Example of using line2byte() to get the byte count of a file. By querying one line past the end of the file, this returns the buffer size plus one.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_154

LANGUAGE: vim
CODE:
```
echo line2byte(line("$") + 1)
```

----------------------------------------

TITLE: Defining GNU C Library Sources for Gettext in CMake
DESCRIPTION: Defines a comprehensive list of GNU C Library source files needed by Gettext tools. These provide platform-independent implementations of various system functions and utilities required by Gettext.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_8

LANGUAGE: cmake
CODE:
```
set(GLIBC_SOURCE
  uniname/uniname.c javaexec.c unsetenv.c classpath.c setenv.c xsetenv.c
  sh-quote.c execute.c javaversion.c csharpcomp.c csharpexec.c javacomp.c
  gettimeofday.c getdtablesize.c fcntl.c dup-safer-flag.c cloexec.c
  fd-safer-flag.c fd-safer.c pipe2.c pipe2-safer.c spawn-pipe.c xmemdup0.c
  secure_getenv.c tmpdir.c tempname.c mkdtemp.c fnmatch.c clean-temp.c
  wait-process.c waitpid.c getdelim.c getline.c sigprocmask.c sigaction.c
  addext.c argmatch.c backupfile.c basename.c c-strcasecmp.c c-strncasecmp.c
  c-strstr.c closeout.c concat-filename.c error-progname.c error.c exitfail.c
  fstrcmp.c full-write.c fwriteerror.c getopt.c getopt1.c hash.c libxml/buf.c
  localcharset.c malloca.c mbchar.c mbslen.c mbsstr.c mbswidth.c obstack.c
  progname.c printf-args.c printf-parse.c propername.c quotearg.c rawmemchr.c
  safe-read.c safe-write.c stpcpy.c stpncpy.c strchrnul.c striconv.c
  striconveh.c striconveha.c strnlen1.c trim.c gcd.c gl_linkedhash_list.c
  uniconv/u8-conv-from-enc.c unictype/ctype_space.c unilbrk/lbrktables.c
  unilbrk/u8-possible-linebreaks.c unilbrk/u8-width-linebreaks.c
  unilbrk/ulc-common.c unilbrk/ulc-width-linebreaks.c unistr/u16-mbtouc-aux.c
  unistr/u16-mbtouc.c unistr/u8-check.c unistr/u8-mblen.c
  unistr/u8-mbtouc-aux.c unistr/u8-mbtouc-unsafe-aux.c
  unistr/u8-mbtouc-unsafe.c unistr/u8-mbtouc.c unistr/u8-mbtoucr.c
  unistr/u8-prev.c unistr/u8-uctomb-aux.c unistr/u8-uctomb.c uniwidth/width.c
  vasnprintf.c vasprintf.c wcwidth.c xasprintf.c xconcat-filename.c xerror.c
  xmalloc.c xstrdup.c xstriconv.c xstriconveh.c xvasprintf.c
  libxml/DOCBparser.c libxml/HTMLparser.c libxml/HTMLtree.c libxml/SAX.c
  libxml/SAX2.c libxml/c14n.c libxml/catalog.c libxml/chvalid.c
  libxml/debugXML.c libxml/dict.c libxml/encoding.c libxml/entities.c
  libxml/error.c libxml/globals.c libxml/hash.c libxml/legacy.c libxml/list.c
  libxml/nanoftp.c libxml/nanohttp.c libxml/parser.c libxml/parserInternals.c
  libxml/pattern.c libxml/relaxng.c libxml/schematron.c libxml/threads.c
  libxml/tree.c libxml/trionan.c libxml/uri.c libxml/valid.c libxml/xinclude.c
  libxml/xlink.c libxml/xmlIO.c libxml/xmlmemory.c libxml/xmlmodule.c
  libxml/xmlreader.c libxml/xmlregexp.c libxml/xmlsave.c libxml/xmlschemas.c
  libxml/xmlschemastypes.c libxml/xmlstring.c libxml/xmlunicode.c
  libxml/xmlwriter.c libxml/xpath.c libxml/xpointer.c fatal-signal.c
  copy-file.c read-file.c ftello.c utime.c gettime.c utimens.c)
PREFIX_LIST_ITEMS(GLIBC_SOURCE "gettext-tools/gnulib-lib/")

file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/gnulib-lib/configmake.h "#define PKGDATADIR \"gettext\"")
```

----------------------------------------

TITLE: Using exp() Function for Exponential Calculations
DESCRIPTION: Examples demonstrating the use of exp() function to calculate exponential values in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_61

LANGUAGE: vim
CODE:
```
echo exp(2)
```

LANGUAGE: vim
CODE:
```
echo exp(-1)
```

----------------------------------------

TITLE: Configuring Vim Regex Engine and Pattern Search
DESCRIPTION: Setting Vim's regex engine and testing a pattern search for trailing whitespace. The regex engine is set to either 0 or 2, and the search pattern looks for whitespace before line endings.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:set re=0 or 2
```

LANGUAGE: vim
CODE:
```
/\s\+\%#\@<!$/
```

----------------------------------------

TITLE: Granular Mapping Configuration Check
DESCRIPTION: This snippet checks for the existence of ':tnoremap' before applying a terminal mode escape sequence mapping, ensuring compatibility and preventing errors if the command is not available.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
if exists(':tnoremap')
    tnoremap <Esc> <C-\><C-n>
endif
```

----------------------------------------

TITLE: Removing Runtime Directory in Bash
DESCRIPTION: Command to remove the previously installed Neovim runtime directory to fix helptags generation issues.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_11

LANGUAGE: bash
CODE:
```
rm -r /usr/local/share/nvim
```

----------------------------------------

TITLE: Detaching Threads in Lua with Libuv
DESCRIPTION: Detaches a thread, allowing it to automatically release resources upon termination without needing to call uv.thread_join.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_66

LANGUAGE: lua
CODE:
```
uv.thread_detach({thread})
```

----------------------------------------

TITLE: Syntax Folding for Fortran Files in Vim
DESCRIPTION: Activates syntax-driven folding in Fortran files by setting 'fortran_fold', creating fold regions for program units and statements to organize code clearly.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_40

LANGUAGE: VimScript
CODE:
```
:let fortran_fold=1
```

----------------------------------------

TITLE: Disabling the Zip Plugin via Configuration Variables
DESCRIPTION: Shows how to prevent the zip plugin from loading by setting the g:loaded_zipPlugin and g:loaded_zip variables to 1 in the user's .vimrc file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_zip.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
let g:loaded_zipPlugin= 1
let g:loaded_zip      = 1
```

----------------------------------------

TITLE: Adjusting Window Width in Vim
DESCRIPTION: This example demonstrates how to use winwidth() to get the width of the current window and conditionally resize it. It's useful for ensuring windows have a minimum width for readability or layout purposes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_291

LANGUAGE: vim
CODE:
```
echo "Current window has " .. winwidth(0) .. " columns."
if winwidth(0) <= 50
  50 wincmd |
endif
```

----------------------------------------

TITLE: Configuring Benchmark Target
DESCRIPTION: Sets up the benchmark target for performance testing with necessary dependencies and test environment configuration.
SOURCE: https://github.com/neovim/neovim/blob/master/test/CMakeLists.txt#2025-04-20_snippet_3

LANGUAGE: cmake
CODE:
```
add_custom_target(benchmark
  COMMAND ${CMAKE_COMMAND}
    -D TEST_TYPE=benchmark
    ${TEST_OPTIONS}
    -P ${PROJECT_SOURCE_DIR}/cmake/RunTests.cmake
  DEPENDS tty-test
  USES_TERMINAL)
add_dependencies(benchmark lua_dev_deps nvim)
```

----------------------------------------

TITLE: Combining perl and perldo for Text Replacement
DESCRIPTION: A more complex example showing how to use :perl to define a function and :perldo to apply it to a range of lines, demonstrating string replacement.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_perl.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:perl << EOF
sub perl_vim_string_replace
{
    my $line = shift;
    my $needle = $vim->eval('@a');
    my $replacement = $vim->eval('@b');
    $line =~ s/$needle/$replacement/g;
    return $line;
}
EOF
:let @a='somevalue'
:let @b='newvalue'
:'<,'>perldo $_ = perl_vim_string_replace($_)
```

----------------------------------------

TITLE: Activating Matchit Plugin: Vim Script
DESCRIPTION: To utilize the Matchit plugin, users can either include a 'packadd' command in their vimrc file or execute it directly in Vim. This activates the plugin, allowing for enhanced matching capabilities, especially useful when working with languages that have nested structures.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
packadd! matchit
```

LANGUAGE: vim
CODE:
```
packadd matchit
```

----------------------------------------

TITLE: Void Linux Build Prerequisites
DESCRIPTION: Installs the necessary packages on Void Linux systems to build Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_25

LANGUAGE: Shell
CODE:
```
"xbps-install base-devel cmake curl git"
```

----------------------------------------

TITLE: PHP Class Declaration with @var Tag
DESCRIPTION: Example of using the @var tag in PHP to declare a variable as a specific class type, which helps the Omni completion provide class-specific suggestions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_10

LANGUAGE: php
CODE:
```
/* @var $myVar myClass */
$myVar->
```

----------------------------------------

TITLE: Treesitter Highlight Query Example (Literal Expressions)
DESCRIPTION: This code snippet shows an example of a treesitter query that matches literal expressions. It assigns the `@keyword.conditional` capture to the literal strings "if" and "else".
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_16

LANGUAGE: query
CODE:
```
[\n  \"if\"\n  \"else\"\n] @keyword.conditional
```

----------------------------------------

TITLE: Using Version-Specific Modelines
DESCRIPTION: Examples of modelines that are only applicable to specific versions of Vim, using version conditionals in the modeline syntax.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_6

LANGUAGE: viml
CODE:
```
/* vim700: set foldmethod=marker */
```

LANGUAGE: viml
CODE:
```
/* vim>702: set cole=2: */
```

----------------------------------------

TITLE: UTF-8 Byte Order Mark (BOM) Detection
DESCRIPTION: Identifies different Unicode encoding formats through byte sequence recognition. Used for automatic file encoding detection in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
\tEF BB BF     UTF-8\n\tFE FF        UTF-16 big endian\n\tFF FE        UTF-16 little endian\n\t00 00 FE FF  UTF-32 big endian\n\tFF FE 00 00  UTF-32 little endian
```

----------------------------------------

TITLE: Terminal Key Backspace Fix
DESCRIPTION: Commands to fix Ctrl-H mapping issues by adjusting terminal's key_backspace setting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_6

LANGUAGE: bash
CODE:
```
infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > $TERM.ti
tic $TERM.ti
```

----------------------------------------

TITLE: Setting Menu Language in Vim
DESCRIPTION: Example of configuring Vim's menu language, including how to reload menus with a new language setting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_38

LANGUAGE: vim
CODE:
```
source $VIMRUNTIME/delmenu.vim
set langmenu=de_DE.ISO_8859-1
source $VIMRUNTIME/menu.vim
```

----------------------------------------

TITLE: Preserve Buffer to Swap File Command
DESCRIPTION: Command to write all text from current buffer into its swap file for recovery purposes
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/recover.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:pre[serve]
```

----------------------------------------

TITLE: Setting Default Shell Type to Bash
DESCRIPTION: Configuring Vim to use Bash syntax highlighting as the default for shell scripts when the shell type cannot be determined automatically.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_116

LANGUAGE: vim
CODE:
```
let g:is_bash      = 1
```

----------------------------------------

TITLE: Specific Swap File Recovery
DESCRIPTION: Command to recover using a specific swap file when its location is known.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
vim -r .help.txt.swo
```

----------------------------------------

TITLE: Getting Backend File Descriptor in Lua
DESCRIPTION: This function gets the backend file descriptor for kqueue, epoll, or event ports. It can be used with `uv.run("nowait")` to poll in one thread and run the loop's callbacks in another. Embedding a kqueue fd in another kqueue pollset might not work on all platforms.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_9

LANGUAGE: lua
CODE:
```
"uv.backend_fd()                                                *uv.backend_fd()*\n\n                Get backend file descriptor. Only kqueue, epoll, and event\n                ports are supported.\n\n                This can be used in conjunction with `uv.run(\"nowait\")` to\n                poll in one thread and run the event loop's callbacks in\n                another\n\n                Returns: `integer` or `nil`\n\n                Note: Embedding a kqueue fd in another kqueue pollset doesn't\n                work on all platforms. It's not an error to add the fd but it\n                never generates events."
```

----------------------------------------

TITLE: Remapping gx to use netrw in Vim
DESCRIPTION: A Vim command to remap the gx key to continue using netrw for opening URLs instead of the new default vim.ui.open(). This is provided as a fallback for users who want to maintain the previous behavior with the now-deprecated netrw functionality.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.10.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:call netrw#BrowseX(expand(exists("g:netrw_gx") ? g:netrw_gx : '<cfile>'), netrw#CheckIfRemote())<CR>
```

----------------------------------------

TITLE: Right and Left Aligning Text in Vim - Vim
DESCRIPTION: Uses the ':right' and ':left' commands to align text either to the right or to the left respectively. These commands allow for precise control over text placement on the screen.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:1,5right 37
```

LANGUAGE: vim
CODE:
```
:1left 5
```

LANGUAGE: vim
CODE:
```
:2,5left
```

----------------------------------------

TITLE: Configuring Debug Assertions in RelWithDebInfo Build
DESCRIPTION: Ensures assertions are enabled in RelWithDebInfo build type by removing NDEBUG preprocessor definitions from compiler flags.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_10

LANGUAGE: CMake
CODE:
```
# We _want_ assertions in RelWithDebInfo build-type.
if(CMAKE_C_FLAGS_RELWITHDEBINFO MATCHES DNDEBUG)
  string(REPLACE "-DNDEBUG" "" CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}")
  string(REPLACE "/DNDEBUG" "" CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}")
  string(REPLACE "  " " " CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}") # Remove duplicate whitespace
endif()
```

----------------------------------------

TITLE: C Highlighting Options in VimL
DESCRIPTION: Enables or disables specific C syntax highlighting features. Highlights C++ style with filetype setting, and uses various variables to control specific highlighting details and folding of comments and blocks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_10

LANGUAGE: VimL
CODE:
```
:let c_comment_strings = 1
```

LANGUAGE: VimL
CODE:
```
:let c_no_bracket_error = 0
```

LANGUAGE: VimL
CODE:
```
:unlet c_comment_strings
```

LANGUAGE: VimL
CODE:
```
:set filetype=cpp
```

----------------------------------------

TITLE: Updating Diff Highlighting
DESCRIPTION: Shows how to manually update the diff highlighting when it becomes out of sync with the actual differences.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
:diffupdate
```

----------------------------------------

TITLE: Setting YAML Schema for Syntax Highlighting in Vim
DESCRIPTION: Configures the YAML schema option to determine how certain values will be highlighted in YAML files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_155

LANGUAGE: vim
CODE:
```
let g:yaml_schema = 'core'
```

----------------------------------------

TITLE: Setup and Use of Logging in Neovim
DESCRIPTION: This snippet outlines commands for setting up and using logging within Neovim's development. Key functionalities include building with log debugging and configuring to log stack traces. Dependencies include Linux for `LOG_CALLSTACK()` and the need for specific build flags like `-no-pie`.
SOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/README.md#2025-04-20_snippet_0

LANGUAGE: bash
CODE:
```
rm -rf build/
make CMAKE_EXTRA_FLAGS="-DLOG_DEBUG"

rm -rf build/
make CMAKE_EXTRA_FLAGS="-DLOG_DEBUG -DCMAKE_C_FLAGS=-no-pie"
```

----------------------------------------

TITLE: Creating Multi-Region Spell File
DESCRIPTION: Example of combining multiple regional word lists into a single spell file for English variants.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:mkspell ~/.config/nvim/spell/en /tmp/en_US /tmp/en_CA /tmp/en_AU
```

----------------------------------------

TITLE: Getting Parent Process ID with uv.os_getppid()
DESCRIPTION: Returns the process ID of the parent process as a number.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_99

LANGUAGE: lua
CODE:
```
uv.os_getppid()
```

----------------------------------------

TITLE: Using strridx() in Vim Script
DESCRIPTION: Shows how to use strridx() function to find the last occurrence of a substring in a string, with an optional starting position.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_262

LANGUAGE: vim
CODE:
```
let lastcomma = strridx(line, ",")
let comma2 = strridx(line, ",", lastcomma - 1)
```

LANGUAGE: vim
CODE:
```
echo strridx("an angry armadillo", "an")
```

----------------------------------------

TITLE: Mappings for Tag Highlighting in Neovim
DESCRIPTION: Function key mappings to generate and apply tag highlighting. F11 generates a tags.vim file from the tags file and F12 applies the highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_204

LANGUAGE: vim
CODE:
```
:map <F11>  :sp tags<CR>:%s/^\([^\t:]*:\)\=\([^\t]*\).*/syntax keyword Tag \2/<CR>:wq! tags.vim<CR>/^<CR><F12>
:map <F12>  :so tags.vim<CR>
```

----------------------------------------

TITLE: Return Argument Object in Neovim
DESCRIPTION: Returns the provided object using 'nvim__id', a function mainly for testing purposes. Its presence in plugins shouldn't be relied upon.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_30

LANGUAGE: Lua
CODE:
```
nvim__id\(\{obj\}\)
```

----------------------------------------

TITLE: Setting Build Options for Neovim
DESCRIPTION: Configures build options including Link Time Optimization (LTO), internationalization support, and WebAssembly support through wasmtime.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_8

LANGUAGE: CMake
CODE:
```
if (MINGW)
  # Disable LTO by default as it may not compile
  # See https://github.com/Alexpux/MINGW-packages/issues/3516
  # and https://github.com/neovim/neovim/pull/8654#issuecomment-402316672
  option(ENABLE_LTO "enable link time optimization" OFF)
else()
  option(ENABLE_LTO "enable link time optimization" ON)
endif()
option(ENABLE_LIBINTL "enable libintl" ON)
option(ENABLE_WASMTIME "enable wasmtime" OFF)

message(STATUS "CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}")

set_default_buildtype(Debug)
get_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(NOT isMultiConfig)
  # Unlike build dependencies in cmake.deps, we want dev dependencies such as
  # Uncrustify to always be built with Release.
  list(APPEND DEPS_CMAKE_ARGS -D CMAKE_BUILD_TYPE=Release)
endif()
```

----------------------------------------

TITLE: Empty Filename Recovery
DESCRIPTION: Command to recover a file that was being edited without a name.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
vim -r ""
```

----------------------------------------

TITLE: Building Neovim with Release optimization
DESCRIPTION: Command to build Neovim with Release optimization level for maximum performance, commonly used by package maintainers.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
make CMAKE_BUILD_TYPE=Release
```

----------------------------------------

TITLE: Installing Neovim via Snap - Stable
DESCRIPTION: Command to install the stable version of Neovim using Snap package manager.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_6

LANGUAGE: sh
CODE:
```
sudo snap install nvim --classic
```

----------------------------------------

TITLE: Configuring Pascal Syntax Options
DESCRIPTION: Sets various Pascal syntax highlighting options including file detection and compiler-specific features.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_96

LANGUAGE: vim
CODE:
```
:let filetype_p  = "pascal"
:let filetype_pp = "pascal"
```

LANGUAGE: vim
CODE:
```
:let pascal_traditional=1
```

LANGUAGE: vim
CODE:
```
:let pascal_delphi=1
```

----------------------------------------

TITLE: Creating Aggregate Lua Linting Target in CMake
DESCRIPTION: Creates a composite target that depends on both luacheck and stylua linting targets, allowing all Lua linting to be run with a single command.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_18

LANGUAGE: cmake
CODE:
```
add_custom_target(lintlua)
add_dependencies(lintlua lintlua-luacheck lintlua-stylua)
```

----------------------------------------

TITLE: Navigating to Error Above Current Line
DESCRIPTION: Command for going to the error above the current line in the current buffer from the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:[count]cabo[ve]
```

----------------------------------------

TITLE: Dependency URLs and SHA256 Checksums Configuration
DESCRIPTION: Configuration block defining source URLs and SHA256 verification checksums for Neovim project dependencies. Includes core dependencies like libuv and LuaJIT, as well as tree-sitter parsers for various languages.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/deps.txt#2025-04-20_snippet_0

LANGUAGE: plaintext
CODE:
```
LIBUV_URL https://github.com/libuv/libuv/archive/v1.50.0.tar.gz
LIBUV_SHA256 b1ec56444ee3f1e10c8bd3eed16ba47016ed0b94fe42137435aaf2e0bd574579

LUAJIT_URL https://github.com/luajit/luajit/archive/51d4c26ec7805d77bfc3470fdf99b73c4ef2faec.tar.gz
LUAJIT_SHA256 7fd632850d28430b7e999bec9255d23ba7c6ecb3ecf1cafb481b8b8ecdb60612

LUA_URL https://www.lua.org/ftp/lua-5.1.5.tar.gz
LUA_SHA256 2640fc56a795f29d28ef15e13c34a47e223960b0240e8cb0a82d9b0738695333

UNIBILIUM_URL https://github.com/neovim/unibilium/archive/v2.1.2.tar.gz
UNIBILIUM_SHA256 370ecb07fbbc20d91d1b350c55f1c806b06bf86797e164081ccc977fc9b3af7a

LUV_URL https://github.com/luvit/luv/archive/1.50.0-1.tar.gz
LUV_SHA256 bb4f0570571e40c1d2a7644f6f9c1309a6ccdb19bf4d397e8d7bfd0c6b88e613

LPEG_URL https://github.com/neovim/deps/raw/d495ee6f79e7962a53ad79670cb92488abe0b9b4/opt/lpeg-1.1.0.tar.gz
LPEG_SHA256 4b155d67d2246c1ffa7ad7bc466c1ea899bbc40fef0257cc9c03cecbaed4352a

LUA_COMPAT53_URL https://github.com/lunarmodules/lua-compat-5.3/archive/v0.13.tar.gz
LUA_COMPAT53_SHA256 f5dc30e7b1fda856ee4d392be457642c1f0c259264a9b9bfbcb680302ce88fc2

XXD_URL https://github.com/neovim/deps/raw/21c5e8bdda33521a6ed497b315e03265a2785cbc/opt/xxd.exe
XXD_SHA256 7a581e3882d28161cc52850f9a11d634b3eaf2c029276f093c1ed4c90e45a10c

WIN32YANK_X86_64_URL https://github.com/equalsraf/win32yank/releases/download/v0.1.1/win32yank-x64.zip
WIN32YANK_X86_64_SHA256 247c9a05b94387a884b49d3db13f806b1677dfc38020f955f719be6902260cd6

GETTEXT_URL https://github.com/neovim/deps/raw/b9bf36eb31f27e8136d907da38fa23518927737e/opt/gettext-0.20.1.tar.gz
GETTEXT_SHA256 66415634c6e8c3fa8b71362879ec7575e27da43da562c798a8a2f223e6e47f5c

LIBICONV_URL https://github.com/neovim/deps/raw/b9bf36eb31f27e8136d907da38fa23518927737e/opt/libiconv-1.17.tar.gz
LIBICONV_SHA256 8f74213b56238c85a50a5329f77e06198771e70dd9a739779f4c02f65d971313

UTF8PROC_URL https://github.com/JuliaStrings/utf8proc/archive/v2.10.0.tar.gz
UTF8PROC_SHA256 6f4f1b639daa6dca9f80bc5db1233e9cbaa31a67790887106160b33ef743f136

TREESITTER_C_URL https://github.com/tree-sitter/tree-sitter-c/archive/v0.23.4.tar.gz
TREESITTER_C_SHA256 b66c5043e26d84e5f17a059af71b157bcf202221069ed220aa1696d7d1d28a7a
TREESITTER_LUA_URL https://github.com/tree-sitter-grammars/tree-sitter-lua/archive/v0.3.0.tar.gz
TREESITTER_LUA_SHA256 a34cc70abfd8d2d4b0fabf01403ea05f848e1a4bc37d8a4bfea7164657b35d31
TREESITTER_VIM_URL https://github.com/tree-sitter-grammars/tree-sitter-vim/archive/v0.5.0.tar.gz
TREESITTER_VIM_SHA256 90019d12d2da0751c027124f27f5335babf069a050457adaed53693b5e9cf10a
TREESITTER_VIMDOC_URL https://github.com/neovim/tree-sitter-vimdoc/archive/v3.0.1.tar.gz
TREESITTER_VIMDOC_SHA256 76b65e5bee9ff78eb21256619b1995aac4d80f252c19e1c710a4839481ded09e
TREESITTER_QUERY_URL https://github.com/tree-sitter-grammars/tree-sitter-query/archive/v0.5.1.tar.gz
TREESITTER_QUERY_SHA256 fe8c712880a529d454347cd4c58336ac2db22243bae5055bdb5844fb3ea56192
TREESITTER_MARKDOWN_URL https://github.com/tree-sitter-grammars/tree-sitter-markdown/archive/v0.4.1.tar.gz
TREESITTER_MARKDOWN_SHA256 e0fdb2dca1eb3063940122e1475c9c2b069062a638c95939e374c5427eddee9f
TREESITTER_URL https://github.com/tree-sitter/tree-sitter/archive/v0.25.3.tar.gz
TREESITTER_SHA256 862fac52653bc7bc9d2cd0630483e6bdf3d02bcd23da956ca32663c4798a93e3

WASMTIME_URL https://github.com/bytecodealliance/wasmtime/archive/v29.0.1.tar.gz
WASMTIME_SHA256 b94b6c6fd6aebaf05d4c69c1b12b5dc217b0d42c1a95f435b33af63dddfa5304

UNCRUSTIFY_URL https://github.com/uncrustify/uncrustify/archive/uncrustify-0.80.1.tar.gz
UNCRUSTIFY_SHA256 0e2616ec2f78e12816388c513f7060072ff7942b42f1175eb28b24cb75aaec48
LUA_DEV_DEPS_URL https://github.com/neovim/deps/raw/06ef2b58b0876f8de1a3f5a710473dcd7afff251/opt/lua-dev-deps.tar.gz
LUA_DEV_DEPS_SHA256 49f8399e453103064a23c65534f266f3067cda716b6502f016bfafeed5799354
```

----------------------------------------

TITLE: Netrw Version History Changelog
DESCRIPTION: Version history documenting changes to netrw plugin from v172 down to v157, including bug fixes, improvements, and feature additions. Contains specific changes by contributors and core maintainers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/README.md#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
	v172:	Sep 02, 2021	* (Bram Moolenaar) Changed "l:go" to "go"
				* (Bram Moolenaar) no need for "b" in
				  netrw-safe guioptions
		Nov 15, 2021	* removed netrw_localrm and netrw_localrmdir
				  references
		Aug 18, 2022	* (Miguel Barro) improving compatibility with
				  powershell
	v171:	Oct 09, 2020	* included code in s:NetrwOptionsSafe()
				  to allow |'bh'| to be set to delete when
				  rather than hide when g:netrw_fastbrowse
				  was zero.
				* Installed |g:netrw_clipboard| setting
				* Installed option bypass for |'guioptions'|
				  a/A settings
				* Changed popup_beval() to |popup_atcursor()|
				  in netrw#ErrorMsg (lacygoill). Apparently
				  popup_beval doesn't reliably close the
				  popup when the mouse is moved.
				* VimEnter() now using win_execute to examine
				  buffers for an attempt to open a directory.
				  Avoids issues with popups/terminal from
				  command line. (lacygoill)
		Jun 28, 2021	* (zeertzjq) provided a patch for use of
				  xmap,xno instead of vmap,vno in
				  netrwPlugin.vim. Avoids entanglement with
				  select mode.
		Jul 14, 2021	* Fixed problem addressed by tst976; opening
				  a file using tree mode, going up a
				  directory, and opening a file there was
				  opening the file in the wrong directory.
		Jul 28, 2021	* (Ingo Karkat) provided a patch fixing an
				  E488 error with netrwPlugin.vim
				  (occurred for vim versions < 8.02)
	v170:	Mar 11, 2020	* (reported by Reiner Herrmann) netrw+tree
				  would not hide with the ^\..* pattern
				  correctly.
```

----------------------------------------

TITLE: Adding Left Scrollbar
DESCRIPTION: Command to add a scrollbar to the left side of the gVim window
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:set guioptions+=l
```

----------------------------------------

TITLE: Managing Process User and Group IDs with LibUV in Lua
DESCRIPTION: Functions for getting and setting process user and group IDs. Note that these are not standard LibUV functions and are not supported on Windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_80

LANGUAGE: lua
CODE:
```
uv.getpid()                                                        *uv.getpid()*
```

LANGUAGE: lua
CODE:
```
uv.getuid()                                                        *uv.getuid()*
```

LANGUAGE: lua
CODE:
```
uv.getgid()                                                        *uv.getgid()*
```

LANGUAGE: lua
CODE:
```
uv.setuid({id})                                                    *uv.setuid()*
```

LANGUAGE: lua
CODE:
```
uv.setgid({id})                                                    *uv.setgid()*
```

----------------------------------------

TITLE: Custom Digraph Definitions for Raku
DESCRIPTION: Vim configuration commands to define custom digraphs for special mathematical and Raku-specific Unicode characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_raku.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
exec 'digraph \\ ' .. char2nr('∖')
exec 'digraph \< ' .. char2nr('≼')
exec 'digraph \> ' .. char2nr('≽')
exec 'digraph (L ' .. char2nr('⊈')
exec 'digraph )L ' .. char2nr('⊉')
exec 'digraph (/ ' .. char2nr('⊄')
exec 'digraph )/ ' .. char2nr('⊅')
exec 'digraph )/ ' .. char2nr('⊅')
exec 'digraph U+ ' .. char2nr('⊎')
exec 'digraph 0- ' .. char2nr('⊖')
" Euler's constant
exec 'digraph ne ' .. char2nr('𝑒')
" Raku's atomic operations marker
exec 'digraph @@ ' .. char2nr('⚛')
```

----------------------------------------

TITLE: Moving to the start of a comment (Vim)
DESCRIPTION: This snippet shows how to move back to the start of a comment using the `[/` command. This only works for `/* - */` comments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
"[/"
```

----------------------------------------

TITLE: Listing Vim Patches Status in Neovim
DESCRIPTION: Command to view the status of Vim patches in Neovim using vim-patch.sh script
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_0

LANGUAGE: bash
CODE:
```
./scripts/vim-patch.sh -l
```

----------------------------------------

TITLE: Checking Spelling Example with spellbadword()
DESCRIPTION: Demonstrates using spellbadword() function to check for spelling errors in text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_248

LANGUAGE: vim
CODE:
```
echo spellbadword("the quik brown fox")
```

----------------------------------------

TITLE: Including Base Syntax in Custom Syntax
DESCRIPTION: Example of including C syntax file in CPP syntax file
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
:so $VIMRUNTIME/syntax/c.vim
```

----------------------------------------

TITLE: Default Value of zipPlugin_ext Variable for Zip Extensions
DESCRIPTION: Shows the default value of the g:zipPlugin_ext variable that contains all the file extensions that are automatically recognized as zip archives. This extensive list includes numerous extensions like .jar, .docx, .xlsx, and many more.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_zip.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
let g:zipPlugin_ext='*.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,
       \ *.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,
       \ *.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,
       \ *.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,
       \ *.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.whl,*.wsz,
       \ *.xap,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'
```

----------------------------------------

TITLE: Preserving Comment Leaders in Multi-line Doc Comments
DESCRIPTION: Preserves the leader on multi-line doc comments that use the '/*!' syntax, maintaining the formatting of documentation comments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
let g:rust_bang_comment_leader = 1
```

----------------------------------------

TITLE: Getting System Temporary Directory with uv.os_tmpdir()
DESCRIPTION: Returns the path to the system's temporary directory. This function is not thread-safe.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_96

LANGUAGE: lua
CODE:
```
uv.os_tmpdir()
```

----------------------------------------

TITLE: Deleting a buffer-local user command in Neovim
DESCRIPTION: This function deletes a user-defined command that is specific to a buffer in Neovim. The command must have been created with `:command-buffer` or `nvim_buf_create_user_command()`.  The function requires the buffer ID and the name of the command to delete.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_41

LANGUAGE: vim
CODE:
```
"                                                 *nvim_buf_del_user_command()*\nnvim_buf_del_user_command({buffer}, {name})\n    Delete a buffer-local user-defined command.\n\n    Only commands created with |:command-buffer| or\n    |nvim_buf_create_user_command()| can be deleted with this function.\n\n    Attributes: ~\n        Since: 0.7.0\n\n    Parameters: ~\n      • {buffer}  Buffer id, or 0 for current buffer.\n      • {name}    Name of the command to delete.
```

----------------------------------------

TITLE: Disabling Automatic Linting of Treesitter Query Files
DESCRIPTION: This Lua code snippet demonstrates how to disable automatic linting of treesitter query files by setting `vim.g.query_lint_on`. It requires Neovim with treesitter integration. The primary input is setting this global variable to an empty table, resulting in the deactivation of linting for query files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.10.txt#2025-04-20_snippet_3

LANGUAGE: lua
CODE:
```
vim.g.query_lint_on = {}
```

----------------------------------------

TITLE: Disabling Backslash Quote in TCSH Syntax
DESCRIPTION: Setting a variable to disable backslash quote constructs in TCSH syntax highlighting, which is needed when the shell's 'backslash_quote' variable is not set.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_128

LANGUAGE: vim
CODE:
```
let tcsh_backslash_quote = 0
```

----------------------------------------

TITLE: Multi-file Navigation Commands in Vim
DESCRIPTION: Commands for navigating between multiple files in Vim's argument list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:next
:next!
:wnext
:previous
:wprevious
:last
:first
:2next
```

----------------------------------------

TITLE: Filtering Oldfiles Command Example in Vim
DESCRIPTION: Example showing how to filter the :oldfiles command output to only show .vim files
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
filter /\.vim/ oldfiles
```

----------------------------------------

TITLE: Checking for Unsigned Integer using Msgpack in Vim
DESCRIPTION: This function checks if a given Msgpack value is a non-negative integer, returning 1 for non-negative integers and 0 otherwise.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
msgpack#is_uint({msgpack-value})
```

----------------------------------------

TITLE: Appending Text to Specific Buffer in Vimscript
DESCRIPTION: The appendbufline() function appends text to a specified buffer. It works similarly to append() but allows targeting a different buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_6

LANGUAGE: vimscript
CODE:
```
let failed = appendbufline(13, 0, "# THE START")
```

----------------------------------------

TITLE: Modeline Examples with Formatting
DESCRIPTION: Examples of properly formatted modelines, including one demonstrating how to escape colons in option values.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_7

LANGUAGE: viml
CODE:
```
/* vi:set ts=4: */
```

LANGUAGE: viml
CODE:
```
/* vi:set fillchars=stl\:^,vert\:\|: */
```

----------------------------------------

TITLE: Navigating to Error Before Cursor Position
DESCRIPTION: Command for going to the error before the current cursor position in the current buffer from the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
:[count]cbe[fore]
```

----------------------------------------

TITLE: Using Vim Modelines (Second Form)
DESCRIPTION: Examples of the second form of modelines compatible with some versions of Vi. This form uses the 'set' keyword followed by options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
/* vim: set ai tw=75: */
```

LANGUAGE: viml
CODE:
```
/* Vim: set ai tw=75: */
```

----------------------------------------

TITLE: Setting Perl Executable Path in Neovim
DESCRIPTION: Sets the path to the Perl executable for Neovim's Perl provider. This must be set before checking if Perl support is available.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
let g:perl_host_prog = '/path/to/perl'
```

----------------------------------------

TITLE: Setting Up Lua Language Server Linting Target in CMake
DESCRIPTION: Creates a target that scans Lua files in the runtime directory using the downloaded Lua Language Server for linting and static analysis.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_34

LANGUAGE: cmake
CODE:
```
file(GLOB_RECURSE LUAFILES runtime/*.lua)
add_target(luals
  COMMAND ${DEPS_BIN_DIR}/luals/bin/lua-language-server
    --configpath=${PROJECT_SOURCE_DIR}/.luarc.json
    --check=${PROJECT_SOURCE_DIR}/runtime
    --checklevel=Hint
  DEPENDS ${LUAFILES}
  CUSTOM_COMMAND_ARGS USES_TERMINAL)

add_dependencies(luals download_luals)
```

----------------------------------------

TITLE: Disabling OSC 52 Auto-Detection in Neovim - Lua
DESCRIPTION: This code snippet demonstrates how to disable the automatic detection of the OSC 52 feature in Neovim's terminal integration by setting the 'osc52' key in 'vim.g.termfeatures' to false. This should be done early in the configuration.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_22

LANGUAGE: lua
CODE:
```
local termfeatures = vim.g.termfeatures or {}
termfeatures.osc52 = false
vim.g.termfeatures = termfeatures
```

----------------------------------------

TITLE: General Nvim Startup Command
DESCRIPTION: Generic form of starting Nvim with optional arguments and filenames. Arguments can be mixed in any order.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_1

LANGUAGE: shell
CODE:
```
nvim [option | filename] ..
```

----------------------------------------

TITLE: Vim Script Line Continuation Example
DESCRIPTION: Shows how to handle line continuation in Vim script using cpoptions
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_98

LANGUAGE: vim
CODE:
```
set cpo+=C
let var =<< END
   \ leading backslash
END
set cpo-=C
```

----------------------------------------

TITLE: Adjusting matchtime in Vim
DESCRIPTION: Command to change how long Vim shows the matching bracket. The time is specified in tenths of a second, with the example setting it to 1.5 seconds.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_2

LANGUAGE: vimdoc
CODE:
```
:set matchtime=15
```

----------------------------------------

TITLE: Return Floating-point Argument in Neovim
DESCRIPTION: Returns the floating-point value passed as an argument using 'nvim__id_float'. Mainly for testing, professional developers shouldn't depend on its plugin availability.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_33

LANGUAGE: Lua
CODE:
```
nvim__id_float\(\{flt\}\)
```

----------------------------------------

TITLE: Additional Attribute for Highlight Command
DESCRIPTION: The |:highlight| command now supports an additional attribute called 'altfont', expanding its functionality for text highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_8



----------------------------------------

TITLE: Setting Mail Syntax Highlighting Options in Vim
DESCRIPTION: Configures the number of lines to synchronize for mail syntax highlighting to improve performance on slower machines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_79

LANGUAGE: VimScript
CODE:
```
:let mail_minlines = 30
```

----------------------------------------

TITLE: Custom Color Name with Spaces
DESCRIPTION: Example showing how to use a color name containing spaces
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_193

LANGUAGE: vim
CODE:
```
:hi comment guifg='salmon pink'
```

----------------------------------------

TITLE: Treating True/False as Keywords in Haskell
DESCRIPTION: This snippet shows how to treat 'True' and 'False' as keywords in Haskell syntax highlighting.  This is done by setting the 'hs_highlight_boolean' variable to 1 in your vimrc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_44

LANGUAGE: vim
CODE:
```
	:let hs_highlight_boolean = 1
```

----------------------------------------

TITLE: UI Option Reporting Enhancements
DESCRIPTION: |nvim_list_uis()| now reports all fields within |ui-option|, providing comprehensive details for users and plugins that rely on UI information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_11



----------------------------------------

TITLE: Implementing a Custom Command-line Mapping in Neovim
DESCRIPTION: This snippet demonstrates how to create a custom mapping for Neovim's command-line mode. It defines a function 'AppendSome()' that modifies the command line and maps it to the F7 key.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_2

LANGUAGE: vimdoc
CODE:
```
:cmap <F7> <C-\>eAppendSome()<CR>
:func AppendSome()
   :let cmd = getcmdline() .. " Some()"
   :" place the cursor on the )
   :call setcmdpos(strlen(cmd))
   :return cmd
:endfunc
```

----------------------------------------

TITLE: Setting Buffer Mark in Lua
DESCRIPTION: Sets a named mark in the given buffer. Marks are (1,0)-indexed. Passing 0 as line deletes the mark.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_58

LANGUAGE: lua
CODE:
```
nvim_buf_set_mark({buffer}, {name}, {line}, {col}, {opts})
```

----------------------------------------

TITLE: Filtering Unmerged Vim Patches
DESCRIPTION: Command to filter unmerged Vim patches using grep patterns with vim-patch.sh script
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_3

LANGUAGE: bash
CODE:
```
./scripts/vim-patch.sh -L --grep quickfix -- src
```

----------------------------------------

TITLE: Checking and Setting Filetype in Vim
DESCRIPTION: Commands to check current filetype and manually set it for syntax highlighting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set filetype
```

LANGUAGE: vim
CODE:
```
:set filetype=fortran
```

----------------------------------------

TITLE: Determining Special Type with Msgpack in Vim
DESCRIPTION: Returns the type name of a Msgpack special dictionary or zero if the value is not special. This is used to handle special Msgpack values.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
msgpack#special_type({msgpack-value})
```

----------------------------------------

TITLE: Configuring Lace Syntax Highlighting in Vim
DESCRIPTION: Sets an option for case-insensitive highlighting in Lace syntax.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_72

LANGUAGE: VimScript
CODE:
```
:let lace_case_insensitive=1
```

----------------------------------------

TITLE: Getting Line Number by Byte in Neovim using Vim Script
DESCRIPTION: The 'byte2line' function returns the line number containing the character at a specified byte count in the current buffer, returning -1 for invalid bytes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
byte2line({byte})
```

----------------------------------------

TITLE: Setting Changelog Format String in Vim
DESCRIPTION: Example of how to customize the changelog entry format by setting the spec_chglog_format variable in vimrc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
let spec_chglog_format = "%a %b %d %Y My Name <my@email.com>"
```

----------------------------------------

TITLE: Help Command with CTRL-V Examples
DESCRIPTION: Examples demonstrating how to search help for CTRL key combinations
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_1

LANGUAGE: vimscript
CODE:
```
:help ^V
:help i^V
```

----------------------------------------

TITLE: Visual Mode Commands in Neovim
DESCRIPTION: List of key mappings and their actions in Neovim's visual mode. Includes commands for text manipulation, movement, and selection modification.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
|v_>|      >       2  shift the highlighted lines one 'shiftwidth' right
|v_b_A|     A       2  block mode: append same text in all lines, after the highlighted area
|v_C|       C       2  delete the highlighted lines and start insert
|v_D|       D       2  delete the highlighted lines
|v_b_I|     I       2  block mode: insert same text in all lines, before the highlighted area
|v_J|       J       2  join the highlighted lines
|v_K|       K          run 'keywordprg' on the highlighted area
|v_O|       O          move horizontally to other corner of area
|v_P|       P          replace highlighted area with register contents; registers are unchanged
```

----------------------------------------

TITLE: Setting Clipboard to OSC52 in Neovim
DESCRIPTION: Forces Neovim to use the OSC52 clipboard provider, bypassing auto-detection of terminal support.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
let g:clipboard = 'osc52'
```

----------------------------------------

TITLE: Setting Runtime Directory Variables
DESCRIPTION: Defines paths for generated runtime files including help tags, package directory and syntax files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/CMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: cmake
CODE:
```
set(GENERATED_RUNTIME_DIR ${PROJECT_BINARY_DIR}/runtime)

set(GENERATED_HELP_TAGS ${GENERATED_RUNTIME_DIR}/doc/tags)
set(GENERATED_PACKAGE_DIR ${GENERATED_RUNTIME_DIR}/pack/dist/opt)
set(GENERATED_SYN_VIM ${GENERATED_RUNTIME_DIR}/syntax/vim/generated.vim)
set(SYN_VIM_GENERATOR ${PROJECT_SOURCE_DIR}/src/gen/gen_vimvim.lua)
```

----------------------------------------

TITLE: Combining Execute with Normal Command and Count Concatenation
DESCRIPTION: Shows how to use :execute with the normal command and string concatenation to repeat an action a specific number of times.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_112

LANGUAGE: vim
CODE:
```
:execute "normal" count .. "w"
```

----------------------------------------

TITLE: Setting Unicode Digraph
DESCRIPTION: Example showing how to define a digraph for the 'oe' ligature using Unicode value.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/digraph.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
digraph oe 339
```

----------------------------------------

TITLE: Configuring libuv Loop Options in Lua
DESCRIPTION: This function sets additional libuv loop options. It's typically called before the first call to uv_run(). Supported options include blocking signals (currently only `sigprof`) and accumulating idle time for metrics.  Returns 0 or fail, including ENOSYS if the option is unsupported.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_5

LANGUAGE: lua
CODE:
```
"uv.loop_configure({option}, {...})                         *uv.loop_configure()*\n\n                Parameters:\n                - `option`: `string`\n                - `...`: depends on `option`, see below\n\n                Set additional loop options. You should normally call this\n                before the first call to uv_run() unless mentioned otherwise.\n\n                Supported options:\n\n                  - `\"block_signal\"`: Block a signal when polling for new\n                    events. The second argument to loop_configure() is the\n                    signal name (as a lowercase string) or the signal number.\n                    This operation is currently only implemented for\n                    `\"sigprof\"` signals, to suppress unnecessary wakeups when\n                    using a sampling profiler. Requesting other signals will\n                    fail with `EINVAL`.\n                  - `\"metrics_idle_time\"`: Accumulate the amount of idle time\n                    the event loop spends in the event provider. This option\n                    is necessary to use `metrics_idle_time()`.\n\n                An example of a valid call to this function is:\n\n                    >lua\n                    uv.loop_configure(\"block_signal\", \"sigprof\")\n<\n\n                Returns: `0` or `fail`\n\n                Note: Be prepared to handle the `ENOSYS` error; it means the\n                loop option is not supported by the platform."
```

----------------------------------------

TITLE: Vim Visual Pattern Replacement
DESCRIPTION: A command to replace all parentheses with # in the visual selection using pattern matching
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
:'<,'>s/\%V(/#/g
```

----------------------------------------

TITLE: Comprehensive Netrw Syntax Highlighting Configuration in VimL
DESCRIPTION: A complete example showing how to customize the syntax highlighting for various file types in Netrw. This configuration sets custom colors for compressed files, data files, headers, libraries, and more, suitable for a dark background color scheme.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_38

LANGUAGE: viml
CODE:
```
hi netrwCompress term=NONE cterm=NONE gui=NONE ctermfg=10 guifg=green  ctermbg=0 guibg=black
hi netrwData	  term=NONE cterm=NONE gui=NONE ctermfg=9 guifg=blue ctermbg=0 guibg=black
hi netrwHdr	  term=NONE cterm=NONE,italic gui=NONE guifg=SeaGreen1
hi netrwLex	  term=NONE cterm=NONE,italic gui=NONE guifg=SeaGreen1
hi netrwYacc	  term=NONE cterm=NONE,italic gui=NONE guifg=SeaGreen1
hi netrwLib	  term=NONE cterm=NONE gui=NONE ctermfg=14 guifg=yellow
hi netrwObj	  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red
hi netrwTilde	  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red
hi netrwTmp	  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red
hi netrwTags	  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red
hi netrwDoc	  term=NONE cterm=NONE gui=NONE ctermfg=220 ctermbg=27 guifg=yellow2 guibg=Blue3
hi netrwSymLink  term=NONE cterm=NONE gui=NONE ctermfg=220 ctermbg=27 guifg=grey60
```

----------------------------------------

TITLE: Message Viewing Command Examples
DESCRIPTION: Examples of Vim commands used to view and manage message history, including viewing all messages, specific number of messages, and clearing message history.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:mes[sages]            Show all messages.
:{count}mes[sages]      Show the {count} most recent messages.
:mes[sages] clear       Clear all messages.
:{count}mes[sages] clear Clear messages, keeping only the {count} most recent ones.
```

----------------------------------------

TITLE: Stopping Script Execution in Vim
DESCRIPTION: The :finish command stops sourcing a Vim script file, skipping the rest of the file. It can only be used within a Vim script.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:fini[sh]
```

----------------------------------------

TITLE: Basic Z-Y Key Mapping in Vim
DESCRIPTION: Simple example of using langmap to exchange the meaning of z and y keys for commands in normal mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_37

LANGUAGE: vim
CODE:
```
set langmap=zy,yz,ZY,YZ
```

----------------------------------------

TITLE: Debugging Handles with LibUV in Lua
DESCRIPTION: Debugging functions to print active or all handles in the main loop. These functions are meant for ad hoc debugging and not available on Windows.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_82

LANGUAGE: lua
CODE:
```
uv.print_all_handles()                                  *uv.print_all_handles()*
```

LANGUAGE: lua
CODE:
```
uv.print_active_handles()                            *uv.print_active_handles()*
```

----------------------------------------

TITLE: Enabling verbose mode for Verilog indentation debugging
DESCRIPTION: Turns on verbose mode for debugging Verilog indentation issues. Requires setting cmdheight to at least 2 to display debug messages.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
let b:verilog_indent_verbose = 1
```

----------------------------------------

TITLE: Customizing Rust Playpen URL
DESCRIPTION: Overrides the default URL for the Rust Playpen (Rust Playground) service used by the plugin for code sharing and execution.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
let g:rust_playpen_url = 'https://play.rust-lang.org/'
```

----------------------------------------

TITLE: Setting GUI Fonts for UTF-8 in Neovim
DESCRIPTION: Configuration commands for setting both regular and wide fonts in Neovim's GUI to support UTF-8 characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set guifont=-misc-fixed-medium-r-normal-*-18-120-100-100-c-90-iso10646-1
:set guifontwide=-misc-fixed-medium-r-normal-*-18-120-100-100-c-180-iso10646-1
```

----------------------------------------

TITLE: Return Argument Array in Neovim
DESCRIPTION: Using 'nvim__id_array', return the given array argument. Primarily used in testing scenarios, not intended for broad adoption in plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_31

LANGUAGE: Lua
CODE:
```
nvim__id_array\(\{arr\}\)
```

----------------------------------------

TITLE: Updating Event Loop Time in Lua
DESCRIPTION: This function updates the event loop's concept of "now". Libuv caches the current time at the start of the event loop tick to reduce the number of time-related system calls.  Normally, you won't need to call this function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_12

LANGUAGE: lua
CODE:
```
"uv.update_time()                                              *uv.update_time()*\n\n                Update the event loop's concept of \"now\". Libuv caches the\n                current time at the start of the event loop tick in order to\n                reduce the number of time-related system calls.\n\n                You won't normally need to call this function unless you have"
```

----------------------------------------

TITLE: Help File First Line Format - Vim
DESCRIPTION: Demonstrates the required format for the first line of a Vim help file, including tag name and description.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
*plugin_name.txt*	{short description of the plugin}
```

----------------------------------------

TITLE: Removed Deprecated Features and APIs
DESCRIPTION: This section lists deprecated functions and APIs removed from the codebase, urging users to transition to newer alternatives. For instance, `filetype.vim` has been replaced with |vim.filetype|.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_14



----------------------------------------

TITLE: GitHub PR Review Command
DESCRIPTION: Command to checkout a pull request locally using GitHub CLI for code review purposes.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_10

LANGUAGE: bash
CODE:
```
gh pr checkout https://github.com/neovim/neovim/pull/1820
```

----------------------------------------

TITLE: Configuring SDL Syntax Highlighting in Vim
DESCRIPTION: Controls the standard version of SDL syntax highlighting, with options for SDL-2000 case sensitivity and keyword recognition.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_110

LANGUAGE: vim
CODE:
```
let sdl_2000 = 1
let SDL_no_96 = 1
```

----------------------------------------

TITLE: Restoring Old Default Color Scheme in Neovim Init File
DESCRIPTION: Add this line to init.vim to restore the old default color scheme links and colors in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
:colorscheme vim
```

----------------------------------------

TITLE: Manpage Viewer Supports Spaces in Names
DESCRIPTION: The |:Man| command has been modified to correctly handle manpage names that contain spaces, improving usability for users with complex command access.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_9



----------------------------------------

TITLE: Creating an Interface Library in CMake
DESCRIPTION: This snippet defines an interface library named `test_lib`. Interface libraries are used to propagate usage requirements (such as include directories, compile definitions, and linked libraries) to dependent targets.
SOURCE: https://github.com/neovim/neovim/blob/master/test/functional/fixtures/CMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: cmake
CODE:
```
add_library(test_lib INTERFACE)
if(WIN32)
  target_compile_definitions(test_lib INTERFACE MSWIN)
endif()
target_link_libraries(test_lib INTERFACE nvim_bin)
```

----------------------------------------

TITLE: Disabling Perl Support in Neovim
DESCRIPTION: Disables the Perl provider in Neovim by setting the g:loaded_perl_provider variable to 0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:let g:loaded_perl_provider = 0
```

----------------------------------------

TITLE: Creating Aggregate Formatting Target in CMake
DESCRIPTION: Creates a composite target that depends on all formatting targets (C and Lua), allowing all formatting to be run with a single command.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_23

LANGUAGE: cmake
CODE:
```
add_custom_target(format)
add_dependencies(format formatc formatlua)
```

----------------------------------------

TITLE: Enabling Concealment for Public Keyword
DESCRIPTION: Enables concealment for the "pub" token in Rust code, which can reduce visual clutter in files with many public items.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
let g:rust_conceal_pub = 1
```

----------------------------------------

TITLE: Variable Initialization Patterns in C
DESCRIPTION: Examples showing correct and incorrect ways to initialize variables in C, emphasizing declaration and initialization in one line
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_1

LANGUAGE: c
CODE:
```
int i;
i = f();      // ❌: initialization separate from declaration.

int j = g();  // ✅: declaration has initialization.
```

----------------------------------------

TITLE: Building for Older macOS versions
DESCRIPTION: Build Neovim for older macOS versions by setting the deployment target.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_37

LANGUAGE: Shell
CODE:
```
"make CMAKE_BUILD_TYPE=Release MACOSX_DEPLOYMENT_TARGET=10.13 DEPS_CMAKE_FLAGS=\"-DCMAKE_CXX_COMPILER=$(xcrun -find c++)\""
```

----------------------------------------

TITLE: Opening a fold
DESCRIPTION: Opens a closed fold at the cursor position to display the folded text. This is a basic fold operation command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_1

LANGUAGE: vimdoc
CODE:
```
zo
```

----------------------------------------

TITLE: Setting Ruby Host Program Path with rbenv
DESCRIPTION: Sets the path to the Ruby host program using an absolute path with rbenv. This avoids the need to install the neovim gem in every project.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
let g:ruby_host_prog = '~/.rbenv/versions/2.4.1/bin/neovim-ruby-host'
```

----------------------------------------

TITLE: Disabling Quickfix Statusline Configuration in Neovim
DESCRIPTION: This command sets the `g:qf_disable_statusline` variable to `1`, which disables the default configuration for displaying the command that produced the quickfix list in the statusline. It requires the qf plugin to be installed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_32

LANGUAGE: vim
CODE:
```
	:let g:qf_disable_statusline = 1
```

----------------------------------------

TITLE: Using Justification Macros in Vim - Vim
DESCRIPTION: Incorporates a macro package for justifying text within Vim. This requires adding the 'justify' package to provide additional functionality for text formatting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:packadd justify
```

LANGUAGE: vim
CODE:
```
packadd! justify
```

----------------------------------------

TITLE: Configuring CMake Policy and Module Paths
DESCRIPTION: Sets CMake policies, prevents Xcode generator usage, and configures module paths to include custom modules from the project source directory.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_1

LANGUAGE: CMake
CODE:
```
if(POLICY CMP0135)
  cmake_policy(SET CMP0135 NEW)
endif()

if(XCODE)
  message(FATAL_ERROR [[Xcode generator is not supported. Use "Ninja" or "Unix Makefiles" instead]])
endif()

# Point CMake at any custom modules we may ship
list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
```

----------------------------------------

TITLE: Including External Syntax Files in Vim
DESCRIPTION: Examples demonstrating how to include other syntax files and add their items to specific groups
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_171

LANGUAGE: vim
CODE:
```
:runtime! syntax/c.vim
:unlet b:current_syntax
```

----------------------------------------

TITLE: Python Module Loading with Vim Path Finder
DESCRIPTION: This code snippet demonstrates how Neovim handles Python module loading using a custom path finder and loader. It defines classes to locate and load modules from specific directories within the 'runtimepath'. This allows Python code within Neovim to import modules from the correct locations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
"    from imp import find_module, load_module
    import vim
    import sys

    class VimModuleLoader(object):
        def __init__(self, module):
            self.module = module

        def load_module(self, fullname, path=None):
            return self.module

    def _find_module(fullname, oldtail, path):
        idx = oldtail.find('.')
        if idx > 0:
            name = oldtail[:idx]
            tail = oldtail[idx+1:]
            fmr = find_module(name, path)
            module = load_module(fullname[:-len(oldtail)] + name, *fmr)
            return _find_module(fullname, tail, module.__path__)
        else:
            fmr = find_module(fullname, path)
            return load_module(fullname, *fmr)

    # It uses vim module itself in place of VimPathFinder class: it does not
    # matter for python which object has find_module function attached to as
    # an attribute.
    class VimPathFinder(object):
        @classmethod
        def find_module(cls, fullname, path=None):
            try:
                return VimModuleLoader(_find_module(fullname, fullname, path or vim._get_paths()))
            except ImportError:
                return None

        @classmethod
        def load_module(cls, fullname, path=None):
            return _find_module(fullname, fullname, path or vim._get_paths())

    def hook(path):
        if path == vim.VIM_SPECIAL_PATH:
            return VimPathFinder
        else:
            raise ImportError

    sys.path_hooks.append(hook)"
```

----------------------------------------

TITLE: Configuring NeoMutt Log Syntax Highlighting in Vim
DESCRIPTION: Disables the default NeoMutt log colors for syntax highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_88

LANGUAGE: VimScript
CODE:
```
:let g:neolog_disable_default_colors = 1
```

----------------------------------------

TITLE: Core Vim Syntax Control Scripts
DESCRIPTION: Primary scripts that control Vim's syntax highlighting behavior, including syntax.vim for enabling syntax highlighting, manual.vim for manual syntax control, synload.vim for file extension based autoloading, and nosyntax.vim for disabling syntax highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/syntax/README.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
syntax.vim   # Used for the ":syntax on" command
manual.vim   # Used for the ":syntax manual" command
synload.vim  # Contains autocommands for language file loading
nosyntax.vim # Used for the ":syntax off" command
```

----------------------------------------

TITLE: Checking Current Text Width Setting
DESCRIPTION: Displays the current value of the 'textwidth' option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
:set textwidth
```

----------------------------------------

TITLE: Building Bundled Dependencies with CMake
DESCRIPTION: These commands build the bundled dependencies using CMake. It configures the CMake project in the `.deps` directory with the Ninja generator and RelWithDebInfo build type. Then, it builds the dependencies using the configured CMake project.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_14

LANGUAGE: Shell
CODE:
```
"cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build .deps"
```

----------------------------------------

TITLE: String to Float Conversion Example
DESCRIPTION: Shows how to convert string numbers to floating point values, including handling thousands separators.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_254

LANGUAGE: vim
CODE:
```
let f = str2float(substitute(text, ',', '', 'g'))
```

----------------------------------------

TITLE: Special Ex Characters in Vim
DESCRIPTION: Special characters and sequences used in Ex commands for command separation, commenting, file references, and path manipulation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
|           separates two commands (not for ":global" and ":!")
"           begins comment

%           current file name (only where a file name is expected)
#[num]      alternate file name [num] (only where a file name is expected)
<abuf>      buffer number, for use in an autocommand (only where a file name is expected)
<afile>     file name, for use in an autocommand (only where a file name is expected)
<amatch>    what matched with the pattern, for use in an autocommand (only where a file name is expected)
<cword>     word under the cursor (only where a file name is expected)
<cWORD>     WORD under the cursor (only where a file name is expected) (see |WORD|)
<cfile>     file name under the cursor (only where a file name is expected)
<sfile>     file name of a ":source"d file, within that file (only where a file name is expected)

After "%", "#", "<cfile>", "<sfile>" or "<afile>"
:p          full path
:h          head (file name removed)
:t          tail (file name only)
:r          root (extension removed)
:e          extension
:s/{pat}/{repl}/  substitute {pat} with {repl}
```

----------------------------------------

TITLE: Getting libuv Version String in Lua
DESCRIPTION: This function returns the libuv version as a string. The string includes the version suffix for non-release versions. This is useful for displaying the version to the user.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_2

LANGUAGE: lua
CODE:
```
"uv.version_string()                                        *uv.version_string()*\n\n                Returns the libuv version number as a string. For example,\n                this would be \"1.2.3\" in libuv 1.2.3. For non-release\n                versions, the version suffix is included.\n\n                Returns: `string`"
```

----------------------------------------

TITLE: Starting Vim Tutorial
DESCRIPTION: Command to launch the built-in Vim tutorial for new users
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_01.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:Tutor
```

----------------------------------------

TITLE: Platform-Specific Configuration for macOS
DESCRIPTION: Sets macOS deployment target and handles case-insensitive filenames for macOS and Windows platforms.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_7

LANGUAGE: CMake
CODE:
```
if(APPLE)
  # If the macOS deployment target is not set manually (via $MACOSX_DEPLOYMENT_TARGET),
  # fall back to local system version. Needs to be done both here and in cmake.deps.
  if(NOT CMAKE_OSX_DEPLOYMENT_TARGET)
    execute_process(COMMAND sw_vers -productVersion
                    OUTPUT_VARIABLE MACOS_VERSION
                    OUTPUT_STRIP_TRAILING_WHITESPACE)
    set(CMAKE_OSX_DEPLOYMENT_TARGET "${MACOS_VERSION}")
  endif()
  message(STATUS "Using deployment target ${CMAKE_OSX_DEPLOYMENT_TARGET}")
endif()

if(WIN32 OR APPLE)
  # Handle case-insensitive filenames for Windows and Mac.
  set(CASE_INSENSITIVE_FILENAME TRUE)
endif()
```

----------------------------------------

TITLE: Deleting Buffer in BufEnter Autocommand in Vim
DESCRIPTION: Example showing how autocommands continue to execute even after buffer changes. This demonstrates that Vim matches patterns at trigger time and doesn't reconsider after buffer changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_21

LANGUAGE: viml
CODE:
```
au BufEnter *.foo  bdel
au BufEnter *.foo  set modified
```

----------------------------------------

TITLE: Setting Spell Clean Limit in VimScript
DESCRIPTION: Variable declaration to set the time threshold (in seconds) for cleaning spell files. Files modified within this time limit will be skipped during cleanup.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_8

LANGUAGE: viml
CODE:
```
let g:spell_clean_limit = 60 * 60
```

----------------------------------------

TITLE: Setting Thread Affinity in Lua with Libuv
DESCRIPTION: Sets the CPU affinity for a specified thread. Takes a thread object, an affinity table, and an optional flag to return the old affinity settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_59

LANGUAGE: lua
CODE:
```
uv.thread_setaffinity({thread}, {affinity} [, {get_old_affinity}])
```

----------------------------------------

TITLE: Displaying Search History in Vim
DESCRIPTION: This snippet shows how to display the history of search commands (both `/` and `?`) using the `:history /` command. This lists all previously executed search commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
	:history /
```

----------------------------------------

TITLE: Mapping Alt-LeftMouse to Temporarily Disable Mouse in Neovim
DESCRIPTION: Create a mapping that temporarily disables the mouse until the next cursor move in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_7

LANGUAGE: viml
CODE:
```
nnoremap <A-LeftMouse> <Cmd>
    \ set mouse=<Bar>
    \ echo 'mouse OFF until next cursor-move'<Bar>
    \ autocmd CursorMoved * ++once set mouse&<Bar>
    \ echo 'mouse ON'<CR>
```

----------------------------------------

TITLE: Setting Up Man Page Installation in CMake
DESCRIPTION: Configures the installation of Neovim's man page to the system's man directory using the install_helper function.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_24

LANGUAGE: cmake
CODE:
```
install_helper(
  FILES ${CMAKE_SOURCE_DIR}/src/man/nvim.1
  DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
```

----------------------------------------

TITLE: Setting Swap File Directory Configuration
DESCRIPTION: Commands to set custom directory locations for swap files on Unix and Windows systems
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/recover.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set dir=~/tmp
:set dir=c:\\tmp
```

----------------------------------------

TITLE: Moving to the end of a comment (Vim)
DESCRIPTION: This snippet shows how to move forward to the end of a comment using the `]/` command.  This only works for `/* - */` comments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
"]/"
```

----------------------------------------

TITLE: Setting REXX Syntax Synchronization and File Detection
DESCRIPTION: Configures the synchronization start point for REXX files and sets the default filetype for .r files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_107

LANGUAGE: vim
CODE:
```
let rexx_minlines = 50
let g:filetype_r = "r"
```

----------------------------------------

TITLE: Setting Clipboard to Wayclip in Neovim
DESCRIPTION: Forces Neovim to use the waycopy/waypaste clipboard provider, bypassing auto-detection.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
let g:clipboard = 'wayclip'
```

----------------------------------------

TITLE: Custom Font with Spaces
DESCRIPTION: Example showing how to set a font name containing spaces
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_192

LANGUAGE: vim
CODE:
```
:hi comment font='Monospace 10'
```

----------------------------------------

TITLE: Setting Locale in Shell Environment
DESCRIPTION: Commands to set the language locale environment variable in different shell environments (sh and csh).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
setenv LANG ja_JP.EUC
```

----------------------------------------

TITLE: CWEB Filetype Configuration in VimL
DESCRIPTION: Selects the CWEB file type for '*.w' files when automatic detection is unreliable, ensuring that the appropriate syntax is loaded for editing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_20

LANGUAGE: VimL
CODE:
```
:let filetype_w = "cweb"
```

----------------------------------------

TITLE: Cinoptions Indentation Examples - End of Line Braces
DESCRIPTION: Shows indentation patterns when opening brace is at the end of a line using the 'e' cinoption
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_2

LANGUAGE: C
CODE:
```
  if (cond) {
      foo;
  }
  else
  {
      bar;
  }
```

----------------------------------------

TITLE: Getting Context Stack Size - Lua
DESCRIPTION: The ctxsize function returns the current size of the context stack, giving an overview of how many contexts are stored. This is useful for understanding how deep the context management is.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_42

LANGUAGE: lua
CODE:
```
ctxsize()                                                            *ctxsize()*
		Returns the size of the |context-stack|.

		Return: ~
		  (`any`)
```

----------------------------------------

TITLE: Running Specific Unit Test in Neovim
DESCRIPTION: This command allows the user to run a specific unit test by setting the TEST_FILE environment variable to the path of the Lua test file and then invoking the unittest target with make. The command is compatible with both make and cmake build systems.
SOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_5

LANGUAGE: bash
CODE:
```
TEST_FILE=test/unit/foo.lua make unittest
```

LANGUAGE: bash
CODE:
```
cmake -E env "TEST_FILE=test/unit/foo.lua" cmake --build build --target unittest
```

----------------------------------------

TITLE: Setting Vim Modeline for Makefile Syntax
DESCRIPTION: Example of setting a modeline to specify file syntax type in a Makefile
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
# vim: syntax=make
```

----------------------------------------

TITLE: Configuring Java Syntax Synchronization and Preview Features
DESCRIPTION: Sets the number of lines for syntax synchronization and enables preview features for Java syntax highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_68

LANGUAGE: VimScript
CODE:
```
:let g:java_minlines = 50
:let g:java_syntax_previews = [488, 494]
```

----------------------------------------

TITLE: Setting Ruby Host Program with RVM System Ruby
DESCRIPTION: Configures Neovim to use the RVM system Ruby installation for the Ruby host program.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
let g:ruby_host_prog = 'rvm system do neovim-ruby-host'
```

----------------------------------------

TITLE: Netscape Color Configuration
DESCRIPTION: Commands and configuration examples for managing Netscape's color usage to prevent color allocation issues with Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_2

LANGUAGE: shell
CODE:
```
netscape -install
netscape -ncols 64
```

----------------------------------------

TITLE: Binding UDP handle to IP address and port in Lua
DESCRIPTION: Binds the UDP handle to an IP address and port. Optional flags can be set for IPv6 only and address reuse.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_40

LANGUAGE: lua
CODE:
```
uv.udp_bind({udp}, {host}, {port} [, {flags}])
```

----------------------------------------

TITLE: Print Range Examples in Vim
DESCRIPTION: Examples demonstrating line range printing with folded text.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:3,4+2print
:2,4-1print
```

----------------------------------------

TITLE: Nvim Configuration Examples
DESCRIPTION: Example commands showing how to set options and execute commands at startup.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_3

LANGUAGE: shell
CODE:
```
vim  "+set si"  main.c
vim  "+find stdio.h"
vim  -c "set ff=dos"  -c wq  mine.mak
```

----------------------------------------

TITLE: Avoiding Plugin Loading: Vim Script
DESCRIPTION: To prevent the matchit plugin from loading automatically in Vim, the 'loaded_matchit' variable must be defined in the vimrc file. This is done by setting the variable to '1'. It's particularly useful for users who wish to manage their plugins manually or have compatibility concerns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:let loaded_matchit = 1
```

----------------------------------------

TITLE: Performing Bitwise AND Operation in Vimscript
DESCRIPTION: The and() function performs a bitwise AND operation on two number arguments. It converts both arguments to numbers and returns the result.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_3

LANGUAGE: vimscript
CODE:
```
let flag = and(bits, 0x80)
```

----------------------------------------

TITLE: Configuring User Settings for Neovim Build
DESCRIPTION: Sets up user-configurable build settings, particularly the option to ignore SHA verification for dependencies.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_4

LANGUAGE: CMake
CODE:
```
#-------------------------------------------------------------------------------
# User settings
#-------------------------------------------------------------------------------

set(DEPS_IGNORE_SHA FALSE)
```

----------------------------------------

TITLE: Setting Context in Stack - Lua
DESCRIPTION: The ctxset function assigns a specific context to the specified index in the stack. If the index is not provided, it defaults to the top of the stack, making it a flexible tool for state management.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_41

LANGUAGE: lua
CODE:
```
ctxset({context} [, {index}])                                         *ctxset()*
		Sets the |context| at {index} from the top of the
		|context-stack| to that represented by {context}.
		{context} is a Dictionary with context data (|context-dict|).
		If {index} is not given, it is assumed to be 0 (i.e.: top).

		Parameters: ~
		  • {context} (`table`)
		  • {index} (`integer?`)

		Return: ~
		  (`integer`)
```

----------------------------------------

TITLE: Header File Include Pattern for Generated Declarations
DESCRIPTION: Example showing the required pattern for including generated header files in C source and header files
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_3

LANGUAGE: c
CODE:
```
// src/nvim/foo.c file
#include <stddef.h>

typedef int FooType;

#ifdef INCLUDE_GENERATED_DECLARATIONS
# include "foo.c.generated.h"
#endif

…


// src/nvim/foo.h file
#pragma once

…

#ifdef INCLUDE_GENERATED_DECLARATIONS
# include "foo.h.generated.h"
#endif
```

----------------------------------------

TITLE: Disabling Complex LaTeX Syntax Features for Performance with VimL
DESCRIPTION: Setting to completely disable region definitions and synchronization for faster syntax highlighting. This improves performance at the cost of reduced highlighting features.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_137

LANGUAGE: viml
CODE:
```
:let g:tex_fast= ""
```

----------------------------------------

TITLE: Silent Normal Mode Search
DESCRIPTION: Executes a search command in normal mode silently using :silent and :execute commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_6

LANGUAGE: viml
CODE:
```
:silent exe "normal /path\<CR>"
```

----------------------------------------

TITLE: Example C function prototype for popen (C)
DESCRIPTION: This snippet shows the C function prototype for `popen()` as an example of what `:psearch` might find.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_9

LANGUAGE: c
CODE:
```
"FILE	*popen __P((const char *, const char *));"
```

----------------------------------------

TITLE: Function Name Mapping (Vim to Neovim)
DESCRIPTION: This snippet illustrates the mapping of function names between Vim and Neovim, highlighting changes necessary for porting code. It is crucial to update these function calls to maintain functionality in the new environment.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_4

LANGUAGE: C
CODE:
```
"  mb_lefthalve                                        grid_lefthalve
  mb_fix_col                                           grid_fix_col
  utf_off2cells                                       grid_off2cells
  ml_get_curline                                    get_cursor_line_ptr
  ml_get_cursor                                     get_cursor_pos_ptr
  ml_get_curline_len                                get_cursor_line_len
  ml_get_cursor_len                                 get_cursor_pos_len
  screen_char                                             ui_line
  screen_line                                        grid_put_linebuf
  screen_* (most functions)                               grid_*
  update_prepare, update_finish #9484                  removed; use update_screen only
  ARRAY_LENGTH                                          ARRAY_SIZE
  vim_strsave_escape_csi                           vim_strsave_escape_ks
  vim_unescape_csi                                    vim_unescape_ks
  gettail                                                path_tail
  mch_isFullName                                     path_is_absolute
  script_do_profile                                    profile_init"
```

----------------------------------------

TITLE: Enabling Reverse Insert Mode in Vim
DESCRIPTION: This snippet shows how to enable reverse insert mode, which allows typing right-to-left text without fully enabling the 'rightleft' option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/rileft.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
When the 'revins' (reverse insert) option is set,
   inserting happens backwards.  This can be used to type right-to-left
   text.
```

----------------------------------------

TITLE: Platform-Specific Configuration
DESCRIPTION: Sets up platform-specific build configurations, including macOS deployment target handling and Windows-specific dependencies.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/CMakeLists.txt#2025-04-20_snippet_2

LANGUAGE: cmake
CODE:
```
if(APPLE)
  if(NOT CMAKE_OSX_DEPLOYMENT_TARGET)
    execute_process(COMMAND sw_vers -productVersion
                    OUTPUT_VARIABLE MACOS_VERSION
                    OUTPUT_STRIP_TRAILING_WHITESPACE)
    set(CMAKE_OSX_DEPLOYMENT_TARGET "${MACOS_VERSION}")
  endif()
  message(STATUS "Using deployment target ${CMAKE_OSX_DEPLOYMENT_TARGET}")
endif()

if(WIN32)
  include(GetBinaryDeps)

  GetExecutable(TARGET xxd)

  GetBinaryDep(TARGET win32yank_X86_64
    INSTALL_COMMAND ${CMAKE_COMMAND} -E copy win32yank.exe ${DEPS_BIN_DIR})
endif()
```

----------------------------------------

TITLE: Handling Line Continuation in Vim Append Commands
DESCRIPTION: Example of using the 'C' flag in 'cpoptions' to handle line continuation properly with the :append command in Vim scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:set cpo+=C
:1append
\asdf
.
:set cpo-=C
```

----------------------------------------

TITLE: Building Neovim with custom install prefix on MSYS2/MinGW
DESCRIPTION: CMake commands to build Neovim on Windows using MSYS2/MinGW toolchain with a custom installation directory.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_8

LANGUAGE: cmd
CODE:
```
cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo
cmake --build .deps
cmake -B build -G Ninja -D CMAKE_INSTALL_PREFIX=C:\nvim -D CMAKE_BUILD_TYPE=RelWithDebInfo
cmake --build build
```

----------------------------------------

TITLE: File System Open Operation in Lua
DESCRIPTION: Opens a file with specified path, flags and mode. Supports both synchronous and asynchronous operation via callback. Access flags can be string or integer values.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_46

LANGUAGE: lua
CODE:
```
uv.fs_open({path}, {flags}, {mode} [, {callback}])
```

----------------------------------------

TITLE: Configuring Java Syntax Highlighting in Vim
DESCRIPTION: Sets options for Java syntax highlighting, including marking braces in parentheses as errors, highlighting Java lang IDs, and configuring function highlighting styles.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_64

LANGUAGE: VimScript
CODE:
```
:let g:java_mark_braces_in_parens_as_errors = 1
:let g:java_highlight_java_lang_ids = 1
:let g:java_highlight_functions = "indent"
:let g:java_highlight_functions = "style"
:let g:java_highlight_signature = 1
```

----------------------------------------

TITLE: Building msgfmt Executable in CMake
DESCRIPTION: This snippet defines the msgfmt executable, sets its sources, links it with libgettextsrc, and adds dependencies.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_13

LANGUAGE: cmake
CODE:
```
set(msgfmt_SOURCES
  msgfmt.c write-mo.c write-java.c write-csharp.c write-resources.c write-tcl.c
  write-qt.c write-desktop.c write-xml.c
  ../../gettext-runtime/intl/hash-string.c)
PREFIX_LIST_ITEMS(msgfmt_SOURCES "gettext-tools/src/")

add_executable(msgfmt ${msgfmt_SOURCES})
target_link_libraries(msgfmt libgettextsrc)
add_dependencies(msgfmt libgettextsrc libintl)
```

----------------------------------------

TITLE: Custom SpellFileMissing Autocommand
DESCRIPTION: Example of creating a custom autocommand to handle missing spell files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
:au SpellFileMissing * call Download_spell_file(expand('<amatch>'))
```

----------------------------------------

TITLE: Enabling Ruby Classes in Global Scope for Omni Completion
DESCRIPTION: Vim configuration to enable parsing the entire buffer to add classes to Ruby completion results, which is turned off by default.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
let g:rubycomplete_classes_in_global = 1
```

----------------------------------------

TITLE: Setting IA64 Filetype for *.inc Files
DESCRIPTION: This snippet configures Vim to recognize files with the `.inc` extension as IA64 assembly files.  This is done by setting the 'g:filetype_inc' variable to "ia64" in your vimrc file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_59

LANGUAGE: vim
CODE:
```
	:let g:filetype_inc = "ia64"
```

----------------------------------------

TITLE: Implementing Basic Abbreviations in VimScript
DESCRIPTION: This snippet shows how to create basic abbreviations for common typing mistakes. It uses the 'iabbrev' command to define automatic corrections.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_28

LANGUAGE: VimScript
CODE:
```
iabbrev teh the
iabbrev otehr other
iabbrev wnat want
iabbrev synchronisation
    \ synchronization
let s:count = 4
```

----------------------------------------

TITLE: Command Line Abbreviation Example in Neovim
DESCRIPTION: Shows how to use command abbreviations with the :substitute command and set options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:s[ubstitute]
:set autoindent
:set ai
```

----------------------------------------

TITLE: Example .netrc File Configuration for Network Authentication
DESCRIPTION: Format for a .netrc file that stores machine login credentials for automatic authentication with FTP and other network protocols.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_16

LANGUAGE: text
CODE:
```
machine {full machine name} login {user-id} password "{password}"
default login {user-id} password "{password}"
```

----------------------------------------

TITLE: Configuring Neovim Version Information
DESCRIPTION: Sets version numbers for Neovim, including major, minor, patch versions, and API compatibility levels for plugin developers.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_9

LANGUAGE: CMake
CODE:
```
# If not in a git repo (e.g., a tarball) these tokens define the complete
# version string, else they are combined with the result of `git describe`.
set(NVIM_VERSION_MAJOR 0)
set(NVIM_VERSION_MINOR 12)
set(NVIM_VERSION_PATCH 0)
set(NVIM_VERSION_PRERELEASE "-dev") # for package maintainers

# API level
set(NVIM_API_LEVEL 14)        # Bump this after any API/stdlib change.
set(NVIM_API_LEVEL_COMPAT 0)  # Adjust this after a _breaking_ API change.
set(NVIM_API_PRERELEASE true)
```

----------------------------------------

TITLE: Bitwise XOR Operation in Vim
DESCRIPTION: Example of using the xor() function to perform a bitwise XOR operation on a number.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_296

LANGUAGE: vim
CODE:
```
let bits = xor(bits, 0x80)
```

----------------------------------------

TITLE: Hexadecimal Comparisons in Lua
DESCRIPTION: This snippet provides examples of safe comparisons of bitwise operations with hexadecimal literals in Lua. It advises against using hex literals larger than a signed 32-bit integer and suggests converting them using bit.tobit() for accurate comparisons across platforms.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_6

LANGUAGE: lua
CODE:
```
        bit.bor(x, 1) == bit.tobit(0xffffffff)
```

----------------------------------------

TITLE: Selecting Euphoria Version for Syntax Highlighting
DESCRIPTION: Configures Vim to use either Euphoria 3 or Euphoria 4 syntax highlighting for Euphoria files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_30

LANGUAGE: VimScript
CODE:
```
let g:filetype_euphoria = "euphoria3"
" or
let g:filetype_euphoria = "euphoria4"
```

----------------------------------------

TITLE: Setting Custom Spell File URL
DESCRIPTION: Configuration for customizing the spell file download location using a different URL.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
let g:spellfile_URL = 'https://ftp.nluug.nl/vim/runtime/spell'
```

----------------------------------------

TITLE: Enabling Plugins in Neovim Configuration
DESCRIPTION: Basic configuration to enable plugins and Netrw functionality in Vim/Neovim. Sets non-compatible mode and enables filetype plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_0

LANGUAGE: vimscript
CODE:
```
set nocp                    " 'compatible' is not set
filetype plugin on          " plugins are enabled
```

----------------------------------------

TITLE: Disabling Inform Library Symbol Highlighting
DESCRIPTION: This snippet demonstrates how to disable highlighting of Inform Library symbols.  The 'inform_highlight_simple' variable is set to 1 in your Vim startup file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_60

LANGUAGE: vim
CODE:
```
	:let inform_highlight_simple=1
```

----------------------------------------

TITLE: Vim Text Change Command Example
DESCRIPTION: Example of a Vim mapping command that modifies the behavior of 'cw' to include trailing whitespace when changing a word.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:map cw dwi
```

----------------------------------------

TITLE: OpenBSD CMake Build Instructions
DESCRIPTION: These commands create necessary directories, configure cmake and build neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_32

LANGUAGE: Shell
CODE:
```
"mkdir .deps\ncd .deps\ncmake ../cmake.deps/\ngmake\ncd ..\nmkdir build\ncd build\ncmake ..\ngmake"
```

----------------------------------------

TITLE: Setting Include Directories for Gettext Tools in CMake
DESCRIPTION: This snippet sets the include directories for the msgmerge, msgfmt, xgettext, and libgettextsrc targets.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_15

LANGUAGE: cmake
CODE:
```
set_property(TARGET msgmerge msgfmt xgettext libgettextsrc APPEND PROPERTY
  INCLUDE_DIRECTORIES
    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-runtime/intl
    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-tools/libgettextpo
    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-tools/gnulib-lib
    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-tools/gnulib-lib/libcroco
    ${CMAKE_CURRENT_SOURCE_DIR}/build-aux/snippet
    ${CMAKE_CURRENT_SOURCE_DIR}/libtextstyle/lib
    ${CMAKE_CURRENT_SOURCE_DIR}/libtextstyle/lib/libcroco
    ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl
    ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools
    ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/gnulib-lib
    ${CMAKE_CURRENT_BINARY_DIR}/libtextstyle/lib
    ${CMAKE_CURRENT_BINARY_DIR}/libtextstyle/lib/textstyle
    ${LIBICONV_INCLUDE_DIRS})
```

----------------------------------------

TITLE: Mapping SpecChangelog Command in Vim
DESCRIPTION: Default mapping provided by the spec_chglog plugin that binds the SpecChangelog functionality to the LocalLeader+c key combination in spec files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
:map <buffer> <LocalLeader>c <Plug>SpecChangelog
```

----------------------------------------

TITLE: Removing Default Popup Menu in Neovim
DESCRIPTION: Remove the default popup menu without disabling the mouse in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_8

LANGUAGE: viml
CODE:
```
aunmenu PopUp
autocmd! nvim.popupmenu
```

----------------------------------------

TITLE: Accessing Dictionary Entries in Vim
DESCRIPTION: Shows different ways to access and modify dictionary entries using bracket notation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_45

LANGUAGE: vim
CODE:
```
:let val = mydict["one"]
:let mydict["four"] = 4
```

----------------------------------------

TITLE: Character Mapping Table - Latin, Greek and Cyrillic Letters
DESCRIPTION: A structured mapping between Unicode characters and their input sequences. Each line contains the character, its input combination, Unicode hex code, decimal code, and description.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/digraph.txt#2025-04-20_snippet_4

LANGUAGE: txt
CODE:
```
ű	u"	0171	0369	LATIN SMALL LETTER U WITH DOUBLE ACUTE
Ų	U;	0172	0370	LATIN CAPITAL LETTER U WITH OGONEK
ų	u;	0173	0371	LATIN SMALL LETTER U WITH OGONEK
Ŵ	W>	0174	0372	LATIN CAPITAL LETTER W WITH CIRCUMFLEX
```

----------------------------------------

TITLE: Running Release Script for Neovim
DESCRIPTION: This command runs the release script for Neovim, which requires the git cliff tool. It is used to generate release notes and update release assets.
SOURCE: https://github.com/neovim/neovim/blob/master/MAINTAIN.md#2025-04-20_snippet_0

LANGUAGE: bash
CODE:
```
./scripts/release.sh
```

----------------------------------------

TITLE: Enabling Groff Features in NROFF Syntax
DESCRIPTION: Activates extra syntax highlighting features for GNU groff in NROFF files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_90

LANGUAGE: vim
CODE:
```
:let nroff_is_groff = 1
```

----------------------------------------

TITLE: Displaying a Manpage with Vertical Split in Neovim
DESCRIPTION: This command uses the `:Man` command with the `:vertical` modifier to display the manpage for `printf` in a vertical split window. It requires Neovim and the `Man` command, which is part of the manpage plugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
":vertical Man printf"
```

----------------------------------------

TITLE: Running Specific Functional Test in Neovim
DESCRIPTION: Similar to the unit test command, this allows the user to run a specific functional test by setting the TEST_FILE environment variable. It supports both make and cmake.
SOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_6

LANGUAGE: bash
CODE:
```
TEST_FILE=test/functional/foo.lua make functionaltest
```

LANGUAGE: bash
CODE:
```
cmake -E env "TEST_FILE=test/functional/foo.lua" cmake --build build --target functionaltest
```

----------------------------------------

TITLE: Disabling Scroll Binding in Diff Mode
DESCRIPTION: Shows how to temporarily disable scroll binding between diff windows, allowing independent scrolling.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
:set noscrollbind
```

----------------------------------------

TITLE: Character to Number Conversion Examples in Vim
DESCRIPTION: Demonstrates char2nr() function usage to convert characters to their numeric ASCII/Unicode values.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_30

LANGUAGE: vim
CODE:
```
echo char2nr(" ")	" returns 32
echo char2nr("ABC")	" returns 65
echo char2nr("á")	" returns 225
echo char2nr("á"[0])	" returns 195
echo char2nr("\<M-x>")	" returns 128
```

----------------------------------------

TITLE: Deterministic Code Generation Improvements
DESCRIPTION: Several enhancements have been made to the code generation scripts to increase determinism. Additionally, a new build parameter, `LUA_GEN_PRG`, has been introduced to resolve some issues related to reproducibility.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_13



----------------------------------------

TITLE: Disabling VHDL generic/port mapping alignment
DESCRIPTION: Turns off the default alignment of generic/port mapping statements in VHDL. By default, these statements are aligned for better readability.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
let g:vhdl_indent_genportmap = 0
```

----------------------------------------

TITLE: Uninstalling Neovim
DESCRIPTION: Commands to uninstall Neovim using CMake target or manual removal of installed files.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_11

LANGUAGE: sh
CODE:
```
sudo cmake --build build/ --target uninstall
```

----------------------------------------

TITLE: Configuring Bundled Busted Testing Framework in CMake
DESCRIPTION: Sets up the option to use a bundled version of the Busted testing framework for Lua, with the ability to toggle between bundled and system versions.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_30

LANGUAGE: cmake
CODE:
```
option(USE_BUNDLED_BUSTED "Use bundled busted" ON)
if(USE_BUNDLED_BUSTED)
  get_externalproject_options(lua_dev_deps ${DEPS_IGNORE_SHA})
  ExternalProject_Add(lua_dev_deps
    DOWNLOAD_DIR ${DEPS_DOWNLOAD_DIR}/lua_dev_deps
    SOURCE_DIR ${DEPS_SHARE_DIR}
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
    EXCLUDE_FROM_ALL TRUE
    ${EXTERNALPROJECT_OPTIONS})
else()
  add_custom_target(lua_dev_deps)
endif()
```

----------------------------------------

TITLE: Configuring LPC Syntax Highlighting in Vim
DESCRIPTION: Sets options for LPC (Lars Pensjö C) syntax highlighting, including recognizing .c files as LPC and setting compatibility options for different LPC versions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_78

LANGUAGE: VimScript
CODE:
```
:let lpc_syntax_for_c = 1

:let lpc_pre_v22 = 1

:let lpc_compat_32 = 1

:let lpc_use_lpc4_syntax = 1
```

----------------------------------------

TITLE: Selectively Enabling LaTeX Syntax Features with VimL
DESCRIPTION: Configuration to selectively enable specific LaTeX syntax highlighting features. Each letter represents a different feature that can be enabled independently.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_138

LANGUAGE: viml
CODE:
```
let g:tex_fast= "M"
```

----------------------------------------

TITLE: OpenBSD Build Prerequisites
DESCRIPTION: Installs the necessary packages on OpenBSD systems to build Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_31

LANGUAGE: Shell
CODE:
```
"doas pkg_add gmake cmake curl gettext-tools"
```

----------------------------------------

TITLE: Installing Neovim on Ubuntu - Basic
DESCRIPTION: Commands to install Neovim and Python support on Ubuntu using apt package manager.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_8

LANGUAGE: sh
CODE:
```
sudo apt install neovim
sudo apt install python3-neovim
```

----------------------------------------

TITLE: Customizing Netrw File Marking Highlight Group in VimL
DESCRIPTION: Commands to change the highlighting for marked files in Netrw. By default, marked files use the 'netrwMarkFile' group linked to 'Identifier', but this can be customized by clearing the default and linking to a different highlighting group.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_30

LANGUAGE: viml
CODE:
```
highlight clear netrwMarkFile
hi link netrwMarkFile ..whatever..
```

----------------------------------------

TITLE: Installing Neovim via Snap - Nightly
DESCRIPTION: Command to install the nightly (edge) version of Neovim using Snap package manager.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_7

LANGUAGE: sh
CODE:
```
sudo snap install --edge nvim --classic
```

----------------------------------------

TITLE: Vim Help File Format Definition
DESCRIPTION: Vim modeline configuration defining the help file format settings, including text width, tab stops, file type, and line wrapping options
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_88

LANGUAGE: vimdoc
CODE:
```
vim:tw=78:ts=8:noet:ft=help:norl:
```

----------------------------------------

TITLE: Lua Function Documentation Template
DESCRIPTION: Template showing the standard format for documenting Lua functions using LuaLS annotations, including brief description, detailed explanation, parameter types, and return values.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_8

LANGUAGE: lua
CODE:
```
--- {Brief}
---
--- {Long explanation}
---
--- @param arg1 type {description}
--- @param arg2 type {description}
--- ...
---
--- @return type {description}
```

----------------------------------------

TITLE: Checking for shellslash Support in Vim
DESCRIPTION: Code snippet to check if the 'shellslash' option is available in the current Vim/Neovim instance. This is useful for cross-platform scripts as 'shellslash' only works on systems where backslash can be used as a path separator.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_63

LANGUAGE: vim
CODE:
```
if exists('+shellslash')
```

----------------------------------------

TITLE: Enabling TeX Syntax Folding
DESCRIPTION: Setting a variable to enable syntax-based folding for TeX/LaTeX documents, which will fold parts, chapters, sections, etc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_130

LANGUAGE: vim
CODE:
```
let g:tex_fold_enabled=1
```

----------------------------------------

TITLE: Configuring auto-pairs for Rust (Vim)
DESCRIPTION: This global variable controls whether the plugin overrides the default behavior of the auto-pairs plugin for Rust files. Setting it to 1 disables the override, preserving the default auto-pairs configuration.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_26

LANGUAGE: vim
CODE:
```
                                                  *g:rust_keep_autopairs_default*
g:rust_keep_autopairs_default ~

	Don't override auto-pairs default for the Rust filetype. The default
	is 0.
```

----------------------------------------

TITLE: Defining Source Files for Gettext Tools Components in CMake
DESCRIPTION: Defines sets of source files for the Gettext tools components, including common sources, format-specific sources, and the main gettextsrc library. These provide the implementation for translation file manipulation tools.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_7

LANGUAGE: cmake
CODE:
```
set(libgettextsrc_COMMON_SOURCE
  message.c po-error.c po-xerror.c read-catalog-abstract.c po-lex.c
  po-gram-gen.c po-charset.c read-po.c read-properties.c read-stringtable.c
  open-catalog.c dir-list.c str-list.c)

set(libgettextsrc_FORMAT_SOURCE
  format.c format-invalid.h format-c.c format-c-parse.h format-sh.c
  format-python.c format-python-brace.c format-lisp.c format-elisp.c
  format-librep.c format-scheme.c format-java.c format-csharp.c format-awk.c
  format-pascal.c format-ycp.c format-tcl.c format-perl.c format-perl-brace.c
  format-php.c format-gcc-internal.c format-gfc-internal.c format-qt.c
  format-qt-plural.c format-kde.c format-kde-kuit.c format-boost.c format-lua.c
  format-javascript.c)

set(libgettextsrc_SOURCES
  ${libgettextsrc_COMMON_SOURCE} read-catalog.c
  write-catalog.c write-properties.c write-stringtable.c write-po.c
  msgl-ascii.c msgl-iconv.c msgl-equal.c msgl-cat.c msgl-header.c msgl-english.c
  msgl-check.c file-list.c msgl-charset.c po-time.c plural-exp.c plural-eval.c
  plural-table.c quote.h sentence.h sentence.c
  ${libgettextsrc_FORMAT_SOURCE}
  read-desktop.c locating-rule.c its.c search-path.c)
PREFIX_LIST_ITEMS(libgettextsrc_SOURCES "gettext-tools/src/")
```

----------------------------------------

TITLE: Configuring FTP Command with Passive Mode in Vim Script
DESCRIPTION: Sets the global variable for the FTP command, including the passive mode option.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_18

LANGUAGE: Vim script
CODE:
```
let g:netrw_ftp_cmd= "ftp -p"
```

----------------------------------------

TITLE: Adding Subdirectories to CMake Build
DESCRIPTION: Includes subdirectories in the CMake build process, such as the core Neovim source, configuration, runtime files, and tests.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_26

LANGUAGE: cmake
CODE:
```
add_subdirectory(src/nvim)
add_subdirectory(cmake.config)
add_subdirectory(runtime)
add_subdirectory(test)
```

----------------------------------------

TITLE: Getting Thread Priority in Lua with Libuv
DESCRIPTION: Retrieves the scheduling priority of a specified thread. The returned priority value is platform-dependent.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_63

LANGUAGE: lua
CODE:
```
uv.thread_getpriority({thread})
```

----------------------------------------

TITLE: Nested List Creation in Vimscript
DESCRIPTION: This snippet shows how to create nested lists in Vimscript.  A nested list is created by using a list as an item within another list. This allows for multi-dimensional data structures.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
	:let nestlist = [[11, 12], [21, 22], [31, 32]]
```

----------------------------------------

TITLE: Configuring Lua Language Server Download in CMake
DESCRIPTION: Sets up variables for downloading a specific version of the Lua Language Server from GitHub, including version, architecture, and URL configuration.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_32

LANGUAGE: cmake
CODE:
```
set(LUALS_VERSION 3.14.0)
set(LUALS "lua-language-server-${LUALS_VERSION}-${CMAKE_SYSTEM_NAME}-${LUALS_ARCH}")
set(LUALS_TARBALL ${LUALS}.tar.gz)
set(LUALS_URL https://github.com/LuaLS/lua-language-server/releases/download/${LUALS_VERSION}/${LUALS_TARBALL})
```

----------------------------------------

TITLE: Changing Current Working Directory in Lua with Libuv
DESCRIPTION: Changes the current working directory to the specified path.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_72

LANGUAGE: lua
CODE:
```
uv.chdir({cwd})
```

----------------------------------------

TITLE: Filetype Detection (Lua)
DESCRIPTION: This snippet highlights how filetype detection in Neovim is implemented using Lua tables within `$VIMRUNTIME/lua/vim/filetype.lua`.  It describes the order of precedence (filename, pattern, extension) and the differences in pattern matching, using Lua patterns instead of Vim regexes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_7

LANGUAGE: Lua
CODE:
```
"Nvim's filetype detection behavior matches Vim, but is implemented as part of
|vim.filetype| (see `$VIMRUNTIME/lua/vim/filetype.lua`). The logic is encoded in
three tables, listed in order of precedence (the first match is returned):
1. `filename` for literal full path or basename lookup;
2. `pattern` for matching filenames or paths against |lua-patterns|, optimized
   for fast lookup;
3. `extension` for literal extension lookup.

Logic that requires checking file contents or buffer variables is implemented
in `$VIMRUNTIME/lua/vim/filetype/detect.lua`."
```

----------------------------------------

TITLE: Checking for _BitScanForward64 function in C
DESCRIPTION: Tests if the compiler supports the _BitScanForward64 intrinsic function from intrin.h, which is typically available on Windows platforms for bit manipulation.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_4

LANGUAGE: C
CODE:
```
#include <intrin.h>

int main(void)
{
  unsigned long index;
  unsigned char mask = 0x8000;
  _BitScanForward64(&index, mask);
  return 0;
}
```

----------------------------------------

TITLE: File Truncate Operation in libuv
DESCRIPTION: Truncates a file to a specified length. Equivalent to ftruncate(2) system call. Takes a file descriptor and offset.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_54

LANGUAGE: lua
CODE:
```
uv.fs_ftruncate({fd}, {offset} [, {callback}])
```

----------------------------------------

TITLE: Getting Free System Memory in Lua with Libuv
DESCRIPTION: Returns the amount of free system memory in bytes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_76

LANGUAGE: lua
CODE:
```
uv.get_free_memory()
```

----------------------------------------

TITLE: Other comment examples in Vim
DESCRIPTION: This snippet shows more comment examples to demonstrate how to set comments with different flags. It includes examples for lines starting with "*", ">", and "- " with different flags. It uses "b:" to avoid pointer dereference and "n:" to manage nested comments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
   "b:*"	Includes lines starting with "*", but not if the "*" is
		followed by a non-blank.  This avoids a pointer dereference
		like "*str" to be recognized as a comment.
   "n:>"	Includes a line starting with ">", ">>">, ">>>", etc.
   "fb:-"	Format a list that starts with "- ".

```

----------------------------------------

TITLE: Setting Local Leader for Plugin Mappings
DESCRIPTION: Configuration to set custom local leader key for filetype plugin mappings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
let maplocalleader = ","
```

----------------------------------------

TITLE: Setting Build Output Directory and .gitignore Configuration
DESCRIPTION: Creates a .gitignore file in the build directory when out-of-source builds are used, which helps keep the build directory clean in version control.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_3

LANGUAGE: CMake
CODE:
```
if(NOT PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)
  # Auto-create a .gitignore in the specified "build" directory.
  file(GENERATE OUTPUT .gitignore CONTENT "*")
endif()
```

----------------------------------------

TITLE: macOS Homebrew Build Prerequisites
DESCRIPTION: Installs the necessary packages on macOS systems using Homebrew to build Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_33

LANGUAGE: Shell
CODE:
```
"brew install ninja cmake gettext curl"
```

----------------------------------------

TITLE: Finding only macros defined with #define (Vim)
DESCRIPTION: This snippet shows how to find only macros defined with `#define` using the `[D` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_32

LANGUAGE: vim
CODE:
```
"[D"
```

----------------------------------------

TITLE: Terminal-Dependent Settings Configuration
DESCRIPTION: Example configuration for setting terminal-specific options based on $TERM environment variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
if $TERM =~ '^\(rxvt\|screen\|interix\|putty\)\(-.*\)\?$'
    set notermguicolors
elseif $TERM =~ '^\(tmux\|iterm\|vte\|gnome\)\(-.*\)\?$'
    set termguicolors
elseif $TERM =~ '^\(xterm\)\(-.*\)\?$'
    if $XTERM_VERSION != ''
        set termguicolors
    elseif $KONSOLE_PROFILE_NAME != ''
        set termguicolors
    elseif $VTE_VERSION != ''
        set termguicolors
    else
        set notermguicolors
    endif
elseif $TERM =~ ...
    ... and so forth ...
endif
```

----------------------------------------

TITLE: Configuring Vim Manual Display Settings in Vim
DESCRIPTION: Commands to make help file markup visible by disabling concealment and adjusting highlighting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_01.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:set conceallevel=0
:hi link HelpBar Normal
:hi link HelpStar Normal
```

----------------------------------------

TITLE: Setting LC_CTYPE Environment Variable
DESCRIPTION: Shell command example for setting the LC_CTYPE environment variable to support UTF-8 character encoding.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/digraph.txt#2025-04-20_snippet_3

LANGUAGE: shell
CODE:
```
setenv LC_CTYPE en_US.utf8
```

----------------------------------------

TITLE: Cursor Position Mapping Examples in Vim
DESCRIPTION: Three different ways to map the GG key to display the screen column position using screencol()
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_212

LANGUAGE: vim
CODE:
```
nnoremap <expr> GG ":echom " .. screencol() .. "\n"
nnoremap <silent> GG :echom screencol()<CR>
noremap GG <Cmd>echom screencol()<CR>
```

----------------------------------------

TITLE: Disabling Hare Recommended Style
DESCRIPTION: Configuration to disable the default Hare style guide settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_hare.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
let g:hare_recommended_style = 0
```

----------------------------------------

TITLE: Rust Plugin Mappings (Vim)
DESCRIPTION: This section mentions that the plugin defines mappings for [[ and ]] to support hanging indents.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_33

LANGUAGE: vim
CODE:
```
This plugin defines mappings for |[[| and |]]| to support hanging indents.
```

----------------------------------------

TITLE: Running Specific Test Function Example
DESCRIPTION: Example command showing how to run a specific test function (open_delay) from the test_channel.vim file.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/README.txt#2025-04-20_snippet_2

LANGUAGE: bash
CODE:
```
../vim -u NONE -S runtest.vim test_channel.vim open_delay
```

----------------------------------------

TITLE: Enabling Spell Checking in Verbatim Zones for LaTeX with VimL
DESCRIPTION: Configuration to enable spell checking in verbatim zones of LaTeX documents. By default, verbatim zones (often used for source code) are not spell-checked.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_134

LANGUAGE: viml
CODE:
```
let g:tex_verbspell= 1
```

----------------------------------------

TITLE: Setting LITE Syntax Highlighting Options in Vim
DESCRIPTION: Configures options for LITE syntax highlighting, including SQL syntax highlighting in strings and setting the minimum number of lines for syncing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_77

LANGUAGE: VimScript
CODE:
```
:let lite_sql_query = 1

:let lite_minlines = 200
```

----------------------------------------

TITLE: Highlight Attribute Definition in Neovim JSON
DESCRIPTION: This snippet allows the definition of highlight attributes in Neovim, providing a framework for customizing the visual presentation of text within the editor.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_5

LANGUAGE: json
CODE:
```
["hl_attr_define", id, rgb_attr, cterm_attr, info] ~
	Add a highlight with `id` to the highlight table, with the
attributes specified by the `rgb_attr` and `cterm_attr` dicts, with the
following (all optional) keys.
```

----------------------------------------

TITLE: Calculating Arc Sine in Vimscript
DESCRIPTION: The asin() function returns the arc sine of a number in radians. It accepts inputs in the range [-1, 1] and returns a float in the range [-pi/2, pi/2].
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_8

LANGUAGE: vimscript
CODE:
```
echo asin(0.8)
```

LANGUAGE: vimscript
CODE:
```
echo asin(-0.5)
```

----------------------------------------

TITLE: Initializing Struct with `memset` and Struct Type
DESCRIPTION: This code snippet shows the use of `memset` with a struct type to initialize all members of the struct to zero. Using the struct type in `sizeof` ensures that the correct size is set with null bytes, which is useful for preparing struct for new data input.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_6

LANGUAGE: C
CODE:
```
memset(&data, 0, sizeof(Struct));
```

----------------------------------------

TITLE: Configuring XML Syntax Highlighting in Vim
DESCRIPTION: Sets options for XML syntax highlighting, including namespace transparency and syntax folding.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_153

LANGUAGE: vim
CODE:
```
:let g:xml_namespace_transparent=1

:let g:xml_syntax_folding = 1
:set foldmethod=syntax
```

----------------------------------------

TITLE: Disabling Query Linting in Neovim (Lua)
DESCRIPTION: This snippet disables query linting completely by setting `vim.g.query_lint_on` to an empty table.  This prevents linting from occurring on any event. Requires treesitter and the query plugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_31

LANGUAGE: lua
CODE:
```
	vim.g.query_lint_on = {}
```

----------------------------------------

TITLE: Lua Printing with Null Character
DESCRIPTION: Demonstrates how Lua printing handles null characters differently in Neovim compared to Vim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_10

LANGUAGE: lua
CODE:
```
:lua print("a\0b")
```

----------------------------------------

TITLE: Setting Up Uninstallation Target in CMake
DESCRIPTION: Creates an uninstall target that uses a helper script to remove installed files, providing a clean way to remove Neovim from the system.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_27

LANGUAGE: cmake
CODE:
```
add_custom_target(uninstall
  COMMAND ${CMAKE_COMMAND} -P ${PROJECT_SOURCE_DIR}/cmake/UninstallHelper.cmake)
```

----------------------------------------

TITLE: Vim Version Conditional Examples
DESCRIPTION: Demonstrates version-specific code execution using if statements
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_101

LANGUAGE: vim
CODE:
```
:if version >= 500
:  version-5-specific-commands
:endif

:if version >= 600
:  execute "silent 1,$delete"
:endif
```

----------------------------------------

TITLE: Vim Configuration (Vim)
DESCRIPTION: This snippet sets various Vim settings specific for help files, including text width, tab settings, file type, and more.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_34

LANGUAGE: vim
CODE:
```
vim:tw=78:sw=4:noet:ts=8:ft=help:norl:
```

----------------------------------------

TITLE: Enabling Multiple Folding Types for Shell Scripts
DESCRIPTION: Setting the shell folding option to 3 to enable both function and heredoc folding in shell scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_123

LANGUAGE: vim
CODE:
```
let g:sh_fold_enabled= 3
```

----------------------------------------

TITLE: Building with Makefile and Specific Bundled Dependencies
DESCRIPTION: This shows how to build Neovim using Make and CMake flags for configuring specific bundled dependencies.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_19

LANGUAGE: Shell
CODE:
```
"make BUNDLED_CMAKE_FLAG=\"-DUSE_BUNDLED=OFF -DUSE_BUNDLED_LUV=ON -DUSE_BUNDLED_TS=ON -DUSE_BUNDLED_LIBUV=ON\""
```

----------------------------------------

TITLE: Installing Build Dependencies with Ninja
DESCRIPTION: Commands for installing and using ninja build system for faster Neovim builds.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_0

LANGUAGE: bash
CODE:
```
sudo apt-get install ninja-build
make distclean
make  # Nvim build system uses ninja automatically, if available.
```

----------------------------------------

TITLE: Setting Sign Column Color in Vim
DESCRIPTION: Example showing how to set the background color of the sign column using the SignColumn highlight group
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:highlight SignColumn guibg=darkgrey
```

----------------------------------------

TITLE: Navigating to Location List Error Above Current Line
DESCRIPTION: Command for going to the error above the current line in the current buffer from the location list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:[count]lab[ove]
```

----------------------------------------

TITLE: Defining Ruby Function in Vim Script
DESCRIPTION: Shows how to define a Vim function that includes Ruby code using a heredoc syntax. The Ruby code defines a Garnet class that interacts with the Vim buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_ruby.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
function! RedGem()
ruby << EOF
class Garnet
	def initialize(s)
		@buffer = VIM::Buffer.current
		vimputs(s)
	end
	def vimputs(s)
		@buffer.append(@buffer.count,s)
	end
end
gem = Garnet.new("pretty")
EOF
endfunction
```

----------------------------------------

TITLE: Vim Exit Command
DESCRIPTION: Shows how to quit Vim without saving changes using the force quit command
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:q!
```

----------------------------------------

TITLE: Configuring makeprg with LaTeX
DESCRIPTION: Sets the makeprg option to run LaTeX with nonstopmode and input parameters, using '$*' as a placeholder for arguments that will be passed to the :make command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_49

LANGUAGE: viml
CODE:
```
set makeprg=latex\ \\nonstopmode\ \\input\{$*}
```

----------------------------------------

TITLE: Including External Syntax Files in Vim
DESCRIPTION: Example of including an existing syntax file and extending it with additional definitions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
:runtime! syntax/c.vim
:syntax keyword cppStatement new delete this friend using
```

----------------------------------------

TITLE: Defining and Building libintl Sources in CMake
DESCRIPTION: Defines the source files for the libintl library, adds the required path prefix to each source file, creates the library target, and sets up compilation properties. This library provides the core internationalization functions.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_5

LANGUAGE: cmake
CODE:
```
set(libintl_SOURCES
  bindtextdom.c dcgettext.c dcigettext.c dcngettext.c dgettext.c dngettext.c
  explodename.c finddomain.c gettext.c hash-string.c intl-compat.c l10nflist.c
  langprefs.c loadmsgcat.c localcharset.c localealias.c localename-table.c
  localename.c lock.c log.c ngettext.c osdep.c
  plural-exp.c plural.c printf.c relocatable.c setlocale.c textdomain.c
  threadlib.c version.c xsize.c)

PREFIX_LIST_ITEMS(libintl_SOURCES "gettext-runtime/intl/")

add_library(libintl ${libintl_SOURCES})
target_link_libraries(libintl ${LIBICONV_LIBRARIES})
set_property(TARGET libintl APPEND PROPERTY INCLUDE_DIRECTORIES
  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime
  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl
  ${LIBICONV_INCLUDE_DIRS})
set_property(TARGET libintl APPEND PROPERTY COMPILE_DEFINITIONS
  BUILDING_LIBINTL
  IN_LIBINTL
  ENABLE_RELOCATABLE=1
  IN_LIBRARY
  NO_XMALLOC
  set_relocation_prefix=libintl_set_relocation_prefix
  relocate=libintl_relocate
  HAVE_CONFIG_H)
```

----------------------------------------

TITLE: Java Method Structure Example
DESCRIPTION: Example Java code structure showing class and method definitions used to demonstrate method navigation commands [m, ]m, [M, and ]M.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_8

LANGUAGE: java
CODE:
```
// comment
class foo {
    int method_one() {
        body_one();
    }
    int method_two() {
        body_two();
    }
}
```

----------------------------------------

TITLE: Setting Vietnamese Language for Neovim Messages
DESCRIPTION: Commands to change the language of Neovim messages to Vietnamese. This enables localization of the Neovim interface.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vietnamese.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:language vi_VN
```

LANGUAGE: vim
CODE:
```
:language vi_VN.utf-8
```

----------------------------------------

TITLE: Enabling Syntax-Based Folding for ZSH Files in Vim
DESCRIPTION: Activates syntax-based folding for ZSH files in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_156

LANGUAGE: vim
CODE:
```
:let g:zsh_fold_enable = 1
```

----------------------------------------

TITLE: Echoing Messages with Highlighting in Vim Script
DESCRIPTION: Demonstrates how to echo a message with custom highlighting using echohl command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_108

LANGUAGE: vim
CODE:
```
:echohl WarningMsg | echo "Don't panic!" | echohl None
```

----------------------------------------

TITLE: Comparing List Values in Vim
DESCRIPTION: Demonstrates that list comparison in Vim is stricter than number/string comparison, with no automatic type conversion.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
:echo alist == blist
```

----------------------------------------

TITLE: Defining a PREFIX_LIST_ITEMS Macro in CMake
DESCRIPTION: A CMake macro that adds a prefix to each item in a list. It takes a list variable name and a prefix string as parameters, and modifies the list in-place by adding the prefix to each item.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_1

LANGUAGE: cmake
CODE:
```
# Adds PREFIX to each item in LIST
macro(PREFIX_LIST_ITEMS LIST PREFIX)
  string(REPLACE ";" ";${PREFIX}" ${LIST} ";${${LIST}}")
endmacro()
```

----------------------------------------

TITLE: Force String to Number Conversion in Vimscript
DESCRIPTION: This shows how to force a string to be interpreted as a number by adding zero to it. This prevents a leading zero from being interpreted as an octal number.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
	:echo "0100" + 0
```

----------------------------------------

TITLE: Querying CPU Information with LibUV in Lua
DESCRIPTION: Functions for obtaining information about system CPUs, including parallelism, detailed CPU info, and CPU mask size.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_79

LANGUAGE: lua
CODE:
```
uv.available_parallelism()                          *uv.available_parallelism()*
```

LANGUAGE: lua
CODE:
```
uv.cpu_info()                                                    *uv.cpu_info()*
```

LANGUAGE: lua
CODE:
```
uv.cpumask_size()                                           *uv.cpumask_size()*
```

----------------------------------------

TITLE: NixOS/Nix Neovim Development Configuration
DESCRIPTION: This Nix expression overrides the default Neovim package to enable tests, set debug build type, add valgrind, and set shell hooks for debugging.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_28

LANGUAGE: Nix
CODE:
```
"  neovim-dev = (super.pkgs.neovim-unwrapped.override  {\n    doCheck=true;\n  }).overrideAttrs(oa:{ \n    cmakeBuildType=\"debug\";\n\n    nativeBuildInputs = oa.nativeBuildInputs ++ [ self.pkgs.valgrind ];\n    shellHook = ''\n      export NVIM_PYTHON_LOG_LEVEL=DEBUG\n      export NVIM_LOG_FILE=/tmp/log\n      export VALGRIND_LOG=\"$PWD/valgrind.log\"\n    '';\n  });"
```

----------------------------------------

TITLE: Deleting Profiling settings
DESCRIPTION: These commands demonstrate how to stop profiling by deleting previously set profiling arguments. This will reset profiling for a given file or function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_27

LANGUAGE: vim
CODE:
```
"profdel func MyFunc"
"profdel file MyScript.vim"
"profdel here"
```

----------------------------------------

TITLE: Creating Sublists with Omitting Indices in Vimscript
DESCRIPTION: This snippet shows how to create sublists by omitting the start or end index in the slicing notation. Omitting the start index defaults to 0, and omitting the end index defaults to -1.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
	:let endlist = mylist[2:]	" from item 2 to the end: [3, "four"]
	:let shortlist = mylist[2:2]	" List with one item: [3]
	:let otherlist = mylist[:]	" make a copy of the List
```

----------------------------------------

TITLE: Building Neovim with CMake Default Configuration
DESCRIPTION: Commands to build and install Neovim using CMake with RelWithDebInfo build type. These commands handle the basic build process and system-wide installation.
SOURCE: https://github.com/neovim/neovim/blob/master/README.md#2025-04-20_snippet_0

LANGUAGE: bash
CODE:
```
make CMAKE_BUILD_TYPE=RelWithDebInfo
sudo make install
```

----------------------------------------

TITLE: Setting Vim Fold Method in TeX Document
DESCRIPTION: A modeline to set the fold method to syntax for a TeX/LaTeX document, to be placed at the end of the file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_131

LANGUAGE: vim
CODE:
```
% vim: fdm=syntax
```

----------------------------------------

TITLE: Enabling Slackware Keywords in Dircolors Syntax Highlighting
DESCRIPTION: Configures Vim to recognize and highlight Slackware-specific keywords in dircolors utility output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_24

LANGUAGE: VimScript
CODE:
```
let dircolors_is_slackware = 1
```

----------------------------------------

TITLE: Running IWYU Build Configuration
DESCRIPTION: Commands for running include-what-you-use analysis on the codebase.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_5

LANGUAGE: bash
CODE:
```
cmake --preset iwyu
cmake --build build
```

----------------------------------------

TITLE: Configuring Whichwrap Movement Keys
DESCRIPTION: Sets up cursor movement wrapping between lines using arrow keys in Neovim. This configuration allows only left and right arrow keys to wrap around lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_79

LANGUAGE: vim
CODE:
```
set ww=<,>,[,]
```

----------------------------------------

TITLE: XML Data File Example in Vim
DESCRIPTION: This Vim script defines an example XML data file format. It demonstrates the structure of the g:xmldata_* variable, which is a Dictionary containing tag names as keys and Lists of possible children and attribute dictionaries as values. The example includes special elements like vimxmlentities, vimxmltaginfo, and vimxmlattrinfo for additional menu information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
    let g:xmldata_crippled = {
    \ "vimxmlentities": ["amp", "lt", "gt", "apos", "quot"],
    \ 'vimxmlroot': ['tag1'],
    \ 'tag1':
    \ [ ['childoftag1a', 'childoftag1b'], {'attroftag1a': [],
    \ 'attroftag1b': ['valueofattr1', 'valueofattr2']}],
    \ 'childoftag1a':
    \ [ [], {'attrofchild': ['attrofchild']}],
    \ 'childoftag1b':
    \ [ ['childoftag1a'], {'attrofchild': []}],
    \ "vimxmltaginfo": {
    \ 'tag1': ['Menu info', 'Long information visible in preview window']},
    \ 'vimxmlattrinfo': {
    \ 'attrofchild': ['Menu info', 'Long information visible in preview window']}}
```

----------------------------------------

TITLE: Checking System Locales in Unix
DESCRIPTION: Command to display supported locale names on Unix systems
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mlang.txt#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
:!locale -a
```

----------------------------------------

TITLE: Terminal UI Client Info Configuration
DESCRIPTION: Default client information configuration that the UI client sets when connecting to the Neovim server.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
client = {
  attributes = {
    license = 'Apache 2',
    pid = …,
    website = 'https://neovim.io',
  },
  name = 'nvim-tui',
  type = 'ui',
  version = { … },
}
```

----------------------------------------

TITLE: Calculating Sine and Hyperbolic Sine in Neovim
DESCRIPTION: Shows examples of using the sin and sinh functions to calculate the sine and hyperbolic sine of numeric values in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_246

LANGUAGE: vim
CODE:
```
echo sin(100)
echo sin(-4.01)

echo sinh(0.5)
echo sinh(-0.9)
```

----------------------------------------

TITLE: Disable gzip plugin loading in Nvim
DESCRIPTION: This snippet demonstrates how to prevent the 'gzip' plugin from loading in Nvim by setting the `loaded_gzip` variable. This is useful when you want to disable the plugin's functionality without removing the plugin files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_gzip.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
	:let loaded_gzip = 1

```

----------------------------------------

TITLE: Prompt Buffer Setting Example in Vim
DESCRIPTION: Demonstrates how to set the prompt text for a prompt buffer
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_197

LANGUAGE: vim
CODE:
```
call prompt_setprompt(bufnr(''), 'command: ')
```

----------------------------------------

TITLE: Inserting Tags Header with gnat#Insert_Tags_Header Function
DESCRIPTION: Function to add tag file header information (the !_TAG_ lines) to the current file, which are missing from GNAT XREF output.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
gnat#Insert_Tags_Header()
```

----------------------------------------

TITLE: Updating localization files
DESCRIPTION: Command to update the translation file for a specific language with the latest strings from the codebase.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_11

LANGUAGE: bash
CODE:
```
cmake --build build --target update-po-$LANG
```

----------------------------------------

TITLE: Example Function Code Block - VimL
DESCRIPTION: Shows how to format a code block in Vim help documentation using > and < markers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_8

LANGUAGE: viml
CODE:
```
function Example_Func()
    echo "Example"
endfunction
```

----------------------------------------

TITLE: Concatenating Blobs - Vim Script
DESCRIPTION: This snippet explains how to concatenate two Blobs using the '+' operator and also demonstrates in-place concatenation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_64

LANGUAGE: vim
CODE:
```
:let longblob = myblob + 0z4455
:let myblob += 0z6677
```

----------------------------------------

TITLE: Processing Package Documentation
DESCRIPTION: Iterates through packages to generate help tags and install documentation files for each package.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/CMakeLists.txt#2025-04-20_snippet_2

LANGUAGE: cmake
CODE:
```
file(GLOB PACKAGES CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/runtime/pack/dist/opt/*)

set(GENERATED_PACKAGE_TAGS)
foreach(PACKAGE ${PACKAGES})
  get_filename_component(PACKNAME ${PACKAGE} NAME)
  file(GLOB "${PACKNAME}_DOC_FILES" CONFIGURE_DEPENDS ${PACKAGE}/doc/*.txt)
  if(${PACKNAME}_DOC_FILES)
    file(MAKE_DIRECTORY ${GENERATED_PACKAGE_DIR}/${PACKNAME})
    add_custom_command(OUTPUT "${GENERATED_PACKAGE_DIR}/${PACKNAME}/doc/tags"
      COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${PACKAGE} ${GENERATED_PACKAGE_DIR}/${PACKNAME}
      COMMAND $<TARGET_FILE:nvim_bin>
        -u NONE -i NONE -e --headless -c "helptags doc" -c quit
      DEPENDS
        nvim_bin
        nvim_runtime_deps
      WORKING_DIRECTORY "${GENERATED_PACKAGE_DIR}/${PACKNAME}"
    )
    list(APPEND GENERATED_PACKAGE_TAGS "${GENERATED_PACKAGE_DIR}/${PACKNAME}/doc/tags")
  endif()
endforeach()
```

----------------------------------------

TITLE: Retrieving IPv6 Interface Identifier with uv.if_indextoiid()
DESCRIPTION: Retrieves a network interface identifier suitable for use in an IPv6 scoped address based on the provided interface index.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_87

LANGUAGE: lua
CODE:
```
uv.if_indextoiid({ifindex})
```

----------------------------------------

TITLE: Setting Vim Modelines for File Configuration
DESCRIPTION: A modeline configuration for Vim/Neovim that sets text width to 78 characters, tab stops to 8 spaces, filetype to help, disables expandtab and right-to-left mode, and sets fold method to marker.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_58

LANGUAGE: vim
CODE:
```
vim:tw=78:ts=8:ft=help:noet:norl:fdm=marker
```

----------------------------------------

TITLE: Font Setting Example
DESCRIPTION: Example of setting a specific X11 font for highlighting
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_191

LANGUAGE: vim
CODE:
```
font=-misc-fixed-bold-r-normal--14-130-75-75-c-70-iso8859-1
```

----------------------------------------

TITLE: Building xgettext Executable in CMake
DESCRIPTION: This snippet defines the xgettext executable, sets its sources, links it with libgettextsrc, and adds dependencies.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_14

LANGUAGE: cmake
CODE:
```
set(xgettext_SOURCES
  xgettext.c xg-pos.c xg-encoding.c xg-mixed-string.c xg-arglist-context.c
  xg-arglist-callshape.c xg-arglist-parser.c xg-message.c x-c.c x-po.c x-sh.c
  x-python.c x-lisp.c x-elisp.c x-librep.c x-scheme.c x-smalltalk.c x-java.c
  x-csharp.c x-awk.c x-ycp.c x-tcl.c x-perl.c x-php.c x-rst.c x-lua.c
  x-javascript.c x-vala.c x-desktop.c)
PREFIX_LIST_ITEMS(xgettext_SOURCES "gettext-tools/src/")

add_executable(xgettext ${xgettext_SOURCES})
target_link_libraries(xgettext libgettextsrc)
add_dependencies(xgettext libgettextsrc libintl)
```

----------------------------------------

TITLE: Enabling Select Mode
DESCRIPTION: Command to enable mouse-based select mode functionality
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:set selectmode+=mouse
```

----------------------------------------

TITLE: Suppressing Obsolete Keyword Errors in Inform
DESCRIPTION: This snippet prevents Vim from highlighting obsolete Inform keywords as errors. Setting the 'inform_suppress_obsolete' variable to 1 suppresses these errors.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_62

LANGUAGE: vim
CODE:
```
	:let inform_suppress_obsolete=1
```

----------------------------------------

TITLE: Vim Help File Header
DESCRIPTION: Help file header defining the documentation format and basic metadata for Neovim's testing documentation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/testing.txt#2025-04-20_snippet_0

LANGUAGE: vimdoc
CODE:
```
*testing.txt*	Nvim


		  VIM REFERENCE MANUAL	  by Bram Moolenaar
```

----------------------------------------

TITLE: Configuring and Building Tree-sitter Markdown Parsers in CMake
DESCRIPTION: Defines the build configuration for Tree-sitter Markdown parsers used by Neovim. This CMake script builds two modules: the main markdown parser and an inline markdown parser. It suppresses warnings, configures include paths, removes library prefixes, and sets up installation targets.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/MarkdownParserCMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.16)
project(${PARSERLANG} C)

add_compile_options(-w)

add_library(markdown MODULE
tree-sitter-markdown/src/parser.c
tree-sitter-markdown/src/scanner.c)
target_include_directories(markdown
  PRIVATE
  tree-sitter-markdown/src)

add_library(markdown_inline MODULE
tree-sitter-markdown-inline/src/parser.c
tree-sitter-markdown-inline/src/scanner.c)
target_include_directories(markdown_inline
  PRIVATE
  tree-sitter-markdown-inline/src)

set_target_properties(
  markdown markdown_inline
  PROPERTIES
    PREFIX ""
)

install(TARGETS markdown markdown_inline LIBRARY DESTINATION lib/nvim/parser)

# vim: set ft=cmake:
```

----------------------------------------

TITLE: Vim Formatting Configuration for Clang-Format
DESCRIPTION: Vim configuration snippet to set up clang-format as the formatter.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
if !empty(findfile('.clang-format', ';'))
  setlocal formatprg=clang-format\ -style=file
endif
```

----------------------------------------

TITLE: Creating a New Thread in Lua with Libuv
DESCRIPTION: Creates and initializes a new thread using Libuv. The function takes optional options, an entry function or string, and additional arguments to pass to the entry function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_57

LANGUAGE: lua
CODE:
```
uv.new_thread([{options}, ] {entry}, {...})
```

----------------------------------------

TITLE: Navigating to Location List Error Before Cursor Position
DESCRIPTION: Command for going to the error before the current cursor position in the current buffer from the location list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:[count]lbe[fore]
```

----------------------------------------

TITLE: Line Break Matching Patterns
DESCRIPTION: Demonstrates patterns for matching content across line breaks using \n and \_s markers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
/one\ntwo
/one\_stwo
/one\_s\+two
```

----------------------------------------

TITLE: Root-Relative Path Examples for SCP Protocol
DESCRIPTION: Examples demonstrating how to use root-relative paths with SCP protocol in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
vim scp://user@host//somefile
vim scp://user@host//subdir1/subdir2/somefile
```

----------------------------------------

TITLE: Setting mSQL Syntax Highlighting Options in Vim
DESCRIPTION: Configures options for mSQL syntax highlighting, including enabling SQL syntax highlighting in strings and setting the minimum number of lines for syncing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_87

LANGUAGE: VimScript
CODE:
```
:let msql_sql_query = 1

:let msql_minlines = 200
```

----------------------------------------

TITLE: Configuring Lint Tool Discovery in CMake
DESCRIPTION: Configures CMake to find linting tools like shellcheck and stylua, with an option to abort if these tools are not found when CI_LINT is enabled.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_15

LANGUAGE: cmake
CODE:
```
option(CI_LINT "Abort if lint programs not found" OFF)
if(CI_LINT)
  set(LINT_REQUIRED "REQUIRED")
endif()
find_program(SHELLCHECK_PRG shellcheck ${LINT_REQUIRED})
mark_as_advanced(SHELLCHECK_PRG)
find_program(STYLUA_PRG stylua ${LINT_REQUIRED})
mark_as_advanced(STYLUA_PRG)

set(STYLUA_DIRS runtime scripts src test contrib)
```

----------------------------------------

TITLE: Removing Netrw from Home Directory
DESCRIPTION: Uses the :NetrwClean command to remove Netrw from the user's home directory (first directory in runtimepath).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
:NetrwClean
```

----------------------------------------

TITLE: Building with Makefile and Bundled Dependencies
DESCRIPTION: This shows how to build Neovim using Make, disabling bundled dependencies entirely.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_18

LANGUAGE: Shell
CODE:
```
"make USE_BUNDLED=OFF"
```

----------------------------------------

TITLE: Register Expression Insert Example
DESCRIPTION: Example showing how to insert text by evaluating an expression register to move the cursor up in Insert mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_0

LANGUAGE: vimdoc
CODE:
```
CTRL-R ="\<Up>"
```

----------------------------------------

TITLE: Setting Hare Documentation Search Depth
DESCRIPTION: Configuration to adjust the maximum directory depth for searching Hare files when detecting documentation files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_hare.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
let g:haredoc_search_depth = 2
```

----------------------------------------

TITLE: Data Type Format Conversion (C)
DESCRIPTION: This snippet demonstrates how to convert data type formats from Vim source to portable Neovim formats.  It shows how to handle different integer types to ensure compatibility across platforms and architectures. PRId64 and PRIdLINENR are macros defined in inttypes.h.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_5

LANGUAGE: C
CODE:
```
"  Data type    Format (Vim source)     Portable format (Nvim source)
  ------------ ----------------------- ----------------------------------
  long long    \"%lld\"                  \"%\" PRId64
  size_t       \"%ld\"                   \"%zu\"
  linenr_T     \"%ld\"                   \"%\" PRIdLINENR"
```

----------------------------------------

TITLE: Setting Thread Name in Lua with Libuv
DESCRIPTION: Sets the name of the current thread. The maximum length of the name is platform-dependent and will be truncated if exceeded.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_67

LANGUAGE: lua
CODE:
```
uv.thread_setname({name})
```

----------------------------------------

TITLE: Finding a Man Page in Vim
DESCRIPTION: This snippet explains how to quickly find and display the man page for a command or function being edited in Vim, using the 'K' command and ':Man' command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
K
```

LANGUAGE: vim
CODE:
```
:Man csh
```

LANGUAGE: vim
CODE:
```
:Man 3 echo
```

----------------------------------------

TITLE: File Permissions Check in Vim
DESCRIPTION: Examples showing how to get file permissions for system files using getfperm() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_92

LANGUAGE: vim
CODE:
```
echo getfperm("/etc/passwd")
echo getfperm(expand("~/.config/nvim/init.vim"))
```

----------------------------------------

TITLE: Building Neovim with mingw32-make on MSYS2/MinGW
DESCRIPTION: Alternative build commands using mingw32-make instead of Ninja for building Neovim on Windows with MSYS2/MinGW.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_9

LANGUAGE: cmd
CODE:
```
mingw32-make deps
mingw32-make CMAKE_BUILD_TYPE=RelWithDebInfo
:: Or you can do the previous command specifying a custom prefix
:: (Default is C:\Program Files (x86)\nvim)
:: mingw32-make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=C:\nvim
mingw32-make install
```

----------------------------------------

TITLE: Disabling Mail Plugin Mappings
DESCRIPTION: Variable setting to disable mappings for the mail filetype plugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
let no_mail_maps = 1
```

----------------------------------------

TITLE: Getting Poll Timeout in Lua
DESCRIPTION: This function gets the poll timeout. The return value is in milliseconds or -1 for no timeout. Returns an integer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_10

LANGUAGE: lua
CODE:
```
"uv.backend_timeout()                                      *uv.backend_timeout()*\n\n                Get the poll timeout. The return value is in milliseconds, or\n                -1 for no timeout.\n\n                Returns: `integer`"
```

----------------------------------------

TITLE: Fixing AppArmor Permission Denied Error for Fuse Mount in Bash
DESCRIPTION: This configures AppArmor to allow fuse mounts for Neovim, resolving a "Permission denied" error when mounting fuse filesystems.  It adds a local override to the AppArmor configuration to allow mounting the `fuse.nvim` filesystem.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_23

LANGUAGE: bash
CODE:
```
mount fstype=fuse.nvim options=(ro, nosuid, nodev) -> /tmp/**,
    /usr/bin/fusermount Ux,
```

----------------------------------------

TITLE: Using File Browser with Specified Directory in Vim
DESCRIPTION: This example shows how to use the file browser with a specified starting directory. The '/etc' directory is used as the starting point for the file browser.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:browse split /etc
```

----------------------------------------

TITLE: Disabling Automatic Execution of Unzip Command
DESCRIPTION: Shows how to disable automatic execution of the unzip command when opening zip files by setting the g:zip_exec variable to 0 for increased security.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_zip.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
let g:zip_exec=0
```

----------------------------------------

TITLE: Configuring Eiffel Syntax Highlighting Options
DESCRIPTION: Sets various options for Eiffel syntax highlighting, including case sensitivity and adherence to style guidelines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_29

LANGUAGE: VimScript
CODE:
```
let eiffel_ignore_case=1
let eiffel_strict=1
let eiffel_pedantic=1
let eiffel_lower_case_predef=1
let eiffel_ise=1
let eiffel_hex_constants=1
```

----------------------------------------

TITLE: Retrieving Syntax Item Name in Vim
DESCRIPTION: This snippet demonstrates how to echo the name of the syntax item under the cursor using the synID and synIDattr functions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_268

LANGUAGE: vim
CODE:
```
echo synIDattr(synID(line("."), col("."), 1), "name")
```

----------------------------------------

TITLE: Checking for Infinity Values in Vim
DESCRIPTION: Demonstrates how to use the isinf() function to check if a floating-point value is positive infinity (returns 1), negative infinity (returns -1), or neither (returns 0).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_142

LANGUAGE: vim
CODE:
```
echo isinf(1.0 / 0.0)
"1
echo isinf(-1.0 / 0.0)
"-1
```

----------------------------------------

TITLE: TODO Comments Example in C
DESCRIPTION: Example showing proper format for TODO comments with owner identification.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_15

LANGUAGE: c
CODE:
```
// TODO(kl@gmail.com): Use a "*" here for concatenation operator.
// TODO(Zeke): change this to use relations.
```

----------------------------------------

TITLE: Using Autoload for Variables in Vim
DESCRIPTION: This example demonstrates how to use the autoload mechanism for variables in Vim scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_59

LANGUAGE: vim
CODE:
```
let weekdays = dutch#weekdays
```

----------------------------------------

TITLE: Mouse Selection Copy Fix
DESCRIPTION: Workaround for copying to X11 primary selection with mouse selection.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
vnoremap <LeftRelease> "*ygv
vnoremap <2-LeftRelease> "*ygv
```

----------------------------------------

TITLE: Checking for dirfd and flock functions in C
DESCRIPTION: Tests if the system supports the dirfd function for getting a file descriptor from a DIR* pointer and the flock function for file locking by compiling a test program.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_2

LANGUAGE: C
CODE:
```
#include <sys/types.h>
#include <dirent.h>
#include <sys/file.h>
int main(void)
{
  DIR *dir = opendir("dirname");
  dirfd(dir);
  flock(10, LOCK_SH);
  return 0;
}
```

----------------------------------------

TITLE: Using min() function in Vim
DESCRIPTION: This example demonstrates how to use the min() function to find the minimum value in a list of variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_177

LANGUAGE: vim
CODE:
```
echo min([apples, pears, oranges])
```

----------------------------------------

TITLE: Setting Environment Language Variable
DESCRIPTION: Command to set the LANG environment variable to Japanese
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mlang.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
:let $LANG = 'ja'
```

----------------------------------------

TITLE: Using Colorscheme Command in Vim
DESCRIPTION: These snippets show how to use the colorscheme command in Vim. They demonstrate how to output the current colorscheme name and how to load a specific colorscheme.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_183

LANGUAGE: viml
CODE:
```
:colo[rscheme]

:colo[rscheme] {name}
```

----------------------------------------

TITLE: Configuring LPEG Library Build with CMake
DESCRIPTION: Sets up CMake build configuration for the LPEG library. Specifies minimum CMake version, creates a C project, compiles source files into a library, and sets up installation rules.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/LpegCMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.16)
project (lpeg C)

include(GNUInstallDirs)

file(GLOB LPEG_SOURCES ${CMAKE_SOURCE_DIR}/*.c)
add_library(lpeg ${LPEG_SOURCES})

target_compile_options(lpeg PRIVATE -w)

install(TARGETS lpeg ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

# vim: set ft=cmake:
```

----------------------------------------

TITLE: Vim Help File Footer
DESCRIPTION: Standard Vim help file footer containing text formatting settings
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/testing.txt#2025-04-20_snippet_1

LANGUAGE: vimdoc
CODE:
```
 vim:tw=78:ts=8:noet:ft=help:norl:
```

----------------------------------------

TITLE: Setting Time Zone in autoexec.bat (Windows)
DESCRIPTION: This code snippet shows how to set the time zone in the autoexec.bat file in Windows to avoid timestamp issues with file saving related to daylight saving time. Adjusting the '-1' value is necessary based on the specific time zone.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_4

LANGUAGE: batch
CODE:
```
"SET TZ=-1"
```

----------------------------------------

TITLE: Configuring makeprg with a Filter
DESCRIPTION: Sets the makeprg option to run 'gmake' and pipe its output through 'myfilter', demonstrating how to include a pipe character in the command string with proper escaping.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_48

LANGUAGE: viml
CODE:
```
set makeprg=gmake\ \\|\ myfilter
```

----------------------------------------

TITLE: Keep-Case Word Definition
DESCRIPTION: Demonstrates defining keep-case words that preserve specific case matching rules
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_17

LANGUAGE: spelling-definition
CODE:
```
KEEPCASE = ~
```

----------------------------------------

TITLE: Converting to String with Msgpack in Vim
DESCRIPTION: Converts a Msgpack value to a string, preserving Msgpack type information. The output string can be evaluated back to its original form using msgpack#eval().
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
msgpack#string({msgpack-value})
```

----------------------------------------

TITLE: Installing Neovim on Source Mage
DESCRIPTION: Command to install Neovim using the Sorcery package manager on Source Mage Linux.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_4

LANGUAGE: sh
CODE:
```
cast neovim
```

----------------------------------------

TITLE: Getting System Hostname with uv.os_gethostname()
DESCRIPTION: Returns the hostname of the system as a string.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_90

LANGUAGE: lua
CODE:
```
uv.os_gethostname()
```

----------------------------------------

TITLE: Opening an existing file descriptor as UDP handle in Lua
DESCRIPTION: Opens an existing file descriptor or Windows SOCKET as a UDP handle. The file descriptor is set to non-blocking mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_39

LANGUAGE: lua
CODE:
```
uv.udp_open({udp}, {fd})
```

----------------------------------------

TITLE: Deleting Bookmarks with :NetrwMB Command
DESCRIPTION: Uses the :NetrwMB! command to remove specified files or directories from the Netrw bookmark list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_27

LANGUAGE: vim
CODE:
```
:NetrwMB! [files/directories]
```

----------------------------------------

TITLE: Forcing TeX Markup Highlighting in Literate Haskell
DESCRIPTION: This snippet demonstrates how to force TeX markup highlighting in literate Haskell code. The 'lhs_markup' variable is set to 'tex' in your vimrc to achieve this globally.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_50

LANGUAGE: vim
CODE:
```
	:let lhs_markup = tex
```

----------------------------------------

TITLE: Managing Registers with Let Command in Vim
DESCRIPTION: Examples of writing to and appending to Vim registers using the :let command with the @ prefix, including clearing the search pattern register.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_93

LANGUAGE: viml
CODE:
```
:let @{reg-name} = {expr1}
```

LANGUAGE: viml
CODE:
```
:let @/ = ""
```

LANGUAGE: viml
CODE:
```
:let @{reg-name} .= {expr1}
```

----------------------------------------

TITLE: Git Blame Configuration
DESCRIPTION: Git command to configure blame.ignoreRevsFile for excluding noisy commits.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_4

LANGUAGE: bash
CODE:
```
git config blame.ignoreRevsFile .git-blame-ignore-revs
```

----------------------------------------

TITLE: CSV Delimiter Highlighting Management in VimL
DESCRIPTION: Handles synchronization of syntax highlighting when changing CSV delimiters by removing the existing delimiter configuration and refreshing the buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_18

LANGUAGE: VimL
CODE:
```
:unlet b:csv_delimiter
:w
:e
```

----------------------------------------

TITLE: Removing Netrw from All Directories in Runtimepath
DESCRIPTION: Uses the :NetrwClean! command to attempt removal of Netrw from all directories in the user's runtimepath.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_26

LANGUAGE: vim
CODE:
```
:NetrwClean!
```

----------------------------------------

TITLE: Enabling Basic Conceal Support for Rust
DESCRIPTION: Enables basic concealment support for Rust syntax, which can make code more readable by hiding certain syntax elements with simpler symbols.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
let g:rust_conceal = 1
```

----------------------------------------

TITLE: Using strtrans() in Vim Script
DESCRIPTION: Demonstrates the usage of strtrans() function to translate unprintable characters into printable ones.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_263

LANGUAGE: vim
CODE:
```
echo strtrans(@a)
```

----------------------------------------

TITLE: CPack Inclusion
DESCRIPTION: Includes the CPack module to enable packaging functionality. This must be done after setting CPack variables but before using CPack commands.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.packaging/CMakeLists.txt#2025-04-20_snippet_3

LANGUAGE: cmake
CODE:
```
include(CPack)
```

----------------------------------------

TITLE: Overruling File Format in Vim
DESCRIPTION: This command edits a file while explicitly specifying the 'fileformat' to use. The "++ff=unix" part tells Vim to treat the file as a Unix format file, overriding the automatic detection. This is useful when you want to edit a file as a specific format, regardless of how Vim would normally interpret it.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
	:edit ++ff=unix file.txt
```

----------------------------------------

TITLE: Debian 10 Build Example
DESCRIPTION: This script installs dependencies on Debian 10 and then builds Neovim using CMake, disabling most bundled dependencies except for libuv, libluv, utf8proc, and tree-sitter.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_17

LANGUAGE: Shell
CODE:
```
"sudo apt install luajit libluajit-5.1-dev lua-lpeg libunibilium-dev\ncmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_BUNDLED=OFF -DUSE_BUNDLED_LIBUV=ON -DUSE_BUNDLED_LUV=ON -DUSE_BUNDLED_TS=ON -DUSE_BUNDLED_UTF8PROC=ON\ncmake --build .deps\ncmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build"
```

----------------------------------------

TITLE: Formatting Table Cells with Styled Numbers in HTML
DESCRIPTION: HTML markup for creating table cells with consistent styling. Each cell has bottom and left borders, right alignment, and contains the number 5 in red color with bold formatting using Arial font.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_2

LANGUAGE: HTML
CODE:
```
<td style="border-bottom windowtext 0.5pt solid; border-left windowtext;" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>
```

----------------------------------------

TITLE: Opening a new file in a split
DESCRIPTION: Opens a new, empty file in a split window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
	:new
```

----------------------------------------

TITLE: Printf Float Formatting Example in Vim
DESCRIPTION: Demonstrates float formatting with printf using 2 decimal precision
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_193

LANGUAGE: vim
CODE:
```
echo printf("%.2f", 12.115)
```

----------------------------------------

TITLE: Helper Function for Unsigned Hex Output
DESCRIPTION: Defines a helper function `printx` that converts numbers to unsigned 32-bit hexadecimal numbers using the bit.tohex function, aiding in clear display across all platforms.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_2

LANGUAGE: Lua
CODE:
```
function printx(x)
  print("0x"..bit.tohex(x))
end
```

----------------------------------------

TITLE: Running Job Control Example in Bash
DESCRIPTION: Command to execute the job control example script in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
nvim -u ~/foo.vim
```

----------------------------------------

TITLE: Building msgmerge Executable in CMake
DESCRIPTION: This snippet defines the msgmerge executable, sets its sources, links it with libgettextsrc, and adds dependencies.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_12

LANGUAGE: cmake
CODE:
```
set(msgmerge_SOURCES
  msgmerge.c msgl-fsearch.c lang-table.c plural-count.c)
PREFIX_LIST_ITEMS(msgmerge_SOURCES "gettext-tools/src/")

add_executable(msgmerge ${msgmerge_SOURCES})
target_link_libraries(msgmerge libgettextsrc)
add_dependencies(msgmerge libgettextsrc libintl)
```

----------------------------------------

TITLE: Setting SpotBugs Compiler Options
DESCRIPTION: Sets parameters for the SpotBugs Java static analysis tool by configuring the spotbugs_makeprg_params variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_44

LANGUAGE: vim
CODE:
```
let b:spotbugs_makeprg_params = "-longBugCodes -effort:max -low"
```

----------------------------------------

TITLE: Configuring Makeprg for Rust Compilation
DESCRIPTION: Sets the 'makeprg' option to use 'rustc' instead of 'rustc %' for Rust file compilation. This affects how the :make command works with Rust files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
let g:rustc_makeprg_no_percent = 1
```

----------------------------------------

TITLE: Editing a Sourced Script in Vim
DESCRIPTION: The :script command allows editing a sourced script by its script ID, which can be obtained from :scriptnames.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:scr[iptnames][!] {scriptId}
```

----------------------------------------

TITLE: Enabling Combined Character Deletion in Arabic
DESCRIPTION: Allows deletion of individual characters in combined Arabic characters like LAM_ALEF, useful for more granular text editing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_5

LANGUAGE: VimScript
CODE:
```
:set delcombine
```

----------------------------------------

TITLE: CursorHold Status Line Update Example
DESCRIPTION: A Vim command to force update of status lines by toggling the readonly option. This is useful when handling CursorHold events.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:let &ro = &ro
```

----------------------------------------

TITLE: X Resource Configuration
DESCRIPTION: X Window System resource configuration examples for Netscape color management.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_3

LANGUAGE: xdefaults
CODE:
```
Netscape*installColormap: Yes
Netscape*maxImageColors:  64
```

----------------------------------------

TITLE: NixOS/Nix Development Shell
DESCRIPTION: Enters a nix-shell with the necessary dependencies for building Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_26

LANGUAGE: Shell
CODE:
```
"nix-shell '<nixpkgs>' -A neovim-unwrapped"
```

----------------------------------------

TITLE: Displaying Current Swap File Name Command
DESCRIPTION: Command to show the name of the current swap file being used in Vim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/recover.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:sw[apname]
```

----------------------------------------

TITLE: Retrieving Password File Information with uv.os_get_passwd()
DESCRIPTION: Returns a table containing user password file information including username, user ID, group ID, shell, and home directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_97

LANGUAGE: lua
CODE:
```
uv.os_get_passwd()
```

----------------------------------------

TITLE: Updating Terminfo Definitions for Neovim
DESCRIPTION: This command updates the terminfo definitions used in Neovim's TUI. It runs a script that refreshes the content of the terminfo_defs.h file.
SOURCE: https://github.com/neovim/neovim/blob/master/MAINTAIN.md#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
scripts/update_terminfo.sh
```

----------------------------------------

TITLE: Formatting Date with Msgpack in Vim
DESCRIPTION: The function formats a date according to a specified format string, similar to strftime(). It supports Msgpack special dictionaries and requires Python for full functionality.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
msgpack#strftime({format}, {msgpack-integer})
```

----------------------------------------

TITLE: Simple Concatenation Pattern in Vim
DESCRIPTION: Demonstrates basic pattern concatenation matching specific characters and digits
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
f[0-9]b
```

----------------------------------------

TITLE: HTML Table Cell Structure
DESCRIPTION: A repeating HTML table cell pattern with specific styling for displaying the number 5 in red, bold font. Each cell has border and alignment properties defined.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_1

LANGUAGE: html
CODE:
```
<td style="border-bottom windowtext 0.5pt solid; border-left windowtext;" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>
```

----------------------------------------

TITLE: Using Line Offsets in Vim Search Commands
DESCRIPTION: Search pattern with a line offset that positions the cursor a specified number of lines away from the match. This allows you to land at a specific position relative to the search result.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
/default/2
```

----------------------------------------

TITLE: Nvim Stdin Autocommand
DESCRIPTION: Vimscript configuration to prevent marking buffers as modified when reading from stdin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
" Don't set 'modified' when reading from stdin
au StdinReadPost * set nomodified
```

----------------------------------------

TITLE: Vim Formatting Configuration for Uncrustify
DESCRIPTION: Vim configuration snippet to set up uncrustify as the formatter for C files.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
if !empty(findfile('src/uncrustify.cfg', ';'))
  setlocal formatprg=uncrustify\ -q\ -l\ C\ -c\ src/uncrustify.cfg\ --no-backup
endif
```

----------------------------------------

TITLE: Windows FTP Configuration with Custom Command
DESCRIPTION: Custom configuration for Windows FTP, specifying an alternate FTP command and allowing site-specific login files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_3

LANGUAGE: vimscript
CODE:
```
let g:netrw_ftp_cmd= 'c:\Windows\System32\ftp -s:C:\Users\MyUserName\MACHINE'
```

----------------------------------------

TITLE: Including Standard and Custom CMake Modules
DESCRIPTION: Includes both standard CMake modules (like CheckCCompilerFlag) and custom Neovim modules (like Deps, Find) for the build system.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_2

LANGUAGE: CMake
CODE:
```
include(CheckCCompilerFlag)
include(CheckCSourceCompiles)
include(CheckLibraryExists)
include(ExternalProject)
include(FindPackageHandleStandardArgs)
include(GNUInstallDirs)

include(Deps)
include(Find)
include(InstallHelpers)
include(PreventInTreeBuilds)
include(Util)
```

----------------------------------------

TITLE: Example Vim Plugin Help Documentation
DESCRIPTION: Template for creating help documentation for a Vim plugin, showing proper formatting with tags and sections.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_40

LANGUAGE: vim
CODE:
```
*typecorr.txt*	Plugin for correcting typing mistakes

If you make typing mistakes, this plugin will have them corrected
automatically.

There are currently only a few corrections.  Add your own if you like.

Mappings:
<Leader>a   or   <Plug>TypecorrAdd;
	Add a correction for the word under the cursor.

Commands:
:Correct {word}
	Add a correction for {word}.

						*typecorr-settings*
This plugin doesn't have any settings.
```

----------------------------------------

TITLE: Painting Background Papers in Qt
DESCRIPTION: This method paints the background papers in a grid layout using QPainter. It handles empty states, calculates positions, and calls a helper method to paint individual papers.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_2

LANGUAGE: C++
CODE:
```
auto p = QPainter(this);

if (_papers.empty()) {
	p.setFont(st::noContactsFont);
	p.setPen(st::noContactsColor);
	p.drawText(QRect(0, 0, width(), st::noContactsHeight), tr::lng_contacts_loading(tr::now), style::al_center);
	return;
}
auto row = 0;
auto column = 0;
for (const auto &paper : _papers) {
	const auto increment = gsl::finally([&] {
		++column;
		if (column == kBackgroundsInRow) {
			column = 0;
			++row;
		}
	});
	if ((st::backgroundSize.height() + st::backgroundPadding) * (row + 1) <= r.top()) {
		continue;
	} else if ((st::backgroundSize.height() + st::backgroundPadding) * row >= r.top() + r.height()) {
		break;
	}
	paintPaper(p, paper, column, row);
}
```

----------------------------------------

TITLE: Checking for overflow builtins in C
DESCRIPTION: Tests if the compiler supports the __builtin_add_overflow and __builtin_sub_overflow intrinsics by attempting to compile a small program that uses them.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_1

LANGUAGE: C
CODE:
```
int main(void)
{
  int a = 42;
  __builtin_add_overflow(a, a, &a);
  __builtin_sub_overflow(a, a, &a);
  return 0;
}
```

----------------------------------------

TITLE: Adding Word to Spell File in Vim
DESCRIPTION: Normal mode command to add the word under the cursor as a good word to the first entry in 'spellfile'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_1

LANGUAGE: vimdoc
CODE:
```
zg
```

----------------------------------------

TITLE: Disabling SGML Tag Rendering in Vim
DESCRIPTION: Setting a variable to disable special rendering of SGML tags in Vim syntax highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_113

LANGUAGE: vim
CODE:
```
let sgml_no_rendering=1
```

----------------------------------------

TITLE: Configuring R Markdown Syntax Highlighting in Vim
DESCRIPTION: Controls R Markdown syntax highlighting options, including YAML header highlighting, citation keys, chunk headers, and automatic language detection for code chunks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_103

LANGUAGE: vim
CODE:
```
let rmd_syn_hl_yaml = 0
let rmd_syn_hl_citations = 0
let rmd_syn_hl_chunk = 1
let rmd_dynamic_fenced_languages = 0 " No autodetection of languages
let rmd_dynamic_fenced_languages = 1 " Autodetection of languages
let rmd_include_latex = 0 " Don't highlight LaTeX code
let rmd_include_latex = 1 " Autodetect LaTeX code
let rmd_include_latex = 2 " Always include LaTeX highlighting
let rmd_fenced_languages = ['r', 'python']
```

----------------------------------------

TITLE: RHEL/Fedora Build Prerequisites
DESCRIPTION: Installs the necessary packages on RHEL/Fedora systems to build Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_21

LANGUAGE: Shell
CODE:
```
"sudo dnf -y install ninja-build cmake gcc make gettext curl glibc-gconv-extra"
```

----------------------------------------

TITLE: Configuring Python Path in Neovim
DESCRIPTION: Vim configuration to specify Python interpreter path for Neovim Python plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
let g:python3_host_prog='C:/Users/foo/Envs/neovim3/Scripts/python.exe'
```

----------------------------------------

TITLE: Custom Makefile Target
DESCRIPTION: This snippet demonstrates how to add a custom target to the build process using a `local.mk` file. The `rebuild` target removes the build directory and then runs `make`. This allows for a clean rebuild of the project.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_13

LANGUAGE: Makefile
CODE:
```
"all:\n\nrebuild:\n\trm -rf build\n\tmake"
```

----------------------------------------

TITLE: Clearing Namespace in Buffer Range in Lua
DESCRIPTION: Clears namespaced objects (highlights, extmarks, virtual text) from a region in the buffer. Lines are 0-indexed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_60

LANGUAGE: lua
CODE:
```
nvim_buf_clear_namespace({buffer}, {ns_id}, {line_start}, {line_end})
```

----------------------------------------

TITLE: Converting WTF-8 to UTF-16 in Lua
DESCRIPTION: This function converts a WTF-8 string to a UTF-16 (or UCS-2) string. It assumes the endianness of the output string matches the platform's native endianness.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_109

LANGUAGE: lua
CODE:
```
uv.wtf8_to_utf16({wtf16})
```

----------------------------------------

TITLE: Disabling Error Highlighting in Shell Scripts
DESCRIPTION: Setting a variable to disable error highlighting in shell scripts, which is useful when the error detection causes problems.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_126

LANGUAGE: vim
CODE:
```
let g:sh_no_error= 1
```

----------------------------------------

TITLE: Configuring Gettext Tools Config Headers in CMake
DESCRIPTION: Reads a gettext-tools config.h.in template and modifies it with platform-specific definitions for the Gettext tools. It defines features, types, and compatibility macros needed for the more complex tools component.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_6

LANGUAGE: cmake
CODE:
```
file(READ gettext-tools/config.h.in CONFIG_CONTENT)
string(REPLACE "#undef FLEXIBLE_ARRAY_MEMBER" "#define FLEXIBLE_ARRAY_MEMBER 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "__declspec (dllimport)" "" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef ENDIANNESS" "#define ENDIANNESS 0" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef GNULIB_FWRITEERROR" "#define GNULIB_FWRITEERROR 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_DECL_STRERROR_R" "#define HAVE_DECL_STRERROR_R 0" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_DUP2" "#define HAVE_DUP2 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_ICONV_H" "#define HAVE_ICONV_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_ICONV" "#define HAVE_ICONV 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_LIBUNISTRING" "#define HAVE_LIBUNISTRING 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_STDINT_H_WITH_UINTMAX" "#define HAVE_STDINT_H_WITH_UINTMAX 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_STDINT_H" "#define HAVE_STDINT_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_LONG_LONG_INT" "#define HAVE_LONG_LONG_INT 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_STRING_H" "#define HAVE_STRING_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_SYS_TIMEB_H" "#define HAVE_SYS_TIMEB_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE__FTIME" "#define HAVE__FTIME 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_FLOAT_H" "#define HAVE_FLOAT_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef ICONV_CONST" "#define ICONV_CONST const" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef PACKAGE" "#define PACKAGE \"gettext\"\n#define gettext_VERSION" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef VERSION" "#define VERSION \"\"" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef mode_t" "#define mode_t int" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef pid_t" "#define pid_t int" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef restrict" "#define restrict __restrict" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef ssize_t" "#include <BaseTsd.h>\n#define ssize_t SSIZE_T" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef uid_t" "#define uid_t int" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_DECL___ARGV" "#define HAVE_DECL___ARGV 1" CONFIG_CONTENT ${CONFIG_CONTENT})
set(CONFIG_CONTENT "${CONFIG_CONTENT}\n#define isatty libtextstyle_isatty")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/config.h ${CONFIG_CONTENT})
```

----------------------------------------

TITLE: Parsing Date with Msgpack in Vim
DESCRIPTION: This function parses a date string into a time value, reversing the operation of msgpack#strftime(). Without Python, it only supports non-negative times and a specific format.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
msgpack#strptime({format}, {time})
```

----------------------------------------

TITLE: Configuring LF (LFRC) Syntax Highlighting in Vim
DESCRIPTION: Sets options for shell command syntax highlighting in LF configuration files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_73

LANGUAGE: VimScript
CODE:
```
let g:lf_shell_syntax = "syntax/dosbatch.vim"
let b:lf_shell_syntax = "syntax/zsh.vim"
```

----------------------------------------

TITLE: Setting Tar Plugin Variables in .vimrc
DESCRIPTION: Configuration variables that can be added to the user's .vimrc file to prevent the tar plugin from loading.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_tar.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
let g:loaded_tarPlugin= 1
let g:loaded_tar      = 1
```

----------------------------------------

TITLE: Getting Current Thread Handle in Lua with Libuv
DESCRIPTION: Returns the handle for the current thread in which this function is called.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_64

LANGUAGE: lua
CODE:
```
uv.thread_self()
```

----------------------------------------

TITLE: Isolating Neovim Applications Using Systemd
DESCRIPTION: Example command showing how to run Neovim in an isolated environment using systemd namespaces on Linux systems. This provides true isolation by using cgroups namespaces.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_18

LANGUAGE: shell
CODE:
```
systemd-run --user -qt -p PrivateUsers=yes -p BindPaths=/home/user/profile_xy:/home/user/.config/nvim nvim
```

----------------------------------------

TITLE: Executing Commands on Location List Entries in Vim Script
DESCRIPTION: This command executes specified commands sequentially across valid entries in the location list for the current window. This allows for targeted operations within the context of a location list, enabling efficient processing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_27

LANGUAGE: vimscript
CODE:
```
:ld[o][!] {cmd}   Execute {cmd} in each valid entry in the location list
for the current window.
It works like doing this: >
  :lfirst
  :{cmd}
  :lnext
  :{cmd}
etc.
```

----------------------------------------

TITLE: Retrieving Syntax Items in Vim
DESCRIPTION: This Vim script demonstrates how to retrieve syntax items using the OmniSyntaxList function. It shows how to retrieve all syntax items, syntax items for a specific group (sqlOperator), syntax items for multiple groups (sqlOperator and sqlType), and syntax items using a regular expression.  It also shows how to assign the results to a List.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
"   echo OmniSyntaxList( [] )

" To retrieve only the syntax items for the sqlOperator syntax group: >
    echo OmniSyntaxList( ['sqlOperator'] )

" To retrieve all syntax items for both the sqlOperator and sqlType groups: >
    echo OmniSyntaxList( ['sqlOperator', 'sqlType'] )

" A regular expression can also be used: >
    echo OmniSyntaxList( ['sql\w\+'] )

" From within a plugin, you would typically assign the output to a List: >
    let myKeywords = []
    let myKeywords = OmniSyntaxList( ['sqlKeyword'] )
```

----------------------------------------

TITLE: Checking Current Language Setting
DESCRIPTION: Command to display the current language setting in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:language
```

----------------------------------------

TITLE: Defining Alias for Vim Command in Bash
DESCRIPTION: This snippet defines an alias `lvim` in a Bash-like shell, which executes Vim with a normal mode command to jump to the last cursor position. The single quotes are escaped using single quotes within the string, and double quotes are used to enclose the entire command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_14

LANGUAGE: Shell
CODE:
```
alias lvim='vim -c "normal '\''0'\''"'
```

----------------------------------------

TITLE: Converting Integer Dictionary to Hex String with Msgpack in Vim
DESCRIPTION: Converts a Msgpack special integer dictionary to a hexadecimal string with precisely 16 digits. This is useful for specific serialization scenarios.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
msgpack#int_dict_to_str({msgpack-special-int})
```

----------------------------------------

TITLE: Enabling Non-Standard Desktop File Highlighting in Vim
DESCRIPTION: Configures Vim to highlight non-standard extensions and KDE-reserved features in .desktop and .directory files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_22

LANGUAGE: VimScript
CODE:
```
let g:desktop_enable_nonstd = 1
let g:desktop_enable_kde = 1
```

----------------------------------------

TITLE: Ex Commands in Neovim
DESCRIPTION: List of Ex commands available in Neovim, sorted alphabetically. Includes brief descriptions of each command's action.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
|:|        :           nothing
|:range|    :{range}    go to last line in {range}
|:!|        :!          filter lines or execute an external command
|:!!|       :!!         repeat last ":!" command
|:#|        :#          same as ":number"
|:&|        :&          repeat last ":substitute"
|:star|     :*          use the last Visual area, like ":'<,'>"
|:<|        :<          shift lines one 'shiftwidth' left
|:=|        :=          print the last line number
|:>|        :>          shift lines one 'shiftwidth' right
|:@|        :@          execute contents of a register
|:@@|       :@@         repeat the previous ":@"
|:2match|   :2mat[ch]   define a second match to highlight
```

----------------------------------------

TITLE: Configuring Kconfig Syntax Highlighting in Vim
DESCRIPTION: Sets options for Kconfig syntax highlighting, including the number of lines for synchronization and enabling heavier highlighting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_71

LANGUAGE: VimScript
CODE:
```
let kconfig_minlines = 50
let kconfig_syntax_heavy = 1
```

----------------------------------------

TITLE: Setting Up Functional Tests Target
DESCRIPTION: Configures the functional test target with dependencies on various test programs. Includes test environment configuration and dependencies on Lua development tools.
SOURCE: https://github.com/neovim/neovim/blob/master/test/CMakeLists.txt#2025-04-20_snippet_2

LANGUAGE: cmake
CODE:
```
add_custom_target(functionaltest
  COMMAND ${CMAKE_COMMAND}
    -D TEST_TYPE=functional
    ${TEST_OPTIONS}
    -P ${PROJECT_SOURCE_DIR}/cmake/RunTests.cmake
  DEPENDS printenv-test printargs-test shell-test pwsh-test streams-test tty-test
  USES_TERMINAL)
add_dependencies(functionaltest lua_dev_deps nvim)
```

----------------------------------------

TITLE: Dependency Building Options Configuration
DESCRIPTION: Defines CMake options for controlling whether to use bundled versions of dependencies or system-installed versions.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/CMakeLists.txt#2025-04-20_snippet_1

LANGUAGE: cmake
CODE:
```
set(DEPS_IGNORE_SHA FALSE)

option(USE_BUNDLED "Use bundled dependencies." ON)

option(USE_BUNDLED_LIBUV "Use the bundled libuv." ${USE_BUNDLED})
option(USE_BUNDLED_LPEG "Use the bundled lpeg." ${USE_BUNDLED})
option(USE_BUNDLED_LUA "Use the bundled version of lua." OFF)
option(USE_BUNDLED_LUAJIT "Use the bundled version of luajit." ${USE_BUNDLED})
option(USE_BUNDLED_LUV "Use the bundled version of luv." ${USE_BUNDLED})
option(USE_BUNDLED_TS "Use the bundled treesitter runtime." ${USE_BUNDLED})
option(USE_BUNDLED_TS_PARSERS "Use the bundled treesitter parsers." ${USE_BUNDLED})
option(USE_BUNDLED_UNIBILIUM "Use the bundled unibilium." ${USE_BUNDLED})
option(USE_BUNDLED_UTF8PROC "Use the bundled utf8proc library." ${USE_BUNDLED})
```

----------------------------------------

TITLE: Basic CMake Setup and Project Configuration
DESCRIPTION: Initial CMake setup including minimum version requirement, project name, and module path configuration.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/CMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.16)
project(NVIM_DEPS C)

if(POLICY CMP0135)
  cmake_policy(SET CMP0135 NEW)
endif()

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" "${PROJECT_SOURCE_DIR}/../cmake")
```

----------------------------------------

TITLE: Cloning Neovim Repository
DESCRIPTION: Command to clone the Neovim source code repository from GitHub
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
git clone https://github.com/neovim/neovim.git
```

----------------------------------------

TITLE: Disabling Zimbu Plugin Mappings
DESCRIPTION: Configuration to disable default mappings for Zimbu filetype
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_42

LANGUAGE: vim
CODE:
```
let g:no_zimbu_maps = 1
```

----------------------------------------

TITLE: Multi-file Error Pattern Example
DESCRIPTION: Error format pattern for parsing compiler output with multiple files, using push/pop stack for file tracking.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_62

LANGUAGE: vim
CODE:
```
:set efm=%+P[%f],(%l\\,%c)%*[\ ]%t%*[^:]:\ %m,%-Q
```

----------------------------------------

TITLE: Disabling status messages in Vim for performance on slow terminals
DESCRIPTION: Turns off showcmd, ruler, and showmode options to improve performance on slow terminals by reducing status message updates.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_6

LANGUAGE: viml
CODE:
```
:set nosc noru nosm
```

----------------------------------------

TITLE: Saving Vim Digraphs to File
DESCRIPTION: Shell command to save the list of available Vim digraphs to a temporary file for reference.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_raku.txt#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
vim +'redir >/tmp/vim-digraphs-listing.txt' +digraphs +'redir END' +q
```

----------------------------------------

TITLE: Setting Output Directories for Build Artifacts
DESCRIPTION: Configures output directories for all build types, ensuring binaries, libraries and archives are placed in consistent locations.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_12

LANGUAGE: CMake
CODE:
```
# Place targets in bin/ or lib/ for all build configurations
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
foreach(CFGNAME ${CMAKE_CONFIGURATION_TYPES})
  string(TOUPPER ${CFGNAME} CFGNAME)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/lib)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/lib)
endforeach()
```

----------------------------------------

TITLE: Visual Group with Background/Foreground References
DESCRIPTION: Example showing how to reference current background/foreground colors in highlight definition
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_190

LANGUAGE: vim
CODE:
```
:highlight Visual ctermfg=bg ctermbg=fg
```

----------------------------------------

TITLE: Increasing folding level
DESCRIPTION: Closes more folds by increasing the fold level. This command can be repeated to progressively close more folds.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_4

LANGUAGE: vimdoc
CODE:
```
zm
```

----------------------------------------

TITLE: Executing Ruby Command in Neovim
DESCRIPTION: Demonstrates how to execute a simple Ruby command in Neovim using the :ruby command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_ruby.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
:ruby print "Hello"
```

----------------------------------------

TITLE: Basic CPack Package Configuration
DESCRIPTION: Sets up basic package metadata including name, vendor, file naming, and description for the Neovim package.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.packaging/CMakeLists.txt#2025-04-20_snippet_1

LANGUAGE: cmake
CODE:
```
set(CPACK_PACKAGE_NAME "Neovim")
set(CPACK_PACKAGE_VENDOR "neovim.io")
set(CPACK_PACKAGE_FILE_NAME "nvim")
set(CPACK_PACKAGE_DIRECTORY ${PROJECT_BINARY_DIR})

# From the GitHub About section
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Vim-fork focused on extensibility and usability.")

set(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})

# Pull the versions defined with the top level CMakeLists.txt
set(CPACK_PACKAGE_VERSION_MAJOR ${NVIM_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${NVIM_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${NVIM_VERSION_PATCH})

# CPACK_VERBATIM_VARIABLES ensures that the variables prefixed with *CPACK_*
# are correctly passed to the cpack program.
# This should always be set to true.
set(CPACK_VERBATIM_VARIABLES TRUE)

set(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/LICENSE.txt")
set(CPACK_RESOURCE_FILE_README ${PROJECT_SOURCE_DIR}/README.md)
```

----------------------------------------

TITLE: Defining CMake function for appending target expressions
DESCRIPTION: Defines a CMake function that creates and appends expressions for target properties to the version string. The function handles property extraction, duplicate removal, and proper formatting with prefixes.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_7

LANGUAGE: CMake
CODE:
```
function(append_target_expression)
  cmake_parse_arguments(ARG
    ""
    "PREFIX;PROPERTY"
    ""
    ${ARGN})

  set(TARGET_EXPRESSION "$<TARGET_PROPERTY:nvim_bin,${ARG_PROPERTY}>")
  set(TARGET_EXPRESSION "$<REMOVE_DUPLICATES:${TARGET_EXPRESSION}>")
  set(TARGET_EXPRESSION "${ARG_PREFIX}$<JOIN:${TARGET_EXPRESSION}, ${ARG_PREFIX}>")

  set(VERSION_STRING "${VERSION_STRING} ${TARGET_EXPRESSION} " PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Disabling HTML Rendering
DESCRIPTION: This snippet disables the default HTML rendering, which alters the appearance of certain tags. To disable rendering, the 'html_no_rendering' variable should be set to 1 in your vimrc file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_53

LANGUAGE: vim
CODE:
```
	:let html_no_rendering=1
```

----------------------------------------

TITLE: File Send Operation in libuv
DESCRIPTION: Transfers data between file descriptors. Limited equivalent to sendfile(2). Returns number of bytes written.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_55

LANGUAGE: lua
CODE:
```
uv.fs_sendfile({out_fd}, {in_fd}, {in_offset}, {size} [, {callback}])
```

----------------------------------------

TITLE: Sign Unplace Commands in Neovim
DESCRIPTION: Commands for removing signs from buffers and files with various group and ID combinations
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_4

LANGUAGE: vimdoc
CODE:
```
:sign unplace * group=* buffer={nr}
:sign unplace {id}
:sign unplace {id} group={group}
:sign unplace {id} group=*
:sign unplace *
:sign unplace * group={group}
:sign unplace * group=*
:sign unplace
:sign unplace group={group}
:sign unplace group=*
```

----------------------------------------

TITLE: Debug Greedy Example
DESCRIPTION: This command starts Vim in Ex mode, reads debug commands from input, adds a breakpoint in script.vim, and executes script.vim. It is used in test scripts to automate debugging by providing pre-defined debug commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
"echo 'q^Mq' | vim -e -s -c debuggreedy -c 'breakadd file script.vim' -S script.vim"
```

----------------------------------------

TITLE: Decreasing window size
DESCRIPTION: Decreases the height of the current window by a specified number of lines.  A count can be prepended to decrease the height by multiple lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
	CTRL-W -
```

----------------------------------------

TITLE: Getting Event Loop Metrics Information with uv.metrics_info()
DESCRIPTION: Returns a table containing current event loop metrics including loop count, events, and events waiting. Best retrieved in a prepare callback to ensure consistency.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_105

LANGUAGE: lua
CODE:
```
uv.metrics_info()
```

----------------------------------------

TITLE: Defining User-Defined Commands (Vimscript Example)
DESCRIPTION: This demonstrates how to define two user-defined commands, `MyCommand1` and `MyCommand2`, in Vimscript. It shows the potential ambiguity that can arise when using command-line completion with commands that share a common prefix.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_6

LANGUAGE: vimscript
CODE:
```
	:command MyCommand1 echo "one"
	:command MyCommand2 echo "two"
	:MyCommand
```

----------------------------------------

TITLE: Arch Linux Build Prerequisites
DESCRIPTION: Installs the necessary packages on Arch Linux systems to build Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_23

LANGUAGE: Shell
CODE:
```
"sudo pacman -S base-devel cmake ninja curl"
```

----------------------------------------

TITLE: Jumping to the start of a #if block (Vim)
DESCRIPTION: This snippet shows how to jump to the start of a `#if` or `#ifdef` block using the `[#` command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
"[#"
```

----------------------------------------

TITLE: Using NetrwMB Command for Bookmarking in Vim
DESCRIPTION: This snippet demonstrates the usage of the :NetrwMB command for bookmarking files or directories in Netrw. It shows the syntax for adding and removing bookmarks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_21

LANGUAGE: vim
CODE:
```
:NetrwMB[!] [files/directories]
```

----------------------------------------

TITLE: Enabling Spell Checking in Vim
DESCRIPTION: Command to enable spell checking for US English in the current buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_0

LANGUAGE: vimdoc
CODE:
```
:setlocal spell spelllang=en_us
```

----------------------------------------

TITLE: Validating and Generating Background Paper Thumbnails
DESCRIPTION: This method validates and generates thumbnails for background papers. It handles different types of backgrounds including local thumbnails, cloud documents, and solid colors.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_3

LANGUAGE: C++
CODE:
```
void BackgroundBox::Inner::validatePaperThumbnail(
		const Paper &paper) const {
	if (!paper.thumbnail.isNull()) {
		return;
	}
	const auto localThumbnail = paper.data.localThumbnail();
	if (!localThumbnail) {
		if (const auto document = paper.data.document()) {
			if (!paper.dataMedia) {
				paper.dataMedia = document->createMediaView();
				paper.dataMedia->thumbnailWanted(paper.data.fileOrigin());
			}
			if (!paper.dataMedia->thumbnail()) {
				return;
			}
		} else if (!paper.data.backgroundColors().empty()) {
			paper.thumbnail = Ui::PixmapFromImage(
				Ui::GenerateBackgroundImage(
					st::backgroundSize * cIntRetinaFactor(),
					paper.data.backgroundColors(),
					paper.data.gradientRotation()));
			paper.thumbnail.setDevicePixelRatio(cRetinaFactor());
			return;
		} else {
			return;
		}
	}
	const auto thumbnail = localThumbnail
		? localThumbnail
		: paper.dataMedia->thumbnail();
	auto original = thumbnail->original();
	if (paper.data.isPattern()) {
		original = Ui::PreparePatternImage(
			std::move(original),
			paper.data.backgroundColors(),
			paper.data.gradientRotation(),
			paper.data.patternOpacity());
	}
	paper.thumbnail = Ui::PixmapFromImage(TakeMiddleSample(
		original,
		st::backgroundSize));
	paper.thumbnail.setDevicePixelRatio(cRetinaFactor());
}
```

----------------------------------------

TITLE: Configuring Cargo Make Program Parameters
DESCRIPTION: Sets the parameters to pass to Cargo when using make commands. Defaults to '$*', which passes through any parameters given to the command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
let g:cargo_makeprg_params = 'build'
```

----------------------------------------

TITLE: Unsetting Environment Variable with uv.os_unsetenv()
DESCRIPTION: Removes an environment variable with the specified name. This function is not thread-safe.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_93

LANGUAGE: lua
CODE:
```
uv.os_unsetenv({name})
```

----------------------------------------

TITLE: Adding Lua Language Server Download External Project in CMake
DESCRIPTION: Creates an external project for downloading and extracting the Lua Language Server without building it, as it's a pre-built binary.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_33

LANGUAGE: cmake
CODE:
```
ExternalProject_Add(download_luals
  URL ${LUALS_URL}
  DOWNLOAD_DIR ${DEPS_DOWNLOAD_DIR}/luals
  SOURCE_DIR ${DEPS_BIN_DIR}/luals
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND ""
  EXCLUDE_FROM_ALL TRUE
  DOWNLOAD_NO_PROGRESS TRUE
  CMAKE_CACHE_ARGS ${DEPS_CMAKE_CACHE_ARGS})
```

----------------------------------------

TITLE: Filtering Quickfix or Location Lists in Vim Script
DESCRIPTION: This command utilizes the 'cfilter' plugin to filter entries within a quickfix or location list based on a specified pattern. It allows selective viewing of entries that match or don't match the given pattern, effectively managing large lists.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_28

LANGUAGE: vimscript
CODE:
```
:Cfilter[!] /{pat}/
:Lfilter[!] /{pat}/
```

----------------------------------------

TITLE: Implementing Header Guards in C
DESCRIPTION: Example showing the required header guard pattern using #pragma once for preventing multiple inclusion
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_0

LANGUAGE: c
CODE:
```
#pragma once
```

----------------------------------------

TITLE: Setting Up Git Commit Message Linting in CMake
DESCRIPTION: Creates a target for linting git commit messages using a custom Lua script. The target uses a minimal Neovim configuration to run the linting script.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_20

LANGUAGE: cmake
CODE:
```
add_custom_target(lintcommit
  COMMAND $<TARGET_FILE:nvim_bin> -u NONE -l ${PROJECT_SOURCE_DIR}/scripts/lintcommit.lua main)
add_dependencies(lintcommit nvim_bin)
```

----------------------------------------

TITLE: macOS MacPorts Wget Certificate Fix
DESCRIPTION: Installs curl-ca-bundle and configures wget to use it to resolve certificate errors on older macOS versions.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_36

LANGUAGE: Shell
CODE:
```
"sudo port install curl-ca-bundle\necho CA_CERTIFICATE=/opt/local/share/curl/curl-ca-bundle.crt >> ~/.wgetrc"
```

----------------------------------------

TITLE: Invalid Remote Server Command Example
DESCRIPTION: Example showing an incorrect command structure where arguments after --remote are treated as filenames.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/remote.txt#2025-04-20_snippet_2

LANGUAGE: bash
CODE:
```
nvim --remote --server ~/.cache/nvim/server.pipe file.txt
```

----------------------------------------

TITLE: Closing a window
DESCRIPTION: Closes the current window. Any command that quits editing a file will work, but `:close` prevents accidentally exiting Vim when closing the last window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
	:close
```

----------------------------------------

TITLE: Generating Vim Syntax File
DESCRIPTION: Creates custom command to generate Vim syntax file using Lua generator with various dependencies.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/CMakeLists.txt#2025-04-20_snippet_1

LANGUAGE: cmake
CODE:
```
add_custom_command(OUTPUT ${GENERATED_SYN_VIM}
  COMMAND ${LUA_GEN} ${SYN_VIM_GENERATOR} ${GENERATED_SYN_VIM} ${FUNCS_DATA}
  DEPENDS
    ${LUA_GEN_DEPS}
    ${SYN_VIM_GENERATOR}
    ${PROJECT_SOURCE_DIR}/src/nvim/ex_cmds.lua
    ${PROJECT_SOURCE_DIR}/src/nvim/auevents.lua
    ${PROJECT_SOURCE_DIR}/src/nvim/options.lua
    ${PROJECT_SOURCE_DIR}/src/nvim/eval.c
    ${FUNCS_DATA}
)
```

----------------------------------------

TITLE: Setting Minimum CMake Version and Project Definition for Neovim
DESCRIPTION: Defines the minimum required CMake version (3.16) and sets up the project name as 'nvim' with C as the language.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: CMake
CODE:
```
# Version should match the tested CMAKE_URL in .github/workflows/build.yml.
cmake_minimum_required(VERSION 3.16)

project(nvim C)
```

----------------------------------------

TITLE: Setting Backupskip with Environment Variable
DESCRIPTION: Example of setting backupskip option with an expanded HOME environment variable path.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
let &backupskip = escape(expand('$HOME'), '\') .. '/tmp/*'
```

----------------------------------------

TITLE: Forcing TeX Markup Highlighting in Buffer
DESCRIPTION: This snippet illustrates how to force TeX markup highlighting in a specific buffer of literate Haskell code. It requires setting the 'b:lhs_markup' variable to 'tex' before syntax highlighting is turned on.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_51

LANGUAGE: vim
CODE:
```
	:let b:lhs_markup = tex
```

----------------------------------------

TITLE: Switching from Terminal Vim to GUI Vim
DESCRIPTION: This command switches from terminal Vim to GUI Vim while editing a file. It opens the GUI window and stops using the terminal.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
:gui
```

----------------------------------------

TITLE: Configuring CMake Build for Gettext
DESCRIPTION: Sets up basic CMake configuration for the Gettext project. Specifies minimum CMake version 3.16, defines project name and language (C), disables compiler warnings, and configures static linker to ignore specific warnings.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.16)
project(gettext C)

add_compile_options(-w)
set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} /ignore:4006")
```

----------------------------------------

TITLE: Accepting Connections with uv.accept in Lua
DESCRIPTION: Demonstrates how to accept incoming connections using uv.listen and uv.accept. This is called after receiving a connection callback to accept a new client connection.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_23

LANGUAGE: lua
CODE:
```
server:listen(128, function (err)
  local client = uv.new_tcp()
  server:accept(client)
end)
```

----------------------------------------

TITLE: Setting foldtext with script ID in Vim
DESCRIPTION: This snippet illustrates how to use script-local functions with the 'foldtext' option, utilizing s: or <SID> to reference the function. This ensures that the function is properly scoped within the script where it is defined.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
set foldtext=s:MyFoldText()
set foldtext=<SID>SomeFoldText()
```

----------------------------------------

TITLE: Configuring Errorformat for JADE in Vim
DESCRIPTION: Sets the errorformat option to parse error messages from the JADE (James Clark's DSSSL Engine) processor, with a simple pattern that captures file, line, column, type, and message.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_66

LANGUAGE: vim
CODE:
```
:set efm=jade:%f:%l:%c:%t:%m
```

----------------------------------------

TITLE: Setting Background Based on Color Scheme with Autocmd in VimL
DESCRIPTION: This autocmd example shows how to set the 'background' option depending on the colorscheme selected, executing before the color scheme file is sourced.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
autocmd SourcePre */colors/blue_sky.vim set background=dark
```

----------------------------------------

TITLE: Disabling Ruby Support in Neovim
DESCRIPTION: Disables the Ruby provider in Neovim by setting the g:loaded_ruby_provider variable to 0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
let g:loaded_ruby_provider = 0
```

----------------------------------------

TITLE: Temporary Disabling Matchit Plugin: Vim Command
DESCRIPTION: This command allows users to temporarily disable the Matchit plugin, reverting the '%' key behavior back to Vim's default. It's useful for debugging or when the plugin's functionality is not desired temporarily.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:MatchDisable
```

----------------------------------------

TITLE: Getting Effective Tabstop in Neovim (Lua)
DESCRIPTION: Returns the indentation size for a given buffer. Takes an optional buffer number parameter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_52

LANGUAGE: lua
CODE:
```
get_effective_tabstop({bufnr})
```

----------------------------------------

TITLE: Multiple Variable Declaration Patterns in C
DESCRIPTION: Examples demonstrating proper patterns for declaring and initializing multiple variables
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_2

LANGUAGE: c
CODE:
```
int i;
int j;              // ✅
int i, j;           // ✅: multiple declarations, no initialization.
int i = 0;
int j = 0;          // ✅: one initialization per line.

int i = 0, j;       // ❌: multiple declarations with initialization.
int i = 0, j = 0;   // ❌: multiple declarations with initialization.
```

----------------------------------------

TITLE: Using libcallnr for System Functions in Vim
DESCRIPTION: Examples of using libcallnr() to call C library functions that return integers. This shows how to call getpid(), printf(), and sleep() from the standard C library.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_152

LANGUAGE: vim
CODE:
```
echo libcallnr("/usr/lib/libc.so", "getpid", "")
call libcallnr("libc.so", "printf", "Hello World!\n")
call libcallnr("libc.so", "sleep", 10)
```

----------------------------------------

TITLE: macOS MacPorts Build Prerequisites
DESCRIPTION: Installs the necessary packages on macOS systems using MacPorts to build Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_35

LANGUAGE: Shell
CODE:
```
"sudo port install ninja cmake gettext"
```

----------------------------------------

TITLE: Checking for forkpty function on SunOS in C
DESCRIPTION: Tests if the SunOS system supports the forkpty function for creating a new process attached to a pseudo-terminal by attempting to compile a program that calls it.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_5

LANGUAGE: C
CODE:
```
#include <termios.h>
int
main(void)
{
  return forkpty(0, NULL, NULL, NULL);
}
```

----------------------------------------

TITLE: Using fmod() Function in Vim Script
DESCRIPTION: Demonstrates the fmod() function which returns the remainder of dividing expr1 by expr2, even when the division is not representable. The result has the same sign as expr1 and magnitude less than expr2.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_74

LANGUAGE: vim
CODE:
```
echo fmod(12.33, 1.22)
```

LANGUAGE: vim
CODE:
```
echo fmod(-12.33, 1.22)
```

----------------------------------------

TITLE: Listing Marks
DESCRIPTION: Command to display a list of all current marks in the file, showing their positions and special marks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
:marks
```

----------------------------------------

TITLE: Disabling Literate Haskell Markup हाईलाइटिंग
DESCRIPTION: This snippet shows how to disable all markup highlighting in literate Haskell code. This is achieved by setting the 'lhs_markup' variable to 'none' globally in your vimrc file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_49

LANGUAGE: vim
CODE:
```
	:let lhs_markup = none
```

----------------------------------------

TITLE: Deferred Directory Deletion in Vim
DESCRIPTION: Shows how to schedule a directory for deletion using the defer delete command with recursive and force flags.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_180

LANGUAGE: vim
CODE:
```
defer delete('subdir/tmp', 'rf')
```

----------------------------------------

TITLE: Adding conditional GZ flag to statusline in Vim
DESCRIPTION: Demonstrates how to add a conditional ',GZ' flag to the statusline when a compressed file is loaded. It includes the statusline setting and related autocommands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_70

LANGUAGE: vim
CODE:
```
set statusline=...%r%{VarExists('b:gzflag','\ [GZ]')}%h...
let b:gzflag = 1
unlet b:gzflag
```

----------------------------------------

TITLE: LSP Utility Function Migration Example
DESCRIPTION: Example demonstrating migration from deprecated vim.lsp.util.lookup_section() to vim.tbl_get()
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_1

LANGUAGE: lua
CODE:
```
local keys = vim.split(section, '.', { plain = true })
local result = vim.tbl_get(table, unpack(keys))
```

----------------------------------------

TITLE: Pushing Context to Stack - Lua
DESCRIPTION: The ctxpush function pushes the current editor state onto the context stack, allowing for later restoration. Users can specify which types of context to include, helping manage state complexity.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_40

LANGUAGE: lua
CODE:
```
ctxpush([{types}])                                                   *ctxpush()*
		Pushes the current editor state (|context|) on the
		|context-stack|.
		If {types} is given and is a |List| of |String|s, it specifies
		which |context-types| to include in the pushed context.
		Otherwise, all context types are included.

		Parameters: ~
		  • {types} (`string[]?`)

		Return: ~
		  (`any`)
```

----------------------------------------

TITLE: Setting fold column width
DESCRIPTION: Shows a column at the left side of the window that indicates fold status with symbols. The number specifies the width of the column.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_7

LANGUAGE: vimdoc
CODE:
```
:set foldcolumn=4
```

----------------------------------------

TITLE: Demonstrating list2str() Function in Vim
DESCRIPTION: Examples of using the list2str() function to convert lists of numbers to character strings. Shows basic usage and handling of UTF-8 composing characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_155

LANGUAGE: vim
CODE:
```
echo list2str([32])		" returns " "
echo list2str([65, 66, 67])	" returns "ABC"

echo join(map(list, {nr, val -> nr2char(val)}), '')

echo list2str([97, 769])	" returns "á"
```

----------------------------------------

TITLE: Checking Local Directory Setting in Vim
DESCRIPTION: Demonstrates how to check if a window has a local directory path set via :lcd command. The examples show equivalent ways to call the haslocaldir() function with different parameter combinations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_123

LANGUAGE: vim
CODE:
```
echo haslocaldir()
echo haslocaldir(0)
echo haslocaldir(0, 0)
```

----------------------------------------

TITLE: Configuring Gettext Runtime Feature Flags in CMake
DESCRIPTION: Sets feature flags for the Gettext runtime library configuration and generates the libgnuintl.h header file. These flags control feature availability like locale support, printf variants, and numeric types.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_3

LANGUAGE: cmake
CODE:
```
set(HAVE_NEWLOCALE 0)
set(HAVE_POSIX_PRINTF 0)
set(HAVE_SNPRINTF 0)
set(HAVE_ASPRINTF 0)
set(HAVE_WPRINTF 0)
set(HAVE_NAMELESS_LOCALES 0)
set(HAVE_LONG_LONG_INT 1)
configure_file(gettext-runtime/intl/libgnuintl.in.h
  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl/libgnuintl.h)
```

----------------------------------------

TITLE: Command-line Editing Keys in Neovim
DESCRIPTION: Key mappings and their functions for editing the command-line in Neovim. Includes navigation, completion, and history manipulation commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
|c_CTRL-A|  CTRL-A      do completion on the pattern in front of the cursor and insert all matches
|c_CTRL-B|  CTRL-B      cursor to begin of command-line
|c_CTRL-C|  CTRL-C      same as <Esc>
|c_CTRL-D|  CTRL-D      list completions that match the pattern in front of the cursor
|c_CTRL-E|  CTRL-E      cursor to end of command-line
|'cedit'|   CTRL-F      default value for 'cedit': opens the command-line window; otherwise not used
|c_CTRL-G|  CTRL-G      next match when 'incsearch' is active
|c_<BS>|    <BS>        delete the character in front of the cursor
```

----------------------------------------

TITLE: Disabling Mouse in Neovim
DESCRIPTION: Set the 'mouse' option to an empty string to completely disable mouse functionality in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
set mouse=
```

----------------------------------------

TITLE: Configuring MediaWiki Syntax Highlighting Options in Vim
DESCRIPTION: Sets options for MediaWiki syntax highlighting, including disabling HTML rendering and enabling terminal-based text formatting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_84

LANGUAGE: VimScript
CODE:
```
let g:html_no_rendering = 1

let g:html_style_rendering = 1
```

----------------------------------------

TITLE: Function Reference in Dictionary Example in Vimscript
DESCRIPTION: This snippet shows how to define a function directly as a member of a Dictionary and assign its Funcref to a Dictionary entry. The key of the Dictionary can start with a lowercase letter.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
	:function dict.init() dict
	:   let self.val = 0
	:endfunction
```

----------------------------------------

TITLE: Simple echo program using TTY handles in Lua
DESCRIPTION: This snippet illustrates a basic echo program using TTY handles in Lua. It creates stdin and stdout TTY handles, reads data from stdin, and writes it to stdout. The program closes the handles when there is no more data to read.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_37

LANGUAGE: lua
CODE:
```
    -- Simple echo program
    local stdin = uv.new_tty(0, true)
    local stdout = uv.new_tty(1, false)

    stdin:read_start(function (err, data)
      assert(not err, err)
      if data then
        stdout:write(data)
      else
        stdin:close()
        stdout:close()
      end
    end)
```

----------------------------------------

TITLE: Fast Setting of Active Highlight Namespace - Lua
DESCRIPTION: Sets the active namespace for highlights during a redraw cycle, intended for more efficient rendering in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_23

LANGUAGE: lua
CODE:
```
nvim_set_hl_ns_fast({ns_id})
```

----------------------------------------

TITLE: Vim Mark List Command
DESCRIPTION: Command to list specific marks in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:marks aB
```

----------------------------------------

TITLE: VimLeave Autocommand with Exit Value in Neovim VimL
DESCRIPTION: This snippet shows an autocommand that echoes the exit value of Vim using the v:exiting variable when Vim is about to exit.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
:au VimLeave * echo "Exit value is " .. v:exiting
```

----------------------------------------

TITLE: Formatting a Paragraph in Vim
DESCRIPTION: Uses the 'gq' operator with 'ap' text object to format the current paragraph according to textwidth settings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
gqap
```

----------------------------------------

TITLE: Discovering Mode Bits
DESCRIPTION: Example showing how to discover mode bits for Operator-pending mode at runtime.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_161

LANGUAGE: vim
CODE:
```
omap xyzzy <Nop>
let op_bit = maplist()->filter(
    \ {_, m -> m.lhs == 'xyzzy'})[0].mode_bits
ounmap xyzzy
echo printf("Operator-pending mode bit: 0x%x", op_bit)
```

----------------------------------------

TITLE: Vim While Loop Example
DESCRIPTION: Shows how to implement a while loop to process lines in a file
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_102

LANGUAGE: vim
CODE:
```
:let lnum = 1
:while lnum <= line("$")
   :call FixLine(lnum)
   :let lnum = lnum + 1
:endwhile
```

----------------------------------------

TITLE: Disabling Matchparen Plugin in Neovim
DESCRIPTION: Sets the loaded_matchparen variable to prevent the matchparen plugin from loading. This must be set before the plugin loads.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_paren.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
:let loaded_matchparen = 1
```

----------------------------------------

TITLE: Re-enabling Matchit Plugin: Vim Command
DESCRIPTION: This command re-enables the Matchit plugin after it has been disabled, restoring the extended matching functionality to the '%' key in Vim. It is useful for reintegrating the plugin's capabilities after temporary deactivation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:MatchEnable
```

----------------------------------------

TITLE: File System Data Sync Operation in libuv
DESCRIPTION: Synchronizes a file's data to disk. Equivalent to fdatasync(2) system call. Similar to fsync but doesn't flush metadata.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_53

LANGUAGE: lua
CODE:
```
uv.fs_fdatasync({fd} [, {callback}])
```

----------------------------------------

TITLE: Loading All Vim Packages with :packloadall Command
DESCRIPTION: The :packloadall command loads all packages in the "start" directory under each entry in 'packpath', adding them to 'runtimepath' and sourcing plugin files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:packl[oadall][!]
```

----------------------------------------

TITLE: Defining Shortcuts for Lua BitOp functions
DESCRIPTION: Shows a common practice of caching frequently used BitOp functions in local variables to save typing and improve performance. It does this by mapping bitwise operation functions to shorter local variable names.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_1

LANGUAGE: Lua
CODE:
```
local bnot = bit.bnot
local band, bor, bxor = bit.band, bit.bor, bit.bxor
local lshift, rshift, rol = bit.lshift, bit.rshift, bit.rol

-- Example use of the shortcuts:
local function tr_i(a, b, c, d, x, s)
  return rol(bxor(c, bor(b, bnot(d))) + a + x, s) + b
end
```

----------------------------------------

TITLE: Closing a fold
DESCRIPTION: Closes an open fold at the cursor position, hiding its content and showing just the folded line. This is the counterpart to the zo command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_2

LANGUAGE: vimdoc
CODE:
```
zc
```

----------------------------------------

TITLE: Custom Plugin Mapping Definition
DESCRIPTION: Example of defining custom mapping for a mail plugin feature.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
map ,p <Plug>MailQuote
```

----------------------------------------

TITLE: Checking for Integer using Msgpack in Vim
DESCRIPTION: This function is used to determine if a given Msgpack value is of integer type. It returns 1 if the value is an integer and 0 otherwise. The function does not independently verify the type but relies on the description.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
msgpack#is_int({msgpack-value})
```

----------------------------------------

TITLE: Mapping Key to No Operation in Vim
DESCRIPTION: This snippet demonstrates how to map a key in Vim so that it performs no action. The <F7> key is mapped to <Nop>, effectively making it inactive.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:map <F7> <Nop>| map! <F7> <Nop>
```

----------------------------------------

TITLE: String Interpolation in Vim Script
DESCRIPTION: Examples of string interpolation using $-quote syntax with expressions in curly braces.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_81

LANGUAGE: vim
CODE:
```
let your_name = input("What's your name? ")\necho\necho $"Hello, {your_name}!"\necho $"The square root of {{9}} is {sqrt(9)}"
```

----------------------------------------

TITLE: Sample Text - Long Line
DESCRIPTION: A long string of 'a' characters used as sample text. It's likely designed to test the handling of long lines in quickfix features.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/quickfix.txt#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
```

----------------------------------------

TITLE: Setting Arabic Font in Neovim GUI
DESCRIPTION: Sets the GUI font to an Arabic-compatible font. The font name should be replaced with an appropriate Arabic font installed on the system.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_0

LANGUAGE: VimScript
CODE:
```
:set guifont=your_ARABIC_FONT
```

----------------------------------------

TITLE: Line Comments for Error Handling in C
DESCRIPTION: Example of using end-of-line comments to explain error handling logic.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_10

LANGUAGE: c
CODE:
```
// If we have enough memory, mmap the data portion too.
mmap_budget = max<int64>(0, mmap_budget - index_->length());
if (mmap_budget >= data_size_ && !MmapData(mmap_chunk_bytes, mlock)) {
  return;  // Error already logged.
}
```

----------------------------------------

TITLE: Setting Manual Filetype for IDL Files
DESCRIPTION: Commands to manually set the filetype for IDL files, either through command or modeline.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set filetype=idl
```

LANGUAGE: vim
CODE:
```
/* vim: set filetype=idl : */
```

----------------------------------------

TITLE: Setting Vim Syntax Sync Line Breaks
DESCRIPTION: Example showing how to configure syntax synchronization with line breaks consideration
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_174

LANGUAGE: vim
CODE:
```
:syntax sync linebreaks=1
```

----------------------------------------

TITLE: Navigating Quickfix List History in Vim
DESCRIPTION: This Vim command shows how to use the `:colder` command to navigate back to the previous quickfix list, useful for browsing code in a tree-like structure.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_38

LANGUAGE: vim
CODE:
```
:colder
```

----------------------------------------

TITLE: Customizing Completion Key
DESCRIPTION: Allows the user to define a custom key for triggering the SQL completion. This is useful if the default keymap `<C-C>` conflicts with other configurations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
    let g:ftplugin_sql_omni_key = '<C-C>'
```

----------------------------------------

TITLE: Disabling Matchparen After Loading
DESCRIPTION: Command to disable the matchparen plugin after it has already been loaded.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_paren.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
:NoMatchParen
```

----------------------------------------

TITLE: Enabling Matchparen Plugin
DESCRIPTION: Command to re-enable the matchparen plugin after it has been disabled with NoMatchParen.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_paren.txt#2025-04-20_snippet_2

LANGUAGE: viml
CODE:
```
:DoMatchParen
```

----------------------------------------

TITLE: Neovim Platform Support Matrix
DESCRIPTION: Table showing supported platforms, their support tiers, required versions and tested versions. Platforms are categorized into three tiers based on level of support and testing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/support.txt#2025-04-20_snippet_0

LANGUAGE: help
CODE:
```
`System`          `Tier`      `Versions`                  `Tested versions`
Linux (x86_64)   1      >= 2.6.32, glibc >= 2.12     Ubuntu 24.04
macOS (x86_64)   1      >= 11                        macOS 13
macOS (arm64)    1      >= 11                        macOS 15
Windows 64-bit   1      >= Windows 10 Version 1809   Windows Server 2022
FreeBSD          1      >= 10                        FreeBSD 14
Linux (arm64)    2      >= 2.6.32, glibc >= 2.12
OpenBSD          2      >= 7
MinGW            2      MinGW-w64
Windows 64-bit   3      < Windows 10 Version 1809
```

----------------------------------------

TITLE: Mapping with Special Characters in Neovim
DESCRIPTION: This mapping example shows how to include special characters like | (pipe) and space in a mapping command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_5

LANGUAGE: viml
CODE:
```
:map <F8> :write <Bar> !checkin %:S<CR>
```

----------------------------------------

TITLE: Configuring String Syntax Region with Quote Highlighting
DESCRIPTION: Defines a syntax region for strings with custom highlighting for quote characters using matchgroup
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_157

LANGUAGE: viml
CODE:
```
:syntax region String matchgroup=Quote start=+"+  skip=+\"+  end=+"+
```

----------------------------------------

TITLE: Setting Additional Options for Rustfmt
DESCRIPTION: Specifies additional command-line options to pass to rustfmt when formatting code. The write-mode is already set to 'overwrite'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
let g:rustfmt_options = ''
```

----------------------------------------

TITLE: Simple Error Pattern Example
DESCRIPTION: Basic error format pattern for parsing simple compiler errors with line number and column information.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_63

LANGUAGE: vim
CODE:
```
:set efm=%EError\ %n,%Cline\ %l,%Ccolumn\ %c,%Z%m
```

----------------------------------------

TITLE: Running Single Test Function Command
DESCRIPTION: Command for running a specific test function from a test script using Vim with minimal configuration.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/README.txt#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
../vim -u NONE -S runtest.vim <test_file>.vim <function_name>
```

----------------------------------------

TITLE: Line Continuation in Vim Scripts
DESCRIPTION: Example of using line continuation in Vim scripts with the backslash character, allowing long commands to be split across multiple lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:set comments=sr:/*,mb:*,el:*/,
		     \://,
		     \b:#,
		     \:%,
		     \n:>,
		     \fb:-
```

----------------------------------------

TITLE: Configuring Lifelines Syntax Highlighting in Vim
DESCRIPTION: Enables highlighting of deprecated functions as errors in Lifelines syntax.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_75

LANGUAGE: VimScript
CODE:
```
:let g:lifelines_deprecated = 1
```

----------------------------------------

TITLE: Alternative First Quickfix Error Command
DESCRIPTION: An alternative command for displaying the first error in the quickfix list, equivalent to :crewind.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
:cfir[st][!] [nr]
```

----------------------------------------

TITLE: Clearing Specific Syntax Groups
DESCRIPTION: Command to clear specific syntax groups for the current buffer, removing all patterns and keywords for the specified group names.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_199

LANGUAGE: vim
CODE:
```
:syntax clear {group-name} ..
```

----------------------------------------

TITLE: Disable automatic execution for security
DESCRIPTION: This snippet demonstrates how to disable automatic execution of commands by the gzip plugin for security reasons. Setting `g:gzip_exec` to 0 prevents the plugin from running external executables when opening a buffer.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_gzip.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
	:let g:gzip_exec = 0

```

----------------------------------------

TITLE: Handling Numbers in VimL
DESCRIPTION: This code illustrates the representation and output of different number types in Vim script, including decimal, hexadecimal, octal, and binary. It showcases how these numbers are printed using the :echo command. Key inputs are number definitions in various formats, and outputs are their decimal representations.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_2

LANGUAGE: VimL
CODE:
```
:echo 0x7f 0o36
:echo 0x7f -0o36
```

----------------------------------------

TITLE: Disabling LaTeX Error Checking with VimL
DESCRIPTION: Configuration to suppress all lexical error checking performed by the LaTeX syntax highlighting. Useful when error highlighting is incorrectly flagging valid LaTeX code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_139

LANGUAGE: viml
CODE:
```
let g:tex_no_error=1
```

----------------------------------------

TITLE: Toggling Ada Syntax Options
DESCRIPTION: Function to toggle Ada highlighting options on or off. This function is used by the Ada menu in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_6

LANGUAGE: viml
CODE:
```
ada#Switch_Syntax_Option({option})
```

----------------------------------------

TITLE: Set Show Mode Command
DESCRIPTION: Command to display the current editing mode at the bottom of the Vim window.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set showmode
```

----------------------------------------

TITLE: Switch Visual Block Selection Corner in Neovim
DESCRIPTION: In Visual block mode, this command moves the cursor to the opposite corner in the same line. The highlighted text may change when the corner is at a character that occupies more than one position on the screen (e.g., a <Tab>).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
"O"
```

----------------------------------------

TITLE: Removing Window-Scoped Variable in Neovim Lua API
DESCRIPTION: Removes a window-scoped (w:) variable. Available since Neovim 0.1.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_73

LANGUAGE: lua
CODE:
```
nvim_win_del_var({window}, {name})
```

----------------------------------------

TITLE: Creating Directory for Global Plugin (Unix) - Vim
DESCRIPTION: This snippet shows how to create a plugin directory for adding a global plugin in Unix systems. It ensures that the necessary directory structure exists for plugin installation.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_6

LANGUAGE: Vim
CODE:
```
mkdir -p ~/.local/share/nvim/site/plugin
```

----------------------------------------

TITLE: Deprecated Vimscript Buffer Functions
DESCRIPTION: Lists Vimscript buffer functions that are now obsolete and maps them to new equivalents like bufnr() for buffer_number().
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_5

LANGUAGE: Vimscript
CODE:
```
buffer_number()
```

----------------------------------------

TITLE: Navigating to Error in Previous File
DESCRIPTION: Commands for displaying the last error in the previous file in the quickfix list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_16

LANGUAGE: vim
CODE:
```
:[count]cNf[ile][!]
:[count]cpf[ile][!]
```

----------------------------------------

TITLE: Tagging Tests in Lua
DESCRIPTION: This Lua code snippet demonstrates how to tag tests by adding a hashtag before the description string in the `it` function, allowing for selective running of tests that match specific tags.
SOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_8

LANGUAGE: lua
CODE:
```
it('#foo bar baz', function()
  ...
end)
it('#foo another test', function()
  ...
end)
```

----------------------------------------

TITLE: Stopping the libuv Event Loop in Lua
DESCRIPTION: This function stops the libuv event loop, causing |uv.run()| to end as soon as possible.  The effect is not immediate but takes place on the next loop iteration. This function does not return anything.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_8

LANGUAGE: lua
CODE:
```
"uv.stop()                                                            *uv.stop()*\n\n                Stop the event loop, causing |uv.run()| to end as soon as\n                possible. This will happen not sooner than the next loop\n                iteration. If this function was called before blocking for\n                I/O, the loop won't block for I/O on this iteration.\n\n                Returns: Nothing."
```

----------------------------------------

TITLE: Styling Table Cell with HTML in HTML
DESCRIPTION: This snippet demonstrates the HTML markup for styling a single table cell with specific border, alignment, font, and color properties. It sets a bottom border, right-aligns the content, and displays a red '5' in Arial font.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_4

LANGUAGE: HTML
CODE:
```
<td style="border-bottom windowtext 0.5pt solid; border-left windowtext;" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>
```

----------------------------------------

TITLE: Custom Subscript Character Set for LaTeX with VimL
DESCRIPTION: Example of customizing which characters can be displayed as subscripts based on font support. This example removes characters not supported by Luxi Mono Bold.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_145

LANGUAGE: viml
CODE:
```
let g:tex_subscripts= "[0-9aeijoruvx,+-/().]"
```

----------------------------------------

TITLE: Sleep Command Examples in Vim
DESCRIPTION: Examples demonstrating various ways to use the sleep command in Vim, showing different time unit specifications.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:sleep      "sleep for one second
:5sleep      "sleep for five seconds
:sleep 100m     "sleep for 100 milliseconds
10gs          "sleep for ten seconds
```

----------------------------------------

TITLE: Setting Up Uncrustify External Project in CMake
DESCRIPTION: Configures the uncrustify code formatter as an external project dependency, setting up its build parameters and output directory.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_29

LANGUAGE: cmake
CODE:
```
get_externalproject_options(uncrustify ${DEPS_IGNORE_SHA})
ExternalProject_Add(uncrustify
  DOWNLOAD_DIR ${DEPS_DOWNLOAD_DIR}/uncrustify
  CMAKE_ARGS ${DEPS_CMAKE_ARGS}
    -D CMAKE_RUNTIME_OUTPUT_DIRECTORY=${DEPS_BIN_DIR}
    -D CMAKE_SKIP_RPATH=true
  EXCLUDE_FROM_ALL TRUE
  ${EXTERNALPROJECT_OPTIONS})
```

----------------------------------------

TITLE: Displaying Vim Window Size in Characters
DESCRIPTION: This command displays the current size of the Vim window in terms of lines and columns (characters).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:set lines columns
```

----------------------------------------

TITLE: Digraph Get Example in Vim
DESCRIPTION: Demonstrates how to get built-in and user-defined digraphs using the digraph_get() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_52

LANGUAGE: vim
CODE:
```
" Get a built-in digraph
echo digraph_get('00')		" Returns '∞'

" Get a user-defined digraph
call digraph_set('aa', 'あ')
echo digraph_get('aa')		" Returns 'あ'
```

----------------------------------------

TITLE: Using or() Function for Bitwise Operations in Vim
DESCRIPTION: Demonstrates how to perform bitwise OR operations by setting a specific bit in a variable. This function allows combining bit flags in Vim scripts.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_185

LANGUAGE: vim
CODE:
```
let bits = or(bits, 0x80)
```

----------------------------------------

TITLE: Special Character Search Pattern
DESCRIPTION: Shows how to search for '#include' using forward slash and repeat search with the n command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
/#include
```

----------------------------------------

TITLE: Clearing Syntax Group Lists
DESCRIPTION: Command to clear specific syntax group lists for the current buffer, setting the contents of the specified group lists to empty.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_200

LANGUAGE: vim
CODE:
```
:syntax clear @{grouplist-name} ..
```

----------------------------------------

TITLE: Getting Thread Name in Lua with Libuv
DESCRIPTION: Retrieves the name of the specified thread. Can be used as a method on a thread object.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_68

LANGUAGE: lua
CODE:
```
uv.thread_getname({thread})
```

----------------------------------------

TITLE: Disabling Matchit Plugin in Neovim Config
DESCRIPTION: Add this line to your Neovim config to disable the default matchit plugin.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
:let loaded_matchit = 1
```

----------------------------------------

TITLE: Formatting Table Cell with Styled Number
DESCRIPTION: HTML table cell with windowtext border styling, Arial font, and red-colored bold number 5. The cell includes border-bottom and border-left styles with specific windowtext color.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_10

LANGUAGE: HTML
CODE:
```
<td style="border-bottom windowtext 0.5pt solid; border-left windowtext;" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>
```

----------------------------------------

TITLE: Defining Match Words for New Language: Vim Script
DESCRIPTION: To configure the Matchit plugin for a new programming language, the 'b:match_words' variable must be set. This variable defines the matching patterns and groups the plugin will recognize, enabling custom behavior for different language structures.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
let b:match_words = '\<foo\>:\<bar\>'
```

----------------------------------------

TITLE: Defining NetReadFixup Function in Vim Script
DESCRIPTION: Creates a function to handle custom fixups for different file transfer methods in Netrw.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_19

LANGUAGE: Vim script
CODE:
```
function! NetReadFixup(method,line1,line2)
  " a:line1: first new line in current file
  " a:line2: last  new line in current file
  if     a:method == 1 "rcp
  elseif a:method == 2 "ftp + <.netrc>
  elseif a:method == 3 "ftp + machine,uid,password,filename
  elseif a:method == 4 "scp
  elseif a:method == 5 "http/wget
  elseif a:method == 6 "dav/cadaver
  elseif a:method == 7 "rsync
  elseif a:method == 8 "fetch
  elseif a:method == 9 "sftp
  else               " complain
  endif
endfunction
```

----------------------------------------

TITLE: Query Pattern with Predicate Match
DESCRIPTION: Query pattern showing comment matching with the match? predicate.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_5

LANGUAGE: query
CODE:
```
(((comment)+ @comment)\n (#match? @comment "TODO"))
```

----------------------------------------

TITLE: Setting Netrw List Hide Pattern Example in VimL
DESCRIPTION: Examples of how to configure the g:netrw_list_hide variable to hide files matching specific patterns. Shows how to hide .swp files and also how to combine with gitignore patterns using the netrw_gitignore#Hide() helper function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_36

LANGUAGE: viml
CODE:
```
let g:netrw_list_hide= '.*\.swp$'
let g:netrw_list_hide= netrw_gitignore#Hide() .. '.*\.swp$'
```

----------------------------------------

TITLE: Using input() with default text
DESCRIPTION: Shows how to use the input() function with a default value that will be pre-filled for the user. This example prompts for a color with "white" as the default value.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_133

LANGUAGE: vim
CODE:
```
let color = input("Color? ", "white")
```

----------------------------------------

TITLE: Enabling Code Folding for Rust Files
DESCRIPTION: Enables code folding for Rust files. When set to 1, braced blocks are folded but all folds are open by default. When set to 2, folds respect the global foldlevel setting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
let g:rust_fold = 1
```

----------------------------------------

TITLE: Vim Command Documentation Format
DESCRIPTION: Documentation entry format showing command name with its short/long forms and description. Commands follow the pattern of |:command| :abbreviated[full] description
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
|:ruby|		:rub[y]		execute Ruby command
|:rubydo|	:rubyd[o]	execute Ruby command for each line
|:rubyfile|	:rubyf[ile]	execute Ruby script file
```

----------------------------------------

TITLE: Converting UTF-16 to WTF-8 in Lua
DESCRIPTION: This function converts a UTF-16 (or UCS-2) string to a UTF-8 string. It assumes the endianness of the input string matches the platform's native endianness.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_107

LANGUAGE: lua
CODE:
```
uv.utf16_to_wtf8({utf16})
```

----------------------------------------

TITLE: Setting GCC Compiler Parameters in Vim
DESCRIPTION: Sets parameters for the javac compiler by configuring the javac_makeprg_params variable to include additional compiler flags.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_42

LANGUAGE: vim
CODE:
```
let g:javac_makeprg_params = "-Xlint:all -encoding utf-8"
```

----------------------------------------

TITLE: Custom Completion Function Signature in Vim/Neovim
DESCRIPTION: The function signature for a custom completion function used with user-defined commands. It takes three parameters: ArgLead, CmdLine, and CursorPos.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_31

LANGUAGE: viml
CODE:
```
:function {func}(ArgLead, CmdLine, CursorPos)
```

----------------------------------------

TITLE: Setting GUI Colors in Neovim
DESCRIPTION: Example of setting white text on black background for GUI Neovim
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
:highlight Normal guibg=Black guifg=White
```

----------------------------------------

TITLE: Adding Rare Word to Vim Spell File
DESCRIPTION: Command to add a word as a rare word to the first entry in 'spellfile'. Count can be used to specify a different entry.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_5

LANGUAGE: vimdoc
CODE:
```
:[count]spellra[re] {word}
```

----------------------------------------

TITLE: PuTTY Configuration for Netrw
DESCRIPTION: Configuration settings for using PuTTY's PSCP and PSFTP with Netrw.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
let g:netrw_scp_cmd = '"c:\Program Files\PuTTY\pscp.exe" -q -batch'
let g:netrw_sftp_cmd= '"c:\Program Files\PuTTY\psftp.exe"'
```

----------------------------------------

TITLE: Configuring Header Files for Gettext Tools in CMake
DESCRIPTION: This macro processes header template files, replacing placeholders and configuring them for the build. It handles system-specific adjustments and sets default values for undefined variables.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_10

LANGUAGE: cmake
CODE:
```
macro(CONFIGURE_HEADER_FILES HEADER_TEMPLATES_PATH)
  set(HEADER_TEMPLATES_ABS_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${HEADER_TEMPLATES_PATH}")
  file(GLOB_RECURSE HEADER_TEMPLATES "${HEADER_TEMPLATES_ABS_PATH}/*.in.h")
  list(REMOVE_ITEM HEADER_TEMPLATES  "${HEADER_TEMPLATES_ABS_PATH}/stdint.in.h")
  list(REMOVE_ITEM HEADER_TEMPLATES  "${HEADER_TEMPLATES_ABS_PATH}/wchar.in.h")
  foreach(HEADER_TEMPLATE ${HEADER_TEMPLATES})
    file(READ ${HEADER_TEMPLATE} HEADER_CONTENT)
    string(REPLACE "/* The definition of _GL_ARG_NONNULL is copied here.  */" "#include \"arg-nonnull.h\"" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "/* The definition of _GL_WARN_ON_USE is copied here.  */" "#include \"warn-on-use.h\"" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "/* The definitions of _GL_FUNCDECL_RPL etc. are copied here.  */" "#include \"c++defs.h\"" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_LSTAT@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_MBSINIT@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_SIGACTION@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_SIGPROCMASK@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_STPCPY@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_STPNCPY@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@GNULIB_STRCHRNUL@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_ISWCNTRL@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_WCTYPE_T@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_STRUCT_TIMEVAL@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_WINSOCK2_H@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@DLL_VARIABLE@" "" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_NEWLOCALE@" "0" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@PRAGMA_COLUMNS@" "" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "#if @GNULIB_UTIME@" "#if 1\n#define utime gl_utime" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_UTIME@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
    string(REPLACE "@HAVE_LONG_LONG_INT@" "1" HEADER_CONTENT "${HEADER_CONTENT}")

    string(REGEX REPLACE "^${HEADER_TEMPLATES_ABS_PATH}/" "" HEADER_PATH "${HEADER_TEMPLATE}")
    string(REPLACE ".in" "" HEADER_PATH ${HEADER_PATH})
    string(REPLACE "_" "/" HEADER_PATH ${HEADER_PATH})
    # find_file will create a cache entry for the variable
    # SYSTEM_HEADER, so reset it before each call
    set(SYSTEM_HEADER "SYSTEM_HEADER-NOTFOUND")
    find_file(SYSTEM_HEADER ${HEADER_PATH} PATHS "${LIBICONV_INCLUDE_DIRS}")
    if(SYSTEM_HEADER)
      # Gnulib uses #include_next to extend system header files,
      # but MSVC doesn't support it, so a regular include directive
      # with a relative path is used instead
      string(REGEX REPLACE ".*/(.*/\${HEADER_PATH})" "../\\1"
        INCLUDE_PATH "${SYSTEM_HEADER}")
      string(REGEX REPLACE "@INCLUDE_NEXT[^@]*@ @NEXT_[^@\n]+@"
        "include <${INCLUDE_PATH}>" HEADER_CONTENT "${HEADER_CONTENT}")
    endif()

    # Default any remaining template variables to 0
    string(REGEX REPLACE "@[^@\n]+@" "0" HEADER_CONTENT "${HEADER_CONTENT}")

    file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/${HEADER_TEMPLATES_PATH}/${HEADER_PATH}" "${HEADER_CONTENT}")
  endforeach()
endmacro()
```

----------------------------------------

TITLE: Styling Table Cell with HTML in Neovim Project
DESCRIPTION: HTML code for a table cell with specific styling including bottom border, left border, right alignment, Arial font, and red text color. The cell contains the number 5 in bold.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_9

LANGUAGE: HTML
CODE:
```
<td style="border-bottom windowtext 0.5pt solid; border-left windowtext;" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>
```

----------------------------------------

TITLE: Setting the Current Window - Lua
DESCRIPTION: Sets the current window and implicitly the associated tabpage. This action is restricted during text lock.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_20

LANGUAGE: lua
CODE:
```
nvim_set_current_win({window})
```

----------------------------------------

TITLE: Executing Function in Window Context in Neovim Lua API
DESCRIPTION: Calls a Lua function with a specific window as the temporary current window. Available since Neovim 0.5.0.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_71

LANGUAGE: lua
CODE:
```
nvim_win_call({window}, {fun})
```

----------------------------------------

TITLE: Setting FreeBASIC Dialect Configuration
DESCRIPTION: Code snippet showing how to set the default FreeBASIC dialect to 'fblite' while allowing #lang directive overrides.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
let g:freebasic_lang = "fblite"
```

----------------------------------------

TITLE: Styling Table Cell with Borders and Formatted Text in HTML
DESCRIPTION: HTML markup for a table cell with bottom and left borders, right alignment, and red '5' text in Arial font. This pattern is repeated multiple times to create a table row.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_7

LANGUAGE: HTML
CODE:
```
<td style="border-bottom windowtext 0.5pt solid; border-left windowtext;" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>
```

----------------------------------------

TITLE: Setting Default Sections for Manpages in Neovim
DESCRIPTION: This command sets the `b:man_default_sections` variable to '3,2', which specifies the preferred sections for manpages, such as sections 3 and 2 for C programming. This allows specifying the order of sections to check for a command's manpage.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_20

LANGUAGE: vim
CODE:
```
":let b:man_default_sections = '3,2'"
```

----------------------------------------

TITLE: Navigating to Next Quickfix Error
DESCRIPTION: Command for displaying the next error in the quickfix list that includes a file name.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:[count]cn[ext][!]
```

----------------------------------------

TITLE: Implementing Custom Maven Pre-Compiler Actions in Vim
DESCRIPTION: Custom functions to handle Maven pre-compilation actions, including class file cleanup and compilation. These functions are registered with SpotBugs using function references in the g:spotbugs_properties dictionary.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_51

LANGUAGE: vim
CODE:
```
function! MavenPreCompilerAction() abort
	call spotbugs#DeleteClassFiles()
	compiler maven
	make compile
	cc
endfunction

function! MavenPreCompilerTestAction() abort
	call spotbugs#DeleteClassFiles()
	compiler maven
	make test-compile
	cc
endfunction

let g:spotbugs_properties = {
	\ 'compiler':		'maven',
	\ 'PreCompilerAction':
		\ function('MavenPreCompilerAction'),
	\ 'PreCompilerTestAction':
		\ function('MavenPreCompilerTestAction'),
\ }
```

----------------------------------------

TITLE: Example Text Input
DESCRIPTION: Example showing how to enter text in Insert mode and return to Normal mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
iA very intelligent turtle
Found programming Unix a hurdle
```

----------------------------------------

TITLE: Literal <lt> Mapping in Vim
DESCRIPTION: Demonstrates how to create a mapping that inserts a literal '<lt>' character using key notation and mapping techniques.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_4

LANGUAGE: vim
CODE:
```
:map <C-L> <lt>lt>
```

----------------------------------------

TITLE: Installing Gettext Tools Components in CMake
DESCRIPTION: This snippet sets up the installation rules for the Gettext tools, including header files, libraries, and executables.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_16

LANGUAGE: cmake
CODE:
```
include(GNUInstallDirs)

install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl/libgnuintl.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  RENAME libintl.h)

install(TARGETS libintl msgmerge msgfmt xgettext
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
```

----------------------------------------

TITLE: Window Scrolling Commands (Vim)
DESCRIPTION: Commands for scrolling the window content vertically and horizontally, including line-by-line and page-by-page movements.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
CTRL-E          window N lines downwards (default: 1)
CTRL-D          window N lines Downwards (default: 1/2 window)
CTRL-F          window N pages Forwards (downwards)
CTRL-Y          window N lines upwards (default: 1)
CTRL-U          window N lines Upwards (default: 1/2 window)
CTRL-B          window N pages Backwards (upwards)
z<CR> or zt     redraw, current line at top of window
z. or zz        redraw, current line at center of window
z- or zb        redraw, current line at bottom of window
```

----------------------------------------

TITLE: Using Remote Vim Configuration via SSH
DESCRIPTION: Command-line options to start Vim using a remote .vimrc file accessed via scp, allowing for portable configuration across systems.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_15

LANGUAGE: bash
CODE:
```
vim -u NORC -N
 --cmd "runtime plugin/netrwPlugin.vim"
 --cmd "source scp://HOSTNAME/.vimrc"
```

----------------------------------------

TITLE: Loading the Lua BitOp module
DESCRIPTION: Demonstrates how to load the BitOp module in Lua using the require function. This approach ensures the module is only loaded once and limits its scope to the current file, avoiding reliance on global variables.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_0

LANGUAGE: Lua
CODE:
```
local bit = require("bit")
```

----------------------------------------

TITLE: Configuring SSH Control Master for Faster Netrw Operations in SSH Config
DESCRIPTION: This snippet shows how to configure SSH Control Master in the SSH config file to speed up Netrw operations when using SSH connections. It sets up shared connections to reduce connection overhead.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_53

LANGUAGE: SSH Config
CODE:
```
# you change "*" to the hostname you care about
Host *
  ControlMaster auto
  ControlPath /tmp/%r@%h:%p
```

----------------------------------------

TITLE: Customizing FTP List Commands for Windows Integration
DESCRIPTION: Configuration for properly handling file listings with FTP on Windows systems by setting custom list commands to support sorting by name, time, and size.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_43

LANGUAGE: vim
CODE:
```
let g:netrw_ftp_list_cmd    = "ls -lF"
let g:netrw_ftp_timelist_cmd= "ls -tlF"
let g:netrw_ftp_sizelist_cmd= "ls -slF"
```

----------------------------------------

TITLE: Using perleval() Function to Evaluate Perl Expressions in Vim
DESCRIPTION: Demonstrates how to use perleval() to execute Perl code and convert the result to Vim data structures. This example creates a Perl array and returns it as a Vim list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_187

LANGUAGE: vim
CODE:
```
echo perleval('[1 .. 4]')
```

----------------------------------------

TITLE: Return with Finally in Vim Script
DESCRIPTION: Demonstrates that finally blocks are executed even when a return statement is used in the try block, and the return value is preserved.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_134

LANGUAGE: vim
CODE:
```
:function! Foo()
:  try
:    return 4711
:  finally
:    echo "cleanup\n"
:  endtry
:  echo "Foo still active"
:endfunction
:
:echo Foo() "returned by Foo"
```

----------------------------------------

TITLE: Using keytrans to Display Special Key Representation in Vim
DESCRIPTION: Example of using keytrans() to convert the internal byte representation of keys into a form that can be used for mapping. This converts a control key sequence to a readable format.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_150

LANGUAGE: vim
CODE:
```
let xx = "\<C-Home>"
echo keytrans(xx)
```

----------------------------------------

TITLE: Setting Fixed Source Form for Fortran in Vim
DESCRIPTION: Instructs Vim to always assume a fixed source form for new Fortran files by setting 'fortran_fixed_source' to 1. This ensures correct syntax highlighting by default for fixed form Fortran.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_34

LANGUAGE: VimScript
CODE:
```
:let fortran_fixed_source=1
```

----------------------------------------

TITLE: Stderr Writing in Vim Script
DESCRIPTION: Demonstrates writing to stderr using the v:stderr channel ID constant.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_11

LANGUAGE: vim
CODE:
```
:call chansend(v:stderr, "error: toaster empty\n")
```

----------------------------------------

TITLE: Copying and Modifying Array Elements in C using Vim
DESCRIPTION: This snippet explains duplicating a previous line in C code using Vim's CTRL-Y command followed by minor modifications. The code duplicates an element assignment and modifies the property name from 's_next' to 's_prev'. Vim's shortcuts help in quickly replicating lines with minor edits.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_4

LANGUAGE: C
CODE:
```
b_array[i]->s_next = a_array[i]->s_next; ~
```

LANGUAGE: C
CODE:
```
b_array[i]->s_prev ~
```

LANGUAGE: C
CODE:
```
b_array[i]->s_prev = a_array[i]->s_prev; ~
```

----------------------------------------

TITLE: Creating Directory for Filetype Plugin (Unix) - Vim
DESCRIPTION: This snippet illustrates the process of creating a directory specifically for filetype plugins in a Unix environment, ensuring that the correct hierarchy is maintained.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_8

LANGUAGE: Vim
CODE:
```
mkdir -p ~/.local/share/nvim/site/ftplugin
```

----------------------------------------

TITLE: Using Unicode in a Unicode Terminal - Vimscript
DESCRIPTION: This code snippet outlines how to start a Unicode-supported terminal to run Vim, ensuring it can display Unicode characters appropriately.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_3

LANGUAGE: Vim
CODE:
```
xterm -u8 -fn -misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1
```

----------------------------------------

TITLE: Enabling Org Folding in Neovim
DESCRIPTION: This command sets the `g:org_folding` variable to `1`, which enables folding in Org files. Requires the org plugin to be installed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_26

LANGUAGE: vim
CODE:
```
	let g:org_folding = 1
```

----------------------------------------

TITLE: Examining include chain with clang
DESCRIPTION: Complex command to trace the include chain for a header file using clang's -H option, filtering out system headers.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_12

LANGUAGE: bash
CODE:
```
echo '#include "./src/nvim/buffer.h"' | \
> clang -I.deps/usr/include -Isrc -std=c99 -P -E -H - 2>&1 >/dev/null | \
> grep -v /usr/
```

----------------------------------------

TITLE: Checking for password database functions in C
DESCRIPTION: Tests if the system supports functions for accessing the user database (passwd) by attempting to compile a program that calls getpwent, getpwuid, and getpwnam.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_3

LANGUAGE: C
CODE:
```
#include <pwd.h>
int main(void)
{
  getpwent();
  getpwuid(0);
  getpwnam("root");
  return 0;
}
```

----------------------------------------

TITLE: Setting FTP and SCP Command Options in Vim Script
DESCRIPTION: Defines global variables to specify the external programs used for FTP and SCP protocols in Netrw.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_17

LANGUAGE: Vim script
CODE:
```
g:netrw_scp_cmd      var   ="scp -q"
g:netrw_sftp_cmd     var   ="sftp"
```

----------------------------------------

TITLE: Checking for Existing Indent File in Vim
DESCRIPTION: This snippet checks if an indent file has already been loaded to prevent duplicate loading. It sets a buffer-local variable to indicate that the indent file has been loaded.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/indent/README.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
" Only load this indent file when no other was loaded yet.
if exists("b:did_indent")
  finish
endif
let b:did_indent = 1
```

----------------------------------------

TITLE: Setting Highlight Group Link in VimL
DESCRIPTION: Commands for linking highlight groups together in Neovim. The command can create a new link between groups or remove an existing link by using NONE.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_195

LANGUAGE: viml
CODE:
```
:hi[ghlight][!] [default] link {from-group} {to-group}
:hi[ghlight][!] [default] link {from-group} NONE
```

----------------------------------------

TITLE: Configuration for BASIC Filetypes in VimL
DESCRIPTION: Sets the filetype for Visual Basic or BASIC based on the presence of the "VB_Name" string in the initial lines of the file. Ensures correct filetype for FreeBASIC via startup vimrc setting.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_9

LANGUAGE: VimL
CODE:
```
:let filetype_bas = "freebasic"
```

----------------------------------------

TITLE: Enabling Line Numbering in Netrw Directory Listings in VimL
DESCRIPTION: This snippet shows how to enable line numbering in Netrw directory listings by modifying the g:netrw_bufsettings variable. It provides options for both standard and relative line numbering.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_55

LANGUAGE: VimL
CODE:
```
let g:netrw_bufsettings="noma nomod nu nobl nowrap ro nornu"
```

LANGUAGE: VimL
CODE:
```
let g:netrw_bufsettings="noma nomod nonu nobl nowrap ro rnu"
```

----------------------------------------

TITLE: Defining and Building libgettextsrc Library in CMake
DESCRIPTION: This snippet defines the libgettextsrc library, sets its sources, links it with libiconv, and sets compile definitions.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_11

LANGUAGE: cmake
CODE:
```
add_library(libgettextsrc ${libgettextsrc_SOURCES})
target_link_libraries(libgettextsrc ${LIBICONV_LIBRARIES})
set_property(TARGET libgettextsrc APPEND PROPERTY COMPILE_DEFINITIONS
  LIBTEXTSTYLE_DLL_VARIABLE=)
```

----------------------------------------

TITLE: Disabling VHDL right-hand side assignment alignment
DESCRIPTION: Turns off the default alignment of right-hand side assignment operators '<=' in VHDL files. By default, these assignments are aligned for better readability.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
let g:vhdl_indent_rhsassign = 0
```

----------------------------------------

TITLE: Setting Completion in Command Window - VimL
DESCRIPTION: This snippet configures the completion method for the command-line in the current window by restoring it from a saved variable. It is useful for maintaining consistent completion settings when switching buffers.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_13

LANGUAGE: VimL
CODE:
```
:au CmdwinLeave :  let &cpt = b:cpt_save
```

----------------------------------------

TITLE: Thread Pool Work Example in Lua
DESCRIPTION: Demonstrates how to use Libuv's thread pool for executing work callbacks asynchronously. Shows a simple addition operation running in a separate thread with result handling in the main loop.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_56

LANGUAGE: Lua
CODE:
```
local function work_callback(a, b)
  return a + b
end

local function after_work_callback(c)
  print("The result is: " .. c)
end

local work = uv.new_work(work_callback, after_work_callback)

work:queue(1, 2)

-- output: "The result is: 3"
```

----------------------------------------

TITLE: Running Filtered Tests
DESCRIPTION: Shell commands demonstrating how to run tests with name-based filtering.
SOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_4

LANGUAGE: sh
CODE:
```
TEST_FILTER='foo.*api' make functionaltest
TEST_FILTER_OUT='foo.*api' make functionaltest
```

----------------------------------------

TITLE: Setting hlsearch variable example
DESCRIPTION: Example showing how to manipulate the v:hlsearch variable by restoring the current hlsearch state
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
let &hlsearch = &hlsearch
```

----------------------------------------

TITLE: Comparing Thread Equality in Lua with Libuv
DESCRIPTION: Checks if two threads are equal. This function can be used as a method on a thread object or called directly with two thread arguments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_58

LANGUAGE: lua
CODE:
```
uv.thread_equal({thread}, {other_thread})
```

----------------------------------------

TITLE: En Bloc Shell Command Example with Marked Files (netrw-mX)
DESCRIPTION: Example of using the 'mX' command to execute a single shell command on all marked files at once. The example shows creating a tar archive from selected files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_33

LANGUAGE: viml
CODE:
```
(mark files)
mX
Enter command: tar cf mynewtarball.tar
```

----------------------------------------

TITLE: Setting langmap for Russian keyboard in Vim
DESCRIPTION: Command to set the 'langmap' option that maps Russian characters to English ones for Normal mode commands, allowing users to enter commands without switching keyboards.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/russian.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,
    фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz
```

----------------------------------------

TITLE: Makefile Rules for Generating C Type Highlighting
DESCRIPTION: Makefile rules to generate a types.vim file that highlights C typedefs, unions, and structs using Universal/Exuberant ctags and awk.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_205

LANGUAGE: makefile
CODE:
```
# Make a highlight file for types.  Requires Universal/Exuberant ctags and awk
types: types.vim
types.vim: *.[ch]
	ctags --c-kinds=gstu -o- *.[ch] |\
		awk 'BEGIN{printf("syntax keyword Type\t")}\
			{printf("%s ", $$1)}END{print ""}' > $@
```

----------------------------------------

TITLE: Setting multiple filetypes in a C file comment
DESCRIPTION: Example of setting multiple filetypes (C and Doxygen) in a C file comment using a dot separator.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_17

LANGUAGE: c
CODE:
```
/* vim: set filetype=c.doxygen : */
```

----------------------------------------

TITLE: Reading Date Command Output into Vim
DESCRIPTION: Inserts the current UTC time and date at the top of the file using the external date command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_23

LANGUAGE: vim
CODE:
```
:0read !date -u
```

----------------------------------------

TITLE: Using netrw_gitignore#Hide Function with g:netrw_list_hide in VimL
DESCRIPTION: Examples of using the netrw_gitignore#Hide function to hide git-ignored files in Netrw explorer. This function can be used alone, with custom file paths, or combined with additional patterns.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_28

LANGUAGE: viml
CODE:
```
let g:netrw_list_hide= netrw_gitignore#Hide()
```

LANGUAGE: viml
CODE:
```
let g:netrw_list_hide= netrw_gitignore#Hide('my_gitignore_file')
```

LANGUAGE: viml
CODE:
```
let g:netrw_list_hide= netrw_gitignore#Hide() .. '.*\.swp$'
```

----------------------------------------

TITLE: Setting Encoding for Netrw to Handle Accented Characters in VimL
DESCRIPTION: This snippet shows how to set a specific encoding for Netrw to handle directories or files with accented characters. It uses an autocmd to set the encoding when the Netrw filetype is detected.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_57

LANGUAGE: VimL
CODE:
```
au FileType netrw set enc=latin1
```

----------------------------------------

TITLE: Setting Default Tree Listing Style in Vim Configuration
DESCRIPTION: Sets the default Netrw listing style to tree view (style 3) by adding a line to the .vimrc file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_22

LANGUAGE: vim
CODE:
```
let g:netrw_liststyle= 3
```

----------------------------------------

TITLE: Generating LSP Protocol Definitions for Neovim
DESCRIPTION: This command generates the LSP protocol definitions used in Neovim. It runs a Lua script that updates the protocol.lua file with the latest LSP specification.
SOURCE: https://github.com/neovim/neovim/blob/master/MAINTAIN.md#2025-04-20_snippet_2

LANGUAGE: bash
CODE:
```
src/gen/gen_lsp.lua
```

----------------------------------------

TITLE: Space-Aware Pattern Matching Configuration
DESCRIPTION: Configuration for handling patterns with spaces, using notend variable to prevent matching 'end' within other words.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:let s:notend = '\%(\<end\s\+\)\@<!'
:let b:match_words = s:notend . '\<if\>:\<end\s\+if\>'
```

----------------------------------------

TITLE: Prompt Buffer Callback Example in Vim
DESCRIPTION: Shows how to set up a callback function for a prompt buffer that handles user input
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_196

LANGUAGE: vim
CODE:
```
func s:TextEntered(text)
  if a:text == 'exit' || a:text == 'quit'
    stopinsert
    set nomodified
    close
  else
    call append(line('$') - 1, 'Entered: "' .. a:text .. '"')
  endif
endfunc
call prompt_setcallback(bufnr(), function('s:TextEntered'))
```

----------------------------------------

TITLE: Creating Main Neovim Build Target in CMake
DESCRIPTION: Creates the main 'nvim' build target that depends on the binary, runtime dependencies, and runtime data, serving as the primary build target for the project.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_25

LANGUAGE: cmake
CODE:
```
add_custom_target(nvim ALL)
add_dependencies(nvim nvim_bin nvim_runtime_deps nvim_runtime)
```

----------------------------------------

TITLE: Vim Modeline Configuration
DESCRIPTION: Vim modeline settings specifying text width, tab stops, file type and other editor behaviors for this help document.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_7

LANGUAGE: vimdoc
CODE:
```
vim:tw=78:ts=8:noet:ft=help:norl:
```

----------------------------------------

TITLE: Line Continuation with Comments in Vim Scripts
DESCRIPTION: Example of using line continuation with comments in Vim scripts, demonstrating how to add comments between continued lines.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
let array = [
	"\  first entry comment
	\ 'first',
	"\  second entry comment
	\ 'second',
	\ ]
```

----------------------------------------

TITLE: Example Test Cases in Lua
DESCRIPTION: Example of how to write test cases using the it() function with descriptive names that can be filtered.
SOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_3

LANGUAGE: lua
CODE:
```
it('foo api',function()
  ...
end)
it('bar api',function()
  ...
end)
```

----------------------------------------

TITLE: Splitting a window with specified height
DESCRIPTION: Opens a new window with a specified height (in lines) and starts editing the given file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
	:3split alpha.c
```

----------------------------------------

TITLE: Translation Build Macros
DESCRIPTION: Collection of CMake macros for building and checking PO files, converting character encodings, and managing translation updates
SOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/po/CMakeLists.txt#2025-04-20_snippet_3

LANGUAGE: cmake
CODE:
```
macro(BuildMo name)
    set(poFile ${CMAKE_CURRENT_SOURCE_DIR}/${name}.po)
    set(moFile ${CMAKE_CURRENT_BINARY_DIR}/${name}.mo)

    add_custom_command(
      OUTPUT ${moFile}
      COMMAND ${GETTEXT_MSGFMT_EXECUTABLE} -o ${moFile} ${poFile}
      DEPENDS ${poFile} ${NVIM_POT})

    install_helper(
      FILES ${moFile}
      DESTINATION ${CMAKE_INSTALL_LOCALEDIR}/${name}/LC_MESSAGES
      RENAME ${PROJECT_NAME}.mo)

    list(APPEND LANGUAGE_MO_FILES ${moFile})
endmacro()
```

----------------------------------------

TITLE: Improved Function Arguments Documentation in C
DESCRIPTION: Example showing better documentation of function arguments using inline comments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_13

LANGUAGE: c
CODE:
```
bool success = calculate_something(interesting_value,
                                   10,     // Default base value.
                                   false,  // Not the first time we're calling this.
                                   NULL);  // No callback.
```

----------------------------------------

TITLE: Creating New Math Zones in LaTeX Syntax with VimL
DESCRIPTION: Function call pattern for defining new LaTeX math zones for syntax highlighting. The example shows how to set up an 'eqnarray' math environment.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_140

LANGUAGE: viml
CODE:
```
call TexNewMathZone(sfx,mathzone,starform)
```

----------------------------------------

TITLE: Shortened Min Function in Vim
DESCRIPTION: A more concise version of the Min function that directly returns the smaller value without using a local variable.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
:function Min(num1, num2)
:  if a:num1 < a:num2
:    return a:num1
:  endif
:  return a:num2
:endfunction
```

----------------------------------------

TITLE: Using swapfilelist() in Vim Script
DESCRIPTION: Demonstrates how to use swapfilelist() function to get a list of swap file names in the current directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_267

LANGUAGE: vim
CODE:
```
let save_dir = &directory
let &directory = '.'
let swapfiles = swapfilelist()
let &directory = save_dir
```

----------------------------------------

TITLE: Checking for Existing Indent Function in Vim
DESCRIPTION: This snippet checks if the indent function has already been defined. If it exists, the script finishes to avoid redefining the function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/indent/README.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
if exists("*GetMyIndent")
  finish
endif
```

----------------------------------------

TITLE: Winnowing Marked Files with File Pattern and Content Pattern
DESCRIPTION: Example showing how to combine 'mr' (mark by regex) and 'mg' (grep in marked files) to filter files first by filename pattern and then by content pattern.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_35

LANGUAGE: viml
CODE:
```
mr ...file-pattern...
mg /pattern/j
```

----------------------------------------

TITLE: Setting Default SSH Rename Command in Netrw
DESCRIPTION: Shows the default value for g:netrw_rename_cmd variable which is used to implement remote file renaming operations via SSH.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_42

LANGUAGE: vim
CODE:
```
ssh HOSTNAME mv
```

----------------------------------------

TITLE: Setting up MSYS2/MinGW environment path in Windows
DESCRIPTION: Command for Windows Command Prompt to set up the PATH environment variable for building with MSYS2/MinGW toolchain.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_6

LANGUAGE: cmd
CODE:
```
set PATH=c:\msys64\ucrt64\bin;c:\msys64\usr\bin;%PATH%
```

----------------------------------------

TITLE: Lua Diagnostic Code Migration Example
DESCRIPTION: Example showing how to migrate from deprecated vim.diagnostic.goto_next() to the new vim.diagnostic.jump() with appropriate parameters
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_0

LANGUAGE: lua
CODE:
```
-- Old way
vim.diagnostic.goto_next()

-- New way
vim.diagnostic.jump({count=1, float=true})
```

----------------------------------------

TITLE: Popup Menu Item Selection in Command Line Completion
DESCRIPTION: The function |nvim_select_popupmenu_item()| has been enhanced to support the |cmdline-completion| popup menu, which streamlines the completion process in the command line interface.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_10



----------------------------------------

TITLE: FreeBSD Build Prerequisites
DESCRIPTION: Installs the necessary packages on FreeBSD systems to build Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_30

LANGUAGE: Shell
CODE:
```
"sudo pkg install cmake gmake sha wget gettext curl"
```

----------------------------------------

TITLE: Dictionary Entry Removal
DESCRIPTION: Example of removing an entry from a dictionary using a key
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_208

LANGUAGE: vim
CODE:
```
echo "removed " .. remove(dict, "one")
```

----------------------------------------

TITLE: Basic Command Line Editing in Neovim
DESCRIPTION: Demonstrates how to edit a substitute command using cursor movement and backspace.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
:s/col/pig/
:s/cow/pig/
```

----------------------------------------

TITLE: Helptags Generation Command
DESCRIPTION: Example showing how to generate help tags file for runtime directory
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_5

LANGUAGE: vimscript
CODE:
```
:helptags $VIMRUNTIME/doc
```

----------------------------------------

TITLE: Setting UTF-8 Font in X-Windows
DESCRIPTION: Example of configuring fonts for Unicode support, particularly for double-wide characters in graphical Vim environments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
:set guifont=-misc-fixed-medium-r-normal--15-140-75-75-c-90-iso10646-1
```

----------------------------------------

TITLE: Writing all and quitting
DESCRIPTION: Writes all modified files and then quits Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
	:wqall
```

----------------------------------------

TITLE: Sample Text - Long Line
DESCRIPTION: A long string of 'b' characters used as sample text. It's likely designed to test the handling of long lines in quickfix features.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/quickfix.txt#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000 000119999999999999999999999999999999999999982573504582048201015086023500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
```

----------------------------------------

TITLE: Running Color Test in Neovim
DESCRIPTION: Command to run the included colortest.vim file, which helps test and visualize your terminal color setup.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_208

LANGUAGE: vim
CODE:
```
:runtime syntax/colortest.vim
```

----------------------------------------

TITLE: Package Manager Uninstall Commands
DESCRIPTION: Common commands for uninstalling Neovim using different package managers across operating systems.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_2

LANGUAGE: shell
CODE:
```
apt-get remove neovim
brew uninstall neovim
scoop uninstall neovim
```

----------------------------------------

TITLE: Date Command with Line Join
DESCRIPTION: Example showing how to read date output and join it with the previous line using newline separator.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_9

LANGUAGE: vim
CODE:
```
:r !date<NL>-join
```

----------------------------------------

TITLE: Updating Command Table after Source Code Changes (Lua)
DESCRIPTION: This explains the steps to update the command lookup table after adding a command in `src/ex_cmds.lua`. It involves re-running the build process, typically by running `make`. This step is necessary for Neovim to recognize the new command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_5

LANGUAGE: text
CODE:
```
This can only happen when changing the source code, after adding a command in
src/ex_cmds.lua.  Update the lookup table by re-running the build. >
```

----------------------------------------

TITLE: Verifying Neovim build type
DESCRIPTION: Command to check the build type of the compiled Neovim executable by checking the version information.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_2

LANGUAGE: bash
CODE:
```
./build/bin/nvim --version | grep ^Build
```

----------------------------------------

TITLE: Matching Quoted Strings in Vim
DESCRIPTION: Pattern to match text within double quotes, excluding the quotes themselves using complemented range.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_14

LANGUAGE: vim
CODE:
```
/"[^"]*"
```

----------------------------------------

TITLE: Mapping Custom Key for Netrw Window Shrinking
DESCRIPTION: Example of mapping a custom key sequence to the NetrwShrink functionality instead of using the default <c-tab>.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_49

LANGUAGE: vim
CODE:
```
nmap <unique> (whatever)	<Plug>NetrwShrink
```

----------------------------------------

TITLE: Configuring PowerShell Error Categories Display in Vim
DESCRIPTION: Vim configuration setting to enable showing exception type information in PowerShell compiler output
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ps1.txt#2025-04-20_snippet_3

LANGUAGE: vim
CODE:
```
:let g:ps1_efm_show_error_categories = 1
```

----------------------------------------

TITLE: Reading Error File
DESCRIPTION: Command for reading an error file and jumping to the first error.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_25

LANGUAGE: vim
CODE:
```
:cf[ile][!] [errorfile]
```

----------------------------------------

TITLE: Getting Byte Index with Composing Characters in Neovim using Vim Script
DESCRIPTION: The 'byteidxcomp' function operates like 'byteidx' but counts composing characters separately, allowing accurate indexing of characters in strings.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_26

LANGUAGE: vim
CODE:
```
byteidxcomp({expr}, {nr} [, {utf16}])
```

----------------------------------------

TITLE: Using menu_info() in Vim
DESCRIPTION: These examples demonstrate how to use the menu_info() function to retrieve detailed information about specific menu items, including an example of displaying the entire menu hierarchy.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_176

LANGUAGE: vim
CODE:
```
echo menu_info('Edit.Cut')
echo menu_info('File.Save', 'n')
```

LANGUAGE: vim
CODE:
```
" Display the entire menu hierarchy in a buffer
func ShowMenu(name, pfx)
  let m = menu_info(a:name)
  call append(line('$'), a:pfx .. m.display)
  for child in m->get('submenus', [])
    call ShowMenu(a:name .. '.' .. escape(child, '.'),
					\ a:pfx .. '    ')
  endfor
endfunc
new
for topmenu in menu_info('').submenus
  call ShowMenu(topmenu, '')
endfor
```

----------------------------------------

TITLE: Adding Hex-based Digraph in Vim
DESCRIPTION: Example demonstrating how to add a digraph using hexadecimal notation with the execute command.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/digraph.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:exe 'digr += ' .. 0x2A72
```

----------------------------------------

TITLE: Running Neovim without installation
DESCRIPTION: Command to run the Neovim executable directly from the build directory without installing it by setting the VIMRUNTIME environment variable.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_0

LANGUAGE: bash
CODE:
```
VIMRUNTIME=runtime ./build/bin/nvim
```

----------------------------------------

TITLE: Modifying Netrw Internal Variables
DESCRIPTION: Example of using netrw#Modify() to change internal netrw variables, specifically clearing the marked file list.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_51

LANGUAGE: vim
CODE:
```
call netrw#Modify("netrwmarkfilelist",[])
```

----------------------------------------

TITLE: Enabling Cygwin Support for Netrw on Windows
DESCRIPTION: Setting to enable Cygwin support for netrw when working on Windows systems to improve file listing capabilities.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_44

LANGUAGE: vim
CODE:
```
let g:netrw_cygwin= 1
```

----------------------------------------

TITLE: Rebuilding Neovim dependencies with debug info
DESCRIPTION: Commands to clean the build directory and rebuild dependencies with debug information for development purposes.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_4

LANGUAGE: bash
CODE:
```
make distclean
make deps
```

----------------------------------------

TITLE: Customizing PowerShell Compiler Command in Vim
DESCRIPTION: Vim configuration setting to specify a custom PowerShell executable path for the compiler integration
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ps1.txt#2025-04-20_snippet_2

LANGUAGE: vim
CODE:
```
:let g:ps1_makeprg_cmd = '/path/to/pwsh'
```

----------------------------------------

TITLE: Deep Copy with Msgpack in Vim
DESCRIPTION: Performs a deep copy of a Msgpack value, maintaining the integrity of special types. Unlike the standard deepcopy(), this function preserves Msgpack-specific types.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
msgpack#deepcopy({msgpack-value})
```

----------------------------------------

TITLE: Function-based Match Pattern Configuration
DESCRIPTION: Example of using a function call to define match patterns dynamically.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
:let b:match_words = 'GetMatchWords()'
```

----------------------------------------

TITLE: Disabling Syntax Highlighting for All Buffers
DESCRIPTION: Command to disable syntax highlighting for all buffers by removing the autocommands that load syntax files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_201

LANGUAGE: vim
CODE:
```
:syntax off
```

----------------------------------------

TITLE: Loading Error Files in Vim
DESCRIPTION: The :cfile command loads and parses errors from an external file, useful when compilation output can't be directly captured.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_5

LANGUAGE: vim
CODE:
```
:cfile {filename}
```

----------------------------------------

TITLE: Netrw User Function Configuration
DESCRIPTION: Example of setting up a custom function to be called when Netrw edits a file.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_7

LANGUAGE: vim
CODE:
```
fun! MyFuncRef()
endfun
let g:Netrw_funcref= function("MyFuncRef")
```

----------------------------------------

TITLE: Linking Test Executables to Library in CMake
DESCRIPTION: This section links each test executable to the `test_lib` interface library using `target_link_libraries` with the `PRIVATE` keyword.  `PRIVATE` means `test_lib` is only required for building the executables, not for any targets that link to these executables (if any existed).
SOURCE: https://github.com/neovim/neovim/blob/master/test/functional/fixtures/CMakeLists.txt#2025-04-20_snippet_2

LANGUAGE: cmake
CODE:
```
target_link_libraries(tty-test PRIVATE test_lib)
target_link_libraries(shell-test PRIVATE test_lib)
target_link_libraries(pwsh-test PRIVATE test_lib)
target_link_libraries(printargs-test PRIVATE test_lib)
target_link_libraries(printenv-test PRIVATE test_lib)
target_link_libraries(streams-test PRIVATE test_lib)
```

----------------------------------------

TITLE: Arabic Keyboard Mapping Layout in Vim
DESCRIPTION: Detailed ASCII representation of the Arabic keyboard mapping based on Microsoft's Arabic keymap standard. Shows both Arabic and Latin character mappings for each key position, including special characters and numerals.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_9

LANGUAGE: txt
CODE:
```
+---------------------------------------------------------------------+
|!   |@   |#   |$   |%   |^   |&   |*   |(   |)   |_   |+   ||   |~  ّ |
|1 ١ |2 ٢ |3 ٣ |4 ٤ |5 ٥ |6 ٦ |7 ٧ |8 ٨ |9 ٩ |0 ٠ |-   |=   |\   |` ذ |
+---------------------------------------------------------------------+
     |Q  َ |W  ً |E  ُ |R  ٌ |T لإ |Y إ |U ` |I ÷ |O x |P ؛ |{ < |} > |
     |q ض |w ص |e ث |r ق |t ف |y غ |u ع |i ه |o خ |p ح |[ ج |] د |
     +-----------------------------------------------------------+
       |A  ِ |S  ٍ |D [ |F ] |G لأ |H أ |J ـ |K ، |L / |:   |"   |
       |a ش |s س |d ي |f ب |g ل |h ا |j ت |k ن |l م |; ك |' ط |
       +------------------------------------------------------+
         |Z ~ |X  ْ |C { |V } |B لآ |N آ |M ' |< , |> . |? ؟ |
         |z ئ |x ء |c ؤ |v ر |b لا |n ى |m ة |, و |. ز |/ ظ |
         +-------------------------------------------------+
```

----------------------------------------

TITLE: Configuring NCF Syntax Highlighting in Vim
DESCRIPTION: Sets option to highlight unrecognized NCF statements as errors.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_89

LANGUAGE: vim
CODE:
```
:let ncf_highlight_unknowns = 1
```

----------------------------------------

TITLE: Neovim Installation Directory Structure
DESCRIPTION: Example paths showing the typical installation location of Neovim binary and share directory when installed from source or pre-built archive.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
/usr/local/bin/nvim
/usr/local/share/nvim
```

----------------------------------------

TITLE: Comparing Msgpack Values with Msgpack in Vim
DESCRIPTION: Compares two Msgpack values for equality, treating equivalent special and non-special dictionaries as equal. It returns 1 for equal values and 0 otherwise.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
msgpack#equal({msgpack-value}, {msgpack-value})
```

----------------------------------------

TITLE: Enabling Arabic Shaping in Neovim
DESCRIPTION: Activates visual character alterations required for proper Arabic text rendering, including shaping, composing, and combining characters.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_8

LANGUAGE: VimScript
CODE:
```
:set arabicshape
```

----------------------------------------

TITLE: Completing Set Information in Neovim
DESCRIPTION: An experimental feature 'nvim__complete_set' sets the details for a completion item and optionally returns the window and buffer IDs when displayed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_28

LANGUAGE: Lua
CODE:
```
nvim__complete_set\(\{index\}, \{opts\}\)
```

----------------------------------------

TITLE: Detailed SpotBugs Configuration with Default Actions
DESCRIPTION: Advanced configuration for SpotBugs with explicit function references for pre-compiler and post-compiler actions.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_47

LANGUAGE: vim
CODE:
```
let g:spotbugs_properties = {
	\ 'PreCompilerAction':
		\ function('spotbugs#DefaultPreCompilerAction'),
	\ 'PreCompilerTestAction':
		\ function('spotbugs#DefaultPreCompilerTestAction'),
	\ 'PostCompilerAction':
		\ function('spotbugs#DefaultPostCompilerAction'),
	\ 'sourceDirPath':	['src/main/java'],
	\ 'classDirPath':	['target/classes'],
	\ 'testSourceDirPath':	['src/test/java'],
	\ 'testClassDirPath':	['target/test-classes'],
\ }
```

----------------------------------------

TITLE: Alpine Linux Build Prerequisites
DESCRIPTION: Installs the necessary packages on Alpine Linux systems to build Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_24

LANGUAGE: Shell
CODE:
```
"apk add build-base cmake coreutils curl gettext-tiny-dev"
```

----------------------------------------

TITLE: openSUSE Build Prerequisites
DESCRIPTION: Installs the necessary packages on openSUSE systems to build Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_22

LANGUAGE: Shell
CODE:
```
"sudo zypper install ninja cmake gcc-c++ gettext-tools curl"
```

----------------------------------------

TITLE: Finding and Configuring Lua Interpreter for Neovim
DESCRIPTION: Locates a suitable Lua interpreter for runtime and code generation needs, with preference for LuaJIT when available.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_13

LANGUAGE: CMake
CODE:
```
if(NOT PREFER_LUA)
  find_program(LUA_PRG NAMES luajit)
endif()
find_program(LUA_PRG NAMES lua5.1 lua5.2 lua)
mark_as_advanced(LUA_PRG)
if(NOT LUA_PRG)
  message(FATAL_ERROR "Failed to find a Lua 5.1-compatible interpreter")
endif()
message(STATUS "Using Lua interpreter: ${LUA_PRG}")

# Some of the code generation still relies on stable table ordering in order to
# produce reproducible output - specifically the msgpack'ed data in
# funcs_metadata.generated.h and ui_events_metadata.generated.h. This should
# ideally be fixed in the generators, but until then as a workaround you may provide
# a specific lua implementation that provides the needed stability by setting LUA_GEN_PRG:
if(NOT LUA_GEN_PRG)
  set(LUA_GEN_PRG "${LUA_PRG}" CACHE FILEPATH "Path to the lua used for code generation.")
endif()
mark_as_advanced(LUA_GEN_PRG)
message(STATUS "Using Lua interpreter for code generation: ${LUA_GEN_PRG}")
```

----------------------------------------

TITLE: Netrw HTTP Command Configuration
DESCRIPTION: Configuration example for customizing HTTP protocol behavior in Netrw using elinks.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_6

LANGUAGE: vim
CODE:
```
let g:netrw_http_xcmd= "-dump >"
```

----------------------------------------

TITLE: NixOS/Nix Build Steps
DESCRIPTION: Commands to configure and build Neovim within a Nix environment.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_27

LANGUAGE: Shell
CODE:
```
"rm -rf build && cmakeConfigurePhase\nbuildPhase"
```

----------------------------------------

TITLE: Installing Runtime Files
DESCRIPTION: Configures installation of runtime files including documentation, syntax files, desktop entries, and icons.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/CMakeLists.txt#2025-04-20_snippet_4

LANGUAGE: cmake
CODE:
```
install_helper(
  FILES ${GENERATED_HELP_TAGS} ${BUILDDOCFILES}
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/nvim/runtime/doc)

install_helper(
  FILES ${GENERATED_SYN_VIM}
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/nvim/runtime/syntax/vim)

if(NOT APPLE)
  install_helper(
    FILES ${CMAKE_CURRENT_SOURCE_DIR}/nvim.desktop
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/applications)
endif()

install_helper(
  FILES ${CMAKE_CURRENT_SOURCE_DIR}/nvim.png
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/128x128/apps)
```

----------------------------------------

TITLE: Starting GUI Vim with Specific Window Size and Position
DESCRIPTION: This command starts the X-Windows version of gvim with a specified window size (80x25 characters) and position (100 pixels from left, 300 pixels from top).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_10

LANGUAGE: bash
CODE:
```
gvim -geometry 80x25+100+300
```

----------------------------------------

TITLE: Jumping to Ada Tags with ada#Jump_Tag Function
DESCRIPTION: Function to list all occurrences of an Ada entity in the tag jump list. The mode parameter can be either 'tjump' or 'stjump'.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_4

LANGUAGE: viml
CODE:
```
ada#Jump_Tag({ident}, {mode})
```

----------------------------------------

TITLE: Creating Test Executables in CMake
DESCRIPTION: This code defines several test executables written in C (tty-test, shell-test, pwsh-test, printargs-test, printenv-test, streams-test). The `EXCLUDE_FROM_ALL` keyword prevents them from being built by default.
SOURCE: https://github.com/neovim/neovim/blob/master/test/functional/fixtures/CMakeLists.txt#2025-04-20_snippet_1

LANGUAGE: cmake
CODE:
```
add_executable(tty-test EXCLUDE_FROM_ALL tty-test.c)
add_executable(shell-test EXCLUDE_FROM_ALL shell-test.c)
# Fake pwsh (powershell) for testing make_filter_cmd(). #16271
add_executable(pwsh-test EXCLUDE_FROM_ALL shell-test.c)
add_executable(printargs-test EXCLUDE_FROM_ALL printargs-test.c)
add_executable(printenv-test EXCLUDE_FROM_ALL printenv-test.c)
add_executable(streams-test EXCLUDE_FROM_ALL streams-test.c)
```

----------------------------------------

TITLE: Using Browse Edit with FileExplorer Group in Vim
DESCRIPTION: Simple example of using the browse edit command, which leverages the FileExplorer autocommand group for directory browsing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_27

LANGUAGE: viml
CODE:
```
browse edit
```

----------------------------------------

TITLE: Terminal Database Installation Commands
DESCRIPTION: Commands to download and install custom terminfo database for terminal compatibility.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
curl -LO https://invisible-island.net/datafiles/current/terminfo.src.gz
gunzip terminfo.src.gz
tic -x terminfo.src
```

----------------------------------------

TITLE: Defining Color Scheme with Custom Normal Color in VimL
DESCRIPTION: This approach defines a new Normal color and sets the 'background' option accordingly. It starts with a clean slate by using 'highlight clear' before defining the Normal highlight group.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_0

LANGUAGE: viml
CODE:
```
set background={light or dark}
highlight clear
highlight Normal ...
...
```

----------------------------------------

TITLE: Platform-Specific Package Configuration
DESCRIPTION: Configures platform-specific packaging options for Windows (WIX installer), macOS (TGZ), and Linux (TGZ/DEB) builds.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.packaging/CMakeLists.txt#2025-04-20_snippet_2

LANGUAGE: cmake
CODE:
```
if(WIN32)
  set(CPACK_PACKAGE_FILE_NAME "nvim-win64")
  set(CPACK_GENERATOR ZIP WIX)

  # WIX
  # CPACK_WIX_UPGRADE_GUID should be set, but should never change.
  # CPACK_WIX_PRODUCT_GUID should not be set (leave as default to auto-generate).

  # The following guid is just a randomly generated guid that's been pasted here.
  # It has no special meaning other than to supply it to WIX.
  set(CPACK_WIX_UPGRADE_GUID "207A1A70-7B0C-418A-A153-CA6883E38F4D")
  set(CPACK_WIX_PRODUCT_ICON ${PROJECT_SOURCE_DIR}/runtime/neovim.ico)

  # Create start menu and desktop shortcuts
  set(CPACK_WIX_PROGRAM_MENU_FOLDER "${CPACK_PACKAGE_NAME}")
  set(CPACK_PACKAGE_EXECUTABLES "nvim" "Neovim")
  set(CPACK_WIX_INSTALL_SCOPE "perMachine")

  set(CPACK_WIX_UI_REF "WixUI_CustomInstallDir")
  list(APPEND CPACK_WIX_EXTRA_SOURCES ${CMAKE_CURRENT_LIST_DIR}/WixUI_CustomInstallDir.wxs)
  list(APPEND CPACK_WIX_EXTRA_SOURCES ${CMAKE_CURRENT_LIST_DIR}/CustomInstallDirDlg.wxs)

  # We use a wix patch to add further options to the installer.
  # See: https://cmake.org/cmake/help/v3.7/module/CPackWIX.html#variable:CPACK_WIX_PATCH_FILE
  list(APPEND CPACK_WIX_EXTENSIONS WixUtilExtension)
  list(APPEND CPACK_WIX_PATCH_FILE ${CMAKE_CURRENT_LIST_DIR}/WixPatch.xml)
elseif(APPLE)
  set(CPACK_PACKAGE_FILE_NAME "nvim-macos-${CMAKE_SYSTEM_PROCESSOR}")
  set(CPACK_GENERATOR TGZ)
  set(CPACK_PACKAGE_ICON ${CMAKE_CURRENT_LIST_DIR}/neovim.icns)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  set(CPACK_PACKAGE_FILE_NAME "nvim-linux-${CMAKE_SYSTEM_PROCESSOR}")
  set(CPACK_GENERATOR TGZ DEB)
  set(CPACK_DEBIAN_PACKAGE_NAME "Neovim") # required
  set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Neovim.io") # required

  # Automatically compute required shared lib dependencies.
  # Unfortunately, you "just need to know" that this has a hidden
  # dependency on dpkg-shlibdeps whilst using a debian based host.
  set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS TRUE)
else()
  set(CPACK_GENERATOR TGZ)
endif()
```

----------------------------------------

TITLE: Getting Current Working Directory in Lua with Libuv
DESCRIPTION: Returns the current working directory.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_71

LANGUAGE: lua
CODE:
```
uv.cwd()
```

----------------------------------------

TITLE: Disabling Spellfile Plugin
DESCRIPTION: Command to disable the built-in spellfile plugin functionality.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_13

LANGUAGE: vim
CODE:
```
let loaded_spellfile_plugin = 1
```

----------------------------------------

TITLE: Treating More Common Types as Keywords in Haskell
DESCRIPTION: This snippet shows how to treat a broader range of common type names as keywords in Haskell syntax highlighting.  This is accomplished by setting the 'hs_highlight_more_types' variable to 1 in your vimrc.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_46

LANGUAGE: vim
CODE:
```
	:let hs_highlight_more_types = 1
```

----------------------------------------

TITLE: Configuring Rustfmt Emit Files Parameter
DESCRIPTION: Controls whether rustfmt is run with '--emit=files' (when set to 1) instead of '--write-mode=overwrite', which can affect how rustfmt interacts with files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_15

LANGUAGE: vim
CODE:
```
let g:rustfmt_emit_files = 0
```

----------------------------------------

TITLE: Using strutf16len() in Vim Script
DESCRIPTION: Shows how to use strutf16len() function to count UTF-16 code units in a string, with an option to count composing characters separately.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_264

LANGUAGE: vim
CODE:
```
echo strutf16len('a')
echo strutf16len('©')
echo strutf16len('😊')
echo strutf16len('ą́')
echo strutf16len('ą́', v:true)
```

----------------------------------------

TITLE: Handling Switch Statements in C
DESCRIPTION: This snippet shows how to use `UNREACHABLE` after a switch statement to explicitly indicate that the switch statement always returns. This prevents spurious compiler errors related to missing return statements.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_18

LANGUAGE: C
CODE:
```
enum { A, B, C } var;
    ...
    switch (var) {
      case A:
        return 1;
      case B:
        return 2;
      case C:
        return 3;
    }
    UNREACHABLE;
```

----------------------------------------

TITLE: Configuring GDScript Recommended Style
DESCRIPTION: Code snippet for disabling the default GDScript style settings in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_12

LANGUAGE: vim
CODE:
```
let g:gdscript_recommended_style = 0
```

----------------------------------------

TITLE: Setting Hebrew Keymap in Vim
DESCRIPTION: Command to load the Hebrew keymap for typing Hebrew characters in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
:set keymap=hebrew
```

----------------------------------------

TITLE: Starting gVim with Command Line
DESCRIPTION: Commands to launch the graphical version of Vim with a file
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_0

LANGUAGE: vim
CODE:
```
gvim file.txt
vim -g file.txt
```

----------------------------------------

TITLE: Directory Creation Operation in Lua
DESCRIPTION: Creates a directory with specified path and mode. Mode should be provided in octal format.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_49

LANGUAGE: lua
CODE:
```
uv.fs_mkdir({path}, {mode} [, {callback}])
```

----------------------------------------

TITLE: Creating a New Pipe
DESCRIPTION: Creates and initializes a new pipe handle, which can be used for IPC (Inter-Process Communication) or local domain socket communications. The IPC argument controls whether the pipe is intended for handle passing.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_31

LANGUAGE: lua
CODE:
```
uv.new_pipe([{ipc}])
```

----------------------------------------

TITLE: Setting Up Shell Script Linting with Shellcheck in CMake
DESCRIPTION: Creates a target for linting shell scripts using shellcheck. The target scans the scripts directory for .sh files and applies shellcheck with specified options.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_19

LANGUAGE: cmake
CODE:
```
add_glob_target(
  TARGET lintsh
  COMMAND ${SHELLCHECK_PRG}
  FLAGS -x -a
  GLOB_DIRS scripts
  GLOB_PAT *.sh
  TOUCH_STRATEGY PER_DIR)
```

----------------------------------------

TITLE: Setting Minimum Lines for TF Syntax Syncing with VimL
DESCRIPTION: Configuration for the tf syntax highlighting to control how many lines are used for synchronization. Affects how the syntax highlighter resynchronizes after changes.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_148

LANGUAGE: viml
CODE:
```
:let tf_minlines = your choice
```

----------------------------------------

TITLE: Setting Clipboard Command for Rust Play URLs
DESCRIPTION: Specifies the system command used to copy Rust Playground URLs to the clipboard, which varies by operating system.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
let g:rust_clip_command = 'xclip -selection clipboard'
```

----------------------------------------

TITLE: File Selection and Background Preview Implementation
DESCRIPTION: Handles file selection for backgrounds and themes, including file type validation and preview generation. Supports both local files and remote content.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_1

LANGUAGE: C++
CODE:
```
void BackgroundBox::chooseFromFile() {
	const auto filterStart = _forPeer
		? u"Image files (*"_q
		: u"Theme files (*.tdesktop-theme *.tdesktop-palette *"_q;
	auto filters = QStringList(
		filterStart
		+ Ui::ImageExtensions().join(u" *"_q)
		+ u")"_q);
	filters.push_back(FileDialog::AllFilesFilter());
	const auto callback = [=](const FileDialog::OpenResult &result) {
		if (result.paths.isEmpty() && result.remoteContent.isEmpty()) {
			return;
		}

		if (!_forPeer && !result.paths.isEmpty()) {
			const auto filePath = result.paths.front();
			const auto hasExtension = [&](QLatin1String extension) {
				return filePath.endsWith(extension, Qt::CaseInsensitive);
			};
			if (hasExtension(qstr(".tdesktop-theme"))
				|| hasExtension(qstr(".tdesktop-palette"))) {
				Window::Theme::Apply(filePath);
				return;
			}
		}

		auto image = Images::Read({
			.path = result.paths.isEmpty() ? QString() : result.paths.front(),
			.content = result.remoteContent,
			.forceOpaque = true,
		}).image;
		if (image.isNull() || image.width() <= 0 || image.height() <= 0) {
			return;
		}
		auto local = Data::CustomWallPaper();
		local.setLocalImageAsThumbnail(std::make_shared<Image>(
			std::move(image)));
		_controller->show(Box<BackgroundPreviewBox>(
			_controller,
			local,
			BackgroundPreviewArgs{ _forPeer }));
	};
	FileDialog::GetOpenPath(
		this,
		tr::lng_choose_image(tr::now),
		filters.join(u";;"_q),
		crl::guard(this, callback));
}
```

----------------------------------------

TITLE: Deleting Extmark in Lua
DESCRIPTION: Removes an extmark from the buffer. Takes parameters for buffer id, namespace id, and extmark id.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_61

LANGUAGE: lua
CODE:
```
nvim_buf_del_extmark({buffer}, {ns_id}, {id})
```

----------------------------------------

TITLE: Blob Manipulation with remove()
DESCRIPTION: Examples of removing bytes from a blob, either single bytes or ranges
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_207

LANGUAGE: vim
CODE:
```
echo "last byte: " .. remove(myblob, -1)
call remove(mylist, 0, 9)
```

----------------------------------------

TITLE: Global Variable Documentation in C
DESCRIPTION: Example of properly documenting global variables with descriptive comments.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_9

LANGUAGE: c
CODE:
```
/// The total number of tests cases that we run
/// through in this regression test.
const int kNumTestCases = 6;
```

----------------------------------------

TITLE: POT File Generation
DESCRIPTION: Custom command to generate the main POT template file from source files using xgettext and custom Vim scripts
SOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/po/CMakeLists.txt#2025-04-20_snippet_2

LANGUAGE: cmake
CODE:
```
set(NVIM_POT ${CMAKE_CURRENT_BINARY_DIR}/nvim.pot)

list(SORT NVIM_RELATIVE_SOURCES)
add_custom_command(
    OUTPUT ${NVIM_POT}
    COMMAND $<TARGET_FILE:nvim_bin> -u NONE -i NONE -n --headless --cmd "set cpo+=+"
      -c "silent source ${CMAKE_CURRENT_SOURCE_DIR}/tojavascript.vim"
      ${NVIM_POT} ${PROJECT_SOURCE_DIR}/runtime/optwin.vim
    COMMAND ${XGETTEXT_PRG} -o ${NVIM_POT} --default-domain=nvim
      --add-comments --keyword=_ --keyword=N_ --keyword=NGETTEXT:1,2
      -D ${CMAKE_CURRENT_SOURCE_DIR} -D ${CMAKE_CURRENT_BINARY_DIR}
      ${NVIM_RELATIVE_SOURCES} optwin.js
    COMMAND $<TARGET_FILE:nvim_bin> -u NONE -i NONE -n --headless --cmd "set cpo+=+"
      -c "silent source ${CMAKE_CURRENT_SOURCE_DIR}/fixfilenames.vim"
      ${NVIM_POT} ${PROJECT_SOURCE_DIR}/runtime/optwin.vim
    VERBATIM
    DEPENDS ${NVIM_SOURCES} nvim_bin nvim_runtime_deps)
```

----------------------------------------

TITLE: Getting the Last Open Tag in Vim
DESCRIPTION: This Vim example shows how to use the xmlcomplete#GetLastOpenTag() function to retrieve the name of the last open tag in XML files. It requires the b:unaryTagsStack variable to be defined.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_24

LANGUAGE: vim
CODE:
```
	:echo xmlcomplete#GetLastOpenTag("b:unaryTagsStack")
```

----------------------------------------

TITLE: Variable Assignment Whitespace in C
DESCRIPTION: This snippet illustrates the preferred horizontal whitespace usage in variable assignments. It demonstrates not aligning assignments except for struct arrays, for better readability.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_20

LANGUAGE: C
CODE:
```
int long_variable = 0;  // Don't align assignments.
        int i             = 1;

        struct my_struct {  // Exception: struct arrays.
          const char *boy;
          const char *girl;
          int pos;
        } my_variable[] = {
          { "Mia",       "Michael", 8  },
          { "Elizabeth", "Aiden",   10 },
          { "Emma",      "Mason",   2  },
        };
```

----------------------------------------

TITLE: Configuring Gettext Runtime Config Headers in CMake
DESCRIPTION: Reads a gettext-runtime config.h.in template file and modifies it with platform-specific definitions before writing it to the build directory. This configures capabilities like HAVE_GETCWD, HAVE_LONG_LONG_INT, and ICONV support.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_2

LANGUAGE: cmake
CODE:
```
file(READ gettext-runtime/config.h.in CONFIG_CONTENT)
string(REPLACE "#undef HAVE_GETCWD" "#define HAVE_GETCWD 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_LONG_LONG_INT" "#define HAVE_LONG_LONG_INT 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_ICONV_H" "#define HAVE_ICONV_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef HAVE_ICONV" "#define HAVE_ICONV 1" CONFIG_CONTENT ${CONFIG_CONTENT})
string(REPLACE "#undef ICONV_CONST" "#define ICONV_CONST const" CONFIG_CONTENT ${CONFIG_CONTENT})
if(MSVC)
  string(REPLACE "#undef HAVE_STDINT_H_WITH_UINTMAX" "#define HAVE_STDINT_H_WITH_UINTMAX 1" CONFIG_CONTENT ${CONFIG_CONTENT})
  string(REPLACE "#undef HAVE_STDINT_H" "#define HAVE_STDINT_H 1" CONFIG_CONTENT ${CONFIG_CONTENT})
else()
  string(REPLACE "#undef uintmax_t" "
    #if _WIN64
    # define intmax_t long long
    # define uintmax_t unsigned long long
    #elif _WIN32
    # define intmax_t long
    # define uintmax_t unsigned long
    #endif"
    CONFIG_CONTENT ${CONFIG_CONTENT})
  endif()
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/config.h ${CONFIG_CONTENT})
```

----------------------------------------

TITLE: Configuring Custom Compiler Options for Mypy Type Checker
DESCRIPTION: Example of setting custom parameters for the Mypy Python type checker through the b:mypy_makeprg_params variable. This allows passing additional options to the compiler when using :make.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_54

LANGUAGE: vim
CODE:
```
let b:mypy_makeprg_params = "--warn-unused-ignores"
```

----------------------------------------

TITLE: Installing Neovim on Solus
DESCRIPTION: Command to install Neovim using the eopkg package manager on Solus Linux.
SOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_5

LANGUAGE: sh
CODE:
```
sudo eopkg install neovim
```

----------------------------------------

TITLE: Converting UTF-16 Length to WTF-8 in Lua
DESCRIPTION: This function calculates the length in bytes of a UTF-16 (or UCS-2) string after converting it to WTF-8. It assumes the endianness of the input string matches the platform's native endianness.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_106

LANGUAGE: lua
CODE:
```
uv.utf16_length_as_wtf8({utf16})
```

----------------------------------------

TITLE: Converting Network Interface Index to Name with uv.if_indextoname()
DESCRIPTION: IPv6-capable implementation of if_indextoname(3) that converts a network interface index to its corresponding interface name.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_86

LANGUAGE: lua
CODE:
```
uv.if_indextoname({ifindex})
```

----------------------------------------

TITLE: Basic Nvim File Opening
DESCRIPTION: Basic command to start Nvim with a single file, which is the most common usage pattern.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
nvim filename
```

----------------------------------------

TITLE: Filetype Detection for Cynlib in VimL
DESCRIPTION: Configures syntax highlighting for Cynlib by associating '.cc' and '.cpp' file extensions with Cynlib-specific syntax, distinguishing them from standard C++ files.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_19

LANGUAGE: VimL
CODE:
```
:let cynlib_cyntax_for_cc=1
```

LANGUAGE: VimL
CODE:
```
:let cynlib_cyntax_for_cpp=1
```

----------------------------------------

TITLE: Configuring PowerShell Digital Signature Folding in Vim
DESCRIPTION: Vim configuration setting to disable folding of digital signatures in PowerShell scripts
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ps1.txt#2025-04-20_snippet_1

LANGUAGE: vim
CODE:
```
:let g:ps1_nofold_sig = 1
```

----------------------------------------

TITLE: Configuring Pandoc Syntax Detection
DESCRIPTION: Sets filetype detection for markdown files to use Pandoc syntax.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_94

LANGUAGE: vim
CODE:
```
:let g:filetype_md = 'pandoc'
```

----------------------------------------

TITLE: Configuring Neovim Parser Build with CMake
DESCRIPTION: This CMake script configures the build process for a Neovim parser module. It sets the minimum CMake version, defines the project, adds compilation options, specifies source files, and sets up the library target with custom properties. The script also configures the installation process for the parser library.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/TreesitterParserCMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.16)
project(parser C)

add_compile_options(-w)

file(GLOB source_files src/*.c)

add_library(parser
  MODULE
  ${source_files}
)
set_target_properties(
  parser
  PROPERTIES
    OUTPUT_NAME ${PARSERLANG}
    PREFIX ""
)

include_directories(src)

install(TARGETS parser LIBRARY DESTINATION lib/nvim/parser)

# vim: set ft=cmake:
```

----------------------------------------

TITLE: Configuring and Building libiconv Project with CMake
DESCRIPTION: This comprehensive CMake script handles the complete build process for the libiconv library. It manages project configuration, header file generation, library compilation, and installation setup with cross-platform compatibility adjustments particularly for Windows/MSVC environments.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/LibiconvCMakeLists.txt#2025-04-20_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.16)
project(libiconv C)

add_compile_options(-w)

include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/srclib
  ${CMAKE_CURRENT_BINARY_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}/srclib
  ${CMAKE_CURRENT_SOURCE_DIR}/build-aux/snippet)

configure_file(config.h.in config.h)
file(READ "${CMAKE_CURRENT_BINARY_DIR}/config.h" CONFIG_CONTENT)
string(REPLACE "#undef EILSEQ" "" CONFIG_CONTENT "${CONFIG_CONTENT}")
string(REPLACE "#undef HAVE_MBRTOWC" "#define HAVE_MBRTOWC 1" CONFIG_CONTENT "${CONFIG_CONTENT}")
string(REPLACE "#undef HAVE_MBSINIT" "#define HAVE_MBSINIT 1" CONFIG_CONTENT "${CONFIG_CONTENT}")
string(REPLACE "#undef HAVE_WCRTOMB" "#define HAVE_WCRTOMB 1" CONFIG_CONTENT "${CONFIG_CONTENT}")
string(REPLACE "#undef HAVE_DECL___ARGV" "#define HAVE_DECL___ARGV 1" CONFIG_CONTENT "${CONFIG_CONTENT}")
string(REPLACE "#undef HAVE_WORKING_O_NOFOLLOW" "#define HAVE_WORKING_O_NOFOLLOW 0" CONFIG_CONTENT "${CONFIG_CONTENT}")
string(REPLACE "#undef ICONV_CONST" "#define ICONV_CONST const" CONFIG_CONTENT "${CONFIG_CONTENT}")
string(REPLACE "#undef WORDS_LITTLEENDIAN" "#define WORDS_LITTLEENDIAN 1" CONFIG_CONTENT "${CONFIG_CONTENT}")
string(REPLACE "#undef HAVE_DECL_STRERROR_R" "#define HAVE_DECL_STRERROR_R 0" CONFIG_CONTENT "${CONFIG_CONTENT}")
string(REPLACE "#undef mode_t" "#define mode_t int" CONFIG_CONTENT "${CONFIG_CONTENT}")
string(REPLACE "#undef ssize_t" "#include <BaseTsd.h>\n#define ssize_t SSIZE_T" CONFIG_CONTENT "${CONFIG_CONTENT}")
file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/config.h" "${CONFIG_CONTENT}")

set(BROKEN_WCHAR_H 0)
set(HAVE_VISIBILITY 0)
set(HAVE_WCHAR_T 1)
set(ICONV_CONST "const")
set(USE_MBSTATE_T 0)
configure_file(libcharset/include/localcharset.h.build.in localcharset.h)
configure_file(include/iconv.h.build.in iconv.h)

add_definitions(-DLIBDIR)

add_library(libcharset libcharset/lib/localcharset.c)

add_library(libiconv lib/iconv.c)
target_link_libraries(libiconv libcharset)

add_executable(iconv src/iconv.c srclib/progname.c srclib/getprogname.c
  srclib/safe-read.c srclib/uniwidth/width.c srclib/error.c srclib/xmalloc.c
  srclib/basename-lgpl.c)
target_link_libraries(iconv libiconv)

set(HEADER_TEMPLATES_PATH "srclib")
set(HEADER_TEMPLATES_ABS_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${HEADER_TEMPLATES_PATH}")
file(GLOB_RECURSE HEADER_TEMPLATES "${HEADER_TEMPLATES_ABS_PATH}/*.in.h")
list(REMOVE_ITEM HEADER_TEMPLATES  "${HEADER_TEMPLATES_ABS_PATH}/stdint.in.h")
list(REMOVE_ITEM HEADER_TEMPLATES  "${HEADER_TEMPLATES_ABS_PATH}/wchar.in.h")
foreach(HEADER_TEMPLATE ${HEADER_TEMPLATES})
  file(READ ${HEADER_TEMPLATE} HEADER_CONTENT)
  string(REPLACE "/* The definition of _GL_ARG_NONNULL is copied here.  */" "#include \"arg-nonnull.h\"" HEADER_CONTENT "${HEADER_CONTENT}")
  string(REPLACE "/* The definition of _GL_WARN_ON_USE is copied here.  */" "#include \"warn-on-use.h\"" HEADER_CONTENT "${HEADER_CONTENT}")
  string(REPLACE "/* The definitions of _GL_FUNCDECL_RPL etc. are copied here.  */" "#include \"c++defs.h\"" HEADER_CONTENT "${HEADER_CONTENT}")
  string(REPLACE "@GNULIB_LSTAT@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
  string(REPLACE "@GNULIB_SIGACTION@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
  string(REPLACE "@GNULIB_SIGPROCMASK@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
  string(REPLACE "@HAVE_ISWCNTRL@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
  string(REPLACE "@HAVE_WCTYPE_T@" "1" HEADER_CONTENT "${HEADER_CONTENT}")
  string(REPLACE "@PRAGMA_COLUMNS@" "" HEADER_CONTENT "${HEADER_CONTENT}")

  string(REGEX REPLACE "^${HEADER_TEMPLATES_ABS_PATH}/" "" HEADER_PATH "${HEADER_TEMPLATE}")
  string(REPLACE ".in" "" HEADER_PATH ${HEADER_PATH})
  string(REPLACE "_" "/" HEADER_PATH ${HEADER_PATH})
  # find_file will create a cache entry for the variable
  # SYSTEM_HEADER, so reset it before each call
  set(SYSTEM_HEADER "SYSTEM_HEADER-NOTFOUND")
  find_file(SYSTEM_HEADER ${HEADER_PATH} PATHS "${LIBICONV_INCLUDE_DIRS}")
  if(SYSTEM_HEADER)
    # Gnulib uses #include_next to extend system header files,
    # but MSVC doesn't support it, so a regular include directive
    # with a relative path is used instead
    string(REGEX REPLACE ".*/(.*/${HEADER_PATH})" "../\\1"
      INCLUDE_PATH "${SYSTEM_HEADER}")
    string(REGEX REPLACE "@INCLUDE_NEXT[^@]*@ @NEXT_[^@\n]+@"
      "include <${INCLUDE_PATH}>" HEADER_CONTENT "${HEADER_CONTENT}")
  endif()

  # Default any remaining template variables to 0
  string(REGEX REPLACE "@[^@\n]+@" "0" HEADER_CONTENT "${HEADER_CONTENT}")

  file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/${HEADER_TEMPLATES_PATH}/${HEADER_PATH}" "${HEADER_CONTENT}")
endforeach()

include(GNUInstallDirs)

install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/iconv.h
  ${CMAKE_CURRENT_BINARY_DIR}/localcharset.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

install(TARGETS libcharset libiconv iconv
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

# vim: set ft=cmake:
```

----------------------------------------

TITLE: Setting SpotBugs Compiler Selection
DESCRIPTION: Configures SpotBugs to use a specific compiler plugin (Maven, Ant, or Javac) by setting the 'compiler' property.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_46

LANGUAGE: vim
CODE:
```
let g:spotbugs_properties = {
	\ 'compiler':		'maven',
\ }
```

----------------------------------------

TITLE: Checking localization translations
DESCRIPTION: Commands to check translations for a specific language, generating a detailed report in the build directory.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_10

LANGUAGE: bash
CODE:
```
cmake --build build --target check-po-de
cmake --build build --target check-po-pt_BR
```

----------------------------------------

TITLE: File Renaming Pattern Example
DESCRIPTION: Example showing how to use pattern-based renaming of multiple files in netrw using the mark and rename commands.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_41

LANGUAGE: viml
CODE:
```
mr  [query: reply with *.c]
R   [query: reply with s/^\(.*\)\.c$/\1.cpp/]
```

----------------------------------------

TITLE: Disabling Syntax Highlighting in Neovim Init File
DESCRIPTION: Add this line to init.vim to disable the default syntax highlighting in Neovim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_1

LANGUAGE: viml
CODE:
```
:syntax off
```

----------------------------------------

TITLE: Finding Substring Index in Vim
DESCRIPTION: Demonstrates how to use stridx() function to find the index of a substring within a string, with an option to specify a starting position.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_259

LANGUAGE: vim
CODE:
```
let colon1 = stridx(line, ":")
let colon2 = stridx(line, ":", colon1 + 1)
```

LANGUAGE: vim
CODE:
```
echo stridx("An Example", "Example")     " 3
echo stridx("Starting point", "Start")   " 0
echo stridx("Starting point", "start")   " -1
```

----------------------------------------

TITLE: Digraph Setlist Example in Vim
DESCRIPTION: Demonstrates setting multiple digraphs at once using digraph_setlist() function.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_55

LANGUAGE: vim
CODE:
```
call digraph_setlist([['aa', 'あ'], ['ii', 'い']])
```

----------------------------------------

TITLE: Allowing Tabs in Fortran Files in Vim
DESCRIPTION: Permits the use of tabs in Fortran files despite standards advisement against them by setting 'fortran_have_tabs'. This option is useful for developers preferring tabs in fixed format source code.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_39

LANGUAGE: VimScript
CODE:
```
:let fortran_have_tabs=1
```

----------------------------------------

TITLE: Return Statement Style in C
DESCRIPTION: This snippet demonstrates the preferred style for return statements, advising against unnecessary parentheses around the expression. Parentheses should only be used for complex expressions where they enhance readability.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_19

LANGUAGE: C
CODE:
```
return result;
    return (some_long_condition && another_condition);

    return (value);  // You wouldn't write var = (value);
    return(result);  // return is not a function!
```

----------------------------------------

TITLE: Defining LibGLib and LibTextStyle Sources in CMake
DESCRIPTION: Defines source files for GLib utility functions and the beginning of LibTextStyle sources. These are additional utility libraries used by Gettext for text styling and data structure implementations.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_9

LANGUAGE: cmake
CODE:
```
set(LIBGLIB_SOURCES
  ghash.c glist.c gmessages.c gprimes.c gstrfuncs.c gstring.c)
PREFIX_LIST_ITEMS(LIBGLIB_SOURCES "libtextstyle/lib/glib/")

set(LIBTEXTSTYLE_SOURCE
  gl_array_list.h gl_array_list.c binary-io.h
  binary-io.c c-ctype.h c-ctype.c c-strcase.h c-strcasecmp.c
  c-strncasecmp.c concat-filename.c dirname-lgpl.c
  basename-lgpl.c stripslash.c exitfail.c fatal-signal.h
  fatal-signal.c fd-hook.c fd-ostream.c file-ostream.c)
```

----------------------------------------

TITLE: Formatting Table Cells with Consistent Styling in HTML
DESCRIPTION: HTML markup for table cells with consistent border and text styling. Each cell has bottom and left borders, right alignment, Arial font, and displays the number 5 in red bold text.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_6

LANGUAGE: HTML
CODE:
```
<td style="border-bottom windowtext 0.5pt solid; border-left windowtext;" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>
```

----------------------------------------

TITLE: Setting Menu Font
DESCRIPTION: Example of setting the font for menu items using highlight command
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mlang.txt#2025-04-20_snippet_3

LANGUAGE: viml
CODE:
```
:highlight Menu font=k12,r12
```

----------------------------------------

TITLE: Building Neovim with MSVC in Windows PowerShell
DESCRIPTION: CMake commands to build Neovim on Windows using Visual Studio toolchain from PowerShell, first building dependencies and then the main project.
SOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_5

LANGUAGE: bash
CODE:
```
cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=Release
cmake --build .deps --config Release
cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=Release
cmake --build build --config Release
```

----------------------------------------

TITLE: Preventing Netrw Plugin Loading
DESCRIPTION: Configuration to disable Netrw plugin and autoload functionality if not desired.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_4

LANGUAGE: vimscript
CODE:
```
:let g:loaded_netrw       = 1
:let g:loaded_netrwPlugin = 1
```

----------------------------------------

TITLE: BackgroundBox Preparation Implementation in C++
DESCRIPTION: Sets up the UI layout and handlers for background selection box including buttons, scrolling area, and event listeners. Handles initialization of background selection widget.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_0

LANGUAGE: C++
CODE:
```
void BackgroundBox::prepare() {
	setTitle(tr::lng_backgrounds_header());

	addButton(tr::lng_close(), [=] { closeBox(); });

	setDimensions(st::boxWideWidth, st::boxMaxListHeight);

	auto wrap = object_ptr<Ui::VerticalLayout>(this);
	const auto container = wrap.data();

	Settings::AddSkip(container);

	const auto button = container->add(Settings::CreateButton(
		container,
		tr::lng_settings_bg_from_file(),
		st::infoProfileButton));
	object_ptr<Info::Profile::FloatingIcon>(
		button,
		st::infoIconMediaPhoto,
		st::infoSharedMediaButtonIconPosition);

	button->setClickedCallback([=] {
		chooseFromFile();
	});

	Settings::AddSkip(container);
	Settings::AddDivider(container);

	_inner = container->add(
		object_ptr<Inner>(this, &_controller->session(), _forPeer));

	container->resizeToWidth(st::boxWideWidth);

	setInnerWidget(std::move(wrap), st::backgroundScroll);
	setInnerTopSkip(st::lineWidth);

	_inner->chooseEvents(
	) | rpl::start_with_next([=](const Data::WallPaper &paper) {
		chosen(paper);
	}, _inner->lifetime());

	_inner->removeRequests(
	) | rpl::start_with_next([=](const Data::WallPaper &paper) {
		removePaper(paper);
	}, _inner->lifetime());
}
```

----------------------------------------

TITLE: Running Tests Under GDBServer
DESCRIPTION: Shell command for running functional tests under gdbserver for debugging purposes.
SOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_1

LANGUAGE: sh
CODE:
```
GDB=1 TEST_FILE=test/functional/api/buffer_spec.lua TEST_FILTER='nvim_buf_set_text works$' make functionaltest
```

----------------------------------------

TITLE: Setting Process Priority with uv.os_setpriority()
DESCRIPTION: Sets the scheduling priority of the specified process ID. Priority ranges from -20 (high) to 19 (low).
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_101

LANGUAGE: lua
CODE:
```
uv.os_setpriority({pid}, {priority})
```

----------------------------------------

TITLE: Disabling All Plugin Mappings
DESCRIPTION: Global variable setting to disable mappings for all filetype plugins.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_10

LANGUAGE: vim
CODE:
```
let no_plugin_maps = 1
```

----------------------------------------

TITLE: Setting Environment Variables in Vim
DESCRIPTION: Examples of setting and appending to environment variables using the :let command with the $ prefix in Vim.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_92

LANGUAGE: viml
CODE:
```
:let ${env-name} = {expr1}
```

LANGUAGE: viml
CODE:
```
:let ${env-name} .= {expr1}
```

----------------------------------------

TITLE: Generating HTML Table Cells with Styled Content
DESCRIPTION: This HTML snippet defines table cells with consistent styling and content. Each cell has a bottom and left border, right alignment, and contains the number 5 in red, bold Arial font.
SOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_8

LANGUAGE: HTML
CODE:
```
<td style="border-bottom windowtext 0.5pt solid; border-left windowtext;" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>
```

----------------------------------------

TITLE: Setting Vim script continuation line indentation
DESCRIPTION: Configures the amount of indentation for continuation lines in Vim scripts. Continuation lines are those starting with a backslash. The default is three times shiftwidth.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_18

LANGUAGE: vim
CODE:
```
:let g:vim_indent_cont = shiftwidth() * 3
```

----------------------------------------

TITLE: Setting Verbosity to Monitor Buffer-local Autocommands in Vim
DESCRIPTION: Command to increase verbosity level to see when buffer-local autocommands are removed.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_25

LANGUAGE: viml
CODE:
```
:set verbose=6
```

----------------------------------------

TITLE: Setting Fvwm Version and Filetype in Vim
DESCRIPTION: This snippet shows how to configure Vim to recognize files in the /etc/X11/fvwm2/ directory as Fvwm2 configuration files.  It sets the 'b:fvwm_version' variable to 2 and the 'filetype' option to fvwm.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_42

LANGUAGE: vim
CODE:
```
	:au! BufNewFile,BufRead /etc/X11/fvwm2/*  let b:fvwm_version = 2 |
					 \ set filetype=fvwm
```

----------------------------------------

TITLE: Setting Directory Paths and Compile Definitions for Gettext in CMake
DESCRIPTION: Configures paths for locale data, libraries, and package files, then adds them as preprocessor definitions. These paths are important for the Gettext library to locate its resources at runtime.
SOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_4

LANGUAGE: cmake
CODE:
```
set(LOCALDIR "gettext")
set(LIBDIR "gettext")
set(PKGDATADIR "gettext")
set(PACKAGE_SUFFIX "gettext")
add_definitions(-DLOCALEDIR=\"${LOCALDIR}\"
  -DLOCALE_ALIAS_PATH=\"${LOCALDIR}\"
  -DLIBDIR=\"${LOCALDIR}\"
  -DINSTALLDIR=\"${LOCALDIR}\"
  -DEXEEXT=\".exe\"
  -DLOCALEDIR=\"${LOCALDIR}\"
  -DLIBDIR=\"${LIBDIR}\"
  -DPACKAGE_SUFFIX=\"${PACKAGE_SUFFIX}\"
  -DGETTEXTDATADIR=\"${PKGDATADIR}\"
  -DBISON_LOCALEDIR=\"${LOCALDIR}\"
  -DHAVE_CONFIG_H)
```

----------------------------------------

TITLE: Configuring SpotBugs Properties for Java Projects
DESCRIPTION: Configures source and class path directories for SpotBugs to analyze Java projects with separate source and compiled class directories.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_45

LANGUAGE: vim
CODE:
```
let g:spotbugs_properties = {
	\ 'sourceDirPath':	['src/main/java'],
	\ 'classDirPath':	['target/classes'],
	\ 'testSourceDirPath':	['src/test/java'],
	\ 'testClassDirPath':	['target/test-classes'],
\ }
```

----------------------------------------

TITLE: Language List Definition
DESCRIPTION: Definition of supported language codes including UTF-8 specific encodings for certain languages
SOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/po/CMakeLists.txt#2025-04-20_snippet_1

LANGUAGE: cmake
CODE:
```
set(LANGUAGES
    af
    ca
    cs
    da
    de
    en_GB
    eo
    es
    fi
    fr
    ga
    it
    ja
    ko.UTF-8
    nl
    no
    pl.UTF-8
    pt_BR
    ru
    sk
    sv
    tr
    uk
    vi
    zh_CN.UTF-8
    zh_TW.UTF-8)
```

----------------------------------------

TITLE: Disabling EditorConfig in Lua
DESCRIPTION: Shows how to disable EditorConfig integration globally using Lua configuration.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/editorconfig.txt#2025-04-20_snippet_0

LANGUAGE: lua
CODE:
```
vim.g.editorconfig = false
```

----------------------------------------

TITLE: Suffix Definition Example
DESCRIPTION: Demonstrates basic suffix definition format with flag, combination permission, and count of suffix rules
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_15

LANGUAGE: spelling-definition
CODE:
```
SFX L Y 2 ~
SFX L 0 re [^x] ~
SFX L 0 ro x ~
```

----------------------------------------

TITLE: Getting libuv Loop Mode in Lua
DESCRIPTION: This function returns a string indicating the current loop mode if the loop is running, or `nil` if it is not. It allows querying the currently active event loop execution mode.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_6

LANGUAGE: lua
CODE:
```
"uv.loop_mode()                                                  *uv.loop_mode()*\n\n                If the loop is running, returns a string indicating the mode\n                in use. If the loop is not running, `nil` is returned instead.\n\n                Returns: `string` or `nil`"
```

----------------------------------------

TITLE: Enabling Sanitizers for Neovim Build
DESCRIPTION: Configures options for various sanitizers (ASAN, UBSAN, MSAN, TSAN) used to detect memory and threading bugs during development.
SOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_11

LANGUAGE: CMake
CODE:
```
option(ENABLE_ASAN_UBSAN "Enable Clang address & undefined behavior sanitizer for nvim binary." OFF)
option(ENABLE_MSAN "Enable Clang memory sanitizer for nvim binary." OFF)
# TSAN exists to test Luv threads.
option(ENABLE_TSAN "Enable Clang thread sanitizer for nvim binary." OFF)

if((ENABLE_ASAN_UBSAN AND ENABLE_MSAN)
    OR (ENABLE_ASAN_UBSAN AND ENABLE_TSAN)
    OR (ENABLE_MSAN AND ENABLE_TSAN))
  message(FATAL_ERROR "Sanitizers cannot be enabled simultaneously")
endif()
```

----------------------------------------

TITLE: Vim Help File Footer
DESCRIPTION: Standard Vim help file footer with formatting modeline settings
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_theme.txt#2025-04-20_snippet_1

LANGUAGE: vimdoc
CODE:
```
 vim:tw=78:ts=8:et:ft=help:norl:
```

----------------------------------------

TITLE: Moving Filetype Plugin to Appropriate Directory - Vim
DESCRIPTION: This snippet shows how to move a file for a specific filetype plugin into its respective ftplugin directory. It ensures plugins are organized based on the filetypes they support.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_9

LANGUAGE: Vim
CODE:
```
mv thefile ~/.local/share/nvim/site/ftplugin/stuff.vim
```

----------------------------------------

TITLE: Disabling Build Cache Configuration
DESCRIPTION: Command to disable caching when building Neovim using CMAKE.
SOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
cmake -B build -D CACHE_PRG=OFF
```

----------------------------------------

TITLE: Command-line Editing in Vim
DESCRIPTION: Commands used for editing the Vim command line, including text manipulation, cursor movement, command history, and completion options.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_8

LANGUAGE: vim
CODE:
```
<Esc>                 abandon command-line (if 'wildchar' is <Esc>, type it twice)

CTRL-V {char}         insert {char} literally
CTRL-V {number}       enter decimal value of character (up to three digits)
CTRL-K {char1} {char2} enter digraph
CTRL-R {register}     insert the contents of a register

<Left>/<Right>        cursor left/right
<S-Left>/<S-Right>    cursor one word left/right
CTRL-B/CTRL-E         cursor to beginning/end of command-line

<BS>                  delete the character in front of the cursor
<Del>                 delete the character under the cursor
CTRL-W                delete the word in front of the cursor
CTRL-U                remove all characters

<Up>/<Down>           recall older/newer command-line that starts with current command
<S-Up>/<S-Down>       recall older/newer command-line from history
CTRL-G                next match when 'incsearch' is active
CTRL-T                previous match when 'incsearch' is active
:his[tory]            show older command-lines

'wildchar' (default: <Tab>) do completion on the pattern in front of the cursor
CTRL-D                list all names that match the pattern in front of the cursor
CTRL-A                insert all names that match pattern in front of cursor
CTRL-L                insert longest common part of names that match pattern
CTRL-N                after 'wildchar' with multiple matches: go to next match
CTRL-P                after 'wildchar' with multiple matches: go to previous match
```

----------------------------------------

TITLE: Concealing code block delimiters in Markdown with Treesitter
DESCRIPTION: This snippet shows how to use the `@conceal` capture and the `conceal` metadata to hide code block delimiters in Markdown. The `(#set! conceal "")` sets the conceal property to an empty string which effectively hides the node.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_19

LANGUAGE: vim
CODE:
```
    ((fenced_code_block_delimiter) @conceal (#set! conceal ""))

```

----------------------------------------

TITLE: Starting Vim Debugger with Breakpoint
DESCRIPTION: This command starts Vim with a breakpoint set in the 'explorer.vim' script.  It instructs Vim to run and stop execution at the first line of the specified script, enabling debugging.
SOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_17

LANGUAGE: vim
CODE:
```
"vim -c \"breakadd file */explorer.vim\" ."
```