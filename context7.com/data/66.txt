TITLE: Signing a PSBT with Multiple Bitcoin Wallets
DESCRIPTION: Processes a PSBT with two different participant wallets using the walletprocesspsbt RPC. Each wallet adds its signature to the transaction independently.

LANGUAGE: bash
CODE:
```
psbt_1=$(./build/bin/bitcoin-cli -signet -rpcwallet="participant_1" walletprocesspsbt $funded_psbt | jq '.psbt')

psbt_2=$(./build/bin/bitcoin-cli -signet -rpcwallet="participant_2" walletprocesspsbt $funded_psbt | jq '.psbt')
```

----------------------------------------

TITLE: Enum Class Usage with Switch Statement in C++
DESCRIPTION: Demonstrates using enum class (scoped enumerations) with a switch statement in C++, avoiding implicit int conversions and name clashes. The example shows best practices for handling all enum cases without a default case.

LANGUAGE: cpp
CODE:
```
enum class Tabs {
    info,
    console,
    network_graph,
    peers
};

int GetInt(Tabs tab)
{
    switch (tab) {
    case Tabs::info: return 0;
    case Tabs::console: return 1;
    case Tabs::network_graph: return 2;
    case Tabs::peers: return 3;
    } // no default case, so the compiler can warn about missing cases
    assert(false);
}
```

----------------------------------------

TITLE: Configuring Bitcoin Core Fuzzing Test Suite in CMake
DESCRIPTION: This CMake script configures the fuzzing test suite for Bitcoin Core. It defines a comprehensive list of fuzzing targets covering various components of the codebase, sets up their dependencies, and conditionally includes wallet-specific fuzzing tests if wallet functionality is enabled.

LANGUAGE: CMake
CODE:
```
add_subdirectory(util)

add_executable(fuzz
  addition_overflow.cpp
  addrman.cpp
  asmap.cpp
  asmap_direct.cpp
  autofile.cpp
  banman.cpp
  base_encode_decode.cpp
  bech32.cpp
  bip324.cpp
  bitdeque.cpp
  bitset.cpp
  block.cpp
  block_header.cpp
  block_index.cpp
  blockfilter.cpp
  bloom_filter.cpp
  buffered_file.cpp
  chain.cpp
  checkqueue.cpp
  cluster_linearize.cpp
  coins_view.cpp
  coinscache_sim.cpp
  connman.cpp
  crypto.cpp
  crypto_aes256.cpp
  crypto_aes256cbc.cpp
  crypto_chacha20.cpp
  crypto_chacha20poly1305.cpp
  crypto_common.cpp
  crypto_diff_fuzz_chacha20.cpp
  crypto_hkdf_hmac_sha256_l32.cpp
  crypto_poly1305.cpp
  cuckoocache.cpp
  decode_tx.cpp
  descriptor_parse.cpp
  deserialize.cpp
  eval_script.cpp
  feefrac.cpp
  fee_rate.cpp
  feeratediagram.cpp
  fees.cpp
  flatfile.cpp
  float.cpp
  golomb_rice.cpp
  headerssync.cpp
  hex.cpp
  http_request.cpp
  i2p.cpp
  integer.cpp
  key.cpp
  key_io.cpp
  kitchen_sink.cpp
  load_external_block_file.cpp
  locale.cpp
  merkleblock.cpp
  message.cpp
  miniscript.cpp
  minisketch.cpp
  mini_miner.cpp
  muhash.cpp
  multiplication_overflow.cpp
  net.cpp
  net_permissions.cpp
  netaddress.cpp
  netbase_dns_lookup.cpp
  node_eviction.cpp
  overflow.cpp
  p2p_handshake.cpp
  p2p_headers_presync.cpp
  p2p_transport_serialization.cpp
  pcp.cpp
  package_eval.cpp
  parse_hd_keypath.cpp
  parse_iso8601.cpp
  parse_numbers.cpp
  parse_script.cpp
  parse_univalue.cpp
  partially_downloaded_block.cpp
  policy_estimator.cpp
  policy_estimator_io.cpp
  poolresource.cpp
  pow.cpp
  prevector.cpp
  primitives_transaction.cpp
  process_message.cpp
  process_messages.cpp
  protocol.cpp
  psbt.cpp
  random.cpp
  rbf.cpp
  rolling_bloom_filter.cpp
  rpc.cpp
  script.cpp
  script_assets_test_minimizer.cpp
  script_descriptor_cache.cpp
  script_flags.cpp
  script_format.cpp
  script_interpreter.cpp
  script_ops.cpp
  script_parsing.cpp
  script_sigcache.cpp
  script_sign.cpp
  scriptnum_ops.cpp
  secp256k1_ec_seckey_import_export_der.cpp
  secp256k1_ecdsa_signature_parse_der_lax.cpp
  signature_checker.cpp
  signet.cpp
  socks5.cpp
  span.cpp
  string.cpp
  strprintf.cpp
  system.cpp
  timeoffsets.cpp
  torcontrol.cpp
  transaction.cpp
  txdownloadman.cpp
  tx_in.cpp
  tx_out.cpp
  tx_pool.cpp
  txgraph.cpp
  txorphan.cpp
  txrequest.cpp
  # Visual Studio 2022 version 17.12 introduced a bug
  # that causes an internal compiler error.
  # See: https://github.com/bitcoin/bitcoin/issues/31303
  $<$<VERSION_LESS:${MSVC_VERSION},1942>:utxo_snapshot.cpp>
  utxo_total_supply.cpp
  validation_load_mempool.cpp
  vecdeque.cpp
  versionbits.cpp
)
target_link_libraries(fuzz
  core_interface
  fuzzer_interface
  test_fuzz
  bitcoin_cli
  bitcoin_common
  bitcoin_util
  minisketch
  leveldb
  univalue
  secp256k1
  Boost::headers
  libevent::extra
)

if(ENABLE_WALLET)
  add_subdirectory(${PROJECT_SOURCE_DIR}/src/wallet/test/fuzz wallet)
endif()
```

----------------------------------------

TITLE: C++ Block Style Example for Bitcoin Core
DESCRIPTION: A code example demonstrating the preferred block style in Bitcoin Core, including namespace usage, class definition, member variables, and function implementation patterns.

LANGUAGE: C++
CODE:
```
int g_count{0};

namespace foo {
class Class
{
    std::string m_name;

public:
    bool Function(const std::string& s, int n)
    {
        // Comment summarising what this section of code does
        for (int i = 0; i < n; ++i) {
            int total_sum{0};
            // When something fails, return early
            if (!Something()) return false;
            ...
            if (SomethingElse(i)) {
                total_sum += ComputeSomething(g_count);
            } else {
                DoSomething(m_name, total_sum);
            }
        }

        // Success return is usually at the end
        return true;
    }
}
} // namespace foo
```

----------------------------------------

TITLE: Command for Creating a PSBT from Inputs and Outputs
DESCRIPTION: The createpsbt RPC takes inputs and outputs and creates a PSBT with no additional information, equivalent to calling createrawtransaction followed by converttopsbt.

LANGUAGE: markdown
CODE:
```
- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and
  outputs and converts them to a PSBT with no additional information. It is
  equivalent to calling `createrawtransaction` followed by `converttopsbt`.
```

----------------------------------------

TITLE: PSBT Multisig Transaction Workflow in Bitcoin Core
DESCRIPTION: Commands for creating, signing, and broadcasting a transaction from a multisig address using PSBTs, with Bob and Carol as signers.

LANGUAGE: markdown
CODE:
```
- One of them - let's assume Carol here - initiates the creation. She runs
  `walletcreatefundedpsbt [] {"Asend":V} 0 {"subtractFeeFromOutputs":[0], "includeWatching":true}`.
  We call the resulting PSBT *P*. *P* does not contain any signatures.
- Carol needs to sign the transaction herself. In order to do so, she runs
  `walletprocesspsbt "P"`, and gives the resulting PSBT *P2* to Bob.
- Bob inspects the PSBT using `decodepsbt "P2"` to determine if the transaction
  has indeed just the expected input, and an output to *Asend*, and the fee is
  reasonable. If he agrees, he calls `walletprocesspsbt "P2"` to sign. The
  resulting PSBT *P3* contains both Carol's and Bob's signature.
- Now anyone can call `finalizepsbt "P3"` to extract a fully signed transaction
  *T*.
- Finally anyone can broadcast the transaction using `sendrawtransaction "T"`.
```

----------------------------------------

TITLE: Finalizing and Broadcasting a Bitcoin PSBT
DESCRIPTION: Finalizes a fully signed PSBT to produce a network-serialized transaction and broadcasts it to the Bitcoin network using finalizepsbt and sendrawtransaction RPCs.

LANGUAGE: bash
CODE:
```
finalized_psbt_hex=$(./build/bin/bitcoin-cli -signet finalizepsbt $combined_psbt | jq -r '.hex')

./build/bin/bitcoin-cli -signet sendrawtransaction $finalized_psbt_hex
```

----------------------------------------

TITLE: Using std::span for Function Arguments in C++
DESCRIPTION: Example of using std::span as a function parameter to accept any range-like container, which avoids unnecessary conversions and improves performance.

LANGUAGE: cpp
CODE:
```
void Foo(std::span<const int> data);

std::vector<int> vec{1,2,3};
Foo(vec);
```

----------------------------------------

TITLE: Creating and Funding a PSBT in Bitcoin Multisig Wallet
DESCRIPTION: Creates a Partially Signed Bitcoin Transaction (PSBT) using the walletcreatefundedpsbt RPC. The script calculates a transaction amount as 80% of the available balance and sends it to an address from participant_1's wallet.

LANGUAGE: bash
CODE:
```
balance=$(./build/bin/bitcoin-cli -signet -rpcwallet="multisig_wallet_01" getbalance)

amount=$(echo "$balance * 0.8" | bc -l | sed -e 's/^\./0./' -e 's/^-\./-0./')

destination_addr=$(./build/bin/bitcoin-cli -signet -rpcwallet="participant_1" getnewaddress)

funded_psbt=$(./build/bin/bitcoin-cli -signet -named -rpcwallet="multisig_wallet_01" walletcreatefundedpsbt outputs="{\"$destination_addr\": $amount}" | jq -r '.psbt')
```

----------------------------------------

TITLE: Querying Bitcoin Core API Endpoints with curl in Shell
DESCRIPTION: Examples of using curl to interact with Bitcoin Core's JSON-RPC endpoints. The first command retrieves the block count from the root endpoint, while the second retrieves the wallet balance from a specific wallet endpoint. Both require user authentication and proper JSON-RPC formatting.

LANGUAGE: sh
CODE:
```
# Get block count from the / endpoint when rpcuser=alice and rpcport=38332
$ curl --user alice --data-binary '{"jsonrpc": "2.0", "id": "0", "method": "getblockcount", "params": []}' -H 'content-type: application/json' localhost:38332/

# Get balance from the /wallet/walletname endpoint when rpcuser=alice, rpcport=38332 and rpcwallet=desc-wallet
$ curl --user alice --data-binary '{"jsonrpc": "2.0", "id": "0", "method": "getbalance", "params": []}' -H 'content-type: application/json' localhost:38332/wallet/desc-wallet

```

----------------------------------------

TITLE: Command for Finalizing PSBT and Converting to Transaction
DESCRIPTION: The finalizepsbt RPC finalizes partial signatures and, if all inputs are finalized, converts the PSBT to a fully signed transaction ready for broadcast.

LANGUAGE: markdown
CODE:
```
- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any
  partial signatures, and if all inputs are finalized, converts the result to a
  fully signed transaction which can be broadcast with `sendrawtransaction`.
```

----------------------------------------

TITLE: Multisignature Descriptors in Bitcoin Core
DESCRIPTION: Examples of multisignature descriptors including bare multisig, P2SH multisig, sorted multisig, and P2WSH multisig. These define scripts requiring multiple signatures to spend outputs.

LANGUAGE: output-descriptor
CODE:
```
multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)
```

LANGUAGE: output-descriptor
CODE:
```
sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))
```

LANGUAGE: output-descriptor
CODE:
```
sh(sortedmulti(2,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01))
```

LANGUAGE: output-descriptor
CODE:
```
wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))
```

LANGUAGE: output-descriptor
CODE:
```
sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))
```

----------------------------------------

TITLE: Multisig Setup Commands in Bitcoin Core
DESCRIPTION: Commands for setting up a 2-of-3 multisig address in Bitcoin Core, including creating addresses, getting public keys, and importing the multisig address.

LANGUAGE: markdown
CODE:
```
- All three call `getnewaddress` to create a new address; call these addresses
  *Aalice*, *Abob*, and *Acarol*.
- All three call `getaddressinfo "X"`, with *X* their respective address, and
  remember the corresponding public keys. Call these public keys *Kalice*,
  *Kbob*, and *Kcarol*.
- All three now run `addmultisigaddress 2 ["Kalice","Kbob","Kcarol"]` to teach
  their wallet about the multisig script. Call the address produced by this
  command *Amulti*. They may be required to explicitly specify the same
  addresstype option each, to avoid constructing different versions due to
  differences in configuration.
- They also run `importaddress "Amulti" "" false` to make their wallets treat
  payments to *Amulti* as contributing to the watch-only balance.
- Others can verify the produced address by running
  `createmultisig 2 ["Kalice","Kbob","Kcarol"]`, and expecting *Amulti* as
  output. Again, it may be necessary to explicitly specify the addresstype
  in order to get a result that matches. This command won't enable them to
  initiate transactions later, however.
```

----------------------------------------

TITLE: Optimized Modular Inverse Implementation Using Batched Divsteps in Python
DESCRIPTION: Complete implementation of modular inversion using batched divsteps. This function processes N divsteps at once by computing the transition matrix and applying it to both [f, g] and [d, e] pairs, significantly reducing the number of expensive modular divisions needed.

LANGUAGE: python
CODE:
```
def modinv(M, Mi, x):
    """Compute the modular inverse of x mod M, given Mi=1/M mod 2^N."""
    assert M & 1
    delta, f, g, d, e = 1, M, x, 0, 1
    while g != 0:
        # Compute the delta and transition matrix t for the next N divsteps (this only needs
        # (N+1)-bit signed integer arithmetic).
        delta, t = divsteps_n_matrix(delta, f % 2**N, g % 2**N)
        # Apply the transition matrix t to [f, g]:
        f, g = update_fg(f, g, t)
        # Apply the transition matrix t to [d, e]:
        d, e = update_de(d, e, t, M, Mi)
    return (d * f) % M
```

----------------------------------------

TITLE: Changing the Passphrase of an Encrypted Bitcoin Core Wallet
DESCRIPTION: Command to change the passphrase of an already encrypted wallet. Requires knowing the current passphrase to set a new one.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli -rpcwallet="wallet-01" walletpassphrasechange "oldpassphrase" "newpassphrase"
```

----------------------------------------

TITLE: Implementing Thread Safety With Lock Exclusion in C++
DESCRIPTION: Example showing how to implement thread safety with lock exclusion in Bitcoin Core's Chainstate class. The code demonstrates proper use of EXCLUSIVE_LOCKS_REQUIRED and LOCKS_EXCLUDED annotations with corresponding runtime assertions.

LANGUAGE: C++
CODE:
```
// validation.h
class Chainstate
{
protected:
    ...
    Mutex m_chainstate_mutex;
    ...
public:
    ...
    bool ActivateBestChain(
        BlockValidationState& state,
        std::shared_ptr<const CBlock> pblock = nullptr)
        EXCLUSIVE_LOCKS_REQUIRED(!m_chainstate_mutex)
        LOCKS_EXCLUDED(::cs_main);
    ...
    bool PreciousBlock(BlockValidationState& state, CBlockIndex* pindex)
        EXCLUSIVE_LOCKS_REQUIRED(!m_chainstate_mutex)
        LOCKS_EXCLUDED(::cs_main);
    ...
}

// validation.cpp
bool Chainstate::PreciousBlock(BlockValidationState& state, CBlockIndex* pindex)
{
    AssertLockNotHeld(m_chainstate_mutex);
    AssertLockNotHeld(::cs_main);
    {
        LOCK(cs_main);
        ...
    }

    return ActivateBestChain(state, std::shared_ptr<const CBlock>());
}
```

----------------------------------------

TITLE: Using Named Arguments with bitcoin-cli
DESCRIPTION: Examples of using the new JSON-RPC named arguments feature with bitcoin-cli. This allows for more flexible parameter passing by specifying parameters by name rather than position.

LANGUAGE: bash
CODE:
```
src/bitcoin-cli -named help command="help"
src/bitcoin-cli -named getblockhash height=0
src/bitcoin-cli -named getblock blockhash=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
src/bitcoin-cli -named sendtoaddress address="(snip)" amount="1.0" subtractfeefromamount=true
```

----------------------------------------

TITLE: Command for Analyzing PSBT Status
DESCRIPTION: The analyzepsbt RPC examines a PSBT to report input status, workflow next steps, and when possible computes fee and estimates weight and feerate.

LANGUAGE: markdown
CODE:
```
- **`analyzepsbt`** is a utility RPC that examines a PSBT and reports the
  current status of its inputs, the next step in the workflow if known, and if
  possible, computes the fee of the resulting transaction and estimates the
  final weight and feerate.
```

----------------------------------------

TITLE: Extracting xpubs from Descriptor Wallets
DESCRIPTION: Extracts the extended public keys (xpubs) from each participant wallet. The script uses jq to process JSON results and extracts both internal and external derivation paths from WPKH descriptors.

LANGUAGE: bash
CODE:
```
declare -A xpubs

for ((n=1;n<=3;n++))
do
 xpubs["internal_xpub_${n}"]=$(./build/bin/bitcoin-cli -signet -rpcwallet="participant_${n}" listdescriptors | jq '.descriptors | [.[] | select(.desc | startswith("wpkh") and contains("/1/*"))][0] | .desc' | grep -Po '(?<=\().*(?=\))')

 xpubs["external_xpub_${n}"]=$(./build/bin/bitcoin-cli -signet -rpcwallet="participant_${n}" listdescriptors | jq '.descriptors | [.[] | select(.desc | startswith("wpkh") and contains("/0/*") )][0] | .desc' | grep -Po '(?<=\().*(?=\))')
done
```

----------------------------------------

TITLE: Restoring a Bitcoin Core Wallet from a Backup File
DESCRIPTION: Command to restore a wallet from a previously created backup file. This allows recovery of wallet data including keys and metadata from the backup.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli restorewallet "restored-wallet" /home/node01/Backups/backup-01.dat
```

----------------------------------------

TITLE: Command for Creating a Funded PSBT with Wallet
DESCRIPTION: The walletcreatefundedpsbt RPC creates a PSBT with specified inputs/outputs, adds inputs/change to balance it, and includes relevant metadata.

LANGUAGE: markdown
CODE:
```
- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a
  PSBT with the specified inputs and outputs, adds additional inputs and change
  to it to balance it out, and adds relevant metadata. In particular, for inputs
  that the wallet knows about (counting towards its normal or watch-only
  balance), UTXO information will be added. For outputs and inputs with UTXO
  information present, key and script information will be added which the wallet
  knows about. It is equivalent to running `createrawtransaction`, followed by
  `fundrawtransaction`, and `converttopsbt`.
```

----------------------------------------

TITLE: Optimizing Range Correction in update_de Function in Python
DESCRIPTION: Further optimization that applies the effects of range correction directly to cd and ce instead of d and e. This eliminates redundant calculations while maintaining the same mathematical properties.

LANGUAGE: python
CODE:
```
    ...
    cd, ce = u*d + v*e, q*d + r*e
    # Perform the equivalent of incrementing d, e by M when they're negative.
    if d < 0:
        cd += u*M
        ce += q*M
    if e < 0:
        cd += v*M
        ce += r*M
    # Cancel out bottom N bits of cd and ce.
    md = -((Mi * cd) % 2**N)
    me = -((Mi * ce) % 2**N)
    cd += md * M
    ce += me * M
    ...
```

----------------------------------------

TITLE: Sending Bitcoin Using Hardware Wallet
DESCRIPTION: Send bitcoin to an address using the hardware wallet for signing. The transaction uses PSBT format and broadcasts automatically upon successful signing.

LANGUAGE: sh
CODE:
```
$ bitcoin-cli -rpcwallet=<wallet> sendtoaddress <address> <amount>
```

----------------------------------------

TITLE: Command for Decoding PSBT Information
DESCRIPTION: The decodepsbt RPC shows all information in a PSBT in human-readable form and computes its eventual fee if known.

LANGUAGE: markdown
CODE:
```
- **`decodepsbt`** is a diagnostic utility RPC which will show all information in
  a PSBT in human-readable form, as well as compute its eventual fee if known.
```

----------------------------------------

TITLE: Importing descriptors into Bitcoin Core watch-only wallet
DESCRIPTION: Imports the public key descriptors from the offline wallet into the online watch-only wallet. This allows the online wallet to track and validate transactions for the same addresses.

LANGUAGE: sh
CODE:
```
[online]$ ./build/bin/bitcoin-cli -signet -rpcwallet="watch_only_wallet" importdescriptors "$(cat /path/to/descriptors.json)"

[
  {
    "success": true
  },
  {
    "success": true
  },
  {
    "success": true
  },
  {
    "success": true
  },
  {
    "success": true
  },
  {
    "success": true
  },
  {
    "success": true
  },
  {
    "success": true
  }
]
```

----------------------------------------

TITLE: Command for Joining Multiple PSBTs
DESCRIPTION: The joinpsbts RPC joins multiple PSBTs by concatenating their inputs and outputs, useful for constructing CoinJoin transactions.

LANGUAGE: markdown
CODE:
```
- **`joinpsbts`** (Creator) is a utility RPC that joins multiple PSBTs together,
  concatenating the inputs and outputs. This can be used to construct CoinJoin
  transactions.
```

----------------------------------------

TITLE: RPC Interface Fixes in Bitcoin Core
DESCRIPTION: Multiple fixes for the RPC interface, including correcting warnings for p2sh-segwit address types in createmultisig, optimizing UniValue parameter passing, preventing data races, and fixing a crash in deriveaddresses function.

LANGUAGE: markdown
CODE:
```
- #25220 rpc: fix incorrect warning for address type p2sh-segwit in createmultisig
- #25237 rpc: Capture UniValue by ref for rpcdoccheck
- #25983 Prevent data race for pathHandlers
- #26275 Fix crash on deriveaddresses when index is 2147483647 (2^31-1)
```

----------------------------------------

TITLE: Configuring secp256k1 Subtree in Bitcoin Core
DESCRIPTION: Configuration settings for the secp256k1 cryptographic library used in Bitcoin Core. It disables shared libraries and certain modules while enabling recovery functionality. Build options for tests and benchmarks are controlled by the parent project settings.

LANGUAGE: CMake
CODE:
```
message("")
message("Configuring secp256k1 subtree...")
set(SECP256K1_DISABLE_SHARED ON CACHE BOOL "" FORCE)
set(SECP256K1_ENABLE_MODULE_ECDH OFF CACHE BOOL "" FORCE)
set(SECP256K1_ENABLE_MODULE_RECOVERY ON CACHE BOOL "" FORCE)
set(SECP256K1_ENABLE_MODULE_MUSIG OFF CACHE BOOL "" FORCE)
set(SECP256K1_BUILD_BENCHMARK OFF CACHE BOOL "" FORCE)
set(SECP256K1_BUILD_TESTS ${BUILD_TESTS} CACHE BOOL "" FORCE)
set(SECP256K1_BUILD_EXHAUSTIVE_TESTS ${BUILD_TESTS} CACHE BOOL "" FORCE)
if(NOT BUILD_TESTS)
  # Always skip the ctime tests, if we are building no other tests.
  # Otherwise, they are built if Valgrind is available. See SECP256K1_VALGRIND.
  set(SECP256K1_BUILD_CTIME_TESTS ${BUILD_TESTS} CACHE BOOL "" FORCE)
endif()
```

----------------------------------------

TITLE: Unlocking the offline Bitcoin Core wallet for signing
DESCRIPTION: Unlocks the offline wallet with its passphrase for a limited time (60 seconds). This is required before signing operations can be performed with the wallet's private keys.

LANGUAGE: sh
CODE:
```
[offline]$ ./build/bin/bitcoin-cli -signet -rpcwallet="offline_wallet" walletpassphrase "** enter passphrase **" 60
```

----------------------------------------

TITLE: Configuring libFuzzer for Bitcoin Core on macOS
DESCRIPTION: Full configuration steps for setting up libFuzzer on macOS, which requires installing LLVM and lld via Homebrew and configuring CMake with the correct compiler paths and linker flags.

LANGUAGE: sh
CODE:
```
$ brew install llvm lld
$ cmake --preset=libfuzzer \
   -DCMAKE_C_COMPILER="$(brew --prefix llvm)/bin/clang" \
   -DCMAKE_CXX_COMPILER="$(brew --prefix llvm)/bin/clang++" \
   -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld"
```

----------------------------------------

TITLE: Taproot Descriptors in Bitcoin Core
DESCRIPTION: Examples of Pay-to-Taproot (P2TR) descriptors, introduced in later Bitcoin Core versions. These demonstrate internal key and script path specifications using the tr() function.

LANGUAGE: output-descriptor
CODE:
```
tr(c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5,{pk(fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556),pk(e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)})
```

LANGUAGE: output-descriptor
CODE:
```
tr(c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5,sortedmulti_a(2,2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))
```

----------------------------------------

TITLE: Advanced Multisig and Miniscript Descriptors in Bitcoin Core
DESCRIPTION: Examples of advanced descriptors using HD wallets with fingerprints and Miniscript expressions. These demonstrate sophisticated spending policies including timelock-based access controls.

LANGUAGE: output-descriptor
CODE:
```
wsh(sortedmulti(2,[6f53d49c/44h/1h/0h]tpubDDjsCRDQ9YzyaAq9rspCfq8RZFrWoBpYnLxK6sS2hS2yukqSczgcYiur8Scx4Hd5AZatxTuzMtJQJhchufv1FRFanLqUP7JHwusSSpfcEp2/0/*,[e6807791/44h/1h/0h]tpubDDAfvogaaAxaFJ6c15ht7Tq6ZmiqFYfrSmZsHu7tHXBgnjMZSHAeHSwhvjARNA6Qybon4ksPksjRbPDVp7yXA1KjTjSd5x18KHqbppnXP1s/0/*,[367c9cfa/44h/1h/0h]tpubDDtPnSgWYk8dDnaDwnof4ehcnjuL5VoUt1eW2MoAed1grPHuXPDnkX1fWMvXfcz3NqFxPbhqNZ3QBdYjLz2hABeM9Z2oqMR1Gt2HHYDoCgh/0/*))#av0kxgw0
```

LANGUAGE: output-descriptor
CODE:
```
wsh(thresh(4,pk([7258e4f9/44h/1h/0h]tpubDCZrkQoEU3845aFKUu9VQBYWZtrTwxMzcxnBwKFCYXHD6gEXvtFcxddCCLFsEwmxQaG15izcHxj48SXg1QS5FQGMBx5Ak6deXKPAL7wauBU/0/*),s:pk([c80b1469/44h/1h/0h]tpubDD3UwwHoNUF4F3Vi5PiUVTc3ji1uThuRfFyBexTSHoAcHuWW2z8qEE2YujegcLtgthr3wMp3ZauvNG9eT9xfJyxXCfNty8h6rDBYU8UU1qq/0/*),s:pk([4e5024fe/44h/1h/0h]tpubDDLrpPymPLSCJyCMLQdmcWxrAWwsqqssm5NdxT2WSdEBPSXNXxwbeKtsHAyXPpLkhUyKovtZgCi47QxVpw9iVkg95UUgeevyAqtJ9dqBqa1/0/*),s:pk([3b1d1ee9/44h/1h/0h]tpubDCmDTANBWPzf6d8Ap1J5Ku7J1Ay92MpHMrEV7M5muWxCrTBN1g5f1NPcjMEL6dJHxbvEKNZtYCdowaSTN81DAyLsmv6w6xjJHCQNkxrsrfu/0/*),sln:after(840000),sln:after(1050000),sln:after(1260000)))#k28080kv
```

----------------------------------------

TITLE: Signer API Enumerate Command
DESCRIPTION: Example of the enumerate command that returns an array with the fingerprint of available signing devices.

LANGUAGE: sh
CODE:
```
$ <cmd> enumerate
[
    {
        "fingerprint": "00000000"
    }
]
```

----------------------------------------

TITLE: Enumerating Available Signing Devices
DESCRIPTION: List all available signing devices connected to the system with their identifying fingerprints.

LANGUAGE: sh
CODE:
```
$ bitcoin-cli enumeratesigners
{
  "signers": [
    {
      "fingerprint": "c8df832a"
    }
]
```

----------------------------------------

TITLE: Benchmarking ConnectBlock Performance with bpftrace
DESCRIPTION: A command to run the connectblock_benchmark.bt script to benchmark the ConnectBlock() function between block heights 20000 and 38000 on SigNet, logging blocks that take longer than 25ms to connect.

LANGUAGE: bash
CODE:
```
bpftrace contrib/tracing/connectblock_benchmark.bt 20000 38000 25
```

----------------------------------------

TITLE: Creating Descriptor Wallets for Multisig Participants
DESCRIPTION: Creates three descriptor wallets for a 2-of-3 multisig setup. These wallets contain HD seeds and private keys that will be used to sign transactions for the multisig wallet.

LANGUAGE: bash
CODE:
```
for ((n=1;n<=3;n++))
do
 ./build/bin/bitcoin-cli -signet createwallet "participant_${n}"
done
```

----------------------------------------

TITLE: Defining Bitcoin Crypto Static Library in CMake
DESCRIPTION: Defines a static library named 'bitcoin_crypto' with various cryptographic implementation source files. The library includes implementations for common cryptographic algorithms like AES, ChaCha20, SHA256, SHA512, and others used in Bitcoin Core.

LANGUAGE: CMake
CODE:
```
add_library(bitcoin_crypto STATIC EXCLUDE_FROM_ALL
  aes.cpp
  chacha20.cpp
  chacha20poly1305.cpp
  hex_base.cpp
  hkdf_sha256_32.cpp
  hmac_sha256.cpp
  hmac_sha512.cpp
  muhash.cpp
  poly1305.cpp
  ripemd160.cpp
  sha1.cpp
  sha256.cpp
  sha256_sse4.cpp
  sha3.cpp
  sha512.cpp
  siphash.cpp
  ../support/cleanse.cpp
)
```

----------------------------------------

TITLE: Extended Public Key Descriptors in Bitcoin Core
DESCRIPTION: Examples of descriptors using xpubs (BIP32 extended public keys) with derivation paths. These allow generating multiple addresses from a single descriptor by deriving child keys.

LANGUAGE: output-descriptor
CODE:
```
pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)
```

LANGUAGE: output-descriptor
CODE:
```
pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/2)
```

LANGUAGE: output-descriptor
CODE:
```
pkh([d34db33f/44'/0'/0']xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/1/*)
```

LANGUAGE: output-descriptor
CODE:
```
wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))
```

LANGUAGE: output-descriptor
CODE:
```
wsh(sortedmulti(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))
```

----------------------------------------

TITLE: Encrypting a Bitcoin Core Wallet Using CLI
DESCRIPTION: Command to encrypt a wallet's private keys with a passphrase. After encryption, a new backup should be created as the keypool is flushed and a new HD seed is generated.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli -rpcwallet="wallet-01" encryptwallet "passphrase"
```

----------------------------------------

TITLE: Importing a 2-of-3 Multisig Descriptor with Private Key
DESCRIPTION: Example of a descriptor that can be imported into a wallet to enable signing with the first key using signrawtransactionwithwallet. This demonstrates how private keys (xprv) and public keys (xpub) can be mixed in the same descriptor.

LANGUAGE: plaintext
CODE:
```
sh(multi(2,xprv.../84'/0'/0'/0/0,xpub1...,xpub2...))
```

----------------------------------------

TITLE: Implementing Expensive Argument Tracepoint in C++
DESCRIPTION: Example of implementing a tracepoint that gates expensive argument calculation. The calculation is only performed when the tracepoint is active to avoid unnecessary performance overhead.

LANGUAGE: C++
CODE:
```
// An example tracepoint with an expensive argument.

TRACEPOINT_SEMAPHORE(example, gated_expensive_argument);
…
if (TRACEPOINT_ACTIVE(example, gated_expensive_argument)) {
    expensive_argument = expensive_calulation();
    TRACEPOINT(example, gated_expensive_argument, expensive_argument);
}
```

----------------------------------------

TITLE: Successful Transaction Return Value
DESCRIPTION: Example of the return value when a transaction is successfully signed and broadcast.

LANGUAGE: sh
CODE:
```
{"complete": true, "txid": <txid>}
```

----------------------------------------

TITLE: Sample Bitcoin Configuration File Structure
DESCRIPTION: Example showing how network-specific options take precedence over non-network specific options. The regtest.rpcport is set to 3000 despite multiple conflicting definitions.

LANGUAGE: plaintext
CODE:
```
regtest=1
rpcport=2000
regtest.rpcport=3000

[regtest]
rpcport=4000
```

----------------------------------------

TITLE: Visualizing Bitcoin Core Library Dependencies with Mermaid
DESCRIPTION: A mermaid flowchart diagram illustrating the dependency relationships between Bitcoin Core libraries and executables. The graph shows which libraries depend on others, with arrows indicating linker symbol dependencies. This visualization helps developers understand the architectural boundaries between components.

LANGUAGE: mermaid
CODE:
```
%%{ init : { "flowchart" : { "curve" : "basis" }}}%%

graph TD;

bitcoin-cli[bitcoin-cli]-->libbitcoin_cli;

bitcoind[bitcoind]-->libbitcoin_node;
bitcoind[bitcoind]-->libbitcoin_wallet;

bitcoin-qt[bitcoin-qt]-->libbitcoin_node;
bitcoin-qt[bitcoin-qt]-->libbitcoinqt;
bitcoin-qt[bitcoin-qt]-->libbitcoin_wallet;

bitcoin-wallet[bitcoin-wallet]-->libbitcoin_wallet;
bitcoin-wallet[bitcoin-wallet]-->libbitcoin_wallet_tool;

libbitcoin_cli-->libbitcoin_util;
libbitcoin_cli-->libbitcoin_common;

libbitcoin_consensus-->libbitcoin_crypto;

libbitcoin_common-->libbitcoin_consensus;
libbitcoin_common-->libbitcoin_crypto;
libbitcoin_common-->libbitcoin_util;

libbitcoin_kernel-->libbitcoin_consensus;
libbitcoin_kernel-->libbitcoin_crypto;
libbitcoin_kernel-->libbitcoin_util;

libbitcoin_node-->libbitcoin_consensus;
libbitcoin_node-->libbitcoin_crypto;
libbitcoin_node-->libbitcoin_kernel;
libbitcoin_node-->libbitcoin_common;
libbitcoin_node-->libbitcoin_util;

libbitcoinqt-->libbitcoin_common;
libbitcoinqt-->libbitcoin_util;

libbitcoin_util-->libbitcoin_crypto;

libbitcoin_wallet-->libbitcoin_common;
libbitcoin_wallet-->libbitcoin_crypto;
libbitcoin_wallet-->libbitcoin_util;

libbitcoin_wallet_tool-->libbitcoin_wallet;
libbitcoin_wallet_tool-->libbitcoin_util;

classDef bold stroke-width:2px, font-weight:bold, font-size: smaller;
class bitcoin-qt,bitcoind,bitcoin-cli,bitcoin-wallet bold
```

----------------------------------------

TITLE: Importing Developer PGP Keys Using gpg Command in Shell
DESCRIPTION: Command for importing a Bitcoin Core developer's PGP key from keys.openpgp.org using their fingerprint. This allows users to securely communicate with developers when reporting vulnerabilities.

LANGUAGE: shell
CODE:
```
gpg --keyserver hkps://keys.openpgp.org --recv-keys "<fingerprint>"
```

----------------------------------------

TITLE: Running libFuzzer with a corpus directory to save new inputs
DESCRIPTION: This example demonstrates how to run the process_message fuzzer with a specified corpus directory. The fuzzer will save any new coverage-increasing inputs to this directory for future use, starting with an empty corpus and generating new test cases.

LANGUAGE: sh
CODE:
```
$ mkdir -p process_message-seeded-from-thin-air/
$ FUZZ=process_message build_fuzz/bin/fuzz process_message-seeded-from-thin-air/
INFO: Seed: 840522292
INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),
INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),
INFO:        0 files found in process_message-seeded-from-thin-air/
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: A corpus is not provided, starting from an empty corpus
#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb
#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-
#4      NEW    cov: 96 ft: 98 corp: 3/7b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 1 CrossOver-
#21     NEW    cov: 96 ft: 100 corp: 4/11b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 2 ChangeBit-CrossOver-
#324    NEW    cov: 101 ft: 105 corp: 5/12b lim: 6 exec/s: 0 rss: 150Mb L: 6/6 MS: 5 CrossOver-ChangeBit-CopyPart-ChangeBit-ChangeBinInt-
#1239   REDUCE cov: 102 ft: 106 corp: 6/24b lim: 14 exec/s: 0 rss: 150Mb L: 13/13 MS: 5 ChangeBit-CrossOver-EraseBytes-ChangeBit-InsertRepeatedBytes-
#1272   REDUCE cov: 102 ft: 106 corp: 6/23b lim: 14 exec/s: 0 rss: 150Mb L: 12/12 MS: 3 ChangeBinInt-ChangeBit-EraseBytes-
        NEW_FUNC[1/677]: 0x55e11f456690 in std::_Function_base::~_Function_base() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:255
        NEW_FUNC[2/677]: 0x55e11f465800 in CDataStream::CDataStream(std::vector<unsigned char, std::allocator<unsigned char> > const&, int, int) src/./streams.h:248
#2125   REDUCE cov: 4820 ft: 4867 corp: 7/29b lim: 21 exec/s: 0 rss: 155Mb L: 6/12 MS: 2 CopyPart-CMP- DE: "block"-
        NEW_FUNC[1/9]: 0x55e11f64d790 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::~_Rb_tree() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:972
        NEW_FUNC[2/9]: 0x55e11f64d870 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::_M_erase(std::_Rb_tree_node<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >*) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:1875
#2228   NEW    cov: 4898 ft: 4971 corp: 8/35b lim: 21 exec/s: 0 rss: 156Mb L: 6/12 MS: 3 EraseBytes-CopyPart-PersAutoDict- DE: "block"-
        NEW_FUNC[1/5]: 0x55e11f46df70 in std::enable_if<__and_<std::allocator_traits<zero_after_free_allocator<char> >::__construct_helper<char, unsigned char const&>::type>::value, void>::type std::allocator_traits<zero_after_free_allocator<char> >::_S_construct<char, unsigned char const&>(zero_after_free_allocator<char>&, char*, unsigned char const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:243
        NEW_FUNC[2/5]: 0x55e11f477390 in std::vector<unsigned char, std::allocator<unsigned char> >::data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:1056
#2456   NEW    cov: 4933 ft: 5042 corp: 9/55b lim: 21 exec/s: 0 rss: 160Mb L: 20/20 MS: 3 ChangeByte-InsertRepeatedBytes-PersAutoDict- DE: "block"-
#2467   NEW    cov: 4933 ft: 5043 corp: 10/76b lim: 21 exec/s: 0 rss: 161Mb L: 21/21 MS: 1 InsertByte-
#4215   NEW    cov: 4941 ft: 5129 corp: 17/205b lim: 29 exec/s: 4215 rss: 350Mb L: 29/29 MS: 5 InsertByte-ChangeBit-CopyPart-InsertRepeatedBytes-CrossOver-
#4567   REDUCE cov: 4941 ft: 5129 corp: 17/204b lim: 29 exec/s: 4567 rss: 404Mb L: 24/29 MS: 2 ChangeByte-EraseBytes-
#6642   NEW    cov: 4941 ft: 5138 corp: 18/244b lim: 43 exec/s: 2214 rss: 450Mb L: 43/43 MS: 3 CopyPart-CMP-CrossOver- DE: "verack"-
# abort fuzzing using ctrl-c
$ ls process_message-seeded-from-thin-air/
349ac589fc66a09abc0b72bb4ae445a7a19e2cd8 4df479f1f421f2ea64b383cd4919a272604087a7
a640312c98dcc55d6744730c33e41c5168c55f09 b135de16e4709558c0797c15f86046d31c5d86d7
c000f7b41b05139de8b63f4cbf7d1ad4c6e2aa7f fc52cc00ec1eb1c08470e69f809ae4993fa70082
$ cat --show-nonprinting process_message-seeded-from-thin-air/349ac589fc66a09abc0b72bb4ae445a7a19e2cd8
block^@M-^?M-^?M-^?M-^?M-^?nM-^?M-^?
```

----------------------------------------

TITLE: Basic Read and Write Operations in LevelDB C++
DESCRIPTION: This snippet demonstrates how to perform basic database operations: Get to retrieve a value, Put to add or update a value, and Delete to remove a key-value pair from the database.

LANGUAGE: c++
CODE:
```
std::string value;
leveldb::Status s = db->Get(leveldb::ReadOptions(), key1, &value);
if (s.ok()) s = db->Put(leveldb::WriteOptions(), key2, value);
if (s.ok()) s = db->Delete(leveldb::WriteOptions(), key1);
```

----------------------------------------

TITLE: Using Thread Safety Annotations in C++ Class Declaration
DESCRIPTION: Example of proper thread safety annotations in class declarations for Bitcoin Core. The example shows how to use EXCLUSIVE_LOCKS_REQUIRED annotations in class member function declarations to enable Clang Thread Safety Analysis.

LANGUAGE: C++
CODE:
```
// txmempool.h
class CTxMemPool
{
public:
    ...
    mutable RecursiveMutex cs;
    ...
    void UpdateTransactionsFromBlock(...) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, cs);
    ...
}

// txmempool.cpp
void CTxMemPool::UpdateTransactionsFromBlock(...)
{
    AssertLockHeld(::cs_main);
    AssertLockHeld(cs);
    ...
}
```

----------------------------------------

TITLE: Checking Wallet Information After Restoration
DESCRIPTION: Command to verify that a wallet has been properly restored by displaying its information. This allows confirmation that the restoration process completed successfully.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli -rpcwallet="restored-wallet" getwalletinfo
```

----------------------------------------

TITLE: Example of Get Descriptors Command Output
DESCRIPTION: Example output of the getdescriptors command showing receive and internal descriptors for different address types.

LANGUAGE: sh
CODE:
```
$ <cmd> --fingerprint=00000000 --testnet getdescriptors
{
  "receive": [
    "pkh([00000000/44h/0h/0h]xpub6C.../0/*)#fn95jwmg",
    "sh(wpkh([00000000/49h/0h/0h]xpub6B..../0/*))#j4r9hntt",
    "wpkh([00000000/84h/0h/0h]xpub6C.../0/*)#qw72dxa9"
  ],
  "internal": [
    "pkh([00000000/44h/0h/0h]xpub6C.../1/*)#c8q40mts",
    "sh(wpkh([00000000/49h/0h/0h]xpub6B..../1/*))#85dn0v75",
    "wpkh([00000000/84h/0h/0h]xpub6C..../1/*)#36mtsnda"
  ]
}
```

----------------------------------------

TITLE: Advanced Manual Block Generation Pipeline for Signet
DESCRIPTION: Pipeline of commands demonstrating the manual process for generating a Signet block. The pipeline gets a block template, creates a PSBT, signs it, moves the signature to the coinbase, grinds proof of work, and submits the block.

LANGUAGE: bash
CODE:
```
$CLI -signet getblocktemplate '{"rules": ["signet","segwit"]}' |
  $MINER --cli="$CLI" genpsbt --address="$ADDR" |
  $CLI -signet -stdin walletprocesspsbt |
  jq -r .psbt |
  $MINER --cli="$CLI" solvepsbt --grind-cmd="$GRIND" |
  $CLI -signet -stdin submitblock
```

----------------------------------------

TITLE: Limiting Upload Bandwidth in Bitcoin Core
DESCRIPTION: Sets a daily upload limit in MiB to reduce outbound traffic by stopping serving of historic blocks older than one week when the limit is approached. This is not a hard limit but a threshold that helps minimize bandwidth usage.

LANGUAGE: bash
CODE:
```
-maxuploadtarget=<MiB per day>
```

----------------------------------------

TITLE: Handling Static Library Dependencies for Bitcoin Kernel
DESCRIPTION: Defines a function to recursively gather all static libraries that bitcoinkernel depends on, and adds installation instructions for them. This ensures all required static libraries are installed alongside bitcoinkernel.

LANGUAGE: CMake
CODE:
```
function(get_target_static_link_libs target libs_out)
  get_target_property(linked_libraries ${target} LINK_LIBRARIES)
  foreach(dep ${linked_libraries})
    if(TARGET ${dep})
      add_dependencies(libbitcoinkernel ${dep})
      get_target_property(dep_type ${dep} TYPE)
      if(dep_type STREQUAL "STATIC_LIBRARY")
        list(APPEND ${libs_out} ${dep})
        get_target_static_link_libs(${dep} ${libs_out})
      endif()
    endif()
  endforeach()
  set(${libs_out} ${${libs_out}} PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Documenting Classes in Doxygen Style
DESCRIPTION: Example of a Doxygen-compatible comment block for documenting classes, placed above the class definition.

LANGUAGE: c++
CODE:
```
/**
 * Alerts are for notifying old versions if they become too obsolete and
 * need to upgrade. The message is displayed in the status bar.
 * @see GetWarnings()
 */
class CAlert
```

----------------------------------------

TITLE: Configuring Performance Parameters for libsecp256k1
DESCRIPTION: Sets performance-related parameters including window size for elliptic curve multiplication and precomputed table sizes for signing operations. These parameters affect the speed-memory trade-off in cryptographic operations.

LANGUAGE: CMake
CODE:
```
set(SECP256K1_ECMULT_WINDOW_SIZE 15 CACHE STRING "Window size for ecmult precomputation for verification, specified as integer in range [2..24]. The default value is a reasonable setting for desktop machines (currently 15). [default=15]")
set_property(CACHE SECP256K1_ECMULT_WINDOW_SIZE PROPERTY STRINGS 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24)
include(CheckStringOptionValue)
check_string_option_value(SECP256K1_ECMULT_WINDOW_SIZE)
add_compile_definitions(ECMULT_WINDOW_SIZE=${SECP256K1_ECMULT_WINDOW_SIZE})

set(SECP256K1_ECMULT_GEN_KB 86 CACHE STRING "The size of the precomputed table for signing in multiples of 1024 bytes (on typical platforms). Larger values result in possibly better signing or key generation performance at the cost of a larger table. Valid choices are 2, 22, 86. The default value is a reasonable setting for desktop machines (currently 86). [default=86]")
set_property(CACHE SECP256K1_ECMULT_GEN_KB PROPERTY STRINGS 2 22 86)
check_string_option_value(SECP256K1_ECMULT_GEN_KB)
if(SECP256K1_ECMULT_GEN_KB EQUAL 2)
  add_compile_definitions(COMB_BLOCKS=2)
  add_compile_definitions(COMB_TEETH=5)
elseif(SECP256K1_ECMULT_GEN_KB EQUAL 22)
  add_compile_definitions(COMB_BLOCKS=11)
  add_compile_definitions(COMB_TEETH=6)
elseif(SECP256K1_ECMULT_GEN_KB EQUAL 86)
  add_compile_definitions(COMB_BLOCKS=43)
  add_compile_definitions(COMB_TEETH=6)
endif()
```

----------------------------------------

TITLE: Temporarily Unlocking an Encrypted Bitcoin Core Wallet
DESCRIPTION: Command to unlock an encrypted wallet for a specific period of time (120 seconds in this example). After the timeout, the wallet will automatically lock again for security.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli -rpcwallet="wallet-01" walletpassphrase "passphrase" 120
```

----------------------------------------

TITLE: Creating a watch-only wallet in Bitcoin Core
DESCRIPTION: Creates a blank watch-only wallet named 'watch_only_wallet' on the online machine. This wallet cannot contain private keys and will be used to track funds, create unsigned PSBTs, and broadcast transactions.

LANGUAGE: sh
CODE:
```
[online]$ ./build/bin/bitcoin-cli -signet -named createwallet \
              wallet_name="watch_only_wallet" \
              disable_private_keys=true \
              blank=true

{
  "name": "watch_only_wallet"
}
```

----------------------------------------

TITLE: Basic Tor Configuration in torrc
DESCRIPTION: Essential Tor control port configuration settings to be added to /etc/tor/torrc file to enable Bitcoin Core to connect to Tor's control socket API.

LANGUAGE: ini
CODE:
```
ControlPort 9051
CookieAuthentication 1
CookieAuthFileGroupReadable 1
DataDirectoryGroupReadable 1
```

----------------------------------------

TITLE: Running Bitcoin Core with Custom Onion Service
DESCRIPTION: Command to run Bitcoin Core with a manually configured onion service, allowing the node to be reachable via Tor while maintaining privacy.

LANGUAGE: bash
CODE:
```
./bitcoind -proxy=127.0.0.1:9050 -externalip=7zvj7a2imdgkdbg4f2dryd5rgtrn7upivr5eeij4cicjh65pooxeshid.onion -listen
```

----------------------------------------

TITLE: Configuring MSVC Runtime Options for Bitcoin Core
DESCRIPTION: Sets up Microsoft Visual C++ runtime library options based on whether a static or dynamic build is being performed. Adds Unicode support and specific MSVC compiler options.

LANGUAGE: CMake
CODE:
```
if(MSVC)
  if(VCPKG_TARGET_TRIPLET MATCHES "-static")
    set(msvc_library_linkage "")
  else()
    set(msvc_library_linkage "DLL")
  endif()
  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>${msvc_library_linkage}")
  unset(msvc_library_linkage)

  target_compile_definitions(core_interface INTERFACE
    _UNICODE;UNICODE
  )
  target_compile_options(core_interface INTERFACE
    /utf-8
    /Zc:preprocessor
    /Zc:__cplusplus
    /sdl
  )
  # Improve parallelism in MSBuild.
  # See: https://devblogs.microsoft.com/cppblog/improved-parallelism-in-msbuild/.
  list(APPEND CMAKE_VS_GLOBALS "UseMultiToolTask=true")
endif()
```

----------------------------------------

TITLE: Importing Qt Plugins for Static Linking in Bitcoin
DESCRIPTION: Function to import Qt plugins when building with static Qt libraries. It handles platform-specific plugin requirements for Linux, Windows, and macOS, while excluding unnecessary plugins to reduce binary size.

LANGUAGE: CMake
CODE:
```
get_target_property(qt_lib_type Qt6::Core TYPE)

function(import_plugins target)
  if(qt_lib_type STREQUAL "STATIC_LIBRARY")
    set(plugins Qt6::QMinimalIntegrationPlugin)
    if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
      list(APPEND plugins Qt6::QXcbIntegrationPlugin)
    elseif(WIN32)
      list(APPEND plugins Qt6::QWindowsIntegrationPlugin Qt6::QModernWindowsStylePlugin)
    elseif(APPLE)
      list(APPEND plugins Qt6::QCocoaIntegrationPlugin Qt6::QMacStylePlugin)
    endif()
    qt6_import_plugins(${target}
      INCLUDE ${plugins}
      EXCLUDE_BY_TYPE
        accessiblebridge
        platforms
        platforms_darwin
        xcbglintegrations
        platformthemes
        platforminputcontexts
        generic
        iconengines
        imageformats
        egldeviceintegrations
        styles
        networkaccess
        networkinformation
        tls
    )
  endif()
endfunction()
```

----------------------------------------

TITLE: Basic Public Key Descriptors in Bitcoin Core
DESCRIPTION: Examples of basic public key descriptors including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH formats. These descriptors specify how to construct output scripts using single public keys.

LANGUAGE: output-descriptor
CODE:
```
pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)
```

LANGUAGE: output-descriptor
CODE:
```
pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)
```

LANGUAGE: output-descriptor
CODE:
```
wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)
```

LANGUAGE: output-descriptor
CODE:
```
sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))
```

LANGUAGE: output-descriptor
CODE:
```
combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)
```

LANGUAGE: output-descriptor
CODE:
```
sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))
```

----------------------------------------

TITLE: Handling LevelDB Status for Error Checking in C++
DESCRIPTION: This snippet demonstrates how to check if a LevelDB operation was successful using the Status class, and how to print an error message when an operation fails.

LANGUAGE: c++
CODE:
```
leveldb::Status s = ...;
if (!s.ok()) cerr << s.ToString() << endl;
```

----------------------------------------

TITLE: Enabling Thread Sanitizer with CMake in Bitcoin Core
DESCRIPTION: Command to enable thread sanitizer when building Bitcoin Core with CMake. This configuration is used to detect potential thread-related issues during development and testing.

LANGUAGE: cmake
CODE:
```
cmake -B build -DSANITIZERS=thread
```

----------------------------------------

TITLE: Using Snapshots in LevelDB C++
DESCRIPTION: This snippet demonstrates how to create and use snapshots in LevelDB to get a consistent view of the database at a specific point in time, regardless of subsequent modifications.

LANGUAGE: c++
CODE:
```
leveldb::ReadOptions options;
options.snapshot = db->GetSnapshot();
... apply some updates to db ...
leveldb::Iterator* iter = db->NewIterator(options);
... read using iter to view the state when the snapshot was created ...
delete iter;
db->ReleaseSnapshot(options.snapshot);
```

----------------------------------------

TITLE: Defining the bitcoin_consensus Static Library
DESCRIPTION: Creates the bitcoin_consensus static library with core consensus-related components. This library implements the consensus rules for Bitcoin transactions and blocks, including crypto primitives and script interpretation.

LANGUAGE: CMake
CODE:
```
add_library(bitcoin_consensus STATIC EXCLUDE_FROM_ALL
  arith_uint256.cpp
  consensus/merkle.cpp
  consensus/tx_check.cpp
  hash.cpp
  primitives/block.cpp
  primitives/transaction.cpp
  pubkey.cpp
  script/interpreter.cpp
  script/script.cpp
  script/script_error.cpp
  uint256.cpp
)
target_link_libraries(bitcoin_consensus
  PRIVATE
    core_interface
    bitcoin_crypto
    secp256k1
)
```

----------------------------------------

TITLE: Using profile_with_perf context manager for performance profiling in Bitcoin tests
DESCRIPTION: Example showing how to use the profile_with_perf context manager to profile specific node activities during test execution. This allows for targeted performance analysis of particular operations.

LANGUAGE: python
CODE:
```
with node.profile_with_perf("send-big-msgs"):
    # Perform activity on the node you're interested in profiling, e.g.:
    for _ in range(10000):
        node.p2ps[0].send_without_ping(some_large_message)
```

----------------------------------------

TITLE: Creating a New Bitcoin Core Wallet Using CLI
DESCRIPTION: Command to create a new descriptor wallet in Bitcoin Core. The wallet will be created in the default wallets directory based on the operating system.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli createwallet "wallet-01"
```

----------------------------------------

TITLE: Running Bitcoin Core GUI and Headless Mode on Unix
DESCRIPTION: Commands to run Bitcoin Core after unpacking the files into a directory on Unix systems, offering both GUI and headless (command-line) options.

LANGUAGE: shell
CODE:
```
bin/bitcoin-qt
```

LANGUAGE: shell
CODE:
```
bin/bitcoind
```

----------------------------------------

TITLE: Error Message When Using a Locked Wallet
DESCRIPTION: Example error message displayed when attempting to send bitcoins from an encrypted wallet that hasn't been unlocked. Shows the need to use walletpassphrase before performing operations that require private key access.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli -rpcwallet="wallet-01" sendtoaddress "tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx" 0.01
error code: -13
error message:
Error: Please enter the wallet passphrase with walletpassphrase first.
```

----------------------------------------

TITLE: Creating and Configuring the Bitcoin Qt Executable
DESCRIPTION: Defines the bitcoin-qt executable target, adds platform-specific resources, links libraries, imports plugins, and sets installation properties. For Windows, it sets the WIN32_EXECUTABLE property for proper GUI behavior.

LANGUAGE: CMake
CODE:
```
add_executable(bitcoin-qt
  main.cpp
  ../init/bitcoin-qt.cpp
)

add_windows_resources(bitcoin-qt res/bitcoin-qt-res.rc)

target_link_libraries(bitcoin-qt
  core_interface
  bitcoinqt
  bitcoin_node
)

import_plugins(bitcoin-qt)
install_binary_component(bitcoin-qt HAS_MANPAGE)
if(WIN32)
  set_target_properties(bitcoin-qt PROPERTIES WIN32_EXECUTABLE TRUE)
endif()
```

----------------------------------------

TITLE: Creating an Encrypted Bitcoin Core Wallet in a Single Command
DESCRIPTION: Command to create a new wallet that is encrypted from the start by providing a passphrase during creation. Uses the named parameter format for clarity.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli -named createwallet wallet_name="wallet-01" passphrase="passphrase"
```

----------------------------------------

TITLE: Configuring Network-Specific Options in Bitcoin Configuration File
DESCRIPTION: Example demonstrating how to set different options for mainnet, testnet, and regtest networks using both section headers and prefixing in a Bitcoin configuration file. This allows maintaining different settings for each network in a single configuration file.

LANGUAGE: config
CODE:
```
main.uacomment=bitcoin
test.uacomment=bitcoin-testnet
regtest.uacomment=regtest
[main]
mempoolsize=300
[test]
mempoolsize=100
[regtest]
mempoolsize=20
```

----------------------------------------

TITLE: Atomic Updates with WriteBatch in LevelDB C++
DESCRIPTION: This code shows how to use WriteBatch to perform multiple operations atomically, ensuring that either all operations succeed or none do. This is useful for maintaining data consistency.

LANGUAGE: c++
CODE:
```
#include "leveldb/write_batch.h"
...
std::string value;
leveldb::Status s = db->Get(leveldb::ReadOptions(), key1, &value);
if (s.ok()) {
  leveldb::WriteBatch batch;
  batch.Delete(key1);
  batch.Put(key2, value);
  s = db->Write(leveldb::WriteOptions(), &batch);
}
```

----------------------------------------

TITLE: Defining the bitcoin_node Static Library
DESCRIPTION: Creates the bitcoin_node static library that implements P2P networking and RPC server functionality. This library contains the core node functionality used by both bitcoind and bitcoin-qt executables, including block validation, mempool management, and network protocols.

LANGUAGE: CMake
CODE:
```
# P2P and RPC server functionality used by `bitcoind` and `bitcoin-qt` executables.
add_library(bitcoin_node STATIC EXCLUDE_FROM_ALL
  addrdb.cpp
  addrman.cpp
  banman.cpp
  bip324.cpp
  blockencodings.cpp
  blockfilter.cpp
  consensus/tx_verify.cpp
  dbwrapper.cpp
  deploymentstatus.cpp
  flatfile.cpp
  headerssync.cpp
  httprpc.cpp
  httpserver.cpp
  i2p.cpp
  index/base.cpp
  index/blockfilterindex.cpp
  index/coinstatsindex.cpp
  index/txindex.cpp
  init.cpp
  kernel/chain.cpp
  kernel/checks.cpp
  kernel/coinstats.cpp
  kernel/context.cpp
  kernel/cs_main.cpp
  kernel/disconnected_transactions.cpp
  kernel/mempool_removal_reason.cpp
  mapport.cpp
  net.cpp
  net_processing.cpp
  netgroup.cpp
  node/abort.cpp
  node/blockmanager_args.cpp
  node/blockstorage.cpp
  node/caches.cpp
  node/chainstate.cpp
  node/chainstatemanager_args.cpp
  node/coin.cpp
  node/coins_view_args.cpp
  node/connection_types.cpp
  node/context.cpp
  node/database_args.cpp
  node/eviction.cpp
  node/interface_ui.cpp
  node/interfaces.cpp
  node/kernel_notifications.cpp
  node/mempool_args.cpp
  node/mempool_persist.cpp
  node/mempool_persist_args.cpp
  node/miner.cpp
  node/mini_miner.cpp
  node/minisketchwrapper.cpp
  node/peerman_args.cpp
  node/psbt.cpp
  node/timeoffsets.cpp
  node/transaction.cpp
  node/txdownloadman_impl.cpp
  node/txreconciliation.cpp
  node/utxo_snapshot.cpp
  node/warnings.cpp
  noui.cpp
  policy/ephemeral_policy.cpp
  policy/fees.cpp
  policy/fees_args.cpp
  policy/packages.cpp
  policy/rbf.cpp
  policy/settings.cpp
  policy/truc_policy.cpp
  rest.cpp
  rpc/blockchain.cpp
  rpc/external_signer.cpp
  rpc/fees.cpp
  rpc/mempool.cpp
  rpc/mining.cpp
  rpc/net.cpp
  rpc/node.cpp
  rpc/output_script.cpp
  rpc/rawtransaction.cpp
  rpc/server.cpp
  rpc/server_util.cpp
  rpc/signmessage.cpp
  rpc/txoutproof.cpp
  script/sigcache.cpp
  signet.cpp
  torcontrol.cpp
  txdb.cpp
  txgraph.cpp
  txmempool.cpp
  txorphanage.cpp
  txrequest.cpp
  validation.cpp
  validationinterface.cpp
  versionbits.cpp
  $<$<TARGET_EXISTS:bitcoin_wallet>:wallet/init.cpp>
  $<$<NOT:$<TARGET_EXISTS:bitcoin_wallet>>:dummywallet.cpp>
)
target_link_libraries(bitcoin_node
  PRIVATE
    core_interface
    bitcoin_common
    bitcoin_util
    $<TARGET_NAME_IF_EXISTS:bitcoin_zmq>
    leveldb
    minisketch
    univalue
    Boost::headers
    $<TARGET_NAME_IF_EXISTS:libevent::core>
    $<TARGET_NAME_IF_EXISTS:libevent::extra>
    $<TARGET_NAME_IF_EXISTS:libevent::pthreads>
    $<TARGET_NAME_IF_EXISTS:USDT::headers>
)
```

----------------------------------------

TITLE: Building Bitcoin with Multiple Threads
DESCRIPTION: Command to build Bitcoin using multiple threads to speed up compilation. Utilizes nproc to determine the number of available CPU cores and adds one for optimal performance.

LANGUAGE: bash
CODE:
```
cmake --build build -j "$(($(nproc)+1))"
```

----------------------------------------

TITLE: Using Clang Instead of GCC for Bitcoin Core Compilation
DESCRIPTION: CMake command to use Clang compiler instead of the default GCC when building Bitcoin Core.

LANGUAGE: cmake
CODE:
```
cmake -B build -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
```

----------------------------------------

TITLE: Configuring AVX2 Optimizations for Bitcoin Crypto
DESCRIPTION: Conditionally adds AVX2-optimized SHA256 implementation when the platform supports AVX2 instructions. Sets specific compiler flags and includes the optimized implementation source file for AVX2.

LANGUAGE: CMake
CODE:
```
if(HAVE_AVX2)
  target_compile_definitions(bitcoin_crypto PRIVATE ENABLE_AVX2)
  target_sources(bitcoin_crypto PRIVATE sha256_avx2.cpp)
  set_property(SOURCE sha256_avx2.cpp PROPERTY
    COMPILE_OPTIONS ${AVX2_CXXFLAGS}
  )
endif()
```

----------------------------------------

TITLE: Setting up Bitcoin Core for fuzzing with libFuzzer using CMake
DESCRIPTION: These commands clone the Bitcoin Core repository, set up a build environment configured for fuzzing with libFuzzer, and execute the process_message fuzzing harness. This is the quickstart method to begin fuzzing Bitcoin Core.

LANGUAGE: sh
CODE:
```
$ git clone https://github.com/bitcoin/bitcoin
$ cd bitcoin/
$ cmake --preset=libfuzzer
# macOS users: If you have problem with this step then make sure to read "macOS hints for
# libFuzzer" on https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md#macos-hints-for-libfuzzer
$ cmake --build build_fuzz
$ FUZZ=process_message build_fuzz/bin/fuzz
# abort fuzzing using ctrl-c
```

----------------------------------------

TITLE: Installing Required Base Dependencies for Bitcoin Core on OpenBSD
DESCRIPTION: Installs the minimal required dependencies (git, cmake, boost, and libevent) needed to build Bitcoin Core on OpenBSD using the package manager.

LANGUAGE: bash
CODE:
```
pkg_add git cmake boost libevent
```

----------------------------------------

TITLE: Parallel Signing Workflow for PSBT Multisig Transactions
DESCRIPTION: Alternative workflow for multiple signers to sign PSBTs in parallel rather than sequentially, using combinepsbt to merge the individually-signed PSBTs.

LANGUAGE: markdown
CODE:
```
In case there are more signers, it may be advantageous to let them all sign in
parallel, rather than passing the PSBT from one signer to the next one. In the
above example this would translate to Carol handing a copy of *P* to each signer
separately. They can then all invoke `walletprocesspsbt "P"`, and end up with
their individually-signed PSBT structures. They then all send those back to
Carol (or anyone) who can combine them using `combinepsbt`. The last two steps
(`finalizepsbt` and `sendrawtransaction`) remain unchanged.
```

----------------------------------------

TITLE: Using MALLOC_ARENA_MAX to Reduce Memory Usage with Bitcoin Core on Linux
DESCRIPTION: This bash script sets the MALLOC_ARENA_MAX environment variable to 1 before starting bitcoind. This limits glibc's malloc implementation to use only one arena, which can significantly reduce memory usage in some scenarios with minimal performance impact.

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash
export MALLOC_ARENA_MAX=1
bitcoind
```

----------------------------------------

TITLE: Configuring Qt Build Settings for Bitcoin GUI
DESCRIPTION: Sets up Qt-specific build options including automatic MOC, RCC, and UIC processing. Also handles translation files generation and configures resource files for the Bitcoin GUI.

LANGUAGE: CMake
CODE:
```
# For Qt-specific commands and variables, please consult:
#  - https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html
#  - https://doc.qt.io/qt-5/cmake-manual.html

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOMOC_MOC_OPTIONS "-p${CMAKE_CURRENT_SOURCE_DIR}")
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOUIC_SEARCH_PATHS forms)

# TODO: The file(GLOB ...) command should be replaced with an explicit
# file list. Such a change must be synced with the corresponding change
# to https://github.com/bitcoin-core/bitcoin-maintainer-tools/blob/main/update-translations.py
file(GLOB ts_files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} locale/*.ts)
set_source_files_properties(${ts_files} PROPERTIES OUTPUT_LOCATION ${CMAKE_CURRENT_BINARY_DIR}/locale)
qt6_add_translation(qm_files ${ts_files})

configure_file(bitcoin_locale.qrc bitcoin_locale.qrc USE_SOURCE_PERMISSIONS COPYONLY)
```

----------------------------------------

TITLE: Demonstrating Bitcoin.conf Configuration Options in 0.17.0
DESCRIPTION: Example showing the usage of the new -includeconf option which allows including additional configuration files from the main bitcoin.conf file. The example demonstrates how noincludeconf can be overridden by a subsequent includeconf directive.

LANGUAGE: plaintext
CODE:
```
noincludeconf=1
includeconf=relative.conf
```

----------------------------------------

TITLE: Mapping getinfo Fields to New RPC Commands
DESCRIPTION: Reference table showing where each field from the deprecated getinfo RPC command has been moved to in the new command structure. This aids users in migrating their code to use the new API.

LANGUAGE: Markdown
CODE:
```
|`getinfo` field   | Moved to                                  |
|------------------|-------------------------------------------|
`"version"`	   | `getnetworkinfo()["version"]`
`"protocolversion"`| `getnetworkinfo()["protocolversion"]`
`"walletversion"`  | `getwalletinfo()["walletversion"]`
`"balance"`	   | `getwalletinfo()["balance"]`
`"blocks"`	   | `getblockchaininfo()["blocks"]`
`"timeoffset"`	   | `getnetworkinfo()["timeoffset"]`
`"connections"`	   | `getnetworkinfo()["connections"]`
`"proxy"`	   | `getnetworkinfo()["networks"][0]["proxy"]`
`"difficulty"`	   | `getblockchaininfo()["difficulty"]`
`"testnet"`	   | `getblockchaininfo()["chain"] == "test"`
`"keypoololdest"`  | `getwalletinfo()["keypoololdest"]`
`"keypoolsize"`	   | `getwalletinfo()["keypoolsize"]`
`"unlocked_until"` | `getwalletinfo()["unlocked_until"]`
`"paytxfee"`	   | `getwalletinfo()["paytxfee"]`
`"relayfee"`	   | `getnetworkinfo()["relayfee"]`
`"errors"`	   | `getnetworkinfo()["warnings"]`
```

----------------------------------------

TITLE: Cloning Bitcoin Core Repository
DESCRIPTION: Commands to clone the Bitcoin Core repository from GitHub and navigate to the project directory. This is the initial step for building Bitcoin Core from source.

LANGUAGE: shell
CODE:
```
git clone https://github.com/bitcoin/bitcoin.git
cd bitcoin
```

----------------------------------------

TITLE: Creating an offline wallet with encryption in Bitcoin Core
DESCRIPTION: Creates a wallet named 'offline_wallet' on the offline machine with passphrase protection. This wallet will contain private keys and must remain disconnected from any networks.

LANGUAGE: sh
CODE:
```
[offline]$ ./build/bin/bitcoin-cli -signet -named createwallet \
                wallet_name="offline_wallet" \
                passphrase="** enter passphrase **"

{
  "name": "offline_wallet"
}
```

----------------------------------------

TITLE: Installing Required Dependencies for Bitcoin Core on FreeBSD
DESCRIPTION: Installs the base dependencies required for building Bitcoin Core on FreeBSD using the pkg package manager.

LANGUAGE: bash
CODE:
```
pkg install boost-libs cmake git libevent pkgconf
```

----------------------------------------

TITLE: Using Qualified Wallet Directory Setting in Bitcoin Configuration
DESCRIPTION: Example of the correct way to use walletdir setting in the Bitcoin configuration file. Instead of using unqualified 'walletdir=path', users must now use the qualified 'chain.walletdir=path' format or place the setting in the appropriate [chain] section.

LANGUAGE: shell
CODE:
```
chain.walletdir=path
```

----------------------------------------

TITLE: Configuring Block Cache in LevelDB with C++
DESCRIPTION: This snippet shows how to set up a block cache in LevelDB to improve read performance. It creates a 100MB LRU cache to store frequently accessed uncompressed block contents.

LANGUAGE: c++
CODE:
```
#include "leveldb/cache.h"

leveldb::Options options;
options.block_cache = leveldb::NewLRUCache(100 * 1048576);  // 100MB cache
leveldb::DB* db;
leveldb::DB::Open(options, name, &db);
... use the db ...
delete db
delete options.block_cache;
```

----------------------------------------

TITLE: Broadcasting Finalized PSBT Transaction in Bitcoin Signet
DESCRIPTION: This command broadcasts a funded, signed, and finalized PSBT transaction to the Bitcoin Signet network using the sendrawtransaction RPC method. It reads the transaction data from a file and returns the transaction ID after successful broadcasting.

LANGUAGE: sh
CODE:
```
[online]$ ./build/bin/bitcoin-cli -signet sendrawtransaction $(cat /path/to/final_psbt.txt)

c2430a0e46df472b04b0ca887bbcd5c4abf7b2ce2eb71de981444a80e2b96d52
```

----------------------------------------

TITLE: Configuring Bitcoin Core with Apache2 for SSL Support
DESCRIPTION: An Apache2 configuration example for setting up a secure SSL reverse proxy to access Bitcoin Core's RPC interface after native SSL support was dropped. This provides an alternative secure method to connect to the Bitcoin RPC server.

LANGUAGE: Apache
CODE:
```
Listen 443

NameVirtualHost *:443
<VirtualHost *:443>

SSLEngine On
SSLCertificateFile /etc/apache2/ssl/server.crt
SSLCertificateKeyFile /etc/apache2/ssl/server.key

<Location /bitcoinrpc>
    ProxyPass http://127.0.0.1:8332/
    ProxyPassReverse http://127.0.0.1:8332/
    # optional enable digest auth
    # AuthType Digest
    # ...

    # optional bypass bitcoind rpc basic auth
    # RequestHeader set Authorization "Basic <hash>"
    # get the <hash> from the shell with: base64 <<< bitcoinrpc:<password>
</Location>

# Or, balance the load:
# ProxyPass / balancer://balancer_cluster_name

</VirtualHost>
```

----------------------------------------

TITLE: Configuring Basic I2P Options in Bitcoin Core
DESCRIPTION: Core configuration options for enabling I2P support in Bitcoin Core. These options specify the I2P SAM proxy connection details and whether to accept inbound I2P connections.

LANGUAGE: config
CODE:
```
-i2psam=<ip:port>
     I2P SAM proxy to reach I2P peers and accept I2P connections (default:
     none)

-i2pacceptincoming
     Whether to accept inbound I2P connections (default: 1). Ignored if
     -i2psam is not set. Listening for inbound I2P connections is
     done through the SAM proxy, not by binding to a local address and
     port.
```

----------------------------------------

TITLE: Visualizing Chain.getBlockHash Call Flow Using Mermaid Diagram
DESCRIPTION: A sequence diagram showing the communication flow between bitcoin-wallet and bitcoin-node processes when retrieving a block hash using the Chain::getBlockHash method. The diagram illustrates how method calls are translated to Cap'n Proto RPC calls across process boundaries.

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    box "bitcoin-wallet process"
    participant WalletCode as Wallet code
    participant ChainClient as Generated Chain client class<br/>ProxyClient<messages::Chain>
    end
    box "bitcoin-node process"
    participant ChainServer as Generated Chain server class<br/>ProxyServer<messages::Chain>
    participant LocalChain as Chain object<br/>node::ChainImpl
    end

    WalletCode->>ChainClient: getBlockHash(height)
    ChainClient->>ChainServer: Send RPC getBlockHash request
    ChainServer->>LocalChain: getBlockHash(height)
    LocalChain->>ChainServer: Return block hash
    ChainServer->>ChainClient: Send response with block hash
    ChainClient->>WalletCode: Return block hash
```

----------------------------------------

TITLE: Installing Bitcoin Core with Stripped Debug Information
DESCRIPTION: Command to install Bitcoin Core with debug information stripped to reduce binary size. This is useful when debug information is not needed in the installed binaries.

LANGUAGE: shell
CODE:
```
cmake --install build --prefix /mnt/c/workspace/bitcoin --strip
```

----------------------------------------

TITLE: Installing Required Dependencies for Bitcoin Core on NetBSD
DESCRIPTION: This command installs the essential dependencies needed to build Bitcoin Core on NetBSD using the pkgin package manager.

LANGUAGE: bash
CODE:
```
pkgin install git cmake pkg-config boost-headers libevent
```

----------------------------------------

TITLE: Decoding and Analyzing a Bitcoin PSBT
DESCRIPTION: Demonstrates how to decode a PSBT to JSON format using the decodepsbt RPC and analyze its current status including missing signatures using the analyzepsbt RPC.

LANGUAGE: bash
CODE:
```
./build/bin/bitcoin-cli -signet decodepsbt $funded_psbt

./build/bin/bitcoin-cli -signet analyzepsbt $funded_psbt
```

----------------------------------------

TITLE: Using a Custom Comparator When Opening a LevelDB Database in C++
DESCRIPTION: This snippet shows how to apply a custom comparator when opening a LevelDB database by assigning the comparator to the Options.comparator field before calling DB::Open.

LANGUAGE: c++
CODE:
```
TwoPartComparator cmp;
leveldb::DB* db;
leveldb::Options options;
options.create_if_missing = true;
options.comparator = &cmp;
leveldb::Status status = leveldb::DB::Open(options, "/tmp/testdb", &db);
...
```

----------------------------------------

TITLE: Displaying Berkeley DB Wallet Structure in Markdown Table
DESCRIPTION: A markdown table showing the file structure of Berkeley DB database-based wallets in Bitcoin Core.

LANGUAGE: markdown
CODE:
```
Subdirectory | File(s)           | Description
-------------|-------------------|-------------
`database/`  | BDB logging files | Part of BDB environment; created at start and deleted on shutdown; a user *must keep it as safe* as personal wallet `wallet.dat`
`./`         | `db.log`          | BDB error file
`./`         | `wallet.dat`      | Personal wallet (a BDB database) with keys and transactions
`./`         | `.walletlock`     | BDB wallet lock file
```

----------------------------------------

TITLE: Signer API Get Descriptors Command
DESCRIPTION: Command to retrieve wallet descriptors from the external signer for a specific account.

LANGUAGE: sh
CODE:
```
$ <cmd> --fingerprint=<fingerprint> (--testnet) getdescriptors <account>
<xpub>
```

----------------------------------------

TITLE: Starting Bitcoin Core with External Signer
DESCRIPTION: Launch Bitcoin Core with the -signer parameter pointing to an external signing tool such as HWI.

LANGUAGE: sh
CODE:
```
$ bitcoind -signer=../HWI/hwi.py
```

----------------------------------------

TITLE: Configuring Wallet Component Fuzzing Tests in Bitcoin Core
DESCRIPTION: This CMake configuration specifies the wallet-related source files to be included in Bitcoin Core's fuzzing test suite. It adds various wallet components like coin control, coin selection, cryptography, fees handling, and others to the fuzz testing target, and links the tests with the bitcoin_wallet library.

LANGUAGE: CMake
CODE:
```
target_sources(fuzz
  PRIVATE
    coincontrol.cpp
    coinselection.cpp
    crypter.cpp
    fees.cpp
    notifications.cpp
    scriptpubkeyman.cpp
    spend.cpp
    wallet_bdb_parser.cpp
)
target_link_libraries(fuzz bitcoin_wallet)
```

----------------------------------------

TITLE: Enabling Blocks-Only Mode in Bitcoin Core
DESCRIPTION: Disables transaction relay to reduce P2P traffic, focusing only on block synchronization. This affects fee estimation, automatically disables wallet broadcasting, and slows block propagation by preventing compact block relay.

LANGUAGE: bash
CODE:
```
-blocksonly
```

----------------------------------------

TITLE: Creating the Multisig Wallet
DESCRIPTION: Creates a new watch-only wallet for the multisig setup, imports the previously defined descriptors, and checks if the wallet was created successfully using getwalletinfo.

LANGUAGE: bash
CODE:
```
./build/bin/bitcoin-cli -signet -named createwallet wallet_name="multisig_wallet_01" disable_private_keys=true blank=true

./build/bin/bitcoin-cli  -signet -rpcwallet="multisig_wallet_01" importdescriptors "$multisig_desc"

./build/bin/bitcoin-cli  -signet -rpcwallet="multisig_wallet_01" getwalletinfo
```

----------------------------------------

TITLE: Implementing blockchain consistency checks and handling reorgs
DESCRIPTION: Improvements to block chain data structure validation and transaction handling during block reorganizations. These changes ensure mempool consistency and proper block sequence management.

LANGUAGE: Bash
CODE:
```
a1f425b Add (optional) consistency check for the block chain data structures
```

LANGUAGE: Bash
CODE:
```
1c62e84 Keep mempool consistent during block-reorgs
```

LANGUAGE: Bash
CODE:
```
57d1f46 Fix CheckBlockIndex for reindex
```

LANGUAGE: Bash
CODE:
```
bac6fca Set nSequenceId when a block is fully linked
```

----------------------------------------

TITLE: Running Tests with RAM Disk on Linux
DESCRIPTION: Command to run the test suite using the created RAM disk for cache and temporary directories to improve performance.

LANGUAGE: bash
CODE:
```
build/test/functional/test_runner.py --cachedir=/mnt/tmp/cache --tmpdir=/mnt/tmp
```

----------------------------------------

TITLE: Displaying Chain-Specific Data Directory Paths in Markdown Table
DESCRIPTION: A markdown table showing how the data directory paths change based on different Bitcoin network chain options.

LANGUAGE: markdown
CODE:
```
Chain option                     | Data directory path
---------------------------------|------------------------------
`-chain=main` (default)          | *path_to_datadir*`/`
`-chain=test` or `-testnet`      | *path_to_datadir*`/testnet3/`
`-chain=testnet4` or `-testnet4` | *path_to_datadir*`/testnet4/`
`-chain=signet` or `-signet`     | *path_to_datadir*`/signet/`
`-chain=regtest` or `-regtest`   | *path_to_datadir*`/regtest/`
```

----------------------------------------

TITLE: Configuring LevelDB Build Options
DESCRIPTION: Defines user-configurable build options for LevelDB, including whether to build tests, benchmarks, and whether to install the library and headers.

LANGUAGE: CMake
CODE:
```
option(LEVELDB_BUILD_TESTS "Build LevelDB's unit tests" ON)
option(LEVELDB_BUILD_BENCHMARKS "Build LevelDB's benchmarks" ON)
option(LEVELDB_INSTALL "Install LevelDB's header and library" ON)
```

----------------------------------------

TITLE: Linking Dependencies to test_fuzz Library in CMake
DESCRIPTION: Links the test_fuzz library with required dependencies including core_interface, test_util, bitcoin_node, and Boost headers. This establishes the necessary connections for the fuzz testing framework to interact with Bitcoin Core components.

LANGUAGE: cmake
CODE:
```
target_link_libraries(test_fuzz
  PRIVATE
    core_interface
    test_util
    bitcoin_node
    Boost::headers
)
```

----------------------------------------

TITLE: First Implementation of update_de Function with Inlined div2n in Python
DESCRIPTION: Initial optimization of update_de function that multiplies a matrix with a vector modulo M. This version inlines the div2n function and removes the modulus operation at the end, allowing d and e to exist outside the range [0,M).

LANGUAGE: python
CODE:
```
def update_de(d, e, t, M, Mi):
    """Multiply matrix t/2^N with [d, e] mod M, given Mi=1/M mod 2^N."""
    u, v, q, r = t
    cd, ce = u*d + v*e, q*d + r*e
    # Cancel out bottom N bits of cd and ce.
    md = -((Mi * cd) % 2**N)
    me = -((Mi * ce) % 2**N)
    cd += md * M
    ce += me * M
    # And cleanly divide by 2**N.
    return cd >> N, ce >> N
```

----------------------------------------

TITLE: Binding Bitcoin Core to Tor Proxy Address
DESCRIPTION: Extended Bitcoin Core configuration that binds to the Tor proxy address to mitigate clearnet connection attempts to your node.

LANGUAGE: bash
CODE:
```
./bitcoind ... -bind=127.0.0.1:8334=onion
```

----------------------------------------

TITLE: Configuring Transaction Relay Settings in bitcoin.conf
DESCRIPTION: Configuration example to mitigate transaction flooding by increasing the minimum relay transaction fee and limiting the relay of free transactions. These settings help reduce mempool growth when the network is experiencing high volumes of low-fee transactions.

LANGUAGE: conf
CODE:
```
minrelaytxfee=0.00005 
limitfreerelay=5
```

----------------------------------------

TITLE: Running mempool_monitor.py with bitcoind process ID
DESCRIPTION: Command to execute the mempool_monitor.py script against a running bitcoind process. The script requires the process ID of the Bitcoin daemon as an argument.

LANGUAGE: bash
CODE:
```
python3 contrib/tracing/mempool_monitor.py $(pidof bitcoind)
```

----------------------------------------

TITLE: Enabling Test Parallelism with LCOV in Bitcoin Core
DESCRIPTION: Command for running coverage tests in parallel using the JOBS parameter to improve test execution speed.

LANGUAGE: shell
CODE:
```
cmake -DJOBS=$(nproc) -P build/Coverage.cmake
```

----------------------------------------

TITLE: Enabling Sanitizers for Bitcoin Core Build
DESCRIPTION: Example command for building Bitcoin Core with address and undefined behavior sanitizers enabled to detect memory and behavior issues.

LANGUAGE: bash
CODE:
```
# Enable both the address sanitizer and the undefined behavior sanitizer
cmake -B build -DSANITIZERS=address,undefined
```

----------------------------------------

TITLE: Signer API Display Address Command
DESCRIPTION: Command to display an address on the hardware device based on a descriptor.

LANGUAGE: sh
CODE:
```
<cmd> --fingerprint=<fingerprint> (--testnet) displayaddress --desc descriptor
```

----------------------------------------

TITLE: Linking Libraries to Bitcoin Core Test Suite
DESCRIPTION: Configures library dependencies for the Bitcoin Core test suite, including core interfaces, test utilities, CLI components, node functionality, consensus mechanisms, and external libraries like minisketch, secp256k1, Boost, and libevent.

LANGUAGE: CMake
CODE:
```
target_link_libraries(test_bitcoin
  core_interface
  test_util
  bitcoin_cli
  bitcoin_node
  bitcoin_consensus
  minisketch
  secp256k1
  Boost::headers
  libevent::extra
)
```

----------------------------------------

TITLE: C++ Include Guard Implementation
DESCRIPTION: Shows the proper way to implement include guards in C++ header files to prevent double inclusion, using the BITCOIN_FOO_BAR_H naming convention for the identifier.

LANGUAGE: c++
CODE:
```
#ifndef BITCOIN_FOO_BAR_H
#define BITCOIN_FOO_BAR_H
...
#endif // BITCOIN_FOO_BAR_H
```

----------------------------------------

TITLE: ElligatorSwift Algorithm for Encoding X-Coordinates
DESCRIPTION: The core ElligatorSwift encoding algorithm that converts an x-coordinate to a (u,t) pair on the curve. This algorithm uses rejection sampling to ensure uniformity of the output encoding.

LANGUAGE: mathematical notation
CODE:
```
**Define** *ElligatorSwift(x)* as:
* Loop:
  * Pick a uniformly random field element $u.$
  * Pick a uniformly random integer $c$ in $[0,8).$
  * Let $t = G_{c,u}(x).$
  * If $t \neq \bot$, return $(u, t)$; restart loop otherwise.
```

----------------------------------------

TITLE: Running Bitcoin Core Behind Tor Proxy
DESCRIPTION: Basic command to run Bitcoin Core behind a Tor proxy on the default port 9050, which anonymizes all outgoing connections.

LANGUAGE: bash
CODE:
```
./bitcoind -proxy=127.0.0.1:9050
```

----------------------------------------

TITLE: Setting Up and Running Honggfuzz for Bitcoin Core
DESCRIPTION: Quickstart guide for setting up and running the Honggfuzz fuzzer with Bitcoin Core. Includes cloning repositories, building the fuzzer with sanitizers enabled, and running the fuzzing process.

LANGUAGE: sh
CODE:
```
$ git clone https://github.com/bitcoin/bitcoin
$ cd bitcoin/
$ git clone https://github.com/google/honggfuzz
$ cd honggfuzz/
$ make
$ cd ..
$ cmake -B build_fuzz \
   -DCMAKE_C_COMPILER="$(pwd)/honggfuzz/hfuzz_cc/hfuzz-clang" \
   -DCMAKE_CXX_COMPILER="$(pwd)/honggfuzz/hfuzz_cc/hfuzz-clang++" \
   -DBUILD_FOR_FUZZING=ON \
   -DSANITIZERS=address,undefined
$ cmake --build build_fuzz
$ mkdir -p inputs/
$ FUZZ=process_message ./honggfuzz/honggfuzz -i inputs/ -- build_fuzz/bin/fuzz
```

----------------------------------------

TITLE: ZMQ Example using Python 3 and asyncio
DESCRIPTION: An example that demonstrates how to use ZeroMQ with Python 3 and the asyncio library to interface with Bitcoin Core. This allows asynchronous monitoring of Bitcoin network events using modern Python techniques.

LANGUAGE: python
CODE:
```
# No actual code snippet provided in the source text, only a reference to 'ZMQ example using python3 and asyncio'
```

----------------------------------------

TITLE: Logging UTXO Cache Flushes with BCC Python
DESCRIPTION: Command to run the log_utxocache_flush.py script that logs UTXO cache flushes using the utxocache:flush tracepoint. The script takes the process ID of the bitcoind process as an argument.

LANGUAGE: bash
CODE:
```
python3 contrib/tracing/log_utxocache_flush.py $(pidof bitcoind)
```

----------------------------------------

TITLE: Enabling CJDNS Connectivity in Bitcoin Core
DESCRIPTION: Bitcoin Core configuration flag to make CJDNS peers automatically reachable. This option tells Bitcoin Core that it's running in an environment where connections to fc00::/8 addresses are to the CJDNS network.

LANGUAGE: bash
CODE:
```
-cjdnsreachable
```

----------------------------------------

TITLE: Correct Usage of TRY_LOCK in C++
DESCRIPTION: Examples demonstrating the correct and incorrect ways to use TRY_LOCK in Bitcoin Core. The lock exists only in the current scope, so the statement and code that needs the lock must be surrounded with braces.

LANGUAGE: C++
CODE:
```
// OK:
{
    TRY_LOCK(cs_vNodes, lockNodes);
    ...
}

// Wrong:
TRY_LOCK(cs_vNodes, lockNodes);
{
    ...
}
```

----------------------------------------

TITLE: Building Bitcoin Core with Dynamic Linking without GUI
DESCRIPTION: A sequence of commands to configure, build, and test Bitcoin Core with dynamic linking and without GUI support using CMake presets. The build process uses the vs2022 preset with BUILD_GUI=OFF and creates a Release configuration.

LANGUAGE: powershell
CODE:
```
cmake -B build --preset vs2022 -DBUILD_GUI=OFF # It might take a while if the vcpkg binary cache is unpopulated or invalidated.
cmake --build build --config Release           # Use "-j N" for N parallel jobs.
ctest --test-dir build --build-config Release  # Use "-j N" for N parallel tests. Some tests are disabled if Python 3 is not available.
```

----------------------------------------

TITLE: Linking Bitcoin Benchmark Dependencies in CMake
DESCRIPTION: Links the bench_bitcoin executable with required libraries including the Bitcoin Core interfaces, test utilities, node functionality, and Boost headers.

LANGUAGE: cmake
CODE:
```
target_link_libraries(bench_bitcoin
  core_interface
  test_util
  bitcoin_node
  Boost::headers
)
```

----------------------------------------

TITLE: Setting Error If Database Exists in LevelDB C++
DESCRIPTION: This code shows how to configure LevelDB to raise an error if the database already exists by setting the error_if_exists option to true before opening the database.

LANGUAGE: c++
CODE:
```
options.error_if_exists = true;
```

----------------------------------------

TITLE: Querying UTXO Set Example using cURL in Bitcoin REST API
DESCRIPTION: Example of using cURL to query the UTXO set for a specific transaction output, with mempool checking enabled. The response includes information about the chain height, chain tip hash, and details about the UTXO such as value and scriptPubKey.

LANGUAGE: bash
CODE:
```
$ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff7627ff72e5e8b0f71210f92ea7a4000c5d75-0.json 2>/dev/null | json_pp
```

----------------------------------------

TITLE: Reconciling Differences Between Sketches in C
DESCRIPTION: Shows the complete reconciliation process: deserializing Alice's sketch, merging it with Bob's sketch, and decoding the differences. The result identifies elements that appear in exactly one of the two sets.

LANGUAGE: c
CODE:
```
  sketch_a = minisketch_create(12, 0, 4);     // Alice's sketch
  minisketch_deserialize(sketch_a, buffer_a); // Load Alice's sketch
  free(buffer_a);

  // Merge the elements from sketch_a into sketch_b. The result is a sketch_b
  // which contains all elements that occurred in Alice's or Bob's sets, but not
  // in both.
  minisketch_merge(sketch_b, sketch_a);

  uint64_t differences[4];
  ssize_t num_differences = minisketch_decode(sketch_b, 4, differences);
  minisketch_destroy(sketch_a);
  minisketch_destroy(sketch_b);
  if (num_differences < 0) {
    printf("More than 4 differences!\n");
  } else {
    ssize_t i;
    for (i = 0; i < num_differences; ++i) {
      printf("%u is in only one of the two sets\n", (unsigned)differences[i]);
    }
  }
}
```

----------------------------------------

TITLE: RAII Pattern Implementation in C++
DESCRIPTION: Demonstrates class member initialization using C++11 syntax, which implements the Resource Acquisition Is Initialization (RAII) pattern. This helps avoid memory leaks and ensures exception safety.

LANGUAGE: cpp
CODE:
```
class A
{
    uint32_t m_count{0};
}
```

----------------------------------------

TITLE: Build configuration for unit test coverage
DESCRIPTION: CMake build configuration options required for deterministic unit test coverage testing with clang. Enables coverage instrumentation.

LANGUAGE: bash
CODE:
```
-DCMAKE_C_COMPILER='clang' -DCMAKE_CXX_COMPILER='clang++' -DCMAKE_CXX_FLAGS='-fprofile-instr-generate -fcoverage-mapping'
```

----------------------------------------

TITLE: Using Primitive Types in Interface Methods in C++
DESCRIPTION: Examples demonstrating proper use of primitive types in interface methods. The good example accepts and returns primitive types, while the bad example returns a pointer to an internal data structure inaccessible to other processes.

LANGUAGE: c++
CODE:
```
// Good: accepts and returns primitive types
virtual bool findBlock(const uint256& hash, int& out_height, int64_t& out_time) = 0;

// Bad: returns pointer to internal node in a linked list inaccessible to
// other processes
virtual const CBlockIndex* findBlock(const uint256& hash) = 0;
```

----------------------------------------

TITLE: Configuring Bitcoin Core with Both Wallet Types and No GUI
DESCRIPTION: Runs CMake configuration for Bitcoin Core with support for both descriptor and legacy Berkeley DB wallets, without GUI support.

LANGUAGE: bash
CODE:
```
cmake -B build -DBerkeleyDB_INCLUDE_DIR:PATH="${BDB_PREFIX}/include" -DWITH_BDB=ON
```

----------------------------------------

TITLE: Displaying Legacy Files and Directories in Markdown Table
DESCRIPTION: A markdown table listing the legacy subdirectories and files that are no longer used by Bitcoin Core, along with their descriptions and repository notes.

LANGUAGE: markdown
CODE:
```
Path           | Description | Repository notes
---------------|-------------|----------------
`banlist.dat`  | Stores the addresses/subnets of banned nodes; superseded by `banlist.json` in 22.0 and completely ignored in 23.0 | [PR #20966](https://github.com/bitcoin/bitcoin/pull/20966), [PR #22570](https://github.com/bitcoin/bitcoin/pull/22570)
`blktree/`     | Blockchain index; replaced by `blocks/index/` in [0.8.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.8.0.md#improvements) | [PR #2231](https://github.com/bitcoin/bitcoin/pull/2231), [`8fdc94cc`](https://github.com/bitcoin/bitcoin/commit/8fdc94cc8f0341e96b1edb3a5b56811c0b20bd15)
`coins/`       | Unspent transaction output database; replaced by `chainstate/` in 0.8.0 | [PR #2231](https://github.com/bitcoin/bitcoin/pull/2231), [`8fdc94cc`](https://github.com/bitcoin/bitcoin/commit/8fdc94cc8f0341e96b1edb3a5b56811c0b20bd15)
`blkindex.dat` | Blockchain index BDB database; replaced by {`chainstate/`, `blocks/index/`, `blocks/revNNNNN.dat`<sup>[\[2\]](#note2)</sup>} in 0.8.0 | [PR #1677](https://github.com/bitcoin/bitcoin/pull/1677)
`blk000?.dat`  | Block data (custom format, 2 GiB per file); replaced by `blocks/blkNNNNN.dat`<sup>[\[2\]](#note2)</sup> in 0.8.0 | [PR #1677](https://github.com/bitcoin/bitcoin/pull/1677)
`addr.dat`     | Peer IP address BDB database; replaced by `peers.dat` in [0.7.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.7.0.md) | [PR #1198](https://github.com/bitcoin/bitcoin/pull/1198), [`928d3a01`](https://github.com/bitcoin/bitcoin/commit/928d3a011cc66c7f907c4d053f674ea77dc611cc)
`onion_private_key` | Cached Tor onion service private key for `-listenonion` option. Was used for Tor v2 services; replaced by `onion_v3_private_key` in [0.21.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.21.0.md) | [PR #19954](https://github.com/bitcoin/bitcoin/pull/19954)
```

----------------------------------------

TITLE: Defining Coverage Build Type in CMake
DESCRIPTION: Creates a custom "Coverage" build type with appropriate compiler and linker flags for code coverage analysis. This build type extends RelWithDebInfo configuration with coverage instrumentation.

LANGUAGE: CMake
CODE:
```
# Define custom "Coverage" build type.
set(CMAKE_C_FLAGS_COVERAGE "${CMAKE_C_FLAGS_RELWITHDEBINFO} -O0 -DCOVERAGE=1 --coverage" CACHE STRING
  "Flags used by the C compiler during \"Coverage\" builds."
  FORCE
)
set(CMAKE_EXE_LINKER_FLAGS_COVERAGE "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} --coverage" CACHE STRING
  "Flags used for linking binaries during \"Coverage\" builds."
  FORCE
)
set(CMAKE_SHARED_LINKER_FLAGS_COVERAGE "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} --coverage" CACHE STRING
  "Flags used by the shared libraries linker during \"Coverage\" builds."
  FORCE
)
mark_as_advanced(
  CMAKE_C_FLAGS_COVERAGE
  CMAKE_EXE_LINKER_FLAGS_COVERAGE
  CMAKE_SHARED_LINKER_FLAGS_COVERAGE
)
```

----------------------------------------

TITLE: Disabling HD Key Generation in Bitcoin Core
DESCRIPTION: Command line option to disable Hierarchical Deterministic (HD) key generation for newly created wallets. This only affects wallets created after setting this option.

LANGUAGE: Bash
CODE:
```
-usehd=0
```

----------------------------------------

TITLE: Opening a LevelDB Database in C++
DESCRIPTION: This code demonstrates how to open a LevelDB database, creating it if necessary. It uses the leveldb::DB::Open method with options to specify database creation behavior.

LANGUAGE: c++
CODE:
```
#include <cassert>
#include "leveldb/db.h"

leveldb::DB* db;
leveldb::Options options;
options.create_if_missing = true;
leveldb::Status status = leveldb::DB::Open(options, "/tmp/testdb", &db);
assert(status.ok());
...
```

----------------------------------------

TITLE: Avoiding Method Overloading in Interface Classes in C++
DESCRIPTION: Examples showing how to avoid method overloading in interface classes for consistency and compatibility with code generation tools. The good example uses unique method names while the bad example overloads methods by parameter type.

LANGUAGE: c++
CODE:
```
// Good: method names are unique
virtual bool disconnectByAddress(const CNetAddr& net_addr) = 0;
virtual bool disconnectById(NodeId id) = 0;

// Bad: methods are overloaded by type
virtual bool disconnect(const CNetAddr& net_addr) = 0;
virtual bool disconnect(NodeId id) = 0;
```

----------------------------------------

TITLE: Configuring Bitcoin RegTest vbparams to Maintain Legacy Segwit Rules
DESCRIPTION: Example of using the vbparams configuration option in bitcoin.conf for regtest to disable automatic segwit activation. Required for upgrading a regtest node without reindexing to avoid a CheckBlockIndex assertion failure.

LANGUAGE: text
CODE:
```
vbparams=segwit:0:999999999999
```

----------------------------------------

TITLE: Database Iteration in LevelDB C++
DESCRIPTION: This code demonstrates how to iterate through all key-value pairs in a LevelDB database using an Iterator. It shows how to create an iterator, move through entries, and clean up when finished.

LANGUAGE: c++
CODE:
```
leveldb::Iterator* it = db->NewIterator(leveldb::ReadOptions());
for (it->SeekToFirst(); it->Valid(); it->Next()) {
  cout << it->key().ToString() << ": "  << it->value().ToString() << endl;
}
assert(it->status().ok());  // Check for any errors found during the scan
delete it;
```

----------------------------------------

TITLE: Implementing Callback Handlers in Interface Methods in C++
DESCRIPTION: Examples showing proper callback implementation in interface methods. The good example takes a plain callback type and returns an interface pointer, while the bad example returns a boost connection specific to the local process.

LANGUAGE: c++
CODE:
```
// Good: takes plain callback type and returns interface pointer
using TipChangedFn = std::function<void(int block_height, int64_t block_time)>;
virtual std::unique_ptr<interfaces::Handler> handleTipChanged(TipChangedFn fn) = 0;

// Bad: returns boost connection specific to local process
using TipChangedFn = std::function<void(int block_height, int64_t block_time)>;
virtual boost::signals2::scoped_connection connectTipChanged(TipChangedFn fn) = 0;
```

----------------------------------------

TITLE: Running Bitcoin Linters Using Docker
DESCRIPTION: Command to build and run Bitcoin linters in a Docker container with the same versions as the CI environment. This ensures consistent linting across development environments.

LANGUAGE: sh
CODE:
```
DOCKER_BUILDKIT=1 docker build -t bitcoin-linter --file "./ci/lint_imagefile" ./ && docker run --rm -v $(pwd):/bitcoin -it bitcoin-linter
```

----------------------------------------

TITLE: Setting Database Cache Size in Bitcoin.conf
DESCRIPTION: Example of how to set the database cache size to 100 MiB in the bitcoin.conf configuration file. This setting affects performance during initial sync and when catching up after downtime.

LANGUAGE: Config
CODE:
```
dbcache=100
```

----------------------------------------

TITLE: Combining Separately Signed PSBTs in Bitcoin
DESCRIPTION: Combines multiple signed versions of the same PSBT into a single PSBT containing all signatures using the combinepsbt RPC.

LANGUAGE: bash
CODE:
```
combined_psbt=$(./build/bin/bitcoin-cli -signet combinepsbt "[$psbt_1, $psbt_2]")
```

----------------------------------------

TITLE: Computing Modular Inverse Using Division Steps in Python
DESCRIPTION: Implementation of a modular inverse algorithm that builds upon the GCD algorithm with division steps. It computes the inverse of x modulo M by tracking additional variables that represent linear combinations of the inputs, maintaining invariants throughout the computation.

LANGUAGE: python
CODE:
```
def div2(M, x):
    """Helper routine to compute x/2 mod M (where M is odd)."""
    assert M & 1
    if x & 1: # If x is odd, make it even by adding M.
        x += M
    # x must be even now, so a clean division by 2 is possible.
    return x // 2

def modinv(M, x):
    """Compute the inverse of x mod M (given that it exists, and M is odd)."""
    assert M & 1
    delta, f, g, d, e = 1, M, x, 0, 1
    while g != 0:
        # Note that while division by two for f and g is only ever done on even inputs, this is
        # not true for d and e, so we need the div2 helper function.
        if delta > 0 and g & 1:
            delta, f, g, d, e = 1 - delta, g, (g - f) // 2, e, div2(M, e - d)
        elif g & 1:
            delta, f, g, d, e = 1 + delta, f, (g + f) // 2, d, div2(M, e + d)
        else:
            delta, f, g, d, e = 1 + delta, f, (g    ) // 2, d, div2(M, e    )
        # Verify that the invariants d=f/x mod M, e=g/x mod M are maintained.
        assert f % M == (d * x) % M
        assert g % M == (e * x) % M
    assert f == 1 or f == -1  # |f| is the GCD, it must be 1
    # Because of invariant d = f/x (mod M), 1/x = d/f (mod M). As |f|=1, d/f = d*f.
    return (d * f) % M
```

----------------------------------------

TITLE: P2P Monitor Main Peer List Interface Output
DESCRIPTION: Sample output from the p2p_monitor.py script showing the main interface with a list of peers and their connection information including traffic statistics, connection types, and network addresses.

LANGUAGE: text
CODE:
```
 P2P Message Monitor
 Navigate with UP/DOWN or J/K and select a peer with ENTER or SPACE to see individual P2P messages

 PEER  OUTBOUND              INBOUND               TYPE                   ADDR
    0  46          398 byte  61      1407590 byte  block-relay-only       XX.XX.XXX.196:8333
   11  1156     253570 byte  3431    2394924 byte  outbound-full-relay    XXX.X.XX.179:8333
   13  3425    1809620 byte  1236     305458 byte  inbound                XXX.X.X.X:60380
   16  1046     241633 byte  1589    1199220 byte  outbound-full-relay    4faketorv2pbfu7x.onion:8333
   19  577      181679 byte  390      148951 byte  outbound-full-relay    kfake4vctorjv2o2.onion:8333
   20  11         1248 byte  13         1283 byte  block-relay-only       [2600:fake:64d9:b10c:4436:aaaa:fe:bb]:8333
   21  11         1248 byte  13         1299 byte  block-relay-only       XX.XXX.X.155:8333
   22  5           103 byte  1           102 byte  feeler                 XX.XX.XXX.173:8333
   23  11         1248 byte  12         1255 byte  block-relay-only       XX.XXX.XXX.220:8333
   24  3           103 byte  1           102 byte  feeler                 XXX.XXX.XXX.64:8333
…
```

----------------------------------------

TITLE: Configuring Cryptographic Modules in libsecp256k1
DESCRIPTION: Defines and processes options for various cryptographic modules. Manages dependencies between modules including ECDH, recovery, extrakeys, schnorrsig, musig, and ElligatorSwift, ensuring that dependent modules are enabled when required.

LANGUAGE: CMake
CODE:
```
## Modules

# We declare all options before processing them, to make sure we can express
# dependendencies while processing.
option(SECP256K1_ENABLE_MODULE_ECDH "Enable ECDH module." ON)
option(SECP256K1_ENABLE_MODULE_RECOVERY "Enable ECDSA pubkey recovery module." OFF)
option(SECP256K1_ENABLE_MODULE_EXTRAKEYS "Enable extrakeys module." ON)
option(SECP256K1_ENABLE_MODULE_SCHNORRSIG "Enable schnorrsig module." ON)
option(SECP256K1_ENABLE_MODULE_MUSIG "Enable musig module." ON)
option(SECP256K1_ENABLE_MODULE_ELLSWIFT "Enable ElligatorSwift module." ON)

# Processing must be done in a topological sorting of the dependency graph
# (dependent module first).
if(SECP256K1_ENABLE_MODULE_ELLSWIFT)
  add_compile_definitions(ENABLE_MODULE_ELLSWIFT=1)
endif()

if(SECP256K1_ENABLE_MODULE_MUSIG)
  if(DEFINED SECP256K1_ENABLE_MODULE_SCHNORRSIG AND NOT SECP256K1_ENABLE_MODULE_SCHNORRSIG)
    message(FATAL_ERROR "Module dependency error: You have disabled the schnorrsig module explicitly, but it is required by the musig module.")
  endif()
  set(SECP256K1_ENABLE_MODULE_SCHNORRSIG ON)
  add_compile_definitions(ENABLE_MODULE_MUSIG=1)
endif()

if(SECP256K1_ENABLE_MODULE_SCHNORRSIG)
  if(DEFINED SECP256K1_ENABLE_MODULE_EXTRAKEYS AND NOT SECP256K1_ENABLE_MODULE_EXTRAKEYS)
    message(FATAL_ERROR "Module dependency error: You have disabled the extrakeys module explicitly, but it is required by the schnorrsig module.")
  endif()
  set(SECP256K1_ENABLE_MODULE_EXTRAKEYS ON)
  add_compile_definitions(ENABLE_MODULE_SCHNORRSIG=1)
endif()

if(SECP256K1_ENABLE_MODULE_EXTRAKEYS)
  add_compile_definitions(ENABLE_MODULE_EXTRAKEYS=1)
endif()

if(SECP256K1_ENABLE_MODULE_RECOVERY)
  add_compile_definitions(ENABLE_MODULE_RECOVERY=1)
endif()

if(SECP256K1_ENABLE_MODULE_ECDH)
  add_compile_definitions(ENABLE_MODULE_ECDH=1)
endif()

option(SECP256K1_USE_EXTERNAL_DEFAULT_CALLBACKS "Enable external default callback functions." OFF)
if(SECP256K1_USE_EXTERNAL_DEFAULT_CALLBACKS)
  add_compile_definitions(USE_EXTERNAL_DEFAULT_CALLBACKS=1)
endif()
```

----------------------------------------

TITLE: Range Iteration in LevelDB C++
DESCRIPTION: This snippet shows how to iterate through keys in a specific range [start,limit) in a LevelDB database. It demonstrates using the Seek method to position the iterator at the start of the range.

LANGUAGE: c++
CODE:
```
for (it->Seek(start);
   it->Valid() && it->key().ToString() < limit;
   it->Next()) {
  ...
}
```

----------------------------------------

TITLE: Displaying Data Directory Location Paths in Markdown Table
DESCRIPTION: A markdown table showing the default data directory paths for Bitcoin Core across supported platforms (Linux, macOS, and Windows).

LANGUAGE: markdown
CODE:
```
Platform | Data directory path
---------|--------------------
Linux    | `$HOME/.bitcoin/`
macOS    | `$HOME/Library/Application Support/Bitcoin/`
Windows  | `%LOCALAPPDATA%\Bitcoin\` <sup>[\[1\]](#note1)</sup>
```

----------------------------------------

TITLE: Running Bitcoin CI Test Stage with Specific Configuration
DESCRIPTION: Command to run the test stage of the CI system with a specific configuration file in a clean environment. This preserves the necessary environment variables while isolating the CI process.

LANGUAGE: bash
CODE:
```
env -i HOME="$HOME" PATH="$PATH" USER="$USER" bash -c 'FILE_ENV="./ci/test/00_setup_env_arm.sh" ./ci/test_run_all.sh'
```

----------------------------------------

TITLE: Command-line Mining Policy Options in Bitcoin Core
DESCRIPTION: Two configuration options to control data carrier transaction policies for miners: -datacarrier to enable/disable relaying and mining of OP_RETURN transactions, and -datacarriersize to set the maximum acceptable size for data carrier outputs.

LANGUAGE: plaintext
CODE:
```
- `-datacarrier=0/1` : Relay and mine "data carrier" (OP_RETURN) transactions
if this is 1.
- `-datacarriersize=n` : Maximum size, in bytes, we consider acceptable for
"data carrier" outputs.
```

----------------------------------------

TITLE: Setting Upload Traffic Limit in Bitcoin Core
DESCRIPTION: Parameter to reduce outbound network traffic by limiting historic block serving. The recommended minimum is 144MB per day, and whitelisted peers are exempt from disconnection.

LANGUAGE: markdown
CODE:
```
-maxuploadtarget=0
```

----------------------------------------

TITLE: Memory Conservation Options for Bitcoin Core Compilation
DESCRIPTION: CMake flags to reduce memory usage during compilation, useful for systems with limited RAM.

LANGUAGE: cmake
CODE:
```
cmake -B build -DCMAKE_CXX_FLAGS="--param ggc-min-expand=1 --param ggc-min-heapsize=32768"
```

----------------------------------------

TITLE: Configuring Compiler Flags for GCC/Clang in CMake
DESCRIPTION: Sets up compiler warning flags and options for GCC, Clang, and other non-MSVC compilers. Includes various warning categories like pedantic, strict prototypes, shadow variables, and more.

LANGUAGE: CMake
CODE:
```
else()
  # Keep the following commands ordered lexicographically.
  try_append_c_flags(-pedantic)
  try_append_c_flags(-Wall) # GCC >= 2.95 and probably many other compilers.
  try_append_c_flags(-Wcast-align) # GCC >= 2.95.
  try_append_c_flags(-Wcast-align=strict) # GCC >= 8.0.
  try_append_c_flags(-Wconditional-uninitialized) # Clang >= 3.0 only.
  try_append_c_flags(-Wextra) # GCC >= 3.4, this is the newer name of -W, which we don't use because older GCCs will warn about unused functions.
  try_append_c_flags(-Wnested-externs)
  try_append_c_flags(-Wno-long-long) # GCC >= 3.0, -Wlong-long is implied by -pedantic.
  try_append_c_flags(-Wno-overlength-strings) # GCC >= 4.2, -Woverlength-strings is implied by -pedantic.
  try_append_c_flags(-Wno-unused-function) # GCC >= 3.0, -Wunused-function is implied by -Wall.
  try_append_c_flags(-Wreserved-identifier) # Clang >= 13.0 only.
  try_append_c_flags(-Wshadow)
  try_append_c_flags(-Wstrict-prototypes)
  try_append_c_flags(-Wundef)
endif()
```

----------------------------------------

TITLE: Fixing block database invalidation and reindex issues
DESCRIPTION: A collection of fixes to prevent block database corruption and ensure proper reindexing. These fixes help maintain blockchain data integrity during operations like invalidating blocks and reindexing.

LANGUAGE: Bash
CODE:
```
1d2cdd2 Fix InvalidateBlock to add chainActive.Tip to setBlockIndexCandidates
```

LANGUAGE: Bash
CODE:
```
c91c660 fix InvalidateBlock to repopulate setBlockIndexCandidates
```

LANGUAGE: Bash
CODE:
```
002c8a2 fix possible block db breakage during re-index
```

----------------------------------------

TITLE: Adding Python Debugger Breakpoint in Tests
DESCRIPTION: Python code snippet to add a debugger breakpoint in functional tests, allowing interactive debugging and inspection of variables.

LANGUAGE: python
CODE:
```
import pdb; pdb.set_trace()
```

----------------------------------------

TITLE: Configuring Bitcoin Core Build Options
DESCRIPTION: Defines build options for various Bitcoin Core executables including the daemon, GUI, CLI, test, tx, and util components.

LANGUAGE: cmake
CODE:
```
option(BUILD_DAEMON "Build bitcoind executable." ON)
option(BUILD_GUI "Build bitcoin-qt executable." OFF)
option(BUILD_CLI "Build bitcoin-cli executable." ON)

option(BUILD_TESTS "Build test_bitcoin executable." ON)
option(BUILD_TX "Build bitcoin-tx executable." ${BUILD_TESTS})
option(BUILD_UTIL "Build bitcoin-util executable." ${BUILD_TESTS})

option(BUILD_UTIL_CHAINSTATE "Build experimental bitcoin-chainstate executable." OFF)
option(BUILD_KERNEL_LIB "Build experimental bitcoinkernel library." ${BUILD_UTIL_CHAINSTATE})
```

----------------------------------------

TITLE: Configuring Benchmark, Fuzzing, and Man Page Options
DESCRIPTION: Sets options for benchmark utilities, fuzzing targets, and man page installation.

LANGUAGE: cmake
CODE:
```
option(BUILD_BENCH "Build bench_bitcoin executable." OFF)
option(BUILD_FUZZ_BINARY "Build fuzz binary." OFF)
option(BUILD_FOR_FUZZING "Build for fuzzing. Enabling this will disable all other targets and override BUILD_FUZZ_BINARY." OFF)

option(INSTALL_MAN "Install man pages." ON)
```

----------------------------------------

TITLE: Implementing Network Message Tracepoint in C++
DESCRIPTION: Example of adding a tracepoint to track outbound network messages in Bitcoin Core. The tracepoint captures node ID, address, connection type, message type, size, and data.

LANGUAGE: C++
CODE:
```
// src/net.cpp
TRACEPOINT_SEMAPHORE(net, outbound_message);
…
void CConnman::PushMessage(…) {
  …
  TRACEPOINT(net, outbound_message,
      pnode->GetId(),
      pnode->m_addr_name.c_str(),
      pnode->ConnectionTypeAsString().c_str(),
      sanitizedType.c_str(),
      msg.data.size(),
      msg.data.data()
  );
  …
}
```

----------------------------------------

TITLE: Implementing a Custom Comparator in LevelDB C++
DESCRIPTION: This code demonstrates how to create a custom comparator for LevelDB by subclassing the leveldb::Comparator class. The example implements a two-part comparison logic for sorting keys with specific structures.

LANGUAGE: c++
CODE:
```
class TwoPartComparator : public leveldb::Comparator {
 public:
  // Three-way comparison function:
  //   if a < b: negative result
  //   if a > b: positive result
  //   else: zero result
  int Compare(const leveldb::Slice& a, const leveldb::Slice& b) const {
    int a1, a2, b1, b2;
    ParseKey(a, &a1, &a2);
    ParseKey(b, &b1, &b2);
    if (a1 < b1) return -1;
    if (a1 > b1) return +1;
    if (a2 < b2) return -1;
    if (a2 > b2) return +1;
    return 0;
  }

  // Ignore the following methods for now:
  const char* Name() const { return "TwoPartComparator"; }
  void FindShortestSeparator(std::string*, const leveldb::Slice&) const {}
  void FindShortSuccessor(std::string*) const {}
};
```

----------------------------------------

TITLE: REST API Endpoint Examples
DESCRIPTION: Examples of HTTP REST endpoints available when running Bitcoin Core with the -rest flag. Shows URL patterns for accessing blocks, simplified blocks, and transactions in various formats.

LANGUAGE: markdown
CODE:
```
- Blocks: http://localhost:8332/rest/block/*HASH*.*EXT*
- Blocks without transactions: http://localhost:8332/rest/block/notxdetails/*HASH*.*EXT*
- Transactions (requires `-txindex`): http://localhost:8332/rest/tx/*HASH*.*EXT*
```

----------------------------------------

TITLE: Referencing P2P connections through TestNode's p2ps list in Python tests
DESCRIPTION: Example showing how to access a P2P connection through a node's p2ps list, which contains test framework p2p objects connected to the node.

LANGUAGE: python
CODE:
```
node.p2ps[0].sync_with_ping()
```

----------------------------------------

TITLE: Configuring LevelDB Test Framework
DESCRIPTION: Defines a function to create test executables for LevelDB. Each test target includes common test utilities and platform-specific configurations.

LANGUAGE: CMake
CODE:
```
if(LEVELDB_BUILD_TESTS)
  enable_testing()

  function(leveldb_test test_file)
    get_filename_component(test_target_name "${test_file}" NAME_WE)

    add_executable("${test_target_name}" "")
    target_sources("${test_target_name}"
      PRIVATE
        "${PROJECT_BINARY_DIR}/${LEVELDB_PORT_CONFIG_DIR}/port_config.h"
        "util/testharness.cc"
        "util/testharness.h"
        "util/testutil.cc"
        "util/testutil.h"

        "${test_file}"
    )
    target_link_libraries("${test_target_name}" leveldb)
    target_compile_definitions("${test_target_name}"
      PRIVATE
        ${LEVELDB_PLATFORM_NAME}=1
    )
    if (NOT HAVE_CXX17_HAS_INCLUDE)
      target_compile_definitions("${test_target_name}"
        PRIVATE
          LEVELDB_HAS_PORT_CONFIG_H=1
      )
    endif(NOT HAVE_CXX17_HAS_INCLUDE)

    add_test(NAME "${test_target_name}" COMMAND "${test_target_name}")
  endfunction(leveldb_test)
```

----------------------------------------

TITLE: Running Complete Regression Test Suite
DESCRIPTION: Command to run the entire regression test suite using the test runner.

LANGUAGE: bash
CODE:
```
build/test/functional/test_runner.py
```

----------------------------------------

TITLE: Disabling Cache During Bulk Reads in LevelDB with C++
DESCRIPTION: This snippet demonstrates how to disable caching when performing bulk reads to prevent displacing cached content. It uses the fill_cache option when creating an iterator.

LANGUAGE: c++
CODE:
```
leveldb::ReadOptions options;
options.fill_cache = false;
leveldb::Iterator* it = db->NewIterator(options);
for (it->SeekToFirst(); it->Valid(); it->Next()) {
  ...
}
```

----------------------------------------

TITLE: Running bpftrace P2P Traffic Logger in Bitcoin Core
DESCRIPTION: Command to execute the log_p2p_traffic.bt bpftrace script that logs information about inbound and outbound P2P network messages in Bitcoin Core. Requires root privileges to run.

LANGUAGE: bash
CODE:
```
$ bpftrace contrib/tracing/log_p2p_traffic.bt
```

----------------------------------------

TITLE: Creating Custom Environment for LevelDB with C++
DESCRIPTION: This snippet demonstrates how to create a custom environment implementation to control LevelDB's interaction with the operating system, such as introducing artificial delays in file I/O operations.

LANGUAGE: c++
CODE:
```
class SlowEnv : public leveldb::Env {
  ... implementation of the Env interface ...
};

SlowEnv env;
leveldb::Options options;
options.env = &env;
Status s = leveldb::DB::Open(options, ...);
```

----------------------------------------

TITLE: Displaying Bitcoin Core Data Directory Layout in Markdown Table
DESCRIPTION: A comprehensive markdown table listing the subdirectories and files within the Bitcoin Core data directory, along with descriptions of their purposes.

LANGUAGE: markdown
CODE:
```
Subdirectory       | File(s)               | Description
-------------------|-----------------------|------------
`blocks/`          |                       | Blocks directory; can be specified by `-blocksdir` option (except for `blocks/index/`)
`blocks/index/`    | LevelDB database      | Block index; `-blocksdir` option does not affect this path
`blocks/`          | `blkNNNNN.dat`<sup>[\[2\]](#note2)</sup> | Actual Bitcoin blocks (dumped in network format, 128 MiB per file)
`blocks/`          | `revNNNNN.dat`<sup>[\[2\]](#note2)</sup> | Block undo data (custom format)
`blocks/`          | `xor.dat`             | Rolling XOR pattern for block and undo data files
`chainstate/`      | LevelDB database      | Blockchain state (a compact representation of all currently unspent transaction outputs (UTXOs) and metadata about the transactions they are from)
`indexes/txindex/` | LevelDB database      | Transaction index; *optional*, used if `-txindex=1`
`indexes/blockfilter/basic/db/` | LevelDB database      | Blockfilter index LevelDB database for the basic filtertype; *optional*, used if `-blockfilterindex=basic`
`indexes/blockfilter/basic/`    | `fltrNNNNN.dat`<sup>[\[2\]](#note2)</sup> | Blockfilter index filters for the basic filtertype; *optional*, used if `-blockfilterindex=basic`
`indexes/coinstats/db/` | LevelDB database | Coinstats index; *optional*, used if `-coinstatsindex=1`
`wallets/`         |                       | [Contains wallets](#multi-wallet-environment); can be specified by `-walletdir` option; if `wallets/` subdirectory does not exist, wallets reside in the [data directory](#data-directory-location)
`./`               | `anchors.dat`         | Anchor IP address database, created on shutdown and deleted at startup. Anchors are last known outgoing block-relay-only peers that are tried to re-connect to on startup
`./`               | `banlist.json`        | Stores the addresses/subnets of banned nodes.
`./`               | `bitcoin.conf`        | User-defined [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`. File is not written to by the software and must be created manually. Path can be specified by `-conf` option
`./`               | `bitcoind.pid`        | Stores the process ID (PID) of `bitcoind` or `bitcoin-qt` while running; created at start and deleted on shutdown; can be specified by `-pid` option
`./`               | `debug.log`           | Contains debug information and general logging generated by `bitcoind` or `bitcoin-qt`; can be specified by `-debuglogfile` option
`./`               | `fee_estimates.dat`   | Stores statistics used to estimate minimum transaction fees required for confirmation
`./`               | `guisettings.ini.bak` | Backup of former [GUI settings](#gui-settings) after `-resetguisettings` option is used
`./`               | `ip_asn.map`          | IP addresses to Autonomous System Numbers (ASNs) mapping used for bucketing of the peers; path can be specified with the `-asmap` option
`./`               | `mempool.dat`         | Dump of the mempool's transactions
`./`               | `onion_v3_private_key` | Cached Tor onion service private key for `-listenonion` option
`./`               | `i2p_private_key`     | Private key that corresponds to our I2P address. When `-i2psam=` is specified the contents of this file is used to identify ourselves for making outgoing connections to I2P peers and possibly accepting incoming ones. Automatically generated if it does not exist.
`./`               | `peers.dat`           | Peer IP address database (custom format)
`./`               | `settings.json`       | Read-write settings set through GUI or RPC interfaces, augmenting manual settings from [bitcoin.conf](bitcoin-conf.md). File is created automatically if read-write settings storage is not disabled with `-nosettings` option. Path can be specified with `-settings` option
`./`               | `.cookie`             | Session RPC authentication cookie; if used, created at start and deleted on shutdown; can be specified by `-rpccookiefile` option
`./`               | `.lock`               | Data directory lock file
```

----------------------------------------

TITLE: Configuring LLDB Source File Mapping
DESCRIPTION: LLDB configuration to map source files for debugging when absolute paths have been stripped from debug information.

LANGUAGE: bash
CODE:
```
settings set target.source-map ./src /path/to/project/root/src
```

----------------------------------------

TITLE: Using P2PConnection to communicate with Bitcoin nodes in Python tests
DESCRIPTION: Example demonstrating how to create a P2P connection to a Bitcoin node, send a message, and wait for a response using the ping/pong mechanism.

LANGUAGE: python
CODE:
```
p2p_conn = node.add_p2p_connection(P2PInterface())
p2p_conn.send_and_ping(msg)
```

----------------------------------------

TITLE: Configuring Bitcoin Core with ZeroMQ Using CMake
DESCRIPTION: Command for enabling ZeroMQ support during the build configuration with CMake. This is required as ZeroMQ is not automatically compiled by default.

LANGUAGE: bash
CODE:
```
$ cmake -B build -DWITH_ZMQ=ON
```

----------------------------------------

TITLE: Building Bitcoin Core Daemon (bitcoind) with CMake
DESCRIPTION: Configures the build for the Bitcoin Core daemon (bitcoind) when BUILD_DAEMON is enabled. Links the daemon with core interface, node functionality, and wallet components, and sets up proper installation.

LANGUAGE: CMake
CODE:
```
if(BUILD_DAEMON)
  add_executable(bitcoind
    bitcoind.cpp
    init/bitcoind.cpp
  )
  add_windows_resources(bitcoind bitcoind-res.rc)
  target_link_libraries(bitcoind
    core_interface
    bitcoin_node
    $<TARGET_NAME_IF_EXISTS:bitcoin_wallet>
  )
  install_binary_component(bitcoind HAS_MANPAGE)
endif()
```

----------------------------------------

TITLE: Running Individual Functional Tests Directly
DESCRIPTION: Command to run a specific functional test by directly calling the test script. This example shows how to run the RBF (Replace-By-Fee) feature test.

LANGUAGE: bash
CODE:
```
build/test/functional/feature_rbf.py
```

----------------------------------------

TITLE: Compiling Benchmarking Tool in Bitcoin Core
DESCRIPTION: Commands to compile the bench_bitcoin benchmarking tool using CMake with the BUILD_BENCH option enabled.

LANGUAGE: bash
CODE:
```
cmake -B build -DBUILD_BENCH=ON
cmake --build build -t bench_bitcoin
```

----------------------------------------

TITLE: Raw P2P Message Logger Output with Size Limitations
DESCRIPTION: Sample output from the log_raw_p2p_msgs.py script showing logged P2P messages and demonstrating the eBPF limitations with messages larger than 32kb, including warning messages about incomplete data and lost samples.

LANGUAGE: text
CODE:
```
Logging raw P2P messages.
Messages larger than about 32kb will be cut off!
Some messages might be lost!
 outbound msg 'inv' from peer 4 (outbound-full-relay, XX.XXX.XX.4:8333) with 253 bytes: 0705000000be2245c8f844c9f763748e1a7…
…
Warning: incomplete message (only 32568 out of 53552 bytes)! inbound msg 'tx' from peer 32 (outbound-full-relay, XX.XXX.XXX.43:8333) with 53552 bytes: 020000000001fd3c01939c85ad6756ed9fc…
…
Possibly lost 2 samples
```

----------------------------------------

TITLE: Defining Bitcoin Wallet Static Library in CMake
DESCRIPTION: Creates a static library called bitcoin_wallet that contains all the wallet functionality used by both bitcoind and bitcoin-wallet executables. The library is excluded from all targets by default so it must be explicitly included when needed.

LANGUAGE: CMake
CODE:
```
add_library(bitcoin_wallet STATIC EXCLUDE_FROM_ALL
  coincontrol.cpp
  coinselection.cpp
  context.cpp
  crypter.cpp
  db.cpp
  dump.cpp
  external_signer_scriptpubkeyman.cpp
  feebumper.cpp
  fees.cpp
  interfaces.cpp
  load.cpp
  migrate.cpp
  receive.cpp
  rpc/addresses.cpp
  rpc/backup.cpp
  rpc/coins.cpp
  rpc/encrypt.cpp
  rpc/signmessage.cpp
  rpc/spend.cpp
  rpc/transactions.cpp
  rpc/util.cpp
  rpc/wallet.cpp
  scriptpubkeyman.cpp
  spend.cpp
  sqlite.cpp
  transaction.cpp
  wallet.cpp
  walletdb.cpp
  walletutil.cpp
)
```

----------------------------------------

TITLE: Metadata Format for Backport Commits in Bitcoin
DESCRIPTION: Specifies the required metadata format to include in the commit body when performing backports from master to release branches. This metadata includes the original PR number and the commit hash being backported.

LANGUAGE: bash
CODE:
```
Github-Pull: #<PR number>
Rebased-From: <commit hash of the original commit>
```

----------------------------------------

TITLE: Including Test Data for Bitcoin Core Tests
DESCRIPTION: Configures data sources for the Bitcoin test suite using custom CMake functions. Includes JSON data files for encoding/decoding tests, wallet vectors, blockfilters, key I/O, script tests, transaction validation, and raw binary data.

LANGUAGE: CMake
CODE:
```
include(TargetDataSources)
target_json_data_sources(test_bitcoin
  data/base58_encode_decode.json
  data/bip341_wallet_vectors.json
  data/blockfilters.json
  data/key_io_invalid.json
  data/key_io_valid.json
  data/script_tests.json
  data/sighash.json
  data/tx_invalid.json
  data/tx_valid.json
)
target_raw_data_sources(test_bitcoin NAMESPACE test::data
  data/asmap.raw
)
```

----------------------------------------

TITLE: Installing Berkeley DB for Legacy Wallet Support
DESCRIPTION: Command to install Berkeley DB 4.x which is required for legacy wallet support. This is an optional dependency.

LANGUAGE: bash
CODE:
```
brew install berkeley-db@4
```

----------------------------------------

TITLE: Configuring Constant-Time Tests for secp256k1 in CMake
DESCRIPTION: Sets up constant-time test executables when SECP256K1_BUILD_CTIME_TESTS is enabled, creating targets for testing timing invariance of cryptographic operations.

LANGUAGE: CMake
CODE:
```
if(SECP256K1_BUILD_CTIME_TESTS)
  add_executable(ctime_tests ctime_tests.c)
  target_link_libraries(ctime_tests secp256k1)
endif()
```

----------------------------------------

TITLE: Building Bitcoin Core and Running Tests
DESCRIPTION: These commands build Bitcoin Core and run the test suite. The commented options show how to enable parallel jobs for faster building and testing.

LANGUAGE: bash
CODE:
```
cmake --build build     # Use "-j N" for N parallel jobs.
ctest --test-dir build  # Use "-j N" for N parallel tests. Some tests are disabled if Python 3 is not available.
```

----------------------------------------

TITLE: Fuzzing with the bitcoin-core/qa-assets seed corpus
DESCRIPTION: This example shows how to use the pre-existing seed corpus from the bitcoin-core/qa-assets repository. It clones the repository and then runs the process_message fuzzer using the existing corpus files, which provides a more effective starting point for fuzzing.

LANGUAGE: sh
CODE:
```
$ git clone --depth=1 https://github.com/bitcoin-core/qa-assets
$ FUZZ=process_message build_fuzz/bin/fuzz qa-assets/fuzz_corpora/process_message/
INFO: Seed: 1346407872
INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55d8a9004ab8, 0x55d8a906c3a6),
INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55d8a906c3a8,0x55d8a96e5288),
INFO:      991 files found in qa-assets/fuzz_corpora/process_message/
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: seed corpus: files: 991 min: 1b max: 1858b total: 288291b rss: 150Mb
#993    INITED cov: 7063 ft: 8236 corp: 25/3821b exec/s: 0 rss: 181Mb
…
```

----------------------------------------

TITLE: Running log_p2p_connections.bt with bpftrace
DESCRIPTION: Command to execute the log_p2p_connections.bt script using bpftrace. This script monitors P2P connections in Bitcoin and uses the net:*_connection tracepoints to log connection events.

LANGUAGE: bash
CODE:
```
bpftrace contrib/tracing/log_p2p_connections.bt
```

----------------------------------------

TITLE: Running fuzz tests with bitcoind arguments
DESCRIPTION: This command demonstrates how to pass bitcoind-specific arguments to the fuzz executable. The address_deserialize_v2 fuzzer is run with a specified corpus directory and bitcoind arguments checkaddrman and printtoconsole. Double-dash separates fuzzer arguments from bitcoind arguments.

LANGUAGE: sh
CODE:
```
$ FUZZ=address_deserialize_v2 build_fuzz/bin/fuzz -runs=1 fuzz_corpora/address_deserialize_v2 --checkaddrman=5 --printtoconsole=1
```

----------------------------------------

TITLE: Configuring Bitcoin Core with Wallet Support
DESCRIPTION: CMake command to configure Bitcoin Core build with Berkeley DB and SQLite wallet support but without GUI support.

LANGUAGE: bash
CODE:
```
cmake -B build -DWITH_BDB=ON
```

----------------------------------------

TITLE: Example output of mempool_monitor.py showing statistics and event log
DESCRIPTION: Sample output from the mempool_monitor.py script displaying transaction statistics and a real-time event log. Shows counts and rates for added, removed, replaced, and rejected transactions over different time periods.

LANGUAGE: text
CODE:
```
 Mempool Monitor
 Press CTRL-C to stop.

 ┌─Event count───────────────────────┐  ┌─Event rate──────────────────────────┐
 │ Event       total   1 min  10 min │  │ Event       total    1 min   10 min │
 │ added      1425tx   201tx  1425tx │  │ added     4.7tx/s  3.4tx/s  4.7tx/s │
 │ removed      35tx     4tx    35tx │  │ removed   0.1tx/s  0.1tx/s  0.1tx/s │
 │ replaced     35tx     4tx    35tx │  │ replaced  0.1tx/s  0.1tx/s  0.1tx/s │
 │ rejected      0tx     0tx     0tx │  │ rejected  0.0tx/s  0.0tx/s  0.0tx/s │
 └───────────────────────────────────┘  └─────────────────────────────────────┘

 ┌─Event log────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
 │ 13:10:30Z added f9064ca5bfc87cdd191faa42bf697217cd920b2b94838c1f1192e4f06c4fd217 with feerate 8.92 sat/vB (981 sat, 110 vbytes)                                              │
 │ 13:10:30Z added 53ffa3afbe57b1bfe423e1755ca2b52c5b6cb4aa91b8b7ee9cb694953f47f234 with feerate 5.00 sat/vB (550 sat, 110 vbytes)                                              │
 │ 13:10:30Z added 4177df5e19465eb5e53c3f8b6830a293f57474921bc6c2ae89375e0986e1f0f9 with feerate 2.98 sat/vB (429 sat, 144 vbytes)                                              │
 │ 13:10:30Z added 931a10d83f0a268768da75dc4b9e199f2f055f12979ae5491cc304ee10f890ea with feerate 3.55 sat/vB (500 sat, 141 vbytes)                                              │
 │ 13:10:30Z added 4cf32b295723cc4ab73f2a2e51d4bb276c0042760a4c00a3eb9595b8ebb24721 with feerate 89.21 sat/vB (12668 sat, 142 vbytes)                                           │
 │ 13:10:31Z replaced d1eecf9d662121322f4f31f0c2267a752d14bb3956e6016ba96e87f47890e1db with feerate 27.12 sat/vB received 23.3 seconds ago (7213 sat, 266 vbytes) with c412db908│
 │ 9b7ed53f3e5e36d2819dd291278b59ccaabaeb17fd37c3d87fdcd57 with feerate 28.12 sat/vB (8351 sat, 297 vbytes)                                                                     │
 │ 13:10:31Z added c412db9089b7ed53f3e5e36d2819dd291278b59ccaabaeb17fd37c3d87fdcd57 with feerate 28.12 sat/vB (8351 sat, 297 vbytes)                                            │
 │ 13:10:31Z added b8388a5bdc421b11460bdf477d5a85a1a39c2784e7dd7bffabe688740424ea57 with feerate 25.21 sat/vB (3554 sat, 141 vbytes)                                            │
 │ 13:10:31Z added 4ddb88bc90a122cd9eae8a664e73bdf5bebe75f3ef901241b4a251245854a98e with feerate 24.15 sat/vB (5072 sat, 210 vbytes)                                            │
 │ 13:10:31Z added 19101e4161bca5271ad5d03e7747f2faec7793b274dc2f3c4cf516b7cef1aac3 with feerate 7.06 sat/vB (1080 sat, 153 vbytes)                                             │
 │ 13:10:31Z removed d1eecf9d662121322f4f31f0c2267a752d14bb3956e6016ba96e87f47890e1db with feerate 27.12 sat/vB (7213 sat, 266 vbytes): replaced                                │
 │ 13:10:31Z added 6c511c60d9b95b9eff81df6ecba5c86780f513fe62ce3ad6be2c5340d957025a with feerate 4.00 sat/vB (440 sat, 110 vbytes)                                              │
 │ 13:10:31Z added 44d66f7f004bd52c46be4dff3067cab700e51c7866a84282bd8aab560a5bfb79 with feerate 3.15 sat/vB (448 sat, 142 vbytes)                                              │
 │ 13:10:31Z added b17b7c9ec5acfbbf12f0eeef8e29826fad3105bb95eef7a47d2f1f22b4784643 with feerate 4.10 sat/vB (1348 sat, 329 vbytes)                                             │
 │ 13:10:31Z added b7a4ad93554e57454e8a8049bfc0bd803fa962bd3f0a08926aa72e7cb23e2276 with feerate 1.01 sat/vB (205 sat, 202 vbytes)                                              │
 │ 13:10:32Z added c78e87be86c828137a6e7e00a177c03b52202ce4c39029b99904c2a094b9da87 with feerate 11.00 sat/vB (1562 sat, 142 vbytes)                                            │
 │                                                                                                                                                                              │
 └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

----------------------------------------

TITLE: Installing Bitcoin Core Test Binary
DESCRIPTION: Configures the installation of the test_bitcoin executable as a binary component of the Bitcoin Core package. This ensures the test suite is properly installed in the target environment.

LANGUAGE: CMake
CODE:
```
install_binary_component(test_bitcoin)
```

----------------------------------------

TITLE: Installing QR Code Encoding Support
DESCRIPTION: The libqrencode library enables QR code generation in the Bitcoin Core GUI. This command installs it using pkgin.

LANGUAGE: bash
CODE:
```
pkgin install qrencode
```

----------------------------------------

TITLE: Platform-Specific Library Version Settings in CMake
DESCRIPTION: Configures platform-specific version properties for Linux, macOS (Apple), and Windows systems, ensuring proper library naming and versioning on each platform.

LANGUAGE: CMake
CODE:
```
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  set_target_properties(secp256k1 PROPERTIES
    VERSION ${${PROJECT_NAME}_soversion}.${${PROJECT_NAME}_LIB_VERSION_AGE}.${${PROJECT_NAME}_LIB_VERSION_REVISION}
  )
elseif(APPLE)
  if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.17)
    math(EXPR ${PROJECT_NAME}_compatibility_version "${${PROJECT_NAME}_LIB_VERSION_CURRENT} + 1")
    set_target_properties(secp256k1 PROPERTIES
      MACHO_COMPATIBILITY_VERSION ${${PROJECT_NAME}_compatibility_version}
      MACHO_CURRENT_VERSION ${${PROJECT_NAME}_compatibility_version}.${${PROJECT_NAME}_LIB_VERSION_REVISION}
    )
    unset(${PROJECT_NAME}_compatibility_version)
  elseif(BUILD_SHARED_LIBS)
    message(WARNING
      "The 'compatibility version' and 'current version' values of the DYLIB "
      "will diverge from the values set by the GNU Libtool. To ensure "
      "compatibility, it is recommended to upgrade CMake to at least version 3.17."
    )
  endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(${PROJECT_NAME}_windows "secp256k1")
  if(MSVC)
    set(${PROJECT_NAME}_windows "${PROJECT_NAME}")
  endif()
  set_target_properties(secp256k1 PROPERTIES
    ARCHIVE_OUTPUT_NAME "${${PROJECT_NAME}_windows}"
    RUNTIME_OUTPUT_NAME "${${PROJECT_NAME}_windows}-${${PROJECT_NAME}_soversion}"
  )
  unset(${PROJECT_NAME}_windows)
endif()
unset(${PROJECT_NAME}_soversion)
```

----------------------------------------

TITLE: Conditionally Adding Wallet Test Sources When Wallet Is Enabled
DESCRIPTION: Adds wallet-specific test source files to the test_bitcoin-qt target when the ENABLE_WALLET option is active, including address book tests and wallet tests.

LANGUAGE: cmake
CODE:
```
if(ENABLE_WALLET)
  target_sources(test_bitcoin-qt
    PRIVATE
      addressbooktests.cpp
      wallettests.cpp
      ../../wallet/test/wallet_test_fixture.cpp
  )
endif()
```

----------------------------------------

TITLE: Configuring Bitcoin Core Build without Wallet and GUI
DESCRIPTION: This command configures the Bitcoin Core build with CMake, explicitly disabling the wallet and GUI features.

LANGUAGE: bash
CODE:
```
cmake -B build -DENABLE_WALLET=OFF -DBUILD_GUI=OFF
```

----------------------------------------

TITLE: Copying Example Bitcoin Configuration File on Linux
DESCRIPTION: Shell command to copy a generated example bitcoin.conf file to the default Linux configuration location for editing.

LANGUAGE: shell
CODE:
```
# example copy command for linux user
cp share/examples/bitcoin.conf ~/.bitcoin
```

----------------------------------------

TITLE: Installing ZeroMQ for Bitcoin Core Notifications on OpenBSD
DESCRIPTION: Installs the ZeroMQ messaging library to enable notification functionality in Bitcoin Core.

LANGUAGE: bash
CODE:
```
pkg_add zeromq
```

----------------------------------------

TITLE: Creating Git Worktrees for Bitcoin Development
DESCRIPTION: Git commands for creating multiple working directories using git worktrees. Shows how to create a new branch in a separate directory or check out a specific commit without disrupting the current working directory.

LANGUAGE: bash
CODE:
```
git worktree add -b my-shiny-new-branch ../living-at-my-new-working-directory based-on-my-crufty-old-commit-ish
```

LANGUAGE: bash
CODE:
```
git worktree add --checkout ../where-my-checkout-commit-ish-will-live my-checkout-commit-ish
```

----------------------------------------

TITLE: Basic Bitcoin Core Build Commands in Unix
DESCRIPTION: Standard commands to build Bitcoin Core using CMake on Unix systems.

LANGUAGE: bash
CODE:
```
cmake -B build
cmake --build build    # use "-j N" for N parallel jobs
cmake --install build  # optional
```

----------------------------------------

TITLE: Documenting Members After Declaration
DESCRIPTION: Example of how to document a member or variable using Doxygen style after the declaration.

LANGUAGE: c++
CODE:
```
int var; //!< Description after the member
```

----------------------------------------

TITLE: Setting Windows-Specific Qt Platform for Tests
DESCRIPTION: Sets QT_QPA_PLATFORM environment variable to 'windows' for Bitcoin-Qt tests on Windows when using vcpkg, to avoid issues with the default 'minimal' platform plugin caused by Qt's OpenGL configuration.

LANGUAGE: cmake
CODE:
```
if(WIN32 AND VCPKG_TARGET_TRIPLET)
  # On Windows, vcpkg configures Qt with `-opengl dynamic`, which makes
  # the "minimal" platform plugin unusable due to internal Qt bugs.
  set_tests_properties(test_bitcoin-qt PROPERTIES
    ENVIRONMENT "QT_QPA_PLATFORM=windows"
  )
endif()
```

----------------------------------------

TITLE: Listing Available Bitcoin Daemon Configuration Templates by Platform
DESCRIPTION: Shows the filenames of sample configuration templates for running Bitcoin daemon (bitcoind) across different operating systems and init systems. These templates help package maintainers deploy Bitcoin nodes consistently.

LANGUAGE: markdown
CODE:
```
systemd: bitcoind.service
Upstart: bitcoind.conf
OpenRC:  bitcoind.openrc
         bitcoind.openrcconf
CentOS:  bitcoind.init
macOS:   org.bitcoin.bitcoind.plist
```

----------------------------------------

TITLE: Building Bitcoin Core with Multiprocess Support via Depends System
DESCRIPTION: Commands for building Bitcoin Core with multiprocess support using the depends system, which automatically handles Cap'n Proto and libmultiprocess dependencies. This approach uses NO_QT=1 to disable Qt and MULTIPROCESS=1 to enable multiprocess functionality.

LANGUAGE: bash
CODE:
```
cd <BITCOIN_SOURCE_DIRECTORY>
make -C depends NO_QT=1 MULTIPROCESS=1
# Set host platform to output of gcc -dumpmachine or clang -dumpmachine or check the depends/ directory for the generated subdirectory name
HOST_PLATFORM="x86_64-pc-linux-gnu"
cmake -B build --toolchain=depends/$HOST_PLATFORM/toolchain.cmake
cmake --build build
build/bin/bitcoin-node -regtest -printtoconsole -debug=ipc
BITCOIND=$(pwd)/build/bin/bitcoin-node build/test/functional/test_runner.py
```

----------------------------------------

TITLE: Building Bitcoin Core with Multiprocess Support via Depends System
DESCRIPTION: Commands for building Bitcoin Core with multiprocess support using the depends system, which automatically handles Cap'n Proto and libmultiprocess dependencies. This approach uses NO_QT=1 to disable Qt and MULTIPROCESS=1 to enable multiprocess functionality.

LANGUAGE: bash
CODE:
```
cd <BITCOIN_SOURCE_DIRECTORY>
make -C depends NO_QT=1 MULTIPROCESS=1
# Set host platform to output of gcc -dumpmachine or clang -dumpmachine or check the depends/ directory for the generated subdirectory name
HOST_PLATFORM="x86_64-pc-linux-gnu"
cmake -B build --toolchain=depends/$HOST_PLATFORM/toolchain.cmake
cmake --build build
build/bin/bitcoin-node -regtest -printtoconsole -debug=ipc
BITCOIND=$(pwd)/build/bin/bitcoin-node build/test/functional/test_runner.py
```

----------------------------------------

TITLE: Reverse Iteration in LevelDB C++
DESCRIPTION: This code shows how to iterate through a LevelDB database in reverse order, starting from the last key and moving backward through the entries.

LANGUAGE: c++
CODE:
```
for (it->SeekToLast(); it->Valid(); it->Prev()) {
  ...
}
```

----------------------------------------

TITLE: Configuring ccache for Bitcoin Development
DESCRIPTION: Configuration settings for ccache to optimize compile times across repositories. Sets a larger cache size limit and defines the base directory to enable sharing cached compiles across different repositories and paths.

LANGUAGE: conf
CODE:
```
max_size = 50.0G  # or whatever cache size you prefer; default is 5G; 0 means unlimited
base_dir = /home/yourname  # or wherever you keep your source files
```

----------------------------------------

TITLE: Building Specific Bitcoin Components
DESCRIPTION: Commands for selectively building only needed Bitcoin components to save compilation time during development. Shows examples for building just the daemon, CLI tool, GUI, or benchmarking tools.

LANGUAGE: bash
CODE:
```
cmake --build build --target bitcoind bitcoin-cli
cmake --build build --target bitcoin-qt
cmake --build build --target bench_bitcoin
```

----------------------------------------

TITLE: Example of Display Address Command Usage
DESCRIPTION: Example of using the display address command to show the first native SegWit receive address on Testnet.

LANGUAGE: sh
CODE:
```
<cmd> --fingerprint=00000000 --testnet displayaddress --desc "wpkh([00000000/84h/1h/0h]tpubDDUZ..../0/0)"
```

----------------------------------------

TITLE: Automatic Test Target Generation for Bitcoin Core
DESCRIPTION: Defines a function to automatically discover and register all test targets from the test_bitcoin sources. For each source file, it resolves the full path and calls add_boost_test to detect and register test suites within that file.

LANGUAGE: CMake
CODE:
```
function(add_all_test_targets)
  get_target_property(test_source_dir test_bitcoin SOURCE_DIR)
  get_target_property(test_sources test_bitcoin SOURCES)
  foreach(test_source ${test_sources})
    cmake_path(IS_RELATIVE test_source result)
    if(result)
      cmake_path(APPEND test_source_dir ${test_source} OUTPUT_VARIABLE test_source)
    endif()
    add_boost_test(${test_source})
  endforeach()
endfunction()

add_all_test_targets()
```

----------------------------------------

TITLE: Initial G_{c,u} Function Definition
DESCRIPTION: Definition of the G_{c,u} function that computes one possible inverse based on the chosen formula c. This handles the different cases for x₁, x₂, and x₃ formulas and includes checks to ensure proper precedence.

LANGUAGE: pseudocode
CODE:
```
Define G_{c,u}(x) as:
* If c ∈ {0, 1, 4, 5} (for x₁ and x₂ formulas):
  * If g(-u-x) is square, return ⊥ (as x₃ would be valid and take precedence).
  * If c ∈ {0, 4} (the x₁ formula) let v = x, otherwise let v = -u-x (the x₂ formula)
  * Let s = -g(u)/(u² + uv + v² + a) (using s = w² in what follows).
* Otherwise, when c ∈ {2, 3, 6, 7} (for x₃ formulas):
  * Let s = x-u.
  * Let r = √(-s(4g(u) + sh(u))).
  * Let v = (r/s - u)/2 if c ∈ {3, 7}; (-r/s - u)/2 otherwise.
* Let w = √s.
* Depending on c:
  * If c ∈ {0, 1, 2, 3}: return P_u^{'-1}(v, w).
  * If c ∈ {4, 5, 6, 7}: return P_u^{'-1}(v, -w).
```

----------------------------------------

TITLE: Creating UniValue Static Library in CMake
DESCRIPTION: Defines a static library target for UniValue with source files from the lib directory. It configures include directories and links against the core_interface library.

LANGUAGE: CMake
CODE:
```
add_library(univalue STATIC EXCLUDE_FROM_ALL
  lib/univalue.cpp
  lib/univalue_get.cpp
  lib/univalue_read.cpp
  lib/univalue_write.cpp
)
target_include_directories(univalue
  PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)
target_link_libraries(univalue PRIVATE core_interface)
```

----------------------------------------

TITLE: Building LevelDB for POSIX Systems with CMake
DESCRIPTION: Commands to build LevelDB on POSIX systems using CMake. Creates a build directory, generates build files with Release configuration, and builds the project.

LANGUAGE: bash
CODE:
```
mkdir -p build && cd build
cmake -DCMAKE_BUILD_TYPE=Release .. && cmake --build .
```

----------------------------------------

TITLE: Defining G_c,u(x) Function with Special Case Handling for Elliptic Curves
DESCRIPTION: Mathematical definition of the G_c,u(x) function that handles all special cases in the ElligatorSwift algorithm, including division by zero, square root checks, and curve-specific edge cases.

LANGUAGE: mathematical notation
CODE:
```
**Define** a version of $G_{c,u}(x)$ which deals with all these cases:
* If $a=0$ and $u=0$, return $\bot.$
* If $a \neq 0$ and $X_0(u)=0$, return $\bot.$
* If $c \in \{0, 1, 4, 5\}:$
  * If $g(u) = 0$ or $g(x) = 0$, return $\bot$ (even curves only).
  * If $g(-u-x)$ is square, return $\bot.$
  * Let $s = -g(u)/(u^2 + ux + x^2 + a)$ (cannot cause division by zero).
  * Let $v = x.$
* Otherwise, when $c \in \{2, 3, 6, 7\}:$
  * Let $s = x-u.$
  * Let $r = \sqrt{-s(4g(u) + sh(u))}$; return $\bot$ if not square.
  * If $c \in \{3, 7\}$ and $r=0$, return $\bot.$
  * If $s = 0$, return $\bot.$
  * Let $v = (r/s - u)/2.$
* Let $w = \sqrt{s}$; return $\bot$ if not square.
* If $a \neq 0$ and $w(u+2v) = 2X_0(u)$ and either $w \neq 2Y_0(u)$ or $h(u) = 0$, return $\bot.$
* Depending on $c:$
  * If $c \in \{0, 2\}$, let $t = P_u^{'-1}(v, w).$
  * If $c \in \{1, 3\}$, let $t = P_u^{'-1}(-u-v, w).$
  * If $c \in \{4, 6\}$, let $t = P_u^{'-1}(v, -w).$
  * If $c \in \{5, 7\}$, let $t = P_u^{'-1}(-u-v, -w).$
* If $a=0$ and $t=0$, return $\bot$ (even curves only).
* If $a \neq 0$ and $h(u)t^2 = -1$, return $\bot.$
* Return $t.$
```

----------------------------------------

TITLE: Safely Verifying Commits with verify-commits.py in Bitcoin
DESCRIPTION: Demonstrates the secure way to verify commits before checkout, using a trusted version of verify-commits.py against a remote branch to ensure signed code integrity.

LANGUAGE: sh
CODE:
```
git fetch origin && \
./contrib/verify-commits/verify-commits.py origin/master && \
git checkout origin/master
```

----------------------------------------

TITLE: Displaying USDT Tracepoints with readelf in Bitcoin Core
DESCRIPTION: Uses the readelf utility to display USDT (User Statically-Defined Tracing) tracepoints in Bitcoin Core. The command searches for notes with the description NT_STAPSDT to identify tracepoints, showing provider information, tracepoint names, memory locations, and argument details.

LANGUAGE: bash
CODE:
```
$ readelf -n ./build/bin/bitcoind | grep NT_STAPSDT -A 4 -B 2
Displaying notes found in: .note.stapsdt
  Owner                 Data size	Description
  stapsdt              0x0000005d	NT_STAPSDT (SystemTap probe descriptors)
    Provider: net
    Name: outbound_message
    Location: 0x0000000000107c05, Base: 0x0000000000579c90, Semaphore: 0x0000000000d29bd0
    Arguments: -8@%r12 8@%rbx 8@%rdi 8@192(%rsp) 8@%rax 8@%rdx
…
```

----------------------------------------

TITLE: Defining the LevelDB Library Target with Source Files
DESCRIPTION: Creates the main leveldb library target and associates source files with it. Includes all core source files needed to build LevelDB.

LANGUAGE: CMake
CODE:
```
# Must be included before CMAKE_INSTALL_INCLUDEDIR is used.
include(GNUInstallDirs)

add_library(leveldb "")
target_sources(leveldb
  PRIVATE
    "${PROJECT_BINARY_DIR}/${LEVELDB_PORT_CONFIG_DIR}/port_config.h"
    "db/builder.cc"
    "db/builder.h"
    "db/c.cc"
    "db/db_impl.cc"
    "db/db_impl.h"
    "db/db_iter.cc"
    "db/db_iter.h"
    "db/dbformat.cc"
    "db/dbformat.h"
    "db/dumpfile.cc"
    "db/filename.cc"
    "db/filename.h"
    "db/log_format.h"
    "db/log_reader.cc"
    "db/log_reader.h"
    "db/log_writer.cc"
    "db/log_writer.h"
    "db/memtable.cc"
    "db/memtable.h"
    "db/repair.cc"
    "db/skiplist.h"
    "db/snapshot.h"
    "db/table_cache.cc"
    "db/table_cache.h"
    "db/version_edit.cc"
    "db/version_edit.h"
    "db/version_set.cc"
    "db/version_set.h"
    "db/write_batch_internal.h"
    "db/write_batch.cc"
    "port/port_stdcxx.h"
    "port/port.h"
    "port/thread_annotations.h"
    "table/block_builder.cc"
    "table/block_builder.h"
    "table/block.cc"
    "table/block.h"
    "table/filter_block.cc"
    "table/filter_block.h"
    "table/format.cc"
    "table/format.h"
    "table/iterator_wrapper.h"
    "table/iterator.cc"
    "table/merger.cc"
    "table/merger.h"
    "table/table_builder.cc"
    "table/table.cc"
    "table/two_level_iterator.cc"
    "table/two_level_iterator.h"
    "util/arena.cc"
    "util/arena.h"
    "util/bloom.cc"
    "util/cache.cc"
    "util/coding.cc"
    "util/coding.h"
    "util/comparator.cc"
    "util/crc32c.cc"
    "util/crc32c.h"
    "util/env.cc"
    "util/filter_policy.cc"
    "util/hash.cc"
    "util/hash.h"
    "util/logging.cc"
    "util/logging.h"
    "util/mutexlock.h"
    "util/no_destructor.h"
    "util/options.cc"
    "util/random.h"
    "util/status.cc"

  # Only CMake 3.3+ supports PUBLIC sources in targets exported by "install".
  $<$<VERSION_GREATER:CMAKE_VERSION,3.2>:PUBLIC>
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/c.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/cache.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/comparator.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/db.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/dumpfile.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/env.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/export.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/filter_policy.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/iterator.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/options.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/slice.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/status.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/table_builder.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/table.h"
    "${LEVELDB_PUBLIC_INCLUDE_DIR}/write_batch.h"
)
```

----------------------------------------

TITLE: Examining core dump from test failures
DESCRIPTION: Demonstrates how to examine a core dump file using GDB after a test has failed with a segmentation fault.

LANGUAGE: bash
CODE:
```
gdb build/bin/test_bitcoin core

(gdb) bt  # produce a backtrace for where a segfault occurred
```

----------------------------------------

TITLE: Finding Tor Group on Debian Systems
DESCRIPTION: Command to list and identify the Tor group name on Debian-derived systems, which is needed for proper permission configuration.

LANGUAGE: bash
CODE:
```
getent group | cut -d: -f1 | grep -i tor
```

----------------------------------------

TITLE: Conditional IPC Testing for Bitcoin Core with Multiprocess Support
DESCRIPTION: Configures IPC (Inter-Process Communication) testing when multiprocess support is enabled. Links necessary libraries and adds IPC test sources to the main test executable.

LANGUAGE: CMake
CODE:
```
if(WITH_MULTIPROCESS)
  target_link_libraries(bitcoin_ipc_test
    PRIVATE
      core_interface
      univalue
  )

  target_sources(test_bitcoin
    PRIVATE
      ipc_tests.cpp
  )
  target_link_libraries(test_bitcoin bitcoin_ipc_test bitcoin_ipc)
endif()
```

----------------------------------------

TITLE: Configuring Build Targets and Compiler Options for libsecp256k1
DESCRIPTION: Sets up build options for tests, benchmarks, and examples. Configures compiler flags to maintain assertions in release builds and adjusts optimization levels, ensuring consistent behavior across different build types and compilers.

LANGUAGE: CMake
CODE:
```
option(SECP256K1_BUILD_BENCHMARK "Build benchmarks." ON)
option(SECP256K1_BUILD_TESTS "Build tests." ON)
option(SECP256K1_BUILD_EXHAUSTIVE_TESTS "Build exhaustive tests." ON)
option(SECP256K1_BUILD_CTIME_TESTS "Build constant-time tests." ${SECP256K1_VALGRIND})
option(SECP256K1_BUILD_EXAMPLES "Build examples." OFF)

# Redefine configuration flags.
# We leave assertions on, because they are only used in the examples, and we want them always on there.
if(MSVC)
  string(REGEX REPLACE "/DNDEBUG[ \t\r\n]*" "" CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}")
  string(REGEX REPLACE "/DNDEBUG[ \t\r\n]*" "" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
  string(REGEX REPLACE "/DNDEBUG[ \t\r\n]*" "" CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}")
else()
  string(REGEX REPLACE "-DNDEBUG[ \t\r\n]*" "" CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}")
  string(REGEX REPLACE "-DNDEBUG[ \t\r\n]*" "" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
  string(REGEX REPLACE "-DNDEBUG[ \t\r\n]*" "" CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}")
  # Prefer -O2 optimization level. (-O3 is CMake's default for Release for many compilers.)
  string(REGEX REPLACE "-O3( |$)" "-O2\\1" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
endif()
```

----------------------------------------

TITLE: Configuring Doxygen File from Template in CMake
DESCRIPTION: Sets up the path for the Doxyfile and configures it from a template file named 'Doxyfile.in', preserving source permissions.

LANGUAGE: CMake
CODE:
```
set(doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
configure_file(Doxyfile.in ${doxyfile} USE_SOURCE_PERMISSIONS)
```

----------------------------------------

TITLE: Basic git range-diff command for comparing rebased branches
DESCRIPTION: Shows how to use git range-diff to compare previously reviewed commits with new versions after modification. This example compares the diffs between the original branch head and a new branch head against master.

LANGUAGE: sh
CODE:
```
git range-diff master previously-reviewed-head new-head
```

----------------------------------------

TITLE: Adding In-Memory Environment Support to LevelDB
DESCRIPTION: Adds the in-memory environment implementation (MemEnv) to the LevelDB target, which provides a memory-based storage environment for testing and special use cases.

LANGUAGE: CMake
CODE:
```
# MemEnv is not part of the interface and could be pulled to a separate library.
target_sources(leveldb
  PRIVATE
    "helpers/memenv/memenv.cc"
    "helpers/memenv/memenv.h"
)
```

----------------------------------------

TITLE: Compiling Bitcoin Core
DESCRIPTION: Commands to compile Bitcoin Core and run its test suite after configuration is complete.

LANGUAGE: bash
CODE:
```
cmake --build build     # Use "-j N" here for N parallel jobs.
ctest --test-dir build  # Use "-j N" for N parallel tests. Some tests are disabled if Python 3 is not available.
```

----------------------------------------

TITLE: Listing Bitcoin Account-Based JSON-RPC Commands
DESCRIPTION: List of new account-based JSON-RPC commands introduced in this Bitcoin release. These commands allow for managing Bitcoin addresses associated with accounts, sending from specific accounts, moving funds between accounts, checking balances, and listing transactions.

LANGUAGE: markdown
CODE:
```
* getaccountaddress
* sendfrom
* move
* getbalance
* listtransactions
```

----------------------------------------

TITLE: Running a single test case within a test file
DESCRIPTION: Demonstrates how to run only the doubledash test within the getarg_tests test suite.

LANGUAGE: bash
CODE:
```
build/bin/test_bitcoin --run_test=getarg_tests/doubledash
```

----------------------------------------

TITLE: Installing Required Dependencies for CI on Ubuntu
DESCRIPTION: Command to install the necessary dependencies (bash, docker, python3, and qemu-user-static) on Ubuntu to run the CI system, including support for testing on different architectures.

LANGUAGE: bash
CODE:
```
sudo apt install bash docker.io python3 qemu-user-static
```

----------------------------------------

TITLE: Configuring Bitcoin Core Test Utility Library in CMake
DESCRIPTION: This CMake configuration defines a static library 'test_util' with various Bitcoin Core test utility source files. It conditionally includes wallet test utilities when ENABLE_WALLET is set, and specifies required dependencies including core_interface, Boost headers, and univalue.

LANGUAGE: CMake
CODE:
```
add_library(test_util STATIC EXCLUDE_FROM_ALL
  blockfilter.cpp
  coins.cpp
  coverage.cpp
  index.cpp
  json.cpp
  logging.cpp
  mining.cpp
  net.cpp
  random.cpp
  script.cpp
  setup_common.cpp
  str.cpp
  transaction_utils.cpp
  txmempool.cpp
  validation.cpp
  $<$<BOOL:${ENABLE_WALLET}>:${PROJECT_SOURCE_DIR}/src/wallet/test/util.cpp>
)
```

----------------------------------------

TITLE: Configuring Testing and Architecture Options for libsecp256k1
DESCRIPTION: Defines test configuration options including wide multiply settings, assembly optimizations, and testing environments. Manages architecture-specific optimizations for x86_64 and ARM32 platforms as well as Valgrind integration for testing.

LANGUAGE: CMake
CODE:
```
set(SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY "OFF" CACHE STRING "Test-only override of the (autodetected by the C code) \"widemul\" setting. Legal values are: \"OFF\", \"int128_struct\", \"int128\" or \"int64\". [default=OFF]")
set_property(CACHE SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY PROPERTY STRINGS "OFF" "int128_struct" "int128" "int64")
check_string_option_value(SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY)
if(SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY)
  string(TOUPPER "${SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY}" widemul_upper_value)
  add_compile_definitions(USE_FORCE_WIDEMUL_${widemul_upper_value}=1)
endif()
mark_as_advanced(FORCE SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY)

set(SECP256K1_ASM "AUTO" CACHE STRING "Assembly to use: \"AUTO\", \"OFF\", \"x86_64\" or \"arm32\" (experimental). [default=AUTO]")
set_property(CACHE SECP256K1_ASM PROPERTY STRINGS "AUTO" "OFF" "x86_64" "arm32")
check_string_option_value(SECP256K1_ASM)
if(SECP256K1_ASM STREQUAL "arm32")
  enable_language(ASM)
  include(CheckArm32Assembly)
  check_arm32_assembly()
  if(HAVE_ARM32_ASM)
    add_compile_definitions(USE_EXTERNAL_ASM=1)
  else()
    message(FATAL_ERROR "ARM32 assembly requested but not available.")
  endif()
elseif(SECP256K1_ASM)
  include(CheckX86_64Assembly)
  check_x86_64_assembly()
  if(HAVE_X86_64_ASM)
    set(SECP256K1_ASM "x86_64")
    add_compile_definitions(USE_ASM_X86_64=1)
  elseif(SECP256K1_ASM STREQUAL "AUTO")
    set(SECP256K1_ASM "OFF")
  else()
    message(FATAL_ERROR "x86_64 assembly requested but not available.")
  endif()
endif()

option(SECP256K1_EXPERIMENTAL "Allow experimental configuration options." OFF)
if(NOT SECP256K1_EXPERIMENTAL)
  if(SECP256K1_ASM STREQUAL "arm32")
    message(FATAL_ERROR "ARM32 assembly is experimental. Use -DSECP256K1_EXPERIMENTAL=ON to allow.")
  endif()
endif()

set(SECP256K1_VALGRIND "AUTO" CACHE STRING "Build with extra checks for running inside Valgrind. [default=AUTO]")
set_property(CACHE SECP256K1_VALGRIND PROPERTY STRINGS "AUTO" "OFF" "ON")
check_string_option_value(SECP256K1_VALGRIND)
if(SECP256K1_VALGRIND)
  find_package(Valgrind MODULE)
  if(Valgrind_FOUND)
    set(SECP256K1_VALGRIND ON)
    include_directories(${Valgrind_INCLUDE_DIR})
    add_compile_definitions(VALGRIND)
  elseif(SECP256K1_VALGRIND STREQUAL "AUTO")
    set(SECP256K1_VALGRIND OFF)
  else()
    message(FATAL_ERROR "Valgrind support requested but valgrind/memcheck.h header not available.")
  endif()
endif()
```

----------------------------------------

TITLE: Defining bitcoin_ipc static library in CMake
DESCRIPTION: Creates a static library named bitcoin_ipc with specified C++ source files. The library is excluded from the default build target with EXCLUDE_FROM_ALL flag.

LANGUAGE: cmake
CODE:
```
add_library(bitcoin_ipc STATIC EXCLUDE_FROM_ALL
  capnp/mining.cpp
  capnp/protocol.cpp
  interfaces.cpp
  process.cpp
)
```

----------------------------------------

TITLE: Synchronous Writes in LevelDB C++
DESCRIPTION: This snippet demonstrates how to perform synchronous writes in LevelDB by setting the sync flag to true. This ensures data is persisted to storage before the write operation returns.

LANGUAGE: c++
CODE:
```
leveldb::WriteOptions write_options;
write_options.sync = true;
db->Put(write_options, ...);
```

----------------------------------------

TITLE: Configuring LevelDB Installation
DESCRIPTION: Sets up installation rules for LevelDB library, headers, and CMake configuration files. This allows other projects to find and use LevelDB through CMake's package system.

LANGUAGE: CMake
CODE:
```
if(LEVELDB_INSTALL)
  install(TARGETS leveldb
    EXPORT leveldbTargets
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  )
  install(
    FILES
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/c.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/cache.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/comparator.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/db.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/dumpfile.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/env.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/export.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/filter_policy.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/iterator.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/options.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/slice.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/status.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/table_builder.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/table.h"
      "${LEVELDB_PUBLIC_INCLUDE_DIR}/write_batch.h"
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/leveldb
  )

  include(CMakePackageConfigHelpers)
  write_basic_package_version_file(
      "${PROJECT_BINARY_DIR}/leveldbConfigVersion.cmake"
      COMPATIBILITY SameMajorVersion
  )
  install(
    EXPORT leveldbTargets
    NAMESPACE leveldb::
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/leveldb"
  )
  install(
    FILES
      "cmake/leveldbConfig.cmake"
      "${PROJECT_BINARY_DIR}/leveldbConfigVersion.cmake"
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/leveldb"
  )
endif(LEVELDB_INSTALL)
```

----------------------------------------

TITLE: Monitoring Bitcoin Core Debug Log
DESCRIPTION: Command to monitor the Bitcoin Core debug log file during initial blockchain download or troubleshooting.

LANGUAGE: shell
CODE:
```
tail -f $HOME/Library/Application\ Support/Bitcoin/debug.log
```

----------------------------------------

TITLE: Configuring Free Transaction Relay Limit in Bitcoin Core
DESCRIPTION: Parameter to control relaying of transactions with insufficient fees. Default is 15 kB per minute, working with blockprioritysize to determine which low-fee transactions are propagated.

LANGUAGE: markdown
CODE:
```
-limitfreerelay=<r>
```

----------------------------------------

TITLE: Setting Compilation Definitions for LevelDB
DESCRIPTION: Configures compiler preprocessor definitions for the LevelDB target, including platform identification and library compilation settings.

LANGUAGE: CMake
CODE:
```
target_compile_definitions(leveldb
  PRIVATE
    # Used by include/export.h when building shared libraries.
    LEVELDB_COMPILE_LIBRARY
    # Used by port/port.h.
    ${LEVELDB_PLATFORM_NAME}=1
)
if (NOT HAVE_CXX17_HAS_INCLUDE)
  target_compile_definitions(leveldb
    PRIVATE
      LEVELDB_HAS_PORT_CONFIG_H=1
  )
endif(NOT HAVE_CXX17_HAS_INCLUDE)

if(BUILD_SHARED_LIBS)
  target_compile_definitions(leveldb
    PUBLIC
      # Used by include/export.h.
      LEVELDB_SHARED_LIBRARY
  )
endif(BUILD_SHARED_LIBS)
```

----------------------------------------

TITLE: Passing bitcoind arguments to test runner
DESCRIPTION: Shows how to pass bitcoind-specific arguments to the test runner by using double-dash separator.

LANGUAGE: bash
CODE:
```
build/bin/test_bitcoin --log_level=all --run_test=getarg_tests -- -printtoconsole=1
```

----------------------------------------

TITLE: Installing the Retry Tool via Homebrew on macOS
DESCRIPTION: Commands to install the retry tool using Homebrew package manager on macOS. Requires pulling a specific PR first.

LANGUAGE: sh
CODE:
```
brew pull 27283
brew install retry
```

----------------------------------------

TITLE: Configuring 64-bit Filesystem Offsets for 32-bit Linux
DESCRIPTION: Ensures 64-bit offsets are used for filesystem accesses when compiling for 32-bit Linux systems to support large files.

LANGUAGE: CMake
CODE:
```
# Use 64-bit off_t on 32-bit Linux.
if (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SIZEOF_VOID_P EQUAL 4)
  # Ensure 64-bit offsets are used for filesystem accesses for 32-bit compilation.
  target_compile_definitions(core_interface INTERFACE
    _FILE_OFFSET_BITS=64
  )
endif()
```

----------------------------------------

TITLE: Using Git Merge-Base for Dummy Rebases
DESCRIPTION: Git commands for performing rebases from the last common commit with master. Demonstrates how to autosquash fixup commits or run tests on each commit without rebasing over an updated master branch.

LANGUAGE: bash
CODE:
```
git rebase -i --autosquash "$(git merge-base master HEAD)"
```

LANGUAGE: bash
CODE:
```
git rebase -i --exec "cmake --build build && ctest --test-dir build" "$(git merge-base master HEAD)"
```

----------------------------------------

TITLE: Configuring Include Directories for LevelDB
DESCRIPTION: Sets up include directories for the LevelDB target, handling both build-time includes and installation paths correctly.

LANGUAGE: CMake
CODE:
```
target_include_directories(leveldb
  PUBLIC
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)
```

----------------------------------------

TITLE: Two-Element Set Relationship
DESCRIPTION: Mathematical formula showing how multiplying the power series for a two-element set by the corresponding factors results in a simplified expression. This demonstrates a key property used in the recovery algorithm.

LANGUAGE: math
CODE:
```
(1 - m_1x) (1 - m_2x) S({m_1,m_2}) = (1 - m_1x) (1 - m_2x) (S(m_1) + S(m_2)) = (1 - m_2x) + (1 - m_1x)
```

----------------------------------------

TITLE: LevelDB File Structure Overview in Plaintext
DESCRIPTION: High-level file structure of a LevelDB database file, showing the sequence of blocks from beginning to end of file.

LANGUAGE: plaintext
CODE:
```
<beginning_of_file>
[data block 1]
[data block 2]
...
[data block N]
[meta block 1]
...
[meta block K]
[metaindex block]
[index block]
[Footer]        (fixed size; starts at file_size - sizeof(Footer))
<end_of_file>
```

----------------------------------------

TITLE: Installing Bitcoin-Qt Test Binary
DESCRIPTION: Configures the installation of the test_bitcoin-qt executable as a binary component.

LANGUAGE: cmake
CODE:
```
install_binary_component(test_bitcoin-qt)
```

----------------------------------------

TITLE: Using Network Permission Flag for Large Transaction Batches
DESCRIPTION: Command line option to enable relay permission for a trusted peer (localhost) to bypass transaction announcement limits.

LANGUAGE: bash
CODE:
```
-whitelist=relay@127.0.0.1
```

----------------------------------------

TITLE: ZeroMQ Message Structure for Sequence Notifications
DESCRIPTION: Format specification for the 'sequence' topic notifications. Shows the structure for connected blocks, disconnected blocks, transactions removed from mempool, and transactions added to mempool.

LANGUAGE: plain
CODE:
```
<32-byte hash>C :                 Blockhash connected
<32-byte hash>D :                 Blockhash disconnected
<32-byte hash>R<8-byte LE uint> : Transactionhash removed from mempool for non-block inclusion reason
<32-byte hash>A<8-byte LE uint> : Transactionhash added mempool
```

----------------------------------------

TITLE: Killing Zombie Bitcoin Daemon Processes
DESCRIPTION: Commands to kill any remaining bitcoind processes after test failures. These commands will kill all bitcoind processes on the system.

LANGUAGE: bash
CODE:
```
killall bitcoind
```

LANGUAGE: bash
CODE:
```
pkill -9 bitcoind
```

----------------------------------------

TITLE: Including Additional CMake Modules and Setting Up Maintenance Targets
DESCRIPTION: Includes test configuration and maintenance modules, then sets up scripts for debug symbols splitting and various deployment targets for different platforms (Windows, macOS).

LANGUAGE: CMake
CODE:
```
include(cmake/tests.cmake)

include(Maintenance)
setup_split_debug_script()
add_maintenance_targets()
add_windows_deploy_target()
add_macos_deploy_target()
```

----------------------------------------

TITLE: Configuring LevelDB Dependencies and Executable
DESCRIPTION: Sets up dependencies for LevelDB and configures the leveldbutil executable. It finds and links the Threads package which is required by port_stdcxx.h.

LANGUAGE: CMake
CODE:
```
# Needed by port_stdcxx.h
find_package(Threads REQUIRED)
target_link_libraries(leveldb Threads::Threads)

add_executable(leveldbutil
  "db/leveldbutil.cc"
)
target_link_libraries(leveldbutil leveldb)
```

----------------------------------------

TITLE: Test Framework Fix for Bitcoin Core
DESCRIPTION: A fix for the calculation of external input weights in the Bitcoin Core test framework, referenced as pull request #24454.

LANGUAGE: markdown
CODE:
```
- #24454 tests: Fix calculation of external input weights
```

----------------------------------------

TITLE: Displaying USDT Tracepoints with tplist in Bitcoin Core
DESCRIPTION: Uses the tplist tool from BCC (BPF Compiler Collection) to display USDT probes in Bitcoin Core. The command shows tracepoint details including provider, name, semaphore address, number of locations, and arguments. Note that the binary name may vary between distributions (e.g., tplist-bpfcc on Ubuntu).

LANGUAGE: bash
CODE:
```
$ tplist -l ./build/bin/bitcoind -v
b'net':b'outbound_message' [sema 0xd29bd0]
  1 location(s)
  6 argument(s)
…
```

----------------------------------------

TITLE: Configuring Clang-Tidy Command with CMake Version Handling
DESCRIPTION: Sets up the clang-tidy command with appropriate options, handling the difference between older CMake versions and newer ones that support generator expressions.

LANGUAGE: CMake
CODE:
```
if(CMAKE_VERSION VERSION_LESS 3.27)
    set(CLANG_TIDY_COMMAND "${CLANG_TIDY_EXE}" "--load=${CMAKE_BINARY_DIR}/${CMAKE_SHARED_MODULE_PREFIX}bitcoin-tidy${CMAKE_SHARED_MODULE_SUFFIX}" "-checks=-*,bitcoin-*")
else()
    # CLANG_TIDY_COMMAND supports generator expressions as of 3.27
    set(CLANG_TIDY_COMMAND "${CLANG_TIDY_EXE}" "--load=$<TARGET_FILE:bitcoin-tidy>" "-checks=-*,bitcoin-*")
endif()
```

----------------------------------------

TITLE: Configuring Bitcoin ZMQ Static Library in CMake
DESCRIPTION: Defines a static library named bitcoin_zmq that includes ZMQ notification components for Bitcoin Core. The configuration specifies source files, enables the ZMQ feature through compilation definitions, and links required dependencies including core interface, univalue, and zeromq libraries.

LANGUAGE: cmake
CODE:
```
add_library(bitcoin_zmq STATIC EXCLUDE_FROM_ALL
  zmqabstractnotifier.cpp
  zmqnotificationinterface.cpp
  zmqpublishnotifier.cpp
  zmqrpc.cpp
  zmqutil.cpp
)
target_compile_definitions(bitcoin_zmq
  INTERFACE
    ENABLE_ZMQ=1
)
target_link_libraries(bitcoin_zmq
  PRIVATE
    core_interface
    univalue
    zeromq
)
```

----------------------------------------

TITLE: Output of P2P Traffic Logging for Bitcoin Core
DESCRIPTION: Sample output from the log_p2p_traffic.bt script showing inbound and outbound P2P messages with peer information, message types, and sizes.

LANGUAGE: text
CODE:
```
outbound 'ping' msg to peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes
inbound 'pong' msg from peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes
inbound 'inv' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes
outbound 'getdata' msg to peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes
inbound 'tx' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 222 bytes
outbound 'inv' msg to peer 9 (outbound-full-relay, faketorv3addressa2ufa6odvoi3s77j4uegey0xb10csyfyve2t33curbyd.onion:8333) with 37 bytes
outbound 'inv' msg to peer 7 (outbound-full-relay, XX.XX.XXX.242:8333) with 37 bytes
…
```

----------------------------------------

TITLE: Verifying Installation with Autotools
DESCRIPTION: Commands to verify a proper installation using the autotools build system. This creates a temporary directory, configures and installs the library there, and compiles a test program to verify functionality.

LANGUAGE: shell
CODE:
```
dir=$(mktemp -d)
./autogen.sh && ./configure --prefix=$dir && make clean && make install && ls -RlAh $dir
gcc -o ecdsa examples/ecdsa.c $(PKG_CONFIG_PATH=$dir/lib/pkgconfig pkg-config --cflags --libs libsecp256k1) -Wl,-rpath,"$dir/lib" && ./ecdsa
```

----------------------------------------

TITLE: Bitcoin Wallet API Changes: Modified Methods
DESCRIPTION: Table showing Bitcoin wallet methods that have been modified during the transition from 'account' to 'label' concept. This includes parameter name changes and backward compatibility information for each affected RPC method.

LANGUAGE: markdown
CODE:
```
| Changed Method         | Notes   |
| :--------------------- | :------ |
| `addmultisigaddress`   | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility if running with '-deprecatedrpc=accounts'. |
| `getnewaddress`        | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. if running with '-deprecatedrpc=accounts' |
| `listunspent`          | Returns new `label` fields. `account` field will be returned for backward compatibility if running with '-deprecatedrpc=accounts' |
| `sendmany`             | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the empty string, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |
| `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |
| `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |
```

----------------------------------------

TITLE: Basic Usage of Retry with a Working Command
DESCRIPTION: Example showing how retry executes a command that works correctly on the first attempt.

LANGUAGE: sh
CODE:
```
retry echo u work good
```

----------------------------------------

TITLE: Configuring MinGW Build Options for Bitcoin Core
DESCRIPTION: Sets up MinGW-specific compiler and linker options for cross-compiling to Windows. Addresses specific MinGW issues like vector instruction alignment and subsystem version targeting.

LANGUAGE: CMake
CODE:
```
if(MINGW)
  target_compile_definitions(core_interface INTERFACE
    WIN32
    _WINDOWS
    _MT
  )
  # Avoid the use of aligned vector instructions when building for Windows.
  # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412.
  try_append_cxx_flags("-Wa,-muse-unaligned-vector-move" TARGET core_interface SKIP_LINK)
  try_append_linker_flag("-static" TARGET core_interface)
  # We support Windows 10+, however it's not possible to set these values accordingly,
  # due to a bug in mingw-w64. See https://sourceforge.net/p/mingw-w64/bugs/968/.
  # As a best effort, target Windows 8.
  try_append_linker_flag("-Wl,--major-subsystem-version,6" TARGET core_interface)
  try_append_linker_flag("-Wl,--minor-subsystem-version,2" TARGET core_interface)
endif()
```

----------------------------------------

TITLE: Running the Bitcoin Core Benchmarking Tool
DESCRIPTION: Command to execute the compiled benchmarking tool and view the performance results.

LANGUAGE: bash
CODE:
```
build/bin/bench_bitcoin
```

----------------------------------------

TITLE: Setting Warning Levels in CMake
DESCRIPTION: Configures compiler warning levels appropriately for different compiler environments. Uses /W4 for MSVC and -Wall -Wextra for other compilers.

LANGUAGE: CMake
CODE:
```
# Add warnings
if (MSVC)
    target_compile_options(bitcoin-tidy PRIVATE /W4)
else()
    target_compile_options(bitcoin-tidy PRIVATE -Wall)
    target_compile_options(bitcoin-tidy PRIVATE -Wextra)
endif()
```

----------------------------------------

TITLE: Generating Test Coverage Reports with LCOV in Bitcoin Core
DESCRIPTION: Commands for building Bitcoin Core with LCOV coverage reporting. Includes configuration, build steps, and options for enabling branch coverage and test parallelism.

LANGUAGE: shell
CODE:
```
cmake -B build -DCMAKE_BUILD_TYPE=Coverage
cmake --build build
cmake -P build/Coverage.cmake

# A coverage report will now be accessible at `./build/test_bitcoin.coverage/index.html`,
# which covers unit tests, and `./build/total.coverage/index.html`, which covers
# unit and functional tests.
```

----------------------------------------

TITLE: Subscription URL for Bitcoin Core Security and Update Notifications
DESCRIPTION: Link to subscribe to the Bitcoin Core announcements mailing list for security and update notifications.

LANGUAGE: Markdown
CODE:
```
<https://bitcoincore.org/en/list/announcements/join/>
```

----------------------------------------

TITLE: Configuring Windows-Specific Build Settings for secp256k1 in CMake
DESCRIPTION: Sets Windows-specific build properties including export symbols for DLL builds and static library definitions, ensuring proper library usage on Windows platforms.

LANGUAGE: CMake
CODE:
```
if(WIN32)
  # Define our export symbol only for shared libs.
  set_target_properties(secp256k1 PROPERTIES DEFINE_SYMBOL SECP256K1_DLL_EXPORT)
  target_compile_definitions(secp256k1 INTERFACE $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:SECP256K1_STATIC>)
endif()
```

----------------------------------------

TITLE: Generating a UTXO Snapshot in Bitcoin Core
DESCRIPTION: Command to generate a UTXO set snapshot using the dumptxoutset RPC with the rollback parameter and an extended timeout. This creates a snapshot that can be verified against hardcoded hashes or loaded on other nodes.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli -rpcclienttimeout=0 dumptxoutset /path/to/output rollback
```

----------------------------------------

TITLE: Setting up Translation Target in CMake
DESCRIPTION: CMake code that sets up the 'translate' target which processes Bitcoin source files for translation. It checks for required tools (xgettext and sed), collects translatable sources, and runs a series of commands to extract strings and update translation files.

LANGUAGE: cmake
CODE:
```
find_program(XGETTEXT_EXECUTABLE xgettext)
find_program(SED_EXECUTABLE sed)
if(NOT XGETTEXT_EXECUTABLE)
  add_custom_target(translate
    COMMAND ${CMAKE_COMMAND} -E echo "Error: GNU gettext-tools not found"
  )
elseif(NOT SED_EXECUTABLE)
  add_custom_target(translate
    COMMAND ${CMAKE_COMMAND} -E echo "Error: GNU sed not found"
  )
else()
  set(translatable_sources_directories src src/qt src/util)
  if(ENABLE_WALLET)
    list(APPEND translatable_sources_directories src/wallet)
  endif()
  get_translatable_sources(translatable_sources ${translatable_sources_directories})
  get_translatable_sources(qt_translatable_sources src/qt)
  file(GLOB ui_files ${CMAKE_CURRENT_SOURCE_DIR}/forms/*.ui)
  add_custom_target(translate
    COMMAND ${CMAKE_COMMAND} -E env XGETTEXT=${XGETTEXT_EXECUTABLE} COPYRIGHT_HOLDERS=${COPYRIGHT_HOLDERS} ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/share/qt/extract_strings_qt.py ${translatable_sources}
    COMMAND Qt6::lupdate -no-obsolete -I ${PROJECT_SOURCE_DIR}/src -locations relative ${CMAKE_CURRENT_SOURCE_DIR}/bitcoinstrings.cpp ${ui_files} ${qt_translatable_sources} -ts ${CMAKE_CURRENT_SOURCE_DIR}/locale/bitcoin_en.ts
    COMMAND Qt6::lconvert -drop-translations -o ${CMAKE_CURRENT_SOURCE_DIR}/locale/bitcoin_en.xlf -i ${CMAKE_CURRENT_SOURCE_DIR}/locale/bitcoin_en.ts
    COMMAND ${SED_EXECUTABLE} -i.old -e "s|source-language=\"en\" target-language=\"en\"|source-language=\"en\"|" -e "/<target xml:space=\"preserve\"><\\/target>/d" ${CMAKE_CURRENT_SOURCE_DIR}/locale/bitcoin_en.xlf
    COMMAND ${CMAKE_COMMAND} -E rm ${CMAKE_CURRENT_SOURCE_DIR}/locale/bitcoin_en.xlf.old
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/src
    VERBATIM
  )
endif()
```

----------------------------------------

TITLE: Configuring Windows Build Options in CMake for Bitcoin Core
DESCRIPTION: Defines Windows-specific compiler options and macros. Handles both MSVC and MinGW compilation environments, setting appropriate Windows version targets and compiler flags.

LANGUAGE: CMake
CODE:
```
target_compile_definitions(core_interface INTERFACE
  _WIN32_WINNT=0x0A00
  _WIN32_IE=0x0A00
  WIN32_LEAN_AND_MEAN
  NOMINMAX
)
```

----------------------------------------

TITLE: Defining the Bitcoin-Tidy Module Target in CMake
DESCRIPTION: Creates the loadable module target for bitcoin-tidy with the necessary source files and include directories. This module will contain the custom clang-tidy checks for Bitcoin Core.

LANGUAGE: CMake
CODE:
```
add_library(bitcoin-tidy MODULE bitcoin-tidy.cpp nontrivial-threadlocal.cpp)
target_include_directories(bitcoin-tidy SYSTEM PRIVATE ${LLVM_INCLUDE_DIRS})
```

----------------------------------------

TITLE: Mining the First Block in a Custom Signet Chain
DESCRIPTION: Command sequence to mine the initial block in a custom Signet blockchain. This creates a block with a backdated timestamp designed to allow quick mining of the first 100 blocks needed for transactions.

LANGUAGE: bash
CODE:
```
CLI="./build/bin/bitcoin-cli -conf=mysignet.conf"
ADDR=$($CLI -signet getnewaddress)
NBITS=1e00f403
$MINER --cli="$CLI" generate --grind-cmd="$GRIND" --address="$ADDR" --nbits=$NBITS
```

----------------------------------------

TITLE: Setting Symbol Visibility and Memory Sanitizer in CMake
DESCRIPTION: Configures symbol visibility settings and adds support for Memory Sanitizer when building constant-time tests. Detects if MSan is enabled and adds appropriate flags to avoid false positives.

LANGUAGE: CMake
CODE:
```
set(CMAKE_C_VISIBILITY_PRESET hidden)

set(print_msan_notice)
if(SECP256K1_BUILD_CTIME_TESTS)
  include(CheckMemorySanitizer)
  check_memory_sanitizer(msan_enabled)
  if(msan_enabled)
    try_append_c_flags(-fno-sanitize-memory-param-retval)
    set(print_msan_notice YES)
  endif()
  unset(msan_enabled)
endif()
```

----------------------------------------

TITLE: Disabling Transaction Replacement in Bitcoin Core
DESCRIPTION: Command line option to disable replacement of transactions in the memory pool. With this setting, replaceable transactions are still accepted but replacement attempts are rejected.

LANGUAGE: markdown
CODE:
```
-mempoolreplacement=0
```

----------------------------------------

TITLE: Configuring Bitcoin Fuzzing Binary Build Options in CMake
DESCRIPTION: Sets up fuzzing binary build configuration by checking if the compiler supports building fuzzer binaries without a main function. Creates a fuzzer_interface target with appropriate link options and libraries.

LANGUAGE: cmake
CODE:
```
# FUZZ_BINARY_LINKS_WITHOUT_MAIN_FUNCTION.
if(BUILD_FUZZ_BINARY)
  include(CheckSourceCompilesWithFlags)
  check_cxx_source_compiles_with_flags("
      #include <cstdint>
      #include <cstddef>
      extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) { return 0; }
      // No main() function.
    " FUZZ_BINARY_LINKS_WITHOUT_MAIN_FUNCTION
    LDFLAGS ${SANITIZER_LDFLAGS} ${fuzz_flag}
    LINK_LIBRARIES ${FUZZ_LIBS}
  )
  add_library(fuzzer_interface INTERFACE)
  target_link_options(fuzzer_interface INTERFACE ${fuzz_flag})
  target_link_libraries(fuzzer_interface INTERFACE ${FUZZ_LIBS})
endif()
```

----------------------------------------

TITLE: Setting Symbol Visibility and Memory Sanitizer in CMake
DESCRIPTION: Configures symbol visibility settings and adds support for Memory Sanitizer when building constant-time tests. Detects if MSan is enabled and adds appropriate flags to avoid false positives.

LANGUAGE: CMake
CODE:
```
set(CMAKE_C_VISIBILITY_PRESET hidden)

set(print_msan_notice)
if(SECP256K1_BUILD_CTIME_TESTS)
  include(CheckMemorySanitizer)
  check_memory_sanitizer(msan_enabled)
  if(msan_enabled)
    try_append_c_flags(-fno-sanitize-memory-param-retval)
    set(print_msan_notice YES)
  endif()
  unset(msan_enabled)
endif()
```

----------------------------------------

TITLE: Computing Divsteps Transition Matrix for Batch Processing in Python
DESCRIPTION: Function that computes the transition matrix for N divsteps. It iteratively builds a matrix that represents N combined divstep operations, with the result scaled by 2^N to avoid expensive divisions. The function only needs to examine the bottom N bits of the inputs.

LANGUAGE: python
CODE:
```
def divsteps_n_matrix(delta, f, g):
    """Compute delta and transition matrix t after N divsteps (multiplied by 2^N)."""
    u, v, q, r = 1, 0, 0, 1 # start with identity matrix
    for _ in range(N):
        if delta > 0 and g & 1:
            delta, f, g, u, v, q, r = 1 - delta, g, (g - f) // 2, 2*q, 2*r, q-u, r-v
        elif g & 1:
            delta, f, g, u, v, q, r = 1 + delta, f, (g + f) // 2, 2*u, 2*v, q+u, r+v
        else:
            delta, f, g, u, v, q, r = 1 + delta, f, (g    ) // 2, 2*u, 2*v, q  , r
    return delta, (u, v, q, r)
```

----------------------------------------

TITLE: Creating RAM Disk for Test Speed-up on macOS
DESCRIPTION: Command to create a 4 GiB RAM disk on macOS to speed up test execution.

LANGUAGE: bash
CODE:
```
diskutil erasevolume HFS+ ramdisk $(hdiutil attach -nomount ram://8388608)
```

----------------------------------------

TITLE: Arch Linux Bitcoin Core Build Example
DESCRIPTION: Complete command sequence for setting up and building Bitcoin Core on Arch Linux.

LANGUAGE: bash
CODE:
```
pacman --sync --needed cmake boost gcc git libevent make python sqlite
git clone https://github.com/bitcoin/bitcoin.git
cd bitcoin/
cmake -B build
cmake --build build
ctest --test-dir build
./build/bin/bitcoind
```

----------------------------------------

TITLE: Configuring Bitcoin Core Build with Custom GCC on NetBSD
DESCRIPTION: When configuring the Bitcoin Core build on NetBSD, you need to specify the paths to the newer GCC compilers using these CMake parameters.

LANGUAGE: bash
CODE:
```
cmake -B build
    ...
    -DCMAKE_C_COMPILER="/usr/pkg/gcc12/bin/gcc" \
    -DCMAKE_CXX_COMPILER="/usr/pkg/gcc12/bin/g++" \
    ...
```

----------------------------------------

TITLE: Configuring Installation for CRC32C Library in CMake
DESCRIPTION: Sets up installation targets for the CRC32C library, including headers, binaries, and CMake configuration files. Creates proper package configuration for downstream projects.

LANGUAGE: CMake
CODE:
```
if(CRC32C_INSTALL)
  install(TARGETS crc32c
    EXPORT Crc32cTargets
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  )
  install(
    FILES
      "include/crc32c/crc32c.h"
    DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/crc32c"
  )

  include(CMakePackageConfigHelpers)
  configure_package_config_file(
    "${PROJECT_NAME}Config.cmake.in"
    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
  )
  write_basic_package_version_file(
    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    COMPATIBILITY SameMajorVersion
  )
  install(
    EXPORT Crc32cTargets
    NAMESPACE Crc32c::
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
  )
  install(
    FILES
      "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
      "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
  )
endif(CRC32C_INSTALL)
```

----------------------------------------

TITLE: Checking for Position Independent Executable Support
DESCRIPTION: Checks if the linker supports Position Independent Executables (PIE) to enhance security.

LANGUAGE: cmake
CODE:
```
set(configure_warnings)

include(CheckLinkerSupportsPIE)
check_linker_supports_pie(configure_warnings)
```

----------------------------------------

TITLE: Configuring Debug Build Options in CMake for Bitcoin Core
DESCRIPTION: Sets specific compiler definitions for debug builds, enabling debug-specific features like lockorder checking, lockcontention debugging, RPC documentation checks, and assertion handling.

LANGUAGE: CMake
CODE:
```
target_compile_definitions(core_interface_debug INTERFACE
  DEBUG
  DEBUG_LOCKORDER
  DEBUG_LOCKCONTENTION
  RPC_DOC_CHECK
  ABORT_ON_FAILED_ASSUME
)
```

----------------------------------------

TITLE: Combining Signature Files from Multiple Signers
DESCRIPTION: Command to combine multiple signature files from different signers into a single signature file for release. This is done after verification when at least six people have built and verified the binaries.

LANGUAGE: bash
CODE:
```
cat "$VERSION"/*/all.SHA256SUMS.asc > SHA256SUMS.asc
```

----------------------------------------

TITLE: Fixing RPC crash in createmultisig and addmultisigaddress
DESCRIPTION: A code change to fix a crash related to the createmultisig and addmultisigaddress RPC commands. This is identified by commit hash 7f502be.

LANGUAGE: Bash
CODE:
```
7f502be fix crash: createmultisig and addmultisigaddress
```

----------------------------------------

TITLE: eBPF and USDT Overview Diagram
DESCRIPTION: ASCII diagram illustrating the interaction between tracing scripts, eBPF code, and Bitcoin Core's tracepoints, showing the flow of data from the application through the kernel's eBPF VM.

LANGUAGE: ascii-diagram
CODE:
```
eBPF and USDT Overview
======================

                ┌──────────────────┐            ┌──────────────┐
                │ tracing script   │            │ bitcoind     │
                │==================│      2.    │==============│
                │  eBPF  │ tracing │      hooks │              │
                │  code  │ logic   │      into┌─┤►tracepoint 1─┼───┐ 3.
                └────┬───┴──▲──────┘          ├─┤►tracepoint 2 │   │ pass args
            1.       │      │ 4.              │ │ ...          │   │ to eBPF
    User    compiles │      │ pass data to    │ └──────────────┘   │ program
    Space    & loads │      │ tracing script  │                    │
    ─────────────────┼──────┼─────────────────┼────────────────────┼───
    Kernel           │      │                 │                    │
    Space       ┌──┬─▼──────┴─────────────────┴────────────┐       │
                │  │  eBPF program                         │◄──────┘
                │  └───────────────────────────────────────┤
                │ eBPF kernel Virtual Machine (sandboxed)  │
                └──────────────────────────────────────────┘

1. The tracing script compiles the eBPF code and loads the eBPF program into a kernel VM
2. The eBPF program hooks into one or more tracepoints
3. When the tracepoint is called, the arguments are passed to the eBPF program
4. The eBPF program processes the arguments and returns data to the tracing script
```

----------------------------------------

TITLE: Combining Correction Steps in update_de Function in Python
DESCRIPTION: A more efficient version that combines the two separate correction steps that add multiples of M. The function first computes what multiples of M to add, then computes the bottom N bits, and finally applies corrections to ensure proper results.

LANGUAGE: python
CODE:
```
def update_de(d, e, t, M, Mi):
    """Multiply matrix t/2^N with [d, e], modulo M."""
    u, v, q, r = t
    md, me = 0, 0
    # Compute what multiples of M to add to cd and ce.
    if d < 0:
        md += u
        me += q
    if e < 0:
        md += v
        me += r
    # Compute bottom N bits of t*[d,e] + M*[md,me].
    cd, ce = (u*d + v*e + md*M) % 2**N, (q*d + r*e + me*M) % 2**N
    # Correct md and me such that the bottom N bits of t*[d,e] + M*[md,me] are zero.
    md -= (Mi * cd) % 2**N
    me -= (Mi * ce) % 2**N
    # Do the full computation.
    cd, ce = u*d + v*e + md*M, q*d + r*e + me*M
    # And cleanly divide by 2**N.
    return cd >> N, ce >> N
```

----------------------------------------

TITLE: Skipping Debug Information When Building Bitcoin Core
DESCRIPTION: CMake command to skip debug information compilation for RelWithDebInfo build type.

LANGUAGE: cmake
CODE:
```
cmake -B build -DCMAKE_CXX_FLAGS_RELWITHDEBINFO="-O2 -g0"
```

----------------------------------------

TITLE: Cloning Bitcoin Core Repository on OpenBSD
DESCRIPTION: Clones the Bitcoin Core source code repository from GitHub to the local system for building.

LANGUAGE: bash
CODE:
```
git clone https://github.com/bitcoin/bitcoin.git
```

----------------------------------------

TITLE: Configuring ZeroMQ and USDT Support
DESCRIPTION: Sets options for ZeroMQ notification support and Userspace Statically Defined Tracing (USDT) with appropriate package requirements.

LANGUAGE: cmake
CODE:
```
option(WITH_ZMQ "Enable ZMQ notifications." OFF)
if(WITH_ZMQ)
  find_package(ZeroMQ 4.0.0 MODULE REQUIRED)
endif()

option(WITH_USDT "Enable tracepoints for Userspace, Statically Defined Tracing." OFF)
if(WITH_USDT)
  find_package(USDT MODULE REQUIRED)
endif()
```

----------------------------------------

TITLE: Setting Up Core Interface Libraries
DESCRIPTION: Creates interface libraries to encapsulate common build flags for different build configurations.

LANGUAGE: cmake
CODE:
```
# The core_interface library aims to encapsulate common build flags.
# It is a usage requirement for all targets except for secp256k1, which
# gets its flags by other means.
add_library(core_interface INTERFACE)
add_library(core_interface_relwithdebinfo INTERFACE)
add_library(core_interface_debug INTERFACE)
target_link_libraries(core_interface INTERFACE
  $<$<CONFIG:RelWithDebInfo>:core_interface_relwithdebinfo>
  $<$<CONFIG:Debug>:core_interface_debug>
)
```

----------------------------------------

TITLE: Importing Trusted PGP Keys for Bitcoin Commit Verification
DESCRIPTION: Command to import the trusted PGP keys from the Bitcoin project's trusted-keys file into GnuPG for commit signature verification.

LANGUAGE: sh
CODE:
```
gpg --keyserver hkps://keys.openpgp.org --recv-keys $(<contrib/verify-commits/trusted-keys)
```

----------------------------------------

TITLE: Building Bitcoin Core for Windows Using Cross-Compilation
DESCRIPTION: Commands to build Bitcoin Core for Windows using the Mingw-w64 cross compiler. This includes setting up dependencies, configuring with CMake using the appropriate toolchain, and building the project.

LANGUAGE: shell
CODE:
```
gmake -C depends HOST=x86_64-w64-mingw32  # Use "-j N" for N parallel jobs.
cmake -B build --toolchain depends/x86_64-w64-mingw32/toolchain.cmake
cmake --build build     # Use "-j N" for N parallel jobs.
```

----------------------------------------

TITLE: Creating Hardware Wallet with Auto-Import
DESCRIPTION: Create a Bitcoin Core wallet that automatically imports public keys from the connected hardware wallet.

LANGUAGE: sh
CODE:
```
$ bitcoin-cli createwallet "hww" true true "" true true true
```

----------------------------------------

TITLE: Setting Compiler and Linker Flag Append Variables
DESCRIPTION: Defines variables for appending custom compiler and linker flags to the build process, allowing for specialized builds and debugging.

LANGUAGE: cmake
CODE:
```
set(APPEND_CPPFLAGS "" CACHE STRING "Preprocessor flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.")
set(APPEND_CFLAGS "" CACHE STRING "C compiler flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.")
set(APPEND_CXXFLAGS "" CACHE STRING "(Objective) C++ compiler flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.")
set(APPEND_LDFLAGS "" CACHE STRING "Linker flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.")
# Appending to this low-level rule variables is the only way to
# guarantee that the flags appear at the end of the command line.
string(APPEND CMAKE_CXX_COMPILE_OBJECT " ${APPEND_CPPFLAGS} ${APPEND_CXXFLAGS}")
string(APPEND CMAKE_CXX_CREATE_SHARED_LIBRARY " ${APPEND_LDFLAGS}")
string(APPEND CMAKE_CXX_LINK_EXECUTABLE " ${APPEND_LDFLAGS}")
```

----------------------------------------

TITLE: Downloading Blockchain Hash List with linearize-hashes.py
DESCRIPTION: Command to generate a list of block hashes using linearize-hashes.py. This script connects to a Bitcoin JSON-RPC server and outputs a list of block hashes to a file.

LANGUAGE: bash
CODE:
```
$ ./linearize-hashes.py linearize.cfg > hashlist.txt
```

----------------------------------------

TITLE: Serializing a Minisketch to a Byte Array in C
DESCRIPTION: Shows how to serialize a minisketch into a byte array for transmission. The example calculates the required buffer size, allocates memory, serializes the sketch, and cleans up the original sketch object.

LANGUAGE: c
CODE:
```
  size_t sersize = minisketch_serialized_size(sketch_a);
  assert(sersize == 12 * 4 / 8); // 4 12-bit values is 6 bytes.
  unsigned char *buffer_a = malloc(sersize);
  minisketch_serialize(sketch_a, buffer_a);
  minisketch_destroy(sketch_a);
```

----------------------------------------

TITLE: Listing Bitcoin Testnet Node Addresses
DESCRIPTION: A comprehensive list of Bitcoin testnet node addresses organized by network type. The list includes IPv6 addresses, I2P addresses, IPv4 addresses (with AS annotations), and Tor onion addresses. All addresses use port 18333 which is the standard Bitcoin testnet port.

LANGUAGE: plaintext
CODE:
```
[fc10:efa7:ca6:1548:f8c:6bb9:1cc4:63ae]:18333
[fc1f:22c3:95dc:a3af:4a93:8251:beb9:1858]:18333
[fc2b:f62e:6a76:cdb5:dceb:2fdd:a0f8:3d88]:18333
[fc32:2c16:d0d0:f1fb:3b27:c187:8cb5:9201]:18333
[fccb:248:11a6:1042:bca:1218:f7ce:7d3d]:18333
66lkz2cfzyrz3tde6gflrty63jqr4knyy6uv4dvldrsecpnfx4dq.b32.i2p:0
hedmbfis4h4inqrwo2uzmku5xu6xaq74tg7sofnetqikdvndtvja.b32.i2p:0
i7vrfdmgolc6dqfmsak5fvwgmn46y4ghtan44uhn2aw66cbk5nfa.b32.i2p:0
nhla3xzibmhvav7meemluh2d2jxdrlwicq636a2sohwqhrfgqi4a.b32.i2p:0
o6j3b33bv26vthoqzjy3h7a3qsuqbtbe3ulajmjzsl43vaqyieyq.b32.i2p:0
ocqipbbxx4paopgkkbnj234ie7opzrtca5gtiwr6oda3h32rzgsa.b32.i2p:0
xgctj4seo3ofstiymoyeuzq74bvddrbr6jtia6erodlf5va3cz5a.b32.i2p:0
xy6ytjxel5ku4naqumj4f6hn4agrzh3w44gqcs6xkkzwm5s3jdgq.b32.i2p:0
zklt7hncdrl2hupfwnlbt3qaayhjayjhvwvj2m3fok3z36tlnxhq.b32.i2p:0
2.59.133.20:18333 # AS58212
2.86.50.136:18333 # AS6799
4.246.195.240:18333 # AS8075
5.39.218.162:18333 # AS57043
5.255.97.91:18333 # AS60404
5.255.97.92:18333 # AS60404
8.217.160.32:18333 # AS45102
18.168.119.254:18333 # AS8987
18.209.9.240:18333 # AS8987
23.227.223.209:18333 # AS44486
27.148.206.140:18333 # AS133774
34.65.45.157:18333 # AS396982
34.69.221.24:18333 # AS396982
34.254.97.244:18333 # AS16509
43.133.47.138:18333 # AS132203
43.247.184.50:18333 # AS23724
44.208.161.158:18333 # AS14618
45.77.25.14:18333 # AS20473
51.79.82.75:18333 # AS16276
52.193.79.181:18333 # AS16509
54.236.59.55:18333 # AS14618
59.186.7.131:18333 # AS3786
62.210.207.63:18333 # AS12876
66.94.114.229:18333 # AS40021
67.4.82.9:18333 # AS209
69.61.32.242:18333 # AS141518
69.197.185.106:18333 # AS32097
70.114.196.140:18333 # AS11427
72.211.1.222:18333 # AS22773
73.22.9.231:18333 # AS33491
74.118.136.46:18333 # AS20326
85.203.53.149:18333 # AS39351
85.208.69.12:18333 # AS42275
85.208.69.13:18333 # AS42275
89.58.9.219:18333 # AS197540
89.155.238.72:18333 # AS2860
90.79.184.226:18333 # AS3215
91.109.204.214:18333 # AS199669
91.123.182.164:18333 # AS51648
92.115.99.159:18333 # AS8926
122.208.117.197:18333 # AS17506
124.236.16.91:18333 # AS134760
129.153.149.46:18333 # AS31898
129.213.114.91:18333 # AS31898
129.226.198.211:18333 # AS132203
134.195.89.130:18333 # AS63473
135.180.99.74:18333 # AS1299
137.184.2.124:18333 # AS14061
141.98.219.199:18333 # AS20326
147.182.251.92:18333 # AS14061
148.51.196.40:18333 # AS12025
148.251.4.19:18333 # AS24940
149.202.79.199:18333 # AS16276
161.97.119.128:18333 # AS51167
162.55.243.11:18333 # AS24940
169.155.171.252:18333 # AS44486
176.108.193.97:18333 # AS47914
185.28.96.16:18333 # AS59845
185.44.206.111:18333 # AS44051
185.107.68.135:18333 # AS43350
185.130.224.146:18333 # AS57043
185.186.208.124:18333 # AS206428
185.210.125.33:18333 # AS205671
186.154.207.228:18333 # AS19429
188.117.132.82:18333 # AS31242
188.213.90.149:18333 # AS206238
193.30.123.70:18333 # AS197540
194.9.6.11:18333 # AS58212
194.95.66.129:18333 # AS680
194.110.169.133:18333 # AS203576
195.154.241.13:18333 # AS12876
200.143.224.99:18333 # AS1916
203.132.94.196:18333 # AS38195
205.209.120.167:18333 # AS19318
206.204.104.7:18333 # AS212947
208.68.4.71:18333 # AS397444
213.199.42.73:18333 # AS51167
216.219.91.82:18333 # AS19318
219.117.221.162:18333 # AS2514
[2001:41d0:303:146e::]:18333 # AS16276
[2001:41d0:306:4505::]:18333 # AS16276
[2001:41d0:306:a3a::]:18333 # AS16276
[2001:41d0:700:544c::]:18333 # AS16276
[2001:41d0:800:1d55::]:18333 # AS16276
[2001:41d0:800:3e7f::]:18333 # AS16276
[2001:470:1f05:4e5::2020]:18333 # AS6939
[2001:5a8:4164:7a00::506]:18333 # AS7065
[2401:c080:1000:4cb2:3eec:efff:feb9:8604]:18333 # AS20473
[2401:d002:3902:700:8708:37c4:e231:d3d8]:18333 # AS38195
[2402:1f00:8101:713::]:18333 # AS16276
[2604:1380:4531:1700::5]:18333 # AS54825
[2604:a00:50:58:216:3eff:fe2c:8371]:18333 # AS19318
[2605:3380:422e:1::50]:18333 # AS397444
[2605:4840:3:2c23::1]:18333 # AS63473
[2605:a141:2239:7674::1]:18333 # AS51167
[2607:5300:205:300::1b0]:18333 # AS16276
[2607:5300:60:85a9::]:18333 # AS16276
[2607:5300:60:8702::]:18333 # AS16276
[2620:6e:a000:1:43:43:43:43]:18333 # AS397444
[2620:6e:a0a0:1::71]:18333 # AS397444
[2804:431:e038:cd01:aaa1:59ff:fe0d:44b8]:18333 # AS27699
[2a01:4f8:121:4072::2]:18333 # AS24940
[2a01:4f8:160:1083::2]:18333 # AS24940
[2a01:4f8:173:1ed8::2]:18333 # AS24940
[2a01:4f8:173:230a::2]:18333 # AS24940
[2a01:4f8:190:4026::2]:18333 # AS24940
[2a01:4f9:2a:309d::2]:18333 # AS24940
[2a01:4f9:3070:26e2::2]:18333 # AS24940
[2a01:4f9:3071:2154::2]:18333 # AS24940
[2a01:4f9:3071:219d::2]:18333 # AS24940
[2a01:4f9:6b:2768::2]:18333 # AS24940
[2a02:c202:2238:2255::1]:18333 # AS51167
[2a02:c206:2239:7671::1]:18333 # AS51167
[2a02:c206:2240:1506::1]:18333 # AS51167
[2a03:4000:2a:514::]:18333 # AS197540
[2a04:52c0:102:2219::1]:18333 # AS60404
[2a04:52c0:102:49af::1]:18333 # AS60404
[2a04:52c0:104:160c::1]:18333 # AS60404
2lsncqdflwk272dhydrxf7ikfy23ppnmm54dnynyxiym6lqf3wowrmqd.onion:18333
2mvycpm7ni6ix2pr4lkkfkqlivgo77mt4jx3s3dmhdlg3ogq46s6qbyd.onion:18333
36fwktckggarkclbpu2pumsdpck46ahe6cwpozd2gm6q7kgdqljclmad.onion:18333
3dt6kgfrilc3nwliwy5wbmc6oa2b5y3t33nkxlrxrkunr2hoaj56kgyd.onion:18333
3vnbi5o3hyzk4cm3hhnyo3h7tclr6pybmhmqwkbyclslfhqtg72pq2id.onion:18333
44sgcv5dvpplt32enlneddyl4gd4z3tbezl2scedwccndyzrrp6lcgyd.onion:18333
4w3f2mxe4ftodocermsazs3qlpo37igkdgne6ka2p6wnnrgwpzqw65yd.onion:18333
5axx4qyub7qtgssrvbbqudu6uqjbuknbvbld2wdscv5p6kh2hsfzjxqd.onion:18333
5qdgulsryjejkjinocpvknazwtnbqtuf4f4pui2at4jpedwwpg427qyd.onion:18333
67l6l2k7mqbl2btyvo5h5lki3kxcrgbunlk7brcloyaoaftbs5mnsuad.onion:18333
6bhop3n32rreiynu35epznhc2exxkhuleromdhnida2hgmu2bhczgmqd.onion:18333
6fdbuqf2kgeweeoeikmwfezauys657lzezzus4nxmekkumouptg5ezad.onion:18333
6rnqpqqcpllqhjoa4gwrtq5yi6fdch6uqzapdee2gq67gxgsl73v4uqd.onion:18333
7ph7mrc24te57mvppajfkfj4mk7zuz4teukymt3wgpdpw6vpndeivtyd.onion:18333
7poqajl6svz4vr3aqi7vdtar2t56crbrtj6yi75ydrt3ighyx7q6qvyd.onion:18333
7zlqrihb5do5ebbmjwgspxigqfdmkfslkqtg2ngdc6ypsunzb4iootqd.onion:18333
aesy6tfufadkut6flu2bsqgnw2422ur2ynjalguxlzuzuktg3zehttqd.onion:18333
axaaplqtf4z22xfj2j2xn6fhtj6ksv74bs7vae6rfw67qofdnqoacbid.onion:18333
ayx35r2mhwydczzoqu7b6dl3sup4oht74sgnlrjkxybzh2hmfnaix3qd.onion:18333
bizdwmm7naqq5pehkbfggznqtena5eodz3kprvsbj4nkkax4fvxx53id.onion:18333
bjqttlyt5kxcn7sitpiavf2cuhdf6rlwigericlh7um7gzkqyyefqnqd.onion:18333
bkzo7mpxuar7rhsbiwdaxqcymixarcbdmb3sdaqtv6yb2svqttz2s6ad.onion:18333
bzn63lsmsuvzlg4uqadyylxaggdcrzkb56muw2b43ft5qkynvzfopbyd.onion:18333
c7zrq2yqt6rtn5dxkczp5bv62k2jncv3mscoo24c24rljbplr2dvhsid.onion:18333
dskf46hfkefyr6nio5gtqp7em7rh6aqwrugdegfooaoxcux5ym6bkuqd.onion:18333
euvmh5f637qwqgktjs5zwauvayybfdkiopnflnh5yjt7ouqat3427pqd.onion:18333
f472j4pynbgltb63mr2lhyvhecfqdjdcfmr2s2id4rreemyn32xtjuid.onion:18333
fbimesnyhzubbzqc3uaufzkbyfmnkxvypoxaveaub7rzpzh2foxrn2yd.onion:18333
gggan3nuzxpd655lafnsunqfxgy56bvsxuuzucgmaowyvq3d7a7o7jad.onion:18333
gsw6sn27quwf6u3swgra6o7lrp5qau6kt3ymuyoxgkth6wntzm2bjwyd.onion:18333
guudgx24aokistytvm3hj7u5cbvdkr2b643r5t33pa536ekfn2lfykid.onion:18333
gwtx5qluopwaxjhedlifnr6pptw2eihojzhq3stnv2gfbvqbgqdhi5qd.onion:18333
gy6nih4pmp5esyvvnhlj6qvk7zkbjuoswkxffyiip3dbkvsfxwz5zcqd.onion:18333
hj2txlxajdlh7jsfwqxtp3cltlptsr33ctjkbxhbzbyirkmcpfhsnyad.onion:18333
hjwzovgwou3py6ncemgmzpvcihay5cuzuxvqdn74axndmll25p4mwjqd.onion:18333
hqkdgpzzsv2qvafhdkdocszquj7o2ittxfmm5fc2arxqw7ikottozoid.onion:18333
htkiqaqoql7pjstenmw6v4blm6l57d6hl6mewxkmfi3qumozflx3gzyd.onion:18333
hvbmmzvqrpgps2x5u4ip4ksf3e5m2fneac754gtnhjn2rsevni6cz3ad.onion:18333
hvtxymvdb55u7lhdw6775akqy46inunl3uup27gnsxm2bqmv55wbacqd.onion:18333
i5fjp7ggx62zlfkibzn7s6glpjp3h2ypfom3lmqixig7qbdgej35wfyd.onion:18333
i5gphw2d224tniqkjebxdwz5ygbbo5gcushoyevv7x7o454b6qlrzeid.onion:18333
iysx2dl4tpojiclh32iyhel6z7h227c7o7buzk5wuqw6qhuytvsu66yd.onion:18333
j53y5paeb7xcrptntut7epccjglduquldjlzjlho4lj2msabnygrljqd.onion:18333
jsc4frvvnl2d3bhzyofsc72xpztgm23nl4fnb4dwkzsxr6fhij2q5iyd.onion:18333
jtvqgaccxbtzshtulk5xlsb4wkoil3psmpn5avqyp2i5vm4hqh5cicyd.onion:18333
jun6gdmbgasr57bhr4zs3dfhc6pzpaw27nqb4dadbai7yrbq55zskeid.onion:18333
kamanho5clcpn5l3sc6ih3vb4skmfhgxw3h2mgs7e5idfezu5dw5oxyd.onion:18333
kwjxlauwjtecjfsiwopbl5pvn5n6z5rz76uk6osmlurd3uyuymcw7aid.onion:18333
lka74booetkbmat2q64haawcytbwx7mnctvo63ww4jgi4yuqnl6p3kad.onion:18333
lwfecq35ocqjfbdq4h2qmcwl3cfcyiyycxtvrz36ihdbuczehi3bmrad.onion:18333
n23anw4zb7f3paroac626oc2sqy3yn5kjfpcqvb3lvdyx7dzzpovd3id.onion:18333
n4e6fp6xoyo2glsafjwbaq3wirhldpjw4mskn5lzkm4o5lhh5n5k7uqd.onion:18333
nmazvezejolohnbza4rmqrwvjcprhi7w22fqvlbxp5sw3c25xy3dunqd.onion:18333
nyrekcbm2ici6wv2umogtmwg7o2ivu4vm7bpcge5fayos5l377zldlqd.onion:18333
o4zdqfdoe4jfvn35twqtjkzmptmk3bsg45sp46wuxanceg3euqtwdjqd.onion:18333
ohqcfz5kk6ufouxmhtq7nxyo2lyui4vjlhr2kftvra2ewgzxu3hsrxad.onion:18333
oobwtn5csi4auevb2ns2b5rrjnxmhlzdmay4zxtzvkj7tayrgwfddiqd.onion:18333
ppe2pepzphox3swftj5lbyi7ckigspbih5qnyuhrb3r6bn3g7k7bp4qd.onion:18333
pqkhkpkvqmjcql5jccyxg5nahow6vixnjrvtsc6clnk7dab4weknvpqd.onion:18333
q5qox756id5nfdu6ht4dghc35jezls4bgjcdnrds3pwndvdx32zmwlad.onion:18333
qiep4hvuovedbbc36hl7nwslwi6ah6uw4nnseyjdtc73cc5rfdauvnad.onion:18333
qzx5f2ig2rk2ssrbopz2zlljq5mkeh3izhhx3t3cepse5qnhvpo2tzid.onion:18333
rfi2hdpjhhknalltbwdvyuhskh5yjs66rqzpy6ley7xtu4kvbeob6fqd.onion:18333
rw6reu6rdetz6rnpzoyn2hfy7sxpbja4v5ktmaicqqgszi2eata5lhqd.onion:18333
s3bxrurro4bmvsmntw74qf4vw3xl25xtnvqegayvlwj3b6t7d76kkwid.onion:18333
slpigm5ep4zan3a65bybne67phjiyesbuk5s3bodefuhnx2cfdtit6qd.onion:18333
sxm6kwrdp6f2ggaozhrl47xuy3es3sgm3ivppmh4xm3hfmetvwbyrcad.onion:18333
t6hfkkujktjyzpepmphskoaivflu6fieyuxrshxfzwriwvoa2uccvvqd.onion:18333
ueyykmnyqk2bnmbgvmqrb4jfbjvpgeew6cuq4gaqe7v2oiyxaubkx4qd.onion:18333
urhagmjceyqbzhjitpa7j7mygivxw3wlwqzkibw6zezrxeantkikgcyd.onion:18333
vctlwaqgmu53eutz2hewuakcipfgtyljsd7czut4dd62xr3rp6fqezad.onion:18333
vi3z4khdvopuiljdjdhpetnxztuzsct2aacuzcm5ba27h4j3cfwsvjad.onion:18333
vqnkdmpmecc5kondj32jwbemmruhmd5gkmfngkscetibzozryp4elkad.onion:18333
wgc4wp25gtnb54vd7x5h2xtetzrdoiizeyyh6fv3vxzp3bbalejbd3ad.onion:18333
wpsahjbejxehpz772kzxonj777pejol2akcicduqov2r7ktm2b6l5pid.onion:18333
```

----------------------------------------

TITLE: Using Named Arguments with Clang-Tidy Compatible Format in C++
DESCRIPTION: Demonstrates the proper format for passing named arguments in a way that clang-tidy can understand and verify. This ensures argument names can be validated during static analysis.

LANGUAGE: C++
CODE:
```
void function(Addrman& addrman, bool clear);

int main()
{
    function(g_addrman, /*clear=*/false);
}
```

----------------------------------------

TITLE: Encoding Function for Full (x,y) Coordinates in ElligatorSwift
DESCRIPTION: Modified G_c,u function that takes both x and y coordinates as input, encoding the sign of y in the output. This version uses only 4 possible values for c instead of 8.

LANGUAGE: mathematical notation
CODE:
```
**Define** $G_{c,u}(x, y)$ as:
* If $c \in \{0, 1\}:$
  * If $g(u) = 0$ or $g(x) = 0$, return $\bot$ (even curves only).
  * If $g(-u-x)$ is square, return $\bot.$
  * Let $s = -g(u)/(u^2 + ux + x^2 + a)$ (cannot cause division by zero).
  * Let $v = x.$
* Otherwise, when $c \in \{2, 3\}:$
  * Let $s = x-u.$
  * Let $r = \sqrt{-s(4g(u) + sh(u))}$; return $\bot$ if not square.
  * If $c = 3$ and $r = 0$, return $\bot.$
  * Let $v = (r/s - u)/2.$
* Let $w = \sqrt{s}$; return $\bot$ if not square.
* Let $w' = w$ if $sign(w/2) = sign(y)$; $-w$ otherwise.
* Depending on $c:$
  * If $c \in \{0, 2\}:$ return $P_u^{'-1}(v, w').$
  * If $c \in \{1, 3\}:$ return $P_u^{'-1}(-u-v, w').$
```

----------------------------------------

TITLE: Configuring RPATH Settings in Bitcoin CMake Build
DESCRIPTION: Configuration for runtime path settings depending on the target platform. For NetBSD, runtime paths are required for executables, while other platforms skip build and install RPATH settings. This is part of a temporary solution as noted in the comments.

LANGUAGE: CMake
CODE:
```
# TODO: The `CMAKE_SKIP_BUILD_RPATH` variable setting can be deleted
#       in the future after reordering Guix script commands to
#       perform binary checks after the installation step.
# Relevant discussions:
# - https://github.com/hebasto/bitcoin/pull/236#issuecomment-2183120953
# - https://github.com/bitcoin/bitcoin/pull/30312#issuecomment-2191235833
# NetBSD always requires runtime paths to be set for executables.
if(CMAKE_SYSTEM_NAME STREQUAL "NetBSD")
  set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
else()
  set(CMAKE_SKIP_BUILD_RPATH TRUE)
  set(CMAKE_SKIP_INSTALL_RPATH TRUE)
endif()
```

----------------------------------------

TITLE: Configuring Wallet Support Options
DESCRIPTION: Sets options for wallet support, including SQLite3 dependencies and Berkeley DB support with version compatibility warnings.

LANGUAGE: cmake
CODE:
```
option(ENABLE_WALLET "Enable wallet." ON)
if(ENABLE_WALLET)
  if(VCPKG_TARGET_TRIPLET)
    # Use of the `unofficial::` namespace is a vcpkg package manager convention.
    find_package(unofficial-sqlite3 CONFIG REQUIRED)
  else()
    find_package(SQLite3 3.7.17 REQUIRED)
  endif()
endif()
option(WITH_BDB "Enable Berkeley DB (BDB) wallet support." OFF)
cmake_dependent_option(WARN_INCOMPATIBLE_BDB "Warn when using a Berkeley DB (BDB) version other than 4.8." ON "WITH_BDB" OFF)
if(WITH_BDB)
  find_package(BerkeleyDB 4.8 MODULE REQUIRED)
  set(USE_BDB ON)
  if(NOT BerkeleyDB_VERSION VERSION_EQUAL 4.8)
    message(WARNING "Found Berkeley DB (BDB) other than 4.8.\n"
                    "BDB (legacy) wallets opened by this build will not be portable!"
    )
    if(WARN_INCOMPATIBLE_BDB)
      message(WARNING "If this is intended, pass \"-DWARN_INCOMPATIBLE_BDB=OFF\".\n"
                      "Passing \"-DWITH_BDB=OFF\" will suppress this warning."
      )
    endif()
  endif()
endif()
cmake_dependent_option(BUILD_WALLET_TOOL "Build bitcoin-wallet tool." ${BUILD_TESTS} "ENABLE_WALLET" OFF)
```

----------------------------------------

TITLE: Installing GCC 12 on NetBSD for Bitcoin Core Build
DESCRIPTION: NetBSD ships with an older version of GCC that doesn't meet Bitcoin Core's requirements. This command installs GCC 12 from packages.

LANGUAGE: bash
CODE:
```
pkgin install gcc12
```

----------------------------------------

TITLE: Running Tests with RAM Disk on macOS
DESCRIPTION: Command to run the test suite using the created RAM disk on macOS for cache and temporary directories.

LANGUAGE: bash
CODE:
```
build/test/functional/test_runner.py --cachedir=/Volumes/ramdisk/cache --tmpdir=/Volumes/ramdisk/tmp
```

----------------------------------------

TITLE: Registering LevelDB Benchmarks with Optional Database Backends
DESCRIPTION: Sets up benchmark executables for LevelDB, including optional benchmarks that compare against SQLite and Kyoto Cabinet if those libraries are available on the system.

LANGUAGE: CMake
CODE:
```
  if(NOT BUILD_SHARED_LIBS)
    leveldb_benchmark("benchmarks/db_bench.cc")
  endif(NOT BUILD_SHARED_LIBS)

  check_library_exists(sqlite3 sqlite3_open "" HAVE_SQLITE3)
  if(HAVE_SQLITE3)
    leveldb_benchmark("benchmarks/db_bench_sqlite3.cc")
    target_link_libraries(db_bench_sqlite3 sqlite3)
  endif(HAVE_SQLITE3)

  # check_library_exists is insufficient here because the library names have
  # different manglings when compiled with clang or gcc, at least when installed
  # with Homebrew on Mac.
  set(OLD_CMAKE_REQURED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
  list(APPEND CMAKE_REQUIRED_LIBRARIES kyotocabinet)
  check_cxx_source_compiles("
#include <kcpolydb.h>

int main() {
  kyotocabinet::TreeDB* db = new kyotocabinet::TreeDB();
  delete db;
  return 0;
}
  "  HAVE_KYOTOCABINET)
  set(CMAKE_REQUIRED_LIBRARIES ${OLD_CMAKE_REQURED_LIBRARIES})
  if(HAVE_KYOTOCABINET)
    leveldb_benchmark("benchmarks/db_bench_tree_db.cc")
    target_link_libraries(db_bench_tree_db kyotocabinet)
  endif(HAVE_KYOTOCABINET)
endif(LEVELDB_BUILD_BENCHMARKS)
```

----------------------------------------

TITLE: Miscellaneous Updates for Bitcoin Core
DESCRIPTION: Miscellaneous updates including adjustments to the Transifex configuration file for the new Transifex CLI tool.

LANGUAGE: markdown
CODE:
```
- #26321 Adjust .tx/config for new Transifex CLI
```

----------------------------------------

TITLE: Documenting Functions in Doxygen Style
DESCRIPTION: Example of a Doxygen-compatible comment block for documenting functions, including parameters, return values, and other annotations.

LANGUAGE: c++
CODE:
```
/**
 * ... Description ...
 *
 * @param[in]  arg1 input description...
 * @param[in]  arg2 input description...
 * @param[out] arg3 output description...
 * @return Return cases...
 * @throws Error type and cases...
 * @pre  Pre-condition for function...
 * @post Post-condition for function...
 */
bool function(int arg1, const char *arg2, std::string& arg3)
```

----------------------------------------

TITLE: Decoding Full (x,y) Coordinates from ElligatorSwift Encoding
DESCRIPTION: Extension of the ElligatorSwift decoding algorithm to recover both x and y coordinates from a (u,t) pair, where the sign of y is encoded in the sign of Y on the intermediate curve.

LANGUAGE: mathematical notation
CODE:
```
**Define** *Decode(u, t)* for full $(x, y)$ as:
* Let $(X, Y) = P_u(t).$
* Let $x$ be the first value in $(u + 4Y^2, \frac{-X}{2Y} - \frac{u}{2}, \frac{X}{2Y} - \frac{u}{2})$ for which $g(x)$ is square.
* Let $y = \sqrt{g(x)}.$
* If $sign(y) = sign(Y)$, return $(x, y)$; otherwise return $(x, -y).$
```

----------------------------------------

TITLE: Configuring DBus Support and Static Plugin Linking for Bitcoin Qt
DESCRIPTION: Adds DBus support when enabled and configures static plugin linking to prevent automatic inclusion of unnecessary plugins. This helps control binary size and dependencies in the final executable.

LANGUAGE: CMake
CODE:
```
if(WITH_DBUS)
  target_link_libraries(bitcoinqt PRIVATE Qt6::DBus)
endif()

if(qt_lib_type STREQUAL "STATIC_LIBRARY")
  # We want to define static plugins to link ourselves, thus preventing
  # automatic linking against a "sane" set of default static plugins.
  qt6_import_plugins(bitcoinqt
    EXCLUDE_BY_TYPE
      accessiblebridge
      platforms
      platforms_darwin
      xcbglintegrations
      platformthemes
      platforminputcontexts
      generic
      iconengines
      imageformats
      egldeviceintegrations
      styles
      networkaccess
      networkinformation
      tls
  )
endif()
```

----------------------------------------

TITLE: Optimizing Static Library Dependencies
DESCRIPTION: Enables dependency optimization to flatten static library dependencies for improved build performance.

LANGUAGE: cmake
CODE:
```
# Flatten static lib dependencies.
# Without this, if libfoo.a depends on libbar.a, libfoo's objects can't begin
# to be compiled until libbar.a has been created.
if (NOT DEFINED CMAKE_OPTIMIZE_DEPENDENCIES)
  set(CMAKE_OPTIMIZE_DEPENDENCIES TRUE)
endif()
```

----------------------------------------

TITLE: Extracting Bitcoin Node Addresses for ASMap Analysis
DESCRIPTION: Command to output Bitcoin node addresses to a file using bitcoin-cli, which can then be used with the diff_addrs command to analyze ASmap changes affecting specific node addresses.

LANGUAGE: bash
CODE:
```
bitcoin-cli getnodeaddresses 0 > addrs.json
```

----------------------------------------

TITLE: Creating a Windows Installer for Bitcoin Core
DESCRIPTION: Command to build a Windows installer for Bitcoin Core using the 'deploy' target. This creates an installable package that can be distributed to users.

LANGUAGE: shell
CODE:
```
cmake --build build --target deploy
```

----------------------------------------

TITLE: Running Tests with Wildcard Patterns
DESCRIPTION: Examples of running tests using wildcard patterns to match multiple test files, specifically targeting all wallet tests.

LANGUAGE: bash
CODE:
```
build/test/functional/test_runner.py test/functional/wallet*
functional/test_runner.py functional/wallet*  # (called from the build/test/ directory)
test_runner.py wallet*  # (called from the build/test/functional/ directory)
```

----------------------------------------

TITLE: Defining Bitcoin Core Version Information
DESCRIPTION: Sets up version information including major/minor version numbers, build number, release status, and copyright year for the Bitcoin Core project.

LANGUAGE: cmake
CODE:
```
set(CLIENT_NAME "Bitcoin Core")
set(CLIENT_VERSION_MAJOR 29)
set(CLIENT_VERSION_MINOR 99)
set(CLIENT_VERSION_BUILD 0)
set(CLIENT_VERSION_RC 0)
set(CLIENT_VERSION_IS_RELEASE "false")
set(COPYRIGHT_YEAR "2025")
```

----------------------------------------

TITLE: Reproducing a Fuzzer Crash with libFuzzer in Bitcoin Core
DESCRIPTION: Command for running the fuzzer with a specific crash case that was reported by CI. This helps developers reproduce and debug issues found by the fuzzing process.

LANGUAGE: sh
CODE:
```
FUZZ=process_message build_fuzz/bin/fuzz qa-assets/fuzz_corpora/process_message/1bc91feec9fc00b107d97dc225a9f2cdaa078eb6
```

----------------------------------------

TITLE: Converting UTXO Set to SQLite Database in Python
DESCRIPTION: A script that converts a compact-serialized UTXO set (as generated by Bitcoin Core with `dumptxoutset`) to a SQLite3 database. The script includes details about the table name and schema in its module docstring and help output.

LANGUAGE: python
CODE:
```
utxo_to_sqlite.py
```

----------------------------------------

TITLE: Standalone Function Naming Conventions in C++
DESCRIPTION: Examples showing the correct naming conventions for standalone functions (UpperCamelCase) in the Bitcoin interfaces directory, which differs from conventions in other parts of the codebase.

LANGUAGE: c++
CODE:
```
// Good: UpperCamelCase standalone function name
std::unique_ptr<Node> MakeNode(LocalInit& init);

// Bad: lowercase standalone function
std::unique_ptr<Node> makeNode(LocalInit& init);
```

----------------------------------------

TITLE: Configuring GDB Source File Mapping
DESCRIPTION: GDB configuration to map source files for debugging when absolute paths have been stripped from debug information.

LANGUAGE: bash
CODE:
```
set substitute-path ./src /path/to/project/root/src
```

----------------------------------------

TITLE: Implementing Bloom Filters in LevelDB with C++
DESCRIPTION: This snippet shows how to add a Bloom filter to reduce disk reads for Get() operations. It sets up a filter policy with 10 bits per key, which can reduce unnecessary reads by approximately 100x.

LANGUAGE: c++
CODE:
```
leveldb::Options options;
options.filter_policy = NewBloomFilterPolicy(10);
leveldb::DB* db;
leveldb::DB::Open(options, "/tmp/testdb", &db);
... use the database ...
delete db;
delete options.filter_policy;
```

----------------------------------------

TITLE: Processing Static Library Dependencies for Bitcoin Kernel
DESCRIPTION: Collects all static libraries that bitcoinkernel depends on and prepares them for installation and pkg-config integration when building in static mode.

LANGUAGE: CMake
CODE:
```
if(NOT BUILD_SHARED_LIBS)
  set(all_kernel_static_link_libs "")
  get_target_static_link_libs(bitcoinkernel all_kernel_static_link_libs)

  install(TARGETS ${all_kernel_static_link_libs} ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libbitcoinkernel)
  list(TRANSFORM all_kernel_static_link_libs PREPEND "-l")
  # LIBS_PRIVATE is substituted in the pkg-config file.
  list(JOIN all_kernel_static_link_libs " " LIBS_PRIVATE)
endif()
```

----------------------------------------

TITLE: Including Global Property Warning Module in Bitcoin CMake
DESCRIPTION: Includes a module to warn about global properties that might affect the build process. This helps maintain proper encapsulation of build properties within the project.

LANGUAGE: CMake
CODE:
```
# We want all build properties to be encapsulated properly.
include(WarnAboutGlobalProperties)
```

----------------------------------------

TITLE: Using perf to analyze Bitcoin node performance profiles
DESCRIPTION: Command to render performance profile data to text using perf report. The command processes a perf data file from the datadir, pipes it through c++filt to demangle C++ symbols, and displays it with less for easy navigation.

LANGUAGE: sh
CODE:
```
perf report -i /path/to/datadir/send-big-msgs.perf.data.xxxx --stdio | c++filt | less
```

----------------------------------------

TITLE: Using listtransactions RPC with Label Support in Bitcoin Core
DESCRIPTION: This snippet explains changes to the listtransactions RPC command, which now supports the 'label' parameter (previously deprecated as 'account' and renamed to 'dummy'). It details behavior with and without the -deprecatedrpc=accounts setting.

LANGUAGE: Markdown
CODE:
```
`listtransactions` label support
--------------------------------

The `listtransactions` RPC `account` parameter which was deprecated in 0.17.0
and renamed to `dummy` has been un-deprecated and renamed again to `label`.

When bitcoin is configured with the `-deprecatedrpc=accounts` setting, specifying
a label/account/dummy argument will return both outgoing and incoming
transactions. Without the `-deprecatedrpc=accounts` setting, it will only return
incoming transactions (because it used to be possible to create transactions
spending from specific accounts, but this is no longer possible with labels).

When `-deprecatedrpc=accounts` is set, it's possible to pass the empty string ""
to list transactions that don't have any label. Without
`-deprecatedrpc=accounts`, passing the empty string is an error because returning
only non-labeled transactions is not generally useful behavior and can cause
confusion.
```

----------------------------------------

TITLE: Running BCC Python P2P Monitor for Bitcoin Core
DESCRIPTION: Command to execute the p2p_monitor.py BCC Python script that provides an interactive curses-based interface for monitoring P2P messages in Bitcoin Core. Requires the process ID of the running bitcoind instance.

LANGUAGE: bash
CODE:
```
$ python3 contrib/tracing/p2p_monitor.py $(pidof bitcoind)
```

----------------------------------------

TITLE: Cloning Bitcoin Core Repository with Git
DESCRIPTION: Command to clone the Bitcoin Core repository from GitHub to a local directory, which serves as the starting point for the build process.

LANGUAGE: powershell
CODE:
```
git clone https://github.com/bitcoin/bitcoin.git
```

----------------------------------------

TITLE: Configuring Custom Compiler and Linker Flags in CMake
DESCRIPTION: Sets up custom compiler and linker flags that can be appended to the command line. These variables are intended for debugging and special build configurations.

LANGUAGE: CMake
CODE:
```
set(SECP256K1_APPEND_CFLAGS "" CACHE STRING "Compiler flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.")
if(SECP256K1_APPEND_CFLAGS)
  # Appending to this low-level rule variable is the only way to
  # guarantee that the flags appear at the end of the command line.
  string(APPEND CMAKE_C_COMPILE_OBJECT " ${SECP256K1_APPEND_CFLAGS}")
endif()

set(SECP256K1_APPEND_LDFLAGS "" CACHE STRING "Linker flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.")
if(SECP256K1_APPEND_LDFLAGS)
  # Appending to this low-level rule variable is the only way to
  # guarantee that the flags appear at the end of the command line.
  string(APPEND CMAKE_C_CREATE_SHARED_LIBRARY " ${SECP256K1_APPEND_LDFLAGS}")
  string(APPEND CMAKE_C_LINK_EXECUTABLE " ${SECP256K1_APPEND_LDFLAGS}")
endif()
```

----------------------------------------

TITLE: Configuring Platform-Specific Compiler Options in CMake
DESCRIPTION: Sets up compiler options to disable RTTI and exceptions for both MSVC and non-MSVC compilers. These options match the requirements for building LLVM-based tools.

LANGUAGE: CMake
CODE:
```
# Disable RTTI and exceptions as necessary
if (MSVC)
    target_compile_options(bitcoin-tidy PRIVATE /GR-)
else()
    target_compile_options(bitcoin-tidy PRIVATE -fno-rtti)
    target_compile_options(bitcoin-tidy PRIVATE -fno-exceptions)
endif()
```

----------------------------------------

TITLE: Sample Benchmark Output in Bitcoin Core
DESCRIPTION: Example output from the benchmarking tool showing performance metrics for different operations like AddrManAdd, AddrManGetAddr, Base58CheckEncode, and Base58Decode.

LANGUAGE: plaintext
CODE:
```
|               ns/op |                op/s |    err% |     total | benchmark
|--------------------:|--------------------:|--------:|----------:|:----------
|       57,927,463.00 |               17.26 |    3.6% |      0.66 | `AddrManAdd`
|          677,816.00 |            1,475.33 |    4.9% |      0.01 | `AddrManGetAddr`

...

|             ns/byte |              byte/s |    err% |     total | benchmark
|--------------------:|--------------------:|--------:|----------:|:----------
|              127.32 |        7,854,302.69 |    0.3% |      0.00 | `Base58CheckEncode`
|               31.95 |       31,303,226.99 |    0.2% |      0.00 | `Base58Decode`

...
```

----------------------------------------

TITLE: Geometric Series Relationship for Single Element
DESCRIPTION: Formula showing the relationship between a power series for a single element and its multiplicative inverse, demonstrating that multiplying by (1-mx) cancels all terms except the constant.

LANGUAGE: math
CODE:
```
(1 - mx) S(m) = 1
```

----------------------------------------

TITLE: Creating Deployment Package
DESCRIPTION: Command to create a .zip deployment package containing the Bitcoin Core application bundle.

LANGUAGE: bash
CODE:
```
cmake --build build --target deploy
```

----------------------------------------

TITLE: Retrieving Bitcoin Daemon Process ID within Python Debugger
DESCRIPTION: Command to retrieve the process ID of a specific node when using the Python debugger, useful for attaching GDB for further debugging.

LANGUAGE: python
CODE:
```
(pdb) self.node[1].process.pid
```

----------------------------------------

TITLE: Verifying Platform-Specific Bitcoin Core Binaries
DESCRIPTION: Commands to verify binaries for specific architectures and platforms by adding the corresponding suffix to the version parameter. Examples show verification for different operating systems and architectures.

LANGUAGE: sh
CODE:
```
./contrib/verify-binaries/verify.py pub 25.2-x86_64-linux
./contrib/verify-binaries/verify.py pub 24.1-rc1-darwin
./contrib/verify-binaries/verify.py pub 27.0-win64-setup.exe
```

----------------------------------------

TITLE: Setting Substitute URLs Environment Variable
DESCRIPTION: Shell command to set the SUBSTITUTE_URLS environment variable for scripts under ./contrib/guix/, specifying multiple substitute servers.

LANGUAGE: sh
CODE:
```
export SUBSTITUTE_URLS='https://guix.carldong.io https://ci.guix.gnu.org'
```

----------------------------------------

TITLE: Running Bitcoin Core unit tests with help flag
DESCRIPTION: Shows how to view available command line arguments for the test_bitcoin test runner by using the help flag.

LANGUAGE: bash
CODE:
```
test_bitcoin --help
```

----------------------------------------

TITLE: Profiling Bitcoin Core with Perf on Linux
DESCRIPTION: Commands for capturing performance data from a running bitcoind process using perf and analyzing the results.

LANGUAGE: shell
CODE:
```
$ perf record \
    -g --call-graph dwarf --per-thread -F 140 \
    -p `pgrep bitcoind` -- sleep 60
```

----------------------------------------

TITLE: Installing Qt6 Dependencies for Bitcoin Core GUI on OpenBSD
DESCRIPTION: Installs Qt6 framework components required to build the Bitcoin Core graphical user interface.

LANGUAGE: bash
CODE:
```
pkg_add qt6-qtbase qt6-qttools
```

----------------------------------------

TITLE: Adding missing lock in submitblock RPC command
DESCRIPTION: A fix for a missing lock in the submitblock RPC function, ensuring proper thread safety. This is identified by commit hash eae305f.

LANGUAGE: Bash
CODE:
```
eae305f Fix missing lock in submitblock
```

----------------------------------------

TITLE: Creating secp256k1 Precomputed Object Library in CMake
DESCRIPTION: Defines an object library for precomputed tables used in secp256k1 elliptic curve operations, excluding it from the default build target.

LANGUAGE: CMake
CODE:
```
add_library(secp256k1_precomputed OBJECT EXCLUDE_FROM_ALL
  precomputed_ecmult.c
  precomputed_ecmult_gen.c
)
```

----------------------------------------

TITLE: Verifying Bitcoin Core Binaries Using Local Checksum File
DESCRIPTION: Command to verify all binaries listed in a local SHA256SUMS file, rather than downloading the checksum file from the official servers.

LANGUAGE: sh
CODE:
```
./contrib/verify-binaries/verify.py bin SHA256SUMS
```

----------------------------------------

TITLE: Common Autotools Configuration Pattern in Bitcoin Build System
DESCRIPTION: Example of using autoconf and the MAKE DESTDIR pattern for configuring and staging packages built with autotools. This is a common pattern for many dependency packages.

LANGUAGE: makefile
CODE:
```
$($(package)_autoconf)

$(MAKE) DESTDIR=$($(package)_staging_dir) install
```

----------------------------------------

TITLE: Cleaning Test Cache and Stopping Bitcoin Daemons
DESCRIPTION: Commands to remove the cached blockchain data and stop any running bitcoind processes when the cache becomes corrupted.

LANGUAGE: bash
CODE:
```
rm -rf build/test/cache
killall bitcoind
```

----------------------------------------

TITLE: Configuring Sanitizer Options in Bitcoin Core Development
DESCRIPTION: Bash commands to configure environment variables for various sanitizers (leak, thread, undefined behavior) with appropriate suppressions files. These settings help manage sanitizer behavior during testing.

LANGUAGE: bash
CODE:
```
export LSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/lsan"
export TSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/tsan:halt_on_error=1:second_deadlock_stack=1"
export UBSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1"
```

----------------------------------------

TITLE: Running specific test file with full logging
DESCRIPTION: Demonstrates how to run only the tests in the getarg_tests file with full verbosity logging enabled.

LANGUAGE: bash
CODE:
```
build/bin/test_bitcoin --log_level=all --run_test=getarg_tests
```

----------------------------------------

TITLE: Configuring Bitcoin Core without Wallet or GUI
DESCRIPTION: CMake command to configure Bitcoin Core build with wallet functionality disabled.

LANGUAGE: bash
CODE:
```
cmake -B build -DENABLE_WALLET=OFF
```

----------------------------------------

TITLE: Installing DB4 using Shell Script
DESCRIPTION: A script for installing Berkeley DB 4 (db4) for Bitcoin. The script has a help message that mentions its purpose, with a typo that was fixed in commit #11943.

LANGUAGE: Shell
CODE:
```
# Referenced in commit #11702 and #11943
# Script for installing db4 with a fixed typo in help message
```

----------------------------------------

TITLE: Checking for C++17 __has_include Support in LevelDB
DESCRIPTION: Tests whether the compiler supports C++17's __has_include feature which allows conditional inclusion of headers based on their availability.

LANGUAGE: CMake
CODE:
```
include(CheckCXXSourceCompiles)

# Test whether C++17 __has_include is available.
check_cxx_source_compiles("
#if defined(__has_include) &&  __has_include(<string>)
#include <string>
#endif
int main() { std::string str; return 0; }
" HAVE_CXX17_HAS_INCLUDE)
```

----------------------------------------

TITLE: Basic Bitcoin Core Usage Commands
DESCRIPTION: Common commands for running Bitcoin Core daemon, accessing help, and using the command-line interface.

LANGUAGE: shell
CODE:
```
./build/bin/bitcoind -daemon      # Starts the bitcoin daemon.
./build/bin/bitcoin-cli --help    # Outputs a list of command-line options.
./build/bin/bitcoin-cli help      # Outputs a list of RPC commands when the daemon is running.
./build/bin/bitcoin-qt -server # Starts the bitcoin-qt server mode, allows bitcoin-cli control
```

----------------------------------------

TITLE: Getting JSON Output from Bitcoin Core Binary Verification
DESCRIPTION: Commands to verify binaries with JSON output and without prompting for user input, useful for automation. These examples demonstrate verification for different platform-specific builds.

LANGUAGE: sh
CODE:
```
./contrib/verify-binaries/verify.py --json pub 22.0-x86
./contrib/verify-binaries/verify.py --json pub 23.0-rc5-linux-gnu
```

----------------------------------------

TITLE: Command for Updating PSBT with UTXO Information
DESCRIPTION: The utxoupdatepsbt RPC updates a PSBT with information from the UTXO set, working only for SegWit inputs.

LANGUAGE: markdown
CODE:
```
- **`utxoupdatepsbt` (Updater)** is a node RPC that takes a PSBT and updates it
  to include information available from the UTXO set (works only for SegWit
  inputs).
```

----------------------------------------

TITLE: Running Functional Test with Disabled RPC Timeouts
DESCRIPTION: Command to run a specific functional test with RPC timeouts disabled, which is useful for debugging RPC calls that might take longer than usual.

LANGUAGE: bash
CODE:
```
build/test/functional/wallet_hd.py --timeout-factor 0
```

----------------------------------------

TITLE: Build configuration for fuzz coverage testing
DESCRIPTION: CMake build configuration options required for deterministic fuzz coverage testing with clang. Enables fuzzing and coverage instrumentation.

LANGUAGE: bash
CODE:
```
-DCMAKE_C_COMPILER='clang' -DCMAKE_CXX_COMPILER='clang++' -DBUILD_FOR_FUZZING=ON -DCMAKE_CXX_FLAGS='-fprofile-instr-generate -fcoverage-mapping'
```

----------------------------------------

TITLE: Incorrect Shebang Usage to Avoid
DESCRIPTION: Shows the incorrect way to specify a shebang in bash scripts by using a hardcoded path, which can cause issues if bash is not installed in the expected location.

LANGUAGE: bash
CODE:
```
#!/bin/bash
```

----------------------------------------

TITLE: Running test with custom data directory
DESCRIPTION: Demonstrates how to specify a custom location for test data using the -testdatadir option, which preserves the test data for inspection after completion.

LANGUAGE: bash
CODE:
```
$ build/bin/test_bitcoin --run_test=getarg_tests/doubledash -- -testdatadir=/somewhere/mydatadir
Test directory (will not be deleted): "/somewhere/mydatadir/test_common bitcoin/getarg_tests/doubledash/datadir"
Running 1 test case...

*** No errors detected
$ ls -l '/somewhere/mydatadir/test_common bitcoin/getarg_tests/doubledash/datadir'
total 8
drwxrwxr-x 2 admin admin 4096 Nov 27 22:45 blocks
-rw-rw-r-- 1 admin admin 1003 Nov 27 22:45 debug.log
```

----------------------------------------

TITLE: Self-signing Bitcoin Core binaries on macOS
DESCRIPTION: Commands to remove quarantine attributes and self-sign Bitcoin Core binaries for execution on macOS. This is required for running Bitcoin Core binaries on macOS systems.

LANGUAGE: bash
CODE:
```
cd /path/to/bitcoin-28.x/bin
xattr -d com.apple.quarantine bitcoin-cli bitcoin-qt bitcoin-tx bitcoin-util bitcoin-wallet bitcoind test_bitcoin
codesign -s - bitcoin-cli bitcoin-qt bitcoin-tx bitcoin-util bitcoin-wallet bitcoind test_bitcoin
```

----------------------------------------

TITLE: Installing Berkeley DB for Legacy Wallet Support
DESCRIPTION: Berkeley DB (db4) is required to enable support for legacy wallets in Bitcoin Core. This command installs it using pkgin.

LANGUAGE: bash
CODE:
```
pkgin install db4
```

----------------------------------------

TITLE: Using Correct Shebang in Bash Scripts
DESCRIPTION: Demonstrates the preferred shebang line for bash scripts, using '/usr/bin/env bash' which searches the user's PATH to find the bash binary instead of assuming a fixed location.

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash
```

----------------------------------------

TITLE: Creating Bob's Minisketch in C
DESCRIPTION: Creates a second minisketch instance for Bob's set and adds elements from 3002 to 3011. This demonstrates how the second party prepares their sketch for reconciliation.

LANGUAGE: c
CODE:
```
  minisketch *sketch_b = minisketch_create(12, 0, 4); // Bob's own sketch
  for (int i = 3002; i < 3012; ++i) {
    minisketch_add_uint64(sketch_b, i);
  }
```

----------------------------------------

TITLE: Copyright header management commands
DESCRIPTION: Available subcommands for the copyright_header.py script which manages copyright headers in repository source files.

LANGUAGE: bash
CODE:
```
$ ./copyright_header.py report <base_directory> [verbose]
$ ./copyright_header.py update <base_directory>
$ ./copyright_header.py insert <file>
```

----------------------------------------

TITLE: Building Berkeley DB 4.8 for Legacy Wallet Support
DESCRIPTION: Installs gmake and builds Berkeley DB 4.8 using the depends system since the ports version cannot be used for Bitcoin Core's legacy wallet support.

LANGUAGE: bash
CODE:
```
pkg install gmake
gmake -C depends NO_BOOST=1 NO_LIBEVENT=1 NO_QT=1 NO_ZMQ=1 NO_USDT=1
```

----------------------------------------

TITLE: Configuring Platform-Specific SSE4.2 CRC32C Implementation in CMake
DESCRIPTION: Creates a separate object library for SSE4.2 CRC32C implementation with specific compiler flags for x86 architecture. This prevents compiling unsupported instructions into code that runs on systems without SSE4.2 support.

LANGUAGE: CMake
CODE:
```
# SSE4.2 code is built separately, so we don't accidentally compile unsupported
# instructions into code that gets run without SSE4.2 support.
add_library(crc32c_sse42 OBJECT "")
target_sources(crc32c_sse42
  PRIVATE
    "${PROJECT_BINARY_DIR}/include/crc32c/crc32c_config.h"
    "src/crc32c_sse42.cc"
    "src/crc32c_sse42.h"
)
if(HAVE_SSE42)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_options(crc32c_sse42 PRIVATE "/arch:AVX")
  else(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_options(crc32c_sse42 PRIVATE "-msse4.2")
  endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
endif(HAVE_SSE42)

# CMake only enables PIC by default in SHARED and MODULE targets.
if(BUILD_SHARED_LIBS)
  set_property(TARGET crc32c_sse42 PROPERTY POSITION_INDEPENDENT_CODE TRUE)
endif(BUILD_SHARED_LIBS)
```

----------------------------------------

TITLE: Configuring Compiler Warnings and Flags in CMake
DESCRIPTION: Sets compiler-specific warning levels and flags based on whether MSVC or GCC/Clang is being used. Also disables exceptions and RTTI for better performance and smaller binaries.

LANGUAGE: CMake
CODE:
```
# https://github.com/izenecloud/cmake/blob/master/SetCompilerWarningAll.cmake
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  # Use the highest warning level for Visual Studio.
  set(CMAKE_CXX_WARNING_LEVEL 4)
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")

  # Disable C++ exceptions.
  string(REGEX REPLACE "/EH[a-z]+" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHs-c-")
  add_definitions(-D_HAS_EXCEPTIONS=0)

  # Disable RTTI.
  string(REGEX REPLACE "/GR" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GR-")
else(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  # Use -Wall for clang and gcc.
  if(NOT CMAKE_CXX_FLAGS MATCHES "-Wall")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
  endif(NOT CMAKE_CXX_FLAGS MATCHES "-Wall")

  # Use -Wextra for clang and gcc.
  if(NOT CMAKE_CXX_FLAGS MATCHES "-Wextra")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wextra")
  endif(NOT CMAKE_CXX_FLAGS MATCHES "-Wextra")

  # Use -Werror for clang and gcc.
  if(NOT CMAKE_CXX_FLAGS MATCHES "-Werror")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
  endif(NOT CMAKE_CXX_FLAGS MATCHES "-Werror")

  # Disable C++ exceptions.
  string(REGEX REPLACE "-fexceptions" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions")

  # Disable RTTI.
  string(REGEX REPLACE "-frtti" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")
endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
```

----------------------------------------

TITLE: Setting Windows Environment for Python UTF-8 Support
DESCRIPTION: Command for setting the PYTHONUTF8 environment variable to 1 in Windows, which is required for running the functional tests.

LANGUAGE: cmd
CODE:
```
set PYTHONUTF8=1
```

----------------------------------------

TITLE: Installing Qt6 Dependencies for Bitcoin Core GUI
DESCRIPTION: These packages are required for building the Bitcoin Core GUI with Qt6 framework on NetBSD.

LANGUAGE: bash
CODE:
```
pkgin install qt6-qtbase qt6-qttools
```

----------------------------------------

TITLE: Installing Python for Test Suite
DESCRIPTION: Command to install Python, which is required to run the Bitcoin Core test suite. This is recommended for development.

LANGUAGE: bash
CODE:
```
brew install python
```

----------------------------------------

TITLE: Creating a Maintenance Branch
DESCRIPTION: Commands to create a maintenance branch for backporting bug fixes to older releases. This checks out a new branch from the previous release tag and pushes it to the repository.

LANGUAGE: shell
CODE:
```
git checkout -b $MAJOR.$MINOR v$MAJOR.$MINOR.$((PATCH - 1))
git push git@github.com:bitcoin-core/secp256k1.git $MAJOR.$MINOR
```

----------------------------------------

TITLE: Build System Updates for Bitcoin Core
DESCRIPTION: Updates to the build system including Windows code signing certificate renewal, NSIS patching for installer stub optimization, Guix cross-compilation improvements, and reverting a change related to Homebrew's SQLite package.

LANGUAGE: markdown
CODE:
```
- #25201 windeploy: Renewed windows code signing certificate
- #25788 guix: patch NSIS to remove .reloc sections from installer stubs
- #25861 guix: use --build={arch}-guix-linux-gnu in cross toolchain
- #25985 Revert "build: Use Homebrew's sqlite package if it is available"
```

----------------------------------------

TITLE: Running gen-manpages.py with custom build directory
DESCRIPTION: Command to run the manpage generator script with a custom build directory instead of the default 'build' directory.

LANGUAGE: bash
CODE:
```
BUILDDIR=$PWD/my-build-dir contrib/devtools/gen-manpages.py
```

----------------------------------------

TITLE: Building Bitcoin Core without Git Detection
DESCRIPTION: Command for building Bitcoin Core 0.20.1 from source with a special environment variable to handle the regression in the release tarball generation process.

LANGUAGE: Shell
CODE:
```
BITCOIN_GENBUILD_NO_GIT=1 make
```

----------------------------------------

TITLE: Setting Build Options for CRC32C in CMake
DESCRIPTION: Defines build configuration options for the CRC32C library, including flags for tests, benchmarks, Google logging support, and installation settings.

LANGUAGE: CMake
CODE:
```
option(CRC32C_BUILD_TESTS "Build CRC32C's unit tests" ON)
option(CRC32C_BUILD_BENCHMARKS "Build CRC32C's benchmarks" ON)
option(CRC32C_USE_GLOG "Build CRC32C's tests with Google Logging" ON)
option(CRC32C_INSTALL "Install CRC32C's header and library" ON)

include(TestBigEndian)
test_big_endian(BYTE_ORDER_BIG_ENDIAN)
```

----------------------------------------

TITLE: Using the RETRY_ATTEMPT Environment Variable in Commands
DESCRIPTION: Example showing how to access the current retry attempt number inside the command being executed using the RETRY_ATTEMPT environment variable.

LANGUAGE: sh
CODE:
```
retry -t 3 -- 'if [ $RETRY_ATTEMPT -eq 3 ]; then echo Passed at attempt $RETRY_ATTEMPT; true; else echo Failed at attempt $RETRY_ATTEMPT; false; fi;'
```

----------------------------------------

TITLE: Installing SQLite3 for Descriptor Wallet Support
DESCRIPTION: Installs SQLite3 database which is required for descriptor wallet functionality in Bitcoin Core.

LANGUAGE: bash
CODE:
```
pkg install sqlite3
```

----------------------------------------

TITLE: Unmounting RAM Disk on macOS
DESCRIPTION: Command to unmount the RAM disk on macOS after test completion.

LANGUAGE: bash
CODE:
```
umount /Volumes/ramdisk
```

----------------------------------------

TITLE: Setting Client Version String with Release Candidate Handling
DESCRIPTION: Creates a formatted version string including release candidate suffix if applicable, and sets copyright holders information.

LANGUAGE: cmake
CODE:
```
set(CLIENT_VERSION_STRING ${PROJECT_VERSION})
if(CLIENT_VERSION_RC GREATER 0)
  string(APPEND CLIENT_VERSION_STRING "rc${CLIENT_VERSION_RC}")
endif()

set(COPYRIGHT_HOLDERS "The %s developers")
set(COPYRIGHT_HOLDERS_FINAL "The ${CLIENT_NAME} developers")
set(CLIENT_BUGREPORT "https://github.com/bitcoin/bitcoin/issues")
```

----------------------------------------

TITLE: Installing Qt6 Dependencies for GUI Support
DESCRIPTION: Installs the Qt6 framework components required to build the Bitcoin Core GUI on FreeBSD.

LANGUAGE: bash
CODE:
```
pkg install qt6-buildtools qt6-core qt6-gui qt6-linguisttools qt6-testlib qt6-widgets
```

----------------------------------------

TITLE: Setting Client Version String with Release Candidate Handling
DESCRIPTION: Creates a formatted version string including release candidate suffix if applicable, and sets copyright holders information.

LANGUAGE: cmake
CODE:
```
set(CLIENT_VERSION_STRING ${PROJECT_VERSION})
if(CLIENT_VERSION_RC GREATER 0)
  string(APPEND CLIENT_VERSION_STRING "rc${CLIENT_VERSION_RC}")
endif()

set(COPYRIGHT_HOLDERS "The %s developers")
set(COPYRIGHT_HOLDERS_FINAL "The ${CLIENT_NAME} developers")
set(CLIENT_BUGREPORT "https://github.com/bitcoin/bitcoin/issues")
```

----------------------------------------

TITLE: Exporting public key descriptors from offline Bitcoin Core wallet
DESCRIPTION: Extracts descriptor information from the offline wallet and saves it to a JSON file. These descriptors contain only public key information and will be used to create a watch-only wallet.

LANGUAGE: sh
CODE:
```
[offline]$ ./build/bin/bitcoin-cli -signet -rpcwallet="offline_wallet" listdescriptors \
             | jq -r '.descriptors' \
             >> /path/to/descriptors.json
```

----------------------------------------

TITLE: ARM 64-bit Build Filename Template
DESCRIPTION: Template string showing the naming convention for 64-bit ARM builds with version variable placeholder.

LANGUAGE: shell
CODE:
```
bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz
```

----------------------------------------

TITLE: Git Subtree Check Script Usage
DESCRIPTION: Usage instructions for the git-subtree-check.sh script which verifies that a subtree matches the contents of the commit it claims to have been updated to.

LANGUAGE: sh
CODE:
```
Usage: test/lint/git-subtree-check.sh [-r] DIR [COMMIT]
       test/lint/git-subtree-check.sh -?
```

----------------------------------------

TITLE: Setting RPC Cookie File Location in Bitcoin Core
DESCRIPTION: Command line option to specify the location of the authentication cookie file used for RPC access when no password is specified. By default, it's stored in the data directory.

LANGUAGE: markdown
CODE:
```
-rpccookiefile
```

----------------------------------------

TITLE: Installing SQLite3 for Descriptor Wallet Support
DESCRIPTION: SQLite3 is required to enable support for descriptor wallets in Bitcoin Core. This command installs it using pkgin.

LANGUAGE: bash
CODE:
```
pkgin install sqlite3
```

----------------------------------------

TITLE: Building ctaes Benchmark in C
DESCRIPTION: Command to compile the benchmark program for ctaes by linking ctaes.c with bench.c.

LANGUAGE: bash
CODE:
```
$ gcc -O3 ctaes.c bench.c -o bench
```

----------------------------------------

TITLE: Defining CMake Function for Building secp256k1 Examples
DESCRIPTION: A CMake function that creates an executable for a secp256k1 example, sets up include directories, links necessary libraries (including platform-specific ones for Windows), and creates a test configuration. This function streamlines the process of creating consistent example builds.

LANGUAGE: CMake
CODE:
```
function(add_example name)
  set(target_name ${name}_example)
  add_executable(${target_name} ${name}.c)
  target_include_directories(${target_name} PRIVATE
    ${PROJECT_SOURCE_DIR}/include
  )
  target_link_libraries(${target_name}
    secp256k1
    $<$<PLATFORM_ID:Windows>:bcrypt>
  )
  set(test_name ${name}_example)
  add_test(NAME secp256k1_${test_name} COMMAND ${target_name})
endfunction()
```

----------------------------------------

TITLE: Combining Test Logs for Easier Debugging
DESCRIPTION: Command to combine test framework logs and bitcoind debug logs into a single colorized output for easier troubleshooting.

LANGUAGE: bash
CODE:
```
build/test/functional/combine_logs.py -c <test data directory> | less -r
```

----------------------------------------

TITLE: Configuring External Signer Support
DESCRIPTION: Enables external signer support on non-Windows platforms with a conditional CMAKE_DEPENDENT_OPTION.

LANGUAGE: cmake
CODE:
```
cmake_dependent_option(ENABLE_EXTERNAL_SIGNER "Enable external signer support." ON "NOT WIN32" OFF)
```

----------------------------------------

TITLE: GUI Improvements for Bitcoin Core
DESCRIPTION: GUI-related changes including updating Qt5 to version 5.15.3, disallowing encryption of watch-only wallets, and a fix for a segmentation fault on MacOS 13 related to notifications.

LANGUAGE: markdown
CODE:
```
- #24668 build, qt: bump Qt5 version to 5.15.3
- gui#631 Disallow encryption of watchonly wallets
- gui#680 Fixes MacOS 13 segfault by preventing certain notifications
```

----------------------------------------

TITLE: Checking for openssl/ec.h Removal Reference
DESCRIPTION: Reference to removing a check for 'openssl/ec.h' in the build process, which appears to be a build system improvement.

LANGUAGE: markdown
CODE:
```
- #8520 `75f2065` Remove check for `openssl/ec.h` (laanwj)
```

----------------------------------------

TITLE: Running Tests Through Test Runner Harness
DESCRIPTION: Command to run a specific test through the test_runner.py harness, which provides additional functionality and reporting.

LANGUAGE: bash
CODE:
```
build/test/functional/test_runner.py feature_rbf.py
```

----------------------------------------

TITLE: ZeroMQ Message Structure for Transaction Hash Notifications
DESCRIPTION: Format specification for 'hashtx' notifications, which include the 32-byte transaction hash and a sequence number to detect lost messages.

LANGUAGE: plain
CODE:
```
| hashtx | <32-byte transaction hash in Little Endian> | <uint32 sequence number in Little Endian>
```

----------------------------------------

TITLE: Regenerating Bitcoin English Translation Source File using CMake
DESCRIPTION: Commands to automatically regenerate the bitcoin_en.ts translation source file using CMake. This creates a dev-mode build with certain features disabled and then builds the translate target.

LANGUAGE: sh
CODE:
```
cmake --preset dev-mode -DWITH_USDT=OFF -DWITH_MULTIPROCESS=OFF
cmake --build build_dev_mode --target translate
```

----------------------------------------

TITLE: Running Bitcoin Core GUI
DESCRIPTION: Command to run the Bitcoin Core GUI application after building it from source. This executes the bitcoin-qt binary located in the build/bin directory.

LANGUAGE: sh
CODE:
```
./build/bin/bitcoin-qt
```

----------------------------------------

TITLE: Deprecated RPC Option for whitelisted Field
DESCRIPTION: Configuration option to maintain access to the deprecated whitelisted field in getpeerinfo RPC.

LANGUAGE: bash
CODE:
```
-deprecatedrpc=getpeerinfo_whitelisted
```

----------------------------------------

TITLE: Finding Bitcoin Daemon Process ID from Test Directory
DESCRIPTION: Command to find the process ID of a Bitcoin daemon by examining its PID file in the test temporary directory.

LANGUAGE: bash
CODE:
```
cat /tmp/user/1000/testo9vsdjo3/node1/regtest/bitcoind.pid
```

----------------------------------------

TITLE: Manual Tor Hidden Service Configuration
DESCRIPTION: Configuration to add to the Tor configuration file (/etc/tor/torrc) to manually create a persistent hidden service for Bitcoin Core.

LANGUAGE: ini
CODE:
```
HiddenServiceDir /var/lib/tor/bitcoin-service/
HiddenServicePort 8333 127.0.0.1:8334
```

----------------------------------------

TITLE: Configuring macOS-specific Build Options for Bitcoin Core
DESCRIPTION: Sets up macOS-specific compiler and linker options, including Objective-C dispatch prototypes and dead code/symbol stripping flags for the macOS linker.

LANGUAGE: CMake
CODE:
```
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  target_compile_definitions(core_interface INTERFACE OBJC_OLD_DISPATCH_PROTOTYPES=0)
  # These flags are specific to ld64, and may cause issues with other linkers.
  # For example: GNU ld will interpret -dead_strip as -de and then try and use
  # "ad_strip" as the symbol for the entry point.
  try_append_linker_flag("-Wl,-dead_strip" TARGET core_interface)
  try_append_linker_flag("-Wl,-dead_strip_dylibs" TARGET core_interface)
  if(CMAKE_HOST_APPLE)
    try_append_linker_flag("-Wl,-headerpad_max_install_names" TARGET core_interface)
  endif()
endif()
```

----------------------------------------

TITLE: Building Bitcoin Chainstate Utility with CMake
DESCRIPTION: Configures the bitcoin-chainstate executable for chainstate operations. Includes special build property settings for RPATH handling in Guix builds, and links with core_interface and bitcoinkernel libraries.

LANGUAGE: CMake
CODE:
```
if(BUILD_UTIL_CHAINSTATE)
  add_executable(bitcoin-chainstate
    bitcoin-chainstate.cpp
  )
  # TODO: The `SKIP_BUILD_RPATH` property setting can be deleted
  #       in the future after reordering Guix script commands to
  #       perform binary checks after the installation step.
  # Relevant discussions:
  # - https://github.com/hebasto/bitcoin/pull/236#issuecomment-2183120953
  # - https://github.com/bitcoin/bitcoin/pull/30312#issuecomment-2191235833
  set_target_properties(bitcoin-chainstate PROPERTIES
    SKIP_BUILD_RPATH OFF
  )
  target_link_libraries(bitcoin-chainstate
    PRIVATE
      core_interface
      bitcoinkernel
  )
endif()
```

----------------------------------------

TITLE: Listing I2P Base32 Addresses with Port Specifications
DESCRIPTION: A comprehensive list of I2P base32 addresses (.b32.i2p) with port 0 specifications. These addresses can be used to connect to various services or nodes within the I2P anonymous network infrastructure.

LANGUAGE: plaintext
CODE:
```
ea57r6dh5gjumzc466khizfymzl4j6mxuq62t7kb7lnbp64lxpcq.b32.i2p:0
ee75buofrqnhkjmvabyhfalbkz3sjg3p3wchl3wlaa4cz3ua4wka.b32.i2p:0
eedgqvf6vrxdvporvfh3ihjizegyplk3buupvu6v3cbrmiplv6za.b32.i2p:0
efopxval2cwm7fe2jxd2srg5bm23cf4q37bnydecszxdhflvcwpa.b32.i2p:0
egweubjkn3bvp5ukk2qdtkvfuss6hmtc2pmtblmtyteu2ax4es2a.b32.i2p:0
ejq34wotitjk7o5xmxdlx6zakrxchwwtk4vggpfpxx2abyacrh2q.b32.i2p:0
emckeftl5wkd4mylivr3hrxphs775rpcq5s4jm4kxdaamc7luxlq.b32.i2p:0
epzzk4ta5pn6ralqol4fp35j4gzjfvcjnmm2oefwazk2dki2246q.b32.i2p:0
et5ndch6nw756ds2myh2ctvszhqek66j2y46xtnh3qz4m7nbmqea.b32.i2p:0
etouz5h35ofnip445vwtffvtbl3qbvx4dfopf7ypscxhboeuy2yq.b32.i2p:0
eubmbzk6rtpu3utz4crdwvm2jy564cywwwrw6dz7l2kfzvaiyuha.b32.i2p:0
ev2ijxlza3gp26vxubheds4oxsimlvttrv2ezgnger44qpnpyoxa.b32.i2p:0
f23v3vovpxxntn7xsm52uf6hzfngbmyhwbcdbtg2pqaoebag57tq.b32.i2p:0
fae3tesbnlbnl4flz4hk7eud6axewuisklvw634nplv7ieeg457a.b32.i2p:0
fbmglhmeasq3it5ziaow7pczmzlrbwavo726j7secd4wugakepmq.b32.i2p:0
fd7npzmrpdkfsrsdytagsjpnzww6y5vgomxulnfpwbdiqup37yqa.b32.i2p:0
fdraytuzmed622myazwpw2sg66xfq2pjhpplt2smi64dqv6qb3eq.b32.i2p:0
fghecqp7tm3doc74vozr2qiddpo7j3kfzy2tu2nfckpoqss7qora.b32.i2p:0
fh3yb7elyvnzmhxv2hap6ddqcym6lpfxafavkuhrrxk5sb3wshva.b32.i2p:0
fnhesnhbix6ua26b5jpbieas7s5lglvusmruk3tciov3wyry4g2q.b32.i2p:0
foc3ole3bfsxzz6sxufnwzhx72cijco6oefwggh6a7mx7kytbk3a.b32.i2p:0
foyb2sneia3ygbbjozz4wszcaznztjbgkae4d52iskyxxzku2xra.b32.i2p:0
fsdn2phijfbwo35ezvgtkzv4p7wp4ym3yfd72ucfcahnw524d22a.b32.i2p:0
fwex73tw3ebsysv3sziu4pl3pmgkbdm32mc73uyiswlcx7btcf2q.b32.i2p:0
fwiu4gd7i6da6gbslctxpetgkb7kz6bznemcsl7oy7f6aywmndvq.b32.i2p:0
fzuoiirfzhnml7egyor6b3bzthptsioe6zuwe64mn4pktmi7c4la.b32.i2p:0
g2ins5xhxtdd5m57rkopn2rm6mtr677ktmo26ymcrc2bz5v2igla.b32.i2p:0
g2mv4wdsdd423imdpfq5dd4fsifa6evmvdmj2pccb2nqtfas7dza.b32.i2p:0
g5ayhhbanipee5wyehvfsf5cuqn2djl6xvrcmuv2r7us6mrcl7da.b32.i2p:0
g5eujubxvzwiovihiedokkb7uwheiqb674rfa2xijsyyr3sexiwq.b32.i2p:0
g5yzfhaelbngq3zqfpufdrpntpqr5urnoteaxmnzqkcsfuqs5svq.b32.i2p:0
g6cxz6yy54bbkkjrklbq65ujlwom6i65sh2wbhe6zebnrciwhzsq.b32.i2p:0
g7oomoe6adb3qtwit5aztjx2lpnvkvopqgtb5xtdozara754miaq.b32.i2p:0
g7samwpj5lyi5hkrrwizzmzez5a5r33dq2uwa7ufi6pdv236qyda.b32.i2p:0
ga25oahtxga27pmece3snv2vlpcim4gitvzjl42mc3oxkhclxgja.b32.i2p:0
gco2hwi2rcbbapcxkzy2m5kaaui7csxqst337pycftz6kwyeraqa.b32.i2p:0
gd5r6jobykemsb3beip7kaham3tyfr23w7lrkjvo3zagrgbrgnjq.b32.i2p:0
gd6pjdoj6nniith2nkvd6pdhoq5rugxbm5emz5exlhieyc3hnbna.b32.i2p:0
ge7ppvshhfd2bf7eywnc3xepbeh5nzcqyqf5tdchoimt7nxhz2ca.b32.i2p:0
gfartwr6pkbz4a356heez436fw5im4thimitetn6sdsq55prb74q.b32.i2p:0
gh6mgvrqvx47hmgl2uhdn5623cdsrdbe3fwtgp2y72svvoi7gyua.b32.i2p:0
ghrzttcyxr2ujobdxvl5pljjfywy3hfyq4i4mqiha3t3uuiqn2da.b32.i2p:0
ghuf53y3dxdnxgjjxast56jcsjohoxffc45mbx5wvx23mt6q6nkq.b32.i2p:0
ghvmoyhep4sayhgen7c2pcg575aiihrwlcngm7lxxqtbymbgmiha.b32.i2p:0
gk3sjjgjcff2gxmxy3wejlxbgqbohxsnfxdmd2p5ybm5o3pgqj4a.b32.i2p:0
gmdyky27756xd4dcky734kuqiojgwdbhavz6ou73dpkg2xhwjrsq.b32.i2p:0
goe4yckghgepu2hsctbizoszs27r32hexxsovbbkqqi6t7n2k2wq.b32.i2p:0
gqerl5bp6brqik4pxagwldb6d2sy5enbxav7y2a4ttgeczlk6dzq.b32.i2p:0
gvlhwl5joqjjd7n76ve4tcbqn3rhzfy3ipmdwiql4cjfayyfiwyq.b32.i2p:0
gxj4yw7xhezc2oodjmmsfxmiopfzxjmbhmfkipcal5fivqfc2gfq.b32.i2p:0
gyccxcchiq47yfzcerb23dr57mqvqptip6pvnemasbd2vpbgs57q.b32.i2p:0
h2hcwns4deljblz6xbkba6e7eltqb75lh2gjpelgkxvg4ey5hp2q.b32.i2p:0
h3urnunwn6chzvbjvs5x7dvfauzwnozcxtj5vjjdyglnfmlzigzq.b32.i2p:0
h4k3d34tuim4gi4tfie5ulslg6jg3yqhafujajno4pmhy62yecna.b32.i2p:0
h7foalesr2keimfe7qv3fwygefwukvoojtr6mlgw5urw7jojjn6q.b32.i2p:0
hcv5zizlrdemafcezwzchu7klydbrquutmdvr5vwaawdcpcwouyq.b32.i2p:0
hfu5l2szzt7faqsbef2reqku7pdhxhfbi462pahejq4ykaeqgizq.b32.i2p:0
hglrt74vwbajhbaykjwkbjrdtptjxgnpg3w2crfphv2jss6of5ia.b32.i2p:0
hiewpc5jb63t2xlr37tbvzba4jywo74iei6hl4meadbj2jibow3a.b32.i2p:0
hnmrabzioiwxj64ih237rxf2zbdttfndiepp7vikt2jko7ovvrkq.b32.i2p:0
hnxxsx7stxzesijof4fgr4xxysunipnivnxc3lqj2lefs7k7dqfa.b32.i2p:0
hoclepz72rcrwjxzsgl4o7uvxih5uzyqkin77iovccxwyek45eyq.b32.i2p:0
hoislrpk3v4grtevg5mowggoi2zbltk3hfbgp23qht3zl4sn4eaa.b32.i2p:0
hpaio6vghijyxd6fxboef4f7ogxhusqcyetjbp3ymmmbv6tzmg2q.b32.i2p:0
hwd3yvybu435k2svvcowd4hgbk3yiemw34d5xauf3e6hr5t5wd3a.b32.i2p:0
hxuyh2weoko3iof7hhvffcira3yt3ggmxb5prio6tywor4vut6ia.b32.i2p:0
i2k32sb3fmkhemu2gzm7h4m24ubcgqdohhgq44qya7zbkrgw6mua.b32.i2p:0
i2zleprgvnwstip4ehhny44y4cf6mp7gqbl7y62x3yndjx3s7nia.b32.i2p:0
i6p5plk5yucb6klnedouoiubr47jpw5u6odvn3gwbtxqhmzwvvqq.b32.i2p:0
ic4ybawsjcxr4gfnwvp5go2wsugw6govevz2lmmef25z2mfva7iq.b32.i2p:0
iccnhyf2ma6m7vcbu23dp4erpz6vzf3emlrx22w5e2pie5hh2v3a.b32.i2p:0
iddzvtvx5l4mpfv3lkutmf3nptl5qxtzv3qyxlhwbkptz2mphyva.b32.i2p:0
idzlsjx4m6n3g4knql7h53bnnh2v62o2qt6monicpz7q56u2jwlq.b32.i2p:0
ifajz75zdk6w63v5zq6tadlq2cycyd3tkstultnqot2fnglgxpia.b32.i2p:0
ii7ra5loq7nw43kxjtr6tdhf6clvtnfqqatnaz2mtr6pf5hyelbq.b32.i2p:0
iiai66vnuffmhnjiu6wllnx474hwkpw5eqowj5k7i26z2ea7dd2q.b32.i2p:0
ij4nbzypgqlk6ztlevbjuly4m3uqantz36eyed57tciqhmlgxfqa.b32.i2p:0
ik3asfioedfgrzjszelqicxlnban7qfnvlnng2prol5iut7ltc2a.b32.i2p:0
iorno6nomjiens5qvzvdeav2mmizcxpp5wsbicdazpg3gvthqtaq.b32.i2p:0
isefwae7twhnzwgrhcfrvk5oxymgxpzuokuc5cywmo55is5nb4cq.b32.i2p:0
itrjkgswudaoyrrfmgpi4vtbowcwkpzs523lh44vbzwbmcz44rka.b32.i2p:0
ixhgawpp5anrlwxxgfun4zl3m5xhlxassszncph4i4e6aymb5fqq.b32.i2p:0
ixvv4njukuae6msnpatik45oucfaabpeisbauqxddhwnubu25ioa.b32.i2p:0
izrk5tzrxm4lq23qbdiaoxbzzhygipuucoyapz6ib4dprxmfrvhq.b32.i2p:0
j26gpaan5ablb56k4rtbeamv3ihd4vdzdv74dw4kkevxruapwarq.b32.i2p:0
j3lqwybu6vptuo27tpnkckliz2weani3pnzzbziwfsj6nqcb43la.b32.i2p:0
j4tjrfxnwcmbhkixmqlnotginhfxgfdvjahr6yn7j7rkbdqngh4a.b32.i2p:0
j63slhfjsmvtoetikb364pztywrlrv3rpk452mf3dyjizm4fbdra.b32.i2p:0
jbtdslz743oawsvgghp2traf2e67de67ec3dbigvyb6g5jotapoq.b32.i2p:0
jd43pc2l73ek6hk2tp6hiyada7ed7vshqo2fvxbga2daylcghfyq.b32.i2p:0
ji3bxuak6mmsvcppqrt2g27haiugobvqbyngt2n5cgtf4xmhyx6a.b32.i2p:0
jibaw7ynbnxueqsy7k7jyvoj6ldzbuckppfx5wozt7mftihy5vcq.b32.i2p:0
jiins2brur6m6dt35rr2rj7giaggvwcffz6lsvxcrcc5nfv2a56a.b32.i2p:0
jpl5utzbcmszv6xjynf4buz6hn3kra27xvfowplvjalpogrsxjhq.b32.i2p:0
jrvg22xvbmjyrkqg7mr622zhnda3ijtua65cqngwrven7sf5zd7q.b32.i2p:0
js2nuhxqxp7ocg6wh7n7dflcjiexkyfauski5hc2w2hke42mygca.b32.i2p:0
jspsip6bfqu55yxd45lf5kpbhn6bvtt6hgycixbzoyuwoabcenka.b32.i2p:0
jtgpesmlbpsvhv2jxzrokydnmad7aqbsx5f6ptyqol4ypwkn3zyq.b32.i2p:0
jxqyize2ct6mm3jvvzavm2zbccsoe5qd4ekqo7zgt75rzz3mni3q.b32.i2p:0
jyugnnxqhe6alidik6xclgxb33mx7jqzqosznijr4i6zaqavogma.b32.i2p:0
jzymnirkvpexwtbykienuhpcp6hf2r5hko7wjlvorhsfaojihf2q.b32.i2p:0
k2m4cxmgn7wnv37tupfq66ycjcwcd3xubhzhgjkxluxn4hzym65a.b32.i2p:0
k5oyn7higpqwarsh3ukdgmx3z6tvqcwju4xawrge6aaswrdnoo3a.b32.i2p:0
k67qwu4dtuehpxm6d2nl6ik23fvdtn52rmmznoh5qitd7wylmm3q.b32.i2p:0
kbq3zwwo46vvvhubrscfpwapbck2dx5lvyu3cs62s7ntjdyruh4q.b32.i2p:0
kcj5ifya5tnsgeyqlgxjigdnwy3q7gdodqikmfotsz6vbbtkfbqq.b32.i2p:0
kcqkothplemakipfpeajxmu4xsszpaxpprgtuv5tgfdaqejg2sqq.b32.i2p:0
kdc2f7exxzig43scf7r5clipy3ywkwxhdevguymkadcmhxalyxzq.b32.i2p:0
kehosmgk76fxnjywqjj6nqs4ohg4hsutljdzjo4sswhxlj5l5tca.b32.i2p:0
keoewoantu2e4yah736fplwr5omvzqdryadofqogk3hbwaskn6jq.b32.i2p:0
kh5svu6npgstymw2kuxamwnzalpu5jcmgx6gsliibsua23jds6rq.b32.i2p:0
kizk5v5e3khywdh35vwvztsub274pruigqnmumorv36otvncbpea.b32.i2p:0
kjdqyu7j6ojdhftlh6dd4do3ns6nhj544uzjt53p4cwhppg47mhq.b32.i2p:0
klfp44ljmaxoxhpymmnuj33d744ai2wcbj7o5i2cv5mkjbmjc3fa.b32.i2p:0
klsaj4g2jh7w7gxwctniktg3hqwspm7zlkwtsaxw4nu35jssjasq.b32.i2p:0
kouxxivmwywiwv77bvpe5lgamnhlcypan6urupymt3s56lvrnftq.b32.i2p:0
ks2nfolgkpdfg7pizwv6kueyqeqaixjru6ui5qktcycsyulppg7q.b32.i2p:0
ktjqkbyl3soy4kscrs23n2bidiismoq2jvsx7d7p42sxizgf46rq.b32.i2p:0
ktua3j43ijxhhhfeljsp32kdiuic5nlnfnkx3ealy7ojva4vwkoq.b32.i2p:0
kuzu73gzvlnog4cdtdk7edbusxr4pigknvwg2bjo6l46ugsgmrtq.b32.i2p:0
l6kwirv4m4vzzmg6lp4mpbu6k5jv2yjmdgsxxr67x6blm57i4dsq.b32.i2p:0
l7j3gpfyicterbchswmaasozruckfohtrnqssqttsxggjomlccwq.b32.i2p:0
l7lvurgolje5wjlbzjov5lwntoumxrlx6depd55memi6fy24bhba.b32.i2p:0
lckuhkvnnkh5gs3s4v4tdpesmdjiruqhfifgkszyfsgy6vx2h4ga.b32.i2p:0
ldl3a2gjjlj4sqmvbomn3gmj6xig344krwxy3gulhlcihyvqdsya.b32.i2p:0
lfm6pz6nqqm4ofhlkja4y63myjjumgrvh7qul2ejiimrl4izdgwa.b32.i2p:0
lfomaqlecc4ieyaldsm26o6affnlx6nsqup25wasmd3f26qeghpq.b32.i2p:0
lfuvzzzceuik5u5pnd2i67amegel5ua2rrnncxkyyc7bhteq73aa.b32.i2p:0
lg5h76b5n4r3ne7bwpf7be5byyncrapo7thhkuzaktblk63qvjsa.b32.i2p:0
lhl55njfnmt2fzbklcnunvscq22jx4nxd5p4pureu74442mrjgwa.b32.i2p:0
lprgmkc45te7skx7rffpz72ca5c3zdg3tabiksdboao5w4wceu5a.b32.i2p:0
lrah7acdsgopybg43shadwwiv6igezaw64i6jb5muqdg7dmhj3la.b32.i2p:0
m3rq24awypjmmimszz5cqsdwo7okpkjpilny4ss2vuxwq22fqdfq.b32.i2p:0
m45c54fio6dij4ywvnjosbokblhqsynyds4ywagrrrkzhznoryfq.b32.i2p:0
maqk6lnttwykae67lhms6car4py5p6w74ntyv7izskl7o5lr4x3q.b32.i2p:0
mbz4wyfeqtllccary2crak2qfovnaq2366vdddro76ihxcaavfpq.b32.i2p:0
mektdpdufe6p74i7ijumj5nw5ckjtphj3ic42fbpstgdlwpvqjaq.b32.i2p:0
mf6tmlegp7uga66cdael5376uaz4qd3wacuh44yvepa3kbu4fk3a.b32.i2p:0
mhgxec57s6h7eixgemsghlcuhmgh7m7p7phqd5kzmm4wovrp2pqq.b32.i2p:0
mjpulaafdyuanouslfpjcsvumi4edtckfu3ffn3ipabkxj4sn35q.b32.i2p:0
mrzn5dwt5suy7ywbc5rb3oqunxu4whkrarfdabh27rdzqu2lycoa.b32.i2p:0
muz6dlwaldiabrmv4goironrkejtjiaivtp5s4wy4xiktwu3firq.b32.i2p:0
mv7b44duaxqpzbdztnrdvnj6ypsp7yhs4z3dc2q64jov6pritmja.b32.i2p:0
mwevh5r5dkzddlo2ol6bojpdds3kno4xqoy6p6ulid3paamgrtla.b32.i2p:0
mwyjzdrgtypbwjyulw4ifetejz6xusqstvzylztsphpg2r2zf7ua.b32.i2p:0
nbxnyibgbf3awxxneu75a6xhvs5foxrrkfzwjywk7vs2pp7dfupq.b32.i2p:0
nghwktleeqp7j4zmii3u55hgxip3kd2xj2hm2hb7qrf5x3ym7cwq.b32.i2p:0
nkj2zabj5b4vhold33nz3kgp2x3i3es2l3iz64rxx7em7rkgubaq.b32.i2p:0
nluwsgpbk3cplcb2fpnfpjrhot2w7a6mtjggkqikudspysqlsceq.b32.i2p:0
nt72dtparurtk3ccvasllacdzg2ubtvc7jp2kzx3hs4dzvrtayqa.b32.i2p:0
ntxiyrlhss4r54zz762ugascfnpyucuzhvt2vdbjwysoyohlk7wq.b32.i2p:0
nuj7cpelk27czgrj7vcyv47qazkdlqfhaz53huzxohv32fn4raya.b32.i2p:0
nw5dd5rrmlmrkrf6ncqtivajhq2idmr5zluw5hv35tngsmngnprq.b32.i2p:0
nwfdwlblhudom3oqe32yzzuuj2sb37tjvlmimiru4coazi5freeq.b32.i2p:0
o2dfd5fx3mwyw6fig2qiesnl3foynovu2ifhixrni23uiw7gnaoa.b32.i2p:0
o4mhr3ptokcgwopb36okxwhreo27pqq7m3wnuczm5rbku7yatuoq.b32.i2p:0
o6vbupdnpd5bwvcx7ivaecgyo7x5vdu5em4va6cmx5iwcf5tyaca.b32.i2p:0
odbgdisp7y4fj5xqycwzibau7cwzen5wpjph6betdvgsicxx6q5q.b32.i2p:0
```

----------------------------------------

TITLE: Creating a Minisketch Instance in C
DESCRIPTION: Initializes a minisketch instance with specified field size, implementation number, and capacity. This creates a sketch that can reconcile up to 4 differences between sets with elements in the range 1 to 2^12-1.

LANGUAGE: c
CODE:
```
#include <stdio.h>
#include <assert.h>
#include "../include/minisketch.h"
int main(void) {

  minisketch *sketch_a = minisketch_create(12, 0, 4);
```

----------------------------------------

TITLE: Setting Custom Debug Log File Path in Bitcoin Core
DESCRIPTION: Command-line option that allows specifying an alternative location for the debug log file rather than using the default location.

LANGUAGE: text
CODE:
```
-debuglogfile=<file>
```

----------------------------------------

TITLE: Cloning Bitcoin Core Repository
DESCRIPTION: This command clones the Bitcoin Core source code repository from GitHub to the local machine.

LANGUAGE: bash
CODE:
```
git clone https://github.com/bitcoin/bitcoin.git
```

----------------------------------------

TITLE: Using the Translation Update Script
DESCRIPTION: Commands to synchronize translations using a helper script from the bitcoin-maintainer-tools repository. This script handles post-processing steps before committing translations.

LANGUAGE: sh
CODE:
```
python3 ../bitcoin-maintainer-tools/update-translations.py
git commit -a
```

----------------------------------------

TITLE: Deprecated RPC Option for banscore Field
DESCRIPTION: Configuration option to maintain access to the deprecated banscore field in getpeerinfo RPC.

LANGUAGE: bash
CODE:
```
-deprecatedrpc=banscore
```

----------------------------------------

TITLE: Thread Safety Analysis for Clang in LevelDB
DESCRIPTION: Detects and enables Clang's thread safety analysis feature which helps identify potential threading issues at compile time.

LANGUAGE: CMake
CODE:
```
# Test whether -Wthread-safety is available. See
# https://clang.llvm.org/docs/ThreadSafetyAnalysis.html
include(CheckCXXCompilerFlag)
check_cxx_compiler_flag(-Wthread-safety HAVE_CLANG_THREAD_SAFETY)
```

----------------------------------------

TITLE: Setting Up Dependencies for Bitcoin Components in CMake
DESCRIPTION: Includes necessary dependency configurations based on which components are being built. Adds Boost if needed and requires Libevent for daemon, GUI, CLI, tests, bench or fuzz binary builds.

LANGUAGE: cmake
CODE:
```
include(AddBoostIfNeeded)
add_boost_if_needed()

if(BUILD_DAEMON OR BUILD_GUI OR BUILD_CLI OR BUILD_TESTS OR BUILD_BENCH OR BUILD_FUZZ_BINARY)
  find_package(Libevent 2.1.8 MODULE REQUIRED)
endif()

include(cmake/introspection.cmake)

include(cmake/ccache.cmake)
```

----------------------------------------

TITLE: Installing Bitcoin Core to Windows Directory
DESCRIPTION: Command to install the compiled Bitcoin Core executables to a Windows directory. This copies the binaries to a specified path maintaining the same directory structure as in the release archive.

LANGUAGE: shell
CODE:
```
cmake --install build --prefix /mnt/c/workspace/bitcoin
```

----------------------------------------

TITLE: Cloning Bitcoin Core Repository
DESCRIPTION: Git command to clone the Bitcoin Core source code repository to begin the build process.

LANGUAGE: bash
CODE:
```
git clone https://github.com/bitcoin/bitcoin.git
```

----------------------------------------

TITLE: Setting TCP Keepalive for ZeroMQ Connections
DESCRIPTION: Command to configure TCP keepalive settings on GNU/Linux systems. This helps maintain connectivity when long-lived connections might be dropped by network equipment.

LANGUAGE: bash
CODE:
```
sudo sysctl -w net.ipv4.tcp_keepalive_time=600
```

----------------------------------------

TITLE: Committing Detached Codesign Payloads for macOS and Windows
DESCRIPTION: Sequence of shell commands for codesigners to commit detached signatures to the bitcoin-detached-sigs repository. This includes checking out the appropriate branch, cleaning and preparing the directories, and pushing the changes with a signed tag.

LANGUAGE: sh
CODE:
```
pushd ./bitcoin-detached-sigs
# checkout or create the appropriate branch for this release series
git checkout --orphan <branch>
# if you are the macOS codesigner
rm -rf osx
tar xf signature-osx.tar.gz
# if you are the windows codesigner
rm -rf win
tar xf signature-win.tar.gz
git add -A
git commit -m "<version>: {osx,win} signature for {rc,final}"
git tag -s "v${VERSION}" HEAD
git push the current branch and new tag
popd
```

----------------------------------------

TITLE: Viewing All Configuration Options
DESCRIPTION: CMake command to show all available configuration options for Bitcoin Core build.

LANGUAGE: bash
CODE:
```
cmake -B build -LH
```

----------------------------------------

TITLE: Doxygen Main Page Configuration with Navigation Links
DESCRIPTION: Doxygen markup for the Bitcoin project's main documentation page, including introduction text and navigation links to different sections of the documentation.

LANGUAGE: doxygen
CODE:
```
\mainpage notitle

\section intro_sec Introduction

This is the developer documentation of the reference client for an experimental new digital currency called Bitcoin,
which enables instant payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate
with no central authority: managing transactions and issuing money are carried out collectively by the network.

The software is a community-driven open source project, released under the MIT license.

See https://github.com/bitcoin/bitcoin and https://bitcoincore.org/ for further information about the project.

\section Navigation
Use <a href="modules.html"><code>Modules</code></a>, <a href="namespaces.html"><code>Namespaces</code></a>, <a href="classes.html"><code>Classes</code></a>, or <a href="files.html"><code>Files</code></a> at the top of the page to start navigating the code.
```

----------------------------------------

TITLE: Setting Up Include Directories and Configuration for LevelDB
DESCRIPTION: Configures include directories and port configuration for LevelDB. It sets up paths for the public headers and port-specific configuration.

LANGUAGE: CMake
CODE:
```
set(LEVELDB_PUBLIC_INCLUDE_DIR "include/leveldb")
set(LEVELDB_PORT_CONFIG_DIR "include/port")

configure_file(
  "port/port_config.h.in"
  "${PROJECT_BINARY_DIR}/${LEVELDB_PORT_CONFIG_DIR}/port_config.h"
)

include_directories(
  "${PROJECT_BINARY_DIR}/include"
  "."
)
```

----------------------------------------

TITLE: Configuring Dependencies for Bitcoin Kernel Library
DESCRIPTION: Sets up the private and public dependencies for the bitcoinkernel library. Private dependencies include core interfaces, crypto libraries, and database components, while public dependencies expose Boost headers.

LANGUAGE: CMake
CODE:
```
target_link_libraries(bitcoinkernel
  PRIVATE
    core_interface
    bitcoin_clientversion
    bitcoin_crypto
    leveldb
    secp256k1
    $<TARGET_NAME_IF_EXISTS:USDT::headers>
  PUBLIC
    Boost::headers
)
```

----------------------------------------

TITLE: Adding Bitcoin Project Subdirectories in CMake
DESCRIPTION: Adds subdirectories for test, documentation, and source code to be included in the build process. This establishes the basic project structure for the Bitcoin build system.

LANGUAGE: CMake
CODE:
```
add_subdirectory(test)
add_subdirectory(doc)

add_subdirectory(src)
```

----------------------------------------

TITLE: Configuring Bitcoin Core Clang-Tidy Project in CMake
DESCRIPTION: Sets up the Bitcoin Core clang-tidy project with version information and language requirements. The project is configured to build custom clang-tidy checks for Bitcoin Core.

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.22)

project(bitcoin-tidy
    VERSION
    1.0.0
    DESCRIPTION "clang-tidy checks for Bitcoin Core"
    LANGUAGES CXX)
```

----------------------------------------

TITLE: Configuring Bitcoin Core with Descriptor Wallet and GUI
DESCRIPTION: Configures the build with descriptor wallet support and GUI enabled, while disabling legacy wallet support.

LANGUAGE: bash
CODE:
```
cmake -B build -DWITH_BDB=OFF -DBUILD_GUI=ON
```

----------------------------------------

TITLE: Creating Bitcoin Configuration
DESCRIPTION: Commands to create an empty Bitcoin configuration file with proper permissions before running Bitcoin Core.

LANGUAGE: shell
CODE:
```
mkdir -p "/Users/${USER}/Library/Application Support/Bitcoin"

touch "/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf"

chmod 600 "/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf"
```

----------------------------------------

TITLE: Implementing Interface Methods with Serializable Parameters in C++
DESCRIPTION: Examples of proper interface method implementations that use serializable parameters and return types. The good example takes a string argument and returns an interface class pointer, while the bad example returns a reference that can't be used across processes.

LANGUAGE: c++
CODE:
```
// Good: takes string argument and returns interface class pointer
virtual unique_ptr<interfaces::Wallet> loadWallet(std::string filename) = 0;

// Bad: returns CWallet reference that can't be used from another process
virtual CWallet& loadWallet(std::string filename) = 0;
```

----------------------------------------

TITLE: Committing Codesigned Signatures to guix.sigs Repository
DESCRIPTION: Commands for codesigners to commit their attestations to the guix.sigs repository. This includes adding the signature files and committing them with proper attribution.

LANGUAGE: sh
CODE:
```
pushd ./guix.sigs
git add "${VERSION}/${SIGNER}"/all.SHA256SUMS{,.asc}
git commit -m "Add attestations by ${SIGNER} for ${VERSION} codesigned"
popd
```

----------------------------------------

TITLE: Installing Bitcoin via PPA on Ubuntu Linux
DESCRIPTION: Commands to add the Bitcoin PPA repository maintained by Matt Corallo and install the bitcoin-qt package on Ubuntu Linux systems for automatic updates.

LANGUAGE: bash
CODE:
```
sudo apt-add-repository ppa:bitcoin/bitcoin
sudo apt-get update
```

LANGUAGE: bash
CODE:
```
sudo apt-get install bitcoin-qt
```

----------------------------------------

TITLE: Adding Platform-Specific Sources to LevelDB
DESCRIPTION: Adds platform-specific source files to the LevelDB target based on whether building for Windows or POSIX platforms. Windows uses env_windows.cc while POSIX uses env_posix.cc.

LANGUAGE: CMake
CODE:
```
if (WIN32)
  target_sources(leveldb
    PRIVATE
      "util/env_windows.cc"
      "util/windows_logger.h"
  )
else (WIN32)
  target_sources(leveldb
    PRIVATE
      "util/env_posix.cc"
      "util/posix_logger.h"
  )
endif (WIN32)
```

----------------------------------------

TITLE: Building Bitcoin CLI Library with CMake
DESCRIPTION: Defines the bitcoin_cli static library used by the CLI client. This library provides core RPC client functionality and depends on core_interface and univalue components.

LANGUAGE: CMake
CODE:
```
add_library(bitcoin_cli STATIC EXCLUDE_FROM_ALL
  compat/stdin.cpp
  rpc/client.cpp
)
target_link_libraries(bitcoin_cli
  PUBLIC
    core_interface
    univalue
)
```

----------------------------------------

TITLE: Set Element Power Series Definition
DESCRIPTION: Mathematical formula showing how a field element m is mapped to a formal power series for use in Minisketch sketches. This defines the foundation for representing set elements.

LANGUAGE: math
CODE:
```
S(m) = 1 + mx + m^2x^2 + m^3x^3 + ...
```

----------------------------------------

TITLE: Compiling and Testing Bitcoin Core on OpenBSD
DESCRIPTION: Builds Bitcoin Core and runs the test suite using the configured build directory.

LANGUAGE: bash
CODE:
```
cmake --build build     # Use "-j N" for N parallel jobs.
ctest --test-dir build  # Use "-j N" for N parallel tests. Some tests are disabled if Python 3 is not available.
```

----------------------------------------

TITLE: Including Compiler and Linker Flag Utility Modules
DESCRIPTION: Includes CMake modules for trying to append C++ compiler flags and linker flags in a portable way.

LANGUAGE: cmake
CODE:
```
include(TryAppendCXXFlags)
include(TryAppendLinkerFlag)
```

----------------------------------------

TITLE: Advanced git range-diff command for rebases with merge-base
DESCRIPTION: Demonstrates a more complex range-diff command that works for rebased branches where commits may have been squashed. Uses git merge-base to find the common ancestor and compares specific commit ranges.

LANGUAGE: sh
CODE:
```
PREV=P5 N=4 && git range-diff `git merge-base --all HEAD $PREV`...$PREV HEAD~$N...HEAD
```

----------------------------------------

TITLE: Installing Test Suite Dependencies
DESCRIPTION: Installs Python 3 and required Python packages to run the Bitcoin Core test suite for development and testing.

LANGUAGE: bash
CODE:
```
pkg install python3 databases/py-sqlite3 net/py-pyzmq
```

----------------------------------------

TITLE: Avoiding TestBlockValidity crash in Bitcoin Core
DESCRIPTION: A commit (da65606) that prevents a crash when starting TestBlockValidity with gen=1 parameter.

LANGUAGE: Markdown
CODE:
```
- `da65606` Avoid crash on start in TestBlockValidity with gen=1.
```

----------------------------------------

TITLE: Registering LevelDB Static Build Test Cases
DESCRIPTION: Registers additional test cases for LevelDB that are only enabled when building static libraries. Includes platform-specific tests for Windows and POSIX environments.

LANGUAGE: CMake
CODE:
```
  if(NOT BUILD_SHARED_LIBS)
    leveldb_test("db/autocompact_test.cc")
    leveldb_test("db/corruption_test.cc")
    leveldb_test("db/db_test.cc")
    leveldb_test("db/dbformat_test.cc")
    leveldb_test("db/filename_test.cc")
    leveldb_test("db/log_test.cc")
    leveldb_test("db/recovery_test.cc")
    leveldb_test("db/skiplist_test.cc")
    leveldb_test("db/version_edit_test.cc")
    leveldb_test("db/version_set_test.cc")
    leveldb_test("db/write_batch_test.cc")

    leveldb_test("helpers/memenv/memenv_test.cc")

    leveldb_test("table/filter_block_test.cc")
    leveldb_test("table/table_test.cc")

    leveldb_test("util/arena_test.cc")
    leveldb_test("util/bloom_test.cc")
    leveldb_test("util/cache_test.cc")
    leveldb_test("util/coding_test.cc")
    leveldb_test("util/crc32c_test.cc")
    leveldb_test("util/hash_test.cc")
    leveldb_test("util/logging_test.cc")

    # TODO(costan): This test also uses
    #               "util/env_{posix|windows}_test_helper.h"
    if (WIN32)
      leveldb_test("util/env_windows_test.cc")
    else (WIN32)
      leveldb_test("util/env_posix_test.cc")
    endif (WIN32)
  endif(NOT BUILD_SHARED_LIBS)
endif(LEVELDB_BUILD_TESTS)
```

----------------------------------------

TITLE: Disabling Listening Mode in Bitcoin Core
DESCRIPTION: Disables the listening functionality which reduces the number of inbound connections, resulting in fewer total connections and therefore less network traffic.

LANGUAGE: bash
CODE:
```
-listen=0
```

----------------------------------------

TITLE: Building Bitcoin Transaction Utility with CMake
DESCRIPTION: Sets up the bitcoin-tx executable build when BUILD_TX is enabled. This utility provides transaction manipulation functionality and links with core interface, common components, utilities, and univalue library.

LANGUAGE: CMake
CODE:
```
if(BUILD_TX)
  add_executable(bitcoin-tx bitcoin-tx.cpp)
  add_windows_resources(bitcoin-tx bitcoin-tx-res.rc)
  target_link_libraries(bitcoin-tx
    core_interface
    bitcoin_common
    bitcoin_util
    univalue
  )
  install_binary_component(bitcoin-tx HAS_MANPAGE)
endif()
```

----------------------------------------

TITLE: Building Bitcoin CLI Client with CMake
DESCRIPTION: Configures the bitcoin-cli executable when BUILD_CLI is enabled. Links with core interface, bitcoin_cli library, common components, utilities, and libevent dependencies, and sets up installation with man pages.

LANGUAGE: CMake
CODE:
```
if(BUILD_CLI)
  add_executable(bitcoin-cli bitcoin-cli.cpp)
  add_windows_resources(bitcoin-cli bitcoin-cli-res.rc)
  target_link_libraries(bitcoin-cli
    core_interface
    bitcoin_cli
    bitcoin_common
    bitcoin_util
    libevent::core
    libevent::extra
  )
  install_binary_component(bitcoin-cli HAS_MANPAGE)
endif()
```

----------------------------------------

TITLE: Installing QR Code Encoding Library on OpenBSD
DESCRIPTION: Installs the libqrencode library to enable QR code generation functionality in the Bitcoin Core GUI.

LANGUAGE: bash
CODE:
```
pkg_add libqrencode
```

----------------------------------------

TITLE: Installing QR Code Encoding Support
DESCRIPTION: Installs the libqrencode library to enable QR code generation for Bitcoin addresses in the GUI.

LANGUAGE: bash
CODE:
```
pkg install libqrencode
```

----------------------------------------

TITLE: Signing and finalizing the PSBT with Bitcoin Core offline wallet
DESCRIPTION: Uses the private keys in the offline wallet to sign the PSBT. The walletprocesspsbt command processes, signs, and finalizes the transaction, exporting the result to a file for broadcasting.

LANGUAGE: sh
CODE:
```
[offline]$ ./build/bin/bitcoin-cli -signet -rpcwallet="offline_wallet" walletprocesspsbt \
                $(cat /path/to/funded_psbt.txt) \
                | jq -r .hex \
                >> /path/to/final_psbt.txt
```

----------------------------------------

TITLE: Starting Bitcoin Core with I2P Support
DESCRIPTION: Typical command to start Bitcoin Core with I2P support by specifying the SAM proxy address and port. This connects Bitcoin Core to an I2P router running on the local machine.

LANGUAGE: bash
CODE:
```
bitcoind -i2psam=127.0.0.1:7656
```

----------------------------------------

TITLE: Viewing perf profiling results with command line tools
DESCRIPTION: Command to view the performance profiling data collected during test execution. It uses perf report to analyze the data file and pipes it through c++filt to demangle C++ symbols.

LANGUAGE: bash
CODE:
```
perf report -i /path/to/datadir/send-big-msgs.perf.data.xxxx --stdio | c++filt | less
```

----------------------------------------

TITLE: Creating Slices from Strings in LevelDB C++
DESCRIPTION: This code demonstrates how to create Slice objects from C++ strings and C-style strings. Slices are efficient references to data used by LevelDB for keys and values.

LANGUAGE: c++
CODE:
```
leveldb::Slice s1 = "hello";

std::string str("world");
leveldb::Slice s2 = str;
```

----------------------------------------

TITLE: Building Bitcoin Utility Program with CMake
DESCRIPTION: Configures the bitcoin-util executable build when BUILD_UTIL is enabled. Links with core interface, common components, and utility libraries, and sets up installation with man pages.

LANGUAGE: CMake
CODE:
```
if(BUILD_UTIL)
  add_executable(bitcoin-util bitcoin-util.cpp)
  add_windows_resources(bitcoin-util bitcoin-util-res.rc)
  target_link_libraries(bitcoin-util
    core_interface
    bitcoin_common
    bitcoin_util
  )
  install_binary_component(bitcoin-util HAS_MANPAGE)
endif()
```

----------------------------------------

TITLE: Installing Test Suite Dependencies for Bitcoin Core on OpenBSD
DESCRIPTION: Installs Python 3 and the ZeroMQ Python bindings required to run the Bitcoin Core test suite.

LANGUAGE: bash
CODE:
```
pkg_add python py3-zmq  # Select the newest version of the python package if necessary.
```

----------------------------------------

TITLE: Markdown Link to Bitcoin Build Documentation
DESCRIPTION: A relative hyperlink using markdown syntax that points to various build documentation files in the /doc directory. The wildcard pattern (build-*.md) indicates there are multiple build files for different platforms or configurations.

LANGUAGE: markdown
CODE:
```
[doc/build-\*.md](/doc)
```

----------------------------------------

TITLE: Using clang-format-diff.py with git diffs
DESCRIPTION: Example of using the clang-format-diff.py script to format code changes in the last commit according to the project's clang-format style.

LANGUAGE: bash
CODE:
```
git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v
```

----------------------------------------

TITLE: Configuring Bitcoin Core in Disable-Wallet Mode
DESCRIPTION: CMake command to build Bitcoin Core without wallet functionality, reducing dependencies.

LANGUAGE: cmake
CODE:
```
cmake -B build -DENABLE_WALLET=OFF
```

----------------------------------------

TITLE: Installing OpenBSD Dependencies
DESCRIPTION: Command to install required dependencies for building Bitcoin Core on OpenBSD systems.

LANGUAGE: bash
CODE:
```
pkg_add bash gmake gtar
```

----------------------------------------

TITLE: Defining a Descriptor with Multiple Derivation Paths
DESCRIPTION: Example of a descriptor that specifies multiple derivation paths using tuples of indexes. This allows defining receiving and change addresses from the same extended keys in a single descriptor.

LANGUAGE: plaintext
CODE:
```
multi(2,xpub.../<0;1;2>/0/*,xpub.../<2;3;4>/*)
```

----------------------------------------

TITLE: Alternative Function Documentation Style
DESCRIPTION: An alternative Doxygen-compatible comment style for documenting functions using triple slash.

LANGUAGE: c++
CODE:
```
///
/// ... Description ...
///
bool function2(int arg1, const char *arg2)
```

----------------------------------------

TITLE: Finding LLVM and Clang-Tidy Dependencies in CMake
DESCRIPTION: Locates the required LLVM package and clang-tidy executable. It supports version-specific clang-tidy binaries and outputs the found versions to the build log.

LANGUAGE: CMake
CODE:
```
find_package(LLVM REQUIRED CONFIG)
find_program(CLANG_TIDY_EXE NAMES "clang-tidy-${LLVM_VERSION_MAJOR}" "clang-tidy" HINTS ${LLVM_TOOLS_BINARY_DIR})
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Found clang-tidy: ${CLANG_TIDY_EXE}")
```

----------------------------------------

TITLE: Including Qt Subdirectory for GUI Build with CMake
DESCRIPTION: Conditionally includes the Qt subdirectory when building the GUI component (Bitcoin Core wallet interface).

LANGUAGE: CMake
CODE:
```
if(BUILD_GUI)
  add_subdirectory(qt)
endif()
```

----------------------------------------

TITLE: Converting Slices to Strings in LevelDB C++
DESCRIPTION: This snippet shows how to convert a LevelDB Slice back to a standard C++ string using the ToString() method, and verifies the conversion with an assertion.

LANGUAGE: c++
CODE:
```
std::string str = s1.ToString();
assert(str == std::string("hello"));
```

----------------------------------------

TITLE: Adding a New Language to Bitcoin QRC Resource File
DESCRIPTION: Example XML entry for adding a new language to the Bitcoin locale resource file. This demonstrates the proper format for including a translation file in the resource system.

LANGUAGE: xml
CODE:
```
<qresource prefix="/translations">
    <file alias="en">locale/bitcoin_en.qm</file>
    ...
</qresource>
```

----------------------------------------

TITLE: Installing macOS Cross-Compilation Dependencies
DESCRIPTION: Command to install the required packages for cross-compiling Bitcoin Core for macOS on a Debian/Ubuntu system.

LANGUAGE: bash
CODE:
```
apt install clang lld llvm zip
```

----------------------------------------

TITLE: Installing Common Dependencies for Debian/Ubuntu
DESCRIPTION: Command to install the common dependencies required for building Bitcoin Core on Debian/Ubuntu systems.

LANGUAGE: bash
CODE:
```
apt install cmake curl make patch
```

----------------------------------------

TITLE: Berkeley DB Configuration for Legacy Bitcoin Wallet Support
DESCRIPTION: Command sequence for configuring Bitcoin Core build with custom Berkeley DB path for legacy wallet compatibility.

LANGUAGE: bash
CODE:
```
make -C depends NO_BOOST=1 NO_LIBEVENT=1 NO_QT=1 NO_ZMQ=1 NO_USDT=1
...
to: /path/to/bitcoin/depends/x86_64-pc-linux-gnu
```

----------------------------------------

TITLE: Dividing by 2^N Modulo M in Python
DESCRIPTION: Two functions for updating d and e values with modular arithmetic. First, div2n computes x/2^N mod M given the precomputed inverse of M modulo 2^N. Then, update_de applies the transition matrix to [d, e] using the modular division.

LANGUAGE: python
CODE:
```
def div2n(M, Mi, x):
    """Compute x/2^N mod M, given Mi = 1/M mod 2^N."""
    assert (M * Mi) % 2**N == 1
    # Find a factor m such that m*M has the same bottom N bits as x. We want:
    #     (m * M) mod 2^N = x mod 2^N
    # <=> m mod 2^N = (x / M) mod 2^N
    # <=> m mod 2^N = (x * Mi) mod 2^N
    m = (Mi * x) % 2**N
    # Subtract that multiple from x, cancelling its bottom N bits.
    x -= m * M
    # Now a clean division by 2^N is possible.
    assert x % 2**N == 0
    return (x >> N) % M

def update_de(d, e, t, M, Mi):
    """Multiply matrix t/2^N with [d, e], modulo M."""
    u, v, q, r = t
    cd, ce = u*d + v*e, q*d + r*e
    return div2n(M, Mi, cd), div2n(M, Mi, ce)
```

----------------------------------------

TITLE: Generating Doxygen Documentation
DESCRIPTION: Commands to install dependencies and build the Doxygen documentation for the project.

LANGUAGE: sh
CODE:
```
# Linux dependency installation
sudo apt install doxygen graphviz

# MacOS dependency installation
brew install doxygen graphviz

# Building documentation
cmake --build build --target docs
```

----------------------------------------

TITLE: Creating Main secp256k1 Library Target in CMake
DESCRIPTION: Defines the main secp256k1 library target with explicit inclusion of objects from the precomputed library rather than linking, to prevent them from being exported.

LANGUAGE: CMake
CODE:
```
# Add objects explicitly rather than linking to the object libs to keep them
# from being exported.
add_library(secp256k1 secp256k1.c $<TARGET_OBJECTS:secp256k1_precomputed>)
```

----------------------------------------

TITLE: Displaying Available Lint Checks
DESCRIPTION: Command to list all available individual lint checks in the test runner using the help flag.

LANGUAGE: sh
CODE:
```
( cd ./test/lint/test_runner/ && RUST_BACKTRACE=1 cargo run -- --help )
```

----------------------------------------

TITLE: Setting Build Variables for Bitcoin Dependencies
DESCRIPTION: Example of defining the set_vars function that contains build variables for a package. This function is used to customize compiler flags, environment variables, and other build options.

LANGUAGE: makefile
CODE:
```
define $(package)_set_vars
...
endef
```

----------------------------------------

TITLE: Building CRC32C for Android with CMake
DESCRIPTION: Command for building the CRC32C library against the Android NDK, targeting ARM64 architecture. This is useful for benchmarking on ARM processors.

LANGUAGE: bash
CODE:
```
cmake .. -DCMAKE_SYSTEM_NAME=Android -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \
    -DCMAKE_ANDROID_NDK=$HOME/Library/Android/sdk/ndk-bundle \
    -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang \
    -DCMAKE_ANDROID_STL_TYPE=c++_static -DCRC32C_USE_GLOG=0 \
    -DCMAKE_BUILD_TYPE=Release && cmake --build .
```

----------------------------------------

TITLE: Creating Custom Filter Policy in LevelDB with C++
DESCRIPTION: This snippet demonstrates how to implement a custom filter policy compatible with a custom comparator. It creates a filter policy that ignores trailing spaces when creating filters.

LANGUAGE: c++
CODE:
```
class CustomFilterPolicy : public leveldb::FilterPolicy {
 private:
  FilterPolicy* builtin_policy_;

 public:
  CustomFilterPolicy() : builtin_policy_(NewBloomFilterPolicy(10)) {}
  ~CustomFilterPolicy() { delete builtin_policy_; }

  const char* Name() const { return "IgnoreTrailingSpacesFilter"; }

  void CreateFilter(const Slice* keys, int n, std::string* dst) const {
    // Use builtin bloom filter code after removing trailing spaces
    std::vector<Slice> trimmed(n);
    for (int i = 0; i < n; i++) {
      trimmed[i] = RemoveTrailingSpaces(keys[i]);
    }
    return builtin_policy_->CreateFilter(&trimmed[i], n, dst);
  }
};
```

----------------------------------------

TITLE: Installing NSIS on Ubuntu/Debian for Windows Installer Build
DESCRIPTION: Command to install NSIS (Nullsoft Scriptable Install System) on Ubuntu or Debian, which is required for building the Windows installer with the 'deploy' build target.

LANGUAGE: shell
CODE:
```
apt install nsis
```

----------------------------------------

TITLE: Adding User to Tor Group
DESCRIPTION: Command to add a user to the Tor group, allowing the user running bitcoind to access Tor's authentication cookie for control socket API access.

LANGUAGE: bash
CODE:
```
usermod -a -G ${TORGROUP} ${USER}
```

----------------------------------------

TITLE: Example Qt Translation in C++
DESCRIPTION: Demonstrates how to mark strings for translation in Qt C++ code using the tr() function. This example shows how to create a translatable toolbar label.

LANGUAGE: cpp
CODE:
```
QToolBar *toolbar = addToolBar(tr("Tabs toolbar"));
```

----------------------------------------

TITLE: Configuring Bitcoin Core Build with LLVM/Clang for Coverage Reporting
DESCRIPTION: Commands for configuring Bitcoin Core build using LLVM/Clang compiler with coverage instrumentation flags.

LANGUAGE: shell
CODE:
```
# MacOS may instead require `-DCMAKE_C_COMPILER="$(brew --prefix llvm)/bin/clang" -DCMAKE_CXX_COMPILER="$(brew --prefix llvm)/bin/clang++"`
cmake -B build -DCMAKE_C_COMPILER="clang" \
   -DCMAKE_CXX_COMPILER="clang++" \
   -DAPPEND_CFLAGS="-fprofile-instr-generate -fcoverage-mapping" \
   -DAPPEND_CXXFLAGS="-fprofile-instr-generate -fcoverage-mapping" \
   -DAPPEND_LDFLAGS="-fprofile-instr-generate -fcoverage-mapping"
cmake --build build # Use "-j N" here for N parallel jobs.
```

----------------------------------------

TITLE: Restricting Bitcoin Core Connections to CJDNS Network
DESCRIPTION: Configuration option to make automatic outbound connections only to CJDNS addresses. This can be combined with other network types and helps when specifically wanting to leverage the CJDNS network.

LANGUAGE: bash
CODE:
```
-onlynet=cjdns
```

----------------------------------------

TITLE: Calculating Library Version Information in CMake
DESCRIPTION: Calculates soversion and version properties for the secp256k1 library using libtool-compatible version calculations to ensure consistent versioning across build systems.

LANGUAGE: CMake
CODE:
```
# This emulates Libtool to make sure Libtool and CMake agree on the ABI version,
# see below "Calculate the version variables" in build-aux/ltmain.sh.
math(EXPR ${PROJECT_NAME}_soversion "${${PROJECT_NAME}_LIB_VERSION_CURRENT} - ${${PROJECT_NAME}_LIB_VERSION_AGE}")
set_target_properties(secp256k1 PROPERTIES
  SOVERSION ${${PROJECT_NAME}_soversion}
)
```

----------------------------------------

TITLE: Defining Bitcoin Utility Static Library with Source Files in CMake
DESCRIPTION: Creates a static library named bitcoin_util that includes various utility source files. The library is excluded from the default build target with EXCLUDE_FROM_ALL flag, meaning it will only be built when explicitly required by another target.

LANGUAGE: CMake
CODE:
```
add_library(bitcoin_util STATIC EXCLUDE_FROM_ALL
  asmap.cpp
  batchpriority.cpp
  bip32.cpp
  bytevectorhash.cpp
  chaintype.cpp
  check.cpp
  exception.cpp
  feefrac.cpp
  fs.cpp
  fs_helpers.cpp
  hasher.cpp
  moneystr.cpp
  rbf.cpp
  readwritefile.cpp
  serfloat.cpp
  signalinterrupt.cpp
  sock.cpp
  strencodings.cpp
  string.cpp
  syserror.cpp
  thread.cpp
  threadinterrupt.cpp
  threadnames.cpp
  time.cpp
  tokenpipe.cpp
  ../logging.cpp
  ../random.cpp
  ../randomenv.cpp
  ../streams.cpp
  ../support/lockedpool.cpp
  ../sync.cpp
)
```

----------------------------------------

TITLE: Extracting Xcode XIP on macOS
DESCRIPTION: Command to extract the Xcode.app from the downloaded XIP archive on a macOS system using the built-in xip tool.

LANGUAGE: bash
CODE:
```
xip -x Xcode_15.xip
```

----------------------------------------

TITLE: Configuring CMake with Clang for clang-tidy
DESCRIPTION: Commands to configure the project with Clang as the compiler and enable compile commands export for clang-tidy.

LANGUAGE: sh
CODE:
```
cmake -B build -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
cmake --build build -j $(nproc)
```

----------------------------------------

TITLE: Installing Xcode Command Line Tools
DESCRIPTION: Command to install the Xcode Command Line Tools, which are required build tools for compiling Bitcoin Core from source.

LANGUAGE: bash
CODE:
```
xcode-select --install
```

----------------------------------------

TITLE: Additional I2P Configuration Options
DESCRIPTION: Additional configuration options for I2P in Bitcoin Core, including debug logging for I2P-related information and limiting connections to only I2P networks.

LANGUAGE: config
CODE:
```
-debug=i2p
```

LANGUAGE: config
CODE:
```
-onlynet=i2p
```

----------------------------------------

TITLE: Generating Coverage Profile Data with LLVM/Clang in Bitcoin Core
DESCRIPTION: Commands for generating and merging raw profile data from tests execution using LLVM profiling tools.

LANGUAGE: shell
CODE:
```
# Create directory for raw profile data
mkdir -p build/raw_profile_data

# Run tests to generate profiles
LLVM_PROFILE_FILE="$(pwd)/build/raw_profile_data/%m_%p.profraw" ctest --test-dir build # Use "-j N" here for N parallel jobs.
LLVM_PROFILE_FILE="$(pwd)/build/raw_profile_data/%m_%p.profraw" build/test/functional/test_runner.py # Use "-j N" here for N parallel jobs

# Merge all the raw profile data into a single file
find build/raw_profile_data -name "*.profraw" | xargs llvm-profdata merge -o build/coverage.profdata
```

----------------------------------------

TITLE: Configuring Installation Rules for secp256k1 in CMake
DESCRIPTION: Sets up installation rules for the secp256k1 library, headers, and CMake package configuration files when SECP256K1_INSTALL is enabled, handling conditional module header installation.

LANGUAGE: CMake
CODE:
```
if(SECP256K1_INSTALL)
  install(TARGETS secp256k1
    EXPORT ${PROJECT_NAME}-targets
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  )
  set(${PROJECT_NAME}_headers
    "${PROJECT_SOURCE_DIR}/include/secp256k1.h"
    "${PROJECT_SOURCE_DIR}/include/secp256k1_preallocated.h"
  )
  if(SECP256K1_ENABLE_MODULE_ECDH)
    list(APPEND ${PROJECT_NAME}_headers "${PROJECT_SOURCE_DIR}/include/secp256k1_ecdh.h")
  endif()
  if(SECP256K1_ENABLE_MODULE_RECOVERY)
    list(APPEND ${PROJECT_NAME}_headers "${PROJECT_SOURCE_DIR}/include/secp256k1_recovery.h")
  endif()
  if(SECP256K1_ENABLE_MODULE_EXTRAKEYS)
    list(APPEND ${PROJECT_NAME}_headers "${PROJECT_SOURCE_DIR}/include/secp256k1_extrakeys.h")
  endif()
  if(SECP256K1_ENABLE_MODULE_SCHNORRSIG)
    list(APPEND ${PROJECT_NAME}_headers "${PROJECT_SOURCE_DIR}/include/secp256k1_schnorrsig.h")
  endif()
  if(SECP256K1_ENABLE_MODULE_MUSIG)
    list(APPEND ${PROJECT_NAME}_headers "${PROJECT_SOURCE_DIR}/include/secp256k1_musig.h")
  endif()
  if(SECP256K1_ENABLE_MODULE_ELLSWIFT)
    list(APPEND ${PROJECT_NAME}_headers "${PROJECT_SOURCE_DIR}/include/secp256k1_ellswift.h")
  endif()
  install(FILES ${${PROJECT_NAME}_headers}
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

  install(EXPORT ${PROJECT_NAME}-targets
    FILE ${PROJECT_NAME}-targets.cmake
    NAMESPACE ${PROJECT_NAME}::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  )

  include(CMakePackageConfigHelpers)
  configure_package_config_file(
    ${PROJECT_SOURCE_DIR}/cmake/config.cmake.in
    ${PROJECT_NAME}-config.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
    NO_SET_AND_CHECK_MACRO
  )
  write_basic_package_version_file(${PROJECT_NAME}-config-version.cmake
    COMPATIBILITY SameMinorVersion
  )

  install(
    FILES
      ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
      ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  )

  include(GeneratePkgConfigFile)
  generate_pkg_config_file(${PROJECT_SOURCE_DIR}/libsecp256k1.pc.in)
  install(
    FILES
      ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
  )
endif()
```

----------------------------------------

TITLE: Configuring LCOV Options for Branch Coverage in Bitcoin Core
DESCRIPTION: Command for enabling branch coverage in LCOV 2.x when generating test coverage reports for Bitcoin Core.

LANGUAGE: shell
CODE:
```
cmake -DLCOV_OPTS="--rc branch_coverage=1" -P build/Coverage.cmake
```

----------------------------------------

TITLE: Querying Available CJDNS Peers using Hyperboria Tools
DESCRIPTION: Commands to clone the Hyperboria peers repository and test for available public CJDNS peers. This helps in finding peers to connect to the CJDNS network, which is required before using it with Bitcoin Core.

LANGUAGE: bash
CODE:
```
git clone https://github.com/hyperboria/peers hyperboria-peers
cd hyperboria-peers
./testAvailable.py
```

----------------------------------------

TITLE: Adding Elements to a Minisketch in C
DESCRIPTION: Demonstrates adding elements to a minisketch. This code adds integers from 3000 to 3009 to the sketch. Adding an element twice removes it due to set semantics.

LANGUAGE: c
CODE:
```
  for (int i = 3000; i < 3010; ++i) {
    minisketch_add_uint64(sketch_a, i);
  }
```

----------------------------------------

TITLE: Incorrect Slice Usage Example in LevelDB C++
DESCRIPTION: This code demonstrates a buggy pattern when using Slices, where the backing storage (a string) goes out of scope while the Slice is still in use, potentially causing memory access errors.

LANGUAGE: c++
CODE:
```
leveldb::Slice slice;
if (...) {
  std::string str = ...;
  slice = str;
}
Use(slice);
```

----------------------------------------

TITLE: Installing Required Dependencies with Homebrew
DESCRIPTION: Command to install the basic required dependencies for building Bitcoin Core using the Homebrew package manager.

LANGUAGE: bash
CODE:
```
brew install cmake boost pkgconf libevent
```

----------------------------------------

TITLE: Interface Method Naming Conventions in C++
DESCRIPTION: Examples demonstrating the correct naming conventions for interface methods (lowerCamelCase) and standalone functions (UpperCamelCase) in the Bitcoin codebase for consistency and compatibility with code generation tools.

LANGUAGE: c++
CODE:
```
// Good: lowerCamelCase method name
virtual void blockConnected(const CBlock& block, int height) = 0;

// Bad: uppercase class method
virtual void BlockConnected(const CBlock& block, int height) = 0;
```

----------------------------------------

TITLE: Installing Test Suite Dependencies
DESCRIPTION: These packages are required to run the Bitcoin Core test suite, which uses Python 3 and ZeroMQ for testing.

LANGUAGE: bash
CODE:
```
pkgin install python310 py310-zmq
```

----------------------------------------

TITLE: Installing Test Suite Dependencies
DESCRIPTION: These packages are required to run the Bitcoin Core test suite, which uses Python 3 and ZeroMQ for testing.

LANGUAGE: bash
CODE:
```
pkgin install python310 py310-zmq
```

----------------------------------------

TITLE: Git Repository Exclude File Example
DESCRIPTION: Shows how to specify files to be ignored by Git in a repository. This example demonstrates excluding NetBeans project files.

LANGUAGE: shell
CODE:
```
# NetBeans
nbproject/
```

----------------------------------------

TITLE: Defining the bitcoin_common Static Library
DESCRIPTION: Creates the bitcoin_common static library containing functionality shared across Bitcoin executables and libraries. This includes chain parameters, key handling, networking, and script operations that are common across different components.

LANGUAGE: CMake
CODE:
```
# Home for common functionality shared by different executables and libraries.
# Similar to `bitcoin_util` library, but higher-level.
add_library(bitcoin_common STATIC EXCLUDE_FROM_ALL
  addresstype.cpp
  base58.cpp
  bech32.cpp
  chain.cpp
  chainparams.cpp
  chainparamsbase.cpp
  coins.cpp
  common/args.cpp
  common/bloom.cpp
  common/config.cpp
  common/init.cpp
  common/interfaces.cpp
  common/messages.cpp
  common/netif.cpp
  common/pcp.cpp
  common/run_command.cpp
  common/settings.cpp
  common/signmessage.cpp
  common/system.cpp
  common/url.cpp
  compressor.cpp
  core_read.cpp
  core_write.cpp
  deploymentinfo.cpp
  external_signer.cpp
  init/common.cpp
  kernel/chainparams.cpp
  key.cpp
  key_io.cpp
  merkleblock.cpp
  net_permissions.cpp
  net_types.cpp
  netaddress.cpp
  netbase.cpp
  outputtype.cpp
  policy/feerate.cpp
  policy/policy.cpp
  pow.cpp
  protocol.cpp
  psbt.cpp
  rpc/rawtransaction_util.cpp
  rpc/request.cpp
  rpc/util.cpp
  scheduler.cpp
  script/descriptor.cpp
  script/miniscript.cpp
  script/parsing.cpp
  script/sign.cpp
  script/signingprovider.cpp
  script/solver.cpp
)
target_link_libraries(bitcoin_common
  PRIVATE
    core_interface
    bitcoin_consensus
    bitcoin_util
    univalue
    secp256k1
    Boost::headers
    $<TARGET_NAME_IF_EXISTS:USDT::headers>
    $<$<PLATFORM_ID:Windows>:ws2_32>
)
```

----------------------------------------

TITLE: Configuring Shared Library Visibility in LevelDB
DESCRIPTION: Sets up visibility settings for symbols when building LevelDB as a shared library, ensuring only exported symbols are visible.

LANGUAGE: CMake
CODE:
```
if(BUILD_SHARED_LIBS)
  # Only export LEVELDB_EXPORT symbols from the shared library.
  add_compile_options(-fvisibility=hidden)
endif(BUILD_SHARED_LIBS)
```

----------------------------------------

TITLE: Platform Detection for Windows vs POSIX in LevelDB
DESCRIPTION: Detects the platform and sets appropriate compilation flags. For Windows, it defines UNICODE macros while for other platforms it sets POSIX platform name.

LANGUAGE: CMake
CODE:
```
if (WIN32)
  set(LEVELDB_PLATFORM_NAME LEVELDB_PLATFORM_WINDOWS)
  # TODO(cmumford): Make UNICODE configurable for Windows.
  add_definitions(-D_UNICODE -DUNICODE)
else (WIN32)
  set(LEVELDB_PLATFORM_NAME LEVELDB_PLATFORM_POSIX)
endif (WIN32)
```

----------------------------------------

TITLE: Proper Namespace Termination in C++
DESCRIPTION: Demonstrates the correct way to terminate namespaces in C++ with a trailing comment that specifies the namespace name, making it easier to track nested namespace closures.

LANGUAGE: c++
CODE:
```
namespace mynamespace {
...
} // namespace mynamespace

namespace {
...
} // namespace
```

----------------------------------------

TITLE: Configuring Bitcoin Core with GUI Support
DESCRIPTION: CMake command to configure Bitcoin Core build with GUI support and SQLite wallet support.

LANGUAGE: bash
CODE:
```
cmake -B build -DBUILD_GUI=ON
```

----------------------------------------

TITLE: Installing QR Code Encoding Support
DESCRIPTION: Command to install libqrencode, which enables QR code generation in the Bitcoin Core GUI. This is an optional dependency.

LANGUAGE: bash
CODE:
```
brew install qrencode
```

----------------------------------------

TITLE: Installing FreeBSD Dependencies
DESCRIPTION: Command to install required dependencies for building Bitcoin Core on FreeBSD systems.

LANGUAGE: bash
CODE:
```
pkg install bash
```

----------------------------------------

TITLE: Configuring Git for Pull Request References
DESCRIPTION: Git configuration to add a remote that makes referencing pull requests easier. Allows fetching and checking out pull requests by number using the upstream-pull remote.

LANGUAGE: conf
CODE:
```
[remote "upstream-pull"]
        fetch = +refs/pull/*/head:refs/remotes/upstream-pull/*
        url = git@github.com:bitcoin/bitcoin.git
```

----------------------------------------

TITLE: Enabling Thread Safety Warnings in LevelDB
DESCRIPTION: Enables thread safety warnings when Clang's thread-safety feature is available, treating these warnings as errors to ensure thread-safe code.

LANGUAGE: CMake
CODE:
```
if(HAVE_CLANG_THREAD_SAFETY)
  target_compile_options(leveldb
    PUBLIC
      -Werror -Wthread-safety)
endif(HAVE_CLANG_THREAD_SAFETY)
```

----------------------------------------

TITLE: GitHub Repository Link for BIP147
DESCRIPTION: Reference link to the Bitcoin Improvement Proposal (BIP147) documentation which describes the NULLDUMMY soft fork implementation.

LANGUAGE: markdown
CODE:
```
[BIP147]: https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki
```

----------------------------------------

TITLE: Adding RPC testing for InvalidateBlock
DESCRIPTION: Addition of a test case for the InvalidateBlock RPC function to ensure proper functionality. This is identified by commit hash 1117378.

LANGUAGE: Bash
CODE:
```
1117378 add RPC test for InvalidateBlock
```

----------------------------------------

TITLE: GitHub Issue Tracker URL for Bitcoin Core
DESCRIPTION: Link to the GitHub issue tracker for reporting bugs in the Bitcoin Core project.

LANGUAGE: Markdown
CODE:
```
<https://github.com/bitcoin/bitcoin/issues>
```

----------------------------------------

TITLE: Compiling LevelDB on Windows from Command Line
DESCRIPTION: Command to compile the Visual Studio solution from the command line using devenv. Builds the Debug configuration of the leveldb.sln file.

LANGUAGE: cmd
CODE:
```
devenv /build Debug leveldb.sln
```

----------------------------------------

TITLE: Increasing Memory Limit for Bitcoin Core Compilation on OpenBSD
DESCRIPTION: Increases the data size limit for the current shell to prevent out-of-memory errors during compilation of large source files.

LANGUAGE: bash
CODE:
```
ulimit -d 3000000
```

----------------------------------------

TITLE: Fixing validation race condition
DESCRIPTION: A fix for a race condition in the validation subsystem by ensuring proper acquisition of the CCheckQueue lock. This is identified by commit hash d148f62.

LANGUAGE: Bash
CODE:
```
d148f62 Acquire CCheckQueue's lock to avoid race condition
```

----------------------------------------

TITLE: Configuring Sanitizer Support for Bitcoin Core
DESCRIPTION: Sets up compiler sanitizer support for debugging and testing. Handles different sanitizer types, with special consideration for fuzzer tests, and performs compatibility checks.

LANGUAGE: CMake
CODE:
```
# Define sanitize_interface with -fsanitize flags intended to apply to all
# libraries and executables.
add_library(sanitize_interface INTERFACE)
target_link_libraries(core_interface INTERFACE sanitize_interface)
if(SANITIZERS)
  # Transform list of sanitizers into -fsanitize flags, replacing "fuzzer" with
  # "fuzzer-no-link" in sanitize_interface flags, and moving "fuzzer" to
  # fuzzer_interface flags. If -DSANITIZERS=fuzzer is specified, the fuzz test
  # binary should be built with -fsanitize=fuzzer (so it can use libFuzzer's
  # main function), but libraries should be built with -fsanitize=fuzzer-no-link
  # (so they can be linked into other executables that have their own main
  # functions).
  string(REGEX REPLACE "(^|,)fuzzer($|,)" "\\1fuzzer-no-link\\2" sanitize_opts "${SANITIZERS}")
  set(fuzz_flag "")
  if(NOT sanitize_opts STREQUAL SANITIZERS)
    set(fuzz_flag "-fsanitize=fuzzer")
  endif()

  # First check if the compiler accepts flags. If an incompatible pair like
  # -fsanitize=address,thread is used here, this check will fail. This will also
  # fail if a bad argument is passed, e.g. -fsanitize=undfeined
  try_append_cxx_flags("-fsanitize=${sanitize_opts}" TARGET sanitize_interface
    RESULT_VAR cxx_supports_sanitizers
    SKIP_LINK
  )
  if(NOT cxx_supports_sanitizers)
    message(FATAL_ERROR "Compiler did not accept requested flags.")
  endif()

  # Some compilers (e.g. GCC) require additional libraries like libasan,
  # libtsan, libubsan, etc. Make sure linking still works with the sanitize
  # flag. This is a separate check so we can give a better error message when
  # the sanitize flags are supported by the compiler but the actual sanitizer
  # libs are missing.
  try_append_linker_flag("-fsanitize=${sanitize_opts}" VAR SANITIZER_LDFLAGS
    SOURCE "
      #include <cstdint>
      #include <cstddef>
      extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) { return 0; }
      int main() { return 0; }
    "
    RESULT_VAR linker_supports_sanitizers
    NO_CACHE_IF_FAILED
  )
  if(NOT linker_supports_sanitizers)
    message(FATAL_ERROR "Linker did not accept requested flags, you are missing required libraries.")
  endif()
endif()
target_link_options(sanitize_interface INTERFACE ${SANITIZER_LDFLAGS})
```

----------------------------------------

TITLE: Configuring Sanitizer Support for Bitcoin Core
DESCRIPTION: Sets up compiler sanitizer support for debugging and testing. Handles different sanitizer types, with special consideration for fuzzer tests, and performs compatibility checks.

LANGUAGE: CMake
CODE:
```
# Define sanitize_interface with -fsanitize flags intended to apply to all
# libraries and executables.
add_library(sanitize_interface INTERFACE)
target_link_libraries(core_interface INTERFACE sanitize_interface)
if(SANITIZERS)
  # Transform list of sanitizers into -fsanitize flags, replacing "fuzzer" with
  # "fuzzer-no-link" in sanitize_interface flags, and moving "fuzzer" to
  # fuzzer_interface flags. If -DSANITIZERS=fuzzer is specified, the fuzz test
  # binary should be built with -fsanitize=fuzzer (so it can use libFuzzer's
  # main function), but libraries should be built with -fsanitize=fuzzer-no-link
  # (so they can be linked into other executables that have their own main
  # functions).
  string(REGEX REPLACE "(^|,)fuzzer($|,)" "\\1fuzzer-no-link\\2" sanitize_opts "${SANITIZERS}")
  set(fuzz_flag "")
  if(NOT sanitize_opts STREQUAL SANITIZERS)
    set(fuzz_flag "-fsanitize=fuzzer")
  endif()

  # First check if the compiler accepts flags. If an incompatible pair like
  # -fsanitize=address,thread is used here, this check will fail. This will also
  # fail if a bad argument is passed, e.g. -fsanitize=undfeined
  try_append_cxx_flags("-fsanitize=${sanitize_opts}" TARGET sanitize_interface
    RESULT_VAR cxx_supports_sanitizers
    SKIP_LINK
  )
  if(NOT cxx_supports_sanitizers)
    message(FATAL_ERROR "Compiler did not accept requested flags.")
  endif()

  # Some compilers (e.g. GCC) require additional libraries like libasan,
  # libtsan, libubsan, etc. Make sure linking still works with the sanitize
  # flag. This is a separate check so we can give a better error message when
  # the sanitize flags are supported by the compiler but the actual sanitizer
  # libs are missing.
  try_append_linker_flag("-fsanitize=${sanitize_opts}" VAR SANITIZER_LDFLAGS
    SOURCE "
      #include <cstdint>
      #include <cstddef>
      extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) { return 0; }
      int main() { return 0; }
    "
    RESULT_VAR linker_supports_sanitizers
    NO_CACHE_IF_FAILED
  )
  if(NOT linker_supports_sanitizers)
    message(FATAL_ERROR "Linker did not accept requested flags, you are missing required libraries.")
  endif()
endif()
target_link_options(sanitize_interface INTERFACE ${SANITIZER_LDFLAGS})
```

----------------------------------------

TITLE: Generating a receive address in Bitcoin Core watch-only wallet
DESCRIPTION: Generates a new Bitcoin address from the watch-only wallet to receive funds. This address is identical to what would be generated by the offline wallet since they share the same public keys.

LANGUAGE: sh
CODE:
```
[online]$ ./build/bin/bitcoin-cli -signet -rpcwallet="watch_only_wallet" getnewaddress

tb1qtu5qgc6ddhmqm5yqjvhg83qgk2t4ewajg0h6yh
```

----------------------------------------

TITLE: Installing NetBSD Dependencies
DESCRIPTION: Command to install required dependencies for building Bitcoin Core on NetBSD systems.

LANGUAGE: bash
CODE:
```
pkgin install bash gmake
```

----------------------------------------

TITLE: Linking External Dependencies to LevelDB
DESCRIPTION: Links detected external libraries to the LevelDB target, including optional dependencies like crc32c, snappy, and tcmalloc if they were found during configuration.

LANGUAGE: CMake
CODE:
```
if(HAVE_CRC32C)
  target_link_libraries(leveldb crc32c)
endif(HAVE_CRC32C)
if(HAVE_SNAPPY)
  target_link_libraries(leveldb snappy)
endif(HAVE_SNAPPY)
if(HAVE_TCMALLOC)
  target_link_libraries(leveldb tcmalloc)
endif(HAVE_TCMALLOC)
```

----------------------------------------

TITLE: Checking Wallet Balance
DESCRIPTION: Checks the balance of the multisig wallet to verify that coins have been received. The 'trusted' status indicates coins that can be spent.

LANGUAGE: bash
CODE:
```
./build/bin/bitcoin-cli -signet -rpcwallet="multisig_wallet_01" getbalances
```

----------------------------------------

TITLE: P2P Network Fix for Self-Advertisements in Bitcoin Core
DESCRIPTION: A fix to ensure the nTime field is always set for self-advertisements in the P2P network layer of Bitcoin Core. This appears to be a reference to pull request #25314.

LANGUAGE: markdown
CODE:
```
- #25314 p2p: always set nTime for self-advertisements
```

----------------------------------------

TITLE: Setting Build Type for C Language in secp256k1
DESCRIPTION: Ensures all build configurations for C language use RelWithDebInfo settings for building secp256k1. This provides a consistent optimization level with debug information across different build types.

LANGUAGE: CMake
CODE:
```
# We want to build libsecp256k1 with the most tested RelWithDebInfo configuration.
enable_language(C)
foreach(config IN LISTS CMAKE_BUILD_TYPE CMAKE_CONFIGURATION_TYPES)
  if(config STREQUAL "")
    continue()
  endif()
  string(TOUPPER "${config}" config)
  set(CMAKE_C_FLAGS_${config} "${CMAKE_C_FLAGS_RELWITHDEBINFO}")
endforeach()
```

----------------------------------------

TITLE: Configuring Bitcoin Core Build with Descriptor Wallet and GUI Support
DESCRIPTION: Runs CMake configuration for Bitcoin Core with descriptor wallet and GUI support enabled.

LANGUAGE: bash
CODE:
```
cmake -B build -DBUILD_GUI=ON
```

----------------------------------------

TITLE: Updating Guix Signatures Repository
DESCRIPTION: Command to ensure the guix.sigs repository is up-to-date before verifying builds against other signatures.

LANGUAGE: sh
CODE:
```
git -C ./guix.sigs pull
```

----------------------------------------

TITLE: Running deterministic-fuzz-coverage tool with Cargo
DESCRIPTION: Command to run the deterministic fuzz coverage tool which checks for non-determinism in fuzzing coverage. Requires clang compiler and specific build options.

LANGUAGE: bash
CODE:
```
cargo run --manifest-path ./contrib/devtools/deterministic-fuzz-coverage/Cargo.toml -- --help
```

----------------------------------------

TITLE: Configuring Google Logging (glog) in CMake
DESCRIPTION: Sets up Google Logging (glog) as a dependency with specific compiler flags to avoid warnings. Only enabled when CRC32C_USE_GLOG is ON and adds flags for handling deprecation, sign comparison, and unused parameter warnings.

LANGUAGE: CMake
CODE:
```
if(CRC32C_USE_GLOG)
  # glog requires this setting to avoid using dynamic_cast.
  set(DISABLE_RTTI ON CACHE BOOL "" FORCE)

  # glog's test targets trigger deprecation warnings, and compiling them burns
  # CPU cycles on the CI.
  set(BUILD_TESTING_SAVED "${BUILD_TESTING}")
  set(BUILD_TESTING OFF CACHE BOOL "" FORCE)
  add_subdirectory("third_party/glog" EXCLUDE_FROM_ALL)
  set(BUILD_TESTING "${BUILD_TESTING_SAVED}" CACHE BOOL "" FORCE)

  # glog triggers deprecation warnings on OSX.
  # https://github.com/google/glog/issues/185
  if(CRC32C_HAVE_NO_DEPRECATED)
    set_property(TARGET glog APPEND PROPERTY COMPILE_OPTIONS -Wno-deprecated)
  endif(CRC32C_HAVE_NO_DEPRECATED)

  # glog triggers sign comparison warnings on gcc.
  if(CRC32C_HAVE_NO_SIGN_COMPARE)
    set_property(TARGET glog APPEND PROPERTY COMPILE_OPTIONS -Wno-sign-compare)
  endif(CRC32C_HAVE_NO_SIGN_COMPARE)

  # glog triggers unused parameter warnings on clang.
  if(CRC32C_HAVE_NO_UNUSED_PARAMETER)
    set_property(TARGET glog
                 APPEND PROPERTY COMPILE_OPTIONS -Wno-unused-parameter)
  endif(CRC32C_HAVE_NO_UNUSED_PARAMETER)

  set(CRC32C_TESTS_BUILT_WITH_GLOG 1)
endif(CRC32C_USE_GLOG)
```

----------------------------------------

TITLE: Finding Doxygen with Dot Component in CMake
DESCRIPTION: Searches for the Doxygen package with the dot component for generating diagrams.

LANGUAGE: CMake
CODE:
```
find_package(Doxygen COMPONENTS dot)
```

----------------------------------------

TITLE: Verifying Installation with CMake
DESCRIPTION: Commands to verify a proper installation using the CMake build system. Creates temporary directories for building and installation, then compiles a test program to verify functionality.

LANGUAGE: shell
CODE:
```
dir=$(mktemp -d)
build=$(mktemp -d)
cmake -B $build -DCMAKE_INSTALL_PREFIX=$dir && cmake --build $build && cmake --install $build && ls -RlAh $dir
gcc -o ecdsa examples/ecdsa.c -I $dir/include -L $dir/lib*/ -l secp256k1 -Wl,-rpath,"$dir/lib",-rpath,"$dir/lib64" && ./ecdsa
```

----------------------------------------

TITLE: Compiling ctaes Tests in C
DESCRIPTION: Command to compile the test program for ctaes by linking ctaes.c with test.c.

LANGUAGE: bash
CODE:
```
$ gcc -O3 ctaes.c test.c -o test
```

----------------------------------------

TITLE: Configuring Thread Support for Bitcoin Core
DESCRIPTION: Sets up thread support using CMake's thread finding module, with a preference for pthreads when available.

LANGUAGE: CMake
CODE:
```
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
target_link_libraries(core_interface INTERFACE
  Threads::Threads
)
```

----------------------------------------

TITLE: Compiling and Testing Bitcoin Core
DESCRIPTION: Commands to build Bitcoin Core and run the test suite after configuration, with notes about parallel jobs.

LANGUAGE: bash
CODE:
```
cmake --build build     # Use "-j N" for N parallel jobs.
ctest --test-dir build  # Use "-j N" for N parallel tests. Some tests are disabled if Python 3 is not available.
```

----------------------------------------

TITLE: Building and Testing Bitcoin Tidy with CMake
DESCRIPTION: A set of bash commands for configuring the Bitcoin Tidy project with CMake, building it, and running its tests. The configuration uses LLVM's CMake directory and sets up a Release build.

LANGUAGE: bash
CODE:
```
cmake -S . -B build -DLLVM_DIR=$(llvm-config --cmakedir) -DCMAKE_BUILD_TYPE=Release

cmake --build build -j$(nproc)

cmake --build build --target bitcoin-tidy-tests -j$(nproc)
```

----------------------------------------

TITLE: Overriding Substitute Servers for Guix Commands
DESCRIPTION: Shell command example showing how to override the default substitute servers for a specific guix command invocation using the --substitute-urls option.

LANGUAGE: sh
CODE:
```
guix <cmd> --substitute-urls='https://guix.carldong.io https://ci.guix.gnu.org'
```

----------------------------------------

TITLE: Continuously Mining Blocks on a Custom Signet Chain
DESCRIPTION: Command to continuously mine blocks on a Signet chain at intervals matching the specified difficulty. The miner adjusts block times to maintain the target difficulty level.

LANGUAGE: bash
CODE:
```
$MINER --cli="$CLI" generate --grind-cmd="$GRIND" --address="$ADDR" --nbits=$NBITS --ongoing
```

----------------------------------------

TITLE: Configuring MSVC-Specific Compiler Options for LevelDB
DESCRIPTION: Sets up Microsoft Visual C++ specific compiler flags, disabling C++ exceptions and RTTI (Run-Time Type Information) for better performance.

LANGUAGE: CMake
CODE:
```
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  # Disable C++ exceptions.
  string(REGEX REPLACE "/EH[a-z]+" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHs-c-")
  add_definitions(-D_HAS_EXCEPTIONS=0)

  # Disable RTTI.
  string(REGEX REPLACE "/GR" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GR-")
else(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
```

----------------------------------------

TITLE: Configuring Benchmarking for CRC32C Library in CMake
DESCRIPTION: Sets up benchmarking infrastructure for the CRC32C library using Google benchmark. Creates benchmark targets and configures their properties and dependencies.

LANGUAGE: CMake
CODE:
```
if(CRC32C_BUILD_BENCHMARKS)
  add_executable(crc32c_bench "")
  target_sources(crc32c_bench
    PRIVATE
      "${PROJECT_BINARY_DIR}/include/crc32c/crc32c_config.h"
      "src/crc32c_benchmark.cc"
  )
  target_link_libraries(crc32c_bench crc32c)

  # This project uses Google benchmark for benchmarking.
  set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL "" FORCE)
  set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL "" FORCE)
  add_subdirectory("third_party/benchmark")
  target_link_libraries(crc32c_bench benchmark)

  if(CRC32C_USE_GLOG)
    target_link_libraries(crc32c_bench glog)
  endif(CRC32C_USE_GLOG)

  # Warnings as errors in Visual Studio for this project's targets.
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set_property(TARGET crc32c_bench APPEND PROPERTY COMPILE_OPTIONS "/WX")
  endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
endif(CRC32C_BUILD_BENCHMARKS)
```

----------------------------------------

TITLE: Setting Berkeley DB Environment Variables for Bitcoin Build
DESCRIPTION: Commands to set Berkeley DB environment variables before configuring Bitcoin Core build.

LANGUAGE: bash
CODE:
```
export BDB_PREFIX="/path/to/bitcoin/depends/x86_64-pc-linux-gnu"

cmake -B build -DBerkeleyDB_INCLUDE_DIR:PATH="${BDB_PREFIX}/include" -DWITH_BDB=ON
```

----------------------------------------

TITLE: Configuring ARM SHA-NI Optimizations for Bitcoin Crypto
DESCRIPTION: Conditionally adds ARM SHA-NI optimized implementation when ARM SHA instructions are available. Configures the compiler to use specialized compiler flags and includes the ARM-specific SHA256 implementation.

LANGUAGE: CMake
CODE:
```
if(HAVE_ARM_SHANI)
  target_compile_definitions(bitcoin_crypto PRIVATE ENABLE_ARM_SHANI)
  target_sources(bitcoin_crypto PRIVATE sha256_arm_shani.cpp)
  set_property(SOURCE sha256_arm_shani.cpp PROPERTY
    COMPILE_OPTIONS ${ARM_SHANI_CXXFLAGS}
  )
endif()
```

----------------------------------------

TITLE: Generating 64-bit Visual Studio Project Files for Windows
DESCRIPTION: Command to generate 64-bit Visual Studio 2017 project files for building LevelDB on Windows. Uses the Win64 generator option.

LANGUAGE: cmd
CODE:
```
cmake -G "Visual Studio 15 Win64" ..
```

----------------------------------------

TITLE: Configuring CMake Options for Bitcoin-Qt Test Suite
DESCRIPTION: Sets CMake automatic MOC options with the current source directory path prefix for Qt processing.

LANGUAGE: cmake
CODE:
```
set(CMAKE_AUTOMOC_MOC_OPTIONS "-p${CMAKE_CURRENT_SOURCE_DIR}")
```

----------------------------------------

TITLE: Block Notification Command-line Argument
DESCRIPTION: New command-line argument that spawns a shell process to run a specified command when a new block is accepted.

LANGUAGE: bash
CODE:
```
-blocknotify=<command>
```

----------------------------------------

TITLE: Signet Faucet Script Usage Syntax
DESCRIPTION: Command syntax for the getcoins.py script which facilitates obtaining coins from a Signet faucet. The script supports various parameters for customizing the faucet URL, bitcoin-cli path, target address, and authentication.

LANGUAGE: bash
CODE:
```
getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<faucet URL>] [-a|--addr=<signet bech32 address>] [-p|--password=<faucet password>] [--] [<bitcoin-cli args>]
```

----------------------------------------

TITLE: Defining get_translatable_sources Function in CMake
DESCRIPTION: A CMake function that gathers source files for translation from specified directories. It filters out generated files and QRC resources, resolves paths, and adds them to a list that is returned to the caller.

LANGUAGE: cmake
CODE:
```
function(get_translatable_sources var)
  set(result)
  set(targets)
  foreach(dir IN ITEMS ${ARGN})
    get_directory_property(dir_targets DIRECTORY ${PROJECT_SOURCE_DIR}/${dir} BUILDSYSTEM_TARGETS)
    list(APPEND targets ${dir_targets})
  endforeach()
  foreach(target IN LISTS targets)
    get_target_property(target_sources ${target} SOURCES)
    if(target_sources)
      foreach(source IN LISTS target_sources)
        # Get an expression from the generator expression, if any.
        if(source MATCHES ":([^>]+)>$")
          set(source ${CMAKE_MATCH_1})
        endif()
        cmake_path(GET source EXTENSION LAST_ONLY ext)
        if(ext STREQUAL ".qrc")
          continue()
        endif()
        if(NOT IS_ABSOLUTE source)
          get_target_property(target_source_dir ${target} SOURCE_DIR)
          cmake_path(APPEND target_source_dir ${source} OUTPUT_VARIABLE source)
        endif()
        get_property(is_generated
          SOURCE  ${source} TARGET_DIRECTORY ${target}
          PROPERTY GENERATED
        )
        if(NOT is_generated)
          list(APPEND result ${source})
        endif()
      endforeach()
    endif()
  endforeach()
  set(${var} ${result} PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Tagging and Pushing a Maintenance Release
DESCRIPTION: Commands to update the maintenance branch, create a release tag, and push it to the repository. This ensures the maintenance release is properly tagged after merging the necessary PRs.

LANGUAGE: shell
CODE:
```
git checkout $MAJOR.$MINOR && git pull
git tag -s v$MAJOR.$MINOR.$PATCH -m "libsecp256k1 $MAJOR.$MINOR.$PATCH"
git push git@github.com:bitcoin-core/secp256k1.git v$MAJOR.$MINOR.$PATCH
```

----------------------------------------

TITLE: Copying Local Block Data with linearize-data.py
DESCRIPTION: Command to process the block data using linearize-data.py. This script reads the hashlist generated in the previous step and creates a linearized version of the blockchain, either as a single file or as a series of block files.

LANGUAGE: bash
CODE:
```
$ ./linearize-data.py linearize.cfg
```

----------------------------------------

TITLE: Creating Fallback Documentation Target when Doxygen is Not Found
DESCRIPTION: Adds a fallback 'docs' target that displays an error message when Doxygen is not available, ensuring the build target exists but informs the user of the missing dependency.

LANGUAGE: CMake
CODE:
```
add_custom_target(docs
  COMMAND ${CMAKE_COMMAND} -E echo "Error: Doxygen not found"
)
```

----------------------------------------

TITLE: Generating Visual Studio Project Files for Windows
DESCRIPTION: Commands to generate Visual Studio 2017 project files for building LevelDB on Windows. Creates a build directory and runs CMake to generate the solution files.

LANGUAGE: cmd
CODE:
```
mkdir build
cd build
cmake -G "Visual Studio 15" ..
```

----------------------------------------

TITLE: Registering Bitcoin-Qt Test as CTest Target
DESCRIPTION: Registers the test_bitcoin-qt executable as a CTest test case to be included in test runs.

LANGUAGE: cmake
CODE:
```
add_test(NAME test_bitcoin-qt
  COMMAND test_bitcoin-qt
)
```

----------------------------------------

TITLE: Initializing Git Submodules for CRC32C Dependencies
DESCRIPTION: Command to initialize and update Git submodules required by the CRC32C project for dependency management.

LANGUAGE: bash
CODE:
```
git submodule update --init --recursive
```

----------------------------------------

TITLE: Verifying Address on Hardware Device
DESCRIPTION: Generate a new address in the wallet and display it on the hardware device for verification.

LANGUAGE: sh
CODE:
```
$ bitcoin-cli -rpcwallet=<wallet> getnewaddress
$ bitcoin-cli -rpcwallet=<wallet> walletdisplayaddress <address>
```

----------------------------------------

TITLE: Importing PGP Keys for Secure Communication with Secp256k1 Developers
DESCRIPTION: Command for importing PGP keys of secp256k1 developers from the OpenPGP keyserver. This allows for encrypted communication when reporting security vulnerabilities. The command requires the developer's fingerprint to be provided as an argument.

LANGUAGE: bash
CODE:
```
gpg --keyserver hkps://keys.openpgp.org --recv-keys "<fingerprint>"
```

----------------------------------------

TITLE: Linear Equation System for Element Recovery
DESCRIPTION: Series of linear equations used to solve for the coefficients of polynomial L, which is then factored to recover the original set elements from a sketch.

LANGUAGE: math
CODE:
```
s_{n+1} + s_{n+0}l_1 + s_{n-1}l_2 + s_{n-2}l_3 + ... + s_1l_n = 0
s_{n+2} + s_{n+1}l_1 + s_{n+0}l_2 + s_{n-1}l_3 + ... + s_2l_n = 0
s_{n+3} + s_{n+2}l_1 + s_{n+1}l_2 + s_{n+0}l_3 + ... + s_3l_n = 0
...
s_{2n} + s_{2n-1}l_1 + s_{2n-2}l_2 + s_{2n-3}l_3 + ... + s_nl_n = 0
```

----------------------------------------

TITLE: Linking dependencies to bitcoin_ipc library in CMake
DESCRIPTION: Specifies the libraries that bitcoin_ipc depends on, including core_interface and univalue. Uses PRIVATE visibility specifier to indicate these dependencies are not exposed to consumers of bitcoin_ipc.

LANGUAGE: cmake
CODE:
```
target_link_libraries(bitcoin_ipc
  PRIVATE
    core_interface
    univalue
)
```

----------------------------------------

TITLE: Configuring Fuzzing Build Mode Settings
DESCRIPTION: Sets up fuzzing build mode which disables regular targets and enables special fuzzing-oriented compiler and build settings.

LANGUAGE: cmake
CODE:
```
if(BUILD_FOR_FUZZING)
  message(WARNING "BUILD_FOR_FUZZING=ON will disable all other targets and force BUILD_FUZZ_BINARY=ON.")
  set(BUILD_DAEMON OFF)
  set(BUILD_CLI OFF)
  set(BUILD_TX OFF)
  set(BUILD_UTIL OFF)
  set(BUILD_UTIL_CHAINSTATE OFF)
  set(BUILD_KERNEL_LIB OFF)
  set(BUILD_WALLET_TOOL OFF)
  set(BUILD_GUI OFF)
  set(ENABLE_EXTERNAL_SIGNER OFF)
  set(WITH_ZMQ OFF)
  set(BUILD_TESTS OFF)
  set(BUILD_GUI_TESTS OFF)
  set(BUILD_BENCH OFF)
  set(BUILD_FUZZ_BINARY ON)

  target_compile_definitions(core_interface INTERFACE
    FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  )
endif()
```

----------------------------------------

TITLE: Bash Shebang Improvement in Bitcoin Scripts
DESCRIPTION: Change from a specific path-based shebang to a more portable environment-based bash shebang in Bitcoin scripts. This makes scripts more portable across different Unix-like systems.

LANGUAGE: Bash
CODE:
```
#!/usr/bin/env bash
```

----------------------------------------

TITLE: Checking ABI Compatibility
DESCRIPTION: Command to verify that there are no unexpected ABI incompatibilities and that version numbers and release notes accurately reflect potential ABI changes. Requires abi-dumper and abi-compliance-checker packages.

LANGUAGE: shell
CODE:
```
tools/check-abi.sh
```

----------------------------------------

TITLE: Three-Element Set Relationship
DESCRIPTION: Extension of the two-element relationship to three elements, showing the pattern of how multiplying by (1-m_ix) factors affects the power series of a set.

LANGUAGE: math
CODE:
```
(1 - m_1x) (1 - m_2x) (1 - m_3x) S({m_1,m_2,m_3}) = (1 - m_1x) (1 - m_2x) (1 - m_3x) (S(m_1) + S(m_2) + S(m_3)) = (1 - m_2x)(1 - m_3x) + (1 - m_1x)(1 - m_3x) + (1 - m_1x)(1 - m_2x)
```

----------------------------------------

TITLE: Configuring test_fuzz Static Library for Bitcoin Core Fuzzing in CMake
DESCRIPTION: Defines a static library named 'test_fuzz' that compiles various fuzzing-related source files. The library is excluded from default build targets and includes conditional compilation for main function provision based on environment configuration.

LANGUAGE: cmake
CODE:
```
add_library(test_fuzz STATIC EXCLUDE_FROM_ALL
  check_globals.cpp
  descriptor.cpp
  mempool.cpp
  net.cpp
  ../fuzz.cpp
  ../util.cpp
)
```

----------------------------------------

TITLE: Referencing Basic Test Setup Class in Bitcoin Test Library
DESCRIPTION: This code reference mentions the BasicTestingSetup class, which is defined in the setup_common file and is used by test binaries to handle global state initialization for tests.

LANGUAGE: markdown
CODE:
```
The test binaries will handle the global state when they
instantiate the `BasicTestingSetup` (or one of its derived classes).
```

----------------------------------------

TITLE: Conditional Wallet Testing in Bitcoin Core
DESCRIPTION: Adds the wallet test subdirectory if wallet functionality is enabled in the build configuration. This ensures wallet-specific tests are only included when the wallet component is being built.

LANGUAGE: CMake
CODE:
```
if(ENABLE_WALLET)
  add_subdirectory(${PROJECT_SOURCE_DIR}/src/wallet/test wallet)
endif()
```

----------------------------------------

TITLE: Configuring Memory Pool Size in Bitcoin Core
DESCRIPTION: Command line parameter to set the maximum size of the transaction memory pool. The default is 300 MB and can be configured to prevent memory-based attacks.

LANGUAGE: markdown
CODE:
```
-maxmempool
```

----------------------------------------

TITLE: Configuring LevelDB CMake Project with Version and Language Standards
DESCRIPTION: Sets up the basic CMake project configuration including minimum CMake version, project version, and language standards. It specifies C11 with graceful degradation to C89 and requires C++11.

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.9)
# Keep the version below in sync with the one in db.h
project(leveldb VERSION 1.22.0 LANGUAGES C CXX)

# This project can use C11, but will gracefully decay down to C89.
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED OFF)
set(CMAKE_C_EXTENSIONS OFF)

# This project requires C++11.
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
```

----------------------------------------

TITLE: LevelDB Footer Structure in Plaintext
DESCRIPTION: Details the structure of the fixed-length footer at the end of a LevelDB file, including metaindex handle, index handle, padding, and magic number.

LANGUAGE: plaintext
CODE:
```
metaindex_handle: char[p];     // Block handle for metaindex
index_handle:     char[q];     // Block handle for index
padding:          char[40-p-q];// zeroed bytes to make fixed length
                               // (40==2*BlockHandle::kMaxEncodedLength)
magic:            fixed64;     // == 0xdb4775248b80fb57 (little-endian)
```

----------------------------------------

TITLE: Installing Qt Creator on Ubuntu & Debian
DESCRIPTION: Command to install Qt Creator IDE on Ubuntu and Debian-based Linux distributions using the apt package manager. Qt Creator is used for Bitcoin Core GUI development.

LANGUAGE: sh
CODE:
```
sudo apt-get install qtcreator
```

----------------------------------------

TITLE: Setting BDB_PREFIX Environment Variable for sh/bash
DESCRIPTION: Sets the BDB_PREFIX environment variable for sh/bash shells to specify the Berkeley DB installation path.

LANGUAGE: bash
CODE:
```
sh/bash: export BDB_PREFIX=[path displayed above]
```

----------------------------------------

TITLE: Installing ZeroMQ for Notifications Support
DESCRIPTION: Command to install the ZeroMQ library, which enables notification support in Bitcoin Core. This is an optional dependency.

LANGUAGE: bash
CODE:
```
brew install zeromq
```

----------------------------------------

TITLE: Conditional Compilation for Fuzz Main Function in CMake
DESCRIPTION: Adds a compile definition to provide a main function when the fuzzing binary cannot link without one. This conditional logic adapts the build based on the FUZZ_BINARY_LINKS_WITHOUT_MAIN_FUNCTION environment variable.

LANGUAGE: cmake
CODE:
```
if(NOT FUZZ_BINARY_LINKS_WITHOUT_MAIN_FUNCTION)
  target_compile_definitions(test_fuzz PRIVATE PROVIDE_FUZZ_MAIN_FUNCTION)
endif()
```

----------------------------------------

TITLE: Configuring Wallet-Specific Sources for Bitcoin Qt
DESCRIPTION: Conditionally adds wallet-related source files and dependencies to the bitcoinqt library when wallet functionality is enabled. This includes UI components for transaction management, address book, and wallet operations.

LANGUAGE: CMake
CODE:
```
if(ENABLE_WALLET)
  target_sources(bitcoinqt
    PRIVATE
      addressbookpage.cpp
      addressbookpage.h
      addresstablemodel.cpp
      addresstablemodel.h
      askpassphrasedialog.cpp
      askpassphrasedialog.h
      coincontroldialog.cpp
      coincontroldialog.h
      coincontroltreewidget.cpp
      coincontroltreewidget.h
      createwalletdialog.cpp
      createwalletdialog.h
      editaddressdialog.cpp
      editaddressdialog.h
      openuridialog.cpp
      openuridialog.h
      overviewpage.cpp
      overviewpage.h
      paymentserver.cpp
      paymentserver.h
      psbtoperationsdialog.cpp
      psbtoperationsdialog.h
      qrimagewidget.cpp
      qrimagewidget.h
      receivecoinsdialog.cpp
      receivecoinsdialog.h
      receiverequestdialog.cpp
      receiverequestdialog.h
      recentrequeststablemodel.cpp
      recentrequeststablemodel.h
      sendcoinsdialog.cpp
      sendcoinsdialog.h
      sendcoinsentry.cpp
      sendcoinsentry.h
      signverifymessagedialog.cpp
      signverifymessagedialog.h
      transactiondesc.cpp
      transactiondesc.h
      transactiondescdialog.cpp
      transactiondescdialog.h
      transactionfilterproxy.cpp
      transactionfilterproxy.h
      transactionoverviewwidget.cpp
      transactionoverviewwidget.h
      transactionrecord.cpp
      transactionrecord.h
      transactiontablemodel.cpp
      transactiontablemodel.h
      transactionview.cpp
      transactionview.h
      walletcontroller.cpp
      walletcontroller.h
      walletframe.cpp
      walletframe.h
      walletmodel.cpp
      walletmodel.h
      walletmodeltransaction.cpp
      walletmodeltransaction.h
      walletview.cpp
      walletview.h
  )
  target_link_libraries(bitcoinqt
    PRIVATE
      bitcoin_wallet
      Qt6::Network
  )
endif()
```

----------------------------------------

TITLE: Documenting Members Before Declaration
DESCRIPTION: Example of how to document a member or variable using Doxygen style before the declaration.

LANGUAGE: c++
CODE:
```
//! Description before the member
int var;
```

----------------------------------------

TITLE: Running distcheck for libsecp256k1 Release
DESCRIPTION: Command to ensure the release package passes the distribution check. This verifies that the package can be properly configured, built, tested, and distributed.

LANGUAGE: shell
CODE:
```
./autogen.sh && ./configure --enable-dev-mode && make distcheck
```

----------------------------------------

TITLE: Measuring Approximate Size Ranges in LevelDB with C++
DESCRIPTION: This snippet shows how to use the GetApproximateSizes method to estimate the file system space used by specific key ranges in a database.

LANGUAGE: c++
CODE:
```
leveldb::Range ranges[2];
ranges[0] = leveldb::Range("a", "c");
ranges[1] = leveldb::Range("x", "z");
uint64_t sizes[2];
leveldb::Status s = db->GetApproximateSizes(ranges, 2, sizes);
```

----------------------------------------

TITLE: Setting BDB_PREFIX Environment Variable for Legacy Wallet Support
DESCRIPTION: Sets the Berkeley DB prefix environment variable to the path where Berkeley DB was built by the depends system.

LANGUAGE: bash
CODE:
```
export BDB_PREFIX="[path displayed above]"
```

----------------------------------------

TITLE: Configuring Bitcoin Core with Both Wallet Types
DESCRIPTION: Configures the build with support for both descriptor and legacy wallets, without GUI support.

LANGUAGE: bash
CODE:
```
cmake -B build -DBerkeleyDB_INCLUDE_DIR:PATH="${BDB_PREFIX}/include" -DWITH_BDB=ON
```

----------------------------------------

TITLE: Configuring Bitcoin Benchmark Data Sources in CMake
DESCRIPTION: Adds raw data sources required by the benchmarks. Uses the TargetDataSources module to include block413567.raw as a data resource for the benchmarking executable.

LANGUAGE: cmake
CODE:
```
include(TargetDataSources)
target_raw_data_sources(bench_bitcoin NAMESPACE benchmark::data
  data/block413567.raw
)
```

----------------------------------------

TITLE: Configuring Multi-Process Bitcoin GUI Support
DESCRIPTION: Conditionally creates a separate bitcoin-gui executable when multi-process support is enabled. This allows splitting the Bitcoin GUI and node functionality into separate processes for improved stability and security.

LANGUAGE: CMake
CODE:
```
if(WITH_MULTIPROCESS)
  add_executable(bitcoin-gui
    main.cpp
    ../init/bitcoin-gui.cpp
  )
  target_link_libraries(bitcoin-gui
    core_interface
    bitcoinqt
    bitcoin_node
    bitcoin_ipc
  )
  import_plugins(bitcoin-gui)
  install_binary_component(bitcoin-gui)
  if(WIN32)
    set_target_properties(bitcoin-gui PROPERTIES WIN32_EXECUTABLE TRUE)
  endif()
endif()

if(BUILD_GUI_TESTS)
  add_subdirectory(test)
endif()
```

----------------------------------------

TITLE: Checking Open File Descriptors for LevelDB
DESCRIPTION: A bash command to check open .ldb file counts using lsof, useful for verifying LevelDB's file descriptor usage to ensure compatibility with Bitcoin's select() loop.

LANGUAGE: bash
CODE:
```
$ lsof -p $(pidof bitcoind) |\
    awk 'BEGIN { fd=0; mem=0; } /ldb$/ { if ($4 == "mem") mem++; else fd++ } END { printf "mem = %s, fd = %s\n", mem, fd}'
mem = 119, fd = 0
```

----------------------------------------

TITLE: Closing a LevelDB Database in C++
DESCRIPTION: This code shows the proper way to close a LevelDB database by deleting the database object when it's no longer needed.

LANGUAGE: c++
CODE:
```
... open the db as described above ...
... do something with db ...
delete db;
```

----------------------------------------

TITLE: Installing Windows Cross-Compilation Dependencies
DESCRIPTION: Command to install the MinGW toolchain required for cross-compiling Bitcoin Core for Windows 64-bit on a Debian/Ubuntu system.

LANGUAGE: bash
CODE:
```
apt install g++-mingw-w64-x86-64-posix
```

----------------------------------------

TITLE: Configuring Bitcoin Core without Wallet or GUI
DESCRIPTION: Configures a minimal Bitcoin Core build with wallet functionality disabled.

LANGUAGE: bash
CODE:
```
cmake -B build -DENABLE_WALLET=OFF
```

----------------------------------------

TITLE: Setting Position Independent Code Properties in CMake
DESCRIPTION: Configures Position Independent Code (PIC) settings for the precomputed object library by inheriting the setting from the main secp256k1 library.

LANGUAGE: CMake
CODE:
```
# Object libs don't know if they're being built for a shared or static lib.
# Grab the PIC property from secp256k1 which knows.
get_target_property(use_pic secp256k1 POSITION_INDEPENDENT_CODE)
set_target_properties(secp256k1_precomputed PROPERTIES POSITION_INDEPENDENT_CODE ${use_pic})
```

----------------------------------------

TITLE: Adding macOS-Specific Linker Options in CMake
DESCRIPTION: Adds special linker options for macOS to handle undefined symbols correctly. This addresses specific requirements of the ld64 linker on macOS platforms.

LANGUAGE: CMake
CODE:
```
if(CMAKE_HOST_APPLE)
    # ld64 expects no undefined symbols by default
    target_link_options(bitcoin-tidy PRIVATE -Wl,-flat_namespace)
    target_link_options(bitcoin-tidy PRIVATE -Wl,-undefined -Wl,suppress)
endif()
```

----------------------------------------

TITLE: Example RPC Subnet Access Control Comparison
DESCRIPTION: A table comparing RPC subnet specification formats between Bitcoin Core 0.9.x and 0.10.x versions. Shows how wildcard formats need to be replaced with CIDR notation for proper subnet specification.

LANGUAGE: markdown
CODE:
```
| 0.9.x and before                           | 0.10.x                                |
|--------------------------------------------|---------------------------------------|
| `-rpcallowip=192.168.1.1`                  | `-rpcallowip=192.168.1.1` (unchanged) |
| `-rpcallowip=192.168.1.*`                  | `-rpcallowip=192.168.1.0/24`          |
| `-rpcallowip=192.168.*`                    | `-rpcallowip=192.168.0.0/16`          |
| `-rpcallowip=*` (dangerous!)               | `-rpcallowip=::/0` (still dangerous!) |
```

----------------------------------------

TITLE: Optimized ElligatorSwift Algorithm
DESCRIPTION: Optimized version of the ElligatorSwift algorithm that avoids computing all inverses. Instead, it randomly selects one of eight possible formulas (G_c,u) and computes only that specific inverse.

LANGUAGE: pseudocode
CODE:
```
Define ElligatorSwift(x) as:
* Loop:
  * Pick a uniformly random field element u.
  * Pick a uniformly random integer c in [0,8).
  * Let t = G_{c,u}(x).
  * If t ≠ ⊥, return (u, t); restart loop otherwise.
```

----------------------------------------

TITLE: Adding Conditional secp256k1 Examples Based on Enabled Modules
DESCRIPTION: CMake configuration that adds various secp256k1 examples conditionally based on which modules are enabled in the build. It always adds the ECDSA example and conditionally adds ECDH, Schnorr signature, EllSwift, and MuSig examples when their respective modules are enabled.

LANGUAGE: CMake
CODE:
```
add_example(ecdsa)

if(SECP256K1_ENABLE_MODULE_ECDH)
  add_example(ecdh)
endif()

if(SECP256K1_ENABLE_MODULE_SCHNORRSIG)
  add_example(schnorr)
endif()

if(SECP256K1_ENABLE_MODULE_ELLSWIFT)
  add_example(ellswift)
endif()

if(SECP256K1_ENABLE_MODULE_MUSIG)
  add_example(musig)
endif()
```

----------------------------------------

TITLE: Configuring LevelDB Benchmark Framework
DESCRIPTION: Defines a function to create benchmark executables for LevelDB, similar to the test function but with benchmark-specific configurations.

LANGUAGE: CMake
CODE:
```
if(LEVELDB_BUILD_BENCHMARKS)
  function(leveldb_benchmark bench_file)
    get_filename_component(bench_target_name "${bench_file}" NAME_WE)

    add_executable("${bench_target_name}" "")
    target_sources("${bench_target_name}"
      PRIVATE
        "${PROJECT_BINARY_DIR}/${LEVELDB_PORT_CONFIG_DIR}/port_config.h"
        "util/histogram.cc"
        "util/histogram.h"
        "util/testharness.cc"
        "util/testharness.h"
        "util/testutil.cc"
        "util/testutil.h"

        "${bench_file}"
    )
    target_link_libraries("${bench_target_name}" leveldb)
    target_compile_definitions("${bench_target_name}"
      PRIVATE
        ${LEVELDB_PLATFORM_NAME}=1
    )
    if (NOT HAVE_CXX17_HAS_INCLUDE)
      target_compile_definitions("${bench_target_name}"
        PRIVATE
          LEVELDB_HAS_PORT_CONFIG_H=1
      )
    endif(NOT HAVE_CXX17_HAS_INCLUDE)
  endfunction(leveldb_benchmark)
```

----------------------------------------

TITLE: Configuring Platform-Specific Settings for macOS in Bitcoin Qt
DESCRIPTION: Enables Objective-C++ language support when building on macOS and configures compiler flags for different build types. This ensures proper compilation of the macOS-specific interface elements.

LANGUAGE: CMake
CODE:
```
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  enable_language(OBJCXX)
  set(CMAKE_OBJCXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
  set(CMAKE_OBJCXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
  set(CMAKE_OBJCXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
  set(CMAKE_OBJCXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL}")
  string(APPEND CMAKE_OBJCXX_COMPILE_OBJECT " ${APPEND_CPPFLAGS} ${APPEND_CXXFLAGS}")
endif()
```

----------------------------------------

TITLE: Installing ZeroMQ for Notifications Support
DESCRIPTION: ZeroMQ provides notification capabilities in Bitcoin Core. This command installs the ZeroMQ library using pkgin.

LANGUAGE: bash
CODE:
```
pkgin zeromq
```

----------------------------------------

TITLE: Running circular-dependencies.py to find code dependencies
DESCRIPTION: Example of running the circular-dependencies.py script from the source directory to find circular dependencies in the source code.

LANGUAGE: bash
CODE:
```
cd .../src
../contrib/devtools/circular-dependencies.py {*,*/*,*/*/*}.{h,cpp}
```

----------------------------------------

TITLE: Checking for Dependencies and System Features in LevelDB
DESCRIPTION: Performs checks for required system headers, libraries, and functions needed by LevelDB. Detects the presence of unistd.h, crc32c, snappy, tcmalloc libraries, and system functions like fdatasync.

LANGUAGE: CMake
CODE:
```
include(CheckIncludeFile)
check_include_file("unistd.h" HAVE_UNISTD_H)

include(CheckLibraryExists)
check_library_exists(crc32c crc32c_value "" HAVE_CRC32C)
check_library_exists(snappy snappy_compress "" HAVE_SNAPPY)
check_library_exists(tcmalloc malloc "" HAVE_TCMALLOC)

include(CheckCXXSymbolExists)
# Using check_cxx_symbol_exists() instead of check_c_symbol_exists() because
# we're including the header from C++, and feature detection should use the same
# compiler language that the project will use later. Principles aside, some
# versions of do not expose fdatasync() in <unistd.h> in standard C mode
# (-std=c11), but do expose the function in standard C++ mode (-std=c++11).
check_cxx_symbol_exists(fdatasync "unistd.h" HAVE_FDATASYNC)
check_cxx_symbol_exists(F_FULLFSYNC "fcntl.h" HAVE_FULLFSYNC)
check_cxx_symbol_exists(O_CLOEXEC "fcntl.h" HAVE_O_CLOEXEC)
```

----------------------------------------

TITLE: Debug and Release Build Configuration in Bitcoin Dependencies
DESCRIPTION: Examples of how to specify different flags for debug and release builds. Variables can have debug/release suffixes to apply conditionally based on build configuration.

LANGUAGE: makefile
CODE:
```
$(package)_cflags_release = -O3
$(package)_cflags_i686_debug = -g
$(package)_config_opts_release = --disable-debug
```

----------------------------------------

TITLE: Creating a Convenience Target for the Bitcoin Kernel Library
DESCRIPTION: Adds a 'libbitcoinkernel' custom target that depends on the actual bitcoinkernel target. This provides a more standardized naming convention for the library that users might expect.

LANGUAGE: CMake
CODE:
```
add_custom_target(libbitcoinkernel)
add_dependencies(libbitcoinkernel bitcoinkernel)
```

----------------------------------------

TITLE: Building Bitcoin Core with Static Linking and GUI
DESCRIPTION: A sequence of commands to configure, build, test, and optionally install Bitcoin Core with static linking and GUI support using CMake presets. The build process uses the vs2022-static preset and creates a Release configuration.

LANGUAGE: powershell
CODE:
```
cmake -B build --preset vs2022-static          # It might take a while if the vcpkg binary cache is unpopulated or invalidated.
cmake --build build --config Release           # Use "-j N" for N parallel jobs.
ctest --test-dir build --build-config Release  # Use "-j N" for N parallel tests. Some tests are disabled if Python 3 is not available.
cmake --install build --config Release         # Optional.
```

----------------------------------------

TITLE: Installing SQLite for Descriptor Wallet Support on OpenBSD
DESCRIPTION: Installs SQLite database engine which is required for descriptor wallet functionality in Bitcoin Core.

LANGUAGE: bash
CODE:
```
pkg_add sqlite3
```

----------------------------------------

TITLE: Accessing Terminal on macOS
DESCRIPTION: Shows the path to the Terminal application on macOS which is needed for executing commands in this guide.

LANGUAGE: bash
CODE:
```
/Applications/Utilities/Terminal.app
```

----------------------------------------

TITLE: Running Rust-based Test Runner for Lint Checks
DESCRIPTION: Command to run all lint checks in the test runner using Cargo. Requires installing the Rust toolchain first.

LANGUAGE: sh
CODE:
```
( cd ./test/lint/test_runner/ && cargo fmt && cargo clippy && RUST_BACKTRACE=1 cargo run )
```

----------------------------------------

TITLE: Downloading Previous Release Binaries for Backwards Compatibility Tests
DESCRIPTION: Command to download previous Bitcoin Core release binaries needed for backwards compatibility testing.

LANGUAGE: bash
CODE:
```
test/get_previous_releases.py -b
```

----------------------------------------

TITLE: Configuring Compiler Flags for MSVC in CMake
DESCRIPTION: Sets up compiler flags specifically for Microsoft Visual C++ compiler, including warning levels, disabled warnings, and security-related definitions.

LANGUAGE: CMake
CODE:
```
include(TryAppendCFlags)
if(MSVC)
  # Keep the following commands ordered lexicographically.
  try_append_c_flags(/W3) # Production quality warning level.
  try_append_c_flags(/wd4146) # Disable warning C4146 "unary minus operator applied to unsigned type, result still unsigned".
  try_append_c_flags(/wd4244) # Disable warning C4244 "'conversion' conversion from 'type1' to 'type2', possible loss of data".
  try_append_c_flags(/wd4267) # Disable warning C4267 "'var' : conversion from 'size_t' to 'type', possible loss of data".
  # Eliminate deprecation warnings for the older, less secure functions.
  add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
else()
```

----------------------------------------

TITLE: Running gen-bitcoin-conf.sh with custom build directory
DESCRIPTION: Command to run the bitcoin.conf generator script with a custom build directory instead of the default 'build' directory.

LANGUAGE: bash
CODE:
```
BUILDDIR=$PWD/my-build-dir contrib/devtools/gen-bitcoin-conf.sh
```

----------------------------------------

TITLE: Setting Default Build Type in CMake
DESCRIPTION: Configures the default build type as "RelWithDebInfo" for the project and sets up supported configuration types. Handles both multi-config and single-config generators.

LANGUAGE: CMake
CODE:
```
if(PROJECT_IS_TOP_LEVEL)
  get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
  set(default_build_type "RelWithDebInfo")
  if(is_multi_config)
    set(CMAKE_CONFIGURATION_TYPES "${default_build_type}" "Release" "Debug" "MinSizeRel" "Coverage" CACHE STRING
      "Supported configuration types."
      FORCE
    )
  else()
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY
      STRINGS "${default_build_type}" "Release" "Debug" "MinSizeRel" "Coverage"
    )
    if(NOT CMAKE_BUILD_TYPE)
      message(STATUS "Setting build type to \"${default_build_type}\" as none was specified")
      set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE STRING
        "Choose the type of build."
        FORCE
      )
    endif()
  endif()
endif()
```

----------------------------------------

TITLE: Installing Qt for GUI Support
DESCRIPTION: Command to install Qt 6, which is required for building the Bitcoin Core GUI. This is an optional dependency.

LANGUAGE: bash
CODE:
```
brew install qt@6
```

----------------------------------------

TITLE: Adding Remote Repository for Subtree Verification
DESCRIPTION: Command example to add an upstream repository as a remote for subtree verification checks.

LANGUAGE: sh
CODE:
```
git remote add --fetch secp256k1 https://github.com/bitcoin-core/secp256k1.git
```

----------------------------------------

TITLE: Analyzing the unsigned PSBT with Bitcoin Core
DESCRIPTION: Analyzes the partially signed Bitcoin transaction (PSBT) on the offline machine to check what missing elements are required. This shows that signatures are needed from the private key corresponding to a specific public key hash.

LANGUAGE: sh
CODE:
```
[offline]$ ./build/bin/bitcoin-cli -signet decodepsbt $(cat /path/to/funded_psbt.txt)

{
    ...
}

[offline]$ ./build/bin/bitcoin-cli -signet analyzepsbt $(cat /path/to/funded_psbt.txt)

{
  "inputs": [
    {
      "has_utxo": true,
      "is_final": false,
      "next": "signer",
      "missing": {
        "signatures": [
          "5f2804634d6df60dd080932e83c408b2975cbbb2"
        ]
      }
    }
  ],
  "estimated_vsize": 141,
  "estimated_feerate": 0.00100000,
  "fee": 0.00014100,
  "next": "signer"
}
```

----------------------------------------

TITLE: Including Test, Benchmark and Fuzzing Subdirectories with CMake
DESCRIPTION: Conditionally includes subdirectories for test utilities, benchmarks, tests, and fuzzing targets based on build configuration flags.

LANGUAGE: CMake
CODE:
```
add_subdirectory(test/util)
if(BUILD_BENCH)
  add_subdirectory(bench)
endif()

if(BUILD_TESTS)
  add_subdirectory(test)
endif()

if(BUILD_FUZZ_BINARY)
  add_subdirectory(test/fuzz)
endif()
```

----------------------------------------

TITLE: Running Bitcoin CI Test with Custom Build Parameters
DESCRIPTION: Command to run the test stage with a specific configuration file and custom build parameters. This example forces single-threaded compilation by setting MAKEJOBS to "-j1".

LANGUAGE: bash
CODE:
```
env -i HOME="$HOME" PATH="$PATH" USER="$USER" bash -c 'MAKEJOBS="-j1" FILE_ENV="./ci/test/00_setup_env_arm.sh" ./ci/test_run_all.sh'
```

----------------------------------------

TITLE: Marking GUI Messages for Translation in Qt
DESCRIPTION: Shows how to mark GUI strings as translatable in Qt source code using the tr() function.

LANGUAGE: Qt
CODE:
```
tr("...")
```

----------------------------------------

TITLE: Running clang-tidy on Changed Source Lines Only
DESCRIPTION: Command to run clang-tidy only on the lines that have been changed in git, using diff and clang-tidy-diff.

LANGUAGE: sh
CODE:
```
git diff | ( cd ./src/ && clang-tidy-diff -p2 -path ../build -j $(nproc) )
```

----------------------------------------

TITLE: Generating Test Vectors for Bitcoin Key I/O Tests
DESCRIPTION: Commands to generate valid and invalid test vectors for Bitcoin's key input/output tests. These commands use the gen_key_io_test_vectors.py script with parameters for test type (valid/invalid) and quantity (70), outputting JSON files to the test data directory.

LANGUAGE: bash
CODE:
```
./gen_key_io_test_vectors.py valid 70 > ../../src/test/data/key_io_valid.json
./gen_key_io_test_vectors.py invalid 70 > ../../src/test/data/key_io_invalid.json
```

----------------------------------------

TITLE: Configuring Build Options for libsecp256k1
DESCRIPTION: Defines build configuration options including shared library settings and installation preferences. Controls whether to build shared libraries and whether to install the library based on whether it's used as a top-level project.

LANGUAGE: CMake
CODE:
```
#=============================
# Configurable options
#=============================
option(BUILD_SHARED_LIBS "Build shared libraries." ON)
option(SECP256K1_DISABLE_SHARED "Disable shared library. Overrides BUILD_SHARED_LIBS." OFF)
if(SECP256K1_DISABLE_SHARED)
  set(BUILD_SHARED_LIBS OFF)
endif()

option(SECP256K1_INSTALL "Enable installation." ${PROJECT_IS_TOP_LEVEL})
```

----------------------------------------

TITLE: Configuring x86 SHA-NI Optimizations for Bitcoin Crypto
DESCRIPTION: Conditionally adds x86 SHA-NI optimized implementation when both SSE41 and x86 SHA-NI instructions are available. Enables specialized SHA256 implementation that leverages hardware acceleration for improved performance.

LANGUAGE: CMake
CODE:
```
if(HAVE_SSE41 AND HAVE_X86_SHANI)
  target_compile_definitions(bitcoin_crypto PRIVATE ENABLE_SSE41 ENABLE_X86_SHANI)
  target_sources(bitcoin_crypto PRIVATE sha256_x86_shani.cpp)
  set_property(SOURCE sha256_x86_shani.cpp PROPERTY
    COMPILE_OPTIONS ${X86_SHANI_CXXFLAGS}
  )
endif()
```

----------------------------------------

TITLE: Adding Bitcoin Benchmark Sanity Test in CMake
DESCRIPTION: Configures a high-priority sanity check test for the benchmarking system. This test ensures the benchmark framework itself is functioning correctly before running specific benchmarks.

LANGUAGE: cmake
CODE:
```
add_test(NAME bench_sanity_check_high_priority
  COMMAND bench_bitcoin -sanity-check -priority-level=high
)
```

----------------------------------------

TITLE: I2P Bandwidth Configuration in i2pd
DESCRIPTION: Configuration example for limiting I2P bandwidth usage in the i2pd router. This sets a total bandwidth limit of 256KB/s, shares 50% of this bandwidth, and limits to 20 transit tunnels.

LANGUAGE: config
CODE:
```
bandwidth = 256
share = 50

[limits]
transittunnels = 20
```

----------------------------------------

TITLE: Displaying Help for Bitcoin Core Benchmarking Tool
DESCRIPTION: Command to show the help menu for the benchmarking tool, which displays various options like listing benchmarks without running them or using regex filters.

LANGUAGE: bash
CODE:
```
build/bin/bench_bitcoin -h
```

----------------------------------------

TITLE: Building Bitcoin Core Dependencies for Current Platform
DESCRIPTION: Basic make command to build dependencies for the current architecture and operating system.

LANGUAGE: bash
CODE:
```
make
```

----------------------------------------

TITLE: Optimized G_{c,u} Function Definition
DESCRIPTION: Optimized definition of the G_{c,u} function that extracts and restructures common operations to show that there will always be exactly 0, 4, or 8 t values for a given (u, x) input.

LANGUAGE: pseudocode
CODE:
```
Define G_{c,u}(x) as:
* If c ∈ {0, 1, 4, 5}:
  * If g(-u-x) is square, return ⊥.
  * Let s = -g(u)/(u² + ux + x² + a).
  * Let v = x.
* Otherwise, when c ∈ {2, 3, 6, 7}:
  * Let s = x-u.
  * Let r = √(-s(4g(u) + sh(u))).
  * Let v = (r/s - u)/2.
* Let w = √s.
* Depending on c:
  * If c ∈ {0, 2}: return P_u^{'-1}(v, w).
  * If c ∈ {1, 3}: return P_u^{'-1}(-u-v, w).
  * If c ∈ {4, 6}: return P_u^{'-1}(v, -w).
  * If c ∈ {5, 7}: return P_u^{'-1}(-u-v, -w).
```

----------------------------------------

TITLE: Available Variables for Bitcoin Dependency Recipes
DESCRIPTION: Variables available within build recipes providing path information for staging, extraction, building, and patches. These variables help recipes reference the correct locations during the build process.

LANGUAGE: makefile
CODE:
```
$(1)_staging_dir: package's destination sysroot path
$(1)_staging_prefix_dir: prefix path inside of the package's staging dir
$(1)_extract_dir: path to the package's extracted sources
$(1)_build_dir: path where configure/build/stage commands will be run
$(1)_patch_dir: path where the package's patches (if any) are found
```

----------------------------------------

TITLE: Generating Build Configuration Summary in CMake
DESCRIPTION: Creates a detailed build configuration summary that displays all enabled modules, build parameters, optional features, compiler settings, flags, and other build information.

LANGUAGE: CMake
CODE:
```
message("\n")
message("secp256k1 configure summary")
message("===========================")
message("Build artifacts:")
if(BUILD_SHARED_LIBS)
  set(library_type "Shared")
else()
  set(library_type "Static")
endif()

message("  library type ........................ ${library_type}")
message("Optional modules:")
message("  ECDH ................................ ${SECP256K1_ENABLE_MODULE_ECDH}")
message("  ECDSA pubkey recovery ............... ${SECP256K1_ENABLE_MODULE_RECOVERY}")
message("  extrakeys ........................... ${SECP256K1_ENABLE_MODULE_EXTRAKEYS}")
message("  schnorrsig .......................... ${SECP256K1_ENABLE_MODULE_SCHNORRSIG}")
message("  musig ............................... ${SECP256K1_ENABLE_MODULE_MUSIG}")
message("  ElligatorSwift ...................... ${SECP256K1_ENABLE_MODULE_ELLSWIFT}")
message("Parameters:")
message("  ecmult window size .................. ${SECP256K1_ECMULT_WINDOW_SIZE}")
message("  ecmult gen table size ............... ${SECP256K1_ECMULT_GEN_KB} KiB")
message("Optional features:")
message("  assembly ............................ ${SECP256K1_ASM}")
message("  external callbacks .................. ${SECP256K1_USE_EXTERNAL_DEFAULT_CALLBACKS}")
if(SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY)
  message("  wide multiplication (test-only) ..... ${SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY}")
endif()
message("Optional binaries:")
message("  benchmark ........................... ${SECP256K1_BUILD_BENCHMARK}")
message("  noverify_tests ...................... ${SECP256K1_BUILD_TESTS}")
set(tests_status "${SECP256K1_BUILD_TESTS}")
if(CMAKE_BUILD_TYPE STREQUAL "Coverage")
  set(tests_status OFF)
endif()
message("  tests ............................... ${tests_status}")
message("  exhaustive tests .................... ${SECP256K1_BUILD_EXHAUSTIVE_TESTS}")
message("  ctime_tests ......................... ${SECP256K1_BUILD_CTIME_TESTS}")
message("  examples ............................ ${SECP256K1_BUILD_EXAMPLES}")
message("")
if(CMAKE_CROSSCOMPILING)
  set(cross_status "TRUE, for ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}")
else()
  set(cross_status "FALSE")
endif()
message("Cross compiling ....................... ${cross_status}")
message("Valgrind .............................. ${SECP256K1_VALGRIND}")
get_directory_property(definitions COMPILE_DEFINITIONS)
string(REPLACE ";" " " definitions "${definitions}")
message("Preprocessor defined macros ........... ${definitions}")
message("C compiler ............................ ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION}, ${CMAKE_C_COMPILER}")
message("CFLAGS ................................ ${CMAKE_C_FLAGS}")
get_directory_property(compile_options COMPILE_OPTIONS)
string(REPLACE ";" " " compile_options "${compile_options}")
message("Compile options ....................... " ${compile_options})
if(NOT is_multi_config)
  message("Build type:")
  message(" - CMAKE_BUILD_TYPE ................... ${CMAKE_BUILD_TYPE}")
  string(TOUPPER "${CMAKE_BUILD_TYPE}" build_type)
  message(" - CFLAGS ............................. ${CMAKE_C_FLAGS_${build_type}}")
  message(" - LDFLAGS for executables ............ ${CMAKE_EXE_LINKER_FLAGS_${build_type}}")
  message(" - LDFLAGS for shared libraries ....... ${CMAKE_SHARED_LINKER_FLAGS_${build_type}}")
else()
  message("Supported configurations .............. ${CMAKE_CONFIGURATION_TYPES}")
  message("RelWithDebInfo configuration:")
  message(" - CFLAGS ............................. ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
  message(" - LDFLAGS for executables ............ ${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}")
  message(" - LDFLAGS for shared libraries ....... ${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}")
  message("Debug configuration:")
  message(" - CFLAGS ............................. ${CMAKE_C_FLAGS_DEBUG}")
  message(" - LDFLAGS for executables ............ ${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
  message(" - LDFLAGS for shared libraries ....... ${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
endif()
if(SECP256K1_APPEND_CFLAGS)
  message("SECP256K1_APPEND_CFLAGS ............... ${SECP256K1_APPEND_CFLAGS}")
endif()
if(SECP256K1_APPEND_LDFLAGS)
  message("SECP256K1_APPEND_LDFLAGS .............. ${SECP256K1_APPEND_LDFLAGS}")
endif()
message("")
if(print_msan_notice)
  message(
    "Note:\n"
    "  MemorySanitizer detected, tried to add -fno-sanitize-memory-param-retval to compile options\n"
    "  to avoid false positives in ctime_tests. Pass -DSECP256K1_BUILD_CTIME_TESTS=OFF to avoid this.\n"
  )
endif()
if(SECP256K1_EXPERIMENTAL)
  message(
    "  ******\n"
    "  WARNING: experimental build\n"
    "  Experimental features do not have stable APIs or properties, and may not be safe for production use.\n"
    "  ******\n"
  )
endif()
```

----------------------------------------

TITLE: ZeroMQ Message Structure for Block Hash Notifications
DESCRIPTION: Format specification for 'hashblock' notifications, which include the 32-byte block hash and a sequence number to detect lost messages.

LANGUAGE: plain
CODE:
```
| hashblock | <32-byte block hash in Little Endian> | <uint32 sequence number in Little Endian>
```

----------------------------------------

TITLE: Loading a UTXO Snapshot in Bitcoin Core
DESCRIPTION: Command to load a UTXO set snapshot using the loadtxoutset RPC with an extended timeout to prevent interruption during the loading process.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli -rpcclienttimeout=0 loadtxoutset /path/to/input
```

----------------------------------------

TITLE: Demonstrating walletpassphrase RPC Behavior in Bitcoin Core 0.8
DESCRIPTION: This snippet shows the 0.8 behavior of the walletpassphrase RPC command, where attempting to unlock an already unlocked wallet fails and preserves the original unlock time.

LANGUAGE: bash
CODE:
```
> walletpassphrase 1000
walletunlocktime = now + 1000
> walletpassphrase 10
Error: Wallet is already unlocked (old unlock time stays)
```

----------------------------------------

TITLE: Cross-Compiling Bitcoin Core Dependencies for Windows
DESCRIPTION: Example make command for building Bitcoin Core dependencies targeting Windows 64-bit with multithreading.

LANGUAGE: bash
CODE:
```
make HOST=x86_64-w64-mingw32 -j4
```

----------------------------------------

TITLE: Configuring QR Code and DBus Support
DESCRIPTION: Sets options for QR code support in the GUI and DBus support on Linux systems with the required package dependencies.

LANGUAGE: cmake
CODE:
```
cmake_dependent_option(WITH_QRENCODE "Enable QR code support." ON "BUILD_GUI" OFF)
if(WITH_QRENCODE)
  find_package(QRencode MODULE REQUIRED)
  set(USE_QRCODE TRUE)
endif()

cmake_dependent_option(WITH_DBUS "Enable DBus support." ON "CMAKE_SYSTEM_NAME STREQUAL \"Linux\" AND BUILD_GUI" OFF)
```

----------------------------------------

TITLE: Configuring Bitcoin Core with Multiple ZeroMQ Notifications
DESCRIPTION: Example configuration for bitcoind showing how to set up multiple ZeroMQ notification endpoints for different notification types along with a high water mark setting for managing queue limits.

LANGUAGE: bash
CODE:
```
$ bitcoind -zmqpubhashtx=tcp://127.0.0.1:28332 \
               -zmqpubhashtx=tcp://192.168.1.2:28332 \
               -zmqpubhashblock="tcp://[::1]:28333" \
               -zmqpubrawtx=ipc:///tmp/bitcoind.tx.raw \
               -zmqpubhashtxhwm=10000
```

----------------------------------------

TITLE: Configuring Platform-Specific ARM64 CRC32C Implementation in CMake
DESCRIPTION: Creates a separate object library for ARM64 CRC32C implementation with specific compiler flags for ARM architecture. This prevents compiling unsupported instructions into code that runs on systems without ARM32 support.

LANGUAGE: CMake
CODE:
```
# ARM64 CRC32C code is built separately, so we don't accidentally compile
# unsupported instructions into code that gets run without ARM32 support.
add_library(crc32c_arm64 OBJECT "")
target_sources(crc32c_arm64
  PRIVATE
    "${PROJECT_BINARY_DIR}/include/crc32c/crc32c_config.h"
    "src/crc32c_arm64.cc"
    "src/crc32c_arm64.h"
)
if(HAVE_ARM64_CRC32C)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # TODO(pwnall): Insert correct flag when VS gets ARM64 CRC32C support.
    target_compile_options(crc32c_arm64 PRIVATE "/arch:NOTYET")
  else(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_options(crc32c_arm64 PRIVATE "-march=armv8-a+crc+crypto")
  endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
endif(HAVE_ARM64_CRC32C)

# CMake only enables PIC by default in SHARED and MODULE targets.
if(BUILD_SHARED_LIBS)
  set_property(TARGET crc32c_arm64 PROPERTY POSITION_INDEPENDENT_CODE TRUE)
endif(BUILD_SHARED_LIBS)
```

----------------------------------------

TITLE: Addressing OSX crash issue
DESCRIPTION: A fix for crashes on Mac OS X 10.6 specific to the 0.10 release. This is identified by commit hash 8752b5c.

LANGUAGE: Bash
CODE:
```
8752b5c 0.10 fix for crashes on OSX 10.6
```

----------------------------------------

TITLE: Configuring Bitcoin Core with CMake Using Depends Toolchain
DESCRIPTION: CMake command to configure Bitcoin Core build using the toolchain file created by the depends system.

LANGUAGE: bash
CODE:
```
cmake -B build --toolchain depends/x86_64-w64-mingw32/toolchain.cmake
```

----------------------------------------

TITLE: Testing Retry Functionality with a Failing Command
DESCRIPTION: Demonstration of retry's exponential backoff behavior when a command repeatedly fails, showing the increasing sleep intervals between retries.

LANGUAGE: sh
CODE:
```
retry 'echo "y u no work"; false'
```

----------------------------------------

TITLE: Example Output from Minisketch Reconciliation in C
DESCRIPTION: Shows the expected output when running the example. The list contains the elements that differ between Alice's set [3000-3009] and Bob's set [3002-3011], with the order being arbitrary.

LANGUAGE: c
CODE:
```
$ gcc -std=c99 -Wall -Wextra -o example ./doc/example.c -Lsrc/ -lminisketch -lstdc++ && ./example
3000 is in only one of the two sets
3011 is in only one of the two sets
3001 is in only one of the two sets
3010 is in only one of the two sets
```

----------------------------------------

TITLE: Starting Bitcoin Node on Signet Network
DESCRIPTION: Command to start a Bitcoin node on the signet network in daemon mode. This is a prerequisite for the multisig wallet tutorial.

LANGUAGE: bash
CODE:
```
./build/bin/bitcoind -signet -daemon
```

----------------------------------------

TITLE: Improving OSX GUI experience
DESCRIPTION: Multiple improvements to the macOS graphical user interface, including memory handling optimizations, dock icon behavior fixes, and command line options integration with preferences.

LANGUAGE: Bash
CODE:
```
2c08406 some mac specifiy cleanup (memory handling, unnecessary code)
```

LANGUAGE: Bash
CODE:
```
81145a6 fix OSX dock icon window reopening
```

LANGUAGE: Bash
CODE:
```
786cf72 fix a issue where "command line options"-action overwrite "Preference"-action (on OSX)
```

----------------------------------------

TITLE: Build Variable Overrides in Bitcoin Build System
DESCRIPTION: List of common build variables that can be overridden or appended in a package recipe. These variables control compilers, flags, and environment settings for the build process.

LANGUAGE: makefile
CODE:
```
$(package)_cc
$(package)_cxx
$(package)_objc
$(package)_objcxx
$(package)_ar
$(package)_ranlib
$(package)_nm
$(package)_cflags
$(package)_cxxflags
$(package)_ldflags
$(package)_cppflags
$(package)_config_env
$(package)_build_env
$(package)_stage_env
$(package)_build_opts
$(package)_config_opts
```

----------------------------------------

TITLE: Configuring libsecp256k1 Project in CMake
DESCRIPTION: Initializes the CMake project for libsecp256k1 with version information, project description, and language settings. Sets up the library's versioning according to libtool standards and configures C language requirements.

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.16)

#=============================
# Project / Package metadata
#=============================
project(libsecp256k1
  # The package (a.k.a. release) version is based on semantic versioning 2.0.0 of
  # the API. All changes in experimental modules are treated as
  # backwards-compatible and therefore at most increase the minor version.
  VERSION 0.6.0
  DESCRIPTION "Optimized C library for ECDSA signatures and secret/public key operations on curve secp256k1."
  HOMEPAGE_URL "https://github.com/bitcoin-core/secp256k1"
  LANGUAGES C
)
enable_testing()
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

if(CMAKE_VERSION VERSION_LESS 3.21)
  # Emulates CMake 3.21+ behavior.
  if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
    set(PROJECT_IS_TOP_LEVEL ON)
    set(${PROJECT_NAME}_IS_TOP_LEVEL ON)
  else()
    set(PROJECT_IS_TOP_LEVEL OFF)
    set(${PROJECT_NAME}_IS_TOP_LEVEL OFF)
  endif()
endif()

# The library version is based on libtool versioning of the ABI. The set of
# rules for updating the version can be found here:
# https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
# All changes in experimental modules are treated as if they don't affect the
# interface and therefore only increase the revision.
set(${PROJECT_NAME}_LIB_VERSION_CURRENT 5)
set(${PROJECT_NAME}_LIB_VERSION_REVISION 0)
set(${PROJECT_NAME}_LIB_VERSION_AGE 0)

#=============================
# Language setup
#=============================
set(CMAKE_C_STANDARD 90)
set(CMAKE_C_EXTENSIONS OFF)
```

----------------------------------------

TITLE: Using Qt Pluralization with Numerus Forms
DESCRIPTION: Demonstrates how to handle plural forms in Qt translation strings using the tr() function's third argument for optional plurality.

LANGUAGE: Qt
CODE:
```
tr("%n hour(s)","",secs/HOUR_IN_SECONDS);
tr("%n day(s)","",secs/DAY_IN_SECONDS);
tr("%n week(s)","",secs/WEEK_IN_SECONDS);
```

----------------------------------------

TITLE: Running a Fail Script When Retries Are Exhausted
DESCRIPTION: Example demonstrating how to execute a fallback script when all retry attempts fail using the -f option.

LANGUAGE: sh
CODE:
```
retry -t 3 -f 'echo "oh poopsickles"' 'echo "y u no work"; false'
```

----------------------------------------

TITLE: Bitcoin Application Paths on Linux
DESCRIPTION: The file paths for the Bitcoin daemon and Qt application on Linux systems.

LANGUAGE: text
CODE:
```
bitcoind/bitcoin-qt
```

----------------------------------------

TITLE: Build Targets for Individual Packages in Bitcoin Build System
DESCRIPTION: List of make targets available for building individual packages or specific stages of packages. These targets are useful for debugging the dependency build process.

LANGUAGE: makefile
CODE:
```
make ${package}
make ${package}_fetched
make ${package}_extracted
make ${package}_preprocessed
make ${package}_configured
make ${package}_built
make ${package}_staged
make ${package}_postprocessed
make ${package}_cached
make ${package}_cached_checksum
```

----------------------------------------

TITLE: Executing the deterministic-fuzz-coverage tool
DESCRIPTION: Command to run the deterministic fuzz coverage tool against a specific fuzz target. Requires a build directory, the qa-assets repository, and a fuzz target name.

LANGUAGE: bash
CODE:
```
cargo run --manifest-path ./contrib/devtools/deterministic-fuzz-coverage/Cargo.toml -- $PWD/build_dir $PWD/qa-assets/fuzz_corpora fuzz_target_name
```

----------------------------------------

TITLE: Building libminisketch from Source with Bash
DESCRIPTION: This snippet shows the commands required to clone, configure, and build the libminisketch library from its GitHub repository, resulting in a libminisketch.a static library file for linking with other applications.

LANGUAGE: bash
CODE:
```
git clone https://github.com/bitcoin-core/minisketch
cd minisketch
./autogen.sh && ./configure && make
```

----------------------------------------

TITLE: Marking Non-GUI Messages for Translation in C++
DESCRIPTION: Shows how to mark non-GUI strings as translatable in C++ source code using the _() function.

LANGUAGE: C++
CODE:
```
_("...")
```

----------------------------------------

TITLE: Setting Up and Running afl++ Fuzzer for Bitcoin Core
DESCRIPTION: Complete quickstart guide for setting up and running the afl++ fuzzer against Bitcoin Core. Includes cloning repositories, building the fuzzer, creating input directories, and running the fuzzing process.

LANGUAGE: sh
CODE:
```
$ git clone https://github.com/bitcoin/bitcoin
$ cd bitcoin/
$ git clone https://github.com/AFLplusplus/AFLplusplus
$ make -C AFLplusplus/ source-only
# If afl-clang-lto is not available, see
# https://github.com/AFLplusplus/AFLplusplus#a-selecting-the-best-afl-compiler-for-instrumenting-the-target
$ cmake -B build_fuzz \
   -DCMAKE_C_COMPILER="$(pwd)/AFLplusplus/afl-clang-lto" \
   -DCMAKE_CXX_COMPILER="$(pwd)/AFLplusplus/afl-clang-lto++" \
   -DBUILD_FOR_FUZZING=ON
$ cmake --build build_fuzz
# For macOS you may need to ignore x86 compilation checks when running "cmake --build". If so,
# try compiling using: AFL_NO_X86=1 cmake --build build_fuzz
$ mkdir -p inputs/ outputs/
$ echo A > inputs/thin-air-input
$ FUZZ=bech32 ./AFLplusplus/afl-fuzz -i inputs/ -o outputs/ -- build_fuzz/bin/fuzz
# You may have to change a few kernel parameters to test optimally - afl-fuzz
# will print an error and suggestion if so.
```

----------------------------------------

TITLE: Setting Up and Running afl++ Fuzzer for Bitcoin Core
DESCRIPTION: Complete quickstart guide for setting up and running the afl++ fuzzer against Bitcoin Core. Includes cloning repositories, building the fuzzer, creating input directories, and running the fuzzing process.

LANGUAGE: sh
CODE:
```
$ git clone https://github.com/bitcoin/bitcoin
$ cd bitcoin/
$ git clone https://github.com/AFLplusplus/AFLplusplus
$ make -C AFLplusplus/ source-only
# If afl-clang-lto is not available, see
# https://github.com/AFLplusplus/AFLplusplus#a-selecting-the-best-afl-compiler-for-instrumenting-the-target
$ cmake -B build_fuzz \
   -DCMAKE_C_COMPILER="$(pwd)/AFLplusplus/afl-clang-lto" \
   -DCMAKE_CXX_COMPILER="$(pwd)/AFLplusplus/afl-clang-lto++" \
   -DBUILD_FOR_FUZZING=ON
$ cmake --build build_fuzz
# For macOS you may need to ignore x86 compilation checks when running "cmake --build". If so,
# try compiling using: AFL_NO_X86=1 cmake --build build_fuzz
$ mkdir -p inputs/ outputs/
$ echo A > inputs/thin-air-input
$ FUZZ=bech32 ./AFLplusplus/afl-fuzz -i inputs/ -o outputs/ -- build_fuzz/bin/fuzz
# You may have to change a few kernel parameters to test optimally - afl-fuzz
# will print an error and suggestion if so.
```

----------------------------------------

TITLE: Setting Bitcoin Core Minimum CMake Version and Source Check
DESCRIPTION: Defines the minimum required CMake version (3.22) and prevents in-source builds to maintain clean source directories.

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.22)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
  message(FATAL_ERROR "In-source builds are not allowed.")
endif()
```

----------------------------------------

TITLE: Extracting Xcode XIP on Linux
DESCRIPTION: Commands to extract the Xcode.app from the downloaded XIP archive on a Linux system. This uses the apple-sdk-tools repository to handle the extraction process.

LANGUAGE: bash
CODE:
```
# Install/clone tools needed for extracting Xcode.app
apt install cpio
git clone https://github.com/bitcoin-core/apple-sdk-tools.git

# Unpack the .xip and place the resulting Xcode.app in your current
# working directory
python3 apple-sdk-tools/extract_xcode.py -f Xcode_15.xip | cpio -d -i
```

----------------------------------------

TITLE: Running Bitcoin Core with IPv4 Discoverability
DESCRIPTION: Command to run Bitcoin Core with Tor support while also allowing the node to be reachable via IPv4, trading some privacy for increased connectivity.

LANGUAGE: bash
CODE:
```
./bitcoind ... -discover
```

----------------------------------------

TITLE: Setting CMake Policy for Reserved Target Names
DESCRIPTION: Sets the CMake policy CMP0171 to NEW if available, which handles reserved target names like 'codegen'.

LANGUAGE: cmake
CODE:
```
if(POLICY CMP0171)
  # `codegen` is a reserved target name.
  # See: https://cmake.org/cmake/help/latest/policy/CMP0171.html
  cmake_policy(SET CMP0171 NEW)
endif()
```

----------------------------------------

TITLE: Installing Bitcoin Benchmark Binary in CMake
DESCRIPTION: Configures the installation of the bench_bitcoin executable as a binary component. This makes the benchmarking tool available in the system after installation.

LANGUAGE: cmake
CODE:
```
install_binary_component(bench_bitcoin)
```

----------------------------------------

TITLE: Setting CMake Policy for Reserved Target Names
DESCRIPTION: Sets the CMake policy CMP0171 to NEW if available, which handles reserved target names like 'codegen'.

LANGUAGE: cmake
CODE:
```
if(POLICY CMP0171)
  # `codegen` is a reserved target name.
  # See: https://cmake.org/cmake/help/latest/policy/CMP0171.html
  cmake_policy(SET CMP0171 NEW)
endif()
```

----------------------------------------

TITLE: Authorization ACL Configuration for Guix Build Farm Key
DESCRIPTION: Example of an access control list (ACL) configuration for the Guix build farm's signing key in /etc/guix/acl. This configuration authorizes the Ed25519 elliptic curve public key for the Guix import tag.

LANGUAGE: lisp
CODE:
```
(acl
 (entry
  (public-key
   (ecc
    (curve Ed25519)
    (q #8D156F295D24B0D9A86FA5741A840FF2D24F60F7B6C4134814AD55625971B394#)
    )
   )
  (tag
   (guix import)
   )
  )
 )
```

----------------------------------------

TITLE: Configuring and Installing pkg-config and Bitcoin Kernel Library
DESCRIPTION: Generates the pkg-config file for libbitcoinkernel and sets up installation rules for the library and its metadata. This ensures the library can be found and linked by other projects.

LANGUAGE: CMake
CODE:
```
configure_file(${PROJECT_SOURCE_DIR}/libbitcoinkernel.pc.in ${PROJECT_BINARY_DIR}/libbitcoinkernel.pc @ONLY)
install(FILES ${PROJECT_BINARY_DIR}/libbitcoinkernel.pc DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig" COMPONENT libbitcoinkernel)

install(TARGETS bitcoinkernel
  RUNTIME
    DESTINATION ${CMAKE_INSTALL_BINDIR}
    COMPONENT libbitcoinkernel
  LIBRARY
    DESTINATION ${CMAKE_INSTALL_LIBDIR}
    COMPONENT libbitcoinkernel
  ARCHIVE
    DESTINATION ${CMAKE_INSTALL_LIBDIR}
    COMPONENT libbitcoinkernel
)
```

----------------------------------------

TITLE: Enabling BIP157 Compact Filters
DESCRIPTION: Configuration flags to enable serving BIP157 compact filters to network peers.

LANGUAGE: bash
CODE:
```
-blockfilterindex=1 -peerblockfilters=1
```

----------------------------------------

TITLE: Tracing UTXO Set Changes with bpftrace
DESCRIPTION: Command to run the log_utxos.bt script that logs information about coins added to, spent from, or uncached from the UTXO set using the utxocache:add, utxocache:spend, and utxocache:uncache tracepoints.

LANGUAGE: bash
CODE:
```
bpftrace contrib/tracing/log_utxos.bt
```

----------------------------------------

TITLE: Self-signing Bitcoin Core Binaries on macOS
DESCRIPTION: Instructions for removing the quarantine attribute and self-signing Bitcoin Core binaries on macOS to allow execution. This is required when running Bitcoin Core on macOS.

LANGUAGE: bash
CODE:
```
cd /path/to/bitcoin-28.0/bin
xattr -d com.apple.quarantine bitcoin-cli bitcoin-qt bitcoin-tx bitcoin-util bitcoin-wallet bitcoind test_bitcoin
codesign -s - bitcoin-cli bitcoin-qt bitcoin-tx bitcoin-util bitcoin-wallet bitcoind test_bitcoin
```

----------------------------------------

TITLE: Running Configure Script After Source Code Release
DESCRIPTION: Instructions for running the configure script after extracting the source code tarball. Due to a regression in the release process, users need to install autotools and run autogen.sh before configure.

LANGUAGE: Shell
CODE:
```
./autogen.sh
```

----------------------------------------

TITLE: Bitcoin Wallet API Changes: Account to Label Transition
DESCRIPTION: Reference table showing the deprecated 'account' API methods and their new 'label' API counterparts. This lists method name changes, parameters, and behavioral differences as Bitcoin transitions from accounts to labels concept in wallet management.

LANGUAGE: markdown
CODE:
```
| Deprecated Method       | New Method            | Notes       |
| :---------------------- | :-------------------- | :-----------|
| `getaccount`            | `getaddressinfo`      | `getaddressinfo` returns a json object with address information instead of just the name of the account as a string. |
| `getaccountaddress`     | n/a                   | There is no replacement for `getaccountaddress` since labels do not have an associated receive address. |
| `getaddressesbyaccount` | `getaddressesbylabel` | `getaddressesbylabel` returns a json object with the addresses as keys, instead of a list of strings. |
| `getreceivedbyaccount`  | `getreceivedbylabel`  | _no change in behavior_ |
| `listaccounts`          | `listlabels`          | `listlabels` does not return a balance or accept `minconf` and `watchonly` arguments. |
| `listreceivedbyaccount` | `listreceivedbylabel` | Both methods return new `label` fields, along with `account` fields for backward compatibility. |
| `move`                  | n/a                   | _no replacement_ |
| `sendfrom`              | n/a                   | _no replacement_ |
| `setaccount`            | `setlabel`            | Both methods now: <ul><li>allow assigning labels to any address, instead of raising an error if the address is not receiving address.<li>delete the previous label associated with an address when the final address using that label is reassigned to a different label, instead of making an implicit `getaccountaddress` call to ensure the previous label still has a receiving address. |
```

----------------------------------------

TITLE: Configuring Security and Build Optimization Options
DESCRIPTION: Sets options for binary hardening, reducing exports, compiler warnings as errors, and ccache usage for faster builds.

LANGUAGE: cmake
CODE:
```
option(ENABLE_HARDENING "Attempt to harden the resulting executables." ON)
option(REDUCE_EXPORTS "Attempt to reduce exported symbols in the resulting executables." OFF)
option(WERROR "Treat compiler warnings as errors." OFF)
option(WITH_CCACHE "Attempt to use ccache for compiling." ON)
```

----------------------------------------

TITLE: Building Bitcoin Core Without Git
DESCRIPTION: Command for building Bitcoin Core from source without requiring git access. This is necessary due to a regression in the release process of 0.20.2.

LANGUAGE: Shell
CODE:
```
BITCOIN_GENBUILD_NO_GIT=1 make
```

----------------------------------------

TITLE: Configuring GCC/Clang Compiler Options for LevelDB
DESCRIPTION: Sets up compiler flags for GCC and Clang, enabling strict prototype warnings for C code and disabling C++ exceptions and RTTI (Run-Time Type Information).

LANGUAGE: CMake
CODE:
```
else(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  # Enable strict prototype warnings for C code in clang and gcc.
  if(NOT CMAKE_C_FLAGS MATCHES "-Wstrict-prototypes")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wstrict-prototypes")
  endif(NOT CMAKE_C_FLAGS MATCHES "-Wstrict-prototypes")

  # Disable C++ exceptions.
  string(REGEX REPLACE "-fexceptions" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions")

  # Disable RTTI.
  string(REGEX REPLACE "-frtti" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")
endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
```

----------------------------------------

TITLE: Setting Fallback Fee for Test Networks in Bitcoin Configuration
DESCRIPTION: Example showing how to set the fallback fee for testnet and regtest networks. Since the default fallback fee is now 0 for all chains (previously 0.0002 for test chains), users need to explicitly configure it if they want the previous behavior.

LANGUAGE: shell
CODE:
```
fallbackfee=0.0002
```

----------------------------------------

TITLE: Rebasing Pull Requests on Latest Target Branch in Bitcoin Development
DESCRIPTION: A bash sequence showing how to rebase a pull request that conflicts with the target branch. This ensures changes are built on top of the latest upstream commit, maintaining a clean git history.

LANGUAGE: bash
CODE:
```
git fetch https://github.com/bitcoin/bitcoin  # Fetch the latest upstream commit
git rebase FETCH_HEAD  # Rebuild commits on top of the new base
```

----------------------------------------

TITLE: Configuring Multiprocess Build Option
DESCRIPTION: Sets up experimental multiprocess architecture support which requires the libmultiprocess library.

LANGUAGE: cmake
CODE:
```
option(WITH_MULTIPROCESS "Build multiprocess bitcoin-node and bitcoin-gui executables in addition to monolithic bitcoind and bitcoin-qt executables. Requires libmultiprocess library. Experimental." OFF)
if(WITH_MULTIPROCESS)
  find_package(Libmultiprocess REQUIRED COMPONENTS Lib)
  find_package(LibmultiprocessNative REQUIRED COMPONENTS Bin
    NAMES Libmultiprocess
  )
endif()
```

----------------------------------------

TITLE: Fix to Bech32 Encoding Calls in Python Test Vector Generator
DESCRIPTION: Reference to a fix in the Python test vector generator script for Bech32 encoding calls. This relates to the implementation of BIP 350 (Bech32m).

LANGUAGE: Python
CODE:
```
gen_key_io_test_vectors.py
```

----------------------------------------

TITLE: Configuring SSE41 Optimizations for Bitcoin Crypto
DESCRIPTION: Conditionally adds SSE41-optimized SHA256 implementation when the platform supports it. Defines compiler flags and additional source files to enable SSE41 specific optimizations for cryptographic functions.

LANGUAGE: CMake
CODE:
```
if(HAVE_SSE41)
  target_compile_definitions(bitcoin_crypto PRIVATE ENABLE_SSE41)
  target_sources(bitcoin_crypto PRIVATE sha256_sse41.cpp)
  set_property(SOURCE sha256_sse41.cpp PROPERTY
    COMPILE_OPTIONS ${SSE41_CXXFLAGS}
  )
endif()
```

----------------------------------------

TITLE: Using query_options with listunspent RPC in Bitcoin Core
DESCRIPTION: The listunspent RPC now accepts an additional JSON object parameter called query_options that allows filtering UTXOs by amount and count criteria.

LANGUAGE: json
CODE:
```
{
  "minimumAmount" - a number specifying the minimum value of each UTXO
  "maximumAmount" - a number specifying the maximum value of each UTXO
  "maximumCount" - a number specifying the minimum number of UTXOs
  "minimumSumAmount" - a number specifying the minimum sum value of all UTXOs
}
```

----------------------------------------

TITLE: Renaming rpcuser.py to rpcauth.py
DESCRIPTION: The rpcuser.py script was renamed to rpcauth.py as mentioned in commit #11836. The script was also modified to use 'python' instead of 'python2' as mentioned in commit #11830.

LANGUAGE: Python
CODE:
```
# From commit #11830
# Changed shebang from 'python2' to 'python'
```

----------------------------------------

TITLE: Passing Sanitizer Flags to secp256k1 Library
DESCRIPTION: Extracts compiler and linker sanitizer flags from the parent project and passes them to the secp256k1 library. This ensures consistent sanitization settings between Bitcoin Core and its cryptographic dependency.

LANGUAGE: CMake
CODE:
```
include(GetTargetInterface)
# -fsanitize and related flags apply to both C++ and C,
# so we can pass them down to libsecp256k1 as CFLAGS and LDFLAGS.
get_target_interface(SECP256K1_APPEND_CFLAGS "" sanitize_interface COMPILE_OPTIONS)
string(STRIP "${SECP256K1_APPEND_CFLAGS} ${APPEND_CPPFLAGS}" SECP256K1_APPEND_CFLAGS)
string(STRIP "${SECP256K1_APPEND_CFLAGS} ${APPEND_CFLAGS}" SECP256K1_APPEND_CFLAGS)
set(SECP256K1_APPEND_CFLAGS ${SECP256K1_APPEND_CFLAGS} CACHE STRING "" FORCE)
get_target_interface(SECP256K1_APPEND_LDFLAGS "" sanitize_interface LINK_OPTIONS)
string(STRIP "${SECP256K1_APPEND_LDFLAGS} ${APPEND_LDFLAGS}" SECP256K1_APPEND_LDFLAGS)
set(SECP256K1_APPEND_LDFLAGS ${SECP256K1_APPEND_LDFLAGS} CACHE STRING "" FORCE)
```

----------------------------------------

TITLE: Adding Bitcoin PPA Repository Command for Ubuntu
DESCRIPTION: Command for Ubuntu users to add Matt Corallo's PPA repository to automatically keep Bitcoin up-to-date on their system.

LANGUAGE: bash
CODE:
```
sudo apt-add-repository ppa:bitcoin/bitcoin
```

----------------------------------------

TITLE: Fixing Windows path locale issues in Bitcoin Core
DESCRIPTION: A commit (424ae66) that resolves an issue with non-ASCII characters in data directory paths on Windows (GitHub issue #6078) by not applying the "C" locale to boost::filesystem::path.

LANGUAGE: Markdown
CODE:
```
- `424ae66` don't imbue boost::filesystem::path with locale "C" on windows (fixes #6078)
```

----------------------------------------

TITLE: Setting LevelDB Library Version Properties
DESCRIPTION: Sets version properties for the LevelDB target library, including version and soversion for shared library compatibility.

LANGUAGE: CMake
CODE:
```
set_target_properties(leveldb
  PROPERTIES VERSION ${PROJECT_VERSION} SOVERSION ${PROJECT_VERSION_MAJOR})
```

----------------------------------------

TITLE: Configuring and Building bitcoin-wallet Executable
DESCRIPTION: Defines the bitcoin-wallet executable target when wallet functionality is enabled. This utility provides command-line wallet management capabilities separate from the main Bitcoin node, with dependencies on wallet, common, and utility libraries.

LANGUAGE: CMake
CODE:
```
if(ENABLE_WALLET)
  add_subdirectory(wallet)

  if(BUILD_WALLET_TOOL)
    add_executable(bitcoin-wallet
      bitcoin-wallet.cpp
      init/bitcoin-wallet.cpp
      wallet/wallettool.cpp
    )
    add_windows_resources(bitcoin-wallet bitcoin-wallet-res.rc)
    target_link_libraries(bitcoin-wallet
      core_interface
      bitcoin_wallet
      bitcoin_common
      bitcoin_util
      Boost::headers
    )
    install_binary_component(bitcoin-wallet HAS_MANPAGE)
  endif()
endif()
```

----------------------------------------

TITLE: Adding Bitcoin PPA Repository for Ubuntu
DESCRIPTION: Command to add Matt Corallo's PPA repository to Ubuntu for automatic Bitcoin updates, followed by instructions to install the bitcoin-qt package.

LANGUAGE: Bash
CODE:
```
sudo apt-add-repository ppa:bitcoin/bitcoin
```

----------------------------------------

TITLE: Installing Atom Packages for CRC32C Development
DESCRIPTION: Command to install helpful Atom editor packages for CRC32C development, including autocompletion, building, formatting, and linting tools.

LANGUAGE: bash
CODE:
```
apm install autocomplete-clang build build-cmake clang-format language-cmake \
    linter linter-clang
```

----------------------------------------

TITLE: Fixing boost::get usage with boost 1.58 in Bitcoin Core Wallet
DESCRIPTION: A commit (824c011) that addresses compatibility issues with boost::get when using boost 1.58 in the Bitcoin Core wallet component.

LANGUAGE: Markdown
CODE:
```
- `824c011` fix boost::get usage with boost 1.58
```

----------------------------------------

TITLE: Defining Multisig Descriptors
DESCRIPTION: Creates external and internal multisig descriptors using the extracted xpubs, adds checksums to the descriptors, and prepares them for wallet import by formatting them in a JSON array.

LANGUAGE: bash
CODE:
```
external_desc="wsh(sortedmulti(2,${xpubs["external_xpub_1"]},${xpubs["external_xpub_2"]},${xpubs["external_xpub_3"]}))"
internal_desc="wsh(sortedmulti(2,${xpubs["internal_xpub_1"]},${xpubs["internal_xpub_2"]},${xpubs["internal_xpub_3"]}))"

external_desc_sum=$(./build/bin/bitcoin-cli -signet getdescriptorinfo $external_desc | jq '.descriptor')
internal_desc_sum=$(./build/bin/bitcoin-cli -signet getdescriptorinfo $internal_desc | jq '.descriptor')

multisig_ext_desc="{\"desc\": $external_desc_sum, \"active\": true, \"internal\": false, \"timestamp\": \"now\"}"
multisig_int_desc="{\"desc\": $internal_desc_sum, \"active\": true, \"internal\": true, \"timestamp\": \"now\"}"

multisig_desc="[$multisig_ext_desc, $multisig_int_desc]"
```

----------------------------------------

TITLE: Conditional Wallet Benchmarks Configuration in CMake
DESCRIPTION: Adds additional wallet-specific benchmark sources and dependencies when the wallet functionality is enabled in the build. These benchmarks test various wallet operations like coin selection, balance calculation, and transaction creation.

LANGUAGE: cmake
CODE:
```
if(ENABLE_WALLET)
  target_sources(bench_bitcoin
    PRIVATE
      coin_selection.cpp
      wallet_balance.cpp
      wallet_create.cpp
      wallet_create_tx.cpp
      wallet_loading.cpp
      wallet_ismine.cpp
      wallet_migration.cpp
  )
  target_link_libraries(bench_bitcoin bitcoin_wallet)
endif()
```

----------------------------------------

TITLE: Set to Power Series Transformation
DESCRIPTION: Mathematical expression showing how a set of field elements is transformed into a combined power series by adding together the series for each individual element.

LANGUAGE: math
CODE:
```
S(M) = S({m_1,m_2,...}) = S(m_1) + S(m_2) + ... = (1 + 1 + ...) + (m_1 + m_2 + ...)x + (m_1^2 + m_2^2 + ...)x^2 + (m_1^3 + ...
```

----------------------------------------

TITLE: Enhancing initialization and environment setup
DESCRIPTION: Various improvements to the initialization process, including locale settings, environment setup for tests, and command string sanitization to improve security and reliability.

LANGUAGE: Bash
CODE:
```
c9e022b Initialization: set Boost path locale in main thread
```

LANGUAGE: Bash
CODE:
```
23126a0 Sanitize command strings before logging them.
```

LANGUAGE: Bash
CODE:
```
323de27 Initialization: setup environment before starting Qt tests
```

LANGUAGE: Bash
CODE:
```
7494e09 Initialization: setup environment before starting tests
```

LANGUAGE: Bash
CODE:
```
df45564 Initialization: set fallback locale as environment variable
```

----------------------------------------

TITLE: Implementing normalize Function for Range Correction in Python
DESCRIPTION: A function that normalizes the result of modular inverse calculations to ensure the output is in the range [0,M). It handles sign adjustment and range correction in one operation.

LANGUAGE: python
CODE:
```
def normalize(sign, v, M):
    """Compute sign*v mod M, where v is in range (-2*M,M); output in [0,M)."""
    assert sign == 1 or sign == -1
    # v in (-2*M,M)
    if v < 0:
        v += M
    # v in (-M,M). Now multiply v with sign (which can only be 1 or -1).
    if sign == -1:
        v = -v
    # v in (-M,M)
    if v < 0:
        v += M
    # v in [0,M)
    return v
```

----------------------------------------

TITLE: Checking Compiler and Platform Features for CRC32C
DESCRIPTION: Runs a series of compiler feature checks for builtin prefetch, SSE4.2 support, ARM64 CRC32C extensions, and auxiliary vector functionality that affect the performance of the CRC32C implementation.

LANGUAGE: CMake
CODE:
```
include(CheckCXXCompilerFlag)
# Used by glog.
check_cxx_compiler_flag(-Wno-deprecated CRC32C_HAVE_NO_DEPRECATED)
# Used by glog.
check_cxx_compiler_flag(-Wno-sign-compare CRC32C_HAVE_NO_SIGN_COMPARE)
# Used by glog.
check_cxx_compiler_flag(-Wno-unused-parameter CRC32C_HAVE_NO_UNUSED_PARAMETER)
# Used by googletest.
check_cxx_compiler_flag(-Wno-missing-field-initializers
                        CRC32C_HAVE_NO_MISSING_FIELD_INITIALIZERS)

# Check for __builtin_prefetch support in the compiler.
include(CheckCXXSourceCompiles)
check_cxx_source_compiles("
int main() {
  char data = 0;
  const char* address = &data;
  __builtin_prefetch(address, 0, 0);
  return 0;
}
"  HAVE_BUILTIN_PREFETCH)

# Check for _mm_prefetch support in the compiler.
include(CheckCXXSourceCompiles)
check_cxx_source_compiles("
#if defined(_MSC_VER)
#include <intrin.h>
#else  // !defined(_MSC_VER)
#include <xmmintrin.h>
#endif  // defined(_MSC_VER)

int main() {
  char data = 0;
  const char* address = &data;
  _mm_prefetch(address, _MM_HINT_NTA);
  return 0;
}
"  HAVE_MM_PREFETCH)

# Check for SSE4.2 support in the compiler.
set(OLD_CMAKE_REQURED_FLAGS ${CMAKE_REQUIRED_FLAGS})
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} /arch:AVX")
else(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -msse4.2")
endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
check_cxx_source_compiles("
#if defined(_MSC_VER)
#include <intrin.h>
#else  // !defined(_MSC_VER)
#include <cpuid.h>
#include <nmmintrin.h>
#endif  // defined(_MSC_VER)

int main() {
  _mm_crc32_u8(0, 0); _mm_crc32_u32(0, 0);
#if defined(_M_X64) || defined(__x86_64__)
   _mm_crc32_u64(0, 0);
#endif // defined(_M_X64) || defined(__x86_64__)
  return 0;
}
"  HAVE_SSE42)
set(CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQURED_FLAGS})

# Check for ARMv8 w/ CRC and CRYPTO extensions support in the compiler.
set(OLD_CMAKE_REQURED_FLAGS ${CMAKE_REQUIRED_FLAGS})
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  # TODO(pwnall): Insert correct flag when VS gets ARM CRC32C support.
  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} /arch:NOTYET")
else(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -march=armv8-a+crc+crypto")
endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
check_cxx_source_compiles("
#include <arm_acle.h>
#include <arm_neon.h>

int main() {
  __crc32cb(0, 0); __crc32ch(0, 0); __crc32cw(0, 0); __crc32cd(0, 0);
  vmull_p64(0, 0);
  return 0;
}
" HAVE_ARM64_CRC32C)
set(CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQURED_FLAGS})

# Check for strong getauxval() support in the system headers.
check_cxx_source_compiles("
#include <arm_acle.h>
#include <arm_neon.h>
#include <sys/auxv.h>

int main() {
  getauxval(AT_HWCAP);
  return 0;
}
" HAVE_STRONG_GETAUXVAL)

# Check for weak getauxval() support in the compiler.
check_cxx_source_compiles("
unsigned long getauxval(unsigned long type) __attribute__((weak));
#define AT_HWCAP 16

int main() {
  getauxval(AT_HWCAP);
  return 0;
}
" HAVE_WEAK_GETAUXVAL)
```

----------------------------------------

TITLE: Computing GCD Using Division Steps Algorithm in Python
DESCRIPTION: Implementation of the Greatest Common Divisor (GCD) algorithm using division steps as described in Bernstein and Yang's paper. This algorithm computes the GCD of an odd integer f and another integer g through iterative rewriting of variables until g reaches 0.

LANGUAGE: python
CODE:
```
def gcd(f, g):
    """Compute the GCD of an odd integer f and another integer g."""
    assert f & 1  # require f to be odd
    delta = 1     # additional state variable
    while g != 0:
        assert f & 1  # f will be odd in every iteration
        if delta > 0 and g & 1:
            delta, f, g = 1 - delta, g, (g - f) // 2
        elif g & 1:
            delta, f, g = 1 + delta, f, (g + f) // 2
        else:
            delta, f, g = 1 + delta, f, (g    ) // 2
    return abs(f)
```

----------------------------------------

TITLE: Development Build and Test Command for CRC32C
DESCRIPTION: Single command to rebuild the CRC32C project and run tests. This is intended for use during development to verify changes.

LANGUAGE: bash
CODE:
```
cmake .. && cmake --build . && ctest --output-on-failure
```

----------------------------------------

TITLE: Limiting Maximum Connections in Bitcoin Core
DESCRIPTION: Reduces the maximum number of peer connections allowed, directly limiting the network traffic. Should be used cautiously as too few connections can affect the node's security model.

LANGUAGE: bash
CODE:
```
-maxconnections=<num>
```

----------------------------------------

TITLE: Configuring Security Hardening Options for Bitcoin in CMake
DESCRIPTION: Sets up comprehensive security hardening flags for different platforms (Windows, macOS, Linux). Includes stack protection, control flow integrity, branch protection, and various linker security options.

LANGUAGE: cmake
CODE:
```
if(ENABLE_HARDENING)
  add_library(hardening_interface INTERFACE)
  target_link_libraries(core_interface INTERFACE hardening_interface)
  if(MSVC)
    try_append_linker_flag("/DYNAMICBASE" TARGET hardening_interface)
    try_append_linker_flag("/HIGHENTROPYVA" TARGET hardening_interface)
    try_append_linker_flag("/NXCOMPAT" TARGET hardening_interface)
  else()

    # _FORTIFY_SOURCE requires that there is some level of optimization,
    # otherwise it does nothing and just creates a compiler warning.
    try_append_cxx_flags("-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3"
      RESULT_VAR cxx_supports_fortify_source
      SOURCE "int main() {
              # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
                #error
              #endif
              }"
    )
    if(cxx_supports_fortify_source)
      target_compile_options(hardening_interface INTERFACE
        -U_FORTIFY_SOURCE
        -D_FORTIFY_SOURCE=3
      )
    endif()
    unset(cxx_supports_fortify_source)

    try_append_cxx_flags("-Wstack-protector" TARGET hardening_interface SKIP_LINK)
    try_append_cxx_flags("-fstack-protector-all" TARGET hardening_interface)
    try_append_cxx_flags("-fcf-protection=full" TARGET hardening_interface)

    if(MINGW)
      # stack-clash-protection is a no-op for Windows.
      # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90458 for more details.
    else()
      try_append_cxx_flags("-fstack-clash-protection" TARGET hardening_interface)
    endif()

    if(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
      if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        try_append_cxx_flags("-mbranch-protection=bti" TARGET hardening_interface SKIP_LINK)
      else()
        try_append_cxx_flags("-mbranch-protection=standard" TARGET hardening_interface SKIP_LINK)
      endif()
    endif()

    try_append_linker_flag("-Wl,--enable-reloc-section" TARGET hardening_interface)
    try_append_linker_flag("-Wl,--dynamicbase" TARGET hardening_interface)
    try_append_linker_flag("-Wl,--nxcompat" TARGET hardening_interface)
    try_append_linker_flag("-Wl,--high-entropy-va" TARGET hardening_interface)
    try_append_linker_flag("-Wl,-z,relro" TARGET hardening_interface)
    try_append_linker_flag("-Wl,-z,now" TARGET hardening_interface)
    try_append_linker_flag("-Wl,-z,separate-code" TARGET hardening_interface)
    if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
      try_append_linker_flag("-Wl,-fixup_chains" TARGET hardening_interface)
    endif()
  endif()
endif()
```

----------------------------------------

TITLE: Configuring Security Hardening Options for Bitcoin in CMake
DESCRIPTION: Sets up comprehensive security hardening flags for different platforms (Windows, macOS, Linux). Includes stack protection, control flow integrity, branch protection, and various linker security options.

LANGUAGE: cmake
CODE:
```
if(ENABLE_HARDENING)
  add_library(hardening_interface INTERFACE)
  target_link_libraries(core_interface INTERFACE hardening_interface)
  if(MSVC)
    try_append_linker_flag("/DYNAMICBASE" TARGET hardening_interface)
    try_append_linker_flag("/HIGHENTROPYVA" TARGET hardening_interface)
    try_append_linker_flag("/NXCOMPAT" TARGET hardening_interface)
  else()

    # _FORTIFY_SOURCE requires that there is some level of optimization,
    # otherwise it does nothing and just creates a compiler warning.
    try_append_cxx_flags("-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3"
      RESULT_VAR cxx_supports_fortify_source
      SOURCE "int main() {
              # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
                #error
              #endif
              }"
    )
    if(cxx_supports_fortify_source)
      target_compile_options(hardening_interface INTERFACE
        -U_FORTIFY_SOURCE
        -D_FORTIFY_SOURCE=3
      )
    endif()
    unset(cxx_supports_fortify_source)

    try_append_cxx_flags("-Wstack-protector" TARGET hardening_interface SKIP_LINK)
    try_append_cxx_flags("-fstack-protector-all" TARGET hardening_interface)
    try_append_cxx_flags("-fcf-protection=full" TARGET hardening_interface)

    if(MINGW)
      # stack-clash-protection is a no-op for Windows.
      # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90458 for more details.
    else()
      try_append_cxx_flags("-fstack-clash-protection" TARGET hardening_interface)
    endif()

    if(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
      if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        try_append_cxx_flags("-mbranch-protection=bti" TARGET hardening_interface SKIP_LINK)
      else()
        try_append_cxx_flags("-mbranch-protection=standard" TARGET hardening_interface SKIP_LINK)
      endif()
    endif()

    try_append_linker_flag("-Wl,--enable-reloc-section" TARGET hardening_interface)
    try_append_linker_flag("-Wl,--dynamicbase" TARGET hardening_interface)
    try_append_linker_flag("-Wl,--nxcompat" TARGET hardening_interface)
    try_append_linker_flag("-Wl,--high-entropy-va" TARGET hardening_interface)
    try_append_linker_flag("-Wl,-z,relro" TARGET hardening_interface)
    try_append_linker_flag("-Wl,-z,now" TARGET hardening_interface)
    try_append_linker_flag("-Wl,-z,separate-code" TARGET hardening_interface)
    if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
      try_append_linker_flag("-Wl,-fixup_chains" TARGET hardening_interface)
    endif()
  endif()
endif()
```

----------------------------------------

TITLE: Configuring MSVC Compiler Options for CRC32C
DESCRIPTION: Sets warning-as-error compiler flags for Visual Studio builds of the CRC32C library components.

LANGUAGE: CMake
CODE:
```
# Warnings as errors in Visual Studio for this project's targets.
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set_property(TARGET crc32c APPEND PROPERTY COMPILE_OPTIONS "/WX")
  set_property(TARGET crc32c_arm64 APPEND PROPERTY COMPILE_OPTIONS "/WX")
  set_property(TARGET crc32c_sse42 APPEND PROPERTY COMPILE_OPTIONS "/WX")
endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
```

----------------------------------------

TITLE: Updating f and g Values Using Transition Matrix in Python
DESCRIPTION: Function that multiplies the transition matrix (divided by 2^N) with the vector [f, g]. Due to properties of the divstep transformation, the result will always be divisible by 2^N, so the final division is just a bit shift.

LANGUAGE: python
CODE:
```
def update_fg(f, g, t):
    """Multiply matrix t/2^N with [f, g]."""
    u, v, q, r = t
    cf, cg = u*f + v*g, q*f + r*g
    # (t / 2^N) should cleanly apply to [f,g] so the result of t*[f,g] should have N zero
    # bottom bits.
    assert cf % 2**N == 0
    assert cg % 2**N == 0
    return cf >> N, cg >> N
```

----------------------------------------

TITLE: Command for Converting Raw Transaction to PSBT Format
DESCRIPTION: The converttopsbt RPC converts an unsigned raw transaction to PSBT format, ignoring existing signatures.

LANGUAGE: markdown
CODE:
```
- **`converttopsbt` (Creator)** is a utility RPC that converts an
  unsigned raw transaction to PSBT format. It ignores existing signatures.
```

----------------------------------------

TITLE: Demonstrating ADL (Argument-Dependent Lookup) in C++
DESCRIPTION: This example illustrates how Argument-Dependent Lookup can make code harder to maintain. It shows why namespace specification is necessary to avoid unintended function resolution.

LANGUAGE: C++
CODE:
```
#include <filesystem>

namespace fs {
class path : public std::filesystem::path
{
};
// The intention is to disallow this function.
bool exists(const fs::path& p) = delete;
} // namespace fs

int main()
{
    //fs::path p; // error
    std::filesystem::path p; // compiled
    exists(p); // ADL being used for unqualified name lookup
}
```

----------------------------------------

TITLE: Demonstrating ADL (Argument-Dependent Lookup) in C++
DESCRIPTION: This example illustrates how Argument-Dependent Lookup can make code harder to maintain. It shows why namespace specification is necessary to avoid unintended function resolution.

LANGUAGE: C++
CODE:
```
#include <filesystem>

namespace fs {
class path : public std::filesystem::path
{
};
// The intention is to disallow this function.
bool exists(const fs::path& p) = delete;
} // namespace fs

int main()
{
    //fs::path p; // error
    std::filesystem::path p; // compiled
    exists(p); // ADL being used for unqualified name lookup
}
```

----------------------------------------

TITLE: Defining and Building the Bitcoin Kernel Library in CMake
DESCRIPTION: Creates the bitcoinkernel library target with all the required source files. This library serves as Bitcoin's consensus engine and includes components from various parts of the codebase needed for consensus operations.

LANGUAGE: CMake
CODE:
```
add_library(bitcoinkernel
  bitcoinkernel.cpp
  chain.cpp
  checks.cpp
  chainparams.cpp
  coinstats.cpp
  context.cpp
  cs_main.cpp
  disconnected_transactions.cpp
  mempool_removal_reason.cpp
  ../arith_uint256.cpp
  ../chain.cpp
  ../coins.cpp
  ../compressor.cpp
  ../consensus/merkle.cpp
  ../consensus/tx_check.cpp
  ../consensus/tx_verify.cpp
  ../core_read.cpp
  ../dbwrapper.cpp
  ../deploymentinfo.cpp
  ../deploymentstatus.cpp
  ../flatfile.cpp
  ../hash.cpp
  ../logging.cpp
  ../node/blockstorage.cpp
  ../node/chainstate.cpp
  ../node/utxo_snapshot.cpp
  ../policy/ephemeral_policy.cpp
  ../policy/feerate.cpp
  ../policy/packages.cpp
  ../policy/policy.cpp
  ../policy/rbf.cpp
  ../policy/settings.cpp
  ../policy/truc_policy.cpp
  ../pow.cpp
  ../primitives/block.cpp
  ../primitives/transaction.cpp
  ../pubkey.cpp
  ../random.cpp
  ../randomenv.cpp
  ../script/interpreter.cpp
  ../script/script.cpp
  ../script/script_error.cpp
  ../script/sigcache.cpp
  ../script/solver.cpp
  ../signet.cpp
  ../streams.cpp
  ../support/lockedpool.cpp
  ../sync.cpp
  ../txdb.cpp
  ../txmempool.cpp
  ../uint256.cpp
  ../util/chaintype.cpp
  ../util/check.cpp
  ../util/feefrac.cpp
  ../util/fs.cpp
  ../util/fs_helpers.cpp
  ../util/hasher.cpp
  ../util/moneystr.cpp
  ../util/rbf.cpp
  ../util/serfloat.cpp
  ../util/signalinterrupt.cpp
  ../util/strencodings.cpp
  ../util/string.cpp
  ../util/syserror.cpp
  ../util/threadnames.cpp
  ../util/time.cpp
  ../util/tokenpipe.cpp
  ../validation.cpp
  ../validationinterface.cpp
  ../versionbits.cpp
)
```

----------------------------------------

TITLE: XML Structure for Translated Plural Forms
DESCRIPTION: Shows the structure of a numerus form translation in Qt's XML .ts file format, with separate forms for singular and plural cases.

LANGUAGE: XML
CODE:
```
<message numerus="yes">
    <source>%n active connection(s) to Bitcoin network</source>
    <translation>
        <numerusform>%n active connection to Bitcoin network</numerusform>
        <numerusform>%n active connections to Bitcoin network</numerusform>
    </translation>
</message>
```

----------------------------------------

TITLE: Running CRC32C Tests on Android
DESCRIPTION: Commands to install and run the CRC32C tests on an Android device using ADB. The sequence pushes the binary, sets execution permissions, runs the tests, and cleans up.

LANGUAGE: bash
CODE:
```
adb push crc32c_tests /data/local/tmp
adb shell chmod +x /data/local/tmp/crc32c_tests
adb shell 'cd /data/local/tmp && ./crc32c_tests'
adb shell rm /data/local/tmp/crc32c_tests
```

----------------------------------------

TITLE: Markdown Documentation of Bitcoin's Replace-by-Fee Policy
DESCRIPTION: Comprehensive markdown documentation explaining Bitcoin's Replace-by-Fee (RBF) policy, including the conditions for transaction replacement and historical changes to the implementation across different Bitcoin Core versions.

LANGUAGE: markdown
CODE:
```
# Mempool Replacements

## Current Replace-by-Fee Policy

A transaction conflicts with an in-mempool transaction ("directly conflicting transaction") if they
spend one or more of the same inputs. A transaction may conflict with multiple in-mempool
transactions.

A transaction ("replacement transaction") may replace its directly conflicting transactions and
their in-mempool descendants (together, "original transactions") if, in addition to passing all
other consensus and policy rules, each of the following conditions are met:

1. (Removed)

2. The replacement transaction only include an unconfirmed input if that input was included in
   one of the directly conflicting transactions. An unconfirmed input spends an output from a
   currently-unconfirmed transaction.

   *Rationale*: When RBF was originally implemented, the mempool did not keep track of
   ancestor feerates yet. This rule was suggested as a temporary restriction.

3. The replacement transaction pays an absolute fee of at least the sum paid by the original
   transactions.

   *Rationale*: Only requiring the replacement transaction to have a higher feerate could allow an
   attacker to bypass node minimum relay feerate requirements and cause the network to repeatedly
   relay slightly smaller replacement transactions without adding any more fees. Additionally, if
   any of the original transactions would be included in the next block assembled by an economically
   rational miner, a replacement policy allowing the replacement transaction to decrease the absolute
   fees in the next block would be incentive-incompatible.

4. The additional fees (difference between absolute fee paid by the replacement transaction and the
   sum paid by the original transactions) pays for the replacement transaction's bandwidth at or
   above the rate set by the node's incremental relay feerate. For example, if the incremental relay
   feerate is 1 satoshi/vB and the replacement transaction is 500 virtual bytes total, then the
   replacement pays a fee at least 500 satoshis higher than the sum of the original transactions.

   *Rationale*: Try to prevent DoS attacks where an attacker causes the network to repeatedly relay
   transactions each paying a tiny additional amount in fees, e.g. just 1 satoshi.

5. The number of original transactions does not exceed 100. More precisely, the sum of all
   directly conflicting transactions' descendant counts (number of transactions inclusive of itself
   and its descendants) must not exceed 100; it is possible that this overestimates the true number
   of original transactions.

   *Rationale*: Try to prevent DoS attacks where an attacker is able to easily occupy and flush out
   significant portions of the node's mempool using replacements with multiple directly conflicting
   transactions, each with large descendant sets.

6. The replacement transaction's feerate is greater than the feerates of all directly conflicting
   transactions.

   *Rationale*: This rule was originally intended to ensure that the replacement transaction is
   preferable for block-inclusion, compared to what would be removed from the mempool. This rule
   predates ancestor feerate-based transaction selection.

This set of rules is similar but distinct from BIP125.

## History

* Opt-in full replace-by-fee (without inherited signaling) honoured in mempool and mining as of
  **v0.12.0** ([PR 6871](https://github.com/bitcoin/bitcoin/pull/6871)).

* [BIP125](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki) defined based on
  Bitcoin Core implementation.

* The incremental relay feerate used to calculate the required additional fees is distinct from
  `-minrelaytxfee` and configurable using `-incrementalrelayfee`
  ([PR #9380](https://github.com/bitcoin/bitcoin/pull/9380)).

* RBF enabled by default in the wallet GUI as of **v0.18.1** ([PR
  #11605](https://github.com/bitcoin/bitcoin/pull/11605)).

* Full replace-by-fee enabled as a configurable mempool policy as of **v24.0** ([PR
  #25353](https://github.com/bitcoin/bitcoin/pull/25353)).

* Full replace-by-fee is the default policy as of **v28.0** ([PR #30493](https://github.com/bitcoin/bitcoin/pull/30493)).

* Signaling for replace-by-fee is no longer required as of [PR 30592](https://github.com/bitcoin/bitcoin/pull/30592).
```

----------------------------------------

TITLE: Defining the Bitcoin Qt Static Library with Source Files
DESCRIPTION: Creates the bitcoinqt static library with all source files for the Bitcoin GUI. Includes platform-specific sources using generator expressions and configures compiler settings, include paths, and library dependencies.

LANGUAGE: CMake
CODE:
```
# The bitcoinqt sources have to include headers in
# order to parse them to collect translatable strings.
add_library(bitcoinqt STATIC EXCLUDE_FROM_ALL
  bantablemodel.cpp
  bantablemodel.h
  bitcoin.cpp
  bitcoin.h
  bitcoinaddressvalidator.cpp
  bitcoinaddressvalidator.h
  bitcoinamountfield.cpp
  bitcoinamountfield.h
  bitcoingui.cpp
  bitcoingui.h
  bitcoinunits.cpp
  bitcoinunits.h
  clientmodel.cpp
  clientmodel.h
  csvmodelwriter.cpp
  csvmodelwriter.h
  guiutil.cpp
  guiutil.h
  initexecutor.cpp
  initexecutor.h
  intro.cpp
  intro.h
  $<$<PLATFORM_ID:Darwin>:macdockiconhandler.h>
  $<$<PLATFORM_ID:Darwin>:macdockiconhandler.mm>
  $<$<PLATFORM_ID:Darwin>:macnotificationhandler.h>
  $<$<PLATFORM_ID:Darwin>:macnotificationhandler.mm>
  $<$<PLATFORM_ID:Darwin>:macos_appnap.h>
  $<$<PLATFORM_ID:Darwin>:macos_appnap.mm>
  modaloverlay.cpp
  modaloverlay.h
  networkstyle.cpp
  networkstyle.h
  notificator.cpp
  notificator.h
  optionsdialog.cpp
  optionsdialog.h
  optionsmodel.cpp
  optionsmodel.h
  peertablemodel.cpp
  peertablemodel.h
  peertablesortproxy.cpp
  peertablesortproxy.h
  platformstyle.cpp
  platformstyle.h
  qvalidatedlineedit.cpp
  qvalidatedlineedit.h
  qvaluecombobox.cpp
  qvaluecombobox.h
  rpcconsole.cpp
  rpcconsole.h
  splashscreen.cpp
  splashscreen.h
  trafficgraphwidget.cpp
  trafficgraphwidget.h
  utilitydialog.cpp
  utilitydialog.h
  $<$<PLATFORM_ID:Windows>:winshutdownmonitor.cpp>
  $<$<PLATFORM_ID:Windows>:winshutdownmonitor.h>
  bitcoin.qrc
  ${CMAKE_CURRENT_BINARY_DIR}/bitcoin_locale.qrc
)
target_compile_definitions(bitcoinqt
  PUBLIC
    QT_NO_KEYWORDS
    QT_USE_QSTRINGBUILDER
)
target_include_directories(bitcoinqt
  PUBLIC
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>
)
set_property(SOURCE macnotificationhandler.mm
  # Ignore warnings "'NSUserNotificationCenter' is deprecated: first deprecated in macOS 11.0".
  APPEND PROPERTY COMPILE_OPTIONS -Wno-deprecated-declarations
)
target_link_libraries(bitcoinqt
  PUBLIC
    Qt6::Widgets
  PRIVATE
    core_interface
    bitcoin_cli
    leveldb
    Boost::headers
    $<TARGET_NAME_IF_EXISTS:QRencode::QRencode>
    $<$<PLATFORM_ID:Darwin>:-framework\ AppKit>
    $<$<CXX_COMPILER_ID:MSVC>:shlwapi>
)
```

----------------------------------------

TITLE: Finding Scripted Diffs in Git Repository using grep
DESCRIPTION: This command searches the git log for commit messages containing a specific pattern to find all previous uses of scripted diffs in the repository.

LANGUAGE: bash
CODE:
```
git log --grep="-BEGIN VERIFY SCRIPT-"
```

----------------------------------------

TITLE: Displaying SQLite Wallet Structure in Markdown Table
DESCRIPTION: A markdown table showing the file structure of SQLite database-based wallets in Bitcoin Core.

LANGUAGE: markdown
CODE:
```
Subdirectory | File                 | Description
-------------|----------------------|-------------
`./`         | `wallet.dat`         | Personal wallet (a SQLite database) with keys and transactions
`./`         | `wallet.dat-journal` | SQLite Rollback Journal file for `wallet.dat`. Usually created at start and deleted on shutdown. A user *must keep it as safe* as the `wallet.dat` file.
```

----------------------------------------

TITLE: Linking Libraries to Bitcoin-Qt Test Executable
DESCRIPTION: Links required libraries to the test_bitcoin-qt executable, including core Bitcoin components, Qt libraries, and test utilities.

LANGUAGE: cmake
CODE:
```
target_link_libraries(test_bitcoin-qt
  core_interface
  bitcoinqt
  test_util
  bitcoin_node
  Boost::headers
  Qt6::Test
)
```

----------------------------------------

TITLE: Checking Tor Cookie File Group
DESCRIPTION: Command to determine the group ownership of the Tor authentication cookie file, typically stored at /run/tor/control.authcookie on Linux systems.

LANGUAGE: bash
CODE:
```
TORGROUP=$(stat -c '%G' /run/tor/control.authcookie)
```

----------------------------------------

TITLE: Configuring Testing for CRC32C Library in CMake
DESCRIPTION: Sets up testing infrastructure using GoogleTest, including test targets and test files. Configures compiler options for the test targets and includes test dependencies.

LANGUAGE: CMake
CODE:
```
if(CRC32C_BUILD_TESTS)
  enable_testing()

  # Prevent overriding the parent project's compiler/linker settings on Windows.
  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
  set(install_gtest OFF)
  set(install_gmock OFF)

  # This project is tested using GoogleTest.
  add_subdirectory("third_party/googletest")

  # GoogleTest triggers a missing field initializers warning.
  if(CRC32C_HAVE_NO_MISSING_FIELD_INITIALIZERS)
    set_property(TARGET gtest
        APPEND PROPERTY COMPILE_OPTIONS -Wno-missing-field-initializers)
    set_property(TARGET gmock
        APPEND PROPERTY COMPILE_OPTIONS -Wno-missing-field-initializers)
  endif(CRC32C_HAVE_NO_MISSING_FIELD_INITIALIZERS)

  add_executable(crc32c_tests "")
  target_sources(crc32c_tests
    PRIVATE
      "${PROJECT_BINARY_DIR}/include/crc32c/crc32c_config.h"
      "src/crc32c_arm64_unittest.cc"
      "src/crc32c_extend_unittests.h"
      "src/crc32c_portable_unittest.cc"
      "src/crc32c_prefetch_unittest.cc"
      "src/crc32c_read_le_unittest.cc"
      "src/crc32c_round_up_unittest.cc"
      "src/crc32c_sse42_unittest.cc"
      "src/crc32c_unittest.cc"
      "src/crc32c_test_main.cc"
  )
  target_link_libraries(crc32c_tests crc32c gtest)

  # Warnings as errors in Visual Studio for this project's targets.
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set_property(TARGET crc32c_tests APPEND PROPERTY COMPILE_OPTIONS "/WX")
  endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")

  if(CRC32C_USE_GLOG)
    target_link_libraries(crc32c_tests glog)
  endif(CRC32C_USE_GLOG)

  add_test(NAME crc32c_tests COMMAND crc32c_tests)

  add_executable(crc32c_capi_tests "")
  target_sources(crc32c_capi_tests
    PRIVATE
      "src/crc32c_capi_unittest.c"
  )
  target_link_libraries(crc32c_capi_tests crc32c)

  # Warnings as errors in Visual Studio for this project's targets.
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set_property(TARGET crc32c_capi_tests APPEND PROPERTY COMPILE_OPTIONS "/WX")
  endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")

  add_test(NAME crc32c_capi_tests COMMAND crc32c_capi_tests)
endif(CRC32C_BUILD_TESTS)
```

----------------------------------------

TITLE: Importing Qt Plugins for Bitcoin-Qt Tests
DESCRIPTION: Imports necessary Qt plugins for the test_bitcoin-qt executable to ensure proper functioning of Qt components.

LANGUAGE: cmake
CODE:
```
import_plugins(test_bitcoin-qt)
```

----------------------------------------

TITLE: Bitcoin Node Onion Addresses List
DESCRIPTION: A list of Tor onion service addresses for Bitcoin nodes. These v3 onion addresses enable users to connect to the Bitcoin network anonymously through Tor. Each address is formatted as an onion domain followed by port 8333, which is the standard Bitcoin network port.

LANGUAGE: plaintext
CODE:
```
c5gkqgv7br7xirqcpfbupyxyesx7fbif4gqr4hogirlngre46oewk4yd.onion:8333
c6tktxgcu54pvdfw52bd6udbpydesdivyxlaveubanon3oay452r4lqd.onion:8333
c6upbdl5ro7l4r6hqnzxy4spsye3wu2myop4ntzcw57zwjlrhzppihid.onion:8333
c7hwtt7psq6rtcl4yfiuzkphrrjusicge7kfzs7i6bpdgpbf2as3egid.onion:8333
chltdbogcrolm4wwhop3qizo4cxrn22wkhvgb5pcervzs3bzx7u2f7id.onion:8333
cjm24gef2dpbnwznbv6ad5lrod4gvet4f4dm2su5vm6wpdpt2bnajryd.onion:8333
cjzcwym4hv2ie6yhgqp5ex3hvwueoqvt2aqucvv5glodixw4ldbmtqyd.onion:8333
cmm4777ii7j7y5ufu3k4izuhx54ldrq2lehaoaowim66tkbtkeolyhyd.onion:8333
cmxivv7cbrdqneyxaii5bls6yvknpa7zbrridnyk3ztpwnxkjkoi5uyd.onion:8333
cqm26nhpdlmfzpooozujsyuokqtuixjt2bdr26rdsilebntnighjliid.onion:8333
crfh3vjreblr3tepu6lkpwkqagfom6k5gc3c2bn74atw5xiuxv53sdid.onion:8333
cs2uedzkwwlhihdi2mm7popaiydm4wp6uwakut4or6mwjfbmrxjjrmid.onion:8333
csjxou6mxjf2yljlg6zkqezsntvm5xzpgsg3ymnd4xhpj5zffmfip5id.onion:8333
ctl5rsuuaakuz5zlcjpzj2y3wuba2apoasggznnrg63bqfdhjyeueoid.onion:8333
d2klz5ggkyc6657hwi4xoyq7jbv5wj7vtlb5uqv6huihhw264esi6xqd.onion:8333
d2lbtmbrdozfd3wsq5vbw632k6n6jjo3h45v5qigx2qcqfuclzifh6qd.onion:8333
d4xkamq3szbc3tznyzjcdtvfbiaaq32dekaudma6dkzp2l5ogpy4uaid.onion:8333
d6vg4wbrl2inoe6tfqf5fo4xivqoavxbzgd6qmduoap7k34hgomekiqd.onion:8333
ddhrkj3l527e45tdqmfmm7olmisgrkisgx7243x2klax7h4jytmsjlqd.onion:8333
dku2lusultkhvdh2nbnty7blcv3fdwqh3qblmzhydprdsnjjiwp7wpqd.onion:8333
dnmb4ifydabk2n7dwy73xyc75mrksl6rnhidr2p7xsxgk64vcvghwxyd.onion:8333
dnwbaxecn4xxupvtqvigoopzeys5cstvqv6u5zpfj2u37uqmq6s77kqd.onion:8333
dwz5ycilgykv3npjcn55t5nqf6nkabtwmxqthvs3spsael2dlfrksoqd.onion:8333
e47xwhzcnz3nakum3wbouqm2uhb6try5dn4hcdzfz65ie5kw3mnu3jqd.onion:8333
e4khd6hsooslfwexrcwlpwba5uinfpvziv6sgigvkzymrlfzposj64id.onion:8333
e5c2dam2twutxqsv6j2lhq5y7o7t3hcsiyfgqfe3qe73t3nhrqapddid.onion:8333
e5ju4gc3jd2p56syoyci7etmyjg7tfbd4722nbtxr3rqhfm7eew7icyd.onion:8333
eaertx5wvxzhlfjd3rskz2f6a3unblufagmadrtpycj3dpfrwopvs7qd.onion:8333
eaix3x3rlogmpdnvwpwgsyj5fiuiwnsfpgxtmztacp7van64l7d4ebad.onion:8333
eaui3zjivtoohv2hd2nupoe5ujpeksl4zvbgqxtvb3d6tbpin4tzhrid.onion:8333
eebfo5fk3xzipldarvwyjsn2jchpl6calkine3gnvbrfyqkqndlnzhqd.onion:8333
efvwrivcbtr7dk2vr7ofqpjerusgfxritkq4agqnsceh6qcpgjmp6cyd.onion:8333
ehxiikephektrexse6hl3otmqgrfletdkkuop4ifufhe6sby2okkq5id.onion:8333
eikoeq43vloeieb37nm4znqwll6kbmvuzmtdch4y2a7fw5icrrloeaid.onion:8333
ej5sof7pylkojmz3fvmouzgzmrjkyhvvpy6lns7737djzuf77y3theyd.onion:8333
ej6xgq5vapglcqtzf7gae6tmenhu4ve3twg4hdanbftii7k4f2x2k2ad.onion:8333
ejmir5e6doj2k5upakum4koucthtw5dq3uledahecsdjq4bo75z3jsyd.onion:8333
enchh7j5453cay2ygonpuot5bcikdc6flqy6mfd2wsw3z7sxv2ehouad.onion:8333
enhp5lczc4mjig5t6hdcxkokdtzngejapxiuyw72soggajggyefn25ad.onion:8333
eph75gzxeibberoljtyftb5jmawm7rxkvfqx2saxbu7z6eimo3xcn5ad.onion:8333
er7exr6r5w77r4c3i5wb5r64d6wzwo2a7ndzze7ob5sgl3a5fgvlzoqd.onion:8333
erzm3rr663nb5rjcwm4vejxhgbwt7ahkw5yywl7h7y52uyfk6p6gdqid.onion:8333
eu5feoa7bdme6pfvcyp3rj6u4plarlpvsuzv5ux7sbd5cduygsdsyzqd.onion:8333
evircgqqrc6vhdivhjpuathfpzmek5qp62gsf2ohoaiyeynffssdpgad.onion:8333
evrts3xnjcmijzaokev3eiocbvqkberud7ugk5e3vgaotww2ihlxl2id.onion:8333
f3kh5b3boak5zkwnpwyostmfxo63wna5rvmsh6r7mfdbaogeimtv2eyd.onion:8333
fbh63e5uysamticqogfkd3f7yoo33pip2yloun7wc62zvexzoabltnad.onion:8333
fckjnfmhw37jpevtexlcxr5v3lm43pdotlz42ajpmpu3zio6etv2qiid.onion:8333
fdcthm6b3ltzjz7d6cvccltcwxvyoxaol3awjzghhbpotskzouuv2kqd.onion:8333
ffycrr4d6pwyq5x4r5onwtyxtvd3iqj2mlf33srxdu6opezzpfofa2id.onion:8333
fhh2tfv2rbqytnqprobxqp5fy6wlmfoge6punxj47k2dddpc2qgq2cqd.onion:8333
fj4wuboarofhshcrkwqd7iponopb6wb3dn2fsmvj6finmgl6hicwpeqd.onion:8333
fjgyfvbloy5aqcxmdtjq6qwngs42dzml7hodo5uivm4r2gji2grqpqyd.onion:8333
fk6vmbqusfbphq6prkeugchlgssviohw6p2zki3osoc2c3jqhfx3rwad.onion:8333
fkxtgwkswxdbmb5kmdblw4gautm7zh6mds4xyvzd3cyeygh33ggiooyd.onion:8333
fmbxkhm3ykpjod4nnxrbk3jk4pn5bcv6ysmfaam36sepcb3vqwybfnqd.onion:8333
fonc2zpwyprpa5i4wvcayeyezizvxom3jnbibdhs7vjg6xti7fohjkad.onion:8333
fpt7t244pgquaqciv6s2kpm3dmifp6hajwlaenaotwpi3smuutxsaaqd.onion:8333
fqczapitclhatilusvmsw5qkvg2nksjoju464dvrltvyqq5zy2kftsyd.onion:8333
fqd7k2geb3klth3n3hzaywl2pc4akwkzo64vjofs5egqvq3okbrxlgid.onion:8333
fqgtcdbevgyc2qs5lkxkxtdjkdbwbg5fpodlkx25peulsgzn7nqlxgyd.onion:8333
frtcgu6iecmpkx5vsh3togf475oiwjlxpuh3rreetjkryh3ghahkjyid.onion:8333
fugsghemfzgdgc7kgbs3nc5pysyicn2mqlnc6ah2uxfbls7rac3k5hid.onion:8333
fvq4fy4ilsn2y6sktykb7qjdhpvylg2cayuhngxnyorprr4lcs7vgkqd.onion:8333
g2b7vvsv5xf6jewazsoommk5zqbv7rlnu4m7wtvmhc76mpn7ho2ydsyd.onion:8333
g4hhckbn3we7nkdprpb5vzdzgvrrrg7b3ubkf4t3g4c35yx5rqwrroyd.onion:8333
g53laknf2qomk2npziez55ekrgutveojja4cdxx7bx4fqpjd5o4oahyd.onion:8333
g65soedj325yp4y276egzf7tgexjom4diygzbmtxmlpqkunltpkb4hqd.onion:8333
g73ujt2n2l3zbpwvcb757nalpfb5tkprqgh2m2sk3rpl7g6hjp4zu3ad.onion:8333
gaeaun5gf5tc5dhhwp2uzs5r7zumr55jptp5gxxmcmwapnqv6rvkw2yd.onion:8333
gbv2yflw7wyo4ivwcf5vtgjhdikewxahwpuw6zy2rykigsn4fq5shxqd.onion:8333
gfo24oosqklizwom7nlok5i5ioi5yriqpp5vtgut3rtukndix22lsbad.onion:8333
gfq2z63ggmeszsqpdzg5cfhsou6st3qhkj256beege6yyfodhmbc2iad.onion:8333
gjyyjdpa6tryaikzun52iiyalsmeop7n6t5ss6aglo24it4ufbejeaqd.onion:8333
gkxu3524ncgpml53cwdyhrxfpdyflrh2elwqmu765lccc4ckuobvmbid.onion:8333
glhm6srmyanw4f5yjq4z5kultmpea6syepzgxtqechrn25lc3anpvlid.onion:8333
glijfi4brh3zq2xvnzy5gaqkifoceuiyzyeyecojdlqe75nwoetcwpad.onion:8333
gm2b3s5mqvccelokh47aypsu7wduyg3lkety6czu6k4phzfxczcoswqd.onion:8333
gmjyc3qivk2bme4wimykhewlanx5z3sxli23nizo4kiuerptcytqsxid.onion:8333
gmnoid5e7uhsjxw2uuwanm7k7tbyutbcpiacuxyqztqqy4onbofzuxyd.onion:8333
goxkenocpqn3ibvslm5eccprmkcszelvpsrgrtd3fd43qr2xzl2la6id.onion:8333
grbpww77jgvl52eyzjhrnx5dc2fqnb3dgxcm7fr6jjigc7aihvay2yqd.onion:8333
gruccg4k5yq7wnkytjqndfbhc4pbdfiwuzlbsjwyjwzg3nfitb273lad.onion:8333
h2jikhew7toufyhusvt33engo6bdvjdv4fvxsk7k5z7yfr6sjcb4giad.onion:8333
h6mzk6q4mlf22npreupmfvuhukbrgsjlvrzilnuigyujmtfmi5ltiqyd.onion:8333
h7nka6o3t7dn7mkvnhg62jfftvtsoi4f755xjheuxslklmei23fos4qd.onion:8333
h7xyscykodwdzvyzluapacbe2dmpelmes6xjhqmbrwrza65utpyn2zid.onion:8333
hbjqnzqygl4fdkjwyaxcizzwrnwl24dtjppy3vxqqii6ilpl3ysbtlyd.onion:8333
hbqkqjt5y4c3sgwmg6mir2qv6z6anxrxr2riqj6x7r6jayc22gvbriid.onion:8333
hc3ebdu3sgrqfz47yhh7gfupzgesxmdrmfcfaqr436nodujhysajapqd.onion:8333
hc6a3ccuvdmtvgndynhzfuje2aqgpiyqzbm3s52rekbxmron6w7ckbqd.onion:8333
hcqtdywbzpgp7hwbelbws5s3ykks6i34yu5gznitupfcli2t6og6qnad.onion:8333
hd5rdhy2gjkjmqlxayeoqd2notpzsbf4zp3y5ndzpvimudia2zrqoqid.onion:8333
hgk34cet3cktfevkakzwwlz4zzqcmpo75crlfmyddfr7ikg77iftmsad.onion:8333
hj6feb7d6ovgutaflry4337kyyczirc6y67js4gn5lsdfqfbqeiodnid.onion:8333
hjxcacppbndvot7klgy75xglwtfu2elxfwtt2esquzwsdxukklvl53yd.onion:8333
hlcoisik6mlwnat3wbwfntkeh32yhymhq52tgo23bivrkuq2lmaqmxad.onion:8333
hmr55kh2n4l65yrxpmje7yn6oyu3pdtutgvk6tgllkhodqxazlrmp6qd.onion:8333
hryul5rtv327up2esowuvlip644udinwxr3f6tvo3vahffggkk3ogmqd.onion:8333
hsce76s6kpkzlnechwpoiudlyygbr4s2ct3hcxi4icgiwk7kehwz6bad.onion:8333
hujowynr3flk2zadfx2jbka42is7rsguxmp5npiaqpngpabvrakthrid.onion:8333
hvwiqbxy5rfxvmq65dd4baitrt7e62a72so4myiacur2tirwavk4eaad.onion:8333
hyddoxcoyckwa6lloendglu7rvlvwph4gf4xxgteb2hbmbfvk7zlabid.onion:8333
hyiqykrejh2m5mchbuox7qcjpnctfa4t6t33xs3gt27gn2zdauub2qqd.onion:8333
hzbrybvl7253k4ilw64bmow6xf6kcfjpluoyxcyxnzjhvkcwazm3dtid.onion:8333
i6gsjwkdrj2jfyzd2vkb3auajfsj3kfopngtouipisk5n3ztpyj7iead.onion:8333
ic7xuyb3vjewgcivsod5fylon2uefdrtbujm53aqeeiwsr66bn2qriyd.onion:8333
ielfpoctimb6d76zfwe247ivufhlqixcmto3ajycx6jhc32au7nnjnqd.onion:8333
iljvoqv6gthbhneadvnnngt75cmchef4e56emu2q2rkvyd6yvene3byd.onion:8333
iqr6sqjcywscdns25gsizkaqngc3p4zjxmnsyj76aewnujp5yl47t6yd.onion:8333
irstdqvwsgdbac2suvkdrv76yut3ronokffskydore6va2ucgqwqpcqd.onion:8333
ivdhohrfnmupqpv2fdsrgocivsrfxeraxjl373v2ucprnf6nm4mj5ayd.onion:8333
ixrkhtcfbads4dakl6dl4nlsv4f67ld7huogpp3crelpuufcpcwbusad.onion:8333
ixxeuquydo5vzhs4t26svdpuogj57n3n4c2txtudumqcl72y7ppwwoqd.onion:8333
j4j46tzv4rqkssjyz74ojbwr2er7gpsuwbplylt2yiuphla5jmg2wcyd.onion:8333
j5bnioq3mo7au2hzknw7c4nlagtrovncwmanei46okq2e753dshti2qd.onion:8333
j6klkyq5gqepr5fr366us5g6rprcq2k4wkszia4a5w4r5nkotajetvad.onion:8333
jbfdgru6e2xkp6cs2vqcjin2rtlm3hdwfzc54iupupyugtbijurqc7yd.onion:8333
jdzoeerhme3wt3msiabxho3aokqksecqtrbau7yldmmrcdl53vh4ntyd.onion:8333
jjsfftvm3szpjr2clthujnniwmm7xpzn4eacipdsmne2nw7cotxejeqd.onion:8333
jljo2fgeo3en24rfjsu5bhcuvgqc2kt3q6qpbdhcrmns56pepvrrdkyd.onion:8333
jnvqw3jyfragx7vf2gvedjuqarblwmgzi2nvzncnqygxqkq3l3psi5yd.onion:8333
jo436cjqpu5kho6jvnf53snalahyno2pkrezdiecrblzk2ndiicnulqd.onion:8333
jxry2vsra3roinmemrv2t6r2gxgkr6r47dsyni6hda6pulutgp5gsryd.onion:8333
jxwalubi4vmffetqrm62crkz2lyuwbq3m5jdanremtkift3ncmfmupad.onion:8333
k42ycrbazmkne2eerker3pwvsrumjdc3nbocoppixhcslbtin6szxmyd.onion:8333
k6xqminlvsasqfltb4pqccoodaye4dlpdcof2v7g5bhcc6z2hkqbo2id.onion:8333
k7xabakio354gnlnfop4nb3hvwnonncjkiar55yqr5m6t55johp3ebid.onion:8333
kbnqritxjzxijflvhybdyew3zfrd56qyhfv3j6kkujd6ageeg64h2qad.onion:8333
kdyhkqz7hcnbq4yg262l7qscyhwm62klcomy7wim4ohd5gxp745yxgqd.onion:8333
khi4dspqnbjqr6kuzo3vr4os3i4ucp3iqztjuvy6hmvc3pvenbkvpvqd.onion:8333
khxoiv2fs6b5q6z7cdc2emq75xrxyv2k72qb7qiccx2ecqikkoevhkyd.onion:8333
kj4ifgsla7bufutpr5pgfim3ukzc6odrqmxyaih3yht7bwolrvg7psqd.onion:8333
kmamezicky3ssry3lnxwrsqo5edkx52vgklnvaxozk5sdpnjtohenjad.onion:8333
koopg7cpbkyzt2xeii3blytcwzzbegdjulf2k27tkd6qpgtfa2ckqhyd.onion:8333
kp4sx6yum3trevgiyftnr52z3v5tkoemjp3ja6ugbsp5fefyyv3jgxqd.onion:8333
kpawddtnppkta5ldam3pkwsapk7bkpkv7euxgkh255kw7gcmuavlkvqd.onion:8333
kqvdvecikfk3bvg2qt2supapuzci6yj3sz3jlremzydu34ty57imlbqd.onion:8333
krthkvdasakdnocof45vpiybugof2ju2rqpvtwbns6udjlbodyluulyd.onion:8333
kycmxoatbewdk2vfdd7gr6iyzpkqv4sua2i4p2qqfpepsna4bum3y7ad.onion:8333
l4dlgqyla7dobxaa7hhrhe5mwbqw3stmwq4qqcsbly32qfc4stetq6ad.onion:8333
lieapdss4vndhmtlb7t6afjwsrf52mdkxstrkfq6as65zxqlufa3aqyd.onion:8333
ljlclqmyl5usdo546twyb3m4zfjwebfsx6suuibhkorcwhy4ufukycqd.onion:8333
lllr3l5y3tlsbmlzlyr4g5znrer6g3riolkuxvwtajxqerm7yju3aeqd.onion:8333
lptjkpwvnj4syw4zcv4v7wvzvkzi7nlnakfxag5uvfzdwud77ltn2pid.onion:8333
lpzalkzwl7e7y7arsjspc6brbl4pxfhrkvo5vh3u2ioxiezuzkrnkvyd.onion:8333
lqsqk3waohi3rmknfmed27lm6ofva33zngehz6oodil45zmtdnzhqxqd.onion:8333
```

----------------------------------------

TITLE: Configuring Bitcoin Benchmarking Executable in CMake
DESCRIPTION: Defines the bench_bitcoin executable with its core source files and benchmarking components. The file lists all the benchmarking source files that will be compiled into the executable, organized by functionality area.

LANGUAGE: cmake
CODE:
```
add_executable(bench_bitcoin
  bench_bitcoin.cpp
  bench.cpp
  nanobench.cpp
# Benchmarks:
  addrman.cpp
  base58.cpp
  bech32.cpp
  bip324_ecdh.cpp
  block_assemble.cpp
  ccoins_caching.cpp
  chacha20.cpp
  checkblock.cpp
  checkblockindex.cpp
  checkqueue.cpp
  cluster_linearize.cpp
  connectblock.cpp
  crypto_hash.cpp
  descriptors.cpp
  disconnected_transactions.cpp
  duplicate_inputs.cpp
  ellswift.cpp
  examples.cpp
  gcs_filter.cpp
  hashpadding.cpp
  index_blockfilter.cpp
  load_external.cpp
  lockedpool.cpp
  logging.cpp
  mempool_ephemeral_spends.cpp
  mempool_eviction.cpp
  mempool_stress.cpp
  merkle_root.cpp
  parse_hex.cpp
  peer_eviction.cpp
  poly1305.cpp
  pool.cpp
  prevector.cpp
  random.cpp
  readwriteblock.cpp
  rollingbloom.cpp
  rpc_blockchain.cpp
  rpc_mempool.cpp
  sign_transaction.cpp
  streams_findbyte.cpp
  strencodings.cpp
  util_time.cpp
  verify_script.cpp
  xor.cpp
)
```

----------------------------------------

TITLE: Using symbol-check.py to verify executable symbols
DESCRIPTION: Example of using the symbol-check.py script to check that executables only contain allowed symbols and are linked against permitted libraries.

LANGUAGE: bash
CODE:
```
find ../path/to/executables -type f -executable | xargs python3 contrib/devtools/symbol-check.py
```

----------------------------------------

TITLE: Linking Dependencies for Bitcoin Core Test Utility Library
DESCRIPTION: This CMake configuration specifies the dependencies required by the 'test_util' library. It links privately against core_interface and Boost headers, and publicly against univalue.

LANGUAGE: CMake
CODE:
```
target_link_libraries(test_util
  PRIVATE
    core_interface
    Boost::headers
  PUBLIC
    univalue
)
```

----------------------------------------

TITLE: Using RPCAuth Command-Line Tool for Bitcoin JSON-RPC Authentication
DESCRIPTION: The RPCAuth Python script creates login credentials for Bitcoin JSON-RPC users. It can generate a random password or accept a user-specified password. The tool supports JSON output format with the -j/--json flag.

LANGUAGE: bash
CODE:
```
usage: rpcauth.py [-h] username [password]

Create login credentials for a JSON-RPC user

positional arguments:
  username    the username for authentication
  password    leave empty to generate a random password or specify "-" to
              prompt for password

optional arguments:
  -h, --help  show this help message and exit
  -j, --json   output data in json format
```

----------------------------------------

TITLE: Configuring C++ Language Settings
DESCRIPTION: Enables C++ language support, sets C++20 standard without extensions, and handles macOS cross-compilation install name settings.

LANGUAGE: cmake
CODE:
```
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND NOT CMAKE_HOST_APPLE)
  # We do not use the install_name_tool when cross-compiling for macOS.
  # So disable this tool check in further enable_language() commands.
  set(CMAKE_PLATFORM_HAS_INSTALLNAME FALSE)
endif()
enable_language(CXX)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/module)
include(ProcessConfigurations)
```

----------------------------------------

TITLE: Configuring Bitcoin Wallet Library Dependencies in CMake
DESCRIPTION: Sets up the dependencies for the bitcoin_wallet library. Uses generator expressions to conditionally include SQLite libraries depending on which naming convention is available in the build environment.

LANGUAGE: CMake
CODE:
```
target_link_libraries(bitcoin_wallet
  PRIVATE
    core_interface
    bitcoin_common
    $<TARGET_NAME_IF_EXISTS:unofficial::sqlite3::sqlite3>
    $<TARGET_NAME_IF_EXISTS:SQLite::SQLite3>
    univalue
    Boost::headers
    $<TARGET_NAME_IF_EXISTS:USDT::headers>
)
```

----------------------------------------

TITLE: Using CRC32C with Various Data Types in C++
DESCRIPTION: Demonstrates how to use the CRC32C library to calculate CRC32C hash values for different data types including raw buffers, std::string, and std::string_view (C++17). The example shows the basic API for each data type.

LANGUAGE: cpp
CODE:
```
#include "crc32c/crc32c.h"

int main() {
  const std::uint8_t buffer[] = {0, 0, 0, 0};
  std::uint32_t result;

  // Process a raw buffer.
  result = crc32c::Crc32c(buffer, 4);

  // Process a std::string.
  std::string string;
  string.resize(4);
  result = crc32c::Crc32c(string);

  // If you have C++17 support, process a std::string_view.
  std::string_view string_view(string);
  result = crc32c::Crc32c(string_view);

  return 0;
}
```

----------------------------------------

TITLE: Including Kernel Library Subdirectory with CMake
DESCRIPTION: Conditionally includes the kernel subdirectory when building the kernel library component.

LANGUAGE: CMake
CODE:
```
if(BUILD_KERNEL_LIB)
  add_subdirectory(kernel)
endif()
```

----------------------------------------

TITLE: Limiting Retry Attempts for a Failing Command
DESCRIPTION: Example showing how to limit the maximum number of retry attempts using the -t option before the command gives up.

LANGUAGE: sh
CODE:
```
retry -t 4 'echo "y u no work"; false'
```

----------------------------------------

TITLE: Installing GUI Dependencies for Debian/Ubuntu
DESCRIPTION: Command to install dependencies required for building the Bitcoin Core GUI on Debian/Ubuntu systems.

LANGUAGE: bash
CODE:
```
apt install bison g++ ninja-build pkgconf python3 xz-utils
```

----------------------------------------

TITLE: Running CRC32C Benchmarks on Android
DESCRIPTION: Commands to install and run the CRC32C benchmarks on an Android device using ADB. The sequence pushes the binary, sets execution permissions, runs the benchmark, and cleans up.

LANGUAGE: bash
CODE:
```
adb push crc32c_bench /data/local/tmp
adb shell chmod +x /data/local/tmp/crc32c_bench
adb shell 'cd /data/local/tmp && ./crc32c_bench'
adb shell rm /data/local/tmp/crc32c_bench
```

----------------------------------------

TITLE: Defining Package Identifiers in Bitcoin Build System
DESCRIPTION: Required and optional variables for defining a package in the Bitcoin build system, including version, download path, file name, and hash. These variables establish the package identity and source location.

LANGUAGE: makefile
CODE:
```
$(package)_version:
Version of the upstream library or program. If there is no version, a
placeholder such as 1.0 can be used.

$(package)_download_path:
Location of the upstream source, without the file-name. Usually http, https
or ftp. Secure transmission options like https should be preferred if
available.

$(package)_file_name:
The upstream source filename available at the download path.

$(package)_sha256_hash:
The sha256 hash of the upstream file
```

----------------------------------------

TITLE: Formatting Code with clang-format
DESCRIPTION: Command to format code files according to the Google C++ Style Guide using clang-format. This ensures consistent styling for contributions to the LevelDB project.

LANGUAGE: bash
CODE:
```
clang-format -i --style=file <file>
```

----------------------------------------

TITLE: Optional Package Identifiers in Bitcoin Build System
DESCRIPTION: Optional variables for package definition including build subdirectory, download file name, dependencies, patches, and extra sources. These variables provide additional flexibility for package configuration.

LANGUAGE: makefile
CODE:
```
$(package)_build_subdir:
cd to this dir before running configure/build/stage commands.

$(package)_download_file:
The file-name of the upstream source if it differs from how it should be
stored locally. This can be used to avoid storing file-names with strange
characters.

$(package)_dependencies:
Names of any other packages that this one depends on.

$(package)_patches:
Filenames of any patches needed to build the package

$(package)_extra_sources:
Any extra files that will be fetched via $(package)_fetch_cmds. These are
specified so that they can be fetched and verified via 'make download'.
```

----------------------------------------

TITLE: Setting Up GNU Install Directories in CMake
DESCRIPTION: Includes the GNUInstallDirs module which provides variables for standard installation directories on GNU systems, ensuring consistent installation paths.

LANGUAGE: CMake
CODE:
```
# Must be included before CMAKE_INSTALL_INCLUDEDIR is used.
include(GNUInstallDirs)
```

----------------------------------------

TITLE: Build Commands for Bitcoin Dependency Packages
DESCRIPTION: Definition of the build commands available for each package recipe, including fetch, extract, preprocess, config, build, and stage commands. Each command executes in a specific directory context.

LANGUAGE: bash
CODE:
```
$(package)_fetch_cmds:
Runs from: build dir
Fetch the source file. If undefined, it will be fetched and verified
against its hash.

$(package)_extract_cmds:
Runs from: build dir
Verify the source file against its hash and extract it. If undefined, the
source is assumed to be a tarball.

$(package)_preprocess_cmds:
Runs from: build dir/$(package)_build_subdir
Preprocess the source as necessary. If undefined, does nothing.

$(package)_config_cmds:
Runs from: build dir/$(package)_build_subdir
Configure the source. If undefined, does nothing.

$(package)_build_cmds:
Runs from: build dir/$(package)_build_subdir
Build the source. If undefined, does nothing.

$(package)_stage_cmds:
Runs from: build dir/$(package)_build_subdir
Stage the build results. If undefined, does nothing.
```

----------------------------------------

TITLE: ZeroMQ Message Structure for Raw Transaction Notifications
DESCRIPTION: Format specification for 'rawtx' notifications, which include the full serialized transaction and a sequence number to detect lost messages.

LANGUAGE: plain
CODE:
```
| rawtx | <serialized transaction> | <uint32 sequence number in Little Endian>
```

----------------------------------------

TITLE: Installing Bitcoin via Ubuntu PPA
DESCRIPTION: Commands to add the Bitcoin PPA repository maintained by Matt Corallo and install the Bitcoin-Qt package on Ubuntu Linux systems.

LANGUAGE: bash
CODE:
```
sudo apt-add-repository ppa:bitcoin/bitcoin
sudo apt-get update
```

LANGUAGE: bash
CODE:
```
sudo apt-get install bitcoin-qt
```

----------------------------------------

TITLE: Bitcoin Application Path on Mac OS X
DESCRIPTION: The file path for the Bitcoin-Qt application on Mac OS X systems.

LANGUAGE: text
CODE:
```
/Applications/Bitcoin-Qt
```

----------------------------------------

TITLE: Creating a Translation Pull Request in Git
DESCRIPTION: Git commands to create a pull request with updated translation source files. These commands add the translation files to the staging area and commit them.

LANGUAGE: sh
CODE:
```
git add src/qt/bitcoinstrings.cpp src/qt/locale/bitcoin_en.ts
git commit
```

----------------------------------------

TITLE: Squashing Commits with Git Interactive Rebase in Bitcoin Development
DESCRIPTION: A bash sequence demonstrating how to squash multiple commits in a pull request using git interactive rebase. This is used when a PR contains too fine-grained commits or fixup commits that change the same line of code repeatedly.

LANGUAGE: bash
CODE:
```
git checkout your_branch_name
git rebase -i HEAD~n
# n is normally the number of commits in the pull request.
# Set commits (except the one in the first line) from 'pick' to 'squash', save and quit.
# On the next screen, edit/refine commit messages.
# Save and quit.
git push -f # (force push to GitHub)
```

----------------------------------------

TITLE: Using Tor Only for Onion Addresses
DESCRIPTION: Bitcoin Core configuration that uses Tor only for reaching .onion addresses, but uses regular IPv4/IPv6 for other connections.

LANGUAGE: bash
CODE:
```
./bitcoind -onion=127.0.0.1:9050 -externalip=7zvj7a2imdgkdbg4f2dryd5rgtrn7upivr5eeij4cicjh65pooxeshid.onion -discover
```

----------------------------------------

TITLE: Configuring Buffer Settings in bitcoin.conf
DESCRIPTION: Configuration settings to fix the maxsendbuffer bug in Bitcoin v0.3.20.1. These two parameters increase the send and receive buffer sizes to 10000, allowing clients to properly download the blockchain from other clients.

LANGUAGE: config
CODE:
```
maxsendbuffer=10000
maxreceivebuffer=10000
```

----------------------------------------

TITLE: Implementing Standard JSON-RPC Error Object Format in Bitcoin
DESCRIPTION: Example of the new standardized json-rpc error object format in Bitcoin v0.3.12. Developers need to update their code to expect error objects with this structure instead of checking error strings directly.

LANGUAGE: json
CODE:
```
{"code":<number>,"message":<string>}
```

----------------------------------------

TITLE: Deprecated RPC Option for addnode Field
DESCRIPTION: Configuration option to maintain access to the deprecated addnode field in getpeerinfo RPC.

LANGUAGE: bash
CODE:
```
-deprecatedrpc=getpeerinfo_addnode
```

----------------------------------------

TITLE: Copying Tor v2 Private Key for Backward Compatibility
DESCRIPTION: Command to copy Tor v2 private key to v3 private key location, allowing continued use of deprecated Tor v2 services.

LANGUAGE: bash
CODE:
```
cp -f onion_private_key onion_v3_private_key
```

----------------------------------------

TITLE: Running Autogen Script Before Configure for Source Code Release
DESCRIPTION: Instructions for building Bitcoin Core 0.20.1 from source code, noting a regression requiring manual execution of the autogen script before running configure.

LANGUAGE: Bash
CODE:
```
./autogen.sh
```

----------------------------------------

TITLE: Running Make Command for Bitcoin Core 0.20.0 Build
DESCRIPTION: Special make command required for building Bitcoin Core 0.20.0 from source due to changes in the tarball generation process. This command sets an environment variable to bypass git-based version detection.

LANGUAGE: bash
CODE:
```
BITCOIN_GENBUILD_NO_GIT=1 make
```

----------------------------------------

TITLE: Bitcoin Core Installation Path References
DESCRIPTION: References to the installation paths for Bitcoin Core on different operating systems when upgrading the software.

LANGUAGE: Markdown
CODE:
```
`/Applications/Bitcoin-Qt` (on Mac) or `bitcoind`/`bitcoin-qt` (on Linux)
```

----------------------------------------

TITLE: Accessing Bitcoin Core Download URL for Version 0.18.1
DESCRIPTION: URL path for downloading Bitcoin Core version 0.18.1 from the official website.

LANGUAGE: Markdown
CODE:
```
<https://bitcoincore.org/bin/bitcoin-core-0.18.1/>
```

----------------------------------------

TITLE: Configuring Bitcoin Address Type with Command Line Option
DESCRIPTION: Command-line option for setting the default address type for new addresses generated by the wallet. Supports bech32 (native segwit) or p2sh-segwit address formats.

LANGUAGE: text
CODE:
```
-addresstype=[bech32|p2sh-segwit]
```

----------------------------------------

TITLE: Specifying Protobuf Version in paymentrequest.proto
DESCRIPTION: A change to specify Protobuf version 2 in the paymentrequest.proto file. This modification was contributed by fanquake as part of issue #8742.

LANGUAGE: proto
CODE:
```
syntax = "proto2";
```

----------------------------------------

TITLE: Version-specific ARM Build Documentation
DESCRIPTION: Template string showing how ARM build filenames are structured, using a version variable placeholder.

LANGUAGE: shell
CODE:
```
bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz
```

----------------------------------------

TITLE: Enhancing P2P protocol security against eclipse attacks
DESCRIPTION: Implementation of multiple countermeasures against eclipse attacks on the Bitcoin network, including changes to address management, peer selection algorithm, and connection handling to improve network resilience.

LANGUAGE: Bash
CODE:
```
78f64ef don't trickle for whitelisted nodes
```

LANGUAGE: Bash
CODE:
```
ca301bf Reduce fingerprinting through timestamps in 'addr' messages.
```

LANGUAGE: Bash
CODE:
```
200f293 Ignore getaddr messages on Outbound connections.
```

LANGUAGE: Bash
CODE:
```
d5d8998 Limit message sizes before transfer
```

LANGUAGE: Bash
CODE:
```
aeb9279 Better fingerprinting protection for non-main-chain getdatas.
```

LANGUAGE: Bash
CODE:
```
cf0218f Make addrman's bucket placement deterministic (countermeasure 1 against eclipse attacks, see http://cs-people.bu.edu/heilman/eclipse/)
```

LANGUAGE: Bash
CODE:
```
0c6f334 Always use a 50% chance to choose between tried and new entries (countermeasure 2 against eclipse attacks)
```

LANGUAGE: Bash
CODE:
```
214154e Do not bias outgoing connections towards fresh addresses (countermeasure 2 against eclipse attacks)
```

LANGUAGE: Bash
CODE:
```
aa587d4 Scale up addrman (countermeasure 6 against eclipse attacks)
```

LANGUAGE: Bash
CODE:
```
139cd81 Cap nAttempts penalty at 8 and switch to pow instead of a division loop
```

----------------------------------------

TITLE: Configuring Stunnel for Bitcoin Core RPC SSL
DESCRIPTION: A command to set up Stunnel as an alternative to the removed native SSL support in Bitcoin Core. This allows tunneling the RPC connection through SSL for secure communication.

LANGUAGE: Bash
CODE:
```
stunnel -d 28332 -r 127.0.0.1:18332 -p stunnel.pem -P ''
```

----------------------------------------

TITLE: Command for Processing PSBT with Descriptors
DESCRIPTION: The descriptorprocesspsbt RPC processes a PSBT using provided descriptors, updates SegWit inputs with UTXO/mempool information, and signs inputs accordingly.

LANGUAGE: markdown
CODE:
```
- **`descriptorprocesspsbt` (Updater, Signer, Finalizer)** is a node RPC that takes
  as input a PSBT and a list of descriptors. It updates SegWit inputs with
  information available from the UTXO set and the mempool and signs the inputs using
  the provided descriptors. Where possible it also finalizes the partial signatures.
```

----------------------------------------

TITLE: Creating an unsigned PSBT in Bitcoin Core watch-only wallet
DESCRIPTION: Creates a funded but unsigned Partially Signed Bitcoin Transaction (PSBT) using the watch-only wallet. The PSBT specifies sending 0.009 BTC to the destination address, with the remaining balance after fees returned as change.

LANGUAGE: sh
CODE:
```
[online]$ ./build/bin/bitcoin-cli -signet -rpcwallet="watch_only_wallet" send \
              '{"tb1q9k5w0nhnhyeh78snpxh0t5t7c3lxdeg3erez32": 0.009}' \
              | jq -r '.psbt' \
              >> /path/to/funded_psbt.txt

[online]$ cat /path/to/funded_psbt.txt

cHNidP8BAHECAAAAAWLHKR9/xAjetzL/FCmZU5lbfINRMWPRPHWO68PfUzkPAQAAAAD9////AoA4AQAAAAAAFgAULajnzvO5M38eEwmu9dF+xH5m5RGs0g0AAAAAABYAFMaT0f/Wp2DCZzL6dkJ3GhWj4Y9vAAAAAAABAHECAAAAAY+dRPEBrGopkw4ugSzS9npzJDEIrE/bq1XXI0KbYnYrAQAAAAD+////ArKaXgAAAAAAFgAUwEc4LdoxSjbWo/2Ue+HS+QjwfiBAQg8AAAAAABYAFF8oBGNNbfYN0ICTLoPECLKXXLuyYW8CAAEBH0BCDwAAAAAAFgAUXygEY01t9g3QgJMug8QIspdcu7IiBgJZMszudZAVj34IuzYpDRNdMKCwRRY9qJbhzXZF7EIjqRgwbHNPVAAAgAEAAIAAAACAAAAAAAAAAAAAACICA7BlBnyAR4F2UkKuSX9MFhYCsn6j//z9i7lHDm1O0CU0GDBsc09UAACAAQAAgAAAAIABAAAAAAAAAAA=
```

----------------------------------------

TITLE: Checking received funds in Bitcoin Core watch-only wallet
DESCRIPTION: Displays all unspent transaction outputs (UTXOs) in the watch-only wallet. This shows the received funds, including transaction details, amount, and confirmation status.

LANGUAGE: sh
CODE:
```
[online]$ ./build/bin/bitcoin-cli -signet -rpcwallet="watch_only_wallet" listunspent

[
  {
    "txid": "0f3953dfc3eb8e753cd1633151837c5b9953992914ff32b7de08c47f1f29c762",
    "vout": 1,
    "address": "tb1qtu5qgc6ddhmqm5yqjvhg83qgk2t4ewajg0h6yh",
    "label": "",
    "scriptPubKey": "00145f2804634d6df60dd080932e83c408b2975cbbb2",
    "amount": 0.01000000,
    "confirmations": 4,
    "spendable": true,
    "solvable": true,
    "desc": "wpkh([306c734f/84h/1h/0h/0/0]025932ccee7590158f7e08bb36290d135d30a0b045163da896e1cd7645ec4223a9)#xytvyr4a",
    "parent_descs": [
      "wpkh([306c734f/84h/1h/0h]tpubDCJnY92ib4Zu3qd6wrBXEjG436tQdA2tDiJU2iSJYjkNS1darssPWKaBfojhjUF5vMLBcxbN2r93pmFMz2zyTEZuNx9JDo9rWqoHhATW3Uz/0/*)#7mh08dkg"
    ],
    "safe": true
  }
]
```

----------------------------------------

TITLE: Copying Receiving Address to Clipboard
DESCRIPTION: Copies the generated receiving address to the clipboard, useful when using a web-based signet faucet to fund the wallet.

LANGUAGE: bash
CODE:
```
echo -n "$receiving_address" | xclip -sel clip
```

----------------------------------------

TITLE: Backing Up a Bitcoin Core Wallet to a Specific Location
DESCRIPTION: Command to create a secure backup of a wallet. The destination must include a filename, especially for descriptor wallets. This creates a copy of the wallet file in a state safe for backup.

LANGUAGE: bash
CODE:
```
$ bitcoin-cli -rpcwallet="wallet-01" backupwallet /home/node01/Backups/backup-01.dat
```

----------------------------------------

TITLE: Example output from log_p2p_connections.bt showing P2P connection events
DESCRIPTION: Sample output from the log_p2p_connections.bt script showing different types of P2P connection events including outbound connections, inbound connections, misbehaving connections, closed connections, and evicted connections.

LANGUAGE: text
CODE:
```
Attaching 6 probes...
Logging opened, closed, misbehaving, and evicted P2P connections
OUTBOUND conn to 127.0.0.1:15287: id=0, type=block-relay-only, network=0, total_out=1
INBOUND conn from 127.0.0.1:45324: id=1, type=inbound, network=0, total_in=1
MISBEHAVING conn id=1, score_before=0, score_increase=20, message='getdata message size = 50001', threshold_exceeded=false
CLOSED conn to 127.0.0.1:15287: id=0, type=block-relay-only, network=0, established=1231006505
EVICTED conn to 127.0.0.1:45324: id=1, type=inbound, network=0, established=1612312312
```

----------------------------------------

TITLE: Downloading and Processing Bitcoin Network Seeds
DESCRIPTION: Shell commands to download seed data from various sources, process them with Python scripts, and generate the chainparamsseeds.h file. The process involves fetching seeds from reliable nodes for main network, signet, testnet, and testnet4, then processing them with makeseeds.py using AS map data.

LANGUAGE: bash
CODE:
```
curl https://bitcoin.sipa.be/seeds.txt.gz | gzip -dc > seeds_main.txt
curl https://21.ninja/seeds.txt.gz | gzip -dc >> seeds_main.txt
curl https://luke.dashjr.org/programs/bitcoin/files/charts/seeds.txt >> seeds_main.txt
curl https://mainnet.achownodes.xyz/seeds.txt.gz | gzip -dc >> seeds_main.txt
curl https://signet.achownodes.xyz/seeds.txt.gz | gzip -dc > seeds_signet.txt
curl https://testnet.achownodes.xyz/seeds.txt.gz | gzip -dc > seeds_test.txt
curl https://testnet4.achownodes.xyz/seeds.txt.gz | gzip -dc > seeds_testnet4.txt
curl https://raw.githubusercontent.com/asmap/asmap-data/main/latest_asmap.dat > asmap-filled.dat
python3 makeseeds.py -a asmap-filled.dat -s seeds_main.txt > nodes_main.txt
python3 makeseeds.py -a asmap-filled.dat -s seeds_signet.txt -m 237800 > nodes_signet.txt
python3 makeseeds.py -a asmap-filled.dat -s seeds_test.txt > nodes_test.txt
python3 makeseeds.py -a asmap-filled.dat -s seeds_testnet4.txt -m 72600 > nodes_testnet4.txt
python3 generate-seeds.py . > ../../src/chainparamsseeds.h
```

----------------------------------------

TITLE: Running macOS Deployment Build Process
DESCRIPTION: The command to run the macOS deployment process that produces the Bitcoin-Core.zip package. This should be used instead of running the macdeployqtplus script manually.

LANGUAGE: bash
CODE:
```
make deploy
```

----------------------------------------

TITLE: Parsing Captured Messages with message-capture-parser.py in Bitcoin
DESCRIPTION: This command uses the message-capture-parser.py script to process all captured message files across all peers and save the output to a JSON file. The script interleaves sent and received messages in chronological order.

LANGUAGE: bash
CODE:
```
./contrib/message-capture/message-capture-parser.py -o out.json \
~/.bitcoin/message_capture/**/*.dat
```

----------------------------------------

TITLE: Disabling Substitutes via Environment Variable
DESCRIPTION: Shell command to set the ADDITIONAL_GUIX_COMMON_FLAGS environment variable to disable substitutes for all scripts under ./contrib/guix/.

LANGUAGE: sh
CODE:
```
export ADDITIONAL_GUIX_COMMON_FLAGS='--no-substitutes'
```

----------------------------------------

TITLE: Configuring Default Substitute Servers for Guix Daemon
DESCRIPTION: Shell command to start guix-daemon with custom substitute URLs, setting both dongcarl's server and the official Guix build farm as sources for pre-built packages.

LANGUAGE: sh
CODE:
```
guix-daemon <cmd> --substitute-urls='https://guix.carldong.io https://ci.guix.gnu.org'
```

----------------------------------------

TITLE: Authorizing External Substitute Server Key
DESCRIPTION: Shell command to download and authorize a signing key for an external substitute server (dongcarl's server) using wget and piping to guix archive.

LANGUAGE: sh
CODE:
```
wget -qO- 'https://guix.carldong.io/signing-key.pub' | guix archive --authorize
```

----------------------------------------

TITLE: Authorizing Guix Build Farm Key from Prefix Path
DESCRIPTION: Alternative shell command to authorize the Guix build farm's signing key when the default path is not available, using a prefix path that varies based on installation method.

LANGUAGE: sh
CODE:
```
guix archive --authorize < <PREFIX>/share/guix/ci.guix.gnu.org.pub
```

----------------------------------------

TITLE: Running headerssync-params.py with PyPy
DESCRIPTION: Command to run the headerssync-params.py script with PyPy for faster execution, generating optimal parameters for the headerssync module.

LANGUAGE: bash
CODE:
```
pypy3 contrib/devtools/headerssync-params.py
```

----------------------------------------

TITLE: Running deterministic-unittest-coverage tool
DESCRIPTION: Command to run the deterministic unit test coverage tool which checks for non-determinism in unit test coverage. Shows the help information.

LANGUAGE: bash
CODE:
```
cargo run --manifest-path ./contrib/devtools/deterministic-unittest-coverage/Cargo.toml -- --help
```

----------------------------------------

TITLE: Creating Test Target for Bitcoin-Tidy Checks in CMake
DESCRIPTION: Creates a test library target that uses the bitcoin-tidy checks on example code. This target is used to verify that the custom checks work as expected.

LANGUAGE: CMake
CODE:
```
# Create a dummy library that runs clang-tidy tests as a side-effect of building
add_library(bitcoin-tidy-tests OBJECT EXCLUDE_FROM_ALL example_nontrivial-threadlocal.cpp)
add_dependencies(bitcoin-tidy-tests bitcoin-tidy)

set_target_properties(bitcoin-tidy-tests PROPERTIES CXX_CLANG_TIDY "${CLANG_TIDY_COMMAND}")
```

----------------------------------------

TITLE: Disabling Unnecessary Package Dependencies in CMake
DESCRIPTION: Disables finding of various packages that are not required for the clang-tidy module. This helps streamline the build process by avoiding unnecessary dependencies.

LANGUAGE: CMake
CODE:
```
set(CMAKE_DISABLE_FIND_PACKAGE_CURL ON)
set(CMAKE_DISABLE_FIND_PACKAGE_FFI ON)
set(CMAKE_DISABLE_FIND_PACKAGE_LibEdit ON)
set(CMAKE_DISABLE_FIND_PACKAGE_LibXml2 ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Terminfo ON)
set(CMAKE_DISABLE_FIND_PACKAGE_ZLIB ON)
set(CMAKE_DISABLE_FIND_PACKAGE_zstd ON)
```

----------------------------------------

TITLE: Setting C++ Standard and Build Options in CMake
DESCRIPTION: Configures the C++ standard and compiler options for the project. Sets C++20 as the required standard and disables extensions.

LANGUAGE: CMake
CODE:
```
include(GNUInstallDirs)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_EXTENSIONS False)
```

----------------------------------------

TITLE: Using ASMap Tool for Basic Operations
DESCRIPTION: Examples of using the ASMap tool for encoding, decoding, comparing, and analyzing differences in ASmap files. These commands show how to compress ASmap files for Bitcoin Core usage, decompress binary files, and identify changes between different ASmap versions.

LANGUAGE: bash
CODE:
```
python3 asmap-tool.py encode /path/to/input.file /path/to/output.file
python3 asmap-tool.py decode /path/to/input.file /path/to/output.file
python3 asmap-tool.py diff /path/to/first.file /path/to/second.file
python3 asmap-tool.py diff-addrs /path/to/first.file /path/to/second.file addrs.file
```

----------------------------------------

TITLE: Bitcoin Network Node Addresses in IPv6 and I2P Formats
DESCRIPTION: A comprehensive collection of Bitcoin network node addresses in both IPv6 format (with port 8333) and I2P (Invisible Internet Project) format with .b32.i2p extension. These addresses can be used to connect to the Bitcoin peer-to-peer network.

LANGUAGE: plaintext
CODE:
```
[fc10:efa7:ca6:1548:f8c:6bb9:1cc4:63ae]:8333
[fc1f:22c3:95dc:a3af:4a93:8251:beb9:1858]:8333
[fc32:2c16:d0d0:f1fb:3b27:c187:8cb5:9201]:8333
[fc70:de9d:7fe2:b32:5828:1a3c:d0f:83ec]:8333
[fc77:89c1:cb33:b770:f92c:1eff:a60a:b1cb]:8333
[fc95:6edb:af65:9ea3:cd27:21ef:f5e2:29c6]:8333
[fca0:151:79ac:8992:b51e:bdc4:6ed9:41be]:8333
[fcc7:be49:ccd1:dc91:3125:f0da:457d:8ce]:8333
[fccb:248:11a6:1042:bca:1218:f7ce:7d3d]:8333
[fcf1:22ff:3070:582f:a873:61bc:4bc1:81bf]:8333
25rm76uae7qbj7dyrwxe5koi3eyp4pytzngnymgk2tm6m6ojzhma.b32.i2p:0
2a4f3ac3rtweo5u5juqjdx63o4pytnpdr2ecnywjrdsd27pvvfwq.b32.i2p:0
2cng4offkkneiw7xtfhvcgyu5rohy6ta4epowlrvnkbnuxfef3pq.b32.i2p:0
2f6uzzetcurnwoioo65bgjjrhab3x5mgeacfojllwp77psjgwu7a.b32.i2p:0
2hh75bmlo7nbwympmqjhtzoes7lxaxeph736i3vgrsq6uf3xkd3q.b32.i2p:0
2ipe4z2l354zluvnxesjthdayd2n36qe4fuawqh64cetbufvagkq.b32.i2p:0
2jgfxxzts6rfr5m2iwklltya2kmuejnkufpt4bavwjhi2j7fmyma.b32.i2p:0
2k3lztzfal3k6dl7yrh2jykfa3xpmou2c7cm2ewo4qctkkvbhfvq.b32.i2p:0
2lyuiflrruwnrvmlnsoxctsoez5bxsd7e7g766eamf4cw723wsxq.b32.i2p:0
2muk57255tdm4g273fy7aitrmqnturut6krqojxz76jssrqm2rsa.b32.i2p:0
2n23repkqxcbemx6vwl6wwkpel4xoezt6x6bissipxrz6dzijiaa.b32.i2p:0
2ny6ifcupp7xx75a2anecwhih5kibumg2o3uqdk5j2ejn26jkv4q.b32.i2p:0
2u6vnbkm3ofxqqzkxi5kynd55inreotaidt3dfca62fpgtxabdhq.b32.i2p:0
2ucgg5wlvoxcas2o5lscp354ghcdwwpx5hadi3kcpr2p2pysk5ba.b32.i2p:0
2v5nr3u3scbyxd3nkqxinw2pvqqe66y4hc3u6gotil2sgbyivruq.b32.i2p:0
2wvq5am4tsc3ejeeunhhofp6tni244zkbqz7lbqjycjwcw7v6tva.b32.i2p:0
2xygt6zbuiqvl2jdn2dlavjjzumqpwkgjawfosmhkaozwodcgl6a.b32.i2p:0
3bghwmgjmsmpjevkvou3eldck2vvvvidykxvomn5kxfogmjwbxrq.b32.i2p:0
3covklglzlod2sxmjtyq3rlzqd57kcfjricj27yyexg3rc2hroqa.b32.i2p:0
3gfnwe3y6n55facql4jztmrg7slxif2vmbl3ygg44p2rno57yrwa.b32.i2p:0
3lmii22nacqrs76rd2ixpgyudrchmyrkqqkigns2nk2gcffuv3da.b32.i2p:0
3nbv3o7j6h3okg4orvk5zfhcjdjnwxuu3cdusqh2lqeeogv7uzsq.b32.i2p:0
3q6nv6vg5aas7i5a457ckf46nfw4lyvipdagxlhujwczqzuvu77q.b32.i2p:0
3rgwk2zwdo343z5gjxzddvig2ivr2htncvmqxmvkvlta27ceroca.b32.i2p:0
3ru63xjzrqphkve5xw6ev3iharlzqs3rbp475yxnr5ma7bys6q7a.b32.i2p:0
3slxqwc7rmmpnhv6dsk2spesbt77v2j25yoktwqztpnpnt2got4q.b32.i2p:0
3t23wkj2tslzm7ytzoxzbdekf36yzno4wjllgil45j7qqlzv2dda.b32.i2p:0
3y4oiw7cglzzshasapfmlte7ixbgpl4js7w2afsd4znemu4ddefa.b32.i2p:0
44qgfpibsi7w7ulbg76yt5hyi33t6unleq7yifhbhdqdy5ihljyq.b32.i2p:0
45eh6rxbfli4ju26cqaf63vfs5xx6zgt7hn3uzzz3nem45d4ps6q.b32.i2p:0
46t7icqffks2db3utvtm7mbycopbcewpb2dihwfapdi2ukeke5pq.b32.i2p:0
46xory66pc6qxd6glapmcrxujp6wc5swghhbnhybvewxffo37gaq.b32.i2p:0
4ccr4ejpia2pn72d6xok5tubyb2gii7pjdqb4mwyl4c5wiwoysoq.b32.i2p:0
4dde4fh6gybebhqtoiraoqjab2w3qn2ym4u36l6fdwmeb63ljm2q.b32.i2p:0
4gdidscp3badfijfuesami5opqpz5ntjw2ephfdhb3i5bgrzzh2q.b32.i2p:0
4imp5e6332cdcaoeqtuif7xymlwpmstgchotaoa5kuzgvc2wpqvq.b32.i2p:0
4jh4w7ifveva6rh7l2nemqor4abako6qo7rdjq26lr6anfo6gbsa.b32.i2p:0
4n2z2vlqzupmc46hh4eizoo2nhmcucmrggpiivdb3prswlnf3krq.b32.i2p:0
4nxdyltgdwpfkautpralacdlolzlpwr43cj4ig4gozn5y43gk6nq.b32.i2p:0
4ocs2dc2jkd2j3kedyjn6kmfvx7lkdrheu2n2wio5zv75sedzk6q.b32.i2p:0
4ripix2seo5ac3bjb4a5louhtbycghyf3leysidy22wnbak7tzjq.b32.i2p:0
4supe3vqjcq2pp55vdploz455wpwgmnjqgadlvtlteaxy6t437fq.b32.i2p:0
4trblupsxprghxtsglv25zhy4ofxm3fwa4y7mmesso3x2fl2khwq.b32.i2p:0
4unxgzwe2zlrfgivsl72b4z5he6jawedzuceu3usvlp7bcoj3c7q.b32.i2p:0
4xpl5q7i5uu3yktqqaw7jaanmamwsgtxsdl23ds7nugh22lxsxjq.b32.i2p:0
4z7l5ldbrcav7lv3u2a4hso7uaclug5yfcbeztqmmv5hyw6crdda.b32.i2p:0
4zc3ku23mmbnkjvy6mcfgvgkxdoxzvioqnfvle3q6pmiuaixotfa.b32.i2p:0
53utzmap3lyrl6m7ws5oo73rpc3y2dawcu43g7q7hkru5qx4djua.b32.i2p:0
54h4pb62qkqott3do63jc3jflpt355n6gi5coad6fkkdvfir7jga.b32.i2p:0
56xx7arua67o6gzmz7fisqsco3s5yx3mhz4g7dwp73nvjxx44idq.b32.i2p:0
5dfgzcf3ccte7riwfodvefwhet3f4z6nubeln73q3qpyadbtekxa.b32.i2p:0
5dx4sfe4huncxaflmwo5kzwgrbtvvptttu65fgjzquwl2vwizhtq.b32.i2p:0
5kog73uwths255tdrwee7dc2pshq6xlukbxtpgn3bbwunm52jwdq.b32.i2p:0
5on4kc5ev6pbv4ib53xcwhwve2d4agh5drzwuoqwvmrqv2czrjba.b32.i2p:0
5pjaaexikmlyhl5dihzvqbykuec6uzkyujvvs5bjoi6htlb3oxzq.b32.i2p:0
5puvvkyv6qr2kaqb2avbqxzhdyiquhk2767omhoa2s52gcnfcx4q.b32.i2p:0
5pvqmsnbnldzogflte4nwyxpr6jn4x4rxmrbjcwjknwwz4255rkq.b32.i2p:0
5qf5uwixbva3xzmrgl26k2bswq27ome6uurvhcea3i57rhz4lqgq.b32.i2p:0
5qn7zzaxno6jogdskmjqlssi5k34ibkokcghts7vrfctb4vmc6uq.b32.i2p:0
5xhyftag6e6hjwdosgffvkxk3fo5muk5vqbcxbithtjr6zg6vuwa.b32.i2p:0
5yme5e7jmq73zsm4ap4agnkiwrupjagrybusvlyzemeek7lreswq.b32.i2p:0
62cmrc6aio5blhc2rx5qgwai2urelcq2mtkl4jpprlyt6kihlbsa.b32.i2p:0
62srw23f4rrxzs3253g7mb2lbop3pfpsu56g5iiptrao3qoasd4a.b32.i2p:0
6cb5bbpnsnr4uxlkwtekxbg5qrwpvdqfpgncl46xndg3np4yfita.b32.i2p:0
6dkvhlhwoiwpdjpebuemxq66soh6os6xa2sq42dwhfbp3d4sdzga.b32.i2p:0
6mroga77egf2fzs7y46huhxwesppxx6k72jc7h2cznq2fmcaelsq.b32.i2p:0
6rsbnc2njzfyppwcjlmpt4dxzndxe7scyc2vjzjvixlt6qebslwa.b32.i2p:0
6ujb3xak7iformdm7xjpbzuyqzuu3tmdcngvhioqnzo4emcoxz3a.b32.i2p:0
6v6jax64xiqf6dekptdqjwstuf63v2s5i6px3kn7camlji75ilzq.b32.i2p:0
6vrjslktb4gtjx7uifoje5o4r5lsfasdcfbrnna6r56ruiaiowqa.b32.i2p:0
6zsislqyaufihc6atpm3hnlo2uwewhnitnlzqzh7rsfgim3vt6gq.b32.i2p:0
764xiwqk2izz4tylrba5urvqjo73q72yflkiubmruzpd2bib4pda.b32.i2p:0
7djd7fbu66r6xwmisj6r2sfgcten7ovticj2zp4gvenhpbrokyiq.b32.i2p:0
7fddpunmty7eruhumq2iqa2yw5ckcn6xpsw26pj6csnhnty3jcqa.b32.i2p:0
7jwvx7eged34ctrgyrt5y6x5p7xzkfpidvwrxjplqywqa5dqlg3a.b32.i2p:0
7lx7lr2taxmtbdx5sdqo2apwka3br7iig5mejzkxpw4ksvk524hq.b32.i2p:0
7o3sndesp2d7mrkw3qlpfipknxddu4tz2l34hpymy3vexfyg27pq.b32.i2p:0
7pmzb44ybjrq26wq24pdjz6tkktgwkyvvrpatmsbsx2xs3f6x43a.b32.i2p:0
7rmw4miaffahgwpy42fnd324fhiq4dygn5denzxtik6gk3slhqra.b32.i2p:0
7utc6ztzqaljtirabf3l5ynvf3akmzofayid4caia6nd6z6a2ebq.b32.i2p:0
7vupqprsgbad6v2trw75e7kpk7vhmoyxqqlaxrkfwofg6qkfm3oa.b32.i2p:0
7wgrywhskd24kqqjvodx6bxnjnv374xlnrwssy7zqd4wza5drqmq.b32.i2p:0
7woh7qguyjfcmqu43k4hge6uehvfh5gdwel6ps2mjpdttml7iybq.b32.i2p:0
7ykkgcm6pta4sywgl4klcvl4b6k4ucrxh3vw3s2umdpb7zejarjq.b32.i2p:0
7zxl3ohprpqmnmsz72el5o2wqzs5ybc5ixie5i64ayvzhjbhe2bq.b32.i2p:0
a2zioocy4z3jijn6qzl2grifqd7hvuk6kagjv5maoqrnxwoucdoq.b32.i2p:0
a4ot6mtsfgtkciklj34r2zvkmxtbpg5ycint6zehehf7xtz2djka.b32.i2p:0
a5gtxv444a52shcmjq5v4zkbmxfwn4o5ofqlyirhmr5goonrimvq.b32.i2p:0
ab5xl3uj5rmagrwfwraocuinjthvb5f6wtstktlrjrlajnarteia.b32.i2p:0
agd3ebr4tmkj5pnrukswh7luxk7bftdlngwvvntznc2rr5awkaqq.b32.i2p:0
alwzfqb2uol3fu2tbmwy72kqxr243pwabg2g4mtaomvjetscckmq.b32.i2p:0
ame7bnmodeayhxcsb4hh23ocakzaox4bm5mz6yfkpemhb26wpnuq.b32.i2p:0
apiu52rucnbhji3q6qfxfbqdw35woslfpfm2kaca6mjobvrn4kpa.b32.i2p:0
aqwcmdtqbg7g4b7kqpzpbkzoqhyy6epydjx276vgv2vg5kw2rywq.b32.i2p:0
atyfkxoezxfmpmnbj4lmzhxtzaatiidv2exc7gzzm33brhapwwwa.b32.i2p:0
awvhek2uj5fenn4scqhhdp5vuzg5vrrl7f3qasod7cy222iwb4iq.b32.i2p:0
ayn7r3jdijhcl6t6gexmq45dw2tap2l67rn7xgoisaenkel74wha.b32.i2p:0
azavco4tqpr375qqgan567lcmotlib6h7jjh3rboutrxax7u6haa.b32.i2p:0
b36faeb2flnkg2tigqi7rxlnekwiljt25drgow2d4jvsruktqnaa.b32.i2p:0
b3au442ynpqirynybrf22qowknc6leljlbq4xix5xjk2ehlkr2ha.b32.i2p:0
bf2j2wma2oq2222heshaivpon6xud5fum3pzuuffgu3ddg7ss3ma.b32.i2p:0
bipk7yyoxznzzs7tjyh2y7nieuph2gccf4x55vrci6w4aefbxlxa.b32.i2p:0
bkmpto4dtnblvlqvyknp2fa2cfugse5u5oonoipd3qooizqdvbua.b32.i2p:0
bnwgr4t47loftduanvx2rgcse7gls75b7zq5ydtlluesa6p3gxqq.b32.i2p:0
bq56m3mk4w3q4fmh5vcrcxcusssmd7ygi4iyrazrhpbmjh4bnsja.b32.i2p:0
bsiz6td65kdvoyx3d36w7ctinc6dkieasg6575dkotlpaxbplxzq.b32.i2p:0
bsn5rlu4h3a4xpklhhymxorogxpdgudstloclzshghb4deiui3rq.b32.i2p:0
bvqrib7iaoymm5oh3nkrfp2u6zfp3v3xgwp77jmvruj6hlulxi3a.b32.i2p:0
bwq6y5u7jcx77ok4iqpjtiz5re4qagvhhlr3skhe3s4nphnrfhaa.b32.i2p:0
bwsuwvghcfdegz2vg4vrrh4gqbs2yez6w6mzmct2gt6hyregfnga.b32.i2p:0
byoucerid5rb2dducaqwepaytvkw4b4l2wmbfkbfgicflfcd4dta.b32.i2p:0
c3xl7bimshx3o6oxwhq2jfmhmmmike2jbx5icugysmefwgs26n3a.b32.i2p:0
c4rbwijavo6m4gj3sjo6jjwjdvmlmzml2mcagrbw6tqn3rixmdiq.b32.i2p:0
c5az3bzjm47vsp7sps4yaltcifv2nvcolftvmnyiwrctrkwjjhma.b32.i2p:0
c5ytdepbzhdrwn6ymkrk5a2ll3zkwpgk2la6ec7hs7ysvcxhf32a.b32.i2p:0
c6sdbzckovbl7hd5bq5pfkkwc2xtdkx7b357bk3v4vdspzmy34cq.b32.i2p:0
caqiocmm72yn5ymatzbeo3se25j7mhp33bd32xju463vr7ef2voa.b32.i2p:0
carg765pk5ef25vhvpu7phus75yp2xmwf4juphulsksqrho5krsa.b32.i2p:0
cazzdhgkd6ejtqu3hdh74cfnhq536ktrcnww7yq6lyjwd7ocs4iq.b32.i2p:0
cgeb2ffbyjb56vhuder63aeswvhy6isvrhivwbxfaqcu4th5pj6a.b32.i2p:0
chhqibkwshxl5afottq3f4qhtaw3esesunfc4xljqcjeqcht7d6q.b32.i2p:0
cilepisotgs43xi6s7lwlahpxnp55qjti4dck7i2y3kicq7tmw7q.b32.i2p:0
ciwvimts7zzoyrknhlowmzh35mzx4cluq7uycw3ffcckuov4tjjq.b32.i2p:0
cjjktdv4wtr232f5jtw6rge6k2bmxbunelq236vqt2yte6jnqfkq.b32.i2p:0
cjvo2dibbl2hapfbqnpqbcgfpzzwkpkojfac3zo4t7iiwuffjj4a.b32.i2p:0
clqwslg6ijsxtydfzahhxymkx7oboofarzbzrzrla5mhtmpyvdvq.b32.i2p:0
cmfgxulstg5trnmmssjvdrq5e7taqfta6jpuiqzakqujddhljs4a.b32.i2p:0
cmnpbzyfif37aq2bncdtp2wankepsaxpvpexjpydwm6etufqseha.b32.i2p:0
csq5rwmdv43eii7ohtywl4ou6kuewf5wb4nswifkfx2iri7fzdlq.b32.i2p:0
cuktr7luziv3z44rh6ef75hl3atlfqcszodgjwqahgxsstaevvsa.b32.i2p:0
cv4zl42obux6uk7ghxuujbwzl4kuaneruiq2gqmaksxqfcbnxjkq.b32.i2p:0
cws3w5267jj34c4icoz2342dgbm66dr2gljqkeih7kh6e65r2z5a.b32.i2p:0
cysjtseqmtwng3ty25dapg6gyzozmbzv43zqhg7abu3isjhmac4q.b32.i2p:0
d3gmwp7tebwuagm6orga3hwhhuchp6kwsfcsdttittcssjhkshnq.b32.i2p:0
d3udzfukxm3cm2ucd7oen3glvgtymah3r7wdndli7tl5e3xttswq.b32.i2p:0
dclij7rdlmxclsasycgjtwczkksmjykzcqf5z4yvyhofichqyh5a.b32.i2p:0
ddtuamdoynsa4r543psethu4ygfuwvcc7ftlb24ak2n35gnmekha.b32.i2p:0
dfhkpobqzc4soif3kocu62sodohxekxmye5hybt7lr3agqu2k34a.b32.i2p:0
dhci2k575bhvvi2pf45or4x3ts5csnm3yqzaff3t2tsx4mh2d76a.b32.i2p:0
dioihjkfyyb4xgypkmfpdepzmrwoju5tc4v7bwmhcdrllnpg4hmq.b32.i2p:0
diqahlv3xidi733dkqymddufa3ftlbxoxcgqmtvnrjs4kc5qzg7q.b32.i2p:0
dllxsougtvwyyrhthsud4onw4q4jtpirzghofsuahpunr2pkfvya.b32.i2p:0
dlz27nejbzcswguuwzgpv6efms3uaunximpnarc7djgjtqjlthlq.b32.i2p:0
dmed6el2h56j5kno7xocalj6k7ehosyr2fbwcrk5yf62c3edcodq.b32.i2p:0
do6y4lsrp2qzfenbmplla2shhysigcrdjuvb7b5rg2yuedjs2wra.b32.i2p:0
dqr3ge73yw7ctie2vvfmowhwiywplwavkiozfttwop4sthhg6fcq.b32.i2p:0
dqyiv5vbbxpvvzhg4z4s5d4ztjq3jeeafy7q53vuvv4gshfponoa.b32.i2p:0
duawsbyorcgdipwpuvt3f3tmnyqs32xr7h2kzyjhct44vx5i67eq.b32.i2p:0
dupayeh2uwvnmz2c3ti33x76zgnv2uf2rkp75kgdg3zjlyuv4xgq.b32.i2p:0
dw7oovp44knhrikivfmt3hs2lz2trlpb7xout6dlinfnzxeac3sa.b32.i2p:0
e6qoyaetj3zf5jmavn44avsjdynx6oc6lxdgxfsq2bq3zue4nyeq.b32.i2p:0
```

----------------------------------------

TITLE: Installing POWER Linux Cross-Compilation Dependencies
DESCRIPTION: Command to install dependencies for cross-compiling Bitcoin Core for both big and little endian POWER 64-bit Linux systems.

LANGUAGE: bash
CODE:
```
sudo apt-get install g++-powerpc64-linux-gnu binutils-powerpc64-linux-gnu g++-powerpc64le-linux-gnu binutils-powerpc64le-linux-gnu
```

----------------------------------------

TITLE: Installing Common Linux Cross-Compilation Dependencies
DESCRIPTION: Command to install common dependencies for cross-compiling Bitcoin Core for different Linux architectures.

LANGUAGE: bash
CODE:
```
sudo apt-get install g++-multilib binutils
```

----------------------------------------

TITLE: Installing the Retry Tool via Command Line
DESCRIPTION: One-liner to download and install the retry script from GitHub repository to the system's /usr/local/bin directory and make it executable.

LANGUAGE: sh
CODE:
```
sudo sh -c "curl https://raw.githubusercontent.com/kadwanev/retry/master/retry -o /usr/local/bin/retry && chmod +x /usr/local/bin/retry"
```

----------------------------------------

TITLE: Running Scripted-Diff Verification Tool
DESCRIPTION: Shows how to use the commit-script-check.sh tool to verify scripted-diff commits in a range from origin/master to HEAD, useful for development and code review.

LANGUAGE: bash
CODE:
```
test/lint/commit-script-check.sh origin/master..HEAD
```

----------------------------------------

TITLE: Analyzing Perf Results for Bitcoin Core
DESCRIPTION: Command for viewing performance profiling results with symbol demangling to make C++ function names readable.

LANGUAGE: shell
CODE:
```
perf report --stdio | c++filt | less
```

----------------------------------------

TITLE: Generating Coverage Reports with LLVM Tools in Bitcoin Core
DESCRIPTION: Command for generating an HTML coverage report from the merged profile data using llvm-cov, with filters to exclude test and third-party code.

LANGUAGE: shell
CODE:
```
llvm-cov show \
    --object=build/bin/test_bitcoin \
    --object=build/bin/bitcoind \
    -Xdemangler=llvm-cxxfilt \
    --instr-profile=build/coverage.profdata \
    --ignore-filename-regex="src/crc32c/|src/leveldb/|src/minisketch/|src/secp256k1/|src/test/" \
    --format=html \
    --show-instantiation-summary \
    --show-line-counts-or-regions \
    --show-expansions \
    --output-dir=build/coverage_report \
    --project-title="Bitcoin Core Coverage Report"
```

----------------------------------------

TITLE: Generating Bitcoin Build Configuration Summary in CMake
DESCRIPTION: Creates a detailed configuration summary showing the build status of all Bitcoin executables and features. This provides developers with a clear overview of what components will be built with the current configuration.

LANGUAGE: CMake
CODE:
```
message("\n")
message("Configure summary")
message("=================")
message("Executables:")
message("  bitcoind ............................ ${BUILD_DAEMON}")
if(BUILD_DAEMON AND WITH_MULTIPROCESS)
  set(bitcoin_daemon_status ON)
else()
  set(bitcoin_daemon_status OFF)
endif()
message("  bitcoin-node (multiprocess) ......... ${bitcoin_daemon_status}")
message("  bitcoin-qt (GUI) .................... ${BUILD_GUI}")
if(BUILD_GUI AND WITH_MULTIPROCESS)
  set(bitcoin_gui_status ON)
else()
  set(bitcoin_gui_status OFF)
endif()
message("  bitcoin-gui (GUI, multiprocess) ..... ${bitcoin_gui_status}")
message("  bitcoin-cli ......................... ${BUILD_CLI}")
message("  bitcoin-tx .......................... ${BUILD_TX}")
message("  bitcoin-util ........................ ${BUILD_UTIL}")
message("  bitcoin-wallet ...................... ${BUILD_WALLET_TOOL}")
message("  bitcoin-chainstate (experimental) ... ${BUILD_UTIL_CHAINSTATE}")
message("  libbitcoinkernel (experimental) ..... ${BUILD_KERNEL_LIB}")
message("Optional features:")
message("  wallet support ...................... ${ENABLE_WALLET}")
if(ENABLE_WALLET)
  message("   - legacy wallets (Berkeley DB) ..... ${WITH_BDB}")
endif()
message("  external signer ..................... ${ENABLE_EXTERNAL_SIGNER}")
message("  ZeroMQ .............................. ${WITH_ZMQ}")
message("  USDT tracing ........................ ${WITH_USDT}")
message("  QR code (GUI) ....................... ${WITH_QRENCODE}")
message("  DBus (GUI, Linux only) .............. ${WITH_DBUS}")
message("Tests:")
message("  test_bitcoin ........................ ${BUILD_TESTS}")
message("  test_bitcoin-qt ..................... ${BUILD_GUI_TESTS}")
message("  bench_bitcoin ....................... ${BUILD_BENCH}")
message("  fuzz binary ......................... ${BUILD_FUZZ_BINARY}")
message("")
if(CMAKE_CROSSCOMPILING)
  set(cross_status "TRUE, for ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}")
else()
  set(cross_status "FALSE")
endif()
message("Cross compiling ....................... ${cross_status}")
message("C++ compiler .......................... ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}, ${CMAKE_CXX_COMPILER}")
include(FlagsSummary)
flags_summary()
message("Attempt to harden executables ......... ${ENABLE_HARDENING}")
message("Treat compiler warnings as errors ..... ${WERROR}")
message("Use ccache for compiling .............. ${WITH_CCACHE}")
message("\n")
if(configure_warnings)
    message("  ******\n")
    foreach(warning IN LISTS configure_warnings)
      message(WARNING "${warning}")
    endforeach()
    message("  ******\n")
endif()
```

----------------------------------------

TITLE: Finalizing Build Configuration for Bitcoin in CMake
DESCRIPTION: Finalizes the build configuration by setting up compiler definitions, deduplicating flags, and configuring test dependencies. Ensures any environment variables don't cause duplicate flags.

LANGUAGE: cmake
CODE:
```
target_compile_definitions(core_interface INTERFACE ${DEPENDS_COMPILE_DEFINITIONS})
target_compile_definitions(core_interface_relwithdebinfo INTERFACE ${DEPENDS_COMPILE_DEFINITIONS_RELWITHDEBINFO})
target_compile_definitions(core_interface_debug INTERFACE ${DEPENDS_COMPILE_DEFINITIONS_DEBUG})

# If the {CXX,LD}FLAGS environment variables are defined during building depends
# and configuring this build system, their content might be duplicated.
if(DEFINED ENV{CXXFLAGS})
  deduplicate_flags(CMAKE_CXX_FLAGS)
endif()
if(DEFINED ENV{LDFLAGS})
  deduplicate_flags(CMAKE_EXE_LINKER_FLAGS)
endif()

if(BUILD_TESTS)
  enable_testing()
endif()

if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.29)
  # have "make test" depend on "make all"
  set(CMAKE_SKIP_TEST_ALL_DEPENDENCY FALSE)
endif()
```

----------------------------------------

TITLE: Configuring Compiler Warning Flags for Bitcoin in CMake
DESCRIPTION: Sets up comprehensive compiler warning flags for both MSVC and non-MSVC compilers. Creates a warn_interface target that other components can link against to inherit these warning settings.

LANGUAGE: cmake
CODE:
```
add_library(warn_interface INTERFACE)
target_link_libraries(core_interface INTERFACE warn_interface)
if(MSVC)
  try_append_cxx_flags("/W3" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("/wd4018" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("/wd4146" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("/wd4244" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("/wd4267" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("/wd4715" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("/wd4805" TARGET warn_interface SKIP_LINK)
  target_compile_definitions(warn_interface INTERFACE
    _CRT_SECURE_NO_WARNINGS
    _SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING
  )
else()
  try_append_cxx_flags("-Wall" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wextra" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wgnu" TARGET warn_interface SKIP_LINK)
  # Some compilers will ignore -Wformat-security without -Wformat, so just combine the two here.
  try_append_cxx_flags("-Wformat -Wformat-security" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wvla" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wshadow-field" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wthread-safety" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wloop-analysis" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wredundant-decls" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wunused-member-function" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wdate-time" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wconditional-uninitialized" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wduplicated-branches" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wduplicated-cond" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wlogical-op" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Woverloaded-virtual" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wsuggest-override" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wimplicit-fallthrough" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wunreachable-code" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wdocumentation" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wself-assign" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wbidi-chars=any" TARGET warn_interface SKIP_LINK)
  try_append_cxx_flags("-Wundef" TARGET warn_interface SKIP_LINK)

  # Some compilers (gcc) ignore unknown -Wno-* options, but warn about all
  # unknown options if any other warning is produced. Test the -Wfoo case, and
  # set the -Wno-foo case if it works.
  try_append_cxx_flags("-Wunused-parameter" TARGET warn_interface SKIP_LINK
    IF_CHECK_PASSED "-Wno-unused-parameter"
  )
endif()
```

----------------------------------------

TITLE: Initializing Bitcoin Core CMake Project
DESCRIPTION: Defines the BitcoinCore project with version information, description, homepage URL, and disables language detection at this stage.

LANGUAGE: cmake
CODE:
```
project(BitcoinCore
  VERSION ${CLIENT_VERSION_MAJOR}.${CLIENT_VERSION_MINOR}.${CLIENT_VERSION_BUILD}
  DESCRIPTION "Bitcoin client software"
  HOMEPAGE_URL "https://bitcoincore.org/"
  LANGUAGES NONE
)
```

----------------------------------------

TITLE: Setting CMake Try Compile Platform Variables
DESCRIPTION: Configures the CMAKE_TRY_COMPILE_PLATFORM_VARIABLES to include custom compilation and linking variables for consistent behavior in CMake tests.

LANGUAGE: cmake
CODE:
```
set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES
  CMAKE_CXX_COMPILE_OBJECT
  CMAKE_OBJCXX_COMPILE_OBJECT
  CMAKE_CXX_LINK_EXECUTABLE
)
```