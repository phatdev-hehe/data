TITLE: Fetching Data with fetch API on Server in Next.js (TSX/JSX)
DESCRIPTION: Shows how to fetch data server-side using the `fetch` API within an async React Server Component. It fetches a list of blog posts and displays their titles. The `fetch` response is not cached by default. The page will be prerendered statically during `next build` unless dynamic features are used or `force-dynamic` is explicitly set.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with npm
DESCRIPTION: This command uses `create-next-app` to generate a new Next.js project with the `with-axiom` example. It initializes the project using npm. The resulting project is named `with-axiom-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-axiom/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-axiom with-axiom-app
```

----------------------------------------

TITLE: Next.js Link Component Example (JavaScript)
DESCRIPTION: This code shows how to use the `Link` component from `next/link` to create navigation links within a Next.js application. It provides a link to another page ('/other').
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <>
      <h1>Index Page</h1>
      <p>
        <Link href="/other">Other Page</Link>
      </p>
    </>
  )
}
```

----------------------------------------

TITLE: Revalidating Cache by Tag in Server Action
DESCRIPTION: Shows how to use the `revalidateTag` function inside a Server Action (`createPost`) to invalidate cached data associated with a specific cache tag (`'posts'`). This is useful for granularly invalidating data fetches that have been tagged.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_25

LANGUAGE: ts
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidateTag('posts')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidateTag('posts')
}
```

----------------------------------------

TITLE: Implementing Counter Component with Client-side State in JavaScript
DESCRIPTION: JavaScript version of the Counter component using useState hook for managing click count state. Shows the implementation of a Client Component with the 'use client' directive.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/02-client-components.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Using next/link with href Object
DESCRIPTION: Illustrates how to provide the `href` prop as an object to construct URLs dynamically, including pathnames and query parameters. This allows for more complex navigation scenarios, such as linking to `/about` with a query parameter `name=test`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

// Navigate to /about?name=test
export default function Page() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      About
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

// Navigate to /about?name=test
export default function Page() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      About
    </Link>
  )
}
```

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

// Navigate to /about?name=test
export default function Home() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      About
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

// Navigate to /about?name=test
export default function Home() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      About
    </Link>
  )
}
```

----------------------------------------

TITLE: Starting the Next.js Development Server
DESCRIPTION: Commands to run the Next.js development server using different package managers. This starts a local development environment that can be accessed at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw-empty/js/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Defining Root Layout in Next.js
DESCRIPTION: This code defines the required root layout (`app/layout.js` or `app/layout.tsx`) for a Next.js App Router application. This layout wraps the entire application and must include the necessary `<html>` and `<body>` tags. It accepts a `children` prop which will contain the rest of the application's UI.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        <main>{children}</main>
      </body>
    </html>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        <main>{children}</main>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Using useRouter for Navigation in Next.js - JSX
DESCRIPTION: This snippet demonstrates how to use the useRouter hook from Next.js to programmatically navigate to the '/dashboard' route when a button is clicked. It imports useRouter from 'next/navigation' and creates a button that uses the router's push method to navigate.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard/')}> 
      Dashboard
    </button>
  )
}

```

----------------------------------------

TITLE: Redirect with Server Action in Next.js (JavaScript)
DESCRIPTION: This example demonstrates how to use the `redirect` function within a Server Action in Next.js using JavaScript. It defines a `navigate` function that takes form data and redirects the user to a specific post based on the provided ID. This demonstrates how to use redirect within server actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function navigate(data) {
  redirect(`/posts/${data.get('id')}`)
}
```

----------------------------------------

TITLE: Defining a Basic Page Component in Next.js
DESCRIPTION: Example showing how to define a basic page component in Next.js using the page.js file. The component receives params and searchParams as props, which are promises containing route parameters and URL query parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Page({
  params,
  searchParams,
}: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  return <h1>My Page</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page({ params, searchParams }) {
  return <h1>My Page</h1>
}
```

----------------------------------------

TITLE: RootLayout Component with Metadata (Optimized) - JSX
DESCRIPTION: This code defines the optimized RootLayout component after moving the static assets like favicon into the `app` directory. The `<link>` tag for the favicon is removed. The component receives `children` as a prop and renders them within the HTML structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head>
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Configuring Open Graph Metadata (Website Type) in Next.js
DESCRIPTION: Define Open Graph metadata for sharing content on social media platforms. This snippet shows common fields for a website type, including title, description, URL, site name, multiple images with dimensions and alt text, videos, audio, and locale.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_12

LANGUAGE: JSX
CODE:
```
export const metadata = {
  openGraph: {
    title: 'Next.js',
    description: 'The React Framework for the Web',
    url: 'https://nextjs.org',
    siteName: 'Next.js',
    images: [
      {
        url: 'https://nextjs.org/og.png', // Must be an absolute URL
        width: 800,
        height: 600,
      },
      {
        url: 'https://nextjs.org/og-alt.png', // Must be an absolute URL
        width: 1800,
        height: 1600,
        alt: 'My custom alt',
      },
    ],
    videos: [
      {
        url: 'https://nextjs.org/video.mp4', // Must be an absolute URL
        width: 800,
        height: 600,
      },
    ],
    audio: [
      {
        url: 'https://nextjs.org/audio.mp3', // Must be an absolute URL
      },
    ],
    locale: 'en_US',
    type: 'website',
  },
}
```

LANGUAGE: HTML
CODE:
```
<meta property="og:title" content="Next.js" />
<meta property="og:description" content="The React Framework for the Web" />
<meta property="og:url" content="https://nextjs.org/" />
<meta property="og:site_name" content="Next.js" />
<meta property="og:locale" content="en_US" />
<meta property="og:image" content="https://nextjs.org/og.png" />
<meta property="og:image:width" content="800" />
<meta property="og:image:height" content="600" />
<meta property="og:image" content="https://nextjs.org/og-alt.png" />
<meta property="og:image:width" content="1800" />
<meta property="og:image:height" content="1600" />
<meta property="og:image:alt" content="My custom alt" />
<meta property="og:video" content="https://nextjs.org/video.mp4" />
<meta property="og:video:width" content="800" />
<meta property="og:video:height" content="600" />
<meta property="og:audio" content="https://nextjs.org/audio.mp3" />
<meta property="og:type" content="website" />
```

----------------------------------------

TITLE: Next.js Link Component Example (TypeScript)
DESCRIPTION: This code shows how to use the `Link` component from `next/link` to create navigation links within a Next.js application. This particular example focuses on linking to different posts within a blog.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <>
      <h1>Index Page</h1>
      <hr />
      <ul>
        <li>
          <Link href="/post/1">Post 1</Link>
        </li>
        <li>
          <Link href="/post/2">Post 2</Link>
        </li>
      </ul>
    </>
  )
}
```

----------------------------------------

TITLE: Root Layout Definition (TypeScript)
DESCRIPTION: This code snippet defines a root layout component in TypeScript. It is used to define the `<html>` and `<body>` tags for the application. It accepts a `children` prop, which represents the content to be rendered within the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Upgrading React and React DOM using npm
DESCRIPTION: This command upgrades React and React DOM to their latest versions using npm.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-version.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm upgrade react@latest react-dom@latest
```

----------------------------------------

TITLE: Creating a Root Layout in Next.js
DESCRIPTION: Implements a root layout component that wraps child pages. Root layouts are required and must contain html and body tags to define the document structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        {/* Place children where you want to render a page or nested layout */}
        <main>{children}</main>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function DashboardLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        {/* Place children where you want to render a page or nested layout */}
        <main>{children}</main>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Running Development Server with npm/yarn/pnpm/bun
DESCRIPTION: This snippet provides commands to start the development server for a Next.js project using different package managers like npm, yarn, pnpm, or bun. It is essential to have one of these package managers installed as a prerequisite. The commands do not require additional parameters and will launch the server on http://localhost:3000 by default.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw-empty/js/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Composing Server and Client Components in TypeScript
DESCRIPTION: Example showing how to nest client components within server components, demonstrating proper component composition patterns.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-client.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import Header from './header'
import Counter from './counter' // This is a Client Component

export default function Page() {
  return (
    <div>
      <Header />
      <Counter />
    </div>
  )
}
```

----------------------------------------

TITLE: Installing Dependencies with npm and yarn
DESCRIPTION: These commands install project dependencies listed in the `package.json` using either npm or yarn, preparing the development environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install
```

LANGUAGE: bash
CODE:
```
yarn install
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: This code snippet demonstrates how to start the Next.js development server using npm, yarn, pnpm, or bun. It assumes that Node.js and one of these package managers are already installed. The server typically runs on http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw-empty/ts/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Adding Metadata to App Router Layout - TSX
DESCRIPTION: Shows how to define static metadata, such as the page title and description, using the exported `metadata` object within a root layout file (`app/layout.tsx`) in TypeScript. This is the recommended way to manage `<head>` elements in the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Home',
  description: 'Welcome to Next.js',
}
```

----------------------------------------

TITLE: Creating Secure Session Cookie in Next.js App Router (JavaScript)
DESCRIPTION: This asynchronous function `createSession` encrypts a user ID and expiration time (7 days) using a separate `encrypt` function, then sets the resulting session string as an HTTP-only, secure cookie named 'session' using Next.js `cookies()` API. Recommended cookie options like `sameSite` and `path` are included.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_8

LANGUAGE: js
CODE:
```
import 'server-only';
import { cookies } from 'next/headers';

export async function createSession(userId) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
  const session = await encrypt({ userId, expiresAt });
  const cookieStore = await cookies();

  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  });
}
```

----------------------------------------

TITLE: Processing FormData in Server Functions with JavaScript
DESCRIPTION: Demonstrates processing FormData in a JavaScript Server Function. The function extracts title and content fields from the FormData object for database operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
'use server'

export async function createPost(formData) {
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Redirecting to Login Page in Middleware (After - Correct)
DESCRIPTION: This code snippet shows the correct approach for handling authorization in Next.js Middleware v12.2+ by redirecting the user to a login page if they are not authenticated. It sets a 'from' query parameter to retain the original intended destination.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/returning-response-body-in-middleware.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  request.nextUrl.searchParams.set('from', request.nextUrl.pathname)
  request.nextUrl.pathname = '/login'

  return NextResponse.redirect(request.nextUrl)
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode
DESCRIPTION: These commands install the necessary Node.js packages and start the Next.js development server.  `npm install` or `yarn install` downloads dependencies specified in the `package.json` file. `npm run dev` or `yarn dev` then starts the development server, typically on port 3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Implementing Responsive Image using next/image (JSX)
DESCRIPTION: This snippet demonstrates using the `next/image` component to create a responsive image. It imports a local image, automatically setting dimensions, and applies `sizes="100vw"` along with inline styles (`width: '100%', height: 'auto'`) to ensure the image scales correctly with the viewport width.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
import Image from 'next/image'
import mountains from '../public/mountains.jpg'

export default function Responsive() {
  return (
    <div style={{ display: 'flex', flexDirection: 'column' }}>
      <Image
        alt="Mountains"
        // Importing an image will
        // automatically set the width and height
        src={mountains}
        sizes="100vw"
        // Make the image display full width
        style={{
          width: '100%',
          height: 'auto',
        }}
      />
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing Counter Component with Client-side State in TypeScript
DESCRIPTION: Example of a Client Component using useState hook for managing click count state. The component demonstrates the use of the 'use client' directive and client-side interactivity.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/02-client-components.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: These commands are used to start the Next.js development server. The user can choose to use npm, yarn, pnpm, or bun as the package manager to run the dev script, which starts the server for local development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-api/js/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Initializing Root Layout Component (JSX)
DESCRIPTION: This code initializes the root layout component in a Next.js application using JavaScript (JSX). It defines a functional component `RootLayout` that accepts `children` as a prop. The component returns a basic structure with placeholder content. This is the starting point for defining the overall structure of your Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return '...'
}
```

----------------------------------------

TITLE: Implement generateStaticParams for Static Generation in Next.js
DESCRIPTION: This snippet demonstrates how to use the `generateStaticParams` function to statically generate dynamic routes at build time. The function fetches data (e.g., blog posts) and returns an array of objects, where each object provides the specific parameter values (e.g., `slug`) for pre-rendering a route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/10-dynamic-routes.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Specifying a Subset for Google Fonts
DESCRIPTION: This code snippet shows how to specify a subset when importing a Google Font using `next/font/google`.  Subsetting reduces the font file size, improving performance. This example sets the subset to 'latin'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_10

LANGUAGE: jsx
CODE:
```
const inter = Inter({ subsets: ['latin'] })
```

----------------------------------------

TITLE: Upgrading Next.js to Stable Release using npm
DESCRIPTION: This command upgrades Next.js to the latest stable release using npm package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npm i next@latest
```

----------------------------------------

TITLE: Async Layout Implementation in Next.js 15
DESCRIPTION: Examples of implementing both async and sync layouts with params handling in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
type Params = Promise<{ slug: string }>

export async function generateMetadata({ params }: { params: Params }) {
  const { slug } = await params
}

export default async function Layout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Params
}) {
  const { slug } = await params
}
```

----------------------------------------

TITLE: Using next/link for Basic Navigation
DESCRIPTION: Demonstrates the fundamental usage of the `next/link` component to navigate to a static path. It shows how to import the component and render it with a simple string `href` prop, effectively creating a client-side navigation link to `/dashboard`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

----------------------------------------

TITLE: Using useParams in TypeScript with Next.js
DESCRIPTION: The example demonstrates how to use the useParams hook in a TypeScript context. It retrieves dynamic parameters from the current URL and logs them. This component is designed as a Client Component and requires Next.js version that supports Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-params.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useParams } from 'next/navigation'

export default function ExampleClientComponent() {
  const params = useParams<{ tag: string; item: string }>()

  // Route -> /shop/[tag]/[item]
  // URL -> /shop/shoes/nike-air-max-97
  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }
  console.log(params)

  return '...'
}

```

----------------------------------------

TITLE: Creating Default Next.js Application
DESCRIPTION: Creates a new Next.js application using the default template, which will prompt the user for project configuration preferences.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/create-next-app.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
```

----------------------------------------

TITLE: Create Root Layout Component (App Router)
DESCRIPTION: Defines the required root layout component (`app/layout.tsx` or `app/layout.js`) for applications using the App Router. This component wraps all other routes and must include `<html>` and `<body>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Implementing Parallel Data Fetching with Promise.all in Next.js
DESCRIPTION: Demonstrates the parallel data fetching pattern where multiple independent data requests are initiated concurrently within the same route segment or component. By calling the async fetching functions (`getArtist`, `getAlbums`) and then awaiting their promises together using `Promise.all`, both requests run in parallel, potentially reducing the overall data loading time compared to sequential fetching. The component awaits the resolution of all promises before rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import Albums from './albums';

async function getArtist(username: string) {
  const res = await fetch(`https://api.example.com/artist/${username}`);
  return res.json();
}

async function getAlbums(username: string) {
  const res = await fetch(`https://api.example.com/artist/${username}/albums`);
  return res.json();
}

export default async function Page({
  params,
}: {
  params: Promise<{ username: string }>;
}) {
  const { username } = await params;
  const artistData = getArtist(username);
  const albumsData = getAlbums(username);

  // Initiate both requests in parallel
  const [artist, albums] = await Promise.all([artistData, albumsData]);

  return (
    <>
      <h1>{artist.name}</h1>
      <Albums list={albums} />
    </>
  );
}
```

LANGUAGE: javascript
CODE:
```
import Albums from './albums';

async function getArtist(username) {
  const res = await fetch(`https://api.example.com/artist/${username}`);
  return res.json();
}

async function getAlbums(username) {
  const res = await fetch(`https://api.example.com/artist/${username}/albums`);
  return res.json();
}

export default async function Page({ params }) {
  const { username } = await params;
  const artistData = getArtist(username);
  const albumsData = getAlbums(username);

  // Initiate both requests in parallel
  const [artist, albums] = await Promise.all([artistData, albumsData]);

  return (
    <>
      <h1>{artist.name}</h1>
      <Albums list={albums} />
    </>
  );
}
```

----------------------------------------

TITLE: Using a Server Action in a Client Component (TypeScript)
DESCRIPTION: This snippet shows how to import and use a Server Action within a client component in Next.js using TypeScript. The `create` function, which is defined as a Server Action, is imported and called when the button is clicked. This allows client components to trigger server-side logic directly without the need for explicit API calls.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_15

LANGUAGE: typescript
CODE:
```
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}
```

----------------------------------------

TITLE: Configuring Redirects in Next.js using JavaScript
DESCRIPTION: This code snippet demonstrates how to set up URL redirects in Next.js using `next.config.js`. Redirects are defined in an async function using an array of objects with `source`, `destination`, and `permanent` properties. Additional properties such as `basePath`, `locale`, `has`, and `missing` can be used for more advanced redirect behaviors. Redirects are processed before other paths like pages and public files. Dependencies include a proper Next.js setup with the correct version supporting these configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async redirects() {
    return [
      {
        source: '/about',
        destination: '/',
        permanent: true,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Running Dev Server
DESCRIPTION: This code snippet shows the command to run the Next.js development server, usually using npm. This command initiates the build and serves the Next.js application for local development. Requires Node.js environment with npm installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_6

LANGUAGE: Terminal
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Running Development Server in Next.js
DESCRIPTION: This snippet provides commands to start the development server for a Next.js application using npm, yarn, pnpm, or bun. The server runs locally and is accessible via a web browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/js/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Creating Cached Server-Only Data Utility with Preload (TS)
DESCRIPTION: Defines a data fetching utility (`getItem`) that utilizes React's `cache` to memoize responses and the `server-only` package to ensure it's never included in client bundles. It also exports a `preload` function that simply calls the cached `getItem` without awaiting it, supporting the early data fetching pattern.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_11

LANGUAGE: TS
CODE:
```
import { cache } from 'react'
import 'server-only'

export const preload = (id: string) => {
  void getItem(id)
}

export const getItem = cache(async (id: string) => {
  // ...
})
```

LANGUAGE: JS
CODE:
```
import { cache } from 'react'
import 'server-only'

export const preload = (id) => {
  void getItem(id)
}

export const getItem = cache(async (id) => {
  // ...
})
```

----------------------------------------

TITLE: Correct Export of Async Functions - JavaScript
DESCRIPTION: This snippet provides a correct example of exporting an async function in a 'use server' file. It demonstrates the appropriate way to define functions that can be accessed as Server Actions in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-use-server-value.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
"use strict"

// ✅ This is correct: an async function is exported.
export async function getServerData() {
  return '...'
}
```

----------------------------------------

TITLE: Defining Basic GET Route Handler in App Router (TypeScript)
DESCRIPTION: Provides a basic example of a Route Handler in the `app` directory using TypeScript. It exports an asynchronous function named `GET` that serves as the handler for incoming GET requests to the route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_28

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {}
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to run the Next.js development server using npm, yarn, pnpm, or bun. This starts the local development environment for the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-empty/js/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Fetching Data in Next.js Server Component (TSX)
DESCRIPTION: Demonstrates using the Next.js extended `fetch` function with `async`/`await` directly within a Server Component (TSX) to retrieve data from an external API, parse the JSON response, and render a simple list.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#_snippet_0

LANGUAGE: TSX
CODE:
```
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Defining Basic App Router Root Layout - TSX
DESCRIPTION: Provides the standard code for the root layout file (`app/layout.tsx`) when using TypeScript in the App Router. This layout is required and wraps all content within the `app` directory, defining the initial HTML structure including `<html>` and `<body>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  // Layouts must accept a children prop.
  // This will be populated with nested layouts or pages
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Using Next.js Router Hooks in App Directory Client Components (TSX/JSX)
DESCRIPTION: Demonstrates how to use the new routing hooks (`useRouter`, `usePathname`, `useSearchParams`) from `next/navigation` in a Client Component within the `app` directory. These hooks are specifically designed for the App Router and provide access to navigation functions, the current path, and search parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // ...\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\n\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // ...\n}
```

----------------------------------------

TITLE: Using useSearchParams in a Next.js Client Component (TSX)
DESCRIPTION: This code demonstrates how to use the `useSearchParams` hook in a Next.js Client Component to extract a specific query parameter from the URL. It imports the hook from `next/navigation` and uses the `get` method to retrieve the value of the `search` parameter. It is intended for use within the `app` directory structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
"use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}"
```

----------------------------------------

TITLE: Implementing Authorization Check in App Router GET Handler (JS)
DESCRIPTION: Shows how to secure an App Router `GET` Route Handler in JavaScript. The code performs a two-step security check: first verifying user authentication via a session, and then checking for the 'admin' role to ensure proper authorization, returning appropriate HTTP status codes (401/403) for restricted access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_37

LANGUAGE: js
CODE:
```
import { verifySession } from '@/app/lib/dal'\n\nexport async function GET() {\n  // User authentication and role verification\n  const session = await verifySession()\n\n  // Check if the user is authenticated\n  if (!session) {\n    // User is not authenticated\n    return new Response(null, { status: 401 })\n  }\n\n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    // User is authenticated but does not have the right permissions\n    return new Response(null, { status: 403 })\n  }\n\n  // Continue for authorized users\n}
```

----------------------------------------

TITLE: Fetching Data in Next.js Server Component (JSX)
DESCRIPTION: Illustrates using the Next.js extended `fetch` function with `async`/`await` within a Server Component (JavaScript/JSX) to fetch data from an API, parse it as JSON, and render a list dynamically.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Root Layout Setup (TypeScript)
DESCRIPTION: This code demonstrates setting up the root layout in a Next.js application using TypeScript. It imports a server-side function `getUser` to fetch user data and passes the resulting promise to a `UserProvider` component. The `userPromise` is not awaited, allowing Next.js to start data fetching early on the server. This example improves performance by initiating data fetching in the root layout, avoiding client waterfalls.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { UserProvider } from './user-provider'
import { getUser } from './user' // some server-side function

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  let userPromise = getUser() // do NOT await

  return (
    <html lang="en">
      <body>
        <UserProvider userPromise={userPromise}>{children}</UserProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Importing and Using Next.js Image Component in JSX
DESCRIPTION: This snippet demonstrates how to import and use the Next.js Image component in a React component. It shows the basic usage with required props like src, width, height, and alt.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      width={500}
      height={500}
      alt="Picture of the author"
    />
  )
}
```

----------------------------------------

TITLE: Copying .env.local.example to .env.local
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`.  The `.env.local` file is used to store environment variables specific to the local development environment. This file is typically ignored by Git to prevent sensitive information from being committed to the repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Running Development Server - Bash Commands
DESCRIPTION: This snippet shows the commands to start a Next.js development server using npm, yarn, pnpm, or bun. It requires Node.js and a package manager to be installed. The server runs on http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw-empty/ts/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Root Layout Definition (JavaScript)
DESCRIPTION: This code snippet defines a root layout component in JavaScript. It is used to define the `<html>` and `<body>` tags for the application. It accepts a `children` prop, which represents the content to be rendered within the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining Basic App Router Root Layout - JSX
DESCRIPTION: Provides the standard code for the root layout file (`app/layout.js`) when using JavaScript/JSX in the App Router. This required layout wraps all content within the `app` directory and defines the basic HTML structure, including `<html>` and `<body>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
export default function RootLayout({
  // Layouts must accept a children prop.
  // This will be populated with nested layouts or pages
  children,
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Fetching Data in Server Component with fetch API (Next.js)
DESCRIPTION: This snippet demonstrates how to fetch data in a Next.js Server Component using the fetch API. It retrieves blog posts from an API and renders them as a list.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Creating User Server Action (File Level) - TSX/JSX
DESCRIPTION: Demonstrates using `'use server'` at the top of a file to define server-side functions. The `createUser` function interacts with a database client (`db`) to add a new user based on provided data. This pattern makes all exported functions in the file server actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use server'\nimport { db } from '@/lib/db' // Your database client\n\nexport async function createUser(data: { name: string; email: string }) {\n  const user = await db.user.create({ data })\n  return user\n}
```

LANGUAGE: jsx
CODE:
```
'use server'\nimport { db } from '@/lib/db' // Your database client\n\nexport async function createUser(data) {\n  const user = await db.user.create({ data })\n  return user\n}
```

----------------------------------------

TITLE: Accessing Server-Side Env Vars in App Router Route Handler (Next.js)
DESCRIPTION: This example demonstrates accessing server-side environment variables within an App Router Route Handler (e.g., an API route).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export async function GET() {
  const db = await myDB.connect({
    host: process.env.DB_HOST,
    username: process.env.DB_USER,
    password: process.env.DB_PASS,
  })
  // ...
}
```

----------------------------------------

TITLE: Defining Server Action with Closure (React TSX/JSX)
DESCRIPTION: Demonstrates how a Next.js Server Action (`publish`) defined inside a React component (`Page`) can capture and access variables (`publishVersion`) from the component's scope using a closure. The action is triggered by a form submission. Requires Next.js Server Actions and a React component context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_30

LANGUAGE: TypeScript
CODE:
```
export default async function Page() {
  const publishVersion = await getLatestVersion();

  async function publish() {
    "use server";
    if (publishVersion !== await getLatestVersion()) {
      throw new Error('The version has changed since pressing publish');
    }
    ...
  }

  return (
    <form>
      <button formAction={publish}>Publish</button>
    </form>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
export default async function Page() {
  const publishVersion = await getLatestVersion();

  async function publish() {
    "use server";
    if (publishVersion !== await getLatestVersion()) {
      throw new Error('The version has changed since pressing publish');
    }
    ...
  }

  return (
    <form>
      <button formAction={publish}>Publish</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Running Next.js in development mode using yarn
DESCRIPTION: These commands start the Next.js development server. It can be run using npm, yarn, or pnpm. The application will be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Updating Post Server Action (Inline) - TSX/JSX
DESCRIPTION: Demonstrates using `'use server'` inline within an asynchronous function (`updatePost`) defined inside a Next.js Server Component page. This server function handles form data, saves the post, and then revalidates the page path using `revalidatePath` from `next/cache`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { EditPost } from './edit-post'\nimport { revalidatePath } from 'next/cache'\n\nexport default async function PostPage({ params }: { params: { id: string } }) {\n  const post = await getPost(params.id)\n\n  async function updatePost(formData: FormData) {\n    'use server'\n    await savePost(params.id, formData)\n    revalidatePath(`/posts/${params.id}`)\n  }\n\n  return <EditPost updatePostAction={updatePost} post={post} />\n}
```

LANGUAGE: jsx
CODE:
```
import { EditPost } from './edit-post'\nimport { revalidatePath } from 'next/cache'\n\nexport default async function PostPage({ params }) {\n  const post = await getPost(params.id)\n\n  async function updatePost(formData) {\n    'use server'\n    await savePost(params.id, formData)\n    revalidatePath(`/posts/${params.id}`)\n  }\n\n  return <EditPost updatePostAction={updatePost} post={post} />\n}
```

----------------------------------------

TITLE: Using the Link Component Next.js TSX
DESCRIPTION: Demonstrates the basic usage of the built-in Next.js <Link> component in a TypeScript React Server Component. It shows how to import the component from 'next/link' and use it to create a link that navigates to the '/dashboard' route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

----------------------------------------

TITLE: Using Server Functions with Forms in React Components (TypeScript)
DESCRIPTION: Shows how to invoke a Server Function using the HTML form action attribute in TypeScript. The form automatically passes FormData to the Server Function when submitted.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { createPost } from '@/app/actions'

export function Form() {
  return (
    <form action={createPost}>
      <input type="text" name="title" />
      <input type="text" name="content" />
      <button type="submit">Create</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Automatic Installation with create-next-app (Bash)
DESCRIPTION: Command to run the official Next.js CLI tool `create-next-app` to quickly set up a new project with recommended defaults and interactive configuration prompts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
```

----------------------------------------

TITLE: Running tests with npm/yarn/pnpm/bun
DESCRIPTION: These commands demonstrate how to run tests using npm, yarn, pnpm or bun. They all execute the `test` script defined in the `package.json` file, which in turn runs Vitest.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_9

LANGUAGE: bash
CODE:
```
npm run test
# or
yarn test
# or
pnpm test
# or
bun test
```

----------------------------------------

TITLE: Adding Authentication/Authorization Check in Server Action
DESCRIPTION: Provides an example of implementing authorization checks within a Server Action (`addItem`). It demonstrates calling an external authentication utility (`auth`) to verify if the user is signed in and throwing an error if they are not authorized to perform the action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_29

LANGUAGE: tsx
CODE:
```
'use server'

import { auth } from './lib'

export function addItem() {
  const { user } = auth()
  if (!user) {
    throw new Error('You must be signed in to perform this action')
  }

  // ...
}
```

----------------------------------------

TITLE: Copy Environment File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`.  The `.env.local` file is used to store environment variables specific to the local development environment, and it's typically excluded from version control. Requires a bash-compatible shell.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Defining MDX Components Typescript
DESCRIPTION: Provides the required `mdx-components.tsx` file structure for App Router, defining the `useMDXComponents` function that receives and returns an `MDXComponents` object. This file is essential for `@next/mdx` in App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import type { MDXComponents } from 'mdx/types'

export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    ...components,
  }
}
```

----------------------------------------

TITLE: Invoking Server Action on Change within Form Element (Edit Post)
DESCRIPTION: Illustrates calling a Next.js Server Action (`saveDraft`) from an `onChange` event handler on a form input (`<textarea>`). The example highlights the use case for saving drafts as the user types, and notes the potential need for debouncing for frequently fired events.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_22

LANGUAGE: tsx
CODE:
```
'use client'

import { publishPost, saveDraft } from './actions'

export default function EditPost() {
  return (
    <form action={publishPost}>
      <textarea
        name="content"
        onChange={async (e) => {
          await saveDraft(e.target.value)
        }}
      />
      <button type="submit">Publish</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Verify User Session in DAL (Next.js/React Cache) - TSX
DESCRIPTION: This function verifies the user's session by retrieving a session cookie, decrypting it, and checking for a valid user ID. If the session is invalid or missing, it redirects to the login page. It uses React's `cache` API to memoize the result within a React render pass.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_22

LANGUAGE: TSX
CODE:
```
import 'server-only'

import { cookies } from 'next/headers'
import { decrypt } from '@/app/lib/session'
import { cache } from 'react'
import { redirect } from 'next/navigation'

export const verifySession = cache(async () => {
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  if (!session?.userId) {
    redirect('/login')
  }

  return { isAuth: true, userId: session.userId }
})
```

----------------------------------------

TITLE: Creating a Theme Context Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to create a ThemeContext using React's createContext. It is important to note that createContext cannot be used directly within Server Components. The ThemeProvider function wraps children in a context provider with a default value of 'dark'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { createContext } from 'react'

//  createContext is not supported in Server Components
export const ThemeContext = createContext({})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html>
      <body>
        <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Accessing Search Parameters in Next.js
DESCRIPTION: Demonstrates how to access URL search parameters in a Next.js page component. The searchParams prop is a promise containing key-value pairs from the URL's query string.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
export default async function Page({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const filters = (await searchParams).filters
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ searchParams }) {
  const filters = (await searchParams).filters
}
```

----------------------------------------

TITLE: Encrypting and Decrypting Session Payload with Jose in JavaScript
DESCRIPTION: This snippet defines asynchronous functions `encrypt` and `decrypt` using the `jose` library. The `encrypt` function signs a payload with HS256, setting expiration to 7 days. The `decrypt` function verifies a session string using HS256 and returns the payload, handling verification errors. Both functions use a shared secret key from environment variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import 'server-only';
import { SignJWT, jwtVerify } from 'jose';

const secretKey = process.env.SESSION_SECRET;
const encodedKey = new TextEncoder().encode(secretKey);

export async function encrypt(payload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(encodedKey);
}

export async function decrypt(session) {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ['HS256'],
    });
    return payload;
  } catch (error) {
    console.log('Failed to verify session');
  }
}
```

----------------------------------------

TITLE: Global Error Handling in Next.js
DESCRIPTION: Implementation of a global error boundary that handles root-level errors and provides a complete HTML document structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/05-error-handling.mdx#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
'use client'

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

LANGUAGE: javascript
CODE:
```
'use client'

export default function GlobalError({ error, reset }) {
  return (
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Setting fetch Revalidation Period (Next.js)
DESCRIPTION: Shows how to specify a time-based revalidation period (in seconds) for a specific fetch request using the `next.revalidate` option, which affects both Data and Full Route Caches.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_6

LANGUAGE: JSX
CODE:
```
fetch(`https://...`, { next: { revalidate: 3600 } })
```

----------------------------------------

TITLE: Dynamic Content Based on Params (TypeScript)
DESCRIPTION: This TypeScript example demonstrates how to display content based on dynamic route parameters. It accesses the `team` parameter from the `params` prop and uses it to personalize the header of the dashboard layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
export default async function DashboardLayout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Promise<{ team: string }>
}) {
  const { team } = await params

  return (
    <section>
      <header>
        <h1>Welcome to {team}'s Dashboard</h1>
      </header>
      <main>{children}</main>
    </section>
  )
}
```

----------------------------------------

TITLE: Streaming Data with use Hook in Client Component (Next.js)
DESCRIPTION: This snippet demonstrates how to stream data from a Server Component to a Client Component using React's use hook in Next.js. It fetches blog posts and passes them as a promise to a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import Posts from '@/app/ui/posts
import { Suspense } from 'react'

export default function Page() {
  // Don't await the data fetching function
  const posts = getPosts()

  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Posts posts={posts} />
    </Suspense>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Posts from '@/app/ui/posts
import { Suspense } from 'react'

export default function Page() {
  // Don't await the data fetching function
  const posts = getPosts()

  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Posts posts={posts} />
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Calling Server Function from Client Component - TSX/JSX
DESCRIPTION: Shows a React client component (`MyButton`) that imports a server function (`fetchUsers`) defined elsewhere. The function is invoked from a client-side event handler (`onClick`) on a button, demonstrating how server actions can be triggered from client components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'\nimport { fetchUsers } from '../actions'\n\nexport default function MyButton() {\n  return <button onClick={() => fetchUsers()}>Fetch Users</button>\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\nimport { fetchUsers } from '../actions'\n\nexport default function MyButton() {\n  return <button onClick={() => fetchUsers()}>Fetch Users</button>\n}
```

----------------------------------------

TITLE: Integrating Google Fonts with Tailwind CSS in Next.js App Router (TypeScript)
DESCRIPTION: Demonstrates how to use Google Fonts with Tailwind CSS in a Next.js application using the App Router with TypeScript. The example shows setting up CSS variables for font families that can be used in Tailwind configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_25

LANGUAGE: tsx
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html
      lang="en"
      className={`${inter.variable} ${roboto_mono.variable} antialiased`}
    >
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Set Priority with Local Import (App Router JSX)
DESCRIPTION: Demonstrates setting the `priority` prop for a local image imported directly into an App Router page. Marking the image with `priority` helps Next.js optimize preloading for improved LCP performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'
import profilePic from '../public/me.png'

export default function Page() {
  return <Image src={profilePic} alt="Picture of the author" priority />
}
```

----------------------------------------

TITLE: Defining a GET Route Handler in Next.js
DESCRIPTION: Basic example of creating a GET route handler in TypeScript and JavaScript. This demonstrates the minimal setup required for handling GET requests in a Next.js app.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export async function GET(request: Request) {}
```

LANGUAGE: javascript
CODE:
```
export async function GET(request) {}
```

----------------------------------------

TITLE: Updating Internal Navigation to Use Next.js Link Component - JavaScript
DESCRIPTION: This snippet demonstrates how to replace an `<a>` element with the `Link` component from Next.js to enable client-side navigation within a Next.js application, thereby preventing full-page refreshes. The updated component ensures seamless transitions between pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-html-link-for-pages.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
function Home() {
  return (
    <div>
      <Link href="/about">About Us</Link>
    </div>
  )
}

export default Home
```

----------------------------------------

TITLE: Creating Database Session in Next.js App Router
DESCRIPTION: This asynchronous function creates a new database session for a given user ID in a Next.js App Router context. It calculates the session's expiration date, inserts a new record into a 'sessions' database table, retrieves the generated session ID, encrypts it, and stores the encrypted session data as a cookie in the user's browser for future optimistic authentication checks.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_19

LANGUAGE: ts
CODE:
```
import cookies from 'next/headers'
import { db } from '@/app/lib/db'
import { encrypt } from '@/app/lib/session'

export async function createSession(id: number) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)

  // 1. Create a session in the database
  const data = await db
    .insert(sessions)
    .values({
      userId: id,
      expiresAt,
    })
    // Return the session ID
    .returning({ id: sessions.id })

  const sessionId = data[0].id

  // 2. Encrypt the session ID
  const session = await encrypt({ sessionId, expiresAt })

  // 3. Store the session in cookies for optimistic auth checks
  const cookieStore = await cookies()
  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  })
}
```

LANGUAGE: js
CODE:
```
import cookies from 'next/headers'
import { db } from '@/app/lib/db'
import { encrypt } from '@/app/lib/session'

export async function createSession(id) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)

  // 1. Create a session in the database
  const data = await db
    .insert(sessions)
    .values({
      userId: id,
      expiresAt,
    })
    // Return the session ID
    .returning({ id: sessions.id })

  const sessionId = data[0].id

  // 2. Encrypt the session ID
  const session = await encrypt({ sessionId, expiresAt })

  // 3. Store the session in cookies for optimistic auth checks
  const cookieStore = await cookies()
  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  })
}
```

----------------------------------------

TITLE: Revalidating Cache After Server Function Updates with TypeScript
DESCRIPTION: Shows how to revalidate the Next.js cache after data updates in a TypeScript Server Function. Uses the revalidatePath function to refresh cached data on the posts path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
import { revalidatePath } from 'next/cache'

export async function createPost(formData: FormData) {
  'use server'
  // Update data
  // ...

  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Invoking Server Action on Click with useState (Like Button)
DESCRIPTION: Demonstrates how to call a Next.js Server Action (`incrementLike`) from an `onClick` event handler in a client component. The component uses React's `useState` hook to manage the like count, updating the state with the value returned by the server action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_21

LANGUAGE: tsx
CODE:
```
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }: { initialLikes: number }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Define Page Component for Dynamic Segment in Next.js App Router
DESCRIPTION: This snippet shows how to define a page component that utilizes a dynamic route segment (`[slug]`) in the App Router. The component receives the dynamic segment value via the `params` prop, which is a Promise (in Next.js 15+). It demonstrates accessing the parameter using async/await and rendering it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/10-dynamic-routes.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  return <div>My Post: {slug}</div>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
  return <div>My Post: {slug}</div>
}
```

----------------------------------------

TITLE: Defining GET Handler for API Route - JavaScript
DESCRIPTION: Defines and exports an asynchronous function named `GET`. In Next.js, exporting functions matching HTTP methods (like GET, POST, etc.) creates API route handlers. This function receives the request object `req` and returns a JSON response containing the pathname extracted from the request's URL using `req.nextUrl.pathname`. It relies on the imported `NextResponse` class to format the JSON output.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
export const GET = (req)=>{
    return NextResponse.json({
        pathname: req.nextUrl.pathname
    });
};
```

----------------------------------------

TITLE: Integrating Session Creation into Server Action (JavaScript)
DESCRIPTION: This snippet shows a Next.js Server Action `signup` that integrates session management. After handling previous steps like validation and database insertion, it calls the `createSession` function with the user's ID and then uses the `redirect` API to navigate the user to the profile page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_10

LANGUAGE: js
CODE:
```
import { createSession } from '@/app/lib/session';

export async function signup(state, formData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id);
  // 5. Redirect user
  redirect('/profile');
}
```

----------------------------------------

TITLE: Implementing Server Actions Error Handling in Next.js
DESCRIPTION: Server action implementation that handles form submission errors and redirects. Uses form validation and returns error messages instead of throwing exceptions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/05-error-handling.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createUser(prevState: any, formData: FormData) {
  const res = await fetch('https://...')
  const json = await res.json()

  if (!res.ok) {
    return { message: 'Please enter a valid email' }
  }

  redirect('/dashboard')
}
```

LANGUAGE: javascript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createUser(prevState, formData) {
  const res = await fetch('https://...')
  const json = await res.json()

  if (!res.ok) {
    return { message: 'Please enter a valid email' }
  }

  redirect('/dashboard')
}
```

----------------------------------------

TITLE: Setting Ably API Key and API Root in .env
DESCRIPTION: This example demonstrates how to store the Ably API key and API root URL in a .env file. This configuration is used for authentication and connecting to the Ably service during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
ABLY_API_KEY=your-ably-api-key:goes-here
API_ROOT=http://localhost:3000
```

----------------------------------------

TITLE: Vitest Unit Test (TypeScript)
DESCRIPTION: This TypeScript snippet creates a Vitest unit test for the `Page` component. It imports `expect` and `test` from Vitest, and `render` and `screen` from `@testing-library/react`. It renders the `Page` component and asserts that a heading with level 1 and name 'Home' exists.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { expect, test } from 'vitest'
import { render, screen } from '@testing-library/react'
import Page from '../app/page'

test('Page', () => {
  render(<Page />)
  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()
})
```

----------------------------------------

TITLE: Server Function Error Handling in Next.js
DESCRIPTION: Demonstrates handling expected errors in a server action using form data submission. Returns error messages instead of throwing exceptions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
'use server'

export async function createPost(prevState: any, formData: FormData) {
  const title = formData.get('title')
  const content = formData.get('content')

  const res = await fetch('https://api.vercel.app/posts', {
    method: 'POST',
    body: { title, content },
  })
  const json = await res.json()

  if (!res.ok) {
    return { message: 'Failed to create post' }
  }
}
```

LANGUAGE: javascript
CODE:
```
'use server'

export async function createPost(prevState, formData) {
  const title = formData.get('title')
  const content = formData.get('content')

  const res = await fetch('https://api.vercel.app/posts', {
    method: 'POST',
    body: { title, content },
  })
  const json = await res.json()

  if (!res.ok) {
    return { message: 'Failed to create post' }
  }
}
```

----------------------------------------

TITLE: Implementing Granular Streaming with Suspense (Next.js)
DESCRIPTION: This snippet demonstrates how to implement granular streaming in a Next.js page using React's Suspense component. It immediately renders static content while streaming in dynamic content wrapped in a Suspense boundary.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import BlogList from '@/components/BlogList'
import BlogListSkeleton from '@/components/BlogListSkeleton'

export default function BlogPage() {
  return (
    <div>
      {/* This content will be sent to the client immediately */}
      <header>
        <h1>Welcome to the Blog</h1>
        <p>Read the latest posts below.</p>
      </header>
      <main>
        {/* Any content wrapped in a <Suspense> boundary will be streamed */}
        <Suspense fallback={<BlogListSkeleton />}>
          <BlogList />
        </Suspense>
      </main>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import BlogList from '@/components/BlogList'
import BlogListSkeleton from '@/components/BlogListSkeleton'

export default function BlogPage() {
  return (
    <div>
      {/* This content will be sent to the client immediately */}
      <header>
        <h1>Welcome to the Blog</h1>
        <p>Read the latest posts below.</p>
      </header>
      <main>
        {/* Any content wrapped in a <Suspense> boundary will be streamed */}
        <Suspense fallback={<BlogListSkeleton />}>
          <BlogList />
        </Suspense>
      </main>
    </div>
  )
}
```

----------------------------------------

TITLE: Server Component Error Handling in Next.js
DESCRIPTION: Implementation of error handling in a Server Component, demonstrating how to handle fetch errors and conditionally render error messages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/05-error-handling.mdx#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
export default async function Page() {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!res.ok) {
    return 'There was an error.'
  }

  return '...'
}
```

LANGUAGE: javascript
CODE:
```
export default async function Page() {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!res.ok) {
    return 'There was an error.'
  }

  return '...'
}
```

----------------------------------------

TITLE: Setting Dynamic Rendering for Page in Next.js (JS)
DESCRIPTION: Exports a `dynamic` configuration option set to `'force-dynamic'`. This instructs Next.js to always render the page or route segment dynamically at request time, preventing static prerendering, even if no other dynamic functions are used on the page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export const dynamic = 'force-dynamic'
```

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: These commands install project dependencies using npm, yarn or pnpm. It ensures all necessary packages are installed before running the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
# or
yarn
# or
pnpm install
```

----------------------------------------

TITLE: Configure Development Scripts (JSON)
DESCRIPTION: Adds standard npm scripts to the `package.json` file to easily run the Next.js development server (`dev`), build the application for production (`build`), start the production server (`start`), and run ESLint checks (`lint`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  }
}
```

----------------------------------------

TITLE: Server-Side Post Creation and Redirection in Next.js TypeScript
DESCRIPTION: This TypeScript code describes how to handle post creation on the server side using Next.js. The 'createPost' function processes the form data and uses 'redirect' to navigate to the new post immediately after creation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_16

LANGUAGE: TypeScript
CODE:
```
'use server'
import { redirect } from 'next/navigation'

export async function createPost(formData: FormData) {
  // Create a new post
  // ...

  // Redirect to the new post
  redirect(`/posts/${data.id}`)
}
```

----------------------------------------

TITLE: Creating Server Functions with 'use server' Directive in TypeScript
DESCRIPTION: Defines asynchronous Server Functions for creating and deleting posts using the 'use server' directive within individual functions. Each function receives FormData and extracts relevant information for data operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export async function createPost(formData: FormData) {
  'use server'
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}

export async function deletePost(formData: FormData) {
  'use server'
  const id = formData.get('id')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Setting Basic Metadata Description in Next.js
DESCRIPTION: Define the `description` metadata field in a layout or page file. This string value is used to generate the standard HTML `<meta name="description">` tag, providing a summary of the page content for search engines and social media.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_9

LANGUAGE: JSX
CODE:
```
export const metadata = {
  description: 'The React Framework for the Web',
}
```

LANGUAGE: HTML
CODE:
```
<meta name="description" content="The React Framework for the Web" />
```

----------------------------------------

TITLE: Wrapping Third-Party Components as Client Components
DESCRIPTION: Example showing how to wrap a third-party component that uses client-side features in a custom Client Component to make it usable in Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
'use client'

import { Carousel } from 'acme-carousel'

export default Carousel
```

LANGUAGE: javascript
CODE:
```
'use client'

import { Carousel } from 'acme-carousel'

export default Carousel
```

----------------------------------------

TITLE: Defining Static Metadata with Next.js
DESCRIPTION: Export a static `metadata` object from a `layout.js` or static `page.js` file to define unchanging metadata like title and description. This is the simplest way to set basic metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: '...',
  description: '...',
};

export default function Page() {};
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: '...',
  description: '...',
};

export default function Page() {};
```

----------------------------------------

TITLE: Running Next.js CLI Commands - Bash
DESCRIPTION: This snippet shows the standard command structure for interacting with the Next.js command-line interface using `npx`. It illustrates how to specify a command and pass options to control the CLI's behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx next [command] [options]
```

----------------------------------------

TITLE: Creating Server Functions with 'use server' Directive in JavaScript
DESCRIPTION: JavaScript version of Server Functions for creating and deleting posts using the 'use server' directive within individual functions. Each function extracts data from FormData for backend operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export async function createPost(formData) {
  'use server'
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}

export async function deletePost(formData) {
  'use server'
  const id = formData.get('id')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Processing FormData in Server Functions with TypeScript
DESCRIPTION: Shows how to process FormData in a TypeScript Server Function. This example extracts title and content fields from the FormData object for database operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
'use server'

export async function createPost(formData: FormData) {
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Nesting Submit Button Using useFormStatus (JavaScript)
DESCRIPTION: Demonstrates how to integrate a `SubmitButton` component (which uses `useFormStatus` internally) within a form element that uses a Server Action. By nesting the button, it automatically gains access to the form's submission status to manage its disabled state.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_18

LANGUAGE: JavaScript
CODE:
```
import { SubmitButton } from './button'
import { createUser } from '@/app/actions'

export function Signup() {
  return (
    <form action={createUser}>
      {/* Other form elements */}
      <SubmitButton />
    </form>
  )
}
```

----------------------------------------

TITLE: Setting Strict-Transport-Security Header - JavaScript
DESCRIPTION: This snippet demonstrates how to add the `Strict-Transport-Security` header to your Next.js headers configuration. Setting `max-age`, `includeSubDomains`, and `preload` enforces that the browser should only access the site and its subdomains using HTTPS for a specified duration (2 years in this example), enhancing security against man-in-the-middle attacks.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_15

LANGUAGE: js
CODE:
```
{
  key: 'Strict-Transport-Security',
  value: 'max-age=63072000; includeSubDomains; preload'
}
```

----------------------------------------

TITLE: Extending Jest with custom matchers (TypeScript)
DESCRIPTION: This TypeScript snippet configures Jest to use custom matchers from `@testing-library/jest-dom`. It specifies a setup file (`jest.setup.ts`) that will be run before each test, allowing you to use custom matchers like `.toBeInTheDocument()` in your tests. This improves test readability and makes it easier to assert specific conditions on DOM elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
setupFilesAfterEnv: ['<rootDir>/jest.setup.ts']
```

----------------------------------------

TITLE: Layout with Dynamic Route Parameters (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to access dynamic route parameters within a layout component using the `params` prop. It utilizes `async/await` to resolve the promise containing the parameters, and extracts the `team` parameter for use within the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
export default async function Layout({ params }) {
  const { team } = await params
}
```

----------------------------------------

TITLE: Configuring Fetch Revalidation in App Router (JSX)
DESCRIPTION: Shows how to configure revalidation for specific `fetch` requests using the `next.revalidate` option in the `app` directory. This sets a cache duration (60 seconds) for the fetched data, enabling Incremental Static Regeneration behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_27

LANGUAGE: jsx
CODE:
```
// `app` directory

async function getPosts() {
  const res = await fetch(`https://.../posts`, { next: { revalidate: 60 } })
  const data = await res.json()

  return data.posts
}

export default async function PostList() {
  const posts = await getPosts()

  return posts.map((post) => <div>{post.name}</div>)
}
```

----------------------------------------

TITLE: Implementing Optimistic UI Updates with useOptimistic (JavaScript)
DESCRIPTION: Illustrates using the `useOptimistic` hook to provide instant UI feedback before a Server Action completes. It creates an optimistic state that immediately reflects the user's intended action, while the background action performs the actual data mutation. The UI renders the optimistic state until the action finishes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_20

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useOptimistic } from 'react'
import { send } from './actions'

export function Thread({ messages }) {
  const [optimisticMessages, addOptimisticMessage] = useOptimistic(
    messages,
    (state, newMessage) => [...state, { message: newMessage }]
  )

  const formAction = async (formData) => {
    const message = formData.get('message')
    addOptimisticMessage(message)
    await send(message)
  }

  return (
    <div>
      {optimisticMessages.map((m) => (
        <div>{m.message}</div>
      ))}
      <form action={formAction}>
        <input type="text" name="message" />
        <button type="submit">Send</button>
      </form>
    </div>
  )
}
```

----------------------------------------

TITLE: Upgrading Next.js Core Dependencies - Bash
DESCRIPTION: Use this command to update the core Next.js, React, and React DOM packages to their latest versions using npm. This is a necessary first step when preparing to migrate to newer Next.js versions and the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install next@latest react@latest react-dom@latest
```

----------------------------------------

TITLE: RootLayout Component with Metadata (Initial) - JSX
DESCRIPTION: This code defines the RootLayout component in a Next.js application using JavaScript (JSX). It sets the basic HTML structure, includes metadata such as title and description, and renders the children components. The `link` tag for the favicon is included.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head>
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Disabling Data Caching for fetch (JavaScript)
DESCRIPTION: This snippet shows how to prevent Next.js from caching the response of a specific `fetch` request. By setting the `cache` option to `'no-store'`, the data will be fetched directly from the external data source on every incoming request to the server, bypassing the Data Cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
let data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })
```

----------------------------------------

TITLE: Generating Static Params from Fetch Data Next.js TSX/JSX
DESCRIPTION: Defines the `generateStaticParams` function to fetch data (like blog posts) and return an array of objects, where each object contains the parameters (e.g., `slug`) needed to populate a dynamic route segment. It also shows the corresponding Page component that receives these generated parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  // ...
```

LANGUAGE: jsx
CODE:
```
// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default async function Page({ params }) {
  const { slug } = await params
  // ...
```

----------------------------------------

TITLE: Running Next.js in Development Mode (Bash)
DESCRIPTION: This code shows the commands to install dependencies and start the Next.js application in development mode. It shows how to use either npm or yarn to install dependencies and start the development server.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev

# or

yarn install
yarn dev
```

----------------------------------------

TITLE: Migrating Authentication Middleware (After)
DESCRIPTION: Updated middleware implementation for authentication using redirects instead of direct responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  const loginUrl = new URL('/login', request.url)
  loginUrl.searchParams.set('from', request.nextUrl.pathname)

  return NextResponse.redirect(loginUrl)
}
```

----------------------------------------

TITLE: Setting Metadata Title Template in Next.js Layout
DESCRIPTION: Configure a title template in a layout file (`layout.js` or `layout.tsx`) using the `metadata.title.template` property. This template is used by child segments that do not define their own title, augmenting their title with the specified format.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_7

LANGUAGE: TSX
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: {
    template: '%s | Acme',
  },
}
```

LANGUAGE: JSX
CODE:
```
export const metadata = {
  title: {
    template: '%s | Acme',
  },
}
```

----------------------------------------

TITLE: Mutations with Server Actions (typescript)
DESCRIPTION: This snippet demonstrates how to use the `forbidden` function to protect mutations in a Server Action based on user roles. It verifies the user's session, checks if they have the 'admin' role, and calls `forbidden()` if they don't, preventing unauthorized data updates. It assumes that `verifySession` retrieves the user's session and role information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateRole(formData: FormData) {
  const session = await verifySession()

  // Ensure only admins can update roles
  if (session.role !== 'admin') {
    forbidden()
  }

  // Perform the role update for authorized users
  // ...
}
```

----------------------------------------

TITLE: Create App Router Home Page (App Router)
DESCRIPTION: Defines the home page component (`app/page.tsx` or `app/page.js`) for applications using the App Router. This component is rendered at the root route (`/`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Defining a Server Action in Next.js (JavaScript)
DESCRIPTION: This snippet defines a simple Server Action in Next.js using JavaScript. The `'use server'` directive indicates that the function should be executed on the server. This allows you to perform server-side operations directly from client components without creating separate API routes. The defined create function is an example, that doesn't have any implementation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_14

LANGUAGE: javascript
CODE:
```
'use server'

export async function create() {}
```

----------------------------------------

TITLE: Fetching Data with fetch and Cache Options in App Directory (TSX/JSX)
DESCRIPTION: Illustrates different data fetching patterns using the native `fetch` API within an App Router Server Component. Shows how to achieve static data caching (`force-cache`), dynamic data fetching (`no-store`), and revalidation (`revalidate: 10`) analogous to `getStaticProps` and `getServerSideProps` in the pages directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
export default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}
```

----------------------------------------

TITLE: Push Notification Manager Component - TypeScript
DESCRIPTION: This React component manages push notification subscriptions. It checks for service worker and PushManager support, registers a service worker, handles subscribing and unsubscribing, and sends test notifications.  It uses React's useState and useEffect hooks to manage the component's state and side effects. It also utilizes server actions to handle the actual subscribing, unsubscribing, and notification sending logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
function PushNotificationManager() {
  const [isSupported, setIsSupported] = useState(false)
  const [subscription, setSubscription] = useState<PushSubscription | null>(
    null
  )
  const [message, setMessage] = useState('')

  useEffect(() => {
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      setIsSupported(true)
      registerServiceWorker()
    }
  }, [])

  async function registerServiceWorker() {
    const registration = await navigator.serviceWorker.register('/sw.js', {
      scope: '/',
      updateViaCache: 'none',
    })
    const sub = await registration.pushManager.getSubscription()
    setSubscription(sub)
  }

  async function subscribeToPush() {
    const registration = await navigator.serviceWorker.ready
    const sub = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: urlBase64ToUint8Array(
        process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!
      ),
    })
    setSubscription(sub)
    const serializedSub = JSON.parse(JSON.stringify(sub))
    await subscribeUser(serializedSub)
  }

  async function unsubscribeFromPush() {
    await subscription?.unsubscribe()
    setSubscription(null)
    await unsubscribeUser()
  }

  async function sendTestNotification() {
    if (subscription) {
      await sendNotification(message)
      setMessage('')
    }
  }

  if (!isSupported) {
    return <p>Push notifications are not supported in this browser.</p>
  }

  return (
    <div>
      <h3>Push Notifications</h3>
      {subscription ? (
        <>
          <p>You are subscribed to push notifications.</p>
          <button onClick={unsubscribeFromPush}>Unsubscribe</button>
          <input
            type="text"
            placeholder="Enter notification message"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
          />
          <button onClick={sendTestNotification}>Send Test</button>
        </>
      ) : (
        <>
          <p>You are not subscribed to push notifications.</p>
          <button onClick={subscribeToPush}>Subscribe</button>
        </>
      )}
    </div>
  )
}
```

----------------------------------------

TITLE: React Component Transition from Synchronous to Asynchronous using JavaScript
DESCRIPTION: This snippet illustrates how a React component in JavaScript transitions from synchronous data handling to using React's `use` function for asynchronous data fetching. The component fetches params and searchParams asynchronously to streamline state management and rendering flows.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
// Before\nexport default function Page({ params, searchParams }) {\n  const { slug } = params\n  const { query } = searchParams\n}\n\n// After\nimport { use } from \"react\"\n\nexport default function Page(props) {\n  const params = use(props.params)\n  const searchParams = use(props.searchParams)\n  const slug = params.slug\n  const query = searchParams.query\n}
```

----------------------------------------

TITLE: Generating Static Params for Catch-all Segment Next.js TSX/JSX
DESCRIPTION: Explains how to use `generateStaticParams` with a catch-all dynamic segment (`[...slug]`). The function returns an array of objects where the parameter value for the catch-all segment is an array of strings representing the path segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export function generateStaticParams() {
  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /product/a/1
// - /product/b/2
// - /product/c/3
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string[] }>
}) {
  const { slug } = await params
  // ...
```

LANGUAGE: jsx
CODE:
```
export function generateStaticParams() {
  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /product/a/1
// - /product/b/2
// - /product/c/3
export default async function Page({ params }) {
  const { slug } = await params
  // ...
```

----------------------------------------

TITLE: Generating Static Params and Fetching Data in App Router (JSX)
DESCRIPTION: Demonstrates using `generateStaticParams` in the `app` directory to define route segments for static generation. The page component or a dedicated data fetching function uses the `params` object to fetch data specific to the route segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_23

LANGUAGE: jsx
CODE:
```
// `app` directory
import PostLayout from '@/components/post-layout'

export async function generateStaticParams() {
  return [{ id: '1' }, { id: '2' }]
}

async function getPost(params) {
  const res = await fetch(`https://.../posts/${(await params).id}`)
  const post = await res.json()

  return post
}

export default async function Post({ params }) {
  const post = await getPost(params)

  return <PostLayout post={post} />
}
```

----------------------------------------

TITLE: Linking to Dynamic Routes with Next.js Link
DESCRIPTION: These snippets demonstrate how to generate links for dynamic route segments using template literals within the `href` prop. It shows examples for both the Pages Router (`pages/blog/[slug].js`) and App Router (`app/blog/[slug]/page.js`) conventions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_12

LANGUAGE: TSX
CODE:
```
import Link from 'next/link'

function Posts({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

LANGUAGE: JSX
CODE:
```
import Link from 'next/link'

function Posts({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}

export default Posts
```

LANGUAGE: TSX
CODE:
```
import Link from 'next/link'

export default function Page({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

LANGUAGE: JSX
CODE:
```
import Link from 'next/link'

export default function Page({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Caching Entire Route Layout (TSX)
DESCRIPTION: Applies the `'use cache'` directive at the top of a Next.js App Router `layout.tsx` file. This marks the layout segment for prerendering and contributes to caching the entire route when combined with a cached page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_5

LANGUAGE: TSX
CODE:
```
'use cache'

export default function Layout({ children }: { children: ReactNode }) {
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Extending Page Extensions with MDX (App Router)
DESCRIPTION: This code snippet demonstrates how to extend the default page extensions in Next.js to include `.md` and `.mdx` files using the `@next/mdx` plugin, specifically tailored for the App Router. It requires the `@next/mdx` package to be installed. The `withMDX` function wraps the `nextConfig` object to enable MDX support.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/pageExtensions.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
const withMDX = require('@next/mdx')()

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],
}

module.exports = withMDX(nextConfig)
```

----------------------------------------

TITLE: Defining Inline Server Action in Server Component (TSX/JSX)
DESCRIPTION: Demonstrates how to define an asynchronous Server Action directly within a Server Component function by placing the 'use server' directive at the top of the function body. This approach is suitable for actions specific to that component, typically used for data mutations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Page() {
  // Server Action
  async function create() {
    'use server'
    // Mutate data
  }

  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  // Server Action
  async function create() {
    'use server'
    // Mutate data
  }

  return '...'
}
```

----------------------------------------

TITLE: Demonstrating Request Memoization with Fetch API (TSX/JS)
DESCRIPTION: Shows how Next.js automatically memoizes `fetch` requests with the same URL and options within a single React render pass. Calling `getItem()` multiple times results in only one actual network fetch. This optimizes performance by preventing duplicate data requests in the component tree during rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
async function getItem() {
  // The `fetch` function is automatically memoized and the result
  // is cached
  const res = await fetch('https://.../item/1')
  return res.json()
}

// This function is called twice, but only executed the first time
const item = await getItem() // cache MISS

// The second call could be anywhere in your route
const item = await getItem() // cache HIT
```

LANGUAGE: JavaScript
CODE:
```
async function getItem() {
  // The `fetch` function is automatically memoized and the result
  // is cached
  const res = await fetch('https://.../item/1')
  return res.json()
}

// This function is called twice, but only executed the first time
const item = await getItem() // cache MISS

// The second call could be anywhere in your route
const item = await getItem() // cache HIT
```

----------------------------------------

TITLE: Initializing Root Layout Component (TSX)
DESCRIPTION: This code initializes the root layout component in a Next.js application using TypeScript. It defines a functional component `RootLayout` that accepts `children` as a prop, which represents the content of the application's pages. The component returns a basic structure with placeholder content. This is the starting point for defining the overall structure of your Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return '...'
}
```

----------------------------------------

TITLE: Configuring Next.js Build and Start Scripts in package.json (JSON)
DESCRIPTION: This JSON snippet shows the standard npm scripts required in the package.json file for deploying a Next.js application as a Node.js server. The `build` script compiles the application, and the `start` script runs the production server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-deploying.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}
```

----------------------------------------

TITLE: Using Wildcard Path Matching in Next.js Rewrites (JavaScript)
DESCRIPTION: This snippet demonstrates wildcard path matching using `:slug*` in the `source`, which matches any path segments following `/blog/`. The collected segments are assigned to the `slug` parameter and can be used in the `destination` path to route requests like `/blog/a/b/c` to `/news/a/b/c`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/blog/:slug*',
        destination: '/news/:slug*', // Matched parameters can be used in the destination
      },
    ]
  },
}
```

----------------------------------------

TITLE: Using beforeInteractive Strategy (App Router, TSX)
DESCRIPTION: This code snippet illustrates how to use the `beforeInteractive` strategy with the `Script` component in a Next.js application using the App Router. It loads a script before any Next.js code is executed and before page hydration. This strategy is suitable for critical scripts needed by the entire site and should be placed inside the root layout (`app/layout.tsx`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        {children}
        <Script
          src="https://example.com/script.js"
          strategy="beforeInteractive"
        />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Generating Sitemaps in TypeScript with Next.js
DESCRIPTION: This TypeScript snippet demonstrates how to use the generateSitemaps function to generate multiple sitemaps based on product ID ranges. The snippet fetches products and returns sitemap data with URLs and last modification dates. Dependencies include a function to fetch product details and a constant for base URL definitions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-sitemaps.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { BASE_URL } from '@/app/lib/constants'

export async function generateSitemaps() {
  // Fetch the total number of products and calculate the number of sitemaps needed
  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]
}

export default async function sitemap({
  id,
}: {
  id: number
}): Promise<MetadataRoute.Sitemap> {
  // Google's limit is 50,000 URLs per sitemap
  const start = id * 50000
  const end = start + 50000
  const products = await getProducts(
    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`
  )
  return products.map((product) => ({
    url: `${BASE_URL}/product/${product.id}`,
    lastModified: product.date,
  }))
}
```

----------------------------------------

TITLE: Calling Server Action from Client Component (TSX/JSX)
DESCRIPTION: Illustrates how to import and invoke a Server Action defined in a separate module from within a Client Component, typically via an event handler like `onClick`. The Server Action must be defined in a file marked with 'use server' at the module level.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}
```

----------------------------------------

TITLE: Implementing Server Actions for Push Notifications - JavaScript
DESCRIPTION: This code defines server actions for subscribing and unsubscribing users, and sending push notifications using the web-push library. It uses environment variables for VAPID keys. In a production environment, the subscription data should be stored in a database.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
'use server';

import webpush from 'web-push';

webpush.setVapidDetails(
  '<mailto:your-email@example.com>',
  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,
  process.env.VAPID_PRIVATE_KEY!
);

let subscription= null;

export async function subscribeUser(sub) {
  subscription = sub;
  // In a production environment, you would want to store the subscription in a database
  // For example: await db.subscriptions.create({ data: sub })
  return { success: true };
}

export async function unsubscribeUser() {
  subscription = null;
  // In a production environment, you would want to remove the subscription from the database
  // For example: await db.subscriptions.delete({ where: { ... } })
  return { success: true };
}

export async function sendNotification(message) {
  if (!subscription) {
    throw new Error('No subscription available');
  }

  try {
    await webpush.sendNotification(
      subscription,
      JSON.stringify({
        title: 'Test Notification',
        body: message,
        icon: '/icon.png',
      })
    );
    return { success: true };
  } catch (error) {
    console.error('Error sending push notification:', error);
    return { success: false, error: 'Failed to send notification' };
  }
}

```

----------------------------------------

TITLE: Invoking Server Functions in Event Handlers with JavaScript
DESCRIPTION: Demonstrates calling a Server Function from an onClick event handler in a JavaScript Client Component. The component updates local state with the value returned from the Server Function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Layout with Client Component Integration (JavaScript)
DESCRIPTION: This JavaScript snippet shows how to integrate a Client Component within a Layout. The Client Component will re-render on navigation allowing access to hooks like `usePathname`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_9

LANGUAGE: jsx
CODE:
```
import { ClientComponent } from '@/app/ui/ClientComponent'

export default function Layout({ children }) {
  return (
    <>
      <ClientComponent />
      {/* Other Layout UI */}
      <main>{children}</main>
    </>
  )
}
```

----------------------------------------

TITLE: Implementing Dynamic Metadata via generateMetadata (TSX/JSX)
DESCRIPTION: Shows how to export an asynchronous `generateMetadata` function to create metadata based on dynamic data. It illustrates accessing route parameters (`params`, `searchParams`), fetching data from an API, and optionally accessing and extending metadata inherited from parent segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import type { Metadata, ResolvingMetadata } from 'next';

type Props = {
  params: Promise<{ id: string }>;
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
};

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  // read route params
  const { id } = await params;

  // fetch data
  const product = await fetch(`https://.../${id}`).then((res) => res.json());

  // optionally access and extend (rather than replace) parent metadata
  const previousImages = (await parent).openGraph?.images || [];

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  };
}

export default function Page({ params, searchParams }: Props) {}
```

LANGUAGE: jsx
CODE:
```
export async function generateMetadata({ params, searchParams }, parent) {
  // read route params
  const { id } = await params;

  // fetch data
  const product = await fetch(`https://.../${id}`).then((res) => res.json());

  // optionally access and extend (rather than replace) parent metadata
  const previousImages = (await parent).openGraph?.images || [];

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  };
}

export default function Page({ params, searchParams }) {}
```

----------------------------------------

TITLE: Redirect in Next.js Server Component (TypeScript)
DESCRIPTION: This example demonstrates how to use the `redirect` function within a Next.js Server Component written in TypeScript. It fetches team data and redirects to the login page if the data is not found. The `redirect` function terminates the rendering of the route segment by throwing a `NEXT_REDIRECT` error.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { redirect } from 'next/navigation'

async function fetchTeam(id: string) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({
  params,
}: {  params: Promise<{ id: string }>}) {
  const { id } = await params
  const team = await fetchTeam(id)

  if (!team) {
    redirect('/login')
  }

  // ...
}
```

----------------------------------------

TITLE: Updating Package Dependencies for Next.js
DESCRIPTION: This snippet shows a diff of the package.json file, demonstrating the upgrade of Next.js to version 15.0.4 and React to version 19.0.0. It also includes changes to the TypeScript type definitions for React, ensuring compatibility with the new versions. The use of pnpm for managing package overrides is also depicted.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-codemod/bin/__testfixtures__/next-14-installed/README.md#2025-04-21_snippet_0

LANGUAGE: diff
CODE:
```
diff --git a/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json b/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
index 5ec4c37f0b..131f5b9f4a 100644
--- a/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
+++ b/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
@@ -4,10 +4,16 @@
     "dev": "next dev"
   },
   "dependencies": {
-    "next": "14.3.0-canary.44",
-    "react": "18.2.0",
-    "react-dom": "18.2.0",
-    "@types/react": "^18.2.0",
-    "@types/react-dom": "^18.2.0"
+    "next": "15.0.4-canary.43",
+    "react": "19.0.0",
+    "react-dom": "19.0.0",
+    "@types/react": "19.0.0",
+    "@types/react-dom": "19.0.0"
+  },
+  "pnpm": {
+    "overrides": {
+      "@types/react": "19.0.0",
+      "@types/react-dom": "19.0.0"
+    }
   }
 }
```

----------------------------------------

TITLE: Updated Next.js Middleware Implementation
DESCRIPTION: Shows the current recommended way to implement Middleware in Next.js. This version uses the request parameter directly and returns the NextResponse object instead of using respondWith().
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-new-signature.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  if (request.nextUrl.pathname === '/blocked') {
    return new NextResponse(null, {
      status: 403,
    })
  }
}
```

----------------------------------------

TITLE: Invalid `href` Interpolation with Next.js Link
DESCRIPTION: This code snippet demonstrates an invalid `href` interpolation using the `next/link` component in Next.js.  The `href` property is an object with a `pathname` that defines dynamic route parameters `/blog/[post]/[comment]`, but the `query` only provides a value for `post`, causing the interpolation to fail. This highlights the need to supply all necessary dynamic route params.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/href-interpolation-failed.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function BlogLink() {
  return (
    <Link
      href={{
        pathname: '/blog/[post]/[comment]',
        query: { post: 'post-1' },
      }}
    >
      <a>Invalid link</a>
    </Link>
  )
}
```

----------------------------------------

TITLE: Implementing Middleware in Next.js with TypeScript
DESCRIPTION: This snippet demonstrates the correct way to import and use next/server in a middleware.ts file. It shows how to define a middleware function that takes NextRequest and NextFetchEvent as parameters and returns a Response.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-server-import-in-page.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextFetchEvent, NextRequest } from 'next/server'

export function middleware(req: NextRequest, ev: NextFetchEvent) {
  return new Response('Hello, world!')
}
```

----------------------------------------

TITLE: Fetch User in Layout (Next.js) - JSX
DESCRIPTION: This Next.js Layout component demonstrates calling `getUser()` from the DAL to fetch user data. Since `getUser` internally includes the session verification, this pattern ensures the authentication check is performed when the layout fetches data, rather than performing the auth check directly in the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_31

LANGUAGE: JSX
CODE:
```
import { getUser } from "@/app/lib/dal";

export default async function Layout({ children }) {
  const user = await getUser();

  return (
    // ...
    <main>{children}</main>
    // ...
  );
}
```

----------------------------------------

TITLE: Configuring Fetch Cache in Next.js (TS)
DESCRIPTION: Shows the syntax for using the `cache` option with the Next.js extended `fetch` function to explicitly control how the request interacts with the framework's Data Cache, specifying behaviors like `force-cache` or `no-store`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
fetch(`https://...`, { cache: 'force-cache' | 'no-store' })
```

----------------------------------------

TITLE: Generating Dynamic Metadata with generateMetadata Function
DESCRIPTION: Use the `generateMetadata` asynchronous function to fetch data or use dynamic route parameters to generate metadata. This is useful for pages where metadata depends on external data or the specific route path (e.g., product details pages). It's only supported in Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import type { Metadata, ResolvingMetadata } from 'next';

type Props = {
  params: Promise<{ id: string }>;
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
};

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  // read route params
  const { id } = await params;

  // fetch data
  const product = await fetch(`https://.../${id}`).then((res) => res.json());

  // optionally access and extend (rather than replace) parent metadata
  const previousImages = (await parent).openGraph?.images || [];

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  };
}

export default function Page({ params, searchParams }: Props) {};
```

LANGUAGE: jsx
CODE:
```
export async function generateMetadata({ params, searchParams }, parent) {
  // read route params
  const { id } = await params;

  // fetch data
  const product = await fetch(`https://.../${id}`).then((res) => res.json());

  // optionally access and extend (rather than replace) parent metadata
  const previousImages = (await parent).openGraph?.images || [];

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  };
}

export default function Page({ params, searchParams }) {};
```

----------------------------------------

TITLE: Using Wrapped Client Components in Server Components
DESCRIPTION: Example showing how to use a properly wrapped third-party component within a Server Component after it has been marked as a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import Carousel from './carousel'

export default function Page() {
  return (
    <div>
      <p>View pictures</p>

      {/*  Works, since Carousel is a Client Component */}
      <Carousel />
    </div>
  )
}
```

LANGUAGE: javascript
CODE:
```
import Carousel from './carousel'

export default function Page() {
  return (
    <div>
      <p>View pictures</p>

      {/*  Works, since Carousel is a Client Component */}
      <Carousel />
    </div>
  )
}
```

----------------------------------------

TITLE: Importing and Using Roboto Font with Weight Specification (App Router)
DESCRIPTION: This code snippet demonstrates how to import the Roboto font from `next/font/google` and apply it to the root layout component in a Next.js application using the app router. It specifies the font weight since it's not a variable font and assigns it to the `className` of the `html` element.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={roboto.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Implementing HTTP Methods in Next.js Route Handlers
DESCRIPTION: Shows how to implement all supported HTTP methods (GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS) in a Next.js route handler. Each method receives a Request object parameter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export async function GET(request: Request) {}

export async function HEAD(request: Request) {}

export async function POST(request: Request) {}

export async function PUT(request: Request) {}

export async function DELETE(request: Request) {}

export async function PATCH(request: Request) {}

// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.
export async function OPTIONS(request: Request) {}
```

LANGUAGE: javascript
CODE:
```
export async function GET(request) {}

export async function HEAD(request) {}

export async function POST(request) {}

export async function PUT(request) {}

export async function DELETE(request) {}

export async function PATCH(request) {}

// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.
export async function OPTIONS(request) {}
```

----------------------------------------

TITLE: Fetching Data for Static Page in App Router (JSX)
DESCRIPTION: Shows how data fetching is handled in the `app` directory using the standard `fetch()` API. By default, `fetch` calls are cached (`cache: 'force-cache'`), providing static data fetching behavior similar to `getStaticProps` in the Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_21

LANGUAGE: jsx
CODE:
```
// `app` directory

// This function can be named anything
async function getProjects() {
  const res = await fetch(`https://...`)
  const projects = await res.json()

  return projects
}

export default async function Index() {
  const projects = await getProjects()

  return projects.map((project) => <div>{project.name}</div>)
}
```

----------------------------------------

TITLE: Authenticated Data Fetching with Route Handlers (JavaScript)
DESCRIPTION: The JavaScript version implements secure data fetching by ensuring authenticated access using route handlers. Verification of user sessions is critical, with unauthorized function calls for failed authentication, enforcing endpoint security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_9

LANGUAGE: JavaScript
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export async function GET() {
  const session = await verifySession()

  // If the user is not authenticated, return a 401 and render unauthorized.tsx
  if (!session) {
    unauthorized()
  }

  // Fetch data
  // ...
}
```

----------------------------------------

TITLE: Using Local Images with Next.js Image Component
DESCRIPTION: Shows how to use locally stored images with the Next.js Image component. This example demonstrates automatic width and height detection for local images.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'
import profilePic from './me.png'

export default function Page() {
  return (
    <Image
      src={profilePic}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'
import profilePic from './me.png'

export default function Page() {
  return (
    <Image
      src={profilePic}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}
```

----------------------------------------

TITLE: Implementing Optimistic Authorization Middleware in Next.js
DESCRIPTION: This Next.js Middleware function demonstrates optimistic authorization checks based on the presence and content of a session cookie. It defines lists of protected and public routes, attempts to decrypt the session data from the request's cookie, and conditionally redirects users: unauthenticated users accessing protected routes are sent to the login page, and authenticated users accessing public routes (except dashboard) are sent to the dashboard.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_21

LANGUAGE: tsx
CODE:
```
import { NextRequest, NextResponse } from 'next/server'
import { decrypt } from '@/app/lib/session'
import { cookies } from 'next/headers'

// 1. Specify protected and public routes
const protectedRoutes = ['/dashboard']
const publicRoutes = ['/login', '/signup', '/']

export default async function middleware(req: NextRequest) {
  // 2. Check if the current route is protected or public
  const path = req.nextUrl.pathname
  const isProtectedRoute = protectedRoutes.includes(path)
  const isPublicRoute = publicRoutes.includes(path)

  // 3. Decrypt the session from the cookie
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  // 4. Redirect to /login if the user is not authenticated
  if (isProtectedRoute && !session?.userId) {
    return NextResponse.redirect(new URL('/login', req.nextUrl))
  }

  // 5. Redirect to /dashboard if the user is authenticated
  if (
    isPublicRoute &&
    session?.userId &&
    !req.nextUrl.pathname.startsWith('/dashboard')
  ) {
    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))
  }

  return NextResponse.next()
}

// Routes Middleware should not run on
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|.*\.png$).*)'],
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'
import { decrypt } from '@/app/lib/session'
import { cookies } from 'next/headers'

// 1. Specify protected and public routes
const protectedRoutes = ['/dashboard']
const publicRoutes = ['/login', '/signup', '/']

export default async function middleware(req) {
  // 2. Check if the current route is protected or public
  const path = req.nextUrl.pathname
  const isProtectedRoute = protectedRoutes.includes(path)
  const isPublicRoute = publicRoutes.includes(path)

  // 3. Decrypt the session from the cookie
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  // 5. Redirect to /login if the user is not authenticated
  if (isProtectedRoute && !session?.userId) {
    return NextResponse.redirect(new URL('/login', req.nextUrl))
  }

  // 6. Redirect to /dashboard if the user is authenticated
  if (
    isPublicRoute &&
    session?.userId &&
    !req.nextUrl.pathname.startsWith('/dashboard')
  ) {
    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))
  }

  return NextResponse.next()
}

// Routes Middleware should not run on
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|.*\.png$).*)'],
}
```

----------------------------------------

TITLE: Using React Server/Client Directives
DESCRIPTION: Example of React directives for defining server and client boundaries in Next.js applications. The 'use client' directive marks code for client-side execution, while 'use server' specifies server-side computation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/index.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
"use client"
"use server"
```

----------------------------------------

TITLE: Creating Font Utility Functions
DESCRIPTION: This code snippet demonstrates creating utility functions to export font imports.  This allows for importing and applying the font's `className` where needed, ensuring preloading only when rendered. This example imports `Inter` and `Roboto_Mono` fonts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_12

LANGUAGE: ts
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

export const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
})
```

----------------------------------------

TITLE: Correctly Exporting getStaticProps in Next.js
DESCRIPTION: This code snippet demonstrates the correct way to export `getStaticProps` in a Next.js page.  `getStaticProps` is exported as a separate named export alongside the default export of the page component. This allows Next.js to correctly identify and execute the function during the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/gssp-component-member.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
function Page(props) {
  return <p>hello world</p>
}

export default Page

export const getStaticProps = () => ({
  props: {
    hello: 'world',
  },
})
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: This code snippet demonstrates how to start the Next.js development server using npm, yarn, pnpm, or bun. The development server allows for real-time updates as you modify the application's code.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-empty/js/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Creating Root Layout with HTML Structure (TSX)
DESCRIPTION: This code snippet demonstrates how to create a root layout component in Next.js (TSX) by incorporating the basic HTML structure from an `index.html` file. It includes the `<html>`, `<head>`, and `<body>` tags, and places the `children` prop within a `div` with the id 'root'. This sets up the foundational HTML structure for all pages within the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/svg+xml" href="/icon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>My App</title>
        <meta name="description" content="My App is a..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Tagging Fetch Calls for Revalidation - Next.js App Router
DESCRIPTION: Demonstrates how to tag data fetched using the native `fetch` API within a Server Component in the App Router. Adding a `tags` array to the `next` option allows for granular on-demand revalidation using the `revalidateTag` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog', {
    next: { tags: ['posts'] },
  })
  const posts = await data.json()
  // ...
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog', {
    next: { tags: ['posts'] },
  })
  const posts = await data.json()
  // ...
}
```

----------------------------------------

TITLE: Setting Metadata Base URL in Next.js
DESCRIPTION: Use `metadataBase` to set a base URL for all relative URL-based metadata fields within the current and child segments. This simplifies configuring absolute URLs for fields like canonical links, language alternatives, and Open Graph images.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
export const metadata = {
  metadataBase: new URL('https://acme.com'),
  alternates: {
    canonical: '/',
    languages: {
      'en-US': '/en-US',
      'de-DE': '/de-DE',
    },
  },
  openGraph: {
    images: '/og-image.png',
  },
}
```

LANGUAGE: HTML
CODE:
```
<link rel="canonical" href="https://acme.com" />
<link rel="alternate" hreflang="en-US" href="https://acme.com/en-US" />
<link rel="alternate" hreflang="de-DE" href="https://acme.com/de-DE" />
<meta property="og:image" content="https://acme.com/og-image.png" />
```

LANGUAGE: TSX
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  metadataBase: new URL('https://acme.com'),
}
```

LANGUAGE: JSX
CODE:
```
export const metadata = {
  metadataBase: new URL('https://acme.com'),
}
```

----------------------------------------

TITLE: Inline Server Functions in Server Components with JavaScript
DESCRIPTION: Shows how to create an inline Server Function directly within a Server Component in JavaScript. The function is marked with the 'use server' directive at the top of the function body.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
export default function Page() {
  // Server Action
  async function createPost(formData: FormData) {
    'use server'
    // ...
  }

  return <></>
}
```

----------------------------------------

TITLE: Implementing ISR Dynamic Route App Router JSX
DESCRIPTION: Configures a dynamic route segment in Next.js App Router for ISR using JavaScript. It sets `revalidate` to 60 seconds for time-based cache invalidation, defines `generateStaticParams` to pre-render specific paths at build time, and uses `dynamicParams = true` to handle unknown paths on-demand. The `Page` component fetches data for the specific ID and renders the content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
// Next.js will invalidate the cache when a
// request comes in, at most once every 60 seconds.
export const revalidate = 60

// We'll prerender only the params from `generateStaticParams` at build time.
// If a request comes in for a path that hasn't been generated,
// Next.js will server-render the page on-demand.
export const dynamicParams = true // or false, to 404 on unknown paths

export async function generateStaticParams() {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  return posts.map((post) => ({
    id: String(post.id),
  }))
}

export default async function Page({ params }) {
  const { id } = await params
  const post = await fetch(`https://api.vercel.app/blog/${id}`).then((res) =>
    res.json()
  )
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Layout Component with Parallel Routes
DESCRIPTION: Configures the main layout to render parallel routes (auth slot) alongside main content, enabling modal integration
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_11

LANGUAGE: tsx
CODE:
```
import Link from 'next\/link'

export default function Layout({
  auth,
  children,
}: {
  auth: React.ReactNode
  children: React.ReactNode
}) {
  return (
    <>
      <nav>
        <Link href="\/login">Open modal<\/Link>
      <\/nav>
      <div>{auth}<\/div>
      <div>{children}<\/div>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next\/link'

export default function Layout({ auth, children }) {
  return (
    <>
      <nav>
        <Link href="\/login">Open modal<\/Link>
      <\/nav>
      <div>{auth}<\/div>
      <div>{children}<\/div>
    </>
  )
}
```

----------------------------------------

TITLE: Implementing Optimistic UI Updates with useOptimistic (TSX)
DESCRIPTION: Illustrates using the `useOptimistic` hook to provide instant UI feedback before a Server Action completes. It creates an optimistic state that immediately reflects the user's intended action, while the background action performs the actual data mutation. The UI renders the optimistic state until the action finishes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_19

LANGUAGE: TSX
CODE:
```
'use client'

import { useOptimistic } from 'react'
import { send } from './actions'

type Message = {
  message: string
}

export function Thread({ messages }: { messages: Message[] }) {
  const [optimisticMessages, addOptimisticMessage] = useOptimistic<
    Message[],
    string
  >(messages, (state, newMessage) => [...state, { message: newMessage }])

  const formAction = async (formData: FormData) => {
    const message = formData.get('message') as string
    addOptimisticMessage(message)
    await send(message)
  }

  return (
    <div>
      {optimisticMessages.map((m, i) => (
        <div key={i}>{m.message}</div>
      ))}
      <form action={formAction}>
        <input type="text" name="message" />
        <button type="submit">Send</button>
      </form>
    </div>
  )
}
```

----------------------------------------

TITLE: Installing TypeScript Dependency (pnpm)
DESCRIPTION: This command installs TypeScript as a development dependency using pnpm. It is essential for adding TypeScript support to a project. The `--save-dev` flag ensures it's added to `devDependencies` in `package.json`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_5

LANGUAGE: shell
CODE:
```
pnpm install --save-dev typescript
```

----------------------------------------

TITLE: Server-Side Form Validation with Zod (TypeScript)
DESCRIPTION: Shows a Next.js Server Action (`'use server'`) that performs server-side validation of form data using the Zod library. It defines a Zod schema, parses the incoming `FormData`, and returns validation errors if the data is invalid. Requires the Zod library to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
'use server'

import { z } from 'zod'

const schema = z.object({
  email: z.string({
    invalid_type_error: 'Invalid Email',
  }),
})

export default async function createUser(formData: FormData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })

  // Return early if the form data is invalid
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Mutate data
}
```

----------------------------------------

TITLE: Installing Next.js Stable Version
DESCRIPTION: Command to install the stable release of Next.js, which is the default version used by most Next.js users.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/release-channels-publishing.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm install next
```

----------------------------------------

TITLE: Configuring Fetch Cache in Next.js JS
DESCRIPTION: This snippet shows how to set the `fetchCache` option in a JavaScript file for a Next.js route segment. It overrides the default `fetch` caching behavior and accepts various string values to control static vs. dynamic fetching based on the provided options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_5

LANGUAGE: js
CODE:
```
export const fetchCache = 'auto'
// 'auto' | 'default-cache' | 'only-cache'
// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'
```

----------------------------------------

TITLE: Accessing Cookies in generateViewport With Suspense (Next.js JSX)
DESCRIPTION: This snippet shows one way to fix the error when `generateViewport` must access dynamic Request data. By wrapping the main content (`children`) in a `<Suspense>` boundary in the root layout, you explicitly indicate that the route should be rendered dynamically, allowing access to request-specific data within `generateViewport`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-viewport.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import { cookies } from 'next/headers'

export async function generateViewport() {
  const cookieJar = await cookies()
  return {
    themeColor: cookieJar.get('theme-color'),
  }
}

export default function RootLayout({ children }) {
  return (
    <Suspense>
      <html>
        <body>{children}</body>
      </html>
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Time-based Revalidation Static Route App Router TSX
DESCRIPTION: Configures time-based ISR for a static route segment in Next.js App Router. It sets the `revalidate` export to 3600 seconds (1 hour) to invalidate the cache periodically. The `Page` component fetches a list of blog posts and renders them.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
interface Post {
  id: string
  title: string
  content: string
}

export const revalidate = 3600 // invalidate every hour

export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts: Post[] = await data.json()
  return (
    <main>
      <h1>Blog Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </main>
  )
}
```

----------------------------------------

TITLE: Server-Side Data Fetching Example
DESCRIPTION: Recommended approach using server-side data fetching in a Server Component to fetch and render blog posts.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Configure Dynamic Rendering Behavior in Next.js (TS/JS)
DESCRIPTION: Configure the rendering behavior of a layout, page, or route handler by exporting the `dynamic` string variable. This controls whether the segment is fully static or dynamic, influencing data fetching and API usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export const dynamic = 'auto'
// 'auto' | 'force-dynamic' | 'error' | 'force-static'
```

LANGUAGE: JavaScript
CODE:
```
export const dynamic = 'auto'
// 'auto' | 'force-dynamic' | 'error' | 'force-static'
```

----------------------------------------

TITLE: Using forbidden in Server Component (jsx)
DESCRIPTION: This snippet demonstrates how to use the `forbidden` function within a Server Component to protect a route based on user roles. It imports `verifySession` and `forbidden`, verifies the user's session, checks if the user has the 'admin' role, and calls `forbidden()` if the user does not have the required role, rendering a 403 error page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return <></>
}
```

----------------------------------------

TITLE: Adding Tags to fetch Cache (Next.js)
DESCRIPTION: Illustrates how to assign one or more tags to a fetch cache entry using the `next.tags` option, enabling fine-grained revalidation later via `revalidateTag`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_7

LANGUAGE: JSX
CODE:
```
fetch(`https://...`, { next: { tags: ['a', 'b', 'c'] } })
```

----------------------------------------

TITLE: Fetching Data in Server Component with ORM (Next.js)
DESCRIPTION: This example shows how to fetch data in a Next.js Server Component using an ORM or database client. It retrieves blog posts from a database and renders them as a list.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Opting Route into PPR and Using Suspense in App Router (TSX)
DESCRIPTION: Explicitly enables Partial Prerendering for this route segment by exporting `experimental_ppr = true`. It also demonstrates wrapping a `DynamicComponent` with `React.Suspense`, providing a `Fallback` to be included in the initial prerender while the dynamic part loads.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_3

LANGUAGE: TSX
CODE:
```
import { Suspense } from 'react'
import { StaticComponent, DynamicComponent, Fallback } from '@/app/ui'

export const experimental_ppr = true

export default function Page() {
  return (
    <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
    </>
  )
}
```

----------------------------------------

TITLE: Redirect in Next.js Server Component (JavaScript)
DESCRIPTION: This example demonstrates how to use the `redirect` function within a Next.js Server Component written in JavaScript. It fetches team data and redirects to the login page if the data is not found. The `redirect` function terminates the rendering of the route segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { redirect } from 'next/navigation'

async function fetchTeam(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const team = await fetchTeam(id)

  if (!team) {
    redirect('/login')
  }

  // ...
}
```

----------------------------------------

TITLE: Handling Synchronous and Asynchronous Pages in React Components using TypeScript
DESCRIPTION: This snippet demonstrates the migration of synchronous React component handling to asynchronous by leveraging `use` from React to handle promise-based data. It involves transforming `Params` and `SearchParams` to promise-based structures to fetch data asynchronously, simplifying the logic for data fetching in component rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
"use client"\n\n// Before\ntype Params = { slug: string }\ntype SearchParams = { [key: string]: string | string[] | undefined }\n\nexport default function Page({\n  params,\n  searchParams,\n}: {\n  params: Params\n  searchParams: SearchParams\n}) {\n  const { slug } = params\n  const { query } = searchParams\n}\n\n// After\nimport { use } from 'react'\n\ntype Params = Promise<{ slug: string }>\ntype SearchParams = Promise<{ [key: string]: string | string[] | undefined }>\n\nexport default function Page(props: {\n  params: Params\n  searchParams: SearchParams\n}) {\n  const params = use(props.params)\n  const searchParams = use(props.searchParams)\n  const slug = params.slug\n  const query = searchParams.query\n}
```

----------------------------------------

TITLE: Implementing Authorization Check in App Router GET Handler (TS)
DESCRIPTION: Provides a TypeScript example for securing an App Router `GET` Route Handler. It first authenticates the user by checking for a session and then authorizes them by verifying if the user has the 'admin' role, returning 401 or 403 status codes for unauthorized access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_36

LANGUAGE: ts
CODE:
```
import { verifySession } from '@/app/lib/dal'\n\nexport async function GET() {\n  // User authentication and role verification\n  const session = await verifySession()\n\n  // Check if the user is authenticated\n  if (!session) {\n    // User is not authenticated\n    return new Response(null, { status: 401 })\n  }\n\n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    // User is authenticated but does not have the right permissions\n    return new Response(null, { status: 403 })\n  }\n\n  // Continue for authorized users\n}
```

----------------------------------------

TITLE: Defining Page Metadata in Next.js
DESCRIPTION: This snippet demonstrates how to define static metadata for a page (`app/page.js` or `app/page.tsx`) using the `export const metadata` object. This approach is recommended in the App Router for managing document head elements like the page title and meta tags, utilizing Next.js's built-in metadata handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Next.js',
}

export default function Page() {
  return '...'
}
```

LANGUAGE: JavaScript
CODE:
```
export const metadata = {
  title: 'Next.js',
}

export default function Page() {
  return '...'
}
```

----------------------------------------

TITLE: Using useActionState for Form Submission and State (JSX)
DESCRIPTION: Illustrates a Client Component using the `useActionState` hook to manage the state returned by a Server Action and its pending status. The hook provides the current state (`state`), a function to trigger the action (`formAction`), and a boolean indicating if the action is pending (`pending`). This state is then used to display messages and control UI elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_14

LANGUAGE: JSX
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Creating App Directory Page (Server Component) Importing Client Component (Step 2)
DESCRIPTION: Shows how to create the main `page.js` (or `page.tsx`) file in the `app` directory for a route. This file is a Server Component by default and demonstrates fetching data directly within the component and rendering the previously created Client Component, passing the fetched data to it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
// Import your Client Component
import HomePage from './home-page'

async function getPosts() {
  const res = await fetch('https://...')
  const posts = await res.json()
  return posts
}

export default async function Page() {
  // Fetch data directly in a Server Component
  const recentPosts = await getPosts()
  // Forward fetched data to your Client Component
  return <HomePage recentPosts={recentPosts} />
}
```

LANGUAGE: jsx
CODE:
```
// Import your Client Component
import HomePage from './home-page'

async function getPosts() {
  const res = await fetch('https://...')
  const posts = await res.json()
  return posts
}

export default async function Page() {
  // Fetch data directly in a Server Component
  const recentPosts = await getPosts()
  // Forward fetched data to your Client Component
  return <HomePage recentPosts={recentPosts} />
}
```

----------------------------------------

TITLE: Implementing revalidateTag in a Server Action
DESCRIPTION: Demonstrates how to integrate and use the `revalidateTag` function within a Next.js Server Action. It shows importing the function from `next/cache` and calling it with a specific tag ('posts') after performing an action that modifies data, thereby invalidating the relevant cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('posts')
}
```

LANGUAGE: javascript
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('posts')
}
```

----------------------------------------

TITLE: Redirecting after Server Action Completion
DESCRIPTION: Illustrates how to redirect the user to a different route using the `redirect` function from `next/navigation` within a Server Action (`createPost`). The `redirect` call must be placed outside any `try/catch` blocks to function correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_26

LANGUAGE: ts
CODE:
```
'use server'

import { redirect } from 'next/navigation'
import { revalidateTag } from 'next/cache'

export async function createPost(id: string) {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidateTag('posts') // Update cached posts
  redirect(`/post/${id}`) // Navigate to the new post page
}
```

LANGUAGE: js
CODE:
```
'use server'

import { redirect } from 'next/navigation'
import { revalidateTag } from 'next/cache'

export async function createPost(id) {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidateTag('posts') // Update cached posts
  redirect(`/post/${id}`) // Navigate to the new post page
}
```

----------------------------------------

TITLE: Importing Server Functions in Client Components with TypeScript
DESCRIPTION: Shows how to import and use Server Functions in a Client Component with TypeScript. The Server Function is imported from a separate file and used as a form action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
'use client'

import { createPost } from '@/app/actions'

export function Button() {
  return <button formAction={createPost}>Create</button>
}
```

----------------------------------------

TITLE: Profile Component using use Hook (JavaScript)
DESCRIPTION: This code shows how to use React's `use` hook to unwrap a Promise within a Client Component in Next.js using JavaScript. The `Profile` component uses the custom `useUser` hook to retrieve the `userPromise` from the context and then uses the `use` hook to suspend rendering until the Promise resolves. The resolved user data is then used in the component. This example demonstrates partial hydration and the use of React's `use` hook for data fetching in Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
'use client'

import { use } from 'react'
import { useUser } from './user-provider'

export function Profile() {
  const { userPromise } = useUser()
  const user = use(userPromise)

  return '...'
}
```

----------------------------------------

TITLE: JavaScript Route Handler Enhancements for Asynchronous Data
DESCRIPTION: This JavaScript snippet modifies a route handler by introducing `await` for reading parameters asynchronously, ensuring the `GET` function adapts to updated asynchronous parameter handling. This update streamlines processing of request-related data within the route handler.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_9

LANGUAGE: js
CODE:
```
export async function GET(request, segmentData) {\n  const params = segmentData.params\n  const slug = params.slug\n}\n\n// After\nexport async function GET(request, segmentData) {\n  const params = await segmentData.params\n  const slug = params.slug\n}
```

----------------------------------------

TITLE: Generating All Static Paths from Fetch Data Next.js TSX/JSX
DESCRIPTION: Provides an example of using `generateStaticParams` to fetch all possible data entries (posts) and return parameters for each, resulting in all corresponding dynamic routes being statically generated at build time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Running Next.js development server
DESCRIPTION: These commands install dependencies and then starts the Next.js development server.  It provides both npm and yarn alternatives.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Setting CORS Headers in Next.js - TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to set CORS headers for a GET route. It ensures that the response allows cross-origin requests by specifying allowed origins and methods.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
export async function GET(request: Request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

----------------------------------------

TITLE: Implementing Client Component to Use Server Action
DESCRIPTION: Defines a Client Component (`ClientComponent`, marked `'use client'`) that receives a Server Action function as a prop (`action`). It creates a simple UI element, like a button, that triggers the received Server Action when interacted with (e.g., clicked), enabling client-side events to invoke server-side logic passed down through the component tree, potentially via a cached component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
'use client'

export default function ClientComponent({
  action,
}: {
  action: () => Promise<void>
}) {
  return <button onClick={action}>Update</button>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export default function ClientComponent({ action }) {
  return <button onClick={action}>Update</button>
}
```

----------------------------------------

TITLE: Matching Multiple Paths with Next.js Middleware Config JavaScript
DESCRIPTION: This snippet shows how to use an array with the `matcher` property in the Next.js Middleware `config` export to specify that the middleware should run for requests matching any of the listed path patterns. This example matches paths starting with `/about/` or `/dashboard/`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export const config = {
  matcher: ['/about/:path*', '/dashboard/:path*'],
}
```

----------------------------------------

TITLE: Client Component Form (TypeScript)
DESCRIPTION: This example shows a client component with a form, written in TypeScript, which triggers a server action to handle form submission and redirect.  The action is called `navigate` and imported from `./actions`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
'use client'

import { navigate } from './actions'

export function ClientRedirect() {
  return (
    <form action={navigate}>
      <input type="text" name="id" />
      <button>Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Generate Child Dynamic Segment Params in Page Using Parent Params (Top-Down Step 2) Next.js
DESCRIPTION: This code defines the `generateStaticParams` function within a page segment file (e.g., `page.tsx`/`page.js`) as part of the top-down approach, focusing on pre-rendering child dynamic segments (`[product]`). It receives the parent parameters (e.g., `category`) via the `params` argument, allowing it to fetch data specific to the parent segment and generate the relevant child parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
// Generate segments for [product] using the `params` passed from
// the parent segment's `generateStaticParams` function
export async function generateStaticParams({
  params: { category },
}: {
  params: { category: string }
}) {
  const products = await fetch(
    `https://.../products?category=${category}`
  ).then((res) => res.json())

  return products.map((product) => ({
    product: product.id,
  }))
}

export default function Page({
  params,
}: {
  params: Promise<{ category: string; product: string }>
}) {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
// Generate segments for [product] using the `params` passed from
// the parent segment's `generateStaticParams` function
export async function generateStaticParams({ params: { category } }) {
  const products = await fetch(
    `https://.../products?category=${category}`
  ).then((res) => res.json())

  return products.map((product) => ({
    product: product.id,
  }))
}

export default function Page({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Migrating getServerSideProps to App Directory Fetching (TSX/JSX)
DESCRIPTION: Demonstrates how to replicate the behavior of `getServerSideProps` in the `app` directory using an `async` Server Component and the `fetch` API with the `cache: 'no-store'` option. Data fetching is colocated within the component or a helper function it calls.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
// `app` directory\n\n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`, { cache: 'no-store' })\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Dashboard() {\n  const projects = await getProjects()\n\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}
```

LANGUAGE: jsx
CODE:
```
// `app` directory\n\n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`, { cache: 'no-store' })\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Dashboard() {\n  const projects = await getProjects()\n\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}
```

----------------------------------------

TITLE: Implementing Global Error Handling in Next.js with TypeScript
DESCRIPTION: TypeScript implementation of a global error boundary component for handling application-wide errors in Next.js. Must include html and body tags as it replaces the root layout when active.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Returning JSON Response in NextResponse - JavaScript
DESCRIPTION: Generates a response with a JSON body, including an HTTP status code. This functionality is relevant for handling API errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request) {
  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
}
```

----------------------------------------

TITLE: Async Page Implementation in Next.js 15
DESCRIPTION: Example of implementing async pages with params and searchParams handling in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
type Params = Promise<{ slug: string }>
type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>

export async function generateMetadata(props: {
  params: Params
  searchParams: SearchParams
}) {
  const params = await props.params
  const searchParams = await props.searchParams
  const slug = params.slug
  const query = searchParams.query
}

export default async function Page(props: {
  params: Params
  searchParams: SearchParams
}) {
  const params = await props.params
  const searchParams = await props.searchParams
  const slug = params.slug
  const query = searchParams.query
}
```

----------------------------------------

TITLE: Installing Next.js Dependency
DESCRIPTION: This command installs the latest version of the Next.js package as a project dependency. It utilizes the npm package manager to add Next.js to the project's `node_modules` directory and update the `package.json` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install next@latest
```

----------------------------------------

TITLE: Render Dashboard Based on Role (Next.js Server Component) - JSX
DESCRIPTION: This Next.js Server Component demonstrates role-based access control by calling `verifySession()` from the DAL. It retrieves the user's role from the session object and conditionally renders different dashboard components (`AdminDashboard`, `UserDashboard`) or redirects based on the role.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_29

LANGUAGE: JSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { redirect } from 'next/navigation'

export default async function Dashboard() {
  const session = await verifySession()
  const userRole = session.role // Assuming 'role' is part of the session object

  if (userRole === 'admin') {
    return <AdminDashboard />
  } else if (userRole === 'user') {
    return <UserDashboard />
  } else {
    redirect('/login')
  }
}
```

----------------------------------------

TITLE: Disabling Button with useFormStatus Hook (TSX)
DESCRIPTION: Shows a Client Component (`'use client'`) designed to be nested within a `<form>`. It utilizes the `useFormStatus` hook to obtain the pending state of its parent form and disables the submit button accordingly. This hook is specifically for accessing the status of a form submission initiated via an action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_15

LANGUAGE: TSX
CODE:
```
'use client'

import { useFormStatus } from 'react-dom'

export function SubmitButton() {
  const { pending } = useFormStatus()

  return (
    <button disabled={pending} type="submit">
      Sign Up
    </button>
  )
}
```

----------------------------------------

TITLE: Styling Options Overview in Next.js
DESCRIPTION: Detailed exploration of various styling methodologies supported in Next.js, highlighting their key characteristics, benefits, and potential use cases.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/index.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
- **CSS Modules**: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.
- **Global CSS**: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.
- **Tailwind CSS**: A utility-first CSS framework that allows for rapid custom designs by composing utility classes.
- **Sass**: A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.
- **CSS-in-JS**: Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling.
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: This snippet outlines how to start the development server for the Next.js application using npm or Yarn. This is crucial for local development, allowing developers to view changes in real time in the browser on the designated localhost URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Using the Link Component Next.js JSX
DESCRIPTION: Illustrates the basic usage of the built-in Next.js <Link> component in a JavaScript React Server Component. It shows how to import the component from 'next/link' and use it to create a link that navigates to the '/dashboard' route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

----------------------------------------

TITLE: Generate All Dynamic Segment Params in Page (Bottom-Up) Next.js
DESCRIPTION: This code defines the `generateStaticParams` function within a page segment file (e.g., `page.tsx`/`page.js`) to generate static parameters for all dynamic segments in its route, including parent segments. It fetches data and maps it to an array of objects, where each object contains parameters for all segments (`category`, `product`). This function runs at build time to determine which paths should be pre-rendered.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
// Generate segments for both [category] and [product]
export async function generateStaticParams() {
  const products = await fetch('https://.../products').then((res) => res.json())

  return products.map((product) => ({
    category: product.category.slug,
    product: product.id,
  }))
}

export default function Page({
  params,
}: {
  params: Promise<{ category: string; product: string }>
}) {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
// Generate segments for both [category] and [product]
export async function generateStaticParams() {
  const products = await fetch('https://.../products').then((res) => res.json())

  return products.map((product) => ({
    category: product.category.slug,
    product: product.id,
  }))
}

export default function Page({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Vitest Unit Test (JavaScript)
DESCRIPTION: This JavaScript snippet creates a Vitest unit test for the `Page` component. It imports `expect` and `test` from Vitest, and `render` and `screen` from `@testing-library/react`. It renders the `Page` component and asserts that a heading with level 1 and name 'Home' exists.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
import { expect, test } from 'vitest'
import { render, screen } from '@testing-library/react'
import Page from '../app/page'

test('Page', () => {
  render(<Page />)
  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()
})
```

----------------------------------------

TITLE: Displaying Content Based on Route Parameters in Next.js
DESCRIPTION: Example showing how to display content based on the dynamic route parameters in a Next.js page component. The params object is awaited to access the specific route segment values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  return <h1>Blog Post: {slug}</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
  return <h1>Blog Post: {slug}</h1>
}
```

----------------------------------------

TITLE: Handling Cookies in Next.js Route Handlers
DESCRIPTION: Example of reading and setting cookies in a Route Handler using the 'cookies' function from next/headers. This demonstrates how to access and manipulate cookies in both TypeScript and JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request: Request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token.value}` },
  })
}
```

LANGUAGE: javascript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token}` },
  })
}
```

----------------------------------------

TITLE: Installing TypeScript Type Definitions (Yarn)
DESCRIPTION: This command installs type definitions for React, React DOM, and Node.js as development dependencies using Yarn. These definitions provide type checking and autocompletion for these libraries when using TypeScript. The `--save-dev` flag ensures they're added to `devDependencies` in `package.json`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_7

LANGUAGE: shell
CODE:
```
yarn install --save-dev @types/react @types/react-dom @types/node
```

----------------------------------------

TITLE: Configuring Open Graph Metadata (Article Type) in Next.js
DESCRIPTION: Define Open Graph metadata specifically for content of type 'article'. This includes common fields like title, description, type, published time, and authors, generating relevant `og:` and `article:` properties for structured social sharing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_13

LANGUAGE: JSX
CODE:
```
export const metadata = {
  openGraph: {
    title: 'Next.js',
    description: 'The React Framework for the Web',
    type: 'article',
    publishedTime: '2023-01-01T00:00:00.000Z',
    authors: ['Seb', 'Josh'],
  },
}
```

LANGUAGE: HTML
CODE:
```
<meta property="og:title" content="Next.js" />
<meta property="og:description" content="The React Framework for the Web" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2023-01-01T00:00:00.000Z" />
<meta property="article:author" content="Seb" />
<meta property="article:author" content="Josh" />
```

----------------------------------------

TITLE: Integrating Session Creation into Server Action (TypeScript)
DESCRIPTION: This snippet shows a Next.js Server Action `signup` that integrates session management. After handling previous steps like validation and database insertion, it calls the `createSession` function with the user's ID and then uses the `redirect` API to navigate the user to the profile page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_9

LANGUAGE: ts
CODE:
```
import { createSession } from '@/app/lib/session';

export async function signup(state: FormState, formData: FormData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id);
  // 5. Redirect user
  redirect('/profile');
}
```

----------------------------------------

TITLE: Creating a Layout Component with Client and Server Components in TypeScript
DESCRIPTION: This snippet combines Client and Server Components by defining a Layout component that includes a Server Component (Logo) and a Client Component (SearchBar). This structure optimizes the overall performance by reducing the Client JavaScript bundle size.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
// SearchBar is a Client Component
import SearchBar from './searchbar'
// Logo is a Server Component
import Logo from './logo'

// Layout is a Server Component by default
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <nav>
        <Logo />
        <SearchBar />
      </nav>
      <main>{children}</main>
    </>
  )
}
```

----------------------------------------

TITLE: Fetch User Data in DAL (Next.js/React Cache) - JSX
DESCRIPTION: This function fetches specific columns (id, name, email) for the authenticated user from the database after verifying the session using `verifySession()`. It returns the user object or null if the session is invalid or an error occurs. It also uses React's `cache` API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_25

LANGUAGE: JSX
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  try {
    const data = await db.query.users.findMany({
      where: eq(users.id, session.userId),
      // Explicitly return the columns you need rather than the whole user object
      columns: {
        id: true,
        name: true,
        email: true,
      },
    })

    const user = data[0]

    return user
  } catch (error) {
    console.log('Failed to fetch user')
    return null
  }
})
```

----------------------------------------

TITLE: Fetching and Displaying Post Data by ID in Next.js TypeScript
DESCRIPTION: This TypeScript snippet illustrates how to create a Next.js page that fetches and displays post data using a dynamic route parameter. The 'getPost' function retrieves post details based on the ID extracted from 'params'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_18

LANGUAGE: TypeScript
CODE:
```
import { getPost } from '@/posts/data'

export default async function PostPage({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const data = await getPost(id)

  return (
    <div>
      <h1>{data.title}</h1>
      {/* ... */}
    </div>
  )
}
```

----------------------------------------

TITLE: Correct Link Component Usage in Next.js
DESCRIPTION: Example showing the correct way to use Next.js Link component by passing children, either as direct text content or with an anchor tag when using legacyBehavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-no-children.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <>
      <Link href="/about">To About</Link>
      // or
      <Link href="/about" legacyBehavior>
        <a>To About</a>
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Creating Secure Session Cookie in Next.js App Router (TypeScript)
DESCRIPTION: This asynchronous function `createSession` encrypts a user ID and expiration time (7 days) using a separate `encrypt` function, then sets the resulting session string as an HTTP-only, secure cookie named 'session' using Next.js `cookies()` API. Recommended cookie options like `sameSite` and `path` are included.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
import 'server-only';
import { cookies } from 'next/headers';

export async function createSession(userId: string) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
  const session = await encrypt({ userId, expiresAt });
  const cookieStore = await cookies();

  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  });
}
```

----------------------------------------

TITLE: Implementing Search Component with Suspense in TypeScript
DESCRIPTION: Shows how to properly wrap a search component using useSearchParams within a Suspense boundary to prevent client-side rendering issues. The example demonstrates the correct implementation pattern for TypeScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-suspense-with-csr-bailout.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'
import { Suspense } from 'react'

function Search() {
  const searchParams = useSearchParams()

  return <input placeholder="Search..." />
}

export function Searchbar() {
  return (
    // You could have a loading skeleton as the `fallback` too
    <Suspense>
      <Search />
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Configuring Layered Rewrites in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to define rewrites across different routing layers (`beforeFiles`, `afterFiles`, `fallback`) in Next.js. This allows controlling when rewrites are applied relative to filesystem routes and dynamic routes. It also includes an example of a `has` condition in the `beforeFiles` array.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return {
      beforeFiles: [
        // These rewrites are checked after headers/redirects
        // and before all files including _next/public files which
        // allows overriding page files
        {
          source: '/some-page',
          destination: '/somewhere-else',
          has: [{ type: 'query', key: 'overrideMe' }],
        },
      ],
      afterFiles: [
        // These rewrites are checked after pages/public files
        // are checked but before dynamic routes
        {
          source: '/non-existent',
          destination: '/somewhere-else',
        },
      ],
      fallback: [
        // These rewrites are checked after both pages/public files
        // and dynamic routes are checked
        {
          source: '/:path*',
          destination: `https://my-old-site.com/:path*`,
        },
      ],
    }
  },
}
```

----------------------------------------

TITLE: Handling Dynamic Route Parameters in Next.js Route Handlers
DESCRIPTION: Shows how to access dynamic route parameters in a Route Handler using the context.params object. The example demonstrates how to extract the 'team' parameter from a dynamic route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
export async function GET(
  request: Request,
  { params }: { params: Promise<{ team: string }> }
) {
  const { team } = await params
}
```

LANGUAGE: javascript
CODE:
```
export async function GET(request, { params }) {
  const { team } = await params
}
```

----------------------------------------

TITLE: Incorrect Next.js Link Usage with Multiple Children
DESCRIPTION: Example showing incorrect implementation of Next.js Link component where multiple anchor tags are passed as children, which causes an error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-multiple-children.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/about">
      <a>To About</a>
      <a>Second To About</a>
    </Link>
  )
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode (npm)
DESCRIPTION: This command starts the Next.js application in development mode using npm. It allows developers to preview and test the application locally before deployment. The app will typically run on http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Creating Loading Component in TypeScript for Next.js
DESCRIPTION: This snippet demonstrates how to create a loading component in TypeScript for Next.js. It exports a default function that returns a simple loading message, which can be customized to display a loading skeleton component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/loading.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Loading() {
  // Or a custom loading skeleton component
  return <p>Loading...</p>
}
```

----------------------------------------

TITLE: Defining Server Component Reading Cookies (TypeScript)
DESCRIPTION: Defines an asynchronous Server Component that accesses dynamic data from the incoming request using `next/headers.cookies()`. Accessing such dynamic APIs causes the component, and potentially its parent tree, to be rendered dynamically.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { cookies } from 'next/headers'

export async function User() {
  const session = (await cookies()).get('session')?.value
  return '...'
}
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Command to start the Next.js development server.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Linking to Dynamic Segments (App Router)
DESCRIPTION: This snippet demonstrates how to create links to dynamic routes, such as individual blog posts, in the App Router. It shows mapping over an array of post data and using template literals to construct the `href` for each Next.js Link component based on a dynamic segment like the post slug.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

interface Post {
  id: number
  title: string
  slug: string
}

export default function PostList({ posts }: { posts: Post[] }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function PostList({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Setting Request and Response Headers in Next.js Middleware
DESCRIPTION: Illustrates how to clone incoming request headers, set new headers on the request using `NextResponse.next()`, and set new headers directly on the outgoing `NextResponse`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  // Clone the request headers and set a new header `x-hello-from-middleware1`
  const requestHeaders = new Headers(request.headers);
  requestHeaders.set('x-hello-from-middleware1', 'hello');

  // You can also set request headers in NextResponse.next
  const response = NextResponse.next({
    request: {
      // New request headers
      headers: requestHeaders,
    },
  });

  // Set a new response header `x-hello-from-middleware2`
  response.headers.set('x-hello-from-middleware2', 'hello');
  return response;
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server';

export function middleware(request) {
  // Clone the request headers and set a new header `x-hello-from-middleware1`
  const requestHeaders = new Headers(request.headers);
  requestHeaders.set('x-hello-from-middleware1', 'hello');

  // You can also set request headers in NextResponse.next
  const response = NextResponse.next({
    request: {
      // New request headers
      headers: requestHeaders,
    },
  });

  // Set a new response header `x-hello-from-middleware2`
  response.headers.set('x-hello-from-middleware2', 'hello');
  return response;
}
```

----------------------------------------

TITLE: Creating a Dynamic Blog Post Page in Next.js
DESCRIPTION: Implements a page component for individual blog posts using dynamic routing. The [slug] folder creates a dynamic route segment that can handle different blog post URLs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
function generateStaticParams() {}

export default function Page() {
  return <h1>Hello, Blog Post Page!</h1>
}
```

LANGUAGE: jsx
CODE:
```
function generateStaticParams() {}

export default function Page() {
  return <h1>Hello, Blog Post Page!</h1>
}
```

----------------------------------------

TITLE: Streaming Responses in Next.js - JavaScript
DESCRIPTION: This JavaScript snippet illustrates the handling of a streaming response with OpenAI's API, processing messages sent in a POST request and returning a stream response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
import { openai } from '@ai-sdk/openai'
import { StreamingTextResponse, streamText } from 'ai'

export async function POST(req) {
  const { messages } = await req.json()
  const result = await streamText({
    model: openai('gpt-4-turbo'),
    messages,
  })

  return new StreamingTextResponse(result.toAIStream())
}
```

----------------------------------------

TITLE: Dynamic Rendering Example (JSX)
DESCRIPTION: This code demonstrates how to force dynamic rendering in a Next.js page. Setting the `dynamic` export to `'force-dynamic'` ensures that the page is rendered dynamically on each request, allowing `useSearchParams` to be available on the server during initial render.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import SearchBar from './search-bar'\n\nexport const dynamic = 'force-dynamic'\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <SearchBar />\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}
```

----------------------------------------

TITLE: Role-based route protection (jsx)
DESCRIPTION: This snippet shows how to implement role-based route protection using the `forbidden` function in a Server Component. It checks if the user has the 'admin' role and calls `forbidden()` if they do not, preventing unauthorized access to the route. It assumes `verifySession` is fetching user session data, including their role.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return (
    <main>
      <h1>Admin Dashboard</h1>
      <p>Welcome, {session.user.name}!</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Composing Server Components inside Client Components in TypeScript
DESCRIPTION: This TypeScript example shows how to compose a Server Component inside a Client Component in a Next.js page. This pattern allows the Server Component to be rendered on the server before the Client Component is rendered on the client, providing better performance and separation of concerns.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_19

LANGUAGE: tsx
CODE:
```
// This pattern works:
// You can pass a Server Component as a child or prop of a
// Client Component.
import ClientComponent from './client-component'
import ServerComponent from './server-component'

// Pages in Next.js are Server Components by default
export default function Page() {
  return (
    <ClientComponent>
      <ServerComponent />
    </ClientComponent>
  )
}
```

----------------------------------------

TITLE: Accessing Request Data with Headers and Cookies in App Directory (TSX/JSX)
DESCRIPTION: Demonstrates how to use the new `headers()` and `cookies()` functions provided by `next/headers` to access request-specific data within App Router Server Components or functions called by them. These functions are read-only and based on standard Web APIs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
// `app` directory\nimport { cookies, headers } from 'next/headers'\n\nasync function getData() {\n  const authHeader = (await headers()).get('authorization')\n\n  return '...'\n}\n\nexport default async function Page() {\n  // You can use `cookies` or `headers` inside Server Components\n  // directly or in your data fetching function\n  const theme = (await cookies()).get('theme')\n  const data = await getData()\n  return '...'\n}
```

LANGUAGE: jsx
CODE:
```
// `app` directory\nimport { cookies, headers } from 'next/headers'\n\nasync function getData() {\n  const authHeader = (await headers()).get('authorization')\n\n  return '...'\n}\n\nexport default async function Page() {\n  // You can use `cookies` or `headers` inside Server Components\n  // directly or in your data fetching function\n  const theme = (await cookies()).get('theme')\n  const data = await getData()\n  return '...'\n}
```

----------------------------------------

TITLE: Using useActionState for Form Submission and State (TSX)
DESCRIPTION: Illustrates a Client Component using the `useActionState` hook to manage the state returned by a Server Action and its pending status. The hook provides the current state (`state`), a function to trigger the action (`formAction`), and a boolean indicating if the action is pending (`pending`). This state is then used to display messages and control UI elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_13

LANGUAGE: TSX
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Memoizing Data Fetching (React/Next.js)
DESCRIPTION: Provides a JavaScript example using React's `cache` function to memoize the result of a database query function, preventing redundant data fetching within the same request lifecycle.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_15

LANGUAGE: JavaScript
CODE:
```
import { cache } from 'react'
import db from '@/lib/db'

export const getItem = cache(async (id) => {
  const item = await db.item.findUnique({ id })
  return item
})
```

----------------------------------------

TITLE: Basic Not Found Component Implementation in Next.js (TypeScript)
DESCRIPTION: A basic implementation of the not-found.js component in TypeScript that renders a custom 404 Not Found page with a link to return to the home page. Next.js will return a 200 HTTP status code for streamed responses and 404 for non-streamed responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/not-found.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function NotFound() {
  return (
    <div>
      <h2>Not Found</h2>
      <p>Could not find requested resource</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Example of Matching Redirect Paths in Next.js
DESCRIPTION: This snippet shows how to use path matching in redirects. The `source` can include patterns like `:slug` to match specific paths and append them into the `destination`. It supports both simple path segments and more complex path structures using wildcards (`*`) and regex.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async redirects() {
    return [
      {
        source: '/old-blog/:path*',
        destination: '/blog/:path*',
        permanent: false
      }
    ]
  },
}
```

----------------------------------------

TITLE: Set Default Revalidation Time for Routes in Next.js (TS/JS)
DESCRIPTION: Specify the default data revalidation frequency for a layout, page, or route handler by exporting the `revalidate` variable. Set to `false` for infinite cache (default), `0` to force dynamic rendering, or a number (seconds) for time-based revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export const revalidate = false
// false | 0 | number
```

LANGUAGE: JavaScript
CODE:
```
export const revalidate = false
// false | 0 | number
```

----------------------------------------

TITLE: Running Next.js in development mode
DESCRIPTION: These commands start the Next.js development server. It can be run using npm, yarn, or pnpm. The application will be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Updating TypeScript Configuration (tsconfig.json)
DESCRIPTION: This configuration shows a `tsconfig.json` file updated for compatibility with Next.js. It includes settings for compiler options, inclusion/exclusion paths, and plugins specifically for Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "allowJs": true,
    "forceConsistentCasingInFileNames": true,
    "incremental": true,
    "plugins": [{ "name": "next" }]
  },
  "include": ["./src", "./dist/types/**/*.ts", "./next-env.d.ts"],
  "exclude": ["./node_modules"]
}
```

----------------------------------------

TITLE: Migrating Page Component Logic to App Directory Client Component (Step 1)
DESCRIPTION: Demonstrates moving the core logic of a page component from the `pages` directory into a new, dedicated Client Component file within the `app` directory, marked by the `'use client'` directive. This component receives necessary data via props.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
'use client'

// This is a Client Component (same as components in the `pages` directory)
// It receives data as props, has access to state and effects, and is
// prerendered on the server during the initial page load.
export default function HomePage({ recentPosts }) {
  return (
    <div>
      {recentPosts.map((post) => (
        <div key={post.id}>{post.title}</div>
      ))}
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

// This is a Client Component. It receives data as props and
// has access to state and effects just like Page components
// in the `pages` directory.
export default function HomePage({ recentPosts }) {
  return (
    <div>
      {recentPosts.map((post) => (
        <div key={post.id}>{post.title}</div>
      ))}
    </div>
  )
}
```

----------------------------------------

TITLE: Rendering Responsive Images with Dynamic URLs in Next.js
DESCRIPTION: This snippet illustrates how to render responsive images when using dynamic or remote URLs in Next.js. The user must provide width and height to maintain the correct aspect ratio for the image.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_29

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page({ photoUrl }) {
  return (
    <Image
      src={photoUrl}
      alt="Picture of the author"
      sizes="100vw"
      style={{
        width: '100%',
        height: 'auto',
      }}
      width={500}
      height={300}
    />
  )
}
```

----------------------------------------

TITLE: Using Localized Dictionary in Next.js Page Component
DESCRIPTION: This snippet shows how to use the getDictionary function to fetch and apply localized strings in a Next.js page component, with both TypeScript and JavaScript versions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { getDictionary } from './dictionaries'

export default async function Page({
  params,
}: {
  params: Promise<{ lang: 'en' | 'nl' }>
}) {
  const { lang } = await params
  const dict = await getDictionary(lang) // en
  return <button>{dict.products.cart}</button> // Add to Cart
}
```

LANGUAGE: javascript
CODE:
```
import { getDictionary } from './dictionaries'

export default async function Page({ params }) {
  const { lang } = await params
  const dict = await getDictionary(lang) // en
  return <button>{dict.products.cart}</button> // Add to Cart
}
```

----------------------------------------

TITLE: Using revalidatePath in a Server Action
DESCRIPTION: Demonstrates how to call `revalidatePath` within a Next.js Server Action. After performing a data submission (simulated by `submitForm()`), `revalidatePath('/')` is called to invalidate the cache for the root path, ensuring the UI reflects the changes on subsequent visits.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export default async function submit() {
  await submitForm()
  revalidatePath('/')
}
```

----------------------------------------

TITLE: Metadata API usage - TSX
DESCRIPTION: This code defines metadata using the Next.js Metadata API in a TypeScript file. It exports a `metadata` object with `title` and `description` properties.  The `RootLayout` component then renders the HTML structure, placing the provided `children` inside the body.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'React App',
  description: 'Web site created with Next.js.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: RootLayout Component with Metadata (Initial) - TSX
DESCRIPTION: This code defines the RootLayout component in a Next.js application using TypeScript. It sets the basic HTML structure, includes metadata such as title and description, and renders the children components. The `link` tag for the favicon is included.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Applying Font in <head> using JSX Global Styles
DESCRIPTION: This code snippet demonstrates how to apply a font within the `<head>` section of a Next.js application using JSX global styles. It injects a `<style jsx global>` tag to set the `font-family` property for the `html` element using the imported font's `fontFamily` property.  This approach does not require a wrapper element.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export default function MyApp({ Component, pageProps }) {
  return (
    <>
      <style jsx global>{`
        html {
          font-family: ${inter.style.fontFamily};
        }
      `}</style>
      <Component {...pageProps} />
    </>
  )
}
```

----------------------------------------

TITLE: Setting CORS Headers in Next.js - JavaScript
DESCRIPTION: This JavaScript snippet illustrates the configuration of CORS headers in a GET route. It sets the necessary headers to allow various HTTP methods and origins.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_17

LANGUAGE: javascript
CODE:
```
export async function GET(request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

----------------------------------------

TITLE: Using Tailwind Utility Classes in a Next.js Component - TSX/JSX
DESCRIPTION: Apply Tailwind's utility classes directly to HTML elements using the `className` prop in your React components. This example shows applying text size, font weight, and underline styles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Implementing GET API Route Handler in Next.js with TypeScript
DESCRIPTION: This code defines an API route handler for GET requests in Next.js. It uses TypeScript for type safety and returns a JSON response with a greeting message. The handler is designed to be used as an API endpoint in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@edge-runtime/primitives/url.js.LEGAL.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Defining Server Functions in a Separate File with JavaScript
DESCRIPTION: Shows how to create Server Functions in a dedicated JavaScript file by placing the 'use server' directive at the top of the file, making all exports Server Functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
'use server'

export async function createPost() {}
```

----------------------------------------

TITLE: Integrating Prettier with ESLint (mjs)
DESCRIPTION: This snippet shows how to integrate Prettier with ESLint by extending the 'prettier' configuration in your `.eslintrc.mjs` file.  It extends both `next` and `prettier` configurations, using `FlatCompat`. This ensures ESLint and Prettier work together without conflicting formatting rules.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_8

LANGUAGE: mjs
CODE:
```
import { FlatCompat } from '@eslint/eslintrc'

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

const eslintConfig = [
  ...compat.config({
    extends: ['next', 'prettier'],
  }),
]

export default eslintConfig
```

----------------------------------------

TITLE: Implementing a Shared Layout Component in Next.js
DESCRIPTION: A reusable layout component that includes navigation and footer components. This pattern allows for consistent UI elements across multiple pages while rendering page-specific content via the children prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import Navbar from './navbar'
import Footer from './footer'

export default function Layout({ children }) {
  return (
    <>
      <Navbar />
      <main>{children}</main>
      <Footer />
    </>
  )
}
```

----------------------------------------

TITLE: Using Server Functions with Forms in React Components (JavaScript)
DESCRIPTION: Demonstrates using a Server Function with an HTML form in JavaScript. The form passes all input values as FormData to the Server Function when the form is submitted.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
import { createPost } from '@/app/actions'

export function Form() {
  return (
    <form action={createPost}>
      <input type="text" name="title" />
      <input type="text" name="content" />
      <button type="submit">Create</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Applying Global CSS in Next.js Root Layout - TSX/JSX
DESCRIPTION: Import the `global.css` file directly into the root layout component (`app/layout.tsx` or `app/layout.js`). This ensures that the global styles are loaded and applied to every route in the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
// These styles apply to every route in the application
import './global.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
// These styles apply to every route in the application
import './global.css'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining Scoped Styles with CSS Modules - CSS
DESCRIPTION: Create a CSS Module file with a `.module.css` extension to define styles that are automatically scoped to prevent naming collisions. These styles can then be imported and used in React components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#_snippet_0

LANGUAGE: css
CODE:
```
.blog {
  padding: 24px;
}
```

----------------------------------------

TITLE: Building Navigation Component (TSX/JS)
DESCRIPTION: A simple navigation component that demonstrates the usage of the `CustomLink` component created earlier. It renders standard navigation links that will trigger the blocking logic if the navigation blocker state is active.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_26

LANGUAGE: tsx
CODE:
```
'use client';

import { CustomLink as Link } from './custom-link';

export default function Nav() {
  return (
    <nav>
      <Link href="/">Home</Link>
      <Link href="/about">About</Link>
    </nav>
  );
}
```

LANGUAGE: jsx
CODE:
```
'use client';

import { CustomLink as Link } from './custom-link';

export default function Nav() {
  return (
    <nav>
      <Link href="/">Home</Link>
      <Link href="/about">About</Link>
    </nav>
  );
}
```

----------------------------------------

TITLE: Fetching Data with ORM/Database on Server in Next.js (TSX/JSX)
DESCRIPTION: Illustrates fetching data directly from a database or ORM within an async React Server Component. It selects all posts from a `posts` table using a `db` instance. Assumes `db` and `posts` are imported from '@/lib/db'. The database response is not cached by default but can be with `unstable_cache`. Static by default unless dynamic features or `force-dynamic` are used.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Root Layout: Using Metadata API (TSX)
DESCRIPTION: This code demonstrates how to use the Next.js Metadata API to manage metadata information in the root layout (TSX).  It imports the `Metadata` type from 'next' and exports a `metadata` object containing the title and description of the application. The `<head>` tags are then simplified in the RootLayout component, relying on the Metadata API to inject the metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My App',
  description: 'My App is a...',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Running Next.js Development Server with Package Managers
DESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, pnpm, or bun). After running any of these commands, the development server will be available at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw/ts/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Running Next.js Project in Development Mode - Bash
DESCRIPTION: This snippet details the commands required to install any new dependencies and then launch the Next.js app in development mode using either npm or yarn. Basic environment preparation with installed dependencies is required. The snippet helps verify that the local development setup is functioning correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev

# or
yarn install
yarn dev
```

----------------------------------------

TITLE: Running Next.js in Development Mode
DESCRIPTION: These commands install the necessary dependencies and start the Next.js development server. `npm install` or `yarn install` install the project dependencies, while `npm run dev` or `yarn dev` start the development server, typically on port 3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Reusing Fetch Data Logic Across Next.js Functions
DESCRIPTION: Demonstrates how to create reusable data fetching functions using `fetch` and call them from `generateStaticParams`, `generateMetadata`, and the default page component. By using `cache: 'force-cache'` with `fetch`, the request is memoized and de-duplicated across calls with the same URL and options. This pattern helps avoid redundant data fetching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import { notFound } from 'next/navigation';

interface Post {
  id: string;
  title: string;
  content: string;
}

async function getPost(id: string) {
  const res = await fetch(`https://api.vercel.app/blog/${id}`, {
    cache: 'force-cache',
  });
  const post: Post = await res.json();
  if (!post) notFound();
  return post;
}

export async function generateStaticParams() {
  const posts = await fetch('https://api.vercel.app/blog', {
    cache: 'force-cache',
  }).then((res) => res.json());

  return posts.map((post: Post) => ({
    id: String(post.id),
  }));
}

export async function generateMetadata({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  const { id } = await params;
  const post = await getPost(id);

  return {
    title: post.title,
  };
}

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  const { id } = await params;
  const post = await getPost(id);

  return (
    <article>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </article>
  );
}
```

LANGUAGE: javascript
CODE:
```
import { notFound } from 'next/navigation';

async function getPost(id) {
  const res = await fetch(`https://api.vercel.app/blog/${id}`);
  const post = await res.json();
  if (!post) notFound();
  return post;
}

export async function generateStaticParams() {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  );

  return posts.map((post) => ({
    id: String(post.id),
  }));
}

export async function generateMetadata({ params }) {
  const { id } = await params;
  const post = await getPost(id);

  return {
    title: post.title,
  };
}

export default async function Page({ params }) {
  const { id } = await params;
  const post = await getPost(id);

  return (
    <article>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </article>
  );
}
```

----------------------------------------

TITLE: Generating Open Graph Image Programmatically - TSX
DESCRIPTION: Example of an opengraph-image.tsx file that programmatically generates an image using `next/og`'s `ImageResponse`. It demonstrates importing the API, reading a font file, defining image metadata exports (alt, size, contentType), and returning an `ImageResponse` object containing JSX and options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_6

LANGUAGE: TSX
CODE:
```
import { ImageResponse } from 'next/og'
import { readFile } from 'node:fs/promises'
import { join } => 'node:path'

// Image metadata
export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image() {
  // Font loading, process.cwd() is Next.js project directory
  const interSemiBold = await readFile(
    join(process.cwd(), 'assets/Inter-SemiBold.ttf')
  )

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        About Acme
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported opengraph-image
      // size config to also set the ImageResponse's width and height.
      ...size,
      fonts: [
        {
          name: 'Inter',
          data: interSemiBold,
          style: 'normal',
          weight: 400,
        },
      ],
    }
  )
}
```

----------------------------------------

TITLE: Dashboard Layout Definition (JavaScript)
DESCRIPTION: This code snippet defines a dashboard layout component in JavaScript. It accepts a `children` prop, which represents the content to be rendered within the layout. The layout is a simple section element that wraps the children.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export default function DashboardLayout({ children }) {
  return <section>{children}</section>
}
```

----------------------------------------

TITLE: Upgrading Next.js to Latest Version using npm
DESCRIPTION: This command upgrades Next.js to the latest version (>= 14.1.0) to remove the warning about Webpack Build Worker automatic opt-out. It uses npm to install the latest version of Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/webpack-build-worker-opt-out.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@latest
```

----------------------------------------

TITLE: Using useRouter for Navigation in Next.js - TSX
DESCRIPTION: This snippet demonstrates how to use the useRouter hook from Next.js to programmatically navigate to the '/dashboard' route when a button is clicked. It imports useRouter from 'next/navigation' and creates a button that uses the router's push method to navigate.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard/')}> 
      Dashboard
    </button>
  )
}

```

----------------------------------------

TITLE: Redirecting with redirect Function (TypeScript)
DESCRIPTION: Demonstrates using the `redirect` function within a Next.js Server Action (`createPost`). It shows calling a placeholder database operation, revalidating a cache path, and then redirecting the user to a newly created post's page. This is typically used after an event or mutation in App Router server contexts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}
```

----------------------------------------

TITLE: Direct server-side data fetching with getStaticProps (JavaScript)
DESCRIPTION: This snippet illustrates how to load posts directly from a server-side function (`loadPosts`) within `getStaticProps` in a Next.js application. This avoids the need for an API route and improves performance by directly accessing the data source.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
// The following function is shared
// with getStaticProps and API routes
// from a `lib/` directory
export async function loadPosts() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts/')
  const data = await res.json()

  return data
}
```

----------------------------------------

TITLE: Creating a Basic Page in Next.js
DESCRIPTION: Defines a simple page component that renders a heading. In Next.js, pages are created by exporting a default React component from a page file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1>Hello Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1>Hello Next.js!</h1>
}
```

----------------------------------------

TITLE: User Provider with Context (JavaScript)
DESCRIPTION: This code implements a React Context Provider for managing user data in a Next.js application using JavaScript.  It creates a `UserContext` and a custom hook `useUser` for accessing the context. The `UserProvider` component accepts a `userPromise` prop (a Promise of user data) and makes it available to its children through the context. This pattern enables easier access to the user data from Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
'use client'

import { createContext, useContext, ReactNode } from 'react'

const UserContext = createContext(null)

export function useUser() {
  let context = useContext(UserContext)
  if (context === null) {
    throw new Error('useUser must be used within a UserProvider')
  }
  return context
}

export function UserProvider({ children, userPromise }) {
  return (
    <UserContext.Provider value={{ userPromise }}>
      {children}
    </UserContext.Provider>
  )
}
```

----------------------------------------

TITLE: Modifying scripts in package.json
DESCRIPTION: This code snippet shows how to modify the scripts section in `package.json` to correctly handle development, build, and production environments. The `dev` script starts the custom server, the `build` script executes the Next.js build process, and the `start` script starts the custom server in production mode by setting the `NODE_ENV` environment variable to `production`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/build-dir-not-writeable.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "node server.js",
    "build": "next build",
    "start": "NODE_ENV=production node server.js"
  }
}
```

----------------------------------------

TITLE: Correct Async Context Usage with cookies in Next.js
DESCRIPTION: This code demonstrates the correct way to handle async context when using the `cookies` function from `next/headers`. By calling `cookies().getAll()` before the `setTimeout` and storing the result, the cookie data is accessed within the initial async context, avoiding the DynamicServerError in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/dynamic-server-error.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

async function getCookieData() {
  const cookieData = cookies().getAll()
  return new Promise((resolve) =>
    setTimeout(() => {
      resolve(cookieData)
    }, 1000)
  )
}

export default async function Page() {
  const cookieData = await getCookieData()
  return <div>Hello World</div>
}
```

----------------------------------------

TITLE: Specifying a Subset for Google Fonts
DESCRIPTION: This code snippet shows how to specify a subset when importing a Google Font using `next/font/google`.  Subsetting reduces the font file size, improving performance. This example sets the subset to 'latin'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_11

LANGUAGE: jsx
CODE:
```
const inter = Inter({ subsets: ['latin'] })
```

----------------------------------------

TITLE: Handling Fetch Requests with Caching Options in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates the use of caching options within `fetch` requests in a RootLayout component. The example shows how requests can be optionally cached using `cache` options, optimizing data fetching strategies based on application needs and Next.js configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
export default async function RootLayout() {\n  const a = await fetch('https://...') // Not Cached\n  const b = await fetch('https://...', { cache: 'force-cache' }) // Cached\n\n  // ...\n}
```

LANGUAGE: js
CODE:
```
// Since this is the root layout, all fetch requests in the app\n// that don't set their own cache option will be cached.\nexport const fetchCache = 'default-cache'\n\nexport default async function RootLayout() {\n  const a = await fetch('https://...') // Cached\n  const b = await fetch('https://...', { cache: 'no-store' }) // Not cached\n\n  // ...\n}
```

----------------------------------------

TITLE: Configuring Jest with Next.js in TypeScript
DESCRIPTION: This TypeScript configuration file updates Jest to use `next/jest`.  It defines a `createJestConfig` function which is then used to configure Jest for Next.js, including setting the test environment to `jsdom`, coverage provider to `v8` and specifying the directory to load Next.js configuration files from. This allows Jest to work seamlessly with Next.js projects.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import type { Config } from 'jest'
import nextJest from 'next/jest.js'

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const config: Config = {
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
export default createJestConfig(config)
```

----------------------------------------

TITLE: Showing a Pending State During Server Function Execution with TypeScript
DESCRIPTION: Demonstrates using React's useActionState hook in TypeScript to show a loading indicator while a Server Function is executing. The component displays different content based on the pending state.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
'use client'

import { useActionState } from 'react'
import { createPost } from '@/app/actions'
import { LoadingSpinner } from '@/app/ui/loading-spinner'

export function Button() {
  const [state, action, pending] = useActionState(createPost, false)

  return (
    <button onClick={async () => action()}>
      {pending ? <LoadingSpinner /> : 'Create Post'}
    </button>
  )
}
```

----------------------------------------

TITLE: Configuring Tailwind CSS with PostCSS
DESCRIPTION: This JavaScript module configures PostCSS to use the `@tailwindcss/postcss` plugin. This is necessary for Tailwind CSS to generate its styles during the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
"/** @type {import('tailwindcss').Config} */
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
}"
```

----------------------------------------

TITLE: Creating a Client Component with Children Prop in TypeScript
DESCRIPTION: This TypeScript example shows how to create a Client Component that accepts a children prop. The component maintains its own state with useState while rendering children passed from the parent component. This pattern enables the separation of client-side interactivity from server-rendered content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_17

LANGUAGE: tsx
CODE:
```
'use client'

import { useState } from 'react'

export default function ClientComponent({
  children,
}: {
  children: React.ReactNode
}) {
  const [count, setCount] = useState(0)

  return (
    <>
      <button onClick={() => setCount(count + 1)}>{count}</button>
      {children}
    </>
  )
}
```

----------------------------------------

TITLE: Revalidating A Specific URL
DESCRIPTION: Demonstrates how to use `revalidatePath` to invalidate the cache for a single, specific URL path. This ensures that the next visit to '/blog/post-1' will fetch fresh data instead of using the cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/post-1')
```

----------------------------------------

TITLE: Composing Server Components inside Client Components in JavaScript
DESCRIPTION: This JavaScript example demonstrates how to compose a Server Component as a child of a Client Component in a Next.js page. By passing the Server Component as children, it can be rendered on the server independently from the Client Component that will be hydrated on the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_20

LANGUAGE: jsx
CODE:
```
// This pattern works:
// You can pass a Server Component as a child or prop of a
// Client Component.
import ClientComponent from './client-component'
import ServerComponent from './server-component'

// Pages in Next.js are Server Components by default
export default function Page() {
  return (
    <ClientComponent>
      <ServerComponent />
    </ClientComponent>
  )
}
```

----------------------------------------

TITLE: Creating a Basic GET Route Handler in Next.js
DESCRIPTION: Demonstrates how to create a simple GET route handler that returns a JSON response with a 'Hello World' message. This is the most basic implementation of a Route Handler in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export async function GET() {
  return Response.json({ message: 'Hello World' })
}
```

LANGUAGE: javascript
CODE:
```
export async function GET() {
  return Response.json({ message: 'Hello World' })
}
```

----------------------------------------

TITLE: Defining Server Component Reading Cookies (JavaScript)
DESCRIPTION: Defines an asynchronous Server Component that accesses dynamic data from the incoming request using `next/headers.cookies()`. Accessing such dynamic APIs causes the component, and potentially its parent tree, to be rendered dynamically.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { cookies } from 'next/headers'

export async function User() {
  const session = (await cookies()).get('session')?.value
  return '...'
}
```

----------------------------------------

TITLE: Implementing ISR Dynamic Route App Router TSX
DESCRIPTION: Configures a dynamic route segment in Next.js App Router for ISR. It sets `revalidate` to 60 seconds for time-based cache invalidation, defines `generateStaticParams` to pre-render specific paths at build time, and uses `dynamicParams = true` to handle unknown paths on-demand. The `Page` component fetches data for the specific ID and renders the content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
interface Post {
  id: string
  title: string
  content: string
}

// Next.js will invalidate the cache when a
// request comes in, at most once every 60 seconds.
export const revalidate = 60

// We'll prerender only the params from `generateStaticParams` at build time.
// If a request comes in for a path that hasn't been generated,
// Next.js will server-render the page on-demand.
export const dynamicParams = true // or false, to 404 on unknown paths

export async function generateStaticParams() {
  const posts: Post[] = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  return posts.map((post) => ({
    id: String(post.id),
  }))
}

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const post: Post = await fetch(`https://api.vercel.app/blog/${id}`).then(
    (res) => res.json()
  )
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Running Next.js Development Server with Yarn
DESCRIPTION: This snippet shows the commands to install dependencies and start the Next.js development server using Yarn. `yarn install` installs the required packages, while `yarn dev` starts the development server, usually on localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Updating Scripts in package.json
DESCRIPTION: This code snippet demonstrates how to update the scripts in the `package.json` file to use Next.js commands. These commands are used for development, building, and starting the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_24

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}
```

----------------------------------------

TITLE: Basic JavaScript Middleware Function Definition
DESCRIPTION: Minimal example of defining a middleware function in JavaScript. This shows the basic structure of a middleware function that can be used to process requests before they reach the route handlers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
export function middleware(request) {
  // Middleware logic goes here
}
```

----------------------------------------

TITLE: Introduction to Next.js Metadata Exports (TSX/JSX)
DESCRIPTION: Introduces the two primary ways to define metadata in Next.js App Router layout or page files: exporting a static `metadata` object or an asynchronous `generateMetadata` function. Both methods serve different use cases depending on whether the metadata is known statically or needs to be generated dynamically.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next';

// either Static metadata
export const metadata: Metadata = {
  title: '...',
};

// or Dynamic metadata
export async function generateMetadata({ params }) {
  return {
    title: '...',
  };
}
```

LANGUAGE: jsx
CODE:
```
// either Static metadata
export const metadata = {
  title: '...',
};

// or Dynamic metadata
export async function generateMetadata({ params }) {
  return {
    title: '...',
  };
}
```

----------------------------------------

TITLE: Using Link Component for Client-Side Navigation in Next.js
DESCRIPTION: This snippet demonstrates how to use the Link component from next/link to create client-side route transitions between pages in a Next.js application. It shows linking to static and dynamic routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Home() {
  return (
    <ul>
      <li>
        <Link href="/">Home</Link>
      </li>
      <li>
        <Link href="/about">About Us</Link>
      </li>
      <li>
        <Link href="/blog/hello-world">Blog Post</Link>
      </li>
    </ul>
  )
}

export default Home
```

----------------------------------------

TITLE: Configuring CORS Headers in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure CORS headers globally in `next.config.js` using the `async headers()` function. It sets `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` for requests matching the `/api/:path*` source pattern, enabling cross-origin requests to your API routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_13

LANGUAGE: js
CODE:
```
async headers() {
    return [
      {
        source: "/api/:path*",
        headers: [
          {
            key: "Access-Control-Allow-Origin",
            value: "*", // Set your origin
          },
          {
            key: "Access-Control-Allow-Methods",
            value: "GET, POST, PUT, DELETE, OPTIONS",
          },
          {
            key: "Access-Control-Allow-Headers",
            value: "Content-Type, Authorization",
          },
        ],
      },
    ];
  },
```

----------------------------------------

TITLE: Managing Cookies in Next.js Route Handlers
DESCRIPTION: Demonstrates how to handle cookies in a Route Handler using the cookies() function from next/headers. Shows how to get, set, and delete cookies within a handler.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request: NextRequest) {
  const cookieStore = await cookies()

  const a = cookieStore.get('a')
  const b = cookieStore.set('b', '1')
  const c = cookieStore.delete('c')
}
```

LANGUAGE: javascript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request) {
  const cookieStore = await cookies()

  const a = cookieStore.get('a')
  const b = cookieStore.set('b', '1')
  const c = cookieStore.delete('c')
}
```

----------------------------------------

TITLE: Defining Environment Variables in .env File (Next.js)
DESCRIPTION: Next.js automatically loads environment variables from `.env` files into `process.env`. Variables defined here are typically available on the server-side.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_0

LANGUAGE: txt
CODE:
```
DB_HOST=localhost
DB_USER=myuser
DB_PASS=mypassword
```

----------------------------------------

TITLE: Add TypeScript Type Definition for Dynamic Params in Next.js
DESCRIPTION: This snippet illustrates how to add a TypeScript type annotation to the `params` prop of a page component in a dynamic route. This ensures type safety when accessing the dynamic segment value, defining the structure and types of the expected parameters based on the route segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/10-dynamic-routes.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  return <h1>My Page</h1>
}
```

----------------------------------------

TITLE: Importing and Using Fonts with CSS Variables in Next.js
DESCRIPTION: This snippet shows how to import a Google font and set it up with a CSS variable in a Next.js application. The Inter font is imported and configured with the variable option for use with external CSS.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Inter } from 'next/font/google'
import styles from '../styles/component.module.css'

const inter = Inter({
  variable: '--font-inter',
})
```

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'
import styles from '../styles/component.module.css'

const inter = Inter({
  variable: '--font-inter',
})
```

----------------------------------------

TITLE: On-demand Revalidation Server Action App Router TS
DESCRIPTION: Demonstrates how to use the `revalidatePath` function within a Next.js Server Action to clear the cache for a specific path (`/posts`) on demand. This is typically triggered by an event like adding a new post, ensuring the next request fetches fresh data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost() {
  // Invalidate the /posts route in the cache
  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Middleware for CSP with Nonce in Next.js (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to add a Content Security Policy (CSP) header using middleware in Next.js, incorporating a dynamically generated nonce for enhanced security. It generates a unique nonce, constructs the CSP header string, and then applies it to both the request and the response. Dynamic rendering is required for nonce generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')
  const cspHeader = `
    default-src 'self';
    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';
    style-src 'self' 'nonce-${nonce}';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`
  // Replace newline characters and spaces
  const contentSecurityPolicyHeaderValue = cspHeader
    .replace(/\s{2,}/g, ' ')
    .trim()

  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-nonce', nonce)

  requestHeaders.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  })
  response.headers.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  return response
}
```

----------------------------------------

TITLE: Implementing a Dictionary Loader Function in TypeScript and JavaScript
DESCRIPTION: This code defines a getDictionary function that dynamically imports localized dictionaries based on the requested locale. It supports both TypeScript and JavaScript implementations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import 'server-only'

const dictionaries = {
  en: () => import('./dictionaries/en.json').then((module) => module.default),
  nl: () => import('./dictionaries/nl.json').then((module) => module.default),
}

export const getDictionary = async (locale: 'en' | 'nl') =>
  dictionaries[locale]()
```

LANGUAGE: javascript
CODE:
```
import 'server-only'

const dictionaries = {
  en: () => import('./dictionaries/en.json').then((module) => module.default),
  nl: () => import('./dictionaries/nl.json').then((module) => module.default),
}

export const getDictionary = async (locale) => dictionaries[locale]()
```

----------------------------------------

TITLE: Handling Server Action Response with useActionState (JavaScript)
DESCRIPTION: Demonstrates a Next.js Server Action designed to work with the `useActionState` hook. It accepts `prevState` and `formData`, performs an asynchronous operation (simulated fetch), and returns a serializable object (error message) on failure or uses `redirect` on success.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createUser(prevState, formData) {
  const res = await fetch('https://...')
  const json = await res.json()

  if (!res.ok) {
    return { message: 'Please enter a valid email' }
  }

  redirect('/dashboard')
}
```

----------------------------------------

TITLE: Example Next.js 13 Link Component - JSX
DESCRIPTION: Demonstrates the updated syntax for the Next.js Link component in version 13. The `<Link>` component now automatically renders an `<a>` tag, eliminating the need for a nested `<a>` child and allowing props to be passed directly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
<Link href="/about">
  About
</Link>
```

----------------------------------------

TITLE: Reading Request Body in Next.js - JavaScript
DESCRIPTION: This JavaScript example shows how to read the request body and return it as a JSON response from a POST route, utilizing the Web API methods to parse the body.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
export async function POST(request) {
  const res = await request.json()
  return Response.json({ res })
}
```

----------------------------------------

TITLE: Handling Server Action Response with useActionState (TypeScript)
DESCRIPTION: Demonstrates a Next.js Server Action designed to work with the `useActionState` hook. It accepts `prevState` and `formData`, performs an asynchronous operation (simulated fetch), and returns a serializable object (error message) on failure or uses `redirect` on success.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createUser(prevState: any, formData: FormData) {
  const res = await fetch('https://...')
  const json = await res.json()

  if (!res.ok) {
    return { message: 'Please enter a valid email' }
  }

  redirect('/dashboard')
}
```

----------------------------------------

TITLE: Enabling React Compiler in Next.js Configuration (JavaScript)
DESCRIPTION: Configuration to enable the React Compiler in next.config.js file. This sets the experimental.reactCompiler option to true.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    reactCompiler: true,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Defining Public Environment Variable (NEXT_PUBLIC_, Next.js)
DESCRIPTION: Prefixing an environment variable with `NEXT_PUBLIC_` makes its value accessible in the browser by inlining it into the JavaScript bundle at build time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_8

LANGUAGE: txt
CODE:
```
NEXT_PUBLIC_ANALYTICS_ID=abcdefghijk
```

----------------------------------------

TITLE: Reading Runtime Environment Variable in App Router Server Component
DESCRIPTION: This snippet demonstrates how to access a runtime environment variable (`process.env.MY_VALUE`) within an App Router Server Component. By using `connection` from `next/server` or other dynamic APIs, the component opts into dynamic rendering, ensuring the environment variable is evaluated at runtime rather than being inlined at build time. This is useful for configurations that differ between environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

----------------------------------------

TITLE: Updating package.json scripts for Next.js
DESCRIPTION: This code snippet updates the `package.json` scripts to use Next.js commands for development, building, and starting the application. It defines the `dev`, `build`, and `start` scripts using `next dev`, `next build`, and `npx serve@latest ./build` respectively.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_21

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "npx serve@latest ./build"
  }
}
```

----------------------------------------

TITLE: Defining a Server Action in Next.js (TypeScript)
DESCRIPTION: This snippet defines a simple Server Action in Next.js using TypeScript. The `'use server'` directive indicates that the function should be executed on the server. This allows you to perform server-side operations directly from client components without creating separate API routes. The defined create function is an example, that doesn't have any implementation. 
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_13

LANGUAGE: typescript
CODE:
```
'use server'

export async function create() {}
```

----------------------------------------

TITLE: Generate Parent Dynamic Segment Params in Layout (Top-Down Step 1) Next.js
DESCRIPTION: This code defines the `generateStaticParams` function within a layout segment file (e.g., `layout.tsx`/`layout.js`) to generate static parameters for the parent dynamic segments in its route. It fetches data and maps it to an array of objects, each containing parameters for the parent segments (`category`). This function pre-renders the routes up to the layout level.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
// Generate segments for [category]
export async function generateStaticParams() {
  const products = await fetch('https://.../products').then((res) => res.json())

  return products.map((product) => ({
    category: product.category.slug,
  }))
}

export default function Layout({
  params,
}: {
  params: Promise<{ category: string }>
}) {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
// Generate segments for [category]
export async function generateStaticParams() {
  const products = await fetch('https://.../products').then((res) => res.json())

  return products.map((product) => ({
    category: product.category.slug,
  }))
}

export default function Layout({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Basic CLI Command for Next.js Project Creation
DESCRIPTION: The fundamental command to create a new Next.js application using npx, allowing optional project naming and configuration options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/create-next-app.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest [project-name] [options]
```

----------------------------------------

TITLE: Wrapping App with Provider in Root Layout (TSX/JS)
DESCRIPTION: The root layout file (`app/layout.tsx`/`.js`) for the Next.js application. It wraps the entire application content (`children`) with the `NavigationBlockerProvider` to make the context state available to all components within the application tree.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_27

LANGUAGE: tsx
CODE:
```
import { NavigationBlockerProvider } from './contexts/navigation-blocker';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <NavigationBlockerProvider>{children}</NavigationBlockerProvider>
      </body>
    </html>
  );
}
```

LANGUAGE: jsx
CODE:
```
import { NavigationBlockerProvider } from './contexts/navigation-blocker';

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <NavigationBlockerProvider>{children}</NavigationBlockerProvider>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Configuring Experimental App Directory in Next.js
DESCRIPTION: This snippet illustrates how to enable the experimental app directory feature in Next.js by adding 'appDir: true' to the configuration object in 'next.config.js'. The configuration is typed using TypeScript for better IDE support. Ensure you have Next.js installed as a dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/experimental-app-dir-config.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Installing Dependencies and Running Dev Server
DESCRIPTION: These commands install the project dependencies and start the Next.js development server. The commands utilize npm, Yarn, and pnpm respectively. The development server is typically accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Implementing revalidateTag in a Route Handler
DESCRIPTION: Illustrates how to create a Next.js Route Handler endpoint that triggers cache revalidation using `revalidateTag`. The example sets up a GET handler that reads a cache tag from the request's search parameters and calls `revalidateTag` with the retrieved value, returning a JSON response indicating success.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server'
import { revalidateTag } from 'next/cache'

export async function GET(request: NextRequest) {
  const tag = request.nextUrl.searchParams.get('tag')
  revalidateTag(tag)
  return Response.json({ revalidated: true, now: Date.now() })
}
```

LANGUAGE: javascript
CODE:
```
import { revalidateTag } from 'next/cache'

export async function GET(request) {
  const tag = request.nextUrl.searchParams.get('tag')
  revalidateTag(tag)
  return Response.json({ revalidated: true, now: Date.now() })
}
```

----------------------------------------

TITLE: Creating New User - Next.js App Router - TypeScript/JavaScript
DESCRIPTION: Implements a user signup action for the Next.js App Router. It handles validating form data, securely hashing the user's password using bcrypt, and inserting the new user record into a database. The function returns an object indicating an error if the database insertion fails.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export async function signup(state: FormState, formData: FormData) {
  // 1. Validate form fields
  // ...

  // 2. Prepare data for insertion into database
  const { name, email, password } = validatedFields.data
  // e.g. Hash the user's password before storing it
  const hashedPassword = await bcrypt.hash(password, 10)

  // 3. Insert the user into the database or call an Auth Library's API
  const data = await db
    .insert(users)
    .values({
      name,
      email,
      password: hashedPassword,
    })
    .returning({ id: users.id })

  const user = data[0]

  if (!user) {
    return {
      message: 'An error occurred while creating your account.',
    }
  }

  // TODO:
  // 4. Create user session
  // 5. Redirect user
}
```

LANGUAGE: JavaScript
CODE:
```
export async function signup(state, formData) {
  // 1. Validate form fields
  // ...

  // 2. Prepare data for insertion into database
  const { name, email, password } = validatedFields.data
  // e.g. Hash the user's password before storing it
  const hashedPassword = await bcrypt.hash(password, 10)

  // 3. Insert the user into the database or call an Library API
  const data = await db
    .insert(users)
    .values({
      name,
      email,
      password: hashedPassword,
    })
    .returning({ id: users.id })

  const user = data[0]

  if (!user) {
    return {
      message: 'An error occurred while creating your account.',
    }
  }

  // TODO:
  // 4. Create user session
  // 5. Redirect user
}
```

----------------------------------------

TITLE: Root Layout Definition (JavaScript)
DESCRIPTION: This code snippet defines a root layout component in JavaScript. It is used to define the `<html>` and `<body>` tags for the application. It accepts a `children` prop, which represents the content to be rendered within the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Error Boundary Implementation in Next.js
DESCRIPTION: Client-side error boundary component that handles uncaught exceptions and provides error recovery functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/05-error-handling.mdx#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
'use client'

import { useEffect } from 'react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

LANGUAGE: javascript
CODE:
```
'use client'

import { useEffect } from 'react'

export default function Error({ error, reset }) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Using CSS Modules in a Next.js Component - TSX/JSX
DESCRIPTION: Import the CSS Module file into a component using a variable name (e.g., `styles`). Access the generated unique class names via the imported object and apply them to elements using the `className` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import styles from './styles.module.css'

export default function Page({ children }: { children: React.ReactNode }) {
  return <main className={styles.blog}>{children}</main>
}
```

LANGUAGE: jsx
CODE:
```
import styles from './styles.module.css'

export default function Page({ children }) {
  return <main className={styles.blog}>{children}</main>
}
```

----------------------------------------

TITLE: Implementing Sequential Data Fetching in Next.js
DESCRIPTION: Illustrates the sequential data fetching pattern where data fetching in nested components depends on data from parent components. The `Page` component fetches artist data, and the `Playlists` component, rendered as a child, fetches playlists using the `artistID` received as a prop. This pattern can introduce latency if dependencies are deep, but is necessary when one fetch requires the result of another.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
import { Suspense } from 'react';

export default async function Page({
  params,
}: {
  params: Promise<{ username: string }>;
}) {
  const { username } = await params;
  // Get artist information
  const artist = await getArtist(username);

  return (
    <>
      <h1>{artist.name}</h1>
      {/* Show fallback UI while the Playlists component is loading */}
      <Suspense fallback={<div>Loading...</div>}>
        {/* Pass the artist ID to the Playlists component */}
        <Playlists artistID={artist.id} />
      </Suspense>
    </>
  );
}

async function Playlists({ artistID }: { artistID: string }) {
  // Use the artist ID to fetch playlists
  const playlists = await getArtistPlaylists(artistID);

  return (
    <ul>
      {playlists.map((playlist) => (
        <li key={playlist.id}>{playlist.name}</li>
      ))}
    </ul>
  );
}
```

LANGUAGE: javascript
CODE:
```
import { Suspense } from 'react';

export default async function Page({ params }) {
  const { username } = await params;
  // Get artist information
  const artist = await getArtist(username);

  return (
    <>
      <h1>{artist.name}</h1>
      {/* Show fallback UI while the Playlists component is loading */}
      <Suspense fallback={<div>Loading...</div>}>
        {/* Pass the artist ID to the Playlists component */}
        <Playlists artistID={artist.id} />
      </Suspense>
    </>
  );
}

async function Playlists({ artistID }) {
  // Use the artist ID to fetch playlists
  const playlists = await getArtistPlaylists(artistID);

  return (
    <ul>
      {playlists.map((playlist) => (
        <li key={playlist.id}>{playlist.name}</li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Using Tailwind CSS Classes (App Router - TSX)
DESCRIPTION: This TypeScript code demonstrates how to use Tailwind CSS utility classes in a Next.js component. It renders a heading with specified text size, font weight, and underline styling using Tailwind classes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
"export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}"
```

----------------------------------------

TITLE: Using the useRouter Hook Next.js JSX
DESCRIPTION: Demonstrates how to use the useRouter hook in a JavaScript Client Component for programmatic navigation. It requires the 'use client' directive and importing useRouter from 'next/navigation'. The example navigates to '/dashboard' when a button is clicked using router.push().
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}
```

----------------------------------------

TITLE: Routing Requests with Next.js Rewrites
DESCRIPTION: This snippet demonstrates how to use the `rewrites` function in the designated 'router' `next.config.js` to forward incoming requests for specific paths (like `/blog` and `/blog/:path+`) to the domain where another zone application is hosted. This is the recommended method for routing traffic to different zone applications based on URL path prefixes. The destination uses an environment variable for flexibility.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
async rewrites() {
    return [
        {
            source: '/blog',
            destination: `${process.env.BLOG_DOMAIN}/blog`,
        },
        {
            source: '/blog/:path+',
            destination: `${process.env.BLOG_DOMAIN}/blog/:path+`,
        }
    ];
}
```

----------------------------------------

TITLE: Interactive Next.js App Creation
DESCRIPTION: These commands demonstrate how to start the interactive project creation process using `create-next-app`.  The user is prompted to answer questions about project settings, such as whether to use TypeScript. The commands use different package managers: npm, yarn, pnpm and bun.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
# or
yarn create next-app
# or
pnpm create next-app
# or
bunx create-next-app
```

----------------------------------------

TITLE: Using the useRouter Hook Next.js TSX
DESCRIPTION: Shows how to use the useRouter hook in a TypeScript Client Component to programmatically navigate. It requires the 'use client' directive and importing useRouter from 'next/navigation'. The example navigates to '/dashboard' when a button is clicked using router.push().
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}
```

----------------------------------------

TITLE: Defining Static Metadata Object in Next.js (TSX/JSX)
DESCRIPTION: Demonstrates defining static metadata by exporting a `metadata` object with common fields like `title` and `description`. This method is suitable for metadata that doesn't change based on runtime data and can be defined directly in the layout or page file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: '...',
  description: '...',
};

export default function Page() {}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: '...',
  description: '...',
};

export default function Page() {}
```

----------------------------------------

TITLE: Fixing Missing HTML/Body Tags in Next.js Root Layout
DESCRIPTION: Demonstrates how to properly structure a Next.js Root Layout component by adding the required HTML and body tags. The diff shows the transformation from an incorrect implementation that directly returns children to the correct implementation that wraps content in proper HTML structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-root-layout-tags.mdx#2025-04-21_snippet_0

LANGUAGE: diff
CODE:
```
export default function Layout({ children }: { children: React.ReactNode }) {
-  return children
+  return (
+    <html>
+      <body>
+        {children}
+      </body>
+    </html>
+  )
}
```

----------------------------------------

TITLE: Installing Dependencies and Running in Development Mode (npm)
DESCRIPTION: These commands install the necessary dependencies for the Next.js application using npm and then start the development server. The application will be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Starting the application - Bash
DESCRIPTION: This command starts the Next.js application in development mode. It uses the `yarn dev` command to start the development server, typically running on http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_12

LANGUAGE: bash
CODE:
```
$ yarn dev
```

----------------------------------------

TITLE: Dynamically Importing MDX App Router Typescript
DESCRIPTION: Shows how to use dynamic imports within an App Router route segment (`[slug]`) to load specific MDX files based on the slug parameter. Includes `generateStaticParams` for static pre-rendering and `dynamicParams = false` to restrict valid slugs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  const { default: Post } = await import(`@/content/${slug}.mdx`)

  return <Post />
}

export function generateStaticParams() {
  return [{ slug: 'welcome' }, { slug: 'about' }]
}

export const dynamicParams = false
```

----------------------------------------

TITLE: Running Next.js in development mode
DESCRIPTION: This snippet shows the commands to install dependencies and run the Next.js application in development mode using npm, yarn, and pnpm. This allows developers to test their application locally before deploying it.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Implementing Fallback Pages with getStaticPaths and getStaticProps in Next.js
DESCRIPTION: This code demonstrates how to create a dynamic post page with fallback functionality using Next.js. It includes the use of useRouter to detect fallback state, getStaticPaths to define pre-rendered paths, and getStaticProps for data fetching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#2025-04-23_snippet_4

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

function Post({ post }) {
  const router = useRouter()

  // If the page is not yet generated, this will be displayed
  // initially until getStaticProps() finishes running
  if (router.isFallback) {
    return <div>Loading...</div>
  }

  // Render post...
}

// This function gets called at build time
export async function getStaticPaths() {
  return {
    // Only `/posts/1` and `/posts/2` are generated at build time
    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],
    // Enable statically generating additional pages
    // For example: `/posts/3`
    fallback: true,
  }
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return {
    props: { post },
    // Re-generate the post at most once per second
    // if a request comes in
    revalidate: 1,
  }
}

export default Post
```

----------------------------------------

TITLE: Accessing Browser APIs in Client Component
DESCRIPTION: This code illustrates how to safely access browser APIs like `window` in a Next.js Client Component.  It uses the `useEffect` hook to ensure that the code accessing the `window` object only runs on the client-side, after the component has mounted.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_13

LANGUAGE: jsx
CODE:
```
'use client';

import { useEffect } from 'react';

export default function ClientComponent() {
  useEffect(() => {
    // You now have access to `window`
    console.log(window.innerHeight);
  }, [])

  return ...;
}
```

----------------------------------------

TITLE: Processing Webhooks in Next.js - JavaScript
DESCRIPTION: This JavaScript snippet shows how to implement a route handler to receive webhooks. It captures the request payload and handles exceptions, returning success or error responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
export async function POST(request) {
  try {
    const text = await request.text()
    // Process the webhook payload
  } catch (error) {
    return new Response(`Webhook error: ${error.message}`, {
      status: 400,
    })
  }

  return new Response('Success!', {
    status: 200,
  })
}
```

----------------------------------------

TITLE: Using URL Object for Dynamic Routing in Next.js
DESCRIPTION: This snippet illustrates how to use a URL object in the Link component's href prop for dynamic routing in Next.js. It shows how to specify the pathname and query parameters separately.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Posts({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link
            href={{
              pathname: '/blog/[slug]',
              query: { slug: post.slug },
            }}
          >
            {post.title}
          </Link>
        </li>
      ))}
    </ul>
  )
}

export default Posts
```

----------------------------------------

TITLE: Role-based route protection (tsx)
DESCRIPTION: This snippet shows how to implement role-based route protection using the `forbidden` function in a Server Component. It checks if the user has the 'admin' role and calls `forbidden()` if they do not, preventing unauthorized access to the route. It assumes `verifySession` is fetching user session data, including their role.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return (
    <main>
      <h1>Admin Dashboard</h1>
      <p>Welcome, {session.user.name}!</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Setting Fetch Revalidation in Next.js (TS)
DESCRIPTION: Demonstrates how to use the `next.revalidate` option with Next.js `fetch` to define the cache lifetime (in seconds) for a resource, allowing control over how often the data is refetched from the origin server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
fetch(`https://...`, { next: { revalidate: false | 0 | number } })
```

----------------------------------------

TITLE: Running Next.js Development Server with npm
DESCRIPTION: This snippet shows the commands to install dependencies and start the Next.js development server using npm. `npm install` installs the required packages, while `npm run dev` starts the development server, typically on localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Using forbidden in Server Component (tsx)
DESCRIPTION: This snippet demonstrates how to use the `forbidden` function within a Server Component to protect a route based on user roles. It imports `verifySession` and `forbidden`, verifies the user's session, checks if the user has the 'admin' role, and calls `forbidden()` if the user does not have the required role, rendering a 403 error page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return <></>
}
```

----------------------------------------

TITLE: Composing Server and Client Components in JavaScript
DESCRIPTION: JavaScript version of server and client component composition example.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-client.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import Header from './header'
import Counter from './counter' // This is a Client Component

export default function Page() {
  return (
    <div>
      <Header />
      <Counter />
    </div>
  )
}
```

----------------------------------------

TITLE: Importing External Stylesheets in Next.js Root Layout - TSX/JSX
DESCRIPTION: Import stylesheets from external npm packages directly into your root layout file. Next.js automatically handles including these styles in your application's bundle. This example imports Bootstrap CSS.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import 'bootstrap/dist/css/bootstrap.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className="container">{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import 'bootstrap/dist/css/bootstrap.css'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className="container">{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Matching Paths with Negative Lookahead Regex in Next.js Middleware Config JavaScript
DESCRIPTION: This snippet demonstrates using a regular expression with a negative lookahead in the `matcher` array within the Next.js Middleware `config`. The regex `/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)/` is used to match all request paths EXCEPT those starting with common static asset prefixes, API routes, or metadata files, efficiently applying the middleware to dynamic content routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico, sitemap.xml, robots.txt (metadata files)
     */
    '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)/',
  ],
}
```

----------------------------------------

TITLE: Securing Pages Router API Route (JS)
DESCRIPTION: Illustrates securing a Pages Router API Route in JavaScript. The `handler` function checks if a user session exists via `getSession` and confirms the user possesses the 'admin' role before allowing access, sending 401 HTTP responses with error messages for failed authentication or authorization.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_42

LANGUAGE: js
CODE:
```
export default async function handler(req, res) {\n  const session = await getSession(req)\n\n  // Check if the user is authenticated\n  if (!session) {\n    res.status(401).json({\n      error: 'User is not authenticated',\n    })\n    return\n  }\n\n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    res.status(401).json({\n      error: 'Unauthorized access: User does not have admin privileges.',\n    })\n    return\n  }\n\n  // Proceed with the route for authorized users\n  // ... implementation of the API Route\n}
```

----------------------------------------

TITLE: Layout with Client Component Integration (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to integrate a Client Component within a Layout. The Client Component will re-render on navigation allowing access to hooks like `usePathname`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
import { ClientComponent } from '@/app/ui/ClientComponent'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <ClientComponent />
      {/* Other Layout UI */}
      <main>{children}</main>
    </>
  )
}
```

----------------------------------------

TITLE: Navigating to a Predefined Route with useRouter (JSX)
DESCRIPTION: This snippet showcases how to use the router.push method to navigate to a predefined route, in this case, '/about'. It imports the useRouter hook, accesses the router object, and calls router.push within an onClick handler to initiate the navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/about')}>
      Click me
    </button>
  )
}
```

----------------------------------------

TITLE: Defining Dashboard Layout in Next.js
DESCRIPTION: This snippet shows how to define a layout component specifically for the `/dashboard` route within the Next.js App Router. Defined in `app/dashboard/layout.tsx` or `app/dashboard/layout.js`, this component wraps all pages or nested layouts under the `/dashboard` path. It accepts a `children` prop representing the content it renders.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default function DashboardLayout({
  children, // will be a page or nested layout
}: {
  children: React.ReactNode
}) {
  return (
    <section>
      {/* Include shared UI here e.g. a header or sidebar */}
      <nav></nav>

      {children}
    </section>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
export default function DashboardLayout({
  children, // will be a page or nested layout
}) {
  return (
    <section>
      {/* Include shared UI here e.g. a header or sidebar */}
      <nav></nav>

      {children}
    </section>
  )
}
```

----------------------------------------

TITLE: Install Core Dependencies (Bash)
DESCRIPTION: Command to manually install the necessary core packages, including `next`, `react`, and `react-dom`, required to build a Next.js application using npm.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install next@latest react@latest react-dom@latest
```

----------------------------------------

TITLE: Render Dashboard Based on Role (Next.js Server Component) - TSX
DESCRIPTION: This Next.js Server Component demonstrates role-based access control by calling `verifySession()` from the DAL. It retrieves the user's role from the session object and conditionally renders different dashboard components (`AdminDashboard`, `UserDashboard`) or redirects based on the role.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_28

LANGUAGE: TSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { redirect } from 'next/navigation'

export default async function Dashboard() {
  const session = await verifySession()
  const userRole = session?.user?.role // Assuming 'role' is part of the session object

  if (userRole === 'admin') {
    return <AdminDashboard />
  } else if (userRole === 'user') {
    return <UserDashboard />
  } else {
    redirect('/login')
  }
}
```

----------------------------------------

TITLE: Using Next.js Image Component
DESCRIPTION: Example of implementing the Next.js Image component for optimized image loading. The component includes essential properties like src, alt, width, and height for proper image rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

function Home() {
  return (
    <Image
      src="https://example.com/hero.jpg"
      alt="Landscape picture"
      width={800}
      height={500}
    />
  )
}

export default Home
```

----------------------------------------

TITLE: Using Next.js Script Component
DESCRIPTION: This code snippet demonstrates how to use the `next/script` component to load a third-party script in a Next.js application. It imports the `Script` component from `next/script` and uses it to load a script from a specified URL. This approach is recommended for optimal performance and compatibility with React Suspense and streaming server-rendering. The `src` prop is required to specify the script's URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-script-tags-in-head-component.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import Script from 'next/script'

export default function Dashboard() {
  return (
    <>
      <Script src="https://example.com/script.js" />
    </>
  )
}
```

----------------------------------------

TITLE: Defining Layout with Parallel Routes in Typescript
DESCRIPTION: This code snippet shows how to define a layout component that accepts parallel routes as props in Typescript. The layout component receives `children`, `team`, and `analytics` props, each representing a different slot, and renders them in parallel.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export default function Layout({
  children,
  team,
  analytics,
}: {
  children: React.ReactNode
  analytics: React.ReactNode
  team: React.ReactNode
}) {
  return (
    <>
      {children}
      {team}
      {analytics}
    </>
  )
}
```

----------------------------------------

TITLE: 404 Not Found Error Handling
DESCRIPTION: Implementation of 404 error handling using Next.js notFound function and custom not-found page component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { getPostBySlug } from '@/lib/posts'

export default async function Page({ params }: { params: { slug: string } }) {
  const { slug } = await params
  const post = getPostBySlug(slug)

  if (!post) {
    notFound()
  }

  return <div>{post.title}</div>
}
```

LANGUAGE: javascript
CODE:
```
import { getPostBySlug } from '@/lib/posts'

export default async function Page({ params }) {
  const { slug } = await params
  const post = getPostBySlug(slug)

  if (!post) {
    notFound()
  }

  return <div>{post.title}</div>
}
```

----------------------------------------

TITLE: Importing Tailwind CSS directives in Global Stylesheet (App Router)
DESCRIPTION: This CSS file imports the Tailwind CSS directives, which are used to inject Tailwind's generated styles. This file needs to be imported in the root layout to apply the styles globally in the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_2

LANGUAGE: css
CODE:
```
"@import 'tailwindcss';"
```

----------------------------------------

TITLE: Middleware Config Matcher in Next.js (JavaScript)
DESCRIPTION: This JavaScript code defines a matcher configuration for Next.js middleware. It specifies the paths on which the middleware should run, excluding API routes, static files, image optimization files, and the favicon. It also excludes prefetch requests to improve performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    {
      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',
      missing: [
        { type: 'header', key: 'next-router-prefetch' },
        { type: 'header', key: 'purpose', value: 'prefetch' },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Reading Request Body in Next.js - TypeScript
DESCRIPTION: This snippet demonstrates how to read the JSON body from a request in a POST route using standard Web API methods. It returns the parsed JSON as a response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
export async function POST(request: Request) {
  const res = await request.json()
  return Response.json({ res })
}
```

----------------------------------------

TITLE: Control Dynamic Segment Handling in Next.js (TSX/JS)
DESCRIPTION: Define the behavior when a dynamic segment is requested that was not included in the `generateStaticParams` output. Export `dynamicParams` as `true` (default) to generate segments on demand, or `false` to return a 404.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
export const dynamicParams = true // true | false,
```

LANGUAGE: JavaScript
CODE:
```
export const dynamicParams = true // true | false,
```

----------------------------------------

TITLE: Invoking notFound() in Next.js
DESCRIPTION: This snippet demonstrates how to use the notFound function to handle user fetching errors in a Next.js application. If the user is not found, it calls the notFound() function to trigger a 404 error response. The fetchUser function handles fetching user data from an external API, and the Profile component orchestrates the logic and error handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/not-found.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { notFound } from 'next/navigation'

async function fetchUser(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const user = await fetchUser(id)

  if (!user) {
    notFound()
  }

  // ...
}
```

----------------------------------------

TITLE: Configuring Default Title Inheritance (TSX)
DESCRIPTION: Shows how a layout file can set a `title.default` in its metadata. This default title is then inherited by child route segments (like a `page.tsx`) that do not define their own `title` property.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: {
    default: 'Acme',
  },
};
```

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next';

export const metadata: Metadata = {};

// Output: <title>Acme</title>
```

----------------------------------------

TITLE: Setting a Cookie - JS
DESCRIPTION: This snippet shows how to set a cookie in a Next.js application through a Server Action or Route Handler using the `cookies` function. Various ways to define cookie parameters are provided.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function create(data) {
  const cookieStore = await cookies()

  cookieStore.set('name', 'lee')
  // or
  cookieStore.set('name', 'lee', { secure: true })
  // or
  cookieStore.set({
    name: 'name',
    value: 'lee',
    httpOnly: true,
    path: '/',
  })
}
```

----------------------------------------

TITLE: Handling Asynchronous Operations in Next.js API Routes
DESCRIPTION: This example shows how to handle asynchronous operations in an API route, including error handling and sending appropriate responses based on the operation's result.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const result = await someAsyncOperation()
    res.status(200).json({ result })
  } catch (err) {
    res.status(500).json({ error: 'failed to load data' })
  }
}
```

----------------------------------------

TITLE: Creating Cache Tags from External Data in JavaScript
DESCRIPTION: Shows how to apply cache tags from fetched data in JavaScript. This example tags cache entries with 'bookings-data' and uses ID from data fetched asynchronously.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
import { unstable_cacheTag as cacheTag } from 'next/cache'

export async function Bookings({ type = 'haircut' }) {
  async function getBookingsData() {
    'use cache'
    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)
    cacheTag('bookings-data', data.id)
    return data
  }
  return //...
}
```

----------------------------------------

TITLE: Passing Additional Arguments to Server Action via Bind (TSX/JSX)
DESCRIPTION: Shows how to use JavaScript's `bind()` method to pass additional, fixed arguments to a Server Action function before binding it to a form's `action` prop. This allows passing contextual data, like an item ID, alongside the form data during submission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'

import { updateUser } from './actions'

export function UserProfile({ userId }: { userId: string }) {
  const updateUserWithId = updateUser.bind(null, userId)

  return (
    <form action={updateUserWithId}>
      <input type="text" name="name" />
      <button type="submit">Update User Name</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { updateUser } from './actions'

export function UserProfile({ userId }) {
  const updateUserWithId = updateUser.bind(null, userId)

  return (
    <form action={updateUserWithId}>
      <input type="text" name="name" />
      <button type="submit">Update User Name</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Using server-only Package to Mark Server-Only Code
DESCRIPTION: Example of importing the server-only package in a module to mark it as server-only code, which will generate build-time errors if imported in client components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import 'server-only'

export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

----------------------------------------

TITLE: Defining a Theme Provider Component in TypeScript
DESCRIPTION: This snippet defines a ThemeProvider component that utilizes the createContext function to provide the theme context. The component is marked as a Client Component with the 'use client' directive, enabling it to be used in Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({
  children,
}: {
  children: React.ReactNode
}) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

----------------------------------------

TITLE: Manually updating React and React DOM versions in package.json
DESCRIPTION: This JSON snippet shows how to manually update the React and React DOM versions in the package.json file to the minimum suggested versions.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-version.mdx#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }
}
```

----------------------------------------

TITLE: Playwright Navigation Test (typescript)
DESCRIPTION: Defines a Playwright test to verify navigation between pages.  It navigates to the index page, clicks the 'About' link, and asserts that the URL and page content are correct. Depends on `@playwright/test` and a running Next.js development server on localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { test, expect } from '@playwright/test'

test('should navigate to the about page', async ({ page }) => {
  // Start from the index page (the baseURL is set via the webServer in the playwright.config.ts)
  await page.goto('http://localhost:3000/')
  // Find an element with the text 'About' and click on it
  await page.click('text=About')
  // The new URL should be "/about" (baseURL is used there)
  await expect(page).toHaveURL('http://localhost:3000/about')
  // The new page should contain an h1 with "About"
  await expect(page.locator('h1')).toContainText('About')
})
```

----------------------------------------

TITLE: Adding Fetch Cache Tags in Next.js (TS)
DESCRIPTION: Illustrates the usage of the `next.tags` option with Next.js `fetch` to assign custom tags to the cached resource, enabling programmatic on-demand revalidation of the cached data using the `revalidateTag` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
fetch(`https://...`, { next: { tags: ['collection'] } })
```

----------------------------------------

TITLE: Fetch User Data in DAL (Next.js/React Cache) - TSX
DESCRIPTION: This function fetches specific columns (id, name, email) for the authenticated user from the database after verifying the session using `verifySession()`. It returns the user object or null if the session is invalid or an error occurs. It also uses React's `cache` API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_24

LANGUAGE: TSX
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  try {
    const data = await db.query.users.findMany({
      where: eq(users.id, session.userId),
      // Explicitly return the columns you need rather than the whole user object
      columns: {
        id: true,
        name: true,
        email: true,
      },
    })

    const user = data[0]

    return user
  } catch (error) {
    console.log('Failed to fetch user')
    return null
  }
})
```

----------------------------------------

TITLE: Configuring Jest with Next.js in JavaScript
DESCRIPTION: This JavaScript configuration file sets up Jest to use the `next/jest` preset for Next.js applications.  It configures Jest with the necessary options to work with Next.js, specifying the test environment as 'jsdom', the coverage provider as 'v8' and setting the root directory for loading Next.js configuration files. The configuration enables Jest to understand and correctly test Next.js components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const nextJest = require('next/jest')

/** @type {import('jest').Config} */
const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const config = {
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(config)
```

----------------------------------------

TITLE: Allowing Dynamic Metadata by Marking Page Dynamic in Next.js (TSX)
DESCRIPTION: Resolves the metadata error when `generateMetadata` requires Request data by explicitly making the page dynamic. This is achieved by including a component that uses `await connection()` within a Suspense boundary, signaling to Next.js that the page must be rendered on every request. Requires `react`, `next/headers`, `next/server`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-metadata.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import { cookies } from 'next/headers'
import { connection } from 'next/server'

export async function generateMetadata() {
  const token = (await cookies()).get('token')
  const response = await fetch(..., { headers: { Authorization: token } })
  return {
    title: getTitle(response),
  }
}

async function DynamicMarker() {
  // This component renders nothing, but it will always
  // be dynamic because it waits for an actual connection.
  const Connection = async () => {
    await connection()
    return null
  }
  return (
    <Suspense>
      <Connection />
    </Suspense>
  )
}

export default function Page() {
  return (
    <>
      <article>This article is completely static</article>
      {/* Rendering this DynamicMarker component tells Next.js that
          this Page has some dynamic content. */}
      <DynamicMarker />
    </>
  )
}
```

----------------------------------------

TITLE: Displaying Images with Next/Image in JSX
DESCRIPTION: This code snippet demonstrates how to define React components in JSX to render images located within the `public` directory using Next.js's optimized `next/image` component. It shows how to reference static files from the base URL (`/`) and includes example usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/public-folder.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export function Avatar({ id, alt }) {
  return <Image src={`/avatars/${id}.png`} alt={alt} width="64" height="64" />
}

export function AvatarOfMe() {
  return <Avatar id="me" alt="A portrait of me" />
}
```

----------------------------------------

TITLE: Defining Middleware Function with TypeScript Types
DESCRIPTION: TypeScript example showing how to properly type the request parameter in a middleware function using the NextRequest type from next/server. This ensures type safety when working with request properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Middleware logic goes here
}
```

----------------------------------------

TITLE: Mixed Node.js and React Component Export - Next.js
DESCRIPTION: Example demonstrating problematic mixing of Node.js-specific code with React components in the same module.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
import Redis from 'ioredis'

const redis = new Redis(process.env.REDIS_URL)

export function MyComponent() {
  return <h1>Hello</h1>
}

export default redis
```

LANGUAGE: jsx
CODE:
```
import redis, { MyComponent } from '../lib/redis'

export async function getStaticProps() {
  const message = await redis.get('message')
  return {
    message,
  }
}

export default function Home() {
  return <MyComponent />
}
```

----------------------------------------

TITLE: Setting Priority Property on Next.js Image Component
DESCRIPTION: Example of setting the priority property on a Next.js Image component. When set to true, Next.js will preload the image and disable lazy loading, which is recommended for images that are the Largest Contentful Paint element.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
priority={false} // {false} | {true}
```

----------------------------------------

TITLE: Setting Simple String Title Metadata (JSX)
DESCRIPTION: A basic example showing how to set the page title using the `metadata` object with a simple string value for the `title` property. This is the most straightforward way to define a static title for a page or layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Next.js',
};
```

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: This section describes setting the necessary environment variables required for the Next.js application to communicate with Agility CMS. These variables include the Instance GUID, API Keys (Fetch and Preview), and the Security Key.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_2

LANGUAGE: text
CODE:
```
- `AGILITY_CMS_GUID` should be the **Instance GUID** field
- `AGILITY_CMS_API_FETCH_KEY` should be the **Live API Key** field
- `AGILITY_CMS_API_PREVIEW_KEY` should be the **Preview API Key** field - this is used when the site is in [Preview Mode](https://nextjs.org/docs/advanced-features/preview-mode) and allows your site to pull the latest content, regardless of whether it is published or not.
- `AGILITY_CMS_SECURITY_KEY` should be the **Security Key** field that can be found in **Settings** > **Global Security** - this is used to communicate between the CMS and your site to validate [Preview Mode](https://nextjs.org/docs/advanced-features/preview-mode)
```

----------------------------------------

TITLE: Revalidating Cache by Path (Next.js)
DESCRIPTION: Demonstrates using the `revalidatePath` function to manually revalidate data and trigger a re-render of route segments below a specified path, purging Data and Full Route Caches.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_9

LANGUAGE: JSX
CODE:
```
revalidatePath('/')
```

----------------------------------------

TITLE: Generating Image with External Data TSX
DESCRIPTION: Demonstrates creating a dynamic Open Graph image in TSX that fetches data from an external API based on route parameters. It uses `async/await` and `fetch` to retrieve data and renders it within an `ImageResponse` component, including predefined `alt`, `size`, and `contentType` exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_20

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'

export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}
export const contentType = 'image/png'

export default async function Image({ params }: { params: { slug: string } }) {
  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>
    res.json()
  )

  return new ImageResponse(
    (
      <div
        style={{
          fontSize: 48,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    ),
    {
      ...size,
    }
  )
}
```

----------------------------------------

TITLE: React Form Component with Error State
DESCRIPTION: Client-side form component using useActionState hook to handle and display server action errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
'use client'

import { useActionState } from 'react'
import { createPost } from '@/app/actions'

const initialState = {
  message: '',
}

export function Form() {
  const [state, formAction, pending] = useActionState(createPost, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="title">Title</label>
      <input type="text" id="title" name="title" required />
      <label htmlFor="content">Content</label>
      <textarea id="content" name="content" required />
      {state?.message && <p aria-live="polite">{state.message}</p>}
      <button disabled={pending}>Create Post</button>
    </form>
  )
}
```

LANGUAGE: javascript
CODE:
```
'use client'

import { useActionState } from 'react'
import { createPost } from '@/app/actions'

const initialState = {
  message: '',
}

export function Form() {
  const [state, formAction, pending] = useActionState(createPost, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="title">Title</label>
      <input type="text" id="title" name="title" required />
      <label htmlFor="content">Content</label>
      <textarea id="content" name="content" required />
      {state?.message && <p aria-live="polite">{state.message}</p>}
      <button disabled={pending}>Create Post</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Defining Static Viewport Object in TypeScript
DESCRIPTION: This snippet demonstrates how to export a static viewport object in a TypeScript file for use in Next.js applications. The exported object contains the theme color for the viewport.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Viewport } from 'next'

export const viewport: Viewport = {
  themeColor: 'black',
}

export default function Page() {}
```

----------------------------------------

TITLE: Using Imported Font Definitions in Next.js Components
DESCRIPTION: Example showing how to use multiple fonts imported from a font definitions file. Different fonts are applied to different text elements using className or style properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
import { inter, lora, sourceCodePro700, greatVibes } from '../styles/fonts'

export default function Page() {
  return (
    <div>
      <p className={inter.className}>Hello world using Inter font</p>
      <p style={lora.style}>Hello world using Lora font</p>
      <p className={sourceCodePro700.className}>
        Hello world using Source_Sans_3 font with weight 700
      </p>
      <p className={greatVibes.className}>My title in Great Vibes font</p>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { inter, lora, sourceCodePro700, greatVibes } from '../styles/fonts'

export default function Page() {
  return (
    <div>
      <p className={inter.className}>Hello world using Inter font</p>
      <p style={lora.style}>Hello world using Lora font</p>
      <p className={sourceCodePro700.className}>
        Hello world using Source_Sans_3 font with weight 700
      </p>
      <p className={greatVibes.className}>My title in Great Vibes font</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Defining Static Metadata in Next.js (JS)
DESCRIPTION: Shows how to define a static metadata object (`metadata`) in a Next.js `layout.js` or `page.js` file. It uses JSDoc (`@type {import("next").Metadata}`) to provide type hinting for the object structure, improving developer experience and catching potential errors. This object typically includes properties like `title` for the page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_26

LANGUAGE: js
CODE:
```
/** @type {import("next").Metadata} */
export const metadata = {
  title: 'Next.js',
}
```

----------------------------------------

TITLE: Accessing Session Data in Client Component via Context (TSX)
DESCRIPTION: Demonstrates using a custom hook (`useSession`) provided by an authentication library to access user session data within a Client Component (`'use client'`). This allows client-side operations like fetching user-specific data using `useSWR`, dependent on the session information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_39

LANGUAGE: tsx
CODE:
```
"use client";\n\nimport { useSession } from "auth-lib";\n\nexport default function Profile() {\n  const { userId } = useSession();\n  const { data } = useSWR(`/api/user/${userId}`, fetcher)\n\n  return (\n    // ...\n  );\n}
```

----------------------------------------

TITLE: Cypress E2E Configuration (JavaScript)
DESCRIPTION: Configures Cypress for End-to-End (E2E) testing using JavaScript. Defines the `setupNodeEvents` function within the `e2e` configuration block.  Requires the `cypress` package to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
const { defineConfig } = require('cypress')

module.exports = defineConfig({
  e2e: {
    setupNodeEvents(on, config) {},
  },
})
```

----------------------------------------

TITLE: Checking Active Link Using usePathname (App Router)
DESCRIPTION: This snippet shows how to identify the active link in a navigation menu within the App Router. It uses the `usePathname` hook to get the current path and compares it to the `href` of each Next.js Link component, conditionally applying a CSS class like 'active' to highlight the current page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function Links() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function Links() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}
```

----------------------------------------

TITLE: Using Public Env Vars in Client/Server Components (Pages Router, Next.js)
DESCRIPTION: Variables prefixed with `NEXT_PUBLIC_` can be accessed anywhere in your code, including client-side code, as their values are inlined during the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
import setupAnalyticsService from '../lib/my-analytics-service'

// 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'.
// It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`.
setupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)

function HomePage() {
  return <h1>Hello World</h1>
}

export default HomePage
```

----------------------------------------

TITLE: Revalidating Cache by Tag (Next.js)
DESCRIPTION: Provides an example of calling the `revalidateTag` function with a specific tag to purge all cache entries that were previously tagged with that identifier.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
revalidateTag('a')
```

----------------------------------------

TITLE: Linking to Dynamic Paths with Interpolation in Next.js
DESCRIPTION: This example shows how to create dynamic links using interpolation in Next.js. It demonstrates mapping over an array of posts and generating links with dynamic slugs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Posts({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${encodeURIComponent(post.slug)}`}>
            {post.title}
          </Link>
        </li>
      ))}
    </ul>
  )
}

export default Posts
```

----------------------------------------

TITLE: Specifying a Subset for Google Fonts
DESCRIPTION: This code snippet shows how to specify a subset when importing a Google Font using `next/font/google`.  Subsetting reduces the font file size, improving performance. This example sets the subset to 'latin'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
const inter = Inter({ subsets: ['latin'] })
```

----------------------------------------

TITLE: Next.js Configuration Example
DESCRIPTION: This code snippet demonstrates a basic `next.config.js` file with type checking.  It exports a configuration object that can be customized with various Next.js options. It's useful for ensuring configuration correctness and preventing errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-next-config.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
/**
 * @type {import('next').NextConfig}
 */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Client Component Form (JavaScript)
DESCRIPTION: This example shows a client component with a form, written in JavaScript, which triggers a server action to handle form submission and redirect. The action is called `navigate` and imported from `./actions`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
'use client'

import { navigate } from './actions'

export function ClientRedirect() {
  return (
    <form action={navigate}>
      <input type="text" name="id" />
      <button>Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Resolving Metadata Error by Caching Data in Next.js (TSX)
DESCRIPTION: Fixes the "Cannot access Request information or uncached data" error by adding the `'use cache'` directive to the data fetching function used within `generateMetadata`. This allows Next.js to include the metadata in the prerender for the static route.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-metadata.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { cms } from './cms'

export async function generateMetadata() {
  // By marking this function as cacheable, Next.js
  // can now include it in the prerender for this route.
  'use cache'
  const { title } = await cms.getPageData('/.../page')
  return {
    title,
  }
}

async function getPageText() {
  'use cache'
  const { text } = await cms.getPageData('/.../page')
  return text
}

export default async function Page() {
  // This text is cached so the main content of this route
  // is prerenderable.
  const text = await getPageText()
  return <article>{text}</article>
}
```

----------------------------------------

TITLE: Rendering Responsive Images with Static Imports in Next.js
DESCRIPTION: This snippet demonstrates how to render a responsive image using a static import in a Next.js component. It is particularly useful for non-dynamic images and allows the developer to specify sizes and styles conveniently.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_28

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'
import me from '../photos/me.jpg'

export default function Author() {
  return (
    <Image
      src={me}
      alt="Picture of the author"
      sizes="100vw"
      style={{
        width: '100%',
        height: 'auto',
      }}
    />
  )
}
```

----------------------------------------

TITLE: Redirect with Server Action in Next.js (TypeScript)
DESCRIPTION: This example demonstrates how to use the `redirect` function within a Server Action in Next.js using TypeScript. It defines a `navigate` function that takes form data and redirects the user to a specific post based on the provided ID. This demonstrates how to use redirect within server actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function navigate(data: FormData) {
  redirect(`/posts/${data.get('id')}`)
}
```

----------------------------------------

TITLE: Using use Hook in Client Component (Next.js)
DESCRIPTION: This example shows how to use React's use hook in a Next.js Client Component to read a promise passed from a Server Component. It renders a list of blog posts once the promise resolves.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import { use } from 'react'

export default function Posts({
  posts,
}: {
  posts: Promise<{ id: string; title: string }[]>
}) {
  const allPosts = use(posts)

  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'
import { use } from 'react'

export default function Posts({ posts }) {
  const posts = use(posts)

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Referencing Other Env Vars in .env File (Next.js)
DESCRIPTION: Variables in `.env` files can reference other variables using the `$` prefix. This allows for cleaner definition and reuse of values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_7

LANGUAGE: txt
CODE:
```
TWITTER_USER=nextjs
TWITTER_URL=https://x.com/$TWITTER_USER
```

----------------------------------------

TITLE: Revalidating Cache Tag in Next.js JavaScript
DESCRIPTION: Demonstrates how to use the revalidateTag function in JavaScript to revalidate cached data tagged with 'my-data'. It is part of the server-side submit function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('my-data')
}
```

----------------------------------------

TITLE: Initializing Google Analytics in App Router (TSX)
DESCRIPTION: This code snippet shows how to integrate Google Analytics into a Next.js application using the App Router and TypeScript. It uses the `GoogleAnalytics` component from `@next/third-parties/google` and includes it within the root layout component. The Google Analytics measurement ID is passed via the `gaId` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

----------------------------------------

TITLE: Creating a Next.js App using npx
DESCRIPTION: This command uses npx to create a new Next.js application named 'my-blog' using the 'blog' example. It sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example blog my-blog
```

----------------------------------------

TITLE: Importing the Next.js Image Component (JS)
DESCRIPTION: Imports the `Image` component from `next/image` to enable its use within your React components. This is the required first step before you can use the image optimization features.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_0

LANGUAGE: js
CODE:
```
import Image from 'next/image'
```

----------------------------------------

TITLE: Implementing a Basic API Route in Next.js (JavaScript)
DESCRIPTION: This snippet shows the JavaScript equivalent of creating a simple API route that returns a JSON response with a status code of 200.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Copying Environment Configuration File
DESCRIPTION: This command copies the example environment file (`env.local.example`) to a local environment file (`.env.local`). This allows you to configure environment variables specific to your local development environment.  The `.env.local` file is typically ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Copying Environment Variables Configuration
DESCRIPTION: Shell command to copy the example environment configuration file to a local environment file, which will be used for Mux API credentials
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Configuring Simple Rewrites in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to define a basic rewrite in Next.js using the `rewrites` async function in `next.config.js`. It shows mapping the incoming path `/about` to the root destination `/`. The `source` and `destination` properties are required for each rewrite rule object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/about',
        destination: '/',
      },
    ]
  },
}
```

----------------------------------------

TITLE: Fetch User in Layout (Next.js) - TSX
DESCRIPTION: This Next.js Layout component demonstrates calling `getUser()` from the DAL to fetch user data. Since `getUser` internally includes the session verification, this pattern ensures the authentication check is performed when the layout fetches data, rather than performing the auth check directly in the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_30

LANGUAGE: TSX
CODE:
```
import { getUser } from "@/app/lib/dal";

export default async function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  const user = await getUser();

  return (
    // ...
    <main>{children}</main>
    // ...
  );
}
```

----------------------------------------

TITLE: Using Server Action Passed as Prop in Client Component (TSX/JSX)
DESCRIPTION: Demonstrates how a Server Action defined elsewhere can be passed as a prop to a Client Component and then used as the value for a `<form>` element's `action` attribute. This allows logic defined on the server to handle form submissions from the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

export default function ClientComponent({
  updateItemAction,
}: {
  updateItemAction: (formData: FormData) => void
}) {
  return <form action={updateItemAction}>{/* ... */}</form>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export default function ClientComponent({ updateItemAction }) {
  return <form action={updateItemAction}>{/* ... */}</form>
}
```

----------------------------------------

TITLE: Defining Layout with Parallel Routes in Javascript
DESCRIPTION: This code snippet shows how to define a layout component that accepts parallel routes as props in Javascript. The layout component receives `children`, `team`, and `analytics` props, each representing a different slot, and renders them in parallel.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export default function Layout({ children, team, analytics }) {
  return (
    <>
      {children}
      {team}
      {analytics}
    </>
  )
}
```

----------------------------------------

TITLE: Rendering Optimized Images with Next.js Image Component
DESCRIPTION: Renders photos using the Next.js Image component with proper attributes including source path, alt text, dimensions, priority loading, and custom class name. Each image has an accompanying Unsplash attribution link.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/photos.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
<Image
  src="/images/photo2.jpg"
  alt="Photo"
  width={1125}
  height={750}
  priority
  className="next-image"
/>
[Unsplash ↗ ](https://unsplash.com/photos/WeYamle9fDM)

<Image
  src="/images/photo.jpg"
  alt="Photo"
  width={1125}
  height={750}
  priority
  className="next-image"
/>
[Unsplash ↗ ](https://unsplash.com/photos/ndN00KmbJ1c)
```

----------------------------------------

TITLE: Migrating Per-Page Layout to App Directory (After Migration)
DESCRIPTION: Illustrates the structure for implementing layouts in the `app` directory. This involves moving layout logic to a Client Component (if interactive), importing it into a Server Component `layout.js` file, and having the page component (`page.js`) reside within the layout's route segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <p>My Page</p>
}
```

LANGUAGE: jsx
CODE:
```
'use client' // this directive should be at top of the file, before any imports.

// This is a Client Component
export default function DashboardLayout({ children }) {
  return (
    <div>
      <h2>My Dashboard</h2>
      {children}
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import DashboardLayout from './DashboardLayout'

// This is a Server Component
export default function Layout({ children }) {
  return <DashboardLayout>{children}</DashboardLayout>
}
```

----------------------------------------

TITLE: Global Error Handler
DESCRIPTION: Root-level error boundary component for handling application-wide errors, including custom HTML structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
'use client'

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

LANGUAGE: javascript
CODE:
```
'use client'

export default function GlobalError({ error, reset }) {
  return (
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Creating a Nested Blog Layout in Next.js
DESCRIPTION: Implements a layout component specifically for the blog section. This nested layout wraps all pages under the /blog route, providing shared UI elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
export default function BlogLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}
```

LANGUAGE: jsx
CODE:
```
export default function BlogLayout({ children }) {
  return <section>{children}</section>
}
```

----------------------------------------

TITLE: Configuring Security Headers in next.config.js
DESCRIPTION: This JavaScript code configures security headers in the next.config.js file to enhance the application's security. It sets headers for all routes and specific headers for the service worker to prevent caching and enforce a strict Content Security Policy. It helps prevent common web vulnerabilities like clickjacking and MIME sniffing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_14

LANGUAGE: js
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
        ],
      },
      {
        source: '/sw.js',
        headers: [
          {
            key: 'Content-Type',
            value: 'application/javascript; charset=utf-8',
          },
          {
            key: 'Cache-Control',
            value: 'no-cache, no-store, must-revalidate',
          },
          {
            key: 'Content-Security-Policy',
            value: "default-src 'self'; script-src 'self'",
          },
        ],
      },
    ]
  },
}

```

----------------------------------------

TITLE: Implementing Conditional Redirects with Next.js Middleware
DESCRIPTION: Uses `NextResponse.redirect` within a Next.js Middleware function to conditionally redirect incoming requests based on arbitrary logic, such as checking authentication status. If the condition is met (e.g., not authenticated), the function returns a redirect response to a specified URL. This method provides flexibility for dynamic redirection rules.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { NextResponse, NextRequest } from 'next/server'
import { authenticate } from 'auth-provider'

export function middleware(request: NextRequest) {
  const isAuthenticated = authenticate(request)

  // If the user is authenticated, continue as normal
  if (isAuthenticated) {
    return NextResponse.next()
  }

  // Redirect to login page if not authenticated
  return NextResponse.redirect(new URL('/login', request.url))
}

export const config = {
  matcher: '/dashboard/:path*',
}
```

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'
import { authenticate } from 'auth-provider'

export function middleware(request) {
  const isAuthenticated = authenticate(request)

  // If the user is authenticated, continue as normal
  if (isAuthenticated) {
    return NextResponse.next()
  }

  // Redirect to login page if not authenticated
  return NextResponse.redirect(new URL('/login', request.url))
}
```

----------------------------------------

TITLE: Starting Next.js Dev Server on Custom Port (Bash)
DESCRIPTION: This command starts the Next.js development server using `next dev`, overriding the default port (3000) to use port 4000 instead via the `-p` option.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
next dev -p 4000
```

----------------------------------------

TITLE: Initializing a Route Handler
DESCRIPTION: This code snippet initializes a basic route handler in Next.js using the App Router. It exports an async function `GET` that responds with an empty string.  This is the first step in setting up Draft Mode, providing a basic endpoint to build upon.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
export async function GET(request: Request) {
  return new Response('')
}
```

----------------------------------------

TITLE: Aborting In-Flight Fetch Requests in Next.js (JS)
DESCRIPTION: Illustrates how to use the `AbortController` and its `signal` property with the `fetch` API in Next.js to abort an in-flight request. This does not opt the request out of request memoization but allows for programmatic cancellation of the network request itself.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const { signal } = new AbortController()
fetch(url, { signal })
```

----------------------------------------

TITLE: Async Data Fetching with TypeScript in Next.js
DESCRIPTION: Example of using TypeScript with async data fetching in a Next.js page component. Demonstrates type-safe data fetching without serialization requirements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
async function getData() {
  const res = await fetch('https://api.example.com/...')
  // The return value is *not* serialized
  // You can return Date, Map, Set, etc.
  return res.json()
}

export default async function Page() {
  const name = await getData()

  return '...'
}
```

----------------------------------------

TITLE: Client-Side Environment Variable Prefix Example
DESCRIPTION: Demonstrates the required prefix for client-side environment variables in Next.js applications. Variables must be prefixed with NEXT_PUBLIC_ to be accessible on the client side.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-env-value.mdx#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
NEXT_PUBLIC_
```

----------------------------------------

TITLE: Segment Configuration Options in Next.js - JavaScript
DESCRIPTION: This JavaScript snippet sets up segment configuration options for routing in Next.js, allowing for dynamic routing and caching settings.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_23

LANGUAGE: javascript
CODE:
```
export const dynamic = 'auto'
export const dynamicParams = true
export const revalidate = false
export const fetchCache = 'auto'
export const runtime = 'nodejs'
export const preferredRegion = 'auto'
```

----------------------------------------

TITLE: Rendering Responsive Images with Fill in Next.js
DESCRIPTION: This snippet shows how to use the `fill` prop to render a responsive image without knowing the aspect ratio. It requires the parent to have a relative position and allows for object-fit styles to adjust the image display.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_30

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page({ photoUrl }) {
  return (
    <div style={{ position: 'relative', width: '300px', height: '500px' }}>
      <Image
        src={photoUrl}
        alt="Picture of the author"
        sizes="300px"
        fill
        style={{
          objectFit: 'contain',
        }}
      />
    </div>
  )
}
```

----------------------------------------

TITLE: Using useEffect for Client-Only Rendering (React/Next.js)
DESCRIPTION: Demonstrates how to use React's `useEffect` hook to ensure certain logic or rendering occurs only on the client side after hydration. This prevents hydration errors caused by logic or APIs that are not available server-side by conditionally rendering content based on a state updated within `useEffect`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-hydration-error.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import { useState, useEffect } from 'react';

export default function App() {
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  return <h1>{isClient ? 'This is never prerendered' : 'Prerendered'}</h1>;
}
```

----------------------------------------

TITLE: Using useFormStatus for Search Button in Next.js TypeScript
DESCRIPTION: Utilizing the 'useFormStatus' hook in TypeScript, this snippet defines a 'SearchButton' component to provide immediate feedback on the form's pending state during search queries in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_10

LANGUAGE: TypeScript
CODE:
```
'use client'
import { useFormStatus } from 'react-dom'

export default function SearchButton() {
  const status = useFormStatus()
  return (
    <button type="submit">{status.pending ? 'Searching...' : 'Search'}</button>
  )
}
```

----------------------------------------

TITLE: Fetching Data with Typed GraphQL Query in React
DESCRIPTION: This code snippet demonstrates how to fetch data using a typed GraphQL query in a React component using Apollo Client. It imports the `useQuery` hook from `@apollo/client` and a generated TypeScript type for the GraphQL query. The fetched data is then used to render content.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useQuery } from "@apollo/client";
import { ViewerDocument } from "lib/graphql-operations";

const News = () => {
  // Typed already️⚡️
  const {
    data: { viewer },
  } = useQuery(ViewerDocument);

  return <div>{viewer.name}</div>;
};
```

----------------------------------------

TITLE: Skipping SSR with next/dynamic
DESCRIPTION: This code snippet demonstrates how to disable server-side rendering (SSR) for a Client Component using the `ssr: false` option in `next/dynamic`.  This is useful when the component relies on browser-specific APIs. The component `ComponentC` will only be rendered on the client-side.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
const ComponentC = dynamic(() => import('../components/C'), { ssr: false })
```

----------------------------------------

TITLE: Implementing CORS in Next.js Middleware
DESCRIPTION: Shows how to handle CORS (Cross-Origin Resource Sharing) requests in Middleware. It checks the request origin against an allowed list and sets appropriate `Access-Control-*` headers for both preflight (`OPTIONS`) and simple requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse } from 'next/server';

const allowedOrigins = ['https://acme.com', 'https://my-app.org'];

const corsOptions = {
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

export function middleware(request: NextRequest) {
  // Check the origin from the request
  const origin = request.headers.get('origin') ?? '';
  const isAllowedOrigin = allowedOrigins.includes(origin);

  // Handle preflighted requests
  const isPreflight = request.method === 'OPTIONS';

  if (isPreflight) {
    const preflightHeaders = {
      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
      ...corsOptions,
    };
    return NextResponse.json({}, { headers: preflightHeaders });
  }

  // Handle simple requests
  const response = NextResponse.next();

  if (isAllowedOrigin) {
    response.headers.set('Access-Control-Allow-Origin', origin);
  }

  Object.entries(corsOptions).forEach(([key, value]) => {
    response.headers.set(key, value as string);
  });

  return response;
}

export const config = {
  matcher: '/api/:path*',
};
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server';

const allowedOrigins = ['https://acme.com', 'https://my-app.org'];

const corsOptions = {
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

export function middleware(request) {
  // Check the origin from the request
  const origin = request.headers.get('origin') ?? '';
  const isAllowedOrigin = allowedOrigins.includes(origin);

  // Handle preflighted requests
  const isPreflight = request.method === 'OPTIONS';

  if (isPreflight) {
    const preflightHeaders = {
      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
      ...corsOptions,
    };
    return NextResponse.json({}, { headers: preflightHeaders });
  }

  // Handle simple requests
  const response = NextResponse.next();

  if (isAllowedOrigin) {
    response.headers.set('Access-Control-Allow-Origin', origin);
  }

  Object.entries(corsOptions).forEach(([key, value]) => {
    response.headers.set(key, value);
  });

  return response;
};

export const config = {
  matcher: '/api/:path*',
};
```

----------------------------------------

TITLE: Ensuring Authenticated Mutations with Server Actions (JavaScript)
DESCRIPTION: In JavaScript, this snippet ensures only authenticated users perform server-side actions such as data mutations. It confirms user sessions and applies unauthorized functions for session failures.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_7

LANGUAGE: JavaScript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateProfile(data) {
  const session = await verifySession()

  // If the user is not authenticated, return a 401
  if (!session) {
    unauthorized()
  }

  // Proceed with mutation
  // ...
}
```

----------------------------------------

TITLE: Handling Form Data with Server Action (TSX/JSX)
DESCRIPTION: Explains that Server Actions invoked via a `<form>`'s `action` attribute automatically receive the `FormData` object as their first argument. The example shows how to extract values for individual form fields from this object using `formData.get()`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function Page() {
  async function createInvoice(formData: FormData) {
    'use server'

    const rawFormData = {
      customerId: formData.get('customerId'),
      amount: formData.get('amount'),
      status: formData.get('status'),
    }

    // mutate data
    // revalidate cache
  }

  return <form action={createInvoice}>...</form>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  async function createInvoice(formData) {
    'use server'

    const rawFormData = {
      customerId: formData.get('customerId'),
      amount: formData.get('amount'),
      status: formData.get('status'),
    }

    // mutate data
    // revalidate cache
  }

  return <form action={createInvoice}>...</form>
}
```

----------------------------------------

TITLE: Setting Timed Data Revalidation (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the `next.revalidate` option with `fetch` in Next.js to implement time-based data revalidation. The fetched data will be cached for the specified number of seconds (3600 here), after which Next.js will return stale data on the next request while revalidating in the background. This requires using Next.js's enhanced `fetch` capability.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
// Revalidate at most every hour\nfetch('https://...', { next: { revalidate: 3600 } })
```

----------------------------------------

TITLE: Creating a Loading UI with loading.js (Next.js)
DESCRIPTION: This example shows how to create a loading UI for a Next.js page using the loading.js file. It defines a simple loading state that will be displayed while the page content is being fetched.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>
}
```

LANGUAGE: jsx
CODE:
```
export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>
}
```

----------------------------------------

TITLE: Opting Route into PPR and Using Suspense in App Router (JSX)
DESCRIPTION: Explicitly enables Partial Prerendering for this route segment by exporting `experimental_ppr = true`. It also demonstrates wrapping a `DynamicComponent` with `React.Suspense`, providing a `Fallback` to be included in the initial prerender while the dynamic part loads.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_4

LANGUAGE: JSX
CODE:
```
import { Suspense } from "react"
import { StaticComponent, DynamicComponent, Fallback } from "@/app/ui"

export const experimental_ppr = true

export default function Page() {
  return {
     <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
     </>
  };
}
```

----------------------------------------

TITLE: Basic usePathname Usage in Next.js Client Component
DESCRIPTION: Demonstrates the basic implementation of usePathname hook to display the current pathname in a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-pathname.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'

export default function ExampleClientComponent() {
  const pathname = usePathname()
  return <p>Current pathname: {pathname}</p>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'

export default function ExampleClientComponent() {
  const pathname = usePathname()
  return <p>Current pathname: {pathname}</p>
}
```

----------------------------------------

TITLE: Inline Server Functions in Server Components with TypeScript
DESCRIPTION: Demonstrates how to define an inline Server Function directly within a Server Component in TypeScript. The function is marked with the 'use server' directive inside the component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export default function Page() {
  // Server Action
  async function createPost(formData: FormData) {
    'use server'
    // ...
  }

  return <></>
}
```

----------------------------------------

TITLE: Configuring Next.js Rewrites with Has/Missing Conditions (JavaScript)
DESCRIPTION: This snippet demonstrates how to define rewrite rules in next.config.js that are conditionally applied based on the presence or absence of specific headers, cookies, host, or query parameters using the 'has' and 'missing' fields. Each object in the 'has' or 'missing' array specifies the type ('header', 'cookie', 'host', 'query'), the 'key' to check, and an optional 'value' (which can be a regex for capture groups). All conditions in 'has' must match, and none in 'missing' must match for the rewrite to apply.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_9

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      // if the header `x-rewrite-me` is present,
      // this rewrite will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-rewrite-me',
          },
        ],
        destination: '/another-page',
      },
      // if the header `x-rewrite-me` is not present,
      // this rewrite will be applied
      {
        source: '/:path*',
        missing: [
          {
            type: 'header',
            key: 'x-rewrite-me',
          },
        ],
        destination: '/another-page',
      },
      // if the source, query, and cookie are matched,
      // this rewrite will be applied
      {
        source: '/specific/:path*',
        has: [
          {
            type: 'query',
            key: 'page',
            // the page value will not be available in the
            // destination since value is provided and doesn't
            // use a named capture group e.g. (?<page>home)
            value: 'home',
          },
          {
            type: 'cookie',
            key: 'authorized',
            value: 'true',
          },
        ],
        destination: '/:path*/home',
      },
      // if the header `x-authorized` is present and
      // contains a matching value, this rewrite will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-authorized',
            value: '(?<authorized>yes|true)',
          },
        ],
        destination: '/home?authorized=:authorized',
      },
      // if the host is `example.com`,
      // this rewrite will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'host',
            value: 'example.com',
          },\n        ],
        destination: '/another-page',
      },
    ]
  },
}
```

----------------------------------------

TITLE: Caching Async Function Output (JavaScript)
DESCRIPTION: Applies the `'use cache'` directive to a standalone asynchronous function (`getData`). This caches the function's return value based on its serializable arguments, useful for caching data fetching or complex computations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_13

LANGUAGE: JavaScript
CODE:
```
export async function getData() {
  'use cache'

  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Configuring Environment Variables in next.config.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to configure environment variables in the `next.config.js` file. The `env` object is added to the `module.exports` object, allowing you to define custom environment variables that will be available during the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/env.mdx#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  env: {
    customKey: 'my-value',
  },
}
```

----------------------------------------

TITLE: Implementing Local Error Boundary in Next.js with TypeScript
DESCRIPTION: TypeScript implementation of an error boundary component for handling runtime errors in Next.js route segments. Uses React's error boundary pattern with client-side components to display fallback UI and provide error recovery options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Enabling React Compiler in Next.js Configuration (TypeScript)
DESCRIPTION: Configuration to enable the React Compiler in next.config.ts file. This sets the experimental.reactCompiler option to true.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    reactCompiler: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Basic Usage of unstable_cache in Next.js JSX
DESCRIPTION: This snippet demonstrates the basic usage of unstable_cache to cache the result of an asynchronous function getUser. It wraps getUser with unstable_cache, providing a cache key, and then uses the returned cached function within a React component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_cache.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { getUser } from './data';
import { unstable_cache } from 'next/cache';

const getCachedUser = unstable_cache(
  async (id) => getUser(id),
  ['my-app-user']
);

export default async function Component({ userID }) {
  const user = await getCachedUser(userID);
  ...
}
```

----------------------------------------

TITLE: Creating a Layout Component with Client and Server Components in JavaScript
DESCRIPTION: This JavaScript snippet defines a Layout component similar to the TypeScript example, merging static and interactive elements for optimal rendering strategy.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
// SearchBar is a Client Component
import SearchBar from './searchbar'
// Logo is a Server Component
import Logo from './logo'

// Layout is a Server Component by default
export default function Layout({ children }) {
  return (
    <>
      <nav>
        <Logo />
        <SearchBar />
      </nav>
      <main>{children}</main>
    </>
  )
}
```

----------------------------------------

TITLE: Caching Page with Nested Component (TSX)
DESCRIPTION: Shows a `page.tsx` file where the page itself uses `'use cache'`. It renders an imported asynchronous component (`Users`). The nested component benefits from the caching behavior applied at the page level.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_8

LANGUAGE: TSX
CODE:
```
'use cache'

async function Users() {
  const users = await fetch('/api/users')
  // loop through users
}

export default function Page() {
  return (
    <main>
      <Users />
    </main>
  )
}
```

----------------------------------------

TITLE: Using next/image fill prop to Fill Container (JSX)
DESCRIPTION: This example shows how to make an image fill its parent container using the `next/image` component with the `fill` prop. The parent element is styled with `position: 'relative'`, and `objectFit: 'cover'` is used to control how the image scales within the container, ensuring no layout shift.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_9

LANGUAGE: JSX
CODE:
```
import Image from 'next/image'
import mountains from '../public/mountains.jpg'

export default function Fill() {
  return (
    <div
      style={{
        display: 'grid',
        gridGap: '8px',
        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, auto))',
      }}
    >
      <div style={{ position: 'relative', height: '400px' }}>
        <Image
          alt="Mountains"
          src={mountains}
          fill
          sizes="(min-width: 808px) 50vw, 100vw"
          style={{
            objectFit: 'cover', // cover, contain, none
          }}
        />
      </div>
      {/* And more images in the grid... */}
    </div>
  )
}
```

----------------------------------------

TITLE: Asynchronous Token Access After Migration
DESCRIPTION: Corrected implementation showing proper async/await usage for token access in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export async function Page() {
  return (await cookies()).get(token)
}
```

LANGUAGE: jsx
CODE:
```
import { getToken } from '.../token-utils'

export default async function Page() {
  const token = await getToken();
  validateToken(token)
  return ...
}
```

----------------------------------------

TITLE: Define NextResponse Class - Next.js - JS
DESCRIPTION: Defines the `NextResponse` class, inheriting from the standard Web `Response`. It provides Next.js-specific features including custom cookie management via a proxied `ResponseCookies` instance, integration with `NextURL` for response URLs, access to internal state via a `Symbol`, and static helper methods (`json`, `redirect`, `rewrite`, `next`) to easily create common response types for use in Next.js middleware.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
export class NextResponse extends Response {
    constructor(body, init = {}){
        super(body, init);
        const headers = this.headers;
        const cookies = new ResponseCookies(headers);
        const cookiesProxy = new Proxy(cookies, {
            get (target, prop, receiver) {
                switch(prop){
                    case 'delete':
                    case 'set':
                        {
                            return (...args)=>{
                                const result = Reflect.apply(target[prop], target, args);
                                const newHeaders = new Headers(headers);
                                if (result instanceof ResponseCookies) {
                                    headers.set('x-middleware-set-cookie', result.getAll().map((cookie)=>stringifyCookie(cookie)).join(','));
                                }
                                handleMiddlewareField(init, newHeaders);
                                return result;
                            };
                        }
                    default:
                        return ReflectAdapter.get(target, prop, receiver);
                }
            }
        });
        this[INTERNALS] = {
            cookies: cookiesProxy,
            url: init.url ? new NextURL(init.url, {
                headers: toNodeOutgoingHttpHeaders(headers),
                nextConfig: init.nextConfig
            }) : undefined
        };
    }
    [Symbol.for('edge-runtime.inspect.custom')]() {
        return {
            cookies: this.cookies,
            url: this.url,
            body: this.body,
            bodyUsed: this.bodyUsed,
            headers: Object.fromEntries(this.headers),
            ok: this.ok,
            redirected: this.redirected,
            status: this.status,
            statusText: this.statusText,
            type: this.type
        };
    }
    get cookies() {
        return this[INTERNALS].cookies;
    }
    static json(body, init) {
        const response = Response.json(body, init);
        return new NextResponse(response.body, response);
    }
    static redirect(url, init) {
        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;
        if (!REDIRECTS.has(status)) {
            throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        const initObj = typeof init === 'object' ? init : {};
        const headers = new Headers(initObj == null ? void 0 : initObj.headers);
        headers.set('Location', validateURL(url));
        return new NextResponse(null, {
            ...initObj,
            headers,
            status
        });
    }
    static rewrite(destination, init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-rewrite', validateURL(destination));
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
    static next(init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-next', '1');
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
}
```

----------------------------------------

TITLE: Configuring App-Specific Twitter Card Metadata in Next.js (JSX & HTML)
DESCRIPTION: Configures app-specific Twitter Card metadata using the `metadata.twitter` property with the `app` card type. This includes details about the associated mobile application for iOS and Android, allowing Twitter to link directly to the app. It generates additional `<meta name="twitter:app:">` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_19

LANGUAGE: JSX
CODE:
```
export const metadata = {
  twitter: {
    card: 'app',
    title: 'Next.js',
    description: 'The React Framework for the Web',
    siteId: '1467726470533754880',
    creator: '@nextjs',
    creatorId: '1467726470533754880',
    images: {
      url: 'https://nextjs.org/og.png',
      alt: 'Next.js Logo',
    },
    app: {
      name: 'twitter_app',
      id: {
        iphone: 'twitter_app://iphone',
        ipad: 'twitter_app://ipad',
        googleplay: 'twitter_app://googleplay',
      },
      url: {
        iphone: 'https://iphone_url',
        ipad: 'https://ipad_url',
      },
    },
  },
}
```

LANGUAGE: HTML
CODE:
```
<meta name="twitter:site:id" content="1467726470533754880" />
<meta name="twitter:creator" content="@nextjs" />
<meta name="twitter:creator:id" content="1467726470533754880" />
<meta name="twitter:title" content="Next.js" />
<meta name="twitter:description" content="The React Framework for the Web" />
<meta name="twitter:card" content="app" />
<meta name="twitter:image" content="https://nextjs.org/og.png" />
<meta name="twitter:image:alt" content="Next.js Logo" />
<meta name="twitter:app:name:iphone" content="twitter_app" />
<meta name="twitter:app:id:iphone" content="twitter_app://iphone" />
<meta name="twitter:app:id:ipad" content="twitter_app://ipad" />
<meta name="twitter:app:id:googleplay" content="twitter_app://googleplay" />
<meta name="twitter:app:url:iphone" content="https://iphone_url" />
<meta name="twitter:app:url:ipad" content="https://ipad_url" />
<meta name="twitter:app:name:ipad" content="twitter_app" />
<meta name="twitter:app:name:googleplay" content="twitter_app" />
```

----------------------------------------

TITLE: Permanently Redirecting with permanentRedirect (TypeScript)
DESCRIPTION: Shows how to use the `permanentRedirect` function in a Next.js Server Action (`updateUsername`) to perform a permanent 308 redirect. This example revalidates a cache tag after a placeholder database update and then redirects the user to the new permanent URL for the updated profile. Useful for permanent URL changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
'use server'\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username: string, formData: FormData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}
```

----------------------------------------

TITLE: Deleting Session Cookie in Next.js App Router (JavaScript)
DESCRIPTION: This asynchronous function `deleteSession` removes the session cookie named 'session' using the `delete` method provided by the Next.js `cookies()` API. This is typically used during a logout process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_14

LANGUAGE: js
CODE:
```
import 'server-only';
import { cookies } from 'next/headers';

export async function deleteSession() {
  const cookieStore = await cookies();
  cookieStore.delete('session');
}
```

----------------------------------------

TITLE: Creating Background Effect with next/image fill (JSX)
DESCRIPTION: This snippet illustrates how to use the `next/image` component with the `fill` prop to achieve a background image effect that covers the entire viewport. It sets `fill`, uses `sizes="100vw"`, and applies `objectFit: 'cover'` via inline style to control the image's display behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_10

LANGUAGE: JSX
CODE:
```
import Image from 'next/image'
import mountains from '../public/mountains.jpg'

export default function Background() {
  return (
    <Image
      alt="Mountains"
      src={mountains}
      placeholder="blur"
      quality={100}
      fill
      sizes="100vw"
      style={{
        objectFit: 'cover',
      }}
    />
  )
}
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters in Next.js
DESCRIPTION: Shows how to access dynamic route parameters using the params prop in a Next.js page component. The params object is a promise that contains route segment parameters defined in the file path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
}
```

----------------------------------------

TITLE: Running the Next.js Application
DESCRIPTION: These commands install dependencies and start the Next.js development server. The `npm install` and `yarn install` commands install dependencies, and `npm run dev` and `yarn dev` start the development server.  Choose the set of commands appropriate for the package manager you are using.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Using useFormStatus for Search Button in Next.js JavaScript
DESCRIPTION: This JavaScript snippet shows how to use the 'useFormStatus' hook to create a 'SearchButton' component providing feedback on form submission state in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_11

LANGUAGE: JavaScript
CODE:
```
'use client'
import { useFormStatus } from 'react-dom'

export default function SearchButton() {
  const status = useFormStatus()
  return (
    <button type="submit">{status.pending ? 'Searching...' : 'Search'}</button>
  )
}
```

----------------------------------------

TITLE: Importing and Using Script Component (App Router, TSX)
DESCRIPTION: This code snippet demonstrates importing the `Script` component from `next/script` and using it to load an external script in a Next.js application within the `app` directory.  It shows the basic usage of the `Script` component with the required `src` prop. The `Dashboard` function is a simple functional component that renders the script.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function Dashboard() {
  return (
    <>
      <Script src="https://example.com/script.js" />
    </>
  )
}
```

----------------------------------------

TITLE: Importing and Using Next.js Image Component
DESCRIPTION: Demonstrates how to import and use the Next.js Image component for basic image rendering. This snippet shows the minimal setup required to use the Image component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return <Image src="" alt="" />
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return <Image src="" alt="" />
}
```

----------------------------------------

TITLE: Installing npm dependencies - Bash
DESCRIPTION: This command installs the npm dependencies for the project. It uses the `npm install` command to install all the dependencies listed in the `package.json` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
$  npm install
```

----------------------------------------

TITLE: Clearing Cookies with NextRequest
DESCRIPTION: This snippet demonstrates how to clear all cookies using the `clear` method of the `request.cookies` object in Next.js.  It removes the `Set-Cookie` header from the request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
request.cookies.clear()
```

----------------------------------------

TITLE: Importing Next.js Image Component
DESCRIPTION: Imports the Image component from Next.js which provides optimized image loading and rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/photos.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from "next/image";
```

----------------------------------------

TITLE: Displaying Form Loading State - TypeScript
DESCRIPTION: This code snippet demonstrates how to display a loading state during form submission in a Next.js component using TypeScript. It uses React state to track the loading state and disables the submit button while loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import React, { useState, FormEvent } from 'react'

export default function Page() {
  const [isLoading, setIsLoading] = useState<boolean>(false)

  async function onSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()
    setIsLoading(true) // Set loading to true when the request starts

    try {
      const formData = new FormData(event.currentTarget)
      const response = await fetch('/api/submit', {
        method: 'POST',
        body: formData,
      })

      // Handle response if necessary
      const data = await response.json()
      // ...
    } catch (error) {
      // Handle error if necessary
      console.error(error)
    } finally {
      setIsLoading(false) // Set loading to false when the request completes
    }
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit" disabled={isLoading}>
        {isLoading ? 'Loading...' : 'Submit'}
      </button>
    </form>
  )
}
```

----------------------------------------

TITLE: Accessing Runtime Env Vars During Dynamic Rendering (App Router, Next.js)
DESCRIPTION: In the App Router, server-side environment variables can be accessed at runtime during dynamic rendering, typically triggered by using dynamic functions like `cookies()` or `headers()`, or other dynamic APIs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

LANGUAGE: javascript
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

----------------------------------------

TITLE: Implementing Basic Next.js Middleware with JavaScript
DESCRIPTION: A JavaScript example of implementing middleware in Next.js that redirects requests to the '/home' path. The config object uses a matcher to apply the middleware only to paths matching '/about/:path*'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  return NextResponse.redirect(new URL('/home', request.url))
}

export const config = {
  matcher: '/about/:path*',
}
```

----------------------------------------

TITLE: Receiving Bound Arguments in Server Action (TS/JS)
DESCRIPTION: Demonstrates the function signature for a Server Action that receives additional arguments passed via `bind()`. The bound arguments (`userId` in this example) are received first, followed by the `FormData` object that is automatically provided when the action is invoked by a form.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
'use server'

export async function updateUser(userId: string, formData: FormData) {}
```

LANGUAGE: js
CODE:
```
'use server'

export async function updateUser(userId, formData) {}
```

----------------------------------------

TITLE: Importing Client Components with next/dynamic
DESCRIPTION: This code snippet demonstrates how to lazy load Client Components in a Next.js application using `next/dynamic`. It imports three components (A, B, and C) dynamically, with Component A loaded immediately, Component B loaded on demand based on a condition, and Component C loaded only on the client side using `ssr: false`.  `next/dynamic` is a wrapper around `React.lazy()` and `Suspense`. The code uses `useState` to control the conditional rendering of Component B.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'
import dynamic from 'next/dynamic'

// Client Components:
const ComponentA = dynamic(() => import('../components/A'))
const ComponentB = dynamic(() => import('../components/B'))
const ComponentC = dynamic(() => import('../components/C'), { ssr: false })

export default function ClientComponentExample() {
  const [showMore, setShowMore] = useState(false)

  return (
    <div>
      {/* Load immediately, but in a separate client bundle */}
      <ComponentA />

      {/* Load on demand, only when/if the condition is met */}
      {showMore && <ComponentB />}
      <button onClick={() => setShowMore(!showMore)}>Toggle</button>

      {/* Load only on the client side */}
      <ComponentC />
    </div>
  )
}
```

----------------------------------------

TITLE: Generating Image with External Data JSX
DESCRIPTION: Demonstrates creating a dynamic Open Graph image in JSX that fetches data from an external API based on route parameters. It uses `async/await` and `fetch` to retrieve data and renders it within an `ImageResponse` component, including predefined `alt`, `size`, and `contentType` exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_21

LANGUAGE: jsx
CODE:
```
import { ImageResponse } from 'next/og'

export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}
export const contentType = 'image/png'

export default async function Image({ params }) {
  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>
    res.json()
  )

  return new ImageResponse(
    (
      <div
        style={{
          fontSize: 48,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    ),
    {
      ...size,
    }
  )
}
```

----------------------------------------

TITLE: Nesting Submit Button Using useFormStatus (TSX)
DESCRIPTION: Demonstrates how to integrate a `SubmitButton` component (which uses `useFormStatus` internally) within a form element that uses a Server Action. By nesting the button, it automatically gains access to the form's submission status to manage its disabled state.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_17

LANGUAGE: TSX
CODE:
```
import { SubmitButton } from './button'
import { createUser } from '@/app/actions'

export function Signup() {
  return (
    <form action={createUser}>
      {/* Other form elements */}
      <SubmitButton />
    </form>
  )
}
```

----------------------------------------

TITLE: Importing Global Stylesheet in Root Layout (App Router - JSX)
DESCRIPTION: This JSX code imports the global stylesheet to apply Tailwind CSS styles to every route in the Next.js application. It defines the root layout component with metadata and imports the globals.css file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
"// These styles apply to every route in the application
import './globals.css'

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}"
```

----------------------------------------

TITLE: Rendering Unauthorized Page - TSX
DESCRIPTION: This code snippet exports a React component that displays a '401 - Unauthorized' message and integrates a login component. It is designed for TypeScript environments using Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import Login from '@/app/components/Login'

export default function Unauthorized() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}

```

----------------------------------------

TITLE: Installing Jest and related dependencies
DESCRIPTION: This command installs Jest, jest-environment-jsdom, @testing-library/react, @testing-library/dom, @testing-library/jest-dom, ts-node, and @types/jest as development dependencies using npm, yarn or pnpm. These packages are essential for setting up a testing environment for React components in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_1

LANGUAGE: Bash
CODE:
```
npm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest
# or
yarn add -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest
# or
pnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest
```

----------------------------------------

TITLE: Using next/link with replace Prop
DESCRIPTION: Shows how to use the boolean `replace` prop to modify browser history behavior. When `replace` is set to `true`, navigating via the link replaces the current entry in the history stack instead of adding a new one.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link href="/dashboard" replace>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link href="/dashboard" replace>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/dashboard" replace>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/dashboard" replace>
      Dashboard
    </Link>
  )
}
```

----------------------------------------

TITLE: Implementing getStaticPaths for Dynamic Routes in Next.js
DESCRIPTION: An example of using getStaticPaths to specify which dynamic routes to pre-render at build time. This function fetches posts and generates paths based on post IDs for pre-rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
// This function gets called at build time
export async function getStaticPaths() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to pre-render based on posts
  const paths = posts.map((post) => ({
    params: { id: post.id }
  }))

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}
```

----------------------------------------

TITLE: Handling Different HTTP Methods in Next.js API Routes
DESCRIPTION: This example demonstrates how to handle different HTTP methods (like POST) in an API route using req.method. It provides a template for method-specific logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    // Process a POST request
  } else {
    // Handle any other HTTP method
  }
}
```

----------------------------------------

TITLE: Applying Font Utility Function (App Router)
DESCRIPTION: This code snippet demonstrates how to import and apply a font defined in a utility function to the root layout in a Next.js application using the app router. It imports the `inter` font and assigns its `className` to the `html` element for global application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_15

LANGUAGE: jsx
CODE:
```
import { inter } from './fonts'

export default function Layout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>
        <div>{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Integrating Session Deletion into Server Action (TypeScript)
DESCRIPTION: This snippet shows a Next.js Server Action `logout` that handles user logout. It calls the `deleteSession` function to remove the session cookie and then uses the `redirect` API to navigate the user to the login page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_15

LANGUAGE: ts
CODE:
```
import { cookies } from 'next/headers';
import { deleteSession } from '@/app/lib/session';

export async function logout() {
  await deleteSession();
  redirect('/login');
}
```

----------------------------------------

TITLE: Creating a Suspense Boundary for SearchBar Component in Next.js
DESCRIPTION: The `Page` component integrates a Suspense boundary around the `SearchBar` component to handle dynamic search parameters, ensuring optimal static rendering. The `SearchBarFallback` component serves as a fallback during the initial render before the search parameters are available.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/deopted-into-client-rendering.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { Suspense } from 'react'
import SearchBar from './search-bar'

// This component passed as fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function SearchBarFallback() {
  return <>placeholder</>
}

export default function Page() {
  return (
    <>  
      <nav>
        <Suspense fallback={<SearchBarFallback />}>  
          <SearchBar />
        </Suspense>
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}

```

----------------------------------------

TITLE: Handling Filtering with Search Parameters in Next.js
DESCRIPTION: Demonstrates how to implement filtering, pagination, and sorting using the searchParams prop in a Next.js page component. The example extracts and provides default values for query parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
export default async function Page({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const { page = '1', sort = 'asc', query = '' } = await searchParams

  return (
    <div>
      <h1>Product Listing</h1>
      <p>Search query: {query}</p>
      <p>Current page: {page}</p>
      <p>Sort order: {sort}</p>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ searchParams }) {
  const { page = '1', sort = 'asc', query = '' } = await searchParams

  return (
    <div>
      <h1>Product Listing</h1>
      <p>Search query: {query}</p>
      <p>Current page: {page}</p>
      <p>Sort order: {sort}</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Defining Static Redirects in Next.js Config
DESCRIPTION: Configures predefined static redirects using the `redirects` async function in the `next.config.js` file. This method is suitable for managing a fixed list of known URL changes. Each redirect object requires a `source` path to match, a `destination` path to redirect to, and a `permanent` boolean indicating whether it's a 308 (true) or 307 (false) redirect.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  async redirects() {
    return [
      // Basic redirect
      {
        source: '/about',
        destination: '/',
        permanent: true,
      },
      // Wildcard path matching
      {
        source: '/blog/:slug',
        destination: '/news/:slug',
        permanent: true,
      },
    ]
  },
}

export default nextConfig
```

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async redirects() {
    return [
      // Basic redirect
      {
        source: '/about',
        destination: '/',
        permanent: true,
      },
      // Wildcard path matching
      {
        source: '/blog/:slug',
        destination: '/news/:slug',
        permanent: true,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Creating Intercepted Login Modal Component
DESCRIPTION: Implements an intercepted login route that wraps the Login component inside a Modal for inline rendering
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
import { Modal } from '@\/app\/ui\/modal'
import { Login } from '@\/app\/ui\/login'

export default function Page() {
  return (
    <Modal>
      <Login \/>
    </Modal>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Modal } from '@\/app\/ui\/modal'
import { Login } from '@\/app\/ui\/login'

export default function Page() {
  return (
    <Modal>
      <Login \/>
    </Modal>
  )
}
```

----------------------------------------

TITLE: Using getStaticProps for Data Fetching in Next.js
DESCRIPTION: An implementation of a Blog page that uses getStaticProps to fetch data at build time. This function retrieves posts from an external API and passes them as props to the page component for pre-rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
function Blog({ posts }) {
  // Render posts...
}

// This function gets called at build time
export async function getStaticProps() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts
    }
  }
}

export default Blog
```

----------------------------------------

TITLE: Returning JSON Response in NextResponse - TypeScript
DESCRIPTION: Generates a response with a JSON body, along with an HTTP status code. Useful for error handling in API routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request: Request) {
  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
}
```

----------------------------------------

TITLE: Redirecting Request with Next.js Middleware JavaScript
DESCRIPTION: This snippet demonstrates a basic Next.js Middleware function written in JavaScript that redirects any incoming request matching the configured `matcher` path to the `/home` URL using `NextResponse.redirect`. It requires importing `NextResponse` from `next/server`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  return NextResponse.redirect(new URL('/home', request.url))
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: '/about/:path*',
}
```

----------------------------------------

TITLE: Create Styled Components SSR Registry Component Next.js
DESCRIPTION: Create a client component (`'use client'`) that uses `styled-components`' `ServerStyleSheet` to collect styles during server rendering and `useServerInsertedHTML` from `next/navigation` to inject them into the document's `<head>`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/css-in-js.mdx#_snippet_3

LANGUAGE: TSX
CODE:
```
'use client'

import React, { useState } from 'react'
import { useServerInsertedHTML } from 'next/navigation'
import { ServerStyleSheet, StyleSheetManager } from 'styled-components'

export default function StyledComponentsRegistry({
  children,
}: {
  children: React.ReactNode
}) {
  // Only create stylesheet once with lazy initial state
  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state
  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())

  useServerInsertedHTML(() => {
    const styles = styledComponentsStyleSheet.getStyleElement()
    styledComponentsStyleSheet.instance.clearTag()
    return <>{styles}</>
  })

  if (typeof window !== 'undefined') return <>{children}</>

  return (
    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>
      {children}
    </StyleSheetManager>
  )
}
```

LANGUAGE: JSX
CODE:
```
'use client'

import React, { useState } from 'react'
import { useServerInsertedHTML } from 'next/navigation'
import { ServerStyleSheet, StyleSheetManager } from 'styled-components'

export default function StyledComponentsRegistry({ children }) {
  // Only create stylesheet once with lazy initial state
  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state
  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())

  useServerInsertedHTML(() => {
    const styles = styledComponentsStyleSheet.getStyleElement()
    styledComponentsStyleSheet.instance.clearTag()
    return <>{styles}</>
  })

  if (typeof window !== 'undefined') return <>{children}</>

  return (
    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>
      {children}
    </StyleSheetManager>
  )
}
```

----------------------------------------

TITLE: Creating a Data Fetching Function with Server-Side API Key
DESCRIPTION: An example of a data fetching function that uses server-side environment variables for API authorization. This demonstrates code that should only be executed on the server to protect sensitive information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

LANGUAGE: javascript
CODE:
```
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

----------------------------------------

TITLE: Using sizes Property with Next.js Image Component
DESCRIPTION: Example of setting the sizes property on a Next.js Image component to optimize loading based on viewport size. The sizes attribute helps browsers determine which image size to download from the srcset based on different breakpoints.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <div className="grid-element">
      <Image
        fill
        src="/example.png"
        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
      />
    </div>
  )
}
```

----------------------------------------

TITLE: Generating Dynamic Open Graph Image in Next.js App Router
DESCRIPTION: This code defines a route handler file (`opengraph-image.ts` or `opengraph-image.js`) within a Next.js App Router structure to dynamically generate an Open Graph image. It utilizes `ImageResponse` to convert JSX/TSX and CSS into a PNG image, fetching data (e.g., blog post details) to customize the image content based on route parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-metadata-and-og-images.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { ImageResponse } from 'next/og'
import { getPost } from '@/app/lib/data'

// Image metadata
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image({ params }: { params: { slug: string } }) {
  const post = await getPost(params.slug)

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    )
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { ImageResponse } from 'next/og'
import { getPost } from '@/app/lib/data'

// Image metadata
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image({ params }) {
  const post = await getPost(params.slug)

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Redirecting After Form Submission - JavaScript
DESCRIPTION: This code snippet demonstrates how to redirect the user to a different route after a successful form submission in a Next.js API route using JavaScript. It calls an addPost function, and redirects to a specific post page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  const id = await addPost()
  res.redirect(307, `/post/${id}`)
}
```

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: This command copies the example environment variables file (`env.local.example`) to `.env.local`.  This allows you to configure environment-specific settings for the Next.js application, such as the Cosmos DB connection string, database name, and container name. The `.env.local` file is typically ignored by Git to prevent sensitive information from being committed to the repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Implementing cache revalidation on post updates (PHP)
DESCRIPTION: This code implements cache revalidation for a headless WordPress setup. Whenever a post is updated (or its status changes), it sends a PUT request to the Next.js frontend's `/api/revalidate` endpoint. This endpoint revalidates the cache associated with the `wordpress` tag, ensuring that the Next.js site displays the most up-to-date content. Requires `HEADLESS_URL` and `HEADLESS_SECRET` constants to be defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_10

LANGUAGE: PHP
CODE:
```
<?php
/**
 * Adds the headless_revalidate function to the save_post action hook.
 * This function makes a PUT request to the headless site' api/revalidate endpoint with JSON body: paths = ['/path/to/page', '/path/to/another/page']
 * Requires HEADLESS_URL and HEADLESS_SECRET to be defined in wp-config.php
 *
 * @param int $post_ID The ID of the post being saved.
 * @return void
 */
add_action('transition_post_status', 'headless_revalidate', 10, 3);
function headless_revalidate(string $new_status, string $old_status, object $post ): void
{
  if ( ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) || ( defined( 'DOING_CRON' ) && DOING_CRON ) ) {
    return;
  }

  // Ignore drafts and inherited posts.
  if ( ( 'draft' === $new_status && 'draft' === $old_status ) || 'inherit' === $new_status ) {
    return;
  }

  $frontendUrl = HEADLESS_URL;
  $headlessSecret = HEADLESS_SECRET;

  $data = json_encode([
    'tags'  => ['wordpress'],
  ]);

  $response = wp_remote_request("$frontendUrl/api/revalidate/", [
    'method'  => 'PUT',
    'body'    => $data,
    'headers' => [
      'X-Headless-Secret-Key' => $headlessSecret,
      'Content-Type'  => 'application/json',
    ],
  ]);

  // Check if the request was successful
  if (is_wp_error($response)) {
    // Handle error
    error_log($response->get_error_message());
  }
}

```

----------------------------------------

TITLE: Producing Direct JSON Response from Next.js Middleware
DESCRIPTION: Demonstrates how to return a direct JSON response from Middleware based on certain conditions, such as authentication status. The example checks if a request is authenticated and returns a 401 Unauthorized JSON response if not.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_11

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server';
import { isAuthenticated } from '@lib/auth';

// Limit the middleware to paths starting with `/api/`
export const config = {
  matcher: '/api/:function*',
};

export function middleware(request: NextRequest) {
  // Call our authentication function to check the request
  if (!isAuthenticated(request)) {
    // Respond with JSON indicating an error message
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    );
  }
}
```

LANGUAGE: javascript
CODE:
```
import { isAuthenticated } from '@lib/auth';

// Limit the middleware to paths starting with `/api/`
export const config = {
  matcher: '/api/:function*',
};

export function middleware(request) {
  // Call our authentication function to check the request
  if (!isAuthenticated(request)) {
    // Respond with JSON indicating an error message
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    );
  }
}
```

----------------------------------------

TITLE: Conditionally Rewriting Paths in Next.js Middleware TypeScript
DESCRIPTION: This snippet demonstrates how to use conditional statements within the main Middleware function in TypeScript to rewrite requests based on the incoming path. It checks if the path starts with '/about' or '/dashboard' and uses `NextResponse.rewrite` to display content from a different URL without changing the browser's URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    return NextResponse.rewrite(new URL('/about-2', request.url))
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    return NextResponse.rewrite(new URL('/dashboard/user', request.url))
  }
}
```

----------------------------------------

TITLE: Generate User Profile DTO (Next.js DAL) - TSX
DESCRIPTION: This function fetches a user profile and constructs a Data Transfer Object (DTO) based on authorization checks using helper functions (`canSeeUsername`, `canSeePhoneNumber`). It ensures only data fields permitted for the current viewer (obtained via `getUser`) are included in the returned object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_26

LANGUAGE: TSX
CODE:
```
import 'server-only'
import { getUser } from '@/app/lib/dal'

function canSeeUsername(viewer: User) {
  return true
}

function canSeePhoneNumber(viewer: User, team: string) {
  return viewer.isAdmin || team === viewer.team
}

export async function getProfileDTO(slug: string) {
  const data = await db.query.users.findMany({
    where: eq(users.slug, slug),
    // Return specific columns here
  })
  const user = data[0]

  const currentUser = await getUser(user.id)

  // Or return only what's specific to the query here
  return {
    username: canSeeUsername(currentUser) ? user.username : null,
    phonenumber: canSeePhoneNumber(currentUser, user.team)
      ? user.phonenumber
      : null,
  }
}
```

----------------------------------------

TITLE: Defining Application-Wide Styles with Global CSS - CSS
DESCRIPTION: Create a `global.css` file in the `app` directory to define styles that should apply universally across your entire application. These styles are not scoped and affect all elements matching the selectors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#_snippet_2

LANGUAGE: css
CODE:
```
body {
  padding: 20px 20px 60px;
  max-width: 680px;
  margin: 0 auto;
}
```

----------------------------------------

TITLE: Conditional Data Fetching in Draft Mode
DESCRIPTION: This code snippet demonstrates how to conditionally fetch data based on whether Draft Mode is enabled. It imports `draftMode` from `next/headers` and fetches data from a draft or production endpoint based on the `isEnabled` property. This allows previewing draft content without affecting the live site.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
// page that fetches data
import { draftMode } from 'next/headers'

async function getData() {
  const { isEnabled } = await draftMode()

  const url = isEnabled
    ? 'https://draft.example.com'
    : 'https://production.example.com'

  const res = await fetch(url)

  return res.json()
}

export default async function Page() {
  const { title, desc } = await getData()

  return (
    <main>
      <h1>{title}</h1>
      <p>{desc}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Fetching Redirect Data in Next.js App Route Handler (TypeScript)
DESCRIPTION: This TypeScript snippet for a Next.js App Route Handler (`app/api/redirects/route.ts`) receives a 'pathname' query parameter, looks it up in a local 'redirects.json' file, and returns the corresponding redirect entry as JSON. It handles cases where the pathname is missing or not found in the JSON file (accounting for Bloom filter false positives), returning a 400 status.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_13

LANGUAGE: ts
CODE:
```
import { NextRequest, NextResponse } from 'next/server'
import redirects from '@/app/redirects/redirects.json'

type RedirectEntry = {
  destination: string
  permanent: boolean
}

export function GET(request: NextRequest) {
  const pathname = request.nextUrl.searchParams.get('pathname')
  if (!pathname) {
    return new Response('Bad Request', { status: 400 })
  }実は、これです。

  // Get the redirect entry from the redirects.json file
  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]

  // Account for bloom filter false positives
  if (!redirect) {
    return new Response('No redirect', { status: 400 })
  }

  // Return the redirect entry
  return NextResponse.json(redirect)
}
```

----------------------------------------

TITLE: Installing Next.js 14 with NPM
DESCRIPTION: Command to upgrade Next.js to version 14 using NPM package manager. Includes installation of React 18 and ESLint configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-14.mdx#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@next-14 react@18 react-dom@18 && npm i eslint-config-next@next-14 -D
```

----------------------------------------

TITLE: Deleting Cookies by Setting Empty Value
DESCRIPTION: Shows how to delete a cookie by setting its value to an empty string using the cookies().set() method in Next.js server actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).set('name', '')
}
```

LANGUAGE: javascript
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).set('name', '')
}
```

----------------------------------------

TITLE: Modal Component with Routing Interaction
DESCRIPTION: Implements a client-side modal component with navigation and closing functionality using Next.js router
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_12

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter } from 'next\/navigation'

export function Modal({ children }: { children: React.ReactNode }) {
  const router = useRouter()

  return (
    <>
      <button
        onClick={() => {
          router.back()
        }}
      >
        Close modal
      <\/button>
      <div>{children}<\/div>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter } from 'next\/navigation'

export function Modal({ children }) {
  const router = useRouter()

  return (
    <>
      <button
        onClick={() => {
          router.back()
        }}
      >
        Close modal
      <\/button>
      <div>{children}<\/div>
    </>
  )
}
```

----------------------------------------

TITLE: Creating Post with Server Action in Next.js JavaScript
DESCRIPTION: In this JavaScript snippet, a form in Next.js is configured to use a server action for post creation. The 'createPost' function is triggered to handle form data on submission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_15

LANGUAGE: JavaScript
CODE:
```
import Form from 'next/form'
import { createPost } from '@/posts/actions'

export default function Page() {
  return (
    <Form action={createPost}>
      <input name="title" />
      {/* ... */}
      <button type="submit">Create Post</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Fix: Re-exporting default component only in Next.js
DESCRIPTION: This code snippet demonstrates the recommended approach of re-exporting only the default component to resolve the error. This prevents accidental inclusion of server-side code in the browser build.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
export { default } from './example-b'
```

----------------------------------------

TITLE: Generating robots.txt with default rules (TypeScript)
DESCRIPTION: Shows how to dynamically generate a `robots.txt` file by exporting a function from `app/robots.ts`. The function returns a `MetadataRoute.Robots` object with default rules for all user agents, allowing access except for `/private/`, and includes a sitemap URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import type { MetadataRoute } from 'next'

export default function robots(): MetadataRoute.Robots {
  return {
    rules: {
      userAgent: '*',
      allow: '/',
      disallow: '/private/',
    },
    sitemap: 'https://acme.com/sitemap.xml',
  }
}
```

----------------------------------------

TITLE: Using the redirect Function Next.js JSX
DESCRIPTION: Shows how to use the redirect function in a JavaScript Server Component to perform server-side redirects. It's imported from 'next/navigation'. The example redirects to '/login' or '/join' based on the result of an asynchronous data fetch within a dynamic route segment page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { redirect } from 'next/navigation'

async function fetchTeam(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  if (!id) {
    redirect('/login')
  }

  const team = await fetchTeam(id)
  if (!team) {
    redirect('/join')
  }

  // ...
}
```

----------------------------------------

TITLE: Configuring i18n for Sub-path Routing Only
DESCRIPTION: This `next.config.js` snippet configures Next.js for sub-path i18n routing. It specifies the list of supported `locales` and defines the `defaultLocale` which will not have a path prefix. Routes will be prefixed with the locale code (e.g., `/fr/blog`) except for the default locale (`/blog`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_1

LANGUAGE: js
CODE:
```
module.exports = {
  i18n: {
    locales: ['en-US', 'fr', 'nl-NL'],
    defaultLocale: 'en-US',
  },
}
```

----------------------------------------

TITLE: Implementing Link Navigation with Loading Indicator
DESCRIPTION: Demonstrates integrating useLinkStatus hook in a navigation menu with loading feedback. Shows how to conditionally render loading state across multiple links.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-link-status.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'
import LoadingIndicator from './components/loading-indicator'

const links = [
  { href: '/shop/electronics', label: 'Electronics' },
  { href: '/shop/clothing', label: 'Clothing' },
  { href: '/shop/books', label: 'Books' },
]

function Menubar() {
  return (
    <div>
      {links.map((link) => (
        <Link key={link.label} href={link.href}>
          {link.label} <LoadingIndicator />
        </Link>
      ))}
    </div>
  )
}
```

----------------------------------------

TITLE: Adding JSON-LD Structured Data to Next.js Page (TSX)
DESCRIPTION: This snippet shows how to embed JSON-LD structured data into a Next.js App Router page component using a `<script>` tag. It defines a Product schema object and injects it into the HTML using `dangerouslySetInnerHTML`, leveraging async functionality to fetch data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export default async function Page({ params }) {
  const { id } = await params;
  const product = await getProduct(id);

  const jsonLd = {
    '@context': 'https://schema.org',
    '@type': 'Product',
    name: product.name,
    image: product.image,
    description: product.description,
  };

  return (
    <section>
      {/* Add JSON-LD to your page */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}
      />
      {/* ... */}
    </section>
  );
}
```

----------------------------------------

TITLE: Configuring i18n for Domain Routing
DESCRIPTION: This `next.config.js` configuration enables domain routing for i18n in Next.js. It lists supported locales and assigns them to specific domains, allowing different locales to be served from different top-level domains or subdomains. It also shows how to redirect specific locales (`nl-BE`) to a different domain's default locale (`example.nl`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_2

LANGUAGE: js
CODE:
```
module.exports = {
  i18n: {
    locales: ['en-US', 'fr', 'nl-NL', 'nl-BE'],
    defaultLocale: 'en-US',

    domains: [
      {
        // Note: subdomains must be included in the domain value to be matched
        // e.g. www.example.com should be used if that is the expected hostname
        domain: 'example.com',
        defaultLocale: 'en-US',
      },
      {
        domain: 'example.fr',
        defaultLocale: 'fr',
      },
      {
        domain: 'example.nl',
        defaultLocale: 'nl-NL',
        // specify other locales that should be redirected
        // to this domain
        locales: ['nl-BE'],
      },
    ],
  },
}
```

----------------------------------------

TITLE: Memoizing Non-Fetch Data with React Cache
DESCRIPTION: Explains how to use the `cache` function provided by React to memoize data fetching logic that doesn't rely on the native `fetch` API, such as queries made with an ORM or direct database calls. Wrapping the async data function with `cache` ensures that subsequent calls with the same arguments within the request lifecycle will return the cached result instead of executing a new query.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
import { cache } from 'react';
import { db, posts, eq } from '@/lib/db'; // Example with Drizzle ORM
import { notFound } from 'next/navigation';

export const getPost = cache(async (id) => {
  const post = await db.query.posts.findFirst({
    where: eq(posts.id, parseInt(id)),
  });

  if (!post) notFound();
  return post;
});
```

----------------------------------------

TITLE: Configuring Multiple Font Files for a Single Family
DESCRIPTION: Illustrates how to configure multiple font files for a single font family using the next/font/local module. This example shows setting up different weights and styles for the Roboto font.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
const roboto = localFont({
  src: [
    {
      path: './Roboto-Regular.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      path: './Roboto-Italic.woff2',
      weight: '400',
      style: 'italic',
    },
    {
      path: './Roboto-Bold.woff2',
      weight: '700',
      style: 'normal',
    },
    {
      path: './Roboto-BoldItalic.woff2',
      weight: '700',
      style: 'italic',
    },
  ],
})
```

----------------------------------------

TITLE: Accessing Search Parameters in a Next.js Page (JSX)
DESCRIPTION: This code shows how to wrap a Client Component using `useSearchParams` in a `Suspense` boundary to enable static rendering of other parts of the route.  It defines a fallback component that is rendered initially and replaced with the actual component after hydration. It leverages React's Suspense API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'\nimport SearchBar from './search-bar'\n\n// This component passed as a fallback to the Suspense boundary\n// will be rendered in place of the search bar in the initial HTML.\n// When the value is available during React hydration the fallback\n// will be replaced with the `<SearchBar>` component.\nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>\n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}
```

----------------------------------------

TITLE: Applying Font Variables in React Components
DESCRIPTION: Example of how to apply the font variable to a component. The parent container gets the font variable className while child elements use styles from the external CSS module.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<main className={inter.variable}>
  <p className={styles.text}>Hello World</p>
</main>
```

LANGUAGE: jsx
CODE:
```
<main className={inter.variable}>
  <p className={styles.text}>Hello World</p>
</main>
```

----------------------------------------

TITLE: Enabling Draft Mode in Next.js Route Handler (TypeScript)
DESCRIPTION: This code snippet shows how to enable Draft Mode in a Next.js Route Handler using TypeScript. It imports `draftMode` from `next/headers`, calls `draft.enable()` to enable Draft Mode, and returns a response indicating that Draft Mode is enabled. It requires the `next` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { draftMode } from 'next/headers'

export async function GET(request: Request) {
  const draft = await draftMode()
  draft.enable()
  return new Response('Draft mode is enabled')
}
```

----------------------------------------

TITLE: Loading External Libraries Dynamically
DESCRIPTION: This code snippet demonstrates how to dynamically load an external library (fuse.js) using the `import()` function. The library is only loaded when the user interacts with the search input. This approach reduces the initial bundle size.  The code uses `useState` to manage the search results.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'

const names = ['Tim', 'Joe', 'Bel', 'Lee']

export default function Page() {
  const [results, setResults] = useState()

  return (
    <div>
      <input
        type="text"
        placeholder="Search"
        onChange={async (e) => {
          const { value } = e.currentTarget
          // Dynamically load fuse.js
          const Fuse = (await import('fuse.js')).default
          const fuse = new Fuse(names)

          setResults(fuse.search(value))
        }}
      />
      <pre>Results: {JSON.stringify(results, null, 2)}</pre>
    </div>
  )
}
```

----------------------------------------

TITLE: Configuring CSP in next.config.js (JavaScript)
DESCRIPTION: This JavaScript code demonstrates how to configure a Content Security Policy (CSP) directly within the `next.config.js` file in a Next.js application. It defines the CSP header string and injects it into all routes using the `headers` configuration option.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
const cspHeader = `
    default-src 'self';
    script-src 'self' 'unsafe-eval' 'unsafe-inline';
    style-src 'self' 'unsafe-inline';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`

module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Content-Security-Policy',
            value: cspHeader.replace(/\n/g, ''),
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Accessing Query Parameters in Next.js TypeScript
DESCRIPTION: This TypeScript code snippet shows how to access search query parameters in a Next.js search results page. It imports a function 'getSearchResults' and accesses the search query using 'searchParams', which is used to fetch results. The fetched results are intended to be displayed on the page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { getSearchResults } from '@/lib/search'

export default async function SearchPage({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const results = await getSearchResults((await searchParams).query)

  return <div>...</div>
}
```

----------------------------------------

TITLE: Segment Configuration Options in Next.js - TypeScript
DESCRIPTION: This TypeScript snippet defines configuration options for a route segment, setting dynamic behavior and caching strategies for Next.js routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
export const dynamic = 'auto'
export const dynamicParams = true
export const revalidate = false
export const fetchCache = 'auto'
export const runtime = 'nodejs'
export const preferredRegion = 'auto'
```

----------------------------------------

TITLE: Server-Side Form Validation with Zod (JavaScript)
DESCRIPTION: Shows a Next.js Server Action (`'use server'`) that performs server-side validation of form data using the Zod library. It defines a Zod schema, parses the incoming `FormData`, and returns validation errors if the data is invalid. Requires the Zod library to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_10

LANGUAGE: JavaScript
CODE:
```
'use server'

import { z } from 'zod'

const schema = z.object({
  email: z.string({
    invalid_type_error: 'Invalid Email',
  }),
})

export default async function createsUser(formData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })

  // Return early if the form data is invalid
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Mutate data
}
```

----------------------------------------

TITLE: Set Priority for LCP Image (App Router JSX)
DESCRIPTION: Shows how to apply the `priority` prop to an `Image` component when it is the Largest Contentful Paint (LCP) element on the page. This tells Next.js to preload the image resource, significantly improving page load performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Home() {
  return (
    <>
      <h1>My Homepage</h1>
      <Image
        src="/me.png"
        alt="Picture of the author"
        width={500}
        height={500}
        priority
      />
      <p>Welcome to my homepage!</p>
    </>
  )
}
```

----------------------------------------

TITLE: Generating Sitemaps in JavaScript with Next.js
DESCRIPTION: This JavaScript snippet mirrors the TypeScript version to generate multiple sitemaps for product entries. It also uses a generateSitemaps function to handle sitemap ID generation and fetches products to build a detailed sitemap object. Key aspects include URL construction and adherence to a URL count per sitemap limit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-sitemaps.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { BASE_URL } from '@/app/lib/constants'

export async function generateSitemaps() {
  // Fetch the total number of products and calculate the number of sitemaps needed
  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]
}

export default async function sitemap({ id }) {
  // Google's limit is 50,000 URLs per sitemap
  const start = id * 50000
  const end = start + 50000
  const products = await getProducts(
    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`
  )
  return products.map((product) => ({
    url: `${BASE_URL}/product/${id}`,
    lastModified: product.date,
  }))
}
```

----------------------------------------

TITLE: Generating No Static Paths with Empty Array Next.js JSX
DESCRIPTION: Shows how to prevent any paths from being statically generated at build time for a dynamic segment by returning an empty array from `generateStaticParams`. Paths will instead be rendered at runtime on the first visit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  return []
}
```

----------------------------------------

TITLE: Initializing Google Analytics on a single route (App Router - JSX)
DESCRIPTION: This code snippet demonstrates how to include Google Analytics on a single route in a Next.js application using the App Router.  It imports the `GoogleAnalytics` component from `@next/third-parties/google` and initializes it with a Google Analytics ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function Page() {
  return <GoogleAnalytics gaId="G-XYZ" />
}
```

----------------------------------------

TITLE: Implementing Data Access with Cache in Next.js
DESCRIPTION: Demonstrates how to properly implement data access using cache directives for prerendering pages. Shows the transformation from uncached to cached data fetching with revalidation options.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
async function getRecentArticles() {
  return db.query(...)
}

export default async function Page() {
  const articles = await getRecentArticles(token);
  return <ArticleList articles={articles}>
}
```

LANGUAGE: jsx
CODE:
```
async function getRecentArticles() {
  "use cache"
  // This cache can be revalidated by webhook or server action
  // when you call revalidateTag("articles")
  cacheTag("articles")
  // This cache will revalidate after an hour even if no explicit
  // revalidate instruction was received
  cacheLife('hours')
  return db.query(...)
}

export default async function Page() {
  const articles = await getRecentArticles(token);
  return <ArticleList articles={articles}>
}
```

----------------------------------------

TITLE: Loading Scripts in Layout - JavaScript
DESCRIPTION: This code snippet demonstrates how to load a third-party script within a Next.js layout component using JavaScript.  The `Script` component from `next/script` is used to embed the script. The script will be loaded once when the layout is accessed. Requires `next/script` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function DashboardLayout({ children }) {
  return (
    <>
      <section>{children}</section>
      <Script src="https://example.com/script.js" />
    </>
  )
}
```

----------------------------------------

TITLE: Loading Scripts in Root Layout - TypeScript
DESCRIPTION: This code snippet shows how to load a third-party script in the root layout of a Next.js application using TypeScript. The script will load on every route. Requires `next/script` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <Script src="https://example.com/script.js" />
    </html>
  )
}
```

----------------------------------------

TITLE: Reading Runtime Environment Variable in App Router Server Component
DESCRIPTION: This snippet demonstrates how to access a runtime environment variable (`process.env.MY_VALUE`) within an App Router Server Component. By using `connection` from `next/server` or other dynamic APIs, the component opts into dynamic rendering, ensuring the environment variable is evaluated at runtime rather than being inlined at build time. This is useful for configurations that differ between environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

----------------------------------------

TITLE: Middleware Config Matcher in Next.js (TypeScript)
DESCRIPTION: This TypeScript code defines a matcher configuration for Next.js middleware. It specifies the paths on which the middleware should run, excluding API routes, static files, image optimization files, and the favicon. It also excludes prefetch requests to improve performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    {
      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',
      missing: [
        { type: 'header', key: 'next-router-prefetch' },
        { type: 'header', key: 'purpose', value: 'prefetch' },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Basic Next.js Configuration Setup
DESCRIPTION: Shows the basic structure of a Next.js configuration file using CommonJS module exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// @ts-check

/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Layout with Dynamic Route Parameters (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to access dynamic route parameters within a layout component using the `params` prop. It utilizes `async/await` to resolve the promise containing the parameters, and extracts the `team` parameter for use within the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
export default async function Layout({
  params,
}: {
  params: Promise<{ team: string }>
}) {
  const { team } = await params
}
```

----------------------------------------

TITLE: Implementing Redirects in Next.js Route Handlers
DESCRIPTION: Example of implementing redirects in a Route Handler using the 'redirect' function from next/navigation. This demonstrates how to perform redirects in both TypeScript and JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { redirect } from 'next/navigation'

export async function GET(request: Request) {
  redirect('https://nextjs.org/')
}
```

LANGUAGE: javascript
CODE:
```
import { redirect } from 'next/navigation'

export async function GET(request) {
  redirect('https://nextjs.org/')
}
```

----------------------------------------

TITLE: Generating Partial Static Paths (Next.js)
DESCRIPTION: Illustrates returning a subset of paths from `generateStaticParams`. This renders the specified paths statically at build time, while others are rendered dynamically upon their first visit at runtime.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  // Render the first 10 posts at build time
  return posts.slice(0, 10).map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Implementing a Basic API Route in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a simple API route that returns a JSON response with a status code of 200. It uses TypeScript for type safety.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Defining Module Server Actions (TS/JS)
DESCRIPTION: Shows how to define reusable Server Actions in a separate file by adding the 'use server' directive at the very top of the file. All exported asynchronous functions in this file will be treated as Server Actions, callable from both Server and Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
'use server'

export async function create() {}
```

LANGUAGE: js
CODE:
```
'use server'

export async function create() {}
```

----------------------------------------

TITLE: Using Video Skeleton as Suspense Fallback - JSX
DESCRIPTION: This code demonstrates using a video skeleton component as the fallback UI within React Suspense, enhancing the loading experience.  It imports both `VideoComponent` and `VideoSkeleton` components and renders the `VideoSkeleton` while the `VideoComponent` is loading. This provides a more visually appealing and informative loading state.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import VideoComponent from '../ui/VideoComponent.jsx'
import VideoSkeleton from '../ui/VideoSkeleton.jsx'

export default function Page() {
  return (
    <section>
      <Suspense fallback={<VideoSkeleton />}>
        <VideoComponent />
      </Suspense>
      {/* Other content of the page */}
    </section>
  )
}
```

----------------------------------------

TITLE: Copying Environment Configuration File
DESCRIPTION: This command duplicates the example environment configuration file `.env.local.example` to `.env.local`. This allows for local configuration settings, such as the Facebook Pixel ID, to be applied without committing them to the repository (as `.env.local` is typically ignored by Git).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Client-Side Data Fetching Example
DESCRIPTION: Example of client-side data fetching using useState and useEffect hooks to handle blog posts data.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'

import { useState, useEffect } from 'react'

export function Posts() {
  const [posts, setPosts] = useState(null)

  useEffect(() => {
    async function fetchPosts() {
      const res = await fetch('https://api.vercel.app/blog')
      const data = await res.json()
      setPosts(data)
    }
    fetchPosts()
  }, [])

  if (!posts) return <div>Loading...</div>

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Route Change Detection with usePathname in Next.js
DESCRIPTION: Shows how to use usePathname along with useSearchParams and useEffect to respond to route changes in a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-pathname.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
'use client'

import { usePathname, useSearchParams } from 'next/navigation'

function ExampleClientComponent() {
  const pathname = usePathname()
  const searchParams = useSearchParams()
  useEffect(() => {
    // Do something here...
  }, [pathname, searchParams])
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { usePathname, useSearchParams } from 'next/navigation'

function ExampleClientComponent() {
  const pathname = usePathname()
  const searchParams = useSearchParams()
  useEffect(() => {
    // Do something here...
  }, [pathname, searchParams])
}
```

----------------------------------------

TITLE: Using beforeInteractive Strategy (App Router, JSX)
DESCRIPTION: This code snippet demonstrates how to use the `beforeInteractive` strategy with the `Script` component in a Next.js application using the App Router. It loads a script before any Next.js code is executed and before page hydration. This strategy is suitable for critical scripts needed by the entire site and should be placed inside the root layout (`app/layout.js`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {children}
        <Script
          src="https://example.com/script.js"
          strategy="beforeInteractive"
        />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Using CSS Modules in a JavaScript Component
DESCRIPTION: This snippet shows the usage of CSS Modules in a JavaScript component, similar to the TypeScript example, for implementing scoped styles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import styles from './styles.module.css'

export default function DashboardLayout({ children }) {
  return <section className={styles.dashboard}>{children}</section>
}
```

----------------------------------------

TITLE: Root Layout Setup (JavaScript)
DESCRIPTION: This code demonstrates setting up the root layout in a Next.js application using JavaScript. It imports a server-side function `getUser` to fetch user data and passes the resulting promise to a `UserProvider` component. The `userPromise` is not awaited, allowing Next.js to start data fetching early on the server. This example improves performance by initiating data fetching in the root layout, avoiding client waterfalls.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { UserProvider } from './user-provider'
import { getUser } from './user' // some server-side function

export default function RootLayout({ children }) {
  let userPromise = getUser() // do NOT await

  return (
    <html lang="en">
      <body>
        <UserProvider userPromise={userPromise}>{children}</UserProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Permanently Redirecting with permanentRedirect (JavaScript)
DESCRIPTION: Shows how to use the `permanentRedirect` function in a Next.js Server Action (`updateUsername`) to perform a permanent 308 redirect. This example revalidates a cache tag after a placeholder database update and then redirects the user to the new permanent URL for the updated profile. Useful for permanent URL changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
'use server'\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username, formData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}
```

----------------------------------------

TITLE: Running Next.js in development mode with Yarn
DESCRIPTION: These commands first install the required node modules using `yarn install` and then start the Next.js development server using `yarn dev`.  This makes the application available for local development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Setting Various Basic Metadata Fields in Next.js
DESCRIPTION: Configure common metadata fields such as `generator`, `applicationName`, `referrer`, `keywords`, `authors`, `creator`, `publisher`, and `formatDetection`. These fields generate various HTML `<meta>` and `<link>` tags for SEO and browser behavior control.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_10

LANGUAGE: JSX
CODE:
```
export const metadata = {
  generator: 'Next.js',
  applicationName: 'Next.js',
  referrer: 'origin-when-cross-origin',
  keywords: ['Next.js', 'React', 'JavaScript'],
  authors: [{ name: 'Seb' }, { name: 'Josh', url: 'https://nextjs.org' }],
  creator: 'Jiachi Liu',
  publisher: 'Sebastian Markbåge',
  formatDetection: {
    email: false,
    address: false,
    telephone: false,
  },
}
```

LANGUAGE: HTML
CODE:
```
<meta name="application-name" content="Next.js" />
<meta name="author" content="Seb" />
<link rel="author" href="https://nextjs.org" />
<meta name="author" content="Josh" />
<meta name="generator" content="Next.js" />
<meta name="keywords" content="Next.js,React,JavaScript" />
<meta name="referrer" content="origin-when-cross-origin" />
<meta name="color-scheme" content="dark" />
<meta name="creator" content="Jiachi Liu" />
<meta name="publisher" content="Sebastian Markbåge" />
<meta name="format-detection" content="telephone=no, address=no, email=no" />
```

----------------------------------------

TITLE: Implementing Client-Side Counter Component in JavaScript
DESCRIPTION: JavaScript version of the counter component using the 'use client' directive with React useState hook.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-client.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Import Button with path alias - TypeScript
DESCRIPTION: This snippet demonstrates importing a component using a custom module alias defined in `tsconfig.json` or `jsconfig.json`. The `paths` option allows creating aliases, making imports more readable and abstracting away the underlying file structure. It assumes an alias `@` is defined to represent a specific directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import Button from "@/components/button";
```

----------------------------------------

TITLE: revalidatePath Function Signature
DESCRIPTION: Defines the signature of the `revalidatePath` function, showing its parameters (`path` and optional `type`) and that it returns void. The `path` parameter is a string representing the filesystem path or literal route segment, and `type` is an optional string ('page' or 'layout') used when revalidating dynamic segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
revalidatePath(path: string, type?: 'page' | 'layout'): void;
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command leverages pnpm to create a fresh Next.js application with a basic CSS example template. The command initializes the project structure, manages dependencies, and provides the boilerplate code to start building. The application is created under the 'basic-css-app' directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/basic-css/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example basic-css basic-css-app
```

----------------------------------------

TITLE: Migrating Cookie Handling in Next.js Middleware
DESCRIPTION: Comparison between the old and new approach for handling cookies in Next.js middleware. The new API provides a more structured way to set, get, and delete cookies using the response.cookies object.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // create an instance of the class to access the public methods. This uses `next()`,
  // you could use `redirect()` or `rewrite()` as well
  let response = NextResponse.next()
  // get the cookies from the request
  let cookieFromRequest = request.cookies['my-cookie']
  // set the `cookie`
  response.cookie('hello', 'world')
  // set the `cookie` with options
  const cookieWithOptions = response.cookie('hello', 'world', {
    path: '/',
    maxAge: 1000 * 60 * 60 * 24 * 7,
    httpOnly: true,
    sameSite: 'strict',
    domain: 'example.com',
  })
  // clear the `cookie`
  response.clearCookie('hello')

  return response
}
```

LANGUAGE: typescript
CODE:
```
export function middleware() {
  const response = new NextResponse()

  // set a cookie
  response.cookies.set('vercel', 'fast')

  // set another cookie with options
  response.cookies.set('nextjs', 'awesome', { path: '/test' })

  // get all the details of a cookie
  const { value, ...options } = response.cookies.getWithOptions('vercel')
  console.log(value) // => 'fast'
  console.log(options) // => { name: 'vercel', Path: '/test' }

  // deleting a cookie will mark it as expired
  response.cookies.delete('vercel')

  return response
}
```

----------------------------------------

TITLE: Configuring Edge Runtime for API Route - JavaScript
DESCRIPTION: Exports a constant variable named `runtime` with the string value `"edge"`. This special export configures the execution environment for the API route, specifically opting into the Edge Runtime. This is typically used for deploying to environments like Vercel Edge Functions, enabling lower latency and higher performance compared to traditional Node.js environments for certain workloads.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
export const runtime = "edge";
```

----------------------------------------

TITLE: createContext Usage in Client Component (After)
DESCRIPTION: This code snippet demonstrates the correct way to use `createContext` in Next.js by marking the component as a Client Component with the `'use client'` directive.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/context-in-server-component.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'
import { createContext } from 'react'

const Context = createContext()
```

----------------------------------------

TITLE: Configuring Route Handlers with Dynamic Caching in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates configuring a route handler to enforce caching behavior for `GET` functions using the `dynamic` configuration option, specifically setting it to `force-static` to manage cache state explicitly. This approach helps control server-side caching strategies within the Next.js route segment configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_11

LANGUAGE: js
CODE:
```
export const dynamic = 'force-static'\n\nexport async function GET() {}
```

----------------------------------------

TITLE: Using a Server Action in a Client Component (JavaScript)
DESCRIPTION: This snippet shows how to import and use a Server Action within a client component in Next.js using JavaScript. The `create` function, which is defined as a Server Action, is imported and called when the button is clicked. This allows client components to trigger server-side logic directly without the need for explicit API calls.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_16

LANGUAGE: javascript
CODE:
```
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}
```

----------------------------------------

TITLE: Configuring Next.js Middleware with Path Matching
DESCRIPTION: Example of configuring a root middleware file with path matching using the new API. Shows how to rewrite URLs for specific paths using a matcher configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  return NextResponse.rewrite(new URL('/about-2', request.url))
}

// Supports both a single string value or an array of matchers
export const config = {
  matcher: ['/about/:path*', '/dashboard/:path*'],
}
```

----------------------------------------

TITLE: Creating Root Layout in JavaScript
DESCRIPTION: This code creates a root layout file (`layout.js`) within the `app` directory, essential for Next.js App Router applications. It wraps all pages. It includes the basic HTML structure, meta tags, and a root div where the page content is rendered.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_3

LANGUAGE: app/layout.js
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Sending Google Analytics events (App Router - JSX)
DESCRIPTION: This code snippet demonstrates how to send events to Google Analytics using the `sendGAEvent` function from `@next/third-parties/google` within an App Router component. It defines a button that, when clicked, dispatches a custom event named 'buttonClicked' with the value 'xyz'. The `'use client'` directive indicates that this is a client-side component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_13

LANGUAGE: jsx
CODE:
```
'use client'

import { sendGAEvent } from '@next/third-parties/google'

export function EventButton() {
  return (
    <div>
      <button
        onClick={() => sendGAEvent('event', 'buttonClicked', { value: 'xyz' })
      >
        Send Event
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Embedding Google Maps with Next.js
DESCRIPTION: This code snippet demonstrates how to embed a Google Maps component in a Next.js page using the `@next/third-parties/google` package. It requires an API key and specifies the map mode, height, width, and query parameters. The `GoogleMapsEmbed` component is imported and rendered with the specified props.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_15

LANGUAGE: jsx
CODE:
```
import { GoogleMapsEmbed } from '@next/third-parties/google'

export default function Page() {
  return (
    <GoogleMapsEmbed
      apiKey="XYZ"
      height={200}
      width="100%"
      mode="place"
      q="Brooklyn+Bridge,New+York,NY"
    />
  )
}
```

----------------------------------------

TITLE: Handling Query Parameters in Next.js - TypeScript
DESCRIPTION: This snippet allows the retrieval of query parameters from a NextRequest instance in a GET route. It shows how to access the 'query' parameter from the URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { type NextRequest } from 'next/server'

export function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams
  const query = searchParams.get('query')
  // query is "hello" for /api/search?query=hello
}
```

----------------------------------------

TITLE: Using unstable_noStore in a Next.js Server Component
DESCRIPTION: This JavaScript snippet demonstrates how to use the unstable_noStore function in a Next.js server component to prevent the component from being statically rendered and cached. The function is imported from the next/cache module, and it's used at the start of an async function, ServerComponent. This function requires the next package and a setup that involves database querying. No specific inputs are required, and the output depends on the database query results.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_noStore.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { unstable_noStore as noStore } from 'next/cache';

export default async function ServerComponent() {
  noStore();
  const result = await db.query(...);
  ...
}
```

----------------------------------------

TITLE: Middleware for CSP with Nonce in Next.js (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to add a Content Security Policy (CSP) header using middleware in Next.js, incorporating a dynamically generated nonce for enhanced security. It generates a unique nonce, constructs the CSP header string, and then applies it to both the request and the response. Dynamic rendering is required for nonce generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')
  const cspHeader = `
    default-src 'self';
    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';
    style-src 'self' 'nonce-${nonce}';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`
  // Replace newline characters and spaces
  const contentSecurityPolicyHeaderValue = cspHeader
    .replace(/\s{2,}/g, ' ')
    .trim()

  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-nonce', nonce)
  requestHeaders.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  })
  response.headers.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  return response
}
```

----------------------------------------

TITLE: Running the Next.js Development Server
DESCRIPTION: Command options for starting the Next.js development server using different package managers including npm, yarn, pnpm, or bun.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw/js/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Configuring Image Optimization in next.config.js
DESCRIPTION: This JavaScript configuration block in `next.config.js` is used to configure image optimization for Next.js. It defines allowed remote image URL patterns for Storyblok and Unsplash, which Next.js uses to securely optimize images from these sources. It sets allowed protocols, hostnames, port (empty string), and pathname (wildcard).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
    images: {
      remotePatterns: [
        {
          protocol: 'https',
          hostname: 'a.storyblok.com',
          port: '',
          pathname: '**',
          search: '',
        },
        {
          protocol: 'https',
          hostname: 'images.unsplash.com',
          port: '',
          pathname: '**',
          search: '',
        },
       ],
    },
  }
```

----------------------------------------

TITLE: Wrapping Root Layout with Context Provider (TSX)
DESCRIPTION: Illustrates wrapping the root layout of a Next.js App Router application with a React context provider (`ContextProvider`). This pattern allows child Client Components access to the context data, but Server Components rendered before the client side will not have access to this context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_38

LANGUAGE: tsx
CODE:
```
import { ContextProvider } from 'auth-lib'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang="en">\n      <body>\n        <ContextProvider>{children}</ContextProvider>\n      </body>\n    </html>\n  )\n}
```

----------------------------------------

TITLE: Revalidating Cache After Server Function Updates with JavaScript
DESCRIPTION: Demonstrates revalidating the Next.js cache after data updates in a JavaScript Server Function. Uses revalidatePath to refresh cached data on the posts path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_17

LANGUAGE: javascript
CODE:
```
import { revalidatePath } from 'next/cache'

export async function createPost(formData) {
  'use server'
  // Update data
  // ...
  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Conditionally Rewriting Paths in Next.js Middleware JavaScript
DESCRIPTION: This snippet demonstrates how to use conditional statements within the main Middleware function in JavaScript to rewrite requests based on the incoming path. It checks if the path starts with '/about' or '/dashboard' and uses `NextResponse.rewrite` to display content from a different URL without changing the browser's URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    return NextResponse.rewrite(new URL('/about-2', request.url))
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    return NextResponse.rewrite(new URL('/dashboard/user', request.url))
  }
}
```

----------------------------------------

TITLE: Configuring deviceSizes in next.config.js
DESCRIPTION: This snippet demonstrates the configuration of deviceSizes in next.config.js to specify expected device widths for serving images in a responsive format. The default list of sizes serves as breakpoints.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_19

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
  },
}

```

----------------------------------------

TITLE: Defining Basic GET Route Handler in App Router (JavaScript)
DESCRIPTION: Provides a basic example of a Route Handler in the `app` directory using JavaScript. It exports an asynchronous function named `GET` that serves as the handler for incoming GET requests to the route, utilizing standard Web APIs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_29

LANGUAGE: js
CODE:
```
export async function GET(request) {}
```

----------------------------------------

TITLE: Rendering Image Component with src Prop in JSX
DESCRIPTION: This code snippet demonstrates the use of the <Image> component in JSX with a src prop. The component automatically generates the src and srcset attributes for the resulting <img>. The expected input is the source path of the image, and the output will be a corresponding <img> tag in HTML format.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_14

LANGUAGE: jsx
CODE:
```
<Image src="/me.jpg" />
```

LANGUAGE: html
CODE:
```
<img
  srcset=
    "/_next/image?url=%2Fme.jpg&w=640&q=75 1x,
    /_next/image?url=%2Fme.jpg&w=828&q=75 2x
  "
  src="/_next/image?url=%2Fme.jpg&w=828&q=75"/>

```

----------------------------------------

TITLE: Securing Server Actions by Verifying User Role (JS)
DESCRIPTION: Illustrates securing a Next.js Server Action in JavaScript by checking the user's session and verifying if their role is 'admin' before executing the action. Unauthorized users are returned early. Assumes a `verifySession` function is available.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_35

LANGUAGE: js
CODE:
```
'use server'\nimport { verifySession } from '@/app/lib/dal'\n\nexport async function serverAction() {\n  const session = await verifySession()\n  const userRole = session.user.role\n\n  // Return early if user is not authorized to perform the action\n  if (userRole !== 'admin') {\n    return null\n  }\n\n  // Proceed with the action for authorized users\n}
```

----------------------------------------

TITLE: Generating Static Params for Single Dynamic Segment Next.js TSX/JSX
DESCRIPTION: Illustrates how to use `generateStaticParams` for a single dynamic route segment (`[id]`) by returning a hardcoded array of objects, each containing the parameter value for the segment. The example shows how these params correspond to generated paths.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export function generateStaticParams() {
  return [{ id: '1' }, { id: '2' }, { id: '3' }]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /product/1
// - /product/2
// - /product/3
export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  // ...
```

LANGUAGE: jsx
CODE:
```
export function generateStaticParams() {
  return [{ id: '1' }, { id: '2' }, { id: '3' }]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /product/1
// - /product/2
// - /product/3
export default async function Page({ params }) {
  const { id } = await params
  // ...
```

----------------------------------------

TITLE: Using Theme Provider in Layout with TypeScript
DESCRIPTION: This snippet demonstrates how to utilize the ThemeProvider within the RootLayout component. By wrapping children with the ThemeProvider, all components can access the theme context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
import ThemeProvider from './theme-provider'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html>
      <body>
        <ThemeProvider>{children}</ThemeProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Configuring i18n in next.config.js for Internationalization
DESCRIPTION: This code snippet demonstrates the correct structure for configuring internationalization (i18n) within the `next.config.js` file in a Next.js application. It defines supported locales, the default locale, and optional domain-specific configurations for routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-i18n-config.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  i18n: {
    // These are all the locales you want to support in
    // your application
    locales: ['en-US', 'es', 'fr', 'nl-NL'],
    // This is the default locale you want to be used when visiting
    // a non-locale prefixed path e.g. `/hello`
    defaultLocale: 'en-US',
    // This is a list of locale domains and the default locale they
    // should handle (these are only required when setting up domain routing)
    domains: [
      {
        domain: 'example.com',
        defaultLocale: 'en-US',
        // other locales that should be handled on this domain
        locales: ['es'],
      },
      {
        domain: 'example.nl',
        defaultLocale: 'nl-NL',
      },
      {
        domain: 'example.fr',
        defaultLocale: 'fr',
      },
    ],
  },
}
```

----------------------------------------

TITLE: Redirecting After Server Function Execution with TypeScript
DESCRIPTION: Shows how to redirect users to a different page after a Server Function completes in TypeScript. Uses the redirect function from Next.js navigation to send users to the posts page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createPost(formData: FormData) {
  // Update data
  // ...

  redirect('/posts')
}
```

----------------------------------------

TITLE: Rendering Unauthorized Page - Alternative JSX
DESCRIPTION: This code snippet exports a React component that displays a '401 - Unauthorized' message and integrates a login component. It serves as an alternative implementation using JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import Login from '@/app/components/Login'

export default function UnauthorizedPage() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}

```

----------------------------------------

TITLE: Implementing Unauthorized Redirect in Dashboard (JavaScript)
DESCRIPTION: This JavaScript snippet achieves the same functionality as its TypeScript counterpart, ensuring unauthorized users are redirected to a 401 error page in a Dashboard page. It verifies session data and invokes unauthorized upon authentication failure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  return (
    <main>
      <h1>Welcome to the Dashboard</h1>
      <p>Hi, {session.user.name}.</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Invalidating Tagged Cache in TypeScript
DESCRIPTION: Describes using revalidateTag within a TypeScript function to clear cache entries tagged with 'bookings-data'. This snippet is part of a server-side updateBookings function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function updateBookings() {
  await updateBookingData()
  revalidateTag('bookings-data')
}
```

----------------------------------------

TITLE: Loading Multiple Font Files for a Single Font Family in Next.js
DESCRIPTION: Shows how to use multiple font files for different weights and styles of the same font family. The example uses the Roboto font with regular, italic, bold, and bold italic variants.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_24

LANGUAGE: js
CODE:
```
const roboto = localFont({
  src: [
    {
      path: './Roboto-Regular.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      path: './Roboto-Italic.woff2',
      weight: '400',
      style: 'italic',
    },
    {
      path: './Roboto-Bold.woff2',
      weight: '700',
      style: 'normal',
    },
    {
      path: './Roboto-BoldItalic.woff2',
      weight: '700',
      style: 'italic',
    },
  ],
})
```

----------------------------------------

TITLE: Using Google Fonts with Next.js Font Module
DESCRIPTION: Demonstrates how to use Google Fonts with the next/font module. This example shows importing and applying a Google Font to the root layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { Geist } from 'next/font/google'

const geist = Geist({
  subsets: ['latin'],
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={geist.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Geist } from 'next/font/google'

const geist = Geist({
  subsets: ['latin'],
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={geist.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Disabling Server-Side Rendering with next/dynamic (Next.js)
DESCRIPTION: Illustrates how to prevent a React component from being server-rendered in Next.js using the `next/dynamic` import function with the `{ ssr: false }` option. This approach is useful for components that rely heavily on browser-specific APIs or are known to cause hydration mismatches, ensuring they are only executed and rendered client-side.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-hydration-error.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
import dynamic from 'next/dynamic';

const NoSSR = dynamic(() => import('../components/no-ssr'), { ssr: false });

export default function Page() {
  return (
    <div>
      <NoSSR />
    </div>
  );
}
```

----------------------------------------

TITLE: Conditional Redirects in Next.js
DESCRIPTION: This code shows how to conditionally apply redirects based on headers, cookies, or query parameters using `has` and `missing` fields. It ensures that all specified conditions in `has` match and none in `missing` are present for the redirect to take effect.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async redirects() {
    return [
      {
        source: '/:path((?!another-page$).*)',
        has: [
          {
            type: 'header',
            key: 'x-redirect-me',
          },
        ],
        permanent: false,
        destination: '/another-page',
      }
    ]
  },
}
```

----------------------------------------

TITLE: Implementing Local Fonts in Next.js App Router with TypeScript
DESCRIPTION: Demonstrates how to import and use local font files in a Next.js application using the App Router with TypeScript. The example shows how to load a local font file and apply it to the entire application through the RootLayout component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_21

LANGUAGE: tsx
CODE:
```
import localFont from 'next/font/local'

// Font files can be colocated inside of `app`
const myFont = localFont({
  src: './my-font.woff2',
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={myFont.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Nesting Functional Component Children in Next.js Link
DESCRIPTION: These snippets illustrate how to use a functional component as the child of `Link`. In addition to `passHref` and `legacyBehavior`, the functional component must be wrapped in `React.forwardRef` to correctly pass the `ref` needed by the `Link` component. Examples are provided for both TSX and JSX in App Router and Pages Router contexts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_14

LANGUAGE: TSX
CODE:
```
import Link from 'next/link'
import React from 'react'

// Define the props type for MyButton
interface MyButtonProps {
  onClick?: React.MouseEventHandler<HTMLAnchorElement>
  href?: string
}

// Use React.ForwardRefRenderFunction to properly type the forwarded ref
const MyButton: React.ForwardRefRenderFunction<
  HTMLAnchorElement,
  MyButtonProps
> = ({ onClick, href }, ref) => {
  return (
    <a href={href} onClick={onClick} ref={ref}>
      Click Me
    </a>
  )
}

// Use React.forwardRef to wrap the component
const ForwardedMyButton = React.forwardRef(MyButton)

export default function Page() {
  return (
    <Link href="/about" passHref legacyBehavior>
      <ForwardedMyButton />
    </Link>
  )
}
```

LANGUAGE: JSX
CODE:
```
import Link from 'next/link'
import React from 'react'

// `onClick`, `href`, and `ref` need to be passed to the DOM element
// for proper handling
const MyButton = React.forwardRef(({ onClick, href }, ref) => {
  return (
    <a href={href} onClick={onClick} ref={ref}>
      Click Me
    </a>
  )
})

// Add a display name for the component (useful for debugging)
MyButton.displayName = 'MyButton'

export default function Page() {
  return (
    <Link href="/about" passHref legacyBehavior>
      <MyButton />
    </Link>
  )
}

```

LANGUAGE: TSX
CODE:
```
import Link from 'next/link'
import React from 'react'

// Define the props type for MyButton
interface MyButtonProps {
  onClick?: React.MouseEventHandler<HTMLAnchorElement>
  href?: string
}

// Use React.ForwardRefRenderFunction to properly type the forwarded ref
const MyButton: React.ForwardRefRenderFunction<
  HTMLAnchorElement,
  MyButtonProps
> = ({ onClick, href }, ref) => {
  return (
    <a href={href} onClick={onClick} ref={ref}>
      Click Me
    </a>
  )
}

// Use React.forwardRef to wrap the component
const ForwardedMyButton = React.forwardRef(MyButton)

export default function Home() {
  return (
    <Link href="/about" passHref legacyBehavior>
      <ForwardedMyButton />
    </Link>
  )
}
```

LANGUAGE: JSX
CODE:
```
import Link from 'next/link'
import React from 'react'

// `onClick`, `href`, and `ref` need to be passed to the DOM element
// for proper handling
const MyButton = React.forwardRef(({ onClick, href }, ref) => {
  return (
    <a href={href} onClick={onClick} ref={ref}>
      Click Me
    </a>
  )
})

// Add a display name for the component (useful for debugging)
MyButton.displayName = 'MyButton'

export default function Home() {
  return (
    <Link href="/about" passHref legacyBehavior>
      <MyButton />
    </Link>
  )
}
```

----------------------------------------

TITLE: Initializing Google Tag Manager on a single route (Pages Router - JSX)
DESCRIPTION: This code snippet demonstrates how to load the `GoogleTagManager` component on a specific page within a Next.js application using the Pages Router.  It imports the component from `@next/third-parties/google` and sets the `gtmId` prop with the appropriate container ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { GoogleTagManager } from '@next/third-parties/google'

export default function Page() {
  return <GoogleTagManager gtmId="GTM-XYZ" />
}
```

----------------------------------------

TITLE: Using Preload Pattern in Next.js Page (TSX)
DESCRIPTION: Demonstrates how to call the `preload` function early within an async server component (a Next.js Page) before potentially blocking operations or rendering the main component. This ensures the item's data starts fetching concurrently with other necessary tasks, potentially reducing overall load time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_10

LANGUAGE: TSX
CODE:
```
import Item, { preload, checkIsAvailable } from '@/components/Item'

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  // starting loading item data
  preload(id)
  // perform another asynchronous task
  const isAvailable = await checkIsAvailable()

  return isAvailable ? <Item id={id} /> : null
}
```

LANGUAGE: JSX
CODE:
```
import Item, { preload, checkIsAvailable } from '@/components/Item'

export default async function Page({ params }) {
  const { id } = await params
  // starting loading item data
  preload(id)
  // perform another asynchronous task
  const isAvailable = await checkIsAvailable()

  return isAvailable ? <Item id={id} /> : null
}
```

----------------------------------------

TITLE: Reference Public Asset (App Router)
DESCRIPTION: Demonstrates how to reference static assets placed in the `public` folder (like `profile.png`) from a component using the `next/image` component and a root-relative path (`/profile.png`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return <Image src="/profile.png" alt="Profile" width={100} height={100} />
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return <Image src="/profile.png" alt="Profile" width={100} height={100} />
}
```

----------------------------------------

TITLE: Basic Form Component Usage in TypeScript React
DESCRIPTION: Demonstrates how to use the Next.js Form component to create a simple search form that appends the query parameter to the URL on submission. This example shows the TypeScript implementation in app directory structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import Form from 'next/form'

export default function Page() {
  return (
    <Form action="/search">
      {/* On submission, the input value will be appended to
          the URL, e.g. /search?query=abc */}
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Revalidating A Layout Path
DESCRIPTION: Illustrates how to use `revalidatePath` with a dynamic path and the 'layout' type. This invalidates the cache for any URLs matching the layout file pattern (e.g., `/blog/[slug]`) and also causes pages beneath it sharing the same layout to revalidate on the next visit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/[slug]', 'layout')
// or with route groups
revalidatePath('/(main)/post/[slug]', 'layout')
```

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: This command copies the example environment variable file (.env.local.example) to a local environment file (.env.local).  This allows for local configuration without affecting the example file.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Request-time Operations with Next.js Connection API
DESCRIPTION: Shows how to properly handle request-time operations using the Next.js connection API and Suspense for loading states.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const currentTime = Date.now()
  if (currentTime > someTriggerDate) {
    return <SpecialBanner />
  } else {
    return <NormalBanner />
  }
}
```

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

async function BannerSkeleton() {
  ...
}

export default async function Page() {
  return <Suspense fallback={<BannerSkeleton />}>
    <DynamicBanner />
  </Suspense>
}

async function DynamicBanner() {
  await connection();
  const currentTime = Date.now();
  if (currentTime > someTriggerDate) {
    return <SpecialBanner />
  } else {
    return <NormalBanner />
  }
}
```

----------------------------------------

TITLE: Using useParams in JavaScript with Next.js
DESCRIPTION: The example demonstrates how to use the useParams hook in a JavaScript context. It retrieves dynamic parameters from the current URL and logs them. This component is designed as a Client Component and requires Next.js version that supports Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-params.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useParams } from 'next/navigation'

export default function ExampleClientComponent() {
  const params = useParams()

  // Route -> /shop/[tag]/[item]
  // URL -> /shop/shoes/nike-air-max-97
  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }
  console.log(params)

  return '...'
}

```

----------------------------------------

TITLE: Valid `href` Interpolation with Next.js Link
DESCRIPTION: This code snippet demonstrates a valid `href` interpolation using the `next/link` component in Next.js. The `href` property is an object with a `pathname` that defines dynamic route parameters `/blog/[post]/[comment]`, and the `query` provides values for both `post` and `comment`. This ensures that all dynamic route parameters are properly interpolated, preventing the error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/href-interpolation-failed.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function BlogLink() {
  return (
    <Link
      href={{
        pathname: '/blog/[post]/[comment]',
        query: { post: 'post-1', comment: 'comment-1' },
      }}
    >
      <a>Valid link</a>
    </Link>
  )
}
```

----------------------------------------

TITLE: getUser Implementation Stub (Next.js DAL) - JS
DESCRIPTION: This snippet shows the structure of the `getUser` function within the DAL, highlighting that it first calls `verifySession()` to ensure authentication before proceeding with any data fetching logic (indicated by the comment).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_33

LANGUAGE: JS
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  // Get user ID from session and fetch data
})
```

----------------------------------------

TITLE: Implementing Root-Level Middleware with Path-Specific Logic in Next.js
DESCRIPTION: Demonstrates how to create a root-level middleware file that handles multiple path-specific middleware logic using NextRequest. Shows how to conditionally execute middleware functions based on URL paths using startsWith() checks.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/nested-middleware.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    // This logic is only applied to /about
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    // This logic is only applied to /dashboard
  }
}
```

----------------------------------------

TITLE: Setting Metadata Absolute Title in Next.js Page
DESCRIPTION: Set an absolute title for a specific page (`page.js` or `page.tsx`) using the `metadata.title.absolute` property. This title overrides any `title.template` defined in parent layout segments, resulting in a simple title.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_8

LANGUAGE: TSX
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: {
    absolute: 'About',
  },
}

// Output: <title>About</title>
```

LANGUAGE: JSX
CODE:
```
export const metadata = {
  title: {
    absolute: 'About',
  },
}

// Output: <title>About</title>
```

----------------------------------------

TITLE: Implementing ISR Dynamic Route Pages Router JSX
DESCRIPTION: Implements ISR for a dynamic route using Next.js Pages Router with JavaScript. It defines `getStaticPaths` to determine which paths to pre-render at build time and `getStaticProps` to fetch data for each path and set the `revalidate` option for time-based cache invalidation (60 seconds). The `Page` component receives the fetched post data as props.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
export async function getStaticPaths() {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // We'll prerender only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}

export async function getStaticProps({ params }) {
  const post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(
    (res) => res.json()
  )

  return {
    props: { post },
    // Next.js will invalidate the cache when a
    // request comes in, at most once every 60 seconds.
    revalidate: 60,
  }
}

export default function Page({ post }) {
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Handling FormData in Next.js - TypeScript
DESCRIPTION: This TypeScript snippet illustrates how to read FormData from a request in a POST route. It retrieves specific fields from the FormData and returns them as a JSON response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
export async function POST(request: Request) {
  const formData = await request.formData()
  const name = formData.get('name')
  const email = formData.get('email')
  return Response.json({ name, email })
}
```

----------------------------------------

TITLE: Authenticating User Server Action - TSX/JSX
DESCRIPTION: Extends the `createUser` server function to include authentication logic. It requires an authentication token, uses an `authenticate` helper function from a library, and throws an error if the user is unauthorized before creating the user in the database, highlighting security considerations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use server'\n\nimport { db } from '@/lib/db' // Your database client\nimport { authenticate } from '@/lib/auth' // Your authentication library\n\nexport async function createUser(\n  data: { name: string; email: string },\n  token: string\n) {\n  const user = authenticate(token)\n  if (!user) {\n    throw new Error('Unauthorized')\n  }\n  const newUser = await db.user.create({ data })\n  return newUser\n}
```

LANGUAGE: jsx
CODE:
```
'use server'\n\nimport { db } from '@/lib/db' // Your database client\nimport { authenticate } from '@/lib/auth' // Your authentication library\n\nexport async function createUser(data, token) {\n  const user = authenticate(token)\n  if (!user) {\n    throw new Error('Unauthorized')\n  }\n  const newUser = await db.user.create({ data })\n  return newUser\n}
```

----------------------------------------

TITLE: Ensuring Authenticated Mutations with Server Actions (TypeScript)
DESCRIPTION: This snippet illustrates enforcing authentication for performing mutations using server actions in TypeScript. It verifies user session and invokes unauthorized for failed authentications, ensuring only authenticated users can proceed with actions like updating profiles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateProfile(data: FormData) {
  const session = await verifySession()

  // If the user is not authenticated, return a 401
  if (!session) {
    unauthorized()
  }

  // Proceed with mutation
  // ...
}
```

----------------------------------------

TITLE: Implementing Next.js Middleware with NextURL Clone
DESCRIPTION: Demonstrates the recommended approach for URL handling in Next.js Middleware by cloning NextURL and modifying its pathname. This method properly handles configuration settings like basePath and locale.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-relative-urls.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl.clone()
  url.pathname = '/dest'
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Verify User Session in DAL (Next.js/React Cache) - JS
DESCRIPTION: This function verifies the user's session by retrieving a session cookie, decrypting it, and checking for a valid user ID. If the session is invalid or missing, it redirects to the login page. It uses React's `cache` API to memoize the result within a React render pass.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_23

LANGUAGE: JS
CODE:
```
import 'server-only'

import { cookies } from 'next/headers'
import { decrypt } from '@/app/lib/session'
import { cache } from 'react'
import { redirect } from 'next/navigation'

export const verifySession = cache(async () => {
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  if (!session.userId) {
    redirect('/login')
  } attention: this code is commented out in the source, uncommenting for documentation purposes

  return { isAuth: true, userId: session.userId }
}) attention: this code is commented out in the source, uncommenting for documentation purposes
```

----------------------------------------

TITLE: Configure tsconfig.json for module path aliases
DESCRIPTION: This JSON snippet shows how to configure `tsconfig.json` or `jsconfig.json` to set up module path aliases. By defining paths under `compilerOptions`, you can create shortcuts for importing modules, enhancing code readability and maintainability. The `baseUrl` specifies the base directory for resolving non-absolute module names.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_9

LANGUAGE: JSON
CODE:
```
{
  "compilerOptions": {
    "module": "esnext",
    "moduleResolution": "bundler",
    "baseUrl": "./",
    "paths": {
      "@/components/*": ["components/*"]
    }
  }
}
```

----------------------------------------

TITLE: Setting a Cookie in NextResponse - TypeScript
DESCRIPTION: Sets a cookie with the specified name and value in the response. It retrieves the incoming request context to determine the appropriate response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Given incoming request /home
let response = NextResponse.next()
// Set a cookie to hide the banner
response.cookies.set('show-banner', 'false')
// Response will have a `Set-Cookie:show-banner=false;path=/home` header
return response
```

----------------------------------------

TITLE: Install Dependencies and Run Development Server
DESCRIPTION: Installs the required npm packages for the project and then starts the Next.js development server.  The server will run on localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fauna/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Adding Additional Attributes to Script Tag in Next.js (JSX)
DESCRIPTION: This code snippet demonstrates how to add additional attributes, such as `id`, `nonce`, and custom data attributes, to the `<script>` tag using the `next/script` component. It is designed to be used within a client component, as indicated by the `'use client'` directive. The additional attributes are directly passed to the `Script` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_15

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://example.com/script.js"
        id="example-script"
        nonce="XUENAJFW"
        data-test="script"
      />
    </>
  )
}
```

----------------------------------------

TITLE: Using CSS Modules in Next.js
DESCRIPTION: This snippet demonstrates how to import CSS Modules into a Next.js component for scoped styling, ensuring unique class names to prevent collisions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import styles from './styles.module.css'

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section className={styles.dashboard}>{children}</section>
}
```

----------------------------------------

TITLE: Configuring remotePatterns in next.config.js
DESCRIPTION: This snippet illustrates how to set up remotePatterns in next.config.js to specify allowed external image sources for safety against malicious users. The configuration ensures that only authorized external images can be loaded.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_17

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    remotePatterns: [new URL('https://example.com/account123/**')],
  },
}

```

----------------------------------------

TITLE: Redirect in Next.js Client Component (TypeScript)
DESCRIPTION: This example shows how to use the `redirect` function in a Next.js Client Component using TypeScript. It checks if the current pathname starts with `/admin` and doesn't include `/login`. If both conditions are met, it redirects the user to `/admin/login`. When using `redirect` in a Client Component on initial page load during SSR, it will perform a server-side redirect.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
'use client'

import { redirect, usePathname } from 'next/navigation'

export function ClientRedirect() {
  const pathname = usePathname()

  if (pathname.startsWith('/admin') && !pathname.includes('/login')) {
    redirect('/admin/login')
  }

  return <div>Login Page</div>
}
```

----------------------------------------

TITLE: Configure Remote Image Patterns (Next.js JS)
DESCRIPTION: Configures the `next.config.js` file to define allowed remote image sources using the `remotePatterns` array. This is essential for security to prevent your application from optimizing arbitrary external image URLs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_5

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**',
        search: '',
      },
    ],
  },
}
```

----------------------------------------

TITLE: Using Local Image in App Router (JSX)
DESCRIPTION: Demonstrates using the `next/image` component with a local image file imported directly into an App Router page. Next.js automatically determines and provides `width`, `height`, and `blurDataURL` for static local imports, preventing layout shift.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'
import profilePic from './me.png'

export default function Page() {
  return (
    <Image
      src={profilePic}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}
```

----------------------------------------

TITLE: Adding a Custom Loading Component with next/dynamic
DESCRIPTION: This code snippet demonstrates how to add a custom loading component while a dynamically imported component is loading.  The `loading` property in `next/dynamic` accepts a function that returns a React component to be displayed while the module is loading. This improves the user experience by providing visual feedback during loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
'use client'

import dynamic from 'next/dynamic'

const WithCustomLoading = dynamic(
  () => import('../components/WithCustomLoading'),
  {
    loading: () => <p>Loading...</p>,
  }
)

export default function Page() {
  return (
    <div>
      {/* The loading component will be rendered while  <WithCustomLoading/> is loading */}
      <WithCustomLoading />
    </div>
  )
}
```

----------------------------------------

TITLE: Server Component Data Fetching
DESCRIPTION: This code demonstrates data fetching within a Next.js Server Component during the build process for static export.  The `fetch` call executes on the server during `next build`, and the resulting data is used to render static HTML for the initial page load.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  // This fetch will run on the server during `next build`
  const res = await fetch('https://api.example.com/...')
  const data = await res.json()

  return <main>...</main>
}
```

----------------------------------------

TITLE: Reading HTTP Request Headers with Next.js in JavaScript
DESCRIPTION: This snippet demonstrates reading HTTP request headers asynchronously in a JavaScript-based Next.js server component. Utilizing the `headers` function, it retrieves a read-only Web Headers object and uses the `get` method to access the 'user-agent' header. The `headers` function is asynchronous, requiring the use of async/await.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/headers.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { headers } from 'next/headers'

export default async function Page() {
  const headersList = await headers()
  const userAgent = headersList.get('user-agent')
}
```

LANGUAGE: javascript
CODE:
```
import { headers } from 'next/headers'

export default async function Page() {
  const authorization = (await headers()).get('authorization')
  const res = await fetch('...', {
    headers: { authorization }, // Forward the authorization header
  })
  const user = await res.json()

  return <h1>{user.name}</h1>
}
```

----------------------------------------

TITLE: Run Next.js Locally for Development
DESCRIPTION: Commands to install dependencies and start Next.js development server locally. Requires npm, Yarn, or pnpm, based on the selected command. Results in a live blog development server running on http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
npm install && npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install && yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm install && pnpm dev
```

----------------------------------------

TITLE: Running Next.js in Development Mode (npm)
DESCRIPTION: These commands install the necessary dependencies and start the Next.js application in development mode using npm.  `npm install` installs dependencies and `npm run dev` starts the development server, typically on port 3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Tab Groups Layout in Javascript
DESCRIPTION: This code snippet demonstrates how to create tab groups using Parallel Routes and a layout within a slot. It defines a layout component with navigation links to different subpages within the `@analytics` slot.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
import Link from 'next/link'

export default function Layout({ children }) {
  return (
    <>
      <nav>
        <Link href="/page-views">Page Views</Link>
        <Link href="/visitors">Visitors</Link>
      </nav>
      <div>{children}</div>
    </>
  )
}
```

----------------------------------------

TITLE: Configuring Vitest with TypeScript
DESCRIPTION: This TypeScript configuration file (`vitest.config.mts`) defines the Vitest testing environment. It imports necessary modules, specifies plugins including `tsconfigPaths` and `@vitejs/plugin-react`, and sets the test environment to `jsdom` for simulating a browser environment. The `tsconfigPaths` plugin is used for resolving paths defined in the `tsconfig.json` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'vitest/config'
import react from '@vitejs/plugin-react'
import tsconfigPaths from 'vite-tsconfig-paths'

export default defineConfig({
  plugins: [tsconfigPaths(), react()],
  test: {
    environment: 'jsdom',
  },
})
```

----------------------------------------

TITLE: Using Unauthorized Function in Dashboard Page - JSX
DESCRIPTION: This code snippet demonstrates how to use the unauthorized function within a dashboard page to check user authentication and render the Unauthorized component if the session is invalid. It's tailored for JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  return <div>Dashboard</div>
}

```

----------------------------------------

TITLE: Configuring Next.js Custom Headers with i18n - JavaScript
DESCRIPTION: This snippet defines the `headers` asynchronous function within `next.config.js` to set custom HTTP headers for specific routes. It demonstrates automatic locale prefixing for sources unless `locale: false` is used, and shows how to manually handle specific locale sources. The `headers` function returns an array of objects, each specifying a `source` pattern and an array of `headers` to apply.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_8

LANGUAGE: js
CODE:
```
module.exports = {
  i18n: {
    locales: ['en', 'fr', 'de'],
    defaultLocale: 'en',
  },

  async headers() {
    return [
      {
        source: '/with-locale', // automatically handles all locales
        headers: [
          {
            key: 'x-hello',
            value: 'world',
          },
        ],
      },
      {
        // does not handle locales automatically since locale: false is set
        source: '/nl/with-locale-manual',
        locale: false,
        headers: [
          {
            key: 'x-hello',
            value: 'world',
          },
        ],
      },
      {
        // this matches '/' since `en` is the defaultLocale
        source: '/en',
        locale: false,
        headers: [
          {
            key: 'x-hello',
            value: 'world',
          },
        ],
      },
      {
        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level
        // `/` or `/fr` routes like /:path* would
        source: '/(.*)',
        headers: [
          {
            key: 'x-hello',
            value: 'world',
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Generate Bundle Analysis Report
DESCRIPTION: Generates a bundle analysis report by setting the `ANALYZE` environment variable to `true` during the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
ANALYZE=true npm run build
# or
ANALYZE=true yarn build
# or
ANALYZE=true pnpm build
```

----------------------------------------

TITLE: Implementing Shallow Routing using window.history.pushState (TypeScript)
DESCRIPTION: This snippet shows how to implement shallow routing in a Next.js application using `window.history.pushState`. It uses the `useSearchParams` hook to get the current search parameters, updates the 'sort' parameter with the specified `sortOrder`, and then uses `window.history.pushState` to update the URL without triggering a full page reload.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_11

LANGUAGE: typescript
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SortProducts() {
  const searchParams = useSearchParams()

  function updateSorting(sortOrder: string) {
    const urlSearchParams = new URLSearchParams(searchParams.toString())
    urlSearchParams.set('sort', sortOrder)
    window.history.pushState(null, '', `?${urlSearchParams.toString()}`)
  }

  return (
    <>
      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>
      <button onClick={() => updateSorting('desc')}>Sort Descending</button>
    </>
  )
}
```

----------------------------------------

TITLE: Using CSS Modules in Next.js Components
DESCRIPTION: Shows how to use CSS Modules to import component-scoped CSS files in Next.js. This approach provides CSS isolation and prevents style conflicts between components.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-css-tags.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import styles from './extra.module.css'

export class Home {
  render() {
    return (
      <div>
        <button type="button" className={styles.active}>
          Open
        </button>
      </div>
    )
  }
}
```

----------------------------------------

TITLE: Implementing Caching for GET Route Handlers in Next.js
DESCRIPTION: Example of implementing caching for a GET route handler using the 'force-static' dynamic option. This demonstrates how to fetch data from an external API and cache the response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

LANGUAGE: javascript
CODE:
```
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

----------------------------------------

TITLE: Generating a Dynamic Sitemap with Video Extensions (TS)
DESCRIPTION: Extends the dynamic sitemap generation by adding the `videos` property to a URL entry. This property is an array of video objects containing metadata like title, thumbnail, and description, adhering to the Google Video Sitemaps extension. Requires importing `MetadataRoute` from `next`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://example.com',
      lastModified: '2021-01-01',
      changeFrequency: 'weekly',
      priority: 0.5,
      videos: [
        {
          title: 'example',
          thumbnail_loc: 'https://example.com/image.jpg',
          description: 'this is the description',
        },
      ],
    },
  ]
}
```

----------------------------------------

TITLE: Revalidating Cache by Path in Server Action
DESCRIPTION: Demonstrates using the `revalidatePath` function within a Server Action (`createPost`) to clear the Next.js Data Cache for a specific path (`/posts`) after an operation (e.g., creating a post). This ensures that subsequent requests to that path fetch fresh data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_24

LANGUAGE: ts
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost() {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidatePath('/posts')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost() {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Using useSelectedLayoutSegment in Typescript
DESCRIPTION: This code snippet demonstrates how to use `useSelectedLayoutSegment` hook to read the active route segment within a specific slot. The `parallelRoutesKey` parameter ('auth' in this case) is used to specify the slot for which the active segment is being retrieved.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
'use client'

import { useSelectedLayoutSegment } from 'next/navigation'

export default function Layout({ auth }: { auth: React.ReactNode }) {
  const loginSegment = useSelectedLayoutSegment('auth')
  // ...
}
```

----------------------------------------

TITLE: Creating a Search Form in Next.js TypeScript
DESCRIPTION: This snippet demonstrates how to implement a search form in a Next.js page using TypeScript. The form navigates to a search results page by providing the path '/search' as the action attribute. Dependencies include the 'next/form' and the input element captures the user's search query. The form encodes the data into the URL as search params when submitted.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
import Form from 'next/form'

export default function Page() {
  return (
    <Form action="/search">
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Updating Search Parameters in Next.js Client Components (TypeScript)
DESCRIPTION: A TypeScript client component that demonstrates how to update URL search parameters using both the useRouter hook and Link component. It includes a utility function to merge existing search parameters with new ones, preserving previous query parameters while updating or adding new ones.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  // Get a new searchParams string by merging the current
  // searchParams with a provided key/value pair
  const createQueryString = useCallback(
    (name: string, value: string) => {
      const params = new URLSearchParams(searchParams.toString())
      params.set(name, value)

      return params.toString()
    },
    [searchParams]
  )

  return (
    <>
      <p>Sort By</p>

      {/* using useRouter */}
      <button
        onClick={() => {
          // <pathname>?sort=asc
          router.push(pathname + '?' + createQueryString('sort', 'asc'))
        }}
      >
        ASC
      </button>

      {/* using <Link> */}
      <Link
        href={
          // <pathname>?sort=desc
          pathname + '?' + createQueryString('sort', 'desc')
        }
      >
        DESC
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Mutations with Server Actions (javascript)
DESCRIPTION: This snippet demonstrates how to use the `forbidden` function to protect mutations in a Server Action based on user roles. It verifies the user's session, checks if they have the 'admin' role, and calls `forbidden()` if they don't, preventing unauthorized data updates. It assumes that `verifySession` retrieves the user's session and role information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateRole(formData) {
  const session = await verifySession()

  // Ensure only admins can update roles
  if (session.role !== 'admin') {
    forbidden()
  }

  // Perform the role update for authorized users
  // ...
}
```

----------------------------------------

TITLE: Accessing Dynamic searchParams Prop Triggering Dynamism (TypeScript)
DESCRIPTION: Defines an asynchronous component that receives `searchParams` as a prop (potentially from a dynamic source). Accessing the value (`await searchParams`) causes this specific component to be rendered dynamically during the request, even if its parent was prerendered.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
export async function Table({
  searchParams,
}: {
  searchParams: Promise<{ sort: string }>
}) {
  const sort = (await searchParams).sort === 'true'
  return '...'
}
```

----------------------------------------

TITLE: Disabling Scroll to Top on Route Change in Next.js - TSX
DESCRIPTION: This example demonstrates how to use the useRouter hook to navigate without resetting the scroll position to the top of the page by passing a second argument with scroll set to false.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button
      type="button"
      onClick={() => router.push('/dashboard', { scroll: false })}
    >
      Dashboard
    </button>
  )
}

```

----------------------------------------

TITLE: Showing a Pending State During Server Function Execution with JavaScript
DESCRIPTION: Shows how to use React's useActionState hook in JavaScript to display a loading indicator while a Server Function is executing. The button content changes based on the pending state.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
'use client'

import { useActionState } from 'react'
import { createPost } from '@/app/actions'
import { LoadingSpinner } from '@/app/ui/loading-spinner'

export function Button() {
  const [state, action, pending] = useActionState(createPost, false)

  return (
    <button onClick={async () => action()}>
      {pending ? <LoadingSpinner /> : 'Create Post'}
    </button>
  )
}
```

----------------------------------------

TITLE: Using Theme Provider in Layout with JavaScript
DESCRIPTION: This snippet shows how to implement the ThemeProvider in the RootLayout component in JavaScript, allowing all nested components to access the theme context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
import ThemeProvider from './theme-provider'

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        <ThemeProvider>{children}</ThemeProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Creating a Client Component with Children Prop in JavaScript
DESCRIPTION: This JavaScript example demonstrates creating a Client Component that accepts a children prop. The component maintains count state using useState while providing a slot for child components to render, allowing parent components to inject Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_18

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'

export default function ClientComponent({ children }) {
  const [count, setCount] = useState(0)

  return (
    <>
      <button onClick={() => setCount(count + 1)}>{count}</button>

      {children}
    </>
  )
}
```

----------------------------------------

TITLE: Reading HTTP Request Headers with Next.js in TypeScript
DESCRIPTION: This snippet illustrates how to use the `headers` function in a TypeScript-based Next.js application to read HTTP request headers asynchronously. The `headers` function returns a read-only Web Headers object, and the `get` method is used to retrieve specific header values, such as the 'user-agent'. This approach requires no parameters and provides read-only access to headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/headers.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { headers } from 'next/headers'

export default async function Page() {
  const headersList = await headers()
  const userAgent = headersList.get('user-agent')
}
```

----------------------------------------

TITLE: Deleting Session Cookie in Next.js App Router (TypeScript)
DESCRIPTION: This asynchronous function `deleteSession` removes the session cookie named 'session' using the `delete` method provided by the Next.js `cookies()` API. This is typically used during a logout process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_13

LANGUAGE: ts
CODE:
```
import 'server-only';
import { cookies } from 'next/headers';

export async function deleteSession() {
  const cookieStore = await cookies();
  cookieStore.delete('session');
}
```

----------------------------------------

TITLE: Disabling Button with useFormStatus Hook (JavaScript)
DESCRIPTION: Shows a Client Component (`'use client'`) designed to be nested within a `<form>`. It utilizes the `useFormStatus` hook to obtain the pending state of its parent form and disables the submit button accordingly. This hook is specifically for accessing the status of a form submission initiated via an action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_16

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useFormStatus } from 'react-dom'

export function SubmitButton() {
  const { pending } = useFormStatus()

  return (
    <button disabled={pending} type="submit">
      Sign Up
    </button>
  )
}
```

----------------------------------------

TITLE: Implementing Local Error Boundary in Next.js with JavaScript
DESCRIPTION: JavaScript implementation of an error boundary component for handling runtime errors in Next.js route segments. Provides same functionality as TypeScript version but without type definitions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({ error, reset }) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Generating a Basic Dynamic Sitemap in Next.js (JS/TS)
DESCRIPTION: Shows how to programmatically generate a sitemap by exporting a default function from `sitemap.(js|ts)` in the `app` directory. The function returns an array of URL objects, each containing `url` and optional properties like `lastModified`, `changeFrequency`, and `priority`. This allows for dynamic sitemap generation based on data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://acme.com',
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 1,
    },
    {
      url: 'https://acme.com/about',
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: 'https://acme.com/blog',
      lastModified: new Date(),
      changeFrequency: 'weekly',
      priority: 0.5,
    },
  ]
}
```

LANGUAGE: JavaScript
CODE:
```
export default function sitemap() {
  return [
    {
      url: 'https://acme.com',
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 1,
    },
    {
      url: 'https://acme.com/about',
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: 'https://acme.com/blog',
      lastModified: new Date(),
      changeFrequency: 'weekly',
      priority: 0.5,
    },
  ]
}
```

----------------------------------------

TITLE: Applying Title Template to Child Pages (TSX/JSX)
DESCRIPTION: Demonstrates how a `title.template` defined in a parent layout is applied to a simple string `title` defined in a child page. The child's title replaces the `%s` placeholder in the template. A `default` title is required alongside a template.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: {
    template: '%s | Acme',
    default: 'Acme', // a default is required when creating a template
  },
};
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: {
    template: '%s | Acme',
    default: 'Acme', // a default is required when creating a template
  },
};
```

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'About',
};

// Output: <title>About | Acme</title>
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'About',
};

// Output: <title>About | Acme</title>
```

----------------------------------------

TITLE: Running and Deploying Next.js App on Firebase
DESCRIPTION: Commands for testing and deploying the Next.js application on Firebase. Use `npm run serve` or `yarn serve` to run Firebase locally and test the application. Deploy the app to the cloud using `npm run deploy` or `yarn deploy`. Ensure that Firebase credentials and project configuration are correctly set up.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm run serve
# or
yarn serve
```

LANGUAGE: bash
CODE:
```
npm run deploy
# or
yarn deploy
```

----------------------------------------

TITLE: Async Headers API Usage in Next.js 15
DESCRIPTION: Example showing both recommended async and temporary sync usage of the headers API in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import { headers } from 'next/headers'

// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')

// After
const headersList = await headers()
const userAgent = headersList.get('user-agent')
```

LANGUAGE: tsx
CODE:
```
import { headers, type UnsafeUnwrappedHeaders } from 'next/headers'

// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')

// After
const headersList = headers() as unknown as UnsafeUnwrappedHeaders
// will log a warning in dev
const userAgent = headersList.get('user-agent')
```

----------------------------------------

TITLE: Loading Third-Party Scripts with Next.js Script Component
DESCRIPTION: This snippet demonstrates how to use the Next.js Script component to load third-party scripts asynchronously. It imports the Script component from 'next/script' and uses it within a React functional component.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-sync-scripts.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

function Home() {
  return (
    <div class="container">
      <Script src="https://third-party-script.js"></Script>
      <div>Home Page</div>
    </div>
  )
}

export default Home
```

----------------------------------------

TITLE: Using the redirect Function Next.js TSX
DESCRIPTION: Illustrates the use of the redirect function in a TypeScript Server Component to perform server-side redirects. It's imported from 'next/navigation'. The example redirects to '/login' or '/join' based on the result of an asynchronous data fetch within a dynamic route segment page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { redirect } from 'next/navigation'

async function fetchTeam(id: string) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  if (!id) {
    redirect('/login')
  }

  const team = await fetchTeam(id)
  if (!team) {
    redirect('/join')
  }

  // ...
}
```

----------------------------------------

TITLE: Executing Script with onLoad handler in Next.js (TSX)
DESCRIPTION: This code snippet demonstrates how to use the `next/script` component with the `onLoad` event handler to execute code after the script has finished loading. It is designed to be used within a client component, as indicated by the `'use client'` directive.  The script tag is included from a provided URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
'use client'

import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://example.com/script.js"
        onLoad={() => {
          console.log('Script has loaded')
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Type-Safe API Routes with TypeScript
DESCRIPTION: Demonstrates how to add TypeScript type safety to API routes using NextApiRequest and NextApiResponse types, including response data typing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Defining Title Template Object Structure (TSX/JSX)
DESCRIPTION: Explains the structure of the `title` template object used within the `metadata` export. It includes properties like `template` for formatting child titles, `default` for a fallback title, and `absolute` for overriding templates. A `default` is required when using a `template`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: {
    template: '...',
    default: '...',
    absolute: '...',
  },
};
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: {
    default: '...',
    template: '...',
    absolute: '...',
  },
};
```

----------------------------------------

TITLE: Adding Docker Support to Next.js Project
DESCRIPTION: This snippet demonstrates a code addition to the Next.js configuration file (next.config.js) in order to build the application as a standalone app within a Docker image. It requires copying the Dockerfile to the project's root.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// next.config.js
module.exports = {
  // ... rest of the configuration.
  output: "standalone",
};
```

----------------------------------------

TITLE: Rendering Page component test (App Router)
DESCRIPTION: This test checks if the `<Page />` component, located in `app/page.js`, renders a heading element. It utilizes `@testing-library/react` for rendering and querying the component and `@testing-library/jest-dom` for enhanced Jest matchers. The test renders the component, retrieves the heading, and asserts that it is present in the document.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_18

LANGUAGE: jsx
CODE:
```
import '@testing-library/jest-dom'
import { render, screen } from '@testing-library/react'
import Page from '../app/page'

describe('Page', () => {
  it('renders a heading', () => {
    render(<Page />)

    const heading = screen.getByRole('heading', { level: 1 })

    expect(heading).toBeInTheDocument()
  })
})
```

----------------------------------------

TITLE: Conditional Route Rendering in Javascript
DESCRIPTION: This code snippet shows how to conditionally render routes based on user role using Parallel Routes. The `checkUserRole` function determines the user's role, and the layout renders either the `admin` or `user` slot accordingly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { checkUserRole } from '@/lib/auth'

export default function Layout({ user, admin }) {
  const role = checkUserRole()
  return role === 'admin' ? admin : user
}
```

----------------------------------------

TITLE: Importing and Using Inter Font in Next.js (App Router)
DESCRIPTION: This code snippet demonstrates how to import the Inter font from `next/font/google` and apply it to the root layout component in a Next.js application using the app router. It defines a variable font and assigns it to the `className` of the `html` element, ensuring the font is applied globally.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Generating Subset of Static Paths Next.js TSX/JSX
DESCRIPTION: Shows how to generate only a subset of possible dynamic paths at build time using `generateStaticParams` by filtering or slicing the data before returning the parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  // Render the first 10 posts at build time
  return posts.slice(0, 10).map((post) => ({
    slug: post.slug,
  }))
}
```

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  // Render the first 10 posts at build time
  return posts.slice(0, 10).map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Handling Query Parameters in Next.js - JavaScript
DESCRIPTION: This snippet demonstrates how to access query parameters in a GET route using a plain request object. It retrieves the 'query' parameter from the request's URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
export function GET(request) {
  const searchParams = request.nextUrl.searchParams
  const query = searchParams.get('query')
  // query is "hello" for /api/search?query=hello
}
```

----------------------------------------

TITLE: Time-based Revalidation Static Route App Router JSX
DESCRIPTION: Configures time-based ISR for a static route segment in Next.js App Router using JavaScript. It sets the `revalidate` export to 3600 seconds (1 hour) to invalidate the cache periodically. The `Page` component fetches a list of blog posts and renders them.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
export const revalidate = 3600 // invalidate every hour

export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <main>
      <h1>Blog Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </main>
  )
}
```

----------------------------------------

TITLE: Creating Root Layout in TypeScript
DESCRIPTION: This code creates a root layout file (`layout.tsx`) within the `app` directory, essential for Next.js App Router applications. It wraps all pages. It includes the basic HTML structure, meta tags, and a root div where the page content is rendered.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_2

LANGUAGE: app/layout.tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <meta charSet="UTF-8" />
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Accessing Environment Variable - JavaScript
DESCRIPTION: Demonstrates how to access the value of an environment variable named `SESSION_SECRET` within a JavaScript file using the standard `process.env` object. This is a common pattern for retrieving configuration values, such as sensitive keys, during application runtime.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const secretKey = process.env.SESSION_SECRET
```

----------------------------------------

TITLE: Installing Dependencies - Bash
DESCRIPTION: This code installs the necessary dependencies for the Tigris Vercel starter application using npm. It's an essential step before starting the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cd tigris-vercel-starter
npm install
```

----------------------------------------

TITLE: Installing dependencies using Yarn
DESCRIPTION: This command installs the project's dependencies using Yarn. It is a prerequisite for running the development server and other project-related tasks.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
yarn
yarn dev
```

----------------------------------------

TITLE: Creating Next.js App with Docker
DESCRIPTION: This command initializes a new Next.js application with Docker support using create-next-app. It provides three different package managers (npm, Yarn, and pnpm) for bootstrapping the application template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-docker nextjs-docker
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-docker nextjs-docker
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-docker nextjs-docker
```

----------------------------------------

TITLE: Implementing Internationalized Routing in Next.js Middleware
DESCRIPTION: This code snippet shows how to implement internationalized routing using Next.js middleware. It checks for supported locales in the pathname and redirects to the appropriate localized route if necessary.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { NextResponse } from "next/server";

let locales = ['en-US', 'nl-NL', 'nl']

// Get the preferred locale, similar to the above or using a library
function getLocale(request) { ... }

export function middleware(request) {
  // Check if there is any supported locale in the pathname
  const { pathname } = request.nextUrl
  const pathnameHasLocale = locales.some(
    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`
  )

  if (pathnameHasLocale) return

  // Redirect if there is no locale
  const locale = getLocale(request)
  request.nextUrl.pathname = `/${locale}${pathname}`
  // e.g. incoming request is /products
  // The new URL is now /en-US/products
  return NextResponse.redirect(request.nextUrl)
}

export const config = {
  matcher: [
    // Skip all internal paths (_next)
    '/((?!_next).*)',
    // Optional: only run on root (/) URL
    // '/'
  ],
}
```

----------------------------------------

TITLE: Next.js About Page Component (app directory)
DESCRIPTION: Defines a basic Next.js about page component using the `app` directory structure. It imports `Link` from `next/link` for navigation. The component renders a heading and a link to the `/` (home) page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>About</h1>
      <Link href="/">Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js Page Component (App Router)
DESCRIPTION: Defines a Next.js page component within the `app` directory using the App Router. It renders a heading and a link to the about page.  Requires Next.js and `next/link`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode
DESCRIPTION: These commands set up the application to run in development mode using either npm or yarn. This starts the development server, allowing live previews of the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Importing custom matchers in Jest setup (TypeScript)
DESCRIPTION: This TypeScript snippet imports the `@testing-library/jest-dom` module, making its custom matchers available for use in Jest tests. By importing this module in a setup file, you can use matchers like `.toBeInTheDocument()` without needing to import them in every test file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_13

LANGUAGE: TypeScript
CODE:
```
import '@testing-library/jest-dom'
```

----------------------------------------

TITLE: Client-Side Error Handling with useActionState in Next.js
DESCRIPTION: React component implementing client-side error handling using useActionState hook. Displays error messages from server actions and handles form submission state.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/05-error-handling.mdx#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

LANGUAGE: javascript
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Initializing useSelectedLayoutSegments Client Component in TypeScript
DESCRIPTION: A TypeScript implementation of a client component using useSelectedLayoutSegments to display active route segments as a list of list items.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segments.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useSelectedLayoutSegments } from 'next/navigation'

export default function ExampleClientComponent() {
  const segments = useSelectedLayoutSegments()

  return (
    <ul>
      {segments.map((segment, index) => (
        <li key={index}>{segment}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Loading Scripts in Root Layout - JavaScript
DESCRIPTION: This code snippet shows how to load a third-party script in the root layout of a Next.js application using JavaScript. The script will load on every route. Requires `next/script` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <Script src="https://example.com/script.js" />
    </html>
  )
}
```

----------------------------------------

TITLE: Creating Root Layout with HTML Structure (JSX)
DESCRIPTION: This code snippet demonstrates how to create a root layout component in Next.js (JSX) by incorporating the basic HTML structure from an `index.html` file. It includes the `<html>`, `<head>`, and `<body>` tags, and places the `children` prop within a `div` with the id 'root'. This sets up the foundational HTML structure for all pages within the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/svg+xml" href="/icon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>My App</title>
        <meta name="description" content="My App is a..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Applying React Taint APIs to Sensitive Data (TS)
DESCRIPTION: Demonstrates how to use `experimental_taintObjectReference` and `experimental_taintUniqueValue` within a server-side data fetching utility (`getUserData`). These functions mark data, or specific values within it, as 'tainted' with a message, causing an error if they are later passed to a client component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_13

LANGUAGE: TS
CODE:
```
import { queryDataFromDB } from './api'
import {
  experimental_taintObjectReference,
  experimental_taintUniqueValue,
} from 'react'

export async function getUserData() {
  const data = await queryDataFromDB()
  experimental_taintObjectReference(
    'Do not pass the whole user object to the client',
    data
  )
  experimental_taintUniqueValue(
    "Do not pass the user's address to the client",
    data,
    data.address
  )
  return data
}
```

LANGUAGE: JS
CODE:
```
import { queryDataFromDB } from './api'
import {
  experimental_taintObjectReference,
  experimental_taintUniqueValue,
} from 'react'

export async function getUserData() {
  const data = await queryDataFromDB()
  experimental_taintObjectReference(
    'Do not pass the whole user object to the client',
    data
  )
  experimental_taintUniqueValue(
    "Do not pass the user's address to the client",
    data,
    data.address
  )
  return data
}
```

----------------------------------------

TITLE: Replacing History Entry with Next.js Link
DESCRIPTION: These snippets demonstrate using the `replace` prop on the `Link` component. This prop prevents the current URL from being added to the browser's history stack, instead replacing the current history entry with the new URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_16

LANGUAGE: TSX
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link href="/about" replace>
      About us
    </Link>
  )
}
```

LANGUAGE: JSX
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link href="/about" replace>
      About us
    </Link>
  )
}
```

LANGUAGE: TSX
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/about" replace>
      About us
    </Link>
  )
}
```

LANGUAGE: JSX
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/about" replace>
      About us
    </Link>
  )
}
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server
DESCRIPTION: This snippet provides commands to install required dependencies and start the Next.js development server. It demonstrates using npm, yarn, and pnpm to set up and run the server, enabling local development on `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install\nnpm run dev
```

LANGUAGE: bash
CODE:
```
yarn install\nyarn dev
```

LANGUAGE: bash
CODE:
```
pnpm install\npnpm dev
```

----------------------------------------

TITLE: Server-Side Post Creation and Redirection in Next.js JavaScript
DESCRIPTION: In this JavaScript snippet, the server-side 'createPost' function for handling form data is illustrated, including redirection to the newly created post using 'redirect'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_17

LANGUAGE: JavaScript
CODE:
```
'use server'
import { redirect } from 'next/navigation'

export async function createPost(formData) {
  // Create a new post
  // ...

  // Redirect to the new post
  redirect(`/posts/${data.id}`)
}
```

----------------------------------------

TITLE: Importing and Using Roboto Font with Weight Specification (App Router)
DESCRIPTION: This code snippet demonstrates how to import the Roboto font from `next/font/google` and apply it to the root layout component in a Next.js application using the app router. It specifies the font weight since it's not a variable font and assigns it to the `className` of the `html` element.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={roboto.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining MDX Components Javascript
DESCRIPTION: Provides the required `mdx-components.js` file structure for App Router, defining the `useMDXComponents` function that receives and returns the components object. This file is essential for `@next/mdx` in App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_6

LANGUAGE: js
CODE:
```
export function useMDXComponents(components) {
  return {
    ...components,
  }
}
```

----------------------------------------

TITLE: Importing Tailwind Directives in Global CSS - CSS
DESCRIPTION: Add the `@import 'tailwindcss';` directive to your `app/globals.css` file. This directive is replaced by Tailwind with its base styles, components, and utility classes during the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#_snippet_6

LANGUAGE: css
CODE:
```
@import 'tailwindcss';
```

----------------------------------------

TITLE: Extending Web Request API with User Agent in Next.js using JavaScript
DESCRIPTION: This JavaScript snippet shows how to implement a middleware function in Next.js that uses a user agent helper to assess the device type from an incoming request and update the URL parameters accordingly. It applies NextResponse for URL rewriting. Importing 'next/server' is required for accessing NextResponse and the userAgent utility.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/userAgent.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { NextResponse, userAgent } from 'next/server'

export function middleware(request) {
  const url = request.nextUrl
  const { device } = userAgent(request)

  // device.type can be: 'mobile', 'tablet', 'console', 'smarttv',
  // 'wearable', 'embedded', or undefined (for desktop browsers)
  const viewport = device.type || 'desktop'

  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Caching Async Function Output (TypeScript)
DESCRIPTION: Applies the `'use cache'` directive to a standalone asynchronous function (`getData`). This caches the function's return value based on its serializable arguments, useful for caching data fetching or complex computations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_12

LANGUAGE: TypeScript
CODE:
```
export async function getData() {
  'use cache'

  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Upgrading ESLint Configuration - Bash
DESCRIPTION: If your project uses ESLint, run this command to update the Next.js specific ESLint configuration package. This ensures compatibility with the latest Next.js features and helps enforce new conventions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install -D eslint-config-next@latest
```

----------------------------------------

TITLE: Applying Tailwind Global Styles in Root Layout - TSX/JSX
DESCRIPTION: Import the `app/globals.css` file containing the Tailwind directives into your root layout component. This makes Tailwind's styles available throughout the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'
// These styles apply to every route in the application
import './globals.css'

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
// These styles apply to every route in the application
import './globals.css'

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Redirecting Users Based on Authentication Status (JSX)
DESCRIPTION: This code shows how to redirect users to a login page if they are not authenticated. It uses the useRouter hook and useEffect to check the user's authentication status. If the user is not authenticated and is not currently loading, router.push is called to redirect them to '/login'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react'
import { useRouter } from 'next/router'

// Here you would fetch and return the user
const useUser = () => ({ user: null, loading: false })

export default function Page() {
  const { user, loading } = useUser()
  const router = useRouter()

  useEffect(() => {
    if (!(user || loading)) {
      router.push('/login')
    }
  }, [user, loading])

  return <p>Redirecting...</p>
}
```

----------------------------------------

TITLE: Getting a Cookie with NextRequest
DESCRIPTION: This snippet shows how to retrieve the value of a cookie using the `get` method of the `request.cookies` object in Next.js. It retrieves the value of the cookie named 'show-banner'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Given incoming request /home
// { name: 'show-banner', value: 'false', Path: '/home' }
request.cookies.get('show-banner')
```

----------------------------------------

TITLE: Import Image component in Next.js
DESCRIPTION: Imports the `Image` component from the `next/image` module. This component is used for optimized image rendering in Next.js applications. It's a prerequisite for using the `<Image>` tag in the markdown content.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/image/page.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import Image from 'next/image'
```

----------------------------------------

TITLE: Applying Global Styles in a Next.js Application
DESCRIPTION: This snippet illustrates how to import a global CSS file into the main application layout for applying styles across all pages and components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// These styles apply to every route in the application
import './global.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Exporting Dynamic Handling in Next.js
DESCRIPTION: This snippet demonstrates how to utilize the dynamic export feature in Next.js to enforce static or dynamic rendering for a page. By using 'export const dynamic = 'force-static'', the page will be statically rendered, while 'export const dynamic = 'force-dynamic'' allows the page to be dynamically generated regardless of content. This ensures clarity in rendering behavior and prevents runtime errors associated with static versus dynamic content.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-static-to-dynamic-error.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export const dynamic = 'force-static';
```

LANGUAGE: javascript
CODE:
```
export const dynamic = 'force-dynamic';
```

----------------------------------------

TITLE: Creating Route Segment Loading UI (TSX/JSX)
DESCRIPTION: Define an instant loading state for a route segment by creating a `loading.js` or `loading.tsx` file. The component exported here provides fallback UI that is automatically wrapped in a Suspense boundary by Next.js and displayed while the actual page or layout content loads.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/06-loading-ui-and-streaming.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Loading() {
  // You can add any UI inside Loading, including a Skeleton.
  return <LoadingSkeleton />
}
```

LANGUAGE: jsx
CODE:
```
export default function Loading() {
  // You can add any UI inside Loading, including a Skeleton.
  return <LoadingSkeleton />
}
```

----------------------------------------

TITLE: Dynamic Content Based on Params (JavaScript)
DESCRIPTION: This JavaScript example demonstrates how to display content based on dynamic route parameters. It accesses the `team` parameter from the `params` prop and uses it to personalize the header of the dashboard layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_11

LANGUAGE: jsx
CODE:
```
export default async function DashboardLayout({ children, params }) {
  const { team } = await params

  return (
    <section>
      <header>
        <h1>Welcome to {team}'s Dashboard</h1>
      </header>
      <main>{children}</main>
    </section>
  )
}
```

----------------------------------------

TITLE: Managing Cookies in Server Action
DESCRIPTION: Shows how to access and manipulate cookies using the `cookies` API from `next/headers` within a Server Action (`exampleAction`). It demonstrates getting, setting, and deleting cookies on the server side during the action's execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_27

LANGUAGE: ts
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function exampleAction() {
  const cookieStore = await cookies()

  // Get cookie
  cookieStore.get('name')?.value

  // Set cookie
  cookieStore.set('name', 'Delba')

  // Delete cookie
  cookieStore.delete('name')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function exampleAction() {
  // Get cookie
  const cookieStore = await cookies()

  // Get cookie
  cookieStore.get('name')?.value

  // Set cookie
  cookieStore.set('name', 'Delba')

  // Delete cookie
  cookieStore.delete('name')
}
```

----------------------------------------

TITLE: Using next/link with scroll Prop
DESCRIPTION: Demonstrates how to use the boolean `scroll` prop to control automatic scrolling behavior upon navigation. Setting `scroll` to `false` prevents Next.js from attempting to scroll the viewport to the top of the new page content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link href="/dashboard" scroll={false}>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link href="/dashboard" scroll={false}>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/dashboard" scroll={false}>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/dashboard" scroll={false}>
      Dashboard
    </Link>
  )
}
```

----------------------------------------

TITLE: Including eslint-config-next After Other Configurations (mjs)
DESCRIPTION: This snippet shows how to include `eslint-config-next` in your ESLint configuration after other configurations.  It imports the recommended ESLint configuration and merges it with the `next` configuration. This ensures the Next.js configurations are applied last, avoiding conflicts with other ESLint setups.  Uses `FlatCompat` to handle flat configs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_14

LANGUAGE: mjs
CODE:
```
import js from '@eslint/js'
import { FlatCompat } from '@eslint/eslintrc'

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
  recommendedConfig: js.configs.recommended,
})

const eslintConfig = [
  ...compat.config({
    extends: ['eslint:recommended', 'next'],
  }),
]

export default eslintConfig
```

----------------------------------------

TITLE: Building and Starting the Next.js App in Production
DESCRIPTION: These commands build the Next.js application for production and then starts the server. During production, the application uses translated message files located in the `lang/*.json` directory. This ensures that the correct translations are used based on the user's browser language preferences.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-intl/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ npm run build
$ npm start
```

----------------------------------------

TITLE: Securing Server Actions by Verifying User Role (TS)
DESCRIPTION: Demonstrates how to implement authorization checks within a Next.js Server Action using TypeScript. It verifies the user's session and role ('admin') before allowing the action to proceed, returning early if the user is unauthorized. Requires a `verifySession` utility.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_34

LANGUAGE: ts
CODE:
```
'use server'\nimport { verifySession } from '@/app/lib/dal'\n\nexport async function serverAction(formData: FormData) {\n  const session = await verifySession()\n  const userRole = session?.user?.role\n\n  // Return early if user is not authorized to perform the action\n  if (userRole !== 'admin') {\n    return null\n  }\n\n  // Proceed with the action for authorized users\n}
```

----------------------------------------

TITLE: Handling FormData in Next.js - JavaScript
DESCRIPTION: This JavaScript example shows how to extract FormData from a POST request, read specific field values, and return them in a JSON response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
export async function POST(request) {
  const formData = await request.formData()
  const name = formData.get('name')
  const email = formData.get('email')
  return Response.json({ name, email })
}
```

----------------------------------------

TITLE: Generate User Profile DTO (Next.js DAL) - JS
DESCRIPTION: This function fetches a user profile and constructs a Data Transfer Object (DTO) based on authorization checks using helper functions (`canSeeUsername`, `canSeePhoneNumber`). It ensures only data fields permitted for the current viewer (obtained via `getUser`) are included in the returned object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_27

LANGUAGE: JS
CODE:
```
import 'server-only'
import { getUser } from '@/app/lib/dal'

function canSeeUsername(viewer) {
  return true
}

function canSeePhoneNumber(viewer, team) {
  return viewer.isAdmin || team === viewer.team
}

export async function getProfileDTO(slug) {
  const data = await db.query.users.findMany({
    where: eq(users.slug, slug),
    // Return specific columns here
  })
  const user = data[0]

  const currentUser = await getUser(user.id)

  // Or return only what's specific to the query here
  return {
    username: canSeeUsername(currentUser) ? user.username : null,
    phonenumber: canSeePhoneNumber(currentUser, user.team)
      ? user.phonenumber
      : null,
  }
}
```

----------------------------------------

TITLE: Implementing Search Component with Suspense in JavaScript
DESCRIPTION: Shows how to properly wrap a search component using useSearchParams within a Suspense boundary to prevent client-side rendering issues. The example demonstrates the correct implementation pattern for JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-suspense-with-csr-bailout.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'
import { Suspense } from 'react'

function Search() {
  const searchParams = useSearchParams()

  return <input placeholder="Search..." />
}

export function Searchbar() {
  return (
    // You could have a loading skeleton as the `fallback` too
    <Suspense>
      <Search />
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Starting the Development Server
DESCRIPTION: Commands to begin the development server for a Next.js project, enabling local testing and viewing of changes immediately at http://localhost:3000. Both npm and Yarn are supported.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Invalidating Tagged Cache in JavaScript
DESCRIPTION: Shows the use of revalidateTag in JavaScript for clearing pieces of cache. The operation takes place in the updateBookings function to handle cache invalidation for 'bookings-data'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function updateBookings() {
  await updateBookingData()
  revalidateTag('bookings-data')
}
```

----------------------------------------

TITLE: Accessing URL Properties with NextRequest
DESCRIPTION: This snippet shows how to access the `pathname` and `searchParams` properties of the `request.nextUrl` object in Next.js. It provides examples of retrieving the pathname and search parameters from a request URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
// Given a request to /home, pathname is /home
request.nextUrl.pathname
// Given a request to /home?name=lee, searchParams is { 'name': 'lee' }
request.nextUrl.searchParams
```

----------------------------------------

TITLE: Passing Dynamic searchParams Prop Without Immediate Dynamism (TSX)
DESCRIPTION: Demonstrates passing the dynamic `searchParams` prop received by the page component to a child component (`Table`). The page itself remains potentially prerenderable if it doesn't access dynamic APIs directly, deferring dynamism to the child component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_9

LANGUAGE: TSX
CODE:
```
import { Table } from './table'

export default function Page({
  searchParams,
}: {
  searchParams: Promise<{ sort: string }>
}) {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Table searchParams={searchParams} />
    </section>
  )
}
```

----------------------------------------

TITLE: Controlling Dynamic Params with generateStaticParams Subset Next.js TSX/JSX
DESCRIPTION: Combines generating a subset of static paths with setting `dynamicParams = false`. This config ensures that requests for dynamic segments *not* generated at build time will result in a 404 error.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
// All posts besides the top 10 will be a 404
export const dynamicParams = false

export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())
  const topPosts = posts.slice(0, 10)

  return topPosts.map((post) => ({
    slug: post.slug,
  }))
}
```

LANGUAGE: jsx
CODE:
```
// All posts besides the top 10 will be a 404
export const dynamicParams = false

export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())
  const topPosts = posts.slice(0, 10)

  return topPosts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Importing Global CSS in Next.js Custom App
DESCRIPTION: This JavaScript snippet shows how to import a global CSS file in a Next.js Custom App component. It demonstrates the correct way to apply shared styles across all pages and components in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-styled-jsx-in-document.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import '../styles.css'

// This default export is required in a new `pages/_app.js` file.
export default function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: Importing and Using Inter Font in Next.js (App Router)
DESCRIPTION: This code snippet demonstrates how to import the Inter font from `next/font/google` and apply it to the root layout component in a Next.js application using the app router. It defines a variable font and assigns it to the `className` of the `html` element, ensuring the font is applied globally.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Modifying package.json for Server-Side Debugging
DESCRIPTION: This snippet shows how to modify the `package.json` file to include the `--inspect` flag when running the Next.js development server. By setting the `NODE_OPTIONS` environment variable within the `dev` script, the Next.js application can be debugged server-side using browser DevTools or other debugging tools.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "scripts": {
    "dev": "NODE_OPTIONS='--inspect' next dev"
  }
}
```

----------------------------------------

TITLE: Caching Component with Non-serializable Props (TSX)
DESCRIPTION: Defines a React component using the `'use cache'` directive that accepts a non-serializable prop, `children`. The component's output is cached, but it can still pass through the non-serializable prop without it affecting the cache key or being inspectable within the cached logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_3

LANGUAGE: TSX
CODE:
```
function CachedComponent({ children }: { children: ReactNode }) {
  'use cache'
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Setting a Cookie with NextRequest
DESCRIPTION: This snippet demonstrates how to set a cookie using the `set` method of the `request.cookies` object in Next.js. It sets a cookie named 'show-banner' with a value of 'false' and a path of '/home'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Given incoming request /home
// Set a cookie to hide the banner
// request will have a `Set-Cookie:show-banner=false;path=/home` header
request.cookies.set('show-banner', 'false')
```

----------------------------------------

TITLE: Defining Nested Dashboard Layout for Next.js
DESCRIPTION: This snippet shows a simplified version of a dashboard layout (`app/dashboard/layout.tsx` or `app/dashboard/layout.js`) specifically illustrating how layouts are nested in the App Router. This layout wraps its child segments and is itself wrapped by parent layouts, such as the root layout. It accepts the `children` prop to render content below it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}
```

LANGUAGE: JavaScript
CODE:
```
export default function DashboardLayout({ children }) {
  return <section>{children}</section>
}
```

----------------------------------------

TITLE: Using Link with Middleware Rewrites (App Router)
DESCRIPTION: Shows how to use the `<Link>` component in the App Router to correctly handle prefetching when paths are rewritten by Middleware. It uses the `as` prop for the user-visible URL (`/dashboard`) and the `href` prop for the actual target path determined by client-side logic (like an auth hook), enabling accurate prefetching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_21

LANGUAGE: TypeScript
CODE:
```
'use client'

import Link from 'next/link'
import useIsAuthed from './hooks/useIsAuthed' // Your auth hook

export default function Page() {
  const isAuthed = useIsAuthed()
  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'
  return (
    <Link as="/dashboard" href={path}>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import Link from 'next/link'
import useIsAuthed from './hooks/useIsAuthed' // Your auth hook

export default function Page() {
  const isAuthed = useIsAuthed()
  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'
  return (
    <Link as="/dashboard" href={path}>
      Dashboard
    </Link>
  )
}
```

----------------------------------------

TITLE: Installing Next.js MDX Dependencies Bash
DESCRIPTION: Provides the `npm install` command required to add the necessary packages (`@next/mdx`, `@mdx-js/loader`, `@mdx-js/react`, `@types/mdx`) for enabling MDX support in a Next.js project. This is a prerequisite step.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx
```

----------------------------------------

TITLE: Adding a global script in App Router with next/script
DESCRIPTION: This code snippet demonstrates how to correctly add a global script with the `beforeInteractive` strategy using the `next/script` component within the `app/layout.jsx` file when using the App Router in Next.js. It ensures the script is loaded before the page becomes interactive. It imports the `Script` component from `next/script` and places it within the `RootLayout` component. The `src` attribute specifies the script URL and `strategy` attribute is set to `beforeInteractive`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-before-interactive-script-outside-document.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import Script from 'next/script'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <Script
        src="https://example.com/script.js"
        strategy="beforeInteractive"
      />
    </html>
  )
}
```

----------------------------------------

TITLE: Deleting Cookies Using delete() Method
DESCRIPTION: Demonstrates how to delete a cookie using the cookies().delete() method in Next.js server actions. This directly removes the cookie with the specified name.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).delete('name')
}
```

LANGUAGE: javascript
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).delete('name')
}
```

----------------------------------------

TITLE: Navigating with useRouter push URL Object
DESCRIPTION: Explains how to use `router.push` with a URL object (`pathname`, `query`) and `asPath` combined with the `locale` option. This approach allows changing only the locale while retaining dynamic route parameters and query strings. Requires the `next/router` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
import { useRouter } from 'next/router'
const router = useRouter()
const { pathname, asPath, query } = router
// change just the locale and maintain all other route information including href's query
router.push({ pathname, query }, asPath, { locale: nextLocale })
```

----------------------------------------

TITLE: Redirecting Client-Side with useRouter (App Router, TypeScript)
DESCRIPTION: Illustrates client-side navigation using the `useRouter` hook in a Next.js App Router Client Component. It shows an example of using the `router.push()` method within a button's `onClick` event handler to programmatically navigate the user to a different page (`/dashboard`) without a full page reload.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type="button" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}
```

----------------------------------------

TITLE: Implementing Basic Next.js Middleware with TypeScript
DESCRIPTION: A TypeScript example of implementing middleware in Next.js that redirects requests to the '/home' path. The config object uses a matcher to apply the middleware only to paths matching '/about/:path*'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextResponse, NextRequest } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
  return NextResponse.redirect(new URL('/home', request.url))
}

export const config = {
  matcher: '/about/:path*',
}
```

----------------------------------------

TITLE: Submitting Form Data to API Route - JavaScript
DESCRIPTION: This code snippet demonstrates how to submit form data to an API route in Next.js using JavaScript. It prevents the default form submission, creates a FormData object from the form, sends a POST request to the API route, and handles the response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export default function Page() {
  async function onSubmit(event) {
    event.preventDefault()

    const formData = new FormData(event.target)
    const response = await fetch('/api/submit', {
      method: 'POST',
      body: formData,
    })

    // Handle response if necessary
    const data = await response.json()
    // ...
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit">Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Basic Form Component Usage in JavaScript React
DESCRIPTION: Demonstrates how to use the Next.js Form component to create a simple search form that appends the query parameter to the URL on submission. This example shows the JavaScript implementation in app directory structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import Form from 'next/form'

export default function Search() {
  return (
    <Form action="/search">
      {/* On submission, the input value will be appended to
          the URL, e.g. /search?query=abc */}
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Creating ImageResponse in Next.js with JSX
DESCRIPTION: This code snippet shows how to create an `ImageResponse` in Next.js using JSX. It demonstrates the available options for configuring the image, including width, height, emoji style, fonts, and debug mode. Additionally, it covers HTTP response options such as status, statusText, and headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/image-response.mdx#2025-04-21_snippet_0

LANGUAGE: JSX
CODE:
```
import { ImageResponse } from 'next/og'

new ImageResponse(
  element: ReactElement,
  options: {
    width?: number = 1200
    height?: number = 630
    emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji',
    fonts?: {
      name: string,
      data: ArrayBuffer,
      weight: number,
      style: 'normal' | 'italic'
    }[]
    debug?: boolean = false

    // Options that will be passed to the HTTP response
    status?: number = 200
    statusText?: string
    headers?: Record<string, string>
  },
)
```

----------------------------------------

TITLE: Copying the .env.local Example
DESCRIPTION: This command copies the contents of the `.env.local.example` file to a new file named `.env.local`. This is a necessary step for configuring the Firebase environment variables for the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Implementing getStaticPaths with TypeScript in Next.js Dynamic Routes
DESCRIPTION: Example showing implementation of getStaticPaths and getStaticProps in a TypeScript Next.js page with dynamic routes. This demonstrates defining paths to be statically generated, fetching data for each path, and rendering the component with the fetched data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/02-get-static-paths.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import type {
  InferGetStaticPropsType,
  GetStaticProps,
  GetStaticPaths,
} from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticPaths = (async () => {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      }, // See the "paths" section below
    ],
    fallback: true, // false or "blocking"
  }
}) satisfies GetStaticPaths

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Generating Secret Key - Terminal - Bash
DESCRIPTION: Provides a bash command using `openssl` to generate a cryptographically secure, random string encoded in base64. This output is suitable for use as a secret key, often stored in environment variables like `SESSION_SECRET`, for tasks such as signing authentication sessions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_3

LANGUAGE: Bash
CODE:
```
openssl rand -base64 32
```

----------------------------------------

TITLE: Rendering Unauthorized Page with Login UI (TypeScript)
DESCRIPTION: This snippet defines a TypeScript component for rendering a 401 error page with a login UI, aiming to guide unauthorized users to authenticate themselves. It utilizes a Login component to facilitate user login.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
import Login from '@/app/components/Login'

export default function UnauthorizedPage() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}
```

----------------------------------------

TITLE: Setting a Cookie - TSX
DESCRIPTION: This snippet demonstrates how to set a cookie in a Next.js application using the `cookies` function within a Server Action or Route Handler. It shows different methods to specify cookie attributes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function create(data) {
  const cookieStore = await cookies()

  cookieStore.set('name', 'lee')
  // or
  cookieStore.set('name', 'lee', { secure: true })
  // or
  cookieStore.set({
    name: 'name',
    value: 'lee',
    httpOnly: true,
    path: '/',
  })
}
```

----------------------------------------

TITLE: Using CSS Variables with next/font (App Router)
DESCRIPTION: This code snippet demonstrates how to use CSS variables with `next/font` in a Next.js application using the app router. It defines CSS variables for both the Inter and Roboto Mono fonts and applies them to the `html` element for global styling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_19

LANGUAGE: jsx
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
  display: 'swap',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  variable: '--font-roboto-mono',
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={`${inter.variable} ${roboto_mono.variable}`}>
      <body>
        <h1>My App</h1>
        <div>{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Conditionally importing NodeSDK for OpenTelemetry (TypeScript)
DESCRIPTION: Conditionally imports the `instrumentation.node.ts` file based on the `NEXT_RUNTIME` environment variable. This ensures that `NodeSDK`, which is not compatible with the edge runtime, is only imported when the application is running in a Node.js environment. This approach is used in `instrumentation.ts`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    await import('./instrumentation.node.ts')
  }
}
```

----------------------------------------

TITLE: Reading Nonce in a Server Component (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to read the nonce value (set by the middleware) in a Next.js Server Component using the `headers` function from `next/headers`.  The nonce is then passed to the `nonce` prop of the `<Script>` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
import { headers } from 'next/headers'
import Script from 'next/script'

export default async function Page() {
  const nonce = (await headers()).get('x-nonce')

  return (
    <Script
      src="https://www.googletagmanager.com/gtag/js"
      strategy="afterInteractive"
      nonce={nonce}
    />
  )
}
```

----------------------------------------

TITLE: Creating a Server Component for Video Embedding - JSX
DESCRIPTION: This Server Component demonstrates fetching a video source URL and rendering an iframe to embed the video. It's designed to be used within a Next.js application and leverages asynchronous functions to retrieve the video source.  The example highlights the use of Server Components in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
export default async function VideoComponent() {
  const src = await getVideoSrc()

  return <iframe src={src} allowFullScreen />
}
```

----------------------------------------

TITLE: Transpile Packages in next.config.js
DESCRIPTION: Configures the `transpilePackages` option in `next.config.js` to bundle specific packages that are not pre-bundled, such as those in a monorepo or from `node_modules`. This is specifically for Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  transpilePackages: ['package-name'],
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Implementing default.js with params in TypeScript for Next.js Parallel Routes
DESCRIPTION: This code demonstrates how to implement a default.js file in TypeScript that receives dynamic route parameters. The params prop is a promise that resolves to an object containing the dynamic route parameters from the root segment down to the slot's subpages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/default.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Default({
  params,
}: {
  params: Promise<{ artist: string }>
}) {
  const { artist } = await params
}
```

----------------------------------------

TITLE: Creating Font Utility Functions
DESCRIPTION: This code snippet demonstrates creating utility functions to export font imports.  This allows for importing and applying the font's `className` where needed, ensuring preloading only when rendered. This example imports `Inter` and `Roboto_Mono` fonts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_13

LANGUAGE: js
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

export const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
})
```

----------------------------------------

TITLE: Using Remote Images with Next.js Image Component
DESCRIPTION: Illustrates how to use remote images with the Next.js Image component. This example shows the need to manually specify width and height for remote images.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: Using Tailwind CSS Classes (App Router - JSX)
DESCRIPTION: This JSX code demonstrates how to use Tailwind CSS utility classes in a Next.js component. It renders a heading with specified text size, font weight, and underline styling using Tailwind classes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
"export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}"
```

----------------------------------------

TITLE: Initializing Google Maps with onReady in Next.js (App Router) - TSX
DESCRIPTION: This code demonstrates how to initialize a Google Maps embed using the `onReady` property of the `next/script` component within a Next.js application using the App Router. It uses a ref to target a div element for the map and re-instantiates the map on every component mount. The `onReady` function is called after the script has loaded.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
'use client'

import { useRef } from 'react'
import Script from 'next/script'

export default function Page() {
  const mapRef = useRef()

  return (
    <>
      <div ref={mapRef}></div>
      <Script
        id="google-maps"
        src="https://maps.googleapis.com/maps/api/js"
        onReady={() => {
          new google.maps.Map(mapRef.current, {
            center: { lat: -34.397, lng: 150.644 },
            zoom: 8,
          })
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Conditionally Applying Headers with has and missing Next.js JavaScript
DESCRIPTION: This extensive snippet demonstrates using the `has` and `missing` arrays to apply headers only when specific request properties (headers, cookies, host, or queries) match or do not match a defined pattern. It shows examples matching the presence of a header, the absence of a header, matching multiple conditions (query and cookie), matching header values with capture groups, and matching the host.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async headers() {
    return [
      // if the header `x-add-header` is present,
      // the `x-another-header` header will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-add-header',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: 'hello',
          },
        ],
      },
      // if the header `x-no-header` is not present,
      // the `x-another-header` header will be applied
      {
        source: '/:path*',
        missing: [
          {
            type: 'header',
            key: 'x-no-header',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: 'hello',
          },
        ],
      },
      // if the source, query, and cookie are matched,
      // the `x-authorized` header will be applied
      {
        source: '/specific/:path*',
        has: [
          {
            type: 'query',
            key: 'page',
            // the page value will not be available in the
            // header key/values since value is provided and
            // doesn't use a named capture group e.g. (?<page>home)
            value: 'home',
          },
          {
            type: 'cookie',
            key: 'authorized',
            value: 'true',
          },
        ],
        headers: [
          {
            key: 'x-authorized',
            value: ':authorized',
          },
        ],
      },
      // if the header `x-authorized` is present and
      // contains a matching value, the `x-another-header` will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-authorized',
            value: '(?<authorized>yes|true)',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: ':authorized',
          },
        ],
      },
      // if the host is `example.com`,
      // this header will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'host',
            value: 'example.com',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: ':authorized',
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Defining Data Preloading Pattern in React Component (TSX)
DESCRIPTION: Defines a `preload` utility function alongside a main async React component. The `preload` function eagerly initiates data fetching (`getItem`) using `void` to prevent waiting for the promise, while the component awaits the same data during rendering. This allows the data to start fetching before the component fully renders.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_9

LANGUAGE: TSX
CODE:
```
import { getItem } from '@/utils/get-item'

export const preload = (id: string) => {
  // void evaluates the given expression and returns undefined
  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void
  void getItem(id)
}
export default async function Item({ id }: { id: string }) {
  const result = await getItem(id)
  // ...
}
```

LANGUAGE: JSX
CODE:
```
import { getItem } from '@/utils/get-item'

export const preload = (id) => {
  // void evaluates the given expression and returns undefined
  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void
  void getItem(id)
}
export default async function Item({ id }) {
  const result = await getItem(id)
  // ...
}
```

----------------------------------------

TITLE: Dynamically Importing MDX App Router Javascript
DESCRIPTION: Shows how to use dynamic imports within an App Router route segment (`[slug]`) to load specific MDX files based on the slug parameter. Includes `generateStaticParams` for static pre-rendering and `dynamicParams = false` to restrict valid slugs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_14

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
  const { default: Post } = await import(`@/content/${slug}.mdx`)

  return <Post />
}

export function generateStaticParams() {
  return [{ slug: 'welcome' }, { slug: 'about' }]
}

export const dynamicParams = false
```

----------------------------------------

TITLE: Integrating Session Deletion into Server Action (JavaScript)
DESCRIPTION: This snippet shows a Next.js Server Action `logout` that handles user logout. It calls the `deleteSession` function to remove the session cookie and then uses the `redirect` API to navigate the user to the login page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_16

LANGUAGE: js
CODE:
```
import { cookies } from 'next/headers';
import { deleteSession } from '@/app/lib/session';

export async function logout() {
  await deleteSession();
  redirect('/login');
}
```

----------------------------------------

TITLE: Incorrect Usage of cookies() in Cached Function
DESCRIPTION: Example showing problematic implementation where cookies are accessed inside a cached function, which would invalidate the cache on every request.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-request-in-use-cache.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

async function getExampleData() {
  "use cache"
  const isLoggedIn = (await cookies()).has('token')
  ...
}

export default async function Page() {
  const data = await getExampleData()
  return ...
}
```

----------------------------------------

TITLE: Inline Script using children
DESCRIPTION: This code snippet demonstrates how to use an inline script with the Script component by using the element's children. Requires `next/script` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
<Script id="show-banner">
  {`document.getElementById('banner').classList.remove('hidden')`}
</Script>
```

----------------------------------------

TITLE: Embedding External Video with <iframe> Tag - JSX
DESCRIPTION: This snippet shows how to embed a video from an external platform like YouTube using the `<iframe>` tag within a Next.js page. It includes the `src` attribute for the video URL and the `allowFullScreen` attribute to enable fullscreen playback. The example showcases JSX syntax commonly used in React and Next.js components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return (
    <iframe src="https://www.youtube.com/embed/19g66ezsKAg" allowFullScreen />
  )
}
```

----------------------------------------

TITLE: Deleting Cookies Using maxAge
DESCRIPTION: Illustrates how to delete a cookie by setting its maxAge to 0, which causes immediate expiration of the cookie in Next.js server actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).set('name', 'value', { maxAge: 0 })
}
```

LANGUAGE: javascript
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).set('name', 'value', { maxAge: 0 })
}
```

----------------------------------------

TITLE: Adding Suspense Boundary for Real-time Data in Next.js
DESCRIPTION: Shows how to implement Suspense boundaries for components that need to access data on every user request, including proper fallback UI implementation.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
async function getLatestTransactions() {
  return db.query(...)
}

export default async function Page() {
  const transactions = await getLatestTransactions(token);
  return <TransactionList transactions={transactions}>
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'

async function TransactionList() {
  const transactions = await db.query(...)
  return ...
}

function TransactionSkeleton() {
  return <ul>...</ul>
}

export default async function Page() {
  return (
    <Suspense fallback={<TransactionSkeleton />}>
      <TransactionList/>
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Configure Tailwind CSS Content Paths
DESCRIPTION: This snippet shows how to configure the `content` array in `tailwind.config.js` to specify which files Tailwind CSS should scan for classes. This helps avoid scanning unnecessary files and directories, improving build performance.  Incorrect configuration may slow down your build.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
module.exports = {
  content: [
    './src/**/*.{js,ts,jsx,tsx}', // Good
    // This might be too broad
    // It will match `packages/**/node_modules` too
    // '../../packages/**/*.{js,ts,jsx,tsx}',
  ],
}
```

LANGUAGE: jsx
CODE:
```
module.exports = {
  content: [
    // Better - only scans the 'src' folder
    '../../packages/ui/src/**/*.{js,ts,jsx,tsx}',
  ],
}
```

----------------------------------------

TITLE: Creating a Next.js App with Jest Example
DESCRIPTION: This snippet shows the commands to bootstrap a new Next.js application using the 'with-jest' example, employing different package managers like npm, Yarn, and pnpm. It requires running the respective command in the terminal for the desired package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-jest with-jest-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-jest with-jest-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-jest with-jest-app
```

----------------------------------------

TITLE: Using CSS Variables with next/font (App Router)
DESCRIPTION: This code snippet demonstrates how to use CSS variables with `next/font` in a Next.js application using the app router. It defines CSS variables for both the Inter and Roboto Mono fonts and applies them to the `html` element for global styling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_18

LANGUAGE: tsx
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'
import styles from './global.css'

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
  display: 'swap',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  variable: '--font-roboto-mono',
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={`${inter.variable} ${roboto_mono.variable}`}>
      <body>
        <h1>My App</h1>
        <div>{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Rewriting Paths in Next.js Middleware
DESCRIPTION: Provides example middleware code that intercepts requests to `/dashboard` and conditionally rewrites the path using `NextResponse.rewrite` based on the presence of an `authToken` cookie. This allows serving different pages (`/auth/dashboard` or `/public/dashboard`) based on authentication status without changing the URL displayed to the user.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_20

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request: Request) {
  const nextUrl = request.nextUrl
  if (nextUrl.pathname === '/dashboard') {
    if (request.cookies.authToken) {
      return NextResponse.rewrite(new URL('/auth/dashboard', request.url))
    } else {
      return NextResponse.rewrite(new URL('/public/dashboard', request.url))
    }
  }
}
```

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  const nextUrl = request.nextUrl
  if (nextUrl.pathname === '/dashboard') {
    if (request.cookies.authToken) {
      return NextResponse.rewrite(new URL('/auth/dashboard', request.url))
    } else {
      return NextResponse.rewrite(new URL('/public/dashboard', request.url))
    }
  }
}
```

----------------------------------------

TITLE: Redirecting After Server Function Execution with JavaScript
DESCRIPTION: Demonstrates redirecting users to a different page after a Server Function completes in JavaScript. Uses the redirect function from Next.js navigation to send users to the posts page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createPost(formData) {
  // Update data
  // ...

  redirect('/posts')
}
```

----------------------------------------

TITLE: Implementing getStaticPaths with TypeScript
DESCRIPTION: Example of implementing getStaticPaths and getStaticProps in a Next.js dynamic route using TypeScript. Shows how to fetch and type GitHub repository data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import type {
  InferGetStaticPropsType,
  GetStaticProps,
  GetStaticPaths,
} from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticPaths = (async () => {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      },
    ],
    fallback: true,
  }
}) satisfies GetStaticPaths

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Configuring ESLint in Next.js using JavaScript
DESCRIPTION: This snippet demonstrates how to configure Next.js to ignore ESLint errors during production builds by modifying the next.config.js file. It is useful for developers who already run ESLint in another part of their workflow, such as CI or pre-commit hooks. Enabling the `ignoreDuringBuilds` option prevents ESLint errors from failing the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/eslint.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  eslint: {
    // Warning: This allows production builds to successfully complete even if
    // your project has ESLint errors.
    ignoreDuringBuilds: true,
  },
}
```

----------------------------------------

TITLE: Using cacheTag in Next.js with JavaScript
DESCRIPTION: Illustrates the application of cacheTag in a JavaScript environment. It tags the cache entry with 'my-data' in the getData async function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { unstable_cacheTag as cacheTag } from 'next/cache'

export async function getData() {
  'use cache'
  cacheTag('my-data')
  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Specifying Font Subsets in Next.js
DESCRIPTION: This code snippet sets up the Inter font with a specified subset, 'latin', for use in a Next.js application. It requires the 'next/font/google' module and the Inter font to be installed. The primary parameter is 'subsets', specifying which subsets of the font to load. The expected input is a JavaScript object with the subsets array, and the output is a font configuration for the Inter font.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/google-fonts-missing-subsets.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
const inter = Inter({ subsets: ['latin'] })
```

----------------------------------------

TITLE: Revalidating All Data
DESCRIPTION: Shows how to revalidate the entire cache by specifying the root path ('/') and the 'layout' type. This purges the Client-side Router Cache and revalidates the Data Cache for all routes on the next page visit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
import { revalidatePath } from 'next/cache'

revalidatePath('/', 'layout')
```

----------------------------------------

TITLE: Add Google Analytics to Root Layout (TSX)
DESCRIPTION: This code snippet demonstrates how to integrate Google Analytics into a Next.js application's root layout using the `@next/third-parties/google` library. The `GoogleAnalytics` component is imported and included within the `RootLayout` component, passing the Google Analytics measurement ID (`gaId`) as a prop. This ensures that Google Analytics is loaded on all routes of the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

----------------------------------------

TITLE: Generating Static Params for Catch-All Route - JSX
DESCRIPTION: This code defines a `generateStaticParams` function and a default `Page` component for an optional catch-all route in Next.js. The `generateStaticParams` function returns an array containing a single object with an empty slug, mapping all routes to this page. The `Page` component is a server component, which is prerendered into static HTML.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_13

LANGUAGE: jsx
CODE:
```
export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return '...' // We'll update this
}
```

----------------------------------------

TITLE: Importing Server Components with next/dynamic
DESCRIPTION: This code snippet demonstrates how to dynamically import a Server Component using `next/dynamic`. When a Server Component is dynamically imported, only its Client Component children are lazy-loaded, not the Server Component itself. This approach also helps preload static assets like CSS.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

// Server Component:
const ServerComponent = dynamic(() => import('../components/ServerComponent'))

export default function ServerComponentExample() {
  return (
    <div>
      <ServerComponent />
    </div>
  )
}
```

----------------------------------------

TITLE: Getting a Cookie Value in NextResponse - TypeScript
DESCRIPTION: Fetches the value of a specified cookie name from the response. If the cookie is not found, it returns undefined.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Given incoming request /home
let response = NextResponse.next()
// { name: 'show-banner', value: 'false', Path: '/home' }
response.cookies.get('show-banner')
```

----------------------------------------

TITLE: Using useSWR hook for data fetching in React Component (JavaScript)
DESCRIPTION: This snippet shows how to use the `useSWR` hook to fetch data in a React component using JavaScript. It defines a fetcher function that fetches data from the specified URL and parses the response as JSON. The `useSWR` hook is then used with the '/api/user' key and the fetcher function.  The returned `data` and `error` values can be used to render the component based on the fetching state.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
'use client'

import useSWR from 'swr'

export function Profile() {
  const fetcher = (url) => fetch(url).then((res) => res.json())
  // The same SWR pattern you already know
  const { data, error } = useSWR('/api/user', fetcher)

  return '...'
}
```

----------------------------------------

TITLE: Securely Enabling Preview Mode with Redirection in Next.js
DESCRIPTION: This JavaScript snippet shows a secure implementation of the preview API route, including secret validation and slug verification to prevent unauthorized access and open redirect vulnerabilities. It validates the provided secret, fetches the corresponding post by slug, and redirects the browser to the correct preview path using `res.redirect` after setting preview cookies. The function depends on `getPostBySlug` to retrieve post data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
export default async (req, res) => {
  // Check the secret and next parameters
  // This secret should only be known to this API route and the CMS
  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(req.query.slug)

  // If the slug doesn't exist prevent preview mode from being enabled
  if (!post) {
    return res.status(401).json({ message: 'Invalid slug' })
  }

  // Enable Preview Mode by setting the cookies
  res.setPreviewData({})

  // Redirect to the path from the fetched post
  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities
  res.redirect(post.slug)
}
```

----------------------------------------

TITLE: Creating a Blog Page with Posts in Next.js
DESCRIPTION: Implements a blog page component that fetches and renders a list of posts. This demonstrates how to create a nested route by placing it in a blog folder.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
// Dummy imports
import { getPosts } from '@/lib/posts'
import { Post } from '@/ui/post'

export default async function Page() {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <Post key={post.id} post={post} />
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
// Dummy imports
import { getPosts } from '@/lib/posts'
import { Post } from '@/ui/post'

export default async function Page() {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <Post key={post.id} post={post} />
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Redirecting in NextResponse - TypeScript
DESCRIPTION: Creates a redirect response to the specified URL, allowing for URL construction and modification prior to redirection.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

return NextResponse.redirect(new URL('/new', request.url))
```

----------------------------------------

TITLE: Getting Cookies - TSX
DESCRIPTION: This snippet demonstrates how to read a specific cookie in a Next.js page component using the `cookies` function. The cookie is retrieved asynchronously, showing the current theme from the cookie store.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

----------------------------------------

TITLE: Add ESLint Script (JSON)
DESCRIPTION: Manually adds the `lint` script to the `package.json` file, which is necessary to use `npm run lint` for running ESLint checks on the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "lint": "next lint"
  }
}
```

----------------------------------------

TITLE: Using Remote Image in App Router (JSX)
DESCRIPTION: Shows how to use the `next/image` component with a remote image URL in an App Router page. Unlike local images, explicit `width` and `height` props are required for remote images as Next.js cannot determine these dimensions at build time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: Revalidating A Page Path
DESCRIPTION: Shows how to use `revalidatePath` with a dynamic page path and the 'page' type. This invalidates the cache for any URLs matching the specified page file pattern (e.g., `/blog/[slug]`) on the next visit, without affecting sub-pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/[slug]', 'page')
// or with route groups
revalidatePath('/(main)/blog/[slug]', 'page')
```

----------------------------------------

TITLE: Using useSearchParams in a Next.js Client Component (JSX)
DESCRIPTION: This code demonstrates how to use the `useSearchParams` hook in a Next.js Client Component to extract a specific query parameter from the URL. It imports the hook from `next/navigation` and uses the `get` method to retrieve the value of the `search` parameter. It is intended for use within the `app` directory structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
"use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}"
```

----------------------------------------

TITLE: Report Server Errors with onRequestError in instrumentation.js
DESCRIPTION: Tracks server errors by sending them to a custom observability provider. It receives the error, request, and context, and sends a POST request to a specified endpoint with the error details in JSON format. The error instance may have been processed by React during Server Components rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export async function onRequestError(err, request, context) {
  await fetch('https://.../report-error', {
    method: 'POST',
    body: JSON.stringify({
      message: err.message,
      request,
      context,
    }),
    headers: {
      'Content-Type': 'application/json',
    },
  })
}
```

----------------------------------------

TITLE: Generating Static Params for Multiple Dynamic Segments Next.js TSX/JSX
DESCRIPTION: Demonstrates generating static parameters for routes with multiple dynamic segments (`[category]/[product]`). `generateStaticParams` returns an array of objects, where each object includes properties for all dynamic segments in that route level.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export function generateStaticParams() {
  return [
    { category: 'a', product: '1' },
    { category: 'b', product: '2' },
    { category: 'c', product: '3' },
  ]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /products/a/1
// - /products/b/2
// - /products/c/3
export default async function Page({
  params,
}: {
  params: Promise<{ category: string; product: string }>
}) {
  const { category, product } = await params
  // ...
```

LANGUAGE: jsx
CODE:
```
export function generateStaticParams() {
  return [
    { category: 'a', product: '1' },
    { category: 'b', product: '2' },
    { category: 'c', product: '3' },
  ]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /products/a/1
// - /products/b/2
// - /products/c/3
export default async function Page({ params }) {
  const { category, product } = await params
  // ...
```

----------------------------------------

TITLE: Auto-fixing linting errors
DESCRIPTION: This command attempts to automatically fix linting errors reported by ESLint and Prettier. It applies predefined rules to adjust code formatting and style to comply with project standards, reducing the need for manual corrections.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
"pnpm lint-fix"
```

----------------------------------------

TITLE: Checking if a Cookie Exists - JS
DESCRIPTION: This snippet illustrates how to use the `has` method to verify the existence of a specific cookie in a Next.js page component. It retrieves the cookie store asynchronously for this check.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_7

LANGUAGE: js
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const hasCookie = cookieStore.has('theme')
  return '...'
}
```

----------------------------------------

TITLE: Incorrect Usage of Client-Side Component in Server Component
DESCRIPTION: Example showing how using a third-party component that relies on client-side features directly in a Server Component will cause an error.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { Carousel } from 'acme-carousel'

export default function Page() {
  return (
    <div>
      <p>View pictures</p>

      {/* Error: `useState` can not be used within Server Components */}
      <Carousel />
    </div>
  )
}
```

LANGUAGE: javascript
CODE:
```
import { Carousel } from 'acme-carousel'

export default function Page() {
  return (
    <div>
      <p>View pictures</p>

      {/*  Error: `useState` can not be used within Server Components */}
      <Carousel />
    </div>
  )
}
```

----------------------------------------

TITLE: Installing dependencies and running Next.js in development mode using npm
DESCRIPTION: These commands install the project dependencies using npm and then start the Next.js development server. This allows the user to view the website in a local environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Implementing Client-Side Counter Component in TypeScript
DESCRIPTION: Example of a client component using the 'use client' directive with React useState hook. Shows implementation of a basic counter with increment functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-client.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Returning Non-UI Content in Next.js - TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to generate an RSS feed in a GET route. It returns an XML response with a structured RSS format suitable for feed readers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_20

LANGUAGE: typescript
CODE:
```
export async function GET() {
  return new Response(
    `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Next.js Documentation</title>
  <link>https://nextjs.org/docs</link>
  <description>The React Framework for the Web</description>
</channel>

</rss>`,
    {
      headers: {
        'Content-Type': 'text/xml',
      },
    }
  )
}
```

----------------------------------------

TITLE: Async Cookies API Usage in Next.js 15
DESCRIPTION: Example showing both recommended async and temporary sync usage of the cookies API in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

// Before
const cookieStore = cookies()
const token = cookieStore.get('token')

// After
const cookieStore = await cookies()
const token = cookieStore.get('token')
```

LANGUAGE: tsx
CODE:
```
import { cookies, type UnsafeUnwrappedCookies } from 'next/headers'

// Before
const cookieStore = cookies()
const token = cookieStore.get('token')

// After
const cookieStore = cookies() as unknown as UnsafeUnwrappedCookies
// will log a warning in dev
const token = cookieStore.get('token')
```

----------------------------------------

TITLE: Configure Local Image Patterns (Next.js JS)
DESCRIPTION: Configures the `next.config.js` file to restrict allowed local image sources using the `localPatterns` array. This enhances security by specifying which paths within your project are permitted for image optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    localPatterns: [
      {
        pathname: '/assets/images/**',
        search: '',
      },
    ],
  },
}
```

----------------------------------------

TITLE: Reading Route and Search Parameters in Client Components
DESCRIPTION: Shows how to read the params and searchParams props in a Client Component using React's use function. Since Client Components cannot be async, the use function is needed to read the promise values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'

import { use } from 'react'

export default function Page({
  params,
  searchParams,
}: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const { slug } = use(params)
  const { query } = use(searchParams)
}
```

LANGUAGE: js
CODE:
```
'use client'

import { use } from 'react'

export default function Page({ params, searchParams }) {
  const { slug } = use(params)
  const { query } = use(searchParams)
}
```

----------------------------------------

TITLE: Generating All Static Paths (Next.js)
DESCRIPTION: Shows how to implement `generateStaticParams` in a dynamic route segment (`[slug]/page.js`) to fetch all possible paths from an API and return them, ensuring they are statically rendered at build time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_10

LANGUAGE: JavaScript
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Checking if a Cookie Exists - TSX
DESCRIPTION: This snippet demonstrates the use of the `has` method to check for the existence of a specific cookie in a Next.js page component. It asynchronously retrieves the cookie store to perform the check.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const hasCookie = cookieStore.has('theme')
  return '...'
}
```

----------------------------------------

TITLE: Creating a Base Button Component in JavaScript with CSS Module
DESCRIPTION: This JavaScript snippet defines a 'BaseButton' component that imports styles from 'base-button.module.css'. The component utilizes these styles to set a primary button class.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
import styles from './base-button.module.css'

export function BaseButton() {
  return <button className={styles.primary} />
}
```

----------------------------------------

TITLE: Using Local Image in Pages Router (JSX)
DESCRIPTION: Illustrates using the `next/image` component with a local image file imported from the `public` directory in a Pages Router page. Next.js automatically determines and provides `width`, `height`, and `blurDataURL` for static local imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/01-images.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'
import profilePic from '../public/me.png'

export default function Page() {
  return (
    <Image
      src={profilePic}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}
```

----------------------------------------

TITLE: Rewriting URL in Next.js Middleware (TS)
DESCRIPTION: This code snippet demonstrates how to rewrite the URL in a Next.js middleware. It imports `NextRequest` and `NextResponse` from `next/server`, accesses the `nextUrl` property of the request, modifies the pathname using `nextUrl.pathname = '/dest'`, and then rewrites the request to the modified URL. This ensures a redirect to the specified destination.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/deleting-query-params-in-middlewares.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

export default function middleware(request: NextRequest) {
  const nextUrl = request.nextUrl
  nextUrl.pathname = '/dest'
  return NextResponse.rewrite(nextUrl)
}
```

----------------------------------------

TITLE: Cypress Component Test (App Router, TypeScript)
DESCRIPTION: Creates a Cypress component test for the `Page` component from the App Router in TypeScript.  It mounts the component and asserts that it renders the expected content, including a heading and a link. Requires Cypress to be configured for component testing and the `Page` component to be defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
import Page from '../../app/page'

describe('<Page />', () => {
  it('should render and display expected content', () => {
    // Mount the React component for the Home page
    cy.mount(<Page />)

    // The new page should contain an h1 with "Home"
    cy.get('h1').contains('Home')

    // Validate that a link with the expected URL is present
    // Following the link is better suited to an E2E test
    cy.get('a[href="/about"]').should('be.visible')
  })
})
```

----------------------------------------

TITLE: Installing Vitest and testing libraries
DESCRIPTION: These commands install Vitest, React plugin, jsdom, React Testing Library, dom testing library, and vite-tsconfig-paths as development dependencies using npm. These packages are required for running unit tests in a Next.js project with Vitest.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
# Using TypeScript
npm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom vite-tsconfig-paths
# Using JavaScript
npm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom
```

----------------------------------------

TITLE: Importing Named Exports with next/dynamic
DESCRIPTION: This code snippet demonstrates how to dynamically import a named export from a module using `next/dynamic`.  The `import()` function returns a Promise that resolves to the module, and the `.then()` method is used to extract the named export. In this case, the `Hello` function is imported and used as the dynamically loaded component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const ClientComponent = dynamic(() =>
  import('../components/hello').then((mod) => mod.Hello)
)
```

----------------------------------------

TITLE: Handling Headers in Next.js Route Handlers
DESCRIPTION: Example of reading and setting headers in a Route Handler using the 'headers' function from next/headers. This demonstrates how to access and manipulate headers in both TypeScript and JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request: Request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

LANGUAGE: javascript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

----------------------------------------

TITLE: Integrating Google Fonts with Tailwind CSS in Next.js App Router (JavaScript)
DESCRIPTION: Shows how to use Google Fonts with Tailwind CSS in a Next.js application using the App Router with JavaScript. Fonts are loaded with CSS variables that can be referenced in the Tailwind config.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_26

LANGUAGE: jsx
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function RootLayout({ children }) {
  return (
    <html
      lang="en"
      className={`${inter.variable} ${roboto_mono.variable} antialiased`}
    >
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Configuring Advanced Icons Metadata with Arrays in Next.js (JSX & HTML)
DESCRIPTION: Configures multiple or specific icon links using array structures within the `metadata.icons` property. This allows defining variations for different media queries, sizes, or types. It demonstrates using arrays for `icon`, `shortcut`, `apple`, and `other` icon types to generate multiple `<link>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_16

LANGUAGE: JSX
CODE:
```
export const metadata = {
  icons: {
    icon: [
      { url: '/icon.png' },
      new URL('/icon.png', 'https://example.com'),
      { url: '/icon-dark.png', media: '(prefers-color-scheme: dark)' },
    ],
    shortcut: ['/shortcut-icon.png'],
    apple: [
      { url: '/apple-icon.png' },
      { url: '/apple-icon-x3.png', sizes: '180x180', type: 'image/png' },
    ],
    other: [
      {
        rel: 'apple-touch-icon-precomposed',
        url: '/apple-touch-icon-precomposed.png',
      },
    ],
  },
}
```

LANGUAGE: HTML
CODE:
```
<link rel="shortcut icon" href="/shortcut-icon.png" />
<link rel="icon" href="/icon.png" />
<link rel="icon" href="https://example.com/icon.png" />
<link rel="icon" href="/icon-dark.png" media="(prefers-color-scheme: dark)" />
<link rel="apple-touch-icon" href="/apple-icon.png" />
<link
  rel="apple-touch-icon-precomposed"
  href="/apple-touch-icon-precomposed.png"
/>
<link
  rel="apple-touch-icon"
  href="/apple-icon-x3.png"
  sizes="180x180"
  type="image/png"
/>
```

----------------------------------------

TITLE: Implementing permanentRedirect in Server Component
DESCRIPTION: Example of using permanentRedirect to redirect users when a resource is not found, specifically in a team profile page server component with dynamic routing
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/permanentRedirect.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import { permanentRedirect } from 'next/navigation'

async function fetchTeam(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const team = await fetchTeam(id)
  if (!team) {
    permanentRedirect('/login')
  }

  // ...
}
```

----------------------------------------

TITLE: Creating a Theme-Aware Image Component in Next.js (JavaScript)
DESCRIPTION: This JavaScript React component is similar to the TypeScript version, wrapping two Next.js Image components to display different images based on the user's theme preference.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_33

LANGUAGE: jsx
CODE:
```
import styles from './theme-image.module.css'
import Image from 'next/image'

const ThemeImage = (props) => {
  const { srcLight, srcDark, ...rest } = props

  return (
    <>
      <Image {...rest} src={srcLight} className={styles.imgLight} />
      <Image {...rest} src={srcDark} className={styles.imgDark} />
    </>
  )
}
```

----------------------------------------

TITLE: Client Component with Dynamic Import - JSX
DESCRIPTION: This code defines a client-side component using the `dynamic` import from `next/dynamic`. It imports the `App` component from a relative path and disables server-side rendering using `ssr: false`. The `'use client'` directive designates this file as a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_15

LANGUAGE: jsx
CODE:
```
'use client'

import dynamic from 'next/dynamic'

const App = dynamic(() => import('../../App'), { ssr: false })

export function ClientOnly() {
  return <App />
}
```

----------------------------------------

TITLE: TypeScript tsconfig.json Include Configuration
DESCRIPTION: This JSON snippet configures the `include` array in `tsconfig.json` to include `next-env.d.ts`, `app/**/*`, and `src/**/*` for TypeScript compilation. This ensures that Next.js environment type definitions and application source files are included in the TypeScript project. It configures the TypeScript compiler.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_27

LANGUAGE: json
CODE:
```
{
  "include": ["next-env.d.ts", "app/**/*", "src/**/*"]
}
```

----------------------------------------

TITLE: On-Demand Page Revalidation with res.revalidate - Next.js Pages Router
DESCRIPTION: Provides an example of an API Route (`pages/api/revalidate`) that uses `res.revalidate(path)` to trigger on-demand revalidation for a specific page path. It includes basic security by checking for a secret token in the request query parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_11

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Check for secret to confirm this is a valid request
  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  try {
    // This should be the actual path not a rewritten path
    // e.g. for "/posts/[id]" this should be "/posts/1"
    await res.revalidate('/posts/1')
    return res.json({ revalidated: true })
  } catch (err) {
    // If there was an error, Next.js will continue
    // to show the last successfully generated page
    return res.status(500).send('Error revalidating')
  }
}
```

LANGUAGE: js
CODE:
```
export default async function handler(req, res) {
  // Check for secret to confirm this is a valid request
  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  try {
    // This should be the actual path not a rewritten path
    // e.g. for "/posts/[id]" this should be "/posts/1"
    await res.revalidate('/posts/1')
    return res.json({ revalidated: true })
  } catch (err) {
    // If there was an error, Next.js will continue
    // to show the last successfully generated page
    return res.status(500).send('Error revalidating')
  }
}
```

----------------------------------------

TITLE: Profile Component using use Hook (TypeScript)
DESCRIPTION: This code shows how to use React's `use` hook to unwrap a Promise within a Client Component in Next.js using TypeScript. The `Profile` component uses the custom `useUser` hook to retrieve the `userPromise` from the context and then uses the `use` hook to suspend rendering until the Promise resolves. The resolved user data is then used in the component. This example demonstrates partial hydration and the use of React's `use` hook for data fetching in Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
'use client'

import { use } from 'react'
import { useUser } from './user-provider'

export function Profile() {
  const { userPromise } = useUser()
  const user = use(userPromise)

  return '...'
}
```

----------------------------------------

TITLE: Fetching Users Server Action (File Level) - TSX/JSX
DESCRIPTION: Illustrates another server-side function (`fetchUsers`) defined in a file marked with `'use server'`. This function retrieves all users from the database using a database client (`db`). It's used later in the document to show client-side invocation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
'use server'\nimport { db } from '@/lib/db' // Your database client\n\nexport async function fetchUsers() {\n  const users = await db.user.findMany()\n  return users\n}
```

LANGUAGE: jsx
CODE:
```
'use server'\nimport { db } from '@/lib/db' // Your database client\n\nexport async function fetchUsers() {\n  const users = await db.user.findMany()\n  return users\n}
```

----------------------------------------

TITLE: Using lazyOnload Strategy (App Router, JSX)
DESCRIPTION: This code snippet demonstrates how to use the `lazyOnload` strategy with the `Script` component in a Next.js application using the App Router. It loads the script during browser idle time after all resources have been fetched.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script src="https://example.com/script.js" strategy="lazyOnload" />
    </>
  )
}
```

----------------------------------------

TITLE: Configuring Alternate Links Metadata in Next.js (JSX & HTML)
DESCRIPTION: Configures alternate link tags for canonical URLs, language variations, media queries, and RSS feeds using the `metadata.alternates` property. This is crucial for SEO and internationalization, indicating relationships between different versions of a page. It generates `<link rel="canonical">` and `<link rel="alternate">` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_22

LANGUAGE: JSX
CODE:
```
export const metadata = {
  alternates: {
    canonical: 'https://nextjs.org',
    languages: {
      'en-US': 'https://nextjs.org/en-US',
      'de-DE': 'https://nextjs.org/de-DE',
    },
    media: {
      'only screen and (max-width: 600px)': 'https://nextjs.org/mobile',
    },
    types: {
      'application/rss+xml': 'https://nextjs.org/rss',
    },
  },
}
```

LANGUAGE: HTML
CODE:
```
<link rel="canonical" href="https://nextjs.org" />
<link rel="alternate" hreflang="en-US" href="https://nextjs.org/en-US" />
<link rel="alternate" hreflang="de-DE" href="https://nextjs.org/de-DE" />
<link
  rel="alternate"
  media="only screen and (max-width: 600px)"
  href="https://nextjs.org/mobile"
/>
<link
  rel="alternate"
  type="application/rss+xml"
  href="https://nextjs.org/rss"
/>
```

----------------------------------------

TITLE: Sending Google Tag Manager events (App Router - JSX)
DESCRIPTION: This code snippet illustrates how to send events to Google Tag Manager using the `sendGTMEvent` function from `@next/third-parties/google` within an App Router component. It defines a button that, when clicked, dispatches a custom event 'buttonClicked' with the value 'xyz'. The `'use client'` directive indicates that this is a client-side component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
'use client'

import { sendGTMEvent } from '@next/third-parties/google'

export function EventButton() {
  return (
    <div>
      <button
        onClick={() => sendGTMEvent({ event: 'buttonClicked', value: 'xyz' })
      >
        Send Event
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Generating Static Routes for Multiple Locales in Next.js
DESCRIPTION: This code demonstrates how to use generateStaticParams to create static routes for multiple locales in a Next.js root layout, with both TypeScript and JavaScript implementations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
export async function generateStaticParams() {
  return [{ lang: 'en-US' }, { lang: 'de' }]
}

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode
  params: Promise<{ lang: 'en-US' | 'de' }>
}>) {
  return (
    <html lang={(await params).lang}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: javascript
CODE:
```
export async function generateStaticParams() {
  return [{ lang: 'en-US' }, { lang: 'de' }]
}

export default async function RootLayout({ children, params }) {
  return (
    <html lang={(await params).lang}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Structuring App Router Directory in Next.js 13+
DESCRIPTION: Illustrates the folder structure for a Next.js project using the App Router, which allows colocation of pages and other files within the same folder.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
  .
  └── app/
      ├── about/
      │   └── page.tsx
      ├── blog/
      │   ├── page.tsx
      │   └── PostCard.tsx
      ├── layout.tsx
      └── page.tsx
```

----------------------------------------

TITLE: Using Client Component in Page - JSX
DESCRIPTION: This code imports the `ClientOnly` component and renders it inside the `Page` component. The `generateStaticParams` function ensures static pre-rendering. The `Page` component is now a server component that renders a client component.  The slug is set to [''] to catch all routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_17

LANGUAGE: jsx
CODE:
```
import { ClientOnly } from './client'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return <ClientOnly />
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode
DESCRIPTION: These commands initiate the Next.js development server. `npm install` or `yarn` install the project dependencies, while `npm run dev` or `yarn dev` start the development server, making the application accessible in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn
yarn dev
```

----------------------------------------

TITLE: Using a Custom Loader in next.config.js
DESCRIPTION: This example shows how to define a custom image loader in next.config.js for using a cloud provider outside of Next.js's built-in optimization API. This custom loader must export a default function that returns a formatted URL for the image.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_18

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    loader: 'custom',
    loaderFile: './my/image/loader.js',
  },
}

```

LANGUAGE: js
CODE:
```
'use client'

export default function myImageLoader({ src, width, quality }) {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}

```

----------------------------------------

TITLE: Implementing getStaticPaths for Dynamic Routes in Next.js
DESCRIPTION: Example showing how to use getStaticPaths to pre-render dynamic routes based on external data. This function specifies which paths with dynamic parameters should be pre-rendered at build time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
// This function gets called at build time
export async function getStaticPaths() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to pre-render based on posts
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}
```

----------------------------------------

TITLE: Configuring moduleNameMapper in jest.config.js
DESCRIPTION: This JavaScript snippet shows how to configure the `moduleNameMapper` option in `jest.config.js` to align with the path aliases defined in `tsconfig.json` or `jsconfig.json`.  It ensures that Jest can correctly resolve imports using the defined aliases during testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_10

LANGUAGE: JavaScript
CODE:
```
moduleNameMapper: {
  // ...
  '^@/components/(.*)$': '<rootDir>/components/$1',
}
```

----------------------------------------

TITLE: Configuring Vitest with JavaScript
DESCRIPTION: This JavaScript configuration file (`vitest.config.js`) defines the Vitest testing environment. It imports necessary modules, specifies plugins including `@vitejs/plugin-react`, and sets the test environment to `jsdom` for simulating a browser environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
import { defineConfig } from 'vitest/config'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
  },
})
```

----------------------------------------

TITLE: Implementing ISR Dynamic Route Pages Router TSX
DESCRIPTION: Implements ISR for a dynamic route using Next.js Pages Router. It defines `getStaticPaths` to determine which paths to pre-render at build time and `getStaticProps` to fetch data for each path and set the `revalidate` option for time-based cache invalidation (60 seconds). The `Page` component receives the fetched post data as props.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import type { GetStaticPaths, GetStaticProps } from 'next'

interface Post {
  id: string
  title: string
  content: string
}

interface Props {
  post: Post
}

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  const paths = posts.map((post: Post) => ({
    params: { id: String(post.id) },
  }))

  // We'll prerender only these paths at build time.
  // { fallback: 'blocking' } will server-render pages
  // on-demand if the path doesn't exist.
  return { paths, fallback: false }
}

export const getStaticProps: GetStaticProps<Props> = async ({
  params,
}: {
  params: { id: string }
}) => {
  const post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(
    (res) => res.json()
  )

  return {
    props: { post },
    // Next.js will invalidate the cache when a
    // request comes in, at most once every 60 seconds.
    revalidate: 60,
  }
}

export default function Page({ post }: Props) {
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Initializing Google Tag Manager in App Router (TSX)
DESCRIPTION: This code snippet demonstrates how to include the `GoogleTagManager` component within the root layout of a Next.js application using the App Router with TypeScript.  It imports the component from `@next/third-parties/google` and passes the GTM container ID via the `gtmId` prop. This ensures GTM is loaded on all routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { GoogleTagManager } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <GoogleTagManager gtmId="GTM-XYZ" />
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Using useSelectedLayoutSegment in Javascript
DESCRIPTION: This code snippet demonstrates how to use `useSelectedLayoutSegment` hook to read the active route segment within a specific slot. The `parallelRoutesKey` parameter ('auth' in this case) is used to specify the slot for which the active segment is being retrieved.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
'use client'

import { useSelectedLayoutSegment } from 'next/navigation'

export default function Layout({ auth }) {
  const loginSegment = useSelectedLayoutSegment('auth')
  // ...
}
```

----------------------------------------

TITLE: Creating Entrypoint Page (TSX)
DESCRIPTION: This code creates the entrypoint page for a Next.js application as a Single Page Application (SPA) using TypeScript (TSX). It imports global CSS, defines `generateStaticParams` to generate only the index route (`/`), and creates a functional component `Page` that initially returns placeholder content. This component will serve as the entry point for the entire application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
import '../../index.css'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return '...' // We'll update this
}
```

----------------------------------------

TITLE: Initializing a Route Handler
DESCRIPTION: This code snippet initializes a basic route handler in Next.js using the App Router. It exports an async function `GET` that responds with an empty string. This is the first step in setting up Draft Mode, providing a basic endpoint to build upon.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export async function GET() {
  return new Response('')
}
```

----------------------------------------

TITLE: Memoizing Data Fetching (React/Next.js)
DESCRIPTION: Provides a TypeScript example using React's `cache` function to memoize the result of a database query function, preventing redundant data fetching within the same request lifecycle.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_14

LANGUAGE: TypeScript
CODE:
```
import { cache } from 'react'
import db from '@/lib/db'

export const getItem = cache(async (id: string) => {
  const item = await db.item.findUnique({ id })
  return item
})
```

----------------------------------------

TITLE: Correct href and as Usage in Next.js
DESCRIPTION: This snippet illustrates the proper use of href and as attributes in the next/link component. It shows a compatible setup where an external URL is used only in the href attribute, eliminating the need for an as attribute.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-relative-url-external-as.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Page(props) {
  return (
    <>
      <Link href="mailto:john@example.com">
        <a>Invalid link</a>
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Getting Cookies - JS
DESCRIPTION: This snippet illustrates reading a specific cookie in a Next.js page component using the `cookies` function. The asynchronous operation retrieves the theme from the cookie store.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_1

LANGUAGE: js
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

----------------------------------------

TITLE: Using NextResponse.next() for Middleware - TypeScript
DESCRIPTION: Utilizes the next() method for middleware to allow early routing. Optionally forwards modified headers in the response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

return NextResponse.next()
```

----------------------------------------

TITLE: Configuring ESLint to Prevent HTML Links in Next.js - JSON
DESCRIPTION: This snippet shows a configuration for the ESLint plugin to enforce that HTML links are not used for internal navigation in Next.js applications. It specifies the rule to check and the associated `pages` directory path, which helps in a monorepo structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-html-link-for-pages.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "rules": {
    "@next/next/no-html-link-for-pages": ["error", "packages/my-app/pages/"]
  }
}
```

----------------------------------------

TITLE: Running the Next.js Application
DESCRIPTION: These commands install dependencies and start the Next.js development server. The `npm install` and `yarn install` commands install dependencies, and `npm run dev` and `yarn dev` start the development server.  Choose the set of commands appropriate for the package manager you are using.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Setting X-Content-Type-Options Header - JavaScript
DESCRIPTION: This snippet shows how to include the `X-Content-Type-Options` header in your Next.js headers configuration. Setting the value to `'nosniff'` prevents browsers from "sniffing" the content type of a response and forcing the declared `Content-Type` header, which helps prevent malicious file uploads from being executed unexpectedly, enhancing security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_18

LANGUAGE: js
CODE:
```
{
  key: 'X-Content-Type-Options',
  value: 'nosniff'
}
```

----------------------------------------

TITLE: Correct Custom Route Configuration in Next.js
DESCRIPTION: This snippet demonstrates the correct way to define custom routes in Next.js, where the rewrite rule is properly wrapped in an array.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/routes-must-be-array.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/feedback',
        destination: '/feedback/general',
      },
    ]
  },
}
```

----------------------------------------

TITLE: Lazy Loading Named Exports (Pages Router)
DESCRIPTION: This code snippet demonstrates how to lazy load a named export using `next/dynamic` in the `pages` router.  It imports the `Hello` function from `../components/hello` dynamically.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
// pages/index.js
import dynamic from 'next/dynamic'

const DynamicComponent = dynamic(() =>
  import('../components/hello').then((mod) => mod.Hello)
)
```

----------------------------------------

TITLE: Add Google Analytics to Root Layout (JSX)
DESCRIPTION: This code snippet shows how to integrate Google Analytics into the root layout of a Next.js application using JSX and the `@next/third-parties/google` library.  The `GoogleAnalytics` component is imported and rendered within the `RootLayout`, with the Google Analytics measurement ID provided through the `gaId` prop. This implementation ensures Google Analytics is present across all routes within the app.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

----------------------------------------

TITLE: Using Path Parameters in Next.js Rewrites (JavaScript)
DESCRIPTION: This snippet shows how to use named path parameters like `:slug` in the `source` path to match specific segments. Matched parameter values are then available to be used in the `destination` path, allowing for dynamic routing based on the incoming URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/blog/:slug',
        destination: '/news/:slug', // Matched parameters can be used in the destination
      },
    ]
  },
}
```

----------------------------------------

TITLE: Defining Path Aliases with baseUrl in JSON
DESCRIPTION: This configuration extends the `baseUrl` setting by adding the `paths` option, allowing you to define specific aliases (like `@/styles` and `@/components`) that map to directories relative to the `baseUrl`, further simplifying import statements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_13

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": "src/",
    "paths": {
      "@/styles/*": ["styles/*"],
      "@/components/*": ["components/*"]
    }
  }
}
```

----------------------------------------

TITLE: Redirecting Client-Side with useRouter (App Router, JavaScript)
DESCRIPTION: Illustrates client-side navigation using the `useRouter` hook in a Next.js App Router Client Component. It shows an example of using the `router.push()` method within a button's `onClick` event handler to programmatically navigate the user to a different page (`/dashboard`) without a full page reload.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type="button" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}
```

----------------------------------------

TITLE: Configuring Fetch Cache in Next.js TSX
DESCRIPTION: This snippet shows how to set the `fetchCache` option in a TypeScript/TSX file for a Next.js route segment. It overrides the default `fetch` caching behavior and accepts various string values to control static vs. dynamic fetching based on the provided options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export const fetchCache = 'auto'
// 'auto' | 'default-cache' | 'only-cache'
// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'
```

----------------------------------------

TITLE: Demonstrating Compatible Href and As Values in Next.js
DESCRIPTION: This snippet shows a correct implementation of the `next/link` component with compatible `href` and `as` values, ensuring that the dynamic routing works properly without triggering an error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/incompatible-href-as.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page(props) {
  return (
    <>
      <Link href="/[post]" as="/post-1">
        <a>Valid link</a>
      </Link>
    </>
  )
}

```

----------------------------------------

TITLE: Installing the server-only Package
DESCRIPTION: Command to install the server-only package which helps prevent server-only code from being used in the client environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install server-only
```

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter block defining metadata for a blog post including title, excerpt and publication date. Used for organizing and categorizing blog content in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/_posts/riders-of-rohan.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: "The Riders of Rohan"
excerpt: "Aragorn, Legolas, and Gimli follow the trail of the Orcs and find
several clues as to what happened with Merry and Pippin."
date: "2021-02-01"
---
```

----------------------------------------

TITLE: Rendering Image Component with overrideSrc Prop in JSX
DESCRIPTION: This code snippet shows how to override the generated src attribute of the <Image> component using the overrideSrc prop, allowing for control over the src attribute for SEO purposes. The expected input is the custom source path for overriding, and the output is an <img> tag reflecting the overridden src.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_15

LANGUAGE: jsx
CODE:
```
<Image src="/me.jpg" overrideSrc="/override.jpg" />
```

LANGUAGE: html
CODE:
```
<img
  srcset=
    "/_next/image?url=%2Fme.jpg&w=640&q=75 1x,
    /_next/image?url=%2Fme.jpg&w=828&q=75 2x
  "
  src="/override.jpg"/>

```

----------------------------------------

TITLE: Installing Dependencies (Yarn)
DESCRIPTION: These commands install the project dependencies using Yarn and then start the development server.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn
yarn dev
```

----------------------------------------

TITLE: Creating a Next.js App with npx
DESCRIPTION: This snippet demonstrates how to use 'npx' to create a new Next.js application using the 'hello-world' example. It requires npm to be installed on the user's machine. The expected input is the command line where this snippet is executed, and the output is the creation of a new directory with the Next.js app structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example hello-world hello-world-app
```

----------------------------------------

TITLE: Applying Font Styles Using className in React Components
DESCRIPTION: Example of applying optimized font styles by using the className property returned from a font loader. This approach is commonly used to style elements with the loaded font.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
<p className={inter.className}>Hello, Next.js!</p>
```

----------------------------------------

TITLE: Implementing Search Parameters in Client-Side Rendering with Next.js
DESCRIPTION: This component, `SearchBar`, utilizes the `useSearchParams` hook from Next.js to retrieve search parameters in a React component. When rendered in a static context, it can lead to unexpected client-side rendering behavior if not wrapped in a Suspense boundary. This snippet includes a console log to demonstrate search value retrieval.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/deopted-into-client-rendering.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SearchBar() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  // This will not be logged on the server when using static rendering
  console.log(search)

  return <>Search: {search}</>
}

```

----------------------------------------

TITLE: Configuring Next.js Rewrites with i18n Support (JavaScript)
DESCRIPTION: This snippet shows how rewrites behave when Next.js is configured with i18n support. By default, 'source' and 'destination' paths are automatically handled for all configured locales. The 'locale: false' option can be used on a rewrite rule to disable automatic locale handling, requiring you to manually include the locale prefix in the 'source' and 'destination' if needed for that specific rule. Default locale behavior and matching all locales manually are also demonstrated.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_14

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  i18n: {
    locales: ['en', 'fr', 'de'],
    defaultLocale: 'en',
  },

  async rewrites() {
    return [
      {
        source: '/with-locale', // automatically handles all locales
        destination: '/another', // automatically passes the locale on
      },
      {
        // does not handle locales automatically since locale: false is set
        source: '/nl/with-locale-manual',
        destination: '/nl/another',
        locale: false,
      },
      {
        // this matches '/' since `en` is the defaultLocale
        source: '/en',
        destination: '/en/another',
        locale: false,
      },
      {
        // it's possible to match all locales even when locale: false is set
        source: '/:locale/api-alias/:path*',
        destination: '/api/:path*',
        locale: false,
      },
      {
        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level
        // `/` or `/fr` routes like /:path* would
        source: '/(.*)',
        destination: '/another',
      },
    ]
  },
}
```

----------------------------------------

TITLE: Executing Script with onLoad handler in Next.js (JSX)
DESCRIPTION: This code snippet demonstrates how to use the `next/script` component with the `onLoad` event handler to execute code after the script has finished loading. It is designed to be used within a client component, as indicated by the `'use client'` directive. The script tag is included from a provided URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_13

LANGUAGE: jsx
CODE:
```
'use client'

import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://example.com/script.js"
        onLoad={() => {
          console.log('Script has loaded')
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Fetching Data with Disabled Cache in Next.js
DESCRIPTION: This snippet shows how to use the standard `fetch` API in Next.js with the `cache` option set to `no-store`. This configuration ensures that the data is always fetched from the source and not served from any cache layer, which is the default behavior for `fetch` in Next.js when the option is not specified. Useful for data that must always be fresh.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
let data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })
```

----------------------------------------

TITLE: Add Custom Loading State for next/dynamic Component
DESCRIPTION: Demonstrates how to explicitly define a loading state for a dynamically imported component using the `loading` property in `next/dynamic`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const DynamicComponentWithCustomLoading = dynamic(
  () => import('../components/hello2'),
  {
    loading: () => <p>Loading</p>,
  }
)
```

----------------------------------------

TITLE: Data Fetching in Not Found Component with Next.js (TypeScript)
DESCRIPTION: An async implementation of the not-found.js component in TypeScript that fetches data from the server using the headers API. It demonstrates how to customize the Not Found page with dynamic data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/not-found.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'
import { headers } from 'next/headers'

export default async function NotFound() {
  const headersList = await headers()
  const domain = headersList.get('host')
  const data = await getSiteData(domain)
  return (
    <div>
      <h2>Not Found: {data.name}</h2>
      <p>Could not find requested resource</p>
      <p>
        View <Link href="/blog">all posts</Link>
      </p>
    </div>
  )
}
```

----------------------------------------

TITLE: Running Next.js Development Server (Yarn)
DESCRIPTION: These commands install the project dependencies using yarn install and then start the Next.js development server using yarn dev. This sets up the local development environment for the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Disallowed: Re-exporting all exports in Next.js page
DESCRIPTION: This code snippet demonstrates the disallowed pattern of re-exporting all exports from another file within a Next.js page.  This can cause issues because server-side code (like imports from 'fs') can be accidentally included in the browser bundle.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
export * from '...'
```

----------------------------------------

TITLE: Updated Pattern for Separate Dynamic Module Loading
DESCRIPTION: Corrected implementation showing how to load components separately using individual dynamic imports, which is the recommended approach after the deprecation.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-modules.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const Hello1 = dynamic(() => import('../components/hello1'))
const Hello2 = dynamic(() => import('../components/hello2'))

function HelloBundle({ title }) {
  return (
    <div>
      <h1>{title}</h1>
      <Hello1 />
      <Hello2 />
    </div>
  )
}

function DynamicBundle() {
  return <HelloBundle title="Dynamic Bundle" />
}

export default DynamicBundle
```

----------------------------------------

TITLE: Creating Next.js App with Nhost Example (pnpm)
DESCRIPTION: This command initializes a new Next.js application using the `with-nhost-auth-realtime-graphql` example. It employs `create next-app` with pnpm to bootstrap the project. `nhost-app` is the name assigned to the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-nhost-auth-realtime-graphql nhost-app
```

----------------------------------------

TITLE: Fetching CMS data with getStaticProps (JavaScript)
DESCRIPTION: This snippet shows an example of fetching data from a CMS using `getStaticProps` in a Next.js page. It fetches a list of blog posts and passes them as props to the `Blog` component. This is a typical use case for static site generation with data from a headless CMS.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
// posts will be populated at build time by getStaticProps()
export default function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li>{post.title}</li>
      ))}
    </ul>
  )
}

// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getStaticProps() {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts,
    },
  }
}
```

----------------------------------------

TITLE: Mocking file imports for Jest
DESCRIPTION: This JavaScript module exports a string, `'test-file-stub'`, which serves as a mock for file imports in Jest tests.  It allows tests to run without actually importing or processing real files, preventing potential errors or dependencies during testing. This is commonly used for mocking image or other asset imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
module.exports = 'test-file-stub'
```

----------------------------------------

TITLE: Building and starting a Next.js app with Yarn
DESCRIPTION: These commands build and start the Next.js application using Yarn. `yarn build` optimizes the application for production deployment, while `yarn start` launches the production server. This assumes the Next.js project has already been created and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn build
yarn start
```

----------------------------------------

TITLE: Accessing Environment Variables in a React Component (JSX)
DESCRIPTION: This code snippet shows how to access environment variables defined in `next.config.js` within a React component.  `process.env.customKey` is used to access the value of the 'customKey' environment variable. Next.js replaces this expression with the actual value during build time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/env.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
function Page() {
  return <h1>The value of customKey is: {process.env.customKey}</h1>
}

export default Page
```

----------------------------------------

TITLE: Implementing Custom Image Loader in Next.js (Client Component)
DESCRIPTION: This example shows how to create and use a custom loader function with the Next.js Image component in a client component. The loader function generates a custom URL based on the provided src, width, and quality parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_1

LANGUAGE: js
CODE:
```
'use client'

import Image from 'next/image'

const imageLoader = ({ src, width, quality }) => {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}

export default function Page() {
  return (
    <Image
      loader={imageLoader}
      src="me.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: Extending Jest with custom matchers (JavaScript)
DESCRIPTION: This JavaScript snippet configures Jest to use custom matchers from `@testing-library/jest-dom`. It specifies a setup file (`jest.setup.js`) that will be run before each test, enabling the use of custom matchers in your tests. This can improve test expressiveness when asserting specific conditions in the DOM.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
setupFilesAfterEnv: ['<rootDir>/jest.setup.js']
```

----------------------------------------

TITLE: Setting Runtime in Next.js TSX
DESCRIPTION: This snippet demonstrates how to specify the runtime environment (`nodejs` or `edge`) for a Next.js layout, page, or route handler using TypeScript/TSX. It determines where the server-side code will execute.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export const runtime = 'nodejs'
// 'nodejs' | 'edge'
```

----------------------------------------

TITLE: Redirecting After Form Submission - TypeScript
DESCRIPTION: This code snippet demonstrates how to redirect the user to a different route after a successful form submission in a Next.js API route using TypeScript. It calls an addPost function, and redirects to a specific post page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const id = await addPost()
  res.redirect(307, `/post/${id}`)
}
```

----------------------------------------

TITLE: Using Local Fonts in Next.js Pages Router
DESCRIPTION: Demonstrates how to implement local fonts in a Next.js application using the Pages Router. The font is imported and applied to the main component wrapper in the custom App component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_23

LANGUAGE: jsx
CODE:
```
import localFont from 'next/font/local'

// Font files can be colocated inside of `pages`
const myFont = localFont({ src: './my-font.woff2' })

export default function MyApp({ Component, pageProps }) {
  return (
    <main className={myFont.className}>
      <Component {...pageProps} />
    </main>
  )
}
```

----------------------------------------

TITLE: Configuring Dynamic Params Behavior in App Router (JSX)
DESCRIPTION: Illustrates how to use the `dynamicParams` route segment config in the `app` directory. Setting `export const dynamicParams = true` (the default) ensures that dynamic segments not returned by `generateStaticParams` are server-rendered on demand.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_25

LANGUAGE: jsx
CODE:
```
// `app` directory

export const dynamicParams = true;

export async function generateStaticParams() {
  return [...]
}

async function getPost(params) {
  ...
}

export default async function Post({ params }) {
  const post = await getPost(params);

  return ...
}
```

----------------------------------------

TITLE: Setting Runtime in Next.js JS
DESCRIPTION: This snippet demonstrates how to specify the runtime environment (`nodejs` or `edge`) for a Next.js layout, page, or route handler using JavaScript. It determines where the server-side code will execute.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_7

LANGUAGE: js
CODE:
```
export const runtime = 'nodejs'
// 'nodejs' | 'edge'
```

----------------------------------------

TITLE: Starting Next.js Dev Server with PORT Environment Variable (Bash)
DESCRIPTION: This command starts the Next.js development server using `next dev`, setting the `PORT` environment variable to 4000 to specify the listening port. Note that this method cannot be used with `.env` files as the server starts before they are processed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
PORT=4000 next dev
```

----------------------------------------

TITLE: Caching Database Calls with unstable_cache - Next.js App Router
DESCRIPTION: Shows how to cache the result of an asynchronous function, typically for ORM or database queries, using `unstable_cache`. It applies a tag ('posts') for specific revalidation via `revalidateTag` and sets a background revalidation time (3600 seconds).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getCachedPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const posts = getCachedPosts()
  // ...
}
```

LANGUAGE: jsx
CODE:
```
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getCachedPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const posts = getCachedPosts()
  // ...
}
```

----------------------------------------

TITLE: Implementing Global Error Handling in Next.js with JavaScript
DESCRIPTION: JavaScript implementation of a global error boundary component for handling application-wide errors in Next.js. Provides same functionality as TypeScript version without type definitions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({ error, reset }) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Starting Next.js Development Environment
DESCRIPTION: Command to start the development server with watch mode for code changes during Next.js development.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Using revalidatePath in a Route Handler
DESCRIPTION: Provides examples of using `revalidatePath` within a Next.js Route Handler (both TypeScript and JavaScript versions). The handler reads a 'path' query parameter from the request and calls `revalidatePath` with that value, returning a JSON response indicating the result.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { revalidatePath } from 'next/cache'
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate',
  })
}
```

LANGUAGE: javascript
CODE:
```
import { revalidatePath } from 'next/cache'

export async function GET(request) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate',
  })
}
```

----------------------------------------

TITLE: Database URL Connection String Format
DESCRIPTION: Illustrates the format for constructing the `DATABASE_URL` connection string.  Replace `<USERNAME>`, `<PLAIN_TEXT_PASSWORD>`, `<ACCESS_HOST_URL>`, and `<DATABASE_NAME>` with the credentials from the PlanetScale password creation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_5

LANGUAGE: text
CODE:
```
mysql://<USERNAME>:<PLAIN_TEXT_PASSWORD>@<ACCESS_HOST_URL>/<DATABASE_NAME>?sslaccept=strict
```

----------------------------------------

TITLE: Configuring Next.js Rewrites to External URLs (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure Next.js rewrites to direct incoming requests to external URLs. This is useful for incrementally migrating an application to Next.js by proxying certain paths to an existing website. Parameters captured in the 'source' path (e.g., ':slug') can be used in the external 'destination' URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_10

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/blog',
        destination: 'https://example.com/blog',
      },
      {
        source: '/blog/:slug',
        destination: 'https://example.com/blog/:slug', // Matched parameters can be used in the destination
      },
    ]
  },
}
```

----------------------------------------

TITLE: Dynamically Importing a Component with SSR Disabled (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `next/dynamic` to import a component dynamically and disable server-side rendering (SSR). This is useful for components that rely on browser-specific APIs and should only be rendered on the client-side. The `ssr: false` option ensures that the component is not rendered during the initial server-side rendering process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
import dynamic from 'next/dynamic'

const ClientOnlyComponent = dynamic(() => import('./component'), {
  ssr: false,
})
```

----------------------------------------

TITLE: Run Next.js development server (Yarn)
DESCRIPTION: This command uses Yarn to execute the 'dev' script defined in the project's package.json. The purpose is to start the Next.js development server, allowing developers to view and test the application locally. It typically starts the server on localhost.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_10

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Accessing Dynamic API Synchronously (Deprecated) in Next.js
DESCRIPTION: This code snippet demonstrates the deprecated way of accessing dynamic API properties synchronously, which will now trigger a warning in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
function Page({ params }) {
  // direct access of `params.id`.
  return <p>ID: {params.id}</p>
}
```

----------------------------------------

TITLE: Adding .next and next-env.d.ts to .gitignore
DESCRIPTION: This snippet shows how to update the `.gitignore` file to exclude the `.next` directory (Next.js build output) and the `next-env.d.ts` file (Next.js environment type definitions). This prevents these generated files from being committed to version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_22

LANGUAGE: txt
CODE:
```
# ...
.next
next-env.d.ts
```

----------------------------------------

TITLE: Basic Next.js Bundle Analyzer Configuration
DESCRIPTION: Configures the bundle analyzer in next.config.js to enable analysis when an environment variable is set
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
})
module.exports = withBundleAnalyzer({})
```

----------------------------------------

TITLE: Creating Next.js app with Cypress Example
DESCRIPTION: Uses `create-next-app` to generate a new Next.js project pre-configured with Cypress for testing.  It leverages the `with-cypress` example. Requires `npx` to be available.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --example with-cypress with-cypress-app
```

----------------------------------------

TITLE: Invalidating Data with revalidateTag - Next.js Server Actions
DESCRIPTION: Illustrates how to use the `revalidateTag` function within a Next.js Server Action. Calling `revalidateTag` with a specific tag invalidates all cached data associated with that tag, forcing a re-fetch on the next request for components or functions that consumed the tagged data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_10

LANGUAGE: ts
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  // Invalidate all data tagged with 'posts' in the cache
  revalidateTag('posts')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  // Invalidate all data tagged with 'posts' in the cache
  revalidateTag('posts')
}
```

----------------------------------------

TITLE: Using Tailwind CSS Classes (Pages Router - JSX)
DESCRIPTION: This JSX code demonstrates how to use Tailwind CSS utility classes in a Next.js component. It renders a heading with specified text size, font weight, and underline styling using Tailwind classes within the Pages router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_11

LANGUAGE: jsx
CODE:
```
"export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}"
```

----------------------------------------

TITLE: Caching ORM/Database Data with unstable_cache in Next.js (TSX/JSX)
DESCRIPTION: Demonstrates caching the result of a database query using `unstable_cache` from `next/cache`. It wraps the data fetching logic in a cached function (`getPosts`) configured with a revalidation time (3600 seconds) and tags for invalidation. This caches the query result during the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const allPosts = await getPosts()

  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const allPosts = await getPosts()

  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Rendering Unauthorized Page with Login UI (JavaScript)
DESCRIPTION: The JavaScript equivalent of rendering a 401 error page featuring a login UI. This component ensures unauthorized users have the capability to log in using a Login component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
import Login from '@/app/components/Login'

export default function UnauthorizedPage() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}
```

----------------------------------------

TITLE: Exporting useMDXComponents Function in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates exporting the `useMDXComponents` function. The function accepts a `components` parameter and returns a new object including those components. This export is used in `mdx-components.js` to customize MDX rendering in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/mdx-components.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export function useMDXComponents(components) {
  return {
    ...components,
  }
}
```

----------------------------------------

TITLE: Configuring Next.js Rewrites with Base Path (JavaScript)
DESCRIPTION: This snippet demonstrates how Next.js automatically prefixes 'source' and 'destination' paths with the configured 'basePath' when defining rewrites. It also shows how to use the 'basePath: false' option on a specific rewrite rule to prevent this automatic prefixing, useful when rewriting to external URLs that should not include the basePath. Note that 'basePath: false' cannot be used for internal rewrites.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_13

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  basePath: '/docs',

  async rewrites() {
    return [
      {
        source: '/with-basePath', // automatically becomes /docs/with-basePath
        destination: '/another', // automatically becomes /docs/another
      },
      {
        // does not add /docs to /without-basePath since basePath: false is set
        // Note: this can not be used for internal rewrites e.g. `destination: '/another'`
        source: '/without-basePath',
        destination: 'https://example.com',
        basePath: false,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Defining Template in Next.js
DESCRIPTION: This code defines a template component (`template.js` or `template.tsx`), which is similar to a layout but causes its children to be remounted on navigation. This is useful for resetting state or re-synchronizing effects. The component accepts a `children` prop to wrap its content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/03-layouts-and-templates.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export default function Template({ children }: { children: React.ReactNode }) {
  return <div>{children}</div>
}
```

LANGUAGE: JavaScript
CODE:
```
export default function Template({ children }) {
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Creating Localized Dictionaries in JSON
DESCRIPTION: These JSON snippets show examples of localized dictionaries for English and Dutch, containing translated strings for various UI elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "products": {
    "cart": "Add to Cart"
  }
}
```

LANGUAGE: json
CODE:
```
{
  "products": {
    "cart": "Toevoegen aan Winkelwagen"
  }
}
```

----------------------------------------

TITLE: Route Handler for Static JSON Response (JavaScript)
DESCRIPTION: This code demonstrates a Route Handler that returns a static JSON response.  It exports an asynchronous `GET` function that returns a `Response` object with a JSON payload. This will render a static JSON file during `next build` when using static export.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_12

LANGUAGE: jsx
CODE:
```
export async function GET() {
  return Response.json({ name: 'Lee' })
}
```

----------------------------------------

TITLE: Configuring trailingSlash in Next.js Configuration
DESCRIPTION: This snippet shows how to set the trailingSlash option to true in the next.config.js file. This configuration redirects URLs without trailing slashes to their counterparts with trailing slashes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/trailingSlash.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  trailingSlash: true,
}
```

----------------------------------------

TITLE: Fetching Redirect Data in Next.js App Route Handler (JavaScript)
DESCRIPTION: This JavaScript snippet for a Next.js App Route Handler (`app/api/redirects/route.js`) receives a 'pathname' query parameter, looks it up in a local 'redirects.json' file, and returns the corresponding redirect entry as JSON. It handles cases where the pathname is missing or not found in the JSON file (accounting for Bloom filter false positives), returning a 400 status.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_14

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'
import redirects from '@/app/redirects/redirects.json'

export function GET(request) {
  const pathname = request.nextUrl.searchParams.get('pathname')
  if (!pathname) {
    return new Response('Bad Request', { status: 400 })
  }

  // Get the redirect entry from the redirects.json file
  const redirect = redirects[pathname]

  // Account for bloom filter false positives
  if (!redirect) {
    return new Response('No redirect', { status: 400 })
  }

  // Return the redirect entry
  return NextResponse.json(redirect)
}
```

----------------------------------------

TITLE: Getting All Cookies - TSX
DESCRIPTION: This snippet demonstrates how to retrieve all cookies with a matching name in a Next.js page component. If no name is specified, it returns all available cookies from the cookie store.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  return cookieStore.getAll().map((cookie) => (
    <div key={cookie.name}>
      <p>Name: {cookie.name}</p>
      <p>Value: {cookie.value}</p>
    </div>
  ))
}
```

----------------------------------------

TITLE: Forcing fetch Caching (Next.js)
DESCRIPTION: Demonstrates how to explicitly opt an individual fetch request into caching by setting the `cache` option to `force-cache`, overriding default fetch caching behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_5

LANGUAGE: JSX
CODE:
```
fetch(`https://...`, { cache: 'force-cache' })
```

----------------------------------------

TITLE: Accessing Dynamic API Asynchronously in Server Component
DESCRIPTION: This code snippet shows how to properly access dynamic API properties asynchronously in a Server Component or route handler in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
async function Page({ params }) {
  // asynchronous access of `params.id`.
  const { id } = await params
  return <p>ID: {id}</p>
}
```

----------------------------------------

TITLE: Copying environment variables example file
DESCRIPTION: This command copies the example environment variables file to a local environment file. This file will be ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Overwriting Nested Metadata Fields Example (JSX)
DESCRIPTION: Demonstrates how defining a nested metadata field (like `openGraph`) in a child segment (app/blog/page.js) completely overwrites the same nested field defined in a parent segment (app/layout.js), even if the child only specifies a subset of the parent's fields. Other top-level fields like `title` are also replaced.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Acme',
  openGraph: {
    title: 'Acme',
    description: 'Acme is a...',
  },
};
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Blog',
  openGraph: {
    title: 'Blog',
  },
};
```

----------------------------------------

TITLE: Fixing Router Method Calls in Function Components
DESCRIPTION: Demonstrates how to move router method calls to useEffect hook to prevent pre-rendering errors in function components
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-router-instance.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Correct approach
useEffect(() => {
  router.push('/some-path');
}, []);
```

----------------------------------------

TITLE: Wrap Root Layout with Styled Components Registry Next.js
DESCRIPTION: Import the created `StyledComponentsRegistry` component and wrap your root layout's children with it. This ensures styles are collected and injected correctly for components rendered within this layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/css-in-js.mdx#_snippet_4

LANGUAGE: TSX
CODE:
```
import StyledComponentsRegistry from './lib/registry'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html>
      <body>
        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>
      </body>
    </html>
  )
}
```

LANGUAGE: JSX
CODE:
```
import StyledComponentsRegistry from './lib/registry'

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Attempting to Import Server Component into Client Component in JavaScript
DESCRIPTION: This JavaScript snippet mirrors the TypeScript one, showcasing the same unsupported pattern. Importing a Server Component into a Client Component will result in an error.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
'use client'

// You cannot import a Server Component into a Client Component.
import ServerComponent from './Server-Component'

export default function ClientComponent({ children }) {
  const [count, setCount] = useState(0)

  return (
    <> 
      <button onClick={() => setCount(count + 1)}>{count}</button>

      <ServerComponent />
    </>
  )
}
```

----------------------------------------

TITLE: Configuring GitLab CI Cache for Next.js Builds
DESCRIPTION: This YAML configuration for GitLab CI sets up caching for node_modules and the Next.js cache directory, using the commit reference slug as the cache key.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/
```

----------------------------------------

TITLE: Creating a Web App Manifest with Next.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to create a web app manifest file (`app/manifest.js`) in a Next.js application using JavaScript.  The manifest provides metadata about the PWA, such as its name, short name, description, and icons. The function returns an object that defines the PWA's properties including name, description, icons, and display settings.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export default function manifest() {
  return {
    name: 'Next.js PWA',
    short_name: 'NextPWA',
    description: 'A Progressive Web App built with Next.js',
    start_url: '/',
    display: 'standalone',
    background_color: '#ffffff',
    theme_color: '#000000',
    icons: [
      {
        src: '/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png',
      },
      {
        src: '/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png',
      },
    ],
  }
}
```

----------------------------------------

TITLE: Updating Search Form to Use SearchButton in Next.js TypeScript
DESCRIPTION: In this TypeScript snippet, the search form integrates the 'SearchButton' component to replace the submit button. The SearchButton provides dynamic feedback during the search process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_12

LANGUAGE: TypeScript
CODE:
```
import Form from 'next/form'
import { SearchButton } from '@/ui/search-button'

export default function Page() {
  return (
    <Form action="/search">
      <input name="query" />
      <SearchButton />
    </Form>
  )
}
```

----------------------------------------

TITLE: Configuring MDX with remark/rehype Plugins - ESM
DESCRIPTION: This configuration file sets up `@next/mdx` in `next.config.mjs` to enable MDX support and integrate remark/rehype plugins, specifically demonstrating the use of `remark-gfm` for GitHub Flavored Markdown. It requires using an ESM configuration file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_17

LANGUAGE: javascript
CODE:
```
import remarkGfm from 'remark-gfm'
import createMDX from '@next/mdx'

/** @type {import('next').NextConfig} */
const nextConfig = {
  // Allow .mdx extensions for files
  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],
  // Optionally, add any other Next.js config below
}

const withMDX = createMDX({
  // Add markdown plugins here, as desired
  options: {
    remarkPlugins: [remarkGfm],
    rehypePlugins: [],
  },
})

// Combine MDX and Next.js config
export default withMDX(nextConfig)
```

----------------------------------------

TITLE: Running the Next.js development server
DESCRIPTION: This bash command starts the Next.js development server using npm.  It utilizes the 'dev' script defined in `package.json`, which in this case is configured to use Turbopack for faster builds.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_23

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Implementing Short-lived Caches in Next.js
DESCRIPTION: Demonstrates how to implement caching with different lifetimes for optimal prerendering and client-side caching behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
async function getDashboard() {
  "use cache"
  // This cache will revalidate after 1 second. It is so short
  // Next.js won't prerender it on the server but the client router
  // can reuse the result for up to 30 seconds unless the user manually refreshes
  cacheLife('seconds')
  return db.query(...)
}

export default async function Page() {
  const data = await getDashboard(token);
  return <Dashboard data={data}>
}
```

LANGUAGE: jsx
CODE:
```
async function getDashboard() {
  "use cache"
  // This cache will revalidate after 1 minute. It's long enough that
  // Next.js will still produce a fully or partially prerendered page
  cacheLife('minutes')
  return db.query(...)
}

export default async function Page() {
  const data = await getDashboard(token);
  return <Dashboard data={data}>
}
```

----------------------------------------

TITLE: Installing Cypress as a dev dependency
DESCRIPTION: Installs Cypress as a development dependency using npm, yarn, or pnpm.  This allows Cypress to be used for testing without being included in the production build.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install -D cypress
# or
yarn add -D cypress
# or
pnpm install -D cypress
```

----------------------------------------

TITLE: Generating Dynamic Images with ImageResponse in Next.js JSX
DESCRIPTION: This snippet demonstrates how to use the `ImageResponse` constructor from `next/og` to generate dynamic images. It takes JSX content and configuration options (like dimensions) to produce an image, typically used for Open Graph or Twitter cards.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { ImageResponse } from 'next/og';

export default function OG() {
  return new ImageResponse(
    (
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          textAlign: 'center',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        Hello world!
      </div>
    ),
    {
      width: 1200,
      height: 600,
    }
  );
}
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers. This allows developers to run the application locally for development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app/ts/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Root Layout: Using Metadata API (JSX)
DESCRIPTION: This code demonstrates how to use the Next.js Metadata API to manage metadata information in the root layout (JSX). It exports a `metadata` object containing the title and description of the application. The `<head>` tags are then simplified in the RootLayout component, relying on the Metadata API to inject the metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_12

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'My App',
  description: 'My App is a...',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Redirecting with redirect Function (JavaScript)
DESCRIPTION: Demonstrates using the `redirect` function within a Next.js Server Action (`createPost`). It shows calling a placeholder database operation, revalidating a cache path, and then redirecting the user to a newly created post's page. This is typically used after an event or mutation in App Router server contexts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}
```

----------------------------------------

TITLE: Managing Cookies in Next.js Middleware
DESCRIPTION: Demonstrates how to get, check for existence, get all, delete cookies from an incoming `NextRequest` using the `RequestCookies` API and how to set cookies on an outgoing `NextResponse` using the `ResponseCookies` API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  // Assume a "Cookie:nextjs=fast" header to be present on the incoming request
  // Getting cookies from the request using the `RequestCookies` API
  let cookie = request.cookies.get('nextjs');
  console.log(cookie); // => { name: 'nextjs', value: 'fast', Path: '/' }
  const allCookies = request.cookies.getAll();
  console.log(allCookies); // => [{ name: 'nextjs', value: 'fast' }]

  request.cookies.has('nextjs'); // => true
  request.cookies.delete('nextjs');
  request.cookies.has('nextjs'); // => false

  // Setting cookies on the response using the `ResponseCookies` API
  const response = NextResponse.next();
  response.cookies.set('vercel', 'fast');
  response.cookies.set({
    name: 'vercel',
    value: 'fast',
    path: '/',
  });
  cookie = response.cookies.get('vercel');
  console.log(cookie); // => { name: 'vercel', value: 'fast', Path: '/' }
  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.

  return response;
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server';

export function middleware(request) {
  // Assume a "Cookie:nextjs=fast" header to be present on the incoming request
  // Getting cookies from the request using the `RequestCookies` API
  let cookie = request.cookies.get('nextjs');
  console.log(cookie); // => { name: 'nextjs', value: 'fast', Path: '/' }
  const allCookies = request.cookies.getAll();
  console.log(allCookies); // => [{ name: 'nextjs', value: 'fast' }]

  request.cookies.has('nextjs'); // => true
  request.cookies.delete('nextjs');
  request.cookies.has('nextjs'); // => false

  // Setting cookies on the response using the `ResponseCookies` API
  const response = NextResponse.next();
  response.cookies.set('vercel', 'fast');
  response.cookies.set({
    name: 'vercel',
    value: 'fast',
    path: '/',
  });
  cookie = response.cookies.get('vercel');
  console.log(cookie); // => { name: 'vercel', value: 'fast', Path: '/' }
  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/test` header.

  return response;
}
```

----------------------------------------

TITLE: Adding Metadata to App Router Layout - JSX
DESCRIPTION: Shows how to define static metadata, such as the page title and description, using the exported `metadata` object within a root layout file (`app/layout.js`) in JavaScript/JSX. This is the recommended way to manage `<head>` elements in the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Home',
  description: 'Welcome to Next.js',
}
```

----------------------------------------

TITLE: Creating a Post Component with Link Navigation in Next.js
DESCRIPTION: Implements a component for rendering blog post links using the Next.js Link component. This demonstrates how to implement client-side navigation between pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default async function Post({ post }) {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.slug}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default async function Post({ post }) {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.slug}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Configuring Incremental PPR in next.config.js (JavaScript)
DESCRIPTION: Configures the Next.js project to enable incremental Partial Prerendering by setting the `ppr` experimental option to `'incremental'` in the `next.config.js` file. This globally enables the feature for routes that explicitly opt-in.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Implementing getStaticPaths with JavaScript in Next.js Dynamic Routes
DESCRIPTION: JavaScript implementation of getStaticPaths and getStaticProps for Next.js dynamic routes. Shows how to define static paths, fetch data from an external API, and render the page with the fetched data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/02-get-static-paths.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export async function getStaticPaths() {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      }, // See the "paths" section below
    ],
    fallback: true, // false or "blocking"
  }
}

export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Creating an Unoptimized Image Component with Next.js
DESCRIPTION: Example of creating a reusable unoptimized image component using Next.js Image. When the unoptimized property is set to true, the source image is served as-is without quality, size, or format changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_12

LANGUAGE: js
CODE:
```
import Image from 'next/image'

const UnoptimizedImage = (props) => {
  return <Image {...props} unoptimized />
}
```

----------------------------------------

TITLE: Using Tailwind CSS Classes (Pages Router - TSX)
DESCRIPTION: This TypeScript code demonstrates how to use Tailwind CSS utility classes in a Next.js component. It renders a heading with specified text size, font weight, and underline styling using Tailwind classes within the Pages router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
"export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}"
```

----------------------------------------

TITLE: Defining Static Viewport Object in JavaScript
DESCRIPTION: This snippet shows how to export a static viewport object in a JavaScript file for use in Next.js applications. The exported object specifies the theme color.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export const viewport = {
  themeColor: 'black',
}

export default function Page() {}
```

----------------------------------------

TITLE: Initializing Google Tag Manager on a single route (App Router - JSX)
DESCRIPTION: This code snippet shows how to load the `GoogleTagManager` component on a specific page within a Next.js application using the App Router.  It imports the component from `@next/third-parties/google` and sets the `gtmId` prop with the appropriate container ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import { GoogleTagManager } from '@next/third-parties/google'

export default function Page() {
  return <GoogleTagManager gtmId="GTM-XYZ" />
}
```

----------------------------------------

TITLE: Linking to an ID with Next.js Link (JSX)
DESCRIPTION: This snippet shows how to link to a specific element ID on a page using the hash (`#`) in the `href` prop of the Next.js `Link` component. The `Link` component renders an `<a>` tag, supporting standard HTML hash links.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
<Link href="/dashboard#settings">Settings</Link>

// Output
<a href="/dashboard#settings">Settings</a>
```

----------------------------------------

TITLE: Using Style Property with Next.js Image Component
DESCRIPTION: Example of applying custom CSS styles to a Next.js Image component using the style property. This shows how to create a circular profile image with a border.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
const imageStyle = {
  borderRadius: '50%',
  border: '1px solid #fff',
}

export default function ProfileImage() {
  return <Image src="..." style={imageStyle} />
}
```

----------------------------------------

TITLE: Using afterInteractive Strategy (App Router, JSX)
DESCRIPTION: This code snippet shows how to use the `afterInteractive` strategy with the `Script` component in a Next.js application using the App Router.  It loads the script after some hydration has occurred. This is the default strategy.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script src="https://example.com/script.js" strategy="afterInteractive" />
    </>
  )
}
```

----------------------------------------

TITLE: Rendering Unauthorized Page - JSX
DESCRIPTION: This code snippet exports a React component that displays a '401 - Unauthorized' message and integrates a login component. It is designed for JavaScript environments using Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import Login from '@/app/components/Login'

export default function Unauthorized() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}

```

----------------------------------------

TITLE: Running Development Server with Package Managers
DESCRIPTION: The snippet demonstrates how to start a Next.js development server using npm, yarn, pnpm, or bun. You need a Node.js environment and a properly initialized Next.js project using create-next-app. This command launches the development server on http://localhost:3000 where you can preview your application. The server supports hot-reloading, meaning it will automatically update changes made to code files.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw/ts/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Initializing Google Analytics in App Router (JSX)
DESCRIPTION: This code snippet shows how to integrate Google Analytics into a Next.js application using the App Router and JavaScript. It uses the `GoogleAnalytics` component from `@next/third-parties/google` and includes it within the root layout component. The Google Analytics measurement ID is passed via the `gaId` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

----------------------------------------

TITLE: Configuring Basic Twitter Card Metadata in Next.js (JSX & HTML)
DESCRIPTION: Configures standard Twitter Card metadata using the `metadata.twitter` property. This example uses the `summary_large_image` card type and includes essential properties like title, description, site ID, creator information, and an image URL (must be absolute). This generates various `<meta name="twitter:">` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_18

LANGUAGE: JSX
CODE:
```
export const metadata = {
  twitter: {
    card: 'summary_large_image',
    title: 'Next.js',
    description: 'The React Framework for the Web',
    siteId: '1467726470533754880',
    creator: '@nextjs',
    creatorId: '1467726470533754880',
    images: ['https://nextjs.org/og.png'], // Must be an absolute URL
  },
}
```

LANGUAGE: HTML
CODE:
```
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site:id" content="1467726470533754880" />
<meta name="twitter:creator" content="@nextjs" />
<meta name="twitter:creator:id" content="1467726470533754880" />
<meta name="twitter:title" content="Next.js" />
<meta name="twitter:description" content="The React Framework for the Web" />
<meta name="twitter:image" content="https://nextjs.org/og.png" />
```

----------------------------------------

TITLE: Configuring API rewrites in next.config.ts
DESCRIPTION: This TypeScript code snippet demonstrates how to configure API rewrites in `next.config.ts` to proxy requests to a backend server. It uses the `rewrites` async function to define a rewrite rule that forwards requests to `/api/:path*` to `https://your-backend.com/:path*`. Requires the `next` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_25

LANGUAGE: typescript
CODE:
```
import { NextConfig } from 'next'

const nextConfig: NextConfig = {
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'https://your-backend.com/:path*',
      },
    ]
  },
}
```

----------------------------------------

TITLE: Creating a Custom 404 Page in Next.js
DESCRIPTION: This code snippet demonstrates how to create a custom 404 page in a Next.js application.  It defines a React functional component named `Custom404` that returns a simple heading indicating the page was not found.  This component is placed in `pages/404.js`, which Next.js automatically recognizes and serves for 404 errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/08-custom-error.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
export default function Custom404() {
  return <h1>404 - Page Not Found</h1>
}
```

----------------------------------------

TITLE: Server Component Error Handling
DESCRIPTION: Example of handling fetch errors in a Server Component by returning an error message.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export default async function Page() {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!res.ok) {
    return 'There was an error.'
  }

  return '...'
}
```

LANGUAGE: javascript
CODE:
```
export default async function Page() {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!res.ok) {
    return 'There was an error.'
  }

  return '...'
}
```

----------------------------------------

TITLE: Loading Scripts in Layout - TypeScript
DESCRIPTION: This code snippet demonstrates how to load a third-party script within a Next.js layout component using TypeScript.  The `Script` component from `next/script` is used to embed the script. The script will be loaded once when the layout is accessed. Requires `next/script` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <>
      <section>{children}</section>
      <Script src="https://example.com/script.js" />
    </>
  )
}
```

----------------------------------------

TITLE: Creating a Font Definitions File in Next.js
DESCRIPTION: A centralized file for font definitions that can be imported throughout the application. This approach ensures fonts are loaded only once and can be reused in multiple components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_5

LANGUAGE: ts
CODE:
```
import { Inter, Lora, Source_Sans_3 } from 'next/font/google'
import localFont from 'next/font/local'

// define your variable fonts
const inter = Inter()
const lora = Lora()
// define 2 weights of a non-variable font
const sourceCodePro400 = Source_Sans_3({ weight: '400' })
const sourceCodePro700 = Source_Sans_3({ weight: '700' })
// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder
const greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })

export { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }
```

LANGUAGE: js
CODE:
```
import { Inter, Lora, Source_Sans_3 } from 'next/font/google'
import localFont from 'next/font/local'

// define your variable fonts
const inter = Inter()
const lora = Lora()
// define 2 weights of a non-variable font
const sourceCodePro400 = Source_Sans_3({ weight: '400' })
const sourceCodePro700 = Source_Sans_3({ weight: '700' })
// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder
const greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })

export { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }
```

----------------------------------------

TITLE: Implementing Streaming with Multiple Suspense Boundaries (TSX/JSX)
DESCRIPTION: Wrap specific asynchronous components within a page file using `<Suspense>` boundaries imported from `react`. This enables streaming server rendering, allowing parts of the page to display a fallback while waiting for the wrapped components' data or code, improving perceived loading performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/06-loading-ui-and-streaming.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Encrypting Session Payload with Jose in TypeScript
DESCRIPTION: This snippet defines an asynchronous function `encrypt` to sign and encrypt a given payload using the `jose` library with HS256 algorithm. It sets the protected header, issued at time, and expiration time (7 days) before signing with a key derived from a session secret environment variable. It requires the `server-only` package and a `SessionPayload` type definition.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import 'server-only';
import { SignJWT, jwtVerify } from 'jose';
import { SessionPayload } from '@/app/lib/definitions';

const secretKey = process.env.SESSION_SECRET;
const encodedKey = new TextEncoder().encode(secretKey);

export async function encrypt(payload: SessionPayload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(encodedKey);
}

export async function decrypt(session: string | undefined = '') {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ['HS256'],
    });
    return payload;
  } catch (error) {
    console.log('Failed to verify session');
  }
}
```

----------------------------------------

TITLE: Import Button with baseUrl - TypeScript
DESCRIPTION: This snippet shows an absolute import using the `baseUrl` option.  This eliminates the need for long relative paths, resulting in cleaner and more maintainable code. This assumes baseUrl is set to the project root.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import Button from "components/button";
```

----------------------------------------

TITLE: Creating a Next.js app with create-next-app - npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-unsplash example. It leverages the create-next-app tool to bootstrap the project with the specified template and project name. The tool downloads the template from the specified repository and initializes the project structure, installing necessary dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-unsplash with-unsplash-app
```

----------------------------------------

TITLE: Create Next.js app with Slate.js example using yarn
DESCRIPTION: This command utilizes yarn to create a Next.js application named 'with-slate-app', utilizing the 'with-slate' example template. This sets up a project pre-configured with Slate.js for rich text editing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-slate/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-slate with-slate-app
```

----------------------------------------

TITLE: Using Script component with compatible src attribute in JSX
DESCRIPTION: This code snippet demonstrates the correct usage of the `next/script` component with a valid `src` attribute pointing to an external JavaScript file. This is one way to include external scripts in your Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-script.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
<Script src="https://example.com/analytics.js" />
```

----------------------------------------

TITLE: Creating Next.js App with create-next-app using yarn
DESCRIPTION: This command utilizes yarn to generate a new Next.js application, incorporating the `with-mqtt-js` example. It creates a project named `with-mqtt-js-app` pre-configured for MQTT functionality and all required dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mqtt-js/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mqtt-js with-mqtt-js-app
```

----------------------------------------

TITLE: Creating Next.js app using Yarn with Markdoc example
DESCRIPTION: This command initializes a new Next.js application named 'markdoc-app' using the Markdoc example from the create-next-app tool. It leverages Yarn package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/markdoc/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example markdoc markdoc-app
```

----------------------------------------

TITLE: Creating Next.js app using pnpm with Markdoc example
DESCRIPTION: This command initializes a new Next.js application named 'markdoc-app' using the Markdoc example from the create-next-app tool. It leverages pnpm package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/markdoc/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example markdoc markdoc-app
```

----------------------------------------

TITLE: Accessing Session Data in Client Component via Context (JSX)
DESCRIPTION: Shows a Client Component written in JSX that utilizes a `useSession` hook from an authentication library to retrieve session details. This data is then used, for example, to perform client-side data fetching (`useSWR`) based on the authenticated user's ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_40

LANGUAGE: jsx
CODE:
```
"use client";\n\nimport { useSession } from "auth-lib";\n\nexport default function Profile() {\n  const { userId } = useSession();\n  const { data } = useSWR(`/api/user/${userId}`, fetcher)\n\n  return (\n    // ...\n  );\n}
```

----------------------------------------

TITLE: Creating Next.js Application from Public GitHub Repository
DESCRIPTION: Shows how to create a Next.js project using an example from any public GitHub repository by providing the full repository URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/create-next-app.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --example "https://github.com/.../" [your-project-name]
```

----------------------------------------

TITLE: Setting Referrer-Policy Header - JavaScript
DESCRIPTION: This snippet demonstrates how to add the `Referrer-Policy` header to your Next.js headers configuration. The example value `'origin-when-cross-origin'` specifies that when navigating to a different origin, only the origin (scheme, host, and port) of the referring URL should be sent in the `Referer` header, controlling how much information is leaked to external sites.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_19

LANGUAGE: js
CODE:
```
{
  key: 'Referrer-Policy',
  value: 'origin-when-cross-origin'
}
```

----------------------------------------

TITLE: Installing Tailwind CSS Packages
DESCRIPTION: This command installs Tailwind CSS, the Tailwind CSS PostCSS plugin, and PostCSS as development dependencies. These packages are required to use Tailwind CSS in a Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
"npm install -D tailwindcss @tailwindcss/postcss postcss"
```

----------------------------------------

TITLE: Creating a Basic Page in Next.js
DESCRIPTION: A simple example of creating a page in Next.js. This code exports a React component from a file in the pages directory, which makes it accessible at the corresponding route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
export default function About() {
  return <div>About</div>
}
```

----------------------------------------

TITLE: Installing dependencies and running the development server - Yarn
DESCRIPTION: These commands use Yarn to install the project's dependencies and then start the Next.js development server. `yarn install` installs all the packages listed in the `package.json` file. `yarn dev` starts the development server, typically on port 3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: getServerSideProps Return Value in Next.js (TypeScript)
DESCRIPTION: This code snippet demonstrates the correct structure for the return value of the `getServerSideProps` function in Next.js using TypeScript. It shows that `getServerSideProps` should return an object with a `props` property, which is an object containing the data to be passed to the page.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-getserversideprops-value.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export async function getServerSideProps(ctx: GetServerSidePropsContext) {
  return {
    props: { [key: string]: any }
  }
}
```

----------------------------------------

TITLE: Running Next.js in development mode using yarn
DESCRIPTION: These commands install the project dependencies and then start the Next.js development server using yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Adding to .gitignore
DESCRIPTION: This snippet demonstrates how to add Next.js specific files and folders to your `.gitignore` to prevent them from being committed to your repository.  This includes the `.next` directory, the `next-env.d.ts` file, and the distribution folder.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_25

LANGUAGE: txt
CODE:
```
# ...
.next
next-env.d.ts
dist
```

----------------------------------------

TITLE: Authenticated Data Fetching with Route Handlers (TypeScript)
DESCRIPTION: This TypeScript snippet governs data fetching capabilities through route handlers while verifying access authentication. If a session is invalid, the unauthorized function is invoked and a 401 page is rendered, safeguarding endpoint access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export async function GET(req: NextRequest): Promise<NextResponse> {
  // Verify the user's session
  const session = await verifySession()

  // If no session exists, return a 401 and render unauthorized.tsx
  if (!session) {
    unauthorized()
  }

  // Fetch data
  // ...
}
```

----------------------------------------

TITLE: Importing and Using Script Component (App Router, JSX)
DESCRIPTION: This code snippet demonstrates importing the `Script` component from `next/script` and using it to load an external script in a Next.js application within the `app` directory. It showcases the basic usage of the `Script` component with the required `src` prop, using JSX syntax. The `Dashboard` function is a simple functional component that renders the script.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function Dashboard() {
  return (
    <>
      <Script src="https://example.com/script.js" />
    </>
  )
}
```

----------------------------------------

TITLE: Importing NextResponse for API Route - JavaScript
DESCRIPTION: Imports the `NextResponse` class from the `next/server` module. This class is essential in Next.js API routes and middleware for constructing and returning HTTP responses, especially JSON responses. It is a necessary dependency for handling incoming requests and formulating valid server responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { NextResponse } from "next/server";
```

----------------------------------------

TITLE: Executing cra-to-next Codemod in Next.js
DESCRIPTION: This codemod migrates a Create React App project to Next.js, creating a Pages Router and necessary config to match behavior. It uses client-side only rendering initially to prevent compatibility issues.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
npx @next/codemod cra-to-next
```

----------------------------------------

TITLE: Outputting Twitter Image Meta Tags - HTML
DESCRIPTION: Shows the standard HTML <head> meta tags automatically generated by Next.js when a twitter-image file (JPG, JPEG, PNG, GIF) is placed in a route segment. These tags are specifically for Twitter Cards and include properties for the image URL, type, width, and height.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_1

LANGUAGE: HTML
CODE:
```
<meta name="twitter:image" content="<generated>" />
<meta name="twitter:image:type" content="<generated>" />
<meta name="twitter:image:width" content="<generated>" />
<meta name="twitter:image:height" content="<generated>" />
```

----------------------------------------

TITLE: Running Next.js Application in Development Mode
DESCRIPTION: This snippet outlines the commands necessary to run the Next.js application in development mode, allowing the application to listen for changes during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Forcing Static Rendering with dynamic Export Next.js JSX
DESCRIPTION: Illustrates how to force static rendering for a dynamic route segment using the `export const dynamic = 'force-static'` configuration option, which achieves a similar result to returning an empty array from `generateStaticParams`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
export const dynamic = 'force-static'
```

----------------------------------------

TITLE: Example Output of next info Command (Bash)
DESCRIPTION: This snippet shows typical terminal output when running the `next info` command. It provides details about the operating system, installed binaries (Node.js, npm, Yarn, pnpm), and relevant package versions (next, react, react-dom, typescript), which is useful for debugging and reporting issues.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0
  Available memory (MB): 65536
  Available CPU cores: 10
Binaries:
  Node: 20.12.0
  npm: 10.5.0
  Yarn: 1.22.19
  pnpm: 9.6.0
Relevant Packages:
  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).
  eslint-config-next: 14.2.5
  react: 19.0.0-rc
  react-dom: 19.0.0
  typescript: 5.5.4
Next.js Config:
  output: N/A
```

----------------------------------------

TITLE: Using Third-Party Components in Client Components
DESCRIPTION: Example showing how to properly use third-party components that rely on client-side features within a Client Component marked with the 'use client' directive.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
'use client'

import { useState } from 'react'
import { Carousel } from 'acme-carousel'

export default function Gallery() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div>
      <button onClick={() => setIsOpen(true)}>View pictures</button>

      {/* Works, since Carousel is used within a Client Component */}
      {isOpen && <Carousel />}
    </div>
  )
}
```

LANGUAGE: javascript
CODE:
```
'use client'

import { useState } from 'react'
import { Carousel } from 'acme-carousel'

export default function Gallery() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div>
      <button onClick={() => setIsOpen(true)}>View pictures</button>

      {/*  Works, since Carousel is used within a Client Component */}
      {isOpen && <Carousel />}
    </div>
  )
}
```

----------------------------------------

TITLE: Example Usage of unstable_cache in Next.js JSX Page Component
DESCRIPTION: This snippet provides a full example of using unstable_cache within a Next.js JSX App Router page component. It defines a cached function that returns user data, using the userId from the page parameters as part of the cache key, and includes options for tags and revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_cache.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { unstable_cache } from 'next/cache';

export default async function Page({ params } }) {
  const { userId } = await params
  const getCachedUser = unstable_cache(
    async () => {
      return { id: userId };
    },
    [userId], // add the user ID to the cache key
    {
      tags: ["users"],
      revalidate: 60,
    }
  );

  //...
}
```

----------------------------------------

TITLE: Applying a Font to a Specific Page (App Router)
DESCRIPTION: This code snippet demonstrates applying a font to a specific page in a Next.js application using the app router. It imports the `roboto_mono` font from a utility function and applies its `className` to an `h1` element within the `Page` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_17

LANGUAGE: jsx
CODE:
```
import { roboto_mono } from './fonts'

export default function Page() {
  return (
    <>
      <h1 className={roboto_mono.className}>My page</h1>
    </>
  )
}
```

----------------------------------------

TITLE: Configuring Advanced Matcher Options in Next.js Middleware
DESCRIPTION: Example of a complex middleware configuration using advanced matcher options. This demonstrates how to specify conditions for middleware execution based on path patterns, headers, query parameters, and cookies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
export const config = {
  matcher: [
    {
      source: '/api/*',
      regexp: '^/api/(.*)',
      locale: false,
      has: [
        { type: 'header', key: 'Authorization', value: 'Bearer Token' },
        { type: 'query', key: 'userId', value: '123' },
      ],
      missing: [{ type: 'cookie', key: 'session', value: 'active' }],
    },
  ],
}
```

----------------------------------------

TITLE: Client Component with SWR for Data Fetching (JavaScript)
DESCRIPTION: This code illustrates using a Client Component with SWR for client-side data fetching. It imports `useSWR` and defines a `fetcher` function. The `useSWR` hook fetches data from an API endpoint and handles loading and error states.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
'use client'

import useSWR from 'swr'

const fetcher = (url) => fetch(url).then((r) => r.json())

export default function Page() {
  const { data, error } = useSWR(
    `https://jsonplaceholder.typicode.com/posts/1`,
    fetcher
  )
  if (error) return 'Failed to load'
  if (!data) return 'Loading...'

  return data.title
}
```

----------------------------------------

TITLE: Creating Loading Component in JavaScript for Next.js
DESCRIPTION: This snippet shows how to implement a loading component in JavaScript for Next.js. It exports a default function that returns a basic loading message, which can be replaced with a custom loading skeleton component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/loading.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export default function Loading() {
  // Or a custom loading skeleton component
  return <p>Loading...</p>
}
```

----------------------------------------

TITLE: Running the Development Server
DESCRIPTION: These commands start the Next.js development server. They showcase the use of `yarn` and `npm` run commands to execute the `dev` script.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
yarn dev
# or
npm run dev
```

----------------------------------------

TITLE: Designing Loading UI in Next.js TypeScript
DESCRIPTION: This TypeScript snippet defines a loading component to provide visual feedback while data is being fetched. This component can be used to show users that a response is pending during form submission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
export default function Loading() {
  return <div>Loading...</div>
}
```

----------------------------------------

TITLE: getServerSideProps data fetching - JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates fetching data using `getServerSideProps` from an external API and passing it to the page component. It uses `fetch` to get data from the GitHub API and `res.json()` to parse it.  The fetched `repo` data, specifically `stargazers_count`, is then rendered in the `Page` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}

export default function Page({ repo }) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Configuring Images in Next.js - JavaScript
DESCRIPTION: This code snippet illustrates the correct structure for defining the `images` configuration in the `next.config.js` file. It includes various parameters to optimize image handling, such as defining acceptable image sizes, formats, and cache settings. Ensure to adhere to the specified limits for each array to avoid configuration errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-images-config.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  images: {
    // limit of 25 deviceSizes values
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    // limit of 25 imageSizes values
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    // limit of 50 domains values (deprecated)
    domains: [],
    // path prefix for Image Optimization API, useful with `loader`
    path: '/_next/image',
    // loader can be 'default', 'imgix', 'cloudinary', 'akamai', or 'custom'
    loader: 'default',
    // file with `export default function loader({src, width, quality})`
    loaderFile: '',
    // disable static imports for image files
    disableStaticImages: false,
    // minimumCacheTTL is in seconds, must be integer 0 or more
    minimumCacheTTL: 60,
    // ordered list of acceptable optimized image formats (mime types)
    formats: ['image/webp'],
    // enable dangerous use of SVG images
    dangerouslyAllowSVG: false,
    // set the Content-Security-Policy header
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
    // sets the Content-Disposition header ('inline' or 'attachment')
    contentDispositionType: 'attachment',
    // limit of 25 objects
    localPatterns: [],
    // limit of 50 objects
    remotePatterns: [],
    // limit of 20 integers
    qualities: [25, 50, 75],
    // when true, every image will be unoptimized
    unoptimized: false,
  },
}
```

----------------------------------------

TITLE: Configuring PostCSS for Tailwind CSS - JS
DESCRIPTION: Create a `postcss.config.mjs` file in the project root and add `@tailwindcss/postcss` to the plugins list. This configures PostCSS to process CSS files using the Tailwind plugin.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#_snippet_5

LANGUAGE: js
CODE:
```
/** @type {import('tailwindcss').Config} */
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
}
```

----------------------------------------

TITLE: Disabling ESLint Rules in Next.js (mjs)
DESCRIPTION: This snippet demonstrates how to disable specific ESLint rules within a Next.js project using the `rules` property in the `.eslintrc.mjs` file. It imports `FlatCompat` to handle the configuration and extends the 'next' ESLint configuration. The snippet shows disabling the `react/no-unescaped-entities` and `@next/next/no-page-custom-font` rules.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_4

LANGUAGE: mjs
CODE:
```
import { FlatCompat } from '@eslint/eslintrc'

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

const eslintConfig = [
  ...compat.config({
    extends: ['next'],
    rules: {
      'react/no-unescaped-entities': 'off',
      '@next/next/no-page-custom-font': 'off',
    },
  }),
]

export default eslintConfig
```

----------------------------------------

TITLE: Next.js Page Component (app directory)
DESCRIPTION: Defines a basic Next.js page component using the `app` directory structure. It imports `Link` from `next/link` for navigation. The component renders a heading and a link to the `/about` page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Processing Webhooks in Next.js - TypeScript
DESCRIPTION: This TypeScript snippet provides an implementation for receiving and processing webhooks. It captures the payload and handles errors gracefully, returning appropriate responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
export async function POST(request: Request) {
  try {
    const text = await request.text()
    // Process the webhook payload
  } catch (error) {
    return new Response(`Webhook error: ${error.message}`, {
      status: 400,
    })
  }

  return new Response('Success!', {
    status: 200,
  })
}
```

----------------------------------------

TITLE: Generate Icon using ImageResponse - TSX
DESCRIPTION: Demonstrates how to programmatically generate an application icon in Next.js using the ImageResponse API from next/og. The default exported function creates a React element that is rendered into an image, exporting size and contentType for metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'

// Image metadata
export const size = {
  width: 32,
  height: 32,
}
export const contentType = 'image/png'

// Image generation
export default function Icon() {
  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 24,
          background: 'black',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          color: 'white',
        }}
      >
        A
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported icons size metadata
      // config to also set the ImageResponse's width and height.
      ...size,
    }
  )
}
```

----------------------------------------

TITLE: Using Client Component in Page - TSX
DESCRIPTION: This code imports the `ClientOnly` component and renders it inside the `Page` component. The `generateStaticParams` function ensures static pre-rendering. The `Page` component is now a server component that renders a client component.  The slug is set to [''] to catch all routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
import { ClientOnly } from './client'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return <ClientOnly />
}
```

----------------------------------------

TITLE: Silencing Hydration Warnings with suppressHydrationWarning (React)
DESCRIPTION: Shows the usage of the `suppressHydrationWarning` prop on a standard HTML element within a React component. Adding this boolean prop instructs React to silence hydration mismatch warnings for that specific element and its direct text content, serving as an escape hatch for unavoidable differences like dynamically generated timestamps.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-hydration-error.mdx#_snippet_2

LANGUAGE: JSX
CODE:
```
<time datetime="2016-10-25" suppressHydrationWarning />
```

----------------------------------------

TITLE: Sending HTTP Response in Next.js API Route
DESCRIPTION: Demonstrates handling async operations and sending HTTP responses with status codes in a Next.js API route. Includes error handling with appropriate status codes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const result = await someAsyncOperation()
    res.status(200).send({ result })
  } catch (err) {
    res.status(500).send({ error: 'failed to fetch data' })
  }
}
```

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  try {
    const result = await someAsyncOperation()
    res.status(200).send({ result })
  } catch (err) {
    res.status(500).send({ error: 'failed to fetch data' })
  }
}
```

----------------------------------------

TITLE: Applying Font Styles Using style Object in React Components
DESCRIPTION: Example of applying font styles by using the style object returned from a font loader. This approach provides access to the fontFamily property and fallback fonts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
<p style={inter.style}>Hello World</p>
```

----------------------------------------

TITLE: Defining getStaticPaths with paths and fallback
DESCRIPTION: This code snippet demonstrates the correct structure for the return value of the `getStaticPaths` function in Next.js. It includes the required `paths` array, which contains either strings representing paths or objects with a `params` property, and the `fallback` boolean property. The `paths` property specifies which paths to pre-render and the `fallback` property determines how Next.js handles requests for paths that are not pre-rendered.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-getstaticpaths-value.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export async function getStaticPaths() {
  return {
    paths: Array<string | { params: { [key: string]: string } }>,
    fallback: boolean
  }
}
```

----------------------------------------

TITLE: Configuring Local Patterns in Next.js Config
DESCRIPTION: Example configuration for next.config.js that demonstrates how to properly set up localPatterns for the next/image component. This configuration allows image URLs matching the specified pathname pattern to be processed by the image optimization feature.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-localpatterns.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    localPatterns: [
      {
        pathname: '/assets/**',
        search: '',
      },
    ],
  },
}
```

----------------------------------------

TITLE: User Provider with Context (TypeScript)
DESCRIPTION: This code implements a React Context Provider for managing user data in a Next.js application using TypeScript.  It creates a `UserContext` and a custom hook `useUser` for accessing the context. The `UserProvider` component accepts a `userPromise` prop (a Promise of user data) and makes it available to its children through the context. This pattern enables easier access to the user data from Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
'use client';

import { createContext, useContext, ReactNode } from 'react';

type User = any;
type UserContextType = {
  userPromise: Promise<User | null>;
};

const UserContext = createContext<UserContextType | null>(null);

export function useUser(): UserContextType {
  let context = useContext(UserContext);
  if (context === null) {
    throw new Error('useUser must be used within a UserProvider');
  }
  return context;
}

export function UserProvider({
  children,
  userPromise
}: {
  children: ReactNode;
  userPromise: Promise<User | null>;
}) {
  return (
    <UserContext.Provider value={{ userPromise }}>
      {children}
    </UserContext.Provider>
  );
}
```

----------------------------------------

TITLE: Wildcard Path Matching in Next.js Redirects
DESCRIPTION: This example illustrates how to match wildcard paths using the `*` character in the `source` route. The snippet captures any nested paths and redirects them to a specified `destination`, retaining the matched segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async redirects() {
    return [
      {
        source: '/blog/:slug*',
        destination: '/news/:slug*',
        permanent: true,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Configuring API Route Behavior in Next.js
DESCRIPTION: This snippet shows how to export a config object to customize the behavior of an API route, including body parsing limits and external resolver settings.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
export const config = {
  api: {
    bodyParser: {
      sizeLimit: '1mb',
    },
  },
  // Specifies the maximum allowed duration for this function to execute (in seconds)
  maxDuration: 5,
}
```

----------------------------------------

TITLE: Dynamic Request Routing using Next.js Middleware
DESCRIPTION: This snippet shows how to implement routing logic within a Next.js middleware function. It allows for dynamic decisions based on conditions, such as a feature flag, to conditionally rewrite a request path to a different destination domain. While potentially adding more latency than `rewrites`, this method provides flexibility for staged rollouts or feature-based routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export async function middleware(request) {
  const { pathname, search } = req.nextUrl;
  if (pathname === '/your-path' && myFeatureFlag.isEnabled()) {
    return NextResponse.rewrite(`${rewriteDomain}${pathname}${search});
  }
}
```

----------------------------------------

TITLE: Setting Quality Property on Next.js Image Component
DESCRIPTION: Example of setting the quality property on a Next.js Image component. The quality property accepts a number from 1 to 100 and determines the quality of the optimized image.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
quality={75} // {number 1-100}
```

----------------------------------------

TITLE: Caching Entire Route Page (TSX)
DESCRIPTION: Applies the `'use cache'` directive at the top of a Next.js App Router `page.tsx` file. This marks the page segment for prerendering and is necessary, along with a cached layout, to cache an entire route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_6

LANGUAGE: TSX
CODE:
```
'use cache'

export default function Layout({ children }) {
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Reading Cookies in Next.js API Route (TypeScript)
DESCRIPTION: This code snippet demonstrates how to read cookies within a Next.js API route using TypeScript. It imports necessary types from 'next', defines an asynchronous handler function, accesses the 'authorization' cookie from the request's cookies object, and uses it. The handler function takes a NextApiRequest and NextApiResponse as arguments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_14

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const auth = req.cookies.authorization
  // ...
}
```

----------------------------------------

TITLE: Regex Path Matching in Next.js Redirects
DESCRIPTION: This snippet demonstrates how to apply regex to paths for redirects in Next.js, allowing paths to be matched based on specific patterns. The use of regex enables more control over which paths trigger the redirect.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async redirects() {
    return [
      {
        source: '/post/:slug(\\d{1,})',
        destination: '/news/:slug',
        permanent: false,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Checking Cookie Existence with NextRequest
DESCRIPTION: This snippet demonstrates how to check if a cookie exists using the `has` method of the `request.cookies` object in Next.js. It checks if the cookie named 'experiments' exists.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// Returns true if cookie exists, false if it does not
request.cookies.has('experiments')
```

----------------------------------------

TITLE: Configuring Remote Image Patterns in Next.js
DESCRIPTION: Shows how to configure allowed remote image patterns in next.config.js. This example demonstrates setting up a specific AWS S3 bucket as an allowed image source.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_3

LANGUAGE: ts
CODE:
```
import { NextConfig } from 'next'

const config: NextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**',
        search: '',
      },
    ],
  },
}

export default config
```

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**',
        search: '',
      },
    ],
  },
}
```

----------------------------------------

TITLE: Incorrect Dynamic Import Options - Before
DESCRIPTION: This code demonstrates the incorrect way to pass options to the `next/dynamic` function in Next.js. The options are stored in a variable and then passed, which is invalid. This results in an error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-dynamic-options-type.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const options = { loading: () => <p>...</p>, ssr: false }
const DynamicComponent = dynamic(() => import('../components/hello'), options)
```

----------------------------------------

TITLE: Complete Blog Post Example with getStaticPaths
DESCRIPTION: Full example of implementing getStaticPaths and getStaticProps for a blog post page, including fetching posts from an API and generating static paths.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
function Post({ post }) {
  // Render post...
}

// This function gets called at build time
export async function getStaticPaths() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to pre-render based on posts
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return { props: { post } }
}

export default Post
```

----------------------------------------

TITLE: Creating a Basic Custom Document in Next.js
DESCRIPTION: A minimal implementation of a custom Document component that extends the default HTML document markup. It includes the required Html, Head, Main, and NextScript components from next/document.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/06-custom-document.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
```

----------------------------------------

TITLE: Invoking Server Action with useEffect on Mount (View Count)
DESCRIPTION: Shows how to trigger a Next.js Server Action (`incrementViews`) using React's `useEffect` hook. The action is invoked when the component mounts (due to an empty dependency array `[]`) to update a view count, and the component state (`useState`) is updated with the result.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_23

LANGUAGE: tsx
CODE:
```
'use client'

import { incrementViews } from './actions'
import { useState, useEffect } from 'react'

export default function ViewCount({ initialViews }: { initialViews: number }) {
  const [views, setViews] = useState(initialViews)

  useEffect(() => {
    const updateViews = async () => {
      const updatedViews = await incrementViews()
      setViews(updatedViews)
    }

    updateViews()
  }, [])

  return <p>Total Views: {views}</p>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { incrementViews } from './actions'
import { useState, useEffect } from 'react'

export default function ViewCount({ initialViews }) {
  const [views, setViews] = useState(initialViews)

  useEffect(() => {
    const updateViews = async () => {
      const updatedViews = await incrementViews()
      setViews(updatedViews)
    }

    updateViews()
  }, [])

  return <p>Total Views: {views}</p>
}
```

----------------------------------------

TITLE: Deleting a Cookie with NextRequest
DESCRIPTION: This snippet demonstrates how to delete a cookie using the `delete` method of the `request.cookies` object in Next.js. It deletes the cookie named 'experiments'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// Returns true for deleted, false is nothing is deleted
request.cookies.delete('experiments')
```

----------------------------------------

TITLE: Disabling Scroll on Router Push (App Router)
DESCRIPTION: Demonstrates how to disable the default scrolling behavior when using `router.push()` or `router.replace()` in the App Router by providing the `scroll: false` option within the options object argument. This gives programmatic control over scroll on navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_18

LANGUAGE: JSX
CODE:
```
// useRouter
import { useRouter } from 'next/navigation'

const router = useRouter()

router.push('/dashboard', { scroll: false })
```

----------------------------------------

TITLE: Migrating Head Management from next/head to Metadata Export (pages to app)
DESCRIPTION: Compares how HTML `<head>` elements like the title are managed in the `pages` directory using `next/head` (Before) versus the `app` directory using the static `metadata` object export (After). The `app` directory approach offers built-in SEO support.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import Head from 'next/head'

export default function Page() {
  return (
    <>
      <Head>
        <title>My page title</title>
      </Head>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Head from 'next/head'

export default function Page() {
  return (
    <>
      <Head>
        <title>My page title</title>
      </Head>
    </>
  )
}
```

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My Page Title',
}

export default function Page() {
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'My Page Title',
}

export default function Page() {
  return '...'
}
```

----------------------------------------

TITLE: Installing Latest Next.js Version for App Router - Bash
DESCRIPTION: This command ensures that your Next.js project is updated to version 13.4 or greater, which is required to create and use the new `app` directory and the App Router features.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npm install next@latest
```

----------------------------------------

TITLE: Generating robots.txt with default rules (JavaScript)
DESCRIPTION: Demonstrates how to dynamically generate a `robots.txt` file by exporting a function from `app/robots.js`. The function returns a `Robots` object with default rules for all user agents, allowing access except for `/private/`, and includes a sitemap URL. This is the JavaScript equivalent of the TypeScript example.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#_snippet_2

LANGUAGE: js
CODE:
```
export default function robots() {
  return {
    rules: {
      userAgent: '*',
      allow: '/',
      disallow: '/private/',
    },
    sitemap: 'https://acme.com/sitemap.xml',
  }
}
```

----------------------------------------

TITLE: Running Jest tests using npm, yarn, or pnpm
DESCRIPTION: These are example commands which can be used to run the tests using `npm`, `yarn`, or `pnpm`.  The correct command depends on which package manager is used for the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_22

LANGUAGE: bash
CODE:
```
npm run test
# or
yarn test
# or
pnpm test
```

----------------------------------------

TITLE: Updated Next.js Middleware Using URLPattern
DESCRIPTION: Modern implementation using URLPattern API to handle URL parameter extraction and redirection. Includes pattern matching for locale and slug parameters with a more flexible approach.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-request-page.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

const PATTERNS = [
  [
    new URLPattern({ pathname: '/:locale/:slug' }),
    ({ pathname }) => pathname.groups,
  ],
]

const params = (url) => {
  const input = url.split('?')[0]
  let result = {}

  for (const [pattern, handler] of PATTERNS) {
    const patternResult = pattern.exec(input)
    if (patternResult !== null && 'pathname' in patternResult) {
      result = handler(patternResult)
      break
    }
  }
  return result
}

export function middleware(request: NextRequest) {
  const { locale, slug } = params(request.url)

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}
```

----------------------------------------

TITLE: Embedding Self-Hosted Video with <video> Tag - JSX
DESCRIPTION: This code snippet demonstrates how to embed a self-hosted video using the HTML5 `<video>` tag within a Next.js application. It includes attributes for width, height, controls, preload, source path, and captions via the `<track>` element.  The example uses JSX syntax, typical in React and Next.js components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
export function Video() {
  return (
    <video width="320" height="240" controls preload="none">
      <source src="/path/to/video.mp4" type="video/mp4" />
      <track
        src="/path/to/captions.vtt"
        kind="subtitles"
        srcLang="en"
        label="English"
      />
      Your browser does not support the video tag.
    </video>
  )
}
```

----------------------------------------

TITLE: Wrapping Dynamic Component in Suspense for PPR (TSX)
DESCRIPTION: Demonstrates wrapping the dynamic `User` component with `React.Suspense` within a PPR-enabled page (`experimental_ppr = true`). This allows the static parts of the page to be prerendered while the dynamic `User` component's content is streamed later, showing a `AvatarSkeleton` fallback initially.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_7

LANGUAGE: TSX
CODE:
```
import { Suspense } from 'react'
import { User, AvatarSkeleton } from './user'

export const experimental_ppr = true

export default function Page() {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Suspense fallback={<AvatarSkeleton />}>
        <User />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Configuring SWR Fallback with SWRConfig in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure SWR's fallback data using the SWRConfig component in a Next.js application using JavaScript. The getUser() function, assumed to be a server-side function, is used to pre-populate the SWR cache with user data for the '/api/user' key. This allows client components to immediately access the data without an initial loading state. The component reading this data will suspend.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import { SWRConfig } from 'swr'
import { getUser } from './user' // some server-side function

export default function RootLayout({ children }) {
  return (
    <SWRConfig
      value={{
        fallback: {
          // We do NOT await getUser() here
          // Only components that read this data will suspend
          '/api/user': getUser(),
        },
      }}
    >
      {children}
    </SWRConfig>
  )
}
```

----------------------------------------

TITLE: Next.js Phase-based Configuration
DESCRIPTION: Shows how to create different configurations based on the build phase using next/constants.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
// @ts-check

const { PHASE_DEVELOPMENT_SERVER } = require('next/constants')

module.exports = (phase, { defaultConfig }) => {
  if (phase === PHASE_DEVELOPMENT_SERVER) {
    return {
      /* development only config options here */
    }
  }

  return {
    /* config options for all phases except development here */
  }
}
```

----------------------------------------

TITLE: Using notFound in getStaticProps (JavaScript)
DESCRIPTION: This code snippet shows how to use the `notFound` property in `getStaticProps` to return a 404 page if the data is not found. It fetches data from an API and, if the response is empty, returns `notFound: true`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
export async function getStaticProps(context) {
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  if (!data) {
    return {
      notFound: true,
    }
  }

  return {
    props: { data }, // will be passed to the page component as props
  }
}
```

----------------------------------------

TITLE: JavaScript Configuration with JSDoc Types
DESCRIPTION: Demonstrates how to add TypeScript checking to next.config.js using JSDoc annotations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// @ts-check

/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Asynchronous Params Access in Next.js Component (Correct Implementation)
DESCRIPTION: Example showing the correct way to handle params and searchParams asynchronously in a Next.js component
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
// This component ends up being the Page component even though it is defined outside of
// page.js due to how it is reexported in page.js
export default async function ComponentThatWillBeExportedAsPage({ params, searchParams }) {
  const { slug } = await params;
  const { page } = await searchParams
  return <RenderList slug={slug} page={page}>
}
```

----------------------------------------

TITLE: Passing Server Action Through Next.js Cache Component
DESCRIPTION: Illustrates the pattern for defining a Server Action (`performUpdate`) in a Server Component (`Page`) and passing its reference through a cached component (`CachedComponent`, marked `'use cache'`) to a Client Component (`ClientComponent`). The crucial point is that the cached component only forwards the action reference and does not invoke the action itself.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
import ClientComponent from './ClientComponent'

export default async function Page() {
  const performUpdate = async () => {
    'use server'
    // Perform some server-side update
    await db.update(...)
  }

  return <CacheComponent performUpdate={performUpdate} />
}

async function CachedComponent({
  performUpdate,
}: {
  performUpdate: () => Promise<void>
}) {
  'use cache'
  // Do not call performUpdate here
  return <ClientComponent action={performUpdate} />
}
```

LANGUAGE: jsx
CODE:
```
import ClientComponent from './ClientComponent'

export default async function Page() {
  const performUpdate = async () => {
    'use server'
    // Perform some server-side update
    await db.update(...)
  }

  return <CacheComponent performUpdate={performUpdate} />
}

async function CachedComponent({ performUpdate }) {
  'use cache'
  // Do not call performUpdate here
  return <ClientComponent action={performUpdate} />
}
```

----------------------------------------

TITLE: Handling Web Vitals Metrics by Name (App Router, TSX)
DESCRIPTION: This TypeScript code snippet shows how to handle specific web vital metrics by their `name` property using a switch statement inside the `useReportWebVitals` hook within the App Router in Next.js. It handles First Contentful Paint (FCP) and Largest Contentful Paint (LCP) metrics as examples.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    switch (metric.name) {
      case 'FCP': {
        // handle FCP results
      }
      case 'LCP': {
        // handle LCP results
      }
      // ...
    }
  })
}
```

----------------------------------------

TITLE: Asynchronous Data Fetching in TypeScript Route Handlers
DESCRIPTION: This TypeScript snippet for route handlers showcases a shift from handling non-promise params to promise-based params. It enhances the `GET` function to asynchronously process URL parameters using `await`, ensuring that the route data is fetched and processed correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
type Params = { slug: string }\n\nexport async function GET(request: Request, segmentData: { params: Params }) {\n  const params = segmentData.params\n  const slug = params.slug\n}\n\n// After\ntype Params = Promise<{ slug: string }>\n\nexport async function GET(request: Request, segmentData: { params: Params }) {\n  const params = await segmentData.params\n  const slug = params.slug\n}
```

----------------------------------------

TITLE: Using NextRequest in Route Handlers
DESCRIPTION: Demonstrates how to use the NextRequest object in a Route Handler, which is an extension of the Web Request API that provides additional functionality like access to cookies and an extended URL object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const url = request.nextUrl
}
```

LANGUAGE: javascript
CODE:
```
export async function GET(request) {
  const url = request.nextUrl
}
```

----------------------------------------

TITLE: Configuring Next.js Middleware with Regex Path Exclusions
DESCRIPTION: Example showing how to use regex patterns in middleware configuration to exclude specific paths from middleware execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|favicon.ico).*)',
  ],
}
```

----------------------------------------

TITLE: Demonstrating Request Data Access in Static Metadata (TSX)
DESCRIPTION: Illustrates a Next.js `generateMetadata` function that accesses Request data (cookies) in a route where the main `Page` component renders static content. This scenario violates the `dynamicIO` constraint for static routes and causes the error. Requires `next/headers` for `cookies()`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-metadata.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'
import { getPersonalizedTitle } from './my-api'

export async function generateMetadata() {
  // In this example, we are assuming we must fetch our title
  // from a protected external API. While the response is potentially
  // cacheable, the it still requires accessing a token from the Request cookies.
  const token = (await cookies()).get('token')
  const response = await getPersonalizedTitle(token)
  return {
    title: getTitle(response),
  }
}

export default function Page() {
  return <article>This article is completely static</article>
}
```

----------------------------------------

TITLE: Setting DatoCMS API Token and Preview Secret in .env.local
DESCRIPTION: This example shows the required format for setting the environment variables in the .env.local file, which includes the DatoCMS API token and the preview secret. These values are necessary to properly connect the application to DatoCMS and enable preview mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
DATOCMS_API_TOKEN=...
DATOCMS_PREVIEW_SECRET=...
```

----------------------------------------

TITLE: Using Local Fonts with Next.js Font Module
DESCRIPTION: Shows how to use local fonts with the next/font/local module. This example demonstrates importing and applying a local font file to the root layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images-and-fonts.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import localFont from 'next/font/local'

const myFont = localFont({
  src: './my-font.woff2',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={myFont.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import localFont from 'next/font/local'

const myFont = localFont({
  src: './my-font.woff2',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={myFont.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Upgrading React and React DOM using Yarn
DESCRIPTION: This command adds the latest versions of React and React DOM to your project using Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-version.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn add react@latest react-dom@latest
```

----------------------------------------

TITLE: Converting React Class Component to Function Component in Next.js
DESCRIPTION: This snippet shows how to refactor a React Class Component into a Function Component to comply with Server Component restrictions in Next.js. The Function Component does not require state management and renders directly without lifecycle methods.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/class-component-in-server-component.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
```jsx filename="app/page.js"
export default function Page() {
  return <p>Hello world</p>
}
```
```

----------------------------------------

TITLE: Configuring Path Alias for Font Definitions in tsconfig.json
DESCRIPTION: JSON configuration for setting up a path alias to make importing font definitions easier across the application. This creates an @/fonts shortcut to the fonts file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "paths": {
      "@/fonts": ["./styles/fonts"]
    }
  }
}
```

----------------------------------------

TITLE: Implementing PPR in TypeScript Page Component
DESCRIPTION: TypeScript example showing how to implement PPR in a Next.js page component with static and dynamic content using Suspense
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/ppr.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { Suspense } from "react"
import { StaticComponent, DynamicComponent, Fallback } from "@/app/ui"

export const experimental_ppr = true

export default function Page() {
  return {
     <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
     </>
  };
}
```

----------------------------------------

TITLE: Configuring Bitbucket Pipelines Cache for Next.js Builds
DESCRIPTION: This YAML configuration for Bitbucket Pipelines defines a custom cache for the Next.js cache directory and references it in the pipeline step along with the node cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_5

LANGUAGE: yaml
CODE:
```
definitions:
  caches:
    nextcache: .next/cache
```

LANGUAGE: yaml
CODE:
```
- step:
    name: your_step_name
    caches:
      - node
      - nextcache
```

----------------------------------------

TITLE: Overwriting Encryption Key in Next.js
DESCRIPTION: This snippet shows how to set the persistent encryption key for Next.js Server Actions using an environment variable. Ensure that the key is AES-GCM encrypted to maintain security across multiple server instances.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/failed-to-find-server-action.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY = 'your-aes-gcm-encrypted-key';
```

----------------------------------------

TITLE: Importing MDX File App Router Javascript
DESCRIPTION: Demonstrates how to import an `.mdx` file (`Welcome`) into a standard Next.js App Router page component written in JavaScript and render it by returning the imported component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
import Welcome from '@/markdown/welcome.mdx'

export default function Page() {
  return <Welcome />
}
```

----------------------------------------

TITLE: Correct Implementation with Next.js Connection and Suspense
DESCRIPTION: Fixed implementation that properly handles random value generation using connection() function and Suspense boundary to defer randomization until runtime.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-random.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

async function ProductsSkeleton() {
  ...
}

export default async function Page() {
  const products = await getCachedProducts();
  return <Suspense fallback={<ProductsSkeleton />}>
    <DynamicProductsView products={products} />
  </Suspense>
}

async function DynamicProductsView() {
  await connection();
  const randomSeed = Math.random()
  const randomizedProducts = randomize(products, randomSeed)
  return <ProductsView products={randomizedProducts} />
}
```

----------------------------------------

TITLE: Enabling Draft Mode in Next.js Route Handler (JavaScript)
DESCRIPTION: This code snippet shows how to enable Draft Mode in a Next.js Route Handler using JavaScript. It imports `draftMode` from `next/headers`, calls `draft.enable()` to enable Draft Mode, and returns a response indicating that Draft Mode is enabled. It requires the `next` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
import { draftMode } from 'next/headers'

export async function GET(request) {
  const draft = await draftMode()
  draft.enable()
  return new Response('Draft mode is enabled')
}
```

----------------------------------------

TITLE: Outputting Open Graph Image Alt Meta Tag - HTML
DESCRIPTION: Illustrates the HTML <head> meta tag generated by Next.js when an opengraph-image.alt.txt file is used. The content of the tag's 'content' attribute is taken directly from the text file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_3

LANGUAGE: HTML
CODE:
```
<meta property="og:image:alt" content="About Acme" />
```

----------------------------------------

TITLE: Generating Next.js Web Manifest Dynamically (JavaScript)
DESCRIPTION: This JavaScript code snippet shows how to create a dynamic manifest file in Next.js using a function in `app/manifest.js`. Similar to the TypeScript version, this function returns an object containing the manifest properties. It serves as a special Route Handler that is cached by default unless it interacts with dynamic APIs or configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/manifest.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
export default function manifest() {
  return {
    name: 'Next.js App',
    short_name: 'Next.js App',
    description: 'Next.js App',
    start_url: '/',
    display: 'standalone',
    background_color: '#fff',
    theme_color: '#fff',
    icons: [
      {
        src: '/favicon.ico',
        sizes: 'any',
        type: 'image/x-icon',
      },
    ],
  }
}
```

----------------------------------------

TITLE: Next.js Function-based Configuration
DESCRIPTION: Shows how to use a function to create dynamic Next.js configuration based on build phase.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// @ts-check

export default (phase, { defaultConfig }) => {
  /**
   * @type {import('next').NextConfig}
   */
  const nextConfig = {
    /* config options here */
  }
  return nextConfig
}
```

----------------------------------------

TITLE: Running Next.js Codemod Transformations
DESCRIPTION: Command to run Next.js codemod transformations in a project directory. It takes the transform name and path as arguments, with optional flags for dry-run and output printing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npx @next/codemod <transform> <path>
```

----------------------------------------

TITLE: Enable Partial Prerendering (PPR) in Next.js (TSX/JS)
DESCRIPTION: This snippet shows how to enable the experimental Partial Prerendering (PPR) feature for a Next.js layout or page by exporting the `experimental_ppr` boolean variable. Set to `true` to enable PPR, or `false` to disable it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const experimental_ppr = true
// true | false
```

LANGUAGE: JavaScript
CODE:
```
export const experimental_ppr = true
// true | false
```

----------------------------------------

TITLE: Handling Script Loading Errors with onError in Next.js (App Router) - TSX
DESCRIPTION: This code shows how to use the `onError` property of the `next/script` component to handle script loading errors within a Next.js application using the App Router.  It logs the error to the console when the script fails to load.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
'use client'

import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://example.com/script.js"
        onError={(e: Error) => {
          console.error('Script failed to load', e)
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Inheriting Metadata Fields Example (JSX)
DESCRIPTION: Shows how metadata fields are inherited down the route segments. If a child segment (app/about/page.js) does not define a specific field (like `openGraph`), it inherits the value defined in the closest parent segment (app/layout.js). Fields defined in the child (like `title`) still override the parent's definition.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Acme',
  openGraph: {
    title: 'Acme',
    description: 'Acme is a...',0
  },
};
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'About',
};
```

----------------------------------------

TITLE: Getting All Cookies - JS
DESCRIPTION: This snippet illustrates how to retrieve all cookies with a matching name in a Next.js page component. It returns each cookie's name and value in a list format when the cookie store is accessed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  return cookieStore.getAll().map((cookie) => (
    <div key={cookie.name}>
      <p>Name: {cookie.name}</p>
      <p>Value: {cookie.value}</p>
    </div>
  ))
}
```

----------------------------------------

TITLE: Configuring Static Generation Options in Next.js TypeScript
DESCRIPTION: TypeScript configuration for Next.js static generation settings including retry count, max concurrency, and minimum pages per worker. Requires Next.js and uses the experimental configuration options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/staticGeneration.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    staticGenerationRetryCount: 1,
    staticGenerationMaxConcurrency: 8,
    staticGenerationMinPagesPerWorker: 25,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Configuring Site Verification Metadata in Next.js (JSX & HTML)
DESCRIPTION: Configures metadata for site verification services like Google, Yandex, and Yahoo, as well as custom verification methods using the `metadata.verification` property. This generates the necessary `<meta>` tags for verifying site ownership with search engines.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_20

LANGUAGE: JSX
CODE:
```
export const metadata = {
  verification: {
    google: 'google',
    yandex: 'yandex',
    yahoo: 'yahoo',
    other: {
      me: ['my-email', 'my-link'],
    },
  },
}
```

LANGUAGE: HTML
CODE:
```
<meta name="google-site-verification" content="google" />
<meta name="y_key" content="yahoo" />
<meta name="yandex-verification" content="yandex" />
<meta name="me" content="my-email" />
<meta name="me" content="my-link" />
```

----------------------------------------

TITLE: Generating Next.js Web Manifest Dynamically (TypeScript)
DESCRIPTION: This TypeScript code snippet demonstrates how to create a dynamic manifest file in Next.js by defining an asynchronous function in `app/manifest.ts`. The function returns an object conforming to the `MetadataRoute.Manifest` type, allowing for programmatic generation of manifest properties. This approach is cached by default unless dynamic features are used.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/manifest.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import type { MetadataRoute } from 'next'

export default function manifest(): MetadataRoute.Manifest {
  return {
    name: 'Next.js App',
    short_name: 'Next.js App',
    description: 'Next.js App',
    start_url: '/',
    display: 'standalone',
    background_color: '#fff',
    theme_color: '#fff',
    icons: [
      {
        src: '/favicon.ico',
        sizes: 'any',
        type: 'image/x-icon',
      },
    ],
  }
}
```

----------------------------------------

TITLE: Using the New UserAgent Helper in Next.js Middleware
DESCRIPTION: Migration from using the integrated user agent on the request object to the new dedicated userAgent helper. This change reduces middleware size by 17kb by making user agent parsing opt-in.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'
  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse, userAgent } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const { device } = userAgent(request)
  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'
  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Running Jest Tests using npm
DESCRIPTION: This snippet illustrates how to run the Jest tests in the created Next.js application using npm. The command will trigger the Jest testing framework and output the test results. Ensure that Jest is properly configured in the project before running the command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm test
```

----------------------------------------

TITLE: Fetching Data with SWR in Next.js
DESCRIPTION: This snippet illustrates how to use the SWR data-fetching library in a Next.js page. It manages loading and error states simply, providing a cleaner approach to client-side data fetching while improving performance through caching and revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/05-client-side-rendering.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import useSWR from 'swr'

export function Page() {
  const { data, error, isLoading } = useSWR(
    'https://api.example.com/data',
    fetcher
  )

  if (error) return <p>Failed to load.</p>
  if (isLoading) return <p>Loading...</p>

  return <p>Your Data: {data}</p>
}

```

----------------------------------------

TITLE: Manually Passing Rewrite Parameters in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to manually include parameters from the `source` path in the query string of the `destination`, even if other parameters are already used in the destination path itself. The example maps `/:first/:second` to `/:first?second=:second`, explicitly adding `:second` to the query.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/:first/:second',
        destination: '/:first?second=:second',
        // Since the :first parameter is used in the destination the :second parameter
        // will not automatically be added in the query although we can manually add it
        // as shown above
      },
    ]
  },
}
```

----------------------------------------

TITLE: Defining generateImageMetadata with Params (JSX)
DESCRIPTION: This code snippet shows how to define the `generateImageMetadata` function in JavaScript, including an optional `params` argument. The `params` object contains dynamic route parameters from the root segment down to the segment where `generateImageMetadata` is called.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export function generateImageMetadata({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Handling Custom Next.js Metrics in Pages Router
DESCRIPTION: This example shows how to process Next.js-specific custom metrics like `Next.js-hydration`, `Next.js-route-change-to-render`, and `Next.js-render` using a `switch` statement in the `useReportWebVitals` callback within `pages/_app.js`. This enables tracking performance aspects unique to the Next.js rendering and hydration process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { useReportWebVitals } from 'next/web-vitals'

function MyApp({ Component, pageProps }) {
  useReportWebVitals((metric) => {
    switch (metric.name) {
      case 'Next.js-hydration':
        // handle hydration results
        break
      case 'Next.js-route-change-to-render':
        // handle route-change to render results
        break
      case 'Next.js-render':
        // handle render results
        break
      default:
        break
    }
  })

  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: Creating Cache Tags from External Data in TypeScript
DESCRIPTION: Details using fetched data to create dynamic cache tags in a TypeScript class. It demonstrates associating 'bookings-data' and data properties as cache tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { unstable_cacheTag as cacheTag } from 'next/cache'

interface BookingsProps {
  type: string
}

export async function Bookings({ type = 'haircut' }: BookingsProps) {
  async function getBookingsData() {
    'use cache'
    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)
    cacheTag('bookings-data', data.id)
    return data
  }
  return //...
}
```

----------------------------------------

TITLE: Page Component (App Router)
DESCRIPTION: A simple Next.js component utilizing the app router which renders a heading and a link. This is tested in the accompanying test snippet. Located in app/page.js
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_19

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Robots object type definition (TypeScript/TSX)
DESCRIPTION: Defines the TypeScript type signature for the `Robots` object expected when dynamically generating `robots.txt`. It details the structure of the `rules` property (single object or array) and includes optional `sitemap` and `host` properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
type Robots = {
  rules:
    | {
        userAgent?: string | string[]
        allow?: string | string[]
        disallow?: string | string[]
        crawlDelay?: number
      }
    | Array<{
        userAgent: string | string[]
        allow?: string | string[]
        disallow?: string | string[]
        crawlDelay?: number
      }>
  sitemap?: string | string[]
  host?: string
}
```

----------------------------------------

TITLE: Configuring Next.js Fallback Rewrites (JavaScript)
DESCRIPTION: This snippet illustrates how to set up a fallback rewrite rule that catches requests that do not match any other Next.js routes or configured rewrites. By returning an object with a 'fallback' array, you define rules that are only checked as a last resort, typically used to proxy remaining paths to an existing application for incremental adoption.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async rewrites() {
    return {
      fallback: [
        {
          source: '/:path*',
          destination: `https://custom-routes-proxying-endpoint.vercel.app/:path*`,
        },
      ],
    }
  },
}
```

----------------------------------------

TITLE: Initializing Google Tag Manager in App Router (JSX)
DESCRIPTION: This code snippet demonstrates how to include the `GoogleTagManager` component within the root layout of a Next.js application using the App Router with JavaScript.  It imports the component from `@next/third-parties/google` and passes the GTM container ID via the `gtmId` prop. This ensures GTM is loaded on all routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { GoogleTagManager } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <GoogleTagManager gtmId="GTM-XYZ" />
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Illustrating Relative vs Absolute Imports in JSX
DESCRIPTION: This snippet demonstrates the difference between a relative import using multiple `../` characters and a cleaner absolute import using a configured path alias, making code more readable and maintainable.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
// Before
import { Button } from '../../../components/button'

// After
import { Button } from '@/components/button'
```

----------------------------------------

TITLE: Install Next.js dependency in Terminal
DESCRIPTION: This command installs the latest version of Next.js in the existing project. It adds Next.js as a dependency to the project, enabling the use of Next.js features and functionalities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_0

LANGUAGE: Terminal
CODE:
```
npm install next@latest
```

----------------------------------------

TITLE: Creating Next.js App with TypeScript (pnpm)
DESCRIPTION: This command initializes a new Next.js application using the `create-next-app` tool with the TypeScript example. It leverages pnpm to create a project named `with-typescript-app` based on the specified example.  This command is executed in the terminal.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-typescript with-typescript-app
```

----------------------------------------

TITLE: RootLayout Component with Metadata (Optimized) - TSX
DESCRIPTION: This code defines the optimized RootLayout component after moving the static assets like favicon into the `app` directory. The `<link>` tag for the favicon is removed. The component receives `children` as a prop and renders them within the HTML structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Caching Dynamic Pages with getServerSideProps (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to set HTTP `Cache-Control` headers on the response object (`context.res`) within a `getServerSideProps` function. It includes directives like `s-maxage` and `stale-while-revalidate` to manage the caching behavior of server-rendered pages, allowing for fresh data on subsequent requests while serving stale data immediately.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_11

LANGUAGE: ts
CODE:
```
import { GetStaticProps, GetStaticPaths, GetServerSideProps } from 'next'

// This value is considered fresh for ten seconds (s-maxage=10).
// If a request is repeated within the next 10 seconds, the previously
// cached value will still be fresh. If the request is repeated before 59 seconds,
// the cached value will be stale but still render (stale-while-revalidate=59).
//
// In the background, a revalidation request will be made to populate the cache
// with a fresh value. If you refresh the page, you will see the new value.
export const getServerSideProps = (async (context) => {
  context.res.setHeader(
    'Cache-Control',
    'public, s-maxage=10, stale-while-revalidate=59'
  )

  return {
    props: {},
  }
}) satisfies GetServerSideProps
```

----------------------------------------

TITLE: Handling Undefined Props in Next.js Pages Router
DESCRIPTION: Shows how to handle undefined props and missing data in the getStaticProps function for the Pages Router. It includes a conditional check to return a 404 page if data is not found.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
export async function getStaticProps(context) {
  const data = await fetchData(context.params.id)
  if (!data) {
    return {
      notFound: true,
    }
  }
  return {
    props: { data },
  }
}
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the 'with-prefetching' example. It creates a directory named 'with-prefetching-app' containing the project files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-prefetching/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-prefetching with-prefetching-app
```

----------------------------------------

TITLE: Using External Data with generateImageMetadata (TSX)
DESCRIPTION: This example shows how to use the `params` object and fetch external data to generate Open Graph images.  It uses `getOGImages` and `getCaptionForImage` to retrieve image data and caption for dynamic routes.  It returns the image metadata with `id`, `size`, `alt`, and `contentType`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'
import { getCaptionForImage, getOGImages } from '@/app/utils/images'

export async function generateImageMetadata({
  params,
}: {
  params: { id: string }
}) {
  const images = await getOGImages(params.id)

  return images.map((image, idx) => ({
    id: idx,
    size: { width: 1200, height: 600 },
    alt: image.text,
    contentType: 'image/png',
  }))
}

export default async function Image({
  params,
  id,
}: {
  params: { id: string }
  id: number
}) {
  const productId = (await params).id
  const imageId = id
  const text = await getCaptionForImage(productId, imageId)

  return new ImageResponse(
    (
      <div
        style={
          {
            // ...
          }
        }
      >
        {text}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Disabling Prefetching with Link (App Router)
DESCRIPTION: This snippet shows how to disable prefetching for a Next.js Link component in the App Router by setting the `prefetch` prop to `false`. Prefetching usually loads linked routes and data in the background to improve navigation performance, but this can be explicitly turned off.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link href="/dashboard" prefetch={false}>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link href="/dashboard" prefetch={false}>
      Dashboard
    </Link>
  )
}
```

----------------------------------------

TITLE: Importing Global Stylesheet in Root Layout (App Router - TSX)
DESCRIPTION: This TypeScript code imports the global stylesheet to apply Tailwind CSS styles to every route in the Next.js application. It defines the root layout component with metadata and imports the globals.css file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
"import type { Metadata } from 'next'

// These styles apply to every route in the application
import './globals.css'

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}"
```

----------------------------------------

TITLE: Initializing OpenTelemetry with Next.js (TypeScript)
DESCRIPTION: This code snippet demonstrates how to initialize OpenTelemetry in a Next.js application using the `@vercel/otel` package.  It imports the `registerOTel` function and calls it within the `register` function exported from `instrumentation.ts`. This function is executed once when the Next.js server starts.  The `registerOTel` function takes a service name as input. Requires the `@vercel/otel` package to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}
```

----------------------------------------

TITLE: Client Component with SWR for Data Fetching
DESCRIPTION: This code illustrates using a Client Component with SWR for client-side data fetching. It imports `useSWR` and defines a `fetcher` function. The `useSWR` hook fetches data from an API endpoint and handles loading and error states.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'

import useSWR from 'swr'

const fetcher = (url: string) => fetch(url).then((r) => r.json())

export default function Page() {
  const { data, error } = useSWR(
    `https://jsonplaceholder.typicode.com/posts/1`,
    fetcher
  )
  if (error) return 'Failed to load'
  if (!data) return 'Loading...'

  return data.title
}
```

----------------------------------------

TITLE: Creating Next.js app with dynamic-import example (pnpm)
DESCRIPTION: This command uses `create next-app` with pnpm to create a new Next.js application based on the `with-dynamic-import` example. It creates a directory named `with-dynamic-import-app` containing the new project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-dynamic-import/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-dynamic-import with-dynamic-import-app
```

----------------------------------------

TITLE: Configuring VS Code for Next.js Debugging
DESCRIPTION: This snippet provides a configuration file (launch.json) for VS Code, enabling debugging for Next.js applications on both the client and server sides. It includes configurations for Chrome, Firefox, and full-stack debugging, allowing developers to step through code and inspect variables during runtime. The configurations specify the debug type, request type, URL, and command to run the development server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Next.js: debug server-side",
      "type": "node-terminal",
      "request": "launch",
      "command": "npm run dev"
    },
    {
      "name": "Next.js: debug client-side",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000"
    },
    {
      "name": "Next.js: debug client-side (Firefox)",
      "type": "firefox",
      "request": "launch",
      "url": "http://localhost:3000",
      "reAttach": true,
      "pathMappings": [
        {
          "url": "webpack://_N_E",
          "path": "${workspaceFolder}"
        }
      ]
    },
    {
      "name": "Next.js: debug full stack",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/node_modules/next/dist/bin/next",
      "runtimeArgs": ["--inspect"],
      "skipFiles": ["<node_internals>/**"],
      "serverReadyAction": {
        "action": "debugWithEdge",
        "killOnServerStop": true,
        "pattern": "- Local:.+(https?://.+)",
        "uriFormat": "%s",
        "webRoot": "${workspaceFolder}"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Replacing `@next/font` Imports in JavaScript Applications
DESCRIPTION: This simple code change focuses on updating import paths from the deprecated `@next/font` to the new `next/font`, reflecting changes in the Next.js framework. This ensures continued functionality and access to the latest features provided by Next.js without breaking existing imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_13

LANGUAGE: js
CODE:
```
// Before\nimport { Inter } from '@next/font/google'\n\n// After\nimport { Inter } from 'next/font/google'
```

----------------------------------------

TITLE: Tab Groups Layout in Typescript
DESCRIPTION: This code snippet demonstrates how to create tab groups using Parallel Routes and a layout within a slot. It defines a layout component with navigation links to different subpages within the `@analytics` slot.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import Link from 'next/link'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <nav>
        <Link href="/page-views">Page Views</Link>
        <Link href="/visitors">Visitors</Link>
      </nav>
      <div>{children}</div>
    </>
  )
}
```

----------------------------------------

TITLE: Upgrading Next.js to Stable Release using bun
DESCRIPTION: This command upgrades Next.js to the latest stable release using bun package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
bun add next@latest
```

----------------------------------------

TITLE: Defining MDX Components with useMDXComponents in TypeScript
DESCRIPTION: This code snippet defines a function `useMDXComponents` that accepts an object of MDX components and returns a new object with the provided components merged with the existing ones.  It uses TypeScript to define the type of the components parameter as MDXComponents from the 'mdx/types' library. The function is exported for use in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/mdx-components.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { MDXComponents } from 'mdx/types'

export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    ...components,
  }
}
```

----------------------------------------

TITLE: Running Next.js development server
DESCRIPTION: These commands install dependencies and start the Next.js development server. The first command uses npm, while the second uses yarn to install dependencies and then runs the development server. These commands assume Node.js and either npm or yarn are installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn
yarn dev
```

----------------------------------------

TITLE: Creating a Page Component in JavaScript that Uses BaseButton
DESCRIPTION: This JavaScript snippet defines a 'Page' component that imports the 'BaseButton' and styles from 'page.module.css'. The button is rendered within the page component, applying the primary CSS styling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
import { BaseButton } from './base-button'
import styles from './page.module.css'

export default function Page() {
  return <BaseButton className={styles.primary} />
}
```

----------------------------------------

TITLE: Installing Dependencies and Running Next.js (npm)
DESCRIPTION: These commands install the necessary dependencies for the Next.js application using npm and then start the development server. The application will be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Implementing Unauthorized Redirect in Dashboard (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to redirect unauthorized users by using the unauthorized function in a Dashboard page component. It involves verifying user session using verifySession, and when not authenticated, invoking unauthorized to render a 401 error page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  return (
    <main>
      <h1>Welcome to the Dashboard</h1>
      <p>Hi, {session.user.name}.</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Using External Data with generateImageMetadata (JSX)
DESCRIPTION: This example shows how to use the `params` object and fetch external data to generate Open Graph images.  It uses `getOGImages` and `getCaptionForImage` to retrieve image data and caption for dynamic routes.  It returns the image metadata with `id`, `size`, `alt`, and `contentType`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import { ImageResponse } from 'next/og'
import { getCaptionForImage, getOGImages } from '@/app/utils/images'

export async function generateImageMetadata({ params }) {
  const images = await getOGImages(params.id)

  return images.map((image, idx) => ({
    id: idx,
    size: { width: 1200, height: 600 },
    alt: image.text,
    contentType: 'image/png',
  }))
}

export default async function Image({ params, id }) {
  const productId = (await params).id
  const imageId = id
  const text = await getCaptionForImage(productId, imageId)

  return new ImageResponse(
    (
      <div
        style={
          {
            // ...
          }
        }
      >
        {text}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Fetching data with getStaticProps (TypeScript)
DESCRIPTION: This snippet demonstrates how to use `getStaticProps` in a Next.js page component to fetch data from an external API (GitHub) during build time. It uses TypeScript for type safety. The fetched data, specifically the repository information, is passed as props to the page component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { InferGetStaticPropsType, GetStaticProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{ repo: Repo }>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Importing custom matchers in Jest setup (JavaScript)
DESCRIPTION: This JavaScript snippet imports the `@testing-library/jest-dom` module to make custom matchers available in Jest tests. This allows developers to utilize custom matchers to improve assertion expressiveness during testing by only importing once in a setup file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_14

LANGUAGE: JavaScript
CODE:
```
import '@testing-library/jest-dom'
```

----------------------------------------

TITLE: Transforming Page and Metadata Functions for Async Props
DESCRIPTION: Codemod to transform page and metadata functions to handle async props for params and searchParams in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// page.tsx
export default function Page({
  params,
  searchParams,
}: {
  params: { slug: string }
  searchParams: { [key: string]: string | string[] | undefined }
}) {
  const { value } = searchParams
  if (value === 'foo') {
    // ...
  }
}

export function generateMetadata({ params }: { params: { slug: string } }) {
  const { slug } = params
  return {
    title: `My Page - ${slug}`,
  }
}
```

LANGUAGE: tsx
CODE:
```
// page.tsx
export default async function Page(props: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const searchParams = await props.searchParams
  const { value } = searchParams
  if (value === 'foo') {
    // ...
  }
}

export async function generateMetadata(props: {
  params: Promise<{ slug: string }>
}) {
  const params = await props.params
  const { slug } = params
  return {
    title: `My Page - ${slug}`,
  }
}
```

----------------------------------------

TITLE: Type-Safe API Route Handler
DESCRIPTION: Example of implementing a type-safe API route handler with Next.js built-in types.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}
```

----------------------------------------

TITLE: Using beforeInteractive Strategy (Pages Router, JSX)
DESCRIPTION: This code snippet demonstrates using the `beforeInteractive` strategy with the `Script` component in a Next.js application using the Pages Router. It loads a script before any Next.js code is executed and before page hydration. This strategy is suitable for critical scripts needed by the entire site and should be placed inside the `Document` Component (`pages/_document.js`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import { Html, Head, Main, NextScript } from 'next/document'
import Script from 'next/script'

export default function Document() {
  return (
    <Html>
      <Head />
      <body>
        <Main />
        <NextScript />
        <Script
          src="https://example.com/script.js"
          strategy="beforeInteractive"
        />
      </body>
    </Html>
  )
}
```

----------------------------------------

TITLE: Caching Component Output (TSX)
DESCRIPTION: Defines a React component (`Bookings`) using the `'use cache'` directive at the component function level. This caches the component's output based on its serializable props (`type`). Includes an inner function that leverages this caching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_10

LANGUAGE: TSX
CODE:
```
export async function Bookings({ type = 'haircut' }: BookingsProps) {
  'use cache'
  async function getBookingsData() {
    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)
    return data
  }
  return //...
}

interface BookingsProps {
  type: string
}
```

----------------------------------------

TITLE: Using useSWR hook for data fetching in React Component (TypeScript)
DESCRIPTION: This snippet shows how to use the `useSWR` hook to fetch data in a React component. It defines a fetcher function that fetches data from the specified URL and parses the response as JSON. The `useSWR` hook is then used with the '/api/user' key and the fetcher function.  The returned `data` and `error` values can be used to render the component based on the fetching state.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
'use client'

import useSWR from 'swr'

export function Profile() {
  const fetcher = (url) => fetch(url).then((res) => res.json())
  // The same SWR pattern you already know
  const { data, error } = useSWR('/api/user', fetcher)

  return '...'
}
```

----------------------------------------

TITLE: Creating Custom Link with Navigation Blocking (TSX/JS)
DESCRIPTION: A wrapper component around `next/link` that utilizes the `onNavigate` prop. It checks the `isBlocked` state from the `useNavigationBlocker` hook. If navigation is blocked, it prompts the user with a confirmation dialog before preventing the default navigation event.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_25

LANGUAGE: tsx
CODE:
```
'use client';

import Link from 'next/link';
import { useNavigationBlocker } from '../contexts/navigation-blocker';

interface CustomLinkProps extends React.ComponentProps<typeof Link> {
  children: React.ReactNode;
}

export function CustomLink({ children, ...props }: CustomLinkProps) {
  const { isBlocked } = useNavigationBlocker();

  return (
    <Link
      onNavigate={(e) => {
        if (
          isBlocked &&
          !window.confirm('You have unsaved changes. Leave anyway?')
        ) {
          e.preventDefault();
        }
      }}
      {...props}
    >
      {children}
    </Link>
  );
}
```

LANGUAGE: jsx
CODE:
```
'use client';

import Link from 'next/link';
import { useNavigationBlocker } from '../contexts/navigation-blocker';

export function CustomLink({ children, ...props }) {
  const { isBlocked } = useNavigationBlocker();

  return (
    <Link
      onNavigate={(e) => {
        if (
          isBlocked &&
          !window.confirm('You have unsaved changes. Leave anyway?')
        ) {
          e.preventDefault();
        }
      }}
      {...props}
    >
      {children}
    </Link>
  );
}
```

----------------------------------------

TITLE: Correct Script Usage Outside Head - JSX
DESCRIPTION: This code snippet demonstrates the correct usage of the `next/script` component outside the `next/head` component in Next.js.  It imports `Script` and `Head` from `next/script` and `next/head` respectively, and renders the `Script` component as a sibling to the `Head` component within a fragment (`<>`). This is the recommended way to use `next/script`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-script-component-in-head.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'
import Head from 'next/head'

export default function Index() {
  return (
    <>
      <Head>
        <title>Next.js</title>
      </Head>
      <Script src="/my-script.js" />
    </>
  )
}
```

----------------------------------------

TITLE: Importing External Stylesheets in Next.js
DESCRIPTION: This snippet demonstrates how to import an external CSS stylesheet from an npm package into a Next.js application layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import 'bootstrap/dist/css/bootstrap.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className="container">{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Adding Additional Attributes to Script Tag in Next.js (TSX)
DESCRIPTION: This code snippet demonstrates how to add additional attributes, such as `id`, `nonce`, and custom data attributes, to the `<script>` tag using the `next/script` component. It is designed to be used within a client component, as indicated by the `'use client'` directive. The additional attributes are directly passed to the `Script` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://example.com/script.js"
        id="example-script"
        nonce="XUENAJFW"
        data-test="script"
      />
    </>
  )
}
```

----------------------------------------

TITLE: Unit Testing Middleware Response Handling in Next.js (JS)
DESCRIPTION: Demonstrates unit testing a full Next.js middleware function response using experimental utilities from `next/experimental/testing/server`. It shows how to create a `NextRequest`, await the middleware response, and then use functions like `isRewrite` and `getRewrittenUrl` to assert the response type and rewritten URL. `getRedirectUrl` could be used for redirects.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_18

LANGUAGE: javascript
CODE:
```
import { isRewrite, getRewrittenUrl } from 'next/experimental/testing/server'

const request = new NextRequest('https://nextjs.org/docs')
const response = await middleware(request)
expect(isRewrite(response)).toEqual(true)
expect(getRewrittenUrl(response)).toEqual('https://other-domain.com/docs')
// getRedirectUrl could also be used if the response were a redirect
```

----------------------------------------

TITLE: Setting Cache-Control in Next.js API Route (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to manually set the `Cache-Control` header within a Next.js API Route handler function. It uses `res.setHeader` to define caching directives like `s-maxage`, controlling how long the response should be cached by the browser or CDN. This is useful for managing the caching behavior of dynamic API responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_9

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.setHeader('Cache-Control', 's-maxage=86400')
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Rendering Remote MDX - App Router (TSX)
DESCRIPTION: Demonstrates how to fetch MDX content from a remote source (like a CMS or database) and render it dynamically in an App Router page component using the `next-mdx-remote-client/rsc` package. The content is fetched server-side.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
import { MDXRemote } from 'next-mdx-remote-client/rsc'

export default async function RemoteMdxPage() {
  // MDX text - can be from a database, CMS, fetch, anywhere...
  const res = await fetch('https://...')
  const markdown = await res.text()
  return <MDXRemote source={markdown} />
}
```

----------------------------------------

TITLE: Migrating Link Component from Next.js 12 to 13
DESCRIPTION: Example showing the difference between the Link component usage in Next.js 12 vs 13. In Next.js 13, the Link component no longer requires manually adding an <a> tag as a child.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

// Next.js 12: `<a>` has to be nested otherwise it's excluded
<Link href="/about">
  <a>About</a>
</Link>

// Next.js 13: `<Link>` always renders `<a>` under the hood
<Link href="/about">
  About
</Link>
```

----------------------------------------

TITLE: Creating Next.js App with TypeScript (npm)
DESCRIPTION: This command initializes a new Next.js application using the `create-next-app` tool with the TypeScript example. It leverages npm to create a project named `with-typescript-app` based on the specified example.  This command is executed in the terminal.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-typescript with-typescript-app
```

----------------------------------------

TITLE: Defining Inline Cache Profiles
DESCRIPTION: Use inline cache profiles directly within a component to set custom caching behavior
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
'use cache'
import { unstable_cacheLife as cacheLife } from 'next/cache'

export default async function Page() {
  cacheLife({
    stale: 3600, // 1 hour
    revalidate: 900, // 15 minutes
    expire: 86400, // 1 day
  })

  return <div>Page</div>
}
```

LANGUAGE: jsx
CODE:
```
'use cache'
import { unstable_cacheLife as cacheLife } from 'next/cache'

export default async function Page() {
  cacheLife({
    stale: 3600, // 1 hour
    revalidate: 900, // 15 minutes
    expire: 86400, // 1 day
  })

  return <div>Page</div>
}
```

----------------------------------------

TITLE: Using Next.js Commands with Target Configuration
DESCRIPTION: Demonstrates the correct usage of Next.js commands based on the build target. For serverless builds, 'next start' won't work as it requires server-side handling. Use 'next dev' for development or an appropriate handler for serverless production builds.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-start-serverless.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
next start
```

----------------------------------------

TITLE: Correct Dynamic Import Options - After
DESCRIPTION: This code demonstrates the correct way to pass options to the `next/dynamic` function in Next.js. The options are passed directly as an object literal. This fixes the error related to invalid options type.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-dynamic-options-type.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const DynamicComponent = dynamic(() => import('../components/hello'), {
  loading: () => <p>...</p>,
  ssr: false,
})
```

----------------------------------------

TITLE: Logging User Activity After Mutation in Next.js Route Handler (TS)
DESCRIPTION: This TypeScript snippet illustrates how to employ `after` in a Next.js Route Handler (specifically a POST handler) to perform logging or analytics after a mutation operation. It demonstrates accessing request-scoped APIs like `cookies` and `headers` within the asynchronous callback provided to `after`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/after.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import { after } from 'next/server';
import { cookies, headers } from 'next/headers';
import { logUserAction } from '@/app/utils';

export async function POST(request: Request) {
  // Perform mutation
  // ...

  // Log user activity for analytics
  after(async () => {
    const userAgent = (await headers().get('user-agent')) || 'unknown';
    const sessionCookie =
      (await cookies().get('session-id'))?.value || 'anonymous';

    logUserAction({ sessionCookie, userAgent });
  });

  return new Response(JSON.stringify({ status: 'success' }), {
    status: 200,
    headers: { 'Content-Type': 'application/json' },
  });
}
```

----------------------------------------

TITLE: Validating Secret and Enabling Draft Mode
DESCRIPTION: This route handler validates the provided secret token and slug, fetches the corresponding post from the headless CMS, enables Draft Mode, and redirects to the fetched post's slug. It uses `next/headers` for `draftMode` and `next/navigation` for `redirect`. Error handling is included to return a 401 status for invalid tokens or slugs. Assumes the existence of a `getPostBySlug` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
import { draftMode } from 'next/headers'
import { redirect } from 'next/navigation'

export async function GET(request) {
  // Parse query string parameters
  const { searchParams } = new URL(request.url)
  const secret = searchParams.get('secret')
  const slug = searchParams.get('slug')

  // Check the secret and next parameters
  // This secret should only be known to this Route Handler and the CMS
  if (secret !== 'MY_SECRET_TOKEN' || !slug) {
    return new Response('Invalid token', { status: 401 })
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(slug)

  // If the slug doesn't exist prevent draft mode from being enabled
  if (!post) {
    return new Response('Invalid slug', { status: 401 })
  }

  // Enable Draft Mode by setting the cookie
  const draft = await draftMode()
  draft.enable()

  // Redirect to the path from the fetched post
  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities
  redirect(post.slug)
}
```

----------------------------------------

TITLE: Copying environment variable example file
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`, allowing users to configure their environment variables for connecting to the Neo4j database. The `.env.local` file is gitignored to prevent sensitive information from being committed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Checking Draft Mode Status in Next.js Server Component (TypeScript)
DESCRIPTION: This code snippet demonstrates how to check if Draft Mode is enabled within a Next.js Server Component using TypeScript.  It imports the `draftMode` function from `next/headers` and uses its `isEnabled` property to determine the current Draft Mode status.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { draftMode } from 'next/headers'

export default async function Page() {
  const { isEnabled } = await draftMode()
}
```

----------------------------------------

TITLE: Configuring Web Application Manifest in Next.js (JSX & HTML)
DESCRIPTION: Configures the web application manifest link using the `metadata.manifest` property, providing the URL to the manifest file. This generates the corresponding `<link rel="manifest">` tag in the HTML head, enabling progressive web app features.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_17

LANGUAGE: JSX
CODE:
```
export const metadata = {
  manifest: 'https://nextjs.org/manifest.json',
}
```

LANGUAGE: HTML
CODE:
```
<link rel="manifest" href="https://nextjs.org/manifest.json" />
```

----------------------------------------

TITLE: Implementing Art Direction for Responsive Images in Next.js
DESCRIPTION: This code snippet shows how to use getImageProps to create responsive images with different sources for mobile and desktop views, demonstrating art direction techniques.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_35

LANGUAGE: jsx
CODE:
```
import { getImageProps } from 'next/image'

export default function Home() {
  const common = { alt: 'Art Direction Example', sizes: '100vw' }
  const {
    props: { srcSet: desktop },
  } = getImageProps({
    ...common,
    width: 1440,
    height: 875,
    quality: 80,
    src: '/desktop.jpg',
  })
  const {
    props: { srcSet: mobile, ...rest },
  } = getImageProps({
    ...common,
    width: 750,
    height: 1334,
    quality: 70,
    src: '/mobile.jpg',
  })

  return (
    <picture>
      <source media="(min-width: 1000px)" srcSet={desktop} />
      <source media="(min-width: 500px)" srcSet={mobile} />
      <img {...rest} style={{ width: '100%', height: 'auto' }} />
    </picture>
  )
}
```

----------------------------------------

TITLE: Initializing Next.js App with npm
DESCRIPTION: This command uses npm to create a new Next.js application with the specified ReactMD and Typescript example. It bootstraps the project with the necessary files and configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-md-typescript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-md-typescript with-react-md-typescript-app
```

----------------------------------------

TITLE: Importing and Displaying Image in Next.js App (JSX)
DESCRIPTION: This snippet demonstrates the recommended way to handle images that need to be displayed on every page by moving the image import and rendering logic from `_document.js` to `pages/_app.js`. It uses the `next/image` component to render the image after importing it.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/custom-document-image-import.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import yourImage from 'path/to/your/image'
import Image from 'next/image'

function MyApp({ Component, pageProps }) {
  return (
    <>
      <Image src={yourImage} alt="your_image_description" />
      <Component {...pageProps} />
    </>
  )
}

export default MyApp
```

----------------------------------------

TITLE: Using next/image with Custom Loader (JavaScript)
DESCRIPTION: This code demonstrates how to use the `next/image` component with a custom image loader.  It imports the `Image` component and renders an image with specified `alt`, `src`, `width`, and `height` attributes, utilizing the custom loader defined elsewhere.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return <Image alt="turtles" src="/turtles.jpg" width={300} height={300} />
}
```

----------------------------------------

TITLE: Problematic Math.random() Usage in Next.js Page Component
DESCRIPTION: Example showing incorrect implementation of random value generation during prerendering, which causes an error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-random.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const products = await getCachedProducts()
  const randomSeed = Math.random()
  const randomizedProducts = randomize(products, randomSeed)
  return <ProductsView products={randomizedProducts} />
}
```

----------------------------------------

TITLE: Generating Open Graph Image Programmatically - JSX
DESCRIPTION: Example of an opengraph-image.js file that programmatically generates an image using `next/og`'s `ImageResponse`. It demonstrates importing the API, reading a font file, defining image metadata exports (alt, size, contentType), and returning an `ImageResponse` object containing JSX and options. This is functionally identical to the TSX example.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_7

LANGUAGE: JSX
CODE:
```
import { ImageResponse } from 'next/og'
import { readFile } from 'node:fs/promises'
import { join } => 'node:path'

// Image metadata
export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image() {
  // Font loading, process.cwd() is Next.js project directory
  const interSemiBold = await readFile(
    join(process.cwd(), 'assets/Inter-SemiBold.ttf')
  )

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        About Acme
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported opengraph-image
      // size config to also set the ImageResponse's width and height.
      ...size,
      fonts: [
        {
          name: 'Inter',
          data: interSemiBold,
          style: 'normal',
          weight: 400,
        },
      ],
    }
  )
}
```

----------------------------------------

TITLE: Conditional Data Fetching in Draft Mode
DESCRIPTION: This code snippet demonstrates how to conditionally fetch data based on whether Draft Mode is enabled. It imports `draftMode` from `next/headers` and fetches data from a draft or production endpoint based on the `isEnabled` property. This allows previewing draft content without affecting the live site.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
// page that fetches data
import { draftMode } from 'next/headers'

async function getData() {
  const { isEnabled } = await draftMode()

  const url = isEnabled
    ? 'https://draft.example.com'
    : 'https://production.example.com'

  const res = await fetch(url)

  return res.json()
}

export default async function Page() {
  const { title, desc } = await getData()

  return (
    <main>
      <h1>{title}</h1>
      <p>{desc}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Recommended User Agent Parsing in Next.js Middleware
DESCRIPTION: Updated approach for parsing user agent information in Next.js middleware using the userAgent function from next/server. This is the recommended way to detect device types and handle user agent information.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-user-agent.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse, userAgent } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const { device } = userAgent(request)
  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'
  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Loading Asynchronous Scripts with HTML Attributes
DESCRIPTION: This snippet shows how to load third-party scripts asynchronously using HTML script tags with 'async' or 'defer' attributes. These attributes allow the browser to continue parsing the HTML while the script is being downloaded.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-sync-scripts.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<script src="https://third-party-script.js" async />
<script src="https://third-party-script.js" defer />
```

----------------------------------------

TITLE: Importing React JSX Runtime - JavaScript
DESCRIPTION: Imports the `react/jsx-runtime` module, likely for using JSX without explicitly importing React in every file.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import "react/jsx-runtime";

```

----------------------------------------

TITLE: Environment variables for Cloudflare Turnstile
DESCRIPTION: These are the environment variables required to connect the Next.js app to Cloudflare Turnstile.  `NEXT_PUBLIC_CLOUDFLARE_TURNSTILE_SITE_KEY` is the public site key and `CLOUDFLARE_TURNSTILE_SECRET_KEY` is the secret key.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#2025-04-21_snippet_4

LANGUAGE: plaintext
CODE:
```
- `NEXT_PUBLIC_CLOUDFLARE_TURNSTILE_SITE_KEY`
- `CLOUDFLARE_TURNSTILE_SECRET_KEY`
```

----------------------------------------

TITLE: getServerSideProps with redirect return - JavaScript
DESCRIPTION: This example demonstrates how to redirect a user from within `getServerSideProps` using the `redirect` property. If the data fetch fails, the user is redirected to the specified `destination`.  The `permanent` property controls whether the redirect is permanent (308) or temporary (307).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
export async function getServerSideProps(context) {
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  if (!data) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }

  return {
    props: {}, // will be passed to the page component as props
  }
}
```

----------------------------------------

TITLE: NextRouter Import Example
DESCRIPTION: Example showing the correct import path for useRouter hook based on usage context. For app directory, use next/navigation and for pages directory, use next/compat/router.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-router-not-mounted.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// For app directory
import { useRouter } from 'next/navigation'

// For pages directory
import { useRouter } from 'next/compat/router'
```

----------------------------------------

TITLE: Enabling Draft Mode
DESCRIPTION: This code snippet imports the `draftMode` function from `next/headers` and enables draft mode. The `draftMode().enable()` method sets a cookie that enables draft mode for subsequent requests.  The route handler then responds with a confirmation message.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { draftMode } from 'next/headers'

export async function GET(request: Request) {
  const draft = await draftMode()
  draft.enable()
  return new Response('Draft mode is enabled')
}
```

----------------------------------------

TITLE: Server-side Rendering with getServerSideProps in Next.js
DESCRIPTION: An example of Server-side Rendering in Next.js using getServerSideProps. This function fetches data on every request rather than at build time, allowing for always up-to-date content.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
function Page({ data }) {
  // Render data...
}

// This gets called on every request
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  // Pass data to the page via props
  return { props: { data } }
}

export default Page
```

----------------------------------------

TITLE: Correct Usage of cookies() with Cached Function
DESCRIPTION: Proper implementation where cookies are accessed outside the cached function and passed as an argument, making the value part of the cache key.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-request-in-use-cache.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

async function getExampleData(isLoggedIn) {
  "use cache"
  ...
}

export default async function Page() {
  const isLoggedIn = (await cookies()).has('token')
  const data = await getExampleData(isLoggedIn)
  return ...
}
```

----------------------------------------

TITLE: Environment Variable Replacement Example (JSX)
DESCRIPTION: This code snippet illustrates how Next.js replaces `process.env.customKey` with its actual value ('my-value') during the build process. This replacement happens due to the webpack DefinePlugin.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/env.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
return <h1>The value of customKey is: {process.env.customKey}</h1>
```

LANGUAGE: jsx
CODE:
```
return <h1>The value of customKey is: {'my-value'}</h1>
```

----------------------------------------

TITLE: Applying use cache Directive (TSX/JSX)
DESCRIPTION: Illustrates the placement of the `'use cache'` directive at different scopes: at the top of a file to cache all its exports, inside a React component function definition, and inside a regular asynchronous function definition. The directive must be a string literal.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_2

LANGUAGE: TSX
CODE:
```
// File level
'use cache'

export default async function Page() {
  // ...
}

// Component level
export async function MyComponent() {
  'use cache'
  return <></>
}

// Function level
export async function getData() {
  'use cache'
  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Securing Draft API Route with Secret (JavaScript)
DESCRIPTION: This JavaScript code secures the draft API route by verifying a secret token and the presence of a slug parameter. It fetches data from a headless CMS, enables Draft Mode, and redirects the user to the specified slug if the validation passes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export default async (req, res) => {
  // Check the secret and next parameters
  // This secret should only be known to this API route and the CMS
  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(req.query.slug)

  // If the slug doesn't exist prevent draft mode from being enabled
  if (!post) {
    return res.status(401).json({ message: 'Invalid slug' })
  }

  // Enable Draft Mode by setting the cookie
  res.setDraftMode({ enable: true })

  // Redirect to the path from the fetched post
  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities
  res.redirect(post.slug)
}
```

----------------------------------------

TITLE: Incorrect Exports in 'use server' Files - JavaScript
DESCRIPTION: This snippet shows examples of incorrect export statements in 'use server' files, where only async functions should be exported. The two examples demonstrate errors: one exporting a non-function value and another overlooking the async keyword.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-use-server-value.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
"use strict"

// ❌ This is incorrect: only async functions are allowed.
export const value = 1

// ❌ This is incorrect: missed the `async` keyword.
export function getServerData() {
  return '...'
}
```

----------------------------------------

TITLE: Configuring Custom Cache Handler in Next.js Config
DESCRIPTION: This configuration snippet in `next.config.js` sets up Next.js to use a custom cache handler module located at `./cache-handler.js`. It also disables the default in-memory caching mechanism by setting `cacheMaxMemorySize` to 0. This is necessary when implementing a custom cache handler to ensure all caching operations are handled by the specified module, facilitating persistent or shared caching across multiple instances or durable storage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
module.exports = {
  cacheHandler: require.resolve('./cache-handler.js'),
  cacheMaxMemorySize: 0, // disable default in-memory caching
}
```

----------------------------------------

TITLE: Returning Non-UI Content in Next.js - JavaScript
DESCRIPTION: This JavaScript snippet illustrates the generation of an RSS feed response in a GET request. It returns XML content that is compliant with the RSS feed format.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_21

LANGUAGE: javascript
CODE:
```
export async function GET() {
  return new Response(`<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Next.js Documentation</title>
  <link>https://nextjs.org/docs</link>
  <description>The React Framework for the Web</description>
</channel>

</rss>`)
}
```

----------------------------------------

TITLE: Using useRouter Hook for Active Link Styling (JSX)
DESCRIPTION: This example demonstrates how to use the useRouter hook to dynamically style an active link based on the current route. It imports the useRouter hook from 'next/router' and uses it to access the router object. The style of the link is then updated based on whether the current path matches the link's href.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

function ActiveLink({ children, href }) {
  const router = useRouter()
  const style = {
    marginRight: 10,
    color: router.asPath === href ? 'red' : 'black',
  }

  const handleClick = (e) => {
    e.preventDefault()
    router.push(href)
  }

  return (
    <a href={href} onClick={handleClick} style={style}>
      {children}
    </a>
  )
}

export default ActiveLink
```

----------------------------------------

TITLE: Sending Web Vitals Results to External Systems
DESCRIPTION: This code snippet shows how to send Web Vitals results to an external analytics endpoint using `navigator.sendBeacon` (if available) or `fetch` with the `keepalive` option. It stringifies the metric data as JSON and sends it as a POST request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
useReportWebVitals((metric) => {
  const body = JSON.stringify(metric)
  const url = 'https://example.com/analytics'

  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.
  if (navigator.sendBeacon) {
    navigator.sendBeacon(url, body)
  } else {
    fetch(url, { body, method: 'POST', keepalive: true })
  }
})
```

----------------------------------------

TITLE: Setting Session Cookie in Next.js Pages Router API Route (JavaScript)
DESCRIPTION: This snippet demonstrates setting a session cookie within a Next.js Pages Router API route handler. It encrypts session data from the request body using a separate `encrypt` function and then uses the `cookie` library's `serialize` function to create an HTTP-only, secure cookie with a one-week expiration, setting it in the response headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_18

LANGUAGE: js
CODE:
```
import { serialize } from 'cookie';
import { encrypt } from '@/app/lib/session';

export default function handler(req, res) {
  const sessionData = req.body;
  const encryptedSessionData = encrypt(sessionData);

  const cookie = serialize('session', encryptedSessionData, {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    maxAge: 60 * 60 * 24 * 7, // One week
    path: '/',
  });
  res.setHeader('Set-Cookie', cookie);
  res.status(200).json({ message: 'Successfully set cookie!' });
}
```

----------------------------------------

TITLE: Enabling Turbopack in Next.js
DESCRIPTION: This snippet shows how to modify the `package.json` file to enable Turbopack for the `dev` and `build` scripts in a Next.js project. It involves adding the `--turbopack` flag to the respective script commands. The `highlight` property indicates which line is being emphasized.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/08-turbopack.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start"
  }
}
```

----------------------------------------

TITLE: Catch-all API Routes in Next.js
DESCRIPTION: Shows how to implement catch-all API routes that can handle multiple dynamic segments in the URL path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const { slug } = req.query
  res.end(`Post: ${slug.join(', ')}`)
}
```

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  const { slug } = req.query
  res.end(`Post: ${slug.join(', ')}`)
}
```

----------------------------------------

TITLE: Incorrect Script Usage in Head - JSX
DESCRIPTION: This code snippet demonstrates the incorrect usage of the `next/script` component inside the `next/head` component. It imports `Script` and `Head` from `next/script` and `next/head` respectively, and attempts to render the `Script` component within the `Head` component. This structure will cause an error in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-script-component-in-head.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'
import Head from 'next/head'

export default function Index() {
  return (
    <Head>
      <title>Next.js</title>
      <Script src="/my-script.js" />
    </Head>
  )
}
```

----------------------------------------

TITLE: Using BlogNavLink in Server Component Layout
DESCRIPTION: Demonstrates importing a client component with useSelectedLayoutSegment into a server-side layout
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segment.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { BlogNavLink } from './blog-nav-link'
import getFeaturedPosts from './get-featured-posts'

export default async function Layout({
  children,
}: {
  children: React.ReactNode
}) {
  const featuredPosts = await getFeaturedPosts()
  return (
    <div>
      {featuredPosts.map((post) => (
        <div key={post.id}>
          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>
        </div>
      ))}
      <div>{children}</div>
    </div>
  )
}
```

----------------------------------------

TITLE: Handling Unused Rewrite Parameters in Next.js (JavaScript)
DESCRIPTION: This snippet illustrates how Next.js automatically passes parameters from the `source` path as query parameters when those parameters are not explicitly included in the `destination` path. In this example, the `:path*` parameter from `/old-about/:path*` will be added to the query string for the destination `/about`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/old-about/:path*',
        destination: '/about', // The :path parameter isn't used here so will be automatically passed in the query
      },
    ]
  },
}
```

----------------------------------------

TITLE: Generating Custom Build ID in next.config.js (JavaScript)
DESCRIPTION: Configures the `generateBuildId` function in `next.config.js` to return a consistent build ID. This is crucial for ensuring the same build artifact is used across multiple containers in self-hosted environments, typically by using an environment variable like a Git hash. Requires access to the `process.env` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  generateBuildId: async () => {
    // This could be anything, using the latest git hash
    return process.env.GIT_HASH
  },
}
```

----------------------------------------

TITLE: Enabling Standalone Output in Next.js Configuration (JavaScript)
DESCRIPTION: Configures Next.js to output a standalone build directory (`.next/standalone`) containing only necessary files for production deployment, including a minimal `server.js`. This directory can be deployed without `node_modules`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  output: 'standalone',
}
```

----------------------------------------

TITLE: Client-side Instrumentation (JavaScript)
DESCRIPTION: This snippet demonstrates how to set up client-side instrumentation in a Next.js application using JavaScript. It includes examples for performance monitoring using `performance.mark`, logging analytics initialization, and setting up error tracking with `window.addEventListener`.  The code is intended to run before the application's frontend code starts executing and requires no specific exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation-client.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
// Set up performance monitoring
performance.mark('app-init')

// Initialize analytics
console.log('Analytics initialized')

// Set up error tracking
window.addEventListener('error', (event) => {
  // Send to your error tracking service
  reportError(event.error)
})
```

----------------------------------------

TITLE: Defining Theme Color with Media Queries in TypeScript
DESCRIPTION: This snippet shows how to define a viewport object in TypeScript with dynamic theme colors based on media queries, allowing for different colors depending on the user's color scheme preference.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import type { Viewport } from 'next'

export const viewport: Viewport = {
  themeColor: [
    { media: '(prefers-color-scheme: light)', color: 'cyan' },
    { media: '(prefers-color-scheme: dark)', color: 'black' },
  ],
}
```

----------------------------------------

TITLE: Data Fetching in Not Found Component with Next.js (JavaScript)
DESCRIPTION: An async implementation of the not-found.js component in JavaScript that fetches data from the server using the headers API. It shows how to display dynamic data in a custom 404 page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/not-found.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'
import { headers } from 'next/headers'

export default async function NotFound() {
  const headersList = await headers()
  const domain = headersList.get('host')
  const data = await getSiteData(domain)
  return (
    <div>
      <h2>Not Found: {data.name}</h2>
      <p>Could not find requested resource</p>
      <p>
        View <Link href="/blog">all posts</Link>
      </p>
    </div>
  )
}
```

----------------------------------------

TITLE: Complete Dynamic Post Page with getStaticProps and getStaticPaths
DESCRIPTION: Implementation of a dynamic post page that uses both getStaticPaths to determine which routes to pre-render and getStaticProps to fetch data for each specific post based on its ID parameter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
export default function Post({ post }) {
  // Render post...
}

export async function getStaticPaths() {
  // ...
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return { props: { post } }
}
```

----------------------------------------

TITLE: Updating Search Parameters in Next.js Client Components (JavaScript)
DESCRIPTION: A JavaScript client component that demonstrates how to update URL search parameters using both the useRouter hook and Link component. It includes a utility function to merge existing search parameters with new ones, working with the same functionality as the TypeScript version but without type annotations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
'use client'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  // Get a new searchParams string by merging the current
  // searchParams with a provided key/value pair
  const createQueryString = useCallback(
    (name, value) => {
      const params = new URLSearchParams(searchParams)
      params.set(name, value)

      return params.toString()
    },
    [searchParams]
  )

  return (
    <>
      <p>Sort By</p>

      {/* using useRouter */}
      <button
        onClick={() => {
          // <pathname>?sort=asc
          router.push(pathname + '?' + createQueryString('sort', 'asc'))
        }}
      >
        ASC
      </button>

      {/* using <Link> */}
      <Link
        href={
          // <pathname>?sort=desc
          pathname + '?' + createQueryString('sort', 'desc')
        }
      >
        DESC
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Specifying Multiple Weights and Styles for Roboto Font
DESCRIPTION: This code snippet demonstrates how to specify multiple weights and styles for the Roboto font when importing it from `next/font/google`. It uses an array to define multiple weights and styles, allowing for more flexible font usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
const roboto = Roboto({
  weight: ['400', '700'],
  style: ['normal', 'italic'],
  subsets: ['latin'],
  display: 'swap',
})
```

----------------------------------------

TITLE: Fetching Redirect Data in Next.js Pages API Route (TypeScript)
DESCRIPTION: This TypeScript snippet for a Next.js Pages API Route (`pages/api/redirects.ts`) handles GET requests, extracts the 'pathname' from the query string, and looks it up in a local 'redirects.json' file. It returns the redirect entry as JSON if found or a 400 status if the pathname is missing or not found in the file (accounting for Bloom filter false positives).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_15

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'
import redirects from '@/app/redirects/redirects.json'

type RedirectEntry = {
  destination: string
  permanent: boolean
}

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const pathname = req.query.pathname
  if (!pathname) {
    return res.status(400).json({ message: 'Bad Request' })
  }

  // Get the redirect entry from the redirects.json file
  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]

  // Account for bloom filter false positives
  if (!redirect) {
    return res.status(400).json({ message: 'No redirect' })
  }

  // Return the redirect entry
  return res.json(redirect)
}
```

----------------------------------------

TITLE: Creating Next.js App with TypeScript (Yarn)
DESCRIPTION: This command initializes a new Next.js application using the `create-next-app` tool with the TypeScript example. It leverages Yarn to create a project named `with-typescript-app` based on the specified example. This command is executed in the terminal.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-typescript with-typescript-app
```

----------------------------------------

TITLE: Form Validation with Zod - TypeScript
DESCRIPTION: This code snippet demonstrates how to use Zod for form validation in a Next.js API route using TypeScript. It defines a schema for validating the request body and parses the incoming data using the schema.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'
import { z } from 'zod'

const schema = z.object({
  // ...
})

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const parsed = schema.parse(req.body)
  // ...
}
```

----------------------------------------

TITLE: Using next/link with basePath
DESCRIPTION: Demonstrates how Next.js automatically applies basePath to links, transforming '/about' to '/docs/about' when basePath is set to '/docs'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/basePath.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export default function HomePage() {
  return (
    <>
      <Link href="/about">About Page</Link>
    </>
  )
}
```

----------------------------------------

TITLE: Implementing getServerSideProps with TypeScript in Next.js
DESCRIPTION: This example demonstrates how to fetch data from GitHub API using getServerSideProps in a TypeScript Next.js page. It defines type interfaces and uses them to properly type the props and response data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-get-server-side-props.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getServerSideProps = (async () => {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo: Repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}) satisfies GetServerSideProps<{ repo: Repo }>

export default function Page({
  repo,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Defining Server Functions in a Separate File with TypeScript
DESCRIPTION: Demonstrates how to define Server Functions in a dedicated TypeScript file by placing the 'use server' directive at the top of the file, making all exports Server Functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
'use server'

export async function createPost() {}
```

----------------------------------------

TITLE: Creating a Next.js app with create-next-app - pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-unsplash example. It leverages the create-next-app tool to bootstrap the project with the specified template and project name. The tool downloads the template from the specified repository and initializes the project structure, installing necessary dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-unsplash with-unsplash-app
```

----------------------------------------

TITLE: Creating Next.js App with Fauna Example (pnpm)
DESCRIPTION: Uses `create next-app` from pnpm to initialize a new Next.js app using `with-fauna` example. The resulting application is named `with-fauna-app`. The command fetches and configures all the necessary dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fauna/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-fauna with-fauna-app
```

----------------------------------------

TITLE: Next.js Image Config (Remote Patterns)
DESCRIPTION: This code snippet demonstrates how to configure remote patterns in the `next.config.js` file for the Next.js Image component.  This allows specifying allowed external image sources by protocol, hostname, port, pathname, and search parameters to prevent malicious usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'example.com',
        port: '',
        pathname: '/account123/**',
        search: '',
      },
    ],
  },
}
```

----------------------------------------

TITLE: Cypress Component Test (Pages Router, JavaScript)
DESCRIPTION: Creates a Cypress component test for the `AboutPage` component from the Pages Router in JavaScript. It mounts the component and asserts that it renders the expected content, including a heading and a link. Requires Cypress to be configured for component testing and the `AboutPage` component to be defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_14

LANGUAGE: jsx
CODE:
```
import AboutPage from '../../pages/about'

describe('<AboutPage />', () => {
  it('should render and display expected content', () => {
    // Mount the React component for the About page
    cy.mount(<AboutPage />)

    // The new page should contain an h1 with "About page"
    cy.get('h1').contains('About')

    // Validate that a link with the expected URL is present
    // *Following* the link is better suited to an E2E test
    cy.get('a[href="/"]').should('be.visible')
  })
})
```

----------------------------------------

TITLE: Validating Secret and Enabling Draft Mode
DESCRIPTION: This route handler validates the provided secret token and slug, fetches the corresponding post from the headless CMS, enables Draft Mode, and redirects to the fetched post's slug. It uses `next/headers` for `draftMode` and `next/navigation` for `redirect`. Error handling is included to return a 401 status for invalid tokens or slugs.  Assumes the existence of a `getPostBySlug` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import { draftMode } from 'next/headers'
import { redirect } from 'next/navigation'

export async function GET(request: Request) {
  // Parse query string parameters
  const { searchParams } = new URL(request.url)
  const secret = searchParams.get('secret')
  const slug = searchParams.get('slug')

  // Check the secret and next parameters
  // This secret should only be known to this Route Handler and the CMS
  if (secret !== 'MY_SECRET_TOKEN' || !slug) {
    return new Response('Invalid token', { status: 401 })
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(slug)

  // If the slug doesn't exist prevent draft mode from being enabled
  if (!post) {
    return new Response('Invalid slug', { status: 401 })
  }

  // Enable Draft Mode by setting the cookie
  const draft = await draftMode()
  draft.enable()

  // Redirect to the path from the fetched post
  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities
  redirect(post.slug)
}
```

----------------------------------------

TITLE: Navigating back with router.back
DESCRIPTION: This code snippet illustrates how to use `router.back` to programmatically navigate back in the browser's history, simulating the browser's back button functionality. It utilizes the `useRouter` hook to access the router instance and calls the `back()` method on a button click.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.back()}>
      Click here to go back
    </button>
  )
}
```

----------------------------------------

TITLE: Dynamic Post Page with getStaticProps and getStaticPaths
DESCRIPTION: A complete implementation of a dynamic post page that uses both getStaticPaths to determine which routes to pre-render and getStaticProps to fetch data for each specific post based on its ID parameter.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
function Post({ post }) {
  // Render post...
}

export async function getStaticPaths() {
  // ...
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return { props: { post } }
}

export default Post
```

----------------------------------------

TITLE: Extending Next.js ESLint Plugin (js)
DESCRIPTION: This snippet illustrates how to extend directly from the Next.js ESLint plugin. This is recommended if you have existing ESLint configurations with potentially conflicting settings for plugins like react, react-hooks, jsx-a11y, and import. By extending the plugin, you avoid collisions and ensure consistent behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_12

LANGUAGE: js
CODE:
```
module.exports = {
  extends: [
    //...
    'plugin:@next/next/recommended',
  ],
}
```

----------------------------------------

TITLE: Redirecting Client-Side with useRouter (Pages Router, JavaScript)
DESCRIPTION: Demonstrates client-side navigation using the `useRouter` hook in a Next.js Pages Router component. It shows how to use the `router.push()` method within a button's `onClick` event handler to programmatically navigate the user to a different page (`/dashboard`) without a full page reload.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type="button" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}
```

----------------------------------------

TITLE: Replacing Options with noStore Function
DESCRIPTION: This JavaScript snippet shows a similar implementation of the unstable_noStore function for usage in situations where passing cache-related options to fetch is not desirable. The function prevents server components from being cached and statically rendered in a Next.js application. Dependencies include the next package, and this code is useful when db.query operations are involved. It expects setup for async operations and no specific input parameters are required.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_noStore.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import { unstable_noStore as noStore } from 'next/cache';

export default async function ServerComponent() {
  noStore();
  const result = await db.query(...);
  ...
}
```

----------------------------------------

TITLE: Configuring React Compiler for Opt-in Mode (JavaScript)
DESCRIPTION: Configuration in next.config.js to set the React Compiler to 'annotation' compilation mode for opt-in usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    reactCompiler: {
      compilationMode: 'annotation',
    },
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Implementing Conditional Path-Based Middleware Logic
DESCRIPTION: Example of implementing middleware with conditional path-based execution, allowing explicit ordering of middleware execution for different routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    // This logic is only applied to /about
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    // This logic is only applied to /dashboard
  }
}
```

----------------------------------------

TITLE: Using onLoad Callback (App Router, TSX)
DESCRIPTION: This code snippet demonstrates how to use the `onLoad` property with the `Script` component to execute code after the script has loaded in a Next.js application using the App Router. This is useful for initializing content or calling a function from the loaded script.  `onLoad` can only be used in Client Components and with `afterInteractive` or `lazyOnload` strategies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
'use client'

import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js"
        onLoad={() => {
          console.log(_.sample([1, 2, 3, 4]))
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Implementing Server Actions for Push Notifications - TypeScript
DESCRIPTION: This code defines server actions for subscribing and unsubscribing users, and sending push notifications using the web-push library. It uses environment variables for VAPID keys. In a production environment, the subscription data should be stored in a database.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
'use server'

import webpush from 'web-push'

webpush.setVapidDetails(
  '<mailto:your-email@example.com>',
  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,
  process.env.VAPID_PRIVATE_KEY!
)

let subscription: PushSubscription | null = null

export async function subscribeUser(sub: PushSubscription) {
  subscription = sub
  // In a production environment, you would want to store the subscription in a database
  // For example: await db.subscriptions.create({ data: sub })
  return { success: true }
}

export async function unsubscribeUser() {
  subscription = null
  // In a production environment, you would want to remove the subscription from the database
  // For example: await db.subscriptions.delete({ where: { ... } })
  return { success: true }
}

export async function sendNotification(message: string) {
  if (!subscription) {
    throw new Error('No subscription available')
  }

  try {
    await webpush.sendNotification(
      subscription,
      JSON.stringify({
        title: 'Test Notification',
        body: message,
        icon: '/icon.png',
      })
    )
    return { success: true }
  } catch (error) {
    console.error('Error sending push notification:', error)
    return { success: false, error: 'Failed to send notification' }
  }
}

```

----------------------------------------

TITLE: Configuring Viewport Parameters in TypeScript
DESCRIPTION: This TypeScript snippet defines viewport parameters such as width, initial scale, and maximum scale in a viewport object for Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import type { Viewport } from 'next'

export const viewport: Viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
  // Also supported but less commonly used
  // interactiveWidget: 'resizes-visual',
}
```

----------------------------------------

TITLE: Initializing useSelectedLayoutSegment in Client Component
DESCRIPTION: Demonstrates basic usage of useSelectedLayoutSegment hook to display the current active route segment
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segment.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useSelectedLayoutSegment } from 'next/navigation'

export default function ExampleClientComponent() {
  const segment = useSelectedLayoutSegment()

  return <p>Active segment: {segment}</p>
}
```

----------------------------------------

TITLE: Removing Unnecessary getInitialProps from Next.js Custom App (JSX)
DESCRIPTION: This code snippet shows an example of a getInitialProps implementation in a custom App component that can be safely removed. This implementation simply passes props to the rendered component without adding functionality, causing Automatic Static Optimization to be disabled unnecessarily.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/opt-out-auto-static-optimization.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
class MyApp extends App {
  // Remove me, I do nothing!
  static async getInitialProps({ Component, ctx }) {
    let pageProps = {}

    if (Component.getInitialProps) {
      pageProps = await Component.getInitialProps(ctx)
    }

    return { pageProps }
  }

  render() {
    // ...
  }
}
```

----------------------------------------

TITLE: Copying and Renaming Environment File
DESCRIPTION: This command copies the `.env.local.example` to `.env.local`, setting up the environment file required for the project configuration. The `.env.local` file is ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Creating Next.js app with Vitest example
DESCRIPTION: This command uses `create-next-app` to scaffold a new Next.js project based on the `with-vitest` example. This is a quick way to start a Next.js project with Vitest already configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --example with-vitest with-vitest-app
```

----------------------------------------

TITLE: Installing Next.js 15 Using Codemod
DESCRIPTION: Command to automatically upgrade to the latest Next.js version using the upgrade codemod.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx @next/codemod@canary upgrade latest
```

----------------------------------------

TITLE: Exporting PostCSS Configuration as an Object (Correct)
DESCRIPTION: This snippet demonstrates the correct way to export PostCSS configuration as a plain object. It uses process.env to access environment information for determining plugin configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-function.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins: {
    'postcss-plugin': process.env.NODE_ENV === 'production' ? {} : false,
  },
}
```

----------------------------------------

TITLE: Correct Node.js Module Usage - Next.js
DESCRIPTION: Example of correctly implementing Node.js-specific code (Redis) using getStaticProps in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import Redis from 'ioredis'

const redis = new Redis(process.env.REDIS_URL)

export default redis
```

LANGUAGE: jsx
CODE:
```
import redis from '../lib/redis'

export async function getStaticProps() {
  const message = await redis.get('message')
  return {
    message,
  }
}

export default function Home({ message }) {
  return <h1>{message}</h1>
}
```

----------------------------------------

TITLE: Push Notification Manager Component - JavaScript
DESCRIPTION: This React component manages push notification subscriptions. It checks for service worker and PushManager support, registers a service worker, handles subscribing and unsubscribing, and sends test notifications.  It uses React's useState and useEffect hooks to manage the component's state and side effects. It also utilizes server actions to handle the actual subscribing, unsubscribing, and notification sending logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
function PushNotificationManager() {
  const [isSupported, setIsSupported] = useState(false);
  const [subscription, setSubscription] = useState(null);
  const [message, setMessage] = useState('');

  useEffect(() => {
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      setIsSupported(true);
      registerServiceWorker();
    }
  }, []);

  async function registerServiceWorker() {
    const registration = await navigator.serviceWorker.register('/sw.js', {
      scope: '/',
      updateViaCache: 'none',
    });
    const sub = await registration.pushManager.getSubscription();
    setSubscription(sub);
  }

  async function subscribeToPush() {
    const registration = await navigator.serviceWorker.ready;
    const sub = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: urlBase64ToUint8Array(
        process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!
      ),
    });
    setSubscription(sub);
    await subscribeUser(sub);
  }

  async function unsubscribeFromPush() {
    await subscription?.unsubscribe();
    setSubscription(null);
    await unsubscribeUser();
  }

  async function sendTestNotification() {
    if (subscription) {
      await sendNotification(message);
      setMessage('');
    }
  }

  if (!isSupported) {
    return <p>Push notifications are not supported in this browser.</p>;
  }

  return (
    <div>
      <h3>Push Notifications</h3>
      {subscription ? (
        <>
          <p>You are subscribed to push notifications.</p>
          <button onClick={unsubscribeFromPush}>Unsubscribe</button>
          <input
            type="text"
            placeholder="Enter notification message"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
          />
          <button onClick={sendTestNotification}>Send Test</button>
        </>
      ) : (
        <>
          <p>You are not subscribed to push notifications.</p>
          <button onClick={subscribeToPush}>Subscribe</button>
        </>
      )}
    </div>
  );
}
```

----------------------------------------

TITLE: Configuring Robots Metadata Directives in Next.js
DESCRIPTION: Control search engine crawling and indexing using the `robots` metadata field. This allows setting directives for general robots (`index`, `follow`, `nocache`) and specific bots like Googlebot (`noimageindex`, `max-video-preview`, `max-image-preview`, `max-snippet`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_14

LANGUAGE: TSX
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  robots: {
    index: true,
    follow: true,
    nocache: false,
    googleBot: {
      index: true,
      follow: true,
      noimageindex: false,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
}
```

LANGUAGE: HTML
CODE:
```
<meta name="robots" content="index, follow" />
<meta
  name="googlebot"
  content="index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"
/>
```

----------------------------------------

TITLE: Redirect in Next.js Client Component (JavaScript)
DESCRIPTION: This example shows how to use the `redirect` function in a Next.js Client Component using JavaScript. It checks if the current pathname starts with `/admin` and doesn't include `/login`. If both conditions are met, it redirects the user to `/admin/login`. When using `redirect` in a Client Component on initial page load during SSR, it will perform a server-side redirect.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
'use client'

import { redirect, usePathname } from 'next/navigation'

export function ClientRedirect() {
  const pathname = usePathname()

  if (pathname.startsWith('/admin') && !pathname.includes('/login')) {
    redirect('/admin/login')
  }

  return <div>Login Page</div>
}
```

----------------------------------------

TITLE: Registering OpenTelemetry with @vercel/otel (TypeScript)
DESCRIPTION: Registers OpenTelemetry using the `@vercel/otel` package within the `instrumentation.ts` file. This function configures the service name for the OpenTelemetry instance, allowing for easy identification of the application within observability tools. The service name is set to 'next-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel({ serviceName: 'next-app' })
}
```

----------------------------------------

TITLE: Creating a Web App Manifest with Next.js (TypeScript)
DESCRIPTION: This code snippet demonstrates how to create a web app manifest file (`app/manifest.ts`) in a Next.js application using TypeScript.  The manifest provides metadata about the PWA, such as its name, short name, description, and icons. The `MetadataRoute` type is imported from 'next'.  The function returns an object conforming to the `MetadataRoute.Manifest` interface, defining the PWA's properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { MetadataRoute } from 'next'

export default function manifest(): MetadataRoute.Manifest {
  return {
    name: 'Next.js PWA',
    short_name: 'NextPWA',
    description: 'A Progressive Web App built with Next.js',
    start_url: '/',
    display: 'standalone',
    background_color: '#ffffff',
    theme_color: '#000000',
    icons: [
      {
        src: '/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png',
      },
      {
        src: '/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png',
      },
    ],
  }
}
```

----------------------------------------

TITLE: Root Layout: Removing Link Tags (TSX)
DESCRIPTION: This code updates the root layout in Next.js (TSX) by removing `<link>` tags for favicon and other metadata files.  Next.js automatically adds metadata files placed in the top level of the `app` directory to the application's `<head>`, so the corresponding `<link>` tags in `layout.tsx` can be removed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <title>My App</title>
        <meta name="description" content="My App is a..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Next.js Async Configuration Setup
DESCRIPTION: Demonstrates how to use an async function for Next.js configuration, available since Next.js 12.1.0.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
// @ts-check

module.exports = async (phase, { defaultConfig }) => {
  /**
   * @type {import('next').NextConfig}
   */
  const nextConfig = {
    /* config options here */
  }
  return nextConfig
}
```

----------------------------------------

TITLE: Applying Font Utility Function (App Router)
DESCRIPTION: This code snippet demonstrates how to import and apply a font defined in a utility function to the root layout in a Next.js application using the app router. It imports the `inter` font and assigns its `className` to the `html` element for global application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_14

LANGUAGE: tsx
CODE:
```
import { inter } from './fonts'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={inter.className}>
      <body>
        <div>{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Integrating Web Vitals Component into App Router Layout
DESCRIPTION: This snippet demonstrates how to import and include the `WebVitals` client component (created in a separate file) into the root layout (`layout.js`) of a Next.js App Router application. Placing the component here ensures that Web Vitals reporting is active across all pages within the application, while keeping the client boundary minimal.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { WebVitals } from './_components/web-vitals'

export default function Layout({ children }) {
  return (
    <html>
      <body>
        <WebVitals />
        {children}
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Basic Not Found Component Implementation in Next.js (JavaScript)
DESCRIPTION: A basic implementation of the not-found.js component in JavaScript for a blog route that renders a custom 404 Not Found page with a link to return to the home page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/not-found.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function NotFound() {
  return (
    <div>
      <h2>Not Found</h2>
      <p>Could not find requested resource</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Upgrading to Latest Next.js Version Using Codemod
DESCRIPTION: Uses the Next.js codemod tool to automatically upgrade your application to the latest version. This is the recommended approach as it handles necessary code changes automatically.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-upgrading.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx @next/codemod@canary upgrade latest
```

----------------------------------------

TITLE: Installing dependencies and running the development server - npm
DESCRIPTION: These commands use npm to install the project's dependencies and then start the Next.js development server. `npm install` installs all the packages listed in the `package.json` file. `npm run dev` starts the development server, typically on port 3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Sending Web Vitals Results to External Endpoint
DESCRIPTION: This snippet demonstrates a general approach to sending collected Web Vitals metric data to a custom external analytics endpoint. It uses `navigator.sendBeacon()` for reliable asynchronous data transmission, falling back to a `fetch()` request with the `keepalive: true` option if `sendBeacon` is not available.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_6

LANGUAGE: js
CODE:
```
useReportWebVitals((metric) => {
  const body = JSON.stringify(metric)
  const url = 'https://example.com/analytics'

  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.
  if (navigator.sendBeacon) {
    navigator.sendBeacon(url, body)
  } else {
    fetch(url, { body, method: 'POST', keepalive: true })
  }
})
```

----------------------------------------

TITLE: Running Next.js in development mode using pnpm
DESCRIPTION: These commands start the Next.js development server. It can be run using npm, yarn, or pnpm. The application will be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Implementing getStaticPaths with JavaScript
DESCRIPTION: JavaScript version of implementing getStaticPaths and getStaticProps in a Next.js dynamic route to fetch GitHub repository data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
export async function getStaticPaths() {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      },
    ],
    fallback: true,
  }
}

export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Setting Cache-Control in Next.js API Route (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to manually set the `Cache-Control` header within a Next.js API Route handler function. It uses `res.setHeader` to define caching directives like `s-maxage`, controlling how long the response should be cached by the browser or CDN. This is useful for managing the caching behavior of dynamic API responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_10

LANGUAGE: js
CODE:
```
export default function handler(req, res) {
  res.setHeader('Cache-Control', 's-maxage=86400')
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Creating Next.js App with Paste and TypeScript using Yarn
DESCRIPTION: This command utilizes Yarn to initialize a new Next.js application using the 'with-paste-typescript' example template. It ensures that the project is set up with the Paste component library and TypeScript.  The application will be created in a directory named 'with-paste-typescript-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-paste-typescript/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-paste-typescript with-paste-typescript-app
```

----------------------------------------

TITLE: Basic Babel Configuration for Next.js
DESCRIPTION: This code snippet shows a basic `.babelrc` file for Next.js. It defines the `next/babel` preset, which includes all necessary configurations for compiling React applications and server-side code within a Next.js project. No plugins are added in this minimal configuration. It is essential to include the `next/babel` preset when defining your own `.babelrc` file to ensure proper compilation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/babel.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "presets": ["next/babel"],
  "plugins": []
}
```

----------------------------------------

TITLE: Creating Next.js app with Compiled using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application configured with the Compiled CSS-in-JS library. It executes the create-next-app package with the 'with-compiled-css' example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-compiled-css/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-compiled-css with-compiled-css-app
```

----------------------------------------

TITLE: Enabling Server-Side Debugging with --inspect Flag
DESCRIPTION: This snippet demonstrates how to enable server-side debugging in Next.js by using the `--inspect` flag. It shows how to pass this flag to the Node.js process using the `NODE_OPTIONS` environment variable. It also describes how to update the `dev` script in `package.json` to include the `--inspect` flag for consistent debugging. Requires Node.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_1

LANGUAGE: Bash
CODE:
```
NODE_OPTIONS='--inspect' next dev
```

----------------------------------------

TITLE: Configuration Pattern for Next.js Image Loader
DESCRIPTION: Example showing the configuration pattern needed in next.config.js when using custom image loaders. The loader configuration must be paired with a corresponding loader prop in the Image component.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-missing-loader.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  images: {
    loader: 'custom'
  }
}
```

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: This command copies the example environment variables file to a local environment variables file. This allows the user to configure the application with their own Elasticsearch credentials. The `.env.local` file will be ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Defining Global CSS Styles
DESCRIPTION: This snippet shows how to define global styles for the body element, which will be applied to all pages in the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_4

LANGUAGE: css
CODE:
```
body {
  padding: 20px 20px 60px;
  max-width: 680px;
  margin: 0 auto;
}
```

----------------------------------------

TITLE: Creating a Basic MDX Page MDX
DESCRIPTION: Shows an example of an `.mdx` file combining Markdown syntax (headings, lists, emphasis) with an imported React component (`MyComponent`). This illustrates the core capability of MDX.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_7

LANGUAGE: mdx
CODE:
```
import { MyComponent } from 'my-component'

# Welcome to my MDX page!

This is some **bold** and _italics_ text.

This is a list in markdown:

- One
- Two
- Three

Checkout my React component:

<MyComponent />
```

----------------------------------------

TITLE: Deleting Cookies in Next.js API Route (JavaScript)
DESCRIPTION: This code snippet illustrates how to delete a cookie within a Next.js API route using JavaScript.  It uses the `setHeader` method on the response object to set the 'Set-Cookie' header, effectively deleting the cookie by setting `Max-Age=0`. Additionally, it sets the HTTP status to 200 and provides a confirmation message. Requires Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_17

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')
  res.status(200).send('Cookie has been deleted.')
}
```

----------------------------------------

TITLE: Using CSS Modules in Next.js component
DESCRIPTION: This JSX snippet shows how to import and use CSS Modules in a Next.js component. It imports a CSS Module file (`styles.module.css`) and applies the styles to a specific component using the `className` attribute.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/css-global.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import styles from '../../styles.module.css'\n\nexport default function Home() {\n  return <div className={styles.container}>Hello World</div>\n}
```

----------------------------------------

TITLE: Exporting PostCSS Configuration as a Function (Incorrect)
DESCRIPTION: This snippet shows the incorrect way of exporting PostCSS configuration as a function. It uses a function to determine plugin configuration based on the environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-function.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = ({ env }) => ({
  plugins: {
    'postcss-plugin': env === 'production' ? {} : false,
  },
})
```

----------------------------------------

TITLE: Returning Props from getStaticProps (JavaScript)
DESCRIPTION: This code snippet shows how to return a `props` object from `getStaticProps`. The `props` object contains data that will be passed to the page component. In this example, a simple message is passed as a prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export async function getStaticProps(context) {
  return {
    props: { message: `Next.js is awesome` }, // will be passed to the page component as props
  }
}
```

----------------------------------------

TITLE: Configuring Static Export in Next.js
DESCRIPTION: This code snippet shows how to configure a Next.js application for static export by setting the `output` property to `'export'` in the `next.config.js` file. It also demonstrates optional configurations such as `trailingSlash`, `skipTrailingSlashRedirect`, and `distDir`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
/**
 * @type {import('next').NextConfig}
 */
const nextConfig = {
  output: 'export',

  // Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`
  // trailingSlash: true,

  // Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`
  // skipTrailingSlashRedirect: true,

  // Optional: Change the output directory `out` -> `dist`
  // distDir: 'dist',
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Configuring Static Export in Next.js
DESCRIPTION: This snippet configures Next.js to generate a static export of the application. By setting `output: 'export'` in `next.config.js`, Next.js will create an `out` directory containing the HTML, CSS, and JavaScript assets for the application after running `next build`. Note that server features are not supported with static exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_17

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  output: 'export',
}

export default nextConfig
```

----------------------------------------

TITLE: Disabling Scroll to Top on Route Change in Next.js - JSX
DESCRIPTION: This example demonstrates how to use the useRouter hook to navigate without resetting the scroll position to the top of the page by passing a second argument with scroll set to false.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button
      type="button"
      onClick={() => router.push('/dashboard', { scroll: false })}
    >
      Dashboard
    </button>
  )
}

```

----------------------------------------

TITLE: Conditional PostCSS configuration in Next.js (JavaScript)
DESCRIPTION: This JavaScript configuration file for PostCSS conditionally includes plugins based on the `NODE_ENV` environment variable. In production, it includes `postcss-flexbugs-fixes` and `postcss-preset-env` with Autoprefixer settings. In development, no transformations are applied. The object-based format to include PostCSS Plugins is used for interoperability.  Requires `postcss-flexbugs-fixes` and `postcss-preset-env` as installed dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins:
    process.env.NODE_ENV === 'production'
      ? [
          'postcss-flexbugs-fixes',
          [
            'postcss-preset-env',
            {
              autoprefixer: {
                flexbox: 'no-2009',
              },
              stage: 3,
              features: {
                'custom-properties': false,
              },
            },
          ],
        ]
      : [
          // No transformations in development
        ],
}
```

----------------------------------------

TITLE: Creating Next.js app with auth example using npm
DESCRIPTION: This command uses `create-next-app` with npm to create a new Next.js application named `auth-app` based on the `auth` example.  It leverages the `npx` command to execute the package directly from the npm registry without requiring a global installation.  The command initializes a Next.js project configured for authentication.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example auth auth-app
```

----------------------------------------

TITLE: Configuring Web Vitals Attribution in Next.js
DESCRIPTION: This code snippet shows how to enable Web Vitals attribution in a Next.js application by adding configuration to next.config.js. The example enables attribution for Cumulative Layout Shift (CLS) and Largest Contentful Paint (LCP) metrics through the experimental webVitalsAttribution option.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/webVitalsAttribution.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  experimental: {
    webVitalsAttribution: ['CLS', 'LCP'],
  },
}
```

----------------------------------------

TITLE: Next.js About Page Component (Pages Router)
DESCRIPTION: Defines a Next.js about page component within the `pages` directory using the Pages Router. It renders a heading and a link to the home page.  Requires Next.js and `next/link`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function About() {
  return (
    <div>
      <h1>About</h1>
      <Link href="/">Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Updated User Agent Detection in Next.js Middleware
DESCRIPTION: Updated implementation using the new userAgent function from next/server to detect device types. This is the recommended approach for handling user agent detection in Next.js middleware.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-parse-user-agent.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse, userAgent } from 'next/server'

export function middleware(request: NextRequest) {
  const { device } = userAgent(request)
  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'

  request.nextUrl.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(request.nextUrl)
}
```

----------------------------------------

TITLE: Setting Max Duration in Next.js TSX
DESCRIPTION: This snippet demonstrates how to set the `maxDuration` option in a TypeScript/TSX file to limit the execution time of server-side logic (rendering or API handling) for a Next.js route segment. This setting is used by deployment platforms.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
export const maxDuration = 5
```

----------------------------------------

TITLE: Configuring Expire Time in Next.js
DESCRIPTION: This snippet demonstrates how to set a custom 'expireTime' in the Next.js configuration file 'next.config.js', which determines the `Cache-Control` header for ISR enabled pages. The configuration specifies the expire time in seconds and impacts how the CDN manages stale content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/expireTime.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  // one hour in seconds
  expireTime: 3600,
}
```

----------------------------------------

TITLE: Importing Global Styles in App Router Root Layout (JSX)
DESCRIPTION: Demonstrates importing a global CSS file (`globals.css`) within the root layout component (`app/layout.js`). In the App Router, global styles can be imported directly in layouts, pages, or components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_31

LANGUAGE: jsx
CODE:
```
import '../styles/globals.css'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Creating Next.js app with Emotion (pnpm)
DESCRIPTION: This command utilizes pnpm to initialize a new Next.js application with Emotion.  It uses `create next-app` along with the `with-emotion-swc` example to scaffold the project.  The new app will be located in the `with-emotion-swc-app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-emotion/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-emotion-swc with-emotion-swc-app
```

----------------------------------------

TITLE: Creating Next.js app using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the Zustand example. It initializes a project named `with-zustand-app` based on the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zustand/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-zustand with-zustand-app
```

----------------------------------------

TITLE: Creating a Page Component in TypeScript that Uses BaseButton
DESCRIPTION: This TypeScript snippet showcases a 'Page' component that imports the 'BaseButton' component and its corresponding styles from 'page.module.css'. It renders the button within the page, applying its primary styling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import { BaseButton } from './base-button'
import styles from './page.module.css'

export default function Page() {
  return <BaseButton className={styles.primary} />
}
```

----------------------------------------

TITLE: Caching Entire Route Page (JSX)
DESCRIPTION: Applies the `'use cache'` directive at the top of a Next.js App Router `page.js` file. This marks the page segment for prerendering and is necessary, along with a cached layout, to cache an entire route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_7

LANGUAGE: JSX
CODE:
```
'use cache'

export default function Layout({ children }) {
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Listening to Navigation Events in Next.js - JSX
DESCRIPTION: This snippet shows how to utilize the usePathname and useSearchParams hooks to listen for changes in the navigation state within a React component. It logs the current URL structure whenever the pathname or search parameters change.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
'use client'

import { useEffect } from 'react'
import { usePathname, useSearchParams } from 'next/navigation'

export function NavigationEvents() {
  const pathname = usePathname()
  const searchParams = useSearchParams()

  useEffect(() => {
    const url = `${pathname}?${searchParams}`
    console.log(url)
    // You can now use the current URL
    // ...
  }, [pathname, searchParams])

  return '...'
}

```

----------------------------------------

TITLE: Replacing Dynamic href in next/link - JSX
DESCRIPTION: These code snippets demonstrate how to change a dynamic href into a direct path in the next/link component when using the App Router in Next.js. The first snippet shows the original dynamic href, and the following snippet illustrates replacing the dynamic segment with a direct value, which prevents the error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-dir-dynamic-href.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
<Link
  href={{
    pathname: '/route/[slug]',
    query: { slug: '1' },
  }}
>
  link
</Link>
```

LANGUAGE: JavaScript
CODE:
```
<Link href="/route/[slug]?slug=1">link</Link>
```

LANGUAGE: JavaScript
CODE:
```
<Link href="/route/1">link</Link>
```

----------------------------------------

TITLE: Creating Active Navigation Link with useSelectedLayoutSegment
DESCRIPTION: Implements a dynamic blog navigation link that changes style based on the current active segment
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segment.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
'use client'

import Link from 'next/link'
import { useSelectedLayoutSegment } from 'next/navigation'

export default function BlogNavLink({
  slug,
  children,
}: {
  slug: string
  children: React.ReactNode
}) {
  const segment = useSelectedLayoutSegment()
  const isActive = slug === segment

  return (
    <Link
      href={`/blog/${slug}`}
      style={{ fontWeight: isActive ? 'bold' : 'normal' }}
    >
      {children}
    </Link>
  )
}
```

----------------------------------------

TITLE: Configuring i18n with Sub-path and Domain Routing
DESCRIPTION: This configuration snippet for `next.config.js` demonstrates how to enable i18n routing in Next.js. It defines the supported locales, the default locale, and optionally configures domain routing by mapping domains to their default locales. The `http: true` option is included for local testing of domain routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  i18n: {
    // These are all the locales you want to support in
    // your application
    locales: ['en-US', 'fr', 'nl-NL'],
    // This is the default locale you want to be used when visiting
    // a non-locale prefixed path e.g. `/hello`
    defaultLocale: 'en-US',
    // This is a list of locale domains and the default locale they
    // should handle (these are only required when setting up domain routing)
    // Note: subdomains must be included in the domain value to be matched e.g. "fr.example.com".
    domains: [
      {
        domain: 'example.com',
        defaultLocale: 'en-US',
      },
      {
        domain: 'example.nl',
        defaultLocale: 'nl-NL',
      },
      {
        domain: 'example.fr',
        defaultLocale: 'fr',
        // an optional http field can also be used to test
        // locale domains locally with http instead of https
        http: true,
      },
    ],
  },
}
```

----------------------------------------

TITLE: Rendering Home component test (Pages Router)
DESCRIPTION: This test checks if the `<Home />` component, located in `pages/index.js`, renders a heading element. It utilizes `@testing-library/react` for rendering and querying the component and `@testing-library/jest-dom` for enhanced Jest matchers. The test renders the component, retrieves the heading, and asserts that it is present in the document.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_16

LANGUAGE: jsx
CODE:
```
import '@testing-library/jest-dom'
import { render, screen } from '@testing-library/react'
import Home from '../pages/index'

describe('Home', () => {
  it('renders a heading', () => {
    render(<Home />)

    const heading = screen.getByRole('heading', { level: 1 })

    expect(heading).toBeInTheDocument()
  })
})
```

----------------------------------------

TITLE: Extending Web Request API with User Agent in Next.js using TypeScript
DESCRIPTION: This TypeScript snippet demonstrates a middleware function in Next.js that utilizes a user agent helper to determine the device type (e.g., mobile, desktop) from the request. It modifies the request URL parameters based on the device type and uses NextResponse to rewrite the URL. Dependencies include 'next/server' for accessing NextRequest, NextResponse, and the userAgent function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/userAgent.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { NextRequest, NextResponse, userAgent } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const { device } = userAgent(request)

  // device.type can be: 'mobile', 'tablet', 'console', 'smarttv',
  // 'wearable', 'embedded', or undefined (for desktop browsers)
  const viewport = device.type || 'desktop'

  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Conditional Route Rendering in Typescript
DESCRIPTION: This code snippet shows how to conditionally render routes based on user role using Parallel Routes. The `checkUserRole` function determines the user's role, and the layout renders either the `admin` or `user` slot accordingly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { checkUserRole } from '@/lib/auth'

export default function Layout({
  user,
  admin,
}: {
  user: React.ReactNode
  admin: React.ReactNode
}) {
  const role = checkUserRole()
  return role === 'admin' ? admin : user
}
```

----------------------------------------

TITLE: Running Next.js in development mode with npm
DESCRIPTION: These commands first install the required node modules using `npm install` and then start the Next.js development server using `npm run dev`.  This makes the application available for local development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Setting Max Duration in Next.js JS
DESCRIPTION: This snippet demonstrates how to set the `maxDuration` option in a JavaScript file to limit the execution time of server-side logic (rendering or API handling) for a Next.js route segment. This setting is used by deployment platforms.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_11

LANGUAGE: js
CODE:
```
export const maxDuration = 5
```

----------------------------------------

TITLE: Handling Web Vitals Metrics by Name (App Router, JSX)
DESCRIPTION: This JavaScript code snippet shows how to handle specific web vital metrics by their `name` property using a switch statement inside the `useReportWebVitals` hook within the App Router in Next.js. It handles First Contentful Paint (FCP) and Largest Contentful Paint (LCP) metrics as examples.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    switch (metric.name) {
      case 'FCP': {
        // handle FCP results
      }
      case 'LCP': {
        // handle LCP results
      }
      // ...
    }
  })
}
```

----------------------------------------

TITLE: Caching External Data for generateViewport (Next.js JSX)
DESCRIPTION: This snippet demonstrates how to fix the error when using external data in `generateViewport` by leveraging caching. Adding the `"use cache"` directive to the data fetching logic within `generateViewport` allows Next.js to cache the result and prerender the viewport metadata, resolving the dependency on uncached data.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-viewport.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { db } from './db'

export async function generateViewport() {
  "use cache"
  const { width, initialScale } = await db.query('viewport-size')
  return {
    width,
    initialScale,
  }
}

export default async function Layout({ children }) {
  return ...
}
```

----------------------------------------

TITLE: Handling Form Submission Errors - JavaScript
DESCRIPTION: This code snippet demonstrates how to handle form submission errors in a Next.js component using JavaScript. It uses React state to track loading and error states and displays an error message to the user if the submission fails.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import React, { useState } from 'react'

export default function Page() {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)

  async function onSubmit(event) {
    event.preventDefault()
    setIsLoading(true)
    setError(null) // Clear previous errors when a new request starts

    try {
      const formData = new FormData(event.currentTarget)
      const response = await fetch('/api/submit', {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        throw new Error('Failed to submit the data. Please try again.')
      }

      // Handle response if necessary
      const data = await response.json()
      // ...
    } catch (error) {
      // Capture the error message to display to the user
      setError(error.message)
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div>
      {error && <div style={{ color: 'red' }}>{error}</div>}
      <form onSubmit={onSubmit}>
        <input type="text" name="name" />
        <button type="submit" disabled={isLoading}>
          {isLoading ? 'Loading...' : 'Submit'}
        </button>
      </form>
    </div>
  )
}
```

----------------------------------------

TITLE: Loading Scripts in Web Worker - TypeScript
DESCRIPTION: This code snippet demonstrates how to load a third-party script into a web worker using the `worker` strategy in Next.js with TypeScript. This offloads the script execution to a web worker, improving main thread performance. Requires `nextScriptWorkers` to be enabled. Requires `next/script` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function Home() {
  return (
    <>
      <Script src="https://example.com/script.js" strategy="worker" />
    </>
  )
}
```

----------------------------------------

TITLE: Optimizing Icon Imports in React
DESCRIPTION: This snippet demonstrates how to optimize icon imports in React applications to reduce compilation and bundling time. Instead of importing all icons from a library, import only the specific icons that are needed.  It requires the `react-icons` library installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
// Instead of this:
import { Icon1, Icon2 } from 'react-icons/md'

// Do this:
import Icon1 from 'react-icons/md/Icon1'
import Icon2 from 'react-icons/md/Icon2'
```

----------------------------------------

TITLE: Passing Dynamic searchParams Prop Without Immediate Dynamism (JSX)
DESCRIPTION: Demonstrates passing the dynamic `searchParams` prop received by the page component to a child component (`Table`). The page itself remains potentially prerenderable if it doesn't access dynamic APIs directly, deferring dynamism to the child component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_10

LANGUAGE: JSX
CODE:
```
import { Table } from './table'

export default function Page({ searchParams }) {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Table searchParams={searchParams} />
    </section>
  )
}
```

----------------------------------------

TITLE: Creating Next.js Application with Official Example
DESCRIPTION: Demonstrates how to create a Next.js project using an official example from the Next.js repository, specifying the example name and optional project name.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/create-next-app.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --example [example-name] [your-project-name]
```

----------------------------------------

TITLE: Installing @next/third-parties package
DESCRIPTION: This command installs the `@next/third-parties` package along with the latest version of Next.js using npm.  It's recommended to use the latest or canary versions for experimental features.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install @next/third-parties@latest next@latest
```

----------------------------------------

TITLE: Importing Global CSS - TSX
DESCRIPTION: This code imports a global CSS file (`../index.css`) into the `app/layout.tsx` file. This allows the CSS styles defined in `index.css` to be applied globally to the application. The Metadata API is used to define the page title and description.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import '../index.css'

export const metadata = {
  title: 'React App',
  description: 'Web site created with Next.js.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Reading Params in React Client Components - TypeScript
DESCRIPTION: In a TypeScript React Client Component, utilize React's `use` function to read parameters which are provided as a promise. This is suitable for components that cannot be asynchronous. This code expects a promise resolving to an object containing a `slug` string.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_12

LANGUAGE: tsx
CODE:
```
"use strict";

import { use } from 'react';

export default function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = use(params);
}

```

----------------------------------------

TITLE: Creating a new Next.js app with TypeScript and GraphQL
DESCRIPTION: This code snippet shows how to create a new Next.js application using `create-next-app` with the `with-typescript-graphql` example. It shows the usage with npm, yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-typescript-graphql with-typescript-graphql-app
```

----------------------------------------

TITLE: Installing Next.js with Expo TypeScript Using NPX
DESCRIPTION: Command to create a new Next.js application with Expo TypeScript template using npx create-next-app
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-expo-typescript with-expo-typescript-app
```

----------------------------------------

TITLE: Handling User Login API Request - Next.js Pages Router - TypeScript/JavaScript
DESCRIPTION: A Next.js Pages Router API route handler designed to process POST requests for user login. It extracts email and password from the request body and uses a `signIn` function (likely from an authentication library) to authenticate the user. It responds with a success status or handles specific authentication errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'
import { signIn } from '@/auth'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const { email, password } = req.body
    await signIn('credentials', { email, password })

    res.status(200).json({ success: true })
  } catch (error) {
    if (error.type === 'CredentialsSignin') {
      res.status(401).json({ error: 'Invalid credentials.' })
    } else {
      res.status(500).json({ error: 'Something went wrong.' })
    }
  }
}
```

LANGUAGE: JavaScript
CODE:
```
import { signIn } from '@/auth'

export default async function handler(req, res) {
  try {
    const { email, password } = req.body
    await signIn('credentials', { email, password })

    res.status(200).json({ success: true })
  } catch (error) {
    if (error.type === 'CredentialsSignin') {
      res.status(401).json({ error: 'Invalid credentials.' })
    } else {
      res.status(500).json({ error: 'Something went wrong.' })
    }
  }
}
```

----------------------------------------

TITLE: Updating Session Cookie Expiration in Next.js App Router (TypeScript)
DESCRIPTION: This asynchronous function `updateSession` retrieves the session cookie, decrypts its payload, and if valid, resets the cookie's expiration time to 7 days from the current moment using the Next.js `cookies()` API. This is useful for extending a user's login session.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_11

LANGUAGE: ts
CODE:
```
import 'server-only';
import { cookies } from 'next/headers';
import { decrypt } from '@/app/lib/session';

export async function updateSession() {
  const session = (await cookies()).get('session')?.value;
  const payload = await decrypt(session);

  if (!session || !payload) {
    return null;
  }

  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);

  const cookieStore = await cookies();
  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expires,
    sameSite: 'lax',
    path: '/',
  });
}
```

----------------------------------------

TITLE: Reading Cookies in Next.js API Route (JavaScript)
DESCRIPTION: This code snippet shows how to read cookies within a Next.js API route using JavaScript. It defines an asynchronous handler function that takes a request (req) and response (res) object as arguments, and accesses the 'authorization' cookie from the request's cookies object. The accessed cookie value can then be used within the handler.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_15

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  const auth = req.cookies.authorization
  // ...
}
```

----------------------------------------

TITLE: Deleting Query Parameters in Next.js Middleware (TS)
DESCRIPTION: This code snippet demonstrates how to delete a query parameter from the URL in a Next.js middleware. It imports `NextRequest` and `NextResponse` from `next/server`, accesses the `nextUrl` property of the request, deletes the specified query parameter using `searchParams.delete()`, and then rewrites the request to the modified URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/deleting-query-params-in-middlewares.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

export default function middleware(request: NextRequest) {
  const nextUrl = request.nextUrl
  nextUrl.searchParams.delete('key') // <-- this is now possible! 🎉
  return NextResponse.rewrite(nextUrl)
}
```

----------------------------------------

TITLE: Defining Theme Color with Media Queries in JavaScript
DESCRIPTION: This snippet illustrates how to create a viewport object in JavaScript that includes dynamic theme colors based on media queries for responsive design.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
export const viewport = {
  themeColor: [
    { media: '(prefers-color-scheme: light)', color: 'cyan' },
    { media: '(prefers-color-scheme: dark)', color: 'black' },
  ],
}
```

----------------------------------------

TITLE: Client-side Instrumentation (TypeScript)
DESCRIPTION: This snippet demonstrates how to set up client-side instrumentation in a Next.js application using TypeScript. It includes examples for performance monitoring using `performance.mark`, logging analytics initialization, and setting up error tracking with `window.addEventListener`.  The code is intended to run before the application's frontend code starts executing and requires no specific exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation-client.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
// Set up performance monitoring
performance.mark('app-init')

// Initialize analytics
console.log('Analytics initialized')

// Set up error tracking
window.addEventListener('error', (event) => {
  // Send to your error tracking service
  reportError(event.error)
})
```

----------------------------------------

TITLE: Copying environment variable file
DESCRIPTION: This command copies the example environment variable file to a local environment file.  This allows local configuration without affecting the original example file, and the .env.local file is git ignored.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Fetching data with getStaticProps (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `getStaticProps` in a Next.js page component to fetch data from an external API (GitHub) during build time. The fetched data, specifically the repository information, is passed as props to the page component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Cypress Component Configuration (TypeScript)
DESCRIPTION: Configures Cypress for Component Testing using TypeScript.  Specifies Next.js as the framework and webpack as the bundler.  Requires the `cypress` package to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_11

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'cypress'

export default defineConfig({
  component: {
    devServer: {
      framework: 'next',
      bundler: 'webpack',
    },
  },
})
```

----------------------------------------

TITLE: Reading Files in getStaticProps - JSX
DESCRIPTION: This code snippet demonstrates how to read files from the file system within `getStaticProps` using `process.cwd()` to construct the correct file path. It fetches a list of posts from the 'posts' directory, reads their content, and passes the data as props to the `Blog` component. It uses `fs.promises` for asynchronous file operations and `path` module for path manipulation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import { promises as fs } from 'fs'
import path from 'path'

// posts will be populated at build time by getStaticProps()
function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li>
          <h3>{post.filename}</h3>
          <p>{post.content}</p>
        </li>
      ))}
    </ul>
  )
}

// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getStaticProps() {
  const postsDirectory = path.join(process.cwd(), 'posts')
  const filenames = await fs.readdir(postsDirectory)

  const posts = filenames.map(async (filename) => {
    const filePath = path.join(postsDirectory, filename)
    const fileContents = await fs.readFile(filePath, 'utf8')

    // Generally you would parse/transform the contents
    // For example you can transform markdown to HTML here

    return {
      filename,
      content: fileContents,
    }
  })
  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts: await Promise.all(posts),
    },
  }
}

export default Blog
```

----------------------------------------

TITLE: Installing dependencies and running the development server - pnpm
DESCRIPTION: These commands use pnpm to install the project's dependencies and then start the Next.js development server. `pnpm install` installs all the packages listed in the `package.json` file. `pnpm dev` starts the development server, typically on port 3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Jest using pnpm
DESCRIPTION: This snippet provides the command to create a new Next.js application set up with Jest using pnpm. It follows the same example 'with-jest-babel' for consistency. The output will be a new application folder ready for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-jest-babel with-jest-babel-app
```

----------------------------------------

TITLE: Navigating with next/link Locale Prop
DESCRIPTION: Shows how to use the `locale` prop on `next/link` to specify the target locale when transitioning to a new route. This overrides the default locale handling for that link. Requires the `next/link` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function IndexPage(props) {
  return (
    <Link href="/another" locale="fr">
      To /fr/another
    </Link>
  )
}
```

----------------------------------------

TITLE: Update Next.js and enable Turbopack
DESCRIPTION: This command updates Next.js to the latest version and then runs the development server with Turbopack enabled. Turbopack is a bundler that can significantly improve local development performance. Requires npm and a Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install next@latest
npm run dev --turbopack
```

----------------------------------------

TITLE: Installing FCM Example with Yarn
DESCRIPTION: Command to create a new Next.js application with Firebase Cloud Messaging example using Yarn package manager
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-cloud-messaging/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

----------------------------------------

TITLE: Configuring Next.js MD File Extension Javascript
DESCRIPTION: Demonstrates how to modify the `@next/mdx` configuration in `next.config.mjs` to also process `.md` files in addition to `.mdx` files, by updating the `extension` option for webpack.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_4

LANGUAGE: js
CODE:
```
const withMDX = createMDX({
  extension: /\.(md|mdx)$/,
})
```

----------------------------------------

TITLE: Creating Next.js app with npx
DESCRIPTION: This command uses npx to create a new Next.js application named 'with-i18n-next-intl-app' using the 'with-i18n-next-intl' example. It requires Node.js and npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-next-intl/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-i18n-next-intl with-i18n-next-intl-app
```

----------------------------------------

TITLE: Handling Script Loading Errors with onError in Next.js (Pages Router) - JSX
DESCRIPTION: This code demonstrates how to use the `onError` property of the `next/script` component to handle script loading errors within a Next.js application using the Pages Router. It logs the error to the console when the script fails to load.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_17

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://example.com/script.js"
        onError={(e: Error) => {
          console.error('Script failed to load', e)
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Client Component with Dynamic Import - TSX
DESCRIPTION: This code defines a client-side component using the `dynamic` import from `next/dynamic`. It imports the `App` component from a relative path and disables server-side rendering using `ssr: false`. The `'use client'` directive designates this file as a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
'use client'

import dynamic from 'next/dynamic'

const App = dynamic(() => import('../../App'), { ssr: false })

export function ClientOnly() {
  return <App />
}
```

----------------------------------------

TITLE: Using Custom Cache Configuration in TSX Component
DESCRIPTION: This TSX snippet shows how to utilize a custom cache profile, 'blog', in a Next.js component using the unstable_cacheLife from 'next/cache'. The function incorporates the 'use cache' directive and employs the fetch API to retrieve data. It requires setting up a cache profile in Next.js configuration and using the directive correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cacheLife.mdx#2025-04-21_snippet_2

LANGUAGE: TSX
CODE:
```
import { unstable_cacheLife as cacheLife } from 'next/cache'

export async function getCachedData() {
  'use cache'
  cacheLife('blog')
  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Configuring basePath in Next.js Configuration
DESCRIPTION: Set the base path for the entire Next.js application by modifying the next.config.js file. This allows deployment under a specific sub-path like '/docs'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/basePath.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  basePath: '/docs',
}
```

----------------------------------------

TITLE: Using Sass Variable in App Router Component | JSX
DESCRIPTION: Imports the exported variables from a Sass module file and uses the `primaryColor` variable's value to dynamically set the text color of an element in a React component. This example demonstrates usage within the Next.js App Router (`app` directory).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/sass.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
// maps to root `/` URL

import variables from './variables.module.scss'

export default function Page() {
  return <h1 style={{ color: variables.primaryColor }}>Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Sending Google Tag Manager events (Pages Router - JSX)
DESCRIPTION: This code snippet illustrates how to send events to Google Tag Manager using the `sendGTMEvent` function from `@next/third-parties/google` within a Pages Router component. It defines a button that, when clicked, dispatches a custom event 'buttonClicked' with the value 'xyz'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
import { sendGTMEvent } from '@next/third-parties/google'

export function EventButton() {
  return (
    <div>
      <button
        onClick={() => sendGTMEvent({ event: 'buttonClicked', value: 'xyz' })
      >
        Send Event
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Handling Script Loading Errors with onError in Next.js (App Router) - JSX
DESCRIPTION: This code shows how to use the `onError` property of the `next/script` component to handle script loading errors within a Next.js application using the App Router. It logs the error to the console when the script fails to load.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_16

LANGUAGE: jsx
CODE:
```
'use client'

import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://example.com/script.js"
        onError={(e) => {
          console.error('Script failed to load', e)
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Extending Page Extensions (Pages Router)
DESCRIPTION: This code snippet shows how to extend the default page extensions in Next.js for the Pages Router. It modifies the `pageExtensions` array in `next.config.js` to include `.mdx`, `.md`, `.jsx`, `.js`, `.tsx`, and `.ts` files. This affects all pages, `middleware.js`, `instrumentation.js`, `_document.js`, `_app.js`, and `pages/api/`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/pageExtensions.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  pageExtensions: ['mdx', 'md', 'jsx', 'js', 'tsx', 'ts'],
}
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses Yarn to generate a new Next.js application with a basic CSS example. It sets up the project, installs dependencies, and offers a foundation for building with CSS Modules. The new application will be located in a folder named 'basic-css-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/basic-css/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example basic-css basic-css-app
```

----------------------------------------

TITLE: Implementing Forbidden Component in Next.js (JavaScript)
DESCRIPTION: This code snippet shows how to create a Forbidden component in Next.js using JavaScript. It renders the same UI as the TypeScript version, with a heading, message, and a link to return home when access is forbidden.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/forbidden.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Forbidden() {
  return (
    <div>
      <h2>Forbidden</h2>
      <p>You are not authorized to access this resource.</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Running Cypress for the first time
DESCRIPTION: Executes the `cypress:open` script defined in `package.json` to open the Cypress testing suite. Requires the `cypress:open` script to be defined in `package.json`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npm run cypress:open
```

----------------------------------------

TITLE: Accessing Query Parameters in Next.js JavaScript
DESCRIPTION: In this JavaScript snippet, the search results page accesses the search query using the 'searchParams' which is passed as a prop. It uses 'getSearchResults' to fetch data related to the query and renders the data accordingly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_7

LANGUAGE: JavaScript
CODE:
```
import { getSearchResults } from '@/lib/search'

export default async function SearchPage({ searchParams }) {
  const results = await getSearchResults((await searchParams).query)

  return <div>...</div>
}
```

----------------------------------------

TITLE: Handling Redirects in getStaticProps (TypeScript)
DESCRIPTION: This code snippet demonstrates how to handle redirects within the `getStaticProps` function in a Next.js page. It fetches data, and if the data is not available (e.g., the API returns an error), it returns a redirect object to navigate the user to a different page (e.g., a 404 page). The `permanent` property specifies whether the redirect is permanent or temporary, and `destination` specifies the target URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-redirect-gssp.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import type { InferGetStaticPropsType, GetStaticProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()

  if (!repo) {
    return {
      redirect: {
        permanent: false, // or true
        destination: '/404',
      },
    }
  }

  return { props: { repo } }
}) satisfies GetStaticProps<{ repo: Repo }>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Setting Placeholder Property on Next.js Image Component
DESCRIPTION: Example of setting the placeholder property on a Next.js Image component. This property determines what to display while the image is loading, with options for blur, empty space, or a data URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
placeholder = 'empty' // "empty" | "blur" | "data:image/..."
```

----------------------------------------

TITLE: Adding Cypress CI Scripts to package.json
DESCRIPTION: Adds scripts to `package.json` for running Cypress tests in a Continuous Integration (CI) environment.  Includes scripts for both E2E and Component tests, with and without a headless browser. Requires the `start-server-and-test` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_15

LANGUAGE: json
CODE:
```
{
  "scripts": {
    //...
    "e2e": "start-server-and-test dev http://localhost:3000 \"cypress open --e2e\"",
    "e2e:headless": "start-server-and-test dev http://localhost:3000 \"cypress run --e2e\"",
    "component": "cypress open --component",
    "component:headless": "cypress run --component"
  }
}
```

----------------------------------------

TITLE: Configuring Image Formats in Next.js
DESCRIPTION: This snippet configures the default image formats supported by the Next.js Image Optimization API. The configuration specifies an array of formats that the API should accept, with the first matching format used for the response. If no formats match, the original image format is used.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_22

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    formats: ['image/webp'],
  },
}
```

----------------------------------------

TITLE: Adding a Title to a Page using Next.js Head - JSX
DESCRIPTION: This code snippet demonstrates how to add a title to a page using the `next/head` component in Next.js. It imports the `Head` component and uses it to define the `<title>` tag within a functional component. This will set the title of the HTML document for the page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/head.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Head from 'next/head'

function IndexPage() {
  return (
    <div>
      <Head>
        <title>My page title</title>
      </Head>
      <p>Hello world!</p>
    </div>
  )
}

export default IndexPage
```

----------------------------------------

TITLE: Running Next.js Development Server (pnpm)
DESCRIPTION: These commands use pnpm to install project dependencies with pnpm install and then launch the Next.js development server using pnpm dev. This enables local development of the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Enabling TypedRoutes in Next.js Configuration
DESCRIPTION: This configuration enables experimental support for statically typed links in Next.js projects. This feature requires using the App Router and TypeScript in your project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/typedRoutes.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    typedRoutes: true,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Managing Configuration Changes in Next.js with JavaScript
DESCRIPTION: This snippet covers the adjustment of Next.js config files to accommodate changes in features such as `bundlePagesExternals` and `serverComponentsExternalPackages`, showing their transition to stable releases as `bundlePagesRouterDependencies` and `serverExternalPackages`. This maintenance is vital for managing build and deployment aspects efficiently.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_12

LANGUAGE: js
CODE:
```
/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Before\n  experimental: {\n    bundlePagesExternals: true,\n  },\n\n  // After\n  bundlePagesRouterDependencies: true,\n}\n\nmodule.exports = nextConfig
```

LANGUAGE: js
CODE:
```
/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Before\n  experimental: {\n    serverComponentsExternalPackages: ['package-name'],\n  },\n\n  // After\n  serverExternalPackages: ['package-name'],\n}\n\nmodule.exports = nextConfig
```

----------------------------------------

TITLE: Allowing Server Action Origins in Multi-Zones
DESCRIPTION: This configuration is specific to the App Router and Server Actions within a Multi-Zone setup. It explicitly lists the user-facing production domains that are allowed to send requests triggering Server Actions. This is necessary because the zone application handling the action might be on a different internal domain than the user's browser is currently visiting, and this prevents cross-origin security issues.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const nextConfig = {
  experimental: {
    serverActions: {
      allowedOrigins: ['your-production-domain.com'],
    },
  },
}
```

----------------------------------------

TITLE: Setting Permissions-Policy Header - JavaScript
DESCRIPTION: This snippet demonstrates how to add the `Permissions-Policy` header to your Next.js headers configuration. This header allows you to selectively enable or disable browser features and APIs (like camera, microphone, geolocation) for your site and any embedded content (iframes), providing fine-grained control over browser capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_17

LANGUAGE: js
CODE:
```
{
  key: 'Permissions-Policy',
  value: 'camera=(), microphone=(), geolocation=(), browsing-topics=()'
}
```

----------------------------------------

TITLE: Importing Google Font with Optional Display Strategy - Next.js - JSX
DESCRIPTION: This snippet demonstrates how to import a Google Font with the display strategy set to 'optional'. It ensures that the text is visible while the font is loading, minimizing layout shifts. The example uses the Head component from Next.js to include the font link in the HTML head. Dependencies include Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/google-font-display.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Head from 'next/head'\n\nexport default function IndexPage() {\n  return (\n    <div>\n      <Head>\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Krona+One&display=optional\"\n          rel=\"stylesheet\"\n        />\n      </Head>\n    </div>\n  )\n}
```

----------------------------------------

TITLE: Creating a Stream from an Iterator - JavaScript
DESCRIPTION: This JavaScript snippet implements a function to convert an async iterator into a ReadableStream. It simulates producing data with a generator function and returns the stream in a GET route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream
function iteratorToStream(iterator) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    },
  })
}

function sleep(time) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}
```

----------------------------------------

TITLE: Creating Next.js app with filbert-js example using pnpm
DESCRIPTION: This command utilizes pnpm to create a Next.js application based on the provided filbert-js example. pnpm efficiently manages node_modules and executes the create-next-app script.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-filbert/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-filbert with-filbert-app
```

----------------------------------------

TITLE: Using Locale in getStaticProps and Opting Out
DESCRIPTION: Shows how `getStaticProps` receives the `locale` parameter for the page being generated. It fetches data based on the locale and demonstrates returning `notFound: true` to skip static generation for a specific locale if data is unavailable. Used with `getStaticProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
export async function getStaticProps({ locale }) {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const res = await fetch(`https://.../posts?locale=${locale}`)
  const posts = await res.json()

  if (posts.length === 0) {
    return {
      notFound: true,
    }
  }

  // By returning { props: posts }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts,
    },
  }
}
```

----------------------------------------

TITLE: Enabling Draft Mode in API Route (JavaScript)
DESCRIPTION: This JavaScript code snippet shows how to enable Draft Mode by setting a cookie using `res.setDraftMode({ enable: true })` within an API route handler function. This sets a cookie that triggers Draft Mode for statically generated pages on subsequent requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default function handler(req, res) {
  // ...
  res.setDraftMode({ enable: true })
  // ...
}
```

----------------------------------------

TITLE: Using Custom Cache Configuration in JSX Component
DESCRIPTION: This JSX snippet demonstrates the use of a custom cache profile, 'blog', within a Next.js component, employing the unstable_cacheLife function from 'next/cache'. It uses the 'use cache' directive and fetch API to load data, highlighting the integration of custom cache settings in runtime components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cacheLife.mdx#2025-04-21_snippet_3

LANGUAGE: JSX
CODE:
```
import { unstable_cacheLife as cacheLife } from 'next/cache'

export async function getCachedData() {
  'use cache'
  cacheLife('blog')
  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: ESLint Accessibility Plugin Configuration
DESCRIPTION: Integrated ESLint rules for catching accessibility issues in Next.js projects using eslint-plugin-jsx-a11y
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/accessibility.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Default accessibility linting rules
// - aria-props
// - aria-proptypes
// - aria-unsupported-elements
// - role-has-required-aria-props
// - role-supports-aria-props
```

----------------------------------------

TITLE: MDX Configuration with Plugins
DESCRIPTION: Next.js MDX configuration demonstrating how to include remark and rehype plugins for advanced MDX processing
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')({
  options: {
    remarkPlugins: [],
    rehypePlugins: [],
  },
})
module.exports = withMDX()
```

----------------------------------------

TITLE: Using waitUntil for Background Tasks in Next.js Middleware
DESCRIPTION: Explains and demonstrates the use of the `event.waitUntil()` method available on `NextFetchEvent`. This method allows the Middleware to continue executing a promise in the background, even after the response has been sent, useful for tasks like analytics logging.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_12

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server';
import type { NextFetchEvent, NextRequest } from 'next/server';

export function middleware(req: NextRequest, event: NextFetchEvent) {
  event.waitUntil(
    fetch('https://my-analytics-platform.com', {
      method: 'POST',
      body: JSON.stringify({ pathname: req.nextUrl.pathname }),
    })
  );

  return NextResponse.next();
}
```

----------------------------------------

TITLE: Creating Next.js Forms App with Yarn
DESCRIPTION: Command to create a new Next.js application with forms example using Yarn package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/next-forms/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example next-forms next-forms-app
```

----------------------------------------

TITLE: Creating Custom Reusable Cache Profiles
DESCRIPTION: Define custom cache profiles in Next.js configuration with specific stale, revalidate, and expire times
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
    cacheLife: {
      biweekly: {
        stale: 60 * 60 * 24 * 14, // 14 days
        revalidate: 60 * 60 * 24, // 1 day
        expire: 60 * 60 * 24 * 14, // 14 days
      },
    },
  },
}

module.exports = nextConfig
```

LANGUAGE: javascript
CODE:
```
const nextConfig = {
  experimental: {
    dynamicIO: true,
    cacheLife: {
      biweekly: {
        stale: 60 * 60 * 24 * 14, // 14 days
        revalidate: 60 * 60 * 24, // 1 day
        expire: 60 * 60 * 24 * 14, // 14 days
      },
    },
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Install Dependencies and Run Development Server (npm)
DESCRIPTION: These commands install the project dependencies using npm and then start the Next.js development server. Requires npm to be installed.  The server will typically run on localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Defining Color Scheme in TypeScript
DESCRIPTION: This snippet demonstrates how to define a viewport object in TypeScript that sets the color scheme for the application using the color-scheme meta tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import type { Viewport } from 'next'

export const viewport: Viewport = {
  colorScheme: 'dark',
}
```

----------------------------------------

TITLE: Configuring basePath in next.config.mjs
DESCRIPTION: This code snippet demonstrates how to configure the `basePath` in the `next.config.mjs` file in Next.js.  It accesses the environment variable `NEXT_PUBLIC_BASE_PATH` to set the base path for the application. This is useful for deploying the application to a sub-path on a domain.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_23

LANGUAGE: js
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export', // Outputs a Single-Page Application (SPA).
  distDir: './dist', // Changes the build output directory to `./dist/`.
  basePath: process.env.NEXT_PUBLIC_BASE_PATH, // Sets the base path to `/some-base-path`.
}

export default nextConfig
```

----------------------------------------

TITLE: Deleting a Cookie in NextResponse - TypeScript
DESCRIPTION: Removes a cookie from the response based on the provided cookie name.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// Given incoming request /home
let response = NextResponse.next()
// Returns true for deleted, false is nothing is deleted
response.cookies.delete('experiments')
```

----------------------------------------

TITLE: Creating Next.js App with Realm-Web Example using yarn
DESCRIPTION: This command uses `create next-app` with `yarn` to bootstrap a new Next.js application using the `with-realm-web` example. It creates a new directory named `with-realm-web-app` containing the initialized project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-realm-web/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-realm-web with-realm-web-app
```

----------------------------------------

TITLE: Handling Custom Next.js Metrics
DESCRIPTION: This code snippet demonstrates how to handle custom Next.js metrics such as hydration time, route change to render time, and render time using a switch statement. It uses the `reportWebVitals` function to access the metrics.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
export function reportWebVitals(metric) {
  switch (metric.name) {
    case 'Next.js-hydration':
      // handle hydration results
      break
    case 'Next.js-route-change-to-render':
      // handle route-change to render results
      break
    case 'Next.js-render':
      // handle render results
      break
    default:
      break
  }
}
```

----------------------------------------

TITLE: Middleware to Prefix Default Locale
DESCRIPTION: This Next.js Middleware snippet implements a workaround to prefix the default locale ('default') path. It checks if the current URL locale is 'default', skips API routes and public files, reads the preferred locale from a cookie or defaults to 'en', and redirects the user to the path prefixed with that locale.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

const PUBLIC_FILE = /\.(.*)$/

export async function middleware(req: NextRequest) {
  if (
    req.nextUrl.pathname.startsWith('/_next') ||
    req.nextUrl.pathname.includes('/api/') ||
    PUBLIC_FILE.test(req.nextUrl.pathname)
  ) {
    return
  }

  if (req.nextUrl.locale === 'default') {
    const locale = req.cookies.get('NEXT_LOCALE')?.value || 'en'

    return NextResponse.redirect(
      new URL(`/${locale}${req.nextUrl.pathname}${req.nextUrl.search}`, req.url)
    )
  }
}
```

----------------------------------------

TITLE: Configuring Page Extensions for MDX
DESCRIPTION: Next.js configuration to enable .md and .mdx files as valid page extensions
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')({
  extension: /\.mdx?$/,
})
module.exports = withMDX({
  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],
})
```

----------------------------------------

TITLE: Create Next.js app with MSW example using npx
DESCRIPTION: This command creates a new Next.js application using the `with-msw` example. It bootstraps a project with Mock Service Worker already configured for API mocking.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-msw with-msw-app
```

----------------------------------------

TITLE: Installing next/env Package (Next.js)
DESCRIPTION: Install the `@next/env` package to programmatically load environment variables outside the Next.js runtime (e.g., in config files).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npm install @next/env
```

----------------------------------------

TITLE: Creating Optimized Background Images with CSS image-set in Next.js
DESCRIPTION: This example demonstrates how to use getImageProps to generate an optimized background image using the CSS image-set function, converting the srcSet string to the appropriate CSS syntax.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_36

LANGUAGE: jsx
CODE:
```
import { getImageProps } from 'next/image'

function getBackgroundImage(srcSet = '') {
  const imageSet = srcSet
    .split(', ')
    .map((str) => {
      const [url, dpi] = str.split(' ')
      return `url("${url}") ${dpi}`
    })
    .join(', ')
  return `image-set(${imageSet})`
}

export default function Home() {
  const {
    props: { srcSet },
  } = getImageProps({ alt: '', width: 128, height: 128, src: '/img.png' })
  const backgroundImage = getBackgroundImage(srcSet)
  const style = { height: '100vh', width: '100vw', backgroundImage }

  return (
    <main style={style}>
      <h1>Hello World</h1>
    </main>
  )
}
```

----------------------------------------

TITLE: Upgrading Next.js to Stable Release using pnpm
DESCRIPTION: This command upgrades Next.js to the latest stable release using pnpm package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
pnpm add next@latest
```

----------------------------------------

TITLE: Sending Web Vitals Results to Google Analytics
DESCRIPTION: This example illustrates how to send reported Web Vitals metrics directly to Google Analytics using the `window.gtag` function, assuming Google Analytics has been initialized appropriately. It formats the metric data, converting values to integers and using the metric `id` and `name` as event parameters, while setting `non_interaction` to true.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_7

LANGUAGE: js
CODE:
```
useReportWebVitals(metric => {
  // Use `window.gtag` if you initialized Google Analytics as this example:
  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics
  window.gtag('event', metric.name, {
    value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value), // values must be integers
    event_label: metric.id, // id unique to current page load
    non_interaction: true, // avoids affecting bounce rate.
  });
})
```

----------------------------------------

TITLE: Copying environment variables template
DESCRIPTION: This command copies the .env.local.example file to .env.local. This allows local configuration of environment variables without committing them to the repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Revalidating Cache Tag in Next.js TypeScript
DESCRIPTION: Covers using the revalidateTag function in a TypeScript file to purge a cache entry tagged with 'my-data'. This snippet is part of an async submit function designed to revalidate tagged cache data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('my-data')
}
```

----------------------------------------

TITLE: Reactive Time Updates in Next.js Client Components
DESCRIPTION: Demonstrates how to implement reactive time updates using Client Components with useState and useLayoutEffect hooks.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
function Timestamp() {
  return 'current time: ' + new Date().toString()
}

export default async function Page() {
  return (
    <main>
      ...
      <Timestamp />
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useState, useLayoutEffect } from 'react'

export function Timestamp() {
  const [time, setTime] = useState(null)
  useLayoutEffect(() => {
    // You can determine when and how often to update
    // the time here. In this example we update it only once
    setTime(new Date().toString())
  }, [])
  if (time) {
    return 'current time: ' + time
  }
  return null
}
```

LANGUAGE: jsx
CODE:
```
import { Timestamp } from './client-components'

export default async function Page() {
  return (
    <main>
      ...
      <Timestamp />
    </main>
  )
}
```

----------------------------------------

TITLE: Configuring Sass Implementation | Next.js Config (TS/JS)
DESCRIPTION: Specifies the Sass implementation to be used by Next.js, such as `sass-embedded`. This option is configured within the `sassOptions` object in the `next.config` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/sass.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  sassOptions: {
    implementation: 'sass-embedded',
  },
}

export default nextConfig
```

LANGUAGE: js
CODE:
```
/** @type {import('next').NextConfig} */

const nextConfig = {
  sassOptions: {
    implementation: 'sass-embedded',
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Setting Up Environment Variables - Bash
DESCRIPTION: This snippet shows how to copy a sample environment configuration file to a new `.env.local` file, which is controlled by Git. No special prerequisites are needed except standard Bash access. The command helps set up environment variables necessary for the project’s operation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Creating Client Component (JSX)
DESCRIPTION: This code creates a client component in Next.js (JSX) that dynamically imports the main `App` component using `next/dynamic`. The `'use client'` directive marks this as a Client Component, and `ssr: false` disables server-side rendering for the imported `App` component. The `ClientOnly` function then renders the dynamically imported App component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_16

LANGUAGE: jsx
CODE:
```
'use client'

import React from 'react'
import dynamic from 'next/dynamic'

const App = dynamic(() => import('../../App'), { ssr: false })

export function ClientOnly() {
  return <App />
}
```

----------------------------------------

TITLE: Implementing default.js with params in JavaScript for Next.js Parallel Routes
DESCRIPTION: This code demonstrates how to implement a default.js file in JavaScript that receives dynamic route parameters. The params prop is a promise that must be awaited to access the parameter values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/default.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export default async function Default({ params }) {
  const { artist } = await params
}
```

----------------------------------------

TITLE: Defining permanentRedirect Function Parameters
DESCRIPTION: Function signature for permanentRedirect with path and type parameters, used to perform permanent redirects in Next.js applications across different contexts
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/permanentRedirect.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
permanentRedirect(path, type)
```

----------------------------------------

TITLE: Rendering Remote MDX - App Router (JSX)
DESCRIPTION: Demonstrates how to fetch MDX content from a remote source (like a CMS or database) and render it dynamically in an App Router page component using the `next-mdx-remote-client/rsc` package. The content is fetched server-side.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_20

LANGUAGE: jsx
CODE:
```
import { MDXRemote } from 'next-mdx-remote-client/rsc'

export default async function RemoteMdxPage() {
  // MDX text - can be from a database, CMS, fetch, anywhere...
  const res = await fetch('https://...')
  const markdown = await res.text()
  return <MDXRemote source={markdown} />
}
```

----------------------------------------

TITLE: Enabling Core Web Vitals ESLint Rules (mjs)
DESCRIPTION: This snippet shows how to enable the `next/core-web-vitals` rule set in your ESLint configuration.  This rule set updates `eslint-plugin-next` to error on rules that affect Core Web Vitals. It uses `FlatCompat` for configuration and extends the `next/core-web-vitals` configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_5

LANGUAGE: mjs
CODE:
```
import { FlatCompat } from '@eslint/eslintrc'

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

const eslintConfig = [
  ...compat.config({
    extends: ['next/core-web-vitals'],
  }),
]

export default eslintConfig
```

----------------------------------------

TITLE: Programmatically Submitting Form with requestSubmit (TSX)
DESCRIPTION: Demonstrates a Client Component handling a keyboard event (`onKeyDown`) on a textarea. It checks for Cmd/Ctrl + Enter key presses and triggers the submission of the nearest parent form using `e.currentTarget.form?.requestSubmit()`. This requires the textarea to be nested within a `<form>` element.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_7

LANGUAGE: TSX
CODE:
```
'use client'

export function Entry() {
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (
      (e.ctrlKey || e.metaKey) &&
      (e.key === 'Enter' || e.key === 'NumpadEnter')
    ) {
      e.preventDefault()
      e.currentTarget.form?.requestSubmit()
    }
  }

  return (
    <div>
      <textarea name="entry" rows={20} required onKeyDown={handleKeyDown} />
    </div>
  )
}
```

----------------------------------------

TITLE: Route Handler for Static JSON Response (TypeScript)
DESCRIPTION: This code demonstrates a Route Handler that returns a static JSON response.  It exports an asynchronous `GET` function that returns a `Response` object with a JSON payload. This will render a static JSON file during `next build` when using static export.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
export async function GET() {
  return Response.json({ name: 'Lee' })
}
```

----------------------------------------

TITLE: Defining a Theme Provider Component in JavaScript
DESCRIPTION: This JavaScript snippet defines a ThemeProvider similar to the TypeScript example, effectively providing the theme context for children components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({ children }) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters in Generated Image - TSX
DESCRIPTION: Demonstrates how the default export function in a generated image file (like opengraph-image.tsx or twitter-image.tsx) receives a `params` prop. This prop contains the dynamic route parameters, allowing the image content to be customized based on the specific route being accessed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_9

LANGUAGE: TSX
CODE:
```
export default function Image({ params }: { params: { slug: string } }) {
  // ...
}
```

----------------------------------------

TITLE: Setting Custom Build Directory in Next.js - JavaScript
DESCRIPTION: This snippet configures the Next.js build process to use a custom directory for generated files instead of the default `.next`. The `distDir` option is set within the `next.config.js` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/distDir.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  distDir: 'build',
};
```

----------------------------------------

TITLE: Defining Styles in a CSS Module
DESCRIPTION: This snippet defines a CSS class for error styling in a CSS Module, demonstrating how class names are scoped to avoid conflicts with other styles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_2

LANGUAGE: css
CODE:
```
.error {
  color: white;
  background-color: red;
}
```

----------------------------------------

TITLE: Configuring Jest with Next.js Compiler
DESCRIPTION: This snippet provides the configuration needed to set up Jest with Next.js. It utilizes the nextJest function to ensure Jest can access Next.js application settings, thereby simplifying the testing process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
const nextJest = require('next/jest')

// Providing the path to your Next.js app which will enable loading next.config.js and .env files
const createJestConfig = nextJest({ dir: './' })

// Any custom config you want to pass to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
}

// createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is async
module.exports = createJestConfig(customJestConfig)
```

----------------------------------------

TITLE: Initializing Google Maps with onReady in Next.js (App Router) - JSX
DESCRIPTION: This code demonstrates how to initialize a Google Maps embed using the `onReady` property of the `next/script` component within a Next.js application using the App Router. It uses a ref to target a div element for the map and re-instantiates the map on every component mount.  The `onReady` function is called after the script has loaded.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_13

LANGUAGE: jsx
CODE:
```
'use client'

import { useRef } from 'react'
import Script from 'next/script'

export default function Page() {
  const mapRef = useRef()

  return (
    <>
      <div ref={mapRef}></div>
      <Script
        id="google-maps"
        src="https://maps.googleapis.com/maps/api/js"
        onReady={() => {
          new google.maps.Map(mapRef.current, {
            center: { lat: -34.397, lng: 150.644 },
            zoom: 8,
          })
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Copying the .env.local.example file
DESCRIPTION: This command copies the .env.local.example file to .env.local. This is necessary to setup environment variables for local development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Allowing SVG Images in Next.js
DESCRIPTION: This snippet allows the serving of SVG images through the default Image Optimization API in Next.js, while also configuring content security settings to protect against vulnerabilities. It sets security policies and specifies the content disposition type for SVG images.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_26

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    dangerouslyAllowSVG: true,
    contentDispositionType: 'attachment',
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;"
  },
}
```

----------------------------------------

TITLE: Static Generation without Data in Next.js
DESCRIPTION: An example of a Next.js page using Static Generation without fetching any external data. This page will be pre-rendered at build time as a single HTML file.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
function About() {
  return <div>About</div>
}

export default About
```

----------------------------------------

TITLE: Copying the .env.local.example file
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`.  The `.env.local` file is used to store environment variables for the Next.js application. It is excluded from version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Creating Database Session via Next.js Pages Router API Route
DESCRIPTION: This Next.js API route handler, intended for the Pages Router, processes incoming requests to create a new database session. It expects user details in the request body, generates a unique session ID (using a hypothetical `generateSessionId` function), inserts this ID along with the user ID and creation timestamp into the database, and responds with the new session ID upon success or an error message on failure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_20

LANGUAGE: ts
CODE:
```
import db from '../../lib/db'
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const user = req.body
    const sessionId = generateSessionId()
    await db.insertSession({
      sessionId,
      userId: user.id,
      createdAt: new Date(),
    })

    res.status(200).json({ sessionId })
  } catch (error) {
    res.status(500).json({ error: 'Internal Server Error' })
  }
}
```

LANGUAGE: js
CODE:
```
import db from '../../lib/db'

export default async function handler(req, res) {
  try {
    const user = req.body
    const sessionId = generateSessionId()
    await db.insertSession({
      sessionId,
      userId: user.id,
      createdAt: new Date(),
    })

    res.status(200).json({ sessionId })
  } catch (error) {
    res.status(500).json({ error: 'Internal Server Error' })
  }
}
```

----------------------------------------

TITLE: Opt-out Packages from Bundling (App Router)
DESCRIPTION: Configures the `serverExternalPackages` option in `next.config.js` to prevent specific packages from being automatically bundled in Server Components and Route Handlers. This applies to the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  serverExternalPackages: ['package-name'],
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Example of the environment variables that need to be set in the .env.local file. These include the Supabase project URL and anonymous API key for authentication.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=[INSERT SUPABASE PROJECT URL]
NEXT_PUBLIC_SUPABASE_ANON_KEY=[INSERT SUPABASE PROJECT API ANON KEY]
```

----------------------------------------

TITLE: getServerSideProps data fetching - TypeScript
DESCRIPTION: This code snippet demonstrates how to use `getServerSideProps` in a Next.js page to fetch data from an external API (GitHub in this case) on each request and pass it as props to the page component. It includes type definitions for the fetched data and uses `InferGetServerSidePropsType` to infer the type of the props passed to the page component. The code utilizes the `fetch` API to retrieve data and `res.json()` to parse the response. The fetched data is then passed to the page component via the `props` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getServerSideProps = (async () => {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo: Repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}) satisfies GetServerSideProps<{ repo: Repo }>

export default function Page({
  repo,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Forwarding Headers with NextResponse.next() - TypeScript
DESCRIPTION: Demonstrates how to forward modified headers in a response using NextResponse.next(). This allows you to enrich the request with additional metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

// Given an incoming request...
const newHeaders = new Headers(request.headers)
// Add a new header
newHeaders.set('x-version', '123')
// And produce a response with the new headers
return NextResponse.next({
  request: {
    // New request headers
    headers: newHeaders,
  },
})
```

----------------------------------------

TITLE: Defining Custom Variables at Build-Time in Next.js Compiler
DESCRIPTION: This snippet demonstrates how to use the define option in the Next.js Compiler configuration to statically replace variables within the code during the build process, facilitating the customization of environment-specific values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_10

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compiler: {
    define: {
      MY_STRING_VARIABLE: JSON.stringify('my-string'),
      MY_NUMBER_VARIABLE: '42',
    },
  },
}
```

----------------------------------------

TITLE: Implementing getStaticProps for Data Fetching in Next.js
DESCRIPTION: Example showing how to implement getStaticProps to fetch external data at build time. This function fetches posts from an API and passes them as props to the Blog component during pre-rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
export default function Blog({ posts }) {
  // Render posts...
}

// This function gets called at build time
export async function getStaticProps() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts,
    },
  }
}
```

----------------------------------------

TITLE: Using history.pushState for Query Params Next.js TSX
DESCRIPTION: Demonstrates using the native window.history.pushState method in a TypeScript Client Component to update URL search parameters. It uses the useSearchParams hook to get current params and constructs a new URL with updated sorting parameters ('asc' or 'desc') without triggering a full page reload.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SortProducts() {
  const searchParams = useSearchParams()

  function updateSorting(sortOrder: string) {
    const params = new URLSearchParams(searchParams.toString())
    params.set('sort', sortOrder)
    window.history.pushState(null, '', `?${params.toString()}`)
  }

  return (
    <>
      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>
      <button onClick={() => updateSorting('desc')}>Sort Descending</button>
    </>
  )
}
```

----------------------------------------

TITLE: Using next/image with basePath
DESCRIPTION: Example of configuring an image source with the basePath prefix to ensure correct image rendering when deployed under a sub-path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/basePath.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

function Home() {
  return (
    <>
      <h1>My Homepage</h1>
      <Image
        src="/docs/me.png"
        alt="Picture of the author"
        width={500}
        height={500}
      />
      <p>Welcome to my homepage!</p>
    </>
  )
}

export default Home
```

----------------------------------------

TITLE: getStaticPaths with string and object paths
DESCRIPTION: This example showcases how to define the `paths` property within the `getStaticPaths` function in Next.js. The `paths` array can contain either strings representing the complete path or objects that specify the `params` for dynamic routes. This example shows how to pre-render `/blog/first-post` and `/blog/second-post` statically at build time.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-getstaticpaths-value.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export async function getStaticPaths() {
  return {
    paths: [
      // String variant:
      '/blog/first-post',
      // Object variant:
      { params: { slug: 'second-post' } },
    ],
    fallback: true,
  }
}
```

----------------------------------------

TITLE: Fetching Data with getStaticProps (TypeScript)
DESCRIPTION: This code snippet demonstrates how to use `getStaticProps` in a Next.js page to fetch data from an API and pass it as props to the page component. It includes type definitions for the data and uses `InferGetStaticPropsType` for type safety.  It fetches repository data from the GitHub API and returns it as props.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { InferGetStaticPropsType, GetStaticProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Configuring Next.js for MDX Javascript
DESCRIPTION: Shows the basic configuration in `next.config.mjs` to integrate `@next/mdx`. It imports `createMDX`, defines a `nextConfig` object (including `pageExtensions`), wraps the config with `createMDX`, and exports the result. Required for processing `.mdx` files.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_3

LANGUAGE: js
CODE:
```
import createMDX from '@next/mdx'

/** @type {import('next').NextConfig} */
const nextConfig = {
  // Configure `pageExtensions` to include markdown and MDX files
  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],
  // Optionally, add any other Next.js config below
}

const withMDX = createMDX({
  // Add markdown plugins here, as desired
})

// Merge MDX config with Next.js config
export default withMDX(nextConfig)
```

----------------------------------------

TITLE: Using Script component with inline script and curly braces in JSX
DESCRIPTION: This example shows how to use the `next/script` component with an inline script wrapped in curly braces. The script content is executed when the component is rendered. The `id` attribute is used for identification and potential manipulation of the script.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-script.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
<Script id="show-banner">
  {`document.getElementById('banner').classList.remove('hidden')`}
</Script>
```

----------------------------------------

TITLE: Creating a Default Page Component in Next.js with JavaScript
DESCRIPTION: This code snippet defines a default export function that returns a JSX expression. No external dependencies are required for this basic component. It outputs a simple paragraph element with the text 'hello world'. This serves as a basic starting point for building more complex Next.js pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example-file.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default function Page() { 
    return <p>hello world</p>
}
```

----------------------------------------

TITLE: Upgrading Next.js to Stable Release using yarn
DESCRIPTION: This command upgrades Next.js to the latest stable release using yarn package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
yarn add next@latest
```

----------------------------------------

TITLE: Integrating Google Fonts with Tailwind CSS in Next.js Pages Router
DESCRIPTION: Demonstrates using Google Fonts with Tailwind CSS in a Next.js application using the Pages Router. The fonts are loaded with CSS variables and applied to the main application wrapper.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_27

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function MyApp({ Component, pageProps }) {
  return (
    <main className={`${inter.variable} ${roboto_mono.variable} font-sans`}>
      <Component {...pageProps} />
    </main>
  )
}
```

----------------------------------------

TITLE: Restricting Quality Settings in next.config.js
DESCRIPTION: This code snippet illustrates how to restrict image quality settings in next.config.js by providing a list of allowed qualities. Only the specified qualities will be accepted by the Image Optimizer.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_21

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    qualities: [25, 50, 75],
  },
}

```

----------------------------------------

TITLE: Generate Icon using ImageResponse - JSX
DESCRIPTION: Provides the JavaScript (JSX) version of generating an application icon programmatically in Next.js using next/og's ImageResponse. It exports size and contentType and a default function returning the image definition.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import { ImageResponse } from 'next/og'

// Image metadata
export const size = {
  width: 32,
  height: 32,
}
export const contentType = 'image/png'

// Image generation
export default function Icon() {
  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 24,
          background: 'black',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          color: 'white',
        }}
      >
        A
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported icons size metadata
      // config to also set the ImageResponse's width and height.
      ...size,
    }
  )
}
```

----------------------------------------

TITLE: Implementing Client-side Data Fetching with SWR in React
DESCRIPTION: This snippet shows how to use the SWR library for client-side data fetching in React. It demonstrates fetching profile data with automatic caching and revalidation, and handles loading and error states.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/05-client-side.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import useSWR from 'swr'

const fetcher = (...args) => fetch(...args).then((res) => res.json())

function Profile() {
  const { data, error } = useSWR('/api/profile-data', fetcher)

  if (error) return <div>Failed to load</div>
  if (!data) return <div>Loading...</div>

  return (
    <div>
      <h1>{data.name}</h1>
      <p>{data.bio}</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Next.js app with auth example using Bun
DESCRIPTION: This command uses `create-next-app` with Bun to create a new Next.js application named `auth-app` based on the `auth` example.  It leverages the `bunx` command to execute the package directly from the Bun registry.  The command initializes a Next.js project configured for authentication.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
bunx create-next-app --example auth auth-app
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command uses npx to create a new Next.js application based on the with-portals example. It specifies the example and the application name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-portals with-portals-app
```

----------------------------------------

TITLE: Scheduling Task After Rendering in Next.js Layout (TSX)
DESCRIPTION: This snippet demonstrates how to use the `after` function within a Next.js Server Component layout written in TSX. It imports `after` and a custom `log` utility, scheduling the `log()` call to execute after the layout has finished rendering and the response is sent to the user.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/after.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { after } from 'next/server';
// Custom logging function
import { log } from '@/app/utils';

export default function Layout({ children }: { children: React.ReactNode }) {
  after(() => {
    // Execute after the layout is rendered and sent to the user
    log();
  });
  return <>{children}</>;
}
```

----------------------------------------

TITLE: Configuring Custom App with TypeScript for Layouts in Next.js
DESCRIPTION: TypeScript configuration for a custom App component that supports per-page layouts. It defines custom types for pages with layouts and extends the AppProps type to support the getLayout function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
import type { ReactElement, ReactNode } from 'react'
import type { NextPage } from 'next'
import type { AppProps } from 'next/app'

export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {
  getLayout?: (page: ReactElement) => ReactNode
}

type AppPropsWithLayout = AppProps & {
  Component: NextPageWithLayout
}

export default function MyApp({ Component, pageProps }: AppPropsWithLayout) {
  // Use the layout defined at the page level, if available
  const getLayout = Component.getLayout ?? ((page) => page)

  return getLayout(<Component {...pageProps} />)
}
```

----------------------------------------

TITLE: Implementing Theme Detection with Picture Element in Next.js
DESCRIPTION: This snippet demonstrates how to use the getImageProps function from Next.js to create a theme-aware image using the HTML picture element. It provides different sources for light and dark modes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_34

LANGUAGE: jsx
CODE:
```
import { getImageProps } from 'next/image'

export default function Page() {
  const common = { alt: 'Theme Example', width: 800, height: 400 }
  const {
    props: { srcSet: dark },
  } = getImageProps({ ...common, src: '/dark.png' })
  const {
    props: { srcSet: light, ...rest },
  } = getImageProps({ ...common, src: '/light.png' })

  return (
    <picture>
      <source media="(prefers-color-scheme: dark)" srcSet={dark} />
      <source media="(prefers-color-scheme: light)" srcSet={light} />
      <img {...rest} />
    </picture>
  )
}
```

----------------------------------------

TITLE: Enabling Incremental Static Regeneration in Pages Router (JSX)
DESCRIPTION: Demonstrates adding the `revalidate` property to the object returned by `getStaticProps`. This configures Incremental Static Regeneration (ISR), allowing Next.js to regenerate the page in the background after a specified duration (60 seconds in this example).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_26

LANGUAGE: jsx
CODE:
```
// `pages` directory

export async function getStaticProps() {
  const res = await fetch(`https://.../posts`)
  const posts = await res.json()

  return {
    props: { posts },
    revalidate: 60,
  }
}

export default function Index({ posts }) {
  return (
    <Layout>
      <PostList posts={posts} />
    </Layout>
  )
}
```

----------------------------------------

TITLE: Basic Next.js MDX Configuration
DESCRIPTION: Simple Next.js configuration file for enabling MDX support with default settings
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')()
module.exports = withMDX()
```

----------------------------------------

TITLE: Generating Multiple Sitemaps with generateSitemaps (JavaScript)
DESCRIPTION: This JavaScript snippet shows how to use the `generateSitemaps` function to define multiple sitemap segments by returning an array of objects with an 'id'. The default exported async function receives this 'id' and uses it to fetch a specific range of data (like products), mapping them to individual sitemap entries.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
import { BASE_URL } from '@/app/lib/constants';

export async function generateSitemaps() {
  // Fetch the total number of products and calculate the number of sitemaps needed
  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }];
}

export default async function sitemap({ id }) {
  // Google's limit is 50,000 URLs per sitemap
  const start = id * 50000;
  const end = start + 50000;
  const products = await getProducts(
    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`
  );
  return products.map((product) => ({
    url: `${BASE_URL}/product/${product.id}`,
    lastModified: product.date,
  }));
}
```

----------------------------------------

TITLE: Enabling Preview Mode with setPreviewData in Next.js (Simple Test)
DESCRIPTION: This JavaScript code demonstrates a simple API route in Next.js for manually testing preview mode. Visiting `/api/preview` using this code will set preview cookies and display the message 'Preview mode enabled' in the browser. It's useful for verifying that `setPreviewData` functions as expected.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
// simple example for testing it manually from your browser.
export default function handler(req, res) {
  res.setPreviewData({})
  res.end('Preview mode enabled')
}
```

----------------------------------------

TITLE: Implement NextResponse Class & Middleware Functionality - JavaScript
DESCRIPTION: Defines the core `NextResponse` class by extending the standard `Response` object. It adds middleware-specific static methods (`redirect`, `rewrite`, `next`) and a dynamic `cookies` property, utilizing `x-middleware-*` headers to signal behavior to the Next.js runtime. It also includes a helper function `handleMiddlewareField` for processing request headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_15

LANGUAGE: javascript
CODE:
```
import { validateURL } from '../utils';
import { NextURL } from '../next-url';
import { toNodeOutgoingHttpHeaders } from '../utils';
import { ResponseCookies } from './cookies';
import { stringifyCookie } from '../../web/spec-extension/cookies';
import { ReflectAdapter } from './adapters/reflect';
import '../../web/spec-extension/cookies';
import '../next-url';
import '../utils';
import './adapters/reflect';
import './cookies';
const INTERNALS = Symbol('internal response');
const REDIRECTS = new Set([
    301,
    302,
    303,
    307,
    308
]);
function handleMiddlewareField(init, headers) {
    var _init_request;
    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {
        if (!(init.request.headers instanceof Headers)) {
            throw new Error('request.headers must be an instance of Headers');
        }
        const keys = [];
        for (const [key, value] of init.request.headers){
            headers.set('x-middleware-request-' + key, value);
            keys.push(key);
        }
        headers.set('x-middleware-override-headers', keys.join(','));
    }
}
class NextResponse extends Response {
    constructor(body, init = {}){
        super(body, init);
        const headers = this.headers;
        const cookies = new ResponseCookies(headers);
        const cookiesProxy = new Proxy(cookies, {
            get (target, prop, receiver) {
                switch(prop){
                    case 'delete':
                    case 'set':
                        {
                            return (...args)=>{
                                const result = Reflect.apply(target[prop], target, args);
                                const newHeaders = new Headers(headers);
                                if (result instanceof ResponseCookies) {
                                    headers.set('x-middleware-set-cookie', result.getAll().map((cookie)=>stringifyCookie(cookie)).join(','));
                                }
                                handleMiddlewareField(init, newHeaders);
                                return result;
                            };
                        }
                    default:
                        return ReflectAdapter.get(target, prop, receiver);
                }
            }
        });
        this[INTERNALS] = {
            cookies: cookiesProxy,
            url: init.url ? new NextURL(init.url, {
                headers: toNodeOutgoingHttpHeaders(headers),
                nextConfig: init.nextConfig
            }) : undefined
        };
    }
    [Symbol.for('edge-runtime.inspect.custom')]() {
        return {
            cookies: this.cookies,
            url: this.url,
            body: this.body,
            bodyUsed: this.bodyUsed,
            headers: Object.fromEntries(this.headers),
            ok: this.ok,
            redirected: this.redirected,
            status: this.status,
            statusText: this.statusText,
            type: this.type
        };
    }
    get cookies() {
        return this[INTERNALS].cookies;
    }
    static json(body, init) {
        const response = Response.json(body, init);
        return new NextResponse(response.body, response);
    }
    static redirect(url, init) {
        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;
        if (!REDIRECTS.has(status)) {
            throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        const initObj = typeof init === 'object' ? init : {};
        const headers = new Headers(initObj == null ? void 0 : initObj.headers);
        headers.set('Location', validateURL(url));
        return new NextResponse(null, {
            ...initObj,
            headers,
            status
        });
    }
    static rewrite(destination, init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-rewrite', validateURL(destination));
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
    static next(init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-next', '1');
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
}
export { NextResponse };
export { INTERNALS as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { REDIRECTS as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { handleMiddlewareField as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { NextResponse as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Implementing Server-side Rendering with getServerSideProps in Next.js
DESCRIPTION: This code demonstrates how to implement Server-side Rendering in Next.js by using the getServerSideProps function. The function fetches data from an external API on every request and passes it to the Page component as props. This approach is useful for pages that need frequently updated data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/01-server-side-rendering.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
export default function Page({ data }) {
  // Render data...
}

// This gets called on every request
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  // Pass data to the page via props
  return { props: { data } }
}
```

----------------------------------------

TITLE: Wrapping Next.js Root Layout with Styled-JSX Registry
DESCRIPTION: Demonstrates how to integrate the `StyledJsxRegistry` component into the root `layout` file of a Next.js `app` directory. By wrapping the `children` prop with `StyledJsxRegistry`, all components rendered within this layout, including those using `styled-jsx`, will have their styles collected and managed by the registry during server-side rendering, ensuring proper styling on initial page load.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/css-in-js.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import StyledJsxRegistry from './registry'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  )\n}
```

LANGUAGE: jsx
CODE:
```
import StyledJsxRegistry from './registry'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  )\n}
```

----------------------------------------

TITLE: Defining generateImageMetadata with Params (TSX)
DESCRIPTION: This code snippet shows how to define the `generateImageMetadata` function in TypeScript, including an optional `params` argument. The `params` object contains dynamic route parameters from the root segment down to the segment where `generateImageMetadata` is called.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export function generateImageMetadata({
  params,
}: {
  params: { slug: string }
}) {
  // ...
}
```

----------------------------------------

TITLE: Initializing useSelectedLayoutSegments Client Component in JavaScript
DESCRIPTION: A JavaScript implementation of a client component using useSelectedLayoutSegments to display active route segments as a list of list items.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segments.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useSelectedLayoutSegments } from 'next/navigation'

export default function ExampleClientComponent() {
  const segments = useSelectedLayoutSegments()

  return (
    <ul>
      {segments.map((segment, index) => (
        <li key={index}>{segment}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Static robots.txt configuration
DESCRIPTION: Demonstrates how to create a static `robots.txt` file directly in the root of the `app` directory. It sets a rule for all user agents (`*`), allowing access to all paths except `/private/`, and specifies the location of a sitemap.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#_snippet_0

LANGUAGE: txt
CODE:
```
User-Agent: *
Allow: /
Disallow: /private/

Sitemap: https://acme.com/sitemap.xml
```

----------------------------------------

TITLE: Loading External Library Dynamically (Pages Router)
DESCRIPTION: This code snippet showcases how to dynamically load an external library (`fuse.js`) using `import()` within the `pages` router. This allows for loading libraries only when they are needed, improving initial page load times.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
import { useState } from 'react'

const names = ['Tim', 'Joe', 'Bel', 'Lee']

export default function Page() {
  const [results, setResults] = useState()

  return (
    <div>
      <input
        type="text"
        placeholder="Search"
        onChange={async (e) => {
          const { value } = e.currentTarget
          // Dynamically load fuse.js
          const Fuse = (await import('fuse.js')).default
          const fuse = new Fuse(names)

          setResults(fuse.search(value))
        }}
      />
      <pre>Results: {JSON.stringify(results, null, 2)}</pre>
    </div>
  )
}
```

----------------------------------------

TITLE: Integrating TypeScript ESLint Rules (mjs)
DESCRIPTION: This snippet demonstrates how to integrate TypeScript-specific lint rules into a Next.js ESLint configuration using `next/typescript`. It extends both `next/core-web-vitals` and `next/typescript` configurations, leveraging `FlatCompat` for compatibility. This adds rules based on `@typescript-eslint/recommended`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_6

LANGUAGE: mjs
CODE:
```
import { FlatCompat } from '@eslint/eslintrc'

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

const eslintConfig = [
  ...compat.config({
    extends: ['next/core-web-vitals', 'next/typescript'],
  }),
]

export default eslintConfig
```

----------------------------------------

TITLE: Updating Entrypoint to Use Client Component (JSX)
DESCRIPTION: This code updates the entrypoint page in Next.js (JSX) to use the newly created Client Component. It imports the `ClientOnly` component and renders it within the `Page` component. This ensures that the main application logic runs on the client side by utilizing the client component that disables SSR.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_18

LANGUAGE: jsx
CODE:
```
import '../../index.css'
import { ClientOnly } from './client'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return <ClientOnly />
}
```

----------------------------------------

TITLE: Exporting Open Graph/Twitter Image Alt Text Config - TSX
DESCRIPTION: Shows how to define the alternative text for a programmatically generated image by exporting an `alt` constant from the opengraph-image.tsx or twitter-image.tsx file. This value will be used to populate the corresponding meta tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_11

LANGUAGE: TSX
CODE:
```
export const alt = 'My images alt text'

export default function Image() {}
```

----------------------------------------

TITLE: Creating a Theme Context Provider in JavaScript
DESCRIPTION: This snippet is similar to the TypeScript example, demonstrating how to create a ThemeContext and a provider in JavaScript. The provider supplies a 'dark' theme value to its children.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
import { createContext } from 'react'

//  createContext is not supported in Server Components
export const ThemeContext = createContext({})

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Enabling SWC Minification in next.config.js
DESCRIPTION: This JavaScript code snippet enables SWC (Speedy Web Compiler) for minifying JavaScript in a Next.js application.  Setting `swcMinify` to `true` in `next.config.js` replaces Terser with SWC for potentially faster minification.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
module.exports = {
  swcMinify: true,
}
```

----------------------------------------

TITLE: Implementing Page Title with next/head in Next.js
DESCRIPTION: This code snippet demonstrates the correct way to set a page title in Next.js using the Head component from next/head. It shows how to import the component and use it within a functional component to set a custom title for a page.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-title-in-document-head.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Head from 'next/head'

export function Home() {
  return (
    <div>
      <Head>
        <title>My page title</title>
      </Head>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating a Next.js app with static export (npm)
DESCRIPTION: This command uses npm to create a new Next.js application with the 'with-static-export' example. It simplifies the process of starting a project with pre-configured static export settings. The app will be named 'with-static-export-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-static-export/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example with-static-export with-static-export-app
```

----------------------------------------

TITLE: Running ESLint on Staged Files with lint-staged (js)
DESCRIPTION: This snippet demonstrates how to configure lint-staged to run `next lint` on staged files. It defines a `buildEslintCommand` function that constructs the command to run ESLint with the `--file` flag for each staged file. This is useful for ensuring that only changed files are linted before committing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_9

LANGUAGE: js
CODE:
```
const path = require('path')

const buildEslintCommand = (filenames) =>
  `next lint --fix --file ${filenames
    .map((f) => path.relative(process.cwd(), f))
    .join(' --file ')}`

module.exports = {
  '*.{js,jsx,ts,tsx}': [buildEslintCommand],
}
```

----------------------------------------

TITLE: Installing Next.js 14 with PNPM
DESCRIPTION: Command to upgrade Next.js to version 14 using PNPM package manager. Includes installation of React 18 and ESLint configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-14.mdx#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
pnpm i next@next-14 react@18 react-dom@18 && pnpm i eslint-config-next@next-14 -D
```

----------------------------------------

TITLE: Using history.replaceState for Path Changes Next.js TSX
DESCRIPTION: Illustrates using the native window.history.replaceState method in a TypeScript Client Component to change the URL path. It uses the usePathname hook to get the current path and replaces the history entry with a new path that includes a locale segment, useful for locale switching without adding to history.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'

export function LocaleSwitcher() {
  const pathname = usePathname()

  function switchLocale(locale: string) {
    // e.g. '/en/about' or '/fr/contact'
    const newPath = `/${locale}${pathname}`
    window.history.replaceState(null, '', newPath)
  }

  return (
    <>
      <button onClick={() => switchLocale('en')}>English</button>
      <button onClick={() => switchLocale('fr')}>French</button>
    </>
  )
}
```

----------------------------------------

TITLE: Installing Sass Dependency via NPM or Yarn - Bash
DESCRIPTION: Install the `sass` package required for Next.js' built-in Sass support using either npm or yarn. This command adds `sass` as a project dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/install-sass.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm i sass
# or
yarn add sass
```

----------------------------------------

TITLE: Configuring Tailwind CSS v3 with Next.js Font Variables
DESCRIPTION: Demonstrates how to configure Tailwind CSS v3 to use font CSS variables from Next.js. The configuration extends the theme to use the font variables for sans and mono font families.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_29

LANGUAGE: js
CODE:
```
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
    './app/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ['var(--font-inter)'],
        mono: ['var(--font-roboto-mono)'],
      },
    },
  },
  plugins: [],
}
```

----------------------------------------

TITLE: Configuring GitHub Actions Cache for Next.js Builds
DESCRIPTION: This YAML configuration for GitHub Actions uses the actions/cache action to cache npm packages and the Next.js cache. It generates a new cache when packages or source files change and can restore from a prior cache if only source files changed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
uses: actions/cache@v4
with:
  # See here for caching with `yarn`, `bun` or other package managers https://github.com/actions/cache/blob/main/examples.md or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
  path: |
    ~/.npm
    ${{ github.workspace }}/.next/cache
  # Generate a new cache whenever packages or source files change.
  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
  # If source files changed but packages didn't, rebuild from a prior cache.
  restore-keys: |
    ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
```

----------------------------------------

TITLE: Extending Next.js Webpack Configuration in next.config.js
DESCRIPTION: Demonstrates the standard way to customize the Webpack configuration used by Next.js applications. Define a `webpack` function within `module.exports` in `next.config.js`. This function receives the current configuration object and an options object providing build context. It is crucial to return the modified configuration object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/webpack.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  webpack: (
    config,
    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }
  ) => {
    // Important: return the modified config
    return config
  },
}
```

----------------------------------------

TITLE: Error Boundary Component
DESCRIPTION: Client-side error boundary component for handling uncaught exceptions with reset functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-error-handling.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
'use client'

import { useEffect } from 'react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={() => reset()}>Try again</button>
    </div>
  )
}
```

LANGUAGE: javascript
CODE:
```
'use client'

import { useEffect } from 'react'

export default function Error({ error, reset }) {
  useEffect(() => {
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={() => reset()}>Try again</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Optimizing Static Generation with Environment-based Conditions in Next.js
DESCRIPTION: Implementation of getStaticPaths that conditionally generates pages based on environment variables. This pattern allows for faster builds in preview environments while ensuring full pre-rendering in production for optimal SEO and performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/02-get-static-paths.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
export async function getStaticPaths() {
  // When this is true (in preview environments) don't
  // prerender any static pages
  // (faster builds, but slower initial page load)
  if (process.env.SKIP_BUILD_STATIC_GENERATION) {
    return {
      paths: [],
      fallback: 'blocking',
    }
  }

  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to prerender based on posts
  // In production environments, prerender all pages
  // (slower builds, but faster initial page load)
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // { fallback: false } means other routes should 404
  return { paths, fallback: false }
}
```

----------------------------------------

TITLE: Creating Next.js Forms App with NPX
DESCRIPTION: Command to create a new Next.js application with forms example using NPX package runner.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/next-forms/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example next-forms next-forms-app
```

----------------------------------------

TITLE: Creating Next.js App with TakeShape Example (npx)
DESCRIPTION: This command uses npx to create a new Next.js application based on the cms-takeshape example. It bootstraps the project with the necessary files and dependencies to connect to TakeShape.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-takeshape cms-takeshape-app
```

----------------------------------------

TITLE: Creating Next.js App with Google Analytics using npx
DESCRIPTION: This command creates a new Next.js application with the Google Analytics example using npx. It initializes a new project named 'with-google-analytics-app' using the specified example from the Next.js repository. Requires npx to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-google-analytics with-google-analytics-app
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the image-secure-compute example. It downloads the example and sets up a new project with the specified name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-secure-compute/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example image-secure-compute image-secure-compute-app
```

----------------------------------------

TITLE: Creating Next.js app with auth example using pnpm
DESCRIPTION: This command uses `create next-app` with pnpm to create a new Next.js application named `auth-app` based on the `auth` example.  It assumes that pnpm is installed globally.  The command initializes a Next.js project configured for authentication.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example auth auth-app
```

----------------------------------------

TITLE: Accessing Search Parameters in a Next.js Page (TSX)
DESCRIPTION: This code shows how to wrap a Client Component using `useSearchParams` in a `Suspense` boundary to enable static rendering of other parts of the route.  It defines a fallback component that is rendered initially and replaced with the actual component after hydration. It leverages React's Suspense API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'\nimport SearchBar from './search-bar'\n\n// This component passed as a fallback to the Suspense boundary\n// will be rendered in place of the search bar in the initial HTML.\n// When the value is available during React hydration the fallback\n// will be replaced with the `<SearchBar>` component.\nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>\n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}
```

----------------------------------------

TITLE: Rewriting URL in NextResponse - TypeScript
DESCRIPTION: Proxies a request to a new URL while keeping the original URL displayed in the browser. Useful for handling internal redirections.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

// Incoming request: /about, browser shows /about
// Rewritten request: /proxy, browser shows /about
return NextResponse.rewrite(new URL('/proxy', request.url))
```

----------------------------------------

TITLE: Creating Styled-JSX Style Registry in Next.js App Router (Client Component)
DESCRIPTION: Defines a React Client Component `StyledJsxRegistry` that initializes a `styled-jsx` registry using `useState`. It utilizes `useServerInsertedHTML` from `next/navigation` to collect and inject generated CSS styles into the document's head during server-side rendering before any potentially styled content. This component is essential for making `styled-jsx` work correctly with Server Components and the `app` router by ensuring styles are available before content is streamed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/css-in-js.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\n\nexport default function StyledJsxRegistry({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\n\n  useServerInsertedHTML(() => {\n    const styles = jsxStyleRegistry.styles()\n    jsxStyleRegistry.flush()\n    return <>{styles}</>\n  })\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\n\nexport default function StyledJsxRegistry({ children }) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\n\n  useServerInsertedHTML(() => {\n    const styles = jsxStyleRegistry.styles()\n    jsxStyleRegistry.flush()\n    return <>{styles}</>\n  })\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\n}
```

----------------------------------------

TITLE: Resetting State Using useEffect after Navigation (JSX)
DESCRIPTION: This example demonstrates resetting the component's state using the useEffect hook after navigation occurs. The useEffect hook is configured to run when the router.query.slug changes, effectively resetting the count state to 0 when navigating to a different page. This prevents state persistence between routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
useEffect(() => {
    setCount(0)
  }, [router.query.slug])
```

----------------------------------------

TITLE: Generating Static Params for Catch-All Route - TSX
DESCRIPTION: This code defines a `generateStaticParams` function and a default `Page` component for an optional catch-all route in Next.js. The `generateStaticParams` function returns an array containing a single object with an empty slug, mapping all routes to this page. The `Page` component is a server component, which is prerendered into static HTML.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return '...' // We'll update this
}
```

----------------------------------------

TITLE: PostCSS Configuration with Plugins
DESCRIPTION: This code snippet demonstrates the recommended structure for a PostCSS configuration file in a Next.js project. It includes examples of using plugins with and without configuration options, as well as enabling or disabling plugins based on the environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins: [
    // A plugin that does not require configuration:
    'simple-plugin-example',

    // A plugin which needs a configuration object:
    [
      'plugin-with-configuration',
      {
        optionA: '...',
      },
    ],

    // A plugin that is toggled on or off based on environment:
    [
      'plugin-toggled',
      process.env.NODE_ENV === 'production'
        ? {
            optionA: '...',
          }
        : false,
    ],

    // Boolean expressions are also valid.
    // `true` enables the plugin, `false` disables the plugin:
    ['plugin-toggled-2', true /* a === b, etc */],
  ],
}
```

----------------------------------------

TITLE: Customizing Sass Options (additionalData) | Next.js Config (TS/JS)
DESCRIPTION: Configures Sass options within the Next.js configuration file (`next.config.ts` or `next.config.js`). This example shows how to use `additionalData` to inject content, like global variables or mixins, into all Sass files.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/sass.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  sassOptions: {
    additionalData: `$var: red;`,
  },
}

export default nextConfig
```

LANGUAGE: js
CODE:
```
/** @type {import('next').NextConfig} */

const nextConfig = {
  sassOptions: {
    additionalData: `$var: red;`,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Implementing ISR with getStaticProps and Error Handling - Next.js Pages Router
DESCRIPTION: Configures `getStaticProps` for Incremental Static Regeneration (ISR) by setting the `revalidate` property to 60 seconds. It demonstrates handling potential errors during data fetching by throwing an error, which signals Next.js to continue serving the last successfully generated page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
import type { GetStaticProps } from 'next'

interface Post {
  id: string
  title: string
  content: string
}

interface Props {
  post: Post
}

export const getStaticProps: GetStaticProps<Props> = async ({
  params,
}: { params: { id: string } }) => {
  // If this request throws an uncaught error, Next.js will
  // not invalidate the currently shown page and
  // retry getStaticProps on the next request.
  const res = await fetch(`https://api.vercel.app/blog/${params.id}`)
  const post: Post = await res.json()

  if (!res.ok) {
    // If there is a server error, you might want to
    // throw an error instead of returning so that the cache is not updated
    // until the next successful request.
    throw new Error(`Failed to fetch posts, received status ${res.status}`)
  }

  return {
    props: { post },
    // Next.js will invalidate the cache when a
    // request comes in, at most once every 60 seconds.
    revalidate: 60,
  }
}
```

LANGUAGE: jsx
CODE:
```
export async function getStaticProps({ params }) {
  // If this request throws an uncaught error, Next.js will
  // not invalidate the currently shown page and
  // retry getStaticProps on the next request.
  const res = await fetch(`https://api.vercel.app/blog/${params.id}`)
  const post = await res.json()

  if (!res.ok) {
    // If there is a server error, you might want to
    // throw an error instead of returning so that the cache is not updated
    // until the next successful request.
    throw new Error(`Failed to fetch posts, received status ${res.status}`)
  }

  return {
    props: { post },
    // Next.js will invalidate the cache when a
    // request comes in, at most once every 60 seconds.
    revalidate: 60,
  }
}
```

----------------------------------------

TITLE: Configuring PPR in Next.js JavaScript Config
DESCRIPTION: JavaScript configuration for enabling incremental Partial Prerendering in next.config.js
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/ppr.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Configuring Redirects with i18n Support in Next.js - JavaScript
DESCRIPTION: Defines the `i18n` configuration for locales in a Next.js application, allowing automatic prefixing of sources and destinations in redirect rules. It establishes how the application should handle locales, either by setting them automatically or defining them explicitly when `locale: false` is used. Supports matching specific locale paths even when prefixing is not automatic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_6

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  i18n: {
    locales: ['en', 'fr', 'de'],
    defaultLocale: 'en',
  },

  async redirects() {
    return [
      {
        source: '/with-locale', // automatically handles all locales
        destination: '/another', // automatically passes the locale on
        permanent: false,
      },
      {
        // does not handle locales automatically since locale: false is set
        source: '/nl/with-locale-manual',
        destination: '/nl/another',
        locale: false,
        permanent: false,
      },
      {
        // this matches '/' since `en` is the defaultLocale
        source: '/en',
        destination: '/en/another',
        locale: false,
        permanent: false,
      },
      // it's possible to match all locales even when locale: false is set
      {
        source: '/:locale/page',
        destination: '/en/newpage',
        permanent: false,
        locale: false,
      },
      {
        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level
        // `/` or `/fr` routes like /:path* would
        source: '/(.*)',
        destination: '/another',
        permanent: false,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Configuring basePath in next.config.ts
DESCRIPTION: This TypeScript code snippet shows how to configure the `basePath` in `next.config.ts` to serve the Next.js application under a specific subpath.  It imports `NextConfig` and sets the `basePath` property to `/my-subpath`. This requires the `next` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_24

LANGUAGE: typescript
CODE:
```
import { NextConfig } from 'next'

const nextConfig: NextConfig = {
  basePath: '/my-subpath',
  // ...
}

export default nextConfig
```

----------------------------------------

TITLE: Configuring localPatterns in next.config.js
DESCRIPTION: This snippet demonstrates how to configure localPatterns in your next.config.js file to allow specific paths for image optimization. Only paths matching the specified patterns will be optimized, and any other path will respond with a 400 Bad Request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_16

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    localPatterns: [
      {
        pathname: '/assets/images/**',
        search: '',
      },
    ],
  },
}

```

----------------------------------------

TITLE: Creating Client Component (TSX)
DESCRIPTION: This code creates a client component in Next.js (TSX) that dynamically imports the main `App` component using `next/dynamic`. The `'use client'` directive marks this as a Client Component, and `ssr: false` disables server-side rendering for the imported `App` component.  The `ClientOnly` function then renders the dynamically imported App component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
'use client'

import React from 'react'
import dynamic from 'next/dynamic'

const App = dynamic(() => import('../../App'), { ssr: false })

export function ClientOnly() {
  return <App />
}
```

----------------------------------------

TITLE: Implementing Cache Headers with getServerSideProps in Next.js
DESCRIPTION: This example demonstrates how to add caching headers to getServerSideProps responses, using stale-while-revalidate to improve performance while keeping content fresh. The response will be cached for 10 seconds with a 59-second stale period.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-get-server-side-props.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
// This value is considered fresh for ten seconds (s-maxage=10).
// If a request is repeated within the next 10 seconds, the previously
// cached value will still be fresh. If the request is repeated before 59 seconds,
// the cached value will be stale but still render (stale-while-revalidate=59).
//
// In the background, a revalidation request will be made to populate the cache
// with a fresh value. If you refresh the page, you will see the new value.
export async function getServerSideProps({ req, res }) {
  res.setHeader(
    'Cache-Control',
    'public, s-maxage=10, stale-while-revalidate=59'
  )

  return {
    props: {},
  }
}
```

----------------------------------------

TITLE: Custom Image Loader (TypeScript)
DESCRIPTION: This code defines a custom image loader function for Next.js. It constructs a URL for Cloudinary based on the provided image source, width, and quality parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
export default function cloudinaryLoader({
  src,
  width,
  quality,
}: {
  src: string
  width: number
  quality?: number
}) {
  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]
  return `https://res.cloudinary.com/demo/image/upload/${params.join(
    ','
  )}${src}`
}
```

----------------------------------------

TITLE: Imperative Routing with useRouter Hook in Next.js
DESCRIPTION: This example demonstrates how to perform imperative routing in Next.js using the useRouter hook. It shows how to programmatically navigate to a different page when a button is clicked.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function ReadMore() {
  const router = useRouter()

  return (
    <button onClick={() => router.push('/about')}>
      Click here to read more
    </button>
  )
}
```

----------------------------------------

TITLE: Next.js TypeScript Configuration
DESCRIPTION: Demonstrates how to use TypeScript for Next.js configuration with type checking.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  /* config options here */
}

export default nextConfig
```

----------------------------------------

TITLE: Running Bundle Analysis Command
DESCRIPTION: Bash command to trigger bundle analysis during the build process by setting an environment variable
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
ANALYZE=true yarn build
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Firebase Hosting Example
DESCRIPTION: This snippet demonstrates how to bootstrap a Next.js application configured to be hosted with Firebase Hosting. It supports multiple package managers (npm, Yarn, pnpm) and creates a new app with a specific example configuration. Ensure Firebase tools are set up before executing these commands.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-firebase-hosting with-firebase-hosting-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-firebase-hosting with-firebase-hosting-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-firebase-hosting with-firebase-hosting-app
```

----------------------------------------

TITLE: Importing Button Component in MDX
DESCRIPTION: Demonstrates importing a custom Button component from the components directory to use within MDX content.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/plugin-mdx-rs/pages/button.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Button from '../components/button.js'
```

----------------------------------------

TITLE: Draft URL Example (Bash)
DESCRIPTION: This Bash command is an example URL format that a headless CMS can use to call a Next.js API route securely and enable Draft Mode. It includes query parameters for a secret token and the slug of the content being previewed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_2

LANGUAGE: Bash
CODE:
```
https://<your-site>/api/draft?secret=<token>&slug=<path>
```

----------------------------------------

TITLE: Defining Dynamic Paths and Fetching Data in Pages Router (JSX)
DESCRIPTION: Illustrates how to use `getStaticPaths` to specify dynamic routes that should be pre-rendered at build time. `getStaticProps` receives `params` to fetch data specific to each defined path ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_22

LANGUAGE: jsx
CODE:
```
// `pages` directory
import PostLayout from '@/components/post-layout'

export async function getStaticPaths() {
  return {
    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],
  }
}

export async function getStaticProps({ params }) {
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  return { props: { post } }
}

export default function Post({ post }) {
  return <PostLayout post={post} />
}
```

----------------------------------------

TITLE: Fetching and Displaying Post Data by ID in Next.js JavaScript
DESCRIPTION: In this JavaScript snippet, a Next.js page fetches and renders post data using an ID parameter extracted from dynamic routes. The 'getPost' function handles data retrieval.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_19

LANGUAGE: JavaScript
CODE:
```
import { getPost } from '@/posts/data'

export default async function PostPage({ params }) {
  const { id } = await params
  const data = await getPost(id)

  return (
    <div>
      <h1>{data.title}</h1>
      {/* ... */}
    </div>
  )
}
```

----------------------------------------

TITLE: Handling Form Submission Errors - TypeScript
DESCRIPTION: This code snippet demonstrates how to handle form submission errors in a Next.js component using TypeScript. It uses React state to track loading and error states and displays an error message to the user if the submission fails.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import React, { useState, FormEvent } from 'react'

export default function Page() {
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [error, setError] = useState<string | null>(null)

  async function onSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()
    setIsLoading(true)
    setError(null) // Clear previous errors when a new request starts

    try {
      const formData = new FormData(event.currentTarget)
      const response = await fetch('/api/submit', {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        throw new Error('Failed to submit the data. Please try again.')
      }

      // Handle response if necessary
      const data = await response.json()
      // ...
    } catch (error) {
      // Capture the error message to display to the user
      setError(error.message)
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div>
      {error && <div style={{ color: 'red' }}>{error}</div>}
      <form onSubmit={onSubmit}>
        <input type="text" name="name" />
        <button type="submit" disabled={isLoading}>
          {isLoading ? 'Loading...' : 'Submit'}
        </button>
      </form>
    </div>
  )
}
```

----------------------------------------

TITLE: Configuring Custom Cache Handler in Next.js JavaScript
DESCRIPTION: This configuration snippet in `next.config.js` sets up Next.js to use a custom cache handler located at `./cache-handler.js`. It also disables the default in-memory caching mechanism by setting `cacheMaxMemorySize` to 0, directing Next.js to rely solely on the custom handler for all caching operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/incrementalCacheHandlerPath.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  cacheHandler: require.resolve('./cache-handler.js'),
  cacheMaxMemorySize: 0, // disable default in-memory caching
}
```

----------------------------------------

TITLE: Upgrading Next.js to Version 13 with npm
DESCRIPTION: Command to upgrade Next.js to version 13 using npm package manager. Also updates React and React DOM to their latest versions, along with the Next.js ESLint configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@13 react@latest react-dom@latest eslint-config-next@13
```

----------------------------------------

TITLE: Synchronous Token Access Before Migration
DESCRIPTION: Example of problematic synchronous token access code that needs to be migrated to async in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
// This function is sync and the codemod won't make it async
// because it doesn't know about every callsite that uses it.
export function getToken() {
  // @next-codemod-error ...
  return cookies().get('token')
}
```

LANGUAGE: jsx
CODE:
```
import { getToken } from '.../token-utils'

export default function Page() {
  const token = getToken();
  validateToken(token)
  return ...
}
```

----------------------------------------

TITLE: Configuring Tailwind CSS Content Paths (JavaScript)
DESCRIPTION: Shows how to update the `tailwind.config.js` file to include the `app` directory in the `content` array. This ensures Tailwind scans all relevant files in both `app` and `pages` directories to generate the necessary CSS.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_30

LANGUAGE: js
CODE:
```
module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx,mdx}', // <-- Add this line
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
  ],
}
```

----------------------------------------

TITLE: Implementing Forbidden Component in Next.js (TypeScript)
DESCRIPTION: This code snippet demonstrates how to create a Forbidden component in Next.js using TypeScript. It renders a simple UI with a heading, message, and a link to return home when access is forbidden.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/forbidden.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Forbidden() {
  return (
    <div>
      <h2>Forbidden</h2>
      <p>You are not authorized to access this resource.</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Starting Development Server with Docker Compose
DESCRIPTION: This snippet details the steps to start a development server for the Next.js app using Docker Compose. It creates a network for container communication, builds the development environment, and runs the development containers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
# Create a network, which allows containers to communicate

```

LANGUAGE: bash
CODE:
```
docker network create my_network
```

LANGUAGE: bash
CODE:
```
# Build dev

```

LANGUAGE: bash
CODE:
```
docker compose -f compose.dev.yaml build
```

LANGUAGE: bash
CODE:
```
# Up dev

```

LANGUAGE: bash
CODE:
```
docker compose -f compose.dev.yaml up
```

----------------------------------------

TITLE: Creating Next.js App with GTM Example (pnpm)
DESCRIPTION: This command initializes a new Next.js application using the `with-google-tag-manager` example from the Next.js repository. It utilizes `create next-app` via `pnpm` to bootstrap the project with the specified template and project name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-google-tag-manager with-google-tag-manager-app
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server
DESCRIPTION: These commands install the necessary dependencies for the Next.js application and then start the development server. It demonstrates the usage with both npm and yarn.  The development server will run on http://localhost:3000 by default.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Installing @vercel/speed-insights Package
DESCRIPTION: The snippet highlights the installation of the @vercel/speed-insights package in a Next.js application as an alternative to the deprecated analyticsId for tracking Core Web Vitals.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/deprecated-analyticsid.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
npm install @vercel/speed-insights
```

----------------------------------------

TITLE: Run ESLint Setup (Bash)
DESCRIPTION: Executes the `lint` script defined in `package.json` to start the interactive ESLint setup process provided by Next.js, which helps install necessary packages and configure the linter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
npm run lint
```

----------------------------------------

TITLE: Generating a basic Jest configuration file
DESCRIPTION: This command initializes Jest in the project, prompting the user to configure Jest settings interactively. It automatically creates a `jest.config.js` or `jest.config.ts` file. The command can be run using npm, yarn or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_2

LANGUAGE: Bash
CODE:
```
npm init jest@latest
# or
yarn create jest@latest
# or
pnpm create jest@latest
```

----------------------------------------

TITLE: Handling Router Promises and ESLint in Next.js (JSX)
DESCRIPTION: This snippet demonstrates how to handle Promises returned by `router.push` within a `useEffect` hook, specifically addressing the `no-floating-promises` ESLint rule. It presents three solutions: disabling the rule for a line, using `void` to ignore the Promise, and using an `async` function with `await`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_16

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react'
import { useRouter } from 'next/router'

// Here you would fetch and return the user
const useUser = () => ({ user: null, loading: false })

export default function Page() {
  const { user, loading } = useUser()
  const router = useRouter()

  useEffect(() => {
    // disable the linting on the next line - This is the cleanest solution
    // eslint-disable-next-line no-floating-promises
    router.push('/login')

    // void the Promise returned by router.push
    if (!(user || loading)) {
      void router.push('/login')
    }
    // or use an async function, await the Promise, then void the function call
    async function handleRouteChange() {
      if (!(user || loading)) {
        await router.push('/login')
      }
    }
    void handleRouteChange()
  }, [user, loading])

  return <p>Redirecting...</p>
}
```

----------------------------------------

TITLE: Installing and Running Next.js with Formspree
DESCRIPTION: Commands to install project dependencies and start the Next.js development server locally. Runs the application on localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-formspree/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
# Install dependencies
npm install

# Run next locally at localhost:3000
npm run dev
```

----------------------------------------

TITLE: Creating API Route for Form Submission - JavaScript
DESCRIPTION: This code snippet demonstrates creating an API route in Next.js using JavaScript to handle form submissions. It retrieves data from the request body and sends a response containing the received data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  const data = req.body
  // call your database, etc.
  // const id = await createItem(data)
  // ...
  res.status(200).json({ data })
}
```

----------------------------------------

TITLE: Fetching Data with useEffect in Next.js
DESCRIPTION: This snippet demonstrates how to use React's 'useEffect' to perform data fetching on a Next.js page. It shows how to handle asynchronous API requests and manage loading states. Ensure you handle errors gracefully to enhance user experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/05-client-side-rendering.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import React, { useState, useEffect } from 'react'

export function Page() {
  const [data, setData] = useState(null)

  useEffect(() => {
    const fetchData = async () => {
      const response = await fetch('https://api.example.com/data')
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      const result = await response.json()
      setData(result)
    }

    fetchData().catch((e) => {
      // handle the error as needed
      console.error('An error occurred while fetching the data: ', e)
    })
  }, [])

  return <p>{data ? `Your data: ${data}` : 'Loading...'}</p>
}

```

----------------------------------------

TITLE: Implementing a Single Shared Layout with Custom App in Next.js
DESCRIPTION: Using a custom App component to apply a consistent layout across all pages in a Next.js application. This approach preserves component state when navigating between pages, providing a Single-Page Application experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import Layout from '../components/layout'

export default function MyApp({ Component, pageProps }) {
  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  )
}
```

----------------------------------------

TITLE: Initializing Loading Indicator with useLinkStatus
DESCRIPTION: Client-side hook to conditionally render a loading spinner during route navigation. Must be used as a descendant of a Link component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-link-status.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useLinkStatus } from 'next/link'

export default function LoadingIndicator() {
  const { pending } = useLinkStatus()
  return pending ? (
    <div role="status" aria-label="Loading" className="spinner" />
  ) : null
}
```

----------------------------------------

TITLE: Disabling ETag Generation in Next.js
DESCRIPTION: This snippet shows how to disable ETag generation in a Next.js application. By setting the `generateEtags` option to false in the `next.config.js` file, developers can control the cache behavior of their app. This is particularly useful for managing server responses based on specific caching strategies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/generateEtags.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  generateEtags: false,
}
```

----------------------------------------

TITLE: Initializing Next.js project with pnpm
DESCRIPTION: This command initializes a new Next.js project using pnpm, utilizing the with-route-as-modal example.  It clones the example into a new directory named 'with-route-as-modal-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-route-as-modal/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-route-as-modal with-route-as-modal-app
```

----------------------------------------

TITLE: Tagging Data in Next.js Component with JavaScript
DESCRIPTION: Illustrates how to use cacheTag in a JavaScript component function to tag 'bookings-data'. It includes fetching data asynchronously and applying cache tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
import { unstable_cacheTag as cacheTag } from 'next/cache'

export async function Bookings({ type = 'haircut' }) {
  'use cache'
  cacheTag('bookings-data')

  async function getBookingsData() {
    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)
    return data
  }

  return //...
}
```

----------------------------------------

TITLE: Submitting Form Data to API Route - TypeScript
DESCRIPTION: This code snippet demonstrates how to submit form data to an API route in Next.js using TypeScript. It prevents the default form submission, creates a FormData object from the form, sends a POST request to the API route, and handles the response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { FormEvent } from 'react'

export default function Page() {
  async function onSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const response = await fetch('/api/submit', {
      method: 'POST',
      body: formData,
    })

    // Handle response if necessary
    const data = await response.json()
    // ...
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit">Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Handling Fallback State in Next.js Dynamic Routes
DESCRIPTION: Demonstrates how to handle the loading state when using fallback: true or fallback: 'blocking' in getStaticPaths. It uses the useRouter hook to check if the page is in a fallback state.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

function Post({ post }) {
  const router = useRouter()

  if (router.isFallback) {
    return <div>Loading...</div>
  }

  return (
    <article>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </article>
  )
}
```

----------------------------------------

TITLE: Advanced Custom Document with renderPage in Next.js
DESCRIPTION: An advanced implementation of a custom Document that uses getInitialProps and customizes the renderPage method. This pattern is useful for CSS-in-JS libraries that need server-side rendering support.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/06-custom-document.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import Document, {
  Html,
  Head,
  Main,
  NextScript,
  DocumentContext,
  DocumentInitialProps,
} from 'next/document'

class MyDocument extends Document {
  static async getInitialProps(
    ctx: DocumentContext
  ): Promise<DocumentInitialProps> {
    const originalRenderPage = ctx.renderPage

    // Run the React rendering logic synchronously
    ctx.renderPage = () =>
      originalRenderPage({
        // Useful for wrapping the whole react tree
        enhanceApp: (App) => App,
        // Useful for wrapping in a per-page basis
        enhanceComponent: (Component) => Component,
      })

    // Run the parent `getInitialProps`, it now includes the custom `renderPage`
    const initialProps = await Document.getInitialProps(ctx)

    return initialProps
  }

  render() {
    return (
      <Html lang="en">
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

export default MyDocument
```

LANGUAGE: jsx
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  static async getInitialProps(ctx) {
    const originalRenderPage = ctx.renderPage

    // Run the React rendering logic synchronously
    ctx.renderPage = () =>
      originalRenderPage({
        // Useful for wrapping the whole react tree
        enhanceApp: (App) => App,
        // Useful for wrapping in a per-page basis
        enhanceComponent: (Component) => Component,
      })

    // Run the parent `getInitialProps`, it now includes the custom `renderPage`
    const initialProps = await Document.getInitialProps(ctx)

    return initialProps
  }

  render() {
    return (
      <Html lang="en">
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

export default MyDocument
```

----------------------------------------

TITLE: Observing URL Normalization Skip in Next.js Middleware (JS)
DESCRIPTION: Demonstrates the effect of enabling `skipMiddlewareUrlNormalize` in Next.js middleware. When enabled, `req.nextUrl.pathname` will contain the original request path (e.g., `/_next/data/build-id/hello.json`) instead of the normalized path (`/hello`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_16

LANGUAGE: javascript
CODE:
```
export default async function middleware(req) {
  const { pathname } = req.nextUrl

  // GET /_next/data/build-id/hello.json

  console.log(pathname)
  // with the flag this now /_next/data/build-id/hello.json
  // without the flag this would be normalized to /hello
}
```

----------------------------------------

TITLE: Configuring assetPrefix in Next.js JavaScript
DESCRIPTION: This snippet demonstrates how to correctly set the `assetPrefix` value in a Next.js configuration file. `assetPrefix` should be a string, and this example sets it to '/'. The primary dependency is the presence of a `next.config.js` file in the root directory of a Next.js project. No additional parameters are needed, and the expected output is a correctly configured `assetPrefix` without errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-assetprefix.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  assetPrefix: '/',
}
```

----------------------------------------

TITLE: Building Static Storybook
DESCRIPTION: These commands build a static version of the Storybook documentation.  They use `npm`, `yarn`, or `pnpm` to execute the `build-storybook` script defined in the `package.json` file.  The resulting static files are placed in the `storybook-static` directory, ready for deployment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm run build-storybook
# or
yarn build-storybook
# or
pnpm build-storybook
```

----------------------------------------

TITLE: Configuring Minimum Cache TTL for Images in Next.js
DESCRIPTION: This snippet sets the minimum Time to Live (TTL) for cached optimized images in Next.js. It allows developers to specify the cache duration to optimize performance and potentially reduce costs associated with image revalidations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_24

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    minimumCacheTTL: 60, // 1 minute
  },
}
```

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    minimumCacheTTL: 2678400, // 31 days
  },
}
```

----------------------------------------

TITLE: Implementing Custom Image Loader in Next.js (Pages Router)
DESCRIPTION: This example demonstrates how to create and use a custom loader function with the Next.js Image component in the Pages Router. The loader function generates a custom URL based on the provided src, width, and quality parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_2

LANGUAGE: js
CODE:
```
import Image from 'next/image'

const imageLoader = ({ src, width, quality }) => {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}

export default function Page() {
  return (
    <Image
      loader={imageLoader}
      src="me.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: TypeScript Template Component Definition
DESCRIPTION: Defines a basic template component in TypeScript that wraps child components within a div element. Used for rendering page or layout children with a unique key on each navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/template.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Template({ children }: { children: React.ReactNode }) {
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Using onLoad Callback (App Router, JSX)
DESCRIPTION: This code snippet demonstrates how to use the `onLoad` property with the `Script` component to execute code after the script has loaded in a Next.js application using the App Router.  This is useful for initializing content or calling a function from the loaded script. `onLoad` can only be used in Client Components and with `afterInteractive` or `lazyOnload` strategies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
'use client'

import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js"
        onLoad={() => {
          console.log(_.sample([1, 2, 3, 4]))
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Report Server Errors with onRequestError in instrumentation.ts
DESCRIPTION: Tracks server errors by sending them to a custom observability provider. It receives the error, request, and context, and sends a POST request to a specified endpoint with the error details in JSON format. The error instance may have been processed by React during Server Components rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { type Instrumentation } from 'next'

export const onRequestError: Instrumentation.onRequestError = async (
  err,
  request,
  context
) => {
  await fetch('https://.../report-error', {
    method: 'POST',
    body: JSON.stringify({
      message: err.message,
      request,
      context,
    }),
    headers: {
      'Content-Type': 'application/json',
    },
  })
}
```

----------------------------------------

TITLE: Creating Next.js app with Video.js Example (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-videojs example. It bootstraps the project with necessary dependencies and configurations for Video.js integration. The new application will be named with-videojs-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-videojs/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-videojs with-videojs-app
```

----------------------------------------

TITLE: Linking local project to Vercel using CLI
DESCRIPTION: This command links a local Next.js project to a Vercel project. It is used after the project has been imported to Vercel from a Git repository. The command must be run in the project's root directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
"npx vercel link"
```

----------------------------------------

TITLE: Setting X-DNS-Prefetch-Control Header - JavaScript
DESCRIPTION: This snippet shows how to include the `X-DNS-Prefetch-Control` header within the headers configuration array in `next.config.js`. Setting the value to `'on'` enables DNS prefetching, which can reduce latency by resolving domain names of external resources in the background before they are needed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_14

LANGUAGE: js
CODE:
```
{
  key: 'X-DNS-Prefetch-Control',
  value: 'on'
}
```

----------------------------------------

TITLE: Configuring Sass Options in Next.js with TypeScript
DESCRIPTION: This snippet shows how to configure Sass options in a Next.js project using TypeScript. It sets up additional data and specifies the Sass implementation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/sassOptions.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const sassOptions = {
  additionalData: `
    $var: red;
  `,
}

const nextConfig: NextConfig = {
  sassOptions: {
    ...sassOptions,
    implementation: 'sass-embedded',
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Opting Out of Locale Prefixing with next/link
DESCRIPTION: Shows how to use `locale={false}` on `next/link` when the `href` already contains the desired locale path. This prevents Next.js from automatically prepending the current locale to the `href`. Requires the `next/link` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function IndexPage(props) {
  return (
    <Link href="/fr/another" locale={false}>
      To /fr/another
    </Link>
  )
}
```

----------------------------------------

TITLE: Loading Next.js Environment Variables for Testing (JavaScript)
DESCRIPTION: Demonstrates how to programmatically load environment variables using the `@next/env` package within a test setup like Jest. This ensures tests run with the same environment configuration rules as Next.js, loading variables from appropriate `.env` files based on the current directory and NODE_ENV. It requires the `@next/env` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
// The below can be used in a Jest global setup file or similar for your testing set-up
import { loadEnvConfig } from '@next/env'

export default async () => {
  const projectDir = process.cwd()
  loadEnvConfig(projectDir)
}
```

----------------------------------------

TITLE: Configuring Tailwind CSS v4 with CSS Variables for Next.js Fonts
DESCRIPTION: Shows how to configure Tailwind CSS v4 to use font CSS variables defined by Next.js fonts. Uses a global CSS file with inline theme configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_28

LANGUAGE: js
CODE:
```
@import "tailwindcss";

@theme inline {
  --font-sans: var(--font-inter);
  --font-mono: var(--font-roboto-mono);
}
```

----------------------------------------

TITLE: Enabling Production Browser Source Maps in Next.js Configuration
DESCRIPTION: This code snippet shows how to enable browser source map generation for production builds in Next.js by setting the 'productionBrowserSourceMaps' option to true in the next.config.js file. When enabled, source maps will be output in the same directory as the JavaScript files and automatically served by Next.js when requested.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/productionBrowserSourceMaps.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  productionBrowserSourceMaps: true,
}
```

----------------------------------------

TITLE: Getting all Cookies with NextRequest
DESCRIPTION: This snippet demonstrates how to retrieve all cookies or cookies with a specific name using the `getAll` method of the `request.cookies` object in Next.js. It shows examples of retrieving all cookies with the name 'experiments' and all cookies without specifying a name.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// Given incoming request /home
// [
//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },
//   { name: 'experiments', value: 'winter-launch', Path: '/home' },
// ]
request.cookies.getAll('experiments')
// Alternatively, get all cookies for the request
request.cookies.getAll()
```

----------------------------------------

TITLE: Deleting Cookies in Next.js API Route (TypeScript)
DESCRIPTION: This code snippet demonstrates deleting a cookie within a Next.js API route using TypeScript.  It sets the 'Set-Cookie' header on the response object using the `setHeader` method. Setting `Max-Age=0` effectively deletes the cookie. It also sets the HTTP status to 200 and sends a message confirming the deletion. Requires Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_16

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')
  res.status(200).send('Cookie has been deleted.')
}
```

----------------------------------------

TITLE: Creating Next.js app with Kea example using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the 'with-kea' example. It requires Node.js and npm to be installed. The new application will be created in a directory named 'with-kea-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-kea/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-kea with-kea-app
```

----------------------------------------

TITLE: Handling Specific Web Vitals in App Router Component
DESCRIPTION: This snippet demonstrates how to handle specific Web Vitals metrics using a `switch` statement within the `useReportWebVitals` hook inside a client component (`web-vitals.tsx` or `web-vitals.js`) in the Next.js App Router. This pattern allows for targeted processing of metrics like FCP and LCP, separate from the layout and other server components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    switch (metric.name) {
      case 'FCP': {
        // handle FCP results
        break
      }
      case 'LCP': {
        // handle LCP results
        break
      }
      // ... handle other metrics (TTFB, FID, CLS, INP)
    }
  })
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    switch (metric.name) {
      case 'FCP': {
        // handle FCP results
        break
      }
      case 'LCP': {
        // handle LCP results
        break
      }
      // ... handle other metrics (TTFB, FID, CLS, INP)
    }
  })
}
```

----------------------------------------

TITLE: Fetching Data with getStaticProps (JavaScript)
DESCRIPTION: This code snippet demonstrates how to use `getStaticProps` in a Next.js page to fetch data from an API and pass it as props to the page component. It fetches repository data from the GitHub API and returns it as props. The component then renders the number of stargazers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Corrected Multi-match Route Configuration
DESCRIPTION: Demonstrates the correct way to configure a multi-match route by adding the * to the destination parameter
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-multi-match.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
{
  source: '/:path*',
  destination: '/another/:path*'
}
```

----------------------------------------

TITLE: Creating a Next.js App with pnpm
DESCRIPTION: This snippet provides instructions for creating a new Next.js application using pnpm while utilizing the 'hello-world' example. pnpm must be installed. The command facilitates the creation of a new Next.js project setup in the specified location.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example hello-world hello-world-app
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: This snippet shows the commands to start the Next.js development server using npm, yarn, pnpm, or bun. The server will run on localhost:3000 by default, and any changes to the code will be automatically reflected in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app/js/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Mocking style imports for Jest
DESCRIPTION: This JavaScript module exports an empty object, `{}`. It serves as a mock for CSS or style imports in Jest tests.  By mocking style imports with an empty object, tests can avoid the complexities and side effects of real stylesheets, ensuring a cleaner and more predictable testing environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
module.exports = {}
```

----------------------------------------

TITLE: Responsive Image Sizes Configuration - Next.js
DESCRIPTION: Demonstrates how to use the `sizes` property with the Next.js legacy Image component to optimize responsive image loading. The `sizes` property informs the browser about the image's width at different viewport sizes, enabling it to select the most appropriate image from the generated source set. This improves performance by preventing the browser from downloading unnecessarily large images. Requires the 'next/legacy/image' import.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import Image from 'next/legacy/image'
const Example = () => (
  <div className="grid-element">
    <Image
      src="/example.png"
      layout="fill"
      sizes="(max-width: 768px) 100vw,
              (max-width: 1200px) 50vw,
              33vw"
    />
  </div>
)
```

----------------------------------------

TITLE: Fetching Data with SWR in Client Component (Next.js)
DESCRIPTION: This snippet demonstrates how to fetch data in a Next.js Client Component using the SWR library. It retrieves blog posts from an API and handles loading and error states.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-fetching-data.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'
import useSWR from 'swr'

const fetcher = (url) => fetch(url).then((r) => r.json())

export default function BlogPage() {
  const { data, error, isLoading } = useSWR(
    'https://api.vercel.app/blog',
    fetcher
  )

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>

  return (
    <ul>
      {data.map((post: { id: string; title: string }) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'
import useSWR from 'swr'

const fetcher = (url) => fetch(url).then((r) => r.json())

export default function BlogPage() {
  const { data, error, isLoading } = useSWR(
    'https://api.vercel.app/blog',
    fetcher
  )

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>

  return (
    <ul>
      {data.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Bootstrapping Next.js and Sanity Blog with create-next-app
DESCRIPTION: This snippet demonstrates how to initialize a Next.js blog project with Sanity using different package managers. It requires npm, Yarn, or pnpm to be installed. The commands set up a skeleton for a blog using the cms-sanity template. No specific inputs other than command execution, and it results in a ready-to-configure blog project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-sanity next-sanity-blog
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-sanity next-sanity-blog
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-sanity next-sanity-blog
```

----------------------------------------

TITLE: Configuring Conditional DevTool in Next.js Webpack
DESCRIPTION: Demonstrates how to safely configure webpack devtool settings by applying custom configurations only in production builds. This prevents performance regressions in development mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/improper-devtool.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  webpack: (config, options) => {
    if (!options.dev) {
      config.devtool = options.isServer ? false : 'your-custom-devtool'
    }
    return config
  },
}
```

----------------------------------------

TITLE: Specific Cloud Provider Image Loader Examples
DESCRIPTION: Collection of image loader configurations for various cloud providers and image optimization services, demonstrating how to generate dynamic image URLs with width, quality, and format parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/images.mdx#2025-04-21_snippet_1

LANGUAGE: js
CODE:
```
export default function cloudinaryLoader({ src, width, quality }) {
  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]
  return `https://example.com/${params.join(',')}${src}`
}
```

LANGUAGE: js
CODE:
```
export default function imgixLoader({ src, width, quality }) {
  const url = new URL(`https://example.com${src}`)
  const params = url.searchParams
  params.set('auto', params.getAll('auto').join(',') || 'format')
  params.set('fit', params.get('fit') || 'max')
  params.set('w', params.get('w') || width.toString())
  params.set('q', (quality || 50).toString())
  return url.href
}
```

----------------------------------------

TITLE: Checking Draft Mode Status in Next.js Server Component (JavaScript)
DESCRIPTION: This code snippet demonstrates how to check if Draft Mode is enabled within a Next.js Server Component using JavaScript.  It imports the `draftMode` function from `next/headers` and uses its `isEnabled` property to determine the current Draft Mode status.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { draftMode } from 'next/headers'

export default async function Page() {
  const { isEnabled } = await draftMode()
}
```

----------------------------------------

TITLE: Using Loaded Env Vars in Config File (next/env, Next.js)
DESCRIPTION: After loading environment variables using `@next/env`, you can import the configuration file and access variables via `process.env` in external config files like ORM configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import './envConfig.ts'

export default defineConfig({
  dbCredentials: {
    connectionString: process.env.DATABASE_URL!,
  },
})
```

LANGUAGE: javascript
CODE:
```
import './envConfig.js'

export default defineConfig({
  dbCredentials: {
    connectionString: process.env.DATABASE_URL,
  },
})
```

----------------------------------------

TITLE: Demonstrating Taint Errors in Client Component Props (TSX)
DESCRIPTION: Shows a server component fetching potentially tainted data (`userData`) and attempting to pass it, or a tainted value from it (`userData.address`), as props to a client component (`ClientComponent`). This will trigger errors at runtime or during rendering due to the taint marks applied previously by the taint APIs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_14

LANGUAGE: TSX
CODE:
```
import { getUserData } from './data'

export async function Page() {
  const userData = getUserData()
  return (
    <ClientComponent
      user={userData} // this will cause an error because of taintObjectReference
      address={userData.address} // this will cause an error because of taintUniqueValue
    />
  )
}
```

LANGUAGE: JSX
CODE:
```
import { getUserData } from './data'

export async function Page() {
  const userData = await getUserData()
  return (
    <ClientComponent
      user={userData} // this will cause an error because of taintObjectReference
      address={userData.address} // this will cause an error because of taintUniqueValue
    />
  )
}
```

----------------------------------------

TITLE: Migrating to Async Dynamic APIs in Next.js
DESCRIPTION: Codemod to transform dynamic APIs (cookies(), headers(), draftMode()) that are now asynchronous to be properly awaited or wrapped with React.use() if applicable.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import { cookies, headers } from 'next/headers'
const token = cookies().get('token')

function useToken() {
  const token = cookies().get('token')
  return token
}

export default function Page() {
  const name = cookies().get('name')
}

function getHeader() {
  return headers().get('x-foo')
}
```

LANGUAGE: tsx
CODE:
```
import { use } from 'react'
import {
  cookies,
  headers,
  type UnsafeUnwrappedCookies,
  type UnsafeUnwrappedHeaders,
} from 'next/headers'
const token = (cookies() as unknown as UnsafeUnwrappedCookies).get('token')

function useToken() {
  const token = use(cookies()).get('token')
  return token
}

export default async function Page() {
  const name = (await cookies()).get('name')
}

function getHeader() {
  return (headers() as unknown as UnsafeUnwrappedHeaders).get('x-foo')
}
```

----------------------------------------

TITLE: Adding Babel Plugins in Next.js
DESCRIPTION: This code snippet demonstrates how to add a Babel plugin to a Next.js project using the `.babelrc` file.  It extends the basic configuration by including the `@babel/plugin-proposal-do-expressions` plugin, while still utilizing the `next/babel` preset. This enables the use of do-expressions in the project, while maintaining compatibility with Next.js's default Babel settings. Additional plugins can be added similarly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/babel.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "presets": ["next/babel"],
  "plugins": ["@babel/plugin-proposal-do-expressions"]
}
```

----------------------------------------

TITLE: Rendering Unauthorized Page - Alternative TSX
DESCRIPTION: This code snippet exports a React component that displays a '401 - Unauthorized' message and integrates a login component. It serves as an alternative implementation using TypeScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import Login from '@/app/components/Login'

export default function UnauthorizedPage() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}

```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: These commands start the Next.js development server using npm, yarn or pnpm.  It allows local development and testing of the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
```

----------------------------------------

TITLE: Generating Image with Local Assets TSX
DESCRIPTION: Illustrates using Node.js runtime APIs (`node:path`, `node:fs/promises`) to read a local image file (`logo.png`) and include it in an Open Graph image generated by `ImageResponse` in a TSX file. The image data is converted to an `ArrayBuffer` for use as the `src` attribute of an `<img>` element.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_22

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'
import { join } from 'node:path'
import { readFile } from 'node:fs/promises'

export default async function Image() {
  const logoData = await readFile(join(process.cwd(), 'logo.png'))
  const logoSrc = Uint8Array.from(logoData).buffer

  return new ImageResponse(
    (
      <div
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        <img src={logoSrc} height="100" />
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Using onError Callback with Next.js Image Component
DESCRIPTION: Example of using the onError callback with Next.js Image component. This callback is triggered if the image fails to load, providing access to the error event.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_10

LANGUAGE: jsx
CODE:
```
<Image onError={(e) => console.error(e.target.id)} />
```

----------------------------------------

TITLE: Defining Static Next.js Web Manifest JSON
DESCRIPTION: This code snippet shows the structure of a static `manifest.json` or `manifest.webmanifest` file located in the root of the Next.js `app` directory. It defines basic properties like name, short name, description, and start URL according to the Web Manifest Specification.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/manifest.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "My Next.js Application",
  "short_name": "Next.js App",
  "description": "An application built with Next.js",
  "start_url": "/"
  // ...
}
```

----------------------------------------

TITLE: Configuring Styled Components in Next.js Compiler
DESCRIPTION: This snippet demonstrates how to enable the styled-components configuration in the Next.js Compiler. It outlines basic and advanced configurations, allowing developers to customize how styled-components are handled in their application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compiler: {
    styledComponents: true,
  },
}
```

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compiler: {
    // see https://styled-components.com/docs/tooling#babel-plugin for more info on the options.
    styledComponents: {
      // Enabled by default in development, disabled in production to reduce file size,
      // setting this will override the default for all environments.
      displayName?: boolean,
      // Enabled by default.
      ssr?: boolean,
      // Enabled by default.
      fileName?: boolean,
      // Empty by default.
      topLevelImportPaths?: string[],
      // Defaults to ["index"].
      meaninglessFileNames?: string[],
      // Enabled by default.
      minify?: boolean,
      // Enabled by default.
      transpileTemplateLiterals?: boolean,
      // Empty by default.
      namespace?: string,
      // Disabled by default.
      pure?: boolean,
      // Enabled by default.
      cssProp?: boolean,
    },
  },
}
```

----------------------------------------

TITLE: Catch-All Route for Auth Slot
DESCRIPTION: Creates a catch-all route to ensure the modal closes when navigating to routes outside the current context
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_13

LANGUAGE: tsx
CODE:
```
export default function CatchAll() {
  return null
}
```

LANGUAGE: jsx
CODE:
```
export default function CatchAll() {
  return null
}
```

----------------------------------------

TITLE: Default PostCSS configuration for Next.js (JSON)
DESCRIPTION: This is the default PostCSS configuration used by Next.js. It includes `postcss-flexbugs-fixes` and `postcss-preset-env` with specific Autoprefixer settings to ensure flexbox compatibility.  It disables custom properties and targets stage 3 features. Requires `postcss-flexbugs-fixes` and `postcss-preset-env` as installed dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "plugins": [
    "postcss-flexbugs-fixes",
    [
      "postcss-preset-env",
      {
        "autoprefixer": {
          "flexbox": "no-2009"
        },
        "stage": 3,
        "features": {
          "custom-properties": false
        }
      }
    ]
  ]
}
```

----------------------------------------

TITLE: Using cacheTag in Next.js with TypeScript
DESCRIPTION: Demonstrates tagging a cache entry using cacheTag in a TypeScript file. It requires dynamicIO enabled and assigns 'my-data' as a cache tag in the getData function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { unstable_cacheTag as cacheTag } from 'next/cache'

export async function getData() {
  'use cache'
  cacheTag('my-data')
  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Exporting Content Type Metadata for Generated Icon - TSX
DESCRIPTION: Illustrates the TSX syntax for exporting the contentType string in a generated icon file (icon.tsx or apple-icon.tsx). This metadata specifies the MIME type of the generated image, which is used to set the type attribute in the HTML <link> tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
export const contentType = 'image/png'

export default function Icon() {}
```

----------------------------------------

TITLE: Building and Starting Production Environment
DESCRIPTION: This snippet shows the commands used to build and start the Next.js application in a production environment, intended for end-users. The use of a Makefile simplifies the deployment process. The application will be accessible on a specified localhost port.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
make build-production
```

LANGUAGE: bash
CODE:
```
make start-production
```

----------------------------------------

TITLE: Exporting Open Graph/Twitter Image Alt Text Config - JSX
DESCRIPTION: Shows how to define the alternative text for a programmatically generated image by exporting an `alt` constant from the opengraph-image.js or twitter-image.js file. This value will be used to populate the corresponding meta tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_12

LANGUAGE: JSX
CODE:
```
export const alt = 'My images alt text'

export default function Image() {}
```

----------------------------------------

TITLE: Adding a global script in Pages Router with next/script
DESCRIPTION: This code snippet shows how to add a global script using the `next/script` component with the `beforeInteractive` strategy within the `pages/_document.js` file when using the Pages Router in Next.js. It ensures the script is loaded before the page becomes interactive. It imports necessary components from `next/document` and `next/script`, and places the `Script` component within the `Document` component's render method, specifically before the closing `</body>` tag. The `src` attribute specifies the script URL and `strategy` attribute is set to `beforeInteractive`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-before-interactive-script-outside-document.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
import { Html, Head, Main, NextScript } from 'next/document'
import Script from 'next/script'

export default function Document() {
  return (
    <Html>
      <Head />
      <body>
        <Main />
        <NextScript />
        <Script
          src="https://example.com/script.js"
          strategy="beforeInteractive"
        ></Script>
      </body>
    </Html>
  )
}
```

----------------------------------------

TITLE: Implement Styled-JSX Component React
DESCRIPTION: Use the `styled-jsx` library to write isolated, scoped CSS directly within your React components using template literals inside `<style jsx>` tags. Global styles can be defined using `<style global jsx>`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/css-in-js.mdx#_snippet_6

LANGUAGE: JSX
CODE:
```
function HelloWorld() {
  return (
    <div>
      Hello world
      <p>scoped!</p>
      <style jsx>{`
        p {
          color: blue;
        }
        div {
          background: red;
        }
        @media (max-width: 600px) {
          div {
            background: blue;
          }
        }
      `}</style>
      <style global jsx>{`
        body {
          background: black;
        }
      `}</style>
    </div>
  )
}
```

----------------------------------------

TITLE: Accessing Locale Parameter in Next.js Page Component
DESCRIPTION: This snippet demonstrates how to access the current locale parameter in a Next.js page component using TypeScript and JavaScript versions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ lang: string }>
}) {
  const { lang } = await params
  return ...
}
```

LANGUAGE: javascript
CODE:
```
export default async function Page({ params }) {
  const { lang } = await params
  return ...
}
```

----------------------------------------

TITLE: Outputting Exported Alt Text Meta Tag - HTML
DESCRIPTION: Displays the HTML <head> meta tag generated by Next.js when the `alt` constant is exported from a programmatically generated image file (JS/TS/TSX). The 'content' attribute contains the value of the exported `alt` constant.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_13

LANGUAGE: HTML
CODE:
```
<meta property="og:image:alt" content="My images alt text" />
```

----------------------------------------

TITLE: Handling Web Vitals Metrics by Name (Pages Router)
DESCRIPTION: This code snippet illustrates how to handle specific web vital metrics by their `name` property using a switch statement inside the `useReportWebVitals` hook within the Pages Router in Next.js. It handles First Contentful Paint (FCP) and Largest Contentful Paint (LCP) metrics as examples.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { useReportWebVitals } from 'next/web-vitals'

function MyApp({ Component, pageProps }) {
  useReportWebVitals((metric) => {
    switch (metric.name) {
      case 'FCP': {
        // handle FCP results
      }
      case 'LCP': {
        // handle LCP results
      }
      // ...
    }
  })

  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: Connection Function Signature
DESCRIPTION: The `connection` function is designed to hold rendering until a user request is observed, returning a `void` Promise that is only necessary for dynamic rendering when common APIs are not employed. It requires no parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/connection.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
function connection(): Promise<void>
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command utilizes npm to create a new Next.js application with a basic CSS example.  It bootstraps the application, sets up necessary dependencies, and provides a starting point for developing with CSS Modules. The application will be named 'basic-css-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/basic-css/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example basic-css basic-css-app
```

----------------------------------------

TITLE: Third-party Integration With Connection API
DESCRIPTION: Updated implementation using the connection API to handle third-party integrations properly in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

export default async function Page() {
  await connection()
  // Everything from here down will be excluded from prerendering
  const token = await getDataFrom3rdParty();
  validateToken(token)
  return ...
}
```

----------------------------------------

TITLE: Using Regex Path Matching in Next.js Rewrites (JavaScript)
DESCRIPTION: This snippet shows how to use regular expressions within path parameters for more precise matching. The regex `(\d{1,})` after `:post` ensures that the path segment matched by `:post` consists of one or more digits. The matched value is available for use in the `destination`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/old-blog/:post(\d{1,})',
        destination: '/blog/:post', // Matched parameters can be used in the destination
      },
    ]
  },
}
```

----------------------------------------

TITLE: Reading Params in React Client Components - JavaScript
DESCRIPTION: In a JavaScript React Client Component, React's `use` function is used to extract a `slug` from a promise-based `params` object. This example demonstrates accessing parameters asynchronously in a non-async function, which aligns with typical client component restrictions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_13

LANGUAGE: js
CODE:
```
"use strict";

import { use } from 'react';

export default function Page({ params }) {
  const { slug } = use(params);
}

```

----------------------------------------

TITLE: Viewing Next.js Build Output - Bash
DESCRIPTION: This snippet presents an example of the output generated by the `next build` command. It shows a table summarizing the size and first-load JavaScript for different routes in the application, helping developers understand build performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
Route (app)                              Size     First Load JS
┌ ○ /_not-found                          0 B               0 kB
└ ƒ /products/[id]                       0 B               0 kB

○  (Static)   prerendered as static content
ƒ  (Dynamic)  server-rendered on demand
```

----------------------------------------

TITLE: Enhancing Console Output JavaScript
DESCRIPTION: Defines a function `improveConsole` that wraps standard console methods (like log, error, warn) to prefix and suffix output with Turbopack-specific markers (`TURBOPACK_OUTPUT_B`, `TURBOPACK_OUTPUT_E`) and optionally include stack traces (`TURBOPACK_OUTPUT_S`), facilitating structured parsing of output by the Turbopack orchestrator. It is applied to numerous console methods.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
const improveConsole = (name, stream, addStack)=>{
    const original = console[name];
    const stdio = process[stream];
    console[name] = (...args)=>{
        stdio.write(`TURBOPACK_OUTPUT_B\n`);
        original(...args);
        if (addStack) {
            const stack = new Error().stack?.replace(/^.+\n.+\n/, "") + "\n";
            stdio.write("TURBOPACK_OUTPUT_S\n");
            stdio.write(stack);
        }
        stdio.write("TURBOPACK_OUTPUT_E\n");
    };
};
improveConsole("error", "stderr", true);
improveConsole("warn", "stderr", true);
improveConsole("count", "stdout", true);
improveConsole("trace", "stderr", false);
improveConsole("log", "stdout", true);
improveConsole("group", "stdout", true);
improveConsole("groupCollapsed", "stdout", true);
improveConsole("table", "stdout", true);
improveConsole("debug", "stdout", true);
improveConsole("info", "stdout", true);
improveConsole("dir", "stdout", true);
improveConsole("dirxml", "stdout", true);
improveConsole("timeEnd", "stdout", true);
improveConsole("timeLog", "stdout", true);
improveConsole("timeStamp", "stdout", true);
improveConsole("assert", "stderr", true);
export { improveConsole as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Installing @next/eslint-plugin-next (bash)
DESCRIPTION: This snippet provides commands to install the `@next/eslint-plugin-next` package using npm, yarn, pnpm, and bun. Installing this plugin enables specific Next.js ESLint rules and configurations without requiring `next lint`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_13

LANGUAGE: bash
CODE:
```
npm install --save-dev @next/eslint-plugin-next

yarn add --dev @next/eslint-plugin-next

pnpm add --save-dev @next/eslint-plugin-next

bun add --dev @next/eslint-plugin-next
```

----------------------------------------

TITLE: Starting Development Server in Bash
DESCRIPTION: This code snippet provides the command to start the Next.js development server using various package managers like npm, yarn, pnpm, or bun. The development server can be accessed in the browser at http://localhost:3000. No additional dependencies are required, and it assumes the Next.js project has been correctly installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-empty/ts/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Redirecting Client-Side with useRouter (Pages Router, TypeScript)
DESCRIPTION: Demonstrates client-side navigation using the `useRouter` hook in a Next.js Pages Router component. It shows how to use the `router.push()` method within a button's `onClick` event handler to programmatically navigate the user to a different page (`/dashboard`) without a full page reload.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type="button" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}
```

----------------------------------------

TITLE: Creating Next.js app with Playwright example (bash)
DESCRIPTION: Uses `create-next-app` to generate a Next.js project configured with Playwright.  It utilizes the `with-playwright` example template. This is the quickest way to get started with Playwright in a Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --example with-playwright with-playwright-app
```

----------------------------------------

TITLE: Generating Multiple Sitemaps with generateSitemaps (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates using the `generateSitemaps` function to return an array of objects, each containing an 'id'. These IDs are then used by the default `sitemap` function to fetch a specific segment of data (e.g., products) and generate corresponding sitemap entries for that segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import type { MetadataRoute } from 'next';
import { BASE_URL } from '@/app/lib/constants';

export async function generateSitemaps() {
  // Fetch the total number of products and calculate the number of sitemaps needed
  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }];
}

export default async function sitemap({
  id,
}: {
  id: number
}): Promise<MetadataRoute.Sitemap> {
  // Google's limit is 50,000 URLs per sitemap
  const start = id * 50000;
  const end = start + 50000;
  const products = await getProducts(
    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`
  );
  return products.map((product) => ({
    url: `${BASE_URL}/product/${product.id}`,
    lastModified: product.date,
  }));
}
```

----------------------------------------

TITLE: Next.js Server Action Dead Code Elimination Example
DESCRIPTION: Illustrates how Next.js automatically removes unused Server Actions during the build process. Actions that are exported but not referenced by their secure ID in the client bundle (like `deleteUserAction` here) are eliminated, preventing public access and improving security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_28

LANGUAGE: jsx
CODE:
```
// app/actions.js
'use server'

// This action **is** used in our application, so Next.js
// will create a secure ID to allow the client to reference
// and call the Server Action.
export async function updateUserAction(formData) {}

// This action **is not** used in our application, so Next.js
// will automatically remove this code during `next build`
// and will not create a public endpoint.
export async function deleteUserAction(formData) {}
```

----------------------------------------

TITLE: Programmatically Submitting Form with requestSubmit (JSX)
DESCRIPTION: Demonstrates a Client Component handling a keyboard event (`onKeyDown`) on a textarea. It checks for Cmd/Ctrl + Enter key presses and triggers the submission of the nearest parent form using `e.currentTarget.form?.requestSubmit()`. This requires the textarea to be nested within a `<form>` element.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
'use client'

export function Entry() {
  const handleKeyDown = (e) => {
    if (
      (e.ctrlKey || e.metaKey) &&
      (e.key === 'Enter' || e.key === 'NumpadEnter')
    ) {
      e.preventDefault()
      e.currentTarget.form?.requestSubmit()
    }
  }

  return (
    <div>
      <textarea name="entry" rows={20} required onKeyDown={handleKeyDown} />
    </div>
  )
}
```

----------------------------------------

TITLE: Embedding YouTube Videos using Next.js
DESCRIPTION: The YouTubeEmbed component from '@next/third-parties/google' is used to load and display YouTube videos efficiently. It leverages lite-youtube-embed for faster loading and requires the videoid parameter to specify the YouTube video. The component supports custom height specifications.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/third-parties/README.md#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { YouTubeEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <YouTubeEmbed videoid=\"ogfYd705cRs\" height={400} />\n}
```

----------------------------------------

TITLE: Creating a Theme-Aware Image Component in Next.js (TypeScript)
DESCRIPTION: This TypeScript React component wraps two Next.js Image components to display different images based on the user's theme preference. It uses the CSS module from the previous snippet.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_32

LANGUAGE: tsx
CODE:
```
import styles from './theme-image.module.css'
import Image, { ImageProps } from 'next/image'

type Props = Omit<ImageProps, 'src' | 'priority' | 'loading'> & {
  srcLight: string
  srcDark: string
}

const ThemeImage = (props: Props) => {
  const { srcLight, srcDark, ...rest } = props

  return (
    <>
      <Image {...rest} src={srcLight} className={styles.imgLight} />
      <Image {...rest} src={srcDark} className={styles.imgDark} />
    </>
  )
}
```

----------------------------------------

TITLE: Implementing Wildcard Path Matching Next.js JavaScript
DESCRIPTION: This example shows how to use a wildcard parameter, like `/blog/:slug*`, to match nested paths. The asterisk `*` after the parameter name indicates that it should match zero or more segments after the specified path prefix. The matched segment(s) can be used in the header `key` and `value`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/blog/:slug*',
        headers: [
          {
            key: 'x-slug',
            value: ':slug*', // Matched parameters can be used in the value
          },
          {
            key: 'x-slug-:slug*', // Matched parameters can be used in the key
            value: 'my other custom header value',
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Creating a Search Form in Next.js JavaScript
DESCRIPTION: This JavaScript snippet shows how to create a search form that redirects to a results page in a Next.js application. It makes use of the 'next/form' import and the form is configured to use '/search' as its action. Upon submission, the search query is appended to the URL as parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
import Form from 'next/form'

export default function Page() {
  return (
    <Form action="/search">
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Invalid Async Client Component Example
DESCRIPTION: Example showing the incorrect usage of async function in a Client Component that triggers the error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

// This will cause an error
async function ClientComponent() {
  // ...
}
```

----------------------------------------

TITLE: Register OpenTelemetry in instrumentation.js
DESCRIPTION: Registers OpenTelemetry for observability. This function is called once when a new Next.js server instance is initiated. It imports `registerOTel` from `@vercel/otel` and calls it with the application name 'next-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}
```

----------------------------------------

TITLE: Demonstrating Header Overriding Behavior Next.js JavaScript
DESCRIPTION: This example illustrates how headers are overridden when multiple entries match the same path and set the same header key. The `headers` array is processed in order, and the last matching header key/value pair for a specific path will take precedence.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          {
            key: 'x-hello',
            value: 'there',
          },
        ],
      },
      {
        source: '/hello',
        headers: [
          {
            key: 'x-hello',
            value: 'world',
          },\n        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Add Google Analytics to a Single Page (JSX)
DESCRIPTION: This code snippet demonstrates how to add Google Analytics to a specific page in a Next.js application using the `@next/third-parties/google` library and JSX. The `GoogleAnalytics` component is imported and included within the `Page` component, with the Google Analytics measurement ID (`gaId`) passed as a prop. This makes Google Analytics track only the specific page where the component is added.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function Page() {
  return <GoogleAnalytics gaId="G-XYZ" />
}
```

----------------------------------------

TITLE: Configuring Fetch Logging - Next.js next.config.js
DESCRIPTION: Shows how to enable detailed logging for `fetch` requests in the Next.js development server by adding a `logging` configuration to `next.config.js`. Setting `fetches.fullUrl` to `true` logs the full URL for each fetch call, aiding debugging.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_13

LANGUAGE: jsx
CODE:
```
module.exports = {
  logging: {
    fetches: {
      fullUrl: true,
    },
  },
}
```

----------------------------------------

TITLE: Overriding the Error Component in Next.js
DESCRIPTION: This example demonstrates how to override the default `Error` component in Next.js by defining a custom component in `pages/_error.js`. The custom `Error` component receives a `statusCode` prop and displays an error message based on whether the error occurred on the server or client. The `getInitialProps` method is used to determine the status code.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/08-custom-error.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
function Error({ statusCode }) {
  return (
    <p>
      {statusCode
        ? `An error ${statusCode} occurred on server`
        : 'An error occurred on client'}
    </p>
  )
}

Error.getInitialProps = ({ res, err }) => {
  const statusCode = res ? res.statusCode : err ? err.statusCode : 404
  return { statusCode }
}

export default Error
```

----------------------------------------

TITLE: Configuring transpilePackages in Next.js Configuration
DESCRIPTION: This snippet demonstrates how to configure Next.js to automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies in node_modules. It uses the transpilePackages option in next.config.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/transpilePackages.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  transpilePackages: ['package-name'],
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Implementing Edge API Route for Proxy Requests
DESCRIPTION: Example of using Edge API Routes to handle proxy requests with header forwarding.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { type NextRequest } from 'next/server'

export const config = {
  runtime: 'edge',
}

export default async function handler(req: NextRequest) {
  const authorization = req.cookies.get('authorization')
  return fetch('https://backend-api.com/api/protected', {
    method: req.method,
    headers: {
      authorization,
    },
    redirect: 'manual',
  })
}
```

----------------------------------------

TITLE: Error Message: Module not found in Next.js
DESCRIPTION: This is the error message that Next.js throws when a module (in this case, 'fs') cannot be resolved in the browser environment.  This typically happens when server-side code is inadvertently included in the client-side bundle due to incorrect import or export patterns.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_3

LANGUAGE: txt
CODE:
```
Module not found: Can't resolve 'fs' in './pages/example-b.js'
```

----------------------------------------

TITLE: Configuring React Strict Mode in Next.js
DESCRIPTION: This code snippet shows how to enable React's Strict Mode in a Next.js application by adding the reactStrictMode configuration to next.config.js. This helps identify potential problems during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactStrictMode.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  reactStrictMode: true,
}
```

----------------------------------------

TITLE: Disabling Scroll on Link Navigation (App Router)
DESCRIPTION: Shows how to prevent Next.js from scrolling to the top or a hash ID when navigating using `<Link>` in the App Router by passing `scroll={false}`. This overrides the default behavior of maintaining scroll position or scrolling to the top if the target element is out of view.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_17

LANGUAGE: JSX
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link href="/#hashid" scroll={false}>
      Disables scrolling to the top
    </Link>
  )
}
```

LANGUAGE: TSX
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link href="/#hashid" scroll={false}>
      Disables scrolling to the top
    </Link>
  )
}
```

----------------------------------------

TITLE: Configuring Website URL for Sitemap
DESCRIPTION: This code shows how to configure the website URL used in the `sitemap.xml` file by setting the `WEBSITE_URL` environment variable in the `.env` file. This URL should be replaced with the actual domain name in a production environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
# Used to add the domain to sitemap.xml, replace it with a real domain in production
WEBSITE_URL=https://my-domain.com
```

----------------------------------------

TITLE: Single Page Font Usage in Next.js (Pages Router)
DESCRIPTION: This code snippet demonstrates how to use a font on a single page in a Next.js application using the Pages Router. It imports the Inter font and applies its class name to a div element within the `Home` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_8

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  return (
    <div className={inter.className}>
      <p>Hello World</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating a Stream from an Iterator - TypeScript
DESCRIPTION: This TypeScript snippet defines a function that converts an async iterator into a ReadableStream. It includes a helper function to simulate data production using an iterator.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream
function iteratorToStream(iterator: any) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    },
  })
}

function sleep(time: number) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}
```

----------------------------------------

TITLE: Running the linter
DESCRIPTION: This command executes all configured linters (ESLint, Prettier, alex) on the Next.js codebase. It checks the code and documentation for style, formatting, and inclusive language violations, reporting any found issues.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
"pnpm lint"
```

----------------------------------------

TITLE: Implementing Dynamic Redirects using Middleware and Edge Config
DESCRIPTION: Manages a large number of dynamic redirects programmatically within Next.js Middleware by fetching redirect rules from an external data source, demonstrated here using Vercel's Edge Config (`@vercel/edge-config`). The middleware checks if the incoming request path matches a key in the external configuration and performs a redirect if a rule is found. This approach avoids application redeployment for redirect updates.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
import { NextResponse, NextRequest } from 'next/server'
import { get } from '@vercel/edge-config'

type RedirectEntry = {
  destination: string
  permanent: boolean
}

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname
  const redirectData = await get(pathname)

  if (redirectData && typeof redirectData === 'string') {
    const redirectEntry: RedirectEntry = JSON.parse(redirectData)
    const statusCode = redirectEntry.permanent ? 308 : 307
    return NextResponse.redirect(redirectEntry.destination, statusCode)
  }

  // No redirect found, continue without redirecting
  return NextResponse.next()
}
```

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'
import { get } from '@vercel/edge-config'

export async function middleware(request) {
  const pathname = request.nextUrl.pathname
  const redirectData = await get(pathname)

  if (redirectData) {
    const redirectEntry = JSON.parse(redirectData)
    const statusCode = redirectEntry.permanent ? 308 : 307
    return NextResponse.redirect(redirectEntry.destination, statusCode)
  }

  // No redirect found, continue without redirecting
  return NextResponse.next()
}
```

----------------------------------------

TITLE: Using HTML Picture Element
DESCRIPTION: Shows how to implement responsive images using the HTML picture element with multiple source formats (AVIF, WebP, JPEG) for better browser compatibility.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
function Home() {
  return (
    <picture>
      <source srcSet="https://example.com/hero.avif" type="image/avif" />
      <source srcSet="https://example.com/hero.webp" type="image/webp" />
      <img
        src="https://example.com/hero.jpg"
        alt="Landscape picture"
        width={800}
        height={500}
      />
    </picture>
  )
}
```

----------------------------------------

TITLE: Correcting Headers Initialization in Next.js API Route
DESCRIPTION: This snippet illustrates the correct way to obtain headers within an API route in Next.js. By calling the 'headers()' function inside an asynchronous function, it ensures that the headers are accessible within the request context, avoiding potential errors associated with global scope usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-api-wrong-context.mdx#2025-04-21_snippet_1

LANGUAGE: diff
CODE:
```
import { headers } from 'next/headers'

- const headersList = await headers()
export async function GET() {
+ const headersList = await headers()
  return ...
}
```

----------------------------------------

TITLE: Creating a Next.js App using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application named 'my-blog' using the 'blog' example. It sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example blog my-blog
```

----------------------------------------

TITLE: Enabling CSS Chunking in Next.js (TypeScript)
DESCRIPTION: This code snippet demonstrates how to enable CSS chunking in a Next.js application using the `experimental.cssChunking` option within the `next.config.ts` file. The default value is `true`, which merges CSS files to reduce the number of chunks and requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cssChunking.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig = {
  experimental: {
    cssChunking: true, // default
  },
} satisfies NextConfig

export default nextConfig
```

----------------------------------------

TITLE: Initializing Next.js app
DESCRIPTION: This code snippet shows the basic initialization of a Next.js application using the `next()` function. It demonstrates how to create an instance of the Next.js application for use in a custom server setup. The app instance will handle requests to your next.js pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-server-options.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
```js filename="server.js"
const app = next()
```
```

----------------------------------------

TITLE: Copying Environment File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`.  The `.env.local` file is intended to store environment-specific variables, and it's typically excluded from version control to keep sensitive information secure.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Tagging Data in Next.js Component with TypeScript
DESCRIPTION: Provides an example of tagging data within a component function using cacheTag in TypeScript. This code allows tagging 'bookings-data' for cache entries with an optional tag from fetched data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { unstable_cacheTag as cacheTag } from 'next/cache'

interface BookingsProps {
  type: string
}

export async function Bookings({ type = 'haircut' }: BookingsProps) {
  'use cache'
  cacheTag('bookings-data')

  async function getBookingsData() {
    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)
    return data
  }

  return //...
}
```

----------------------------------------

TITLE: Starting Production Server with Multistage Builds
DESCRIPTION: This snippet outlines the procedure to start a production server for the Next.js application utilizing multistage builds, ensuring only the necessary files are included in the final Docker image.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
# Create a network, which allows containers to communicate

```

LANGUAGE: bash
CODE:
```
docker network create my_network
```

LANGUAGE: bash
CODE:
```
# Build prod

```

LANGUAGE: bash
CODE:
```
docker compose -f compose.prod.yaml build
```

LANGUAGE: bash
CODE:
```
# Up prod in detached mode

```

LANGUAGE: bash
CODE:
```
docker compose -f compose.prod.yaml up -d
```

----------------------------------------

TITLE: Creating Next.js App with Zones using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application named `with-zones-app` based on the `with-zones` example. It sets up the project with the appropriate structure and dependencies for a multi-zone environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-zones with-zones-app
```

----------------------------------------

TITLE: Dynamic Rendering Example (TSX)
DESCRIPTION: This code demonstrates how to force dynamic rendering in a Next.js page. Setting the `dynamic` export to `'force-dynamic'` ensures that the page is rendered dynamically on each request, allowing `useSearchParams` to be available on the server during initial render.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import SearchBar from './search-bar'\n\nexport const dynamic = 'force-dynamic'\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <SearchBar />\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}
```

----------------------------------------

TITLE: Generating Image Metadata Array (JSX)
DESCRIPTION: This example demonstrates how to use `generateImageMetadata` to return an array of objects, each containing metadata for a different image version. It includes properties like `contentType`, `size`, and a required `id`, which is later passed as props to the image generating function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { ImageResponse } from 'next/og'

export function generateImageMetadata() {
  return [
    {
      contentType: 'image/png',
      size: { width: 48, height: 48 },
      id: 'small',
    },
    {
      contentType: 'image/png',
      size: { width: 72, height: 72 },
      id: 'medium',
    },
  ]
}

export default function Icon({ id }) {
  return new ImageResponse(
    (
      <div
        style={{
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: 88,
          background: '#000',
          color: '#fafafa',
        }}
      >
        Icon {id}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Implementing Per-Page Layouts in Next.js Pages
DESCRIPTION: Adding a getLayout property to a page component to define page-specific layouts. This approach allows for complex nested layouts and is defined at the page level rather than globally.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import Layout from '../components/layout'
import NestedLayout from '../components/nested-layout'

export default function Page() {
  return (
    /** Your content */
  )
}

Page.getLayout = function getLayout(page) {
  return (
    <Layout>
      <NestedLayout>{page}</NestedLayout>
    </Layout>
  )
}
```

----------------------------------------

TITLE: Applying Local CSS using styled-jsx in React/Next.js
DESCRIPTION: This snippet demonstrates the correct way to apply local CSS styles within a React/Next.js component using styled-jsx. It defines a functional component that renders HTML elements and embeds a `<style jsx>` tag. Crucially, the `<style jsx>` tag is passed a single JavaScript template literal containing the CSS rules, preventing the 'Invalid styled-jsx children' error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-styled-jsx-children.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
const Component = () => (
  <div>
    <p>Red paragraph</p>
    <style jsx>{`
      p {
        color: red;
      }
    `}</style>
  </div>
)
```

----------------------------------------

TITLE: Setting Stripe API Keys
DESCRIPTION: This code shows the placeholder for Stripe Publishable and Secret keys inside the `.env.local` file. These are essential for the application to interact with Stripe's API.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=<replace-with-your-publishable-key>
STRIPE_SECRET_KEY=<replace-with-your-secret-key>
```

----------------------------------------

TITLE: Setting Session Cookie in Next.js Pages Router API Route (TypeScript)
DESCRIPTION: This snippet demonstrates setting a session cookie within a Next.js Pages Router API route handler. It encrypts session data from the request body using a separate `encrypt` function and then uses the `cookie` library's `serialize` function to create an HTTP-only, secure cookie with a one-week expiration, setting it in the response headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_17

LANGUAGE: ts
CODE:
```
import { serialize } from 'cookie';
import type { NextApiRequest, NextApiResponse } from 'next';
import { encrypt } from '@/app/lib/session';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const sessionData = req.body;
  const encryptedSessionData = encrypt(sessionData);

  const cookie = serialize('session', encryptedSessionData, {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    maxAge: 60 * 60 * 24 * 7, // One week
    path: '/',
  });
  res.setHeader('Set-Cookie', cookie);
  res.status(200).json({ message: 'Successfully set cookie!' });
}
```

----------------------------------------

TITLE: Streaming Video Component with React Suspense - JSX
DESCRIPTION: This snippet illustrates how to stream a video component using React Suspense within a Next.js page. It imports the `VideoComponent` and wraps it with `<Suspense>`, providing a fallback UI (loading message) while the video is loading. This approach prevents page blocking and improves user experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import VideoComponent from '../ui/VideoComponent.jsx'

export default function Page() {
  return (
    <section>
      <Suspense fallback={<p>Loading video...</p>}>
        <VideoComponent />
      </Suspense>
      {/* Other content of the page */}
    </section>
  )
}
```

----------------------------------------

TITLE: Importing and Using Icons from a Design System in JavaScript
DESCRIPTION: This code snippet demonstrates the import and usage of icon components (`Cart` and `Search`) from a design system. By using modular imports, it allows selective importing of necessary components to optimize performance. This snippet is primarily used in React and similar frameworks, where JSX syntax is involved. It requires the `design-system/icons` module to be available in the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/modularizeimports/pages/mdx/index.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Cart, Search } from 'design-system/icons'

# ModularizeImports

<Cart />

<Search />
```

----------------------------------------

TITLE: Cypress E2E Navigation Test
DESCRIPTION: Creates a Cypress End-to-End (E2E) test to verify navigation between pages. It visits the index page, clicks a link to the about page, and asserts that the URL and page content are correct. Requires Cypress to be installed and configured for E2E testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
describe('Navigation', () => {
  it('should navigate to the about page', () => {
    // Start from the index page
    cy.visit('http://localhost:3000/')

    // Find a link with an href attribute containing "about" and click it
    cy.get('a[href*="about"]').click()

    // The new url should include "/about"
    cy.url().should('include', '/about')

    // The new page should contain an h1 with "About"
    cy.get('h1').contains('About')
  })
})
```

----------------------------------------

TITLE: Convert Absolute Image Imports in Next.js
DESCRIPTION: This snippet shows how to update absolute import paths for images imported from the `/public` directory to relative imports when migrating to Next.js. This is necessary because Next.js handles static assets differently.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_20

LANGUAGE: tsx
CODE:
```
// Before
import logo from '/logo.png'

// After
import logo from '../public/logo.png'
```

----------------------------------------

TITLE: Using Link with Middleware Rewrites (Pages Router)
DESCRIPTION: Demonstrates the correct usage of the `<Link>` component in the Pages Router for scenarios involving Middleware rewrites. It utilizes the `as` prop for the user-visible URL (`/dashboard`) and the `href` prop for the actual route determined client-side (e.g., based on authentication), ensuring proper linking and prefetching behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_22

LANGUAGE: TypeScript
CODE:
```
'use client'

import Link from 'next/link'
import useIsAuthed from './hooks/useIsAuthed' // Your auth hook

export default function Home() {
  const isAuthed = useIsAuthed()
  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'
  return (
    <Link as="/dashboard" href={path}>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import Link from 'next/link'
import useIsAuthed from './hooks/useIsAuthed' // Your auth hook

export default function Home() {
  const isAuthed = useIsAuthed()
  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'
  return (
    <Link as="/dashboard" href={path}>
      Dashboard
    </Link>
  )
}
```

----------------------------------------

TITLE: Accessing Dynamic searchParams Prop Triggering Dynamism (JavaScript)
DESCRIPTION: Defines an asynchronous component that receives `searchParams` as a prop (potentially from a dynamic source). Accessing the value (`await searchParams`) causes this specific component to be rendered dynamically during the request, even if its parent was prerendered.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
export async function Table({ searchParams }) {
  const sort = (await searchParams).sort === 'true'
  return '...'
}
```

----------------------------------------

TITLE: MSW Initialization using npx
DESCRIPTION: This command initializes Mock Service Worker in the public directory. It's used to generate the `mockServiceWorker.js` file, which is essential for MSW to intercept requests in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx msw init public/
```

----------------------------------------

TITLE: Running Next.js in Development Mode
DESCRIPTION: Commands to start the Next.js development server using npm or yarn, allowing local testing at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Importing MDX File App Router Typescript
DESCRIPTION: Demonstrates how to import an `.mdx` file (`Welcome`) into a standard Next.js App Router page component written in TypeScript and render it by returning the imported component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import Welcome from '@/markdown/welcome.mdx'

export default function Page() {
  return <Welcome />
}
```

----------------------------------------

TITLE: Embedding Google Maps with Next.js
DESCRIPTION: The GoogleMapsEmbed component enables the embedding of Google Maps in a Next.js application page. It uses the apiKey for authentication and supports parameters such as height, width, mode, and query (q) for specifying the location to display. By default, it employs lazy loading via the loading attribute.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/third-parties/README.md#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { GoogleMapsEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return (\n    <GoogleMapsEmbed\n      apiKey=\"XYZ\"\n      height={200}\n      width=\"100%\"\n      mode=\"place\"\n      q=\"Brooklyn+Bridge,New+York,NY\"\n    />\n  )\n}
```

----------------------------------------

TITLE: Checking Draft Mode in getStaticProps (JavaScript)
DESCRIPTION: This JavaScript code shows how to check if Draft Mode is enabled within the `getStaticProps` function using `context.draftMode`. When Draft Mode is active, `getStaticProps` is called at request time, and `context.draftMode` is set to `true`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
export async function getStaticProps(context) {
  if (context.draftMode) {
    // dynamic data
  }
}
```

----------------------------------------

TITLE: Passing Uncached Data via Children in Next.js Cache Component
DESCRIPTION: Demonstrates how to pass non-serializable or uncached data (`uncachedData`) to a component marked with the `'use cache'` directive (`CacheComponent`) by rendering components that consume this data inside the cached component's `children` prop. The cached component fetches its own cached data (`cachedData`) and renders the `children` alongside its cached content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const uncachedData = await getData()
  return (
    <CacheComponent>
      <DynamicComponent data={uncachedData} />
    </CacheComponent>
  )
}

async function CacheComponent({ children }: { children: ReactNode }) {
  'use cache'
  const cachedData = await fetch('/api/cached-data')
  return (
    <div>
      <PrerenderedComponent data={cachedData} />
      {children}
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const uncachedData = await getData()
  return (
    <CacheComponent>
      <DynamicComponent data={uncachedData} />
    </CacheComponent>
  )
}

async function CacheComponent({ children }) {
  'use cache'
  const cachedData = await fetch('/api/cached-data')
  return (
    <div>
      <PrerenderedComponent data={cachedData} />
      {children}
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing Next.js OpenTelemetry Tracer JavaScript
DESCRIPTION: Defines the `NextTracerImpl` class which provides methods for managing OpenTelemetry traces within a Next.js context. Includes methods for starting and ending spans, propagating context, handling promises and callbacks, and accessing span attributes. It also defines helper functions like `isPromise` and `getSpanId`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_30

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { NextVanillaSpanAllowlist } from './constants';
import { a as api } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import { g as ROOT_CONTEXT } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import { h as closeSpanWithError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -9
};
import { LogSpanAllowList } from './constants';
import { i as rootSpanAttributesStore } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -13
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
const isPromise = (p)=>{
    return p !== null && typeof p === 'object' && typeof p.then === 'function';
};
const rootSpanIdKey = api.createContextKey('next.rootSpanId');
let lastSpanId = 0;
const getSpanId = ()=>lastSpanId++;
const clientTraceDataSetter = {
    set (carrier, key, value) {
        carrier.push({
            key,
            value
        });
    }
};
class NextTracerImpl {
    getTracerInstance() {
        return trace.getTracer('next.js', '0.0.1');
    }
    getContext() {
        return context;
    }
    getTracePropagationData() {
        const activeContext = context.active();
        const entries = [];
        propagation.inject(activeContext, entries, clientTraceDataSetter);
        return entries;
    }
    getActiveScopeSpan() {
        return trace.getSpan(context == null ? void 0 : context.active());
    }
    withPropagatedContext(carrier, fn, getter) {
        const activeContext = context.active();
        if (trace.getSpanContext(activeContext)) {
            return fn();
        }
        const remoteContext = propagation.extract(activeContext, carrier, getter);
        return context.with(remoteContext, fn);
    }
    trace(...args) {
        var _trace_getSpanContext;
        const [type, fnOrOptions, fnOrEmpty] = args;
        const { fn, options } = typeof fnOrOptions === 'function' ? {
            fn: fnOrOptions,
            options: {}
        } : {
            fn: fnOrEmpty,
            options: {
                ...fnOrOptions
            }
        };
        const spanName = options.spanName ?? type;
        if (!NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== '1' || options.hideSpan) {
            return fn();
        }
        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        let isRootSpan = false;
        if (!spanContext) {
            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;
            isRootSpan = true;
        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {
            isRootSpan = true;
        }
        const spanId = getSpanId();
        options.attributes = {
            'next.span_name': spanName,
            'next.span_type': type,
            ...options.attributes
        };
        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{
                const startTime = 'performance' in globalThis && 'measure' in performance ? globalThis.performance.now() : undefined;
                const onCleanup = ()=>{
                    rootSpanAttributesStore.delete(spanId);
                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && LogSpanAllowList.includes(type || '')) {
                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split('.').pop() || '').replace(/[A-Z]/g, (match)=>'-' + match.toLowerCase())}`, {
                            start: startTime,
                            end: performance.now()
                        });
                    }
                };
                if (isRootSpan) {
                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));
                }
                try {
                    if (fn.length > 1) {
                        return fn(span, (err)=>closeSpanWithError(span, err));
                    }
                    const result = fn(span);
                    if (isPromise(result)) {
                        return result.then((res)=>{
                            span.end();
                            return res;
                        }).catch((err)=>{
                            closeSpanWithError(span, err);
                            throw err;
                        }).finally(onCleanup);
                    } else {
                        span.end();
                        onCleanup();
                    }
                    return result;
                } catch (err) {
                    closeSpanWithError(span, err);
                    onCleanup();
                    throw err;
                }
            }));
    }
    wrap(...args) {
        const tracer = this;
        const [name, options, fn] = args.length === 3 ? args : [
            args[0],
            {},
            args[1]
        ];
        if (!NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== '1') {
            return fn;
        }
        return function() {
            let optionsObj = options;
            if (typeof optionsObj === 'function' && typeof fn === 'function') {
                optionsObj = optionsObj.apply(this, arguments);
            }
            const lastArgId = arguments.length - 1;
            const cb = arguments[lastArgId];
            if (typeof cb === 'function') {
                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);
                return tracer.trace(name, optionsObj, (_span, done)=>{
                    arguments[lastArgId] = function(err) {
                        done == null ? void 0 : done(err);
                        return scopeBoundCb.apply(this, arguments);
                    };
                    return fn.apply(this, arguments);
                });
            } else {
                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));
            }
        };
    }
    startSpan(...args) {
        const [type, options] = args;
        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        return this.getTracerInstance().startSpan(type, options, spanContext);
    }
    getSpanContext(parentSpan) {
        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;
        return spanContext;
    }
    getRootSpanAttributes() {
        const spanId = context.active().getValue(rootSpanIdKey);
        return rootSpanAttributesStore.get(spanId);
    }
}
const getTracer = (()=>{n    const tracer = new NextTracerImpl();
    return ()=>tracer;
})();
export { getTracer };
export { isPromise as j } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { rootSpanIdKey as k } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { lastSpanId as l } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { getSpanId as m } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { clientTraceDataSetter as n } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { NextTracerImpl as o } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { getTracer as p } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Configuring Next.js for UI Kitten Components
DESCRIPTION: Configuration setup in next.config.js to enable transpilation of external packages using next-transpile-modules
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { withExpo } = require("@expo/next-adapter");
const withPlugins = require("next-compose-plugins");
const withTM = require("next-transpile-modules")([
  // Add the name of your package here...
  "@ui-kitten/components",
]);

module.exports = withPlugins([withTM, [withExpo, { projectRoot: __dirname }]], {
  // ...
});
```

----------------------------------------

TITLE: Creating Next.js app using create-next-app with npm
DESCRIPTION: This command uses npm to create a new Next.js application named 'image-app' based on the 'image-component' example. It initializes a new project with the specified template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-component/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example image-component image-app
```

----------------------------------------

TITLE: Correct Asynchronous Request Access in Next.js Route Handler
DESCRIPTION: Example showing correct implementation using await connection() before accessing request headers in a Next.js GET route handler
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-request.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

export default async function GET(request) {
  await connection()
  const requestHeaders = request.headers
  return ...
}
```

----------------------------------------

TITLE: Server Component with Blog Provider
DESCRIPTION: Server component implementation that creates a blog data promise and provides it through the BlogProvider.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
import { BlogProvider } from './context'

export default function Page() {
  const blogPromise = fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )

  return (
    <BlogProvider blogPromise={blogPromise}>
      <BlogPosts />
    </BlogProvider>
  )
}
```

----------------------------------------

TITLE: Creating a Next.js App with WebAssembly Example
DESCRIPTION: These commands use `create-next-app` to bootstrap a Next.js application based on the `with-webassembly` example. It supports npm, yarn, and pnpm as package managers. The app will be named `with-webassembly-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-webassembly/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-webassembly with-webassembly-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-webassembly with-webassembly-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-webassembly with-webassembly-app
```

----------------------------------------

TITLE: Fetching Data with getStaticProps in Pages Router (JSX)
DESCRIPTION: Defines the `getStaticProps` function within a `pages` directory file. This function fetches data from an external API at build time and passes it as props to the page component for pre-rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_20

LANGUAGE: jsx
CODE:
```
// `pages` directory

export async function getStaticProps() {
  const res = await fetch(`https://...`)
  const projects = await res.json()

  return { props: { projects } }
}

export default function Index({ projects }) {
  return projects.map((project) => <div>{project.name}</div>)
}
```

----------------------------------------

TITLE: Disabling Response Limit in API Routes on Next.js
DESCRIPTION: This snippet shows how to disable the response limit for an API Route in Next.js by setting the responseLimit to false. This is useful if you require larger data responses but should be used with caution due to performance implications.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/api-routes-response-size-limit.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export const config = {
  api: {
    responseLimit: false,
  },
}
```

----------------------------------------

TITLE: Defining Static Blog Post Paths in JavaScript
DESCRIPTION: This snippet defines static paths for a blog page with dynamic segments. The `getStaticPaths` function configures paths for rendering blog posts statically in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-ssg-paths.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
export const getStaticPaths = () => ({
  paths: ['/blog/conflicting', '/blog/another'],
  fallback: false,
})

export default function Blog() {
  return 'Blog!'
}
```

----------------------------------------

TITLE: Running Development Server with Package Manager
DESCRIPTION: This snippet demonstrates how to start a Next.js development server using various package managers like npm, yarn, pnpm, and bun. These commands set up the local server to run at http://localhost:3000. Dependencies include having a Node.js environment and the Next.js framework installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw/js/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Running Tests for Next.js App
DESCRIPTION: This snippet provides the commands necessary to run tests in a Next.js application configured with Jest. It illustrates the command syntax using npm, Yarn, and pnpm for executing tests.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm test
```

LANGUAGE: bash
CODE:
```
yarn test
```

LANGUAGE: bash
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Defining Color Scheme in JavaScript
DESCRIPTION: This code snippet shows how to set the color scheme meta tag in a viewport object using JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
export const viewport = {
  colorScheme: 'dark',
}
```

----------------------------------------

TITLE: Updating Entrypoint to Use Client Component (TSX)
DESCRIPTION: This code updates the entrypoint page in Next.js (TSX) to use the newly created Client Component. It imports the `ClientOnly` component and renders it within the `Page` component. This ensures that the main application logic runs on the client side by utilizing the client component that disables SSR.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
import '../../index.css'
import { ClientOnly } from './client'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return <ClientOnly />
}
```

----------------------------------------

TITLE: Defining Image Content Type TSX
DESCRIPTION: Defines the static `contentType` export for Open Graph or Twitter images in a TSX file. This string specifies the MIME type of the generated image, typically 'image/png', which is used by Next.js to set the appropriate meta tag in the HTML head.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
export const contentType = 'image/png'

export default function Image() {}
```

----------------------------------------

TITLE: Accessing Draft Mode in API Routes (JavaScript)
DESCRIPTION: This JavaScript code demonstrates how to access the `draftMode` flag in an API route via `req.draftMode`. This allows you to conditionally retrieve draft data within the API route handler.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
export default function myApiRoute(req, res) {
  if (req.draftMode) {
    // get draft data
  }
}
```

----------------------------------------

TITLE: Escaping Special Characters in Source Paths Next.js JavaScript
DESCRIPTION: This example shows how to escape characters like `(`, `)`, `{`, `}`, `:`, `*`, `+`, `?` when they are intended to be literal characters in the `source` path rather than part of the regex or path matching syntax. Each special character must be prefixed with a double backslash `\\`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        // this will match `/english(default)/something` being requested
        source: '/english\\(default\\)/:slug',
        headers: [
          {
            key: 'x-header',
            value: 'value',
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Installing sharp with pnpm
DESCRIPTION: This snippet demonstrates how to install the `sharp` package using pnpm. It is an alternative solution for resolving issues with Next.js' built-in image optimization when `sharp` is missing or improperly installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/install-sharp.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm add sharp
```

----------------------------------------

TITLE: Implementing Custom Link Component with passHref in Next.js
DESCRIPTION: Demonstrates how to properly create a custom styled link component using next/link with passHref and legacyBehavior props. The example shows integration with styled-components and proper href forwarding to the underlying anchor tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-passhref.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'
import styled from 'styled-components'

const StyledLink = styled.a`
  color: red;
`

function NavLink({ href, name }) {
  return (
    <Link href={href} passHref legacyBehavior>
      <StyledLink>{name}</StyledLink>
    </Link>
  )
}

export default NavLink
```

----------------------------------------

TITLE: Scheduling Task After Rendering in Next.js Layout (JSX)
DESCRIPTION: This snippet shows the usage of the `after` function within a Next.js Server Component layout written in JSX. Similar to the TSX example, it imports `after` and a `log` function, then uses `after` to delay the execution of the `log()` call until after the layout rendering and response sending are complete.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/after.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { after } from 'next/server';
// Custom logging function
import { log } from '@/app/utils';

export default function Layout({ children }) {
  after(() => {
    // Execute after the layout is rendered and sent to the user
    log();
  });
  return <>{children}</>;
}
```

----------------------------------------

TITLE: Creating Next.js App with Webiny Example
DESCRIPTION: These commands are used to bootstrap a new Next.js application using the `cms-webiny` example. They use `create-next-app` with npm, yarn, and pnpm package managers. This will create a new project directory named `cms-webiny-app` with the specified template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-webiny cms-webiny-app
```

----------------------------------------

TITLE: Run Next.js development server (npm)
DESCRIPTION: This command uses npm to execute the 'dev' script defined in the project's package.json. The purpose is to start the Next.js development server, allowing developers to view and test the application locally. It typically starts the server on localhost.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Recommended next/dynamic Multiple Module Loading (After)
DESCRIPTION: Example showing the recommended way to load multiple modules dynamically in Next.js 9 and later by calling `dynamic` separately for each component, aligning closer with React's `lazy`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_13

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const Hello1 = dynamic(() => import('../components/hello1'))
const Hello2 = dynamic(() => import('../components/hello2'))

function HelloBundle({ title }) {
  return (
    <div>
      <h1>{title}</h1>
      <Hello1 />
      <Hello2 />
    </div>
  )
}

function DynamicBundle() {
  return <HelloBundle title="Dynamic Bundle" />
}

export default DynamicBundle
```

----------------------------------------

TITLE: Metadata API usage - JSX
DESCRIPTION: This code defines metadata using the Next.js Metadata API in a JavaScript (JSX) file. It exports a `metadata` object with `title` and `description` properties. The `RootLayout` component then renders the HTML structure, placing the provided `children` inside the body.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'React App',
  description: 'Web site created with Next.js.',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode (Yarn)
DESCRIPTION: These commands install the necessary dependencies and start the Next.js application in development mode using Yarn. `yarn install` installs dependencies and `yarn dev` starts the development server, typically on port 3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Running Next.js with TinaCMS in Development Mode
DESCRIPTION: These commands install the necessary dependencies and start the Next.js application in development mode with TinaCMS. The `npm install` or `yarn install` command installs the project dependencies, while `npm run tina-dev` or `yarn tina-dev` starts the development server with TinaCMS enabled.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
"npm install
npm run tina-dev

# or

yarn install
yarn tina-dev"
```

----------------------------------------

TITLE: Cypress E2E Configuration (TypeScript)
DESCRIPTION: Configures Cypress for End-to-End (E2E) testing using TypeScript. Defines the `setupNodeEvents` function within the `e2e` configuration block.  Requires the `cypress` package to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'cypress'

export default defineConfig({
  e2e: {
    setupNodeEvents(on, config) {},
  },
})
```

----------------------------------------

TITLE: Static Image Imports from External URLs
DESCRIPTION: This code shows how to import and use an image from an external URL in a Next.js component with the specialized `<Image>` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import Image from 'next/image'
import logo from 'https://example.com/assets/logo.png'

export default () => (
  <div>
    <Image src={logo} placeholder="blur" />
  </div>
)
```

----------------------------------------

TITLE: Wrapping Component with ErrorBoundary in Next.js
DESCRIPTION: This snippet shows how to integrate the ErrorBoundary component in a Next.js application by wrapping the main `Component` prop in the `pages/_app.js` file. Prior import of the ErrorBoundary is necessary. This setup ensures that any unexpected errors in the app are caught and handled gracefully, preventing the entire app from crashing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/06-configuring/12-error-handling.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
// Import the ErrorBoundary component
import ErrorBoundary from '../components/ErrorBoundary'

function MyApp({ Component, pageProps }) {
  return (
    // Wrap the Component prop with ErrorBoundary component
    <ErrorBoundary>
      <Component {...pageProps} />
    </ErrorBoundary>
  )
}

export default MyApp
```

----------------------------------------

TITLE: Removing Console Calls in Next.js Compiler
DESCRIPTION: This snippet demonstrates how to configure the Next.js Compiler to remove console calls from the codebase. Configurations allow for the exclusion of certain console types, such as errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compiler: {
    removeConsole: true,
  },
}
```

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compiler: {
    removeConsole: {
      exclude: ['error'],
    },
  },
}
```

----------------------------------------

TITLE: Loading Scripts in Web Worker - JavaScript
DESCRIPTION: This code snippet demonstrates how to load a third-party script into a web worker using the `worker` strategy in Next.js with JavaScript. This offloads the script execution to a web worker, improving main thread performance. Requires `nextScriptWorkers` to be enabled. Requires `next/script` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function Home() {
  return (
    <>
      <Script src="https://example.com/script.js" strategy="worker" />
    </>
  )
}
```

----------------------------------------

TITLE: Configuring Global Unoptimized Images in Next.js
DESCRIPTION: Configuration example for setting all images to be unoptimized in a Next.js application by modifying the next.config.js file. This is useful when optimization isn't needed for most images in a project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_13

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    unoptimized: true,
  },
}
```

----------------------------------------

TITLE: Caching Component Output (JSX)
DESCRIPTION: Defines a React component (`Bookings`) using the `'use cache'` directive at the component function level. This caches the component's output based on its serializable props (`type`). Includes an inner function that leverages this caching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
export async function Bookings({ type = 'haircut' }) {
  'use cache'
  async function getBookingsData() {
    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)
    return data
  }
  return //...
}
```

----------------------------------------

TITLE: Configure Styled Components Compiler Next.js
DESCRIPTION: Enable the styled-components compiler feature in your `next.config.js` file. This optimization helps during the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/css-in-js.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compiler: {
    styledComponents: true,
  },
}
```

----------------------------------------

TITLE: Configuring Allowed Origins for Next.js Server Actions
DESCRIPTION: Configuration to specify additional safe origin domains that can invoke Server Actions. This helps prevent CSRF attacks by controlling which domains can make Server Action requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverActions.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */

module.exports = {
  experimental: {
    serverActions: {
      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],
    },
  },
}
```

----------------------------------------

TITLE: Configure target browsers in package.json using Browserslist
DESCRIPTION: This JSON snippet demonstrates how to configure target browsers for Autoprefixer using Browserslist within the `package.json` file. The example targets browsers with >0.3% usage, excludes dead browsers, and excludes Opera Mini. No external dependencies are needed, as Browserslist is integrated with tools like Autoprefixer.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "browserslist": [">0.3%", "not dead", "not op_mini all"]
}
```

----------------------------------------

TITLE: Code Block Example (React Component)
DESCRIPTION: This TypeScript snippet shows a minimum working example of a React component using the Next.js `<Link>` component. It includes the necessary `import` statement and the component itself, ensuring that the code can be copied and pasted and run without additional configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/about">About</Link>
}
```

----------------------------------------

TITLE: Configuring Custom Image Loader in Next.js
DESCRIPTION: Configure a custom image loader in next.config.js to use an external image optimization service or cloud provider. The loader file must export a function that generates image URLs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/images.mdx#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    loader: 'custom',
    loaderFile: './my/image/loader.js',
  },
}
```

LANGUAGE: js
CODE:
```
export default function myImageLoader({ src, width, quality }) {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}
```

----------------------------------------

TITLE: Creating Next.js App using npx
DESCRIPTION: This command uses npx to create a new Next.js application named `i18n-routing-pages-app` based on the `i18n-routing-pages` example.  It bootstraps the project with the specified template, setting up the necessary files and dependencies for an internationalized routing application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing-pages/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example i18n-routing-pages i18n-routing-pages-app
```

----------------------------------------

TITLE: Configuring HTML-Limited Bots in Next.js (TS)
DESCRIPTION: Demonstrates how to configure the `htmlLimitedBots` option within `next.config.ts`. This setting, defined as a regular expression string, specifies which user agents should receive blocking metadata delivery instead of the default streaming behavior, primarily targeting older or HTML-limited crawlers. It uses TypeScript for type safety.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_27

LANGUAGE: ts
CODE:
```
import type { NextConfig } from 'next'

const config: NextConfig = {
  htmlLimitedBots: 'MySpecialBot|MyAnotherSpecialBot|SimpleCrawler',
}

export default config
```

----------------------------------------

TITLE: Consolidating Grid Style Exports (JavaScript)
DESCRIPTION: Re-exports several individual CSS grid property functions (`gap`, `columnGap`, `rowGap`, `gridArea`, etc.) and the default composite `grid` function from other modules, providing a single point of access for various grid styling utilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_95

LANGUAGE: javascript
CODE:
```
export { gap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gap"
};
export { columnGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export columnGap"
};
export { rowGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export rowGap"
};
export { gridArea } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridArea"
};
export { default } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export default"
};
export { gridAutoColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridAutoColumns"
};
export { gridAutoFlow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridAutoFlow"
};
export { gridAutoRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridAutoRows"
};
export { gridColumn } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridColumn"
};
export { gridRow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridRow"
};
export { gridTemplateAreas } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridTemplateAreas"
};
export { gridTemplateColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridTemplateColumns"
};
export { gridTemplateRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridTemplateRows"
};

```

----------------------------------------

TITLE: Creating an MDX File for Import MDX
DESCRIPTION: Shows an example of an `.mdx` file designed to be imported into another page component. It combines Markdown syntax and React component imports, demonstrating content structure for reuse.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_8

LANGUAGE: mdx
CODE:
```
import { MyComponent } from 'my-component'

# Welcome to my MDX page!

This is some **bold** and _italics_ text.

This is a list in markdown:

- One
- Two
- Three

Checkout my React component:

<MyComponent />
```

----------------------------------------

TITLE: Removing Deprecated Container in Next.js _app.js (After)
DESCRIPTION: This code snippet shows the corrected implementation of the custom <App> component in Next.js. It removes the import and usage of the deprecated <Container> component from `next/app`, resolving the "App Container Deprecated" error.  The `MyApp` class extends `App` and renders the `Component` directly, without the wrapping `Container`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-container-deprecated.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import React from 'react'
import App from 'next/app'

class MyApp extends App {
  render() {
    const { Component, pageProps } = this.props
    return <Component {...pageProps} />
  }
}

export default MyApp
```

----------------------------------------

TITLE: Creating Client Component for Web Vitals in App Router
DESCRIPTION: This snippet shows how to create a dedicated client component (`web-vitals.js`) in the Next.js App Router to encapsulate the `useReportWebVitals` hook. By adding the `'use client'` directive, the component can use hooks, and it's typically imported into the root layout to enable Web Vitals reporting for the application, logging metrics to the console.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    console.log(metric)
  })

  return null
}
```

----------------------------------------

TITLE: Defining Component Styles with CSS
DESCRIPTION: This snippet contains CSS rules for styling components within a Next.js application. Styles include layout definitions, flex and grid settings, padding, margin adjustments, and media queries for responsive design. No external CSS dependencies are needed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#2025-04-21_snippet_4

LANGUAGE: CSS
CODE:
```
.sb-container {
  margin-bottom: 48px;
}

.sb-section {
  width: 100%;
  display: flex;
  flex-direction: row;
  gap: 20px;
}

img {
  object-fit: cover;
}

.sb-section-title {
  margin-bottom: 32px;
}

.sb-section a:not(h1 a, h2 a, h3 a) {
  font-size: 14px;
}

.sb-section-item, .sb-grid-item {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.sb-section-item-heading {
  padding-top: 20px !important;
  padding-bottom: 5px !important;
  margin: 0 !important;
}
.sb-section-item-paragraph {
  margin: 0;
  padding-bottom: 10px;
}

.sb-chevron {
  margin-left: 5px;
}

.sb-features-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 32px 20px;
}

.sb-socials {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
}

.sb-socials p {
  margin-bottom: 10px;
}

.sb-explore-image {
  max-height: 32px;
  align-self: flex-start;
}

.sb-addon {
  width: 100%;
  display: flex;
  align-items: center;
  position: relative;
  background-color: #EEF3F8;
  border-radius: 5px;
  border: 1px solid rgba(0, 0, 0, 0.05);
  background: #EEF3F8;
  height: 180px;
  margin-bottom: 48px;
  overflow: hidden;
}

.sb-addon-text {
  padding-left: 48px;
  max-width: 240px;
}

.sb-addon-text h4 {
  padding-top: 0px;
}

.sb-addon-img {
  position: absolute;
  left: 345px;
  top: 0;
  height: 100%;
  width: 200%;
  overflow: hidden;
}

.sb-addon-img img {
  width: 650px;
  transform: rotate(-15deg);
  margin-left: 40px;
  margin-top: -72px;
  box-shadow: 0 0 1px rgba(255, 255, 255, 0);
  backface-visibility: hidden;
}

@media screen and (max-width: 800px) {
  .sb-addon-img {
    left: 300px;
  }
}

@media screen and (max-width: 600px) {
  .sb-section {
    flex-direction: column;
  }

  .sb-features-grid {
    grid-template-columns: repeat(1, 1fr);
  }

  .sb-socials {
    grid-template-columns: repeat(2, 1fr);
  }

  .sb-addon {
    height: 280px;
    align-items: flex-start;
    padding-top: 32px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 24px;
  }

  .sb-addon-img {
    right: 0;
    left: 0;
    top: 130px;
    bottom: 0;
    overflow: hidden;
    height: auto;
    width: 124%;
  }

  .sb-addon-img img {
    width: 1200px;
    transform: rotate(-12deg);
    margin-left: 0;
    margin-top: 48px;
    margin-bottom: -40px;
    margin-left: -24px;
  }
}
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Command to run the Next.js local development server after setting up the project and configuring environment variables. The server will run on localhost:3000 by default.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Configuring Custom Image Loader
DESCRIPTION: Configuration example for setting up a custom image loader in Next.js config file, allowing for custom image optimization implementations.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    loader: 'custom',
    loaderFile: './my/image/loader.js',
  },
}
```

----------------------------------------

TITLE: Creating a Next.js app with Apollo using npx
DESCRIPTION: This command uses npx to create a new Next.js application named 'with-apollo-app' using the 'with-apollo' example. It bootstraps the project with the necessary dependencies and configuration for Apollo integration. It requires Node.js and npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-apollo with-apollo-app
```

----------------------------------------

TITLE: Conditional MDX Component Loading with next/dynamic (TypeScript)
DESCRIPTION: This TypeScript code demonstrates how to conditionally load components in MDX using `next/dynamic`. It uses a regex to check the MDX source and only loads the component if it's used in the content, improving performance by avoiding unnecessary imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import dynamic from "next/dynamic";
import Test from "@/components/test";
import { MDXRemote, type MDXRemoteProps } from 'next-mdx-remote/rsc'

const SomeHeavyComponent = dynamic(() => import("../component/SomeHeavyComponent"));

const defaultComponents = { Test };

export function CustomMDX(props: MDXRemoteProps) {
  const componentNames = [
    /<SomeHeavyComponent/.test(props.source as string) ? "SomeHeavyComponent" : "",
  ].filter(Boolean);

  const components = {
    ...defaultComponents,
    SomeHeavyComponent: componentNames.includes("SomeHeavyComponent")
      ? SomeHeavyComponent
      : () => null,
  };

  return <MDXRemote {...props} components={components} />;
}
```

----------------------------------------

TITLE: TypeScript Configuration in next.config.ts
DESCRIPTION: Shows how to configure Next.js using TypeScript with proper type definitions and config options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  /* config options here */
}

export default nextConfig
```

----------------------------------------

TITLE: Creating Next.js app with Umbraco Heartcore example
DESCRIPTION: These commands create a new Next.js application using the cms-umbraco-heartcore example.  They use npx, yarn, or pnpm to bootstrap the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app
```

----------------------------------------

TITLE: Next.js Page Component (JavaScript)
DESCRIPTION: This JavaScript snippet defines a basic Next.js page component that renders a heading and a link. It imports the `Link` component from `next/link` for navigation. The component is a functional component that returns JSX.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Enabling HTTPS for Next.js Dev Server (Bash)
DESCRIPTION: This command starts the Next.js development server (`next dev`) with HTTPS enabled using the `--experimental-https` flag. It generates a self-signed certificate for local development on `https://localhost:3000` (or the specified port) and is intended for development purposes only.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
next dev --experimental-https
```

----------------------------------------

TITLE: Installing TypeScript Type Definitions (pnpm)
DESCRIPTION: This command installs type definitions for React, React DOM, and Node.js as development dependencies using pnpm. These definitions provide type checking and autocompletion for these libraries when using TypeScript.  The `--save-dev` flag ensures they're added to `devDependencies` in `package.json`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_8

LANGUAGE: shell
CODE:
```
pnpm install --save-dev @types/react @types/react-dom @types/node
```

----------------------------------------

TITLE: Installing Sharp via bun
DESCRIPTION: This command installs the Sharp library using bun, which is required for image optimization in Next.js projects during production.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-missing-in-production.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
bun add sharp
```

----------------------------------------

TITLE: App Directory Next.js MDX Configuration
DESCRIPTION: Comprehensive Next.js MDX configuration for the app directory with plugin and page extension support
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')({
  options: {
    remarkPlugins: [],
    rehypePlugins: [],
  },
})

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['ts', 'tsx', 'js', 'jsx', 'md', 'mdx'],
  reactStrictMode: true,
}

module.exports = withMDX(nextConfig)
```

----------------------------------------

TITLE: Reloading the current URL with router.reload
DESCRIPTION: This code snippet demonstrates how to use `router.reload` to refresh the current page, similar to clicking the browser's refresh button. It utilizes the `useRouter` hook to access the router instance and calls the `reload()` method on a button click.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.reload()}>
      Click here to reload
    </button>
  )
}
```

----------------------------------------

TITLE: Allow All Crawlers Access
DESCRIPTION: This robots.txt configuration instructs all user-agents to allow crawling of the entire website.  This means search engines and other bots are permitted to index all content.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/app-dir-export/app/robots.txt#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
User-agent: *
Allow: /
```

----------------------------------------

TITLE: Creating a Next.js app with npx
DESCRIPTION: This command initializes a new Next.js application using the `create-next-app` tool with the `with-service-worker` example. It uses npm's `npx` to execute the command. The `with-service-worker-app` argument specifies the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-service-worker/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-service-worker with-service-worker-app
```

----------------------------------------

TITLE: Template Component Layout Usage Example
DESCRIPTION: Demonstrates how a template is automatically given a unique key within a layout, enabling component remounting and state reset on navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/template.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
<Layout>
  {/* Note that the template is automatically given a unique key. */}
  <Template key={routeParam}>{children}</Template>
</Layout>
```

----------------------------------------

TITLE: Rendering Custom React Component in MDX - Next.js - JavaScript
DESCRIPTION: This snippet shows how to embed a React component within an MDX file. The component used here is a simple greeting component which takes a 'name' prop and renders a welcome message. It requires 'next-mdx-remote' for proper rendering of MDX content within a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/app/posts/example-post.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
<Greet name="next-mdx-remote" />
```

----------------------------------------

TITLE: Exporting Size Metadata for Generated Icon - JSX
DESCRIPTION: Shows the JavaScript (JSX) syntax for exporting the size object in a generated icon file (icon.js or apple-icon.js). This metadata is used by Next.js to set the sizes attribute in the resulting HTML <link> tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
export const size = { width: 32, height: 32 }

export default function Icon() {}
```

----------------------------------------

TITLE: Using next/image with Custom Loader (TypeScript)
DESCRIPTION: This code demonstrates how to use the `next/image` component with a custom image loader.  It imports the `Image` component and renders an image with specified `alt`, `src`, `width`, and `height` attributes, utilizing the custom loader defined elsewhere.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return <Image alt="turtles" src="/turtles.jpg" width={300} height={300} />
}
```

----------------------------------------

TITLE: Handling Redirects with Bloom Filter in Next.js Middleware (JavaScript)
DESCRIPTION: This JavaScript snippet implements Next.js middleware to check incoming request paths against a pre-generated Bloom filter. If the filter indicates a potential match, it fetches the actual redirect data from a dedicated API route. If a valid redirect entry is found, the middleware performs the redirect; otherwise, the request proceeds normally. Requires the 'bloom-filters' library and a generated bloom filter JSON file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_12

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'
import { ScalableBloomFilter } from 'bloom-filters'
import GeneratedBloomFilter from './redirects/bloom-filter.json'

// Initialize bloom filter from a generated JSON file
const bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter)

export async function middleware(request) {
  // Get the path for the incoming request
  const pathname = request.nextUrl.pathname

  // Check if the path is in the bloom filter
  if (bloomFilter.has(pathname)) {
    // Forward the pathname to the Route Handler
    const api = new URL(
      `/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,
      request.nextUrl.origin
    )

    try {
      // Fetch redirect data from the Route Handler
      const redirectData = await fetch(api)

      if (redirectData.ok) {
        const redirectEntry = await redirectData.json()

        if (redirectEntry) {
          // Determine the status code
          const statusCode = redirectEntry.permanent ? 308 : 307

          // Redirect to the destination
          return NextResponse.redirect(redirectEntry.destination, statusCode)
        }
      }
    } catch (error) {
      console.error(error)
    }
  }

  // No redirect found, continue the request without redirecting
  return NextResponse.next()
}
```

----------------------------------------

TITLE: Implementing Theme-Aware CSS for Image Display in Next.js
DESCRIPTION: This CSS snippet defines styles for displaying different images based on the user's color scheme preference. It uses media queries to show/hide images for light and dark modes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_31

LANGUAGE: css
CODE:
```
.imgDark {
  display: none;
}

@media (prefers-color-scheme: dark) {
  .imgLight {
    display: none;
  }
  .imgDark {
    display: unset;
  }
}
```

----------------------------------------

TITLE: Handling popstate events with router.beforePopState
DESCRIPTION: This code snippet shows how to use `router.beforePopState` to intercept and potentially override browser history navigation.  It uses `useEffect` to register a callback that checks the URL and redirects to a 404 page if it doesn't match allowed routes.  This provides control over which routes are rendered by Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react'
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()

  useEffect(() => {
    router.beforePopState(({ url, as, options }) => {
      // I only want to allow these two routes!
      if (as !== '/' && as !== '/other') {
        // Have SSR render bad routes as a 404.
        window.location.href = as
        return false
      }

      return true
    })
  }, [router])

  return <p>Welcome to the page</p>
}
```

----------------------------------------

TITLE: Configuring Image Qualities in Next.js Config
DESCRIPTION: Configuration example showing how to set up allowed quality values for the next/image component in next.config.js. This enables specific compression quality levels (25, 50, 75) for image optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-qualities.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    qualities: [25, 50, 75],
  },
}
```

----------------------------------------

TITLE: Running Codemod for Next.js Link Update
DESCRIPTION: The command executes a codemod provided by Next.js to upgrade older versions of `<Link>` to the new usage. It automatically transforms deprecated Link patterns in the codebase. There are no external dependencies, but it requires npx for command execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-new-link-with-extra-anchor.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx @next/codemod new-link .
```

----------------------------------------

TITLE: Configuring Viewport Parameters in JavaScript
DESCRIPTION: This JavaScript snippet defines viewport parameters, including width and scaling options, within a viewport object for use in Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
export const viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
  // Also supported but less commonly used
  // interactiveWidget: 'resizes-visual',
}
```

----------------------------------------

TITLE: Convert Absolute Image Import Paths - TSX
DESCRIPTION: This code shows how to convert absolute import paths for images from `/public` to relative imports in Next.js. This ensures that the image is correctly resolved during the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
// Before
import logo from '/logo.png'

// After
import logo from '../public/logo.png'
```

----------------------------------------

TITLE: Logging User Activity After Mutation in Next.js Route Handler (JS)
DESCRIPTION: This JavaScript example shows the use of `after` within a Next.js Route Handler (a POST request) to log user actions post-mutation. It accesses `cookies` and `headers` inside the `after` callback, demonstrating how request information can be used for analytics or logging after the primary response is sent.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/after.mdx#_snippet_3

LANGUAGE: js
CODE:
```
import { after } from 'next/server';
import { cookies, headers } from 'next/headers';
import { logUserAction } from '@/app/utils';

export async function POST(request) {
  // Perform mutation
  // ...

  // Log user activity for analytics
  after(async () => {
    const userAgent = (await headers().get('user-agent')) || 'unknown';
    const sessionCookie =
      (await cookies().get('session-id'))?.value || 'anonymous';

    logUserAction({ sessionCookie, userAgent });
  });

  return new Response(JSON.stringify({ status: 'success' }), {
    status: 200,
    headers: { 'Content-Type': 'application/json' },
  });
}
```

----------------------------------------

TITLE: Passing --inspect Node.js Option to Next.js (Bash)
DESCRIPTION: This command demonstrates passing Node.js command-line options using the `NODE_OPTIONS` environment variable before a `next` command. This example uses `--inspect` to enable the Node.js inspector, allowing debugging tools to attach to the Next.js process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
NODE_OPTIONS='--inspect' next
```

----------------------------------------

TITLE: Run Next.js development server (pnpm)
DESCRIPTION: This command uses pnpm to execute the 'dev' script defined in the project's package.json. The purpose is to start the Next.js development server, allowing developers to view and test the application locally. It typically starts the server on localhost.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Copying Auth0 Environment Variables Template
DESCRIPTION: Command to copy the example environment variables file to create a local configuration for Auth0 settings.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: getStaticPaths Return Values Example
DESCRIPTION: Example showing the structure of paths return object from getStaticPaths including locale configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
return {
  paths: [
    { params: { id: '1' }},
    {
      params: { id: '2' },
      locale: "en",
    },
  ],
  fallback: ...
}
```

----------------------------------------

TITLE: Cypress Component Configuration (JavaScript)
DESCRIPTION: Configures Cypress for Component Testing using JavaScript. Specifies Next.js as the framework and webpack as the bundler.  Requires the `cypress` package to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_12

LANGUAGE: javascript
CODE:
```
const { defineConfig } = require('cypress')

module.exports = defineConfig({
  component: {
    devServer: {
      framework: 'next',
      bundler: 'webpack',
    },
  },
})
```

----------------------------------------

TITLE: Create Next.js App with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the cms-wordpress example. It initializes a project named cms-wordpress-app in the current directory, using the specified example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-wordpress cms-wordpress-app
```

----------------------------------------

TITLE: Setting Loading Property on Next.js Image Component
DESCRIPTION: Example of setting the loading property on a Next.js Image component. This property determines the loading behavior, with options for lazy (default, deferred loading) or eager (immediate loading).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_11

LANGUAGE: js
CODE:
```
loading = 'lazy' // {lazy} | {eager}
```

----------------------------------------

TITLE: Configuring Robot Access Rules in robots.txt
DESCRIPTION: Defines crawler access rules for web spiders/robots, specifically disallowing access to /pocket while allowing access to /blog/* paths. The file includes a comment indicating it should not be triggered from a non-root directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/metadata/app/title/robots.txt#2025-04-21_snippet_0

LANGUAGE: robotstxt
CODE:
```
# This robots.txt not in root app dir should never be triggered
User-Agent: *
Disallow:

Disallow: /pocket
Allow: /blog/*
```

----------------------------------------

TITLE: Installing dependencies using npm
DESCRIPTION: This command installs the project's dependencies using npm. It is a prerequisite for running the development server and other project-related tasks.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Determining Locale from Request Headers in JavaScript
DESCRIPTION: This snippet demonstrates how to determine the user's preferred locale based on the Accept-Language header using the @formatjs/intl-localematcher and negotiator libraries.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/15-internationalization.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { match } from '@formatjs/intl-localematcher'
import Negotiator from 'negotiator'

let headers = { 'accept-language': 'en-US,en;q=0.5' }
let languages = new Negotiator({ headers }).languages()
let locales = ['en-US', 'nl-NL', 'nl']
let defaultLocale = 'en-US'

match(languages, locales, defaultLocale) // -> 'en-US'
```

----------------------------------------

TITLE: Incorrect Async Context Usage with cookies in Next.js
DESCRIPTION: This code demonstrates an incorrect usage of the `cookies` function from `next/headers` within a `setTimeout` callback. Calling `cookies()` inside the `setTimeout` results in it being executed outside the initial async context, causing a DynamicServerError during build time in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/dynamic-server-error.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

async function getCookieData() {
  return new Promise((resolve) =>
    setTimeout(() => {
      // cookies will be called outside of the async context, causing a build-time error
      resolve(cookies().getAll())
    }, 1000)
  )
}

export default async function Page() {
  const cookieData = await getCookieData()
  return <div>Hello World</div>
}
```

----------------------------------------

TITLE: Importing Global Stylesheet in Custom App (Pages Router - JSX)
DESCRIPTION: This JSX code imports the global stylesheet to apply Tailwind CSS styles to every route in the Next.js application within the Pages router. It defines the custom App component and imports the globals.css file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_9

LANGUAGE: jsx
CODE:
```
"// These styles apply to every route in the application
import '@/styles/globals.css'

export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />
}"
```

----------------------------------------

TITLE: Reporting Web Vitals with useReportWebVitals (Pages Router)
DESCRIPTION: This code snippet shows how to use the `useReportWebVitals` hook within the Pages Router in Next.js to report web vitals. It imports the hook and logs each metric to the console when it's available. The code is placed in `_app.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { useReportWebVitals } from 'next/web-vitals'

function MyApp({ Component, pageProps }) {
  useReportWebVitals((metric) => {
    console.log(metric)
  })

  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: Creating a Basic Custom App Component in Next.js
DESCRIPTION: Shows how to override the default App component by creating a pages/_app file. The example demonstrates the minimal implementation that receives Component and pageProps as properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/05-custom-app.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import type { AppProps } from 'next/app'

export default function MyApp({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}
```

LANGUAGE: jsx
CODE:
```
export default function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: Exporting useMDXComponents Function in TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates how to export the `useMDXComponents` function. It imports `MDXComponents` type from 'mdx/types', defines the function, and exports it. This pattern is used for providing custom MDX components within a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/mdx-components.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import type { MDXComponents } from 'mdx/types'

export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    ...components,
  }
}
```

----------------------------------------

TITLE: Running Development Server (npm)
DESCRIPTION: This command starts both the Next.js development server (`next dev`) and the Convex development environment (`convex dev`). This allows for simultaneous development on the frontend and backend. It requires npm and a Convex account.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Incorrect Usage of React Hook in Server Component (JSX)
DESCRIPTION: This code snippet shows the incorrect usage of a React client hook (useEffect) in a Server Component, which causes an error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-client-hook-in-server-component.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react'

export default function Example() {
  useEffect(() => {
    console.log('in useEffect')
  })
  return <p>Hello world</p>
}
```

----------------------------------------

TITLE: Implementing unstable_noStore for Safe Dynamic Rendering in Next.js
DESCRIPTION: This code snippet demonstrates how to use the unstable_noStore function from Next.js to opt out of static generation before a try/catch block. This approach ensures that dynamic rendering APIs can be safely used without causing build failures.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/ppr-caught-error.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { unstable_noStore } from 'next/cache'

async function fetchData() {
  unstable_noStore() // opt out before we even get to the try/catch
  try {
    const response = await fetch(url);
    ...
  } catch (x) {
    ...
  }
}
```

----------------------------------------

TITLE: Copying Environment Variables File for Configuration
DESCRIPTION: This command copies the example environment variables file to a local version which will not be tracked by version control. This is essential for setting up the environment-specific configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Importing Global CSS in Next.js _app.js
DESCRIPTION: This JSX snippet demonstrates how to import a global CSS file (`styles.css`) within the `_app.js` file in a Next.js application. This ensures that the styles are applied globally across the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/css-global.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import '../styles.css'\n\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}
```

----------------------------------------

TITLE: Configuring Makeswift API Key
DESCRIPTION: This code snippet demonstrates how to configure the Makeswift API key and host in the `.env.local` file. It highlights the addition of `MAKESWIFT_API_HOST` and `MAKESWIFT_SITE_API_KEY` environment variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_2

LANGUAGE: diff
CODE:
```
-- MAKESWIFT_API_HOST=
-- MAKESWIFT_SITE_API_KEY=
++ MAKESWIFT_API_HOST=https://api.makeswift.com
++ MAKESWIFT_SITE_API_KEY=<YOUR_MAKESWIFT_SITE_API_KEY>
```

----------------------------------------

TITLE: Installing Playwright (bash)
DESCRIPTION: Installs Playwright using npm, yarn, or pnpm.  This command initiates the Playwright setup process, guiding the user through configuration, including the creation of a `playwright.config.ts` file. Requires Node.js and a package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm init playwright
# or
yarn create playwright
# or
pnpm create playwright
```

----------------------------------------

TITLE: Reporting Web Vitals with useReportWebVitals (App Router)
DESCRIPTION: This code snippet demonstrates how to use the `useReportWebVitals` hook in a component within the App Router in Next.js to report web vitals. A separate client component `WebVitals` is created to use the hook and is then imported into the layout file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    console.log(metric)
  })
}
```

LANGUAGE: jsx
CODE:
```
import { WebVitals } from './_components/web-vitals'

export default function Layout({ children }) {
  return (
    <html>
      <body>
        <WebVitals />
        {children}
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Enabling AVIF Support in Next.js
DESCRIPTION: This snippet enables support for the AVIF image format in Next.js and sets it as a fallback to the original image format if the browser does not support AVIF. This helps improve image compression while maintaining support for legacy formats.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_23

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    formats: ['image/avif'],
  },
}
```

----------------------------------------

TITLE: Using URL Objects with useRouter.push (JSX)
DESCRIPTION: This snippet demonstrates using a URL object with router.push to navigate to a dynamic route.  The pathname and query parameters are specified within the object. This approach is useful for constructing complex URLs programmatically.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function ReadMore({ post }) {
  const router = useRouter()

  return (
    <button
      type="button"
      onClick={() => {
        router.push({
          pathname: '/post/[pid]',
          query: { pid: post.id },
        })
      }}
    >
      Click here to read more
    </button>
  )
}
```

----------------------------------------

TITLE: Configuring imageSizes in next.config.js
DESCRIPTION: This snippet shows how to define imageSizes in next.config.js, which specifies the list of image widths for images that use the sizes prop. The sizes must be smaller than the smallest deviceSizes to work correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_20

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
  },
}

```

----------------------------------------

TITLE: Configuring Emotion Support in Next.js Compiler
DESCRIPTION: This snippet provides the setup for @emotion/babel-plugin in the Next.js Compiler. This configuration allows developers to leverage Emotion's styling library within their applications efficiently.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_7

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compiler: {
    emotion: boolean | {
      // default is true. It will be disabled when build type is production.
      sourceMap?: boolean,
      // default is 'dev-only'.
      autoLabel?: 'never' | 'dev-only' | 'always',
      // default is '[local]'.
      // Allowed values: `[local]` `[filename]` and `[dirname]`
      // This option only works when autoLabel is set to 'dev-only' or 'always'.
      // It allows you to define the format of the resulting label.
      // The format is defined via string where variable parts are enclosed in square brackets [].
      // For example labelFormat: "my-classname--[local]", where [local] will be replaced with the name of the variable the result is assigned to.
      labelFormat?: string,
      // default is undefined.
      // This option allows you to tell the compiler what imports it should
      // look at to determine what it should transform so if you re-export
      // Emotion's exports, you can still use transforms.
      importMap?: {
        [packageName: string]: {
          [exportName: string]: {
            canonicalImport?: [string, string],
            styledBaseImport?: [string, string],
          }
        }
      },
    },
  },
}
```

----------------------------------------

TITLE: Migrating to Built-in next/font Codemod
DESCRIPTION: Command-line tool to automatically update font imports and remove @next/font package from Next.js projects. Helps developers transition to the built-in font optimization system.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/built-in-next-font.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
npx @next/codemod built-in-next-font .
```

----------------------------------------

TITLE: Replacing analyticsId with useReportWebVitals in Next.js
DESCRIPTION: This snippet instructs developers to replace the deprecated analyticsId tracking method in their Next.js application with the useReportWebVitals hook, which allows for customizable tracking of Core Web Vitals metrics.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/deprecated-analyticsid.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
useReportWebVitals((metric) => {
  // Implement sending metric to your backend
});
```

----------------------------------------

TITLE: Accessing Cookies in generateViewport Without Suspense (Next.js JSX)
DESCRIPTION: This snippet demonstrates the incorrect pattern causing the error: accessing dynamic Request data (like cookies) inside the `generateViewport` function within a layout component. This fails when the route is not configured for fully dynamic rendering via a Suspense boundary around the main content.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-viewport.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

export async function generateViewport() {
  const cookieJar = await cookies()
  return {
    themeColor: cookieJar.get('theme-color'),
  }
}

export default function RootLayout({ children }) {
  return (
    <html>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining Blog Post Front Matter in Markdown
DESCRIPTION: This snippet defines the front matter for a blog post using YAML syntax within Markdown. It includes the title, an excerpt describing the content, and the publication date.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/_posts/prancing-pony.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: "At the Sign of the Prancing Pony"
excerpt: "The Hobbits reach the The Prancing Pony inn at Bree, where Frodo uses
a false name, Underhill."
date: "2021-03-03"
---
```

----------------------------------------

TITLE: Adding Jest test scripts to package.json
DESCRIPTION: This snippet demonstrates how to add `test` and `test:watch` scripts to the `package.json` file to enable running Jest tests. The `test` script executes Jest, and the `test:watch` script executes Jest in watch mode, re-running tests on file changes.  Requires Jest to be installed as a dev dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_15

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "test": "jest",
    "test:watch": "jest --watch"
  }
}
```

----------------------------------------

TITLE: Managing Params and SearchParams in Next.js
DESCRIPTION: Shows how to properly handle URL parameters by passing them as promises and awaiting them closer to where they're needed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
export async function Map({ lat, lng }) {
  const mapData = await fetch(`https://...?lat=${lat}&lng=${lng}`)
  return drawMap(mapData)
}

export default async function Page({ searchParams }) {
  const { lat, lng } = await searchParams;
  return (
    <Suspense fallback="loading your inbox...">
      <Map lat={lat} lng={lng}>
    </Suspense>
  )
}
```

LANGUAGE: jsx
CODE:
```
export async function Map({ coords }) {
  const { lat, lng } = await coords
  const mapData = await fetch(`https://...?lat=${lat}&lng=${lng}`)
  return drawMap(mapData)
}

export default async function Page({ searchParams }) {
  const coords = searchParams.then(sp => ({ lat: sp.lat, lng: sp.lng }))
  return (
    <Suspense fallback="loading your inbox...">
      <Map coord={coords}>
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Configuring Swc Minification in Next.js Compiler
DESCRIPTION: This snippet highlights the default minification support in Next.js using swc since version 13. It emphasizes the performance improvement over Terser and notes the inability to customize minification from version 15 onward.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_8



----------------------------------------

TITLE: Defining Image Size JSX
DESCRIPTION: Defines the static `size` export for Open Graph or Twitter images in a JSX file. This object specifies the width and height in pixels for the generated image, used by Next.js to set the appropriate meta tags in the HTML head.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_15

LANGUAGE: jsx
CODE:
```
export const size = { width: 1200, height: 630 }

export default function Image() {}
```

----------------------------------------

TITLE: Caching Page with Nested Component (JSX)
DESCRIPTION: Shows a `page.js` file where the page itself uses `'use cache'`. It renders an imported asynchronous component (`Users`). The nested component benefits from the caching behavior applied at the page level.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_9

LANGUAGE: JSX
CODE:
```
'use cache'

async function Users() {
  const users = await fetch('/api/users')
  // loop through users
}

export default function Page() {
  return (
    <main>
      <Users />
    </main>
  )
}
```

----------------------------------------

TITLE: Copy Local Environment Example File
DESCRIPTION: Copies a sample local environment configuration file to an active local environment file. Requires the existence of '.env.local.example'. This snippet copies configuration templates, enabling local environment variable setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
cp -i .env.local.example .env.local
```

----------------------------------------

TITLE: Caching Time Operations in Next.js
DESCRIPTION: Shows how to handle time operations in cached components using the 'use cache' directive to ensure consistent timestamp handling during page builds and revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
async function InformationTable() {
  const data = await fetch(...)
  return (
    <section>
      <h1>Latest Info...</h1>
      <table>{renderData(data)}</table>
    </section>
  )
}

export default async function Page() {
  return (
    <main>
      <InformationTable />
      Last Refresh: {new Date().toString()}
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
async function InformationTable() {
  "use cache"
  const data = await fetch(...)
  return (
    <>
      <section>
        <h1>Latest Info...</h1>
        <table>{renderData(data)}</table>
      </section>
      Last Refresh: {new Date().toString()}
    </>
  )
}

export default async function Page() {
  return (
    <main>
      <InformationTable />
    </main>
  )
}
```

----------------------------------------

TITLE: Applying Headers with basePath Support Next.js JavaScript
DESCRIPTION: This snippet shows how headers interact with the `basePath` configuration. By default, the `basePath` is automatically prefixed to the `source`. You can explicitly disable this behavior for a specific header rule by setting `basePath: false`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  basePath: '/docs',

  async headers() {
    return [
      {
        source: '/with-basePath', // becomes /docs/with-basePath
        headers: [
          {
            key: 'x-hello',
            value: 'world',
          },
        ],
      },
      {
        source: '/without-basePath', // is not modified since basePath: false is set
        headers: [
          {
            key: 'x-hello',
            value: 'world',
          },
        ],
        basePath: false,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Configuring Browserslist in package.json (JSON)
DESCRIPTION: This code snippet shows how to configure Browserslist in the `package.json` file to specify target browsers for Next.js. It defines an array of browser versions that the application should support. This configuration informs Next.js about the necessary polyfills and transformations to apply during the build process to ensure compatibility with the specified browsers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/supported-browsers.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "browserslist": [
    "chrome 64",
    "edge 79",
    "firefox 67",
    "opera 51",
    "safari 12"
  ]
}
```

----------------------------------------

TITLE: Disabling Static Image Imports in Next.js
DESCRIPTION: This snippet demonstrates how to disable the import of static images in Next.js. This is particularly useful when integrating other plugins that may conflict with static imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_25

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    disableStaticImages: true,
  },
}
```

----------------------------------------

TITLE: Defining Front Matter Metadata for Next.js Blog Post
DESCRIPTION: This snippet shows the front matter metadata section for a Next.js blog post. It includes fields for title, excerpt, cover image, date, author details, and Open Graph image URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/_posts/hello-world.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
---
title: "Learn How to Pre-render Pages Using Static Generation with Next.js"
excerpt: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla facilities morbi tempus."
coverImage: "/assets/blog/hello-world/cover.jpg"
date: "2020-03-16T05:35:07.322Z"
author:
  name: Tim Neutkens
  picture: "/assets/blog/authors/tim.jpeg"
ogImage:
  url: "/assets/blog/hello-world/cover.jpg"
---
```

----------------------------------------

TITLE: Blog Component with External Data Requirement
DESCRIPTION: Example of a component that requires external data before it can be pre-rendered. This component displays a list of blog posts that need to be fetched from an external source.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
// TODO: Need to fetch `posts` (by calling some API endpoint)
//       before this page can be pre-rendered.
export default function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Initializing OpenTelemetry with Next.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to initialize OpenTelemetry in a Next.js application using the `@vercel/otel` package. It imports the `registerOTel` function and calls it within the `register` function exported from `instrumentation.js`. This function is executed once when the Next.js server starts. The `registerOTel` function takes a service name as input. Requires the `@vercel/otel` package to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}
```

----------------------------------------

TITLE: Running Next.js Codemod for Async Request API
DESCRIPTION: This command runs the Next.js codemod to automatically fix many cases of synchronous dynamic API access in your project.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ npx @next/codemod@canary next-async-request-api .
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters with useRouter in Next.js (JSX)
DESCRIPTION: This code snippet demonstrates how to access dynamic route parameters in a Next.js page component. It imports the useRouter hook from next/router, then retrieves and displays the 'slug' parameter from the URL query object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/02-dynamic-routes.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()
  return <p>Post: {router.query.slug}</p>
}
```

----------------------------------------

TITLE: Install Prompt Component - JavaScript
DESCRIPTION: This React component provides a prompt for iOS users to install the app to their home screen. It checks if the device is iOS and if the app is already running in standalone mode. If the app is not already installed on an iOS device, it displays instructions on how to add it to the home screen.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
function InstallPrompt() {
  const [isIOS, setIsIOS] = useState(false);
  const [isStandalone, setIsStandalone] = useState(false);

  useEffect(() => {
    setIsIOS(
      /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream
    );

    setIsStandalone(window.matchMedia('(display-mode: standalone)').matches);
  }, []);

  if (isStandalone) {
    return null; // Don't show install button if already installed
  }

  return (
    <div>
      <h3>Install App</h3>
      <button>Add to Home Screen</button>
      {isIOS && (
        <p>
          To install this app on your iOS device, tap the share button
          <span role="img" aria-label="share icon">
            {' '}
            ⎋{' '}
          </span>
          and then "Add to Home Screen"
          <span role="img" aria-label="plus icon">
            {' '}
            ➕{' '}
          </span>
          .
        </p>
      )}
    </div>
  );
}

export default function Page() {
  return (
    <div>
      <PushNotificationManager />
      <InstallPrompt />
    </div>
  );
}
```

----------------------------------------

TITLE: Creating a Next.js App with Yarn
DESCRIPTION: This snippet shows how to create a new Next.js application using Yarn with the 'hello-world' example. The user must have Yarn installed. The command initializes a new Next.js project in the specified directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example hello-world hello-world-app
```

----------------------------------------

TITLE: Using next/compat/router for compatibility
DESCRIPTION: This code snippet shows how to use `next/compat/router` to create components that work in both the `app` and `pages` directories.  It checks if the router instance is ready and uses `useSearchParams` to access search parameters.  This is beneficial when transitioning applications to the `app` router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_14

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react'
import { useRouter } from 'next/compat/router'
import { useSearchParams } from 'next/navigation'
const MyComponent = () => {
  const router = useRouter() // may be null or a NextRouter instance
  const searchParams = useSearchParams()
  useEffect(() => {
    if (router && !router.isReady) {
      return
    }
    // In `app/`, searchParams will be ready immediately with the values, in
    // `pages/` it will be available after the router is ready.
    const search = searchParams.get('search')
    // ...
  }, [router, searchParams])
  // ...
}
```

----------------------------------------

TITLE: Configuring PPR in Next.js TypeScript Config
DESCRIPTION: TypeScript configuration for enabling incremental Partial Prerendering in next.config.ts
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/ppr.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}

export default nextConfig
```

----------------------------------------

TITLE: create-next-app Command-Line Options
DESCRIPTION: This section displays the usage and options available for the `create-next-app` command. It allows for non-interactive project setup with various configurations such as TypeScript, JavaScript, Tailwind CSS, ESLint, and more, using command-line arguments.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
Usage: create-next-app [project-directory] [options]

Options:
  -V, --version                        output the version number
  --ts, --typescript

    Initialize as a TypeScript project. (default)

  --js, --javascript

    Initialize as a JavaScript project.

  --tailwind

    Initialize with Tailwind CSS config. (default)

  --eslint

    Initialize with ESLint config.

  --app

    Initialize as an App Router project.

  --src-dir

    Initialize inside a `src/` directory.

  --turbopack

    Enable Turbopack by default for development.

  --import-alias <alias-to-configure>

    Specify import alias to use (default "@/*").

  --empty

    Initialize an empty project.

  --use-npm

    Explicitly tell the CLI to bootstrap the application using npm

  --use-pnpm

    Explicitly tell the CLI to bootstrap the application using pnpm

  --use-yarn

    Explicitly tell the CLI to bootstrap the application using Yarn

  --use-bun

    Explicitly tell the CLI to bootstrap the application using Bun

  -e, --example [name]|[github-url]

    An example to bootstrap the app with. You can use an example name
    from the official Next.js repo or a GitHub URL. The URL can use
    any branch and/or subdirectory

  --example-path <path-to-example>

    In a rare case, your GitHub URL might contain a branch name with
    a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).
    In this case, you must specify the path to the example separately:
    --example-path foo/bar

  --reset-preferences

    Explicitly tell the CLI to reset any stored preferences

  --skip-install

    Explicitly tell the CLI to skip installing packages

  --disable-git

    Explicitly tell the CLI to skip initializing a git repository.

  --yes

    Use previous preferences or defaults for all options that were not
    explicitly specified, without prompting.

  -h, --help                           display help for command
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command uses npm to create a new Next.js application using the with-babel-macros example. It bootstraps a project with the necessary configurations for using babel-macros.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-babel-macros/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-babel-macros with-babel-macros-app
```

----------------------------------------

TITLE: Creating Next.js app with Sitefinity example
DESCRIPTION: This command initializes a new Next.js application using the cms-sitefinity example. It utilizes pnpm to execute the create next-app command with the specified example and target directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-sitefinity cms-sitefinity-app
```

----------------------------------------

TITLE: Creating Next.js App with Prismic Example (npm)
DESCRIPTION: This command uses the `create-next-app` tool with npm to bootstrap a new Next.js application using the `cms-prismic` example. It creates a new directory named `cms-prismic-app` for the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-prismic cms-prismic-app
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses npx to create a new Next.js application named 'with-apollo-and-redux-app' based on the 'with-apollo-and-redux' example. It downloads and executes the create-next-app package to bootstrap the project with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo-and-redux/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-apollo-and-redux with-apollo-and-redux-app
```

----------------------------------------

TITLE: Creating Next.js App with Recoil Example using NPX
DESCRIPTION: This command uses npx to create a new Next.js application based on the with-recoil example. It clones the example into a new directory named with-recoil-app. It requires npx to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-recoil/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-recoil with-recoil-app
```

----------------------------------------

TITLE: Creating Next.js App with Webiny Example (Yarn)
DESCRIPTION: These commands are used to bootstrap a new Next.js application using the `cms-webiny` example. They use `create-next-app` with npm, yarn, and pnpm package managers. This will create a new project directory named `cms-webiny-app` with the specified template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-webiny cms-webiny-app
```

----------------------------------------

TITLE: Create Next.js App with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-google-maps-embed example. It sets up the project with the necessary files and dependencies for embedding a Google Maps component. The resulting application is named with-google-maps-embed-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-maps-embed/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-google-maps-embed with-google-maps-embed-app
```

----------------------------------------

TITLE: Creating Next.js app using npx
DESCRIPTION: This command uses npx to create a new Next.js application with the 'api-routes-cors' example. It sets up a project with the necessary configurations for API routes and CORS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-cors/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-cors api-routes-cors-app
```

----------------------------------------

TITLE: Conditionally Assigning OpenTelemetry API JavaScript
DESCRIPTION: Conditionally assigns the `api` variable based on the `NEXT_RUNTIME` environment variable. It attempts to require the standard `@opentelemetry/api` package, falling back to a compiled version if the standard one is not available. This ensures the correct OpenTelemetry API is used based on the Next.js runtime (Edge or Node).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_35

LANGUAGE: javascript
CODE:
```
import { a as api } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
if (process.env.NEXT_RUNTIME === 'edge') {
    api = require('@opentelemetry/api');
} else {
    try {
        api = require('@opentelemetry/api');
    } catch (err) {
        api = require('next/dist/compiled/@opentelemetry/api');
    }
}
```

----------------------------------------

TITLE: Optimize Package Imports in next.config.js
DESCRIPTION: Configures the `optimizePackageImports` option in `next.config.js` to optimize how specific packages are imported, loading only the necessary modules. This enhances performance by reducing the bundle size.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    optimizePackageImports: ['icon-library'],
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Matching Paths with Has and Missing Directives in Next.js Middleware Config JavaScript
DESCRIPTION: This snippet illustrates advanced path matching using the `has` and `missing` arrays within the `matcher` configuration in Next.js Middleware. These arrays allow filtering requests based on the presence or absence of specific headers, cookies, or query parameters, enabling fine-grained control over when middleware executes for a matched source path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico, sitemap.xml, robots.txt (metadata files)
     */
    {
      source:
        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
      missing: [
        { type: 'header', key: 'next-router-prefetch' },
        { type: 'header', key: 'purpose', value: 'prefetch' },
      ],
    },

    {
      source:
        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
      has: [
        { type: 'header', key: 'next-router-prefetch' },
        { type: 'header', key: 'purpose', value: 'prefetch' },
      ],
    },

    {
      source:
        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
      has: [{ type: 'header', key: 'x-present' }],
      missing: [{ type: 'header', key: 'x-missing', value: 'prefetch' }],
    },
  ],
}
```

----------------------------------------

TITLE: Configuring Viewport Meta Tags in Next.js _app.js
DESCRIPTION: Demonstrates the correct implementation of viewport meta tags using next/head in the Next.js _app.js file. This approach ensures proper deduplication of meta tags and prevents unexpected behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-document-viewport-meta.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Head from 'next/head'

function MyApp({ Component, pageProps }) {
  return (
    <>
      <Head>
        <meta name="viewport" content="viewport-fit=cover" />
      </Head>
      <Component {...pageProps} />
    </>
  )
}

export default MyApp
```

----------------------------------------

TITLE: Creating a Next.js App using pnpm
DESCRIPTION: This command uses `create-next-app` with pnpm to bootstrap a new Next.js application based on the `with-context-api` example. The new application will be named `with-context-api-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-context-api/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-context-api with-context-api-app
```

----------------------------------------

TITLE: Creating Next.js App with Redux (pnpm)
DESCRIPTION: This command uses `create-next-app` with pnpm to bootstrap a new Next.js application that integrates with Redux. It specifies the `with-redux` example to create a pre-configured application. The new application will be created in a directory named `with-redux-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redux/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-redux with-redux-app
```

----------------------------------------

TITLE: Fetching Draft Data Based on Draft Mode (JavaScript)
DESCRIPTION: This JavaScript code demonstrates how to modify data fetching in `getStaticProps` based on the `context.draftMode` flag. It switches between different API endpoints for draft and production content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
export async function getStaticProps(context) {
  const url = context.draftMode
    ? 'https://draft.example.com'
    : 'https://production.example.com'
  const res = await fetch(url)
  // ...
}
```

----------------------------------------

TITLE: Rendering Remote MDX - Pages Router (JSX)
DESCRIPTION: Shows how to fetch remote MDX content and serialize it using `next-mdx-remote-client/serialize` within `getStaticProps` (or `getServerSideProps`) for use with the `MDXClient` component in a Pages Router page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_22

LANGUAGE: jsx
CODE:
```
import { serialize } from 'next-mdx-remote-client/serialize'
import { MDXClient } from 'next-mdx-remote-client'

export default function RemoteMdxPage({ mdxSource }) {
  if ('error' in mdxSource) {
    // either render error UI or throw `mdxSource.error`
  }
  return <MDXClient {...mdxSource} />
}

export async function getStaticProps() {
  // MDX text - can be from a database, CMS, fetch, anywhere...
  const res = await fetch('https:...')
  const mdxText = await res.text()
  const mdxSource = await serialize({ source: mdxText })
  return { props: { mdxSource } }
}
```

----------------------------------------

TITLE: Marking Current Scope as Dynamic in Next.js
DESCRIPTION: Marks the current rendering scope as dynamic. Depending on the store's state (`dynamicShouldError`, `prerenderState`, `isStaticGeneration`, `isUnstableCacheCallback`), it either throws a `StaticGenBailoutError` or `DynamicServerError`, triggers postponement via `postponeWithTracking`, or sets `revalidate` to 0.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import { DynamicServerError } from '../../client/components/hooks-server-context';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import { getPathname } from '../../lib/url';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { StaticGenBailoutError } from '../../client/components/static-generation-bailout';
import { c as postponeWithTracking } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
function markCurrentScopeAsDynamic(store, expression) {
    const pathname = getPathname(store.urlPathname);
    if (store.isUnstableCacheCallback) {
        return;
    } else if (store.dynamicShouldError) {
        throw new StaticGenBailoutError(`Route ${pathname} with \`dynamic = "error"\` couldn't be rendered statically because it used \`${expression}\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    } else if (store.prerenderState) {
        postponeWithTracking(store.prerenderState, expression, pathname);
    } else {
        store.revalidate = 0;
        if (store.isStaticGeneration) {
            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);
            store.dynamicUsageDescription = expression;
            store.dynamicUsageStack = err.stack;
            throw err;
        }
    }
}
export { markCurrentScopeAsDynamic };
export { markCurrentScopeAsDynamic as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing Tailwind CSS directives in Global Stylesheet (Pages Router)
DESCRIPTION: This CSS file imports the Tailwind CSS directives, which are used to inject Tailwind's generated styles. This file needs to be imported in the custom app file to apply the styles globally in the application when using the Pages router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_7

LANGUAGE: css
CODE:
```
"@import 'tailwindcss';"
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Jest using Yarn
DESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js application configured with Jest using Yarn. Similar to the previous snippet, it utilizes the 'with-jest-babel' example. The expected outcome is a new application folder with appropriate configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-jest-babel with-jest-babel-app
```

----------------------------------------

TITLE: Creating Next.js App with Cloudflare Turnstile Example (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the Cloudflare Turnstile example. It initializes a project named "cloudflare-turnstile-app" using the specified example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cloudflare-turnstile cloudflare-turnstile-app
```

----------------------------------------

TITLE: Initializing Parent Component with Cache Directive
DESCRIPTION: Demonstrates a parent component using the 'use cache' directive with a days-long cache lifecycle
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
// Parent component
import { unstable_cacheLife as cacheLife } from 'next/cache'
import { ChildComponent } from './child'

export async function ParentComponent() {
  'use cache'
  cacheLife('days')

  return (
    <div>
      <ChildComponent />
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the api-routes-middleware example. It initializes the project with the specified example and names the new application api-routes-middleware-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-middleware/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-middleware api-routes-middleware-app
```

----------------------------------------

TITLE: Creating Next.js App with Vitest using npx
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Vitest integration using npx.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-vitest with-vitest-app
```

----------------------------------------

TITLE: Creating Next.js app with GSAP using NPX
DESCRIPTION: This command initializes a new Next.js application using the `with-gsap` example. It utilizes `create-next-app` via npx, downloading and executing the package without global installation. The resulting application will be named `with-gsap-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-gsap/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-gsap with-gsap-app
```

----------------------------------------

TITLE: Creating a Next.js app using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-yarn-workspaces example. It initializes the project with the specified example and names the application with-yarn-workspaces-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yarn-workspaces/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-yarn-workspaces with-yarn-workspaces-app
```

----------------------------------------

TITLE: Loading Scripts in _app.js
DESCRIPTION: This code snippet demonstrates how to load a third-party script in the custom `_app.js` file in Next.js Pages Router. The script will load on every page. Requires `next/script` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function MyApp({ Component, pageProps }) {
  return (
    <>
      <Component {...pageProps} />
      <Script src="https://example.com/script.js" />
    </>
  )
}
```

----------------------------------------

TITLE: Generating Viewport in JavaScript
DESCRIPTION: This snippet illustrates how to define a generateViewport function in JavaScript that returns a Viewport object. It takes an object with route parameters as an argument.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
export function generateViewport({ params }) {
  return {
    themeColor: '...',
  }
}
```

----------------------------------------

TITLE: Running Next.js Development Server - Bash
DESCRIPTION: This command runs the Next.js development server, allowing local access to the application through the browser. It assumes that all previous steps were successfully completed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Opting Out of Prefetching in Next.js Link Component
DESCRIPTION: This snippet demonstrates how to opt out of the automatic prefetching behavior in Next.js Link components by setting `prefetch={false}`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/prefetch-true-deprecated.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
<Link prefetch={false}>
```

----------------------------------------

TITLE: Creating Next.js app with Userbase Example
DESCRIPTION: These commands create a new Next.js application using the `with-userbase` example.  The commands utilize `create-next-app` with npm, Yarn, and pnpm respectively. The created application will be named `next-userbase-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-userbase next-userbase-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-userbase next-userbase-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-userbase next-userbase-app
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application using the api-routes-apollo-server example. It bootstraps the project with the necessary dependencies and configurations for integrating Apollo GraphQL.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-apollo-server api-routes-apollo-server-app
```

----------------------------------------

TITLE: Registering OpenTelemetry with @vercel/otel (JavaScript)
DESCRIPTION: Registers OpenTelemetry using the `@vercel/otel` package within the `instrumentation.js` file. This function configures the service name for the OpenTelemetry instance, allowing for easy identification of the application within observability tools. The service name is set to 'next-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel({ serviceName: 'next-app' })
}
```

----------------------------------------

TITLE: Specify Runtime in instrumentation.js
DESCRIPTION: Dynamically loads modules based on the Next.js runtime environment.  It uses `process.env.NEXT_RUNTIME` to determine whether the code is running on the Edge or Node.js runtime and then imports the appropriate module.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
export function register() {
  if (process.env.NEXT_RUNTIME === 'edge') {
    return require('./register.edge')
  } else {
    return require('./register.node')
  }
}

export function onRequestError() {
  if (process.env.NEXT_RUNTIME === 'edge') {
    return require('./on-request-error.edge')
  } else {
    return require('./on-request-error.node')
  }
}
```

----------------------------------------

TITLE: Implementing Custom Document for Stylesheet Inclusion in Next.js
DESCRIPTION: This code snippet demonstrates how to create a custom Document component in Next.js to properly include stylesheet links. It uses the functional component syntax, which is preferred for future compatibility with React Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-stylesheets-in-head-component.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html>
      <Head>
        <link rel="stylesheet" href="..." />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
```

----------------------------------------

TITLE: Typing JSON-LD Objects with schema-dts in TypeScript
DESCRIPTION: This snippet illustrates how to use the `schema-dts` library to add type safety to JSON-LD objects in a TypeScript project. It imports specific schema types (like `Product` and `WithContext`) and applies them to the JSON-LD object definition.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Product, WithContext } from 'schema-dts';

const jsonLd: WithContext<Product> = {
  '@context': 'https://schema.org',
  '@type': 'Product',
  name: 'Next.js Sticker',
  image: 'https://nextjs.org/imgs/sticker.png',
  description: 'Dynamic at the speed of static.',
};
```

----------------------------------------

TITLE: Initializing Google Analytics on a single route (Pages Router - JSX)
DESCRIPTION: This code snippet demonstrates how to include Google Analytics on a single route in a Next.js application using the Pages Router.  It imports the `GoogleAnalytics` component from `@next/third-parties/google` and initializes it with a Google Analytics ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_12

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function Page() {
  return <GoogleAnalytics gaId="G-XYZ" />
}
```

----------------------------------------

TITLE: Configuring Fetch Logging in next.config.js
DESCRIPTION: This snippet configures Next.js to log the full URL of fetch requests during development mode. Dependencies include Next.js in a development environment. Set `logging.fetches.fullUrl` to `true` to enable this feature.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/logging.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  logging: {
    fetches: {
      fullUrl: true,
    },
  },
}
```

----------------------------------------

TITLE: Importing files with side effects (TypeScript)
DESCRIPTION: This code snippet shows how to import a file with side effects inside the `register` function in `instrumentation.ts`. The `import` statement is awaited to ensure the side effects are applied before other code executes. This approach colocates all side effects in one place, preventing unintended global side effects. It imports a hypothetical package named 'package-with-side-effect'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
export async function register() {
  await import('package-with-side-effect')
}
```

----------------------------------------

TITLE: Adding Custom Loader Using defaultLoaders.babel in Next.js Webpack Config
DESCRIPTION: Provides an example of adding a custom loader (like the @mdx-js/loader) to the Webpack configuration by pushing a new rule to `config.module.rules`. This example shows how to integrate the loader with Next.js's default Babel loader using `options.defaultLoaders.babel`, useful for processing file types that require Babel transpilation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/webpack.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
// Example config for adding a loader that depends on babel-loader
// This source was taken from the @next/mdx plugin source:
// https://github.com/vercel/next.js/tree/canary/packages/next-mdx
module.exports = {
  webpack: (config, options) => {
    config.module.rules.push({
      test: /\.mdx/,
      use: [
        options.defaultLoaders.babel,
        {
          loader: '@mdx-js/loader',
          options: pluginOptions.options,
        },
      ],
    })

    return config
  },
}
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command uses pnpm to generate a Next.js application using the 'with-hls-js' example. It uses the create next-app command, specifying both the example and target application name. A new directory called 'with-hls-js-app' will be created containing the Next.js app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-hls-js/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-hls-js with-hls-js-app
```

----------------------------------------

TITLE: Creating Next.js app with urql example (npm)
DESCRIPTION: This command uses npx to create a new Next.js application named 'with-urql-app' based on the 'with-urql' example. It downloads and executes the create-next-app package to bootstrap the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-urql/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-urql with-urql-app
```

----------------------------------------

TITLE: Invalid Config: Dynamic Runtime - Next.js JavaScript
DESCRIPTION: This code snippet demonstrates an invalid usage of the `config` export in Next.js where the `runtime` property contains a dynamic expression. The `runtime` property must be a static string literal.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
// `config.runtime` contains a dynamic expression
export const config = {
  runtime: `node${'js'}`, 
}
```

----------------------------------------

TITLE: Customizing Webpack Configuration in next.config.ts
DESCRIPTION: This TypeScript code snippet shows how to customize the Webpack configuration in `next.config.ts`. It defines a `webpack` function that takes the current configuration and an options object, allowing modifications to the webpack config. It returns the modified config. Requires `next` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_26

LANGUAGE: typescript
CODE:
```
import { NextConfig } from 'next'

const nextConfig: NextConfig = {
  webpack: (config, { isServer }) => {
    // Modify the webpack config here
    return config
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses `create-next-app` with npm to bootstrap a Next.js application using the `with-cypress` example.  It initializes a new project named `with-cypress-app` in the current directory. It requires npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cypress/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-cypress with-cypress-app
```

----------------------------------------

TITLE: Creating Next.js App with TakeShape Example (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the cms-takeshape example. It bootstraps the project with the necessary files and dependencies to connect to TakeShape.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-takeshape cms-takeshape-app
```

----------------------------------------

TITLE: Creating Entrypoint Page (JSX)
DESCRIPTION: This code creates the entrypoint page for a Next.js application as a Single Page Application (SPA) using JavaScript (JSX). It imports global CSS, defines `generateStaticParams` to generate only the index route (`/`), and creates a functional component `Page` that initially returns placeholder content. This component will serve as the entry point for the entire application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_14

LANGUAGE: jsx
CODE:
```
import '../../index.css'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return '...' // We'll update this
}
```

----------------------------------------

TITLE: Installing CSP Example with Yarn
DESCRIPTION: Creates a new Next.js application with strict CSP implementation using yarn create next-app command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-strict-csp/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-strict-csp with-strict-csp-app
```

----------------------------------------

TITLE: Implementing Custom Trailing Slash Handling in Next.js Middleware (JS)
DESCRIPTION: Shows how to implement custom logic in Next.js middleware (`middleware.js`) to handle trailing slashes based on specific path prefixes (`/docs`, `/blog`). If a path matches a legacy prefix, it proceeds; otherwise, it applies a redirect if a trailing slash is missing and the path is not a file. Requires `skipTrailingSlashRedirect` to be enabled in `next.config.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_14

LANGUAGE: javascript
CODE:
```
const legacyPrefixes = ['/docs', '/blog']

export default async function middleware(req) {
  const { pathname } = req.nextUrl

  if (legacyPrefixes.some((prefix) => pathname.startsWith(prefix))) {
    return NextResponse.next()
  }

  // apply trailing slash handling
  if (
    !pathname.endsWith('/') &&
    !pathname.match(/((?!\.well-known(?:\/.*)?)(?:[^/]+\/)*[^/]+\.\w+)/)
  ) {
    return NextResponse.redirect(
      new URL(`${req.nextUrl.pathname}/`, req.nextUrl)
    )
  }
}
```

----------------------------------------

TITLE: Configuring AWS CodeBuild Cache for Next.js Builds
DESCRIPTION: This YAML configuration for AWS CodeBuild specifies paths to be cached, including node_modules for faster package installation and the Next.js cache for faster application rebuilds.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_3

LANGUAGE: yaml
CODE:
```
cache:
  paths:
    - 'node_modules/**/*' # Cache `node_modules` for faster `yarn` or `npm i`
    - '.next/cache/**/*' # Cache Next.js for faster application rebuilds
```

----------------------------------------

TITLE: Creating Next.js app with Redis example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named 'roadmap' based on the 'with-redis' example. This bootstraps the project with the necessary dependencies and configuration for using Redis with Upstash.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redis/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-redis roadmap
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses npx to create a new Next.js application with a custom Babel configuration. The `--example` flag specifies the 'with-custom-babel-config' example, and 'with-custom-babel-config-app' is the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-custom-babel-config/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-custom-babel-config with-custom-babel-config-app
```

----------------------------------------

TITLE: Persisting Application State Before Navigation - JavaScript
DESCRIPTION: This snippet demonstrates how to use the window.onbeforeunload event to store application state into local storage before a page navigation. It requires access to the application state, often from a state management library like Redux. This allows for persistence across page reloads, capturing the app state as a JSON string and storing it under the key 'app-state'. The method does not provide the capability to execute asynchronous operations during its execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-on-app-updated-hook.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
window.onbeforeunload = function (e) {
  // Get the application state (usually from a store like Redux)
  const appState = {}
  localStorage.setItem('app-state', JSON.stringify(appState))
}
```

----------------------------------------

TITLE: MSW Initialization using yarn
DESCRIPTION: This command initializes Mock Service Worker in the public directory. It's used to generate the `mockServiceWorker.js` file, which is essential for MSW to intercept requests in the browser. This uses the yarn package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn msw init public/
```

----------------------------------------

TITLE: Configuring Jenkins Pipeline Cache for Next.js Builds
DESCRIPTION: This YAML configuration for Jenkins Pipeline uses the Job Cacher plugin to cache both node_modules and the Next.js cache directory. It includes steps for restoring npm packages and building the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_8

LANGUAGE: yaml
CODE:
```
stage("Restore npm packages") {
    steps {
        // Writes lock-file to cache based on the GIT_COMMIT hash
        writeFile file: "next-lock.cache", text: "$GIT_COMMIT"

        cache(caches: [
            arbitraryFileCache(
                path: "node_modules",
                includes: "**/*",
                cacheValidityDecidingFile: "package-lock.json"
            )
        ]) {
            sh "npm install"
        }
    }
}
stage("Build") {
    steps {
        // Writes lock-file to cache based on the GIT_COMMIT hash
        writeFile file: "next-lock.cache", text: "$GIT_COMMIT"

        cache(caches: [
            arbitraryFileCache(
                path: ".next/cache",
                includes: "**/*",
                cacheValidityDecidingFile: "next-lock.cache"
            )
        ]) {
            // aka `next build`
            sh "npm run build"
        }
    }
}
```

----------------------------------------

TITLE: Specifying Node.js Runtime in Next.js Middleware Config (TS)
DESCRIPTION: Specifies the Node.js runtime for the Next.js middleware by exporting a `config` object with the `runtime` property set to `'nodejs'` in the `middleware.ts` file. This must be used in conjunction with enabling `nodeMiddleware: true` in `next.config.js/ts`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_22

LANGUAGE: typescript
CODE:
```
export const config = {
  runtime: 'nodejs',
}
```

----------------------------------------

TITLE: Passing URL Object to Next.js Link (Pages Router)
DESCRIPTION: These snippets show how to provide a URL object to the `href` prop of the `Link` component. Next.js will automatically format the object into a URL string, supporting `pathname` and `query` properties for defining the path and query parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_15

LANGUAGE: TSX
CODE:
```
import Link from 'next/link'

function Home() {
  return (
    <ul>
      <li>
        <Link
          href={{
            pathname: '/about',
            query: { name: 'test' },
          }}
        >
          About us
        </Link>
      </li>
      <li>
        <Link
          href={{
            pathname: '/blog/[slug]',
            query: { slug: 'my-post' },
          }}
        >
          Blog Post
        </Link>
      </li>
    </ul>
  )
}

export default Home
```

LANGUAGE: JSX
CODE:
```
import Link from 'next/link'

function Home() {
  return (
    <ul>
      <li>
        <Link
          href={{
            pathname: '/about',
            query: { name: 'test' },
          }}
        >
          About us
        </Link>
      </li>
      <li>
        <Link
          href={{
            pathname: '/blog/[slug]',
            query: { slug: 'my-post' },
          }}
        >
          Blog Post
        </Link>
      </li>
    </ul>
  )
}

export default Home
```

----------------------------------------

TITLE: Accessing Preview Data in API Routes - JavaScript
DESCRIPTION: This JavaScript code snippet shows how to access the `preview` and `previewData` properties within a Next.js API route. The `req` object provides access to `req.preview` (boolean) and `req.previewData` (the data passed to `setPreviewData`). This code demonstrates basic access to these properties within the route handler.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
export default function myApiRoute(req, res) {
  const isPreview = req.preview
  const previewData = req.previewData
  // ...
}
```

----------------------------------------

TITLE: Interoperable PostCSS Configuration (JavaScript)
DESCRIPTION: This JavaScript configuration file for PostCSS uses the interoperable object-based format. This allows it to be used by other tools that aren't Next.js. It includes `postcss-flexbugs-fixes` and `postcss-preset-env` with Autoprefixer settings.  Requires `postcss-flexbugs-fixes` and `postcss-preset-env` as installed dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins: {
    'postcss-flexbugs-fixes': {},
    'postcss-preset-env': {
      autoprefixer: {
        flexbox: 'no-2009',
      },
      stage: 3,
      features: {
        'custom-properties': false,
      },
    },
  },
}
```

----------------------------------------

TITLE: Defining Image Size TSX
DESCRIPTION: Defines the static `size` export for Open Graph or Twitter images in a TSX file. This object specifies the width and height in pixels for the generated image, used by Next.js to set the appropriate meta tags in the HTML head.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
export const size = { width: 1200, height: 630 }

export default function Image() {}
```

----------------------------------------

TITLE: Displaying Video using Vercel Blob URL in Next.js
DESCRIPTION: This code snippet demonstrates how to display a video in a Next.js application using the video's URL from Vercel Blob. It uses React Suspense to handle the loading state while fetching the video URL. The `VideoComponent` asynchronously fetches the Blob URL and renders a `<video>` tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import { list } from '@vercel/blob'

export default function Page() {
  return (
    <Suspense fallback={<p>Loading video...</p>}>
      <VideoComponent fileName="my-video.mp4" />
    </Suspense>
  )
}

async function VideoComponent({ fileName }) {
  const { blobs } = await list({
    prefix: fileName,
    limit: 1,
  })
  const { url } = blobs[0]

  return (
    <video controls preload="none" aria-label="Video player">
      <source src={url} type="video/mp4" />
      Your browser does not support the video tag.
    </video>
  )
}
```

----------------------------------------

TITLE: Creating Next.js App with ESLint using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named 'with-eslint-app' with ESLint pre-configured. It uses the 'with-eslint' example from the create-next-app tool.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-eslint/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-eslint with-eslint-app
```

----------------------------------------

TITLE: Creating a Static sitemap.xml in Next.js
DESCRIPTION: Demonstrates the structure of a simple, manually created `sitemap.xml` file placed in the `app` directory. It lists basic page URLs with optional metadata like `lastmod`, `changefreq`, and `priority` according to the sitemaps.org protocol. This approach is suitable for smaller sites with infrequent changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_0

LANGUAGE: XML
CODE:
```
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://acme.com</loc>
    <lastmod>2023-04-06T15:02:24.021Z</lastmod>
    <changefreq>yearly</changefreq>
    <priority>1</priority>
  </url>
  <url>
    <loc>https://acme.com/about</loc>
    <lastmod>2023-04-06T15:02:24.021Z</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>https://acme.com/blog</loc>
    <lastmod>2023-04-06T15:02:24.021Z</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.5</priority>
  </url>
</urlset>
```

----------------------------------------

TITLE: Creating a Next.js app with static export (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application with the 'with-static-export' example. It simplifies the process of starting a project with pre-configured static export settings. The app will be named 'with-static-export-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-static-export/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example with-static-export with-static-export-app
```

----------------------------------------

TITLE: Disabling Scroll on Link Navigation (Pages Router)
DESCRIPTION: Explains how to disable the default scrolling behavior for `<Link>` components in the Pages Router by adding the `scroll={false}` prop. This prevents the browser from scrolling to the top of the page or a specified hash ID, overriding the standard link behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_19

LANGUAGE: JSX
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/#hashid" scroll={false}>
      Disables scrolling to the top
    </Link>
  )
}
```

LANGUAGE: TSX
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/#hashid" scroll={false}>
      Disables scrolling to the top
    </Link>
  )
```

----------------------------------------

TITLE: Running Production Tests for App Router
DESCRIPTION: Command to run tests in the 'test/e2e/app-dir/app' test suite in production mode, which uses 'next build' and 'next start'.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
pnpm test-start test/e2e/app-dir/app/
```

----------------------------------------

TITLE: Sending Google Analytics events (Pages Router - JSX)
DESCRIPTION: This code snippet demonstrates how to send events to Google Analytics using the `sendGAEvent` function from `@next/third-parties/google` within a Pages Router component. It defines a button that, when clicked, dispatches a custom event named 'buttonClicked' with the value 'xyz'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_14

LANGUAGE: jsx
CODE:
```
import { sendGAEvent } from '@next/third-parties/google'

export function EventButton() {
  return (
    <div>
      <button
        onClick={() => sendGAEvent('event', 'buttonClicked', { value: 'xyz' })
      >
        Send Event
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Define Custom App Component (Pages Router)
DESCRIPTION: Creates a custom `_app` component (`pages/_app.tsx` or `pages/_app.js`) in the `pages` directory. This file is used by the Pages Router to initialize pages, allowing for global layouts, data fetching, and prop injection.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import type { AppProps } from 'next/app'

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}
```

LANGUAGE: jsx
CODE:
```
export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Jest using npx
DESCRIPTION: This snippet shows how to create a new Next.js application configured with Jest using npx. It uses the example 'with-jest-babel' to set up the application correctly. The expected output is a new application folder with all necessary configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-jest-babel with-jest-babel-app
```

----------------------------------------

TITLE: Accessing Server-Side Env Vars in Pages Router (Next.js)
DESCRIPTION: This example shows how to access server-side environment variables loaded from a `.env` file within a `getStaticProps` function in the Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export async function getStaticProps() {
  const db = await myDB.connect({
    host: process.env.DB_HOST,
    username: process.env.DB_USER,
    password: process.env.DB_PASS,
  })
  // ...
}
```

----------------------------------------

TITLE: Disable Static Analysis (ESLint & TypeScript) in Next.js
DESCRIPTION: This snippet demonstrates how to disable ESLint and TypeScript checks during Next.js builds.  This can reduce memory usage, especially in large projects.  Warning: Disabling these checks can lead to faulty deployments if type errors or linting issues exist.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    // Warning: This allows production builds to successfully complete even if
    // your project has ESLint errors.
    ignoreDuringBuilds: true,
  },
  typescript: {
    // !! WARN !!
    // Dangerously allow production builds to successfully complete even if
    // your project has type errors.
    // !! WARN !!
    ignoreBuildErrors: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Conditionally importing NodeSDK for OpenTelemetry (JavaScript)
DESCRIPTION: Conditionally imports the `instrumentation.node.js` file based on the `NEXT_RUNTIME` environment variable. This ensures that `NodeSDK`, which is not compatible with the edge runtime, is only imported when the application is running in a Node.js environment. This approach is used in `instrumentation.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    await import('./instrumentation.node.js')
  }
}
```

----------------------------------------

TITLE: Asynchronous Key Generation Solution in Next.js
DESCRIPTION: Improved implementation using asynchronous key generation with Promise.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { generateKey } from 'node:crypto'

export default async function Page() {
  const key = await new Promise(resolve => generateKey('hmac', { ... }, key => resolve(key)))
  const digestedData = await digestDataWithKey(data, key);
  return ...
}
```

----------------------------------------

TITLE: Initializing Login Page Component in Next.js
DESCRIPTION: Creates a basic login page component that renders a Login component, demonstrating the main login route implementation
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
import { Login } from '@\/app\/ui\/login'

export default function Page() {
  return <Login \/>
}
```

LANGUAGE: jsx
CODE:
```
import { Login } from '@\/app\/ui\/login'

export default function Page() {
  return <Login \/>
}
```

----------------------------------------

TITLE: Setting Cookies in API Route - JavaScript
DESCRIPTION: This code snippet demonstrates how to set a cookie in a Next.js API route using JavaScript. It uses the setHeader method on the response object to set the Set-Cookie header.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_13

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')
  res.status(200).send('Cookie has been set.')
}
```

----------------------------------------

TITLE: Creating a New Next.js Application using Bash
DESCRIPTION: This snippet demonstrates the Bash command to create a new Next.js application using the `npx create-next-app` command. The terminal icon helps indicate where users should run the command.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
npx create-next-app
```

----------------------------------------

TITLE: Creating a new Next.js app with TypeScript and GraphQL
DESCRIPTION: This code snippet shows how to create a new Next.js application using `create-next-app` with the `with-typescript-graphql` example. It shows the usage with npm, yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-typescript-graphql with-typescript-graphql-app
```

----------------------------------------

TITLE: Creating Next.js App with React-GA4 Example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-react-ga4 example. It's a bootstrapping method for quickly setting up a project with pre-configured analytics.  The 'with-react-ga-app' argument specifies the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-ga4/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-ga4 with-react-ga-app
```

----------------------------------------

TITLE: Implementing Custom Next.js Cache Handler
DESCRIPTION: This code provides a basic implementation of a custom cache handler class required by Next.js when the `cacheHandler` option is configured. It includes required methods (`get`, `set`, `revalidateTag`, `resetRequestCache`). This example uses a simple `Map` for demonstration; a real implementation would integrate with an external caching solution like Redis or S3 to enable persistent or shared caching across multiple Next.js instances.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
const cache = new Map()

module.exports = class CacheHandler {
  constructor(options) {
    this.options = options
  }

  async get(key) {
    // This could be stored anywhere, like durable storage
    return cache.get(key)
  }

  async set(key, data, ctx) {
    // This could be stored anywhere, like durable storage
    cache.set(key, {
      value: data,
      lastModified: Date.now(),
      tags: ctx.tags,
    })
  }

  async revalidateTag(tags) {
    // tags is either a string or an array of strings
    tags = [tags].flat()
    // Iterate over all entries in the cache
    for (let [key, value] of cache) {
      // If the value's tags include the specified tag, delete this entry
      if (value.tags.some((tag) => tags.includes(tag))) {
        cache.delete(key)
      }
    }
  }

  // If you want to have temporary in memory cache for a single request that is reset
  // before the next request you can leverage this method
  resetRequestCache() {}
}
```

----------------------------------------

TITLE: Creating Next.js App with Ghost Example (npx)
DESCRIPTION: This command uses `create-next-app` with npm to bootstrap a new Next.js application using the Ghost CMS example. It creates a new directory named `cms-ghost-app` with the necessary files and configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-ghost cms-ghost-app
```

----------------------------------------

TITLE: Creating a Next.js app with Clerk using Yarn
DESCRIPTION: This command uses `create next-app` with `yarn` to bootstrap a Next.js application pre-configured with Clerk. The `--example with-clerk` flag specifies the Clerk example to use, and `with-clerk-app` is the name of the new application directory. Requires Yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-clerk/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-clerk with-clerk-app
```

----------------------------------------

TITLE: Creating Next.js app with EdgeDB example - Bash
DESCRIPTION: This command creates a new Next.js application using the `with-edgedb` example. It uses `create next-app` via `yarn` to bootstrap the project with the specified example and project name. The resulting project will be located in the `with-edgedb-app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-edgedb with-edgedb-app
```

----------------------------------------

TITLE: Creating Next.js App with GTM Example (Yarn)
DESCRIPTION: This command initializes a new Next.js application using the `with-google-tag-manager` example from the Next.js repository. It utilizes `create next-app` via `yarn` to bootstrap the project with the specified template and project name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-google-tag-manager with-google-tag-manager-app
```

----------------------------------------

TITLE: Creating Next.js app with Contentful example using Yarn
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project using the cms-contentful example. It creates a directory named cms-contentful-app using Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-contentful cms-contentful-app
```

----------------------------------------

TITLE: Exporting Custom Next.js Document
DESCRIPTION: Exports the custom MyDocument class as the default export. This makes the custom document configuration available to Next.js for rendering the application's HTML structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_3

LANGUAGE: js
CODE:
```
export default MyDocument;
```

----------------------------------------

TITLE: Creating a Next.js app with Panda CSS using npx
DESCRIPTION: This command uses npx to execute create-next-app, setting up a new Next.js project with the panda-css example. It bootstraps the application with the necessary configurations for Panda CSS integration and creates a project named 'panda-css-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/panda-css/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example panda-css panda-css-app
```

----------------------------------------

TITLE: Create Next.js app with MSW example using pnpm
DESCRIPTION: This command creates a new Next.js application using the `with-msw` example. It bootstraps a project with Mock Service Worker already configured for API mocking using pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-msw with-msw-app
```

----------------------------------------

TITLE: Defining Blog Post Metadata in Markdown
DESCRIPTION: This code snippet defines the metadata for a blog post using YAML front matter in a Markdown file. It includes the title, excerpt, cover image, publication date, author details, and OG image URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/_posts/dynamic-routing.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: "Dynamic Routing and Static Generation"
excerpt: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla facilities morbi tempus."
coverImage: "/assets/blog/dynamic-routing/cover.jpg"
date: "2020-03-16T05:35:07.322Z"
author:
  name: JJ Kasper
  picture: "/assets/blog/authors/jj.jpeg"
ogImage:
  url: "/assets/blog/dynamic-routing/cover.jpg"
---
```

----------------------------------------

TITLE: Escaping Special Characters in Next.js Rewrite Sources (JavaScript)
DESCRIPTION: This snippet demonstrates how to escape characters that have special meaning in regular expressions (`(`, `)`, `*`, etc.) when they appear literally in the `source` path of a rewrite rule. Using double backslashes (`\`) before the special character ensures it is treated as a literal character for matching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        // this will match `/english(default)/something` being requested
        source: '/english\\(default\\)/:slug',
        destination: '/en-us/:slug',
      },
    ]
  },
}
```

----------------------------------------

TITLE: Enabling Preview Mode with setPreviewData in Next.js (Basic)
DESCRIPTION: This JavaScript code snippet shows the basic implementation of enabling preview mode by calling `res.setPreviewData({})` within a Next.js API route handler.  This function sets cookies on the browser, activating preview mode for subsequent requests. It's a minimal example for testing preview mode functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  // ...
  res.setPreviewData({})
  // ...
}
```

----------------------------------------

TITLE: Implementing Custom Font in Functional Component in Next.js
DESCRIPTION: This code snippet demonstrates how to add a custom font to a Next.js application by modifying the `_document.js` file using a functional component. It imports necessary modules from 'next/document' and returns a JSX structure that includes the font link within the `<Head>` section. This approach ensures the font is loaded globally and enables automatic font optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-page-custom-font.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html>
      <Head>
        <link
          href="https://fonts.googleapis.com/css2?family=Inter&display=optional"
          rel="stylesheet"
        />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
```

----------------------------------------

TITLE: Handling TypeScript Import/Export Errors in Next.js (JavaScript)
DESCRIPTION: This example demonstrates the correct way to export and import TypeScript types in a Next.js project to avoid the 'Attempted import error' caused by improper type handling. The code snippet is related to the issue [vercel/next.js#7882](https://github.com/vercel/next.js/issues/7882).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-types/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
```js
Attempted import error: 'TypeA' is not exported from './package-1'.
```
```

----------------------------------------

TITLE: Defining Locale-Specific Paths for getStaticPaths
DESCRIPTION: Shows how to include a `locale` property within the path objects returned by `getStaticPaths`. This tells Next.js to generate a static version of the dynamic route page for the specified locale during the build process. Used with dynamic routes and `getStaticProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
export const getStaticPaths = ({ locales }) => {
  return {
    paths: [
      // if no `locale` is provided only the defaultLocale will be generated
      { params: { slug: 'post-1' }, locale: 'en-US' },
      { params: { slug: 'post-1' }, locale: 'fr' },
    ],
    fallback: true,
  }
}
```

----------------------------------------

TITLE: Using Image src in Next.js
DESCRIPTION: This snippet demonstrates how to access the `src` property of an image object in Next.js when using the standard `<img>` tag.  In Next.js, importing an image returns an object, so you need to access the `src` property to get the image URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_21

LANGUAGE: tsx
CODE:
```
// Before
<img src={logo} />

// After
<img src={logo.src} />
```

----------------------------------------

TITLE: Configuring Webpack in Next.js
DESCRIPTION: This code snippet modifies the Webpack configuration in a Next.js application within the `next.config.js` file. It shows how to push a new plugin to the Webpack configuration and stresses the importance of returning the modified configuration object. The dependencies include Node.js and Webpack, with parameters such as `config`, `buildId`, `dev`, `isServer`, `defaultLoaders` and `webpack` being used within the function. The modified configuration should be returned to avoid errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/undefined-webpack-config.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {
    // Note: we provide webpack above so you should not `require` it
    // Perform customizations to webpack config
    config.plugins.push(new webpack.IgnorePlugin(/\/__tests__\//))

    // Important: return the modified config
    return config
  },
}
```

----------------------------------------

TITLE: Creating Next.js Configuration File
DESCRIPTION: This code snippet defines the `next.config.mjs` file, which configures the Next.js application.  It sets the `output` to 'export', indicating a Single-Page Application (SPA), and changes the build output directory to `./dist/`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export', // Outputs a Single-Page Application (SPA).
  distDir: './dist', // Changes the build output directory to `./dist/`.
}

export default nextConfig
```

----------------------------------------

TITLE: Caching Component with Non-serializable Props (JSX)
DESCRIPTION: Defines a React component using the `'use cache'` directive that accepts a non-serializable prop, `children`. The component's output is cached, but it can still pass through the non-serializable prop without it affecting the cache key or being inspectable within the cached logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_4

LANGUAGE: JSX
CODE:
```
function CachedComponent({ children }) {
  'use cache'
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Subscribing to a Channel with useChannel
DESCRIPTION: This snippet demonstrates how to use the useChannel hook from @ably-labs/react-hooks to subscribe to an Ably channel and receive messages.  Every time a message is sent to the channel, a callback function logs it to the console.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { useState } from "react";
import { useChannel } from "@ably-labs/react-hooks";

export default function Home() {
  const [channel] = useChannel("your-channel", async (message) => {
    console.log("Received Ably message", message);
  });
}
```

----------------------------------------

TITLE: Configuring Next.js Rewrites with Trailing Slash (JavaScript)
DESCRIPTION: This snippet shows how to define rewrite rules when the Next.js application is configured to use trailing slashes (`trailingSlash: true`). Both the 'source' and 'destination' paths should include a trailing slash to match the application's routing behavior and ensure compatibility with the destination server if it also expects trailing slashes. This applies to both internal and external rewrites.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  trailingSlash: true,
  async rewrites() {
    return [
      {
        source: '/blog/',
        destination: 'https://example.com/blog/',
      },
      {
        source: '/blog/:path*/',
        destination: 'https://example.com/blog/:path*/',
      },
    ]
  },
}
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the active-class-name example. It initializes the project in a directory named active-class-name-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/active-class-name/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example active-class-name active-class-name-app
```

----------------------------------------

TITLE: Installing dependencies and running Next.js dev server
DESCRIPTION: These commands install the necessary dependencies for the Next.js application using npm, and then starts the development server. It assumes that Node.js and npm are already installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Creating Next.js App with AMP Example (Yarn)
DESCRIPTION: Uses Yarn to create a new Next.js application based on the AMP example. This command initializes the project with the necessary files and configurations for AMP support. It clones the 'amp' example template and names the new application 'amp-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/amp/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example amp amp-app
```

----------------------------------------

TITLE: Generating a Dynamic Localized Sitemap in Next.js (JS/TS)
DESCRIPTION: Demonstrates how to add localization information to sitemap entries using the `alternates` property. This allows specifying alternative language versions of a page, helping search engines understand localized content. The `languages` sub-property maps language codes to the alternate URL paths.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://acme.com',
      lastModified: new Date(),
      alternates: {
        languages: {
          es: 'https://acme.com/es',
          de: 'https://acme.com/de',
        },
      },
    },
    {
      url: 'https://acme.com/about',
      lastModified: new Date(),
      alternates: {
        languages: {
          es: 'https://acme.com/es/about',
          de: 'https://acme.com/de/about',
        },
      },
    },
    {
      url: 'https://acme.com/blog',
      lastModified: new Date(),
      alternates: {
        languages: {
          es: 'https://acme.com/es/blog',
          de: 'https://acme.com/de/blog',
        },
      },
    },
  ]
}
```

LANGUAGE: JavaScript
CODE:
```
export default function sitemap() {
  return [
    {
      url: 'https://acme.com',
      lastModified: new Date(),
      alternates: {
        languages: {
          es: 'https://acme.com/es',
          de: 'https://acme.com/de',
        },
      },
    },
    {
      url: 'https://acme.com/about',
      lastModified: new Date(),
      alternates: {
        languages: {
          es: 'https://acme.com/es/about',
          de: 'https://acme.com/de/about',
        },
      },
    },
    {
      url: 'https://acme.com/blog',
      lastModified: new Date(),
      alternates: {
        languages: {
          es: 'https://acme.com/es/blog',
          de: 'https://acme.com/de/blog',
        },
      },
    },
  ]
}
```

----------------------------------------

TITLE: Generating a Dynamic Sitemap with Image Extensions (TS)
DESCRIPTION: Extends the dynamic sitemap generation by adding the `images` property to a URL entry. This property is an array of image objects, allowing the inclusion of image-specific information in the sitemap using the Google Image Sitemaps extension. Requires importing `MetadataRoute` from `next`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://example.com',
      lastModified: '2021-01-01',
      changeFrequency: 'weekly',
      priority: 0.5,
      images: ['https://example.com/image.jpg'],
    },
  ]
}
```

----------------------------------------

TITLE: Implementing Custom Font in Class Component in Next.js
DESCRIPTION: This code snippet demonstrates how to add a custom font to a Next.js application by modifying the `_document.js` file using a class component.  It imports necessary modules from 'next/document' and overrides the render method to include the font link within the `<Head>` section. This ensures the font is loaded globally and enables automatic font optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-page-custom-font.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link
            href="https://fonts.googleapis.com/css2?family=Inter&display=optional"
            rel="stylesheet"
          />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

export default MyDocument
```

----------------------------------------

TITLE: Importing and Using WASM in Next.js Middleware
DESCRIPTION: This snippet demonstrates how to import and use WebAssembly (WASM) binaries in a Next.js Middleware. The code imports a WASM module and uses it to perform computations, with results added to response headers. Dependencies include the Next.js framework and the relevant WASM module. Key parameters involve importing and using the WASM functions, with the Middleware expected to compute and pass the result via response headers. Inputs are the WASM binary, and outputs are the HTTP response with custom headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/edge-dynamic-code-evaluation.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'\nimport squareWasm from './square.wasm?module'\n\nexport default async function middleware() {\n  const m = await WebAssembly.instantiate(squareWasm)\n  const answer = m.exports.square(9)\n\n  const response = NextResponse.next()\n  response.headers.set('x-square', answer.toString())\n  return response\n}
```

----------------------------------------

TITLE: Blog Posts Client Component
DESCRIPTION: Client component that uses the blog context and React's use hook to render blog posts data.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import { use } from 'react'
import { useBlogContext } from './context'

export function BlogPosts() {
  const blogPromise = useBlogContext()
  const posts = use(blogPromise)

  return <div>{posts.length} blog posts</div>
}
```

----------------------------------------

TITLE: Implementing getServerSideProps with JavaScript in Next.js
DESCRIPTION: This example shows how to fetch data from GitHub API using getServerSideProps in a JavaScript Next.js page. The function fetches repository data and passes it as props to the page component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-get-server-side-props.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}

export default function Page({ repo }) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Reading Nonce in a Server Component (JavaScript)
DESCRIPTION: This JavaScript snippet shows how to read the nonce value (set by the middleware) in a Next.js Server Component using the `headers` function from `next/headers`. The nonce is then passed to the `nonce` prop of the `<Script>` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { headers } from 'next/headers'
import Script from 'next/script'

export default async function Page() {
  const nonce = (await headers()).get('x-nonce')

  return (
    <Script
      src="https://www.googletagmanager.com/gtag/js"
      strategy="afterInteractive"
      nonce={nonce}
    />
  )
}
```

----------------------------------------

TITLE: Configuring Incremental PPR in next.config.ts (TypeScript)
DESCRIPTION: Configures the Next.js project to enable incremental Partial Prerendering by setting the `ppr` experimental option to `'incremental'` in the `next.config.ts` file. This globally enables the feature for routes that explicitly opt-in.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Implementing NextResponse Class for Next.js Middleware
DESCRIPTION: This code defines the `NextResponse` class, which extends the standard `Response` object. It customizes the response for Next.js middleware by adding features like proxied cookie handling, static methods for `json`, `redirect`, `rewrite`, and `next`, and a utility function `handleMiddlewareField` to manage specific 'x-middleware' headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import { validateURL } from '../utils';
import { NextURL } from '../next-url';
import { toNodeOutgoingHttpHeaders } from '../utils';
import { ResponseCookies } from './cookies';
import { stringifyCookie } from '../../web/spec-extension/cookies';
import { ReflectAdapter } from './adapters/reflect';
import '../../web/spec-extension/cookies';
import '../next-url';
import '../utils';
import './adapters/reflect';
import './cookies';
const INTERNALS = Symbol('internal response');
const REDIRECTS = new Set([
    301,
    302,
    303,
    307,
    308
]);
function handleMiddlewareField(init, headers) {
    var _init_request;
    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {
        if (!(init.request.headers instanceof Headers)) {
            throw new Error('request.headers must be an instance of Headers');
        }
        const keys = [];
        for (const [key, value] of init.request.headers){
            headers.set('x-middleware-request-' + key, value);
            keys.push(key);
        }
        headers.set('x-middleware-override-headers', keys.join(','));
    }
}
class NextResponse extends Response {
    constructor(body, init = {}){
        super(body, init);
        const headers = this.headers;
        const cookies = new ResponseCookies(headers);
        const cookiesProxy = new Proxy(cookies, {
            get (target, prop, receiver) {
                switch(prop){
                    case 'delete':
                    case 'set':
                        {
                            return (...args)=>{
                                const result = Reflect.apply(target[prop], target, args);
                                const newHeaders = new Headers(headers);
                                if (result instanceof ResponseCookies) {
                                    headers.set('x-middleware-set-cookie', result.getAll().map((cookie)=>stringifyCookie(cookie)).join(','));
                                }
                                handleMiddlewareField(init, newHeaders);
                                return result;
                            };
                        }
                    default:
                        return ReflectAdapter.get(target, prop, receiver);
                }
            }
        });
        this[INTERNALS] = {
            cookies: cookiesProxy,
            url: init.url ? new NextURL(init.url, {
                headers: toNodeOutgoingHttpHeaders(headers),
                nextConfig: init.nextConfig
            }) : undefined
        };
    }
    [Symbol.for('edge-runtime.inspect.custom')]() {
        return {
            cookies: this.cookies,
            url: this.url,
            body: this.body,
            bodyUsed: this.bodyUsed,
            headers: Object.fromEntries(this.headers),
            ok: this.ok,
            redirected: this.redirected,
            status: this.status,
            statusText: this.statusText,
            type: this.type
        };
    }
    get cookies() {
        return this[INTERNALS].cookies;
    }
    static json(body, init) {
        const response = Response.json(body, init);
        return new NextResponse(response.body, response);
    }
    static redirect(url, init) {
        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;
        if (!REDIRECTS.has(status)) {
            throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        const initObj = typeof init === 'object' ? init : {};
        const headers = new Headers(initObj == null ? void 0 : initObj.headers);
        headers.set('Location', validateURL(url));
        return new NextResponse(null, {
            ...initObj,
            headers,
            status
        });
    }
    static rewrite(destination, init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-rewrite', validateURL(destination));
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
    static next(init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-next', '1');
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
}
export { NextResponse };
export { INTERNALS as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { REDIRECTS as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { handleMiddlewareField as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { NextResponse as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Copy Environment Variables File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. The `.env.local` file is used to store environment-specific variables, such as API keys, and is typically excluded from version control. This allows developers to configure their local development environments without affecting the main project codebase.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-maps-embed/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Implementing Per-Page Layouts with TypeScript in Next.js
DESCRIPTION: A TypeScript implementation of a page component with a custom layout. It defines the getLayout function that wraps the page content in multiple layout components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import type { ReactElement } from 'react'
import Layout from '../components/layout'
import NestedLayout from '../components/nested-layout'
import type { NextPageWithLayout } from './_app'

const Page: NextPageWithLayout = () => {
  return <p>hello world</p>
}

Page.getLayout = function getLayout(page: ReactElement) {
  return (
    <Layout>
      <NestedLayout>{page}</NestedLayout>
    </Layout>
  )
}

export default Page
```

----------------------------------------

TITLE: Using 'use memo' Directive in React Component (JavaScript)
DESCRIPTION: Example of using the 'use memo' directive in a React component to opt-in for compilation when in annotation mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
export default function Page() {
  'use memo'
  // ...
}
```

----------------------------------------

TITLE: CSS for Applying Font Variables
DESCRIPTION: This CSS snippet demonstrates how to apply font variables defined in JavaScript/TypeScript within a CSS file. It sets the `font-family` property for the `html` and `h1` elements using the defined CSS variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_20

LANGUAGE: css
CODE:
```
html {
  font-family: var(--font-inter);
}

h1 {
  font-family: var(--font-roboto-mono);
}
```

----------------------------------------

TITLE: Disabling Server-Side Rendering for Browser-Only Components in Next.js
DESCRIPTION: Shows how to use dynamic imports to disable server-side rendering for components that rely on browser-only APIs. It uses the dynamic function from next/dynamic with the ssr option set to false.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const DynamicComponentWithNoSSR = dynamic(
  () => import('../components/BrowserOnlyComponent'),
  { ssr: false }
)

export default function Page() {
  return (
    <div>
      <h1>My page</h1>
      <DynamicComponentWithNoSSR />
    </div>
  )
}
```

----------------------------------------

TITLE: Initializing OpenTelemetry NodeSDK (JavaScript)
DESCRIPTION: Initializes the OpenTelemetry `NodeSDK` in `instrumentation.node.js`. This code configures the SDK with a resource containing the service name ('next-app') and a simple span processor that exports traces using OTLP over HTTP. The SDK is then started to begin collecting telemetry data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'
import { Resource } from '@opentelemetry/resources'
import { NodeSDK } from '@opentelemetry/sdk-node'
import { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions'

const sdk = new NodeSDK({
  resource: new Resource({
    [ATTR_SERVICE_NAME]: 'next-app',
  }),
  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),
})
sdk.start()
```

----------------------------------------

TITLE: Initializing Google Maps with onReady in Next.js (Pages Router) - JSX
DESCRIPTION: This code demonstrates how to initialize a Google Maps embed using the `onReady` property of the `next/script` component within a Next.js application using the Pages Router. It uses a ref to target a div element for the map and re-instantiates the map on every component mount. The `onReady` function is called after the script has loaded.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_14

LANGUAGE: jsx
CODE:
```
import { useRef } from 'react'
import Script from 'next/script'

export default function Page() {
  const mapRef = useRef()

  return (
    <>
      <div ref={mapRef}></div>
      <Script
        id="google-maps"
        src="https://maps.googleapis.com/maps/api/js"
        onReady={() => {
          new google.maps.Map(mapRef.current, {
            center: { lat: -34.397, lng: 150.644 },
            zoom: 8,
          })
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Root Layout: Removing Default Meta Tags (TSX)
DESCRIPTION: This code modifies the root layout in Next.js (TSX) by removing the default `meta charset` and `meta viewport` tags from the `<head>`. Next.js automatically includes these tags, so they can be safely removed from the layout file. This simplifies the layout and avoids redundancy.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <link rel="icon" type="image/svg+xml" href="/icon.svg" />
        <title>My App</title>
        <meta name="description" content="My App is a..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Using history.replaceState for Path Changes Next.js JSX
DESCRIPTION: Shows using the native window.history.replaceState method in a JavaScript Client Component to change the URL path. It uses the usePathname hook to get the current path and replaces the history entry with a new path that includes a locale segment, useful for locale switching without adding to history.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'

export function LocaleSwitcher() {
  const pathname = usePathname()

  function switchLocale(locale) {
    // e.g. '/en/about' or '/fr/contact'
    const newPath = `/${locale}${pathname}`
    window.history.replaceState(null, '', newPath)
  }

  return (
    <>
      <button onClick={() => switchLocale('en')}>English</button>
      <button onClick={() => switchLocale('fr')}>French</button>
    </>
  )
}
```

----------------------------------------

TITLE: Creating a Next.js app with cxs using pnpm
DESCRIPTION: This command initializes a new Next.js application using the with-cxs example. It utilizes pnpm to execute the create next-app package and sets up the project with the necessary dependencies and configurations for using cxs.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cxs/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-cxs with-cxs-app
```

----------------------------------------

TITLE: Creating Next.js App with Cloudflare Turnstile Example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application based on the Cloudflare Turnstile example.  It initializes a project named "cloudflare-turnstile-app" using the specified example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cloudflare-turnstile cloudflare-turnstile-app
```

----------------------------------------

TITLE: Running Legacy Image Codemod in Next.js
DESCRIPTION: Command to run the next-image-to-legacy-image codemod which automatically converts next/image imports to next/legacy/image.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-upgrade-to-13.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx @next/codemod next-image-to-legacy-image .
```

----------------------------------------

TITLE: Route Announcer Implementation in Next.js
DESCRIPTION: Automatically announces page transitions for screen readers using document title, H1 element, or URL pathname
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/accessibility.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Route announcer checks:
// 1. document.title
// 2. <h1> element
// 3. URL pathname
```

----------------------------------------

TITLE: Configuring unstable_allowDynamic in Next.js Middleware
DESCRIPTION: This code snippet demonstrates how to configure the `unstable_allowDynamic` option in a Next.js middleware file.  This allows specific files or modules that contain dynamic code evaluation to be used in the Edge Runtime. It defines an array of glob patterns that match files or directories to be excluded from the dynamic code check. Requires a `middleware.ts` file in the project root.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/07-edge.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export const config = {
  unstable_allowDynamic: [
    // allows a single file
    '/lib/utilities.js',
    // use a glob to allow anything in the function-bind 3rd party module
    '**/node_modules/function-bind/**',
  ],
}
```

----------------------------------------

TITLE: Configuring SWR Fallback with SWRConfig in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure SWR's fallback data using the SWRConfig component in a Next.js application. The getUser() function, assumed to be a server-side function, is used to pre-populate the SWR cache with user data for the '/api/user' key. This allows client components to immediately access the data without an initial loading state.  The component reading this data will suspend.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { SWRConfig } from 'swr'
import { getUser } from './user' // some server-side function

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <SWRConfig
      value={{
        fallback: {
          // We do NOT await getUser() here
          // Only components that read this data will suspend
          '/api/user': getUser(),
        },
      }}
    >
      {children}
    </SWRConfig>
  )
}
```

----------------------------------------

TITLE: Installing Latest Sharp Version in Next.js Project
DESCRIPTION: This command updates the 'sharp' package to the latest version in your Next.js project, enabling AVIF support for image optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-version-avif.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm i sharp@latest
```

----------------------------------------

TITLE: Configuring Sass Options in Next.js with JavaScript
DESCRIPTION: This snippet demonstrates how to configure Sass options in a Next.js project using JavaScript. It sets up additional data and specifies the Sass implementation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/sassOptions.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */

const sassOptions = {
  additionalData: `
    $var: red;
  `,
}

const nextConfig = {
  sassOptions: {
    ...sassOptions,
    implementation: 'sass-embedded',
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Creating a Custom HTTP Server with Next.js in JavaScript
DESCRIPTION: This snippet shows the JavaScript version of creating a standard Node.js HTTP server integrated with a Next.js application instance. It initializes the Next.js app, waits for preparation, and then uses the Next.js request handler (`app.getRequestHandler()`) within the custom server's request listener to handle incoming HTTP requests after parsing the URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http';
import { parse } from 'url';
import next from 'next';

const port = parseInt(process.env.PORT || '3000', 10);
const dev = process.env.NODE_ENV !== 'production';
const app = next({ dev });
const handle = app.getRequestHandler();

app.prepare().then(() => {
  createServer((req, res) => {
    const parsedUrl = parse(req.url, true);
    handle(req, res, parsedUrl);
  }).listen(port);

  console.log(
    `> Server listening at http://localhost:${port} as ${
      dev ? 'development' : process.env.NODE_ENV
    }`
  );
});
```

----------------------------------------

TITLE: Creating custom OpenTelemetry span (TypeScript)
DESCRIPTION: Demonstrates how to create a custom span using the OpenTelemetry API. The `fetchGithubStars` function creates a span named 'fetchGithubStars' to track the execution of the `getValue` function.  The span is started and ended explicitly to capture the duration of the operation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
import { trace } from '@opentelemetry/api'

export async function fetchGithubStars() {
  return await trace
    .getTracer('nextjs-example')
    .startActiveSpan('fetchGithubStars', async (span) => {
      try {
        return await getValue()
      } finally {
        span.end()
      }
    })
}
```

----------------------------------------

TITLE: Next.js Build Output Example (Bash)
DESCRIPTION: This code snippet demonstrates the output from a `next build --debug` command. It shows how Next.js indicates whether a route is static (prerendered) or dynamic (server-rendered on demand) using the `○` and `ƒ` symbols, respectively. This output is helpful for troubleshooting why a route is marked as dynamic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/devIndicators.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
Route (app)                              Size     First Load JS
┌ ○ /_not-found                          0 B               0 kB
└ ƒ /products/[id]                       0 B               0 kB

○  (Static)   prerendered as static content
ƒ  (Dynamic)  server-rendered on demand
```

----------------------------------------

TITLE: Generating Types for Xata
DESCRIPTION: This command generates type definitions based on your Xata database schema, providing type safety for your Next.js application when interacting with Xata. Requires the Xata CLI to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_4

LANGUAGE: sh
CODE:
```
xata codegen
```

----------------------------------------

TITLE: Root Layout: Removing Link Tags (JSX)
DESCRIPTION: This code updates the root layout in Next.js (JSX) by removing `<link>` tags for favicon and other metadata files. Next.js automatically adds metadata files placed in the top level of the `app` directory to the application's `<head>`, so the corresponding `<link>` tags in `layout.js` can be removed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head>
        <title>My App</title>
        <meta name="description" content="My App is a..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Importing and Using Roboto Font with Weight Specification (_app.js - Pages Router)
DESCRIPTION: This code snippet demonstrates how to import the Roboto font from `next/font/google` and apply it to the `_app.js` file within the `/pages` directory in a Next.js application. It specifies the font weight since it's not a variable font. The font is applied to the main component, affecting all pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
})

export default function MyApp({ Component, pageProps }) {
  return (
    <main className={roboto.className}>
      <Component {...pageProps} />
    </main>
  )
}
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses `create-next-app` with pnpm to bootstrap a Next.js application using the `with-cypress` example.  It initializes a new project named `with-cypress-app` in the current directory. It requires pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cypress/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-cypress with-cypress-app
```

----------------------------------------

TITLE: Exporting Content Type Metadata for Generated Icon - JSX
DESCRIPTION: Shows the JavaScript (JSX) syntax for exporting the contentType string in a generated icon file (icon.js or apple-icon.js). This value is used by Next.js to set the type attribute in the corresponding HTML <link> tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_12

LANGUAGE: jsx
CODE:
```
export const contentType = 'image/png'

export default function Icon() {}
```

----------------------------------------

TITLE: Using XState Inspect in Next.js
DESCRIPTION: This code snippet shows how to use the `inspect` method from `@xstate/inspect` within a Next.js application. The `typeof window !== "undefined"` check ensures that the inspector code only runs on the client side, preventing server-side errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
if (typeof window !== "undefined") {
  inspect({
    /* options */
  });
}
```

----------------------------------------

TITLE: Fixing NODE_OPTIONS for Windows Debugging
DESCRIPTION: This snippet shows how to modify the `package.json` file and install `cross-env` to enable debugging on Windows. Windows does not support the `NODE_OPTIONS='--inspect'` syntax and `cross-env` will set the environment variable regardless of which platform you are on.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "scripts": {
    "dev": "cross-env NODE_OPTIONS='--inspect' next dev"
  }
}
```

----------------------------------------

TITLE: Passing -r esm Node.js Option to Next.js (Bash)
DESCRIPTION: This command demonstrates passing Node.js command-line options using the `NODE_OPTIONS` environment variable before a `next` command. This example uses `-r esm` to require the `esm` module, which might be necessary for certain configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_9

LANGUAGE: bash
CODE:
```
NODE_OPTIONS='-r esm' next
```

----------------------------------------

TITLE: Using Button Component in MDX
DESCRIPTION: Shows how to use the imported Button component within MDX content with children text.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/plugin-mdx-rs/pages/button.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
<Button>👋 Hello</Button>
```

----------------------------------------

TITLE: Creating Next.js App with react-multi-carousel Example (pnpm)
DESCRIPTION: This command leverages pnpm to generate a new Next.js application using the react-multi-carousel example. It initializes a project directory named 'with-react-multi-carousel-app' populated with the example's code and configuration. pnpm must be installed and configured for this command to execute successfully.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-multi-carousel/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-multi-carousel with-react-multi-carousel-app
```

----------------------------------------

TITLE: Creating Next.js app with React Hook Form Example (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application with the 'with-react-hook-form' example. It bootstraps the project with the necessary dependencies and configurations for integrating React Hook Form.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-hook-form/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-hook-form with-react-hook-form-app
```

----------------------------------------

TITLE: Creating Next.js app with GraphQL Hooks example (pnpm)
DESCRIPTION: This command utilizes `create next-app` with pnpm to bootstrap a new Next.js application using the `with-graphql-hooks` example. It installs the necessary dependencies and sets up the project structure for working with GraphQL Hooks.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-hooks/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-graphql-hooks with-graphql-hooks-app
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with Yarn
DESCRIPTION: This command uses `create-next-app` to generate a new Next.js project with the `with-axiom` example. It initializes the project using Yarn. The resulting project is named `with-axiom-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-axiom/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-axiom with-axiom-app
```

----------------------------------------

TITLE: Create Next App with styled-components using pnpm
DESCRIPTION: This command initializes a new Next.js application using the with-styled-components example. It uses pnpm to execute create next-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-components/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-styled-components with-styled-components-app
```

----------------------------------------

TITLE: Creating a Next.js App using pnpm
DESCRIPTION: This command utilizes pnpm's create next-app to scaffold a new Next.js project with the 'with-passport' example. It creates a directory named 'with-passport-app' containing the boilerplate code for the authentication example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-passport with-passport-app
```

----------------------------------------

TITLE: Creating Next.js app with Kea example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the 'with-kea' example. It requires Node.js and pnpm to be installed. The new application will be created in a directory named 'with-kea-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-kea/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-kea with-kea-app
```

----------------------------------------

TITLE: Configuring Azure Pipelines Cache for Next.js Builds
DESCRIPTION: This YAML configuration for Azure Pipelines uses the Cache task to cache the Next.js cache directory. It should be added prior to the task that executes next build.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_7

LANGUAGE: yaml
CODE:
```
- task: Cache@2
  displayName: 'Cache .next/cache'
  inputs:
    key: next | $(Agent.OS) | yarn.lock
    path: '$(System.DefaultWorkingDirectory)/.next/cache'
```

----------------------------------------

TITLE: Creating Next.js app with Salesforce Commerce Cloud template using Yarn
DESCRIPTION: Command to bootstrap a Next.js application with Salesforce Commerce Cloud integration using Yarn create next-app with the with-sfcc example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sfcc/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-sfcc nextjs-sfcc-app
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command uses `create next-app` with Yarn to bootstrap a Next.js application using the `with-linaria` example. The new application will be named `with-linaria-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-linaria/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-linaria with-linaria-app
```

----------------------------------------

TITLE: Creating Next.js App with Framer Motion Example (Yarn)
DESCRIPTION: This command utilizes `create-next-app` to generate a new Next.js application with the Framer Motion example. It employs Yarn as the package manager for the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-framer-motion/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-framer-motion with-framer-motion-app
```

----------------------------------------

TITLE: Setting VAPID keys in .env file
DESCRIPTION: This shows how to set the VAPID public and private keys in the .env file, which will then be available via `process.env`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_12

LANGUAGE: env
CODE:
```
NEXT_PUBLIC_VAPID_PUBLIC_KEY=your_public_key_here
VAPID_PRIVATE_KEY=your_private_key_here
```

----------------------------------------

TITLE: Creating Next.js app with urql example (pnpm)
DESCRIPTION: This command utilizes pnpm to create a new Next.js application named 'with-urql-app' based on the 'with-urql' example.  The create-next-app package is used to initialize the project structure and install dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-urql/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-urql with-urql-app
```

----------------------------------------

TITLE: Creating a Next.js App with Firebase Example (Yarn)
DESCRIPTION: This command initializes a new Next.js application named `with-firebase-app` using the `with-firebase` example. It leverages the `create next-app` tool with the Yarn package manager. This command assumes Yarn is installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-firebase with-firebase-app
```

----------------------------------------

TITLE: Creating Next.js App with next-sitemap example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-next-sitemap example. It automates the setup process, including installing necessary dependencies and configuring the project structure. The target directory is specified as with-next-sitemap-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-sitemap/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-next-sitemap with-next-sitemap-app
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the active-class-name example. It initializes the project in a directory named active-class-name-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/active-class-name/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example active-class-name active-class-name-app
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the 'with-youtube-embed' example. It utilizes the create-next-app command to set up the project. The resulting application will be named 'with-youtube-embed-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-youtube-embed/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-youtube-embed with-youtube-embed-app
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the specified example. It clones the 'api-routes-apollo-server-and-client-auth' example into a directory named 'api-routes-apollo-server-and-client-auth-app'. It requires Yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client-auth/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app
```

----------------------------------------

TITLE: Initializing Next.js DynamicIO in TypeScript
DESCRIPTION: Configures Next.js to enable the dynamicIO feature necessary for using the cacheTag function. This configuration is required to use caching features in a Next.js application. It is defined in the next.config.ts file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Creating Next.js app with NextUI using pnpm
DESCRIPTION: This command uses the pnpm package manager to create a new Next.js application pre-configured to use NextUI. It utilizes the `create-next-app` tool with the `with-next-ui` example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-ui/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-next-ui with-next-ui-app
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command employs pnpm to generate a new Next.js app utilizing the 'with-prefetching' example. The resulting project will be located in the 'with-prefetching-app' directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-prefetching/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-prefetching with-prefetching-app
```

----------------------------------------

TITLE: Implementing Default Auth Slot Behavior
DESCRIPTION: Creates a default component for the auth slot that returns null, ensuring the modal is not rendered when inactive
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/11-parallel-routes.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
export default function Default() {
  return null
}
```

LANGUAGE: jsx
CODE:
```
export default function Default() {
  return null
}
```

----------------------------------------

TITLE: Disabling ESLint During Production Builds (js)
DESCRIPTION: This snippet demonstrates how to disable ESLint during production builds by setting `eslint.ignoreDuringBuilds` to `true` in `next.config.js`. This configuration allows production builds to complete even if there are ESLint errors. This is a JavaScript version of the previous snippet, suitable for non-TypeScript projects.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_11

LANGUAGE: js
CODE:
```
const nextConfig = {
  eslint: {
    // Warning: This allows production builds to successfully complete even if
    // your project has ESLint errors.
    ignoreDuringBuilds: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Creating Next.js App with Webiny Example (pnpm)
DESCRIPTION: These commands are used to bootstrap a new Next.js application using the `cms-webiny` example. They use `create-next-app` with npm, yarn, and pnpm package managers. This will create a new project directory named `cms-webiny-app` with the specified template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-webiny cms-webiny-app
```

----------------------------------------

TITLE: Creating Next.js MDX app with npx
DESCRIPTION: This command utilizes npx to create a new Next.js application named 'mdx-app' configured with MDX support. It fetches the MDX example template during the creation process. The command requires npx to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example mdx mdx-app
```

----------------------------------------

TITLE: Using shallow prop with Link (Pages Router)
DESCRIPTION: This snippet shows the use of the `shallow` prop on a Next.js Link component in the Pages Router. When `shallow` is `true`, navigation updates the URL path without rerunning data fetching methods like `getStaticProps` or `getServerSideProps`. The example explicitly sets it to `false`, which is the default behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/dashboard" shallow={false}>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/dashboard" shallow={false}>
      Dashboard
    </Link>
  )
}
```

----------------------------------------

TITLE: Setting Userbase App ID Environment Variable
DESCRIPTION: This command sets the `NEXT_PUBLIC_USERBASE_APP_ID` environment variable in the `.env.local` file.  This variable stores the unique identifier for the Userbase application, which is essential for authenticating the Next.js application with Userbase.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_USERBASE_APP_ID=...
```

----------------------------------------

TITLE: Output HTML with Exported Size - HTML
DESCRIPTION: Displays the resulting HTML <link> tag in the document's <head> when the size metadata is exported from a generated icon file. The sizes attribute is populated based on the exported value.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_10

LANGUAGE: html
CODE:
```
<link rel="icon" sizes="32x32" />
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command bootstraps a new Next.js application using create-next-app with the `with-next-seo` example. It utilizes pnpm as the package manager, creating a project named `next-seo-app`. pnpm is a package manager that can be used as an alternative to npm and yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-seo/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-next-seo next-seo-app
```

----------------------------------------

TITLE: Creating Next.js App with next-sitemap example (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-next-sitemap example. It automates the setup process, including installing necessary dependencies and configuring the project structure. The target directory is specified as with-next-sitemap-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-sitemap/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-next-sitemap with-next-sitemap-app
```

----------------------------------------

TITLE: Configuring Turbopack in JavaScript
DESCRIPTION: Example of basic Turbopack configuration in a Next.js JavaScript configuration file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  turbopack: {
    // ...
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Running Next.js Build Commands
DESCRIPTION: Commands needed to properly build and export a Next.js application. A production build must be created with 'next build' before running 'next export', or use 'next dev' for development server.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-export-no-build-id.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
next export
```

LANGUAGE: bash
CODE:
```
next build
```

LANGUAGE: bash
CODE:
```
next dev
```

----------------------------------------

TITLE: Installing Next.js with Supabase Starter Template using Yarn
DESCRIPTION: Command to create a new Next.js application using the Supabase Starter template with Yarn. Creates a project with pre-configured Supabase authentication and integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-supabase with-supabase-app
```

----------------------------------------

TITLE: Handling Used Rewrite Parameters in Next.js (JavaScript)
DESCRIPTION: This snippet shows that when parameters from the `source` path are used in the `destination` path, Next.js does not automatically pass *any* parameters to the query string. The example demonstrates mapping `/docs/:path*` to `/:path*`, where `:path*` is explicitly included in the destination.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/docs/:path*',
        destination: '/:path*', // The :path parameter is used here so will not be automatically passed in the query
      },
    ]
  },
}
```

----------------------------------------

TITLE: Creating Next.js app with particles example (Yarn)
DESCRIPTION: This command utilizes Yarn to create a new Next.js application using the 'with-particles' example. It initializes a project named 'with-particles-app' with the pre-configured particle animation setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-particles/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-particles with-particles-app
```

----------------------------------------

TITLE: Initializing Next.js project with create-next-app (pnpm)
DESCRIPTION: This command initializes a new Next.js project using the `create-next-app` tool and the `with-mobx-state-tree` example. It uses pnpm to create a project named `with-mobx-state-tree-app` based on the provided example repository. This command sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx-state-tree/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mobx-state-tree with-mobx-state-tree-app
```

----------------------------------------

TITLE: Creating a Next.js App with Cosmic Example
DESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js application using the `cms-cosmic` example.  The commands are shown for npm, yarn, and pnpm. Choose the package manager you prefer.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-cosmic cms-cosmic-app
```

----------------------------------------

TITLE: Subscribing to Presence Events with usePresence
DESCRIPTION: This code demonstrates how to use the usePresence hook to subscribe to presence events on an Ably channel.  It displays a list of clients currently present on the channel, updating the UI when presence changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import { useState } from "react";
import { usePresence } from "@ably-labs/react-hooks";

export default function Home() {
  const [presenceData, updateStatus] = usePresence("your-channel-name");

  const presentClients = presenceData.map((msg, index) => (
    <li key={index}>
      {msg.clientId}: {msg.data}
    </li>
  ));

  return <ul>{presentClients}</ul>;
}
```

----------------------------------------

TITLE: Corrected PostCSS Configuration (missing config)
DESCRIPTION: This snippet shows the corrected version of the previous incorrect PostCSS configuration. The nested array is removed, so the plugin is configured correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins: [
    [
      'postcss-plugin-1',
      {
        optionA: '...',
      },
    ],
    // Only string:
    'postcss-plugin-2',
  ],
}
```

----------------------------------------

TITLE: Installing TypeScript Dependency (npm)
DESCRIPTION: This command installs TypeScript as a development dependency using npm.  It is essential for adding TypeScript support to a project.  The `--save-dev` flag ensures it's added to `devDependencies` in `package.json`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
npm install --save-dev typescript
```

----------------------------------------

TITLE: Setting up SuperTokens with Next.js using create-supertokens-app (PNPM)
DESCRIPTION: Command to create a Next.js application with SuperTokens authentication using the official SuperTokens CLI tool with PNPM, allowing further customization during setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
pnpm create-supertokens-app@latest --frontend=next
```

----------------------------------------

TITLE: Creating a new Next.js app with TypeScript and GraphQL
DESCRIPTION: This code snippet shows how to create a new Next.js application using `create-next-app` with the `with-typescript-graphql` example. It shows the usage with npm, yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-typescript-graphql with-typescript-graphql-app
```

----------------------------------------

TITLE: Create Next.js App with Ably Example (pnpm)
DESCRIPTION: This command uses the create-next-app tool with pnpm to bootstrap a new Next.js application using the 'with-ably' example.  It sets up a basic project structure with Ably integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-ably with-ably-app
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters in Generated Image - JSX
DESCRIPTION: Demonstrates how the default export function in a generated image file (like opengraph-image.js or twitter-image.js) receives a `params` prop. This prop contains the dynamic route parameters, allowing the image content to be customized based on the specific route being accessed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_10

LANGUAGE: JSX
CODE:
```
export default function Image({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Using next/script in _app.js
DESCRIPTION: This code snippet demonstrates how to use the `next/script` component within the `pages/_app.js` file to include a global script in a Next.js application. It imports the `Script` component from `next/script` and renders it within the `MyApp` component. The `src` prop specifies the path to the script file.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-script-in-document.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

function MyApp({ Component, pageProps }) {
  return (
    <>
      <Script src="/my-script.js" />
      <Component {...pageProps} />
    </>
  )
}

export default MyApp
```

----------------------------------------

TITLE: Check and Display Draft Mode Status in Next.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to check and display the current Draft Mode status within a Next.js Server Component using JavaScript. It retrieves the status using `draftMode()` and renders a paragraph indicating whether Draft Mode is currently enabled or disabled.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import { draftMode } from 'next/headers'

export default async function Page() {
  const { isEnabled } = await draftMode()
  return (
    <main>
      <h1>My Blog Post</h1>
      <p>Draft Mode is currently {isEnabled ? 'Enabled' : 'Disabled'}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Correct Token Caching Implementation in Next.js
DESCRIPTION: Improved implementation where random UUID generation is moved inside the cached function scope.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
async function getCachedDate(token: string) {
  "use cache"
  const token = crypto.getRandomUUID()
  return db.query(token, ...)
}

export default async function Page() {
  const data = await getCachedData();
  return ...
}
```

----------------------------------------

TITLE: Creating Next.js App with Paste and TypeScript using pnpm
DESCRIPTION: This command employs pnpm to generate a new Next.js application based on the 'with-paste-typescript' example.  The project will be pre-configured with Paste components and TypeScript support. The new application's directory will be 'with-paste-typescript-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-paste-typescript/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-paste-typescript with-paste-typescript-app
```

----------------------------------------

TITLE: Initializing OpenTelemetry NodeSDK (TypeScript)
DESCRIPTION: Initializes the OpenTelemetry `NodeSDK` in `instrumentation.node.ts`. This code configures the SDK with a resource containing the service name ('next-app') and a simple span processor that exports traces using OTLP over HTTP. The SDK is then started to begin collecting telemetry data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'
import { Resource } from '@opentelemetry/resources'
import { NodeSDK } from '@opentelemetry/sdk-node'
import { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions'

const sdk = new NodeSDK({
  resource: new Resource({
    [ATTR_SERVICE_NAME]: 'next-app',
  }),
  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),
})
sdk.start()
```

----------------------------------------

TITLE: Setting dynamic config to error in JSX
DESCRIPTION: This code snippet shows how to configure the `dynamic` option to `error` in a JSX file, which causes an error when attempting to use unsupported features in `next dev` within the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_14

LANGUAGE: jsx
CODE:
```
export const dynamic = 'error'
```

----------------------------------------

TITLE: Initializing Analytics with Instrumentation Client (JS)
DESCRIPTION: This code snippet demonstrates how to initialize analytics and set up global error tracking using the `instrumentation-client.js` file in a Next.js application. It logs a message to the console and adds an error listener to the window object to report errors to an external service.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
// Initialize analytics before the app starts
console.log('Analytics initialized')

// Set up global error tracking
window.addEventListener('error', (event) => {
  // Send to your error tracking service
  reportError(event.error)
})
```

----------------------------------------

TITLE: Configuring htmlLimitedBots in Next.js with TypeScript
DESCRIPTION: TypeScript example showing how to configure the htmlLimitedBots option in next.config.ts to specify a list of user agents that should receive blocking metadata. The example demonstrates setting a pipe-separated list of bot names.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/htmlLimitedBots.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const config: NextConfig = {
  htmlLimitedBots: 'MySpecialBot|MyAnotherSpecialBot|SimpleCrawler',
}

export default config
```

----------------------------------------

TITLE: Creating Next.js app with urql example (yarn)
DESCRIPTION: This command uses yarn to create a new Next.js application named 'with-urql-app' based on the 'with-urql' example. It uses the create next-app package to generate the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-urql/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-urql with-urql-app
```

----------------------------------------

TITLE: Force SWC Transforms in Next.js
DESCRIPTION: This code snippet demonstrates how to force Next.js to use SWC for compiling JavaScript/TypeScript, even when a `.babelrc` file is present.  This is achieved by setting the `forceSwcTransforms` option to `true` within the `experimental` section of the `next.config.js` file.  This can potentially improve build performance by leveraging SWC's speed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/swc-disabled.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  experimental: {
    forceSwcTransforms: true,
  },
}
```

----------------------------------------

TITLE: Next.js Page with Server-Side Code
DESCRIPTION: This Next.js page utilizes server-side code (fs import) within the `getStaticProps` function.  Re-exporting this page's exports directly into another page can lead to the 'Module not found' error in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import fs from 'fs'

export default function A() {
  return <main />
}

export function getStaticProps() {
  fs
  return { props: {} }
}
```

----------------------------------------

TITLE: Configuring App Links Metadata in Next.js (JSX & HTML)
DESCRIPTION: Configures App Links metadata using the `metadata.appLinks` property to facilitate deep linking from social media and other platforms directly into your native mobile application (iOS/Android) or a web fallback. It generates `<meta property="al:">` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_23

LANGUAGE: JSX
CODE:
```
export const metadata = {
  appLinks: {
    ios: {
      url: 'https://nextjs.org/ios',
      app_store_id: 'app_store_id',
    },
    android: {
      package: 'com.example.android/package',
      app_name: 'app_name_android',
    },
    web: {
      url: 'https://nextjs.org/web',
      should_fallback: true,
    },
  },
}
```

LANGUAGE: HTML
CODE:
```
<meta property="al:ios:url" content="https://nextjs.org/ios" />
<meta property="al:ios:app_store_id" content="app_store_id" />
<meta property="al:android:package" content="com.example.android/package" />
<meta property="al:android:app_name" content="app_name_android" />
<meta property="al:web:url" content="https://nextjs.org/web" />
<meta property="al:web:should_fallback" content="true" />
```

----------------------------------------

TITLE: Generating Viewport in TypeScript
DESCRIPTION: This code snippet demonstrates how to define a generateViewport function in TypeScript, which returns a Viewport object. The function accepts an object containing route parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export function generateViewport({ params }) {
  return {
    themeColor: '...',
  }
}
```

----------------------------------------

TITLE: Installing Sass Dependency using npm | bash
DESCRIPTION: Installs the `sass` package as a development dependency using npm. This is the required first step to enable Sass support in a Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/sass.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev sass
```

----------------------------------------

TITLE: Install @next/bundle-analyzer
DESCRIPTION: Installs the @next/bundle-analyzer plugin, which helps visualize and manage the size of application bundles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm i @next/bundle-analyzer
# or
yarn add @next/bundle-analyzer
# or
pnpm add @next/bundle-analyzer
```

----------------------------------------

TITLE: Define Custom Document Component (Pages Router)
DESCRIPTION: Creates a custom `_document` component (`pages/_document.tsx` or `pages/_document.js`) in the `pages` directory. This file is used by the Pages Router to augment the application's `<html>` and `<body>` tags on the server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html>
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html>
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
```

----------------------------------------

TITLE: Creating Next.js App with Radix UI using npx
DESCRIPTION: This command creates a new Next.js application using the radix-ui example template. It utilizes npx to execute create-next-app with the specified example and project name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/radix-ui/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example radix-ui radix-ui-app
```

----------------------------------------

TITLE: Loading Env Vars Programmatically with next/env (Next.js)
DESCRIPTION: Use the `loadEnvConfig` function from `@next/env` to load environment variables from `.env` files in scripts or config files outside the main Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import { loadEnvConfig } from '@next/env'

const projectDir = process.cwd()
loadEnvConfig(projectDir)
```

LANGUAGE: javascript
CODE:
```
import { loadEnvConfig } from '@next/env'

const projectDir = process.cwd()
loadEnvConfig(projectDir)
```

----------------------------------------

TITLE: Creating a Next.js App with Firebase Example (npm)
DESCRIPTION: This command initializes a new Next.js application named `with-firebase-app` using the `with-firebase` example. It leverages the `create-next-app` tool with the npm package manager. This is a client-side Firebase setup using React Context API.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-firebase with-firebase-app
```

----------------------------------------

TITLE: Creating Next.js app with next-translate using yarn
DESCRIPTION: This command utilizes yarn to generate a new Next.js application, incorporating the next-translate example. It sets up the project using the defined example and assigns a name to the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-translate/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-next-translate with-next-translate-app
```

----------------------------------------

TITLE: Creating Next.js app with styled-jsx using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application using the styled-jsx example. The command utilizes the create-next-app tool, initializing a project with the necessary dependencies and configurations for styled-jsx. The created application is named 'with-styled-jsx-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-jsx/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-styled-jsx with-styled-jsx-app
```

----------------------------------------

TITLE: Creating Next.js app using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the Zustand example. It initializes a project named `with-zustand-app` based on the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zustand/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-zustand with-zustand-app
```

----------------------------------------

TITLE: Generating robots.txt with custom user agents (TypeScript)
DESCRIPTION: Illustrates how to generate `robots.txt` with rules customized for specific search engine bots using an array of rule objects within the `rules` property. It sets different allow/disallow paths for 'Googlebot' and a shared rule for 'Applebot' and 'Bingbot'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
import type { MetadataRoute } from 'next'

export default function robots(): MetadataRoute.Robots {
  return {
    rules: [
      {
        userAgent: 'Googlebot',
        allow: ['/'],
        disallow: '/private/',
      },
      {
        userAgent: ['Applebot', 'Bingbot'],
        disallow: ['/'],
      },
    ],
    sitemap: 'https://acme.com/sitemap.xml',
  }
}
```

----------------------------------------

TITLE: Executing add-missing-react-import Codemod in Next.js
DESCRIPTION: This codemod transforms files that do not import React to include the import, enabling the new React JSX transform to work. It adds the necessary React import to components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
npx @next/codemod add-missing-react-import
```

----------------------------------------

TITLE: Creating Next.js app with auth example using Yarn
DESCRIPTION: This command uses `create next-app` with Yarn to create a new Next.js application named `auth-app` based on the `auth` example.  It assumes that Yarn is installed globally.  The command initializes a Next.js project configured for authentication.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example auth auth-app
```

----------------------------------------

TITLE: Alternative Next.js Middleware URL Construction
DESCRIPTION: Shows an alternative approach using URL constructor with the original request URL as base. Note that this method doesn't account for Next.js configuration like basePath or locale settings.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-relative-urls.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  return NextResponse.rewrite(new URL('/dest', request.url))
}
```

----------------------------------------

TITLE: Creating Next.js App with WebWorker Example (Yarn)
DESCRIPTION: This command initializes a new Next.js application using the 'with-web-worker' example. It uses Yarn to execute the create next-app command and sets up a project named 'with-web-worker-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-web-worker/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-web-worker with-web-worker-app
```

----------------------------------------

TITLE: Creating a Service Worker for Push Notifications
DESCRIPTION: This JavaScript code defines a service worker that listens for 'push' events and displays a notification. It also listens for 'notificationclick' events and opens a new window.  The URL in `clients.openWindow` should be replaced with your application's URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_13

LANGUAGE: js
CODE:
```
self.addEventListener('push', function (event) {
  if (event.data) {
    const data = event.data.json()
    const options = {
      body: data.body,
      icon: data.icon || '/icon.png',
      badge: '/badge.png',
      vibrate: [100, 50, 100],
      data: {
        dateOfArrival: Date.now(),
        primaryKey: '2',
      },
    }
    event.waitUntil(self.registration.showNotification(data.title, options))
  }
})

self.addEventListener('notificationclick', function (event) {
  console.log('Notification click received.')
  event.notification.close()
  event.waitUntil(clients.openWindow('<https://your-website.com>'))
})

```

----------------------------------------

TITLE: Using next-rspack with next-compose-plugins
DESCRIPTION: This snippet demonstrates how to use next-compose-plugins to integrate next-rspack alongside other plugins in a Next.js project. It showcases the modularity and ease of configuration when combining multiple plugins.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-rspack/README.md#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
const withPlugins = require('next-compose-plugins')
const withRspack = require('next-rspack')

module.exports = withPlugins([
  [withRspack],
  // your other plugins here
])
```

----------------------------------------

TITLE: Initializing Next.js project with create-next-app (npm)
DESCRIPTION: This command initializes a new Next.js project using the `create-next-app` tool and the `with-mobx-state-tree` example. It uses npm to create a project named `with-mobx-state-tree-app` based on the provided example repository. This command sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx-state-tree/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mobx-state-tree with-mobx-state-tree-app
```

----------------------------------------

TITLE: Building and Starting Staging Environment
DESCRIPTION: This snippet details the commands for building and starting the application in a staging environment suitable for user acceptance testing (UAT). It uses the Makefile for execution and the application runs on a designated localhost port.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
make build-staging
```

LANGUAGE: bash
CODE:
```
make start-staging
```

----------------------------------------

TITLE: Defining and Exporting Sass Variable | SCSS Module
DESCRIPTION: Defines a Sass variable (`$primary-color`) and exports it using `:export` within a CSS Module file (`.module.scss`). This makes the variable's value accessible in JavaScript/TypeScript code for use in components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/sass.mdx#_snippet_3

LANGUAGE: scss
CODE:
```
$primary-color: #64ff00;

:export {
  primaryColor: $primary-color;
}
```

----------------------------------------

TITLE: Importing Button Component in Next.js
DESCRIPTION: This snippet imports a button component from a relative path and uses it within a Next.js page. It demonstrates the use of MDX to render JSX components seamlessly in a markdown-like syntax. The button simply displays the text 'Hello' with an emoji.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/pages/index.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import Button from \"../components/button.js\";
```

----------------------------------------

TITLE: Configuring Travis CI Cache for Next.js Builds
DESCRIPTION: This YAML configuration for Travis CI specifies directories to be cached, including the Yarn cache, node_modules, and the Next.js cache directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
cache:
  directories:
    - $HOME/.cache/yarn
    - node_modules
    - .next/cache
```

----------------------------------------

TITLE: Setting Cookies in API Route - TypeScript
DESCRIPTION: This code snippet demonstrates how to set a cookie in a Next.js API route using TypeScript. It uses the setHeader method on the response object to set the Set-Cookie header.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_12

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')
  res.status(200).send('Cookie has been set.')
}
```

----------------------------------------

TITLE: Configuring React Headers Length in next.config.js
DESCRIPTION: Configuration snippet showing how to set the maximum length for React-emitted headers in Next.js. This setting helps control header size when dealing with preloaded resources like fonts, scripts, and stylesheets. Default value is 6000.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactMaxHeadersLength.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  reactMaxHeadersLength: 1000,
}
```

----------------------------------------

TITLE: Initializing Next.js project with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application using the with-route-as-modal example. It sets up a new project named 'with-route-as-modal-app' by cloning the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-route-as-modal/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-route-as-modal with-route-as-modal-app
```

----------------------------------------

TITLE: Implementing getStaticProps in Next.js with TypeScript
DESCRIPTION: This code snippet demonstrates the correct structure for the return value of the `getStaticProps` function in a Next.js page component.  It ensures that the function returns an object with a `props` property, which itself is an object containing the data to be passed as props to the page. The context object `ctx` provides information about the current request, such as parameters and preview mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-getstaticprops-value.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export async function getStaticProps(ctx: {
    params?: ParsedUrlQuery;
    preview?: boolean;
    previewData?: PreviewData;
}) {
    return {
        props: { [key: string]: any }
    }
}
```

----------------------------------------

TITLE: Adding Client Component Directive to React Class Component in Next.js
DESCRIPTION: This snippet demonstrates how to modify a React Class Component to be used as a Client Component by adding the directive `'use client'`. This allows the usage of lifecycle methods and state management within Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/class-component-in-server-component.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
```jsx filename="app/page.js"
'use client'

export default class Page extends React.Component {
  render() {
    return <p>Hello world</p>
  }
}
```
```

----------------------------------------

TITLE: Creating Next.js App with Google Analytics using pnpm
DESCRIPTION: This command creates a new Next.js application with the Google Analytics example using pnpm. It initializes a new project named 'with-google-analytics-app' using the specified example from the Next.js repository. Requires pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-google-analytics with-google-analytics-app
```

----------------------------------------

TITLE: Upgrading Next.js to Version 13 with pnpm
DESCRIPTION: Command to upgrade Next.js to version 13 using pnpm package manager. Also updates React and React DOM to their latest versions, along with the Next.js ESLint configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm i next@13 react@latest react-dom@latest eslint-config-next@13
```

----------------------------------------

TITLE: Using getStaticProps with Preview Mode - JavaScript
DESCRIPTION: This code snippet demonstrates how to use `getStaticProps` in Next.js to enable preview mode. It accesses the `context.preview` boolean and `context.previewData` to determine whether to fetch draft content. No dependencies are required beyond Next.js itself. It shows an empty function for demonstration; the implementation depends on the specific data fetching logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
export async function getStaticProps(context) {
  // If you request this page with the preview mode cookies set:
  //
  // - context.preview will be true
  // - context.previewData will be the same as
  //   the argument used for `setPreviewData`.
}
```

----------------------------------------

TITLE: Removing node-sass with Yarn
DESCRIPTION: This code snippet illustrates how to remove the 'node-sass' package from your project dependencies using Yarn. It aims to ensure that only the 'sass' package remains, which is the current standard.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/duplicate-sass.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn remove node-sass
```

----------------------------------------

TITLE: Creating Next.js app with Ionic example using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the 'with-ionic' example. It scaffolds a project named 'with-ionic-app' in the current directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ionic/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-ionic with-ionic-app
```

----------------------------------------

TITLE: Configuring Dynamic Route Fallback in Pages Router (JSX)
DESCRIPTION: Shows how to use the `fallback` property returned by `getStaticPaths` in the `pages` directory. Setting `fallback: 'blocking'` means paths not explicitly listed will be server-rendered on the first request and then cached.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_24

LANGUAGE: jsx
CODE:
```
// `pages` directory

export async function getStaticPaths() {
  return {
    paths: [],
    fallback: 'blocking'
  };
}

export async function getStaticProps({ params }) {
  ...
}

export default function Post({ post }) {
  return ...
}
```

----------------------------------------

TITLE: Linking and Pulling Environment Variables with Vercel
DESCRIPTION: This snippet links your local project to Vercel and pulls environment variables from the Vercel project. Requires npx and an existing Vercel deployment. Input involves executing the commands, producing a local environment setup synchronized with the Vercel deployment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx vercel link
npx vercel env pull
```

----------------------------------------

TITLE: Configuring Next.js with Custom Routes
DESCRIPTION: Example configuration showing incompatible settings between custom routes and static exports in next.config.js. These configurations cannot be used together as they serve different deployment strategies.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-no-custom-routes.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// next.config.js
{
  output: 'export',  // This conflicts with custom routes
  rewrites: async () => [...],  // Cannot be used with static export
  redirects: async () => [...], // Cannot be used with static export
  headers: async () => [...]    // Cannot be used with static export
}
```

----------------------------------------

TITLE: Installing Dependencies (pnpm)
DESCRIPTION: These commands install the project dependencies using pnpm and then start the development server.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Handling Client-Side Navigation with onNavigate (App Router)
DESCRIPTION: This snippet shows how to use the `onNavigate` prop on a Next.js Link component in the App Router. This event handler is triggered only during client-side SPA navigation and receives an event object with a `preventDefault()` method, allowing custom logic or cancellation of the navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link
      href="/dashboard"
      onNavigate={(e) => {
        // Only executes during SPA navigation
        console.log('Navigating...')

        // Optionally prevent navigation
        // e.preventDefault()
      }}
    >
      Dashboard
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <Link
      href="/dashboard"
      onNavigate={(e) => {
        // Only executes during SPA navigation
        console.log('Navigating...')

        // Optionally prevent navigation
        // e.preventDefault()
      }}
    >
      Dashboard
    </Link>
  )
}
```

----------------------------------------

TITLE: Conflicting Folder Structure - Bash
DESCRIPTION: Example illustrating a directory structure where a public file (`public/hello`) conflicts with a page file (`pages/hello.js`) due to having the same base path, which is not allowed in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-public-file-page.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
public/
  hello
pages/
  hello.js
```

----------------------------------------

TITLE: Disable Webpack Cache in Next.js Configuration
DESCRIPTION: This snippet shows how to disable the Webpack cache in your Next.js application. By modifying the Webpack configuration within your `next.config.mjs` file, you can set the cache type to 'memory' to reduce disk usage.  The example explicitly sets `config.cache` to an empty object effectively disabling it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  webpack: (
    config,
    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }
  ) => {
    if (config.cache && !dev) {
      config.cache = Object.freeze({
        type: 'memory',
      })
    }
    // Important: return the modified config
    return config
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Configuring npm Scripts to Run Custom Server in package.json
DESCRIPTION: This JSON snippet modifies the `scripts` section in `package.json` to launch the custom server file (`server.js`) for both development (`dev`) and production (`start`) environments. It ensures that the Next.js build process (`build`) remains separate but the serving is handled by the custom server script.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "node server.js",
    "build": "next build",
    "start": "NODE_ENV=production node server.js"
  }
}
```

----------------------------------------

TITLE: Replacing Page Match Data with URLPattern in Next.js Middleware
DESCRIPTION: Migration from using the internal Next.js page matching mechanism to the web standard URLPattern API. This change provides more accurate page and asset matching capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest, NextFetchEvent } from 'next/server'

export function middleware(request: NextRequest, event: NextFetchEvent) {
  const { params } = event.request.page
  const { locale, slug } = params

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}
```

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

const PATTERNS = [
  [
    new URLPattern({ pathname: '/:locale/:slug' }),
    ({ pathname }) => pathname.groups,
  ],
]

const params = (url) => {
  const input = url.split('?')[0]
  let result = {}

  for (const [pattern, handler] of PATTERNS) {
    const patternResult = pattern.exec(input)
    if (patternResult !== null && 'pathname' in patternResult) {
      result = handler(patternResult)
      break
    }
  }
  return result
}

export function middleware(request: NextRequest) {
  const { locale, slug } = params(request.url)

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}
```

----------------------------------------

TITLE: Using Button Component
DESCRIPTION: This snippet shows the use of the previously imported Button component. It is utilized within MDX, allowing JSX components to be embedded with markdown content. The button rendered shows a greeting with a waving hand emoji.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/pages/index.mdx#2025-04-21_snippet_1

LANGUAGE: MDX
CODE:
```
\n# MDX + Next.js\n\nLook, a button! 👇\n\n<Button>👋 Hello</Button>\n
```

----------------------------------------

TITLE: Incorrect Link Component Usage in Next.js
DESCRIPTION: Example showing incorrect usage of Next.js Link component where no children are passed, which leads to an error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-no-children.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <>
      <Link href="/about" legacyBehavior></Link>
      // or
      <Link href="/about" legacyBehavior />
    </>
  )
}
```

----------------------------------------

TITLE: Running Next.js with Turbopack
DESCRIPTION: This bash command starts the Next.js development server using Turbopack for faster local development. Turbopack is a bundler that can be used instead of Webpack.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_28

LANGUAGE: bash
CODE:
```
next dev --turbopack
```

----------------------------------------

TITLE: Run Next.js App in Development Mode
DESCRIPTION: Starts the Next.js application in development mode.  The available package managers are npm, yarn, and pnpm. The application will be accessible at localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Running Next.js in Development Mode (pnpm)
DESCRIPTION: These commands install the necessary dependencies and start the Next.js application in development mode using pnpm. `pnpm install` installs dependencies and `pnpm dev` starts the development server, typically on port 3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Creating Next.js App with Vitest using Yarn
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Vitest integration using Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-vitest with-vitest-app
```

----------------------------------------

TITLE: Copying environment file
DESCRIPTION: This command copies the example environment file `.env.local.example` to `.env.local`.  This allows users to configure the application with their specific API keys and settings.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: App Directory MDX Components Configuration
DESCRIPTION: MDX components configuration file for customizing and extending MDX components in the app directory
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
// mdx-components.js
export function useMDXComponents(components) {
  return components
  // Allows customizing built-in components, e.g. to add styling.
  // return {
  //   h1: ({ children }) => <h1 style={{ fontSize: "100px" }}>{children}</h1>,
  //   ...components,
  // }
}
```

----------------------------------------

TITLE: Copying .env.local.example to .env.local (Bash)
DESCRIPTION: This command copies the example environment file to a local environment file. This allows you to configure your project without affecting the original example file.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Creating a Next.js app with Turbopack loaders example using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the 'with-turbopack-loaders' example.  It sets up a new project with the necessary configurations for using Turbopack loaders.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-turbopack-loaders with-turbopack-loaders-app
```

----------------------------------------

TITLE: Initializing Next.js App with npm
DESCRIPTION: This command uses `create-next-app` via `npx` to create a new Next.js application based on the `blog-starter` example.  It downloads the specified example and creates a new project named `blog-starter-app` in the current directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example blog-starter blog-starter-app
```

----------------------------------------

TITLE: Initializing Next.js app with Drupal example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named 'cms-drupal-app' based on the 'cms-drupal' example. Pnpm offers efficient dependency management for the Next.js project initialization.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-drupal/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-drupal cms-drupal-app
```

----------------------------------------

TITLE: Initializing Next.js DynamicIO in JavaScript
DESCRIPTION: Sets up the next.config.js file to enable dynamicIO, which is required to leverage cache management features using cacheTag in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const nextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Initializing Next.js app with Rematch using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-rematch' example. It sets up a project named 'with-rematch-app' in the current directory. This assumes Yarn is installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rematch/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-rematch with-rematch-app
```

----------------------------------------

TITLE: Using next/head in Next.js
DESCRIPTION: This code snippet demonstrates how to import and use the `next/head` component in a Next.js page. It shows how to add a title and viewport meta tag to the page's head. Using `next/head` ensures proper metadata management within the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-head-element.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Head from 'next/head'

function Index() {
  return (
    <>
      <Head>
        <title>My page title</title>
        <meta name="viewport" content="initial-scale=1.0, width=device-width" />
      </Head>
    </>
  )
}

export default Index
```

----------------------------------------

TITLE: Accessing Dynamic Params in Generated Icon - TSX
DESCRIPTION: Illustrates how to access dynamic route parameters within a programmatically generated icon function in Next.js. The params object is passed as a prop to the default exported function, allowing the icon content to be based on the route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export default function Icon({ params }: { params: { slug: string } }) {
  // ...
}
```

----------------------------------------

TITLE: Creating Next.js App with Redux (Yarn)
DESCRIPTION: This command uses `create-next-app` with Yarn to bootstrap a new Next.js application that integrates with Redux. It specifies the `with-redux` example to create a pre-configured application. The new application will be created in a directory named `with-redux-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redux/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-redux with-redux-app
```

----------------------------------------

TITLE: Creating a Next.js app using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-yarn-workspaces example. It initializes the project with the specified example and names the application with-yarn-workspaces-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yarn-workspaces/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-yarn-workspaces with-yarn-workspaces-app
```

----------------------------------------

TITLE: Disabling Prefetching with Link (Pages Router)
DESCRIPTION: This snippet demonstrates disabling automatic prefetching when a Next.js Link component enters the viewport in the Pages Router by setting the `prefetch` prop to `false`. Note that in the Pages Router, `prefetch={false}` still allows prefetching on hover unless an `<a>` tag is used.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/dashboard" prefetch={false}>
      Dashboard
    </Link>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/dashboard" prefetch={false}>
      Dashboard
    </Link>
  )
}
```

----------------------------------------

TITLE: Identifying Next.js Config Properties Causing Minification Issues
DESCRIPTION: The problematic configuration properties in next.config.js that can disable production minification. These settings should not be modified as they can severely impact performance and cause server-side code to be exposed to clients.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/minification-disabled.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
optimization.minimize
optimization.minimizer
```

----------------------------------------

TITLE: Building Next.js Project for Testing
DESCRIPTION: Command to build the Next.js project before running tests. This step is necessary to ensure all components are compiled and ready for testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
pnpm build
```

----------------------------------------

TITLE: Setting Preview Mode Duration - JavaScript
DESCRIPTION: This JavaScript code snippet shows how to set the duration for the preview mode session using the `setPreviewData` function in Next.js. It uses the `maxAge` option to specify the expiration time in seconds (e.g., 1 hour) and the `path` option to restrict the preview mode to specific routes. It assumes that the `setPreviewData` function is available in the current scope, generally within an API route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
setPreviewData(data, {
  maxAge: 60 * 60, // The preview mode cookies expire in 1 hour
  path: '/about', // The preview mode cookies apply to paths with /about
})
```

----------------------------------------

TITLE: Root Layout: Removing Default Meta Tags (JSX)
DESCRIPTION: This code modifies the root layout in Next.js (JSX) by removing the default `meta charset` and `meta viewport` tags from the `<head>`. Next.js automatically includes these tags, so they can be safely removed from the layout file. This simplifies the layout and avoids redundancy.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head>
        <link rel="icon" type="image/svg+xml" href="/icon.svg" />
        <title>My App</title>
        <meta name="description" content="My App is a..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Configuring HTML-Limited Bots in Next.js (JS)
DESCRIPTION: Shows the standard JavaScript configuration for the `htmlLimitedBots` option in `next.config.js`. This option takes a regular expression string matching user agents that should receive blocking metadata delivery instead of streaming metadata, overriding the default Next.js list.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_28

LANGUAGE: js
CODE:
```
module.exports = {
  htmlLimitedBots: 'MySpecialBot|MyAnotherSpecialBot|SimpleCrawler',
}
```

----------------------------------------

TITLE: Enabling React Taint APIs in Next.js Configuration (JS)
DESCRIPTION: Configures the Next.js application to enable React's experimental taint APIs by setting the `experimental.taint` option to `true` in the `next.config.js` file. This is a prerequisite for using `experimental_taintObjectReference` and `experimental_taintUniqueValue` to prevent data exposure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  experimental: {
    taint: true,
  },
}
```

----------------------------------------

TITLE: Disabling Compression in Next.js Configuration (JavaScript)
DESCRIPTION: This code snippet shows how to disable Next.js's built-in gzip compression by setting the `compress` option to `false` in the `next.config.js` file. This is typically done when an external server (like Nginx) is configured to handle compression, preventing duplicate compression.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/compress.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compress: false,
}
```

----------------------------------------

TITLE: Configuring Turbopack in TypeScript
DESCRIPTION: Example of basic Turbopack configuration in a Next.js TypeScript configuration file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  turbopack: {
    // ...
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Convert Base64 to Uint8Array - JavaScript
DESCRIPTION: This function converts a base64 string to a Uint8Array, which is required for the applicationServerKey when subscribing to push notifications. It handles padding and replaces URL-safe characters before decoding the base64 string using the window.atob() method. The resulting raw data is then converted to a Uint8Array and returned.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
  const base64 = (base64String + padding)
    .replace(/\-/g, '+')
    .replace(/_/g, '/')

  const rawData = window.atob(base64)
  const outputArray = new Uint8Array(rawData.length)

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}
```

----------------------------------------

TITLE: Push Prisma Schema to PlanetScale
DESCRIPTION: Applies the Prisma schema to the PlanetScale database. The available package managers are npm, yarn, and pnpm. This command creates tables and relationships defined in the Prisma schema.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
yarn prisma db push
```

LANGUAGE: bash
CODE:
```
pnpm prisma
```

----------------------------------------

TITLE: Installing MSW
DESCRIPTION: This command installs MSW (Mock Service Worker) as a development dependency. MSW is a library that allows mocking network requests directly in the browser, which is useful for isolating tests and controlling the data returned by APIs.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
npm install -D msw
```

----------------------------------------

TITLE: Incorrect Custom Route Configuration in Next.js
DESCRIPTION: This snippet shows an incorrect way of defining custom routes in Next.js, where the rewrite rule is not wrapped in an array.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/routes-must-be-array.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return {
      source: '/feedback',
      destination: '/feedback/general',
    }
  },
}
```

----------------------------------------

TITLE: Transpiling Modules in Next.js Compiler
DESCRIPTION: This snippet illustrates how to configure the Next.js Compiler to automatically transpile local packages or external dependencies, simplifying the development of applications using monorepos.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_9

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  transpilePackages: ['@acme/ui', 'lodash-es'],
}
```

----------------------------------------

TITLE: Adding Type Safety for Viewport Function in TypeScript
DESCRIPTION: This snippet demonstrates how to add type safety to the generateViewport function in TypeScript by specifying its return type as Viewport.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
import type { Viewport } from 'next'

export function generateViewport(): Viewport {
  return {
    themeColor: 'black',
  }
}
```

----------------------------------------

TITLE: Starting the Development Server in Next.js Project
DESCRIPTION: Instructions to start the development server for a Next.js application using various package managers. This snippet shows the commands to run the server using npm, yarn, pnpm, or bun. Ensure Node.js and the relevant package manager are installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/ts/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Sending empty body with 204 status code in Next.js API route
DESCRIPTION: This code snippet shows the corrected way to use a 204 status code in a Next.js API route. Instead of sending a response body with `send()`, the `end()` method is used to indicate that there is no content in the response body, adhering to the requirements of the 204 status code.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-api-status-body.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  res.status(204).end()
}
```

----------------------------------------

TITLE: Configuring Webpack Resolve Aliases in Next.js - JavaScript
DESCRIPTION: This snippet demonstrates how to safely override the webpack resolve alias configuration in a Next.js project by merging user-defined aliases with the existing configuration. The purpose is to prevent errors caused by improperly overriding internals. No additional dependencies are required. Key functionality involves spreading existing aliases and adding custom ones. This function is typically added inside the next.config.js file used in Next.js projects.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-resolve-alias.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
webpack(config) {
  config.resolve.alias = {
    ...config.resolve.alias,
    // your aliases
  }
}
```

----------------------------------------

TITLE: Using Global MDX Component
DESCRIPTION: Example showing how to use a globally provided Marker component within an MDX file
SOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/plugin-mdx-rs/pages/provider.mdx#2025-04-21_snippet_0

LANGUAGE: mdx
CODE:
```
<Marker />
```

----------------------------------------

TITLE: Configuring Cache Profiles in Next.js TypeScript
DESCRIPTION: This TypeScript snippet demonstrates setting up a cache profile in Next.js using the cacheLife option in the next.config.ts file. It defines a 'blog' profile with attributes such as 'stale', 'revalidate', and 'expire'. The configuration requires enabling the 'dynamicIO' flag under the 'experimental' section.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cacheLife.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
    cacheLife: {
      blog: {
        stale: 3600, // 1 hour
        revalidate: 900, // 15 minutes
        expire: 86400, // 1 day
      },
    },
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Creating Next.js app with dynamic-import example (yarn)
DESCRIPTION: This command uses `create next-app` with yarn to create a new Next.js application based on the `with-dynamic-import` example. It creates a directory named `with-dynamic-import-app` containing the new project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-dynamic-import/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-dynamic-import with-dynamic-import-app
```

----------------------------------------

TITLE: Retrieving Tag from Router in Next.js
DESCRIPTION: This snippet utilizes the Next.js useRouter hook to extract the 'tag' parameter from the URL query. It returns the tag value, or null if the tag is not present. This functionality is essential for displaying dynamic content based on URL parameters in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/tags/[tag].mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { useRouter } from "next/router";

export const TagName = () => {
  const { tag } = useRouter().query;
  return tag || null;
};
```

----------------------------------------

TITLE: Register OpenTelemetry in instrumentation.ts
DESCRIPTION: Registers OpenTelemetry for observability. This function is called once when a new Next.js server instance is initiated. It imports `registerOTel` from `@vercel/otel` and calls it with the application name 'next-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}
```

----------------------------------------

TITLE: Configuring Cache Profiles in Next.js JavaScript
DESCRIPTION: This JavaScript snippet illustrates adding a cache profile configuration in Next.js's next.config.js file. It defines cache settings for a 'blog' profile with 'stale', 'revalidate', and 'expire' properties, utilizing the 'dynamicIO' flag in the experimental section.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cacheLife.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  experimental: {
    dynamicIO: true,
    cacheLife: {
      blog: {
        stale: 3600, // 1 hour
        revalidate: 900, // 15 minutes
        expire: 86400, // 1 day
      },
    },
  },
}
```

----------------------------------------

TITLE: Navigating to a Dynamic Route with useRouter (JSX)
DESCRIPTION: This example illustrates how to navigate to a dynamic route using router.push. It demonstrates navigating to '/post/abc', where 'abc' represents the dynamic route parameter.  The useRouter hook is used to get the router instance, and router.push is called with the dynamic route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/post/abc')}>
      Click me
    </button>
  )
}
```

----------------------------------------

TITLE: Navigating with router.replace (JSX)
DESCRIPTION: This code illustrates how to use router.replace to navigate to a new page without adding a new entry to the browser's history. When the button is clicked, router.replace('/home') is called, replacing the current URL in the history stack with '/home'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.replace('/home')}>
      Click me
    </button>
  )
}
```

----------------------------------------

TITLE: Generating Image with Local Assets JSX
DESCRIPTION: Illustrates using Node.js runtime APIs (`node:path`, `node:fs/promises`) to read a local image file (`logo.png`) and include it in an Open Graph image generated by `ImageResponse` in a JSX file. The image data is converted to an `ArrayBuffer` for use as the `src` attribute of an `<img>` element.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_23

LANGUAGE: jsx
CODE:
```
import { ImageResponse } from 'next/og'
import { join } from 'node:path'
import { readFile } from 'node:fs/promises'

export default async function Image() {
  const logoData = await readFile(join(process.cwd(), 'logo.png'))
  const logoSrc = Uint8Array.from(logoData).buffer

  return new ImageResponse(
    (
      <div
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        <img src={logoSrc} height="100" />
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Handling router errors with router.events
DESCRIPTION: This code snippet demonstrates how to handle router errors, specifically cancelled route changes, using `router.events.on`. It subscribes to the `routeChangeError` event and logs a message if the navigation was cancelled. The handler is unsubscribed in the effect's cleanup function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_13

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react'
import { useRouter } from 'next/router'

export default function MyApp({ Component, pageProps }) {
  const router = useRouter()

  useEffect(() => {
    const handleRouteChangeError = (err, url) => {
      if (err.cancelled) {
        console.log(`Route to ${url} was cancelled!`)
      }
    }

    router.events.on('routeChangeError', handleRouteChangeError)

    // If the component is unmounted, unsubscribe
    // from the event with the `off` method:
    return () => {
      router.events.off('routeChangeError', handleRouteChangeError)
    }
  }, [router])

  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: Configuring Module Resolution Aliases
DESCRIPTION: Example of setting up module resolution aliases in Turbopack for package and conditional imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  turbopack: {
    resolveAlias: {
      underscore: 'lodash',
      mocha: { browser: 'mocha/browser-entry.js' },
    },
  },
}
```

----------------------------------------

TITLE: Configuring i18n to Prefix Default Locale (Workaround)
DESCRIPTION: This `next.config.js` snippet sets up i18n configuration to allow prefixing the default locale, which requires a Middleware workaround. It defines a special 'default' locale as the `defaultLocale` and explicitly disables automatic locale detection (`localeDetection: false`). `trailingSlash` is also enabled.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  i18n: {
    locales: ['default', 'en', 'de', 'fr'],
    defaultLocale: 'default',
    localeDetection: false,
  },
  trailingSlash: true,
}
```

----------------------------------------

TITLE: Removing Unnecessary getInitialProps from Custom App Component in Next.js
DESCRIPTION: This code snippet shows an example of a redundant getInitialProps implementation in a custom App component that can be safely removed. The implementation simply passes page props through without adding functionality, which unnecessarily disables Automatic Static Optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/opt-out-automatic-prerendering.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
class MyApp extends App {
  // Remove me, I do nothing!
  static async getInitialProps({ Component, ctx }) {
    let pageProps = {}

    if (Component.getInitialProps) {
      pageProps = await Component.getInitialProps(ctx)
    }

    return { pageProps }
  }

  render() {
    // ...
  }
}
```

----------------------------------------

TITLE: Using Script component with dangerouslySetInnerHTML in JSX
DESCRIPTION: This demonstrates the usage of `dangerouslySetInnerHTML` to include an inline script within the `next/script` component. It's crucial to be cautious when using `dangerouslySetInnerHTML` to avoid potential XSS vulnerabilities.  The `id` attribute is used for identification.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-script.mdx#_snippet_2

LANGUAGE: JSX
CODE:
```
<Script
  id="show-banner"
  dangerouslySetInnerHTML={{
    __html: `document.getElementById('banner').classList.remove('hidden')`,
  }}
/>
```

----------------------------------------

TITLE: Creating Next.js app with Fela using Yarn
DESCRIPTION: This command utilizes Yarn to create a new Next.js application using the 'with-fela' example.  It sets up the required project structure with the Fela styling solution.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fela/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-fela with-fela-app
```

----------------------------------------

TITLE: Configuring htmlLimitedBots in Next.js with JavaScript
DESCRIPTION: JavaScript example showing how to configure the htmlLimitedBots option in next.config.js to specify a list of user agents that should receive blocking metadata. The example uses the CommonJS module format.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/htmlLimitedBots.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  htmlLimitedBots: 'MySpecialBot|MyAnotherSpecialBot|SimpleCrawler',
}
```

----------------------------------------

TITLE: Valid Config: Static Boolean - Next.js JavaScript
DESCRIPTION: This snippet demonstrates valid `config` definitions where `config.amp` is assigned a static boolean value. This is allowed as the value is not dynamic and is directly defined within the object.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export const config = {
  amp: true,
}

export const config = {
  amp: false,
}
```

----------------------------------------

TITLE: Jest Configuration (with Babel)
DESCRIPTION: This JavaScript configuration file is a comprehensive setup for Jest when using Babel with Next.js. It configures coverage collection, module name mapping for CSS, images, and module aliases, along with test environment and transforms using babel-jest. This configuration allows Jest to properly handle and test Next.js components with CSS modules, static assets, and absolute imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  collectCoverage: true,
  // on node 14.x coverage provider v8 offers good speed and more or less good report
  coverageProvider: 'v8',
  collectCoverageFrom: [
    '**/*.{js,jsx,ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
    '!<rootDir>/out/**',
    '!<rootDir>/.next/**',
    '!<rootDir>/*.config.js',
    '!<rootDir>/coverage/**',
  ],
  moduleNameMapper: {
    // Handle CSS imports (with CSS modules)
    // https://jestjs.io/docs/webpack#mocking-css-modules
    '^.+\.module\.(css|sass|scss)$': 'identity-obj-proxy',

    // Handle CSS imports (without CSS modules)
    '^.+\.(css|sass|scss)$': '<rootDir>/__mocks__/styleMock.js',

    // Handle image imports
    // https://jestjs.io/docs/webpack#handling-static-assets
    '^.+\.(png|jpg|jpeg|gif|webp|avif|ico|bmp|svg)$': `<rootDir>/__mocks__/fileMock.js`,

    // Handle module aliases
    '^@/components/(.*)$': '<rootDir>/components/$1',

    // Handle @next/font
    '@next/font/(.*)': `<rootDir>/__mocks__/nextFontMock.js`,
    // Handle next/font
    'next/font/(.*)': `<rootDir>/__mocks__/nextFontMock.js`,
    // Disable server-only
    'server-only': `<rootDir>/__mocks__/empty.js`,
  },
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],
  testEnvironment: 'jsdom',
  transform: {
    // Use babel-jest to transpile tests with the next/babel preset
    // https://jestjs.io/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object
    '^.+\.(js|jsx|ts|tsx)$': ['babel-jest', { presets: ['next/babel'] }],
  },
  transformIgnorePatterns: [
    '/node_modules/',
    '^.+\.module\.(css|sass|scss)$',
  ],
}
```

----------------------------------------

TITLE: Correct UUID Generation with Connection in Next.js
DESCRIPTION: Improved implementation using connection() to ensure per-request unique values.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

export default async function Page() {
  await connection()
  const uuid = crypto.randomUUID()
  return <RequestId id={uuid}>
}
```

----------------------------------------

TITLE: Setting X-Frame-Options Header - JavaScript
DESCRIPTION: This snippet shows how to configure the `X-Frame-Options` header in your Next.js headers array. Setting the value to `'SAMEORIGIN'` prevents the site from being displayed within an `iframe` unless the embedding page is from the same origin, mitigating clickjacking vulnerabilities. Note that this header is superseded by CSP's `frame-ancestors`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_16

LANGUAGE: js
CODE:
```
{
  key: 'X-Frame-Options',
  value: 'SAMEORIGIN'
}
```

----------------------------------------

TITLE: Creating Next.js App using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named `i18n-routing-pages-app` using the `i18n-routing-pages` example. It sets up the project with the configuration and dependencies needed for internationalized routing features.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing-pages/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example i18n-routing-pages i18n-routing-pages-app
```

----------------------------------------

TITLE: Forwarding Stripe Webhooks
DESCRIPTION: This command starts the Stripe CLI and configures it to forward webhooks to the specified local development server URL, which is crucial for testing webhook functionality during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
stripe listen --forward-to localhost:3000/api/webhooks
```

----------------------------------------

TITLE: Enabling Server Actions in Next.js v13
DESCRIPTION: Configuration to enable Server Actions in Next.js version 13. This setting is not needed for Next.js 14+ where Server Actions are enabled by default.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverActions.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const config = {
  experimental: {
    serverActions: true,
  },
}

module.exports = config
```

----------------------------------------

TITLE: Importing MDX File Pages Router Javascript
DESCRIPTION: Demonstrates how to import an `.mdx` file (`Welcome`) into a standard Next.js Pages Router page component written in JavaScript and render it by returning the imported component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_12

LANGUAGE: jsx
CODE:
```
import Welcome from '@/markdown/welcome.mdx'
```

----------------------------------------

TITLE: Configuring Image Loader in Next.js
DESCRIPTION: This code snippet shows how to configure a custom image loader in the `next.config.js` file for static export. It sets the `loader` to `'custom'` and specifies the `loaderFile` path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export',
  images: {
    loader: 'custom',
    loaderFile: './my-loader.ts',
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Implementing Form with Navigation Blocker (TSX/JS)
DESCRIPTION: A simple form component that uses the `useNavigationBlocker` hook to access the `setIsBlocked` function. It sets `isBlocked` to `true` when the form input changes (simulating unsaved changes) and sets it back to `false` when the form is submitted.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_24

LANGUAGE: tsx
CODE:
```
'use client';

import { useNavigationBlocker } from '../contexts/navigation-blocker';

export default function Form() {
  const { setIsBlocked } = useNavigationBlocker();

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault();
        setIsBlocked(false);
      }}
      onChange={() => setIsBlocked(true)}
    >
      <input type="text" name="name" />
      <button type="submit">Save</button>
    </form>
  );
}
```

LANGUAGE: jsx
CODE:
```
'use client';

import { useNavigationBlocker } from '../contexts/navigation-blocker';

export default function Form() {
  const { setIsBlocked } = useNavigationBlocker();

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault();
        setIsBlocked(false);
      }}
      onChange={() => setIsBlocked(true)}
    >
      <input type="text" name="name" />
      <button type="submit">Save</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Custom Image Loader Function - Next.js
DESCRIPTION: Defines a custom loader function for the Next.js legacy Image component. This function takes the image source, width, and quality as input and returns a URL string. It allows for dynamic image URL generation based on these parameters, enabling the use of external image optimization services or custom image serving logic. Requires the 'next/legacy/image' import.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import Image from 'next/legacy/image'

const myLoader = ({ src, width, quality }) => {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}

const MyImage = (props) => {
  return (
    <Image
      loader={myLoader}
      src="me.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: Custom Image Loader (JavaScript)
DESCRIPTION: This code defines a custom image loader function for Next.js. It constructs a URL for Cloudinary based on the provided image source, width, and quality parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
export default function cloudinaryLoader({ src, width, quality }) {
  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]
  return `https://res.cloudinary.com/demo/image/upload/${params.join(
    ','
  )}${src}`
}
```

----------------------------------------

TITLE: Linting specific directories and files using next lint (Bash)
DESCRIPTION: This bash command demonstrates how to lint specific directories and files using the `next lint` command with the `--dir` and `--file` flags. This can be useful when you want to focus on a particular part of your codebase.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
next lint --dir pages --dir utils --file bar.js
```

----------------------------------------

TITLE: Implementing Shallow Routing using window.history.pushState (JavaScript)
DESCRIPTION: This snippet shows how to implement shallow routing in a Next.js application using `window.history.pushState` with JavaScript. It uses the `useSearchParams` hook to get the current search parameters, updates the 'sort' parameter with the specified `sortOrder`, and then uses `window.history.pushState` to update the URL without triggering a full page reload.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_12

LANGUAGE: javascript
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SortProducts() {
  const searchParams = useSearchParams()

  function updateSorting(sortOrder) {
    const urlSearchParams = new URLSearchParams(searchParams.toString())
    urlSearchParams.set('sort', sortOrder)
    window.history.pushState(null, '', `?${urlSearchParams.toString()}`)
  }

  return (
    <>
      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>
      <button onClick={() => updateSorting('desc')}>Sort Descending</button>
    </>
  )
}
```

----------------------------------------

TITLE: Starting Redis Stack server using Docker Compose
DESCRIPTION: This command starts the Redis Stack server in detached mode using Docker Compose. It's essential for setting up the Redis environment required for the Next.js cache integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
docker compose up -d
```

----------------------------------------

TITLE: Configuring nextScriptWorkers
DESCRIPTION: This code configures the `nextScriptWorkers` experimental flag in `next.config.js` to enable the `worker` strategy for the `next/script` component. This option enables offloading scripts to a web worker using Partytown. Requires Node.js environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_5

LANGUAGE: js
CODE:
```
module.exports = {
  experimental: {
    nextScriptWorkers: true,
  },
}
```

----------------------------------------

TITLE: Running Knex Migrations
DESCRIPTION: These commands run the latest database migrations using npm, yarn or pnpm. This updates the database schema to the latest version.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm run migrate:latest
# or
yarn migrate:latest
# or
pnpm migrate:latest
```

----------------------------------------

TITLE: Setting crossOrigin in next.config.js (JavaScript)
DESCRIPTION: This code snippet shows how to configure the `crossOrigin` option in the `next.config.js` file. Setting this option adds the `crossOrigin` attribute to all `<script>` tags generated by Next.js, controlling how cross-origin requests are handled. The possible values are `'anonymous'` and `'use-credentials'`. Requires Node.js environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/crossOrigin.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  crossOrigin: 'anonymous',
}
```

----------------------------------------

TITLE: Bootstrapping Next.js App with NPM
DESCRIPTION: This snippet demonstrates how to bootstrap a Next.js application using the create-next-app command with npm. It sets up the app with the Docker Compose example provided.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-docker-compose with-docker-compose-app
```

----------------------------------------

TITLE: Creating Next.js app with Contentful example using npm
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project using the cms-contentful example. It creates a directory named cms-contentful-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-contentful cms-contentful-app
```

----------------------------------------

TITLE: Starting Next.js development server using pnpm
DESCRIPTION: This command starts the Next.js development server using pnpm.  It executes the "dev" script specified in package.json which starts the server, typically on localhost:3000. pnpm must be installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Initializing Google Analytics in Pages Router (JSX)
DESCRIPTION: This code snippet shows how to integrate Google Analytics into a Next.js application using the Pages Router. It uses the `GoogleAnalytics` component from `@next/third-parties/google` and includes it within the custom `_app.js` component. The Google Analytics measurement ID is passed via the `gaId` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function MyApp({ Component, pageProps }) {
  return (
    <>
      <Component {...pageProps} />
      <GoogleAnalytics gaId="G-XYZ" />
    </>
  )
}
```

----------------------------------------

TITLE: Create Next.js app with Chakra UI using npm
DESCRIPTION: This command uses npx to create a new Next.js application with Chakra UI, named 'with-chakra-ui-app'. It leverages the 'with-chakra-ui' example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-chakra-ui/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-chakra-ui with-chakra-ui-app
```

----------------------------------------

TITLE: Configuring Apple Web App Metadata in Next.js (JSX & HTML)
DESCRIPTION: Configures metadata specifically for adding a web application to the Apple home screen (Apple Web App) and for linking to the app store using the `metadata.itunes` and `metadata.appleWebApp` properties. This includes settings for the app store ID, startup image paths (supporting different sizes/media queries), title, and status bar style. It generates various `<meta>` and `<link>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_21

LANGUAGE: JSX
CODE:
```
export const metadata = {
  itunes: {
    appId: 'myAppStoreID',
    appArgument: 'myAppArgument',
  },
  appleWebApp: {
    title: 'Apple Web App',
    statusBarStyle: 'black-translucent',
    startupImage: [
      '/assets/startup/apple-touch-startup-image-768x1004.png',
      {
        url: '/assets/startup/apple-touch-startup-image-1536x2008.png',
        media: '(device-width: 768px) and (device-height: 1024px)',
      },
    ],
  },
}
```

LANGUAGE: HTML
CODE:
```
<meta
  name="apple-itunes-app"
  content="app-id=myAppStoreID, app-argument=myAppArgument"
/>
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-title" content="Apple Web App" />
<link
  href="/assets/startup/apple-touch-startup-image-768x1004.png"
  rel="apple-touch-startup-image"
/>
<link
  href="/assets/startup/apple-touch-startup-image-1536x2008.png"
  media="(device-width: 768px) and (device-height: 1024px)"
  rel="apple-touch-startup-image"
/>
<meta
  name="apple-mobile-web-app-status-bar-style"
  content="black-translucent"
/>
```

----------------------------------------

TITLE: Creating Next.js App with Mux Video Example
DESCRIPTION: Command-line instructions for creating a new Next.js project using the Mux Video example template with various package managers
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mux-video with-mux-video-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mux-video with-mux-video-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mux-video with-mux-video-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example with-mux-video with-mux-video-app
```

----------------------------------------

TITLE: Clear Draft Mode Cookie (TypeScript)
DESCRIPTION: This TypeScript code snippet shows how to disable Draft Mode by setting the `enable` property to `false` in `res.setDraftMode`. This clears the Draft Mode cookie.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
export default function handler(req, res) {
  res.setDraftMode({ enable: false })
}
```

----------------------------------------

TITLE: Implementing Client-Side Data Fetching in Layout Components
DESCRIPTION: A layout component that fetches data on the client-side using the SWR library. It loads navigation data and displays loading/error states while handling the data fetch, then renders the appropriate UI with the fetched data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
import useSWR from 'swr'
import Navbar from './navbar'
import Footer from './footer'

export default function Layout({ children }) {
  const { data, error } = useSWR('/api/navigation', fetcher)

  if (error) return <div>Failed to load</div>
  if (!data) return <div>Loading...</div>

  return (
    <>
      <Navbar links={data.links} />
      <main>{children}</main>
      <Footer />
    </>
  )
}
```

----------------------------------------

TITLE: Enabling Draft Mode
DESCRIPTION: This code snippet imports the `draftMode` function from `next/headers` and enables draft mode. The `draftMode().enable()` method sets a cookie that enables draft mode for subsequent requests. The route handler then responds with a confirmation message.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
import { draftMode } from 'next/headers'

export async function GET(request) {
  const draft = await draftMode()
  draft.enable()
  return new Response('Draft mode is enabled')
}
```

----------------------------------------

TITLE: Record a Heap Profile with Node.js
DESCRIPTION: This snippet shows how to record a heap profile from Node.js during a Next.js build process.  The `--heap-prof` flag passed to Node.js enables heap profiling, creating a `.heapprofile` file that can be loaded into Chrome DevTools to analyze memory usage and identify potential memory leaks.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_2

LANGUAGE: sh
CODE:
```
node --heap-prof node_modules/next/dist/bin/next build
```

----------------------------------------

TITLE: Defining Image Content Type JSX
DESCRIPTION: Defines the static `contentType` export for Open Graph or Twitter images in a JSX file. This string specifies the MIME type of the generated image, typically 'image/png', which is used by Next.js to set the appropriate meta tag in the HTML head.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_18

LANGUAGE: jsx
CODE:
```
export const contentType = 'image/png'

export default function Image() {}
```

----------------------------------------

TITLE: Creating Next.js App with Recoil Example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-recoil example. It clones the example into a new directory named with-recoil-app. It requires Yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-recoil/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-recoil with-recoil-app
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with pnpm
DESCRIPTION: This command employs pnpm to generate a new Next.js application from the with-joi example. It creates a new project named 'with-joi-app' based on the provided template.  pnpm is required as a global package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-joi/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-joi with-joi-app
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-cookies-next example. It initializes a new project directory named 'with-cookies-next-app' with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cookies-next/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-cookies-next with-cookies-next-app
```

----------------------------------------

TITLE: Structuring Error Information JavaScript
DESCRIPTION: Implements the `structuredError` function, which takes an error object, retrieves a 'proper' version (potentially internal Turbopack error handling), and returns a standardized object containing the error's name, message, and a parsed stack trace using an external `stacktrace-parser` module. It relies on internal modules for error handling and stack trace parsing.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import "../compiled/stacktrace-parser";

import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import "./error";

import { parse as parseStackTrace } from "../compiled/stacktrace-parser";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { getProperError } from "./error";
function structuredError(e) {
    e = getProperError(e);
    return {
        name: e.name,
        message: e.message,
        stack: typeof e.stack === "string" ? parseStackTrace(e.stack) : []
    };
}
export { structuredError as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Generating robots.txt with custom user agents (JavaScript)
DESCRIPTION: Shows how to generate `robots.txt` with rules customized for specific search engine bots using an array of rule objects within the `rules` property in a JavaScript file. It sets different allow/disallow paths for 'Googlebot' and a shared rule for 'Applebot' and 'Bingbot'. This is the JavaScript equivalent of the TypeScript example.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/robots.mdx#_snippet_4

LANGUAGE: js
CODE:
```
export default function robots() {
  return {
    rules: [
      {
        userAgent: 'Googlebot',
        allow: ['/'],
        disallow: ['/private/'],
      },
      {
        userAgent: ['Applebot', 'Bingbot'],
        disallow: ['/'],
      },
    ],
    sitemap: 'https://acme.com/sitemap.xml',
  }
}
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named 'with-apollo-and-redux-app' based on the 'with-apollo-and-redux' example. It uses pnpm's create command to set up the project using the given example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo-and-redux/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-apollo-and-redux with-apollo-and-redux-app
```

----------------------------------------

TITLE: Create Next.js app with npm - Bash
DESCRIPTION: This command uses `create-next-app` with npm to bootstrap a new Next.js project from the 'with-absolute-imports' example. It creates a new directory named 'with-absolute-imports-app' with the example project's structure and dependencies. Requires Node.js and npm installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_3

LANGUAGE: Bash
CODE:
```
npx create-next-app --example with-absolute-imports with-absolute-imports-app
```

----------------------------------------

TITLE: Creating Next.js app using npx
DESCRIPTION: This command uses npx to create a new Next.js application named 'with-mocha-app' based on the 'with-mocha' example. It initializes a project with pre-configured Mocha testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mocha with-mocha-app
```

----------------------------------------

TITLE: Installing dependencies using pnpm
DESCRIPTION: This command installs the project's dependencies using pnpm. It is a prerequisite for running the development server and other project-related tasks.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Creating Next.js app using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named 'with-mocha-app' based on the 'with-mocha' example. It initializes a project with pre-configured Mocha testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mocha with-mocha-app
```

----------------------------------------

TITLE: Creating Next.js app using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the 'api-routes-cors' example. It sets up a project with the necessary configurations for API routes and CORS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-cors/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-cors api-routes-cors-app
```

----------------------------------------

TITLE: Configuring On-Demand Entries in Next.js
DESCRIPTION: Configuration options for controlling how Next.js manages page entries in development mode. Sets the maximum inactive age for buffered pages and the number of pages to keep in memory simultaneously.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/onDemandEntries.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  onDemandEntries: {
    // period (in ms) where the server will keep pages in the buffer
    maxInactiveAge: 25 * 1000,
    // number of pages that should be kept simultaneously without being disposed
    pagesBufferLength: 2,
  },
}
```

----------------------------------------

TITLE: Creating a Custom 500 Page in Next.js
DESCRIPTION: This code snippet shows how to create a custom 500 error page in Next.js. A React functional component `Custom500` is defined to display a server-side error message. This component is placed in `pages/500.js`, which Next.js recognizes and uses for 500 errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/08-custom-error.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export default function Custom500() {
  return <h1>500 - Server-side error occurred</h1>
}
```

----------------------------------------

TITLE: Updating Search Form to Use SearchButton in Next.js JavaScript
DESCRIPTION: This JavaScript example replaces the standard submit button in a Next.js search form with a 'SearchButton' component, offering visual cues during search action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_13

LANGUAGE: JavaScript
CODE:
```
import Form from 'next/form'
import { SearchButton } from '@/ui/search-button'

export default function Page() {
  return (
    <Form action="/search">
      <input name="query" />
      <SearchButton />
    </Form>
  )
}
```

----------------------------------------

TITLE: Creating Next.js App with React-GA4 Example (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-react-ga4 example. It provides a quick way to start a project configured for analytics using react-ga4. 'with-react-ga-app' defines the project directory name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-ga4/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-ga4 with-react-ga-app
```

----------------------------------------

TITLE: Configuring Next.js Server External Packages - JavaScript
DESCRIPTION: This snippet demonstrates how to use the `serverExternalPackages` array in your `next.config.js` file to specify dependencies that should not be bundled with the server code. Instead, these packages will be resolved at runtime using Node.js's native `require`. The example shows excluding the '@acme/ui' package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/serverExternalPackages.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  serverExternalPackages: ['@acme/ui'],
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Creating Next.js app with react-bootstrap using pnpm
DESCRIPTION: This command uses pnpm to execute create next-app with the with-react-bootstrap example. It creates a new Next.js application named 'with-react-bootstrap-app' with the react-bootstrap setup. The command requires Node.js and pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-bootstrap/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-bootstrap with-react-bootstrap-app
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses npx to create a new Next.js application based on the `with-portals-ssr` example.  It initializes a project named `with-portals-ssr-app` using the specified example from the Next.js repository. The command assumes npm is installed and available in the environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals-ssr/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-portals-ssr with-portals-ssr-app
```

----------------------------------------

TITLE: Configuring Runtime Config in next.config.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to define `serverRuntimeConfig` and `publicRuntimeConfig` in `next.config.js`. `serverRuntimeConfig` is for server-side only configurations, and `publicRuntimeConfig` is for configurations accessible on both the server and client. It utilizes `process.env` to pass environment variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/runtime-configuration.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  serverRuntimeConfig: {
    // Will only be available on the server side
    mySecret: 'secret',
    secondSecret: process.env.SECOND_SECRET, // Pass through env variables
  },
  publicRuntimeConfig: {
    // Will be available on both server and client
    staticFolder: '/static',
  },
}
```

----------------------------------------

TITLE: Creating Next.js app using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the 'api-routes-cors' example. It sets up a project with the necessary configurations for API routes and CORS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-cors/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-cors api-routes-cors-app
```

----------------------------------------

TITLE: Configuring External Server Package in Next.js JS
DESCRIPTION: This snippet shows how to configure Next.js to exclude a specific package from being bundled for Server Components and Route Handlers. It uses the `serverExternalPackages` option in `next.config.js` to list packages that should be loaded via native Node.js `require`. Required dependency is Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverExternalPackages.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  serverExternalPackages: ['@acme/ui'],
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Accessing Dynamic API Asynchronously in Client Component
DESCRIPTION: This code snippet demonstrates how to access dynamic API properties asynchronously in a Client Component using React.use() in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
'use client'
import * as React from 'react'

function Page({ params }) {
  // asynchronous access of `params.id`.
  const { id } = React.use(params)
  return <p>ID: {id}</p>
}
```

----------------------------------------

TITLE: Initializing Next.js App with Cosmos DB Example using pnpm
DESCRIPTION: This command initializes a new Next.js application using the `with-azure-cosmos` example.  It uses `pnpm create next-app` to bootstrap the project, pre-configured for integration with Azure Cosmos DB. The created application is placed in the `with-azure-cosmos-app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-azure-cosmos with-azure-cosmos-app
```

----------------------------------------

TITLE: Creating Next.js app with Inngest example using npx
DESCRIPTION: This command uses npx to create a new Next.js application named "inngest-app" based on the "inngest" example. It leverages create-next-app to streamline the project setup with necessary configurations and dependencies for Inngest integration. The command assumes npm is available and configured on the system.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example inngest inngest-app
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command uses `create next-app` with Yarn to bootstrap a Next.js project configured to use Storyblok CMS. It creates a new directory `cms-storyblok-app` with the required files and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-storyblok cms-storyblok-app
```

----------------------------------------

TITLE: Installing Next.js Bundle Analyzer
DESCRIPTION: Installation instructions for the bundle analyzer package using npm or yarn package managers
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @next/bundle-analyzer
```

LANGUAGE: bash
CODE:
```
yarn add @next/bundle-analyzer
```

----------------------------------------

TITLE: Creating a Next.js App with React Intl Example
DESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js project with the `with-react-intl` example.  Each command uses a different package manager (npm, yarn, and pnpm) to achieve the same result. The resulting project will be named `with-react-intl-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-intl/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-intl with-react-intl-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-intl with-react-intl-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-intl with-react-intl-app
```

----------------------------------------

TITLE: Copying Environment Configuration File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. This is commonly done to create a local environment configuration file from a template, ensuring that sensitive information is not committed to version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Prefetching pages with router.prefetch
DESCRIPTION: This code snippet demonstrates how to use `router.prefetch` to prefetch a page, enhancing client-side transitions after a login. It uses `useCallback` for the form submission handler and `useEffect` to prefetch the dashboard page after the component mounts. This improves the user experience by reducing navigation latency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
import { useCallback, useEffect } from 'react'
import { useRouter } from 'next/router'

export default function Login() {
  const router = useRouter()
  const handleSubmit = useCallback((e) => {
    e.preventDefault()

    fetch('/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        /* Form data */
      }),
    }).then((res) => {
      // Do a fast client-side transition to the already prefetched dashboard page
      if (res.ok) router.push('/dashboard')
    })
  }, [])

  useEffect(() => {
    // Prefetch the dashboard page
    router.prefetch('/dashboard')
  }, [router])

  return (
    <form onSubmit={handleSubmit}>
      {/* Form fields */}
      <button type="submit">Login</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Synchronous Params Access in Next.js Component (Incorrect Implementation)
DESCRIPTION: Example showing problematic synchronous access of params and searchParams in a Next.js component that will be exported as a Page component
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
// This component ends up being the Page component even though it is defined outside of
// page.js due to how it is reexported in page.js
export default function ComponentThatWillBeExportedAsPage({ params, searchParams }) {
  const { slug } = params;
  const { page } = searchParams
  return <RenderList slug={slug} page={page}>
}
```

----------------------------------------

TITLE: Typed Routes Configuration in Next.js
DESCRIPTION: Configuration example for enabling typed routes in Next.js with experimental features.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    typedRoutes: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Running Experimental Image Codemod in Next.js
DESCRIPTION: Command to run the experimental next-image-experimental codemod which helps upgrade next/legacy/image to the new next/image format. Note: only works for static usage patterns.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-upgrade-to-13.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx @next/codemod next-image-experimental .
```

----------------------------------------

TITLE: Performing Dynamic Import in JavaScript
DESCRIPTION: This snippet demonstrates a dynamic `import()` call where the module specifier is not a fixed string literal but a variable (`unknown`). This pattern makes it challenging for static analysis tools and bundlers to determine the imported module at build time, as the target is resolved dynamically at runtime, often used for code splitting or conditional loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1004__ fs.readFileSync(FreeVar(Math)[-7dbc77.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
import(unknown)
```

----------------------------------------

TITLE: Creating Next.js App with Apollo Example (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application pre-configured with the Apollo Server and Client example. It bootstraps the project with the necessary dependencies and configuration files. The new application will be located in the directory named 'api-routes-apollo-server-and-client-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app
```

----------------------------------------

TITLE: Caching Dynamic Pages with getServerSideProps (JavaScript)
DESCRIPTION: This JavaScript snippet shows how to set HTTP `Cache-Control` headers on the response object (`res`) within a `getServerSideProps` function. It includes directives like `s-maxage` and `stale-while-revalidate` to manage the caching behavior of server-rendered pages, allowing for fresh data on subsequent requests while serving stale data immediately.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_12

LANGUAGE: js
CODE:
```
// This value is considered fresh for ten seconds (s-maxage=10).
// If a request is repeated within the next 10 seconds, the previously
// cached value will still be fresh. If the request is repeated before 59 seconds,
// the cached value will be stale but still render (stale-while-revalidate=59).
//
// In the background, a revalidation request will be made to populate the cache
// with a fresh value. If you refresh the page, you will see the new value.
export async function getServerSideProps({ req, res }) {
  res.setHeader(
    'Cache-Control',
    'public, s-maxage=10, stale-while-revalidate=59'
  )

  return {
    props: {},
  }
}
```

----------------------------------------

TITLE: Handling Specific Web Vitals in Pages Router
DESCRIPTION: This example illustrates how to use a `switch` statement within the `useReportWebVitals` callback function in `pages/_app.js` to perform specific actions based on the `name` of the reported metric. This allows developers to handle individual Web Vitals like FCP or LCP differently, integrating with analytics or logging systems as needed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { useReportWebVitals } from 'next/web-vitals'

function MyApp({ Component, pageProps }) {
  useReportWebVitals((metric) => {
    switch (metric.name) {
      case 'FCP': {
        // handle FCP results
        break
      }
      case 'LCP': {
        // handle LCP results
        break
      }
      // ... handle other metrics (TTFB, FID, CLS, INP)
    }
  })

  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: next.config.js worker flag
DESCRIPTION: This config shows how to enable the experimental `nextScriptWorkers` flag in `next.config.js` to use the `worker` strategy.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_11

LANGUAGE: js
CODE:
```
module.exports = {
  experimental: {
    nextScriptWorkers: true,
  },
}
```

----------------------------------------

TITLE: API Signature: revalidateTag Function (TypeScript)
DESCRIPTION: Defines the type signature for the `revalidateTag` function in TypeScript. It specifies that the function accepts a single string argument `tag` representing the cache tag to invalidate and returns `void`, indicating no explicit return value.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
revalidateTag(tag: string): void;
```

----------------------------------------

TITLE: Specifying root directory for ESLint Plugin in Monorepo (MJS)
DESCRIPTION: This code snippet shows how to configure `eslint-plugin-next` in a monorepo where Next.js is not installed in the root directory. It utilizes the `settings.next.rootDir` property in the `.eslintrc` to tell the plugin where to find the Next.js application.  Dependencies include `@eslint/eslintrc`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import { FlatCompat } from '@eslint/eslintrc'

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

const eslintConfig = [
  ...compat.config({
    extends: ['next'],
    settings: {
      next: {
        rootDir: 'packages/my-app/',
      },
    },
  }),
]

export default eslintConfig
```

----------------------------------------

TITLE: Configuring generateBuildId in next.config.js
DESCRIPTION: This code snippet demonstrates how to configure the `generateBuildId` option in `next.config.js`.  It defines an asynchronous function that returns a custom build ID, in this case, the Git hash from the environment variables. This ensures a consistent build ID across different environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/generateBuildId.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
module.exports = {
  generateBuildId: async () => {
    // This could be anything, using the latest git hash
    return process.env.GIT_HASH
  },
}
```

----------------------------------------

TITLE: Creating Next.js App with Prismic Example (Yarn)
DESCRIPTION: This command uses the `create next-app` command with Yarn to bootstrap a new Next.js application using the `cms-prismic` example. It creates a new directory named `cms-prismic-app` for the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-prismic cms-prismic-app
```

----------------------------------------

TITLE: Extracting i18n Messages with npm
DESCRIPTION: This npm script extracts default messages from the source code and generates the `en.json` file in the `lang/` directory.  This file serves as the source of truth for translations and is used by translation services.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-intl/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ npm run i18n:extract
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app (Bun)
DESCRIPTION: This command uses Bun to create a new Next.js application based on the with-algolia-react-instantsearch example.  It initializes a project with the specified example template and names the directory with-algolia-react-instantsearch-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-algolia-react-instantsearch/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
bunx create-next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

----------------------------------------

TITLE: Incorrect Synchronous Request Access in Next.js Route Handler
DESCRIPTION: Example showing incorrect synchronous access of request headers in a Next.js GET route handler without awaiting connection first
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-request.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
export default function GET(request) {
  const requestHeaders = request.headers
  return ...
}
```

----------------------------------------

TITLE: Implementing Custom Document Component in Next.js
DESCRIPTION: Demonstrates the correct way to import and extend the Document component from next/document within pages/_document.js. This is the only valid location for Document imports in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-document-import-in-page.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  //...
}

export default MyDocument
```

----------------------------------------

TITLE: Enabling Lightning CSS in Next.js with TypeScript
DESCRIPTION: Configuration for enabling Lightning CSS in a Next.js project using TypeScript. This snippet shows how to set the useLightningcss experimental flag to true in the Next.js configuration file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/useLightningcss.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    useLightningcss: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Transforming Anonymous Component with name-default-component Codemod
DESCRIPTION: This example demonstrates how the name-default-component codemod transforms an anonymous function component into a named component. The component name is derived from the file name.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_14

LANGUAGE: jsx
CODE:
```
export default function () {
  return <div>Hello World</div>
}
```

LANGUAGE: jsx
CODE:
```
export default function MyComponent() {
  return <div>Hello World</div>
}
```

----------------------------------------

TITLE: Creating Next.js App with create-next-app (Yarn)
DESCRIPTION: This command utilizes Yarn to create a new Next.js application using the with-shallow-routing example. The create-next-app tool is used to initialize the project structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-shallow-routing with-shallow-routing-app
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app using npm
DESCRIPTION: This command uses npm to create a new Next.js application with the specified example. It clones the 'api-routes-apollo-server-and-client-auth' example into a directory named 'api-routes-apollo-server-and-client-auth-app'. It requires npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client-auth/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app
```

----------------------------------------

TITLE: Generated Module Part and Merged Code - JavaScript
DESCRIPTION: This code block represents a generated module output part (Part 0) or the final merged code for evaluation in both development and production modes. It imports `./lib`, re-exports `cat` as `fakeCat` via an internal `__TURBOPACK__reexport__cat__` variable, and also exports it as `a` using a Turbopack-specific `assert` syntax indicating it's a build variable. It demonstrates the compiled output form of the re-export.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/export-named/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import "./lib";
import { cat as __TURBOPACK__reexport__cat__ } from "./lib";
export { __TURBOPACK__reexport__cat__ as fakeCat };
export { __TURBOPACK__reexport__cat__ as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Initializing Next.js app with Drupal example using npx
DESCRIPTION: This command uses npx to create a new Next.js application named 'cms-drupal-app' based on the 'cms-drupal' example. This will bootstrap a project configured to fetch data from a Drupal backend for static generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-drupal/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-drupal cms-drupal-app
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application using the api-routes-apollo-server example. It bootstraps the project with the necessary dependencies and configurations for integrating Apollo GraphQL.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-apollo-server api-routes-apollo-server-app
```

----------------------------------------

TITLE: Configuring Dependency Bundling in Next.js
DESCRIPTION: This JavaScript code snippet sets the Next.js configuration to enable automatic server-side dependency bundling for Pages Router applications. It is a part of the `next.config.js` file and requires the underlying Next.js environment. The primary setting `bundlePagesRouterDependencies` is set to `true`, enabling this feature. Additionally, there is an option to exclude specific packages from bundling using `serverExternalPackages`. This setup requires a Next.js environment where version 15.0.0 or later is used, which introduced the stable version of this setting.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/bundlePagesRouterDependencies.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  bundlePagesRouterDependencies: true,\n}\n\nmodule.exports = nextConfig
```

----------------------------------------

TITLE: Creating Navigation Blocker Context and Provider (TSX/JS)
DESCRIPTION: Defines a React Context (`NavigationBlockerContext`) to hold the state (`isBlocked`) indicating whether navigation should be blocked and a function (`setIsBlocked`) to update this state. It includes a `Provider` component to wrap the application and a `useNavigationBlocker` hook for easy access to the context value from descendant components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_23

LANGUAGE: tsx
CODE:
```
'use client';

import { createContext, useState, useContext } from 'react';

interface NavigationBlockerContextType {
  isBlocked: boolean;
  setIsBlocked: (isBlocked: boolean) => void;
}

export const NavigationBlockerContext =
  createContext<NavigationBlockerContextType>({
    isBlocked: false,
    setIsBlocked: () => {},
  });

export function NavigationBlockerProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const [isBlocked, setIsBlocked] = useState(false);

  return (
    <NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>
      {children}
    </NavigationBlockerContext.Provider>
  );
}

export function useNavigationBlocker() {
  return useContext(NavigationBlockerContext);
}
```

LANGUAGE: jsx
CODE:
```
'use client';

import { createContext, useState, useContext } from 'react';

export const NavigationBlockerContext = createContext({
  isBlocked: false,
  setIsBlocked: () => {},
});

export function NavigationBlockerProvider({ children }) {
  const [isBlocked, setIsBlocked] = useState(false);

  return (
    <NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>
      {children}
    </NavigationBlockerContext.Provider>
  );
}

export function useNavigationBlocker() {
  return useContext(NavigationBlockerContext);
}
```

----------------------------------------

TITLE: getUser Implementation Stub (Next.js DAL) - TS
DESCRIPTION: This snippet shows the structure of the `getUser` function within the DAL, highlighting that it first calls `verifySession()` to ensure authentication before proceeding with any data fetching logic (indicated by the comment).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_32

LANGUAGE: TS
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  // Get user ID from session and fetch data
})
```

----------------------------------------

TITLE: Exporting Default Middleware Function in Next.js
DESCRIPTION: Example of exporting a middleware function as a default export instead of a named export. This demonstrates an alternative way to define middleware in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// Example of default export
export default function middleware(request) {
  // Middleware logic
}
```

----------------------------------------

TITLE: Creating Next.js App with Reflux Example (npm)
DESCRIPTION: This command uses `create-next-app` with npm to create a new Next.js application based on the `with-reflux` example. It initializes a new project directory named `with-reflux-app` with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflux/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-reflux with-reflux-app
```

----------------------------------------

TITLE: Displaying Form Loading State - JavaScript
DESCRIPTION: This code snippet demonstrates how to display a loading state during form submission in a Next.js component using JavaScript. It uses React state to track the loading state and disables the submit button while loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
import React, { useState } from 'react'

export default function Page() {
  const [isLoading, setIsLoading] = useState(false)

  async function onSubmit(event) {
    event.preventDefault()
    setIsLoading(true) // Set loading to true when the request starts

    try {
      const formData = new FormData(event.currentTarget)
      const response = await fetch('/api/submit', {
        method: 'POST',
        body: formData,
      })

      // Handle response if necessary
      const data = await response.json()
      // ...
    } catch (error) {
      // Handle error if necessary
      console.error(error)
    } finally {
      setIsLoading(false) // Set loading to false when the request completes
    }
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit" disabled={isLoading}>
        {isLoading ? 'Loading...' : 'Submit'}
      </button>
    </form>
  )
}
```

----------------------------------------

TITLE: Importing files with side effects (JavaScript)
DESCRIPTION: This code snippet shows how to import a file with side effects inside the `register` function in `instrumentation.js`. The `import` statement is awaited to ensure the side effects are applied before other code executes. This approach colocates all side effects in one place, preventing unintended global side effects. It imports a hypothetical package named 'package-with-side-effect'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export async function register() {
  await import('package-with-side-effect')
}
```

----------------------------------------

TITLE: Shallow Routing with Page Change in Next.js
DESCRIPTION: This snippet illustrates the limitation of shallow routing when navigating to a new page in Next.js. It shows that shallow routing doesn't work for URL changes that involve loading a new page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
router.push('/?counter=10', '/about?counter=10', { shallow: true })
```

----------------------------------------

TITLE: Creating Next.js app with three.js using npm
DESCRIPTION: This command uses npx to create a new Next.js application with the three.js example. The `create-next-app` command bootstraps the project, setting up the necessary files and dependencies.  It takes the example name (`with-three-js`) and the desired application name (`with-three-js-app`) as arguments.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-three-js/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-three-js with-three-js-app
```

----------------------------------------

TITLE: Implementing Regex Path Matching Next.js JavaScript
DESCRIPTION: This snippet demonstrates using regular expressions within the source path pattern, such as `/blog/:post(\d{1,})`. The regex is wrapped in parentheses after the parameter name and allows for more precise matching based on character patterns.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/blog/:post(\d{1,})',
        headers: [
          {
            key: 'x-post',
            value: ':post',
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Run Codemod to Migrate withAmp HOC
DESCRIPTION: Command to automatically migrate the deprecated `withAmp` Higher-Order Component usage to the new page-level `config` export using the Next.js codemod tool (`jscodeshift`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
curl -L https://github.com/vercel/next-codemod/archive/master.tar.gz | tar -xz --strip=2 next-codemod-master/transforms/withamp-to-config.js npx jscodeshift -t ./withamp-to-config.js pages/**/*.js
```

----------------------------------------

TITLE: Importing Components with External Styles
DESCRIPTION: This snippet demonstrates importing a dialog component that requires its own external CSS styles, showcasing how to structure imports in related files.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import { useState } from 'react'
import { Dialog } from '@reach/dialog'
import VisuallyHidden from '@reach/visually-hidden'
import '@reach/dialog/styles.css'

function ExampleDialog(props) {
  const [showDialog, setShowDialog] = useState(false)
  const open = () => setShowDialog(true)
  const close = () => setShowDialog(false)

  return (
    <div>
      <button onClick={open}>Open Dialog</button>
      <Dialog isOpen={showDialog} onDismiss={close}>
        <button className="close-button" onClick={close}>
          <VisuallyHidden>Close</VisuallyHidden>
          <span aria-hidden>×</span>
        </button>
        <p>Hello there. I am a dialog</p>
      </Dialog>
    </div>
  )
}
```

----------------------------------------

TITLE: Defining MDX Components with useMDXComponents in JavaScript
DESCRIPTION: This JavaScript code snippet defines a function `useMDXComponents` that accepts an object of MDX components and returns a new object with the provided components merged with the existing ones. The function is exported for use in a Next.js application. No explicit type definitions are used here.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/mdx-components.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export function useMDXComponents(components) {
  return {
    ...components,
  }
}
```

----------------------------------------

TITLE: Using worker Strategy (Pages Router, TSX)
DESCRIPTION: This code snippet illustrates using the `worker` strategy with the `Script` component in a Next.js application using the Pages Router. It offloads the script to a web worker to free up the main thread. Note: This strategy is experimental and requires enabling `nextScriptWorkers` in `next.config.js`. It only currently works in the `pages/` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function Home() {
  return (
    <>
      <Script src="https://example.com/script.js" strategy="worker" />
    </>
  )
}
```

----------------------------------------

TITLE: Enabling Experimental Rust MDX Compiler
DESCRIPTION: Configures the Next.js build to use the experimental Rust-based MDX compiler by setting the `mdxRs` flag within the `experimental` configuration object passed to `withMDX`. This is for `next.config.js` (CJS).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_24

LANGUAGE: javascript
CODE:
```
module.exports = withMDX({
  experimental: {
    mdxRs: true,
  },
})
```

----------------------------------------

TITLE: Creating a Custom HTTP Server with Next.js in TypeScript
DESCRIPTION: This snippet demonstrates how to create a standard Node.js HTTP server and integrate it with a Next.js application instance. It initializes the Next.js app, waits for it to prepare, and then uses its request handler (`app.getRequestHandler()`) to process incoming requests received by the custom HTTP server, parsing the URL for handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { createServer } from 'http';
import { parse } from 'url';
import next from 'next';

const port = parseInt(process.env.PORT || '3000', 10);
const dev = process.env.NODE_ENV !== 'production';
const app = next({ dev });
const handle = app.getRequestHandler();

app.prepare().then(() => {
  createServer((req, res) => {
    const parsedUrl = parse(req.url!, true);
    handle(req, res, parsedUrl);
  }).listen(port);

  console.log(
    `> Server listening at http://localhost:${port} as ${
      dev ? 'development' : process.env.NODE_ENV
    }`
  );
});
```

----------------------------------------

TITLE: Enabling Lightning CSS in Next.js with JavaScript
DESCRIPTION: Configuration for enabling Lightning CSS in a Next.js project using JavaScript. This snippet demonstrates how to set the useLightningcss experimental flag to true in the Next.js configuration file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/useLightningcss.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    useLightningcss: true,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Executing name-default-component Codemod in Next.js
DESCRIPTION: This codemod transforms anonymous components into named components to ensure compatibility with Fast Refresh. It works for both function and arrow function components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
npx @next/codemod name-default-component
```

----------------------------------------

TITLE: Configure Sanity API Read Token
DESCRIPTION: This code snippet shows how to add a SANITY_API_READ_TOKEN to a local environment file. It is used for authenticating live previews. Requires access to manage.sanity.io to generate the token. The setup ensures secure access to Sanity API features in development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
SANITY_API_READ_TOKEN="<paste your token here>"
```

----------------------------------------

TITLE: Creating Dynamic URL in JavaScript (Turbopack Linting)
DESCRIPTION: This snippet demonstrates creating a URL object using the `new URL()` constructor in JavaScript. The use of a dynamic variable (`unknown`) as the first argument triggers a Turbopack linting suggestion (TP1201), indicating that the resulting URL is not statically determinable, potentially impacting build optimizations. The second argument, `import.meta.url`, provides the base URL relative to which the first argument is resolved.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1201__ new URL(FreeVar(Math)[__quo__r-d4bcb9.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
new URL(unknown, import.meta.url)
```

----------------------------------------

TITLE: Running Next.js in Development Mode (Yarn)
DESCRIPTION: This command starts the Next.js application in development mode using Yarn. It allows developers to preview and test the application locally before deployment. The app will typically run on http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Disabling Nginx Buffering for Streaming in next.config.js (JavaScript)
DESCRIPTION: Configures Next.js to add the `X-Accel-Buffering: no` header to all responses via the `headers` function in `next.config.js`. This prevents proxy servers like Nginx from buffering the response, enabling streaming support for the App Router. Applies globally to all matched routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/:path*{/}?',
        headers: [
          {
            key: 'X-Accel-Buffering',
            value: 'no',
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Copying Static and Public Assets for Standalone Deployment (Bash)
DESCRIPTION: Copies the `public` directory and the `.next/static` directory into the `.next/standalone` directory after running `next build`. This makes static assets and built static pages available to the minimal `server.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
cp -r public .next/standalone/ && cp -r .next/static .next/standalone/.next/
```

----------------------------------------

TITLE: JSX Chart component usage
DESCRIPTION: This JSX snippet demonstrates how to use the imported Chart component within a Next.js application.  It sets the 'year' property of the Chart component to the value of the 'year' variable (2018) and the 'color' property to "#fcb32c".
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack/tests/node-file-trace/integration/mdx/example.mdx#2025-04-21_snippet_1

LANGUAGE: JSX
CODE:
```
<Chart year={year} color="#fcb32c" />
```

----------------------------------------

TITLE: Using withRouter with TypeScript in Next.js (TSX)
DESCRIPTION: This snippet demonstrates how to use `withRouter` with a class component in TypeScript. It defines interfaces for the component's props, including a `router` prop of type `NextRouter`, ensuring type safety when accessing the router object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_18

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { withRouter, NextRouter } from 'next/router'

interface WithRouterProps {
  router: NextRouter
}

interface MyComponentProps extends WithRouterProps {}

class MyComponent extends React.Component<MyComponentProps> {
  render() {
    return <p>{this.props.router.pathname}</p>
  }
}

export default withRouter(MyComponent)
```

----------------------------------------

TITLE: Installing TypeScript Type Definitions (npm)
DESCRIPTION: This command installs type definitions for React, React DOM, and Node.js as development dependencies using npm. These definitions provide type checking and autocompletion for these libraries when using TypeScript.  The `--save-dev` flag ensures they're added to `devDependencies` in `package.json`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_6

LANGUAGE: shell
CODE:
```
npm install --save-dev @types/react @types/react-dom @types/node
```

----------------------------------------

TITLE: Adding Type Safety for Viewport Object in TypeScript
DESCRIPTION: This snippet shows how to add type safety to a viewport object in TypeScript by importing the Viewport type from Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
import type { Viewport } from 'next'

export const viewport: Viewport = {
  themeColor: 'black',
}
```

----------------------------------------

TITLE: Next.js Image Config (Wildcard Hostname)
DESCRIPTION: This code snippet demonstrates using a wildcard pattern for the hostname in `remotePatterns` within the `next.config.js` file. It enables loading images from any subdomain of example.com.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**.example.com',
        port: '',
        search: '',
      },
    ],
  },
}
```

----------------------------------------

TITLE: Creating a Next.js App with Agility CMS Example
DESCRIPTION: This snippet demonstrates how to create a new Next.js application using the `create-next-app` command and the `cms-agilitycms` example. It provides three different package managers (npm, Yarn, pnpm) for the command. The example assumes the user has a working installation of Node.js and a package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-agilitycms cms-agilitycms-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-agilitycms cms-agilitycms-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-agilitycms cms-agilitycms-app
```

----------------------------------------

TITLE: Demonstrating Markdown for Styling Context Example
DESCRIPTION: Provides a simple Markdown example containing a heading and a list, used to illustrate how Markdown elements map to standard HTML tags (`<h2>`, `<p>`, `<ul>`, `<li>`) for the purpose of applying custom styles or components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_15

LANGUAGE: md
CODE:
```
## This is a heading

This is a list in markdown:

- One
- Two
- Three
```

----------------------------------------

TITLE: Defining Global CSS styles in CSS
DESCRIPTION: This CSS snippet defines global styles for the `body` element, setting font family, padding, max-width, and margin. It is meant to be used as a global stylesheet for a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/css-global.mdx#2025-04-21_snippet_0

LANGUAGE: css
CODE:
```
"body {\n  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',\n    'Arial', sans-serif;\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}"
```

----------------------------------------

TITLE: Example Usage of unstable_cache in Next.js TSX Page Component
DESCRIPTION: This snippet provides a full example of using unstable_cache within a Next.js TSX App Router page component. It defines a cached function that returns user data, using the userId from the page parameters as part of the cache key, and includes options for tags and revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_cache.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { unstable_cache } from 'next/cache'

export default async function Page({
  params,
}: {
  params: Promise<{ userId: string }>
}) {
  const { userId } = await params
  const getCachedUser = unstable_cache(
    async () => {
      return { id: userId }
    },
    [userId], // add the user ID to the cache key
    {
      tags: ['users'],
      revalidate: 60,
    }
  )

  //...
}
```

----------------------------------------

TITLE: Creating Playwright tests with MSW
DESCRIPTION: This snippet demonstrates how to use MSW (Mock Service Worker) with Playwright in Next.js's experimental test mode to mock HTTP requests. It defines a test that sets up MSW handlers to intercept requests to `http://my-db/product/shoe` and return a mock JSON response, while allowing other requests to passthrough.  It also shows how to override MSW handlers within a specific test.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import {
  test,
  expect,
  http,
  HttpResponse,
  passthrough,
} from 'next/experimental/testmode/playwright/msw'

test.use({
  mswHandlers: [
    [
      http.get('http://my-db/product/shoe', () => {
        return HttpResponse.json({
          title: 'A shoe',
        })
      }),
      // allow all non-mocked routes to pass through
      http.all('*', () => {
        return passthrough()
      }),
    ],
    { scope: 'test' }, // or 'worker'
  ],
})

test('/product/shoe', async ({ page, msw }) => {
  msw.use(
    http.get('http://my-db/product/boot', () => {
      return HttpResponse.json({
        title: 'A boot',
      })
    })
  )

  await page.goto('/product/boot')

  await expect(page.locator('body')).toHaveText(/Boot/)
})
```

----------------------------------------

TITLE: Configuring CircleCI Cache for Next.js Builds
DESCRIPTION: This YAML configuration for CircleCI includes the Next.js cache directory in the save_cache step. It saves both node_modules and the Next.js cache, improving build performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
steps:
  - save_cache:
      key: dependency-cache-{{ checksum "yarn.lock" }}
      paths:
        - ./node_modules
        - ./.next/cache
```

----------------------------------------

TITLE: GraphQL Mesh Configuration
DESCRIPTION: This YAML configuration file specifies the PetStore REST API as a source for GraphQL Mesh.  It uses the `newOpenapi` handler to translate the OpenAPI specification into a GraphQL schema. `baseUrl` defines the base URL of the API, and `oasFilePath` points to the OpenAPI specification file.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md#_snippet_0

LANGUAGE: yaml
CODE:
```
sources:
  - name: PetStore
    handler:
      newOpenapi:
        baseUrl: https://petstore.swagger.io/v2/
        oasFilePath: https://petstore.swagger.io/v2/swagger.json
```

----------------------------------------

TITLE: Invalid Config: Re-export - Next.js JavaScript
DESCRIPTION: This code snippet shows an invalid `config` because it is re-exported from another module. The `config` object must be directly defined in the current module.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
// Re-exported `config` is not allowed
export { config } from '../config'
```

----------------------------------------

TITLE: Non-Conflicting Folder Structure - Bash
DESCRIPTION: Example illustrating a directory structure where a public file (`public/hello.txt`) does not conflict with a page file (`pages/hello.js`) because their paths differ, allowing both to coexist in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-public-file-page.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
public/
  hello.txt
pages/
  hello.js
```

----------------------------------------

TITLE: Configuring Archives Link Metadata in Next.js (JSX & HTML)
DESCRIPTION: Configures a link tag pointing to an archive of previous versions or related historical content using the `metadata.archives` property. It accepts an array of URLs. This generates a `<link rel="archives">` tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_24

LANGUAGE: JSX
CODE:
```
export const metadata = {
  archives: ['https://nextjs.org/13'],
}
```

LANGUAGE: HTML
CODE:
```
<link rel="archives" href="https://nextjs.org/13" />
```

----------------------------------------

TITLE: Designing Loading UI in Next.js JavaScript
DESCRIPTION: This JavaScript snippet shows a simple loading UI component for use in a Next.js application. It is used to provide feedback while data fetch is ongoing, typically during asynchronous operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_9

LANGUAGE: JavaScript
CODE:
```
export default function Loading() {
  return <div>Loading...</div>
}
```

----------------------------------------

TITLE: Configuring Next.js for URL Imports
DESCRIPTION: This code snippet shows how to configure Next.js to allow importing modules from specified external URL prefixes by modifying the `next.config.js` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  experimental: {
    urlImports: ['https://example.com/assets/', 'https://cdn.skypack.dev'],
  },
};
```

----------------------------------------

TITLE: Using Bundle Analyzer with next-compose-plugins
DESCRIPTION: Configuration method for integrating bundle analyzer with next-compose-plugins from version 2.0.0
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const withPlugins = require('next-compose-plugins')
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
})

module.exports = withPlugins([
  [withBundleAnalyzer],
  // your other plugins here
])
```

----------------------------------------

TITLE: Using notFound in Fetch Call - TypeScript
DESCRIPTION: This snippet demonstrates how to use the notFound function in a fetch call to handle 404 errors within a try/catch block. When a 404 response is detected, it calls notFound() to render the not-found.js component, but this is caught inside the catch block, preventing the expected behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_rethrow.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
```tsx
import { notFound } from 'next/navigation'

export default async function Page() {
  try {
    const post = await fetch('https://.../posts/1').then((res) => {
      if (res.status === 404) notFound()
      if (!res.ok) throw new Error(res.statusText)
      return res.json()
    })
  } catch (err) {
    console.error(err)
  }
}
```
```

----------------------------------------

TITLE: Using getStaticProps for Data Fetching in Next.js
DESCRIPTION: Illustrates how to use getStaticProps for data fetching when using next export or output: 'export' in next.config.js. It fetches data from an API and includes a revalidation period.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
export async function getStaticProps() {
  const res = await fetch('https://api.vercel.app/blog')
  const data = await res.json()

  return {
    props: { data },
    revalidate: 60,
  }
}
```

----------------------------------------

TITLE: Disabling Automatic Locale Detection in i18n Config
DESCRIPTION: This simple `next.config.js` snippet shows how to disable Next.js's automatic locale detection feature. Setting `localeDetection` to `false` prevents Next.js from redirecting users based on the `Accept-Language` header; locale information will only be derived from the URL path or domain.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_5

LANGUAGE: js
CODE:
```
module.exports = {
  i18n: {
    localeDetection: false,
  },
}
```

----------------------------------------

TITLE: Preventing Duplicate Meta Tags using Key Prop - JSX
DESCRIPTION: This code shows how to prevent duplicate meta tags within the `<head>` of a Next.js page by utilizing the `key` property.  When multiple `<Head>` components define the same meta tag with the same `key`, only the last one is rendered. This avoids conflicts and ensures the desired meta information is present.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/head.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Head from 'next/head'

function IndexPage() {
  return (
    <div>
      <Head>
        <title>My page title</title>
        <meta property="og:title" content="My page title" key="title" />
      </Head>
      <Head>
        <meta property="og:title" content="My new title" key="title" />
      </Head>
      <p>Hello world!</p>
    </div>
  )
}

export default IndexPage
```

----------------------------------------

TITLE: Configuring TypeScript Error Handling in Next.js Configuration
DESCRIPTION: This code snippet demonstrates how to disable TypeScript error checking during the Next.js build process by modifying the next.config.js file. The configuration sets the ignoreBuildErrors flag to true, which allows production builds to complete even when type errors exist.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/typescript.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  typescript: {
    // !! WARN !!
    // Dangerously allow production builds to successfully complete even if
    // your project has type errors.
    // !! WARN !!
    ignoreBuildErrors: true,
  },
}
```

----------------------------------------

TITLE: Creating a Next.js Auth0 App with pnpm
DESCRIPTION: Command to bootstrap a Next.js application with Auth0 integration using pnpm and create-next-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example auth0 auth0-app
```

----------------------------------------

TITLE: Initializing Next.js app with Stripe TypeScript example (npm)
DESCRIPTION: This command initializes a new Next.js application using the `with-stripe-typescript` example from the Next.js repository. It uses `create-next-app` via `npx` to bootstrap the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-stripe-typescript with-stripe-typescript-app
```

----------------------------------------

TITLE: Creating Next.js app with next-translate using pnpm
DESCRIPTION: This command employs pnpm to initiate a new Next.js application, integrating the next-translate example. It configures the project with the specified example and provides a name for the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-translate/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-next-translate with-next-translate-app
```

----------------------------------------

TITLE: Passing --throw-deprecation Node.js Option to Next.js (Bash)
DESCRIPTION: This command demonstrates how to pass Node.js command-line options to the Next.js process by setting the `NODE_OPTIONS` environment variable before executing a `next` command. This specific example passes the `--throw-deprecation` flag to make deprecation warnings throw errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
NODE_OPTIONS='--throw-deprecation' next
```

----------------------------------------

TITLE: Corrected PostCSS Configuration (instantiated)
DESCRIPTION: This code snippet shows the corrected PostCSS configuration for the previous incorrect example. It properly nests the plugin name and configuration within an array.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins: [
    // Pay attention to this nested array. The first index is the plugin name,
    // the second index is the configuration.
    [
      'postcss-plugin',
      {
        optionA: '...',
      },
    ],
  ],
}
```

----------------------------------------

TITLE: Enable Hybrid AMP Page in Next.js (JSX)
DESCRIPTION: This code snippet demonstrates enabling hybrid AMP mode using the `config` export and `useAmp` hook. Setting `amp: 'hybrid'` allows serving both HTML and AMP versions of the page, accessible via the `?amp=1` query parameter.  The `useAmp` hook determines the current mode (AMP or HTML).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-amp.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { useAmp } from 'next/amp'

export const config = { amp: 'hybrid' }

function About(props) {
  const isAmp = useAmp()

  return (
    <div>
      <h3>My AMP About Page!</h3>
      {isAmp ? (
        <amp-img
          width="300"
          height="300"
          src="/my-img.jpg"
          alt="a cool image"
          layout="responsive"
        />
      ) : (
        <img width="300" height="300" src="/my-img.jpg" alt="a cool image" />
      )}
    </div>
  )
}

export default About
```

----------------------------------------

TITLE: Creating Next.js app with Reflexjs using npx
DESCRIPTION: This command uses npx to execute create-next-app with the with-reflexjs example. It creates a new Next.js application named with-reflexjs-app with Reflexjs pre-configured. This requires Node.js and npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflexjs/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-reflexjs with-reflexjs-app
```

----------------------------------------

TITLE: Creating Next.js App with Kontent.ai Example (pnpm)
DESCRIPTION: This command uses the `create next-app` utility with pnpm to bootstrap a new Next.js application using the `cms-kontent-ai` example. It creates a new directory named `cms-kontent-app` containing the project files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-kontent-ai cms-kontent-app
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the 'with-mobx' example. It bootstraps the project with the necessary dependencies and configuration for integrating MobX with Next.js. The `with-mobx-app` argument specifies the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mobx with-mobx-app
```

----------------------------------------

TITLE: Creating Next.js app with EdgeDB example - Bash
DESCRIPTION: This command creates a new Next.js application using the `with-edgedb` example.  It uses `create-next-app` to bootstrap the project with the specified example and project name. The resulting project will be located in the `with-edgedb-app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-edgedb with-edgedb-app
```

----------------------------------------

TITLE: Setting Up Environment Variables
DESCRIPTION: Shows the structure of the `.env.local` file needed to connect with the Prepr API. Includes placeholders for production and preview tokens and a preview secret.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
PREPRIO_API=https://graphql.prepr.io/graphql
PREPRIO_PRODUCTION_TOKEN='your Production access token'
PREPRIO_PREVIEW_TOKEN='your Preview access token'
PREPRIO_PREVIEW_SECRET='your secret id'
```

----------------------------------------

TITLE: Convert Base64 to Uint8Array - TypeScript
DESCRIPTION: This function converts a base64 string to a Uint8Array, which is required for the applicationServerKey when subscribing to push notifications. It handles padding and replaces URL-safe characters before decoding the base64 string using the window.atob() method. The resulting raw data is then converted to a Uint8Array and returned.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
function urlBase64ToUint8Array(base64String: string) {
  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')

  const rawData = window.atob(base64)
  const outputArray = new Uint8Array(rawData.length)

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}
```

----------------------------------------

TITLE: Extending Webpack Alias in Next.js
DESCRIPTION: This code snippet demonstrates how to correctly extend the webpack alias configuration in `next.config.js` instead of replacing it. This ensures that Next.js' internal aliases, such as 'private-next-pages', are not inadvertently removed, preventing the 'Invalid webpack resolve alias' error.  It takes the existing `config` object as input and modifies its `resolve.alias` property by merging the existing aliases with the new custom aliases.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/config-resolve-alias.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
"webpack(config) {\n  config.resolve.alias = {\n    ...config.resolve.alias,\n    // your aliases\n  }\n}"
```

----------------------------------------

TITLE: Identifying React Fragment Elements
DESCRIPTION: Shows how to check if an element is a React Fragment using isFragment and how to verify its type using typeOf against the ReactIs.Fragment constant.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
import React from "react";
import * as ReactIs from 'react-is';

ReactIs.isFragment(<></>); // true
ReactIs.typeOf(<></>) === ReactIs.Fragment; // true
```

----------------------------------------

TITLE: Copying .env.local.example to .env.local
DESCRIPTION: This command copies the example environment variable file to a local environment file.  This allows users to define local environment variables for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Creating Next.js App with Facebook Pixel Example (npm)
DESCRIPTION: This command initializes a new Next.js application using the `with-facebook-pixel` example from the Next.js repository. It utilizes `create-next-app` via `npx` to bootstrap the project. The resulting application, `with-facebook-pixel-app`, includes the necessary configuration for Facebook Pixel integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-facebook-pixel with-facebook-pixel-app
```

----------------------------------------

TITLE: Next.js ESM Configuration Setup
DESCRIPTION: Demonstrates how to configure Next.js using ECMAScript modules with .mjs extension.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// @ts-check

/**
 * @type {import('next').NextConfig}
 */
const nextConfig = {
  /* config options here */
}

export default nextConfig
```

----------------------------------------

TITLE: Installing Sharp via pnpm
DESCRIPTION: This command installs the Sharp library using pnpm, necessary for image optimization when running Next.js in production mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-missing-in-production.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm add sharp
```

----------------------------------------

TITLE: Configuring MDX Plugins for Turbopack - ESM
DESCRIPTION: Configures `@next/mdx` in `next.config.mjs` to specify remark or rehype plugins using their string names. This approach is compatible with Turbopack, which has limitations on serializable options for plugins.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_18

LANGUAGE: javascript
CODE:
```
import createMDX from '@next/mdx'

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],
}

const withMDX = createMDX({
  options: {
    remarkPlugins: [],
    rehypePlugins: [['rehype-katex', { strict: true, throwOnError: true }]],
  },
})

export default withMDX(nextConfig)
```

----------------------------------------

TITLE: Lazy Loading with next/dynamic (Pages Router)
DESCRIPTION: This code snippet demonstrates lazy loading in the `pages` directory using `next/dynamic`. It shows how to import a component dynamically and display a fallback UI using the `loading` option of `next/dynamic`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const DynamicHeader = dynamic(() => import('../components/header'), {
  loading: () => <p>Loading...</p>,
})

export default function Home() {
  return <DynamicHeader />
}
```

----------------------------------------

TITLE: Creating Next.js app with Plausible using npx
DESCRIPTION: This command initializes a new Next.js application with the Plausible analytics example. It uses `create-next-app` via `npx` to bootstrap the project with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-plausible/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-plausible with-plausible-app
```

----------------------------------------

TITLE: Creating Next.js app with Emotion (npm)
DESCRIPTION: This command uses npm to create a new Next.js application pre-configured with Emotion. It leverages the `create-next-app` tool and specifies the `with-emotion-swc` example. The new app will be created in a directory named `with-emotion-swc-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-emotion/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-emotion-swc with-emotion-swc-app
```

----------------------------------------

TITLE: Import Module: ResponseCookies - Next.js - JS
DESCRIPTION: Imports the module located at './cookies'. This module is expected to export the `ResponseCookies` class, which manages cookies specifically for outgoing responses by interacting with the headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { ResponseCookies } from './cookies';
```

----------------------------------------

TITLE: Ignoring Incoming Requests from Logging
DESCRIPTION: Configures Next.js to ignore certain incoming requests from being logged in development mode. Specify URL patterns to ignore using `logging.incomingRequests.ignore`. The snippet includes ignoring health checks in API v1.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/logging.mdx#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  logging: {
    incomingRequests: {
      ignore: [/\api\/v1\/health/],
    },
  },
}
```

----------------------------------------

TITLE: Configuring Bundle Analyzer as a Function
DESCRIPTION: Alternative configuration method for next.config.js using a function-based approach
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = (phase, defaultConfig) => {
  return withBundleAnalyzer(defaultConfig)
}
```

----------------------------------------

TITLE: Migrating ImageResponse Imports in Next.js
DESCRIPTION: Codemod to move imports for ImageResponse from 'next/server' to 'next/og' for Dynamic OG Image Generation in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_5

LANGUAGE: js
CODE:
```
import { ImageResponse } from 'next/server'
```

LANGUAGE: js
CODE:
```
import { ImageResponse } from 'next/og'
```

----------------------------------------

TITLE: Defining Multiline Environment Variables in .env (Next.js)
DESCRIPTION: Next.js supports multiline environment variables in `.env` files. These can be defined using actual line breaks or `\n` within double quotes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
# .env

# you can write with line breaks
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----
...
Kh9NV...
...
-----END DSA PRIVATE KEY-----"

# or with `\n` inside double quotes
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\nKh9NV...\n-----END DSA PRIVATE KEY-----\n"
```

----------------------------------------

TITLE: Create Next.js App with Meilisearch Example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-meilisearch example. It bootstraps the project with the necessary configurations for Meilisearch integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-meilisearch/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-meilisearch with-meilisearch-app
```

----------------------------------------

TITLE: Implementing Graceful Shutdown Handlers in _document.js (JavaScript)
DESCRIPTION: Registers signal handlers for `SIGTERM` and `SIGINT` within `pages/_document.js`, conditionally running only if `NEXT_MANUAL_SIG_HANDLE` is true. These handlers execute cleanup logic and then exit the process gracefully upon receiving the signals. Requires the environment variable to be set externally.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
if (process.env.NEXT_MANUAL_SIG_HANDLE) {
  process.on('SIGTERM', () => {
    console.log('Received SIGTERM: cleaning up')
    process.exit(0)
  })
  process.on('SIGINT', () => {
    console.log('Received SIGINT: cleaning up')
    process.exit(0)
  })
}
```

----------------------------------------

TITLE: Using Components in Page (TSX/JS)
DESCRIPTION: A sample page component (`app/page.tsx`/`.js`) that imports and renders the `Nav` and `Form` components. This demonstrates how the different pieces of the navigation blocking mechanism are composed together on a page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_28

LANGUAGE: tsx
CODE:
```
import Nav from './components/nav';
import Form from './components/form';

export default function Page() {
  return (
    <div>
      <Nav />
      <main>
        <h1>Welcome to the Dashboard</h1>
        <Form />
      </main>
    </div>
  );
}
```

LANGUAGE: jsx
CODE:
```
import Nav from './components/nav';
import Form from './components/form';

export default function Page() {
  return (
    <div>
      <Nav />
      <main>
        <h1>Welcome to the Dashboard</h1>
        <Form />
      </main>
    </div>
  );
}
```

----------------------------------------

TITLE: Creating Next.js App with ESLint using yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application named 'with-eslint-app' with ESLint pre-configured. It uses the 'with-eslint' example from the create-next-app tool.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-eslint/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-eslint with-eslint-app
```

----------------------------------------

TITLE: Creating Next.js App with Ant Design using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the Ant Design example template. It utilizes `create next-app` to bootstrap the project with specified example and application name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ant-design/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-ant-design with-ant-design-app
```

----------------------------------------

TITLE: Create Pages Router Home Page (Pages Router)
DESCRIPTION: Defines the home page component (`pages/index.tsx` or `pages/index.js`) for applications using the Pages Router. This component is located in the `pages` directory and serves as the root route (`/`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Installing MDX Dependencies with npm
DESCRIPTION: Installation command for MDX dependencies using npm package manager for Next.js projects
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @next/mdx @mdx-js/loader @mdx-js/react
```

----------------------------------------

TITLE: Installing OpenTelemetry packages for manual configuration
DESCRIPTION: Installs the required OpenTelemetry packages for manual configuration in a Next.js application. This includes `@opentelemetry/sdk-node`, `@opentelemetry/resources`, `@opentelemetry/semantic-conventions`, `@opentelemetry/sdk-trace-node`, and `@opentelemetry/exporter-trace-otlp-http`. These packages are essential for setting up OpenTelemetry without using the `@vercel/otel` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npm install @opentelemetry/sdk-node @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-trace-node @opentelemetry/exporter-trace-otlp-http
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses npm to create a new Next.js application with the react-native-web example. It sets up the project with the necessary dependencies and configurations for using React Native Web in a Next.js environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-native-web/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-native-web with-react-native-web-app
```

----------------------------------------

TITLE: Importing runtime-specific code (JavaScript)
DESCRIPTION: This code snippet demonstrates conditionally importing code based on the Next.js runtime environment (Node.js or Edge). It uses the `NEXT_RUNTIME` environment variable to determine the current runtime and imports the corresponding instrumentation file. The files 'instrumentation-node' and 'instrumentation-edge' are assumed to contain runtime-specific instrumentation logic. This is done within the `register` function in `instrumentation.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    await import('./instrumentation-node')
  }

  if (process.env.NEXT_RUNTIME === 'edge') {
    await import('./instrumentation-edge')
  }
}
```

----------------------------------------

TITLE: Configuring Next.js with next-rspack
DESCRIPTION: This snippet shows how to update the next.config.js or next.config.ts file to integrate next-rspack into a Next.js project. The existing configuration is wrapped with the withRspack function to enable Rspack.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-rspack/README.md#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
const withRspack = require('next-rspack')

/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
}

module.exports = withRspack(nextConfig)
```

----------------------------------------

TITLE: Manually Upgrading Next.js and React Dependencies
DESCRIPTION: Manually updates Next.js, React, React DOM, and ESLint configuration to their latest versions using npm. This approach requires you to handle any breaking changes yourself.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-upgrading.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm i next@latest react@latest react-dom@latest eslint-config-next@latest
```

----------------------------------------

TITLE: Subscribing to router events
DESCRIPTION: This code snippet shows how to subscribe to Next.js router events using `router.events.on`. It uses `useEffect` to register an event handler for `routeChangeStart` and logs information about the route change. The handler is unsubscribed in the effect's cleanup function to prevent memory leaks.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_12

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react'
import { useRouter } from 'next/router'

export default function MyApp({ Component, pageProps }) {
  const router = useRouter()

  useEffect(() => {
    const handleRouteChange = (url, { shallow }) => {
      console.log(
        `App is changing to ${url} ${
          shallow ? 'with' : 'without'
        } shallow routing`
      )
    }

    router.events.on('routeChangeStart', handleRouteChange)

    // If the component is unmounted, unsubscribe
    // from the event with the `off` method:
    return () => {
      router.events.off('routeChangeStart', handleRouteChange)
    }
  }, [router])

  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: Inline Script using dangerouslySetInnerHTML
DESCRIPTION: This code snippet demonstrates how to use an inline script with the Script component by using the `dangerouslySetInnerHTML` prop. Requires `next/script` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
<Script
  id="show-banner"
  dangerouslySetInnerHTML={{
    __html: `document.getElementById('banner').classList.remove('hidden')`,
  }}
/>
```

----------------------------------------

TITLE: createContext Usage in Server Component (Before)
DESCRIPTION: This code snippet shows the incorrect usage of `createContext` in a Next.js Server Component. Server Components cannot use `createContext` directly.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/context-in-server-component.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { createContext } from 'react'

const Context = createContext()
```

----------------------------------------

TITLE: Accessing Request Object in getServerSideProps (Pages Directory - JSX)
DESCRIPTION: Shows how to access the Node.js `req` object and its properties, such as headers and cookies, within the context argument provided to the `getServerSideProps` function in the `pages` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_18

LANGUAGE: jsx
CODE:
```
// `pages` directory\n\nexport async function getServerSideProps({ req, query }) {\n  const authHeader = req.getHeaders()['authorization'];\n  const theme = req.cookies['theme'];\n\n  return { props: { ... }}\n}\n\nexport default function Page(props) {\n  return ...\n}
```

----------------------------------------

TITLE: Starting Next.js in production mode
DESCRIPTION: This JavaScript code snippet demonstrates how to check the `NODE_ENV` environment variable in `server.js` to determine whether to start Next.js in development or production mode.  It initializes the `dev` variable based on the environment and passes it to the `next()` function. This ensures that Next.js uses the correct configuration for the environment it is running in.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/build-dir-not-writeable.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
```

----------------------------------------

TITLE: Importing Global Stylesheet in Custom App (Pages Router - TSX)
DESCRIPTION: This TypeScript code imports the global stylesheet to apply Tailwind CSS styles to every route in the Next.js application within the Pages router. It defines the custom App component and imports the globals.css file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/02-tailwind-css.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
"// These styles apply to every route in the application
import '@/styles/globals.css'
import type { AppProps } from 'next/app'

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}"
```

----------------------------------------

TITLE: Enabling CSS Chunking in Next.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to enable CSS chunking in a Next.js application using the `experimental.cssChunking` option within the `next.config.js` file. The default value is `true`, which merges CSS files to reduce the number of chunks and requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/cssChunking.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    cssChunking: true, // default
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Importing Fonts Using Path Alias in Next.js
DESCRIPTION: Example of importing font definitions using the configured path alias. This approach simplifies imports by using the @/fonts alias instead of relative paths.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
import { greatVibes, sourceCodePro400 } from '@/fonts'
```

LANGUAGE: jsx
CODE:
```
import { greatVibes, sourceCodePro400 } from '@/fonts'
```

----------------------------------------

TITLE: Retrieving Database URL and Creating Auth Token
DESCRIPTION: Instructions for fetching the database URL and creating an authorization token, essential for deploying the application on Vercel. The URL is used as an environment variable `TURSO_DB_URL`, while the auth token is assigned to `TURSO_DB_TOKEN` during deployment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
turso db show <database-name> --url
```

LANGUAGE: bash
CODE:
```
turso db tokens create <database-name>
```

----------------------------------------

TITLE: Initializing Web Vitals Reporting in Pages Router (Basic)
DESCRIPTION: This snippet demonstrates the basic usage of the `useReportWebVitals` hook within the `_app.js` file in a Next.js Pages Router application. It initializes the reporting mechanism and logs each collected performance metric to the console as it becomes available.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useReportWebVitals } from 'next/web-vitals'

function MyApp({ Component, pageProps }) {
  useReportWebVitals((metric) => {
    console.log(metric)
  })

  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: Creating Next.js app with Stencil example using npx
DESCRIPTION: This command uses `npx` to create a new Next.js application based on the `with-stencil` example.  It initializes a project named `with-stencil-app` using the specified example from the Next.js repository. It requires Node.js and npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-stencil with-stencil-app
```

----------------------------------------

TITLE: Creating Next.js app with GraphQL-React example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the `with-graphql-react` example. It initializes a project named `with-graphql-react-app` with all necessary dependencies and configurations for GraphQL-React integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-react/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-graphql-react with-graphql-react-app
```

----------------------------------------

TITLE: Configuring Dynamic Code Evaluation in Next.js
DESCRIPTION: This code snippet shows how to configure Next.js to allow specific files to ignore dynamic code evaluation checks using an unstable configuration setting. The key parameter is the 'unstable_allowDynamic' configuration, which lists file paths or glob patterns. This allows certain static analysis checks to be bypassed, especially when dynamic code is inaccessible during runtime. This configuration is crucial to prevent unintended runtime errors on Edge platforms while maintaining flexibility in code structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/edge-dynamic-code-evaluation.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export const config = {\n  unstable_allowDynamic: [\n    '/lib/utilities.js', // allows a single file\n    '**/node_modules/function-bind/**', // use a glob to allow anything in the function-bind 3rd party module\n  ],\n}
```

----------------------------------------

TITLE: Customizing Document in Next.js
DESCRIPTION: This snippet demonstrates how to extend the default Document component in a Next.js application by importing components from next/document instead of next/head. It illustrates how to structure an overridden _document.js file to ensure consistent modifications to the <head> tag across all pages. Dependencies include Next.js, with prerequisites being a basic understanding of React components. The expected output is seamless rendering of custom head elements across pages without unforeseen issues.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-head-import-in-document.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  static async getInitialProps(ctx) {
    //...
  }

  render() {
    return (
      <Html>
        <Head></Head>
      </Html>
    )
  }
}

export default MyDocument
```

----------------------------------------

TITLE: Initializing Next.js app with React Toolbox (pnpm)
DESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with the React Toolbox example.  It uses pnpm as the package manager.  This sets up a new Next.js project with all the required dependencies and configuration for the React Toolbox example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-toolbox/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-toolbox with-react-toolbox-app
```

----------------------------------------

TITLE: Creating Next.js app with Video.js Example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-videojs example. It bootstraps the project with necessary dependencies and configurations for Video.js integration. The new application will be named with-videojs-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-videojs/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-videojs with-videojs-app
```

----------------------------------------

TITLE: Configuration of Preview URL in Headless CMS
DESCRIPTION: The bash code shows the URL structure that should be used when configuring custom preview URLs in a headless CMS. It contains placeholders for site URL, secret token, and the slug of the content being previewed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
https://<your-site>/api/preview?secret=<token>&slug=<path>
```

----------------------------------------

TITLE: Updating Webpack Configuration for Next.js
DESCRIPTION: This snippet demonstrates the updated Next.js configuration where 'future.webpack5' is replaced by 'webpack5'. This change is crucial for ensuring that Next.js applications use the latest webpack features and optimizations.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/future-webpack5-moved-to-webpack5.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  webpack5: false,
}
```

----------------------------------------

TITLE: Creating Next.js App with GTM Example (npm)
DESCRIPTION: This command initializes a new Next.js application using the `with-google-tag-manager` example from the Next.js repository. It utilizes `create-next-app` via `npx` to bootstrap the project with the specified template and project name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-google-tag-manager with-google-tag-manager-app
```

----------------------------------------

TITLE: Building and Starting Development Environment
DESCRIPTION: This snippet outlines the commands used to build and start the Next.js application in a development environment using Makefile. It is used for testing the application locally with the build accessible via localhost. It requires a Makefile configured for the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
make build-development
```

LANGUAGE: bash
CODE:
```
make start-development
```

----------------------------------------

TITLE: Migrating Viewport Metadata to Viewport Export
DESCRIPTION: Codemod to migrate certain viewport metadata to a separate 'viewport' export in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_6

LANGUAGE: js
CODE:
```
export const metadata = {
  title: 'My App',
  themeColor: 'dark',
  viewport: {
    width: 1,
  },
}
```

LANGUAGE: js
CODE:
```
export const metadata = {
  title: 'My App',
}

export const viewport = {
  width: 1,
  themeColor: 'dark',
}
```

----------------------------------------

TITLE: Logging HMR Cache Refreshes in Fetches
DESCRIPTION: Enables logging for fetch requests restored from the Server Components HMR cache. Requires setting `logging.fetches.hmrRefreshes` to `true` in `next.config.js`. This feature is specifically for development mode use.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/logging.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  logging: {
    fetches: {
      hmrRefreshes: true,
    },
  },
}
```

----------------------------------------

TITLE: Installing SuperTokens with Next.js using Yarn
DESCRIPTION: Command to bootstrap a Next.js application with SuperTokens authentication using Yarn create next-app with the with-supertokens example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-supertokens with-supertokens-app
```

----------------------------------------

TITLE: Importing Client Component in MDX
DESCRIPTION: This snippet imports the Client component from a local file and renders it in an MDX format. The Client component is expected to be a valid React component that is displayed when the MDX is rendered.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/page.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { Client } from './client'

<Client />
```

----------------------------------------

TITLE: Snapshot test (Pages Router)
DESCRIPTION: This snippet shows an example of a snapshot test for the Home component when using the Pages Router.  It renders the Home component and compares the rendered output to a stored snapshot.  If there are any unexpected changes, the test will fail.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_20

LANGUAGE: jsx
CODE:
```
import { render } from '@testing-library/react'
import Home from '../pages/index'

it('renders homepage unchanged', () => {
  const { container } = render(<Home />)
  expect(container).toMatchSnapshot()
})
```

----------------------------------------

TITLE: Enable Verbose Logging in Next.js Dev
DESCRIPTION: This command starts the Next.js development server with verbose logging enabled. This provides more detailed information about what's happening during development, which can be helpful for debugging performance issues. It requires npm and a Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
next dev --verbose
```

----------------------------------------

TITLE: Invalid Config: Dynamic Assignment - Next.js JavaScript
DESCRIPTION: This snippet shows an invalid `config` assignment because `config.amp` is defined after the initial export. Also `amp`'s value contains a dynamic expression. The `config` object must be initialized directly without later modification or dynamic values.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export const config = {}
// `config.amp` is defined after `config` is exported
config.amp = true

// `config.amp` contains a dynamic expression
export const config = {
  amp: 1 + 1 > 2,
}
```

----------------------------------------

TITLE: Disabling Draft Mode in Next.js Route Handler (JavaScript)
DESCRIPTION: This code snippet shows how to disable Draft Mode in a Next.js Route Handler using JavaScript. It imports `draftMode` from `next/headers`, calls `draft.disable()` to disable Draft Mode, and returns a response indicating that Draft Mode is disabled. It requires the `next` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import { draftMode } from 'next/headers'

export async function GET(request) {
  const draft = await draftMode()
  draft.disable()
  return new Response('Draft mode is disabled')
}
```

----------------------------------------

TITLE: Migrating to Built-in Next.js Font
DESCRIPTION: Codemod to uninstall @next/font package and transform @next/font imports to the built-in next/font in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_7

LANGUAGE: js
CODE:
```
import { Inter } from '@next/font/google'
```

LANGUAGE: js
CODE:
```
import { Inter } from 'next/font/google'
```

----------------------------------------

TITLE: Disabling x-powered-by Header in Next.js Configuration
DESCRIPTION: This code snippet shows how to modify the next.config.js file to disable the default x-powered-by header in a Next.js application. By setting poweredByHeader to false, the header will not be included in the server responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/poweredByHeader.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  poweredByHeader: false,
}
```

----------------------------------------

TITLE: Running Jest Tests using Yarn
DESCRIPTION: This snippet shows the command to execute the Jest tests in the Next.js application using Yarn. This command is essential to verify that the tests set up with Jest are functioning as expected.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
yarn test
```

----------------------------------------

TITLE: Securing Pages Router API Route (TS)
DESCRIPTION: Provides a TypeScript example for securing a Next.js Pages Router API Route (`pages/api/*`). The handler checks for an active user session using `getSession` and then verifies if the user has the 'admin' role, returning JSON error responses with 401 status for unauthorized access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_41

LANGUAGE: ts
CODE:
```
import { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const session = await getSession(req)\n\n  // Check if the user is authenticated\n  if (!session) {\n    res.status(401).json({\n      error: 'User is not authenticated',\n    })\n    return\n  }\n\n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    res.status(401).json({\n      error: 'Unauthorized access: User does not have admin privileges.',\n    })\n    return\n  }\n\n  // Proceed with the route for authorized users\n  // ... implementation of the API Route\n}
```

----------------------------------------

TITLE: Creating Next.js App with Kontent.ai Example (Yarn)
DESCRIPTION: This command uses the `create next-app` utility with Yarn to bootstrap a new Next.js application using the `cms-kontent-ai` example. It creates a new directory named `cms-kontent-app` containing the project files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-kontent-ai cms-kontent-app
```

----------------------------------------

TITLE: Creating Next.js App with Playwright Example (npm)
DESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with a pre-configured Playwright setup.  It utilizes the `--example` flag to specify the `with-playwright` example. It requires npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-playwright/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-playwright with-playwright-app
```

----------------------------------------

TITLE: Create Next.js App with MySQL Example
DESCRIPTION: Uses `create-next-app` to generate a Next.js project pre-configured with a MySQL database connection. The available package managers are npm, yarn, and pnpm. The created app is named `nextjs-mysql`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mysql nextjs-mysql
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mysql nextjs-mysql
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mysql nextjs-mysql
```

----------------------------------------

TITLE: Creating a Next.js App with Segment Analytics using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-segment-analytics example. It sets up the basic project structure and dependencies for integrating Segment Analytics. The new application will be named 'with-segment-analytics-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-segment-analytics with-segment-analytics-app
```

----------------------------------------

TITLE: Creating Next.js app with Salesforce Commerce Cloud template using npm
DESCRIPTION: Command to bootstrap a Next.js application with Salesforce Commerce Cloud integration using npx create-next-app with the with-sfcc example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sfcc/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-sfcc nextjs-sfcc-app
```

----------------------------------------

TITLE: Creating Next.js app with Rspack using pnpm
DESCRIPTION: This command creates a new Next.js application named 'with-rspack-app' using the 'with-rspack' example. It utilizes pnpm to execute the create next-app command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rspack/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-rspack with-rspack-app
```

----------------------------------------

TITLE: Creating Next.js App with Ghost Example (pnpm)
DESCRIPTION: This command uses `create-next-app` with pnpm to initialize a new Next.js application using the Ghost CMS example.  It generates a `cms-ghost-app` directory containing the project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-ghost cms-ghost-app
```

----------------------------------------

TITLE: Generating No Static Paths (Next.js)
DESCRIPTION: Explains how returning an empty array from `generateStaticParams` prevents any static path generation at build time for the dynamic segment, causing all paths to be rendered dynamically on their first request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
export async function generateStaticParams() {
  return []
}
```

----------------------------------------

TITLE: Importing Next.js Document Components
DESCRIPTION: Imports the base Document class and core components (Html, Head, Main, NextScript) required to create a custom _document.js file in Next.js, which controls the server-rendered HTML shell.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_1

LANGUAGE: js
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document';
```

----------------------------------------

TITLE: Corrected PostCSS Configuration (require)
DESCRIPTION: This code snippet shows the corrected PostCSS configuration for the previous incorrect example, using string-based plugin names.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins: ['postcss-plugin', 'postcss-plugin-a'],
}
```

----------------------------------------

TITLE: Clearing Redis cache using Redis CLI
DESCRIPTION: These commands are used to clear the Redis cache. The first command executes Redis CLI inside the `redis-stack` container, and the second command `flushall` clears all data from all Redis databases.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
docker exec -it redis-stack redis-cli
127.0.0.1:6379> flushall
OK
```

----------------------------------------

TITLE: Building and starting a Next.js app with pnpm
DESCRIPTION: These commands build and start the Next.js application in production using pnpm. `pnpm build` compiles the app for deployment, and `pnpm start` initiates the production server. A pre-existing Next.js project setup is expected.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm build
pnpm start
```

----------------------------------------

TITLE: Clearing Preview Mode Cookies with Path - JavaScript
DESCRIPTION: This JavaScript code shows how to clear preview mode cookies for a specific path. If a path was set using `setPreviewData`, the same path must be passed to `clearPreviewData` when clearing the cookies.  It retrieves the path from the request query parameters and passes it to `res.clearPreviewData`.  Requires setting up an API endpoint.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  const { path } = req.query

  res.clearPreviewData({ path })
}
```

----------------------------------------

TITLE: Configuring Next.js Asset Prefix for Multi-Zones
DESCRIPTION: This snippet shows how to set the `assetPrefix` option in `next.config.js`. This prefix ensures that static assets and build outputs from this specific zone are served under a unique path, avoiding conflicts when multiple Next.js applications are hosted on the same domain. It's a fundamental step in defining a zone.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  assetPrefix: '/blog-static',
}
```

----------------------------------------

TITLE: Re-throwing Errors with unstable_rethrow - TypeScript
DESCRIPTION: This snippet shows how to utilize the unstable_rethrow function to re-throw internal errors caught in the first fetch call. In a scenario where notFound() is called, using unstable_rethrow allows the error to propagate correctly, ensuring Next.js renders the appropriate component instead of suppressing the error.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_rethrow.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
```tsx
import { notFound, unstable_rethrow } from 'next/navigation'

export default async function Page() {
  try {
    const post = await fetch('https://.../posts/1').then((res) => {
      if (res.status === 404) notFound()
      if (!res.ok) throw new Error(res.statusText)
      return res.json()
    })
  } catch (err) {
    unstable_rethrow(err)
    console.error(err)
  }
}
```
```

----------------------------------------

TITLE: Implementing Custom Document Components in Next.js with TypeScript
DESCRIPTION: Demonstrates the correct implementation of a custom Document class in Next.js, showing proper usage of all required components: Html, Head, Main, and NextScript. This example shows the minimum required structure for a working custom document component.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-document-component.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document'

export default class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}
```

----------------------------------------

TITLE: Fetching Redirect Data in Next.js Pages API Route (JavaScript)
DESCRIPTION: This JavaScript snippet for a Next.js Pages API Route (`pages/api/redirects.js`) handles GET requests, extracts the 'pathname' from the query string, and looks it up in a local 'redirects.json' file. It returns the redirect entry as JSON if found or a 400 status if the pathname is missing or not found in the file (accounting for Bloom filter false positives).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_16

LANGUAGE: js
CODE:
```
import redirects from '@/app/redirects/redirects.json'

export default function handler(req, res) {
  const pathname = req.query.pathname
  if (!pathname) {
    return res.status(400).json({ message: 'Bad Request' })
  }

  // Get the redirect entry from the redirects.json file
  const redirect = redirects[pathname]

  // Account for bloom filter false positives
  if (!redirect) {
    return res.status(400).json({ message: 'No redirect' })
  }

  // Return the redirect entry
  return res.json(redirect)
}
```

----------------------------------------

TITLE: Valid Config: Static Runtime - Next.js JavaScript
DESCRIPTION: This code snippet shows valid `config` definitions using static string literals for the `runtime` property. This is the correct way to define the runtime configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
export const config = {
  runtime: 'nodejs',
}
export const config = {
  runtime: `edge`,
}
```

----------------------------------------

TITLE: Output HTML for icon.* - HTML
DESCRIPTION: Displays the HTML <link> tag generated in the document's <head> when an icon file (e.g., .ico, .png) is used. The attributes like href, type, and sizes are generated by Next.js based on the file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<link
  rel="icon"
  href="/icon?<generated>"
  type="image/<generated>"
  sizes="<generated>"
/>
```

----------------------------------------

TITLE: Configuring importSource for JSX in Next.js
DESCRIPTION: This snippet specifies the automatic detection of the jsxImportSource in jsconfig.json or tsconfig.json for libraries like Theme UI, enabling them to be utilized seamlessly within the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_6

LANGUAGE: JavaScript
CODE:
```
{
  "compilerOptions": {
    "jsxImportSource": "theme-ui"
  }
}
```

----------------------------------------

TITLE: Analyze Turbopack Trace File with Next.js
DESCRIPTION: These commands show how to analyze a Turbopack trace file using the Next.js internal trace tool. The trace tool provides detailed information about the time taken for each module to compile. Replace `.next/trace-turbopack` with the actual path to the generated trace file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
next internal trace .next/trace-turbopack
```

LANGUAGE: bash
CODE:
```
next internal turbo-trace-server .next/trace-turbopack
```

----------------------------------------

TITLE: Using JSDoc for Type Safety in JavaScript
DESCRIPTION: This code snippet shows how to add type safety to a viewport object in JavaScript using JSDoc syntax for defining the type.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
/** @type {import("next").Viewport} */
export const viewport = {
  themeColor: 'black',
}
```

----------------------------------------

TITLE: Defining `getInitialProps` on Functional Component
DESCRIPTION: Shows an alternative approach to adding `getInitialProps` to a functional component by assigning the method directly to the component function in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/get-initial-props-as-an-instance-method.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
const YourEntryComponent = function () {
  return 'foo'
}

YourEntryComponent.getInitialProps = () => {
  return {}
}

export default YourEntryComponent
```

----------------------------------------

TITLE: Importing MDX File Pages Router Typescript
DESCRIPTION: Demonstrates how to import an `.mdx` file (`Welcome`) into a standard Next.js Pages Router page component written in TypeScript and render it by returning the imported component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import Welcome from '@/markdown/welcome.mdx'

export default function Page() {
  return <Welcome />
}
```

----------------------------------------

TITLE: Creating Error Boundary Component in React
DESCRIPTION: This snippet demonstrates the creation of an Error Boundary component by extending React.Component to handle client-side errors gracefully. Dependencies include the React library. The key parameters are `props` and `state`, with `hasError` boolean state tracking error presence. The component renders a fallback UI or child components based on the `hasError` state. It logs error details using `console.log()` within `componentDidCatch`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/06-configuring/12-error-handling.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props)

    // Define a state variable to track whether is an error or not
    this.state = { hasError: false }
  }
  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI

    return { hasError: true }
  }
  componentDidCatch(error, errorInfo) {
    // You can use your own error logging service here
    console.log({ error, errorInfo })
  }
  render() {
    // Check if the error is thrown
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return (
        <div>
          <h2>Oops, there is an error!</h2>
          <button
            type="button"
            onClick={() => this.setState({ hasError: false })}
          >
            Try again?
          </button>
        </div>
      )
    }

    // Return children components in case of no error

    return this.props.children
  }
}

export default ErrorBoundary
```

----------------------------------------

TITLE: Performing Mutations on Convex Database with TypeScript
DESCRIPTION: This snippet demonstrates a mutation function that inserts a new message into the database. The arguments are validated and processed to modify the data. It includes an example of invoking the mutation within a React component to handle user actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/convex/README.md#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },
  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);
    return await ctx.db.get(id);
  },
});
```

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Rendering HTML with Prefixed Link
DESCRIPTION: Shows the resulting HTML output when basePath is applied, automatically prefixing the href attribute.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/basePath.mdx#2025-04-21_snippet_2

LANGUAGE: html
CODE:
```
<a href="/docs/about">About Page</a>
```

----------------------------------------

TITLE: Initializing Next.js app with Stripe TypeScript example (Yarn)
DESCRIPTION: This command initializes a new Next.js application using the `with-stripe-typescript` example from the Next.js repository. It uses `create-next-app` via `yarn` to bootstrap the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-stripe-typescript with-stripe-typescript-app
```

----------------------------------------

TITLE: Download GraphQL schema (npm)
DESCRIPTION: This command uses npm to execute the 'schema' script defined in the project's package.json. The purpose is to download the schema introspection data from the configured Relay endpoint. This assumes that 'schema' script is properly configured to fetch the schema.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm run schema
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the specified example. It clones the 'api-routes-apollo-server-and-client-auth' example into a directory named 'api-routes-apollo-server-and-client-auth-app'. It requires pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client-auth/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app
```

----------------------------------------

TITLE: Installing Sharp via npm
DESCRIPTION: This command installs the Sharp library using npm, which is essential for image optimization in production environments of a Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-missing-in-production.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm i sharp
```

----------------------------------------

TITLE: Navigating with useRouter push Locale Option
DESCRIPTION: Illustrates how to use the `router.push` method from `next/router` with an options object to explicitly set the `locale` for the navigation. This is useful for programmatic navigation. Requires the `next/router` dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/10-internationalization.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import { useRouter } from 'next/router'

export default function IndexPage(props) {
  const router = useRouter()

  return (
    <div
      onClick={() => {
        router.push('/another', '/another', { locale: 'fr' })
      }}
    >
      to /fr/another
    </div>
  )
}
```

----------------------------------------

TITLE: Run Relay compiler (pnpm)
DESCRIPTION: This command uses pnpm to execute the 'relay' script defined in the project's package.json. The purpose is to perform Relay ahead-of-time compilation, which is required after any edits to components that query data with Relay. It ensures optimal performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
pnpm relay
```

----------------------------------------

TITLE: Using Unauthorized Function in Dashboard Page - TSX
DESCRIPTION: This code snippet demonstrates how to use the unauthorized function within a dashboard page to check user authentication and render the Unauthorized component if the session is invalid. It's tailored for TypeScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/unauthorized.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  return <div>Dashboard</div>
}

```

----------------------------------------

TITLE: Extending MDX File Extensions
DESCRIPTION: Next.js MDX configuration to support both .md and .mdx file extensions for compilation
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')({
  extension: /\.(md|mdx)$/,
})
module.exports = withMDX()
```

----------------------------------------

TITLE: Configuring MDX Compilation with Rust in Next.js JavaScript
DESCRIPTION: This code snippet showcases the setup for using the Rust compiler with MDX in a Next.js project. It imports the '@next/mdx' package and configures the Next.js application to handle '.mdx' files and enable the experimental mdxRs feature. The configuration is then exported using the withMDX function from the '@next/mdx' package to integrate it into the project. Required dependencies include '@next/mdx' and a Next.js environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/mdxRs.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
const withMDX = require('@next/mdx')()

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['ts', 'tsx', 'mdx'],
  experimental: {
    mdxRs: true,
  },
}

module.exports = withMDX(nextConfig)

```

----------------------------------------

TITLE: Disabling HTTP Keep-Alive in Next.js Configuration
DESCRIPTION: This code snippet shows how to disable HTTP Keep-Alive for all server-side fetch() calls in a Next.js application by setting the httpAgentOptions in the next.config.js file. It requires Node.js version compatibility and aims to prevent persistent connections, which is useful in certain scenarios such as optimizing resource usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/httpAgentOptions.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  httpAgentOptions: {
    keepAlive: false,
  },
}
```

----------------------------------------

TITLE: Invalid Config: String Value - Next.js JavaScript
DESCRIPTION: This code snippet demonstrates an invalid usage of the `config` export in Next.js. The `config` should be an object, not a string. This will lead to the "Invalid Page / API Route Config" error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// `config` should be an object
export const config = 'hello world'
```

----------------------------------------

TITLE: Installing TypeScript Dependency (Yarn)
DESCRIPTION: This command installs TypeScript as a development dependency using Yarn. It is essential for adding TypeScript support to a project. The `--save-dev` flag ensures it's added to `devDependencies` in `package.json`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_4

LANGUAGE: shell
CODE:
```
yarn install --save-dev typescript
```

----------------------------------------

TITLE: Handling Redirects with Bloom Filter in Next.js Middleware (TypeScript)
DESCRIPTION: This TypeScript snippet implements Next.js middleware to check incoming request paths against a pre-generated Bloom filter. If the filter indicates a potential match, it fetches the actual redirect data from a dedicated API route. If a valid redirect entry is found, the middleware performs the redirect; otherwise, the request proceeds normally. Requires the 'bloom-filters' library and a generated bloom filter JSON file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/07-redirecting.mdx#_snippet_11

LANGUAGE: ts
CODE:
```
import { NextResponse, NextRequest } from 'next/server'
import { ScalableBloomFilter } from 'bloom-filters'
import GeneratedBloomFilter from './redirects/bloom-filter.json'

type RedirectEntry = {
  destination: string
  permanent: boolean
}

// Initialize bloom filter from a generated JSON file
const bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter as any)

export async function middleware(request: NextRequest) {
  // Get the path for the incoming request
  const pathname = request.nextUrl.pathname

  // Check if the path is in the bloom filter
  if (bloomFilter.has(pathname)) {
    // Forward the pathname to the Route Handler
    const api = new URL(
      `/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,
      request.nextUrl.origin
    )

    try {
      // Fetch redirect data from the Route Handler
      const redirectData = await fetch(api)

      if (redirectData.ok) {
        const redirectEntry: RedirectEntry | undefined =
          await redirectData.json()

        if (redirectEntry) {
          // Determine the status code
          const statusCode = redirectEntry.permanent ? 308 : 307

          // Redirect to the destination
          return NextResponse.redirect(redirectEntry.destination, statusCode)
        }
      }
    } catch (error) {
      console.error(error)
    }
  }

  // No redirect found, continue the request without redirecting
  return NextResponse.next()
}
```

----------------------------------------

TITLE: Implementing Path Matching with Parameters Next.js JavaScript
DESCRIPTION: This snippet demonstrates using dynamic parameters in the `source` path, such as `/blog/:slug`. Matched parameter values can be reused in the header `key` and `value` using the same parameter name prefixed with a colon.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/blog/:slug',
        headers: [
          {
            key: 'x-slug',
            value: ':slug', // Matched parameters can be used in the value
          },
          {
            key: 'x-slug-:slug', // Matched parameters can be used in the key
            value: 'my other custom header value',
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Initializing Next.js Application Instance in Custom Server
DESCRIPTION: This JavaScript snippet demonstrates the essential import and initialization of the Next.js application instance within a custom server file. It imports the `next` function, which is then called with configuration options (like `dev`) to create an `app` instance that manages the Next.js application's routing and rendering logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
import next from 'next';

const app = next({});
```

----------------------------------------

TITLE: Using Sass Variable in Pages Router Component | JSX
DESCRIPTION: Imports the exported variables from a Sass module file and passes the `primaryColor` variable's value as a prop to a `Layout` component. This example demonstrates usage within the Next.js Pages Router (`pages` directory), typically shown in a custom `_app.js` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/sass.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import variables from '../styles/variables.module.scss'

export default function MyApp({ Component, pageProps }) {
  return (
    <Layout color={variables.primaryColor}>
      <Component {...pageProps} />
    </Layout>
  )
}
```

----------------------------------------

TITLE: Configuring Heroku Cache for Next.js Builds
DESCRIPTION: This JavaScript configuration for Heroku uses custom caching by adding a cacheDirectories array to the top-level package.json, including the Next.js cache directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/ci-build-caching.mdx#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
"cacheDirectories": [".next/cache"]
```

----------------------------------------

TITLE: Creating Next.js app with i18n routing using npx
DESCRIPTION: This command uses npx to execute `create-next-app` and bootstraps a new Next.js application with the internationalized routing example. The `i18n-routing` argument specifies the example to use, and `i18n-routing-app` is the name of the new application to be created.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example i18n-routing i18n-routing-app
```

----------------------------------------

TITLE: Generating Image Metadata Array (TSX)
DESCRIPTION: This example demonstrates how to use `generateImageMetadata` to return an array of objects, each containing metadata for a different image version. It includes properties like `contentType`, `size`, and a required `id`, which is later passed as props to the image generating function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'

export function generateImageMetadata() {
  return [
    {
      contentType: 'image/png',
      size: { width: 48, height: 48 },
      id: 'small',
    },
    {
      contentType: 'image/png',
      size: { width: 72, height: 72 },
      id: 'medium',
    },
  ]
}

export default function Icon({ id }: { id: string }) {
  return new ImageResponse(
    (
      <div
        style={{
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: 88,
          background: '#000',
          color: '#fafafa',
        }}
      >
        Icon {id}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Returning JSON response in Middleware (Before - Incorrect)
DESCRIPTION: This code snippet demonstrates the incorrect way of returning a JSON response directly from Middleware in Next.js versions v12.2+. It uses NextResponse.json to send an unauthorized message with a 401 status code.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/returning-response-body-in-middleware.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  return NextResponse.json({ message: 'Auth required' }, { status: 401 })
}
```

----------------------------------------

TITLE: Updating Custom Route Source in JavaScript
DESCRIPTION: This code snippet demonstrates how to correctly format a custom route's source property in JavaScript using regex. It changes the format of a negative lookahead regex condition to conform to path-to-regexp's required syntax.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-route-source.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
{"source": "/feedback/((?!general).*)",\n  "destination": "/feedback/general"}
```

----------------------------------------

TITLE: Creating Playwright tests with next.onFetch
DESCRIPTION: This snippet demonstrates how to use `next.onFetch` within a Playwright test to intercept and mock `fetch` requests. It checks if the request URL matches a specific endpoint and returns a mock response with a JSON payload, or aborts if the URL doesn't match.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
// Place this file in the `app` directory and name it with `.spec.ts`.
// To customize where to put tests, add `testMatch` to `playwright.config.ts`.

import { test, expect } from 'next/experimental/testmode/playwright'

test('/product/shoe', async ({ page, next }) => {
  // NOTE: `next.onFetch` only intercepts external `fetch` requests (for both client and server).
  // For example, if you `fetch` a relative URL (e.g. `/api/hello`) from the client
  // that's handled by a Next.js route handler (e.g. `app/api/hello/route.ts`),
  // it won't be intercepted.
  next.onFetch((request) => {
    if (request.url === 'http://my-db/product/shoe') {
      return new Response(
        JSON.stringify({
          title: 'A shoe',
        }),
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )
    }
    return 'abort'
  })

  await page.goto('/product/shoe')

  await expect(page.locator('body')).toHaveText(/Shoe/)
})
```

----------------------------------------

TITLE: Enabling AMP for a Page in Next.js (JSX)
DESCRIPTION: This code snippet demonstrates how to enable AMP support for a specific page in a Next.js application.  It exports a `config` object with the `amp` property set to `true`. This tells Next.js to generate an AMP version of the page. It also shows how to use an AMP component (`amp-timeago`) within the page. Requires importing and using `next/amp` (implicitly).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
export const config = { amp: true }

function MyAmpPage() {
  const date = new Date()

  return (
    <div>
      <p>Some time: {date.toJSON()}</p>
      <amp-timeago
        width="0"
        height="15"
        datetime={date.toJSON()}
        layout="responsive"
      >
        .
      </amp-timeago>
    </div>
  )
}

export default MyAmpPage
```

----------------------------------------

TITLE: Configuring Turbopack in next.config.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to configure Turbopack within the `next.config.js` file. It showcases how to define aliases for module resolution and extend file extensions for module resolution. Turbopack replaces webpack, allowing for configurations like `resolveAlias` and `resolveExtensions` directly within the `turbopack` key.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/08-turbopack.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  turbopack: {
    // Example: adding an alias and custom file extension
    resolveAlias: {
      underscore: 'lodash',
    },
    resolveExtensions: ['.mdx', '.tsx', '.ts', '.jsx', '.js', '.json'],
  },
}
```

----------------------------------------

TITLE: Creating Next.js App with Recoil Example using PNPM
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-recoil example. It clones the example into a new directory named with-recoil-app. It requires pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-recoil/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-recoil with-recoil-app
```

----------------------------------------

TITLE: Importing ViewTransition Component from React
DESCRIPTION: This code snippet showcases how to import the `unstable_ViewTransition` component from the `react` library.  This import is necessary to utilize the View Transition API within React components. The component is currently unstable and subject to change in future React releases.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/viewTransition.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
import { unstable_ViewTransition as ViewTransition } from 'react'
```

----------------------------------------

TITLE: Configuring Server Components HMR Cache in JavaScript
DESCRIPTION: Configuration example showing how to disable the server components HMR cache using JavaScript in next.config.js. The serverComponentsHmrCache option is set under the experimental configuration object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverComponentsHmrCache.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    serverComponentsHmrCache: false, // defaults to true
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Implementing Client-side Data Fetching with useEffect in React
DESCRIPTION: This snippet demonstrates how to fetch data on the client side using the useEffect hook in React. It fetches profile data from an API, manages loading and error states, and renders the fetched data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/05-client-side.mdx#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { useState, useEffect } from 'react'

function Profile() {
  const [data, setData] = useState(null)
  const [isLoading, setLoading] = useState(true)

  useEffect(() => {
    fetch('/api/profile-data')
      .then((res) => res.json())
      .then((data) => {
        setData(data)
        setLoading(false)
      })
  }, [])

  if (isLoading) return <p>Loading...</p>
  if (!data) return <p>No profile data</p>

  return (
    <div>
      <h1>{data.name}</h1>
      <p>{data.bio}</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Install Prompt Component - TypeScript
DESCRIPTION: This React component provides a prompt for iOS users to install the app to their home screen. It checks if the device is iOS and if the app is already running in standalone mode. If the app is not already installed on an iOS device, it displays instructions on how to add it to the home screen.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
function InstallPrompt() {
  const [isIOS, setIsIOS] = useState(false)
  const [isStandalone, setIsStandalone] = useState(false)

  useEffect(() => {
    setIsIOS(
      /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream
    )

    setIsStandalone(window.matchMedia('(display-mode: standalone)').matches)
  }, [])

  if (isStandalone) {
    return null // Don't show install button if already installed
  }

  return (
    <div>
      <h3>Install App</h3>
      <button>Add to Home Screen</button>
      {isIOS && (
        <p>
          To install this app on your iOS device, tap the share button
          <span role="img" aria-label="share icon">
            {' '}
            ⎋{' '}
          </span>
          and then "Add to Home Screen"
          <span role="img" aria-label="plus icon">
            {' '}
            ➕{' '}
          </span>.
        </p>
      )}
    </div>
  )
}

export default function Page() {
  return (
    <div>
      <PushNotificationManager />
      <InstallPrompt />
    </div>
  )
}
```

----------------------------------------

TITLE: Clearing Preview Mode Cookies - JavaScript
DESCRIPTION: This JavaScript code demonstrates how to clear the preview mode cookies using the `clearPreviewData` function in a Next.js API route. It defines an API route handler that calls `res.clearPreviewData({})` to remove the preview cookies.  This is often accessed through an API route. This ensures the user exits preview mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  res.clearPreviewData({})
}
```

----------------------------------------

TITLE: Creating a Catch-All Route - Bash
DESCRIPTION: This code shows how to create a directory structure in Next.js to implement an optional catch-all route. The `[[...slug]]` directory inside the `app` directory will catch all routes.  This is a bash command to create the directory structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_11

LANGUAGE: bash
CODE:
```
app
 ┣ [[...slug]]
 ┃ ┗ page.tsx
 ┣ layout.tsx
```

----------------------------------------

TITLE: Enabling use cache in Next.js (JavaScript)
DESCRIPTION: Configures `next.config.js` to enable the experimental `useCache` feature by adding `useCache: true` to the `experimental` object. This step is required before the `use cache` directive can be used in your application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    useCache: true,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Importing Image in Vite
DESCRIPTION: This code snippet demonstrates how Vite handles static image imports. Importing an image file returns its public URL as a string, which can then be used directly within the `src` attribute of an `<img>` tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
import image from './img.png' // `image` will be '/assets/img.2d8efhg.png' in production

export default function App() {
  return <img src={image} />
}
```

----------------------------------------

TITLE: Using Fetch Loopback with Playwright
DESCRIPTION: This snippet illustrates how to use the fetch loopback mode with Playwright in Next.js's experimental test mode to mock fetch requests using a custom mocking library. It enables the `fetchLoopback` option via `test.use` and utilizes a custom mocking library (`myFetchMocker`) to mock the response for a specific URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import { test, expect } from 'next/experimental/testmode/playwright'
import { myFetchMocker } from 'my-fetch-mocker'

test.use({ nextOptions: { fetchLoopback: true } })

test('/product/shoe', async ({ page, next }) => {
  myFetchMocker.mock('http://my-db/product/shoe', {
    title: 'A shoe',
  })

  await page.goto('/product/shoe')

  await expect(page.locator('body')).toHaveText(/Shoe/)
})
```

----------------------------------------

TITLE: Installing sharp with yarn
DESCRIPTION: This snippet demonstrates how to install the `sharp` package using yarn. It is an alternative solution for resolving issues with Next.js' built-in image optimization when `sharp` is missing or improperly installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/install-sharp.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn add sharp
```

----------------------------------------

TITLE: Error Analysis for Module Format Conflict in Next.js
DESCRIPTION: This error indicates a conflict between the specified CommonJs module format in the package.json and the usage of EcmaScript import/export syntax in the source code. Users should ensure consistency between the declared module type and the import/export syntax used in the code.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/node-default-import/issues/Specified module format (CommonJs) is not matching-63a9f9.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
error - [analysis] [project]/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/node-default-import/input/node_modules/esm-package/invalid-exports.cjs  Specified module format (CommonJs) is not matching the module format of the source code (EcmaScript Modules)
  The CommonJs module format was specified in the package.json that is affecting this source file or by using an special extension, but Ecmascript import/export syntax is used in the source code.
  The module was automatically converted to an EcmaScript module, but that is in conflict with the specified module format. Either change the "type" field in the package.json or replace EcmaScript import/export syntax with CommonJs syntas in the source file.
  In some cases EcmaScript import/export syntax is added by an transform and isn't actually part of the source code. In these cases revisit transformation options to inject the correct syntax.
```

----------------------------------------

TITLE: Fetching Preview Data in getStaticProps - JavaScript
DESCRIPTION: This code snippet shows how to conditionally fetch data based on the preview mode. It checks `context.preview` and modifies the API endpoint URL accordingly.  The example shows a fetch call to an external API. It's a simplified demonstration; the actual implementation depends on the specific headless CMS or data source. The `context` object is provided by Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
export async function getStaticProps(context) {
  // If context.preview is true, append "/preview" to the API endpoint
  // to request draft data instead of published data. This will vary
  // based on which headless CMS you're using.
  const res = await fetch(`https://.../${context.preview ? 'preview' : ''}`)
  // ...
}
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command uses `create next-app` with pnpm to bootstrap a Next.js project configured to use Storyblok CMS. It creates a new directory `cms-storyblok-app` with the required files and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-storyblok cms-storyblok-app
```

----------------------------------------

TITLE: Transforming React Component with add-missing-react-import Codemod
DESCRIPTION: This example shows how the add-missing-react-import codemod transforms a React component by adding the missing React import. It ensures compatibility with the new React JSX transform.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_12

LANGUAGE: jsx
CODE:
```
export default class Home extends React.Component {
  render() {
    return <div>Hello World</div>
  }
}
```

LANGUAGE: jsx
CODE:
```
import React from 'react'
export default class Home extends React.Component {
  render() {
    return <div>Hello World</div>
  }
}
```

----------------------------------------

TITLE: Configuring Custom App to Support Per-Page Layouts in Next.js
DESCRIPTION: A custom App component that checks for and applies page-specific layouts. It uses the getLayout function defined on page components, or falls back to rendering the page directly if no layout is specified.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
export default function MyApp({ Component, pageProps }) {
  // Use the layout defined at the page level, if available
  const getLayout = Component.getLayout ?? ((page) => page)

  return getLayout(<Component {...pageProps} />)
}
```

----------------------------------------

TITLE: Implementing Unoptimized Image Component
DESCRIPTION: Demonstrates how to create an unoptimized image component that maintains Next.js Image features like blur-up placeholders while disabling optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

const UnoptimizedImage = (props) => {
  return <Image {...props} unoptimized />
}
```

----------------------------------------

TITLE: Configuring SVG Loader in Turbopack
DESCRIPTION: Example of configuring the @svgr/webpack loader for handling SVG files in Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  turbopack: {
    rules: {
      '*.svg': {
        loaders: ['@svgr/webpack'],
        as: '*.js',
      },
    },
  },
}
```

----------------------------------------

TITLE: Creating Next.js app with Rebass using Yarn
DESCRIPTION: This command utilizes Yarn to create a new Next.js application integrated with Rebass. It specifies the "with-rebass" example and names the new application "with-rebass-app".
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rebass/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-rebass with-rebass-app
```

----------------------------------------

TITLE: Installing OpenTelemetry API for custom spans
DESCRIPTION: Installs the `@opentelemetry/api` package, which is required for creating custom spans in a Next.js application. This package provides the necessary APIs to manually instrument specific parts of the code with OpenTelemetry.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
npm install @opentelemetry/api
```

----------------------------------------

TITLE: Configuring Assets Link Metadata in Next.js (JSX & HTML)
DESCRIPTION: Configures a link tag pointing to external assets using the `metadata.assets` property. It accepts an array of URLs. This generates a `<link rel="assets">` tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_25

LANGUAGE: JSX
CODE:
```
export const metadata = {
  assets: ['https://nextjs.org/assets'],
}
```

LANGUAGE: HTML
CODE:
```
<link rel="assets" href="https://nextjs.org/assets" />
```

----------------------------------------

TITLE: Performance Measurement in Next.js Components
DESCRIPTION: Demonstrates how to properly measure execution time in Next.js components by replacing Date.now() with performance.now() for more accurate timing measurements.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const start = Date.now();
  const data = computeDataSlowly(...);
  const end = Date.now();
  console.log(`somethingSlow took ${end - start} milliseconds to complete`)

  return ...
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const start = performance.now();
  const data = computeDataSlowly(...);
  const end = performance.now();
  console.log(`somethingSlow took ${end - start} milliseconds to complete`)
  return ...
}
```

----------------------------------------

TITLE: Configuring Ably in Next.js App
DESCRIPTION: This code snippet configures the Ably SDK using the @ably-labs/react-hooks library within a Next.js application. It sets the authentication URL and client ID, utilizing environment variables for dynamic configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { configureAbly } from "@ably-labs/react-hooks";

const prefix = process.env.API_ROOT || "";
const clientId =
  Math.random().toString(36).substring(2, 15) +
  Math.random().toString(36).substring(2, 15);

configureAbly({
  authUrl: `${prefix}/api/createTokenRequest?clientId=${clientId}`,
  clientId: clientId,
});

function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />;
}

export default MyApp;
```

----------------------------------------

TITLE: Dynamic fs.readFileSync Path in JavaScript
DESCRIPTION: This snippet shows 'fs.readFileSync' being called with a dynamic file path determined by a variable. This can be problematic for static analysis (e.g., determining dependencies) and can be a security risk if the path is derived from user input, potentially leading to directory traversal vulnerabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1002__ require(FreeVar(Math)[__quo__r-899e87.txt#_snippet_5

LANGUAGE: javascript
CODE:
```
fs.readFileSync(unknown)
```

----------------------------------------

TITLE: Using cacheLife in Next.js Component
DESCRIPTION: Demonstrates how to import and use the cacheLife function within a component with the 'use cache' directive
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
'use cache'
import { unstable_cacheLife as cacheLife } from 'next/cache'

export default async function Page() {
  cacheLife('hours')
  return <div>Page</div>
}
```

LANGUAGE: jsx
CODE:
```
'use cache'
import { unstable_cacheLife as cacheLife } from 'next/cache'

export default async function Page() {
  cacheLife('hours')
  return <div>Page</div>
}
```

----------------------------------------

TITLE: Implementing Per-Page Layout Pattern (pages) - Before Migration
DESCRIPTION: Shows the common pattern in the `pages` directory for applying per-page layouts using a component definition and a static `getLayout` property on the page component. This pattern is replaced by nested layouts in the `app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
export default function DashboardLayout({ children }) {
  return (
    <div>
      <h2>My Dashboard</h2>
      {children}
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import DashboardLayout from '../components/DashboardLayout'

export default function Page() {
  return <p>My Page</p>
}

Page.getLayout = function getLayout(page) {
  return <DashboardLayout>{page}</DashboardLayout>
}
```

----------------------------------------

TITLE: Referencing the Next.js ESLint Plugin Package
DESCRIPTION: The code snippet shows the package name reference for the Next.js ESLint plugin. This plugin provides lint rules specific to Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/eslint-plugin-next/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
@next/eslint-plugin-next
```

----------------------------------------

TITLE: Disabling Static Image Imports in Next.js
DESCRIPTION: This code snippet shows how to disable static image imports in `next.config.js`. This is useful if static image imports conflict with other plugins that expect imports to behave differently.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_17

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    disableStaticImages: true,
  },
}
```

----------------------------------------

TITLE: Unoptimized Image Component
DESCRIPTION: This code snippet demonstrates how to create a wrapper component around the Next.js Image component to always set the `unoptimized` prop to true. This is useful for images that don't benefit from optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
import Image from 'next/image'

const UnoptimizedImage = (props) => {
  return <Image {...props} unoptimized />
}
```

----------------------------------------

TITLE: GraphQL Mutation for Creating a Post
DESCRIPTION: This GraphQL mutation creates a new 'Post' entry in the Grafbase backend.  It takes title, slug, and a nested comment as input, and returns the id and slug of the newly created post.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#2025-04-21_snippet_3

LANGUAGE: graphql
CODE:
```
mutation {
  postCreate(
    input: {
      title: "I love Next.js!"
      slug: "i-love-nextjs"
      comments: [{ create: { message: "me too!" } }]
    }
  ) {
    post {
      id
      slug
    }
  }
}
```

----------------------------------------

TITLE: Configuring Monorepo Tracing Root in Next.js (JavaScript)
DESCRIPTION: Sets the root directory for file tracing (`outputFileTracingRoot`) in a monorepo setup. This allows Next.js to trace and include dependencies located outside the specific package directory being built.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  // this includes files from the monorepo base two directories up
  outputFileTracingRoot: path.join(__dirname, '../../'),
}
```

----------------------------------------

TITLE: Fetching Data with getInitialProps in TypeScript
DESCRIPTION: This code snippet demonstrates how to use `getInitialProps` within a Next.js page component written in TypeScript to fetch data from an API and pass it as props to the component. It fetches the number of stars for the Next.js repository from GitHub.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-initial-props.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextPageContext } from 'next'

Page.getInitialProps = async (ctx: NextPageContext) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const json = await res.json()
  return { stars: json.stargazers_count }
}

export default function Page({ stars }: { stars: number }) {
  return stars
}
```

----------------------------------------

TITLE: Throwing Undefined Error in JavaScript (Next.js)
DESCRIPTION: This snippet illustrates how throwing an undefined error can occur in a Next.js application. It outlines an example function that throws a variable that hasn't been initialized, leading to an incorrect error handling scenario. Developers should ensure valid error instances are thrown to avoid confusion.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/threw-undefined.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
function getData() {
  let error
  throw error
}

function Page() {
  const error = data?.error || null
  throw error
}
```

----------------------------------------

TITLE: Optimizing Header Access in Next.js Components
DESCRIPTION: Demonstrates proper header access patterns by moving header-related logic deeper into the component tree for better organization and performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
export async function Inbox({ token }) {
  const email = await getEmail(token)
  return (
    <ul>
      {email.map((e) => (
        <EmailRow key={e.id} />
      ))}
    </ul>
  )
}

import { cookies } from 'next/headers'

export default async function Page() {
  const token = (await cookies()).get('token')
  return (
    <Suspense fallback="loading your inbox...">
      <Inbox token={token}>
    </Suspense>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

export async function Inbox() {
  const token = (await cookies()).get('token')
  const email = await getEmail(token)
  return (
    <ul>
      {email.map((e) => (
        <EmailRow key={e.id} />
      ))}
    </ul>
  )
}

export default async function Page() {
  return (
    <Suspense fallback="loading your inbox...">
      <Inbox>
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Installing Next.js with Expo TypeScript Using Yarn
DESCRIPTION: Command to create a new Next.js application with Expo TypeScript template using yarn create
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-expo-typescript with-expo-typescript-app
```

----------------------------------------

TITLE: Using withRouter in Next.js (JSX)
DESCRIPTION: This snippet shows how to use the `withRouter` higher-order component to inject the `router` object into a functional component. The `router` object is then accessed via props to display the current pathname.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_17

LANGUAGE: jsx
CODE:
```
import { withRouter } from 'next/router'

function Page({ router }) {
  return <p>{router.pathname}</p>
}

export default withRouter(Page)
```

----------------------------------------

TITLE: Accessing Dynamic Params in Generated Icon - JSX
DESCRIPTION: Demonstrates accessing dynamic route parameters within a programmatically generated icon using JavaScript (JSX). The params object is available as a prop to the default function for creating route-specific icons.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
export default function Icon({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Creating Next.js app with Overmind using npx
DESCRIPTION: This command uses npx to create a new Next.js application with the Overmind example. It utilizes the create-next-app tool and specifies the 'with-overmind' example and 'with-overmind-app' as the application name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-overmind/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-overmind with-overmind-app
```

----------------------------------------

TITLE: Initializing Next.js app with TinaCMS example using Yarn
DESCRIPTION: This command initializes a new Next.js application using the `cms-tina` example. It uses `yarn create next-app` to bootstrap the project, providing the necessary files and dependencies for integration with TinaCMS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
"yarn create next-app --example cms-tina cms-tina-app"
```

----------------------------------------

TITLE: Defining Open Graph Image Alt Text - TXT
DESCRIPTION: Provides an example of the content for an opengraph-image.alt.txt file. This file is placed in the same route segment as the corresponding opengraph-image file and contains the alternative text for the image, improving accessibility.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_2

LANGUAGE: TXT
CODE:
```
About Acme
```

----------------------------------------

TITLE: Creating Next.js app with i18n routing using pnpm
DESCRIPTION: This command uses pnpm to execute `create next-app` and bootstraps a new Next.js application with the internationalized routing example. The `i18n-routing` argument specifies the example to use, and `i18n-routing-app` is the name of the new application to be created.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example i18n-routing i18n-routing-app
```

----------------------------------------

TITLE: Creating a Basic Next.js Page Component
DESCRIPTION: A simple example of a Next.js page component exported from a file in the pages directory. This component renders a div with the text 'About' and will be accessible at the /about route.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
function About() {
  return <div>About</div>
}

export default About
```

----------------------------------------

TITLE: Adding Cypress open command to package.json
DESCRIPTION: Adds a `cypress:open` script to the `package.json` file.  This script allows users to easily open the Cypress testing suite using `npm run cypress:open`.  It depends on Cypress being installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "cypress:open": "cypress open"
  }
}
```

----------------------------------------

TITLE: Creating Next.js app with npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the cms-dotcms example.  It initializes the project in a directory named cms-dotcms-app.  It requires Node.js and npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-dotcms cms-dotcms-app
```

----------------------------------------

TITLE: Initializing Next.js app with TinaCMS example
DESCRIPTION: This command initializes a new Next.js application using the `cms-tina` example. It leverages `create-next-app` with npm to bootstrap the project, setting up the necessary files and dependencies for the TinaCMS integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
"npx create-next-app --example cms-tina cms-tina-app"
```

----------------------------------------

TITLE: Installing FCM Example with PNPM
DESCRIPTION: Command to create a new Next.js application with Firebase Cloud Messaging example using PNPM package manager
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-cloud-messaging/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

----------------------------------------

TITLE: Generated Meta Tags for Size HTML
DESCRIPTION: Example of the HTML output generated in the `<head>` section when the `size` export is defined in the corresponding `opengraph-image` or `twitter-image` route handler. These meta tags inform social media platforms about the image dimensions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_16

LANGUAGE: html
CODE:
```
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
```

----------------------------------------

TITLE: Creating Next.js App with Elasticsearch Example
DESCRIPTION: These commands use create-next-app to bootstrap a new Next.js application using the with-elasticsearch example.  It shows how to use npm, yarn, and pnpm to create the application. The created app will be named with-elasticsearch-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-elasticsearch with-elasticsearch-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-elasticsearch with-elasticsearch-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-elasticsearch with-elasticsearch-app
```

----------------------------------------

TITLE: Create Next.js app with Chakra UI using pnpm
DESCRIPTION: This command employs pnpm to create a new Next.js application with Chakra UI, named 'with-chakra-ui-app'. It is based on the 'with-chakra-ui' example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-chakra-ui/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-chakra-ui with-chakra-ui-app
```

----------------------------------------

TITLE: Mocking next/font imports for Jest
DESCRIPTION: This JavaScript module creates a mock for `next/font` in Jest tests.  It returns a proxy object that intercepts calls to font functions, returning a predefined object with `className`, `variable`, and `style` properties.  This allows tests to run smoothly without requiring actual font files or configurations, providing a consistent and controlled testing environment for components using `next/font`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_8

LANGUAGE: JavaScript
CODE:
```
module.exports = new Proxy(
  {},
  {
    get: function getter() {
      return () => ({
        className: 'className',
        variable: 'variable',
        style: { fontFamily: 'fontFamily' },
      })
    },
  }
)
```

----------------------------------------

TITLE: Using history.pushState for Query Params Next.js JSX
DESCRIPTION: Shows using the native window.history.pushState method in a JavaScript Client Component to update URL search parameters. It uses the useSearchParams hook to get current params and constructs a new URL with updated sorting parameters ('asc' or 'desc') without triggering a full page reload.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SortProducts() {
  const searchParams = useSearchParams()

  function updateSorting(sortOrder) {
    const params = new URLSearchParams(searchParams.toString())
    params.set('sort', sortOrder)
    window.history.pushState(null, '', `?${params.toString()}`)
  }

  return (
    <>
      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>
      <button onClick={() => updateSorting('desc')}>Sort Descending</button>
    </>
  )
}
```

----------------------------------------

TITLE: Inspect Memory Usage during Next.js Build/Dev
DESCRIPTION: This snippet demonstrates how to use the Node.js inspector to analyze memory usage. Adding `NODE_OPTIONS=--inspect` (or `--inspect-brk`) to the `next build` or `next dev` command exposes the inspector agent, allowing you to connect with tools like Chrome DevTools to record and analyze heap snapshots. Sending a `SIGUSR2` signal to the process when running with `--experimental-debug-memory-usage` creates a heap snapshot.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_3



----------------------------------------

TITLE: Define and Export Random Byte Generator - JavaScript
DESCRIPTION: Defines and exports the `random` function. This function takes the desired number of `bytes` as input and returns a subarray of random bytes from the `pool`, ensuring the pool is sufficiently filled using `fillPool`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_15

LANGUAGE: javascript
CODE:
```
import { d as fillPool } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -4
};
import { b as pool } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import { a as poolOffset } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -6
};
let random = (bytes)=>{
    fillPool((bytes -= 0));
    return pool.subarray(poolOffset - bytes, poolOffset);
};
export { random as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Adding JSON-LD Structured Data to Next.js Page (JSX)
DESCRIPTION: This snippet demonstrates adding JSON-LD structured data to a Next.js App Router page component using a `<script>` tag, similar to the TSX example but in a `.js` file. It fetches product data asynchronously, creates a JSON-LD object, and embeds it via `dangerouslySetInnerHTML`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { id } = await params;
  const product = await getProduct(id);

  const jsonLd = {
    '@context': 'https://schema.org',
    '@type': 'Product',
    name: product.name,
    image: product.image,
    description: product.description,
  };

  return (
    <section>
      {/* Add JSON-LD to your page */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}
      />
      {/* ... */}
    </section>
  );
}
```

----------------------------------------

TITLE: Creating Next.js App with Nhost Example (Yarn)
DESCRIPTION: This command initializes a new Next.js application using the `with-nhost-auth-realtime-graphql` example. It utilizes `create next-app` with Yarn to bootstrap the project. `nhost-app` is the name assigned to the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-nhost-auth-realtime-graphql nhost-app
```

----------------------------------------

TITLE: Creating Next.js App with Vitest using pnpm
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Vitest integration using pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-vitest with-vitest-app
```

----------------------------------------

TITLE: Installing SuperTokens with Next.js using PNPM
DESCRIPTION: Command to bootstrap a Next.js application with SuperTokens authentication using PNPM create next-app with the with-supertokens example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-supertokens with-supertokens-app
```

----------------------------------------

TITLE: Configuring assetPrefix based on phase - Next.js (JavaScript)
DESCRIPTION: This code snippet shows how to set the `assetPrefix` configuration option in `next.config.mjs` based on the build phase. In development, `assetPrefix` is undefined (using the local server), while in production, it's set to the CDN URL (e.g., `https://cdn.mydomain.com`). This ensures assets are loaded from the CDN in production builds.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/assetPrefix.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
// @ts-check
import { PHASE_DEVELOPMENT_SERVER } from 'next/constants'

export default (phase) => {
  const isDev = phase === PHASE_DEVELOPMENT_SERVER
  /**
   * @type {import('next').NextConfig}
   */
  const nextConfig = {
    assetPrefix: isDev ? undefined : 'https://cdn.mydomain.com',
  }
  return nextConfig
}
```

----------------------------------------

TITLE: Showing Markdown Rendered HTML for Styling Context
DESCRIPTION: Displays the HTML output generated from the preceding Markdown example. It explicitly shows the `<h2>`, `<p>`, `<ul>`, and `<li>` tags produced, which are the targets for custom styling or component mapping.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_16

LANGUAGE: html
CODE:
```
<h2>This is a heading</h2>

<p>This is a list in markdown:</p>

<ul>
  <li>One</li>
  <li>Two</li>
  <li>Three</li>
</ul>
```

----------------------------------------

TITLE: Installing next-rspack using npm
DESCRIPTION: This snippet provides the command to install the next-rspack package using npm, which is necessary for replacing webpack with Rspack in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-rspack/README.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
npm install next-rspack
```

----------------------------------------

TITLE: Creating a Next.js App with Example Configuration
DESCRIPTION: This snippet demonstrates how to initialize a Next.js application using predefined example configuration from Builder.io. It supports multiple package managers, allowing flexibility depending on the user's preference.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-builder-io cms-builder-io-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-builder-io cms-builder-io-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-builder-io cms-builder-io-app
```

----------------------------------------

TITLE: Configuring Content Disposition Type in Next.js
DESCRIPTION: This snippet sets the `Content-Disposition` header for images served by the Next.js Image Optimization API. Developers can choose between forcing a download or rendering the image inline.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_27

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    contentDispositionType: 'inline',
  },
}
```

----------------------------------------

TITLE: Creating a Next.js app with XState
DESCRIPTION: This command bootstraps a new Next.js application using the with-xstate example. It utilizes create-next-app with Yarn to initialize the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-xstate with-xstate-app
```

----------------------------------------

TITLE: Initializing Google Tag Manager in Pages Router (JSX)
DESCRIPTION: This code snippet demonstrates how to include the `GoogleTagManager` component within a custom `_app.js` file in a Next.js application using the Pages Router. It imports the component from `@next/third-parties/google` and passes the GTM container ID via the `gtmId` prop. This ensures GTM is loaded on all routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { GoogleTagManager } from '@next/third-parties/google'

export default function MyApp({ Component, pageProps }) {
  return (
    <>
      <Component {...pageProps} />
      <GoogleTagManager gtmId="GTM-XYZ" />
    </>
  )
}
```

----------------------------------------

TITLE: Specifying Preferred Region in Next.js JS
DESCRIPTION: This snippet shows how to set the `preferredRegion` option in a JavaScript file to indicate preferred deployment locations for a Next.js route segment. The support and interpretation of this option depend on the deployment platform.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_9

LANGUAGE: js
CODE:
```
export const preferredRegion = 'auto'
// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']
```

----------------------------------------

TITLE: Constructing URL Relative to Module in JavaScript
DESCRIPTION: This snippet uses the `new URL()` constructor to create a URL object. It specifies the current module's URL (`import.meta.url`) as the base URL and a dynamic value (`unknown`) as the relative path or URL fragment. While useful for resolving paths relative to the current file, the dynamic nature of the first argument makes the resulting URL unpredictable at build time, impacting static asset analysis.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1004__ fs.readFileSync(FreeVar(Math)[-7dbc77.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
new URL(unknown, import.meta.url)
```

----------------------------------------

TITLE: Configuring Basic Custom Headers Next.js JavaScript
DESCRIPTION: This snippet shows the basic structure for adding custom HTTP headers in `next.config.js`. It defines an asynchronous `headers` function that returns an array of objects. Each object specifies a `source` path pattern and an array of `headers` to apply to matching requests. Headers are defined with `key` and `value` properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/about',
        headers: [
          {
            key: 'x-custom-header',
            value: 'my custom header value',
          },
          {
            key: 'x-another-custom-header',
            value: 'my other custom header value',
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Handling Custom Component Children with Next.js Link
DESCRIPTION: These snippets show how to use a custom component, like one created with styled-components, as the child of `Link`. It requires adding the `passHref` prop to ensure the `href` attribute is passed to the underlying `<a>` tag and `legacyBehavior` for compatibility with older Link behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_13

LANGUAGE: TSX
CODE:
```
import Link from 'next/link'
import styled from 'styled-components'

// This creates a custom component that wraps an <a> tag
const RedLink = styled.a`
  color: red;
`

function NavLink({ href, name }) {
  return (
    <Link href={href} passHref legacyBehavior>
      <RedLink>{name}</RedLink>
    </Link>
  )
}

export default NavLink
```

LANGUAGE: JSX
CODE:
```
import Link from 'next/link'
import styled from 'styled-components'

// This creates a custom component that wraps an <a> tag
const RedLink = styled.a`
  color: red;
`

function NavLink({ href, name }) {
  return (
    <Link href={href} passHref legacyBehavior>
      <RedLink>{name}</RedLink>
    </Link>
  )
}

export default NavLink
```

----------------------------------------

TITLE: Embedding Image in Next.js Markdown
DESCRIPTION: This snippet demonstrates embedding an image within a Next.js markdown file using the `<Image>` component. The `src` attribute specifies the image path, `alt` provides alternative text, and `width` and `height` define the image dimensions. The image is assumed to be in the public directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/image/page.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
<Image src="/test.jpg" alt="Next.js Logo" width={180} height={37} />
```

----------------------------------------

TITLE: Creating Next.js App using create-next-app with npm
DESCRIPTION: This command uses npm to create a new Next.js application named 'custom-server-app' based on the 'custom-server' example. It bootstraps the project with the necessary files and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/custom-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example custom-server custom-server-app
```

----------------------------------------

TITLE: Creating Right Arrow SVG Component in React
DESCRIPTION: This React functional component renders an SVG graphic to be used as a right arrow icon, commonly for navigation purposes in UI components. The SVG is styled to be inline and adaptable to current color contexts.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export const RightArrow = () => (
  <svg
    viewBox="0 0 14 14"
    width="8px"
    height="14px"
    style={{
      marginLeft: "4px",
      display: "inline-block",
      shapeRendering: "inherit",
      verticalAlign: "middle",
      fill: "currentColor",
      "path fill": "currentColor",
    }}
  >
    <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
  </svg>
);
```

----------------------------------------

TITLE: Pass Image Src Property to Img Tag - TSX
DESCRIPTION: This code demonstrates how to pass the `src` property of the image object to the `<img>` tag in Next.js. This is necessary because static image imports return an object in Next.js, not a string URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_20

LANGUAGE: tsx
CODE:
```
// Before
<img src={logo} />

// After
<img src={logo.src} />
```

----------------------------------------

TITLE: Using revalidate in getStaticProps (JavaScript)
DESCRIPTION: This code snippet demonstrates how to use the `revalidate` property in `getStaticProps` to enable Incremental Static Regeneration (ISR). It fetches posts from an API and sets `revalidate` to 10 seconds, meaning Next.js will attempt to re-generate the page at most once every 10 seconds when a request comes in.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// revalidation is enabled and a new request comes in
export async function getStaticProps() {
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  return {
    props: {
      posts,
    },
    // Next.js will attempt to re-generate the page:
    // - When a request comes in
    // - At most once every 10 seconds
    revalidate: 10, // In seconds
  }
}
```

----------------------------------------

TITLE: Next.js Configuration Testing Example
DESCRIPTION: Shows how to unit test Next.js configuration using the experimental testing utilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import {
  getRedirectUrl,
  unstable_getResponseFromNextConfig,
} from 'next/experimental/testing/server'

const response = await unstable_getResponseFromNextConfig({
  url: 'https://nextjs.org/test',
  nextConfig: {
    async redirects() {
      return [{ source: '/test', destination: '/test2', permanent: false }]
    },
  },
})
expect(response.status).toEqual(307)
expect(getRedirectUrl(response)).toEqual('https://nextjs.org/test2')
```

----------------------------------------

TITLE: Updating Next.js and React Packages using npm
DESCRIPTION: This command updates the Next.js, React, React DOM, and eslint-config-next packages to version 12 using npm. It ensures that the core dependencies are upgraded to the required versions for Next.js 12.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@12 react@17 react-dom@17 eslint-config-next@12
```

----------------------------------------

TITLE: Creating Next.js App with Segment Analytics using Yarn
DESCRIPTION: This command initializes a new Next.js application with the 'with-segment-analytics-pages-router' example using Yarn. It clones the example and sets up the necessary project structure for integrating Segment Analytics.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics-pages-router/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-segment-analytics-pages-router with-segment-analytics-app
```

----------------------------------------

TITLE: Running Contentful setup script
DESCRIPTION: This command executes the setup script to automatically create the content model within Contentful. It requires the CONTENTFUL_SPACE_ID and CONTENTFUL_MANAGEMENT_TOKEN environment variables to be set.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npx cross-env CONTENTFUL_SPACE_ID=YOUR_SPACE_ID CONTENTFUL_MANAGEMENT_TOKEN=XXX npm run setup
```

----------------------------------------

TITLE: Creating Next.js app with Neo4j example using pnpm
DESCRIPTION: This command utilizes pnpm to generate a new Next.js application from the `with-neo4j` example.  It initializes the project with all dependencies configured for a Neo4j-integrated Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-neo4j with-neo4j-app
```

----------------------------------------

TITLE: Creating Next.js app with next-translate using npx
DESCRIPTION: This command uses npx to create a new Next.js application with the next-translate example. It bootstraps the project with the specified template and names the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-translate/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-next-translate with-next-translate-app
```

----------------------------------------

TITLE: Creating Next.js app with React Hook Form Example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application with the 'with-react-hook-form' example. It bootstraps the project with the necessary dependencies and configurations for integrating React Hook Form.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-hook-form/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-hook-form with-react-hook-form-app
```

----------------------------------------

TITLE: Creating a Next.js app using npm
DESCRIPTION: This command initializes a new Next.js application named `api-routes-rest-app` using the `api-routes-rest` example.  It utilizes the `create-next-app` tool via `npx` and downloads the necessary files to create a basic project structure with example code for API routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-rest/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example api-routes-rest api-routes-rest-app
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-rbx-bulma-pro example. It initializes a project named with-rbx-bulma-pro-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rbx-bulma-pro/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app
```

----------------------------------------

TITLE: Creating a Next.js app with static export (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application with the 'with-static-export' example. It simplifies the process of starting a project with pre-configured static export settings. The app will be named 'with-static-export-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-static-export/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
yarn create next-app --example with-static-export with-static-export-app
```

----------------------------------------

TITLE: Create Next.js App with Meilisearch Example (Bun)
DESCRIPTION: This command utilizes Bun to create a fresh Next.js application using the with-meilisearch example. It sets up the project, incorporating all the necessary files and configurations for seamless Meilisearch integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-meilisearch/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
bunx create-next-app --example with-meilisearch with-meilisearch-app
```

----------------------------------------

TITLE: Creating Next.js MDX app with pnpm
DESCRIPTION: This command utilizes pnpm to create a new Next.js application named 'mdx-app' configured with MDX support. It fetches the MDX example template during the creation process. The command requires pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example mdx mdx-app
```

----------------------------------------

TITLE: Creating Next.js app with Vanilla Extract using NPX
DESCRIPTION: This command uses NPX to create a new Next.js application based on the Vanilla Extract example. It sets up a project named 'with-vanilla-extract-app' using the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vanilla-extract/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-vanilla-extract with-vanilla-extract-app
```

----------------------------------------

TITLE: Incorrect UUID Generation in Next.js
DESCRIPTION: Example showing problematic direct UUID generation without connection awareness.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const uuid = crypto.randomUUID()
  return <RequestId id={uuid}>
}
```

----------------------------------------

TITLE: Publishing a Message to a Channel
DESCRIPTION: This example shows how to publish a message to an Ably channel using the channel instance returned by the useChannel hook. It uses the Ably JavaScript SDK's channel.publish method.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
channel.publish("test-message", { text: "message text" });
```

----------------------------------------

TITLE: Form Component Usage in Pages Directory (TypeScript)
DESCRIPTION: Shows how to implement the Next.js Form component in the pages directory structure using TypeScript. The form redirects to a search page with query parameters on submission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import Form from 'next/form'

export default function Page() {
  return (
    <Form action="/search">
      {/* On submission, the input value will be appended to
          the URL, e.g. /search?query=abc */}
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Bootstrap Electron App with Next.js Using npm
DESCRIPTION: The snippet demonstrates using npx with create-next-app to generate a new Next.js project pre-configured for use with Electron. It sets up the initial project structure quickly without manual configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-electron with-electron-app
```

----------------------------------------

TITLE: getServerSideProps with notFound return - JavaScript
DESCRIPTION: This code shows how to return a `404` status using the `notFound` property within `getServerSideProps`. If the data fetch fails (e.g., the API returns an error or no data), the `notFound` property is set to `true`, causing Next.js to render the custom 404 page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export async function getServerSideProps(context) {
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  if (!data) {
    return {
      notFound: true,
    }
  }

  return {
    props: { data }, // will be passed to the page component as props
  }
}
```

----------------------------------------

TITLE: Configuring Relay Support in Next.js Compiler
DESCRIPTION: This snippet shows how to configure the Next.js Compiler to support Relay, a JavaScript framework for building data-driven React applications. It specifies settings needed for the Relay compiler to function properly in the Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compiler: {
    relay: {
      // This should match relay.config.js
      src: './',
      artifactDirectory: './__generated__',
      language: 'typescript',
      eagerEsModules: false,
    },
  },
}
```

----------------------------------------

TITLE: Bootstrapping Next.js Sitecore XM Cloud App using pnpm
DESCRIPTION: This command initializes a new Next.js project with Sitecore XM Cloud using pnpm. It requires Node.js and pnpm to be installed. The project is created in a directory called 'cms-sitecore-xmcloud-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitecore-xmcloud/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app
```

----------------------------------------

TITLE: Installing Next.js Canary Version via yarn
DESCRIPTION: This snippet provides the command to install the canary version of Next.js using yarn, which is an alternative package manager for JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/opening-an-issue.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn add next@canary
```

----------------------------------------

TITLE: Creating Next.js app with rosetta example using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the `with-i18n-rosetta` example.  It downloads and executes the create-next-app package and sets up a new project named `with-i18n-rosetta-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-rosetta/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-i18n-rosetta with-i18n-rosetta-app
```

----------------------------------------

TITLE: Installing Next.js with Supabase Starter Template using NPX
DESCRIPTION: Command to create a new Next.js application using the Supabase Starter template with NPX. This initializes a project with all the necessary configurations for Supabase integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-supabase with-supabase-app
```

----------------------------------------

TITLE: Creating Next.js App with Apollo Example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application pre-configured with the Apollo Server and Client example. It bootstraps the project with the necessary dependencies and configuration files. The new application will be located in the directory named 'api-routes-apollo-server-and-client-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app
```

----------------------------------------

TITLE: Accessing Uncached Data in generateViewport (Next.js JSX)
DESCRIPTION: This snippet illustrates attempting to use uncached external data, fetched from a source like a database, directly within the `generateViewport` function. Without explicitly marking the data as cacheable or ensuring the route is fully dynamic, this pattern can lead to the described error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-viewport.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { db } from './db'

export async function generateViewport() {
  const { width, initialScale } = await db.query('viewport-size')
  return {
    width,
    initialScale,
  }
}

export default async function Layout({ children }) {
  return ...
}
```

----------------------------------------

TITLE: Specifying Preferred Region in Next.js TSX
DESCRIPTION: This snippet shows how to set the `preferredRegion` option in a TypeScript/TSX file to indicate preferred deployment locations for a Next.js route segment. The support and interpretation of this option depend on the deployment platform.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
export const preferredRegion = 'auto'
// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']
```

----------------------------------------

TITLE: Configuring Minimum Cache TTL for Images in Next.js
DESCRIPTION: This code snippet shows how to configure the minimum cache TTL (Time To Live) for optimized images in Next.js. This value defines how long optimized images are cached. The max age of the optimized image is defined by either `minimumCacheTTL` or the upstream image `Cache-Control` header, whichever is larger.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_15

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    minimumCacheTTL: 60, // 1 minute
  },
}
```

----------------------------------------

TITLE: Creating Next.js app with react-bootstrap using npx
DESCRIPTION: This command uses npx to execute create-next-app with the with-react-bootstrap example. It creates a new Next.js application named 'with-react-bootstrap-app' with the react-bootstrap setup. The command requires Node.js and npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-bootstrap/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-bootstrap with-react-bootstrap-app
```

----------------------------------------

TITLE: Initializing Next.js App with pnpm
DESCRIPTION: This command uses `create-next-app` via `pnpm` to create a new Next.js application based on the `blog-starter` example.  It downloads the specified example and creates a new project named `blog-starter-app` in the current directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example blog-starter blog-starter-app
```

----------------------------------------

TITLE: Incorrect PostCSS Configuration (missing config)
DESCRIPTION: This code snippet highlights an incorrect PostCSS configuration where a plugin configuration is missing for an entry within the `plugins` array.  The corrected example demonstrates the removal of the wrapping array to properly configure the plugin.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins: [
    [
      'postcss-plugin-1',
      {
        optionA: '...',
      },
    ],
    // This single-entry array is detected as misconfigured because it's
    // missing the second element. To fix, unwrap the value.
    ['postcss-plugin-2'],
  ],
}
```

----------------------------------------

TITLE: Removing Static Export Configuration in next.config.js
DESCRIPTION: Removes the `output: 'export'` configuration to enable server-side rendering capabilities
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/gssp-export.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  reactStrictMode: true
}
```

----------------------------------------

TITLE: Create Next.js app with Flow (npm)
DESCRIPTION: This command uses npm to create a new Next.js application with Flow, using the 'with-flow' example.  It requires npm to be installed.  The new application will be created in a directory named 'with-flow-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-flow/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-flow with-flow-app
```

----------------------------------------

TITLE: Creating a Next.js app with Apollo using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application named 'with-apollo-app' using the 'with-apollo' example. It bootstraps the project with the necessary dependencies and configuration for Apollo integration. It requires Node.js and yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-apollo with-apollo-app
```

----------------------------------------

TITLE: Component Case Sensitivity Example - React/JSX
DESCRIPTION: Demonstrates how incorrect casing in import paths can cause module not found errors in React components.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export default function MyComponent() {
  return <h1>Hello</h1>
}
```

LANGUAGE: jsx
CODE:
```
// Note how `components/MyComponent` exists but `Mycomponent` without the capital `c` is imported
import MyComponent from '../components/Mycomponent'
```

----------------------------------------

TITLE: JavaScript Template Component Definition
DESCRIPTION: Defines a basic template component in JavaScript that wraps child components within a div element. Provides similar functionality to the TypeScript version with simpler prop handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/template.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export default function Template({ children }) {
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Incorrect Node.js Module Usage - Next.js
DESCRIPTION: Example showing incorrect implementation of Node.js-specific code in browser context, which will cause errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import Redis from 'ioredis'

const redis = new Redis(process.env.REDIS_URL)

export default redis
```

LANGUAGE: jsx
CODE:
```
import redis from '../lib/redis'
import { useEffect, useState } from 'react'

export default function Home() {
  const [message, setMessage] = useState()
  useEffect(() => {
    redis.get('message').then((result) => {
      setMessage(result)
    })
  }, [])
  return <h1>{message}</h1>
}
```

----------------------------------------

TITLE: Deprecated User Agent Detection in Next.js Middleware
DESCRIPTION: Example showing the deprecated way of accessing user agent information using req.ua in Next.js middleware. This approach is no longer supported and should be updated.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-parse-user-agent.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'

  request.nextUrl.searchParams.set('viewport', viewport)
  return NextResponse.rewrites(request.nextUrl)
}
```

----------------------------------------

TITLE: Generating VAPID keys using web-push
DESCRIPTION: This command generates VAPID keys using the web-push CLI.  These keys are required for secure push notifications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_11

LANGUAGE: bash
CODE:
```
web-push generate-vapid-keys
```

----------------------------------------

TITLE: Creating Next.js App with Facebook Pixel Example (pnpm)
DESCRIPTION: This command initializes a new Next.js application using the `with-facebook-pixel` example from the Next.js repository. It utilizes `create-next-app` via `pnpm` to bootstrap the project. The resulting application, `with-facebook-pixel-app`, includes the necessary configuration for Facebook Pixel integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-facebook-pixel with-facebook-pixel-app
```

----------------------------------------

TITLE: Creating Next.js app with Overmind using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application with the Overmind example. It utilizes the create next-app tool and specifies the 'with-overmind' example and 'with-overmind-app' as the application name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-overmind/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-overmind with-overmind-app
```

----------------------------------------

TITLE: Creating Next.js app with Vanilla Extract using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the Vanilla Extract example. It initializes a project named 'with-vanilla-extract-app' utilizing the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vanilla-extract/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-vanilla-extract with-vanilla-extract-app
```

----------------------------------------

TITLE: Initializing Next.js App with Orbit-components using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application bootstrapped with the Orbit-components example. It leverages the create-next-app tool for project setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-orbit-components/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-orbit-components with-orbit-components-app
```

----------------------------------------

TITLE: Configuring exportPathMap in next.config.js
DESCRIPTION: This code snippet shows how to configure the `exportPathMap` function in `next.config.js` to correctly map static routes to Next.js pages, including dynamically routed pages. It highlights the correct way to define a path that matches a dynamically routed page with parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-path-mismatch.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  exportPathMap: function () {
    return {
      '/': { page: '/' },
      // '/blog/nextjs': { page: '/blog/[post]/comment/[id]' },        // wrong
      '/blog/nextjs/comment/1': { page: '/blog/[post]/comment/[id]' }, // correct
    }
  },
}
```

----------------------------------------

TITLE: Disabling Font Preloading in Next.js
DESCRIPTION: This snippet demonstrates how to disable preloading for the Noto Sans Japanese font in Next.js. It is necessary when specific font subsets cannot be preloaded. The key parameter 'preload' is set to false, indicating that the font should not be preloaded. This snippet works with 'next/font/google' and the Noto_Sans_JP font.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/google-fonts-missing-subsets.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
const notoSansJapanese = Noto_Sans_JP({
  weight: '400',
  preload: false,
})
```

----------------------------------------

TITLE: Applying Vercel NFT Next.js Plugin in next.config.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to integrate the `@vercel/experimental-nft-next-plugin` into your Next.js project's `next.config.js` file. It imports the `createNodeFileTrace` function and uses it to wrap your existing Next.js configuration object, enabling the experimental Node.js file tracing feature with optional configuration passed to the plugin.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/turbo-tracing-next-plugin/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// next.config.js

const { createNodeFileTrace } = require('@vercel/experimental-nft-next-plugin')

const withNodeFileTrace = createNodeFileTrace({
  // experimental nft options
  log: {
    all: true,
  },
})

module.exports = withNodeFileTrace({
  // next config
})
```

----------------------------------------

TITLE: Custom Partytown Configuration
DESCRIPTION: This code snippet shows how to customize the Partytown configuration in a Next.js application by including a `data-partytown-config` script tag within the `<Head />` component of a custom `_document.js` file. It allows modifying Partytown settings like debug mode and library path. Requires a custom `_document.js` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html>
      <Head>
        <script
          data-partytown-config
          dangerouslySetInnerHTML={{
            __html: `
              partytown = {
                lib: "/_next/static/~partytown/",
                debug: true
              };
            `,
          }}
        />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
```

----------------------------------------

TITLE: Demonstrating Incompatible Href and As Values in Next.js
DESCRIPTION: This snippet illustrates an incompatible usage of the `next/link` component where the `href` uses dynamic routing but the `as` value does not provide the expected parameters. This results in a rendering error when trying to navigate.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/incompatible-href-as.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page(props) {
  return (
    <>
      <Link href="/[post]" as="/post-1/comments">
        <a>Invalid link</a>
      </Link>
    </>
  )
}

```

----------------------------------------

TITLE: Running Jest Tests using pnpm
DESCRIPTION: This snippet presents the command to run Jest tests in the Next.js application using pnpm. This step is crucial for ensuring that all tests are executed correctly in the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-algolia-react-instantsearch example. It initializes a project with the specified example template and names the directory with-algolia-react-instantsearch-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-algolia-react-instantsearch/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

----------------------------------------

TITLE: Creating a Next.js app with GraphQL example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the api-routes-graphql example. It sets up a project configured for GraphQL, including installing dependencies. The new application will be named 'api-routes-graphql-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-graphql/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-graphql api-routes-graphql-app
```

----------------------------------------

TITLE: Configuring URL Normalization Skip in Next.js (JS)
DESCRIPTION: Configures Next.js to disable automatic URL normalization in middleware by setting `skipMiddlewareUrlNormalize` to `true` in the `next.config.js` file. This allows the middleware to receive the original request URL path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_15

LANGUAGE: javascript
CODE:
```
module.exports = {
  skipMiddlewareUrlNormalize: true,
}
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses npx to create a new Next.js application with the react-remove-properties example. It clones the example and sets up a new project directory called react-remove-properties-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/react-remove-properties/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example react-remove-properties react-remove-properties-app
```

----------------------------------------

TITLE: Configuring Experimental Rust MDX Compiler
DESCRIPTION: Configures the experimental Rust-based MDX compiler in Next.js by passing an object to the `mdxRs` flag within the `experimental` configuration. This allows customization of the JSX runtime, import source, and syntax type.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_25

LANGUAGE: javascript
CODE:
```
module.exports = withMDX({
  experimental: {
    mdxRs: {
      jsxRuntime?: string,
      jsxImportSource?: string,
      mdxType?: 'gfm' | 'commonmark'
    },
  },
})
```

----------------------------------------

TITLE: Creating Next.js app with React Hook Form Example (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application with the 'with-react-hook-form' example.  It bootstraps the project with the necessary dependencies and configurations for integrating React Hook Form.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-hook-form/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-hook-form with-react-hook-form-app
```

----------------------------------------

TITLE: Basic Jest Test Template with Placeholder
DESCRIPTION: A Jest test suite template that uses a {{name}} placeholder for the test description. Contains a single test case that verifies type checking using expect assertion.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/unit/example.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
describe('{{name}}', () => {
  it('should work', async () => {
    expect(typeof 'hello').toBe('string')
  })
})
```

----------------------------------------

TITLE: Configuring Playwright for Next.js testmode
DESCRIPTION: This snippet configures the `playwright.config.ts` file to integrate with Next.js's experimental test mode.  It defines a webServer to run the Next.js development server during tests, specifying the command to start the server and the URL where it will be accessible.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { defineConfig } from 'next/experimental/testmode/playwright'

export default defineConfig({
  webServer: {
    command: 'npm run dev',
    url: 'http://localhost:3000',
  },
})
```

----------------------------------------

TITLE: Creating Next.js app with dynamic-import example (npm)
DESCRIPTION: This command uses `create-next-app` with npm to create a new Next.js application based on the `with-dynamic-import` example. It creates a directory named `with-dynamic-import-app` containing the new project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-dynamic-import/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-dynamic-import with-dynamic-import-app
```

----------------------------------------

TITLE: Creating URL Instances from External Sources
DESCRIPTION: This snippet shows how to create a URL object for an external asset and log its pathname in JavaScript, demonstrating integration with `import.meta.url`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const logo = new URL('https://example.com/assets/file.txt', import.meta.url)

console.log(logo.pathname)

// prints "/_next/static/media/file.a9727b5d.txt"
```

----------------------------------------

TITLE: Opt-out Packages from Bundling (Pages Router)
DESCRIPTION: Configures the `serverExternalPackages` option in `next.config.js` to prevent specific packages from being automatically bundled when `bundlePagesRouterDependencies` is enabled. This allows for excluding certain packages in Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Automatically bundle external packages in the Pages Router:
  bundlePagesRouterDependencies: true,
  // Opt specific packages out of bundling for both App and Pages Router:
  serverExternalPackages: ['package-name'],
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Enabling AVIF Image Support in Next.js
DESCRIPTION: This code snippet demonstrates how to enable AVIF image support in Next.js. If the browser doesn't support AVIF, it falls back to the original image format. It is recommended to use WebP for most use cases.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_14

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    formats: ['image/avif'],
  },
}
```

----------------------------------------

TITLE: Run Relay compiler (Yarn)
DESCRIPTION: This command uses Yarn to execute the 'relay' script defined in the project's package.json. The purpose is to perform Relay ahead-of-time compilation, which is required after any edits to components that query data with Relay. It ensures optimal performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
yarn relay
```

----------------------------------------

TITLE: Running home app with yarn
DESCRIPTION: These commands navigate to the `home` directory, install dependencies using yarn, and start the development server. The home app will be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
cd home
yarn && yarn dev
```

----------------------------------------

TITLE: Configuring Allowed Origins for Server Actions (Next.js JS)
DESCRIPTION: Configures the `experimental.serverActions.allowedOrigins` option in `next.config.js`. This setting defines a list of trusted origins, including support for wildcards, from which Server Actions are permitted to be invoked. This is an advanced security measure for scenarios involving reverse proxies or different backend architectures.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_31

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
module.exports = {
  experimental: {
    serverActions: {
      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],
    },
  },
}
```

----------------------------------------

TITLE: Creating Next.js App with Convex Example (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application using the Convex example. It sets up the project with Convex configurations. It requires Yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example convex convex-app
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command utilizes Yarn to bootstrap a new Next.js application called 'with-polyfills-app' using the 'with-polyfills' example. It configures the application with the required polyfills for older browser support.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-polyfills/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-polyfills with-polyfills-app
```

----------------------------------------

TITLE: Creating Next.js app with Reflexjs using yarn
DESCRIPTION: This command uses yarn to execute create next-app with the with-reflexjs example. It creates a new Next.js application named with-reflexjs-app with Reflexjs pre-configured. This requires Node.js and yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflexjs/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-reflexjs with-reflexjs-app
```

----------------------------------------

TITLE: Configuring Custom Page Extensions in Next.js
DESCRIPTION: This code snippet shows how to configure custom page extensions in the next.config.js file. It allows for supporting different file extensions for page components or including non-page files in the pages directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/page-without-valid-component.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[Custom Page Extensions](/docs/pages/api-reference/config/next-config-js/pageExtensions)
```

----------------------------------------

TITLE: Creating Next.js app with Knex Example
DESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js project with the `with-knex` example. It shows how to initialize a new project using npm, yarn or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-knex with-knex-app
```

----------------------------------------

TITLE: Importing WASM Module in Next.js Middleware
DESCRIPTION: Demonstrates the correct way to import and use WebAssembly modules in Next.js middleware by using static imports instead of dynamic compilation. The example shows how to instantiate a WASM module, execute its exported function, and set the result in response headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-dynamic-wasm-compilation.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import squareWasm from './square.wasm?module'

export default async function middleware() {
  const m = await WebAssembly.instantiate(squareWasm)
  const answer = m.exports.square(9)
  const response = NextResponse.next()

  response.headers.set('x-square', answer.toString())
  return response
}
```

----------------------------------------

TITLE: Redirecting in getStaticProps - JavaScript
DESCRIPTION: This code snippet demonstrates how to use the `redirect` object within `getStaticProps` to redirect users to a different page if data fetching fails. It shows setting the `destination` and `permanent` properties. The `statusCode` property is an alternative to `permanent` for older HTTP clients.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
export async function getStaticProps(context) {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!data) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
        // statusCode: 301
      },
    }
  }

  return {
    props: { data }, // will be passed to the page component as props
  }
}
```

----------------------------------------

TITLE: Create Postponed Abort Signal (JS)
DESCRIPTION: Creates an `AbortController` and its associated `AbortSignal`. It calls React's `unstable_postpone` and aborts the signal if postponement is successful, or catches errors and aborts the signal if postponement fails.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_16

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import React from 'react';
import { c as assertPostpone } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
function createPostponedAbortSignal(reason) {
    assertPostpone();
    const controller = new AbortController();
    try {
        React.unstable_postpone(reason);
    } catch (x) {
        controller.abort(x);
    }
    return controller.signal;
}
export { createPostponedAbortSignal };
export { createPostponedAbortSignal as k } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Embedding YouTube Videos with Next.js
DESCRIPTION: This snippet shows how to embed a YouTube video in a Next.js page. It uses the `YouTubeEmbed` component from `@next/third-parties/google`, which utilizes `lite-youtube-embed` for faster loading. The `videoid` prop is required, and additional parameters like height and video player parameters can be specified.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_16

LANGUAGE: jsx
CODE:
```
import { YouTubeEmbed } from '@next/third-parties/google'

export default function Page() {
  return <YouTubeEmbed videoid="ogfYd705cRs" height={400} params="controls=0" />
}
```

----------------------------------------

TITLE: On-demand Revalidation Server Action App Router JS
DESCRIPTION: Demonstrates how to use the `revalidatePath` function within a Next.js Server Action using JavaScript to clear the cache for a specific path (`/posts`) on demand. This function is typically triggered by an event like adding a new post, ensuring the next request fetches fresh data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_7

LANGUAGE: js
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost() {
  // Invalidate the /posts route in the cache
  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Renaming Next.js Image Imports
DESCRIPTION: Codemod to safely rename 'next/image' imports to 'next/legacy/image' and 'next/future/image' to 'next/image' in Next.js 13.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_8

LANGUAGE: jsx
CODE:
```
import Image1 from 'next/image'
import Image2 from 'next/future/image'

export default function Home() {
  return (
    <div>
      <Image1 src="/test.jpg" width="200" height="300" />
      <Image2 src="/test.png" width="500" height="400" />
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
// 'next/image' becomes 'next/legacy/image'
import Image1 from 'next/legacy/image'
// 'next/future/image' becomes 'next/image'
import Image2 from 'next/image'

export default function Home() {
  return (
    <div>
      <Image1 src="/test.jpg" width="200" height="300" />
      <Image2 src="/test.png" width="500" height="400" />
    </div>
  )
}
```

----------------------------------------

TITLE: Setting up SuperTokens with Next.js using create-supertokens-app (NPX)
DESCRIPTION: Command to create a Next.js application with SuperTokens authentication using the official SuperTokens CLI tool with NPX, allowing further customization during setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npx create-supertokens-app@latest --frontend=next
```

----------------------------------------

TITLE: Testing HTML Content with Cheerio Rendering
DESCRIPTION: Uses Cheerio to parse and verify page content by selecting and checking text of HTML elements
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
it('should work using cheerio', async () => {
  const $ = await next.render$()
  expect($('p').text()).toBe('hello world')
})
```

----------------------------------------

TITLE: Creating a Next.js app with GraphQL example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the api-routes-graphql example. It initializes the project with all the necessary files and dependencies for a GraphQL API. The new application will be named 'api-routes-graphql-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-graphql/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-graphql api-routes-graphql-app
```

----------------------------------------

TITLE: Creating Next.js App with AMP Example (pnpm)
DESCRIPTION: Uses pnpm to create a new Next.js application based on the AMP example.  This command sets up the project with the required files for AMP support. It uses the 'amp' example and names the new application 'amp-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/amp/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example amp amp-app
```

----------------------------------------

TITLE: Creating Next.js App with WebWorker Example (npm)
DESCRIPTION: This command initializes a new Next.js application using the 'with-web-worker' example. It uses npm to execute the create-next-app command and sets up a project named 'with-web-worker-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-web-worker/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-web-worker with-web-worker-app
```

----------------------------------------

TITLE: Creating Next.js App with create-next-app (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application with the mdx-remote example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example mdx-remote mdx-remote-app
```

----------------------------------------

TITLE: Creating Next.js App with Convex Example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application using the Convex example. It bootstraps the project with the necessary configurations for Convex integration. This requires npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example convex convex-app
```

----------------------------------------

TITLE: Creating Next.js app with particles example (npm)
DESCRIPTION: This command utilizes npm to create a new Next.js application using the 'with-particles' example. It initializes a project named 'with-particles-app' with the pre-configured particle animation setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-particles/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-particles with-particles-app
```

----------------------------------------

TITLE: Creating Next.js App with Kontent.ai Example (npm)
DESCRIPTION: This command uses the `create-next-app` utility with npm to bootstrap a new Next.js application using the `cms-kontent-ai` example. It creates a new directory named `cms-kontent-app` containing the project files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-kontent-ai cms-kontent-app
```

----------------------------------------

TITLE: Defining Custom Next.js Document Component (JavaScript)
DESCRIPTION: Defines a custom `_document.js` component by extending `next/document`. It overrides the static `getInitialProps` method to fetch initial props and add custom styles, and defines the basic HTML structure (`Html`, `Head`, `body`, `Main`, `NextScript`) in the `render` method using React/JSX runtime functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_7

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import Document from 'next/document';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { jsxs as _jsxs } from "react/jsx-runtime";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { Fragment as _Fragment } from "react/jsx-runtime";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { jsx as _jsx } from "react/jsx-runtime";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { Html } from 'next/document';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { Head } from 'next/document';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { Main } from 'next/document';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { NextScript } from 'next/document';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
class MyDocument extends Document {
    static async getInitialProps(ctx) {
        const initialProps = await Document.getInitialProps(ctx);
        return {
            ...initialProps,
            styles: _jsxs(_Fragment, {
                children: [
                    initialProps.styles,
                    _jsx("style", {
                        dangerouslySetInnerHTML: {
                            __html: `html { background: hotpink; }`
                        }
                    })
                ]
            })
        };
    }
    render() {
        return _jsxs(Html, {
            children: [
                _jsx(Head, {}),
                _jsxs("body", {
                    children: [
                        _jsx(Main, {}),
                        _jsx(NextScript, {})
                    ]
                })
            ]
        });
    }
}
const __TURBOPACK__default__export__ = MyDocument;
export { __TURBOPACK__default__export__ as default };
export { MyDocument as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { __TURBOPACK__default__export__ as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Configuring SWC Plugins in Next.js Configuration
DESCRIPTION: This snippet demonstrates how to configure experimental SWC plugins in the Next.js configuration file. Plugins are specified as an array of tuples, each containing the plugin path and its options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
module.exports = {
  experimental: {
    swcPlugins: [
      [
        'plugin',
        {
          ...pluginOptions,
        },
      ],
    ],
  },
}
```

----------------------------------------

TITLE: Create Next.js App with Bun
DESCRIPTION: This command uses Bun to create a new Next.js application based on the cms-wordpress example. It initializes a project named cms-wordpress-app in the current directory, using the specified example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
bunx create-next-app --example cms-wordpress cms-wordpress-app
```

----------------------------------------

TITLE: Wrapping Dynamic Component in Suspense for PPR (JSX)
DESCRIPTION: Demonstrates wrapping the dynamic `User` component with `React.Suspense` within a PPR-enabled page (`experimental_ppr = true`). This allows the static parts of the page to be prerendered while the dynamic `User` component's content is streamed later, showing a `AvatarSkeleton` fallback initially.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
import { Suspense } from 'react'
import { User, AvatarSkeleton } from './user'

export const experimental_ppr = true

export default function Page() {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Suspense fallback={<AvatarSkeleton />}>
        <User />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Using shared data fetching function with getStaticProps (JavaScript)
DESCRIPTION: This snippet shows how to use a shared function (`loadPosts`) to fetch data in `getStaticProps`. This is helpful for re-using the data-fetching logic between `getStaticProps` and API routes, keeping the code DRY and maintainable.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
// pages/blog.js
import { loadPosts } from '../lib/load-posts'

// This function runs only on the server side
export async function getStaticProps() {
  // Instead of fetching your `/api` route you can call the same
  // function directly in `getStaticProps`
  const posts = await loadPosts()

  // Props returned will be passed to the page component
  return { props: { posts } }
}
```

----------------------------------------

TITLE: Sharing Nested Metadata Fields Example (JSX)
DESCRIPTION: Illustrates a pattern for sharing nested metadata fields, such as an `openGraphImage` object, across multiple pages or layouts by defining it in a separate shared file and importing it. This allows child segments to reuse parts of the parent's metadata structure while still overriding specific fields like the title.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/04-metadata.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
export const openGraphImage = { images: ['http://...'] };
```

LANGUAGE: jsx
CODE:
```
import { openGraphImage } from './shared-metadata';

export const metadata = {
  openGraph: {
    ...openGraphImage,
    title: 'Home',
  },
};
```

LANGUAGE: jsx
CODE:
```
import { openGraphImage } from '../shared-metadata';

export const metadata = {
  openGraph: {
    ...openGraphImage,
    title: 'About',
  },
};
```

----------------------------------------

TITLE: Disabling ESLint During Production Builds (ts)
DESCRIPTION: This snippet shows how to disable ESLint during production builds by setting `eslint.ignoreDuringBuilds` to `true` in `next.config.ts`.  This prevents ESLint errors from causing build failures in production environments. It defines a `NextConfig` object with the `eslint` property set to ignore builds.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_10

LANGUAGE: ts
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  eslint: {
    // Warning: This allows production builds to successfully complete even if
    // your project has ESLint errors.
    ignoreDuringBuilds: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Creating API Route for Form Submission - TypeScript
DESCRIPTION: This code snippet demonstrates creating an API route in Next.js using TypeScript to handle form submissions. It retrieves data from the request body, calls a function (createItem) to process the data, and sends a response with the created item's ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const data = req.body
  const id = await createItem(data)
  res.status(200).json({ id })
}
```

----------------------------------------

TITLE: Creating Next.js App with create-next-app (Bun)
DESCRIPTION: This command uses Bun to create a new Next.js application with the mdx-remote example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
bunx create-next-app --example mdx-remote mdx-remote-app
```

----------------------------------------

TITLE: Creating Next.js app with filbert-js example using npx
DESCRIPTION: This command utilizes npx to create a new Next.js application based on the filbert-js example. It downloads and executes the create-next-app package with the specified example and project name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-filbert/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-filbert with-filbert-app
```

----------------------------------------

TITLE: Initialize Next.js App with Plasmic Example (Yarn)
DESCRIPTION: This command uses the `create next-app` tool with Yarn to bootstrap a new Next.js application using the `cms-plasmic` example. It creates a new directory named `cms-plasmic-app` containing the project files. Requires Yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-plasmic cms-plasmic-app
```

----------------------------------------

TITLE: Creating Next.js Temporal Project with NPX
DESCRIPTION: Command to create a new Next.js project with Temporal integration using NPX.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-temporal next-temporal-app
```

----------------------------------------

TITLE: Copying Environment Configuration File (Bash)
DESCRIPTION: This command copies the example environment configuration file to a local environment file.  This allows for customizing the environment variables without affecting the original example file and prevents the local configuration from being committed to version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Running Tests with npm
DESCRIPTION: This command runs the Vitest tests in the project using npm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm test
```

----------------------------------------

TITLE: Creating Next.js app with Styletron using npx
DESCRIPTION: This command uses npx to create a new Next.js application with the Styletron example.  It initializes a project named 'with-styletron-app' using the 'with-styletron' example template. Requires Node.js and npm installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styletron/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-styletron with-styletron-app
```

----------------------------------------

TITLE: Enabling useCache Experimental Flag in Next.js Configuration
DESCRIPTION: This code demonstrates how to enable the useCache experimental flag in the next.config.ts file. When enabled, it allows the use of the 'use cache' directive independently of dynamicIO.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/useCache.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    useCache: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses `create-next-app` with npm to bootstrap a new Next.js project based on the `with-graphql-gateway` example. It will create a directory named `with-graphql-gateway-app` with the project files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-graphql-gateway with-graphql-gateway-app
```

----------------------------------------

TITLE: Creating Next.js app with GraphQL Hooks example (Yarn)
DESCRIPTION: This command utilizes `create next-app` with Yarn to bootstrap a new Next.js application using the `with-graphql-hooks` example. It installs the necessary dependencies and sets up the project structure for working with GraphQL Hooks.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-hooks/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-graphql-hooks with-graphql-hooks-app
```

----------------------------------------

TITLE: Creating Next.js App with Framer Motion Example (npm)
DESCRIPTION: This command uses the `create-next-app` tool to bootstrap a new Next.js application pre-configured with the Framer Motion example. It leverages npm as the package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-framer-motion/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-framer-motion with-framer-motion-app
```

----------------------------------------

TITLE: Creating Next.js App with Grafbase Example using Yarn
DESCRIPTION: This command initializes a new Next.js application using the 'with-grafbase' example. It leverages Yarn as the package manager to create a project called 'with-grafbase-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-grafbase with-grafbase-app
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with Yarn
DESCRIPTION: This command utilizes Yarn to create a new Next.js application using the 'with-joi' example.  It sets up a new project named 'with-joi-app' from the specified template. Yarn must be installed globally for this command to function.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-joi/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-joi with-joi-app
```

----------------------------------------

TITLE: Creating Next.js app with GSAP using Yarn
DESCRIPTION: This command initializes a new Next.js application using the `with-gsap` example. It utilizes `create-next-app` via Yarn. The resulting application will be named `with-gsap-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-gsap/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-gsap with-gsap-app
```

----------------------------------------

TITLE: Redirecting Request with Next.js Middleware TypeScript
DESCRIPTION: This snippet demonstrates a basic Next.js Middleware function written in TypeScript that redirects any incoming request matching the configured `matcher` path to the `/home` URL using `NextResponse.redirect`. It requires importing `NextResponse` and `NextRequest` from `next/server`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
  return NextResponse.redirect(new URL('/home', request.url))
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: '/about/:path*',
}
```

----------------------------------------

TITLE: Incorrectly Attaching getStaticProps to Page Component in Next.js
DESCRIPTION: This code snippet demonstrates the incorrect way of attaching `getStaticProps` to a Next.js page component. `getStaticProps` should not be a property of the component but rather a separate exported function. This example will cause an error because Next.js expects `getStaticProps` to be a named export.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/gssp-component-member.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
function Page(props) {
  return <p>hello world</p>
}

Page.getStaticProps = () => ({
  props: {
    hello: 'world',
  },
})

export default Page
```

----------------------------------------

TITLE: Disabling Draft Mode in Next.js Route Handler (TypeScript)
DESCRIPTION: This code snippet shows how to disable Draft Mode in a Next.js Route Handler using TypeScript. It imports `draftMode` from `next/headers`, calls `draft.disable()` to disable Draft Mode, and returns a response indicating that Draft Mode is disabled. It requires the `next` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
import { draftMode } from 'next/headers'

export async function GET(request: Request) {
  const draft = await draftMode()
  draft.disable()
  return new Response('Draft mode is disabled')
}
```

----------------------------------------

TITLE: Disable SSR with next/dynamic (Pages Router)
DESCRIPTION: This code snippet demonstrates how to disable server-side rendering (SSR) using the `ssr` option with `next/dynamic` in the `pages` router. This is useful for components that rely on browser-specific APIs and cannot be rendered on the server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
'use client'

import dynamic from 'next/dynamic'

const DynamicHeader = dynamic(() => import('../components/header'), {
  ssr: false,
})
```

----------------------------------------

TITLE: Matching Single Path with Next.js Middleware Config JavaScript
DESCRIPTION: This snippet shows how to configure the `matcher` property in the Next.js Middleware `config` export to specify that the middleware should only run for requests whose paths match a single specified pattern. The pattern `/about/:path*` matches `/about` and any path segment following it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
export const config = {
  matcher: '/about/:path*',
}
```

----------------------------------------

TITLE: Redirects with basePath Support in Next.js
DESCRIPTION: Demonstrates how to manage redirects with `basePath` support in `next.config.js`. By default, `source` and `destination` are prefixed with `basePath`, but this can be disabled using the `basePath: false` property in the redirect configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  basePath: '/docs',
  async redirects() {
    return [
      {
        source: '/with-basePath',
        destination: '/another',
        permanent: false,
      },
      {
        source: '/without-basePath',
        destination: 'https://example.com',
        basePath: false,
        permanent: false,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Check and Display Draft Mode Status in Next.js (TypeScript)
DESCRIPTION: This code snippet demonstrates how to check and display the current Draft Mode status within a Next.js Server Component using TypeScript. It retrieves the status using `draftMode()` and renders a paragraph indicating whether Draft Mode is currently enabled or disabled.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/draft-mode.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { draftMode } from 'next/headers'

export default async function Page() {
  const { isEnabled } = await draftMode()
  return (
    <main>
      <h1>My Blog Post</h1>
      <p>Draft Mode is currently {isEnabled ? 'Enabled' : 'Disabled'}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Setting a Custom Response Size Limit in API Routes on Next.js
DESCRIPTION: This snippet demonstrates how to set a custom response size limit for an API Route in Next.js. By using the responseLimit key, developers can define their own size threshold in bytes or string format, allowing more control over the API response.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/api-routes-response-size-limit.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export const config = {
  api: {
    responseLimit: '8mb',
  },
}
```

----------------------------------------

TITLE: Creating a Next.js App with Firebase Example (pnpm)
DESCRIPTION: This command initializes a new Next.js application named `with-firebase-app` using the `with-firebase` example. It leverages the `create next-app` tool with the pnpm package manager. This command assumes pnpm is installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-firebase with-firebase-app
```

----------------------------------------

TITLE: Importing and Combining Constants with Export Assertions
DESCRIPTION: This snippet shows how to import a constant 'dog' using assertions, declare 'cat', and create 'CHIMERA' as the combination of both. It exports the combined result.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { a as dog } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
const cat = "cat";
const CHIMERA = cat + dog;
export { CHIMERA };
export { cat as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { CHIMERA as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Dynamically Importing Module (ECMAScript Modules)
DESCRIPTION: This snippet uses the dynamic `import()` function with a dynamic variable (`unknown`) as the module specifier. Similar to dynamic `require`, this pattern prevents static analysis tools from knowing which module will be imported at runtime. It requires an environment that supports dynamic ECMAScript module imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__-3e2c30.txt#_snippet_5

LANGUAGE: javascript
CODE:
```
import(unknown)
```

----------------------------------------

TITLE: Javascript Module Part 3 (prod)
DESCRIPTION: Part 3 of the production build. Imports `value` and `value2` then defines `value3` and shared based on them. It exports `value3` as `d` and `shared` as `c`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_22

LANGUAGE: javascript
CODE:
```
import { a as value } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
import { b as value2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
const value3 = externalFunction();
const shared = {
    value,
    value2,
    value3
};
export { value3 as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { shared as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Transforming App Router Route Segment Config Runtime Value
DESCRIPTION: Codemod to transform the Route Segment Config 'runtime' value from 'experimental-edge' to 'edge' in Next.js App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_1

LANGUAGE: ts
CODE:
```
export const runtime = 'experimental-edge'
```

LANGUAGE: ts
CODE:
```
export const runtime = 'edge'
```

----------------------------------------

TITLE: Creating Next.js app with Reflexjs using pnpm
DESCRIPTION: This command uses pnpm to execute create next-app with the with-reflexjs example. It creates a new Next.js application named with-reflexjs-app with Reflexjs pre-configured. This requires Node.js and pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflexjs/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-reflexjs with-reflexjs-app
```

----------------------------------------

TITLE: Disabling iOS Format Detection with Meta Tag (HTML)
DESCRIPTION: Provides an HTML `<meta>` tag configuration typically placed in the document's `<head>`. It disables iOS Safari's automatic detection and linking of potential phone numbers, dates, emails, and addresses within text content, which can sometimes cause hydration errors by subtly altering the rendered HTML.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-hydration-error.mdx#_snippet_3

LANGUAGE: HTML
CODE:
```
<meta
  name="format-detection"
  content="telephone=no, date=no, email=no, address=no"
/>
```

----------------------------------------

TITLE: Output HTML for Generated Icon - HTML
DESCRIPTION: Displays the HTML <link> tag generated in the document's <head> when an icon is programmatically generated using an icon.js or icon.tsx file. The type and sizes attributes are determined by the exported metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_5

LANGUAGE: html
CODE:
```
<link rel="icon" href="/icon?<generated>" type="image/png" sizes="32x32" />
```

----------------------------------------

TITLE: Creating Next.js app using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application named 'with-mocha-app' based on the 'with-mocha' example.  It initializes a project with pre-configured Mocha testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mocha with-mocha-app
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the api-routes-middleware example.  It initializes the project with the specified example and names the new application api-routes-middleware-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-middleware/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-middleware api-routes-middleware-app
```

----------------------------------------

TITLE: Creating a Next.js App using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named 'my-blog' using the 'blog' example. It sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example blog my-blog
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-next-page-transitions example. It leverages Yarn's create command to initialize the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-page-transitions/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-next-page-transitions with-next-page-transitions-app
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command bootstraps a new Next.js application using create-next-app with the `with-next-seo` example. It utilizes Yarn as the package manager, creating a project named `next-seo-app`.  Yarn is a package manager that can be used as an alternative to npm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-seo/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-next-seo next-seo-app
```

----------------------------------------

TITLE: Creating Next.js Forms App with PNPM
DESCRIPTION: Command to create a new Next.js application with forms example using PNPM package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/next-forms/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example next-forms next-forms-app
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with npm
DESCRIPTION: This command uses npm to create a new Next.js application using the DatoCMS example. It clones the example project into a new directory named cms-datocms-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-datocms cms-datocms-app
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the react-native-web example. It installs the required packages and configures the project for React Native Web integration within a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-native-web/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-native-web with-react-native-web-app
```

----------------------------------------

TITLE: Upgrading Next.js to Canary Release using npm
DESCRIPTION: This command upgrades Next.js to the latest canary release using npm package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@canary
```

----------------------------------------

TITLE: Defining Static `getInitialProps` in Class Component
DESCRIPTION: Demonstrates how to implement `getInitialProps` as a static method within a React class component in Next.js, ensuring proper data fetching and initialization.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/get-initial-props-as-an-instance-method.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
export default class YourEntryComponent extends React.Component {
  static getInitialProps() {
    return {}
  }

  render() {
    return 'foo'
  }
}
```

----------------------------------------

TITLE: Configure Optimize Package Imports in Next.js
DESCRIPTION: This snippet shows how to configure Next.js to automatically optimize imports for certain packages, particularly those that use barrel files. This configuration is added to the `next.config.js` file. Turbopack does this automatically and does not need this configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
module.exports = {
  experimental: {
    optimizePackageImports: ['package-name'],
  },
}
```

----------------------------------------

TITLE: Catch-All Route Setup with Conflicts in JavaScript
DESCRIPTION: This snippet defines a catch-all route and configures static paths that overlap with existing paths. It demonstrates how to prevent conflicting routes by adjusting path definitions in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-ssg-paths.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
export const getStaticProps = () => ({ props: {} })

export const getStaticPaths = () => ({
  paths: [
    // this conflicts with the /blog/conflicting path above, remove to resolve error
    '/blog/conflicting',
    '/another',
  ],
  fallback: false,
})

export default function CatchAll() {
  return 'Catch-all page'
}
```

----------------------------------------

TITLE: Configuring Basic Icons Metadata in Next.js (JSX & HTML)
DESCRIPTION: Configures basic link tags for website icons (favicon, shortcut, apple touch) using a simple object structure in the `metadata.icons` property. This method is less recommended than file-based icons but serves as a manual configuration option. Requires defining the `metadata` object in a `layout.js` or `page.js` file. The code generates the corresponding `<link>` tags in the HTML head.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_15

LANGUAGE: JSX
CODE:
```
export const metadata = {
  icons: {
    icon: '/icon.png',
    shortcut: '/shortcut-icon.png',
    apple: '/apple-icon.png',
    other: {
      rel: 'apple-touch-icon-precomposed',
      url: '/apple-touch-icon-precomposed.png',
    },
  },
}
```

LANGUAGE: HTML
CODE:
```
<link rel="shortcut icon" href="/shortcut-icon.png" />
<link rel="icon" href="/icon.png" />
<link rel="apple-touch-icon" href="/apple-icon.png" />
<link
  rel="apple-touch-icon-precomposed"
  href="/apple-touch-icon-precomposed.png"
/>
```

----------------------------------------

TITLE: Creating Next.js app using npx with Markdoc example
DESCRIPTION: This command initializes a new Next.js application named 'markdoc-app' using the Markdoc example from the create-next-app tool. It leverages npx to execute the command directly without requiring global installation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/markdoc/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example markdoc markdoc-app
```

----------------------------------------

TITLE: Upgrading Next.js to Canary Release using yarn
DESCRIPTION: This command upgrades Next.js to the latest canary release using yarn package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn add next@canary
```

----------------------------------------

TITLE: Creating Next.js App with react-multi-carousel Example (Yarn)
DESCRIPTION: This command uses Yarn to create a Next.js application from the react-multi-carousel example template. It sets up a new project called 'with-react-multi-carousel-app' using the specified example. The command assumes that Yarn is installed and available in the environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-multi-carousel/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-multi-carousel with-react-multi-carousel-app
```

----------------------------------------

TITLE: Run Seed Script
DESCRIPTION: Executes the seed script to populate the database with initial data (Product and Category data).  The available package managers are npm, yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
npm run seed
```

LANGUAGE: bash
CODE:
```
yarn seed
```

LANGUAGE: bash
CODE:
```
pnpm seed
```

----------------------------------------

TITLE: Starting Tigris Local Development Environment - Bash
DESCRIPTION: This snippet starts the Tigris local development server. It's a critical step to ensure that the backend services for the application are running.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
tigris dev start
```

----------------------------------------

TITLE: Creating Next.js MDX app with bun
DESCRIPTION: This command utilizes bunx to create a new Next.js application named 'mdx-app' configured with MDX support. It fetches the MDX example template during the creation process. The command requires bun to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
bunx create-next-app --example mdx mdx-app
```

----------------------------------------

TITLE: Disabling File System Routing in next.config.js
DESCRIPTION: This JavaScript snippet shows how to modify the `next.config.js` file to disable Next.js's automatic file-system based routing for the `pages` directory. Setting `useFileSystemPublicRoutes` to `false` prevents Next.js from creating routes based on filenames during server-side rendering, which is useful when a custom server handles routing programmatically.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/custom-server.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  useFileSystemPublicRoutes: false,
};
```

----------------------------------------

TITLE: Copying environment variables file
DESCRIPTION: This command copies the example environment variables file (`.env.local.example`) to `.env.local`. The `.env.local` file will be used to configure the MQTT connection details and is ignored by Git, preventing sensitive information from being committed to the repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mqtt-js/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Installing sharp with npm
DESCRIPTION: This snippet demonstrates how to install the `sharp` package using npm. It is a common solution for resolving issues with Next.js' built-in image optimization when `sharp` is missing or improperly installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/install-sharp.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm i sharp
```

----------------------------------------

TITLE: Configuring onDemandEntries in Next.js Configuration
DESCRIPTION: This snippet demonstrates how to configure onDemandEntries in the Next.js configuration file. It shows options for controlling page disposal time, buffer size, and whether to write build artifacts to disk.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/onDemandEntries.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  onDemandEntries: {
    // period (in ms) where the server will keep pages in the buffer
    maxInactiveAge: 25 * 1000,
    // number of pages that should be kept simultaneously without being disposed
    pagesBufferLength: 2,
    // Whether to write to disk or keep pages in memory
    // This option has been removed and currently has no effect
    // keepAlive: false
  }
}
```

----------------------------------------

TITLE: Implementing Shallow Routing in Next.js
DESCRIPTION: This snippet shows how to implement shallow routing in Next.js using the useRouter hook. It demonstrates updating the URL without triggering data fetching methods, and how to watch for URL changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react'
import { useRouter } from 'next/router'

// Current URL is '/'
function Page() {
  const router = useRouter()

  useEffect(() => {
    // Always do navigations after the first render
    router.push('/?counter=10', undefined, { shallow: true })
  }, [])

  useEffect(() => {
    // The counter changed!
  }, [router.query.counter])
}

export default Page
```

----------------------------------------

TITLE: Fetching Data with getInitialProps in JavaScript
DESCRIPTION: This code snippet showcases how to use `getInitialProps` within a Next.js page component written in JavaScript to fetch data from an API and pass it as props to the component. Similar to the TypeScript example, it fetches the number of stars for the Next.js repository from GitHub.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-initial-props.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
Page.getInitialProps = async (ctx) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const json = await res.json()
  return { stars: json.stargazers_count }
}

export default function Page({ stars }) {
  return stars
}
```

----------------------------------------

TITLE: Generate Turbopack Trace File
DESCRIPTION: This command generates a Turbopack trace file, which contains detailed information about the performance of the application during local development. The trace file can be used to identify performance bottlenecks. Requires the NEXT_TURBOPACK_TRACING environment variable to be set.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
NEXT_TURBOPACK_TRACING=1 npm run dev
```

----------------------------------------

TITLE: Exporting OpenTelemetry SpanKind - JavaScript
DESCRIPTION: Re-exports the `SpanKind` enum, likely sourced from the OpenTelemetry API. This makes the standard OpenTelemetry span kind types available for use in defining trace spans. Depends on `SpanKind` being imported.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_26

LANGUAGE: javascript
CODE:
```
import { f as SpanKind } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
export { SpanKind };
```

----------------------------------------

TITLE: Creating Next.js App with Zones using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named `with-zones-app` based on the `with-zones` example. It initializes the project with the necessary configuration and files for a multi-zone setup using pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-zones with-zones-app
```

----------------------------------------

TITLE: Updating Next.js Development Script Flag
DESCRIPTION: Modifies the development script flag in Next.js to use the updated Turbopack flag. This change reflects the latest CLI syntax for enabling Turbopack during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-codemod/bin/__testfixtures__/change-turbo-to-turbopack/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
next dev --turbopack
```

----------------------------------------

TITLE: Fixing Router Method Calls in Class Components
DESCRIPTION: Shows how to move router method calls to componentDidMount lifecycle method to avoid pre-rendering issues in class components
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-router-instance.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Correct approach
componentDidMount() {
  this.props.router.push('/some-path');
}
```

----------------------------------------

TITLE: Creating Next.js app with Inngest example using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application named "inngest-app" based on the "inngest" example.  It relies on create-next-app for scaffolding the project with the necessary dependencies and configurations for Inngest. Yarn must be installed and configured to execute this command correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example inngest inngest-app
```

----------------------------------------

TITLE: Running blog app with yarn
DESCRIPTION: These commands navigate to the `blog` directory, install dependencies using yarn, and start the development server. The blog app will be accessible at http://localhost:4000/blog.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
cd blog
yarn && yarn dev
```

----------------------------------------

TITLE: Enable AMP-Only Page in Next.js (JSX)
DESCRIPTION: This code snippet demonstrates how to enable AMP-only mode for a Next.js page using the `config` export.  Setting `amp: true` will ensure the page is only served as AMP HTML and automatically optimized with AMP Optimizer. No client-side JavaScript runtime is included.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-amp.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
export const config = { amp: true }
```

----------------------------------------

TITLE: Creating Next.js Temporal Project with PNPM
DESCRIPTION: Command to create a new Next.js project with Temporal integration using PNPM.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-temporal next-temporal-app
```

----------------------------------------

TITLE: PlanetScale Password Output Example
DESCRIPTION: Shows an example of the output from the `pscale password create` command. The important values are USERNAME, ACCESS HOST URL, and PLAIN TEXT, which are used to construct the `DATABASE_URL`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_4

LANGUAGE: text
CODE:
```
Password production-password was successfully created.
Please save the values below as they will not be shown again

  NAME                  USERNAME       ACCESS HOST URL                     ROLE               PLAIN TEXT
 --------------------- -------------- ----------------------------------- ------------------ -------------------------------------------------------
  production-password   xxxxxxxxxxxxx   xxxxxx.us-east-2.psdb.cloud   Can Read & Write   pscale_pw_xxxxxxx
```

----------------------------------------

TITLE: Customizing File Trace Inclusion/Exclusion in Next.js (JavaScript)
DESCRIPTION: Configures specific files or directories to be included or excluded from the output file trace using `outputFileTracingIncludes` and `outputFileTracingExcludes`. Accepts page glob patterns as keys and arrays of relative file globs as values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  outputFileTracingExcludes: {
    '/api/hello': ['./un-necessary-folder/**/*'],
  },
  outputFileTracingIncludes: {
    '/api/another': ['./necessary-folder/**/*'],
    '/api/login/\[\[\.\.\.slug\]\]': [
      './node_modules/aws-crt/dist/bin/**/*',
    ],
  },
}
```

----------------------------------------

TITLE: Installing CSP Example with PNPM
DESCRIPTION: Creates a new Next.js application with strict CSP implementation using pnpm create next-app command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-strict-csp/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-strict-csp with-strict-csp-app
```

----------------------------------------

TITLE: Create Next.js app with Chakra UI using Yarn
DESCRIPTION: This command utilizes Yarn to create a new Next.js application with Chakra UI, named 'with-chakra-ui-app'. It uses the 'with-chakra-ui' example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-chakra-ui/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-chakra-ui with-chakra-ui-app
```

----------------------------------------

TITLE: Creating a Next.js App with Magic Example using pnpm
DESCRIPTION: These commands use create-next-app to bootstrap a new Next.js project using the with-magic example. It demonstrates how to initialize the project with npm, yarn, and pnpm package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-magic with-magic-app
```

----------------------------------------

TITLE: Ghost CMS Environment Variables
DESCRIPTION: This snippet shows the environment variables required to connect the Next.js application to a Ghost CMS instance. `GHOST_API_URL` specifies the URL of the Ghost API, and `GHOST_API_KEY` provides the necessary authentication key.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
GHOST_API_URL=...
GHOST_API_KEY=...
```

----------------------------------------

TITLE: Configuring Keep-Alive Timeout for Next.js Production Server (Bash)
DESCRIPTION: This command starts the Next.js production server (`next start`) and configures the underlying Node.js HTTP server's keep-alive timeout using the `--keepAliveTimeout` option, specified in milliseconds. This is crucial when Next.js is deployed behind a downstream proxy to prevent errors caused by the proxy attempting to reuse connections that the Node.js server has already closed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
next start --keepAliveTimeout 70000
```

----------------------------------------

TITLE: Dynamic API Routes in Next.js
DESCRIPTION: Implementation of dynamic API routes using route parameters, demonstrating how to access and use dynamic route values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const { pid } = req.query
  res.end(`Post: ${pid}`)
}
```

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  const { pid } = req.query
  res.end(`Post: ${pid}`)
}
```

----------------------------------------

TITLE: Unit Testing Middleware Path Matching in Next.js (JS)
DESCRIPTION: Shows how to use the experimental `unstable_doesMiddlewareMatch` function from `next/experimental/testing/server` to test if a given URL, headers, and cookies would trigger the middleware. Requires importing the function and providing configuration objects and the URL to test.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_17

LANGUAGE: javascript
CODE:
```
import { unstable_doesMiddlewareMatch } from 'next/experimental/testing/server'

expect(
  unstable_doesMiddlewareMatch({
    config,
    nextConfig,
    url: '/test',
  })
).toEqual(false)
```

----------------------------------------

TITLE: Copying environment variables file
DESCRIPTION: This command copies the example environment variable file (.env.local.example) to the actual environment variable file (.env.local).  This allows for local configuration without affecting the original example file, which is under version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: This command copies the example environment variable file to a local environment file.  This allows for environment specific configuration without committing sensitive information to source control.  The `.env.local` file is intended to be ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Initializing Next.js app with dev boolean
DESCRIPTION: This code snippet shows how to initialize a Next.js application with the `dev` option.  The `dev` boolean determines if the application should be run in development mode, enabling features like hot reloading and detailed error messages. This is essential when setting up the next.js instance.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-server-options.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
```js filename="server.js"
const app = next({ dev: boolean })
```
```

----------------------------------------

TITLE: Defining GET API Route Handler - JavaScript
DESCRIPTION: Defines the GET function, which serves as the handler for GET requests in a Next.js API route. It returns a JSON response containing the typeof the imported ClientComponent and MyModuleClientComponent, demonstrating their accessibility within the serverless function context.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export function GET() {
    return NextResponse.json({
        clientComponent: typeof ClientComponent,
        myModuleClientComponent: typeof MyModuleClientComponent
    });
}


```

----------------------------------------

TITLE: Querying Convex Database with TypeScript
DESCRIPTION: This snippet defines a query function using Convex's API. It retrieves documents from the database based on the provided arguments, which are validated using the `convex/values` module. The function is then utilized in a React component to fetch data asynchronously.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/convex/README.md#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },
  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();
    console.log(args.first, args.second);
    return documents;
  },
});
```

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Creating Next.js app with Kea example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-kea' example. It requires Node.js and Yarn to be installed. The new application will be created in a directory named 'with-kea-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-kea/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-kea with-kea-app
```

----------------------------------------

TITLE: Demonstrating Uncached Metadata in Static Next.js Route (TSX)
DESCRIPTION: Shows a Next.js `generateMetadata` function fetching data without marking the data source as cacheable, while the main `Page` component uses cached data. This setup triggers the "Cannot access Request information or uncached data" error in an otherwise static route when `dynamicIO` is enabled.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-metadata.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { cms } from './cms'

export async function generateMetadata() {
  // This data lookup is not cached at the moment so
  // Next.js will interpret this as needing to be rendered
  // on every request.
  const { title } = await cms.getPageData('/.../page')
  return {
    title,
  }
}

async function getPageText() {
  'use cache'
  const { text } = await cms.getPageData('/.../page')
  return text
}

export default async function Page() {
  // This text is cached so the main content of this route
  // is prerenderable.
  const text = await getPageText()
  return <article>{text}</article>
}
```

----------------------------------------

TITLE: Constructing Draft URL
DESCRIPTION: This bash snippet shows how to construct a draft URL with a secret token and slug for previewing content in Draft Mode.  `<your-site>` should be your deployment domain.  `<token>` should be replaced with the secret token you generated.  `<path>` should be the path for the page that you want to view.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
https://<your-site>/api/draft?secret=<token>&slug=<path>
```

----------------------------------------

TITLE: Configuring Remote Image Patterns in Next.js 12.3.0-15.2.0
DESCRIPTION: Configuration for next/image component using object notation for remotePatterns. This allows specifying protocol, hostname, port, pathname and search parameters individually.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-host.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'assets.example.com',
        port: '',
        pathname: '/account123/**',
        search: '',
      },
    ],
  },
}
```

----------------------------------------

TITLE: unstable_cache Function Signature and Parameters in Next.js
DESCRIPTION: This snippet shows the general signature of the unstable_cache function, outlining the required parameters: the asynchronous function to cache (fetchData), an optional array for additional cache keys (keyParts), and an optional options object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_cache.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
const data = unstable_cache(fetchData, keyParts, options)()
```

----------------------------------------

TITLE: Connecting to Tigris - TypeScript
DESCRIPTION: This snippet outlines the functionality to load environment variables and configure the Tigris client in a TypeScript module. This is essential for establishing a connection to Tigris with the parameters specified in the environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
// lib/tigris.ts
// Loads the environment variables you specified previously in creating a Vercel project section and uses them to configure the Tigris client.
```

----------------------------------------

TITLE: Lazy Root Example (React Component)
DESCRIPTION: This example shows how to use the `lazyRoot` prop with a React component that forwards a ref to its underlying DOM element. This is necessary when the scrollable parent is a custom React component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import Image from 'next/legacy/image'
import React from 'react'

const Container = React.forwardRef((props, ref) => {
  return (
    <div ref={ref} style={{ overflowX: 'scroll', width: '500px' }}>
      {props.children}
    </div>
  )
})

const Example = () => {
  const lazyRoot = React.useRef(null)

  return (
    <Container ref={lazyRoot}>
      <Image lazyRoot={lazyRoot} src="/one.jpg" width="500" height="500" />
      <Image lazyRoot={lazyRoot} src="/two.jpg" width="500" height="500" />
    </Container>
  )
}
```

----------------------------------------

TITLE: Creating Next.js app with Rspack using npx
DESCRIPTION: This command creates a new Next.js application named 'with-rspack-app' using the 'with-rspack' example. It utilizes npx to execute the create-next-app command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rspack/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-rspack with-rspack-app
```

----------------------------------------

TITLE: Creating a Next.js app with XState
DESCRIPTION: This command bootstraps a new Next.js application using the with-xstate example. It utilizes create-next-app with npm to initialize the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-xstate with-xstate-app
```

----------------------------------------

TITLE: Generating dotCMS API Token with curl
DESCRIPTION: This code snippet demonstrates how to generate an API token for dotCMS using a curl command. The command sends a POST request to the dotCMS authentication endpoint with user credentials and an expiration period. The server responds with a JSON object containing the generated token.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
curl -H "Content-Type:application/json" --insecure  -X POST -d  '\n{ "user":"admin@dotcms.com", "password":"admin", "expirationDays": 10 }\n' http://demo.dotcms.com:8080/api/v1/authentication/api-token
```

----------------------------------------

TITLE: Configuring Cross-Origin in Next.js using JavaScript
DESCRIPTION: This code snippet shows how to set the `crossOrigin` option in the Next.js configuration file `next.config.js`. This configuration step is necessary for controlling cross-origin requests, replacing the deprecated practice of setting the `crossOrigin` attribute directly in `Head` or `NextScript`. The code sets `crossOrigin` to 'anonymous'.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/doc-crossorigin-deprecated.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  crossOrigin: 'anonymous',
}
```

----------------------------------------

TITLE: Running Tests with Both Turbopack and Webpack
DESCRIPTION: Command to run tests against both Turbopack and Webpack configurations using Jest's '--projects' flag.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
pnpm test-dev test/e2e/app-dir/app/ --projects jest.config.*
```

----------------------------------------

TITLE: Defining Custom Next.js Document Component
DESCRIPTION: Defines the `MyDocument` class extending `next/document.Document`. It overrides `getInitialProps` to fetch initial props and inject a custom style tag into the head. The `render` method defines the basic HTML structure using Next.js components like `Html`, `Head`, `Main`, and `NextScript`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_15

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import Document from 'next/document';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";
import { Html } from 'next/document';
import { Head } from 'next/document';
import { Main } from 'next/document';
import { NextScript } from 'next/document';
class MyDocument extends Document {
    static async getInitialProps(ctx) {
        const initialProps = await Document.getInitialProps(ctx);
        return {
            ...initialProps,
            styles: _jsxs(_Fragment, {
                children: [
                    initialProps.styles,
                    _jsx("style", {
                        dangerouslySetInnerHTML: {
                            __html: `html { background: hotpink; }`
                        }
                    })
                ]
            })
        };
    }
    render() {
        return _jsxs(Html, {
            children: [
                _jsx(Head, {}),
                _jsxs("body", {
                    children: [
                        _jsx(Main, {}),
                        _jsx(NextScript, {})
                    ]
                })
            ]
        });
    }
}
const __TURBOPACK__default__export__ = MyDocument;
export { __TURBOPACK__default__export__ as default };
export { MyDocument as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { __TURBOPACK__default__export__ as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Enabling Inline CSS in Next.js Configuration - JavaScript
DESCRIPTION: This JavaScript snippet configures a Next.js application to enable inline CSS by setting the 'inlineCss' flag to true within the 'experimental' configuration. Similar to the TypeScript version, it replaces <link> tags with <style> tags to improve performance under specific scenarios. This feature is experimental and is available in production builds only.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/inlineCss.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    inlineCss: true,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Setting Up Environment Variables for Umbraco App
DESCRIPTION: This snippet details the environment variables required to run the Next.js app properly. It includes the Umbraco server URL and API Keys necessary for configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
NODE_TLS_REJECT_UNAUTHORIZED=0
UMBRACO_SERVER_URL='https://localhost:12345'
UMBRACO_DELIVERY_API_KEY='my-secret-api-key'
UMBRACO_PREVIEW_SECRET='my-preview-secret'
```

----------------------------------------

TITLE: Configuring Static Generation Options in Next.js JavaScript
DESCRIPTION: JavaScript configuration for Next.js static generation settings including retry count, max concurrency, and minimum pages per worker. Uses the experimental configuration options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/staticGeneration.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const nextConfig = {
  experimental: {
    staticGenerationRetryCount: 1,
    staticGenerationMaxConcurrency: 8,
    staticGenerationMinPagesPerWorker: 25,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Enabling Cache Debugging Logging - Next.js .env
DESCRIPTION: Provides the environment variable needed to enable console logging of ISR cache hits and misses when running a production build (`next build` followed by `next start`). Add `NEXT_PRIVATE_DEBUG_CACHE=1` to your `.env` file for detailed cache behavior logs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/04-incremental-static-regeneration.mdx#_snippet_14

LANGUAGE: bash
CODE:
```
NEXT_PRIVATE_DEBUG_CACHE=1
```

----------------------------------------

TITLE: Running Tests with Yarn
DESCRIPTION: This command runs the Vitest tests in the project using Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
yarn test
```

----------------------------------------

TITLE: Creating Next.js App with create-next-app (npm)
DESCRIPTION: This command uses npm to create a new Next.js application with the mdx-remote example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example mdx-remote mdx-remote-app
```

----------------------------------------

TITLE: Creating Next.js App with create-next-app (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application with the mdx-remote example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example mdx-remote mdx-remote-app
```

----------------------------------------

TITLE: Customizing Babel Presets in Next.js
DESCRIPTION: This code snippet shows how to customize the configuration of the `next/babel` preset within a `.babelrc` file in a Next.js project.  It demonstrates how to modify specific options for the `preset-env`, `transform-runtime`, `styled-jsx`, and `class-properties` configurations that are included in `next/babel`. This allows fine-grained control over Babel's behavior while still inheriting the base configurations needed for Next.js. Consult Babel's documentation for available options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/babel.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "presets": [
    [
      "next/babel",
      {
        "preset-env": {},
        "transform-runtime": {},
        "styled-jsx": {},
        "class-properties": {}
      }
    ]
  ],
  "plugins": []
}
```

----------------------------------------

TITLE: Rendering Remote MDX - Pages Router (TSX)
DESCRIPTION: Shows how to fetch remote MDX content and serialize it using `next-mdx-remote-client/serialize` within `getStaticProps` (or `getServerSideProps`) for use with the `MDXClient` component in a Pages Router page. Includes TypeScript types.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_21

LANGUAGE: tsx
CODE:
```
import {
  serialize,
  type SerializeResult,
} from 'next-mdx-remote-client/serialize'
import { MDXClient } from 'next-mdx-remote-client'

type Props = {
  mdxSource: SerializeResult
}

export default function RemoteMdxPage({ mdxSource }: Props) {
  if ('error' in mdxSource) {
    // either render error UI or throw `mdxSource.error`
  }
  return <MDXClient {...mdxSource} />
}

export async function getStaticProps() {
  // MDX text - can be from a database, CMS, fetch, anywhere...
  const res = await fetch('https:...')
  const mdxText = await res.text()
  const mdxSource = await serialize({ source: mdxText })
  return { props: { mdxSource } }
}
```

----------------------------------------

TITLE: Unmigratable Dynamic API Usage in Next.js
DESCRIPTION: This code snippet shows an example of a dynamic API usage that cannot be automatically migrated by the codemod and requires manual intervention.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#2025-04-21_snippet_4

LANGUAGE: ts
CODE:
```
export function MyCookiesComponent() {
  const c =
    /* @next-codemod-error Manually await this call and refactor the function to be async */
    cookies()
  return c.get('name')
}
```

----------------------------------------

TITLE: Configuring React Compiler for Opt-in Mode (TypeScript)
DESCRIPTION: Configuration in next.config.ts to set the React Compiler to 'annotation' compilation mode for opt-in usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    reactCompiler: {
      compilationMode: 'annotation',
    },
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Handling User Login Form Submission - Next.js Pages Router - TypeScript/JavaScript
DESCRIPTION: A React functional component for a login page within the Next.js Pages Router. It includes a form with email and password fields. Upon form submission, it prevents the default browser action, extracts the credentials using FormData, and sends a POST request to a `/api/auth/login` route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { FormEvent } from 'react'
import { useRouter } from 'next/router'

export default function LoginPage() {
  const router = useRouter()

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const email = formData.get('email')
    const password = formData.get('password')

    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    })

    if (response.ok) {
      router.push('/profile')
    } else {
      // Handle errors
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input type="email" name="email" placeholder="Email" required />
      <input type="password" name="password" placeholder="Password" required />
      <button type="submit">Login</button>
    </form>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { FormEvent } from 'react'
import { useRouter } from 'next/router'

export default function LoginPage() {
  const router = useRouter()

  async function handleSubmit(event) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const email = formData.get('email')
    const password = formData.get('password')

    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    })

    if (response.ok) {
      router.push('/profile')
    } else {
      // Handle errors
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input type="email" name="email" placeholder="Email" required />
      <input type="password" name="password" placeholder="Password" required />
      <button type="submit">Login</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Create PlanetScale Database
DESCRIPTION: Creates a new database in PlanetScale. Replace `<DATABASE_NAME>` with your desired database name. A default branch named `main` is automatically created with the database.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pscale database create <DATABASE_NAME>
```

----------------------------------------

TITLE: Creating Next.js App with OpenTelemetry example using Yarn
DESCRIPTION: This command initializes a new Next.js application using the `with-opentelemetry` example from the `create-next-app` tool, but uses Yarn as the package manager. It downloads the necessary files and sets up the project with OpenTelemetry instrumentation. The resulting application directory will be named `with-opentelemetry-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-opentelemetry/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-opentelemetry with-opentelemetry-app
```

----------------------------------------

TITLE: Creating a Next.js app using pnpm
DESCRIPTION: This command initializes a new Next.js application named `api-routes-rest-app` using the `api-routes-rest` example. It uses the `create next-app` command from pnpm to generate the project structure based on the provided example, enabling the creation of RESTful APIs within a Next.js environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-rest/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example api-routes-rest api-routes-rest-app
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the `with-portals-ssr` example. It initializes a project named `with-portals-ssr-app` using the specified example from the Next.js repository. pnpm must be installed in the system for this command to work.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals-ssr/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-portals-ssr with-portals-ssr-app
```

----------------------------------------

TITLE: Creating Next.js MDX app with yarn
DESCRIPTION: This command utilizes yarn to create a new Next.js application named 'mdx-app' configured with MDX support. It fetches the MDX example template during the creation process. The command requires yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example mdx mdx-app
```

----------------------------------------

TITLE: Bootstrapping Next.js app with Stitches using pnpm
DESCRIPTION: This command employs pnpm to initialize a new Next.js application based on the with-stitches example. It invokes the create next-app command with the given example and application name. It presupposes that pnpm is installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stitches/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-stitches with-stitches-app
```

----------------------------------------

TITLE: Initializing Next.js App with Cosmos DB Example
DESCRIPTION: This command initializes a new Next.js application using the `with-azure-cosmos` example.  It uses `create-next-app` to bootstrap the project with the necessary configurations and dependencies for connecting to Azure Cosmos DB. The new app is named `with-azure-cosmos-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-azure-cosmos with-azure-cosmos-app
```

----------------------------------------

TITLE: Creating Next.js App with Nhost Example (npm)
DESCRIPTION: This command initializes a new Next.js application using the `with-nhost-auth-realtime-graphql` example. It leverages `create-next-app` with npm to bootstrap the project.  `nhost-app` is the name assigned to the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-nhost-auth-realtime-graphql nhost-app
```

----------------------------------------

TITLE: Creating Next.js App with Apollo Example (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application pre-configured with the Apollo Server and Client example. It bootstraps the project with the necessary dependencies and configuration files. The new application will be located in the directory named 'api-routes-apollo-server-and-client-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app
```

----------------------------------------

TITLE: Creating Next.js app with Plausible using Yarn
DESCRIPTION: This command initializes a new Next.js application with the Plausible analytics example. It uses `create next-app` via `yarn` to bootstrap the project with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-plausible/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-plausible with-plausible-app
```

----------------------------------------

TITLE: Enabling Inline CSS in Next.js Configuration - TypeScript
DESCRIPTION: This TypeScript snippet configures a Next.js application to enable inline CSS by setting the 'inlineCss' flag to true within the 'experimental' configuration. The configuration ensures all CSS is inlined within <style> tags instead of using <link> tags, which optimizes loading times under certain conditions. This setup requires a Next.js environment where 'experimental.inlineCss' is an available option.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/inlineCss.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    inlineCss: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the 'with-youtube-embed' example. It utilizes the create-next-app tool to bootstrap the project with the specified example and project name. The resulting application will be named 'with-youtube-embed-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-youtube-embed/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-youtube-embed with-youtube-embed-app
```

----------------------------------------

TITLE: Importing EdgeQL query builder - TypeScript
DESCRIPTION: This is an example of how to import the generated EdgeQL query builder in a TypeScript file. It imports the default export from the `dbschema/edgeql-js` directory, aliasing it to `e`. This allows you to use the query builder in your application code.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import e from "./dbschema/edgeql-js";
```

----------------------------------------

TITLE: Custom Next.js Configuration with MDX
DESCRIPTION: Next.js MDX configuration showing how to add custom webpack configuration alongside MDX support
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')()
module.exports = withMDX({
  webpack(config, options) {
    return config
  },
})
```

----------------------------------------

TITLE: Environment Variable Configuration Example (Bash)
DESCRIPTION: This snippet shows an example of how environment variables should be structured in the `.env.local` file. It shows the variable names and indicates that the actual values should be provided for each variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
AGILITY_CMS_GUID=...
AGILITY_CMS_API_FETCH_KEY=...
AGILITY_CMS_API_PREVIEW_KEY=...
AGILITY_CMS_SECURITY_KEY=...
```

----------------------------------------

TITLE: Creating Next.js App with remove-console Example (npm)
DESCRIPTION: This command uses `create-next-app` with npm to create a new Next.js application based on the `remove-console` example. The new application will be named `remove-console-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/remove-console/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example remove-console remove-console-app
```

----------------------------------------

TITLE: Initialize Next.js App with Plasmic Example (pnpm)
DESCRIPTION: This command uses the `create next-app` tool with pnpm to bootstrap a new Next.js application using the `cms-plasmic` example. It creates a new directory named `cms-plasmic-app` containing the project files. Requires pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-plasmic cms-plasmic-app
```

----------------------------------------

TITLE: Creating Next.js app with NextUI using npm
DESCRIPTION: This command uses the npm package manager to create a new Next.js application pre-configured to use NextUI. It utilizes the `create-next-app` tool with the `with-next-ui` example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-ui/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-next-ui with-next-ui-app
```

----------------------------------------

TITLE: Accessing Runtime Config with next/config (JavaScript)
DESCRIPTION: This code snippet illustrates how to access the runtime configurations defined in `next.config.js` using the `next/config` module. It shows how to import `getConfig` and extract `serverRuntimeConfig` and `publicRuntimeConfig`.  The snippet also demonstrates using the `publicRuntimeConfig` to construct image paths in a component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/04-config/01-next-config-js/runtime-configuration.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import getConfig from 'next/config'
import Image from 'next/image'

// Only holds serverRuntimeConfig and publicRuntimeConfig
const { serverRuntimeConfig, publicRuntimeConfig } = getConfig()
// Will only be available on the server-side
console.log(serverRuntimeConfig.mySecret)
// Will be available on both server-side and client-side
console.log(publicRuntimeConfig.staticFolder)

function MyImage() {
  return (
    <div>
      <Image
        src={`${publicRuntimeConfig.staticFolder}/logo.png`}
        alt="logo"
        layout="fill"
      />
    </div>
  )
}

export default MyImage
```

----------------------------------------

TITLE: Create Next.js app with Contentlayer example using pnpm
DESCRIPTION: This command uses `create-next-app` with pnpm to create a new Next.js application based on the `with-contentlayer` example. It sets up a project named `with-contentlayer-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-contentlayer/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-contentlayer with-contentlayer-app
```

----------------------------------------

TITLE: Creating a Next.js app with Panda CSS using pnpm
DESCRIPTION: This command utilizes pnpm to execute create-next-app, setting up a new Next.js project with the panda-css example. The created project is named 'panda-css-app', and it's configured with Panda CSS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/panda-css/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example panda-css panda-css-app
```

----------------------------------------

TITLE: Setting Umbraco Heartcore environment variables
DESCRIPTION: This code block represents the structure of the .env.local file, demonstrating the required environment variables for connecting to Umbraco Heartcore.  It highlights `UMBRACO_PROJECT_ALIAS`, `UMBRACO_API_KEY`, and `UMBRACO_PREVIEW_SECRET`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
UMBRACO_PROJECT_ALIAS=...
UMBRACO_API_KEY=...
UMBRACO_PREVIEW_SECRET=...
```

----------------------------------------

TITLE: Outputting Twitter Image Alt Meta Tag - HTML
DESCRIPTION: Illustrates the HTML <head> meta tag generated by Next.js when a twitter-image.alt.txt file is used. The content of the tag's 'content' attribute is taken directly from the text file, providing alt text for the Twitter image.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_5

LANGUAGE: HTML
CODE:
```
<meta property="twitter:image:alt" content="About Acme" />
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the react-remove-properties example. It clones the example and sets up a new project directory called react-remove-properties-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/react-remove-properties/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example react-remove-properties react-remove-properties-app
```

----------------------------------------

TITLE: Specifying Node.js Runtime in Next.js Middleware Config (JS)
DESCRIPTION: Specifies the Node.js runtime for the Next.js middleware by exporting a `config` object with the `runtime` property set to `'nodejs'` in the `middleware.js` file. This must be used in conjunction with enabling `nodeMiddleware: true` in `next.config.js/ts`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_21

LANGUAGE: javascript
CODE:
```
export const config = {
  runtime: 'nodejs',
}
```

----------------------------------------

TITLE: Creating Next.js app with Vanilla Extract using PNPM
DESCRIPTION: This command uses PNPM to create a new Next.js application based on the Vanilla Extract example.  It bootstraps a project named 'with-vanilla-extract-app' using the provided example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vanilla-extract/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-vanilla-extract with-vanilla-extract-app
```

----------------------------------------

TITLE: Initializing Next.js app with cms-payload example using pnpm
DESCRIPTION: This command leverages `pnpm` to set up a new Next.js application based on the `cms-payload` example. The resulting project will be contained within the `cms-payload-app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-payload/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-payload cms-payload-app
```

----------------------------------------

TITLE: Create Next.js App with Meilisearch Example (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-meilisearch example. It initializes the project with all the necessary files and configurations to integrate with Meilisearch.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-meilisearch/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-meilisearch with-meilisearch-app
```

----------------------------------------

TITLE: Creating Next.js App with WebWorker Example (pnpm)
DESCRIPTION: This command initializes a new Next.js application using the 'with-web-worker' example. It uses pnpm to execute the create next-app command and sets up a project named 'with-web-worker-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-web-worker/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-web-worker with-web-worker-app
```

----------------------------------------

TITLE: Updating Session Cookie Expiration in Next.js App Router (JavaScript)
DESCRIPTION: This asynchronous function `updateSession` attempts to retrieve and decrypt the session cookie. If successful, it calculates a new expiration date 7 days in the future. The code snippet appears to have a syntax error where the `Date` constructor is immediately invoked with the result of `await cookies()`. The intention is likely to update the cookie's expiration using `cookieStore.set` as in the TypeScript version.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_12

LANGUAGE: js
CODE:
```
import 'server-only';
import { cookies } from 'next/headers';
import { decrypt } from '@/app/lib/session';

export async function updateSession() {
  const session = (await cookies()).get('session')?.value;
  const payload = await decrypt(session);

  if (!session || !payload) {
    return null;
  }

  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)( // Potential syntax error here
    await cookies()
  ).set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expires,
    sameSite: 'lax',
    path: '/',
  });
}
```

----------------------------------------

TITLE: Reusing the Built-in Error Component in Next.js
DESCRIPTION: This code shows how to reuse the built-in `Error` component from `next/error` in a Next.js page.  It fetches data using `getServerSideProps`, and if an error occurs (indicated by `res.ok`), it renders the built-in `Error` component with the corresponding `statusCode`. Otherwise, it displays the fetched data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/08-custom-error.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import Error from 'next/error'

export async function getServerSideProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const errorCode = res.ok ? false : res.status
  const json = await res.json()

  return {
    props: { errorCode, stars: json.stargazers_count },
  }
}

export default function Page({ errorCode, stars }) {
  if (errorCode) {
    return <Error statusCode={errorCode} />
  }

  return <div>Next stars: {stars}</div>
}
```

----------------------------------------

TITLE: Exporting Configuration in Next.js JavaScript
DESCRIPTION: This snippet demonstrates how to export an object from the next.config.js file, which is a critical component in any Next.js application for setting custom configurations. Ensure that module.exports is properly defined to avoid configuration errors. The object can contain various configuration options that customize the behavior of the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/empty-configuration.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  /* config options here */
}
```

----------------------------------------

TITLE: Snapshot test (App Router)
DESCRIPTION: This snippet shows an example of a snapshot test for the Page component when using the App Router.  It renders the Page component and compares the rendered output to a stored snapshot.  If there are any unexpected changes, the test will fail.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_21

LANGUAGE: jsx
CODE:
```
import { render } from '@testing-library/react'
import Page from '../app/page'

it('renders homepage unchanged', () => {
  const { container } = render(<Page />)
  expect(container).toMatchSnapshot()
})
```

----------------------------------------

TITLE: Applying a Font to a Specific Page (App Router)
DESCRIPTION: This code snippet demonstrates applying a font to a specific page in a Next.js application using the app router. It imports the `roboto_mono` font from a utility function and applies its `className` to an `h1` element within the `Page` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_16

LANGUAGE: tsx
CODE:
```
import { roboto_mono } from './fonts'

export default function Page() {
  return (
    <>
      <h1 className={roboto_mono.className}>My page</h1>
    </>
  )
}
```

----------------------------------------

TITLE: Re-exporting getServerSideProps - JavaScript
DESCRIPTION: This snippet imports the getServerSideProps function previously aliased as 'd' from a Turbopack part and re-exports it with its original name, 'getServerSideProps'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_44

LANGUAGE: javascript
CODE:
```
import { d as getServerSideProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -15
};
export { getServerSideProps };
```

----------------------------------------

TITLE: Kontent.ai Preview URL Configuration
DESCRIPTION: This URL is configured in Kontent.ai project settings to enable preview mode for posts. The `{URLslug}` placeholder is dynamically replaced with the actual URL slug of the content item. `<KONTENT_PREVIEW_SECRET>` needs to be replaced with its corresponding value in the `.env.local` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_6

LANGUAGE: plain
CODE:
```
http://localhost:3000/api/preview?secret=<KONTENT_PREVIEW_SECRET>&slug={URLslug}
```

----------------------------------------

TITLE: getServerSideProps with props return - JavaScript
DESCRIPTION: This example demonstrates the basic usage of `getServerSideProps` to pass static props to a page component.  It returns an object with a `props` key, which contains the data to be passed to the page. The `message` prop is then accessible within the `Page` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export async function getServerSideProps(context) {
  return {
    props: { message: `Next.js is awesome` }, // will be passed to the page component as props
  }
}
```

----------------------------------------

TITLE: Defining gridAutoColumns Style Function (JS)
DESCRIPTION: Defines a style function for the CSS 'gridAutoColumns' property. It uses the 'style' helper and Turbopack assertions for module imports, exporting the function with an alias.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_49

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 22
};
const gridAutoColumns = style({
    prop: 'gridAutoColumns'
});
export { gridAutoColumns as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Invoking Server Functions in Event Handlers with TypeScript
DESCRIPTION: Shows how to invoke a Server Function from an onClick event handler in a TypeScript Client Component. It updates the local state with the returned value from the Server Function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }: { initialLikes: number }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Fix: Re-exporting default and getServerSideProps in Next.js
DESCRIPTION: This shows how to selectively re-export the default component and `getServerSideProps` if the target page uses server-side rendering. This is a safe way to expose only the necessary parts of the module.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
export { default, getServerSideProps } from './example-b'
// or
export { default, getStaticProps } from './example-b'
// or
export { default, getStaticProps, getStaticPaths } from './example-b/[dynamic]'
```

----------------------------------------

TITLE: Adding test script to package.json
DESCRIPTION: This JSON snippet shows how to add a `test` script to the `package.json` file. The script executes the `vitest` command, which runs the Vitest test runner. This allows running tests with `npm run test`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "test": "vitest"
  }
}
```

----------------------------------------

TITLE: Simple Draft Mode API Route (TypeScript)
DESCRIPTION: This TypeScript code defines a basic API route that enables Draft Mode and sends a response message. This serves as a manual test to verify that the `__prerender_bypass` cookie is being set correctly when visiting `/api/draft` in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
// simple example for testing it manually from your browser.
export default function handler(req, res) {
  res.setDraftMode({ enable: true })
  res.end('Draft mode is enabled')
}
```

----------------------------------------

TITLE: Dynamically Requiring Module (Node.js)
DESCRIPTION: This snippet uses the Node.js `require` function with a dynamic variable (`unknown`) as the module identifier. This pattern prevents static analysis from determining which specific module will be loaded at runtime, hindering dependency analysis and optimization. It requires a Node.js environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__-3e2c30.txt#_snippet_4

LANGUAGE: javascript
CODE:
```
require(unknown)
```

----------------------------------------

TITLE: Installing eslint-config-prettier (bash)
DESCRIPTION: This snippet provides commands to install the `eslint-config-prettier` package using npm, yarn, pnpm, and bun. This package disables ESLint rules that may conflict with Prettier, ensuring consistent code formatting.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npm install --save-dev eslint-config-prettier

yarn add --dev eslint-config-prettier

pnpm add --save-dev eslint-config-prettier

bun add --dev eslint-config-prettier
```

----------------------------------------

TITLE: Next.js Image Config (Search Parameter)
DESCRIPTION: This example illustrates how to specify a required search parameter in the `remotePatterns` configuration within the `next.config.js` file, ensuring that only images with a specific query string are allowed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'assets.example.com',
        search: '?v=1727111025337',
      },
    ],
  },
}
```

----------------------------------------

TITLE: Re-exporting all exports leading to error in Next.js
DESCRIPTION: This code snippet demonstrates how re-exporting all exports from `example-a.js` in `example-b.js` triggers the 'Module not found' error. This is because `fs` is a Node.js module and is not available in the browser environment, causing a build failure.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/export-all-in-page.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
export * from './example-a'
```

----------------------------------------

TITLE: Creating a Next.js App with Quill.js Example using pnpm
DESCRIPTION: This command initializes a new Next.js application using the 'with-quill-js' example from the Next.js repository. It utilizes pnpm to execute the create-next-app tool and creates a new directory named 'with-quill-js-app' to house the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-quill-js/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-quill-js with-quill-js-app
```

----------------------------------------

TITLE: Implementing Local Fonts in Next.js App Router with JavaScript
DESCRIPTION: Shows how to use local fonts in a Next.js application with the App Router using JavaScript. The font is loaded from a local file and applied to the entire application through the className property.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_22

LANGUAGE: jsx
CODE:
```
import localFont from 'next/font/local'

// Font files can be colocated inside of `app`
const myFont = localFont({
  src: './my-font.woff2',
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={myFont.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Resetting State Using a React Key in _app.js (JSX)
DESCRIPTION: This demonstrates how to reset the state of a component upon navigation by using a React key. By assigning `router.asPath` as the key to the `Component` in `_app.js`, React will remount the component when the route changes, effectively resetting the state. This provides a way to reset state for all pages in the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function MyApp({ Component, pageProps }) {
  const router = useRouter()
  return <Component key={router.asPath} {...pageProps} />
}
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses yarn to create a new Next.js application with a custom Babel configuration. The `--example` flag specifies the 'with-custom-babel-config' example, and 'with-custom-babel-config-app' is the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-custom-babel-config/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-custom-babel-config with-custom-babel-config-app
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application using the with-babel-macros example. The command configures the project for babel-macros usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-babel-macros/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-babel-macros with-babel-macros-app
```

----------------------------------------

TITLE: Creating Next.js configuration file
DESCRIPTION: This code snippet shows how to create a `next.config.ts` file at the root of your project. It sets the output to 'export' for a Single-Page Application (SPA) and changes the build output directory to `build`. Removing `output: 'export'` will enable Next.js server features.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_1

LANGUAGE: next.config.ts
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  output: 'export', // Outputs a Single-Page Application (SPA)
  distDir: 'build', // Changes the build output directory to `build`
}

export default nextConfig
```

----------------------------------------

TITLE: Creating Next.js App with react-multi-carousel Example (npm)
DESCRIPTION: This command utilizes npm to create a new Next.js application based on the react-multi-carousel example. It initializes a project named 'with-react-multi-carousel-app' using the specified example template. The command requires npm to be installed and configured correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-multi-carousel/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-multi-carousel with-react-multi-carousel-app
```

----------------------------------------

TITLE: Outputting Generated Image Meta Tags - HTML
DESCRIPTION: Shows the HTML <head> meta tags generated by Next.js when an image is programmatically created using an opengraph-image.(js|ts|tsx) file. The tags include the image URL, alt text, type, width, and height based on the `ImageResponse` output and exported metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_8

LANGUAGE: HTML
CODE:
```
<meta property="og:image" content="<generated>" />
<meta property="og:image:alt" content="About Acme" />
<meta property="og:image:type" content="image/png" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
```

----------------------------------------

TITLE: Initializing Next.js app with cms-payload example using yarn
DESCRIPTION: This command uses `yarn` to create a new Next.js application using the `cms-payload` example.  It initializes the project in a directory named `cms-payload-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-payload/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-payload cms-payload-app
```

----------------------------------------

TITLE: Updating React Packages to Latest Version using bun
DESCRIPTION: This command updates the React and React DOM packages to the latest versions using bun. It provides an alternative using the bun package manager to update React and React DOM.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
bun add react@latest react-dom@latest
```

----------------------------------------

TITLE: Implementing Custom Document in Next.js
DESCRIPTION: This code snippet demonstrates how to implement a custom `Document` in Next.js that includes a single instance of the `<Head />` component, adhering to best practices to prevent duplicate usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-duplicate-head.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  static async getInitialProps(ctx) {
    //...
  }

  render() {
    return (
      <Html>
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

export default MyDocument
```

----------------------------------------

TITLE: Generated Meta Tag for Content Type HTML
DESCRIPTION: Example of the HTML output generated in the `<head>` section when the `contentType` export is defined in the corresponding `opengraph-image` or `twitter-image` route handler. This meta tag informs social media platforms about the image format.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_19

LANGUAGE: html
CODE:
```
<meta property="og:image:type" content="image/png" />
```

----------------------------------------

TITLE: Root Layout Definition (TypeScript)
DESCRIPTION: This code snippet defines a root layout component in TypeScript. It is used to define the `<html>` and `<body>` tags for the application. It accepts a `children` prop, which represents the content to be rendered within the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining gridAutoRows Style Function (JS)
DESCRIPTION: Creates a style function for the CSS 'gridAutoRows' property. It relies on the 'style' helper and Turbopack assertions for module parts, exporting the function with an alias.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_50

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 23
};
const gridAutoRows = style({
    prop: 'gridAutoRows'
});
export { gridAutoRows as h } from "__TURBOPACK_VAR__
```

----------------------------------------

TITLE: Adding Custom Type Declarations in Next.js TypeScript Project
DESCRIPTION: This tsconfig.json configuration shows how to properly include custom type declaration files in a Next.js project. Instead of modifying the auto-generated next-env.d.ts file, it includes a separate custom type declaration file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "skipLibCheck": true
    //...truncated...
  },
  "include": [
    "new-types.d.ts",
    "next-env.d.ts",
    ".next/types/**/*.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": ["node_modules"]
}
```

----------------------------------------

TITLE: Executing spawnSync with Static Command Dynamic Array Args JavaScript
DESCRIPTION: Calls `child_process.spawnSync` with a static command 'node' and a dynamic array `[unknown, unknown]` for arguments. This is another form of dynamic execution involving subprocesses and is flagged by the linter (TP1005). Requires the `child_process` module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(FreeVa-635fa3.txt#_snippet_3

LANGUAGE: JavaScript
CODE:
```
child_process.spawnSync('node', [unknown, unknown])
```

----------------------------------------

TITLE: Configuring ESLint Directories in next.config.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to configure ESLint to only run on specific directories (pages and utils in this case) during production builds. This is done by using the `eslint.dirs` option inside `next.config.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  eslint: {
    dirs: ['pages', 'utils'], // Only run ESLint on the 'pages' and 'utils' directories during production builds (next build)
  },
}
```

----------------------------------------

TITLE: Creating Next.js App with create-next-app using pnpm
DESCRIPTION: This command leverages pnpm to set up a new Next.js application, using the `with-mqtt-js` example. The command initializes a project directory named `with-mqtt-js-app`, setting it up with the boilerplate code for MQTT integration and its related dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mqtt-js/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mqtt-js with-mqtt-js-app
```

----------------------------------------

TITLE: Next.js Page Component (TypeScript)
DESCRIPTION: This TypeScript snippet defines a basic Next.js page component that renders a heading and a link. It imports the `Link` component from `next/link` for navigation. The component is a functional component that returns JSX.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js Home Component (pages directory)
DESCRIPTION: Defines a basic Next.js home component using the `pages` directory structure. It imports `Link` from `next/link` for navigation. The component renders a heading and a link to the `/about` page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Streaming Responses in Next.js - TypeScript
DESCRIPTION: This snippet shows how to implement a streaming response using OpenAI's API in a POST request. It demonstrates building a stream from messages passed in the request body.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { openai } from '@ai-sdk/openai'
import { StreamingTextResponse, streamText } from 'ai'

export async function POST(req: Request) {
  const { messages } = await req.json()
  const result = await streamText({
    model: openai('gpt-4-turbo'),
    messages,
  })

  return new StreamingTextResponse(result.toAIStream())
}
```

----------------------------------------

TITLE: Creating a Next.js app with GraphQL example using npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the api-routes-graphql example. It initializes the project with the necessary dependencies and configurations for a GraphQL API. The new application will be named 'api-routes-graphql-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-graphql/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-graphql api-routes-graphql-app
```

----------------------------------------

TITLE: Form Validation with Zod - JavaScript
DESCRIPTION: This code snippet demonstrates how to use Zod for form validation in a Next.js API route using JavaScript. It defines a schema for validating the request body and parses the incoming data using the schema.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import { z } from 'zod'

const schema = z.object({
  // ...
})

export default async function handler(req, res) {
  const parsed = schema.parse(req.body)
  // ...
}
```

----------------------------------------

TITLE: Setting Environment Variable in .env file
DESCRIPTION: This code snippet shows how to add a custom environment variable to the `.env` file in Next.js. Environment variables can be accessed during build time or runtime to configure the application's behavior.  In this case, it's setting `NEXT_PUBLIC_BASE_PATH`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_22

LANGUAGE: bash
CODE:
```
# ...
NEXT_PUBLIC_BASE_PATH="/some-base-path"
```

----------------------------------------

TITLE: Defining and Exporting 'external1' Function in JavaScript
DESCRIPTION: Defines and exports a function 'external1' that calls the 'internal' function and concatenates its result with the current value of 'foobar'. This function definition is hoisted and declares/writes to 'external1'. It eventually reads 'internal' and 'foobar' when called.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_11

LANGUAGE: javascript
CODE:
```
export function external1() {
    return internal() + foobar;
}

```

----------------------------------------

TITLE: Javascript Module Part 1
DESCRIPTION: This code snippet represents part 1 of a JavaScript module. It imports `shared` from a previous module part, modifies `externalObject`, logs `shared` to the console, and exports an object as `e`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
import { d as shared } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
externalObject.propertyWithSetter = 42;
console.log(shared);
const a = {
    shared,
    a: "aaaaaaaaaaa"
};
export { a as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Setting Environment Variables in .env.local
DESCRIPTION: This shows the expected format of the `.env.local` file.  The values for `COSMIC_BUCKET_SLUG`, `COSMIC_READ_KEY`, and `COSMIC_PREVIEW_SECRET` are specific to your Cosmic CMS setup. `COSMIC_PREVIEW_SECRET` is used for Next.js Preview Mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
COSMIC_BUCKET_SLUG=...
COSMIC_READ_KEY=...
COSMIC_PREVIEW_SECRET=...
```

----------------------------------------

TITLE: Building and starting a Next.js app with npm
DESCRIPTION: These commands build and start the Next.js application in production mode using npm.  `npm run build` compiles the application for production, and `npm run start` starts the production server. Requires a properly configured Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm run build
npm run start
```

----------------------------------------

TITLE: Creating Post with Server Action in Next.js TypeScript
DESCRIPTION: This TypeScript snippet demonstrates the creation of a post using a server action in a Next.js application. It uses the 'createPost' function, invoked during form submission as the action, to perform server-side operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_14

LANGUAGE: TypeScript
CODE:
```
import Form from 'next/form'
import { createPost } from '@/posts/actions'

export default function Page() {
  return (
    <Form action={createPost}>
      <input name="title" />
      {/* ... */}
      <button type="submit">Create Post</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Creating Next.js app with Plausible using pnpm
DESCRIPTION: This command initializes a new Next.js application with the Plausible analytics example. It uses `create next-app` via `pnpm` to bootstrap the project with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-plausible/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-plausible with-plausible-app
```

----------------------------------------

TITLE: Initializing Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the ReactMD and Typescript example. It streamlines the project setup with pre-configured settings.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-md-typescript/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-md-typescript with-react-md-typescript-app
```

----------------------------------------

TITLE: Installing Sharp via yarn
DESCRIPTION: This command installs the Sharp library using yarn, for use in Next.js production environments to optimize images.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-missing-in-production.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn add sharp
```

----------------------------------------

TITLE: Calling spawnSync with Dynamic Node Arguments Array - JavaScript
DESCRIPTION: This snippet demonstrates calling `child_process.spawnSync` to execute 'node' with an array containing dynamic variables (`unknown`, derived from `Math.random()`) as arguments. This usage is dynamic and can pose issues for static analysis.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__quo_-c0f309.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
child_process.spawnSync('node', [unknown, unknown])
```

----------------------------------------

TITLE: Initializing Xata in the project
DESCRIPTION: This command initializes Xata within the newly created Next.js project, linking it to your Xata workspace. Requires the Xata CLI to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
xata init
```

----------------------------------------

TITLE: Creating Next.js App with Paste and TypeScript using npx
DESCRIPTION: This command uses npx to create a new Next.js application with the specified example template (with-paste-typescript).  It bootstraps the project with Paste and TypeScript configurations. The resulting application will be named 'with-paste-typescript-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-paste-typescript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-paste-typescript with-paste-typescript-app
```

----------------------------------------

TITLE: Third-party Integration Before Connection API
DESCRIPTION: Example showing problematic third-party integration that needs to be updated with connection API.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import { getDataFrom3rdParty } from '3rdparty'

export default function Page() {
  // Imagine this function access Request data synchronously
  // on the inside even if it has an async external interface
  const token = await getDataFrom3rdParty();
  return ...
}
```

----------------------------------------

TITLE: Initializing Prismic Slice Machine
DESCRIPTION: This command initializes Prismic Slice Machine in the project, prompting the user to log in or create a Prismic account. It also creates a new Prismic repository with pre-made content models and connects it to the app. Requires `@slicemachine/init` package.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
npx @slicemachine/init
```

----------------------------------------

TITLE: Creating a New Builder.io Space
DESCRIPTION: This command is used to create a new space in Builder.io. The user must provide a private API key and a name for the space. After successful execution, the public API key is printed, which should be used in the environment configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cd cms-builder-io-app
builder create -k [private-key] -n [space-name] -d
```

----------------------------------------

TITLE: Creating Next.js app with Inngest example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named "inngest-app" using the "inngest" example. It utilizes create-next-app to set up the project with the required dependencies and configurations to integrate with Inngest.  pnpm is required to be installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example inngest inngest-app
```

----------------------------------------

TITLE: Creating Next.js app with Styletron using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application with the Styletron example.  It initializes a project named 'with-styletron-app' using the 'with-styletron' example template. Requires Node.js and Yarn installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styletron/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-styletron with-styletron-app
```

----------------------------------------

TITLE: Creating Next.js App with OpenTelemetry example using npx
DESCRIPTION: This command initializes a new Next.js application using the `with-opentelemetry` example from the `create-next-app` tool. It downloads the necessary files and sets up the project with OpenTelemetry instrumentation. The resulting application directory will be named `with-opentelemetry-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-opentelemetry/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-opentelemetry with-opentelemetry-app
```

----------------------------------------

TITLE: Download GraphQL schema (pnpm)
DESCRIPTION: This command uses pnpm to execute the 'schema' script defined in the project's package.json. The purpose is to download the schema introspection data from the configured Relay endpoint. This assumes that 'schema' script is properly configured to fetch the schema.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm schema
```

----------------------------------------

TITLE: Creating Social Media Links with HTML in Markdown
DESCRIPTION: Implements a contact section using HTML div element within Markdown to display social media links and contact information. This demonstrates how HTML can be embedded within Markdown content in Next.js with Nextra.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/index.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<div>
  Twitter [@yourname](https://twitter.com/yourname)
  <br />
  GitHub [@yourname](https://github.com/yourname)
  <br />
  Instagram [@yourname](https://instagram.com/yourname)
  <br />
  Email your@name.com
</div>
```

----------------------------------------

TITLE: Adding Subtitles to a Video in Next.js
DESCRIPTION: This code snippet shows how to add subtitles to a video displayed in a Next.js application, where the video and subtitle files are hosted on Vercel Blob. It fetches both the video URL and the subtitle file URL using `list` from `@vercel/blob` and includes a `<track>` element within the `<video>` tag to display the subtitles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
async function VideoComponent({ fileName }) {
  const { blobs } = await list({
    prefix: fileName,
    limit: 2,
  })
  const { url } = blobs[0]
  const { url: captionsUrl } = blobs[1]

  return (
    <video controls preload="none" aria-label="Video player">
      <source src={url} type="video/mp4" />
      <track src={captionsUrl} kind="subtitles" srcLang="en" label="English" />
      Your browser does not support the video tag.
    </video>
  )
}
```

----------------------------------------

TITLE: Setting up SuperTokens with Next.js using create-supertokens-app (Yarn)
DESCRIPTION: Command to create a Next.js application with SuperTokens authentication using the official SuperTokens CLI tool with Yarn, allowing further customization during setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
yarn create-supertokens-app@latest --frontend=next
```

----------------------------------------

TITLE: Creating a Next.js App with Segment Analytics using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-segment-analytics example.  It bootstraps the project with the necessary files and configurations for Segment Analytics integration. The application will be created with the name 'with-segment-analytics-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-segment-analytics with-segment-analytics-app
```

----------------------------------------

TITLE: Removing React Properties in Next.js Compiler
DESCRIPTION: This snippet details how to utilize the Next.js Compiler to remove specific JSX properties, primarily for testing purposes. It includes options for default regex matches as well as custom property removals.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compiler: {
    reactRemoveProperties: true,
  },
}
```

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  compiler: {
    // The regexes defined here are processed in Rust so the syntax is different from
    // JavaScript `RegExp`s. See https://docs.rs/regex.
    reactRemoveProperties: { properties: ['^data-custom$'] },
  },
}
```

----------------------------------------

TITLE: Output HTML for apple-icon.* - HTML
DESCRIPTION: Shows the HTML <link> tag with rel="apple-touch-icon" generated for an apple-icon file (e.g., .png). This tag is used specifically for touch devices like iPhones and iPads.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<link
  rel="apple-touch-icon"
  href="/apple-icon?<generated>"
  type="image/<generated>"
  sizes="<generated>"
/>
```

----------------------------------------

TITLE: Create Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application from the with-google-maps-embed example. It bootstraps the project with the necessary dependencies for using a Google Maps embed. The new application will be located in the with-google-maps-embed-app directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-maps-embed/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-google-maps-embed with-google-maps-embed-app
```

----------------------------------------

TITLE: Running Sentry Wizard
DESCRIPTION: This command executes the Sentry wizard to configure the necessary settings files for the `@sentry/nextjs` SDK. This includes initializing the SDK and uploading source maps to Sentry. The `-i nextjs` flag specifies the Next.js integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx @sentry/wizard -i nextjs
```

----------------------------------------

TITLE: Creating Next.js app with Relay Modern example (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the Relay Modern example. It initializes a project named 'with-relay-modern-app' using the specified example template. Dependencies include create-next-app and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-relay-modern with-relay-modern-app
```

----------------------------------------

TITLE: Dashboard Layout Definition (TypeScript)
DESCRIPTION: This code snippet defines a dashboard layout component in TypeScript. It accepts a `children` prop, which represents the content to be rendered within the layout. The layout is a simple section element that wraps the children.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}
```

----------------------------------------

TITLE: Configuring baseUrl for Absolute Imports in JSON
DESCRIPTION: This JSON snippet shows the basic configuration required in your `tsconfig.json` or `jsconfig.json` file to set a base directory (`src/` in this example) for resolving module paths, enabling absolute imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_12

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": "src/"
  }
}
```

----------------------------------------

TITLE: Defining Markdown Frontmatter in Next.js
DESCRIPTION: Markdown frontmatter block that defines the page title using YAML syntax. This is commonly used in Next.js pages to specify metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/app/posts/hello-world.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: Hello World
---
```

----------------------------------------

TITLE: Creating Next.js app with GraphQL Hooks example
DESCRIPTION: This command utilizes `create-next-app` to bootstrap a new Next.js application using the `with-graphql-hooks` example. It installs the necessary dependencies and sets up the project structure for working with GraphQL Hooks.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-hooks/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-graphql-hooks with-graphql-hooks-app
```

----------------------------------------

TITLE: Blog Page Component with Data Dependencies
DESCRIPTION: A Next.js page component that displays a list of blog posts. This example shows a component that requires external data before it can be pre-rendered, indicated by a TODO comment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
// TODO: Need to fetch `posts` (by calling some API endpoint)
//       before this page can be pre-rendered.
function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li>{post.title}</li>
      ))}
    </ul>
  )
}

export default Blog
```

----------------------------------------

TITLE: Creating Next.js App with React-GA4 Example (pnpm)
DESCRIPTION: This command uses pnpm to create a Next.js app from the with-react-ga4 example.  It bootstraps a project preconfigured to use react-ga4 for analytics.  The 'with-react-ga-app' argument specifies the name of the new application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-ga4/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-ga4 with-react-ga-app
```

----------------------------------------

TITLE: Creating Next.js App with FingerprintJS Pro Example (pnpm)
DESCRIPTION: This command uses `create-next-app` with pnpm to generate a new Next.js project pre-configured with the FingerprintJS Pro example. It requires pnpm to be installed. The project will be created in a directory named `with-fingerprintjs-pro-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fingerprintjs-pro/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app
```

----------------------------------------

TITLE: Setting Body Size Limit for Next.js Server Actions
DESCRIPTION: Configuration to modify the maximum allowed request body size for Server Actions. Default is 1MB, but can be customized using bytes notation like '500kb' or '3mb'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverActions.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */

module.exports = {
  experimental: {
    serverActions: {
      bodySizeLimit: '2mb',
    },
  },
}
```

----------------------------------------

TITLE: Creating Next.js App with AMP Example (npm)
DESCRIPTION: Uses npx to create a new Next.js application based on the AMP example. This command bootstraps the project with the necessary files and configurations for AMP support, utilizing the 'amp' example template and naming the new application 'amp-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/amp/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example amp amp-app
```

----------------------------------------

TITLE: Next.js About Component (pages directory)
DESCRIPTION: Defines a basic Next.js about component using the `pages` directory structure. It imports `Link` from `next/link` for navigation. The component renders a heading and a link to the `/` (home) page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function About() {
  return (
    <div>
      <h1>About</h1>
      <Link href="/">Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Next.js app with Redis example using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application named 'roadmap' based on the 'with-redis' example. This bootstraps the project with the necessary dependencies and configuration for using Redis with Upstash.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redis/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-redis roadmap
```

----------------------------------------

TITLE: Creating Next.js App with Facebook Pixel Example (Yarn)
DESCRIPTION: This command initializes a new Next.js application using the `with-facebook-pixel` example from the Next.js repository. It utilizes `create-next-app` via `yarn` to bootstrap the project. The resulting application, `with-facebook-pixel-app`, includes the necessary configuration for Facebook Pixel integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-facebook-pixel with-facebook-pixel-app
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-prefetching' example.  It sets up a new project directory named 'with-prefetching-app' containing all required dependencies and configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-prefetching/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-prefetching with-prefetching-app
```

----------------------------------------

TITLE: Creating Next.js App with Segment Analytics using NPX
DESCRIPTION: This command initializes a new Next.js application with the 'with-segment-analytics-pages-router' example using npx. It clones the example and sets up the necessary project structure for integrating Segment Analytics.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics-pages-router/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-segment-analytics-pages-router with-segment-analytics-app
```

----------------------------------------

TITLE: Creating a Next.js app with Yarn
DESCRIPTION: This command initializes a new Next.js application using the `create next-app` tool with the `with-service-worker` example. It uses Yarn as the package manager. The `with-service-worker-app` argument specifies the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-service-worker/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-service-worker with-service-worker-app
```

----------------------------------------

TITLE: Configuring exportPathMap in Next.js Configuration
DESCRIPTION: This snippet demonstrates how to set up a custom exportPathMap in the next.config.js file. It maps specific routes to pages and includes query parameters for dynamic content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/exportPathMap.mdx#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  exportPathMap: async function (
    defaultPathMap,
    { dev, dir, outDir, distDir, buildId }
  ) {
    return {
      '/': { page: '/' },
      '/about': { page: '/about' },
      '/p/hello-nextjs': { page: '/post', query: { title: 'hello-nextjs' } },
      '/p/learn-nextjs': { page: '/post', query: { title: 'learn-nextjs' } },
      '/p/deploy-nextjs': { page: '/post', query: { title: 'deploy-nextjs' } },
    }
  },
}
```

----------------------------------------

TITLE: Fetching Data with getServerSideProps in Pages Directory (JSX)
DESCRIPTION: Shows the traditional way of fetching data on the server in the `pages` directory using the `getServerSideProps` function. This function runs on every request, fetches data, and passes it as props to the default exported React component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_16

LANGUAGE: jsx
CODE:
```
// `pages` directory\n\nexport async function getServerSideProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return { props: { projects } }\n}\n\nexport default function Dashboard({ projects }) {\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}
```

----------------------------------------

TITLE: Dynamic child_process.spawnSync Arguments in JavaScript
DESCRIPTION: This snippet shows 'child_process.spawnSync' executing 'node' but with dynamic arguments specified by a variable. This is also a security risk, as malicious arguments could be passed to the node process if the variable is controlled by external input.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1002__ require(FreeVar(Math)[__quo__r-899e87.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
child_process.spawnSync('node', unknown)
```

----------------------------------------

TITLE: Creating Next.js app with Ionic example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the 'with-ionic' example. It scaffolds a project named 'with-ionic-app' in the current directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ionic/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-ionic with-ionic-app
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-joi example.  It initializes a new project named 'with-joi-app' with the specified example template. The command relies on the create-next-app package.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-joi/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-joi with-joi-app
```

----------------------------------------

TITLE: Creating Next.js App with FingerprintJS Pro Example (npm)
DESCRIPTION: This command uses `create-next-app` with npm to generate a new Next.js project pre-configured with the FingerprintJS Pro example.  It requires npm to be installed. The project will be created in a directory named `with-fingerprintjs-pro-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fingerprintjs-pro/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app
```

----------------------------------------

TITLE: Creating a Base Button Component in TypeScript with CSS Module
DESCRIPTION: This TypeScript snippet defines a 'BaseButton' component that imports styles from 'base-button.module.css'. The component uses the imported styles to apply a primary button class.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/05-styling/01-css.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import styles from './base-button.module.css'

export function BaseButton() {
  return <button className={styles.primary} />
}
```

----------------------------------------

TITLE: Defining Font Styles with CSS Variables in Module CSS
DESCRIPTION: CSS module that defines a text class using the font-family CSS variable along with additional font properties. This approach allows for external styling of fonts loaded with next/font.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#2025-04-21_snippet_4

LANGUAGE: css
CODE:
```
.text {
  font-family: var(--font-inter);
  font-weight: 200;
  font-style: italic;
}
```

----------------------------------------

TITLE: Executing spawnSync with Dynamic Command JavaScript
DESCRIPTION: Demonstrates calling `child_process.spawnSync`, a Node.js function for synchronous subprocess creation, using a completely dynamic variable (`unknown`) as the command. This pattern is flagged by the linter (TP1005) as highly dynamic and difficult for static analysis. Requires the `child_process` module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(FreeVa-635fa3.txt#_snippet_1

LANGUAGE: JavaScript
CODE:
```
child_process.spawnSync(unknown)
```

----------------------------------------

TITLE: Increasing Minimum Cache TTL for Images in Next.js
DESCRIPTION: This snippet shows how to increase the minimum cache TTL for optimized images in Next.js. Increasing the TTL reduces revalidations and can lower cost. This configuration is helpful when upstream images have missing or low `Cache-Control` headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_16

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    minimumCacheTTL: 2678400, // 31 days
  },
}
```

----------------------------------------

TITLE: Creating Next.js app with Xata using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application pre-configured to work with Xata. It bootstraps the project using the `with-xata` example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
pnpm create next-app --example with-xata with-xata-app
```

----------------------------------------

TITLE: Creating a Next.js App using Yarn
DESCRIPTION: This command utilizes Yarn's create next-app to scaffold a new Next.js project with the 'with-passport' example. It creates a directory named 'with-passport-app' containing the boilerplate code for the authentication example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-passport with-passport-app
```

----------------------------------------

TITLE: Creating Next.js app with i18n routing using yarn
DESCRIPTION: This command uses yarn to execute `create next-app` and bootstraps a new Next.js application with the internationalized routing example. The `i18n-routing` argument specifies the example to use, and `i18n-routing-app` is the name of the new application to be created.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example i18n-routing i18n-routing-app
```

----------------------------------------

TITLE: Creating Next.js App with GraphCMS Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application using the cms-graphcms example. It leverages create-next-app with npm, Yarn, and pnpm to set up the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-graphcms cms-graphcms-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-graphcms cms-graphcms-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-graphcms cms-graphcms-app
```

----------------------------------------

TITLE: Creating a Next.js Auth0 App with Yarn
DESCRIPTION: Command to bootstrap a Next.js application with Auth0 integration using Yarn and create-next-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example auth0 auth0-app
```

----------------------------------------

TITLE: Disabling Incoming Request Logging
DESCRIPTION: Disables logging of all incoming requests during Next.js development by setting `logging.incomingRequests` to `false` in `next.config.js`. This affects logging only in the development environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/logging.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  logging: {
    incomingRequests: false,
  },
}
```

----------------------------------------

TITLE: Running Next.js in development mode using npm
DESCRIPTION: These commands install the project dependencies and then start the Next.js development server.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Creating Next.js App with Turbopack using npm
DESCRIPTION: Command to create a new Next.js application with Turbopack using npm's create-next-app utility. This bootstraps a project based on the with-turbopack example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-turbopack with-turbopack-app
```

----------------------------------------

TITLE: Creating a Next.js App with Quill.js Example using Yarn
DESCRIPTION: This command initializes a new Next.js application using the 'with-quill-js' example from the Next.js repository. It uses Yarn to execute the create next-app tool and creates a new directory named 'with-quill-js-app' containing the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-quill-js/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-quill-js with-quill-js-app
```

----------------------------------------

TITLE: Creating a Next.js App with Quill.js Example using npm
DESCRIPTION: This command initializes a new Next.js application using the 'with-quill-js' example from the Next.js repository. It uses npm to execute the create-next-app tool and creates a new directory named 'with-quill-js-app' containing the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-quill-js/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-quill-js with-quill-js-app
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the react-native-web example. It efficiently manages dependencies and sets up the project for using React Native Web in a Next.js context.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-native-web/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-native-web with-react-native-web-app
```

----------------------------------------

TITLE: Debugging Tests with Browser Visibility
DESCRIPTION: Command to run tests with the browser window visible for debugging purposes, replacing 'test-start' with 'testonly-start'.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
pnpm testonly-start test/e2e/app-dir/app/
```

----------------------------------------

TITLE: Blog Context Provider Implementation
DESCRIPTION: Context provider setup for handling blog data promises and providing them to child components.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'

import { createContext, useContext } from 'react'

export const BlogContext = createContext<Promise<any> | null>(null)

export function BlogProvider({
  children,
  blogPromise,
}: {
  children: React.ReactNode
  blogPromise: Promise<any>
}) {
  return (
    <BlogContext.Provider value={blogPromise}>{children}</BlogContext.Provider>
  )
}

export function useBlogContext() {
  const context = useContext(BlogContext)
  if (!context) {
    throw new Error('useBlogContext must be used within a BlogProvider')
  }
  return context
}
```

----------------------------------------

TITLE: Starting Standalone Next.js Server (Bash)
DESCRIPTION: Executes the minimal `server.js` file generated in the `.next/standalone` directory to start the Next.js production server locally using Node.js. Optional `PORT` and `HOSTNAME` environment variables can be defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
node .next/standalone/server.js
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command uses npm to create a new Next.js application using the api-routes-apollo-server example. It bootstraps the project with the necessary dependencies and configurations for integrating Apollo GraphQL.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-apollo-server api-routes-apollo-server-app
```

----------------------------------------

TITLE: Creating Next.js app with MDX pages using pnpm
DESCRIPTION: This command uses `create-next-app` with pnpm to initialize a new Next.js project with the `mdx-pages` example. It creates a directory named `mdx-pages-app` for the new project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example mdx-pages mdx-pages-app
```

----------------------------------------

TITLE: Creating Next.js App with TakeShape Example (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the cms-takeshape example. It bootstraps the project with the necessary files and dependencies to connect to TakeShape.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-takeshape cms-takeshape-app
```

----------------------------------------

TITLE: Creating Next.js app with yarn
DESCRIPTION: This command uses yarn to create a new Next.js application based on the cms-dotcms example. It initializes the project in a directory named cms-dotcms-app. It requires Node.js and yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-dotcms cms-dotcms-app
```

----------------------------------------

TITLE: Set Up Sanity Project with npm/Yarn/pnpm
DESCRIPTION: These commands set up a Sanity project, creating necessary datasets and environment variables. They require Sanity CLI tools and a pre-configured package manager. Questions answered during execution lead to project configuration, resulting in a ready-to-use Sanity setup within a Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npm run setup
```

LANGUAGE: bash
CODE:
```
yarn setup
```

LANGUAGE: bash
CODE:
```
pnpm run setup
```

----------------------------------------

TITLE: Uninstalling node-sass using npm
DESCRIPTION: This code snippet shows the command to remove the 'node-sass' package from your project dependencies using npm. This is suggested to resolve conflicts between 'sass' and 'node-sass'.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/duplicate-sass.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm uninstall node-sass
```

----------------------------------------

TITLE: Creating Next.js app with Sitefinity example
DESCRIPTION: This command initializes a new Next.js application using the cms-sitefinity example. It uses npx to execute the create-next-app command with the specified example and target directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-sitefinity cms-sitefinity-app
```

----------------------------------------

TITLE: Creating Next.js app with Video.js Example (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-videojs example. It bootstraps the project with necessary dependencies and configurations for Video.js integration. The new application will be named with-videojs-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-videojs/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-videojs with-videojs-app
```

----------------------------------------

TITLE: Correct Usage of React Hook by Converting to Client Component (JSX)
DESCRIPTION: This code snippet demonstrates the correct way to use a React client hook by converting the component to a Client Component using the 'use client' directive at the top of the file.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-client-hook-in-server-component.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useEffect } from 'react'

export default function Example() {
  useEffect(() => {
    console.log('in useEffect')
  })
  return <p>Hello world</p>
}
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: This command starts the Next.js development server using npm, yarn, pnpm, or bun. It allows developers to preview changes in real-time by accessing the application in a web browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-api/ts/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Dynamic child_process.spawnSync Command in JavaScript
DESCRIPTION: This snippet shows 'child_process.spawnSync' being called with a dynamic command specified by a variable. This is a security risk as it allows arbitrary code execution if the variable can be controlled by external input.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1002__ require(FreeVar(Math)[__quo__r-899e87.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
child_process.spawnSync(unknown)
```

----------------------------------------

TITLE: Importing Module Part and Dependency JavaScript
DESCRIPTION: Imports a Turbopack module part (part 0) and another local module named 'compose'. This shows a module depending on both a bundled part and a separate file.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_28

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import './compose';
```

----------------------------------------

TITLE: Implementing PPR in JavaScript Page Component
DESCRIPTION: JavaScript example showing how to implement PPR in a Next.js page component with static and dynamic content using Suspense
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/ppr.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { Suspense } from "react"
import { StaticComponent, DynamicComponent, Fallback } from "@/app/ui"

export const experimental_ppr = true

export default function Page() {
  return {
     <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
     </>
  };
}
```

----------------------------------------

TITLE: Advanced URL Redirection in NextResponse - TypeScript
DESCRIPTION: Demonstrates how to build a redirect URL from an incoming request, appending query parameters based on request context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

// Given an incoming request...
const loginUrl = new URL('/login', request.url)
// Add ?from=/incoming-url to the /login URL
loginUrl.searchParams.set('from', request.nextUrl.pathname)
// And redirect to the new URL
return NextResponse.redirect(loginUrl)
```

----------------------------------------

TITLE: Creating Next.js app using create-next-app with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application named 'image-app' based on the 'image-component' example. It initializes a new project with the specified template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-component/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example image-component image-app
```

----------------------------------------

TITLE: Incorrect PostCSS Configuration (instantiated)
DESCRIPTION: This code snippet demonstrates an incorrect PostCSS configuration where a plugin is instantiated with configuration directly within the plugins array. The corrected example shows the proper way to include plugin configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins: [
    require('postcss-plugin')({
      optionA: '...',
    }),
  ],
}
```

----------------------------------------

TITLE: Handling Incompatible href and as in Next.js
DESCRIPTION: This snippet represents an incorrect usage of the next/link component in Next.js, where a relative href is paired with an external as value, which triggers an error when the link is clicked. The as value should also be relative or absent for external URLs.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-relative-url-external-as.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Page(props) {
  return (
    <>
      <Link href="/invalid" as="mailto:john@example.com">
        <a>Invalid link</a>
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Creating a Next.js app with XState
DESCRIPTION: This command bootstraps a new Next.js application using the with-xstate example. It utilizes create-next-app with pnpm to initialize the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-xstate with-xstate-app
```

----------------------------------------

TITLE: Create Next App with styled-components using yarn
DESCRIPTION: This command initializes a new Next.js application using the with-styled-components example. It uses yarn to execute create next-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-components/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-styled-components with-styled-components-app
```

----------------------------------------

TITLE: Handling Invalid UTF-8 Source Code Parsing Error
DESCRIPTION: Captures an unexpected error during source code reading, specifically related to invalid UTF-8 byte sequence conversion
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/error/issues/Reading source code for parsing failed-073388.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
error - [load] [project]/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/error/input/broken.js  Reading source code for parsing failed\n  An unexpected error happened while trying to read the source code to parse: failed to convert rope into string\n\n  Caused by:\n  - invalid utf-8 sequence of 1 bytes from index 1
```

----------------------------------------

TITLE: Including Non-Page Files in Pages Directory (Pages Router)
DESCRIPTION: This code snippet demonstrates how to configure `pageExtensions` in `next.config.js` to allow colocating non-page files, like test files, in the `pages` directory in the Pages Router.  It requires renaming pages to include `.page` in the extension (e.g., `MyPage.tsx` becomes `MyPage.page.tsx`).  All relevant Next.js pages need to be renamed accordingly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/pageExtensions.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  pageExtensions: ['page.tsx', 'page.ts', 'page.jsx', 'page.js'],
}
```

----------------------------------------

TITLE: Creating a Next.js app using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the with-yarn-workspaces example. It initializes the project with the specified example and names the application with-yarn-workspaces-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yarn-workspaces/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-yarn-workspaces with-yarn-workspaces-app
```

----------------------------------------

TITLE: Creating Next.js app with Salesforce Commerce Cloud template using pnpm
DESCRIPTION: Command to bootstrap a Next.js application with Salesforce Commerce Cloud integration using pnpm create next-app with the with-sfcc example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sfcc/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-sfcc nextjs-sfcc-app
```

----------------------------------------

TITLE: Creating a Next.js app with cache-handler-redis example
DESCRIPTION: These commands are used to bootstrap a new Next.js application using the `cache-handler-redis` example. They use `create-next-app` with npm, Yarn, and pnpm respectively to initialize the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cache-handler-redis cache-handler-redis-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cache-handler-redis cache-handler-redis-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cache-handler-redis cache-handler-redis-app
```

----------------------------------------

TITLE: Creating Next.js app with MDBReact example using npx
DESCRIPTION: This command uses npx to create a new Next.js application with the MDBReact example.  It utilizes the create-next-app tool and specifies the with-mdbreact example. The resulting application will be named with-mdbreact-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mdbreact/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mdbreact with-mdbreact-app
```

----------------------------------------

TITLE: Creating Next.js app with MDBReact example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the MDBReact example.  It utilizes the create next-app command and specifies the with-mdbreact example. The resulting application will be named with-mdbreact-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mdbreact/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mdbreact with-mdbreact-app
```

----------------------------------------

TITLE: Creating Next.js app with rosetta example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the `with-i18n-rosetta` example.  It leverages pnpm's create command to initialize a new project named `with-i18n-rosetta-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-rosetta/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-i18n-rosetta with-i18n-rosetta-app
```

----------------------------------------

TITLE: Creating Next.js App with create-next-app (pnpm)
DESCRIPTION: This command uses pnpm to set up a new Next.js application from the with-shallow-routing example. The create-next-app tool scaffolds the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-shallow-routing with-shallow-routing-app
```

----------------------------------------

TITLE: Installing Dependencies and Running Benchmark in Markdown
DESCRIPTION: Commands for installing dependencies and running the benchmark script. This snippet shows the basic steps to set up and execute the benchmarking process.
SOURCE: https://github.com/vercel/next.js/blob/canary/bench/vercel/README.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
Run `pnpm install`, `pnpm bench` and profit.
```

----------------------------------------

TITLE: Configuring Remote Image Patterns in Next.js 15.3.0+
DESCRIPTION: Configuration using URL pattern for next/image component in modern Next.js versions. This approach uses the new URL constructor to define allowed remote image patterns.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-host.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    remotePatterns: [new URL('https://assets.example.com/account123/**')],
  },
}
```

----------------------------------------

TITLE: Forcing Static Rendering (Next.js)
DESCRIPTION: Shows the use of the `dynamic = 'force-static'` route segment config option to explicitly force static rendering for an entire segment, even if dynamic APIs or configurations are present.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_13

LANGUAGE: JSX
CODE:
```
export const dynamic = 'force-static'
```

----------------------------------------

TITLE: Importing Server Functions in Client Components with JavaScript
DESCRIPTION: Demonstrates importing and using Server Functions in a Client Component with JavaScript. The Server Function is imported from a separate file and used as a form action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-updating-data.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
'use client'

import { createPost } from '@/app/actions'

export function Button() {
  return <button formAction={createPost}>Create</button>
}
```

----------------------------------------

TITLE: Importing Next.js Document Component in JS
DESCRIPTION: This snippet imports the `Document` component, a standard Next.js component used to customize the HTML shell of a page. The actual module path is represented by a placeholder variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_3

LANGUAGE: js
CODE:
```
import Document from 'VAR_MODULE_DOCUMENT';
```

----------------------------------------

TITLE: Importing Turbopack Part and Module JS
DESCRIPTION: Combines a Turbopack part import with a standard module import (`RouteKind`). This structure is part of how Turbopack organizes and loads module dependencies in compiled output.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import '../../server/future/route-kind';

```

----------------------------------------

TITLE: Creating Next.js App with FingerprintJS Pro Example (Yarn)
DESCRIPTION: This command uses `create-next-app` with Yarn to generate a new Next.js project pre-configured with the FingerprintJS Pro example. It requires Yarn to be installed. The project will be created in a directory named `with-fingerprintjs-pro-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fingerprintjs-pro/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app
```

----------------------------------------

TITLE: Installing dependencies and running Next.js in development mode using Yarn
DESCRIPTION: These commands install project dependencies with Yarn, then start the Next.js development server, allowing users to preview the site locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Starting Next.js development server using yarn
DESCRIPTION: This command starts the Next.js development server using yarn. It executes the "dev" script defined in the package.json file, usually starting the server on localhost:3000. Yarn must be installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Configure Bundle Analyzer in next.config.js
DESCRIPTION: Configures the @next/bundle-analyzer plugin in the `next.config.js` file. It checks the `ANALYZE` environment variable to enable the analyzer.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {}

const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
})

module.exports = withBundleAnalyzer(nextConfig)
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app (Yarn)
DESCRIPTION: This command creates a new Next.js application using the `with-apivideo` example. It uses Yarn to execute the `create-next-app` command, scaffolding the project with the specified example and naming the new application `with-apivideo-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apivideo/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-apivideo with-apivideo-app
```

----------------------------------------

TITLE: Variable Declaration and Function Call in Javascript
DESCRIPTION: This code declares a constant variable `value` and initializes it with the result of calling `externalFunction()`. It shows a variable declaration and a call to an external function which may have side effects.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const value = externalFunction();
```

----------------------------------------

TITLE: Configuring Trailing Slash Redirect Skip in Next.js (JS)
DESCRIPTION: Configures Next.js to disable automatic trailing slash redirects by setting `skipTrailingSlashRedirect` to `true` in the `next.config.js` file. This allows custom handling within middleware.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_13

LANGUAGE: javascript
CODE:
```
module.exports = {
  skipTrailingSlashRedirect: true,
}
```

----------------------------------------

TITLE: Creating a Next.js Auth0 App with npm
DESCRIPTION: Command to bootstrap a Next.js application with Auth0 integration using npm and create-next-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example auth0 auth0-app
```

----------------------------------------

TITLE: Copying .env.local.example to .env.local
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. This allows you to create a local environment configuration file without modifying the original example file.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Markdown Documentation for NextResponse.next() Error
DESCRIPTION: Documentation explaining that Route Handlers must return a Response object directly instead of using NextResponse.next(). Route Handlers are considered the end of the middleware chain and cannot forward to next middleware.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-response-next-in-app-route-handler.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
## Why This Error Occurred

Route Handlers in the Next.js App Router do not support using the `NextResponse.next()` method to forward to the next Middleware.

The Route Handler is considered the end of the middleware "chain". Handlers must always return a `Response` object instead.

## Possible Ways to Fix It

Remove the `NextResponse.next()` and replace it with a correct response handler.

## Useful Links

- [Route Handlers](/docs/app/building-your-application/routing/route-handlers)
- [`NextResponse`](/docs/app/api-reference/functions/next-response)
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the image-secure-compute example. It downloads the example and sets up a new project with the specified name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-secure-compute/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example image-secure-compute image-secure-compute-app
```

----------------------------------------

TITLE: Creating Next.js App with Playwright Example (pnpm)
DESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with a pre-configured Playwright setup. It utilizes the `--example` flag to specify the `with-playwright` example. It requires pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-playwright/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-playwright with-playwright-app
```

----------------------------------------

TITLE: Turbopack Part Import 6 with URL Utility
DESCRIPTION: This snippet imports 'Part 4' via Turbopack assert and imports the internal Next.js URL utility module (`../../lib/url`).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import '../../lib/url';
```

----------------------------------------

TITLE: Installing Tailwind CSS Dependencies - Bash
DESCRIPTION: Use npm or yarn to install the required packages for integrating Tailwind CSS into a Next.js project. This includes `tailwindcss`, `@tailwindcss/postcss`, and `postcss`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-css.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npm install tailwindcss @tailwindcss/postcss postcss
```

----------------------------------------

TITLE: Running Storybook for Dev Overlay
DESCRIPTION: The snippet demonstrates how to start the Storybook server for local development of UI components in the Next.js dev overlay. The server runs at http://localhost:6006 and requires the 'pnpm' package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/react-dev-overlay/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
pnpm storybook
```

----------------------------------------

TITLE: Creating Next.js App with Ant Design using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the Ant Design example template. It utilizes `create next-app` to bootstrap the project with specified example and application name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ant-design/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-ant-design with-ant-design-app
```

----------------------------------------

TITLE: Correct Next.js Link Usage with Single Child
DESCRIPTION: Example showing the correct implementation of Next.js Link component with a single anchor tag child, which is the recommended approach before Next.js 13.0.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-multiple-children.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/about">
      <a>To About</a>
    </Link>
  )
}
```

----------------------------------------

TITLE: Importing CSS Files Using Root Stylesheet in Next.js
DESCRIPTION: Demonstrates how to import additional CSS files using @import within the root stylesheet that is imported in pages/_app.js. This is the recommended approach for global CSS imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-css-tags.mdx#2025-04-21_snippet_0

LANGUAGE: css
CODE:
```
/* Root stylesheet */
@import 'extra.css';

body {
  /* ... */
}
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-portals example. It specifies the example and the application name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-portals with-portals-app
```

----------------------------------------

TITLE: Creating Next.js app with Compiled using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application configured with the Compiled CSS-in-JS library. It executes the create-next-app package with the 'with-compiled-css' example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-compiled-css/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-compiled-css with-compiled-css-app
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the `with-portals-ssr` example. It initializes a project named `with-portals-ssr-app` using the specified example from the Next.js repository. Yarn must be installed and configured in the environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals-ssr/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-portals-ssr with-portals-ssr-app
```

----------------------------------------

TITLE: Updating Sharp in Custom Installation Path for Next.js
DESCRIPTION: This command updates the 'sharp' package to the latest version when using a custom installation path specified by the NEXT_SHARP_PATH environment variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-version-avif.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cd "$NEXT_SHARP_PATH/../" && npm i sharp@latest
```

----------------------------------------

TITLE: Home component (Pages Router)
DESCRIPTION: A simple Next.js component for the Pages Router that returns a heading element. This is tested in the accompanying test snippet. Located in pages/index.js
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_17

LANGUAGE: jsx
CODE:
```
export default function Home() {
  return <h1>Home</h1>
}
```

----------------------------------------

TITLE: Creating Next.js app using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-lingui example. It bootstraps a project with Lingui i18n pre-configured. The command should be executed in the terminal. Make sure you have Node.js and Yarn installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-lingui/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-lingui with-lingui-app
```

----------------------------------------

TITLE: Adding id to Next.js Script component
DESCRIPTION: This code snippet demonstrates how to properly use the `next/script` component with inline JavaScript content by adding the required `id` attribute. The script tag includes inline JavaScript code that logs 'Hello world!' to the console. This resolves the error caused by missing `id` attribute.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/inline-script-id.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import Script from 'next/script'

export default function App({ Component, pageProps }) {
  return (
    <>
      <Script id="my-script">{`console.log('Hello world!');`}</Script>
      <Component {...pageProps} />
    </>
  )
}
```

----------------------------------------

TITLE: Configuring distDir in next.config.js
DESCRIPTION: This snippet configures the `distDir` option in `next.config.js`. It sets the build directory to 'build' instead of the default '.next' folder. The `module.exports` object is used to export the configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/distDir.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  distDir: 'build',
}
```

----------------------------------------

TITLE: Enable Webpack Memory Optimizations in Next.js
DESCRIPTION: This snippet demonstrates how to enable the `experimental.webpackMemoryOptimizations` feature in your `next.config.js` file.  This can reduce max memory usage but may slightly increase compilation times. It is available starting in `v15.0.0`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_0



----------------------------------------

TITLE: Generating EdgeQL query builder - Bash
DESCRIPTION: This command generates the EdgeQL query builder for TypeScript. It uses the `npx edgeql-js` command to create TypeScript files in the `dbschema/edgeql-js` directory. Requires the `edgeql-js` package to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
$ npx edgeql-js
```

----------------------------------------

TITLE: Creating Next.js App with Grafbase Example using npm
DESCRIPTION: This command initializes a new Next.js application using the 'with-grafbase' example. It uses npm to create a project named 'with-grafbase-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-grafbase with-grafbase-app
```

----------------------------------------

TITLE: Implementing Redirects in Next.js API Route
DESCRIPTION: Shows how to handle form submissions and redirect clients to a specified path using Next.js API routes. Includes error handling for failed operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const { name, message } = req.body

  try {
    await handleFormInputAsync({ name, message })
    res.redirect(307, '/')
  } catch (err) {
    res.status(500).send({ error: 'Failed to fetch data' })
  }
}
```

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  const { name, message } = req.body

  try {
    await handleFormInputAsync({ name, message })
    res.redirect(307, '/')
  } catch (err) {
    res.status(500).send({ error: 'failed to fetch data' })
  }
}
```

----------------------------------------

TITLE: Next.js About Page Component (App Router)
DESCRIPTION: Defines a Next.js about page component within the `app` directory using the App Router. It renders a heading and a link to the home page. Requires Next.js and `next/link`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>About</h1>
      <Link href="/">Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Configuring Device Sizes for Responsive Images in Next.js
DESCRIPTION: This code snippet demonstrates how to configure device sizes for responsive images in Next.js. These sizes are used by the `next/legacy/image` component when `layout="responsive"` or `layout="fill"` is used to ensure the correct image is served for the user's device.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
  },
}
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command uses `create-next-app` with npm to bootstrap a Next.js project configured to use Storyblok CMS. It creates a new directory `cms-storyblok-app` with the required files and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-storyblok cms-storyblok-app
```

----------------------------------------

TITLE: Incorrectly Nesting style jsx in Next.js (Before) - JSX
DESCRIPTION: This snippet demonstrates the incorrect placement of a <style jsx> tag nested inside a <p> element within a React component. This structure violates the styled-jsx requirement that style scopes must be at the root level, leading to the 'Nested <style jsx> tags' error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/nested-styled-jsx-tags.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
const Component = () => (
  <div>
    <p>
      Hello world
      <style jsx>{`
        p {
          color: white;
        }
      `}</style>
    </p>
    <style global jsx>{`
      body {
        background: black;
      }
    `}</style>
  </div>
)
```

----------------------------------------

TITLE: Updating package.json Build Script for Next.js Export
DESCRIPTION: Modifies the build script to remove automatic static export, allowing server-side rendering functionality
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/gssp-export.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}
```

----------------------------------------

TITLE: Defining Child Component with Shorter Cache Profile
DESCRIPTION: Shows a child component using a shorter 'hours' cache lifecycle, which will override the parent's longer cache duration
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
// Child component
import { unstable_cacheLife as cacheLife } from 'next/cache'

export async function ChildComponent() {
  'use cache'
  cacheLife('hours')
  return <div>Child Content</div>

  // This component's cache will respect the shorter 'hours' profile
}
```

----------------------------------------

TITLE: Terminal Output for Statically Optimized Page in Next.js
DESCRIPTION: Shows the file structure output by 'next build' for a statically optimized page, where the page is prerendered as HTML.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/04-automatic-static-optimization.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
.next/server/pages/about.html
```

----------------------------------------

TITLE: Using Router Events in Next.js Components
DESCRIPTION: Example of how to correctly use router events in Next.js 11 components, ensuring they are accessed within useEffect.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
useEffect(() => {
  const handleRouteChange = (url, { shallow }) => {
    console.log(
      `App is changing to ${url} ${
        shallow ? 'with' : 'without'
      } shallow routing`
    )
  }

  router.events.on('routeChangeStart', handleRouteChange)

  // If the component is unmounted, unsubscribe
  // from the event with the `off` method:
  return () => {
    router.events.off('routeChangeStart', handleRouteChange)
  }
}, [router])
```

----------------------------------------

TITLE: Installing Babel Runtime Package (Shell)
DESCRIPTION: Install the @babel/runtime package using a package manager, adding it as a production dependency. This package provides modular helpers to avoid code duplication when using Babel transformations. Requires npm or yarn and a Node.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@babel/runtime/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npm install --save @babel/runtime
```

LANGUAGE: Shell
CODE:
```
yarn add @babel/runtime
```

----------------------------------------

TITLE: Creating a Next.js App using npm
DESCRIPTION: This command uses `create-next-app` with npm to bootstrap a new Next.js application based on the `with-context-api` example. The new application will be named `with-context-api-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-context-api/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-context-api with-context-api-app
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app using Yarn
DESCRIPTION: This command initializes a new Next.js application named `github-pages-app` using the `github-pages` example from the `create-next-app` tool. The command uses Yarn to execute the create-next-app package.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example github-pages github-pages-app
```

----------------------------------------

TITLE: Configure AMP with Page Export (After Migration)
DESCRIPTION: Example of how to enable AMP for a page in Next.js 9 and later by exporting a `config` object with the `amp` property, replacing the deprecated `withAmp` HOC.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
export default function Home() {
  return <h1>My AMP Page</h1>
}

export const config = {
  amp: true,
  // or
  amp: 'hybrid',
}
```

----------------------------------------

TITLE: Bootstrap Next.js Application with Umbraco Example
DESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js application using the Umbraco CMS example. It covers the use of npm, Yarn, or pnpm to create the app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-umbraco umbraco-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-umbraco umbraco-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-umbraco umbraco-app
```

----------------------------------------

TITLE: Creating Next.js App with next-sitemap example (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-next-sitemap example. It automates the setup process, including installing necessary dependencies and configuring the project structure. The target directory is specified as with-next-sitemap-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-sitemap/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-next-sitemap with-next-sitemap-app
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command creates a new Next.js application using the `with-sitemap` example. It leverages `create-next-app` via pnpm. The created app will be named `with-sitemap-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-sitemap with-sitemap-app
```

----------------------------------------

TITLE: Creating Next.js app using npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-lingui example.  It bootstraps a project with Lingui i18n pre-configured. The command should be executed in the terminal. Make sure you have Node.js and npm installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-lingui/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-lingui with-lingui-app
```

----------------------------------------

TITLE: Creating Next.js App with Fauna Example (npm)
DESCRIPTION: Uses `create-next-app` to bootstrap a new Next.js application using the `with-fauna` example.  It installs all necessary dependencies and sets up the project structure. The new application will be named `with-fauna-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fauna/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-fauna with-fauna-app
```

----------------------------------------

TITLE: Create Next.js App with Ably Example (npm)
DESCRIPTION: This command uses the create-next-app tool with npm to bootstrap a new Next.js application using the 'with-ably' example.  It sets up a basic project structure with Ably integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-ably with-ably-app
```

----------------------------------------

TITLE: Creating Next.js app with GraphQL-React example using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the `with-graphql-react` example. It initializes a project named `with-graphql-react-app` with all necessary dependencies and configurations for GraphQL-React integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-react/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-graphql-react with-graphql-react-app
```

----------------------------------------

TITLE: Bootstrap Next.js Application using create-next-app
DESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js application using different package managers. It is essential for initializing the example project configured for Docker multi-environment setups. Dependencies include npm, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-docker-multi-env nextjs-docker-multi-env
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-docker-multi-env nextjs-docker-multi-env
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-docker-multi-env nextjs-docker-multi-env
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named 'with-i18n-next-intl-app' using the 'with-i18n-next-intl' example. It requires Node.js and pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-next-intl/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-i18n-next-intl with-i18n-next-intl-app
```

----------------------------------------

TITLE: Handling Circular References in getInitialProps
DESCRIPTION: Demonstrates the issue of circular references in Next.js getInitialProps method and provides guidance on how to properly serialize data for client-side hydration
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/circular-structure.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Problematic example with circular reference
getInitialProps(context) {
  const { req } = context;
  return { req }; // This will cause serialization error
}
```

LANGUAGE: javascript
CODE:
```
// Correct approach: Extract specific fields
getInitialProps(context) {
  const { req } = context;
  return { headers: req.headers }; // Only serialize needed data
}
```

----------------------------------------

TITLE: Bootstrap Electron App with Next.js Using Yarn
DESCRIPTION: The code snippet shows how to initialize a Next.js application tailored for Electron using Yarn's create command. Similar to npm, this command establishes the app's foundational structure for immediate development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-electron with-electron-app
```

----------------------------------------

TITLE: Executing withamp-to-config Codemod in Next.js
DESCRIPTION: This codemod transforms the withAmp HOC into Next.js 9 page configuration. It replaces the HOC usage with a config export for AMP pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
npx @next/codemod withamp-to-config
```

----------------------------------------

TITLE: Generating Post API URLs for Sitemap (PHP)
DESCRIPTION: This function generates an array of post URLs and their modification dates for sitemap generation. It retrieves post data using `WP_Query` based on user inputs provided by `wsra_get_user_inputs` function, and constructs the post URLs.  It constructs an array of urls that are relative to the homepage and also includes the posts modified date.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_14

LANGUAGE: PHP
CODE:
```
<?php
function wsra_generate_posts_api()
{
  [, $postArgs] = wsra_get_user_inputs();
  $postUrls = array();
  $query = new WP_Query($postArgs);

  while ($query->have_posts()) {
    $query->the_post();
    $uri = str_replace(home_url(), '', get_permalink());
    $tempArray = [
      'url' => $uri,
      'post_modified_date' => get_the_modified_date(),
    ];
    array_push($postUrls, $tempArray);
  }
  wp_reset_postdata();
  return array_merge($postUrls);
}

```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-next-page-transitions example. It utilizes pnpm's create command to set up the project structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-page-transitions/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-next-page-transitions with-next-page-transitions-app
```

----------------------------------------

TITLE: Installing Next.js 14 with Bun
DESCRIPTION: Command to upgrade Next.js to version 14 using Bun package manager. Includes installation of React 18 and ESLint configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-14.mdx#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
bun add next@next-14 react@18 react-dom@18 && bun add eslint-config-next@next-14 -D
```

----------------------------------------

TITLE: Defining MDX Page Header in Next.js
DESCRIPTION: A basic MDX page heading using markdown syntax, demonstrating the simplest form of MDX content in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/app-types/src/app/mdx-test/page.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# I'm a MDX page
```

----------------------------------------

TITLE: Setting headless REST preview link in WordPress (PHP)
DESCRIPTION: This code configures the REST API response to provide a preview link for draft and published posts, directing to the Next.js frontend. It uses the `rest_prepare_page` and `rest_prepare_post` filters to modify the 'link' field in the REST API response. The `HEADLESS_URL` constant must be defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_9

LANGUAGE: PHP
CODE:
```
<?php
add_filter( 'rest_prepare_page', 'set_headless_rest_preview_link', 10, 2 );
add_filter( 'rest_prepare_post', 'set_headless_rest_preview_link' , 10, 2 );
function set_headless_rest_preview_link( WP_REST_Response $response, WP_Post $post ): WP_REST_Response {
  // Check if the post status is 'draft' and set the preview link accordingly.
  if ( 'draft' === $post->post_status ) {
    $response->data['link'] = get_preview_post_link( $post );
    return $response;
  }

  // For published posts, modify the permalink to point to the frontend.
  if ( 'publish' === $post->post_status ) {

    // Get the post permalink.
    $permalink = get_permalink( $post );

    // Check if the permalink contains the site URL.
    if ( false !== stristr( $permalink, get_site_url() ) ) {

      $frontendUrl = HEADLESS_URL;

      // Replace the site URL with the frontend URL.
      $response->data['link'] = str_ireplace(
        get_site_url(),
        $frontendUrl,
        $permalink
      );
    }
  }

  return $response;
}

```

----------------------------------------

TITLE: Installing Next.js 14 with Yarn
DESCRIPTION: Command to upgrade Next.js to version 14 using Yarn package manager. Includes installation of React 18 and ESLint configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-14.mdx#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
yarn add next@next-14 react@18 react-dom@18 && yarn add eslint-config-next@next-14 -D
```

----------------------------------------

TITLE: Creating a Next.js app using Yarn
DESCRIPTION: This command initializes a new Next.js application named `api-routes-rest-app` using the `api-routes-rest` example. It leverages the `create next-app` command from Yarn to set up the project with the specified template, providing the foundation for a REST API using Next.js API routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-rest/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
yarn create next-app --example api-routes-rest api-routes-rest-app
```

----------------------------------------

TITLE: Implementing Title Tag in Next.js _app.js
DESCRIPTION: Demonstrates the correct way to implement a title tag in a Next.js application using next/head in _app.js. This approach ensures proper title updates across page renders.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-document-title.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import React from 'react'
import Head from 'next/head'

function MyApp({ Component, pageProps }) {
  return (
    <>
      <Head>
        <title>My new cool app</title>
      </Head>
      <Component {...pageProps} />
    </>
  )
}

export default MyApp
```

----------------------------------------

TITLE: Installing web-push globally using npm
DESCRIPTION: This command installs the web-push package globally using npm, which is required for generating VAPID keys.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
npm install -g web-push
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the react-remove-properties example. It clones the example and sets up a new project directory called react-remove-properties-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/react-remove-properties/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example react-remove-properties react-remove-properties-app
```

----------------------------------------

TITLE: Creating Next.js app with Yoga Design System using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the Yoga Design System example. It initializes a project named `with-yoga-app` using the `with-yoga` example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yoga/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-yoga with-yoga-app
```

----------------------------------------

TITLE: Creating Next.js app with three.js using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the three.js example. The `create next-app` command bootstraps the project, setting up the necessary files and dependencies. The example name (`with-three-js`) and application name (`with-three-js-app`) are passed as arguments.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-three-js/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-three-js with-three-js-app
```

----------------------------------------

TITLE: Creating Next.js app with rosetta example using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application based on the `with-i18n-rosetta` example. It utilizes yarn's create command to bootstrap a new project named `with-i18n-rosetta-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-rosetta/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-i18n-rosetta with-i18n-rosetta-app
```

----------------------------------------

TITLE: Creating Next.js app with styled-jsx using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application using the styled-jsx example. It leverages the create next app tool, setting up a project with the required dependencies and configurations for styled-jsx. The resulting application will be named 'with-styled-jsx-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-jsx/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-styled-jsx with-styled-jsx-app
```

----------------------------------------

TITLE: Initializing Next.js project with create-next-app (Yarn)
DESCRIPTION: This command initializes a new Next.js project using the `create-next-app` tool and the `with-mobx-state-tree` example. It uses Yarn to create a project named `with-mobx-state-tree-app` based on the provided example repository. This command sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx-state-tree/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mobx-state-tree with-mobx-state-tree-app
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application using the with-babel-macros example. It sets up the project with the required babel-macros configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-babel-macros/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-babel-macros with-babel-macros-app
```

----------------------------------------

TITLE: Example Next.js 12 Link Component - JSX
DESCRIPTION: This snippet shows the required structure for the Next.js Link component in version 12 and earlier, where an explicit `<a>` tag must be nested as a child to ensure linking functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
<Link href="/about">
  <a>About</a>
</Link>
```

----------------------------------------

TITLE: Updating Middleware Matcher in TypeScript
DESCRIPTION: This TypeScript snippet showcases how to format the matcher property in middleware configuration to avoid errors with negative lookahead regex. It follows the same correction approach as the custom route source.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-route-source.mdx#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
const config = {\n  matcher: "/feedback/((?!general).*)",\n}
```

----------------------------------------

TITLE: Replacing NextRequest Geo and IP Properties with @vercel/functions
DESCRIPTION: Codemod to replace 'geo' and 'ip' properties of NextRequest with corresponding @vercel/functions features.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_4

LANGUAGE: ts
CODE:
```
import type { NextRequest } from 'next/server'

export function GET(req: NextRequest) {
  const { geo, ip } = req
}
```

LANGUAGE: ts
CODE:
```
import type { NextRequest } from 'next/server'
import { geolocation, ipAddress } from '@vercel/functions'

export function GET(req: NextRequest) {
  const geo = geolocation(req)
  const ip = ipAddress(req)
}
```

----------------------------------------

TITLE: Using Alternative Variable Name Instead of Module
DESCRIPTION: Demonstrates the correct way to declare a module-like variable by using a different variable name to avoid conflicts with the reserved 'module' keyword
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-assign-module-variable.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let myModule = {...}
```

----------------------------------------

TITLE: Create Next.js app with Flow (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application with Flow, using the 'with-flow' example. It requires pnpm to be installed. The new application will be created in a directory named 'with-flow-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-flow/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-flow with-flow-app
```

----------------------------------------

TITLE: Creating Next.js App with remove-console Example (pnpm)
DESCRIPTION: This command uses `create next-app` with pnpm to create a new Next.js application based on the `remove-console` example. The new application will be named `remove-console-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/remove-console/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example remove-console remove-console-app
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app (npm)
DESCRIPTION: This command creates a new Next.js application using the `with-apivideo` example. It uses npm to execute the `create-next-app` command, scaffolding the project with the specified example and naming the new application `with-apivideo-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apivideo/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-apivideo with-apivideo-app
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app (npm)
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-algolia-react-instantsearch example.  It initializes a project with the specified example template and names the directory with-algolia-react-instantsearch-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-algolia-react-instantsearch/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

----------------------------------------

TITLE: Creating Next.js app with Stencil example using pnpm
DESCRIPTION: This command uses `pnpm` to create a new Next.js application based on the `with-stencil` example. It initializes a project named `with-stencil-app` using the specified example from the Next.js repository. It requires Node.js and pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-stencil with-stencil-app
```

----------------------------------------

TITLE: Incorrect AMP Bind Attribute Syntax
DESCRIPTION: Original problematic syntax that causes JSX parsing errors when using dynamic property binding in AMP components
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/amp-bind-jsx-alt.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
[prop]='something'
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-cookies-next example.  It initializes a new project directory named 'with-cookies-next-app' with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cookies-next/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-cookies-next with-cookies-next-app
```

----------------------------------------

TITLE: Initializing Next.js App with pnpm
DESCRIPTION: This command utilizes pnpm to set up a new Next.js application, incorporating the ReactMD and Typescript example. It offers an efficient method for project initialization.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-md-typescript/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-md-typescript with-react-md-typescript-app
```

----------------------------------------

TITLE: Creating a Next.js App using Tigris - Bash
DESCRIPTION: These snippets show the commands to create a new Next.js application using different package managers. They allow the user to bootstrap a new project with Tigris integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-tigris tigris-next-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-tigris tigris-next-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-tigris tigris-next-app
```

----------------------------------------

TITLE: Creating a Next.js App using Yarn
DESCRIPTION: This command uses `create-next-app` with Yarn to bootstrap a new Next.js application based on the `with-context-api` example. The new application will be named `with-context-api-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-context-api/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-context-api with-context-api-app
```

----------------------------------------

TITLE: Defining Post Frontmatter in YAML for Next.js
DESCRIPTION: This YAML frontmatter defines metadata for a Next.js post, including the content type, post title, and publication date. This metadata is typically used by Next.js to determine how to render and organize content pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/index.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
---
type: posts
title: Posts
date: 2021-03-18
---
```

----------------------------------------

TITLE: Implement Inline Styles React
DESCRIPTION: Apply styles directly to JSX elements using the `style` prop. The value is a JavaScript object where keys are camelCased CSS properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/css-in-js.mdx#_snippet_5

LANGUAGE: JSX
CODE:
```
function HiThere() {
  return <p style={{ color: 'red' }}>hi there</p>
}

export default HiThere
```

----------------------------------------

TITLE: Configuring SVG Support in Next.js
DESCRIPTION: This code snippet demonstrates how to enable SVG support in Next.js by setting the `dangerouslyAllowSVG` option to `true` in `next.config.js`. It also shows how to configure the `contentDispositionType` to `attachment` and set a `contentSecurityPolicy` for added security when serving SVG images. The `contentSecurityPolicy` helps to prevent scripts embedded in the image from executing, and the `contentDispositionType` forces the browser to download the image.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_18

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  images: {
    dangerouslyAllowSVG: true,
    contentDispositionType: 'attachment',
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
  },
}
```

----------------------------------------

TITLE: Configuring Image Loader and Path in Next.js
DESCRIPTION: This code snippet shows how to configure a custom image loader and path prefix in `next.config.js`.  This allows using a cloud provider to optimize images and relative URLs for the image `src` property. It defines the `loader` (e.g., 'imgix') and the base `path` for the images.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    loader: 'imgix',
    path: 'https://example.com/myaccount/',
  },
}
```

----------------------------------------

TITLE: Disabling Static Image Imports in Next.js Config (JavaScript)
DESCRIPTION: This configuration snippet for `next.config.js` provides an alternative solution to the `_document.js` image import error. By setting `images.disableStaticImages` to `true`, it disables Next.js's built-in static image loader, which can prevent the error if you are not relying on `next/image` for importing static images.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/custom-document-image-import.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    disableStaticImages: true,
  },
}
```

----------------------------------------

TITLE: Enabling HTTPS with Custom Certificates for Next.js Dev Server (Bash)
DESCRIPTION: This command starts the Next.js development server (`next dev`) with HTTPS enabled, using specified custom certificate files (`--experimental-https-cert`) and key files (`--experimental-https-key`). An optional CA certificate can also be provided via `--experimental-https-ca`. This is intended for development environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
next dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem
```

----------------------------------------

TITLE: Configuring Babel Presets for SWC Fallback in Next.js
DESCRIPTION: This code snippet provides a Babel configuration to be used as a fallback when SWC fails to load. It is particularly useful when SWC compatibility issues arise. The configuration specifies 'next/babel' as a preset to ensure that Next.js specific functionalities are properly handled.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/failed-loading-swc.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "presets": ["next/babel"]
}
```

----------------------------------------

TITLE: Installing Dependencies (npm)
DESCRIPTION: These commands install the project dependencies using npm and then start the development server.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Running Tests with pnpm
DESCRIPTION: This command runs the Vitest tests in the project using pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Installing yarn dependencies - Bash
DESCRIPTION: This command installs the yarn dependencies for the project. It uses the `yarn` command to install all the dependencies listed in the `package.json` or `yarn.lock` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
$  yarn
```

----------------------------------------

TITLE: Installing Dependencies and Running in Development Mode (yarn)
DESCRIPTION: These commands install the required dependencies using Yarn and starts the Next.js development server. The development server runs on http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Identifying React StrictMode Elements
DESCRIPTION: Shows how to check if an element is a React StrictMode component using isStrictMode and how to verify its type using typeOf against the ReactIs.StrictMode constant.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import React from "react";
import * as ReactIs from 'react-is';

ReactIs.isStrictMode(<React.StrictMode />); // true
ReactIs.typeOf(<React.StrictMode />) === ReactIs.StrictMode; // true
```

----------------------------------------

TITLE: Import Button with relative path - TypeScript
DESCRIPTION: This snippet illustrates a relative import statement, which can become cumbersome in large projects due to long relative paths.  This is the problem absolute imports solve.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import Button from "../../../components/button";
```

----------------------------------------

TITLE: API Routes for Tigris Access - TypeScript
DESCRIPTION: This section describes the API routes defined in a Next.js application for interacting with the Tigris collection. It includes file references and endpoint details for performing CRUD operations on the 'items' collection.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
// pages/api/items/index.ts
// - GET /api/items to get an array of to-do items as Array<TodoItem>
// - POST /api/items to add an item to the list
```

LANGUAGE: typescript
CODE:
```
// pages/api/items/search.ts
// - GET /api/items/search?q=query to find and return items matching the given query
```

LANGUAGE: typescript
CODE:
```
// pages/api/item/[id].ts
// - GET /api/item/{id} to fetch an item
// - PUT /api/item/{id} to update the given item
// - DELETE /api/item/[id] to delete an item
```

----------------------------------------

TITLE: Bootstrap Next.js Example with Electron
DESCRIPTION: This code shows how to bootstrap a Next.js application configured for use with Electron using different package managers such as npm, Yarn, and pnpm. These commands set up a new project that incorporates the example of Next.js with Electron support.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron-typescript/README.md#2025-04-21_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example with-electron-typescript with-electron-typescript-app
```

LANGUAGE: Bash
CODE:
```
yarn create next-app --example with-electron-typescript with-electron-typescript-app
```

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example with-electron-typescript with-electron-typescript-app
```

----------------------------------------

TITLE: Importing Modules from URLs
DESCRIPTION: This snippet demonstrates how to import specific named exports directly from an external URL in a Next.js component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { a, b, c } from 'https://example.com/assets/some/module.js'
```

----------------------------------------

TITLE: Disabling Static Image Imports in Next.js Configuration
DESCRIPTION: Configuration to disable the new static image import feature in Next.js 11 if using custom image optimization packages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    disableStaticImages: true,
  },
}
```

----------------------------------------

TITLE: Creating Next.js App with Convex Example (pnpm)
DESCRIPTION: This command utilizes pnpm to create a new Next.js application based on the Convex example. It configures the project for Convex integration, and necessitates pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example convex convex-app
```

----------------------------------------

TITLE: Enabling Trailing Slashes in Next.js Configuration
DESCRIPTION: This code snippet shows how to enable trailing slashes for exported pages in the next.config.js file. This configuration changes the export behavior to use index.html files for each route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/exportPathMap.mdx#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  trailingSlash: true,
}
```

----------------------------------------

TITLE: Create Next.js App with Meilisearch Example (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-meilisearch example. It sets up the project with the required dependencies and configurations for Meilisearch.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-meilisearch/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-meilisearch with-meilisearch-app
```

----------------------------------------

TITLE: Defining Global CSS Styles in Next.js
DESCRIPTION: This CSS snippet defines global styles for the body element, including font family, padding, max-width, and margin. It's intended to be used as a shared stylesheet for all pages in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-styled-jsx-in-document.mdx#2025-04-21_snippet_0

LANGUAGE: css
CODE:
```
body {
  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
    'Arial', sans-serif;
  padding: 20px 20px 60px;
  max-width: 680px;
  margin: 0 auto;
}
```

----------------------------------------

TITLE: CSS Background Image from URL
DESCRIPTION: This CSS snippet demonstrates setting a background image using a URL from an external source, which can be applied to a class.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_4

LANGUAGE: css
CODE:
```
.className {
  background: url('https://example.com/assets/hero.jpg');
}
```

----------------------------------------

TITLE: Importing and Using Inter Font in Next.js (_app.js - Pages Router)
DESCRIPTION: This code snippet demonstrates how to import the Inter font from `next/font/google` and apply it to the `_app.js` file within the `/pages` directory in a Next.js application. It uses the Pages Router. The font is applied to the main component, affecting all pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/06-optimizing/03-fonts.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({ subsets: ['latin'] })

export default function MyApp({ Component, pageProps }) {
  return (
    <main className={inter.className}>
      <Component {...pageProps} />
    </main>
  )
}
```

----------------------------------------

TITLE: Creating Movie Graph Nodes and Relationships
DESCRIPTION: Cypher queries for inserting movie, person, and relationship data into a Neo4j graph database. Includes multiple movie datasets with actors, directors, and their respective roles.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/movie-sample.md#2025-04-21_snippet_2

LANGUAGE: cypher
CODE:
```
CREATE (DavidM:Person {name:'David Morse', born:1953})
```

LANGUAGE: cypher
CODE:
```
CREATE (TheGreenMile:Movie {title:'The Green Mile', released:1999, tagline:'Walk a mile you'll never forget.'})
```

LANGUAGE: cypher
CODE:
```
CREATE
(TomH)-[:ACTED_IN {roles:['Paul Edgecomb']}]->(TheGreenMile)
```

----------------------------------------

TITLE: VSCode Configuration for MDX Preview
DESCRIPTION: This snippet configures VSCode to recognize `.mdx` files as markdown, enabling the built-in markdown previewer to render MDX content locally. This allows contributors to preview changes before submitting them.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "files.associations": {
    "*.mdx": "markdown"
  }
}
```

----------------------------------------

TITLE: Configuring Allowed Development Origins in Next.js
DESCRIPTION: Demonstrates how to configure additional origins in the `next.config.js` file using the `allowedDevOrigins` option. This allows requests from specified origins during development mode, supporting both exact and wildcard domain matching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/allowedDevOrigins.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  allowedDevOrigins: ['local-origin.dev', '*.local-origin.dev'],
}
```

----------------------------------------

TITLE: Creating Next.js app with Mantine using npx
DESCRIPTION: This command uses npx to create a new Next.js application pre-configured with the Mantine example. It leverages the create-next-app tool to scaffold the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mantine/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mantine with-mantine-app
```

----------------------------------------

TITLE: Creating Next.js App with Cloudinary Example - Bash
DESCRIPTION: This snippet demonstrates how to use the command line to create a new Next.js application based on the Cloudinary example. It utilizes package managers like npm, Yarn, or pnpm to initialize the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cloudinary/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-cloudinary with-cloudinary-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-cloudinary with-cloudinary-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-cloudinary with-cloudinary-app
```

----------------------------------------

TITLE: Using withRouter in Next.js React Component
DESCRIPTION: This code snippet demonstrates how to use the 'withRouter' Higher-Order Component in Next.js to access router information. It imports 'withRouter', creates a React component that logs the router object and renders the pathname, and exports the component wrapped with 'withRouter'.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/url-deprecated.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { withRouter } from 'next/router'

class Page extends React.Component {
  render() {
    const { router } = this.props
    console.log(router)
    return <div>{router.pathname}</div>
  }
}

export default withRouter(Page)
```

----------------------------------------

TITLE: Creating a Next.js App with Magic Example
DESCRIPTION: These commands use create-next-app to bootstrap a new Next.js project using the with-magic example. It demonstrates how to initialize the project with npm, yarn, and pnpm package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-magic with-magic-app
```

----------------------------------------

TITLE: Structuring Pages Router Directory in Next.js
DESCRIPTION: Demonstrates the correct file structure for a Next.js project using the Pages Router. It shows the separation of components, pages, and styles directories.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
  .
  ├── components/
  │   └── Header.js
  ├── pages/
  │   ├── about.js
  │   └── index.js
  └── styles/
      └── globals.css
```

----------------------------------------

TITLE: Creating a Next.js app with Turbopack loaders example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-turbopack-loaders' example. It sets up a new project with the necessary configurations for using Turbopack loaders.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-turbopack-loaders with-turbopack-loaders-app
```

----------------------------------------

TITLE: Importing and Using Connection in Next.js Page (JavaScript)
DESCRIPTION: This snippet shows how to utilize the `connection` function within a JavaScript file in a Next.js application, enabling dynamic content changes upon user requests and leveraging APIs like `Math.random()` for different rendering outputs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/connection.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { connection } from 'next/server'\n\nexport default async function Page() {\n  await connection()\n  // Everything below will be excluded from prerendering\n  const rand = Math.random()\n  return <span>{rand}</span>\n}
```

----------------------------------------

TITLE: Creating Next.js app with Jotai example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the Jotai example. It executes the create next-app package and clones the specified Jotai example into a new directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jotai/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-jotai with-jotai-app
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the 'with-hls-js' example.  It utilizes the create-next-app tool and specifies the example and the application name.  The application will be created in a directory named 'with-hls-js-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-hls-js/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-hls-js with-hls-js-app
```

----------------------------------------

TITLE: Create Next.js app with Slate.js example using pnpm
DESCRIPTION: This command uses pnpm to generate a Next.js application called 'with-slate-app' based on the 'with-slate' example. The application will come pre-configured with Slate.js dependencies and setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-slate/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-slate with-slate-app
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command utilizes Yarn to create a new Next.js application from the 'with-mobx' example. This approach sets up the project with pre-configured dependencies and files, streamlining the integration of MobX with Next.js. The `with-mobx-app` argument defines the directory name for the created application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mobx with-mobx-app
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app (pnpm)
DESCRIPTION: This command creates a new Next.js application using the `with-apivideo` example. It uses pnpm to execute the `create-next-app` command, scaffolding the project with the specified example and naming the new application `with-apivideo-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apivideo/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-apivideo with-apivideo-app
```

----------------------------------------

TITLE: Using 'use memo' Directive in React Component (TypeScript)
DESCRIPTION: Example of using the 'use memo' directive in a React component to opt-in for compilation when in annotation mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
export default function Page() {
  'use memo'
  // ...
}
```

----------------------------------------

TITLE: Copying environment variables file
DESCRIPTION: This command copies the example environment variable file `.env.local.example` to `.env.local`. The `.env.local` file is intended to hold environment-specific configurations, and is often ignored by Git to avoid accidentally committing sensitive information.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Update TypeScript Types for GROQ Queries
DESCRIPTION: This command updates TypeScript types in a Next.js project whenever a GROQ query is modified. It relies on the project having npm scripts configured with 'typegen'. The command updates types based on current query structures. Outputs updated type definitions for the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm run typegen
```

----------------------------------------

TITLE: Nginx Configuration for Static Export
DESCRIPTION: This Nginx configuration demonstrates how to serve a Next.js static export from the `/out` directory. It includes rewrites for handling requests to different routes and sets up an error page for 404 errors.  It assumes `trailingSlash: false`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_15

LANGUAGE: nginx
CODE:
```
server {
  listen 80;
  server_name acme.com;

  root /var/www/out;

  location / {
      try_files $uri $uri.html $uri/ =404;
  }

  # This is necessary when `trailingSlash: false`.
  # You can omit this when `trailingSlash: true`.
  location /blog/ {
      rewrite ^/blog/(.*)$ /blog/$1.html break;
  }

  error_page 404 /404.html;
  location = /404.html {
      internal;
  }
}
```

----------------------------------------

TITLE: Fetching CMS data with getStaticProps (TypeScript)
DESCRIPTION: This snippet shows an example of fetching data from a CMS using `getStaticProps` in a Next.js page. It fetches a list of blog posts and passes them as props to the `Blog` component. This is a typical use case for static site generation with data from a headless CMS.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
// posts will be populated at build time by getStaticProps()
export default function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li>{post.title}</li>
      ))}
    </ul>
  )
}

// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getStaticProps() {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts,
    },
  }
}
```

----------------------------------------

TITLE: Installing Next.js Canary Version
DESCRIPTION: Updates your Next.js installation to the canary version, which includes the latest experimental features that are not yet in a stable release.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-upgrading.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm i next@canary
```

----------------------------------------

TITLE: Modifying REST API URL to home URL in WordPress (PHP)
DESCRIPTION: This code snippet modifies the REST API URL to use the home URL as the base URL instead of the site URL. This ensures consistency between the WordPress backend and the Next.js frontend when making API requests.  It uses the `rest_url` filter to replace the `site_url` with the `home_url` in the REST API URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_7

LANGUAGE: PHP
CODE:
```
<?php
/**
 * Changes the REST API root URL to use the home URL as the base.
 *
 * @param string $url The complete URL including scheme and path.
 * @return string The REST API root URL.
 */
add_filter('rest_url', 'home_url_as_api_url');
function home_url_as_api_url($url)
{
  $url = str_replace(home_url(), site_url(), $url);
  return $url;
}

```

----------------------------------------

TITLE: Configuring optimizePackageImports in Next.js
DESCRIPTION: Configuration example showing how to add packages to the optimizePackageImports experimental feature in next.config.js. This optimization ensures only used modules are loaded from large packages while maintaining the convenience of named exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/optimizePackageImports.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  experimental: {
    optimizePackageImports: ['package-name'],
  },
}
```

----------------------------------------

TITLE: Configuring staleTimes in Next.js next.config.js (JavaScript)
DESCRIPTION: This snippet shows how to enable the experimental `staleTimes` feature in your `next.config.js` file. It sets the cache invalidation times (in seconds) for dynamic and static page segments within the client-side router cache. The `dynamic` property applies to content not statically generated or fully prefetched, while `static` applies to statically generated or prefetched content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/staleTimes.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    staleTimes: {
      dynamic: 30,
      static: 180,
    },
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Creating Next.js app with filbert-js example using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application from the filbert-js example. Yarn manages dependencies and executes the create-next-app script.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-filbert/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-filbert with-filbert-app
```

----------------------------------------

TITLE: Customizing Bundle Analyzer Options
DESCRIPTION: Configuration to disable automatic opening of the analyzer report in the default browser
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-bundle-analyzer/readme.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
  openAnalyzer: false,
})
module.exports = withBundleAnalyzer({})
```

----------------------------------------

TITLE: Output HTML with Exported Content Type - HTML
DESCRIPTION: Displays the resulting HTML <link> tag in the document's <head> when the contentType metadata is exported from a generated icon file. The type attribute is populated based on the exported value.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_13

LANGUAGE: html
CODE:
```
<link rel="icon" type="image/png" />
```

----------------------------------------

TITLE: Updating React Packages to Latest Version using Yarn
DESCRIPTION: This command updates the React and React DOM packages to the latest versions using Yarn.  It performs the same function as the npm command, utilizing the Yarn package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
yarn add react@latest react-dom@latest
```

----------------------------------------

TITLE: Dynamic Require Call in JavaScript
DESCRIPTION: This snippet shows a dynamic 'require' call where the module path is determined by a variable. This pattern is often flagged by static analyzers like Turbopack because the required module cannot be determined at build time, impacting bundling and static security analysis.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1002__ require(FreeVar(Math)[__quo__r-899e87.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
require(unknown)
```

----------------------------------------

TITLE: Creating Next.js App with Realm-Web Example using npx
DESCRIPTION: This command uses `create-next-app` with `npx` to bootstrap a new Next.js application using the `with-realm-web` example. It creates a new directory named `with-realm-web-app` containing the initialized project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-realm-web/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-realm-web with-realm-web-app
```

----------------------------------------

TITLE: Watching URL Changes with componentDidUpdate in Next.js
DESCRIPTION: This example demonstrates how to watch for URL changes using the componentDidUpdate lifecycle method in a class component when using shallow routing in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
componentDidUpdate(prevProps) {
  const { pathname, query } = this.props.router
  // verify props have changed to avoid an infinite loop
  if (query.counter !== prevProps.router.query.counter) {
    // fetch data based on the new query
  }
}
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command uses `create next-app` with pnpm to bootstrap a Next.js application using the `with-linaria` example. The new application will be named `with-linaria-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-linaria/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-linaria with-linaria-app
```

----------------------------------------

TITLE: Creating Next.js app with Rebass using npx
DESCRIPTION: This command utilizes npx to create a new Next.js application integrated with Rebass. It specifies the "with-rebass" example and names the new application "with-rebass-app".
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rebass/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-rebass with-rebass-app
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the cms-dotcms example. It initializes the project in a directory named cms-dotcms-app. It requires Node.js and pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-dotcms cms-dotcms-app
```

----------------------------------------

TITLE: Creating a Next.js app with Turbopack loaders example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the 'with-turbopack-loaders' example. It sets up a new project with the necessary configurations for using Turbopack loaders.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-turbopack-loaders with-turbopack-loaders-app
```

----------------------------------------

TITLE: Creating Next.js app with Goober using npm
DESCRIPTION: This command uses npm to create a new Next.js application with the Goober example. It executes create-next-app with the specified example and project name. The resulting application will be named 'with-goober-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-goober/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-goober with-goober-app
```

----------------------------------------

TITLE: Creating Next.js app with Fela using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application using the 'with-fela' example. It initializes a project with the Fela styling solution.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fela/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-fela with-fela-app
```

----------------------------------------

TITLE: Creating Next.js App with Reflux Example (Yarn)
DESCRIPTION: This command uses `create next-app` with Yarn to create a new Next.js application based on the `with-reflux` example. It initializes a new project directory named `with-reflux-app` with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflux/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-reflux with-reflux-app
```

----------------------------------------

TITLE: Configuring Next.js with Experimental Options in JavaScript
DESCRIPTION: This snippet demonstrates how to configure Next.js to enable the experimental authInterrupts option using JavaScript. This configuration is essential for employing the unauthorized function in the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  experimental: {
    authInterrupts: true,
  },
}
```

----------------------------------------

TITLE: Upgrading Next.js to Version 13 with yarn
DESCRIPTION: Command to upgrade Next.js to version 13 using yarn package manager. Also updates React and React DOM to their latest versions, along with the Next.js ESLint configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn add next@13 react@latest react-dom@latest eslint-config-next@13
```

----------------------------------------

TITLE: Configuring Server Components HMR Cache in TypeScript
DESCRIPTION: Configuration example showing how to disable the server components HMR cache using TypeScript in next.config.ts. The serverComponentsHmrCache option is set under the experimental configuration object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/serverComponentsHmrCache.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    serverComponentsHmrCache: false, // defaults to true
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Handling Redirects in getStaticPaths (JavaScript)
DESCRIPTION: This code snippet demonstrates how to handle redirects within the `getStaticPaths` function in a Next.js page. It fetches data, and if the data is not available (e.g., the API returns an error), it returns a redirect object to navigate the user to a different page (e.g., a 404 page). The `permanent` property specifies whether the redirect is permanent or temporary, and `destination` specifies the target URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-redirect-gssp.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
export async function getStaticPaths() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()

  if (!repo) {
    return {
      redirect: {
        permanent: false, // or true
        destination: '/404',
      },
    }
  }

  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Setting Environment Variables in .env.local (Bash)
DESCRIPTION: This shows an example of what the `.env.local` file should look like, populated with the required environment variables for connecting to the TakeShape CMS and enabling preview mode. It assumes you have already copied the `.env.local.example` file to `.env.local`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
TAKESHAPE_PROJECT_ID=...
TAKESHAPE_API_KEY=...
TAKESHAPE_PREVIEW_SECRET=...
```

----------------------------------------

TITLE: Transforming AMP Page with withamp-to-config Codemod
DESCRIPTION: This example shows how the withamp-to-config codemod transforms an AMP page using the withAmp HOC to use the Next.js 9 page configuration format.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_16

LANGUAGE: js
CODE:
```
import { withAmp } from 'next/amp'

function Home() {
  return <h1>My AMP Page</h1>
}

export default withAmp(Home)
```

LANGUAGE: js
CODE:
```
export default function Home() {
  return <h1>My AMP Page</h1>
}

export const config = {
  amp: true,
}
```

----------------------------------------

TITLE: Using onLoad Callback with Next.js Image Component
DESCRIPTION: Example of using the onLoad callback with Next.js Image component. This callback is triggered once the image is completely loaded and the placeholder is removed, providing access to the event object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_9

LANGUAGE: jsx
CODE:
```
<Image onLoad={(e) => console.log(e.target.naturalWidth)} />
```

----------------------------------------

TITLE: Initializing Next.js App with Orbit-components using npm
DESCRIPTION: This command uses npm to create a new Next.js application bootstrapped with the Orbit-components example. It utilizes the create-next-app tool to set up the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-orbit-components/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-orbit-components with-orbit-components-app
```

----------------------------------------

TITLE: Import Module: ReflectAdapter - Next.js - JS
DESCRIPTION: Imports the module located at './adapters/reflect'. This module is expected to export the `ReflectAdapter`, likely providing an interface or utilities based on the JavaScript `Reflect` API.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import { ReflectAdapter } from './adapters/reflect';
```

----------------------------------------

TITLE: Importing RouteKind Enum JS
DESCRIPTION: Imports the `RouteKind` enum from an internal Next.js module file. This import is hoisted and has side effects during module loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { RouteKind } from '../../server/future/route-kind';

```

----------------------------------------

TITLE: Creating Next.js App with ESLint using npx
DESCRIPTION: This command uses npx to create a new Next.js application named 'with-eslint-app' with ESLint pre-configured. It uses the 'with-eslint' example from the create-next-app tool.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-eslint/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-eslint with-eslint-app
```

----------------------------------------

TITLE: Turbopack Internal Import - Part 10 - JavaScript
DESCRIPTION: Imports another specific Turbopack part using the `assert` syntax. This is an internal module bundling mechanism.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_36

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 9
};
```

----------------------------------------

TITLE: Referencing Next.js SWC Windows x64 MSVC Package in Markdown
DESCRIPTION: Shows the reference to the Windows x64 MSVC binary package for the Next.js SWC compiler. This package contains platform-specific binaries compiled for x86_64-pc-windows-msvc architecture.
SOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/win32-x64-msvc/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
@next/swc-win32-x64-msvc
```

----------------------------------------

TITLE: Analyzing Export Star Limitation in CommonJS
DESCRIPTION: Warning about using export * with a CommonJS module that has runtime-only exports, suggesting manual export listing or ESM rewrite
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/export-alls/cjs-script/issues/unexpected export __star__-13c450.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export * from "./exported.cjs"
```

----------------------------------------

TITLE: Creating Next.js app with Yoga Design System using npm
DESCRIPTION: This command uses npm to create a new Next.js application with the Yoga Design System example. It initializes a project named `with-yoga-app` using the `with-yoga` example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yoga/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-yoga with-yoga-app
```

----------------------------------------

TITLE: Handling Dynamic Route Segments in Next.js Route Handlers
DESCRIPTION: Example of handling dynamic route segments in a Route Handler. This demonstrates how to access dynamic parameters in both TypeScript and JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
export async function GET(
  request: Request,
  { params }: { params: Promise<{ slug: string }> }
) {
  const { slug } = await params // 'a', 'b', or 'c'
}
```

LANGUAGE: javascript
CODE:
```
export async function GET(request, { params }) {
  const { slug } = await params // 'a', 'b', or 'c'
}
```

----------------------------------------

TITLE: Creating Next.js App with Reflux Example (pnpm)
DESCRIPTION: This command uses `create next-app` with pnpm to create a new Next.js application based on the `with-reflux` example. It initializes a new project directory named `with-reflux-app` with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflux/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-reflux with-reflux-app
```

----------------------------------------

TITLE: Using Skypack to Import a Package
DESCRIPTION: This snippet illustrates how to use Skypack to import a package and invoke it within a React component using the `useEffect` hook.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/urlImports.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import confetti from 'https://cdn.skypack.dev/canvas-confetti'
import { useEffect } from 'react'

export default () => {
  useEffect(() => {
    confetti()
  })
  return <p>Hello</p>
}
```

----------------------------------------

TITLE: Cloning and Installing Next.js Project - Bash
DESCRIPTION: This snippet demonstrates how to clone the ButterCMS Next.js starter project from GitHub and install the necessary dependencies using npm or yarn. Prerequisites include having Git and either npm or yarn installed. The commands set up the local environment for further development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/ButterCMS/nextjs-starter-buttercms.git
cd nextjs-starter-buttercms
npm install # or yarn install
```

----------------------------------------

TITLE: Run Relay compiler (npm)
DESCRIPTION: This command uses npm to execute the 'relay' script defined in the project's package.json. The purpose is to perform Relay ahead-of-time compilation, which is required after any edits to components that query data with Relay. It ensures optimal performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm run relay
```

----------------------------------------

TITLE: Initializing Next.js app with React Toolbox (Yarn)
DESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with the React Toolbox example. It utilizes Yarn as the package manager. This command generates the necessary project files and sets up the environment for the example application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-toolbox/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-toolbox with-react-toolbox-app
```

----------------------------------------

TITLE: Basic Module Import Example - JavaScript
DESCRIPTION: Example showing how to import the SWR package, which needs to be installed via npm or yarn first.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import useSWR from 'swr'
```

----------------------------------------

TITLE: Javascript Module Part 7 (prod)
DESCRIPTION: Part 7 of the production build. Exports `b` and `a` from their respective parts.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_26

LANGUAGE: javascript
CODE:
```
export { b } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export b"
};
export { a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export a"
};
```

----------------------------------------

TITLE: Incrementing Variable x by 1 in Javascript
DESCRIPTION: This snippet increments the value of the variable 'x' by 1 using the addition assignment operator. This is a common arithmetic operation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
x = x + 1;
```

----------------------------------------

TITLE: Inspecting Next.js Page Props Using Browser DevTools
DESCRIPTION: Command to inspect the page props data passed to a Next.js page by parsing the __NEXT_DATA__ element content in browser developer tools.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/large-page-data.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
JSON.parse(document.getElementById("__NEXT_DATA__").textContent)
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-portals example. It specifies the example and the application name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-portals with-portals-app
```

----------------------------------------

TITLE: Javascript Module Part 3
DESCRIPTION: This code snippet represents part 3 of a JavaScript module. It imports `a` as `e` from a previous module and exports it as `a`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
import { e as a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
export { a };
```

----------------------------------------

TITLE: Creating Next.js App with HTTP2 Example using Yarn
DESCRIPTION: This command sets up a new Next.js application with the HTTP2 example. Yarn must be installed as the package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-http2 with-http2-app
```

----------------------------------------

TITLE: Using worker Strategy (Pages Router, JSX)
DESCRIPTION: This code snippet demonstrates using the `worker` strategy with the `Script` component in a Next.js application using the Pages Router. It offloads the script to a web worker to free up the main thread. Note: This strategy is experimental and requires enabling `nextScriptWorkers` in `next.config.js`. It only currently works in the `pages/` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function Home() {
  return (
    <>
      <Script src="https://example.com/script.js" strategy="worker" />
    </>
  )
}
```

----------------------------------------

TITLE: Compiling TypeScript Declaration Files
DESCRIPTION: Command to compile declaration files from TypeScript, which needs to be run periodically if types get outdated during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
pnpm types
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Yarn
DESCRIPTION: This snippet demonstrates how to bootstrap a Next.js application using the create-next-app command with Yarn. It sets up the app with the Docker Compose example provided.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-docker-compose with-docker-compose-app
```

----------------------------------------

TITLE: Installing Next.js Dependencies
DESCRIPTION: Command to install all required dependencies for Next.js development using pnpm package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Starting Next.js development server using bun
DESCRIPTION: This command starts the Next.js development server using bun. It runs the "dev" script defined in the package.json file, which typically starts the server on localhost:3000. Bun must be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
bun dev
```

----------------------------------------

TITLE: Create Next.js app with MSW example using yarn
DESCRIPTION: This command creates a new Next.js application using the `with-msw` example. It bootstraps a project with Mock Service Worker already configured for API mocking using yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-msw with-msw-app
```

----------------------------------------

TITLE: Creating a Next.js App with Cosmic Example
DESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js application using the `cms-cosmic` example.  The commands are shown for npm, yarn, and pnpm. Choose the package manager you prefer.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-cosmic cms-cosmic-app
```

----------------------------------------

TITLE: Initialize Next.js App with Plasmic Example (npm)
DESCRIPTION: This command uses the `create-next-app` tool with npm to bootstrap a new Next.js application using the `cms-plasmic` example. It creates a new directory named `cms-plasmic-app` containing the project files. Requires npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-plasmic cms-plasmic-app
```

----------------------------------------

TITLE: Defining Row Gap Style Function in JavaScript
DESCRIPTION: Defines the 'rowGap' style function, similar to 'gap' and 'columnGap'. It handles the 'rowGap' prop, transforms the value, and applies the style responsively. Returns a CSS style object for 'rowGap' or null.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_11

LANGUAGE: js
CODE:
```
export const rowGap = (props)=>{
    if (props.rowGap !== undefined && props.rowGap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
        const styleFromPropValue = (propValue)=>({ rowGap: getValue(transformer, propValue) });
        return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
};
```

----------------------------------------

TITLE: Removing <a> Tags from Link Components
DESCRIPTION: Codemod to remove <a> tags inside Link Components or add a legacyBehavior prop to Links that cannot be auto-fixed in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_9

LANGUAGE: jsx
CODE:
```
<Link href="/about">
  <a>About</a>
</Link>
// transforms into
<Link href="/about">
  About
</Link>

<Link href="/about">
  <a onClick={() => console.log('clicked')}>About</a>
</Link>
// transforms into
<Link href="/about" onClick={() => console.log('clicked')}>
  About
</Link>
```

LANGUAGE: jsx
CODE:
```
const Component = () => <a>About</a>

<Link href="/about">
  <Component />
</Link>
// becomes
<Link href="/about" legacyBehavior>
  <Component />
</Link>
```

----------------------------------------

TITLE: Installing Playwright test
DESCRIPTION: This command installs the `@playwright/test` package as a development dependency.  Playwright test is used for end-to-end testing and provides the necessary APIs for writing tests and interacting with the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
npm install -D @playwright/test
```

----------------------------------------

TITLE: Transforming Page Component with url-to-withrouter Codemod
DESCRIPTION: This example demonstrates how the url-to-withrouter codemod transforms a page component using the deprecated url property to use withRouter and access the router property.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_18

LANGUAGE: js
CODE:
```
import React from 'react'
export default class extends React.Component {
  render() {
    const { pathname } = this.props.url
    return <div>Current pathname: {pathname}</div>
  }
}
```

LANGUAGE: js
CODE:
```
import React from 'react'
import { withRouter } from 'next/router'
export default withRouter(
  class extends React.Component {
    render() {
      const { pathname } = this.props.router
      return <div>Current pathname: {pathname}</div>
    }
  }
)
```

----------------------------------------

TITLE: Correctly Placing style jsx in Next.js (After) - JSX
DESCRIPTION: This snippet shows the corrected code where both the scoped <style jsx> tag and the global <style global jsx> tag are placed directly within the root <div> element of the component's return value. This adheres to the styled-jsx requirement for styles to be at the root scope, resolving the nesting error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/nested-styled-jsx-tags.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
const Component = () => (
  <div>
    <p>Hello world</p>
    <style jsx>{`
      p {
        color: white;
      }
    `}</style>
    <style global jsx>{`
      body {
        background: black;
      }
    `}</style>
  </div>
)
```

----------------------------------------

TITLE: Configuring Legacy Decorators in Next.js Compiler
DESCRIPTION: This snippet allows you to set legacy decorators as an experimental feature for compatibility with older libraries in Next.js. This option is included to aid in the transition of existing applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
{
  "compilerOptions": {
    "experimentalDecorators": true
  }
}
```

----------------------------------------

TITLE: Installing Dependencies and Running Next.js (Yarn)
DESCRIPTION: These commands install the necessary dependencies for the Next.js application using Yarn and then start the development server. The application will be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Creating Next.js app with Fela using npx
DESCRIPTION: This command utilizes npx to create a new Next.js application using the 'with-fela' example. It bootstraps the project, setting up the necessary files and configurations for Fela integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fela/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-fela with-fela-app
```

----------------------------------------

TITLE: Importing runtime-specific code (TypeScript)
DESCRIPTION: This code snippet demonstrates conditionally importing code based on the Next.js runtime environment (Node.js or Edge). It uses the `NEXT_RUNTIME` environment variable to determine the current runtime and imports the corresponding instrumentation file. The files 'instrumentation-node' and 'instrumentation-edge' are assumed to contain runtime-specific instrumentation logic.  This is done within the `register` function in `instrumentation.ts`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/instrumentation.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    await import('./instrumentation-node')
  }

  if (process.env.NEXT_RUNTIME === 'edge') {
    await import('./instrumentation-edge')
  }
}
```

----------------------------------------

TITLE: Run Next.js Build with Memory Usage Debugging
DESCRIPTION: This snippet shows how to run the Next.js build command with the `--experimental-debug-memory-usage` flag. This mode prints out continuous information about memory usage during the build process, including heap usage and garbage collection statistics. Heap snapshots are automatically taken when memory usage approaches the configured limit.  Available starting in `14.2.0`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/memory-usage.mdx#_snippet_1



----------------------------------------

TITLE: Creating Next.js App with OpenTelemetry example using pnpm
DESCRIPTION: This command initializes a new Next.js application using the `with-opentelemetry` example from the `create-next-app` tool, but uses pnpm as the package manager. It downloads the necessary files and sets up the project with OpenTelemetry instrumentation. The resulting application directory will be named `with-opentelemetry-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-opentelemetry/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-opentelemetry with-opentelemetry-app
```

----------------------------------------

TITLE: Creating a Next.js App with Cosmic Example
DESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js application using the `cms-cosmic` example.  The commands are shown for npm, yarn, and pnpm. Choose the package manager you prefer.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-cosmic cms-cosmic-app
```

----------------------------------------

TITLE: Running blog app with pnpm
DESCRIPTION: These commands navigate to the `blog` directory, install dependencies using pnpm, and start the development server. The blog app will be accessible at http://localhost:4000/blog.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
cd blog
pnpm install && pnpm dev
```

----------------------------------------

TITLE: Synchronous Key Generation Example in Next.js
DESCRIPTION: Example showing problematic synchronous key generation implementation.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import { generateKeySync } from 'node:crypto'

export default async function Page() {
  const key = generateKeySync('hmac', { ... })
  const digestedData = await digestDataWithKey(data, key);
  return ...
}
```

----------------------------------------

TITLE: Installing MDX Dependencies with Yarn
DESCRIPTION: Installation command for MDX dependencies using Yarn package manager for Next.js projects
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn add @next/mdx @mdx-js/loader @mdx-js/react
```

----------------------------------------

TITLE: Creating Next.js App with Redux (npm)
DESCRIPTION: This command uses `create-next-app` with npm to bootstrap a new Next.js application that integrates with Redux. It specifies the `with-redux` example to create a pre-configured application. The new application will be created in a directory named `with-redux-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redux/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-redux with-redux-app
```

----------------------------------------

TITLE: Identifying React Element Types
DESCRIPTION: Demonstrates how to check if a value is a React element using isElement and how to verify its type using typeOf against the ReactIs.Element constant.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import React from "react";
import * as ReactIs from 'react-is';

ReactIs.isElement(<div />); // true
ReactIs.typeOf(<div />) === ReactIs.Element; // true
```

----------------------------------------

TITLE: Updating Next.js and React Packages using Yarn
DESCRIPTION: This command updates the Next.js, React, React DOM, and eslint-config-next packages to version 12 using Yarn. It performs the same function as the npm command but uses the Yarn package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
yarn add next@12 react@17 react-dom@17 eslint-config-next@12
```

----------------------------------------

TITLE: Bootstrap Electron App with Next.js Using pnpm
DESCRIPTION: This snippet portrays the use of pnpm to configure a Next.js application designed for Electron. It streamlines the setup process by utilizing pnpm's package management features.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-electron with-electron-app
```

----------------------------------------

TITLE: Creating Next.js App using create-next-app with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application named 'custom-server-app' based on the 'custom-server' example. It initializes the project using Yarn's package management.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/custom-server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example custom-server custom-server-app
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-rbx-bulma-pro example. It initializes a project named with-rbx-bulma-pro-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rbx-bulma-pro/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app
```

----------------------------------------

TITLE: Tigris Schema Definition File - TypeScript
DESCRIPTION: This snippet describes the Tigris schema definition for the to-do list app. The schema is defined in TypeScript and includes a single collection, `todoItems`, for storing to-do items. This structure is important for data handling and entity representation in the app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
// db/models/todoItems.ts
// The to-do list app has a single collection `todoItems` that stores the to-do items. The Collection gets automatically provisioned by the setup script.
```

----------------------------------------

TITLE: HMR Message Sending Function
DESCRIPTION: Function to send data through the WebSocket connection if it exists and is open.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
export function sendMessage(data) {
    if (!source || source.readyState !== source.OPEN) return;
    return source.send(data);
}
```

----------------------------------------

TITLE: Creating Next.js App with Framer Motion Example (pnpm)
DESCRIPTION: This command creates a new Next.js application, pre-configured with the Framer Motion example, using the `create-next-app` tool. It uses pnpm as the package manager for installation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-framer-motion/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-framer-motion with-framer-motion-app
```

----------------------------------------

TITLE: Creating Next.js app with Mantine using pnpm
DESCRIPTION: This command creates a Next.js app with the Mantine example using pnpm. It employs the create-next-app tool to generate the project structure and files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mantine/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mantine with-mantine-app
```

----------------------------------------

TITLE: Creating Next.js App with npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the with-next-page-transitions example. It downloads and executes the create-next-app package to bootstrap the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-page-transitions/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-next-page-transitions with-next-page-transitions-app
```

----------------------------------------

TITLE: Corrected Page Export in Next.js
DESCRIPTION: Example showing the correct page export after fixing the async params implementation
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
export * from '.../some-file'
```

----------------------------------------

TITLE: Upgrading Next.js to Version 10 using Bun
DESCRIPTION: Command to upgrade Next.js to version 10 using Bun package manager. This will update the next package in your project's dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-10.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
bun add next@10
```

----------------------------------------

TITLE: Using Next.js Preview Build from Specific Pull Request
DESCRIPTION: JSON configuration to use a Next.js preview build from a specific Pull Request in a project's package.json.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_11

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "next": "https://vercel-packages.vercel.app/next/prs/66445/next"
  }
}
```

----------------------------------------

TITLE: Create Next.js app with Yarn - Bash
DESCRIPTION: This command uses `create-next-app` with Yarn to create a new Next.js project from the 'with-absolute-imports' example. The project will be created in a directory named 'with-absolute-imports-app'. Requires Node.js and Yarn installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_4

LANGUAGE: Bash
CODE:
```
yarn create next-app --example with-absolute-imports with-absolute-imports-app
```

----------------------------------------

TITLE: Creating Next.js App with Realm-Web Example using pnpm
DESCRIPTION: This command uses `create next-app` with `pnpm` to bootstrap a new Next.js application using the `with-realm-web` example. It creates a new directory named `with-realm-web-app` containing the initialized project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-realm-web/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-realm-web with-realm-web-app
```

----------------------------------------

TITLE: Creating Next.js app with Redis example using npx
DESCRIPTION: This command uses npx to create a new Next.js application named 'roadmap' based on the 'with-redis' example. This bootstraps the project with the necessary dependencies and configuration for using Redis with Upstash.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redis/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-redis roadmap
```

----------------------------------------

TITLE: Importing and Using Connection in Next.js Page (TypeScript)
DESCRIPTION: This snippet demonstrates how to import and use the `connection` function within a Next.js page written in TypeScript. It delays rendering until a user request is detected, allowing dynamic rendering with changing results using elements like `Math.random()`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/connection.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { connection } from 'next/server'\n\nexport default async function Page() {\n  await connection()\n  // Everything below will be excluded from prerendering\n  const rand = Math.random()\n  return <span>{rand}</span>\n}
```

----------------------------------------

TITLE: Creating Next.js app using npm
DESCRIPTION: This command uses npm to create a new Next.js application with the Zustand example. It initializes a project named `with-zustand-app` based on the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zustand/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-zustand with-zustand-app
```

----------------------------------------

TITLE: Create PlanetScale Password
DESCRIPTION: Creates a new password for accessing the PlanetScale database.  Replace `<DATABASE_NAME>`, `<BRANCH_NAME>`, and `<PASSWORD_NAME>` with the appropriate values. The password will only be shown once, so store it securely.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pscale password create <DATABASE_NAME> <BRANCH_NAME> <PASSWORD_NAME>
```

----------------------------------------

TITLE: Next.js Font Package Reference
DESCRIPTION: Package name reference for Next.js built-in font system that enables automatic self-hosting and optimization of font files.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/font/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
@next/font
```

----------------------------------------

TITLE: Create Next.js app with Contentlayer example using Yarn
DESCRIPTION: This command uses `create-next-app` with Yarn to create a new Next.js application based on the `with-contentlayer` example. It sets up a project named `with-contentlayer-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-contentlayer/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-contentlayer with-contentlayer-app
```

----------------------------------------

TITLE: Initializing Next.js App with Cosmos DB Example using Yarn
DESCRIPTION: This command initializes a new Next.js application using the `with-azure-cosmos` example.  It utilizes `yarn create next-app` to bootstrap the project with the relevant configurations and dependencies for Azure Cosmos DB integration.  The resulting application directory will be named `with-azure-cosmos-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-azure-cosmos with-azure-cosmos-app
```

----------------------------------------

TITLE: Referencing Next.js SWC Package for Windows ARM64
DESCRIPTION: Package name reference for the Windows ARM64 MSVC-compiled binary of the Next.js SWC compiler.
SOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/win32-arm64-msvc/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
@next/swc-win32-arm64-msvc
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app using npx
DESCRIPTION: This command initializes a new Next.js application named `github-pages-app` using the `github-pages` example from the `create-next-app` tool. The command uses npx to execute the create-next-app package.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example github-pages github-pages-app
```

----------------------------------------

TITLE: Creating Next.js App with Turbopack using pnpm
DESCRIPTION: Command to create a new Next.js application with Turbopack using pnpm's create-next-app utility. This bootstraps a project based on the with-turbopack example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-turbopack with-turbopack-app
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command employs pnpm to create a fresh Next.js application using the 'with-mobx' example. It prepares the project with the required settings and dependencies for integrating MobX with Next.js. The `with-mobx-app` argument sets the name for the generated application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mobx with-mobx-app
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-passport-and-next-connect example. It bootstraps the project with the necessary files and configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport-and-next-connect/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-passport-and-next-connect with-passport-and-next-connect-app
```

----------------------------------------

TITLE: Installing CSP Example with NPX
DESCRIPTION: Creates a new Next.js application with strict CSP implementation using npx create-next-app command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-strict-csp/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-strict-csp with-strict-csp-app
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-cookies-next example. It initializes a new project directory named 'with-cookies-next-app' with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cookies-next/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-cookies-next with-cookies-next-app
```

----------------------------------------

TITLE: Creating Next.js app with yarn
DESCRIPTION: This command uses yarn to create a new Next.js application named 'with-i18n-next-intl-app' using the 'with-i18n-next-intl' example. It requires Node.js and Yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-next-intl/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-i18n-next-intl with-i18n-next-intl-app
```

----------------------------------------

TITLE: Customizing AMP Component Version (JSX)
DESCRIPTION: This code snippet illustrates how to customize the version of an AMP component using `next/head`. It imports the `Head` component from `next/head` and adds a `<script>` tag within the `Head` component to specify the desired version of the `amp-timeago` component.  This allows using specific versions of AMP components instead of the latest. Requires importing `Head` from `next/head`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Head from 'next/head'

export const config = { amp: true }

function MyAmpPage() {
  const date = new Date()

  return (
    <div>
      <Head>
        <script
          async
          key="amp-timeago"
          custom-element="amp-timeago"
          src="https://cdn.ampproject.org/v0/amp-timeago-0.1.js"
        />
      </Head>

      <p>Some time: {date.toJSON()}</p>
      <amp-timeago
        width="0"
        height="15"
        datetime={date.toJSON()}
        layout="responsive"
      >
        .
      </amp-timeago>
    </div>
  )
}

export default MyAmpPage
```

----------------------------------------

TITLE: Creating Next.js App with Turbopack using Yarn
DESCRIPTION: Command to create a new Next.js application with Turbopack using Yarn's create-next-app utility. This bootstraps a project based on the with-turbopack example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-turbopack with-turbopack-app
```

----------------------------------------

TITLE: Installing Turso CLI
DESCRIPTION: Commands to install Turso CLI on different operating systems (macOS, Linux, Windows). Turso CLI is required for database management activities such as creating databases and authentication tokens.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
brew install tursodatabase/tap/turso
```

LANGUAGE: bash
CODE:
```
curl -sSfL https://get.tur.so/install.sh | bash
```

----------------------------------------

TITLE: Bootstrapping Next.js app with Stitches using Yarn
DESCRIPTION: This command utilizes Yarn to set up a new Next.js application using the with-stitches example. It runs the create next-app command, specifying the example and the application name. This assumes that Yarn is already installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stitches/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-stitches with-stitches-app
```

----------------------------------------

TITLE: Creating a Next.js app with pnpm
DESCRIPTION: This command initializes a new Next.js application using the `create next-app` tool with the `with-service-worker` example. It uses pnpm as the package manager. The `with-service-worker-app` argument specifies the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-service-worker/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-service-worker with-service-worker-app
```

----------------------------------------

TITLE: Configuring Next.js for testProxy
DESCRIPTION: This snippet configures the `next.config.js` file to enable the experimental `testProxy` feature, which is required to use Playwright's experimental test mode in Next.js. This setting allows Next.js to work with Playwright for testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  experimental: {
    testProxy: true,
  },
}
```

----------------------------------------

TITLE: Valid Config: Empty Object - Next.js JavaScript
DESCRIPTION: This code snippet demonstrates a valid usage of the `config` export in Next.js. The `config` is an empty object, which is a valid starting point. Additional properties can be added to the object as long as they meet the static and constant value criteria.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export const config = {}
```

----------------------------------------

TITLE: Configuring authInterrupts in next.config.ts
DESCRIPTION: This snippet shows how to enable the experimental `authInterrupts` configuration option in the `next.config.ts` file. This option is required to use the `forbidden` function. The configuration enables the feature by setting `authInterrupts` to `true` within the `experimental` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    authInterrupts: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Cleaning the Next.js Project
DESCRIPTION: Command to clean the Next.js project, removing build artifacts and temporary files. Useful when you need a fresh build or are experiencing build issues.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
pnpm clean
```

----------------------------------------

TITLE: Using PagesOnly Component in Markdown
DESCRIPTION: A comment demonstrating how to use the PagesOnly component to add content specific to the Pages Router in shared documentation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/index.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}
```

----------------------------------------

TITLE: Next.js Index Page Component (Pages Router)
DESCRIPTION: Defines a Next.js index page component within the `pages` directory using the Pages Router. It renders a heading and a link to the about page. Requires Next.js and `next/link`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Basic Static Generation without data in Next.js
DESCRIPTION: A simple example of a statically generated page without data fetching. This component will be rendered to HTML at build time without requiring any external data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
function About() {
  return <div>About</div>
}

export default About
```

----------------------------------------

TITLE: Removing Deprecated Webpack Configuration
DESCRIPTION: This snippet shows how to update the Next.js configuration by removing the deprecated 'future.webpack5' option, as webpack 5 is the default now. It is essential for maintaining compatibility with the latest Next.js versions.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/future-webpack5-moved-to-webpack5.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  future: {
    webpack5: false,
  },
}
```

----------------------------------------

TITLE: Contentful Revalidation API Route URL
DESCRIPTION: This snippet represents the structure of the URL for the revalidation API endpoint.  The YOUR_VERCEL_DEPLOYMENT_URL is a placeholder for the actual URL of the deployed Vercel application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_8

LANGUAGE: JavaScript
CODE:
```
"https://<YOUR_VERCEL_DEPLOYMENT_URL>/api/revalidate"
```

----------------------------------------

TITLE: Upgrading Next.js to Canary Release using pnpm
DESCRIPTION: This command upgrades Next.js to the latest canary release using pnpm package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm add next@canary
```

----------------------------------------

TITLE: Installing Next.js Canary Version (Bash)
DESCRIPTION: Installs the latest canary version of Next.js using npm, which is required to use the experimental Partial Prerendering (PPR) feature. This command updates the `next` package in the current project's dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/04-partial-prerendering.mdx#_snippet_0

LANGUAGE: Bash
CODE:
```
npm install next@canary
```

----------------------------------------

TITLE: Authenticate PlanetScale CLI
DESCRIPTION: Authenticates the PlanetScale CLI to allow interaction with your PlanetScale account. This step is a prerequisite for creating and managing databases and passwords.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pscale auth login
```

----------------------------------------

TITLE: Using Link Component with Deprecated Prefetch Attribute in Next.js
DESCRIPTION: This snippet shows the deprecated usage of the Link component with `prefetch={true}`. This is no longer required as prefetching is now the default behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/prefetch-true-deprecated.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
<Link prefetch={true}>
```

----------------------------------------

TITLE: Initializing Next.js App with Yarn
DESCRIPTION: This command uses `create-next-app` via `yarn` to create a new Next.js application based on the `blog-starter` example.  It downloads the specified example and creates a new project named `blog-starter-app` in the current directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example blog-starter blog-starter-app
```

----------------------------------------

TITLE: Bundle All Packages in next.config.js (Pages Router)
DESCRIPTION: Configures the `bundlePagesRouterDependencies` option in `next.config.js` to automatically bundle all packages, which is the default behavior in the App Router. This is applicable for the Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  bundlePagesRouterDependencies: true,
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Create Next.js App with Ably Example (Yarn)
DESCRIPTION: This command uses the create-next-app tool with Yarn to bootstrap a new Next.js application using the 'with-ably' example.  It sets up a basic project structure with Ably integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-ably with-ably-app
```

----------------------------------------

TITLE: Creating Next.js app with EdgeDB example - Bash
DESCRIPTION: This command creates a new Next.js application using the `with-edgedb` example. It uses `create next-app` via `pnpm` to bootstrap the project with the specified example and project name. The resulting project will be located in the `with-edgedb-app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-edgedb with-edgedb-app
```

----------------------------------------

TITLE: Controlling Locale Prepending with Link (Pages Router)
DESCRIPTION: This snippet illustrates how to use the `locale` prop with a Next.js Link component in the Pages Router. It shows the default behavior (locale prepended), disabling locale prepending with `locale={false}`, and specifying a different locale like `locale='fr'` for navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <>
      {/* Default behavior: locale is prepended */}
      <Link href="/dashboard">Dashboard (with locale)</Link>

      {/* Disable locale prepending */}
      <Link href="/dashboard" locale={false}>
        Dashboard (without locale)
      </Link>

      {/* Specify a different locale */}
      <Link href="/dashboard" locale="fr">
        Dashboard (French)
      </Link>
    </>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <>
      {/* Default behavior: locale is prepended */}
      <Link href="/dashboard">Dashboard (with locale)</Link>

      {/* Disable locale prepending */}
      <Link href="/dashboard" locale={false}>
        Dashboard (without locale)
      </Link>

      {/* Specify a different locale */}
      <Link href="/dashboard" locale="fr">
        Dashboard (French)
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Defining Regenerator Runtime Globally in ECMAScript 2015
DESCRIPTION: This snippet demonstrates how to define 'regeneratorRuntime' globally in an ECMAScript 2015 environment. Importing 'regenerator-runtime/runtime' ensures that the runtime functionality is available throughout the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
// ECMAScript 2015
import "regenerator-runtime/runtime";
```

----------------------------------------

TITLE: Configuring Storybook UI Components
DESCRIPTION: This part of the document specifies the structure for configuring various aspects of Storybook. It describes the rendering of images and text with associated headings and links to documentation, facilitating component development for various frameworks.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
<div className="sb-container">
  <div className='sb-section-title'>
    # Configure your project
    
    Because Storybook works separately from your app, you'll need to configure it for your specific stack and setup. Below, explore guides for configuring Storybook with popular frameworks and tools. If you get stuck, learn how you can ask for help from our community.
  </div>
  <div className="sb-section">
    <div className="sb-section-item">
      <Image
        src={Styling}
        alt="A wall of logos representing different styling technologies"
        width={0}
        height={0}
        style={{ width: '100%', height: 'auto' }}
      />
      <h4 className="sb-section-item-heading">Add styling and CSS</h4>
      <p className="sb-section-item-paragraph">Like with web applications, there are many ways to include CSS within Storybook. Learn more about setting up styling within Storybook.</p>
      <a
        href="https://storybook.js.org/docs/configure/styling-and-css"
        target="_blank" rel="noreferrer"
      >Learn more<RightArrow /></a>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: Form Component Usage in Pages Directory (JavaScript)
DESCRIPTION: Shows how to implement the Next.js Form component in the pages directory structure using JavaScript. The form redirects to a search page with query parameters on submission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import Form from 'next/form'

export default function Search() {
  return (
    <Form action="/search">
      {/* On submission, the input value will be appended to
          the URL, e.g. /search?query=abc */}
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Unnecessary getInitialProps in Custom App
DESCRIPTION: An example of a `getInitialProps` method in a Next.js custom `_app.js` file that can often be removed in Next.js 9 to leverage new features, as it performs no custom logic beyond calling `Component.getInitialProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
class MyApp extends App {
  // Remove me, I do nothing!
  static async getInitialProps({ Component, ctx }) {
    let pageProps = {}

    if (Component.getInitialProps) {
      pageProps = await Component.getInitialProps(ctx)
    }

    return { pageProps }
  }

  render() {
    // ... etc
  }
}
```

----------------------------------------

TITLE: Postpone Component for Prerendering (JS)
DESCRIPTION: A component or function wrapper that triggers a postponement during prerendering by calling the `postponeWithTracking` utility. It's used to indicate that a dynamic dependency was encountered, requiring a bailout from full static generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_12

LANGUAGE: javascript
CODE:
```
import { b as postponeWithTracking } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
function Postpone({ reason, prerenderState, pathname }) {
    postponeWithTracking(prerenderState, reason, pathname);
}
export { Postpone };
export { Postpone as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Corrected AMP Bind Attribute Syntax
DESCRIPTION: Recommended alternative syntax using data-amp-bind-prop for compatibility with JSX and AMP specifications
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/amp-bind-jsx-alt.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
data-amp-bind-prop='something'
```

----------------------------------------

TITLE: Checking Dependency Compatibility in Bash
DESCRIPTION: This Bash snippet warns about two dependencies that are incompatible with the upgraded package versions in a Next.js project. It lists unmet peer dependencies for specific React and React-DOM versions and suggests updating to the latest versions or filing an issue for support. No inputs or parameters are required; it outputs a warning log.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-codemod/bin/__testfixtures__/peer-dep-out-of-range/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
⚠ Found 2 dependencies that seem incompatible with the upgraded package versions.
You may have to update these packages to their latest version or file an issue to ask for support of the upgraded libraries.
unmet-prerelease 0.0.1
  ├── ✕ unmet peer react@"^18.2.0 || 19.0.0-rc-aaaaaaaa-20240101": found 19.0.0-rc-7c8e5e7a-20241101
  └── ✕ unmet peer react-dom@"^18.2.0 || 19.0.0-rc-aaaaaaaa-20240101": found 19.0.0-rc-7c8e5e7a-20241101
unmet-range 0.0.1
  ├── ✕ unmet peer react@"^18.0.0 || ^19.0.0": found 19.0.0-rc-7c8e5e7a-20241101
  └── ✕ unmet peer react-dom@"< 19": found 19.0.0-rc-7c8e5e7a-20241101
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the DatoCMS example. The application is created in a directory named cms-datocms-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-datocms cms-datocms-app
```

----------------------------------------

TITLE: Creating a Next.js app with Clerk using npx
DESCRIPTION: This command uses `create-next-app` with `npx` to bootstrap a Next.js application pre-configured with Clerk. The `--example with-clerk` flag specifies the Clerk example to use, and `with-clerk-app` is the name of the new application directory. Requires npx to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-clerk/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-clerk with-clerk-app
```

----------------------------------------

TITLE: Create AMP-Only Page in Next.js (JSX)
DESCRIPTION: This code snippet shows a complete AMP-only page example in Next.js.  The `config` object with `amp: true` enables AMP mode.  The page will be optimized with AMP Optimizer and won't include the React runtime.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-amp.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export const config = { amp: true }

function About(props) {
  return <h3>My AMP About Page!</h3>
}

export default About
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses `create next-app` with Yarn to bootstrap a new Next.js project based on the `with-graphql-gateway` example. It will create a directory named `with-graphql-gateway-app` with the project files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-graphql-gateway with-graphql-gateway-app
```

----------------------------------------

TITLE: Incorrect PostCSS Configuration (require)
DESCRIPTION: This code snippet shows an incorrect PostCSS configuration where plugins are loaded using `require`. The corrected example demonstrates the proper string-based plugin name configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/postcss-shape.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
const pluginA = require('postcss-plugin-a')
module.exports = {
  plugins: [require('postcss-plugin'), pluginA],
}
```

----------------------------------------

TITLE: Creating Next.js App with HTTP2 Example using npx
DESCRIPTION: This command initializes a new Next.js application using the HTTP2 example template. Requires npx, part of the npm package, to execute.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-http2 with-http2-app
```

----------------------------------------

TITLE: Installing sharp with bun
DESCRIPTION: This snippet demonstrates how to install the `sharp` package using bun. It is an alternative solution for resolving issues with Next.js' built-in image optimization when `sharp` is missing or improperly installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/install-sharp.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
bun add sharp
```

----------------------------------------

TITLE: Enabling pnpm for Next.js Development
DESCRIPTION: Command to enable pnpm package manager for Next.js development. This is a prerequisite step before installing dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
corepack enable pnpm
```

----------------------------------------

TITLE: Migrating EdgeDB with DSN - Bash
DESCRIPTION: This command migrates the EdgeDB instance using a specified DSN (Data Source Name). It utilizes the `edgedb migrate` command, providing the DSN and disabling TLS security checks with `--tls-security insecure`. The command is executed from within the project directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_13

LANGUAGE: bash
CODE:
```
edgedb migrate --dsn <your-instance-dsn> --tls-security insecure
```

----------------------------------------

TITLE: Configuring devIndicators in Next.js (Typescript)
DESCRIPTION: This code snippet shows the Typescript type definition for the `devIndicators` configuration option in Next.js. It allows you to either disable the indicators entirely or configure their position on the screen. The position can be one of 'bottom-right', 'bottom-left', 'top-right', or 'top-left'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/devIndicators.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
  devIndicators: false | {
    position?: 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left', // defaults to 'bottom-left',
  },
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the api-routes-middleware example. It initializes the project with the specified example and names the new application api-routes-middleware-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-middleware/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-middleware api-routes-middleware-app
```

----------------------------------------

TITLE: Creating a Next.js app with create-next-app - Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-unsplash example. It leverages the create-next-app tool to bootstrap the project with the specified template and project name. The tool downloads the template from the specified repository and initializes the project structure, installing necessary dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-unsplash with-unsplash-app
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-hls-js' example. It uses the create next-app command and defines the example and application name. The created application will reside in a folder named 'with-hls-js-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-hls-js/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-hls-js with-hls-js-app
```

----------------------------------------

TITLE: Setting Root Directory in Turbopack
DESCRIPTION: Example showing how to configure the root directory for module resolution in Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const path = require('path')
module.exports = {
  turbopack: {
    root: path.join(__dirname, '..')
  },
}
```

----------------------------------------

TITLE: Updating React Packages to Latest Version using npm
DESCRIPTION: This command updates the React and React DOM packages to the latest versions using npm.  It ensures that you're using a compatible React version with Next.js 12.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npm install react@latest react-dom@latest
```

----------------------------------------

TITLE: Exporting Size Metadata for Generated Icon - TSX
DESCRIPTION: Shows the TSX syntax for exporting the size constant in a generated icon file (icon.tsx or apple-icon.tsx). This metadata informs Next.js about the intended dimensions of the generated icon, which is used to set the sizes attribute in the HTML.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
export const size = { width: 32, height: 32 }

export default function Icon() {}
```

----------------------------------------

TITLE: Initializing Next.js app with Rematch using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the 'with-rematch' example. It sets up a project named 'with-rematch-app' in the current directory. This assumes pnpm is installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rematch/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-rematch with-rematch-app
```

----------------------------------------

TITLE: Umbraco Delivery API Configuration
DESCRIPTION: This snippet shows how to configure the Umbraco Delivery API in the appsettings.json file. The Delivery API must be enabled to fetch blog data for the static site.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "Umbraco": {
    "CMS": {
      "DeliveryApi": {
        "Enabled": true,
        "ApiKey": "my-secret-api-key"
      }
    }
  }
}
```

----------------------------------------

TITLE: CSS Animation for Graceful Loading Indicator
DESCRIPTION: CSS styles to create a smooth, delayed loading animation that prevents unnecessary visual flicker during quick route transitions
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-link-status.mdx#2025-04-21_snippet_2

LANGUAGE: css
CODE:
```
.spinner {
  /* ... */
  opacity: 0;
  animation:
    fadeIn 500ms 100ms forwards,
    rotate 1s linear infinite;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes rotate {
  to {
    transform: rotate(360deg);
  }
}
```

----------------------------------------

TITLE: TypeScript Project Selection
DESCRIPTION: This command illustrates the prompt during interactive project creation, specifically asking whether to initialize a TypeScript project.  Selecting 'Yes' configures the project with TypeScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
✔ Would you like to use TypeScript? … No / Yes
```

----------------------------------------

TITLE: Enabling Manual Signal Handling in package.json (JSON)
DESCRIPTION: Modifies the `start` script within `package.json` to prepend `NEXT_MANUAL_SIG_HANDLE=true`. This environment variable signals Next.js to disable its default signal handling, enabling custom shutdown logic within the application code. Applicable only when using the Pages Router and self-hosting with `next start`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "NEXT_MANUAL_SIG_HANDLE=true next start"
  }
}
```

----------------------------------------

TITLE: Configuring Image Sizes for srcset Generation in Next.js
DESCRIPTION: This code snippet demonstrates how to configure image sizes in Next.js.  These sizes are concatenated with the device sizes to form the full array of sizes used to generate image `srcset` attributes. The image sizes should be smaller than the device sizes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_12

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
  },
}
```

----------------------------------------

TITLE: Creating Next.js App with Ant Design using npm
DESCRIPTION: This command uses npm to create a new Next.js application with the Ant Design example template. It utilizes `create-next-app` to bootstrap the project with specified example and application name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ant-design/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-ant-design with-ant-design-app
```

----------------------------------------

TITLE: Creating a Next.js app with Storybook example (Yarn)
DESCRIPTION: This command uses `create next-app` via Yarn to generate a new Next.js application pre-configured with Storybook. It utilizes an example template to include the necessary Storybook setup and configurations. The `with-storybook-app` argument specifies the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-storybook with-storybook-app
```

----------------------------------------

TITLE: Creating a Next.js App with Segment Analytics using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the with-segment-analytics example.  It bootstraps the project, setting up the basic structure and dependencies for integrating Segment Analytics.  The new application will be named 'with-segment-analytics-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-segment-analytics with-segment-analytics-app
```

----------------------------------------

TITLE: Enabling Dynamic IO in Next.js Configuration
DESCRIPTION: Configure Next.js to enable experimental dynamic IO feature, which is required for using cacheLife function
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig
```

LANGUAGE: javascript
CODE:
```
const nextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Correcting Cookie Store Initialization in Next.js
DESCRIPTION: This snippet demonstrates how to properly initialize the cookie store within a request scope in a Next.js page component. The change ensures that the 'cookies()' function is called during the execution of an asynchronous function, preventing errors during execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-api-wrong-context.mdx#2025-04-21_snippet_0

LANGUAGE: diff
CODE:
```
import { cookies } from 'next/headers'

- const cookieStore = await cookies()
export default async function Page() {
+ const cookieStore = await cookies()
  return ...
}
```

----------------------------------------

TITLE: Generating SSL Keys for Localhost with OpenSSL
DESCRIPTION: This command creates a self-signed X.509 certificate and a private key for localhost. OpenSSL must be installed for executing this command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \
  -keyout localhost-privkey.pem -out localhost-cert.pem
```

----------------------------------------

TITLE: Configuring Custom File Extensions
DESCRIPTION: Example of configuring custom file extensions for module resolution in Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/turbopack.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  turbopack: {
    resolveExtensions: ['.mdx', '.tsx', '.ts', '.jsx', '.js', '.mjs', '.json'],
  },
}
```

----------------------------------------

TITLE: Creating Next.js app with Styletron using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the Styletron example.  It initializes a project named 'with-styletron-app' using the 'with-styletron' example template. Requires Node.js and pnpm installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styletron/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-styletron with-styletron-app
```

----------------------------------------

TITLE: Creating a Next.js App with Turso Example
DESCRIPTION: This code snippet demonstrates how to create a new Next.js app using the Turso example template. The code allows the creation of a `with-turso` app using different package managers (npx, yarn, pnpm). It ensures users can set up their Next.js application environment seamlessly.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-turso with-turso-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-turso with-turso-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-turso with-turso-app
```

----------------------------------------

TITLE: Creating Next.js app with Knex Example
DESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js project with the `with-knex` example. It shows how to initialize a new project using npm, yarn or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-knex with-knex-app
```

----------------------------------------

TITLE: Creating a Next.js app with Apollo using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named 'with-apollo-app' using the 'with-apollo' example. It bootstraps the project with the necessary dependencies and configuration for Apollo integration. It requires Node.js and pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-apollo with-apollo-app
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-algolia-react-instantsearch example. It initializes a project with the specified example template and names the directory with-algolia-react-instantsearch-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-algolia-react-instantsearch/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

----------------------------------------

TITLE: Creating Next.js App with Cloudflare Turnstile Example (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the Cloudflare Turnstile example. It initializes a project named "cloudflare-turnstile-app" using the specified example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cloudflare-turnstile cloudflare-turnstile-app
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-passport-and-next-connect example. It bootstraps the project with the necessary files and configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport-and-next-connect/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-passport-and-next-connect with-passport-and-next-connect-app
```

----------------------------------------

TITLE: Defining Twitter Image Alt Text - TXT
DESCRIPTION: Provides an example of the content for a twitter-image.alt.txt file. This file is placed in the same route segment as the corresponding twitter-image file and contains the alternative text for the image, used in the Twitter Card meta tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_4

LANGUAGE: TXT
CODE:
```
About Acme
```

----------------------------------------

TITLE: Upgrading Next.js to Version 10 using pnpm
DESCRIPTION: Command to upgrade Next.js to version 10 using pnpm package manager. This will update the next package in your project's dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-10.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm up next@10
```

----------------------------------------

TITLE: Defining closeSpanWithError Helper Function Javascript
DESCRIPTION: Defines a utility function `closeSpanWithError` that handles the closing of an OpenTelemetry span when an error occurs. It checks if the error is a `BubbledError` and sets a specific attribute if it is; otherwise, it records the exception and sets the span status to `ERROR` with the error message.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const closeSpanWithError = (span, error)=>{
    if (isBubbledError(error) && error.bubble) {
        span.setAttribute('next.bubble', true);
    } else {
        if (error) {
            span.recordException(error);
        }
        span.setStatus({
            code: SpanStatusCode.ERROR,
            message: error == null ? void 0 : error.message
        });
    }
    span.end();
};

```

----------------------------------------

TITLE: Sending invalid body with 204 status code in Next.js API route
DESCRIPTION: This code snippet shows an example of an invalid Next.js API route where a 204 status code is used with a response body. The `handler` function receives the request and response objects, and attempts to send a response body along with the 204 status code, which is an invalid operation.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-api-status-body.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  res.status(204).send('invalid body')
}
```

----------------------------------------

TITLE: Loading Multiple Modules Using Deprecated next/dynamic Pattern
DESCRIPTION: Example showing the deprecated pattern of loading multiple components simultaneously using the modules and render pattern in next/dynamic.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-modules.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const HelloBundle = dynamic({
  modules: () => {
    const components = {
      Hello1: () => import('../components/hello1').then((m) => m.default),
      Hello2: () => import('../components/hello2').then((m) => m.default),
    }

    return components
  },
  render: (props, { Hello1, Hello2 }) => (
    <div>
      <h1>{props.title}</h1>
      <Hello1 />
      <Hello2 />
    </div>
  ),
})

function DynamicBundle() {
  return <HelloBundle title="Dynamic Bundle" />
}

export default DynamicBundle
```

----------------------------------------

TITLE: Running blog app with npm
DESCRIPTION: These commands navigate to the `blog` directory, install dependencies using npm, and start the development server. The blog app will be accessible at http://localhost:4000/blog.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
cd blog
npm install && npm run dev
```

----------------------------------------

TITLE: Handling Static Paths with Conflicts in JavaScript
DESCRIPTION: This snippet sets up a catch-all page and defines static paths that could conflict with other pages. By configuring `getStaticPaths`, it highlights how duplicate paths can be removed to resolve conflicts.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-ssg-paths.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export const getStaticProps = () => ({ props: {} })

export const getStaticPaths = () => ({
  paths: [
    '/hello/world', // <-- this conflicts with the /hello/world.js page, remove to resolve error
    '/another',
  ],
  fallback: false,
})

export default function CatchAllPage() {
  return 'Catch-all page'
}
```

----------------------------------------

TITLE: Enabling Node.js Runtime for Next.js Middleware (TS)
DESCRIPTION: Configures Next.js to enable the experimental Node.js runtime for middleware by adding `nodeMiddleware: true` within the `experimental` object in the `next.config.ts` file. This feature is experimental and requires a canary build of Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_19

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    nodeMiddleware: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Creating Next.js App using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application named `i18n-routing-pages-app` based on the `i18n-routing-pages` example. It initializes the project with the necessary configuration and dependencies for demonstrating internationalized routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing-pages/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example i18n-routing-pages i18n-routing-pages-app
```

----------------------------------------

TITLE: Create Next.js app with Contentlayer example using npm
DESCRIPTION: This command uses `create-next-app` with npm to create a new Next.js application based on the `with-contentlayer` example. It sets up a project named `with-contentlayer-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-contentlayer/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-contentlayer with-contentlayer-app
```

----------------------------------------

TITLE: Creating Next.js App with reactstrap using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application using the with-reactstrap example. It sets up a new project with the necessary dependencies for reactstrap integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reactstrap/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-reactstrap with-reactstrap-app
```

----------------------------------------

TITLE: Creating Next.js app with Relay Modern example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application based on the Relay Modern example. It initializes a project named 'with-relay-modern-app' using the specified example template.  Dependencies include create-next-app and npm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-relay-modern with-relay-modern-app
```

----------------------------------------

TITLE: Creating Next.js app with Ionic example using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application based on the 'with-ionic' example. It scaffolds a project named 'with-ionic-app' in the current directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ionic/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-ionic with-ionic-app
```

----------------------------------------

TITLE: Installing React Compiler Babel Plugin
DESCRIPTION: Command to install the babel-plugin-react-compiler package using npm.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install babel-plugin-react-compiler
```

----------------------------------------

TITLE: Creating a Next.js app with Sass example using npm
DESCRIPTION: This command uses npx to create a new Next.js application based on the with-sass example. It sets up the project with the necessary Sass configurations and dependencies. The with-sass-app argument specifies the directory where the new application will be created.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-sass with-sass-app
```

----------------------------------------

TITLE: Creating Next.js app with Goober using pnpm
DESCRIPTION: This command employs pnpm to scaffold a new Next.js application initialized with the Goober example. It executes create next-app, specifying the example and the project name. The newly created application will be named 'with-goober-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-goober/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-goober with-goober-app
```

----------------------------------------

TITLE: Running Next.js Development Server (npm)
DESCRIPTION: These commands first install the required Node.js dependencies using npm install, then start the Next.js development server with npm run dev. This allows you to run the application locally for development purposes.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Creating Next.js app with npx
DESCRIPTION: This command creates a new Next.js application using the `with-sitemap` example.  It leverages `create-next-app` via npx. The created app will be named `with-sitemap-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-sitemap with-sitemap-app
```

----------------------------------------

TITLE: Creating a Next.js app with Clerk using pnpm
DESCRIPTION: This command uses `create-next-app` with `pnpm` to bootstrap a Next.js application pre-configured with Clerk. The `--example with-clerk` flag specifies the Clerk example to use, and `with-clerk-app` is the name of the new application directory. Requires pnpm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-clerk/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-clerk with-clerk-app
```

----------------------------------------

TITLE: Create Next.js app with Slate.js example using npx
DESCRIPTION: This command uses npx to create a new Next.js application named 'with-slate-app' using the 'with-slate' example.  It bootstraps a project with pre-configured Slate.js integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-slate/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-slate with-slate-app
```

----------------------------------------

TITLE: Creating Next.js app with GraphQL-React example using yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the `with-graphql-react` example. It initializes a project named `with-graphql-react-app` with all necessary dependencies and configurations for GraphQL-React integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-react/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-graphql-react with-graphql-react-app
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with pnpm
DESCRIPTION: This command uses `create-next-app` to generate a new Next.js project with the `with-axiom` example. It initializes the project using pnpm. The resulting project is named `with-axiom-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-axiom/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-axiom with-axiom-app
```

----------------------------------------

TITLE: Creating Next.js app with MDBReact example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the MDBReact example. It uses the create next-app command and specifies the with-mdbreact example. The resulting application will be named with-mdbreact-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mdbreact/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mdbreact with-mdbreact-app
```

----------------------------------------

TITLE: Install Dependencies and Run Development Server (Yarn)
DESCRIPTION: These commands install the project dependencies using Yarn and then start the Next.js development server. Requires Yarn to be installed. The server will typically run on localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Installing Next.js with Expo TypeScript Using PNPM
DESCRIPTION: Command to create a new Next.js application with Expo TypeScript template using pnpm create
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-expo-typescript with-expo-typescript-app
```

----------------------------------------

TITLE: Initializing Next.js app with Drupal example using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application named 'cms-drupal-app' based on the 'cms-drupal' example.  Yarn is used as the package manager to bootstrap the Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-drupal/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-drupal cms-drupal-app
```

----------------------------------------

TITLE: Configuring Remote Image Domains in Next.js pre-12.3.0
DESCRIPTION: Legacy configuration for next/image component using the domains array. This simpler approach only allows specifying allowed hostnames without additional pattern matching.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-host.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    domains: ['assets.example.com'],
  },
}
```

----------------------------------------

TITLE: Installing SuperTokens with Next.js using create-next-app
DESCRIPTION: Command to bootstrap a Next.js application with SuperTokens authentication using npx create-next-app with the with-supertokens example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-supertokens with-supertokens-app
```

----------------------------------------

TITLE: Enabling and Configuring Experimental Turbotrace (JavaScript)
DESCRIPTION: Activates the experimental `turbotrace` engine, a faster Rust-based alternative for file tracing, in `next.config.js`. Allows configuring various parameters like logging level, detail, context directory, process.cwd(), and memory limit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  experimental: {
    turbotrace: {
      // control the log level of the turbotrace, default is `error`
      logLevel: 'error', // Example value
      // control if the log of turbotrace should contain the details of the analysis, default is `false`
      logDetail: false, // Example value
      // show all log messages without limit
      // turbotrace only show 1 log message for each categories by default
      logAll: false, // Example value
      // control the context directory of the turbotrace
      // files outside of the context directory will not be traced
      // set the `outputFileTracingRoot` has the same effect
      // if the `outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be used
      // contextDirectory: string, // Optional
      // if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.
      // for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')
      // processCwd: string, // Optional
      // control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.
      // memoryLimit: number // Optional
    },
  },
}
```

----------------------------------------

TITLE: Defining Custom Next.js Document Component - JavaScript
DESCRIPTION: Defines a custom `MyDocument` class extending `next/document`. It overrides `getInitialProps` to fetch initial props and injects a global style tag into the `styles` prop. The `render` method defines the basic HTML structure using Next.js Document components.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import Document from 'next/document';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";
import { Html } from 'next/document';
import { Head } from 'next/document';
import { Main } from 'next/document';
import { NextScript } from 'next/document';
class MyDocument extends Document {
    static async getInitialProps(ctx) {
        const initialProps = await Document.getInitialProps(ctx);
        return {
            ...initialProps,
            styles: _jsxs(_Fragment, {
                children: [
                    initialProps.styles,
                    _jsx("style", {
                        dangerouslySetInnerHTML: {
                            __html: `html { background: hotpink; }`
                        }
                    })
                ]
            })
        };
    }
    render() {
        return _jsxs(Html, {
            children: [
                _jsx(Head, {}),
                _jsxs("body", {
                    children: [
                        _jsx(Main, {}),
                        _jsx(NextScript, {})
                    ]
                })
            ]
        });
    }
}
const __TURBOPACK__default__export__ = MyDocument;
export { __TURBOPACK__default__export__ as default };
export { MyDocument as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { __TURBOPACK__default__export__ as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Creating Next.js App with Prismic Example (pnpm)
DESCRIPTION: This command uses the `create next-app` command with pnpm to bootstrap a new Next.js application using the `cms-prismic` example. It creates a new directory named `cms-prismic-app` for the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-prismic cms-prismic-app
```

----------------------------------------

TITLE: Creating Next.js app with Inngest example using bunx
DESCRIPTION: This command uses bunx to create a new Next.js application named "inngest-app" based on the "inngest" example. It relies on create-next-app for the initial project setup, incorporating configurations and dependencies necessary for Inngest integration.  Bun needs to be installed and available.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
bunx create-next-app --example inngest inngest-app
```

----------------------------------------

TITLE: Creating Next.js app with GSAP using PNPM
DESCRIPTION: This command initializes a new Next.js application using the `with-gsap` example. It utilizes `create-next-app` via pnpm. The resulting application will be named `with-gsap-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-gsap/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-gsap with-gsap-app
```

----------------------------------------

TITLE: Creating Next.js app with MDX pages using Yarn
DESCRIPTION: This command uses `create-next-app` with Yarn to initialize a new Next.js project with the `mdx-pages` example.  It creates a directory named `mdx-pages-app` for the new project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example mdx-pages mdx-pages-app
```

----------------------------------------

TITLE: Creating Next.js App with MongoDB Example (Yarn)
DESCRIPTION: This command utilizes Yarn to create a new Next.js application with the `with-mongodb` example. It sets up a project named `with-mongodb-app` using the provided example template. Yarn must be installed for this command to function correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mongodb with-mongodb-app
```

----------------------------------------

TITLE: Create Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the cms-wordpress example. It initializes a project named cms-wordpress-app in the current directory, using the specified example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-wordpress cms-wordpress-app
```

----------------------------------------

TITLE: Creating Next.js app with Jotai example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the Jotai example. It executes create next-app with the specified Jotai example into a new directory called with-jotai-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jotai/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-jotai with-jotai-app
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the 'with-youtube-embed' example. It uses the create next app command to scaffold a new app. The resulting application will be named 'with-youtube-embed-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-youtube-embed/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-youtube-embed with-youtube-embed-app
```

----------------------------------------

TITLE: Deprecated User Agent Access in Next.js Middleware
DESCRIPTION: Example showing the deprecated method of accessing user agent information directly through req.ua in Next.js middleware. This approach is no longer supported and needs to be updated.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-user-agent.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'
  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Creating Next.js app with particles example (pnpm)
DESCRIPTION: This command utilizes pnpm to create a new Next.js application using the 'with-particles' example. It initializes a project named 'with-particles-app' with the pre-configured particle animation setup. The extra '--' is needed to pass arguments correctly to create-next-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-particles/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app -- --example with-particles with-particles-app
```

----------------------------------------

TITLE: Creating a Next.js app with Panda CSS using Bun
DESCRIPTION: This command uses Bun to execute create-next-app, setting up a new Next.js project with the panda-css example. The project will be named 'panda-css-app' and configured to use Panda CSS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/panda-css/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
bunx create-next-app --example panda-css panda-css-app
```

----------------------------------------

TITLE: Creating Next.js app with Xata using npm
DESCRIPTION: This command uses npm to create a new Next.js application pre-configured to work with Xata. It bootstraps the project using the `with-xata` example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npx create-next-app --example with-xata with-xata-app
```

----------------------------------------

TITLE: Disabling ESLint Cache (Bash)
DESCRIPTION: This bash command demonstrates how to disable the ESLint cache when running `next lint`. This is useful when your ESLint rules depend on more than the contents of a single source file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
next lint --no-cache
```

----------------------------------------

TITLE: Enabling use cache in Next.js (TypeScript)
DESCRIPTION: Configures `next.config.ts` to enable the experimental `useCache` feature by adding `useCache: true` to the `experimental` object. This step is required before the `use cache` directive can be used in your application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    useCache: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Upgrading Next.js and React Dependencies using bun
DESCRIPTION: Command to upgrade Next.js to version 11 and React to version 17 using bun package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
bun add next@11 react@17 react-dom@17
```

----------------------------------------

TITLE: Building Rust Code to WebAssembly
DESCRIPTION: These commands compile Rust code located in `src/add.rs` into a WebAssembly file named `add.wasm`. They use npm, yarn, or pnpm to execute the `build-rust` script defined in the project's `package.json`. Requires Rust to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-webassembly/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm run build-rust
```

LANGUAGE: bash
CODE:
```
yarn build-rust
```

LANGUAGE: bash
CODE:
```
pnpm build-rust
```

----------------------------------------

TITLE: Installing EdgeDB CLI - macOS/Linux - Bash
DESCRIPTION: This command installs the EdgeDB CLI on macOS or Linux. It downloads and executes a shell script from the EdgeDB website using `curl`. The script handles the installation process.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
$ curl --proto '=https' --tlsv1.2 -sSf https://sh.edgedb.com | sh
```

----------------------------------------

TITLE: Installing Required Dependencies for UI Kitten
DESCRIPTION: Command to install necessary dependencies for transpiling packages like @ui-kitten/components
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
yarn add -D next-compose-plugins next-transpile-modules
```

----------------------------------------

TITLE: Updating React Packages to Latest Version using pnpm
DESCRIPTION: This command updates the React and React DOM packages to the latest versions using pnpm. It provides an alternative using the pnpm package manager to update React and React DOM.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
pnpm update react@latest react-dom@latest
```

----------------------------------------

TITLE: Quickstart: Creating Next.js app with Jest example
DESCRIPTION: This command uses `create-next-app` to create a new Next.js application with the `with-jest` example. It simplifies the initial setup of Jest in a Next.js project. The new app will be named `with-jest-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app@latest --example with-jest with-jest-app
```

----------------------------------------

TITLE: Manual Package Installation for Next.js 15
DESCRIPTION: Manual installation command for updating Next.js and React dependencies to their latest versions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm i next@latest react@latest react-dom@latest eslint-config-next@latest
```

----------------------------------------

TITLE: Loading Specific Moment.js Locale in Next.js
DESCRIPTION: Code snippet to load a specific locale for Moment.js in Next.js 11, which now excludes all locales by default for optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import moment from 'moment'
import 'moment/locale/ja'

moment.locale('ja')
```

----------------------------------------

TITLE: Skipping AMP Validation (JS)
DESCRIPTION: This code snippet shows how to disable AMP validation in `next.config.js`. It sets the `skipValidation` property to `true` within the `experimental.amp` object.  This can be useful during development or in cases where strict AMP validation is not required. Disables the automatic AMP validation during development and build.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
experimental: {
  amp: {
    skipValidation: true
  }
}
```

----------------------------------------

TITLE: Terminal Output for Server-Side Rendered Page in Next.js
DESCRIPTION: Shows the file structure output by 'next build' for a page with getServerSideProps, where the page is server-side rendered as JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/04-automatic-static-optimization.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
.next/server/pages/about.js
```

----------------------------------------

TITLE: Importing Images for Storybook Components
DESCRIPTION: This section imports various image assets to be used within Storybook components, enabling image rendering in the context of a UI development environment. Assets like logos and screenshots of technologies enhance the configurability of Storybook.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import Github from "./assets/github.svg";
import Discord from "./assets/discord.svg";
import Youtube from "./assets/youtube.svg";
import Tutorials from "./assets/tutorials.svg";
import Styling from "./assets/styling.png";
import Context from "./assets/context.png";
import Assets from "./assets/assets.png";
import Docs from "./assets/docs.png";
import Share from "./assets/share.png";
import FigmaPlugin from "./assets/figma-plugin.png";
import Testing from "./assets/testing.png";
import Accessibility from "./assets/accessibility.png";
import Theming from "./assets/theming.png";
import AddonLibrary from "./assets/addon-library.png";
```

----------------------------------------

TITLE: Setting Up a Custom AMP Validator (JS)
DESCRIPTION: This code snippet demonstrates how to configure a custom AMP validator in `next.config.js`. It defines a `validator` property within the `amp` object, pointing to the path of the custom validator script.  This allows overriding the default AMP validation process with a custom implementation. Requires a separate JavaScript file for the validator implementation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  amp: {
    validator: './custom_validator.js',
  },
}
```

----------------------------------------

TITLE: Installing Next.js Canary Version
DESCRIPTION: Command to explicitly install the canary release of Next.js, which contains the latest features and bugfixes that haven't been published to the stable channel yet.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/release-channels-publishing.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install next@canary
```

----------------------------------------

TITLE: Creating Next.js App with ButterCMS Example - Bash
DESCRIPTION: This snippet provides commands to create a new Next.js application using the predefined ButterCMS example, applicable for npm, yarn, and pnpm users. The tools needed include npx, yarn, or pnpm. The commands bootstrap a Next.js app using the ButterCMS example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-buttercms cms-buttercms-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-buttercms cms-buttercms-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-buttercms cms-buttercms-app
```

----------------------------------------

TITLE: Creating Next.js App with Segment Analytics using PNPM
DESCRIPTION: This command initializes a new Next.js application with the 'with-segment-analytics-pages-router' example using pnpm. It clones the example and sets up the necessary project structure for integrating Segment Analytics.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics-pages-router/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-segment-analytics-pages-router with-segment-analytics-app
```

----------------------------------------

TITLE: Warning for Unexpected Export Usage in CommonJS
DESCRIPTION: This snippet warns against the use of 'export *' in a CommonJS module, indicating that this pattern is only valid at runtime. It suggests listing all exports manually or rewriting the module to ECMAScript Module (ESM) format to eliminate additional runtime code.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/export-alls/cjs-2/issues/unexpected export __star__-f9a205.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
warning - [analysis] [project]/turbopack/crates/turbopack-tests/tests/snapshot/export-alls/cjs-2/input/commonjs.js  unexpected export *
  export * used with module [project]/turbopack/crates/turbopack-tests/tests/snapshot/export-alls/cjs-2/input/commonjs.js [test] (ecmascript) which is a CommonJS module with exports only available at runtime
  List all export names manually (`export { a, b, c } from "..."") or rewrite the module to ESM, to avoid the additional runtime code.
```

----------------------------------------

TITLE: Defining a Static Hello World Page in JavaScript
DESCRIPTION: This snippet defines a simple static page that renders the text 'hello world!'. It is intended to be served statically using Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/conflicting-ssg-paths.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export default function Hello() {
  return 'hello world!'
}
```

----------------------------------------

TITLE: Upgrading Next.js to Version 10 using Yarn
DESCRIPTION: Command to upgrade Next.js to version 10 using Yarn package manager. This will update the next package in your project's dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-10.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn add next@10
```

----------------------------------------

TITLE: Creating Next.js Temporal Project with Yarn
DESCRIPTION: Command to create a new Next.js project with Temporal integration using Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-temporal next-temporal-app
```

----------------------------------------

TITLE: Available Development Commands for Next.js with Electron
DESCRIPTION: This snippet lists available commands that can be executed in the terminal to build and manage the Next.js and Electron application. Each command serves a specific purpose such as building, starting in development mode, or checking TypeScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron-typescript/README.md#2025-04-21_snippet_1

LANGUAGE: Bash
CODE:
```
"build-renderer": build and transpile Next.js layer
```

LANGUAGE: Bash
CODE:
```
"build-electron": transpile electron layer
```

LANGUAGE: Bash
CODE:
```
"build": build both layers
```

LANGUAGE: Bash
CODE:
```
"dev": start dev version
```

LANGUAGE: Bash
CODE:
```
"dist": create production electron build
```

LANGUAGE: Bash
CODE:
```
"type-check": check TypeScript in project
```

----------------------------------------

TITLE: TypeScript Type Imports in Next.js v8 (Before)
DESCRIPTION: Example of common type imports from the `next`, `next/app`, and `next/document` packages used in Next.js version 8 projects.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import { NextContext } from 'next'
import { NextAppContext, DefaultAppIProps } from 'next/app'
import { NextDocumentContext, DefaultDocumentIProps } from 'next/document'
```

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: These commands install the necessary dependencies for the Next.js project. They illustrate the use of `yarn`, `npm`, and `pnpm` package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn install
# or
npm install
# or
pnpm install
```

----------------------------------------

TITLE: Initializing Next.js app with TinaCMS example using pnpm
DESCRIPTION: This command initializes a new Next.js application using the `cms-tina` example. It employs `pnpm create next-app` to set up the project, including the required files and dependencies for TinaCMS integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
"pnpm create next-app --example cms-tina cms-tina-app"
```

----------------------------------------

TITLE: Initializing Next.js App with Orbit-components using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application bootstrapped with the Orbit-components example. It utilizes the create next-app tool provided by Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-orbit-components/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-orbit-components with-orbit-components-app
```

----------------------------------------

TITLE: Creating Next.js App with HTTP2 Example using pnpm
DESCRIPTION: This command initializes a new Next.js application using the HTTP2 example template, utilizing pnpm as the package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-http2 with-http2-app
```

----------------------------------------

TITLE: Bootstrapping Next.js app with Stitches using npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-stitches example. It executes the create-next-app command with the specified example and application name. The command requires npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stitches/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-stitches with-stitches-app
```

----------------------------------------

TITLE: Fetch-Based Response Testing
DESCRIPTION: Retrieves page content via fetch and verifies response text contains expected content
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
it('should work with fetch', async () => {
  const res = await next.fetch('/')
  const html = await res.text()
  expect(html).toContain('hello world')
})
```

----------------------------------------

TITLE: Creating a Next.js app using create-next-app with pnpm
DESCRIPTION: This command leverages pnpm to generate a new Next.js application utilizing the DatoCMS example. The new project is initialized in a directory named cms-datocms-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-datocms cms-datocms-app
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses yarn to create a new Next.js application named 'with-apollo-and-redux-app' based on the 'with-apollo-and-redux' example. It leverages Yarn's create command to initialize the project with the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo-and-redux/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-apollo-and-redux with-apollo-and-redux-app
```

----------------------------------------

TITLE: Create Next.js App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the cms-wordpress example. It initializes a project named cms-wordpress-app in the current directory, using the specified example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-wordpress cms-wordpress-app
```

----------------------------------------

TITLE: Installing Next.js with Supabase Starter Template using PNPM
DESCRIPTION: Command to create a new Next.js application using the Supabase Starter template with PNPM. Sets up a project with all required configurations for Supabase integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-supabase with-supabase-app
```

----------------------------------------

TITLE: Creating Next.js app with Couchbase example
DESCRIPTION: These commands demonstrate how to create a new Next.js application using the Couchbase example.  It provides instructions for using npm, yarn, and pnpm to bootstrap the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-couchbase with-couchbase-app
```

----------------------------------------

TITLE: Creating and Managing Turso Databases
DESCRIPTION: This snippet shows how to create a database using Turso CLI and manage it via shell commands. It covers creating a database, connecting to it, and adding a `todos` table with specific columns.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
turso db create [database-name]
```

LANGUAGE: bash
CODE:
```
turso db shell <database-name>
```

LANGUAGE: bash
CODE:
```
CREATE TABLE todos(id INTEGER PRIMARY KEY AUTOINCREMENT, description TEXT NOT NULL)
```

----------------------------------------

TITLE: Installing @vercel/otel and OpenTelemetry dependencies
DESCRIPTION: Installs the necessary npm packages for using `@vercel/otel` to instrument a Next.js application with OpenTelemetry. This includes `@vercel/otel`, `@opentelemetry/sdk-logs`, `@opentelemetry/api-logs` and `@opentelemetry/instrumentation`. These packages provide the core functionalities for OpenTelemetry integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install @vercel/otel @opentelemetry/sdk-logs @opentelemetry/api-logs @opentelemetry/instrumentation
```

----------------------------------------

TITLE: Defining Custom Next.js Document Class
DESCRIPTION: Creates a custom class MyDocument that extends Next.js's base Document. It overrides getInitialProps to potentially inject custom styles and defines the render method to structure the basic HTML document using Next.js components.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_2

LANGUAGE: js
CODE:
```
class MyDocument extends Document {
    static async getInitialProps(ctx) {
        const initialProps = await Document.getInitialProps(ctx);
        return {
            ...initialProps,
            styles: _jsxs(_Fragment, {
                children: [
                    initialProps.styles,
                    _jsx("style", {
                        dangerouslySetInnerHTML: {
                            __html: `html { background: hotpink; }`
                        }
                    })
                ]
            })
        };
    }
    render() {
        return _jsxs(Html, {
            children: [
                _jsx(Head, {}),
                _jsxs("body", {
                    children: [
                        _jsx(Main, {}),
                        _jsx(NextScript, {})
                    ]
                })
            ]
        });
    }
}
```

----------------------------------------

TITLE: Full HTML Content Rendering Test
DESCRIPTION: Renders complete HTML and checks for specific content using string containment
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
it('should work with html', async () => {
  const html = await next.render('/')
  expect(html).toContain('hello world')
})
```

----------------------------------------

TITLE: Running home app with npm
DESCRIPTION: These commands navigate to the `home` directory, install dependencies using npm, and start the development server. The home app will be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cd home
npm install && npm run dev
```

----------------------------------------

TITLE: Enabling Auth Interrupts in Next.js - JavaScript
DESCRIPTION: This JavaScript code snippet shows how to enable the experimental authInterrupts option in a Next.js application. By adding authInterrupts: true to the experimental section of next.config.js, developers can make use of the forbidden and unauthorized APIs. This snippet depends on an existing Next.js setup and entails changing the module.exports object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/authInterrupts.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {\n  experimental: {\n    authInterrupts: true,\n  },\n}
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers. This allows developers to run the application locally for development purposes.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-empty/ts/README-template.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Outputting Open Graph Image Meta Tags - HTML
DESCRIPTION: Displays the standard HTML <head> meta tags automatically generated by Next.js when an opengraph-image file (JPG, JPEG, PNG, GIF) is placed in a route segment. These tags provide essential information about the image for social media sharing platforms.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_0

LANGUAGE: HTML
CODE:
```
<meta property="og:image" content="<generated>" />
<meta property="og:image:type" content="<generated>" />
<meta property="og:image:width" content="<generated>" />
<meta property="og:image:height" content="<generated>" />
```

----------------------------------------

TITLE: Committing and Pushing to Git
DESCRIPTION: These commands commit the changes to the local Git repository and push them to the remote GitHub repository. This triggers a deployment in Vercel, if the repository is linked to a Vercel project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
git add .
git commit -m "Initial commit"
git push
```

----------------------------------------

TITLE: Adding Git Remote
DESCRIPTION: This command adds a remote origin to the local Git repository, connecting it to a remote GitHub repository. This allows for pushing the local code to the remote repository for deployment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
git remote add origin https://github.com/<org>/<repo>.git
```

----------------------------------------

TITLE: Starting Temporal Server with Docker Compose
DESCRIPTION: Command to start the Temporal Server using Docker Compose.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
docker compose up
```

----------------------------------------

TITLE: Enabling Auth Interrupts in Next.js - TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates how to enable the experimental authInterrupts option in a Next.js application. By setting authInterrupts to true in the experimental section of next.config.ts, developers can utilize the forbidden and unauthorized APIs. This snippet requires the presence of a Next.js application and modifies the NextConfig object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/authInterrupts.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    authInterrupts: true,\n  },\n}\n\nexport default nextConfig
```

----------------------------------------

TITLE: Enabling View Transition API in Next.js config
DESCRIPTION: This code snippet demonstrates how to enable the experimental View Transition API by setting the `viewTransition` property to `true` within the `experimental` object of the `next.config.js` file. This configuration allows the application to leverage the View Transitions API for UI transitions. It's crucial to understand that this API is experimental and not recommended for production use.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/viewTransition.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    viewTransition: true,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Installing Next.js Canary Version for Partial Prerendering Preview
DESCRIPTION: To use the experimental Partial Prerendering Preview feature, you need to install the latest canary version of Next.js. This command installs the canary version using npm.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/ppr-preview.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install next@canary
```

----------------------------------------

TITLE: Create Next.js app with pnpm - Bash
DESCRIPTION: This command uses `create-next-app` and pnpm to bootstrap a new Next.js project based on the 'with-absolute-imports' example. The newly created project will reside in the 'with-absolute-imports-app' directory. Requires Node.js and pnpm installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_5

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example with-absolute-imports with-absolute-imports-app
```

----------------------------------------

TITLE: Correcting Path Parameter in Next.js app.render() Method
DESCRIPTION: When using the app.render() method in Next.js, ensure that the path parameter always starts with a forward slash ('/') to avoid unexpected behavior. This applies to the third argument of app.render(req, res, path).
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/render-no-starting-slash.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
app.render(req, res, '/your-path')
```

----------------------------------------

TITLE: Running Storybook
DESCRIPTION: These commands start the Storybook development server for the Next.js application.  They use `npm`, `yarn`, or `pnpm` to execute the `storybook` script defined in the `package.json` file.  The Storybook UI will be accessible in a web browser at a specified address.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm run storybook
# or
yarn storybook
# or
pnpm storybook
```

----------------------------------------

TITLE: AMP HTML Link (JSX)
DESCRIPTION: This code snippet shows how Next.js automatically insert a link to the AMP version of your page in the HTML version.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
<link rel="amphtml" href="/about.amp.html" />
```

----------------------------------------

TITLE: Starting Next.js Server on Reserved Port
DESCRIPTION: These examples demonstrate starting a Next.js server (in production or development mode) on port 4045, which is reserved for the Network Paging Protocol. This will result in an error as the port is reserved.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/reserved-port.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
next start -p 4045
```

LANGUAGE: bash
CODE:
```
next dev --port 4045
```

----------------------------------------

TITLE: Updating Webpack Version in package.json
DESCRIPTION: Example of how to set webpack version resolution in package.json to meet Next.js minimum requirement of v5.15.0
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-webpack-5-version.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "resolutions": {
    "webpack": "^5.15.0"
  }
}
```

----------------------------------------

TITLE: Deprecated withAmp HOC Usage (Before Migration)
DESCRIPTION: Example of how the `withAmp` Higher-Order Component was used in Next.js versions prior to v9 to enable AMP for a page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
import { withAmp } from 'next/amp'

function Home() {
  return <h1>My AMP Page</h1>
}

export default withAmp(Home)
// or
export default withAmp(Home, { hybrid: true })
```

----------------------------------------

TITLE: Incorrect Multi-match Route Configuration
DESCRIPTION: Example of an invalid route configuration where multi-match parameter is not properly handled in the destination route
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-multi-match.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  source: '/:path*',
  destination: '/another/:path'
}
```

----------------------------------------

TITLE: Copying Environment File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. This allows local environment variables to be configured without committing them to Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Installing EdgeDB CLI - Windows (Powershell)
DESCRIPTION: This command installs the EdgeDB CLI on Windows using PowerShell. It downloads and executes a PowerShell script from the EdgeDB website using `iwr` (Invoke-WebRequest) and `iex` (Invoke-Expression). The script handles the installation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_5

LANGUAGE: powershell
CODE:
```
$ iwr https://ps1.edgedb.com -useb | iex
```

----------------------------------------

TITLE: Creating Next.js app with three.js using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the three.js example. The `create next-app` command bootstraps the project, setting up the necessary files and dependencies. It uses the example name (`with-three-js`) and the desired application name (`with-three-js-app`) as arguments.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-three-js/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-three-js with-three-js-app
```

----------------------------------------

TITLE: Creating a Next.js app with Storybook example (pnpm)
DESCRIPTION: This command uses `create next-app` via pnpm to generate a new Next.js application pre-configured with Storybook. It utilizes an example template to include the necessary Storybook setup and configurations. The `with-storybook-app` argument specifies the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-storybook with-storybook-app
```

----------------------------------------

TITLE: Stopping Docker Containers and Freeing Space
DESCRIPTION: This snippet provides commands to stop all running Docker containers and remove orphaned volumes, thereby freeing up space on the system.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
# Stop all running containers

```

LANGUAGE: bash
CODE:
```
docker kill $(docker ps -aq) && docker rm $(docker ps -aq)
```

LANGUAGE: bash
CODE:
```
# Free space

```

LANGUAGE: bash
CODE:
```
docker system prune -af --volumes
```

----------------------------------------

TITLE: Upgrading Next.js to Version 13 with bun
DESCRIPTION: Command to upgrade Next.js to version 13 using bun package manager. Also updates React and React DOM to their latest versions, along with the Next.js ESLint configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
bun add next@13 react@latest react-dom@latest eslint-config-next@13
```

----------------------------------------

TITLE: Creating Next.js App using create-next-app with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named 'custom-server-app' based on the 'custom-server' example.  It leverages pnpm for efficient package management and installation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/custom-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example custom-server custom-server-app
```

----------------------------------------

TITLE: Creating a Next.js app with Storybook example
DESCRIPTION: This command uses `create-next-app` to generate a new Next.js application pre-configured with Storybook. It utilizes an example template to include the necessary Storybook setup and configurations. The `with-storybook-app` argument specifies the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-storybook with-storybook-app
```

----------------------------------------

TITLE: Creating Next.js App with Zones using npx
DESCRIPTION: This command uses npx to create a new Next.js application named `with-zones-app` based on the `with-zones` example. It bootstraps the project with the necessary files and configurations for a multi-zone setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-zones with-zones-app
```

----------------------------------------

TITLE: Configure Apollo GraphQL in JavaScript
DESCRIPTION: This JavaScript snippet configures the Apollo GraphQL extension for VS Code to provide auto-completion for GraphQL queries. It specifies the local schema file for the WordPress GraphQL endpoint.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  client: {
    service: {
      name: "WordPress",
      localSchemaFile: "./src/gql/schema.gql",
    },
  },
};
```

----------------------------------------

TITLE: Creating Next.js app with MDX pages using npx
DESCRIPTION: This command uses `create-next-app` with npx to initialize a new Next.js project with the `mdx-pages` example.  It creates a directory named `mdx-pages-app` for the new project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example mdx-pages mdx-pages-app
```

----------------------------------------

TITLE: Creating Next.js app with Compiled using npx
DESCRIPTION: This command uses npx to create a new Next.js application configured with the Compiled CSS-in-JS library. It downloads and executes the create-next-app package with the 'with-compiled-css' example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-compiled-css/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-compiled-css with-compiled-css-app
```

----------------------------------------

TITLE: Creating Next.js app with Sentry example
DESCRIPTION: These commands use `create-next-app` to create a new Next.js application using the `with-sentry` example.  It utilizes either npx, yarn, or pnpm to install the necessary dependencies and set up the project structure. The created app will have the Sentry integration already configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-sentry nextjs-sentry-example
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-sentry nextjs-sentry-example
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-sentry nextjs-sentry-example
```

----------------------------------------

TITLE: Upgrading Next.js and React Dependencies using pnpm
DESCRIPTION: Command to upgrade Next.js to version 11 and React to version 17 using pnpm package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm up next@11 react@17 react-dom@17
```

----------------------------------------

TITLE: Attempting to Import Server Component into Client Component in TypeScript
DESCRIPTION: This snippet illustrates an unsupported use case where a Client Component attempts to import a Server Component. Importing Server Components into Client Components is prohibited due to the necessary request-response lifecycle in React.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/03-rendering/03-composition-patterns.mdx#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
'use client'

// You cannot import a Server Component into a Client Component.
import ServerComponent from './Server-Component'

export default function ClientComponent({
  children,
}: {
  children: React.ReactNode
}) {
  const [count, setCount] = useState(0)

  return (
    <> 
      <button onClick={() => setCount(count + 1)}>{count}</button>

      <ServerComponent />
    </>
  )
}
```

----------------------------------------

TITLE: Updating Next.js and React Packages using bun
DESCRIPTION: This command updates the Next.js, React, React DOM, and eslint-config-next packages to version 12 using bun. It provides an alternative way to update dependencies using the bun package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
bun add next@12 react@17 react-dom@17 eslint-config-next@12
```

----------------------------------------

TITLE: Creating Next.js app with Couchbase example
DESCRIPTION: These commands demonstrate how to create a new Next.js application using the Couchbase example. It provides instructions for using npm, yarn, and pnpm to bootstrap the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-couchbase with-couchbase-app
```

----------------------------------------

TITLE: Create Next App with styled-components using npx
DESCRIPTION: This command initializes a new Next.js application using the with-styled-components example. It uses npx to execute create-next-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-components/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-styled-components with-styled-components-app
```

----------------------------------------

TITLE: Creating Next.js app with Rebass using pnpm
DESCRIPTION: This command utilizes pnpm to create a new Next.js application integrated with Rebass. It specifies the "with-rebass" example and names the new application "with-rebass-app".
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rebass/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-rebass with-rebass-app
```

----------------------------------------

TITLE: Creating Next.js app with Yoga Design System using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the Yoga Design System example. It initializes a project named `with-yoga-app` using the `with-yoga` example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yoga/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-yoga with-yoga-app
```

----------------------------------------

TITLE: Creating Next.js app with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-rbx-bulma-pro example. It initializes a project named with-rbx-bulma-pro-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rbx-bulma-pro/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app
```

----------------------------------------

TITLE: Creating Next.js App with remove-console Example (Yarn)
DESCRIPTION: This command uses `create next-app` with Yarn to create a new Next.js application based on the `remove-console` example. The new application will be named `remove-console-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/remove-console/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example remove-console remove-console-app
```

----------------------------------------

TITLE: Define customRandom Function - JavaScript
DESCRIPTION: Defines the `customRandom` function, which is a highly flexible ID generator. It takes an `alphabet` string, the desired ID `size`, and a `getRandom` function that provides random bytes. It returns a function that, when called, generates an ID of the specified size using the provided alphabet and random source.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
let customRandom = (alphabet, size, getRandom)=>{
    let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1;
    let step = Math.ceil((1.6 * mask * size) / alphabet.length);
    return ()=>{
        let id = '';
        while(true){
            let bytes = getRandom(step);
            let i = step;
            while(i--){
                id += alphabet[bytes[i] & mask] || '';
                if (id.length === size) return id;
            }
        }
    };
};
export { customRandom as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: HTML Link (JSX)
DESCRIPTION: This code snippet shows how Next.js automatically include a link to the HTML page in the AMP version of your page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/amp.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
<link rel="canonical" href="/about" />
```

----------------------------------------

TITLE: Upgrading Next.js and React Dependencies using yarn
DESCRIPTION: Command to upgrade Next.js to version 11 and React to version 17 using yarn package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn add next@11 react@17 react-dom@17
```

----------------------------------------

TITLE: Installing Next.js Bug Report Template with NPX
DESCRIPTION: Command to create a new Next.js bug report template project using NPX package runner.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template-pages/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example reproduction-template-pages reproduction-app
```

----------------------------------------

TITLE: Handling HMR WebSocket in Express
DESCRIPTION: This JavaScript code snippet shows how to handle the Webpack HMR WebSocket connection in a custom Express server. It uses `app.all` to ensure that all requests to `/_next/webpack-hmr` are passed to the Next.js request handler.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
app.all('/_next/webpack-hmr', (req, res) => {
  nextjsRequestHandler(req, res)
})
```

----------------------------------------

TITLE: Defining Responsive Column Gap Utility - Part 14 - JavaScript
DESCRIPTION: Creates a function `columnGap` that applies responsive `column-gap` CSS property based on input props, theme spacing, and breakpoints. It uses spacing and breakpoint helpers. Exports the function for internal use (aliased as `b`) via Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_40

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { createUnaryUnit } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { getValue } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import { handleBreakpoints } from './breakpoints';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 12
};
const columnGap = (props)=>{
    if (props.columnGap !== undefined && props.columnGap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
        const styleFromPropValue = (propValue)=>(
                {
                columnGap: getValue(transformer, propValue)
            });
        return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
};
export { columnGap as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Upgrade Next.js using yarn
DESCRIPTION: Installs Next.js version 9 using the yarn package manager. Use this command if your project uses yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
yarn add next@9
```

----------------------------------------

TITLE: Initializing OpenTelemetry API based on Runtime Javascript
DESCRIPTION: Initializes the `api` variable by conditionally requiring the OpenTelemetry API module. It attempts to load the standard `@opentelemetry/api` module and falls back to a compiled version specific to Next.js if running in the 'edge' runtime or if the standard import fails.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
if (process.env.NEXT_RUNTIME === 'edge') {
    api = require('@opentelemetry/api');
} else {
    try {
        api = require('@opentelemetry/api');
    } catch (err) {
        api = require('next/dist/compiled/@opentelemetry/api');
    }
}

```

----------------------------------------

TITLE: Setting BLOG_URL environment variable
DESCRIPTION: This command sets the BLOG_URL environment variable in the `.env` file.  The URL should point to the deployed blog application on Vercel. This allows the 'home' app to rewrite requests to the 'blog' app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
# Replace this URL with the URL of your blog app
BLOG_URL="https://with-zones-blog.vercel.app"
```

----------------------------------------

TITLE: Configure PostCSS plugins for Next.js with CSS Grid support (JSON)
DESCRIPTION: This JSON configuration file for PostCSS enables IE11 support for CSS Grid Layout. It uses `postcss-flexbugs-fixes` and `postcss-preset-env` plugins.  `postcss-flexbugs-fixes` corrects cross-browser flexbox bugs. `postcss-preset-env` applies modern CSS features with Autoprefixer configured to enable flexbox and grid. The `custom-properties` feature is disabled.  Requires `postcss-flexbugs-fixes` and `postcss-preset-env` to be installed as dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "plugins": [
    "postcss-flexbugs-fixes",
    [
      "postcss-preset-env",
      {
        "autoprefixer": {
          "flexbox": "no-2009",
          "grid": "autoplace"
        },
        "stage": 3,
        "features": {
          "custom-properties": false
        }
      }
    ]
  ]
}
```

----------------------------------------

TITLE: Highlighting Lines in TypeScript Code
DESCRIPTION: This snippet shows how to highlight specific lines in TypeScript code blocks. The `highlight` prop is used to specify which lines to emphasize, with options for single or multiple lines.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/about">About</Link>
}
```

----------------------------------------

TITLE: Implementing Next.js OpenTelemetry Tracer - JavaScript
DESCRIPTION: Defines the `NextTracerImpl` class providing methods for managing OpenTelemetry traces and spans in Next.js applications. It handles starting, wrapping, and propagating spans, manages root span attributes, and integrates with performance monitoring. Depends on OpenTelemetry APIs (`trace`, `context`, `propagation`, `api`) and custom utilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_21

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { NextVanillaSpanAllowlist } from './constants';
import { a as api } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import { g as ROOT_CONTEXT } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import { h as closeSpanWithError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -9
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { LogSpanAllowList } from './constants';
import { i as rootSpanAttributesStore } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -13
};
import { d as trace } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import { b as context } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import { c as propagation } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
const isPromise = (p)=>{
    return p !== null && typeof p === 'object' && typeof p.then === 'function';
};
const rootSpanIdKey = api.createContextKey('next.rootSpanId');
let lastSpanId = 0;
const getSpanId = ()=>lastSpanId++;
const clientTraceDataSetter = {
    set (carrier, key, value) {
        carrier.push({
            key,
            value
        });
    }
};
class NextTracerImpl {
    getTracerInstance() {
        return trace.getTracer('next.js', '0.0.1');
    }
    getContext() {
        return context;
    }
    getTracePropagationData() {
        const activeContext = context.active();
        const entries = [];
        propagation.inject(activeContext, entries, clientTraceDataSetter);
        return entries;
    }
    getActiveScopeSpan() {
        return trace.getSpan(context == null ? void 0 : context.active());
    }
    withPropagatedContext(carrier, fn, getter) {
        const activeContext = context.active();
        if (trace.getSpanContext(activeContext)) {
            return fn();
        }
        const remoteContext = propagation.extract(activeContext, carrier, getter);
        return context.with(remoteContext, fn);
    }
    trace(...args) {
        var _trace_getSpanContext;
        const [type, fnOrOptions, fnOrEmpty] = args;
        const { fn, options } = typeof fnOrOptions === 'function' ? {
            fn: fnOrOptions,
            options: {}
        } : {
            fn: fnOrEmpty,
            options: {
                ...fnOrOptions
            }
        };
        const spanName = options.spanName ?? type;
        if (!NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== '1' || options.hideSpan) {
            return fn();
        }
        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        let isRootSpan = false;
        if (!spanContext) {
            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;
            isRootSpan = true;
        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {
            isRootSpan = true;
        }
        const spanId = getSpanId();
        options.attributes = {
            'next.span_name': spanName,
            'next.span_type': type,
            ...options.attributes
        };
        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{
                const startTime = 'performance' in globalThis && 'measure' in performance ? globalThis.performance.now() : undefined;
                const onCleanup = ()=>{
                    rootSpanAttributesStore.delete(spanId);
                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && LogSpanAllowList.includes(type || '')) {
                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split('.').pop() || '').replace(/[A-Z]/g, (match)=>'-' + match.toLowerCase())}`, {
                            start: startTime,
                            end: performance.now()
                        });
                    }
                };
                if (isRootSpan) {
                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));
                }
                try {
                    if (fn.length > 1) {
                        return fn(span, (err)=>closeSpanWithError(span, err));
                    }
                    const result = fn(span);
                    if (isPromise(result)) {
                        return result.then((res)=>{
                            span.end();
                            return res;
                        }).catch((err)=>{
                            closeSpanWithError(span, err);
                            throw err;
                        }).finally(onCleanup);
                    } else {
                        span.end();
                        onCleanup();
                    }
                    return result;
                } catch (err) {
                    closeSpanWithError(span, err);
                    onCleanup();
                    throw err;
                }
            }));
    }
    wrap(...args) {
        const tracer = this;
        const [name, options, fn] = args.length === 3 ? args : [
            args[0],
            {},
            args[1]
        ];
        if (!NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== '1') {
            return fn;
        }
        return function() {
            let optionsObj = options;
            if (typeof optionsObj === 'function' && typeof fn === 'function') {
                optionsObj = optionsObj.apply(this, arguments);
            }
            const lastArgId = arguments.length - 1;
            const cb = arguments[lastArgId];
            if (typeof cb === 'function') {
                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);
                return tracer.trace(name, optionsObj, (_span, done)=>{
                    arguments[lastArgId] = function(err) {
                        done == null ? void 0 : done(err);
                        return scopeBoundCb.apply(this, arguments);
                    };
                    return fn.apply(this, arguments);
                });
            } else {
                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));
            }
        };
    }
    startSpan(...args) {
        const [type, options] = args;
        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        return this.getTracerInstance().startSpan(type, options, spanContext);
    }
    getSpanContext(parentSpan) {
        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;
        return spanContext;
    }
    getRootSpanAttributes() {
        const spanId = context.active().getValue(rootSpanIdKey);
        return rootSpanAttributesStore.get(spanId);
    }
}
const getTracer = (()=>{n
    const tracer = new NextTracerImpl();
    return ()=>tracer;
})();
export { getTracer };
export { isPromise as j } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { rootSpanIdKey as k } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { lastSpanId as l } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { getSpanId as m } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { clientTraceDataSetter as n } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { NextTracerImpl as o } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { getTracer as p } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Implementing Next.js Component with Head Configuration in JSX
DESCRIPTION: This code snippet demonstrates how to create a Nextra component in a Next.js application. It includes head configurations for RSS feed link and font preloading, then renders the passed component with its props.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/markdown.md#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
export default function Nextra({ Component, pageProps }) {
  return (
    <>
      <Head>
        <link
          rel="alternate"
          type="application/rss+xml"
          title="RSS"
          href="/feed.xml"
        />
        <link
          rel="preload"
          href="/fonts/Inter-roman.latin.var.woff2"
          as="font"
          type="font/woff2"
          crossOrigin="anonymous"
        />
      </Head>
      <Component {...pageProps} />
    </>
  )
}
```

----------------------------------------

TITLE: Webpack Configuration with Promise in Next.js
DESCRIPTION: This code snippet shows an example of a next.config.js file where the webpack function returns a Promise, which is not supported in Next.js versions prior to 12.0.10. The error arises because Next.js expects the webpack function to return the configuration directly, not a Promise that resolves to the configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/promise-in-next-config.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  webpack: async function (config) {
    return config
  },
}
```

----------------------------------------

TITLE: Enabling SWC Trace Profiling in Next.js Configuration
DESCRIPTION: This snippet shows how to enable SWC trace profiling in the Next.js configuration file. When enabled, SWC will generate trace files that can be visualized using various tools.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
module.exports = {
  experimental: {
    swcTraceProfiling: true,
  },
}
```

----------------------------------------

TITLE: Output HTML for favicon.ico - HTML
DESCRIPTION: Shows the HTML <link> tag generated in the document's <head> when a favicon.ico file is placed in the root /app directory of a Next.js project. This tag links the browser to the favicon image.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_0

LANGUAGE: html
CODE:
```
<link rel="icon" href="/favicon.ico" sizes="any" />
```

----------------------------------------

TITLE: Initializing Next.js project with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-route-as-modal example. It clones the example project into a new directory specified by 'with-route-as-modal-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-route-as-modal/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-route-as-modal with-route-as-modal-app
```

----------------------------------------

TITLE: Committing Changes to Next.js
DESCRIPTION: Git commands to stage and commit changes to the local development branch with a descriptive message.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
git add .
git commit -m "DESCRIBE_YOUR_CHANGES_HERE"
```

----------------------------------------

TITLE: Seeding the database - Bash
DESCRIPTION: This command seeds the EdgeDB database. It executes the `seed.ts` TypeScript file using `ts-node`.  It requires `ts-node` to be installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
$ npx ts-node seed.ts
```

----------------------------------------

TITLE: Configuring dynamicIO in Next.js Config
DESCRIPTION: Example configuration for enabling the dynamicIO experimental flag in a Next.js application's config file. This setting makes data fetching operations run at runtime by default unless explicitly cached.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/dynamicIO.mdx#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Upgrade Next.js using npm
DESCRIPTION: Installs Next.js version 9 using the npm package manager. This is the first step in upgrading your application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@9
```

----------------------------------------

TITLE: Determining Valid React Element Types
DESCRIPTION: Demonstrates how to use the isValidElementType function to check if various values are valid React element types, including HTML tags, class components, function components, and contexts.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import React from "react";
import * as ReactIs from "react-is";

class ClassComponent extends React.Component {
  render() {
    return React.createElement("div");
  }
}

const FunctionComponent = () => React.createElement("div");

const ForwardRefComponent = React.forwardRef((props, ref) =>
  React.createElement(Component, { forwardedRef: ref, ...props })
);

const Context = React.createContext(false);

ReactIs.isValidElementType("div"); // true
ReactIs.isValidElementType(ClassComponent); // true
ReactIs.isValidElementType(FunctionComponent); // true
ReactIs.isValidElementType(ForwardRefComponent); // true
ReactIs.isValidElementType(Context.Provider); // true
ReactIs.isValidElementType(Context.Consumer); // true
```

----------------------------------------

TITLE: Installing XState Inspect
DESCRIPTION: This command installs the @xstate/inspect package, which provides debugging and visualization tools for XState. It's installed using Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn add @xstate/inspect
```

----------------------------------------

TITLE: Creating Next.js App with Playwright Example (Yarn)
DESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with a pre-configured Playwright setup. It utilizes the `--example` flag to specify the `with-playwright` example. It requires Yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-playwright/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-playwright with-playwright-app
```

----------------------------------------

TITLE: Disabling All Logging in Development
DESCRIPTION: Disables all development logging by setting `logging` to `false` in `next.config.js`. This configuration ensures no logs are recorded during development sessions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/logging.mdx#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  logging: false,
}
```

----------------------------------------

TITLE: Creating a Next.js App using npm
DESCRIPTION: This command utilizes npm's create-next-app to scaffold a new Next.js project with the 'with-passport' example. It creates a directory named 'with-passport-app' containing the boilerplate code for the authentication example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-passport with-passport-app
```

----------------------------------------

TITLE: Upgrade Next.js using pnpm
DESCRIPTION: Installs Next.js version 9 using the pnpm package manager. Use this command if your project uses pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm up next@9
```

----------------------------------------

TITLE: Creating Next.js app with Overmind using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the Overmind example. It utilizes the create next-app tool and specifies the 'with-overmind' example and 'with-overmind-app' as the application name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-overmind/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-overmind with-overmind-app
```

----------------------------------------

TITLE: Creating Next.js app with MongoDB and Mongoose Example
DESCRIPTION: This snippet shows how to create a new Next.js application using the `with-mongodb-mongoose` example. It uses `create-next-app` with different package managers like npm, yarn, and pnpm to bootstrap the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mongodb-mongoose with-mongodb-mongoose-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mongodb-mongoose with-mongodb-mongoose-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mongodb-mongoose with-mongodb-mongoose-app
```

----------------------------------------

TITLE: Creating Next.js App with Ghost Example (yarn)
DESCRIPTION: This command uses `create-next-app` with Yarn to bootstrap a new Next.js application using the Ghost CMS example. It sets up a new project directory `cms-ghost-app` with pre-configured files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-ghost cms-ghost-app
```

----------------------------------------

TITLE: Creating Next.js app with Couchbase example
DESCRIPTION: These commands demonstrate how to create a new Next.js application using the Couchbase example. It provides instructions for using npm, yarn, and pnpm to bootstrap the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-couchbase with-couchbase-app
```

----------------------------------------

TITLE: Creating Next.js App with MongoDB Example (pnpm)
DESCRIPTION: This command employs pnpm to generate a new Next.js application using the `with-mongodb` example. It creates a project named `with-mongodb-app` based on the given template. Make sure pnpm is installed before executing this command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mongodb with-mongodb-app
```

----------------------------------------

TITLE: Creating Next.js App with Radix UI using pnpm
DESCRIPTION: This command creates a new Next.js application using the radix-ui example template. It utilizes pnpm to execute create next-app with the specified example and project name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/radix-ui/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example radix-ui radix-ui-app
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command uses `create-next-app` with Yarn to bootstrap a Next.js application using the `with-cypress` example. It initializes a new project named `with-cypress-app` in the current directory. It requires Yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cypress/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-cypress with-cypress-app
```

----------------------------------------

TITLE: Enable CSS Grid Layout for IE11 using Autoprefixer
DESCRIPTION: This CSS comment enables CSS Grid Layout compilation for IE11 by instructing Autoprefixer to use the `autoplace` grid value. It should be placed at the top of the CSS file where grid layout is used.  No dependencies are explicitly required beyond standard CSS capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/post-css.mdx#_snippet_0

LANGUAGE: css
CODE:
```
/* autoprefixer grid: autoplace */
```

----------------------------------------

TITLE: Creating Next.js app with Neo4j example using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the `with-neo4j` example. It automates the setup process, pulling the necessary files and configurations to get started with a Next.js and Neo4j integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-neo4j with-neo4j-app
```

----------------------------------------

TITLE: Running Mocha tests with Yarn
DESCRIPTION: This command executes the Mocha test suite using Yarn.  It assumes a 'test' script is defined in the `package.json` file to run the tests.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn test
```

----------------------------------------

TITLE: Creating Next.js app with yarn
DESCRIPTION: This command creates a new Next.js application using the `with-sitemap` example. It leverages `create-next-app` via yarn. The created app will be named `with-sitemap-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-sitemap with-sitemap-app
```

----------------------------------------

TITLE: Initializing Blog with Comments Application using create-next-app
DESCRIPTION: This snippet demonstrates how to initialize a new Next.js application using the create-next-app package, specifically the blog-with-comment example. It requires Node.js and npm or Yarn installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example blog-with-comment blog-with-comment-app
```

----------------------------------------

TITLE: Initializing Next.js app with cms-payload example using npx
DESCRIPTION: This command uses `npx` to create a new Next.js application using the `cms-payload` example. It creates a directory named `cms-payload-app` for the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-payload/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-payload cms-payload-app
```

----------------------------------------

TITLE: Creating Next.js App with reactstrap using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application using the with-reactstrap example.  It provides the initial project structure for a Next.js application utilizing reactstrap components.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reactstrap/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-reactstrap with-reactstrap-app
```

----------------------------------------

TITLE: Bootstrapping Next.js App with PNPM
DESCRIPTION: This snippet demonstrates how to bootstrap a Next.js application using the create-next-app command with pnpm. It sets up the app with the Docker Compose example provided.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-docker-compose with-docker-compose-app
```

----------------------------------------

TITLE: Running Mocha tests with npm
DESCRIPTION: This command executes the Mocha test suite using npm.  It assumes a 'test' script is defined in the `package.json` file to run the tests.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm run test
```

----------------------------------------

TITLE: Installing Next.js Bug Report Template with PNPM
DESCRIPTION: Command to create a new Next.js bug report template project using PNPM package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template-pages/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example reproduction-template-pages reproduction-app
```

----------------------------------------

TITLE: Creating Next.js app with Sitefinity example
DESCRIPTION: This command initializes a new Next.js application using the cms-sitefinity example. It utilizes yarn to execute the create next-app command with the specified example and target directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-sitefinity cms-sitefinity-app
```

----------------------------------------

TITLE: Configuring authInterrupts in next.config.js
DESCRIPTION: This snippet shows how to enable the experimental `authInterrupts` configuration option in the `next.config.js` file. This option is required to use the `forbidden` function.  The configuration enables the feature by setting `authInterrupts` to `true` within the `experimental` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  experimental: {
    authInterrupts: true,
  },
}
```

----------------------------------------

TITLE: Configuring Next.js with Experimental Options in TypeScript
DESCRIPTION: This snippet shows how to enable the experimental authInterrupts option in a Next.js configuration using TypeScript. It demonstrates importing NextConfig type, setting experimental features, and exporting the configuration. This setup is mandatory to use the unauthorized function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    authInterrupts: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Creating a Next.js App with Prepr Example
DESCRIPTION: This snippet shows how to create a Next.js application using the Prepr example template. It utilizes `npx`, `yarn`, and `pnpm` package managers to bootstrap the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-prepr cms-prepr-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-prepr cms-prepr-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-prepr cms-prepr-app
```

----------------------------------------

TITLE: Setting Content Disposition Type in Next.js
DESCRIPTION: This code snippet shows how to configure the `contentDispositionType` option in `next.config.js` to control how the browser handles images served by the Next.js Image Optimization API. Setting it to `inline` allows the browser to render the image directly instead of downloading it.  This setting affects how the browser displays the image when visited directly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_19

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  images: {
    contentDispositionType: 'inline',
  },
}
```

----------------------------------------

TITLE: Transforming Markdown to HTML with Unified
DESCRIPTION: Illustrates the underlying process of converting markdown to HTML using the `unified` ecosystem with `remark` and `rehype` plugins. This pipeline shows how markdown AST is parsed and transformed into HTML AST before being serialized.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_23

LANGUAGE: javascript
CODE:
```
import { unified } from 'unified'
import remarkParse from 'remark-parse'
import remarkRehype from 'remark-rehype'
import rehypeSanitize from 'rehype-sanitize'
import rehypeStringify from 'rehype-stringify'

main()

async function main() {
  const file = await unified()
    .use(remarkParse) // Convert into markdown AST
    .use(remarkRehype) // Transform to HTML AST
    .use(rehypeSanitize) // Sanitize HTML input
    .use(rehypeStringify) // Convert AST into serialized HTML
    .process('Hello, Next.js!')

  console.log(String(file)) // <p>Hello, Next.js!</p>
}
```

----------------------------------------

TITLE: Creating Next.js App with Fauna Example (yarn)
DESCRIPTION: Uses `create next-app` command from Yarn to create a new Next.js application based on `with-fauna` example. The created application is named `with-fauna-app`. This installs all needed dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fauna/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-fauna with-fauna-app
```

----------------------------------------

TITLE: Creating Next.js app using create-next-app with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application named 'image-app' based on the 'image-component' example. It initializes a new project with the specified template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-component/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example image-component image-app
```

----------------------------------------

TITLE: Creating Next.js app with Stencil example using yarn
DESCRIPTION: This command uses `yarn` to create a new Next.js application based on the `with-stencil` example. It initializes a project named `with-stencil-app` using the specified example from the Next.js repository. It requires Node.js and Yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-stencil with-stencil-app
```

----------------------------------------

TITLE: Creating Next.js app with styled-jsx using npm
DESCRIPTION: This command uses npm to create a new Next.js application using the styled-jsx example. It utilizes the create-next-app tool to scaffold a project with the necessary dependencies and configurations for styled-jsx. The resulting application will be named 'with-styled-jsx-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-jsx/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-styled-jsx with-styled-jsx-app
```

----------------------------------------

TITLE: Initializing Next.js app with Rematch using npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the 'with-rematch' example.  It sets up a project named 'with-rematch-app' in the current directory.  This assumes npm is installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rematch/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-rematch with-rematch-app
```

----------------------------------------

TITLE: Initializing Next.js app with Stripe TypeScript example (pnpm)
DESCRIPTION: This command initializes a new Next.js application using the `with-stripe-typescript` example from the Next.js repository. It uses `create-next-app` via `pnpm` to bootstrap the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-stripe-typescript with-stripe-typescript-app
```

----------------------------------------

TITLE: Creating Next.js App with MongoDB Example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application using the `with-mongodb` example. It initializes a project named `with-mongodb-app` based on the specified example template. Ensure npm is installed before running this command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mongodb with-mongodb-app
```

----------------------------------------

TITLE: Setting Markdown Frontmatter for Next.js Page
DESCRIPTION: Defines the frontmatter metadata for a Next.js page, specifying the page type, title, and creation date. This metadata is used by Next.js and Nextra to properly render the page.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/index.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
type: page
title: About
date: 2021-03-19
---
```

----------------------------------------

TITLE: Destructuring OpenTelemetry API Properties Javascript
DESCRIPTION: Destructures essential components (`context`, `propagation`, `trace`, `SpanStatusCode`, `SpanKind`, `ROOT_CONTEXT`) from the loaded OpenTelemetry API `api` object for easier access throughout the tracing implementation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } = api;

```

----------------------------------------

TITLE: Terminal Output Example
DESCRIPTION: This is an example of terminal output showing a Next.js configuration error. It indicates that the configuration file contains an unexpected property. It helps developers pinpoint and correct typos or invalid configuration options in `next.config.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-next-config.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
The root value has an unexpected property, rewritess, which is not in the list of allowed properties
```

----------------------------------------

TITLE: Installing Next.js Reproduction Template with NPX
DESCRIPTION: Command to create a new Next.js reproduction template project using NPX package runner
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example reproduction-template reproduction-app
```

----------------------------------------

TITLE: Creating a Response (Incorrect)
DESCRIPTION: Illustrates the incorrect ways of creating responses directly in Next.js Middleware, which is no longer supported as of version v12.2+. These methods include creating responses with text, streams, buffers, and JSON data.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/returning-response-body-in-middleware.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
new Response('a text value')
new Response(streamOrBuffer)
new Response(JSON.stringify(obj), { headers: 'application/json' })
NextResponse.json()
```

----------------------------------------

TITLE: Installing react-is Package with Yarn and NPM
DESCRIPTION: Command-line instructions for installing the react-is package using either Yarn or NPM package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# Yarn
yarn add react-is

# NPM
npm install react-is
```

----------------------------------------

TITLE: Using next/compat/router in getServerSideProps
DESCRIPTION: This code snippet demonstrates using `next/compat/router` within `getServerSideProps` in the `pages` directory. This avoids errors when rendering components outside of the usual Next.js context. It allows the component to gracefully handle cases where the router is not immediately available.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_15

LANGUAGE: jsx
CODE:
```
import { renderToString } from 'react-dom/server'
import { useRouter } from 'next/compat/router'
const MyComponent = () => {
  const router = useRouter() // may be null or a NextRouter instance
  // ...
}
export async function getServerSideProps() {
  const renderedComponent = renderToString(<MyComponent />)
  return {
    props: {
      renderedComponent,
    },
  }
}
```

----------------------------------------

TITLE: Disabling Suspense Boundary Check in Next.js Configuration
DESCRIPTION: Configuration example showing how to disable the missingSuspenseWithCSRBailout check in Next.js version 14.x. This is not recommended but provided as a temporary solution if needed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-suspense-with-csr-bailout.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  experimental: {
    missingSuspenseWithCSRBailout: false,
  },
}
```

----------------------------------------

TITLE: Export Multiple Nanoid Utilities - JavaScript
DESCRIPTION: This snippet exports multiple key functions and values from the nanoid library (`customAlphabet`, `customRandom`, `nanoid`, `random`, `urlAlphabet`), likely forming the public API surface of this specific bundle part.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
export { customAlphabet } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export customAlphabet"
};
export { customRandom } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export customRandom"
};
export { nanoid } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export nanoid"
};
export { random } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export random"
};
export { urlAlphabet } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export urlAlphabet"
};
```

----------------------------------------

TITLE: Upgrade Next.js using bun
DESCRIPTION: Installs Next.js version 9 using the bun package manager. Use this command if your project uses bun.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
bun add next@9
```

----------------------------------------

TITLE: Creating a Pull Request with GitHub CLI
DESCRIPTION: Command to create a pull request using GitHub CLI, which automatically handles forking and setting up remote branches.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
gh pr create
```

----------------------------------------

TITLE: Define WordPress Constants in PHP
DESCRIPTION: These constants need to be defined in WordPress' wp-config.php file. HEADLESS_SECRET is used for public exchanges between frontend and backend. HEADLESS_URL is the URL for local development. GRAPHQL_JWT_AUTH_SECRET_KEY is the secret key for WPGraphQL JWT Authentication, and GRAPHQL_JWT_AUTH_CORS_ENABLE enables CORS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_4

LANGUAGE: php
CODE:
```
define('HEADLESS_SECRET', 'INSERT_RANDOM_SECRET_KEY');
   define('HEADLESS_URL', 'INSERT_LOCAL_DEVELOPMENT_URL'); // http://localhost:3000 for local development
   define('GRAPHQL_JWT_AUTH_SECRET_KEY', 'INSERT_RANDOM_SECRET_KEY');
   define('GRAPHQL_JWT_AUTH_CORS_ENABLE', true);
```

----------------------------------------

TITLE: Importing External Module - Part 0 - JavaScript
DESCRIPTION: This module part imports a standard external module named 'module'. It serves as a basic dependency inclusion point within the Turbopack build structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import "module";
```

----------------------------------------

TITLE: Using onLoadingComplete Callback with Next.js Image Component (Client Component)
DESCRIPTION: Example of using the onLoadingComplete callback in a client component with Next.js Image. This deprecated callback is triggered once the image is completely loaded and the placeholder is removed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#2025-04-21_snippet_8

LANGUAGE: jsx
CODE:
```
'use client'

<Image onLoadingComplete={(img) => console.log(img.naturalWidth)} />
```

----------------------------------------

TITLE: TS and JS Switcher in MDX Documentation
DESCRIPTION: This code excerpt illustrates how to set up a TS and JS switcher in MDX documentation to allow users to toggle between TypeScript and JavaScript code examples.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_7

LANGUAGE: mdx
CODE:
```

```tsx filename="app/page.tsx" switcher

```

```jsx filename="app/page.js" switcher

```

```

----------------------------------------

TITLE: Running Unit Tests for Stencil Components
DESCRIPTION: Command to execute unit tests for the Stencil components.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm test
```

----------------------------------------

TITLE: Enabling Node.js Runtime for Next.js Middleware (JS)
DESCRIPTION: Configures Next.js to enable the experimental Node.js runtime for middleware by adding `nodeMiddleware: true` within the `experimental` object in the `next.config.js` file. This feature is experimental and requires a canary build of Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_20

LANGUAGE: javascript
CODE:
```
const nextConfig = {
  experimental: {
    nodeMiddleware: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Generating Next.js Tarball for Testing
DESCRIPTION: Command to generate a tarball of the local Next.js version for testing in other projects.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_13

LANGUAGE: bash
CODE:
```
pnpm pack-next
```

----------------------------------------

TITLE: Creating Next.js app with react-bootstrap using yarn
DESCRIPTION: This command uses yarn to execute create next-app with the with-react-bootstrap example. It creates a new Next.js application named 'with-react-bootstrap-app' with the react-bootstrap setup. The command requires Node.js and yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-bootstrap/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-bootstrap with-react-bootstrap-app
```

----------------------------------------

TITLE: Disabling TypeScript Errors in Production Builds with Next.js Configuration
DESCRIPTION: This configuration allows Next.js to complete production builds even when TypeScript errors are present in the project. It sets the 'ignoreBuildErrors' flag to true in the TypeScript configuration section of next.config.ts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  typescript: {
    // !! WARN !!
    // Dangerously allow production builds to successfully complete even if
    // your project has type errors.
    // !! WARN !!
    ignoreBuildErrors: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: TypeScript Definitions for Next.js after Serverless Context
DESCRIPTION: This snippet provides the TypeScript type definitions (`NextRequestContext` and `NextRequestContextValue`) expected by Next.js for serverless platform integrations supporting the `after` function. It defines the structure of the object expected to be available via `globalThis[Symbol.for('@next/request-context')]`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/after.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
type NextRequestContext = {
  get(): NextRequestContextValue | undefined;
};

type NextRequestContextValue = {
  waitUntil?: (promise: Promise<any>) => void;
};
```

----------------------------------------

TITLE: Importing Regenerator Runtime in CommonJS
DESCRIPTION: This code snippet demonstrates how to import the regenerator-runtime module using CommonJS syntax. It defines the 'regeneratorRuntime' variable which can be utilized for handling generator and async functions. Ensure that Node.js is set up correctly to use this module.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
// CommonJS
const regeneratorRuntime = require("regenerator-runtime");
```

----------------------------------------

TITLE: Renaming Environment File in Markdown
DESCRIPTION: Instructions for renaming the environment file and adding required tokens. This step is crucial for setting up the benchmarking script with the necessary Vercel credentials.
SOURCE: https://github.com/vercel/next.js/blob/canary/bench/vercel/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
Rename the provided `./env.local` file to `./env` and fill in the required `VERCEL_TEST_TOKEN` and `VERCEL_TEST_TEAM` values. You can find and generate those from vercel.com.
```

----------------------------------------

TITLE: Configuring Next.js Compiler Options in next.config.js
DESCRIPTION: Demonstrates compiler options configuration that may be ignored when Babel is detected as the compiler. Only applicable to the new Rust-based compiler.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/ignored-compiler-options.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// next.config.js
module.exports = {
  compiler: {
    // Compiler-specific options that may be ignored with Babel
  }
}
```

----------------------------------------

TITLE: TypeScript Type Imports in Next.js v9 (After)
DESCRIPTION: Example of updated type imports in Next.js version 9, showing the new structure for `NextPageContext`, `AppContext`, `AppInitialProps`, `DocumentContext`, and `DocumentInitialProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { NextPageContext } from 'next'
import { AppContext, AppInitialProps } from 'next/app'
import { DocumentContext, DocumentInitialProps } from 'next/document'
```

----------------------------------------

TITLE: Identifying React Context Elements
DESCRIPTION: Shows how to use react-is to check if elements are Context Providers or Consumers, using both the type-specific functions and the general typeOf function.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import React from "react";
import * as ReactIs from 'react-is';

const ThemeContext = React.createContext("blue");

ReactIs.isContextConsumer(<ThemeContext.Consumer />); // true
ReactIs.isContextProvider(<ThemeContext.Provider />); // true
ReactIs.typeOf(<ThemeContext.Provider />) === ReactIs.ContextProvider; // true
ReactIs.typeOf(<ThemeContext.Consumer />) === ReactIs.ContextConsumer; // true
```

----------------------------------------

TITLE: Fetching Data on Client with useEffect in Next.js (TSX/JSX)
DESCRIPTION: Shows how to fetch data on the client-side using the `useEffect` hook and `useState` for state management within a React Client Component (marked with `'use client'`). It fetches blog posts after the component mounts and displays a loading message until the data is available. This approach is generally less recommended than server-side fetching in the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/01-fetching.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import { useState, useEffect } from 'react'

export function Posts() {
  const [posts, setPosts] = useState(null)

  useEffect(() => {
    async function fetchPosts() {
      const res = await fetch('https://api.vercel.app/blog')
      const data = await res.json()
      setPosts(data)
    }
    fetchPosts()
  }, [])

  if (!posts) return <div>Loading...</div>

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useState, useEffect } from 'react'

export function Posts() {
  const [posts, setPosts] = useState(null)

  useEffect(() => {
    async function fetchPosts() {
      const res = await fetch('https://api.vercel.app/blog')
      const data = await res.json()
      setPosts(data)
    }
    fetchPosts()
  }, [])

  if (!posts) return <div>Loading...</div>

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Adding Preconnect for Google Fonts in Next.js (JSX)
DESCRIPTION: This snippet demonstrates how to add a preconnect hint to the Google Fonts domain in a Next.js application by modifying the _document.js file to include a link with rel='preconnect'. Make sure Next.js version is 12.0.1 or higher as it adds preconnect automatically. This helps in establishing an early connection, reducing latency on font requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/google-font-preconnect.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
<link rel="preconnect" href="https://fonts.gstatic.com" />
```

----------------------------------------

TITLE: Migrating Authentication Middleware (Before)
DESCRIPTION: Example of old middleware implementation for authentication that returns JSON responses directly.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  return NextResponse.json({ message: 'Auth required' }, { status: 401 })
}
```

----------------------------------------

TITLE: Download GraphQL schema (Yarn)
DESCRIPTION: This command uses Yarn to execute the 'schema' script defined in the project's package.json. The purpose is to download the schema introspection data from the configured Relay endpoint. This assumes that 'schema' script is properly configured to fetch the schema.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn schema
```

----------------------------------------

TITLE: Restoring Kontent.ai Backup using Backup Manager
DESCRIPTION: This command uses the Kontent.ai Backup Manager to restore data from a zip file into a Kontent.ai project.  It requires the Management API key and Project ID of the Kontent.ai project, as well as the path to the backup zip file.  The backup manager must be installed globally via npm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
npm i -g @kontent-ai/backup-manager
kbm --action=restore --apiKey=<Management API key> --projectId=<Project ID> --zipFilename=kontent-ai-backup
```

----------------------------------------

TITLE: Generating Taxonomy API URLs for Sitemap (PHP)
DESCRIPTION: This function generates an array of taxonomy URLs (categories or tags) for sitemap generation. It uses user input from `wsra_get_user_inputs()` to determine which taxonomy to retrieve and generate URLs for.  It constructs an array of urls that are relative to the homepage.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_13

LANGUAGE: PHP
CODE:
```
<?php
function wsra_generate_taxonomy_api()
{
  [$args,, $taxonomy] = wsra_get_user_inputs();
  $taxonomy_urls = array();
  $taxonomys = $taxonomy == 'tag' ? get_tags($args) : get_categories($args);
  foreach ($taxonomys as $taxonomy) {
    $fullUrl = esc_url(get_category_link($taxonomy->term_id));
    $url = str_replace(home_url(), '', $fullUrl);
    $tempArray = [
      'url' => $url,
    ];
    array_push($taxonomy_urls, $tempArray);
  }
  return array_merge($taxonomy_urls);
}

```

----------------------------------------

TITLE: Configuring Nginx for HMR WebSocket
DESCRIPTION: This Nginx configuration snippet configures a proxy pass for the Webpack HMR (Hot Module Replacement) WebSocket connection. It is necessary when proxying requests to the Next.js development server to ensure that HMR events are correctly handled.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_9

LANGUAGE: nginx
CODE:
```
location /_next/webpack-hmr {
    proxy_pass http://localhost:3000/_next/webpack-hmr;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
}
```

----------------------------------------

TITLE: Creating Next.js App with reactstrap using npx
DESCRIPTION: This command uses npx to create a new Next.js application using the with-reactstrap example. It bootstraps a new project with the necessary dependencies and configuration to use reactstrap.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reactstrap/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-reactstrap with-reactstrap-app
```

----------------------------------------

TITLE: Creating a Next.js app with Panda CSS using Yarn
DESCRIPTION: This command uses Yarn to execute create next app, setting up a new Next.js project with the panda-css example. It bootstraps the application with the necessary configurations for Panda CSS integration and creates a project named 'panda-css-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/panda-css/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example panda-css panda-css-app
```

----------------------------------------

TITLE: Creating Next.js app with Jotai example using npx
DESCRIPTION: This command uses npx to create a new Next.js application with the Jotai example. It downloads and executes the create-next-app package and clones the specified example into a new directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jotai/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-jotai with-jotai-app
```

----------------------------------------

TITLE: Creating Next.js app using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-lingui example. It bootstraps a project with Lingui i18n pre-configured. The command should be executed in the terminal. Make sure you have Node.js and pnpm installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-lingui/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-lingui with-lingui-app
```

----------------------------------------

TITLE: Creating Next.js app with Neo4j example using yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the `with-neo4j` example. It sets up a pre-configured Next.js project ready to interact with a Neo4j database using the specified example template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-neo4j with-neo4j-app
```

----------------------------------------

TITLE: Configuring Allowed Image Domains in Next.js
DESCRIPTION: This code snippet shows how to configure allowed image domains in the `next.config.js` file. This is used to specify the hostnames from which external images can be loaded. Note that this is deprecated and `remotePatterns` should be used instead.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    domains: ['assets.acme.com'],
  },
}
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command uses npm to create a new Next.js application named 'with-polyfills-app' based on the 'with-polyfills' example. It ensures that the newly created application includes the necessary polyfills.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-polyfills/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-polyfills with-polyfills-app
```

----------------------------------------

TITLE: Executing url-to-withrouter Codemod in Next.js
DESCRIPTION: This codemod transforms the deprecated automatically injected url property on top-level pages to use withRouter and the router property it injects.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
npx @next/codemod url-to-withrouter
```

----------------------------------------

TITLE: Building Stencil Component for Production
DESCRIPTION: Command to build the Stencil component for production use.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Installing XState Inspect
DESCRIPTION: This command installs the @xstate/inspect package, which provides debugging and visualization tools for XState.  It's installed using npm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install @xstate/inspect
```

----------------------------------------

TITLE: Installing Next.js Reproduction Template with Yarn
DESCRIPTION: Command to create a new Next.js reproduction template project using Yarn package manager
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example reproduction-template reproduction-app
```

----------------------------------------

TITLE: Dynamic Import Call in JavaScript
DESCRIPTION: This snippet shows a dynamic 'import' call where the module path is determined by a variable. Similar to dynamic 'require', this pattern makes static analysis difficult but is a standard way to achieve code splitting or load modules conditionally at runtime.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1002__ require(FreeVar(Math)[__quo__r-899e87.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
import(unknown)
```

----------------------------------------

TITLE: Importing React JSX Runtime (JavaScript)
DESCRIPTION: Imports the necessary runtime functions for React's JSX transformation. This is a standard dependency for components using JSX.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_4

LANGUAGE: js
CODE:
```
import "react/jsx-runtime";
```

----------------------------------------

TITLE: Contentful Draft Mode API Route URL
DESCRIPTION: This code snippet shows the URL structure for the Contentful draft mode API route, including the secret and slug parameters. The CONTENTFUL_PREVIEW_SECRET is used to authorize the request, and the slug identifies the content to preview.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_7

LANGUAGE: JavaScript
CODE:
```
"http://localhost:3000/api/draft?secret=<CONTENTFUL_PREVIEW_SECRET>&slug={entry.fields.slug}"
```

----------------------------------------

TITLE: Updating Next.js and React Packages using pnpm
DESCRIPTION: This command updates the Next.js, React, React DOM, and eslint-config-next packages to version 12 using pnpm. It provides an alternative way to update dependencies using the pnpm package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm up next@12 react@17 react-dom@17 eslint-config-next@12
```

----------------------------------------

TITLE: Building Temporal Worker in Watch Mode
DESCRIPTION: Command to build the Temporal worker with watch mode enabled for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
npm run build-worker.watch
```

----------------------------------------

TITLE: Creating Next.js app with Relay Modern example (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the Relay Modern example. It initializes a project named 'with-relay-modern-app' using the specified example template.  Dependencies include create-next-app and Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-relay-modern with-relay-modern-app
```

----------------------------------------

TITLE: Creating a Next.js App with Magic Example using Yarn
DESCRIPTION: These commands use create-next-app to bootstrap a new Next.js project using the with-magic example. It demonstrates how to initialize the project with npm, yarn, and pnpm package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-magic with-magic-app
```

----------------------------------------

TITLE: Create Next.js app with Flow (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application with Flow, using the 'with-flow' example. It requires Yarn to be installed. The new application will be created in a directory named 'with-flow-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-flow/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-flow with-flow-app
```

----------------------------------------

TITLE: Running home app with pnpm
DESCRIPTION: These commands navigate to the `home` directory, install dependencies using pnpm, and start the development server. The home app will be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
cd home
pnpm install && pnpm dev
```

----------------------------------------

TITLE: Defining Row Gap Prop Types in JavaScript
DESCRIPTION: Assigns prop type validation to the 'rowGap' function using 'responsivePropType' in non-production environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_12

LANGUAGE: js
CODE:
```
rowGap.propTypes = process.env.NODE_ENV !== 'production' ? { rowGap: responsivePropType } : {};
```

----------------------------------------

TITLE: Importing Environment Utilities - JavaScript
DESCRIPTION: Imports the DEFAULT_ENVIRONMENT constant and the parseEnvironment function from a local environment utility module. These are used for retrieving and processing application environment settings.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { DEFAULT_ENVIRONMENT, parseEnvironment } from '../../utils/environment';

```

----------------------------------------

TITLE: Creating Next.js app with Knex Example
DESCRIPTION: These commands use `create-next-app` to bootstrap a new Next.js project with the `with-knex` example. It shows how to initialize a new project using npm, yarn or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-knex with-knex-app
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server
DESCRIPTION: These commands install the necessary Node.js dependencies and then start the Next.js development server. The server typically runs on localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Creating Next.js app with Contentful example using pnpm
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project using the cms-contentful example. It creates a directory named cms-contentful-app using pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-contentful cms-contentful-app
```

----------------------------------------

TITLE: Creating Next.js App with WindiCSS Example (npm)
DESCRIPTION: This command uses npm to create a new Next.js application with the WindiCSS example. It initializes a project named 'with-windicss-app' based on the 'with-windicss' example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-windicss/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-windicss with-windicss-app
```

----------------------------------------

TITLE: Creating Next.js app with Xata using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application pre-configured to work with Xata. It bootstraps the project using the `with-xata` example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
yarn create next-app --example with-xata with-xata-app
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses `create next-app` with pnpm to bootstrap a new Next.js project based on the `with-graphql-gateway` example. It will create a directory named `with-graphql-gateway-app` with the project files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-graphql-gateway with-graphql-gateway-app
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command employs pnpm to generate a new Next.js application named 'with-polyfills-app' from the 'with-polyfills' example. It sets up the application to include the polyfills needed to support older browsers effectively.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-polyfills/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-polyfills with-polyfills-app
```

----------------------------------------

TITLE: Importing Responsive Prop Type in JavaScript
DESCRIPTION: Imports the 'responsivePropType' validator. This is used to define the expected shape and type for props that support responsive values (e.g., objects or arrays mapping to breakpoints).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_4

LANGUAGE: js
CODE:
```
import responsivePropType from './responsivePropType';
```

----------------------------------------

TITLE: Creating a Next.js App with Makeswift Example
DESCRIPTION: This command uses `create-next-app` to generate a new Next.js project with the `cms-makeswift` example. It demonstrates using npm, yarn, and pnpm to bootstrap the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-makeswift cms-makeswift-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-makeswift cms-makeswift-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-makeswift cms-makeswift-app
```

----------------------------------------

TITLE: Creating Next.js app with Goober using Yarn
DESCRIPTION: This command utilizes Yarn to generate a new Next.js application pre-configured with the Goober example. It runs create next-app with the designated example and project name. The created app will be called 'with-goober-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-goober/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-goober with-goober-app
```

----------------------------------------

TITLE: Starting Next.js development server using npm
DESCRIPTION: This command starts the Next.js development server using npm.  It executes the "dev" script defined in the package.json file, typically starting the server on localhost:3000.  npm must be installed and configured.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Implementing waitUntil for Next.js after in Serverless Adapters (TS)
DESCRIPTION: This TypeScript snippet provides an example implementation for integrating `after` support in custom serverless platforms or adapters. It shows how to define a `RequestContextStorage` using `AsyncLocalStorage` and inject a `waitUntil` function (represented by `YOUR_WAITUNTIL`) into the global `Symbol.for('@next/request-context')`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/after.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { AsyncLocalStorage } from 'node:async_hooks';

const RequestContextStorage = new AsyncLocalStorage<NextRequestContextValue>();

// Define and inject the accessor that next.js will use
const RequestContext: NextRequestContext = {
  get() {
    return RequestContextStorage.getStore();
  },
};
globalThis[Symbol.for('@next/request-context')] = RequestContext;

const handler = (req, res) => {
  const contextValue = { waitUntil: YOUR_WAITUNTIL };
  // Provide the value
  return RequestContextStorage.run(contextValue, () => nextJsHandler(req, res));
};
```

----------------------------------------

TITLE: Rendering an Image with JSX
DESCRIPTION: This snippet demonstrates how to render an image with specific attributes using JSX within a Next.js project. Key attributes include width, height, layout, source, alt text, and CSS class. No external dependencies are specified beyond JSX support.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript (JSX)
CODE:
```
<Image
  width={33}
  height={32}
  layout="fixed"
  src={Tutorials}
  alt="A book"
  className="sb-explore-image"
/>
```

----------------------------------------

TITLE: Exporting getStaticPaths (Hoisted) in JS
DESCRIPTION: This snippet exports the `getStaticPaths` function from the `userland` module, processed through the `hoist` helper. This is used for static generation with dynamic routes in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_8

LANGUAGE: js
CODE:
```
export const getStaticPaths = hoist(userland, 'getStaticPaths');
```

----------------------------------------

TITLE: Configuring Acceptable Image Formats in Next.js
DESCRIPTION: This code snippet shows how to configure acceptable image formats in `next.config.js`. The Image Optimization API uses the browser's `Accept` header to determine the best output format. The order of formats in the array matters; the first match is used.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_13

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    formats: ['image/webp'],
  },
}
```

----------------------------------------

TITLE: Lazy Root Example (DOM Element)
DESCRIPTION: This example demonstrates how to use the `lazyRoot` prop of the Next.js Image component to specify a scrollable parent element for lazy loading. It utilizes a React ref to point to a DOM element with overflow scrolling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import Image from 'next/legacy/image'
import React from 'react'

const Example = () => {
  const lazyRoot = React.useRef(null)

  return (
    <div ref={lazyRoot} style={{ overflowX: 'scroll', width: '500px' }}>
      <Image lazyRoot={lazyRoot} src="/one.jpg" width="500" height="500" />
      <Image lazyRoot={lazyRoot} src="/two.jpg" width="500" height="500" />
    </div>
  )
}
```

----------------------------------------

TITLE: Installing dependencies and running Next.js dev server
DESCRIPTION: These commands install the necessary dependencies for the Next.js application using yarn, and then starts the development server. It assumes that Node.js and Yarn are already installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Adding filterProps to gap Function (JS)
DESCRIPTION: This snippet adds a filterProps array to the gap function. This array lists the prop names handled by this function, which is typically used by styling systems to know which props to consume and prevent them from being passed down to the underlying DOM element.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_70

LANGUAGE: javascript
CODE:
```
import { a as gap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -11
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 12
};
gap.filterProps = [
    'gap'
];
export { gap };
```

----------------------------------------

TITLE: Turbopack Generated Module Part 0 (Dev/Prod) - JavaScript
DESCRIPTION: This JavaScript snippet represents 'Part 0' of the bundled output generated by Turbopack for both development and production builds. It includes the original `NextResponse` import, a potentially redundant self-import, the main `GET` handler function definition, and various export declarations including named exports and exports from internal Turbopack variables (`__TURBOPACK_VAR__`). This part primarily contains the core logic and initial imports/exports of the module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { NextResponse } from "next/server";
import "next/server";
const GET = (req)=>{
    return NextResponse.json({
        pathname: req.nextUrl.pathname
    });
};
export { GET };
export { GET as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Defining NextResponse Class for Next.js Middleware/Edge
DESCRIPTION: This JavaScript code defines the `NextResponse` class, extending the standard `Response`. It includes custom logic for handling request headers in middleware via `handleMiddlewareField`, manages cookies using a Proxy wrapping `ResponseCookies`, and provides static methods for creating specific response types like `json`, `redirect`, `rewrite`, and `next`. It relies on imported utilities and spec extensions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_18

LANGUAGE: javascript
CODE:
```
import { validateURL } from '../utils';
import { NextURL } from '../next-url';
import { toNodeOutgoingHttpHeaders } from '../utils';
import { ResponseCookies } from './cookies';
import { stringifyCookie } from '../../web/spec-extension/cookies';
import { ReflectAdapter } from './adapters/reflect';
import '../../web/spec-extension/cookies';
import '../next-url';
import '../utils';
import './adapters/reflect';
import './cookies';
const INTERNALS = Symbol('internal response');
const REDIRECTS = new Set([
    301,
    302,
    303,
    307,
    308
]);
function handleMiddlewareField(init, headers) {
    var _init_request;
    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {
        if (!(init.request.headers instanceof Headers)) {
            throw new Error('request.headers must be an instance of Headers');
        }
        const keys = [];
        for (const [key, value] of init.request.headers){
            headers.set('x-middleware-request-' + key, value);
            keys.push(key);
        }
        headers.set('x-middleware-override-headers', keys.join(','));
    }
}
class NextResponse extends Response {
    constructor(body, init = {}){
        super(body, init);
        const headers = this.headers;
        const cookies = new ResponseCookies(headers);
        const cookiesProxy = new Proxy(cookies, {
            get (target, prop, receiver) {
                switch(prop){
                    case 'delete':
                    case 'set':
                        {
                            return (...args)=>{
                                const result = Reflect.apply(target[prop], target, args);
                                const newHeaders = new Headers(headers);
                                if (result instanceof ResponseCookies) {
                                    headers.set('x-middleware-set-cookie', result.getAll().map((cookie)=>stringifyCookie(cookie)).join(','));
                                }
                                handleMiddlewareField(init, newHeaders);
                                return result;
                            };
                        }
                    default:
                        return ReflectAdapter.get(target, prop, receiver);
                }
            }
        });
        this[INTERNALS] = {
            cookies: cookiesProxy,
            url: init.url ? new NextURL(init.url, {
                headers: toNodeOutgoingHttpHeaders(headers),
                nextConfig: init.nextConfig
            }) : undefined
        };
    }
    [Symbol.for('edge-runtime.inspect.custom')]() {
        return {
            cookies: this.cookies,
            url: this.url,
            body: this.body,
            bodyUsed: this.bodyUsed,
            headers: Object.fromEntries(this.headers),
            ok: this.ok,
            redirected: this.redirected,
            status: this.status,
            statusText: this.statusText,
            type: this.type
        };
    }
    get cookies() {
        return this[INTERNALS].cookies;
    }
    static json(body, init) {
        const response = Response.json(body, init);
        return new NextResponse(response.body, response);
    }
    static redirect(url, init) {
        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;
        if (!REDIRECTS.has(status)) {
            throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        const initObj = typeof init === 'object' ? init : {};
        const headers = new Headers(initObj == null ? void 0 : initObj.headers);
        headers.set('Location', validateURL(url));
        return new NextResponse(null, {
            ...initObj,
            headers,
            status
        });
    }
    static rewrite(destination, init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-rewrite', validateURL(destination));
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
    static next(init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-next', '1');
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
}
export { NextResponse };
export { INTERNALS as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { REDIRECTS as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { handleMiddlewareField as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { NextResponse as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Declaring and Exporting Variable in JavaScript
DESCRIPTION: This snippet declares a constant `a` and directly exports it using ES6 module syntax. It also includes an export with an assertion feature for turbopack compatibility.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
const a = "a";
```

LANGUAGE: JavaScript
CODE:
```
const a = "a";
export { a };
export { a as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Customizing the preview link in WordPress admin (PHP)
DESCRIPTION: This code snippet customizes the preview button in the WordPress admin panel to point to a headless client setup. It modifies the preview link for a post to point to the Next.js frontend by appending a secret and the post ID as query parameters. It uses the `preview_post_link` filter, `HEADLESS_URL` and `HEADLESS_SECRET` constants are required to be defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_8

LANGUAGE: PHP
CODE:
```
<?php
/**
 * Customize the preview button in the WordPress admin.
 *
 * This function modifies the preview link for a post to point to a headless client setup.
 *
 * @param string  $link Original WordPress preview link.
 * @param WP_Post $post Current post object.
 * @return string Modified headless preview link.
 */
add_filter( 'preview_post_link', 'set_headless_preview_link', 10, 2 );
function set_headless_preview_link( string $link, WP_Post $post ): string {
	// Set the front-end preview route.
  $frontendUrl = HEADLESS_URL;

	// Update the preview link in WordPress.
  return add_query_arg(
    [
      'secret' => HEADLESS_SECRET,
      'id' => $post->ID,
    ],
    esc_url_raw( esc_url_raw( "$frontendUrl/api/preview" ))
  );
}

```

----------------------------------------

TITLE: Publishing Next.js Canary Release
DESCRIPTION: Command for repository maintainers to publish a new canary version of Next.js. The command automatically determines the new version tag as an increment from the previous version.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/release-channels-publishing.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
pnpm publish-canary
```

----------------------------------------

TITLE: Creating Grid Auto Columns Style Function using Utility in JavaScript
DESCRIPTION: Creates a style function specifically for the 'gridAutoColumns' CSS property using the generic 'style' utility function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_17

LANGUAGE: js
CODE:
```
export const gridAutoColumns = style({
    prop: 'gridAutoColumns'
});
```

----------------------------------------

TITLE: Structuring Error Objects - JavaScript
DESCRIPTION: Defines the `structuredError` function which takes an error object, processes it using `getProperError`, and returns a new object containing the error's name, message, and a parsed stack trace (or an empty array if the stack is not a string). This function is used to standardize error reporting formats.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_15

LANGUAGE: javascript
CODE:
```
import { parse as parseStackTrace } from "../compiled/stacktrace-parser";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { getProperError } from "./error";
function structuredError(e) {
    e = getProperError(e);
    return {
        name: e.name,
        message: e.message,
        stack: typeof e.stack === "string" ? parseStackTrace(e.stack) : []
    };
}
export { structuredError as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Running Small Stateless Component Benchmark
DESCRIPTION: Command to run a benchmark test for a stateless application that renders a simple h1 heading. This test executes 3000 HTTP requests to measure performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/bench/rendering/readme.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm run bench:stateless
```

----------------------------------------

TITLE: Starting the Next.js Server for Benchmarking
DESCRIPTION: Command to start the Next.js server before running any benchmark tests. This must be executed prior to running any benchmark commands.
SOURCE: https://github.com/vercel/next.js/blob/canary/bench/rendering/readme.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run start
```

----------------------------------------

TITLE: Importing Compose Utility in JavaScript
DESCRIPTION: Imports the 'compose' utility function from a local module. This utility is typically used to combine multiple style functions into a single one.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_1

LANGUAGE: js
CODE:
```
import compose from './compose';
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the active-class-name example. It initializes the project in a directory named active-class-name-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/active-class-name/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example active-class-name active-class-name-app
```

----------------------------------------

TITLE: Creating Next.js app with NextUI using Yarn
DESCRIPTION: This command uses the Yarn package manager to create a new Next.js application pre-configured to use NextUI. It utilizes the `create-next-app` tool with the `with-next-ui` example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-ui/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-next-ui with-next-ui-app
```

----------------------------------------

TITLE: Creating a Next.js app with Sass example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the with-sass example. It configures the project with Sass support and installs all required packages. The with-sass-app argument defines the name of the directory for the new application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-sass with-sass-app
```

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the image-secure-compute example. It downloads the example and sets up a new project with the specified name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-secure-compute/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example image-secure-compute image-secure-compute-app
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command bootstraps a new Next.js application using create-next-app with the `with-next-seo` example. It utilizes npm as the package manager, creating a project named `next-seo-app`. The command downloads the necessary dependencies and sets up the basic project structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-seo/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-next-seo next-seo-app
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with a custom Babel configuration. The `--example` flag specifies the 'with-custom-babel-config' example, and 'with-custom-babel-config-app' is the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-custom-babel-config/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-custom-babel-config with-custom-babel-config-app
```

----------------------------------------

TITLE: Creating Next.js app with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the with-passport-and-next-connect example. It bootstraps the project with the necessary files and configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport-and-next-connect/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-passport-and-next-connect with-passport-and-next-connect-app
```

----------------------------------------

TITLE: Creating Next.js App with Radix UI using Yarn
DESCRIPTION: This command creates a new Next.js application using the radix-ui example template. It utilizes yarn to execute create next-app with the specified example and project name.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/radix-ui/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example radix-ui radix-ui-app
```

----------------------------------------

TITLE: Creating Next.js app with create-next-app using pnpm
DESCRIPTION: This command initializes a new Next.js application named `github-pages-app` using the `github-pages` example from the `create-next-app` tool. The command uses pnpm to execute the create-next-app package.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example github-pages github-pages-app
```

----------------------------------------

TITLE: Creating a Next.js app with Sass example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application using the with-sass example template. It automatically sets up Sass integration and installs all project dependencies. The with-sass-app parameter determines the name of the new application directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-sass with-sass-app
```

----------------------------------------

TITLE: Creating Next.js App with create-next-app using npm
DESCRIPTION: This command uses npm to create a new Next.js application based on the `with-mqtt-js` example. It initializes a project named `with-mqtt-js-app` with the necessary dependencies and configurations for MQTT integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mqtt-js/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mqtt-js with-mqtt-js-app
```

----------------------------------------

TITLE: Initializing and Exporting Dog Reference with Turbopack in JavaScript
DESCRIPTION: This snippet imports a variable `dog`, sets it, and exports a reference object `dogRef` that contains methods to get and set the `dog` variable. It manages the pet state through methods and provides exports for usage in other modules.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
import { a as dog } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: -0\n};\nimport "__TURBOPACK_PART__" assert {\n    __turbopack_part__: 4\n};\nfunction getDog() {\n    return dog;\n}\nfunction setDog(newDog) {\n    dog = newDog;\n}\nconst dogRef = {\n    initial: dog,\n    get: getDog,\n    set: setDog\n};\nexport { dogRef };\nexport { getDog as b } from "__TURBOPACK_VAR__" assert {\n    __turbopack_var__: true\n};\nexport { setDog as c } from "__TURBOPACK_VAR__" assert {\n    __turbopack_var__: true\n};\nexport { dogRef as d } from "__TURBOPACK_VAR__" assert {\n    __turbopack_var__: true\n};
```

----------------------------------------

TITLE: Creating Next.js app with Rspack using Yarn
DESCRIPTION: This command creates a new Next.js application named 'with-rspack-app' using the 'with-rspack' example. It utilizes Yarn to execute the create next-app command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rspack/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-rspack with-rspack-app
```

----------------------------------------

TITLE: Installing Next.js Reproduction Template with PNPM
DESCRIPTION: Command to create a new Next.js reproduction template project using PNPM package manager
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example reproduction-template reproduction-app
```

----------------------------------------

TITLE: Configuring Apache for HMR WebSocket
DESCRIPTION: This Apache configuration snippet enables web sockets for the HMR connection in Next.js 12. It includes rewrite rules and proxy pass directives to properly handle WebSocket requests to the Next.js development server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-12.mdx#_snippet_10

LANGUAGE: apache
CODE:
```
<VirtualHost *:443>
 # ServerName yourwebsite.local
 ServerName "${WEBSITE_SERVER_NAME}"
 ProxyPass / http://localhost:3000/
 ProxyPassReverse / http://localhost:3000/
 # Next.js 12 uses websocket
 <Location /_next/webpack-hmr>
    RewriteEngine On
    RewriteCond %{QUERY_STRING} transport=websocket [NC]
    RewriteCond %{HTTP:Upgrade} websocket [NC]
    RewriteCond %{HTTP:Connection} upgrade [NC]
    RewriteRule /(.*) ws://localhost:3000/_next/webpack-hmr/$1 [P,L]
    ProxyPass ws://localhost:3000/_next/webpack-hmr retry=0 timeout=30
    ProxyPassReverse ws://localhost:3000/_next/webpack-hmr
 </Location>
</VirtualHost>
```

----------------------------------------

TITLE: Getting All Cookie Values in NextResponse - TypeScript
DESCRIPTION: Retrieves all values of a specified cookie name or all cookies present in the response if no name is provided.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// Given incoming request /home
let response = NextResponse.next()
// [
//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },
//   { name: 'experiments', value: 'winter-launch', Path: '/home' },
// ]
response.cookies.getAll('experiments')
// Alternatively, get all cookies for the response
response.cookies.getAll()
```

----------------------------------------

TITLE: Running Large Stateless Component Benchmark
DESCRIPTION: Command to run a benchmark test for a stateless application that renders 10,000 list items. This test executes 500 HTTP requests to measure performance under heavy rendering load.
SOURCE: https://github.com/vercel/next.js/blob/canary/bench/rendering/readme.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm run bench:stateless-big
```

----------------------------------------

TITLE: Defining Regenerator Runtime Globally in CommonJS
DESCRIPTION: This code snippet illustrates how to ensure that 'regeneratorRuntime' is defined globally in a CommonJS environment. By requiring 'regenerator-runtime/runtime', it allows the use of generator and async functions without needing to import the runtime in every file.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
// CommonJS
require("regenerator-runtime/runtime");
```

----------------------------------------

TITLE: Defining Page-Specific Content in Next.js Documentation
DESCRIPTION: This snippet demonstrates how to use a custom React component to wrap content specific to the Pages Router in Next.js documentation. It allows for conditional rendering of content based on the router being used.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/migrating/app-router-migration.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}
```

----------------------------------------

TITLE: Defining Client Trace Data Setter Javascript
DESCRIPTION: Defines an object `clientTraceDataSetter` that implements the `Setter` interface required by the OpenTelemetry propagation API. It's used to format trace context data for injection into a carrier, which in this case is expected to be an array.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const clientTraceDataSetter = {
    set (carrier, key, value) {
        carrier.push({
            key,
            value
        });
    }
};

```

----------------------------------------

TITLE: Creating Next.js App with Google Analytics using Yarn
DESCRIPTION: This command creates a new Next.js application with the Google Analytics example using Yarn. It initializes a new project named 'with-google-analytics-app' using the specified example from the Next.js repository. Requires Yarn to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-google-analytics with-google-analytics-app
```

----------------------------------------

TITLE: Initializing Next.js app with React Toolbox (npm)
DESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js application with the React Toolbox example.  It utilizes npm as the package manager. This creates a project directory with the necessary files and dependencies to run the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-toolbox/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-toolbox with-react-toolbox-app
```

----------------------------------------

TITLE: Creating a Next.js app with cxs using npx
DESCRIPTION: This command initializes a new Next.js application using the with-cxs example. It utilizes npx to execute the create-next-app package and sets up the project with the necessary dependencies and configurations for using cxs.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cxs/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-cxs with-cxs-app
```

----------------------------------------

TITLE: Creating Next.js App with Grafbase Example using pnpm
DESCRIPTION: This command initializes a new Next.js application based on the 'with-grafbase' example, utilizing pnpm as the package manager, and names the new project 'with-grafbase-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-grafbase with-grafbase-app
```

----------------------------------------

TITLE: Creating Next.js app with Emotion (Yarn)
DESCRIPTION: This command uses Yarn to create a new Next.js application configured with Emotion.  It uses `create next-app` with the `with-emotion-swc` example to bootstrap the project. The resulting application is placed in the `with-emotion-swc-app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-emotion/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-emotion-swc with-emotion-swc-app
```

----------------------------------------

TITLE: Creating Next.js app with Mantine using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application configured with the Mantine example. It relies on the create next app utility to create project files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mantine/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mantine with-mantine-app
```

----------------------------------------

TITLE: Create Next.js App with pnpm
DESCRIPTION: This command uses pnpm to generate a new Next.js app using the with-google-maps-embed example. It sets up the project structure and installs the required dependencies for embedding a Google Maps. The resulting application is named with-google-maps-embed-app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-maps-embed/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-google-maps-embed with-google-maps-embed-app
```

----------------------------------------

TITLE: Creating a Next.js app with cxs using Yarn
DESCRIPTION: This command initializes a new Next.js application using the with-cxs example. It utilizes Yarn to execute the create next-app package and sets up the project with the necessary dependencies and configurations for using cxs.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cxs/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-cxs with-cxs-app
```

----------------------------------------

TITLE: HMR Connection Setup Function
DESCRIPTION: Main function to establish and manage HMR WebSocket connection with automatic reconnection and event handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
export function connectHMR(options) {
    const { timeout = 5 * 1000 } = options;
    function init() {
        if (source) source.close();
        console.log("[HMR] connecting...");
        function handleOnline() {
            const connected = {
                type: "turbopack-connected"
            };
            eventCallbacks.forEach((cb)=>{
                cb(connected);
            });
            if (options.log) console.log("[HMR] connected");
        }
        function handleMessage(event) {
            const message = {
                type: "turbopack-message",
                data: JSON.parse(event.data)
            };
            eventCallbacks.forEach((cb)=>{
                cb(message);
            });
        }
        function handleDisconnect() {
            source.close();
            setTimeout(init, timeout);
        }
        const { hostname, port } = location;
        const protocol = getSocketProtocol(options.assetPrefix || "");
        const assetPrefix = options.assetPrefix.replace(/^\/+/, "");
        let url = `${protocol}://${hostname}:${port}${assetPrefix ? `/${assetPrefix}` : ""}`;
        if (assetPrefix.startsWith("http")) {
            url = `${protocol}://${assetPrefix.split("://")[1]}`;
        }
        source = new window.WebSocket(`${url}${options.path}`);
        source.onopen = handleOnline;
        source.onerror = handleDisconnect;
        source.onmessage = handleMessage;
    }
    init();
}
```

----------------------------------------

TITLE: Creating Next.js app with npm
DESCRIPTION: This command uses `create-next-app` with npm to bootstrap a Next.js application using the `with-linaria` example. The new application will be named `with-linaria-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-linaria/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-linaria with-linaria-app
```

----------------------------------------

TITLE: Starting Production Server without Multistage Builds
DESCRIPTION: This snippet details how to run the production server without using multistage builds, resulting in a larger final image size. It includes steps to create a network, build, and run the Docker containers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
# Create a network, which allows containers to communicate

```

LANGUAGE: bash
CODE:
```
docker network create my_network
```

LANGUAGE: bash
CODE:
```
# Build prod without multistage

```

LANGUAGE: bash
CODE:
```
docker compose -f compose.prod-without-multistage.yaml build
```

LANGUAGE: bash
CODE:
```
# Up prod without multistage in detached mode

```

LANGUAGE: bash
CODE:
```
docker compose -f compose.prod-without-multistage.yaml up -d
```

----------------------------------------

TITLE: Creating Next.js App with WindiCSS Example (pnpm)
DESCRIPTION: This command uses pnpm to create a new Next.js application with the WindiCSS example. It initializes a project named 'with-windicss-app' based on the 'with-windicss' example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-windicss/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-windicss with-windicss-app
```

----------------------------------------

TITLE: Defining gridTemplateAreas Style Function (JS)
DESCRIPTION: Defines a style function for the CSS 'gridTemplateAreas' property. It uses the 'style' helper and Turbopack assertions for module imports, exporting the function with an alias.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_53

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 26
};
const gridTemplateAreas = style({
    prop: 'gridTemplateAreas'
});
export { gridTemplateAreas as k } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Creating Next.js App with create-next-app (npm)
DESCRIPTION: This command uses npm to create a new Next.js application based on the with-shallow-routing example. It leverages create-next-app to bootstrap the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-shallow-routing with-shallow-routing-app
```

----------------------------------------

TITLE: Creating Next.js App with WindiCSS Example (yarn)
DESCRIPTION: This command uses yarn to create a new Next.js application with the WindiCSS example. It initializes a project named 'with-windicss-app' based on the 'with-windicss' example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-windicss/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-windicss with-windicss-app
```

----------------------------------------

TITLE: Installing next-rspack using yarn
DESCRIPTION: This snippet provides the command to install the next-rspack package using yarn, an alternative method to npm for installing dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-rspack/README.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
yarn add next-rspack
```

----------------------------------------

TITLE: Installing XState Inspect
DESCRIPTION: This command installs the @xstate/inspect package, which provides debugging and visualization tools for XState. It's installed using pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm add @xstate/inspect
```

----------------------------------------

TITLE: Importing gridTemplateColumns Property - JS
DESCRIPTION: Imports the `gridTemplateColumns` CSS property value from a Turbopack part identified by a numeric ID and re-exports it, following the modular CSS property definition pattern.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_62

LANGUAGE: javascript
CODE:
```
import { i as gridTemplateColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -25
};
export { gridTemplateColumns };

```

----------------------------------------

TITLE: Initializing Root Span Attributes Storage Javascript
DESCRIPTION: Initializes a `Map` called `rootSpanAttributesStore` to store attributes associated with root spans. This allows accessing root span attributes from nested spans.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const rootSpanAttributesStore = new Map();

```

----------------------------------------

TITLE: Copying the .env.local.example File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`.  This is necessary to set up environment variables for connecting to the Cosmic CMS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Installing Builder.io CLI
DESCRIPTION: This command installs the Builder.io CLI globally using npm. The CLI is required to generate and manage the Builder.io integration and space for the blog application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @builder.io/cli -g
```

----------------------------------------

TITLE: Promote PlanetScale Branch to Production
DESCRIPTION: Promotes a PlanetScale branch (typically `main`) to be the production branch. Replace `<DATABASE_NAME>` and `<BRANCH_NAME>` with the appropriate values. This step is required for deploying the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
pscale branch promote <DATABASE_NAME> <BRANCH_NAME>
```

----------------------------------------

TITLE: Cloning GitHub Repository - Bash
DESCRIPTION: This snippet demonstrates how to clone the Tigris Vercel starter repository from GitHub to your local machine. It is a prerequisite for setting up the local development environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/tigrisdata/tigris-vercel-starter
```

----------------------------------------

TITLE: Copying .env.local file
DESCRIPTION: This command copies the example environment configuration file `.env.local.example` to `.env.local`. This allows for local environment configuration without affecting the original example file.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: MSW Initialization using pnpm
DESCRIPTION: This command initializes Mock Service Worker in the public directory. It's used to generate the `mockServiceWorker.js` file, which is essential for MSW to intercept requests in the browser. This uses the pnpm package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm msw init public/
```

----------------------------------------

TITLE: Example Preview API Route URL - Bash
DESCRIPTION: This is an example URL to access the preview API route in Next.js. It includes parameters for `secret` (token) and `slug` (path), enabling the preview mode for a specific page. This needs to be configured in your headless CMS or accessed manually.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
https://<your-site>/api/preview?secret=<token>&slug=<path>
```

----------------------------------------

TITLE: Installing Next.js Canary Version via npm
DESCRIPTION: This snippet provides the command to install the canary version of Next.js using npm, enabling users to test the latest features and bug fixes before they are released as stable.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/opening-an-issue.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install next@canary
```

----------------------------------------

TITLE: Defining the gap Style Function (JS)
DESCRIPTION: This snippet defines the gap function, which generates CSS styles for the gap property. It handles responsive values using handleBreakpoints, converts input values to spacing units using createUnaryUnit and getValue, and returns the style object or null if the prop is not provided.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_68

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { createUnaryUnit } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { getValue } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import { handleBreakpoints } from './breakpoints';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 9
};
const gap = (props)=>{
    if (props.gap !== undefined && props.gap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');
        const styleFromPropValue = (propValue)=>({
                gap: getValue(transformer, propValue)
            });
        return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
};
export { gap as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Building Next.js from Source with pnpm
DESCRIPTION: Command to build the entire Next.js project including all type definitions and packages. This triggers the taskr build process that handles compilation, bundling, and type generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
pnpm build
```

----------------------------------------

TITLE: Importing XState Inspect
DESCRIPTION: This imports the `inspect` function from the `@xstate/inspect` package. This function is used to initialize the XState inspector.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { inspect } from "@xstate/inspect";
```

----------------------------------------

TITLE: YAML Metadata Example (Optional Fields)
DESCRIPTION: This YAML snippet showcases the optional metadata fields for a Next.js documentation page. These fields provide additional customization options, such as overriding the navigation title, pulling content from shared pages, listing related pages, and specifying the stage of development.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
---
nav_title: Nav Item Title
source: app/building-your-application/optimizing/images
related:
  description: See the image component API reference.
  links:
    - app/api-reference/components/image
version: experimental
---
```

----------------------------------------

TITLE: Defining gridArea Style Function JavaScript
DESCRIPTION: Defines and exports a constant `gridArea`. This constant is assigned the result of calling the `style` function with an object specifying the CSS property 'gridArea'. This function likely creates a style utility for the `grid-area` CSS property.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_21

LANGUAGE: javascript
CODE:
```
export const gridArea = style({
    prop: 'gridArea'
});
```

----------------------------------------

TITLE: Generating Turbopack Trace File (Bash)
DESCRIPTION: This code snippet demonstrates how to generate a trace file for debugging performance or memory issues with Turbopack. By prepending `NEXT_TURBOPACK_TRACING=1` to the `next dev` command, a `.next/trace-turbopack` file is generated, which can be shared with the Next.js team for investigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/08-turbopack.mdx#_snippet_2

LANGUAGE: Bash
CODE:
```
NEXT_TURBOPACK_TRACING=1 next dev --turbopack
```

----------------------------------------

TITLE: Testing Module Not Found Error with Jest/JavaScript
DESCRIPTION: This Jest test case (`it(...)`) verifies that attempting to `require()` a non-existent file (`./not-existing-file`) within a Turbopack environment correctly throws an error. It uses `expect().toThrow()` to assert the expected error behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/comptime/issues/__l___Module not found____c__ Can't resolve __c_'.-809a40.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
it('importing a not existing file should throw', () => {
  // This is a check to make sure that the following tests would fail if they require("fail")
  expect(() => {
    require('./not-existing-file')
  }).toThrow()
})
```

----------------------------------------

TITLE: Upgrading Next.js to Version 10 using npm
DESCRIPTION: Command to upgrade Next.js to version 10 using npm package manager. This will update the next package in your project's dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-10.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@10
```

----------------------------------------

TITLE: Identifying React Portal Elements
DESCRIPTION: Demonstrates how to identify a React Portal element created with ReactDOM.createPortal using isPortal and typeOf against the ReactIs.Portal constant.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/react-is/README.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import React from "react";
import ReactDOM from "react-dom";
import * as ReactIs from 'react-is';

const div = document.createElement("div");
const portal = ReactDOM.createPortal(<div />, div);

ReactIs.isPortal(portal); // true
ReactIs.typeOf(portal) === ReactIs.Portal; // true
```

----------------------------------------

TITLE: YAML Metadata Example (Required Fields)
DESCRIPTION: This YAML snippet demonstrates the required metadata fields for a Next.js documentation page, including the `title` for SEO and OG Images, and the `description` for the `<meta name="description">` tag. These fields are essential for every documentation page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
---
title: Page Title
description: Page Description
---
```

----------------------------------------

TITLE: Running Prismic Slice Machine
DESCRIPTION: This command starts the Slice Machine app, allowing users to view and manage pre-made content models in a local development environment. Slice Machine should be available on http://localhost:9999 after starting.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_4

LANGUAGE: sh
CODE:
```
npm run slicemachine
```

----------------------------------------

TITLE: Configure and Export rowGap Style Function in JS
DESCRIPTION: Imports the `rowGap` style function. It sets the `filterProps` property on the `rowGap` function to an array containing 'rowGap', indicating which props should be processed. Finally, it exports the configured `rowGap` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_76

LANGUAGE: js
CODE:
```
import { c as rowGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 18
};
rowGap.filterProps = [
    'rowGap'
];
export { rowGap };

```

----------------------------------------

TITLE: Executing Shell Commands with devlow-bench - JavaScript
DESCRIPTION: Shows how to use the `command` helper from `devlow-bench/shell` to run external processes. Provides examples for waiting for command completion, waiting for specific output, reporting memory usage, accessing streams, and killing the process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { command } from 'devlow-bench/shell';

const shell = await command("pnpm", ["run", "build"], {
  env: { /* optional env vars */ }
  cwd: "/optional/path/to/directory"
});

// Wait for successful exit
await shell.ok();

// Wait for exit
const exitCode = await shell.end();

// Wait for specific output
const [match, world] = await shell.waitForOutput(/hello (world)/);

// Report memory usage or the process tree as metric
await shell.reportMemUsage("metric name", { /* optional options */ });

shell.stdout, shell.stderr

// merged output
shell.output

// Kill the process tree
await shell.kill();
```

----------------------------------------

TITLE: Incorrect Token Caching Implementation in Next.js
DESCRIPTION: Example showing problematic implementation where random UUID generation occurs outside the cache scope.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
async function getCachedDate(token: string) {
  "use cache"
  return db.query(token, ...)
}

export default async function Page() {
  const token = crypto.getRandomUUID()
  const data = await getCachedData(token);
  return ...
}
```

----------------------------------------

TITLE: Removing Deprecated Container in Next.js _app.js (Before)
DESCRIPTION: This code snippet shows the incorrect implementation of the custom <App> component in Next.js before the fix. It imports and uses the deprecated <Container> component from `next/app`, which causes the "App Container Deprecated" error in Next.js versions 9.0.4 and later.  The `MyApp` class extends `App` and renders the `Component` wrapped within the `Container`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-container-deprecated.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import React from 'react'
import App, { Container } from 'next/app'

class MyApp extends App {
  render() {
    const { Component, pageProps } = this.props
    return (
      <Container>
        <Component {...pageProps} />
      </Container>
    )
  }
}

export default MyApp
```

----------------------------------------

TITLE: Bundled Final Exports Part - JavaScript
DESCRIPTION: Contains the final export statements within a Turbopack bundle part (Part 7), re-exporting the getEnv and getEnvWithoutDefaults functions from their respective parts.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
export { getEnv } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getEnv"
};
export { getEnvWithoutDefaults } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getEnvWithoutDefaults"
};

```

----------------------------------------

TITLE: Defining a devlow-bench Scenario - JavaScript
DESCRIPTION: Basic structure for defining a scenario using the `describe` function from `devlow-bench`. It takes a scenario name, an optional properties object, and an asynchronous function containing the scenario logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { describe } from 'devlow-bench'

describe(
  'my scenario',
  {
    /* property options */
  },
  async (
    {
      /* property values */
    }
  ) => {
    // run the scenario
  }
)
```

----------------------------------------

TITLE: Bootstrapping Next.js Sitecore XM Cloud App using npx
DESCRIPTION: This command initializes a Next.js application using the provided Sitecore XM Cloud example. Dependencies include Node.js and npm. It creates a new folder named 'cms-sitecore-xmcloud-app' with the setup for a Sitecore-connected Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitecore-xmcloud/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app
```

----------------------------------------

TITLE: Next.js Image Config (Unoptimized)
DESCRIPTION: This configuration shows how to globally disable image optimization for all images in the Next.js application by setting the `unoptimized` property to true in the `next.config.js` file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    unoptimized: true,
  },
}
```

----------------------------------------

TITLE: Exporting getServerSideProps (Hoisted) in JS
DESCRIPTION: This snippet exports the `getServerSideProps` function from the `userland` module, processed through the `hoist` helper. This enables server-side rendering for the page if defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_9

LANGUAGE: js
CODE:
```
export const getServerSideProps = hoist(userland, 'getServerSideProps');
```

----------------------------------------

TITLE: Cloning Stencil Component Starter Repository
DESCRIPTION: Commands to clone the Stencil component starter repository, navigate to the project directory, and remove the original remote.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/ionic-team/stencil-component-starter.git my-component
cd my-component
git remote rm origin
```

----------------------------------------

TITLE: Installing Linux Dependencies for Next.js Development
DESCRIPTION: Command to install LLD (the LLVM linker) and Clang on Linux systems, which are required by rust-rocksdb dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
sudo apt install lld clang
```

----------------------------------------

TITLE: Defining gridArea Style Function (JS)
DESCRIPTION: Creates a style function for the CSS 'gridArea' property. It relies on the 'style' helper and Turbopack assertions for module parts, exporting the function both directly and with an alias.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_54

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 27
};
const gridArea = style({
    prop: 'gridArea'
});
export { gridArea };
export { gridArea as l } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Running Mocha tests with pnpm
DESCRIPTION: This command executes the Mocha test suite using pnpm. It assumes a 'test' script is defined in the `package.json` file to run the tests.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Building Next.js in Release Mode
DESCRIPTION: Command to generate a tarball of the local Next.js version built in release mode for testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_14

LANGUAGE: bash
CODE:
```
pnpm pack-next --release
```

----------------------------------------

TITLE: Packing Next.js without Rebuilding
DESCRIPTION: Command to pack a local Next.js version without running the build step, useful if you've already built the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_10

LANGUAGE: bash
CODE:
```
pnpm pack-next --no-build --release && pnpm unpack-next path/to/project
```

----------------------------------------

TITLE: Importing Module with Dynamic require JavaScript
DESCRIPTION: Attempts to dynamically import a module using the Node.js `require` function with a dynamic variable (`unknown`) as the module path. This prevents static analysis from determining which modules are required, impacting bundling and optimization, and is flagged by the linter (TP1005).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(FreeVa-635fa3.txt#_snippet_4

LANGUAGE: JavaScript
CODE:
```
require(unknown)
```

----------------------------------------

TITLE: Initializing Next.js Test Setup with E2E Utilities
DESCRIPTION: Sets up a test environment for Next.js using e2e-utils, configuring test files and test suite initialization
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { nextTestSetup } from 'e2e-utils'

describe('{{name}}', () => {
  const { next } = nextTestSetup({
    files: __dirname,
  })
```

----------------------------------------

TITLE: Importing and Rendering a Component in Next.js
DESCRIPTION: This JavaScript snippet demonstrates the importation of a Content component from a local module, and then its rendering in a JSX structure. It requires the Content component to be defined in a file named content.js located in the same directory. The snippet uses ES6 module syntax and JSX, suggesting a modern JavaScript build environment, typically provided by a framework like Next.js. There are no parameters and it does not handle any inputs, as it is a basic rendering setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/app-css/app/mdx/page.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Content } from './content'\n\n<Content />
```

----------------------------------------

TITLE: Starting Temporal Worker
DESCRIPTION: Command to start the Temporal worker process.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
npm run start-worker
```

----------------------------------------

TITLE: Deprecated Next.js Middleware Using request.page
DESCRIPTION: Example of middleware implementation using the deprecated request.page approach for extracting locale and slug parameters from the URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-request-page.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const { params } = event.request.page
  const { locale, slug } = params

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}
```

----------------------------------------

TITLE: Declaring and Initializing 'bar' Constant in JavaScript
DESCRIPTION: Declares and initializes a local constant 'bar' with the string value "bar". This statement declares and writes the initial value to 'bar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const bar = "bar";

```

----------------------------------------

TITLE: Import Chart component and define year variable
DESCRIPTION: This snippet imports the Chart component from "./snowfall.js" and defines a constant variable 'year' with the value 2018. The Chart component is presumably responsible for rendering a visual representation of snowfall data.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack/tests/node-file-trace/integration/mdx/example.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Chart } from "./snowfall.js";
export const year = 2018;
```

----------------------------------------

TITLE: Composing CSS Grid Style Functions (JavaScript)
DESCRIPTION: Imports numerous CSS grid property functions and a `compose` utility. It combines these functions into a single `grid` function using `compose` and exports it as the default, allowing application of multiple grid styles at once.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_86

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import compose from './compose';
import { a as gap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -11
};
import { b as columnGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
import { c as rowGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
import { d as gridColumn } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -20
};
import { e as gridRow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -21
};
import { f as gridAutoFlow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -22
};
import { g as gridAutoColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -23
};
import { h as gridAutoRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -24
};
import { i as gridTemplateColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -25
};
import { j as gridTemplateRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -26
};
import { k as gridTemplateAreas } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -27
};
import { l as gridArea } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -28
};
const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
const __TURBOPACK__default__export__ = grid;
export { __TURBOPACK__default__export__ as default };
export { grid as m } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { __TURBOPACK__default__export__ as n } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Using Icons in MDX Documentation
DESCRIPTION: This snippet showcases the usage of custom icons like `<Check />` and `<Cross />` in MDX documentation, enhancing the visual representation of the content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_9

LANGUAGE: mdx
CODE:
```
<Check size={18} />
<Cross size={18} />
```

----------------------------------------

TITLE: Running Turbopack Tests
DESCRIPTION: Command to run the test suite using Turbopack instead of the default webpack configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
pnpm test-dev-turbo test/e2e/app-dir/app/
```

----------------------------------------

TITLE: Running Turbopack Default Benchmark
DESCRIPTION: Command to run the default Turbopack benchmark suite with 1,000 modules, tracking performance over time
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-bench/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
cargo bench -p turbopack-bench
```

----------------------------------------

TITLE: Implementing getInitialProps with Custom App Component
DESCRIPTION: Demonstrates how to use getInitialProps in a custom App component to fetch data. This pattern disables Automatic Static Optimization and is not recommended, with Next.js suggesting the App Router approach instead.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/05-custom-app.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import App, { AppContext, AppInitialProps, AppProps } from 'next/app'

type AppOwnProps = { example: string }

export default function MyApp({
  Component,
  pageProps,
  example,
}: AppProps & AppOwnProps) {
  return (
    <>
      <p>Data: {example}</p>
      <Component {...pageProps} />
    </>
  )
}

MyApp.getInitialProps = async (
  context: AppContext
): Promise<AppOwnProps & AppInitialProps> => {
  const ctx = await App.getInitialProps(context)

  return { ...ctx, example: 'data' }
}
```

LANGUAGE: jsx
CODE:
```
import App from 'next/app'

export default function MyApp({ Component, pageProps, example }) {
  return (
    <>
      <p>Data: {example}</p>
      <Component {...pageProps} />
    </>
  )
}

MyApp.getInitialProps = async (context) => {
  const ctx = await App.getInitialProps(context)

  return { ...ctx, example: 'data' }
}
```

----------------------------------------

TITLE: Deprecated Next.js Middleware Implementation
DESCRIPTION: Shows the old event-based Middleware implementation that is now deprecated. This version uses the event parameter and event.respondWith() pattern which should no longer be used.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-new-signature.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(event) {
  if (event.request.nextUrl.pathname === '/blocked') {
    event.respondWith(
      new NextResponse(null, {
        status: 403,
      })
    )
  }
}
```

----------------------------------------

TITLE: Upgrading Next.js to Canary Release using bun
DESCRIPTION: This command upgrades Next.js to the latest canary release using bun package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/version-staleness.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
bun add next@canary
```

----------------------------------------

TITLE: Entrypoints Object for Module Evaluation
DESCRIPTION: Defines a JSON-like structure mapping module evaluations and exports to identifiers. This assists in managing module export evaluations.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
{
    ModuleEvaluation: 3,
    Export(
        "a",
    ): 0,
    Export(
        "b",
    ): 1,
    Exports: 2,
}
```

----------------------------------------

TITLE: Checking Stream Readable Prototype for Destroy Method in JavaScript
DESCRIPTION: This code checks if the 'destroy' method exists on the prototype of Stream.Readable. This is used to determine if stream destruction is supported, a feature potentially relevant for resource management.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;
```

----------------------------------------

TITLE: Exporting `gridTemplateColumns` Grid Style Function (JavaScript)
DESCRIPTION: Imports the `gridTemplateColumns` CSS grid property function and re-exports it, making the individual styling function available for direct use.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_93

LANGUAGE: javascript
CODE:
```
import { i as gridTemplateColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -25
};
export { gridTemplateColumns };

```

----------------------------------------

TITLE: Importing and Re-exporting getStaticProps (Turbopack, JavaScript)
DESCRIPTION: This snippet imports the `getStaticProps` function, aliased from a specific Turbopack part, and then re-exports it. It connects a compiled module segment containing `getStaticProps` to the file's export surface.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_54

LANGUAGE: javascript
CODE:
```
import { b as getStaticProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -13
};
export { getStaticProps };
```

----------------------------------------

TITLE: Displaying devlow-bench CLI Usage and Options - bash
DESCRIPTION: Provides the command-line interface usage syntax and available options for running devlow-bench, including scenario selection, output formats, and help. Shows how to filter scenarios and specify output paths.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
Usage: devlow-bench [options] <scenario files>
## Selecting scenarios
  --scenario=<filter>, -s=<filter>   Only run the scenario with the given name
  --interactive, -i                  Select scenarios and variants interactively
  --<prop>=<value>                   Filter by any variant property defined in scenarios
## Output
  --json=<path>, -j=<path>           Write the results to the given path as JSON
  --console                          Print the results to the console
  --datadog[=<hostname>]             Upload the results to Datadog
                                     (requires DATADOG_API_KEY environment variables)
## Help
  --help, -h, -?                     Show this help
```

----------------------------------------

TITLE: Bootstrapping Next.js Sitecore XM Cloud App using Yarn
DESCRIPTION: This command sets up a Sitecore XM Cloud-connected Next.js project. It requires Node.js and Yarn. It initializes a project named 'cms-sitecore-xmcloud-app' with the Sitecore XM Cloud integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitecore-xmcloud/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app
```

----------------------------------------

TITLE: Defining gridTemplateColumns Style Function (JS)
DESCRIPTION: Defines a style function for the CSS 'gridTemplateColumns' property. It uses the 'style' helper and Turbopack assertions for module imports, exporting the function with an alias.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_51

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 24
};
const gridTemplateColumns = style({
    prop: 'gridTemplateColumns'
});
export { gridTemplateColumns as i } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Define and Export gridAutoColumns Style Function in JS
DESCRIPTION: Imports a `style` helper function. It defines a `gridAutoColumns` style function by calling `style` with an object specifying the CSS property 'gridAutoColumns'. The resulting function is then exported with the alias `g`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_80

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 22
};
const gridAutoColumns = style({
    prop: 'gridAutoColumns'
});
export { gridAutoColumns as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Exporting Items from Modules - JavaScript
DESCRIPTION: This snippet showcases the exporting of functions and variables from the module, which encapsulates the API for interacting with 'order' and 'shared'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
export { func } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export func"
};
export { order } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export order"
};
export { shared } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export shared"
};
```

----------------------------------------

TITLE: Configuring Next.js Asset Prefix with Rewrites (Pre-v15)
DESCRIPTION: For Next.js versions older than 15, an additional rewrite rule was needed alongside `assetPrefix`. This configuration ensures that requests for assets under the prefixed path (`/blog-static/_next`) are internally routed back to the standard Next.js asset path (`/_next`), allowing the Next.js server to handle them correctly. This setup is specific to older implementations and not required in Next.js 15+.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  assetPrefix: '/blog-static',
  async rewrites() {
    return {
      beforeFiles: [
        {
          source: '/blog-static/_next/:path+',
          destination: '/_next/:path+',
        },
      ],
    }
  },
}
```

----------------------------------------

TITLE: Re-exporting OpenTelemetry Components JavaScript
DESCRIPTION: Re-exports core OpenTelemetry tracing components like `getTracer`, `SpanStatusCode`, `BubbledError`, `SpanKind`, and `isBubbledError` from internal Turbopack build parts. This makes these tracing elements available for use in other modules.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_29

LANGUAGE: javascript
CODE:
```
export { getTracer } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getTracer"
};
export { SpanStatusCode } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export SpanStatusCode"
};
export { BubbledError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export BubbledError"
};
export { SpanKind } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export SpanKind"
};
export { isBubbledError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export isBubbledError"
};
```

----------------------------------------

TITLE: Creating Notes in MDX
DESCRIPTION: This snippet explains how to create informative notes in MDX documentation using blockquote styles, providing a structured format for conveying additional information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_10

LANGUAGE: mdx
CODE:
```
> **Good to know**: This is a single line note.

> **Good to know**:
>
> - We also use this format for multi-line notes.
> - There are sometimes multiple items worth knowing or keeping in mind.
```

----------------------------------------

TITLE: Running Tests in SWC Package
DESCRIPTION: Shell commands for running tests in the SWC package, with options to update snapshots and fixtures
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-swc/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
cargo test

# Update snapshots and fixtures for tests
UPDATE=1 cargo test
```

----------------------------------------

TITLE: Defining Related Links in YAML Frontmatter
DESCRIPTION: This YAML frontmatter snippet demonstrates how to use the `related` field to specify additional resources, enhancing navigability in documentation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_11

LANGUAGE: yaml
CODE:
```
---
related:
  description: Learn how to quickly get started with your first application.
  links:
    - app/building-your-application/routing/defining-routes
    - app/building-your-application/data-fetching
    - app/api-reference/file-conventions/page
---
```

----------------------------------------

TITLE: Handling Uncaught Exceptions with IPC - JavaScript
DESCRIPTION: Sets up a global handler for `process.on('uncaughtException')`. When an unhandled error occurs, it calls the `sendError` method of the `IPC` instance to send the structured error information back to the parent process via the IPC channel before exiting.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_17

LANGUAGE: javascript
CODE:
```
import { d as IPC } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -7
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
process.on("uncaughtException", (err)=>{
    IPC.sendError(err);
});
```

----------------------------------------

TITLE: Using Next.js Preview Build from Specific Commit
DESCRIPTION: JSON configuration to use a Next.js preview build from a specific commit in a project's package.json.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "next": "https://vercel-packages.vercel.app/next/commits/188f76947389a27e9bcff8ebf9079433679256a7/next"
  }
}
```

----------------------------------------

TITLE: Exporting getStaticProps (Hoisted) in JS
DESCRIPTION: This snippet exports the `getStaticProps` function from the `userland` module, processed through the `hoist` helper. This enables static generation features for the page if the userland module defines this function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_7

LANGUAGE: js
CODE:
```
export const getStaticProps = hoist(userland, 'getStaticProps');
```

----------------------------------------

TITLE: Adding propTypes to gap Function (JS)
DESCRIPTION: This snippet adds propTypes validation to the gap function. It uses responsivePropType to ensure the gap prop accepts responsive values, applying validation only in non-production environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_69

LANGUAGE: javascript
CODE:
```
import { a as gap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -11
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 9
};
import responsivePropType from './responsivePropType';
gap.propTypes = process.env.NODE_ENV !== 'production' ? {
    gap: responsivePropType
} : {};
```

----------------------------------------

TITLE: Re-exporting getStaticProps - JavaScript
DESCRIPTION: This snippet imports the getStaticProps function previously aliased as 'b' from a Turbopack part and re-exports it with its original name, 'getStaticProps'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_46

LANGUAGE: javascript
CODE:
```
import { b as getStaticProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -13
};
export { getStaticProps };
```

----------------------------------------

TITLE: Importing 'upper' Binding in JavaScript
DESCRIPTION: Represents the binding created by the import statement 'import { upper } from "module";'. It declares the variable 'upper'. This statement is hoisted.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { upper } from "module";

```

----------------------------------------

TITLE: Injecting Styles via ComponentStyles
DESCRIPTION: This snippet details how to import and inject component styles into the dev overlay using the minified 'css()' utility to ensure styles are applied correctly. This process involves merging component-specific styles into a single style tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/react-dev-overlay/README.md#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { COMPONENT_NAME_STYLES } from './component'

export function ComponentStyles() {
  return (
    <style>
      {css`
        // ...
        ${COMPONENT_NAME_STYLES}
      `}
    </style
  )
}
```

----------------------------------------

TITLE: Installing Dependencies and Starting Stencil Project
DESCRIPTION: Commands to install project dependencies and start the Stencil development server.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm start
```

----------------------------------------

TITLE: Importing Specific Binding in JavaScript (ImportOfModule)
DESCRIPTION: This snippet represents the side effect of importing a module, specifically focusing on the module evaluation side effect rather than just the declared binding. It imports the 'baz' function from './module'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/dce/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { baz } from './module';
```

----------------------------------------

TITLE: Defining Column Gap Style Function in JavaScript
DESCRIPTION: Defines the 'columnGap' style function, similar to 'gap'. It checks for the 'columnGap' prop, transforms the value using spacing utilities, and applies the style responsively via 'handleBreakpoints'. Returns a CSS style object for 'columnGap' or null.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_8

LANGUAGE: js
CODE:
```
export const columnGap = (props)=>{
    if (props.columnGap !== undefined && props.columnGap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
        const styleFromPropValue = (propValue)=>({ columnGap: getValue(transformer, propValue) });
        return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
};
```

----------------------------------------

TITLE: Development Module Part 0
DESCRIPTION: Import and assignment in development environment
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { a as a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
a = 1;

```

----------------------------------------

TITLE: Module Part 2 - JS
DESCRIPTION: This part initializes a variable `foobar` and exports it with an alias `a` using a Turbopack variable assert.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_30

LANGUAGE: js
CODE:
```
let foobar = "foo";
export { foobar as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Awaiting Promise Resolution in JavaScript
DESCRIPTION: This snippet resolves a promise asynchronously and is used to ensure that any subsequent operations that depend on this resolution are executed afterward. There are no additional dependencies needed for this operation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
await Promise.resolve();
```

----------------------------------------

TITLE: Installing FCM Example with NPX
DESCRIPTION: Command to create a new Next.js application with Firebase Cloud Messaging example using npx create-next-app
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-cloud-messaging/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

----------------------------------------

TITLE: Filtering Bundler Benchmarks
DESCRIPTION: Advanced benchmark filtering to compare specific bundlers or benchmark suites, providing granular performance testing
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-bench/README.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
cargo bench -p turbopack-bench -p turbopack-cli -- "hmr_to_eval/(Turbopack CSR|Vite)"
```

LANGUAGE: sh
CODE:
```
cargo bench -p turbopack-bench -- "bench_hydration/Next\.js canary Turbo RSC"
```

----------------------------------------

TITLE: Defining Function d3 and Exporting it via TurboPack in JavaScript
DESCRIPTION: This snippet defines `d3` and employs the same export technique seen in previous snippets, affirming the use of TurboPack for module management.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
function d3() {}
export { d3 as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing Core Tracing Components (JavaScript)
DESCRIPTION: Imports OpenTelemetry-like tracing components from internal Turbopack dependencies. It destructures the imported `api` object to get essential tracing interfaces and constants, which are then re-exported for use in other parts of the system.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_36

LANGUAGE: javascript
CODE:
```
import { a as api } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
const { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } = api;
export { context as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { propagation as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { trace as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { SpanStatusCode as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { SpanKind as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { ROOT_CONTEXT as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Turbopack Internal Import and Responsive Prop Type Import - Part 9 - JavaScript
DESCRIPTION: Imports a specific Turbopack part and the `responsivePropType` module. The Turbopack import is an internal bundling mechanism.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_35

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import './responsivePropType';
```

----------------------------------------

TITLE: Loading movie graph model into Neo4j database
DESCRIPTION: This Cypher command loads the movie graph model into the Neo4j database, which is a prerequisite for running the example application. It populates the database with data related to movies and actors.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
:play movie-graph
```

----------------------------------------

TITLE: Importing Node Stream Module in JavaScript
DESCRIPTION: This snippet imports the 'node:stream' module using a standard ES module import statement. It's the initial step in accessing stream-related functionalities provided by Node.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import Stream from 'node:stream';
```

----------------------------------------

TITLE: Creating Turbopack IPC Connection JavaScript
DESCRIPTION: Defines the `createIpc` function, which establishes a TCP connection to a specified port (read from process arguments) using Node.js `node:net`. It implements a custom length-prefixed message protocol for sending and receiving JSON data, providing methods (`send`, `recv`, `sendReady`, `sendError`) for IPC communication. It depends on the `structuredError` function to format errors sent over IPC.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { a as structuredError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { createConnection } from "node:net";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
function createIpc(port) {
    const socket = createConnection(port, "127.0.0.1");
    const packetQueue = [];
    const recvPromiseResolveQueue = [];
    function pushPacket(packet) {
        const recvPromiseResolve = recvPromiseResolveQueue.shift();
        if (recvPromiseResolve != null) {
            recvPromiseResolve(JSON.parse(packet.toString("utf8")));
        } else {
            packetQueue.push(packet);
        }
    }
    let state = {
        type: "waiting"
    };
    let buffer = Buffer.alloc(0);
    socket.once("connect", ()=>{
        socket.on("data", (chunk)=>{
            buffer = Buffer.concat([
                buffer,
                chunk
            ]);
            loop: while(true){
                switch(state.type){
                    case "waiting":
                        {
                            if (buffer.length >= 4) {
                                const length = buffer.readUInt32BE(0);
                                buffer = buffer.subarray(4);
                                state = {
                                    type: "packet",
                                    length
                                };
                            } else {
                                break loop;
                            }
                            break;
                        }
                    case "packet":
                        {
                            if (buffer.length >= state.length) {
                                const packet = buffer.subarray(0, state.length);
                                buffer = buffer.subarray(state.length);
                                state = {
                                    type: "waiting"
                                };
                                pushPacket(packet);
                            } else {
                                break loop;
                            }
                            break;
                        }
                }
            }
        });
    });
    socket.once("close", ()=>{
        process.exit(0);
    });
    function send(message) {
        const packet = Buffer.from(JSON.stringify(message), "utf8");
        const length = Buffer.alloc(4);
        length.writeUInt32BE(packet.length);
        socket.write(length);
        return new Promise((resolve, reject)=>{
            socket.write(packet, (err)=>{
                process.stderr.write(`TURBOPACK_OUTPUT_D\n`);
                process.stdout.write(`TURBOPACK_OUTPUT_D\n`);
                if (err != null) {
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
    }
    function sendReady() {
        const length = Buffer.from([
            0,
            0,
            0,
            0
        ]);
        return new Promise((resolve, reject)=>{
            socket.write(length, (err)=>{
                process.stderr.write(`TURBOPACK_OUTPUT_D\n`);
                process.stdout.write(`TURBOPACK_OUTPUT_D\n`);
                if (err != null) {
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
    }
    return {
        async recv () {
            const packet = packetQueue.shift();
            if (packet != null) {
                return JSON.parse(packet.toString("utf8"));
            }
            const result = await new Promise((resolve)=>{
                recvPromiseResolveQueue.push((result)=>{
                    resolve(result);
                });
            });
            return result;
        },
        send (message) {
            return send(message);
        },
        sendReady,
        async sendError (error) {
            try {
                await send({
                    type: "error",
                    ...structuredError(error)
                });
            } catch (err) {
                console.error("failed to send error back to rust:", err);
                process.exit(1);
            }
            process.exit(0);
        }
    };
}
const PORT = process.argv[2];
const IPC = createIpc(parseInt(PORT, 10));
export { createIpc as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { PORT as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { IPC as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Error Object Property Definition in Javascript
DESCRIPTION: Code showing how the plugin transforms Error objects to include a non-enumerable but configurable __NEXT_ERROR_CODE property. This allows for error tracking while keeping the error code hidden from console logs.
SOURCE: https://github.com/vercel/next.js/blob/canary/crates/next-error-code-swc-plugin/README.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
Object.defineProperty(new Error(...), "__NEXT_ERROR_CODE", { value: $code, enumerable: false, configurable: true })
```

----------------------------------------

TITLE: Installing Next.js Bug Report Template with Yarn
DESCRIPTION: Command to create a new Next.js bug report template project using Yarn package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/reproduction-template-pages/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example reproduction-template-pages reproduction-app
```

----------------------------------------

TITLE: Import Module: stringifyCookie - Next.js - JS
DESCRIPTION: Imports the module located at '../../web/spec-extension/cookies'. This module is expected to export the `stringifyCookie` utility function used for serializing cookie objects.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { stringifyCookie } from '../../web/spec-extension/cookies';
```

----------------------------------------

TITLE: Reading PORT from Arguments - Node.js Process - JavaScript
DESCRIPTION: Reads the second command-line argument provided to the Node.js process and assigns it to the `PORT` constant. This argument is expected to be the port number for the IPC connection.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const PORT = process.argv[2];

```

----------------------------------------

TITLE: Browser-Based Content Verification
DESCRIPTION: Uses browser automation to navigate and verify page content through CSS element selection
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
it('should work using browser', async () => {
  const browser = await next.browser('/')
  expect(await browser.elementByCss('p').text()).toBe('hello world')
})
```

----------------------------------------

TITLE: Adding Filter Props to Gap Utility - Part 13 - JavaScript
DESCRIPTION: Defines the `filterProps` array for the `gap` function, indicating which props should be consumed by this utility. Exports the `gap` function for external use.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_39

LANGUAGE: js
CODE:
```
import { a as gap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -11
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 12
};
gap.filterProps = [
    'gap'
];
export { gap };
```

----------------------------------------

TITLE: Composing Grid Style Functions (JS)
DESCRIPTION: Composes multiple individual grid-related style functions into a single 'grid' function using a 'compose' helper. It imports various style functions via Turbopack assertions and exports the composite function as default and with aliases.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_55

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import compose from './compose';
import { a as gap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -11
};
import { b as columnGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
import { c as rowGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
import { d as gridColumn } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -20
};
import { e as gridRow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -21
};
import { f as gridAutoFlow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -22
};
import { g as gridAutoColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -23
};
import { h as gridAutoRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -24
};
import { i as gridTemplateColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -25
};
import { j as gridTemplateRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -26
};
import { k as gridTemplateAreas } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -27
};
import { l as gridArea } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -28
};
const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
const __TURBOPACK__default__export__ = grid;
export { __TURBOPACK__default__export__ as default };
export { grid as m } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { __TURBOPACK__default__export__ as n } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Exporting getClientComponentLoaderMetrics Function in JavaScript
DESCRIPTION: The function 'getClientComponentLoaderMetrics' retrieves the current metrics of client component loading. It returns an object with metrics if loading has occurred, and can reset the counters based on the options parameter. The function depends on the variables for load metrics.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
export function getClientComponentLoaderMetrics(options = {}) {
    const metrics = clientComponentLoadStart === 0 ? undefined : {
        clientComponentLoadStart,
        clientComponentLoadTimes,
        clientComponentLoadCount
    };
    if (options.reset) {
        clientComponentLoadStart = 0;
        clientComponentLoadTimes = 0;
        clientComponentLoadCount = 0;
    }
    return metrics;
}
```

----------------------------------------

TITLE: Defining Gap Filter Props in JavaScript
DESCRIPTION: Assigns a 'filterProps' array to the 'gap' function. This array lists the prop names ('gap') that this style function consumes, preventing them from being spread onto the underlying DOM element.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_7

LANGUAGE: js
CODE:
```
gap.filterProps = [ 'gap' ];
```

----------------------------------------

TITLE: Installing devlow-bench CLI - bash
DESCRIPTION: Command to install the devlow-bench benchmarking tool globally using npm. Requires Node.js and npm installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install devlow-bench
```

----------------------------------------

TITLE: Updating Image Imports (Before) - TSX
DESCRIPTION: This code snippet demonstrates how image imports are handled in CRA (Create React App), where importing an image file returns its public URL as a string.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_18

LANGUAGE: tsx
CODE:
```
import image from './img.png'

export default function App() {
  return <img src={image} />
}
```

----------------------------------------

TITLE: Cleaning Up Rust Build Artifacts
DESCRIPTION: Command to free up disk space by cleaning old Rust build artifacts, pnpm store, cargo caches, and running git garbage collection.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_17

LANGUAGE: bash
CODE:
```
pnpm sweep
```

----------------------------------------

TITLE: Initializing Exported IPC Object - Node.js - JavaScript
DESCRIPTION: Parses the `PORT` constant as an integer and uses it to initialize the IPC connection by calling `createIpc`. The resulting IPC object is then exported for use in other modules.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
export const IPC = createIpc(parseInt(PORT, 10));

```

----------------------------------------

TITLE: Re-exporting unstable_getServerProps - JavaScript
DESCRIPTION: This snippet imports the unstable_getServerProps function previously aliased as 'j' from a Turbopack part and re-exports it with its original name, 'unstable_getServerProps'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_48

LANGUAGE: javascript
CODE:
```
import { j as unstable_getServerProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -21
};
export { unstable_getServerProps };
```

----------------------------------------

TITLE: React Component to Trigger Postponement
DESCRIPTION: A React component that calls the `postponeWithTracking` function when rendered. It is used to declaratively trigger postponement during static generation based on a provided reason and the current prerendering state and pathname.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_22

LANGUAGE: javascript
CODE:
```
import { c as postponeWithTracking } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
function Postpone({ reason, prerenderState, pathname }) {
    postponeWithTracking(prerenderState, reason, pathname);
}
export { Postpone };
export { Postpone as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Patching a Project with Local Next.js Version
DESCRIPTION: Alternative command to directly patch a test project with local Next.js changes without creating a tarball, requiring previous overrides setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
pnpm patch-next path/to/project
```

----------------------------------------

TITLE: Combined Exports (JS)
DESCRIPTION: This snippet re-exports various functions related to prerendering state management, dynamic access tracking, and postponement utilities. These exports are likely aliased internally by the build system.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_17

LANGUAGE: javascript
CODE:
```
export { createPrerenderState } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export createPrerenderState"
};
export { markCurrentScopeAsDynamic } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export markCurrentScopeAsDynamic"
};
export { trackDynamicDataAccessed } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export trackDynamicDataAccessed"
};
export { Postpone } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export Postpone"
};
export { trackDynamicFetch } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export trackDynamicFetch"
};
export { usedDynamicAPIs } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export usedDynamicAPIs"
};
export { formatDynamicAPIAccesses } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export formatDynamicAPIAccesses"
};
export { createPostponedAbortSignal } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export createPostponedAbortSignal"
};
```

----------------------------------------

TITLE: Declare Binding: stringifyCookie - Next.js - JS
DESCRIPTION: Declares the `stringifyCookie` variable, binding it to the export of the same name from the '../../web/spec-extension/cookies' module. This function is used to convert cookie objects to header-compatible strings.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { stringifyCookie } from '../../web/spec-extension/cookies';
```

----------------------------------------

TITLE: Generating Local Package Builds
DESCRIPTION: Command to locally generate builds for each package in the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
pnpm pack-next
```

----------------------------------------

TITLE: MDX Example (Shared Pages Source)
DESCRIPTION: This MDX snippet shows how to pull content from a shared page into another page using the `source` field in the metadata. This is useful for avoiding content duplication and ensuring consistency between the App Router and Pages Router documentation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_3

LANGUAGE: mdx
CODE:
```
---
title: <Link>
description: API reference for the <Link> component.
source: app/api-reference/components/link
---

{/* DO NOT EDIT THIS PAGE. */}
{/* The content of this page is pulled from the source above. */}
```

----------------------------------------

TITLE: Setting Up WebAssembly Modules for Next.js
DESCRIPTION: Command to copy built WebAssembly modules into node_modules for local testing. This needs to be run after building the WASM target.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
node ./scripts/setup-wasm.mjs
```

----------------------------------------

TITLE: Installing MacOS Disk Compression Agents
DESCRIPTION: Script to install launch agents on MacOS that automatically apply APFS disk compression to node_modules and target directories.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_18

LANGUAGE: bash
CODE:
```
./scripts/LaunchAgents/install-macos-agents.sh
```

----------------------------------------

TITLE: Executing Process Dynamically (Node.js)
DESCRIPTION: This snippet attempts to execute a process using `child_process.spawnSync`, where the command itself is provided by a dynamic variable (`unknown`). This usage is flagged by linters as it prevents static determination of the executed command, posing security and analysis challenges. It requires the built-in `child_process` module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__-3e2c30.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
child_process.spawnSync(unknown)
```

----------------------------------------

TITLE: Checking for Used Dynamic APIs in Prerender State
DESCRIPTION: Determines if any dynamic APIs or data sources were accessed during the prerendering process by checking if the `dynamicAccesses` array in the `prerenderState` object is not empty.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_25

LANGUAGE: javascript
CODE:
```
function usedDynamicAPIs(prerenderState) {
    return prerenderState.dynamicAccesses.length > 0;
}
export { usedDynamicAPIs };
export { usedDynamicAPIs as i } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Code Formatting and Preparation
DESCRIPTION: Command for formatting Rust code before submission to ensure consistent code style
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-swc/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
cargo fmt
```

----------------------------------------

TITLE: Final Query for Actor-Movie-Director Relationships
DESCRIPTION: A Neo4j Cypher query to match actors who have acted in movies directed by specific directors, with a limit of 10 results.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/movie-sample.md#2025-04-21_snippet_3

LANGUAGE: cypher
CODE:
```
WITH TomH as a
MATCH (a)-[:ACTED_IN]->(m)<-[:DIRECTED]-(d) RETURN a,m,d LIMIT 10;
```

----------------------------------------

TITLE: Dynamic child_process.spawnSync Multiple Arguments in JavaScript
DESCRIPTION: This snippet shows 'child_process.spawnSync' executing 'node' with a dynamic array containing unknown arguments. This further illustrates a pattern where the command executed by the child process is not fully static, posing security risks if inputs are not controlled.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1002__ require(FreeVar(Math)[__quo__r-899e87.txt#_snippet_4

LANGUAGE: javascript
CODE:
```
child_process.spawnSync('node', [unknown, unknown])
```

----------------------------------------

TITLE: Generated Module Part Referencing Another Part - JavaScript
DESCRIPTION: This code block represents another generated module output part (Part 1) in both development and production modes. It re-exports the `fakeCat` symbol by referencing another Turbopack-managed part identified by the `__turbopack_part__` assert syntax. This is part of how Turbopack structures and connects different pieces of the bundled module internally.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/export-named/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
export { fakeCat } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export fakeCat"
};
```

----------------------------------------

TITLE: Fuzzponent CLI Options Documentation
DESCRIPTION: Comprehensive list of command line options for the Fuzzponent tool. Includes parameters for controlling hierarchy depth, random seed, output directory, component name length, number of children per component, and file extensions.
SOURCE: https://github.com/vercel/next.js/blob/canary/bench/fuzzponent/readme.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
Options:
      --help       Show help                                           [boolean]
      --version    Show version number                                 [boolean]
  -d, --depth      component hierarchy depth                 [number] [required]
  -s, --seed       prng seed                                 [number] [required]
  -o, --outdir     the directory where components should be written
     [string] [default: "/Users/timneutkens/projects/next.js/bench/nested-deps"]
      --minLen     the smallest acceptable component name length
                                                          [number] [default: 18]
      --maxLen     the largest acceptable component name length
                                                          [number] [default: 24]
      --minChild   the smallest number of acceptable component children
                                                           [number] [default: 4]
      --maxChild   the largest number of acceptable component children
                                                          [number] [default: 80]
      --extension  extension to use for generated components
                                                       [string] [default: "jsx"]
```

----------------------------------------

TITLE: Defining Inline Math Expression in Markdown
DESCRIPTION: This snippet shows how to define an inline math expression using backticks in Markdown. It represents the mathematical symbol for lift coefficient.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/rehype-plugin/page.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
```math
C_L
```
```

----------------------------------------

TITLE: Tracking Dynamic Fetch Operations in Next.js
DESCRIPTION: Tracks fetch calls that are considered dynamic during static generation. It calls `postponeWithTracking` only if a `prerenderState` object exists and the current context is not within an `unstable_cache` callback.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_23

LANGUAGE: javascript
CODE:
```
import { c as postponeWithTracking } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
function trackDynamicFetch(store, expression) {
    if (!store.prerenderState || store.isUnstableCacheCallback) return;
    postponeWithTracking(store.prerenderState, expression, store.urlPathname);
}
export { trackDynamicFetch };
export { trackDynamicFetch as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Executing Node with Dynamic Argument (Node.js)
DESCRIPTION: This snippet calls `child_process.spawnSync` to execute the 'node' command, passing a single dynamic variable (`unknown`) as one of its arguments. While the command 'node' is static, the dynamic argument makes the specific execution pattern unpredictable at compile time. This requires the built-in `child_process` module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__-3e2c30.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
child_process.spawnSync('node', unknown)
```

----------------------------------------

TITLE: Exporting a Constant from a Module
DESCRIPTION: This snippet exports the constant 'DOG', which references the previously declared variable 'dog'. It shows how to make a variable available for import in other modules.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
export const DOG = dog;
```

----------------------------------------

TITLE: Defining getEnv Function - JavaScript
DESCRIPTION: Defines and exports the getEnv function. It parses the environment from the global object using parseEnvironment and merges it with default environment values using Object.assign.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
export function getEnv() {
    var globalEnv = parseEnvironment(_globalThis);
    return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);
}
```

----------------------------------------

TITLE: Applying Package Modifications to Project
DESCRIPTION: Command to automatically apply modifications to package.json in a specified project directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
pnpm pack-next --project ~/shadcn-ui/apps/www/
```

----------------------------------------

TITLE: Unpacking Next.js Tarballs into Project
DESCRIPTION: Command to extract Next.js tarballs directly into a project's node_modules directory, bypassing the package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
pnpm unpack-next ~/shadcn-ui
```

----------------------------------------

TITLE: Rendering HTML Paragraph in MDX
DESCRIPTION: Demonstrates embedding a basic HTML paragraph tag within an MDX document
SOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/plugin-mdx-rs/pages/index.mdx#2025-04-21_snippet_0

LANGUAGE: html
CODE:
```
<p>Have p tag!</p>
```

----------------------------------------

TITLE: JavaScript Module Imports Causing Error
DESCRIPTION: This snippet shows the import statements within the `index.js` file that triggered a Turbopack build error. It highlights the specific import (`import { Abc } from './module'`) that references a non-existent export in the target module, along with other imports and a comment for context.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/exports/invalid-export/issues/__l_Export __c_Abc__ doesn't exist in target modul-c4ff8b.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
import { Abc } from './module'
// We don't report errors for unused invalid exports
import { Def } from './module'
import * as X from './module'

```

----------------------------------------

TITLE: Running Next.js with WebAssembly Instead of Native Addons
DESCRIPTION: Command to run Next.js while forcing it to use the WebAssembly binary instead of native Node.js addons. This is useful for testing the WASM build.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
NODE_OPTIONS='--no-addons'
```

----------------------------------------

TITLE: Defining isPromise Helper Function Javascript
DESCRIPTION: Defines a utility function `isPromise` that checks if a given value is an object that is not null and has a `then` method, commonly used to identify JavaScript Promises.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const isPromise = (p)=>{
    return p !== null && typeof p === 'object' && typeof p.then === 'function';
};

```

----------------------------------------

TITLE: Installing Local Next.js Dependencies
DESCRIPTION: Command to add local Next.js, React, and React-DOM dependencies from the monorepo to your application.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing-using-local-app.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
pnpm add ./path/to/next.js/{packages/next,node_modules/{react,react-dom}}
```

----------------------------------------

TITLE: CSS Red Text Styling
DESCRIPTION: This CSS snippet defines a class named 'red'.  Any HTML element assigned this class will have its text color set to red. It can be used to quickly apply red text styling throughout a webpage.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/rsc-webpack-loader/app/loader-rule/a.txt#2025-04-21_snippet_0

LANGUAGE: css
CODE:
```

.red {
  color: red;
}

```

----------------------------------------

TITLE: Exporting Default Fetch Function in JavaScript
DESCRIPTION: This statement exports the previously declared 'fetch' function as the default export of the module. This makes the 'fetch' function available for other modules to import using a default import.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
export default fetch;
```

----------------------------------------

TITLE: Importing Turbopack Part 0 - JS
DESCRIPTION: Imports Turbopack part 0, which itself likely contains further imports or logic, demonstrating a dependency chain managed by Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_67

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};

```

----------------------------------------

TITLE: Problematic Page Export in Next.js
DESCRIPTION: Example showing a page export that the codemod cannot properly analyze for params/searchParams usage
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
// the codemod cannot find the actual Page component so the Page may still have remaining
// synchronous access to params and searchParams

// @next-codemod-error
export * from '.../some-file'
```

----------------------------------------

TITLE: SWC Binary Configuration
DESCRIPTION: Package.json configuration to resolve SWC binary loading issues by adding optional dependencies for different platforms.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing-using-local-app.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "optionalDependencies": {
    "@next/swc-linux-x64-gnu": "canary",
    "@next/swc-win32-x64-msvc": "canary",
    "@next/swc-darwin-x64": "canary",
    "@next/swc-darwin-arm64": "canary"
  }
}
```

----------------------------------------

TITLE: Exporting reportWebVitals (Hoisted) in JS
DESCRIPTION: This snippet exports the `reportWebVitals` function from the `userland` module, processed through the `hoist` helper. This function is used to send web vital metrics to an analytics endpoint.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_11

LANGUAGE: js
CODE:
```
export const reportWebVitals = hoist(userland, 'reportWebVitals');
```

----------------------------------------

TITLE: Registering REST API routes for sitemap generation (PHP)
DESCRIPTION: This code registers four REST API routes under the `sitemap/v1` namespace for retrieving data needed to generate a sitemap. It uses the `register_rest_route` function to define the routes and their corresponding callback functions (`wsra_generate_posts_api`, `wsra_generate_taxonomy_api`, `wsra_generate_author_api`, and `wsra_generate_totalpages_api`).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_16

LANGUAGE: PHP
CODE:
```
<?php
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/posts', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_posts_api',
  ));
});
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/taxonomy', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_taxonomy_api',
  ));
});
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/author', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_author_api',
  ));
});
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/totalpages', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_totalpages_api',
  ));
});

```

----------------------------------------

TITLE: Performance Metrics Retrieval Function
DESCRIPTION: Exports function to retrieve client component loading metrics with optional reset functionality. Returns undefined if tracking hasn't started.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/logger/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
export function getClientComponentLoaderMetrics(options = {}) {
    const metrics = clientComponentLoadStart === 0 ? undefined : {
        clientComponentLoadStart,
        clientComponentLoadTimes,
        clientComponentLoadCount
    };
    if (options.reset) {
        clientComponentLoadStart = 0;
        clientComponentLoadTimes = 0;
        clientComponentLoadCount = 0;
    }
    return metrics;
}
```

----------------------------------------

TITLE: Merged Module Code with Exports (JavaScript)
DESCRIPTION: This JavaScript snippet represents a merged module, demonstrating imports from internal parts ('__TURBOPACK_PART__') and external modules, defining internal and external functions, and exporting them, including aliased exports using '__TURBOPACK_VAR__'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_44

LANGUAGE: JavaScript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { upper } from "module";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
function internal() {
    return upper(foobar);
}
function external1() {
    return internal() + foobar;
}
export { external1 };
export { internal as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { external1 as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
function external2() {
    foobar += ".";
}
export { external2 };
export { external2 as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Unpacking Next.js Tarball into Test Project
DESCRIPTION: Command to unpack the previously generated Next.js tarballs into a test project's node_modules directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_16

LANGUAGE: bash
CODE:
```
pnpm unpack-next path/to/project
```

----------------------------------------

TITLE: Managing Client Component Loader Metrics in JavaScript
DESCRIPTION: Defines a function to get and optionally reset client component loader metrics. Dependencies include specific Turbopack parts for importing metrics. The function returns loader metrics or resets them if specified in options.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { c as clientComponentLoadCount } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import { a as clientComponentLoadStart } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
import { b as clientComponentLoadTimes } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
function getClientComponentLoaderMetrics(options = {}) {
    const metrics = clientComponentLoadStart === 0 ? undefined : {
        clientComponentLoadStart,
        clientComponentLoadTimes,
        clientComponentLoadCount
    };
    if (options.reset) {
        clientComponentLoadStart = 0;
        clientComponentLoadTimes = 0;
        clientComponentLoadCount = 0;
    }
    return metrics;
}
export { getClientComponentLoaderMetrics };
export { getClientComponentLoaderMetrics as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting unstable_getStaticPaths (Hoisted) in JS
DESCRIPTION: This snippet exports the unstable `unstable_getStaticPaths` function from the `userland` module, processed through the `hoist` helper. This is an unstable precursor to `getStaticPaths`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_13

LANGUAGE: js
CODE:
```
export const unstable_getStaticPaths = hoist(userland, 'unstable_getStaticPaths');
```

----------------------------------------

TITLE: Deprecated next/dynamic Multiple Module Loading (Before)
DESCRIPTION: Example of loading multiple modules using `next/dynamic` with the `modules` property, a pattern deprecated in Next.js 9. This approach is no longer recommended.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_12

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const HelloBundle = dynamic({
  modules: () => {
    const components = {
      Hello1: () => import('../components/hello1').then((m) => m.default),
      Hello2: () => import('../components/hello2').then((m) => m.default),
    }

    return components
  },
  render: (props, { Hello1, Hello2 }) => (
    <div>
      <h1>{props.title}</h1>
      <Hello1 />
      <Hello2 />
    </div>
  ),
})

function DynamicBundle() {
  return <HelloBundle title="Dynamic Bundle" />
}

export default DynamicBundle
```

----------------------------------------

TITLE: Exporting Structured Error Function - JavaScript
DESCRIPTION: Imports the `structuredError` function from another Turbopack module part and re-exports it. This makes the utility for creating standardized error objects accessible to other modules within the bundle.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import { a as structuredError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -6
};
export { structuredError };
```

----------------------------------------

TITLE: Pushing to Order Array - JavaScript
DESCRIPTION: This statement demonstrates a direct manipulation of the 'order' array by pushing the string 'a' into it, showcasing a side effect that alters the shared array.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
order.push("a");
```

----------------------------------------

TITLE: Documenting Symlink Testing Setup for Next.js
DESCRIPTION: Explains the purpose of testing Next.js behavior when files are symbolic links, particularly in build orchestration environments like Bazel's sandbox.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/production/app-dir/symbolic-file-links/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Symbolic File Links

This test represents what the Next.js file structure may look like when run
under a build orchestrator, such as bazel, where its sandbox sets up all files
to be symlinks to their original source.
```

----------------------------------------

TITLE: Defining BubbledError Class Javascript
DESCRIPTION: Defines a custom error class `BubbledError` that extends the native `Error` class. It is used to wrap results or errors that should 'bubble' up through tracing spans without necessarily marking the intermediate spans as erroneous, carrying `bubble` and `result` properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
export class BubbledError extends Error {
    constructor(bubble, result){
        super();
        this.bubble = bubble;
        this.result = result;
    }
}

```

----------------------------------------

TITLE: Creating and Styling a Next.js Component
DESCRIPTION: This snippet shows how to define a basic React component in Next.js alongside its unique styling, using template literals to keep CSS encapsulated. The use of 'data-nextjs-' attributes is recommended for targeting elements within the dev overlay.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/react-dev-overlay/README.md#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
export function Component() {
  return (
    <div className="some-unique-class-name">
      <h1>Hello, Next.js!</h1>
    </div>
  )
}

export const COMPONENT_NAME_STYLES = `
  .some-unique-class-name {
    background-color: red;
  }
`
```

----------------------------------------

TITLE: Structuring Error Object - JavaScript
DESCRIPTION: Exports a function that takes an error object, processes it using `getProperError`, and returns a new object containing the error's name, message, and a parsed stack trace if available. It relies on `getProperError` and `parseStackTrace`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
export function structuredError(e) {
    e = getProperError(e);
    return {
        name: e.name,
        message: e.message,
        stack: typeof e.stack === "string" ? parseStackTrace(e.stack) : []
    };
}

```

----------------------------------------

TITLE: Patching a Project with Arguments
DESCRIPTION: Command to patch a test project with a local Next.js version, with additional build configuration arguments.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_12

LANGUAGE: bash
CODE:
```
pnpm patch-next --no-build --release path/to/project
```

----------------------------------------

TITLE: Calling spawnSync with Dynamic Command - JavaScript
DESCRIPTION: This snippet shows calling `child_process.spawnSync` with a dynamic variable (`unknown`, derived from `Math.random()`) used as the command. Turbopack flags this as a highly dynamic pattern that is difficult to analyze statically.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__quo_-c0f309.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
child_process.spawnSync(unknown)
```

----------------------------------------

TITLE: Initializing Variable and Exporting - Part 2 - JavaScript
DESCRIPTION: This module part initializes the variable 'foobar' with a string value. It then exports 'foobar' under the alias 'a' using a Turbopack-specific variable export mechanism.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_16

LANGUAGE: javascript
CODE:
```
let foobar = "foo";
export { foobar as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Bundled getEnv Function Part - JavaScript
DESCRIPTION: Contains the transformed 'getEnv' function definition within a Turbopack bundle part (Part 5), including necessary imports for its dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { DEFAULT_ENVIRONMENT } from '../../utils/environment';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { parseEnvironment } from '../../utils/environment';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 3
};
import { _globalThis } from './globalThis';
function getEnv() {
    var globalEnv = parseEnvironment(_globalThis);
    return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);
}
export { getEnv };
export { getEnv as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: MDX Example (Shared Content with Router Specific Blocks)
DESCRIPTION: This MDX snippet demonstrates how to include content that is specific to either the App Router or Pages Router using the `<AppOnly>` and `<PagesOnly>` components. This allows for shared content with router-specific variations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#2025-04-21_snippet_4

LANGUAGE: mdx
CODE:
```
This content is shared between App and Pages.

<PagesOnly>

This content will only be shown on the Pages docs.

</PagesOnly>

This content is shared between App and Pages.
```

----------------------------------------

TITLE: Exporting IPC Instance - JavaScript
DESCRIPTION: Imports the `IPC` instance from another Turbopack module part and re-exports it. This makes the configured IPC client readily available for use by other parts of the application that depend on it.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_19

LANGUAGE: javascript
CODE:
```
import { d as IPC } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -7
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
export { IPC };
```

----------------------------------------

TITLE: Defining gridTemplateAreas Style Function JavaScript
DESCRIPTION: Defines and exports a constant `gridTemplateAreas`. This constant is assigned the result of calling the `style` function with an object specifying the CSS property 'gridTemplateAreas'. This function likely creates a style utility for the `grid-template-areas` CSS property.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_20

LANGUAGE: javascript
CODE:
```
export const gridTemplateAreas = style({
    prop: 'gridTemplateAreas'
});
```

----------------------------------------

TITLE: Triggering React Unstable Postpone with Tracking
DESCRIPTION: Asserts that `React.unstable_postpone` is available and then calls it with a formatted reason string. It also records the dynamic access `expression` and a stack trace (if in debug mode) into the `prerenderState` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_24

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import React from 'react';
import { h as assertPostpone } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
function postponeWithTracking(prerenderState, expression, pathname) {
    assertPostpone();
    const reason = `Route ${pathname} needs to bail out of prerendering at this point because it used ${expression}. ` + `React throws this special object to indicate where. It should not be caught by ` + `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`;
    prerenderState.dynamicAccesses.push({
        stack: prerenderState.isDebugSkeleton ? new Error().stack : undefined,
        expression
    });
    React.unstable_postpone(reason);
}
export { postponeWithTracking as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Define Internal Symbol - Next.js - JS
DESCRIPTION: Declares a constant variable `INTERNALS` and assigns it a unique JavaScript `Symbol` with the description 'internal response'. This symbol is used as a private property key on `NextResponse` instances to store internal state, avoiding accidental access or name conflicts.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const INTERNALS = Symbol('internal response');
```

----------------------------------------

TITLE: Import Node.js Crypto Module - JavaScript
DESCRIPTION: Imports the built-in Node.js `crypto` module. This module is essential for generating cryptographically secure random bytes, which are used by nanoid's random pool mechanism.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import 'crypto';
```

----------------------------------------

TITLE: Importing and Re-exporting unstable_getStaticParams (Turbopack, JavaScript)
DESCRIPTION: This snippet imports the `unstable_getStaticParams` function, aliased from a Turbopack part, and re-exports it. It exposes an unstable function for defining static paths during build from a compiled segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_58

LANGUAGE: javascript
CODE:
```
import { i as unstable_getStaticParams } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -20
};
export { unstable_getStaticParams };
```

----------------------------------------

TITLE: Packing Next.js without Build Step
DESCRIPTION: Command to pack Next.js without running the build and install steps, useful when already running in dev mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_15

LANGUAGE: bash
CODE:
```
pnpm pack-next --no-build
```

----------------------------------------

TITLE: Module Part 7 - JS
DESCRIPTION: This part imports `foobarCopy` from Part -5 (likely Part 5) and also imports Parts 0 and 6. It logs the value of `foobarCopy` to the console.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_35

LANGUAGE: js
CODE:
```
import { d as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
console.log(foobarCopy);
export { };
```

----------------------------------------

TITLE: Importing Module Part and Dependency JavaScript
DESCRIPTION: Imports a Turbopack module part (part 4) and another local module named 'breakpoints'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_33

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import './breakpoints';
```

----------------------------------------

TITLE: Defining Dynamic Variable Source (Node.js)
DESCRIPTION: This snippet defines a variable `unknown` using the `Math.random()` function. Its value is unpredictable at compile time, making it a dynamic input source for subsequent operations like process execution or module loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__-3e2c30.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
const unknown = Math.random()
```

----------------------------------------

TITLE: Importing IPC Module - JavaScript
DESCRIPTION: This simple import statement brings the IPC functionality from the local './index' module into the current scope. This is a fundamental requirement for the module evaluation logic to communicate with the external process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import "./index";

```

----------------------------------------

TITLE: Hoisting and Exporting unstable_getServerProps - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'unstable_getServerProps' export. Finally, it re-exports this value under the alias 'j'. This handles unstable data-fetching functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_39

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 20
};
const unstable_getServerProps = hoist(userland, 'unstable_getServerProps');
export { unstable_getServerProps as j } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Pushing Element to Order Array in JavaScript
DESCRIPTION: This code adds an element 'a' to the previously initialized array 'order'. It requires the 'order' array to be declared. This is a side-effect as it modifies the order array.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
order.push("a");
```

----------------------------------------

TITLE: Importing and Re-exporting reportWebVitals (Turbopack, JavaScript)
DESCRIPTION: Imports the `reportWebVitals` function, aliased from a specific Turbopack part, and re-exports it. This links the compiled web vitals reporting logic from a Turbopack segment to the file's exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_55

LANGUAGE: javascript
CODE:
```
import { f as reportWebVitals } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
export { reportWebVitals };
```

----------------------------------------

TITLE: Generating total pages api (PHP)
DESCRIPTION: This function generates an array containing the total number of categories, tags, users, and posts for sitemap generation. It retrieves count data for categories, tags, users, and post types using WordPress functions such as `get_categories()`, `get_tags()`, `count_users()`, and `wp_count_posts()`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_15

LANGUAGE: PHP
CODE:
```
<?php
function wsra_generate_totalpages_api()
{
  $args = array(
    'exclude_from_search' => false
  );
  $argsTwo = array(
    'publicly_queryable' => true
  );
  $post_types = get_post_types($args, 'names');
  $post_typesTwo = get_post_types($argsTwo, 'names');
  $post_types = array_merge($post_types, $post_typesTwo);
  unset($post_types['attachment']);
  $defaultArray = [
    'category' => count(get_categories()),
    'tag' => count(get_tags()),
    'user' => (int)count_users()['total_users'],
  ];
  $tempValueHolder = array();
  foreach ($post_types as $postType) {
    $tempValueHolder[$postType] = (int)wp_count_posts($postType)->publish;
  }
  return array_merge($defaultArray, $tempValueHolder);
}

```

----------------------------------------

TITLE: Implementing NextTracerImpl Class Javascript
DESCRIPTION: Defines the core `NextTracerImpl` class, implementing custom logic for OpenTelemetry tracing within Next.js. It provides methods for managing tracer instances, contexts, propagation, span lifecycle, and tracing functions with Next.js-specific considerations like performance measurement and BubbledError handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
class NextTracerImpl {
    getTracerInstance() {
        return trace.getTracer('next.js', '0.0.1');
    }
    getContext() {
        return context;
    }
    getTracePropagationData() {
        const activeContext = context.active();
        const entries = [];
        propagation.inject(activeContext, entries, clientTraceDataSetter);
        return entries;
    }
    getActiveScopeSpan() {
        return trace.getSpan(context == null ? void 0 : context.active());
    }
    withPropagatedContext(carrier, fn, getter) {
        const activeContext = context.active();
        if (trace.getSpanContext(activeContext)) {
            return fn();
        }
        const remoteContext = propagation.extract(activeContext, carrier, getter);
        return context.with(remoteContext, fn);
    }
    trace(...args) {
        var _trace_getSpanContext;
        const [type, fnOrOptions, fnOrEmpty] = args;
        const { fn, options } = typeof fnOrOptions === 'function' ? {
            fn: fnOrOptions,
            options: {}
        } : {
            fn: fnOrEmpty,
            options: {
                ...fnOrOptions
            }
        };
        const spanName = options.spanName ?? type;
        if (!NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== '1' || options.hideSpan) {
            return fn();
        }
        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        let isRootSpan = false;
        if (!spanContext) {
            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;
            isRootSpan = true;
        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {
            isRootSpan = true;
        }
        const spanId = getSpanId();
        options.attributes = {
            'next.span_name': spanName,
            'next.span_type': type,
            ...options.attributes
        };
        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{
                const startTime = 'performance' in globalThis && 'measure' in performance ? globalThis.performance.now() : undefined;
                const onCleanup = ()=>{
                    rootSpanAttributesStore.delete(spanId);
                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && LogSpanAllowList.includes(type || '')) {
                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split('.').pop() || '').replace(/[A-Z]/g, (match)=>'-' + match.toLowerCase())}`, {
                            start: startTime,
                            end: performance.now()
                        });
                    }
                };
                if (isRootSpan) {
                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));
                }
                try {
                    if (fn.length > 1) {
                        return fn(span, (err)=>closeSpanWithError(span, err));
                    }
                    const result = fn(span);
                    if (isPromise(result)) {
                        return result.then((res)=>{
                            span.end();
                            return res;
                        }).catch((err)=>{
                            closeSpanWithError(span, err);
                            throw err;
                        }).finally(onCleanup);
                    } else {
                        span.end();
                        onCleanup();
                    }
                    return result;
                } catch (err) {
                    closeSpanWithError(span, err);
                    onCleanup();
                    throw err;
                }
            }));
    }
    wrap(...args) {
        const tracer = this;
        const [name, options, fn] = args.length === 3 ? args : [
            args[0],
            {},
            args[1]
        ];
        if (!NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== '1') {
            return fn;
        }
        return function() {
            let optionsObj = options;
            if (typeof optionsObj === 'function' && typeof fn === 'function') {
                optionsObj = optionsObj.apply(this, arguments);
            } else if (typeof optionsObj !== 'object') {
                optionsObj = {};
            }
            const lastArgId = arguments.length - 1;
            const cb = arguments[lastArgId];
            if (typeof cb === 'function') {
                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);
                return tracer.trace(name, optionsObj, (_span, done)=>{
                    arguments[lastArgId] = function(err) {
                        done == null ? void 0 : done(err);
                        return scopeBoundCb.apply(this, arguments);
                    };
                    return fn.apply(this, arguments);
                });
            } else {
                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));
            }
        };
    }
    startSpan(...args) {
        const [type, options] = args;
        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        return this.getTracerInstance().startSpan(type, options, spanContext);
    }
    getSpanContext(parentSpan) {
        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;
        return spanContext;
    }
    getRootSpanAttributes() {
        const spanId = context.active().getValue(rootSpanIdKey);
        return rootSpanAttributesStore.get(spanId);
    }
}

```

----------------------------------------

TITLE: Defining isBubbledError Helper Function Javascript
DESCRIPTION: Defines a utility function `isBubbledError` that checks if a given value is an instance of the custom `BubbledError` class, used to identify errors that require special handling in tracing.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
export function isBubbledError(error) {
    if (typeof error !== 'object' || error === null) return false;
    return error instanceof BubbledError;
}

```

----------------------------------------

TITLE: Evaluating Merged Module - JavaScript
DESCRIPTION: This snippet represents a merged module evaluation point. It imports specific Turbopack parts, logs a variable derived from one of them, and attempts to modify it. This demonstrates the state and dependencies at a particular stage of the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
import { d as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
console.log(foobarCopy);
foobarCopy += "Unused";
export { };
```

----------------------------------------

TITLE: Exporting Client Component Loader Components
DESCRIPTION: Module that exports client component loader related functions and utilities using Turbopack module system
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/logger/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
export { wrapClientComponentLoader } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export wrapClientComponentLoader"
};
export { getClientComponentLoaderMetrics } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getClientComponentLoaderMetrics"
};
```

----------------------------------------

TITLE: Building Native and WASM Bindings
DESCRIPTION: Commands for building native binary and WebAssembly bindings to integrate with Next.js
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-swc/README.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
pnpm build-native

pnpm build-wasm
```

----------------------------------------

TITLE: Defining the columnGap Style Function (JS)
DESCRIPTION: This snippet defines the columnGap function, similar to gap but specifically for the column-gap CSS property. It handles responsive values and spacing unit conversion for the columnGap prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_71

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { createUnaryUnit } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { getValue } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import { handleBreakpoints } from './breakpoints';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 12
};
const columnGap = (props)=>{
    if (props.columnGap !== undefined && props.columnGap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
        const styleFromPropValue = (propValue)=>({
                columnGap: getValue(transformer, propValue)
            });
        return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
};
export { columnGap as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing 'upper' from 'module' in JavaScript
DESCRIPTION: Imports the named export 'upper' from the module "module". This statement is hoisted and has side effects (module loading).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { upper } from "module";

```

----------------------------------------

TITLE: Instantiating PagesRouteModule in JS
DESCRIPTION: This snippet instantiates and exports the `routeModule`, which is the main object representing the Next.js page route. It's configured with route definition details (kind, page, pathname), required components (`App`, `Document`), and the `userland` module containing the page's code.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_17

LANGUAGE: js
CODE:
```
export const routeModule = new PagesRouteModule({
    definition: {
        kind: RouteKind.PAGES,
        page: 'VAR_DEFINITION_PAGE',
        pathname: 'VAR_DEFINITION_PATHNAME',
        bundlePath: '',
        filename: ''
    },
    components: {
        App,
        Document
    },
    userland
});
```

----------------------------------------

TITLE: Initializing RouteKind Enum in JavaScript
DESCRIPTION: Initializes the RouteKind Enum, assigning string values to represent various route types. It reads and writes to the RouteKind object and demonstrates side-effects within an IIFE (Immediately Invoked Function Expression) to encapsulate the Enum assignment logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
(function(RouteKind) {
    RouteKind["PAGES"] = "PAGES";
    RouteKind["PAGES_API"] = "PAGES_API";
    RouteKind["APP_PAGE"] = "APP_PAGE";
    RouteKind["APP_ROUTE"] = "APP_ROUTE";
})(RouteKind || (RouteKind = {}));
```

----------------------------------------

TITLE: Importing Dependencies in Next.js API Route - JavaScript
DESCRIPTION: Imports necessary modules for a Next.js API route. Includes NextResponse from 'next/server' for creating responses, ClientComponent from a relative path, and MyModuleClientComponent from an external 'my-module'. These imports are hoisted during processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server';


```

LANGUAGE: JavaScript
CODE:
```
import { ClientComponent } from '../../ClientComponent';


```

LANGUAGE: JavaScript
CODE:
```
import { MyModuleClientComponent } from 'my-module/MyModuleClientComponent';


```

----------------------------------------

TITLE: Processed Module Bundle (Part 0) - JavaScript
DESCRIPTION: Represents a part of the code bundle generated by a build tool (like Turbopack) for development or production. It combines the original imports, the GET function definition, and adds build-specific exports using __TURBOPACK_VAR__ and empty exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { MyModuleClientComponent } from 'my-module/MyModuleClientComponent';
import { NextResponse } from 'next/server';
import { ClientComponent } from '../../ClientComponent';
import 'next/server';
import '../../ClientComponent';
import 'my-module/MyModuleClientComponent';
function GET() {
    return NextResponse.json({
        clientComponent: typeof ClientComponent,
        myModuleClientComponent: typeof MyModuleClientComponent
    });
}
export { GET };
export { GET as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Javascript Module Part 6 (prod)
DESCRIPTION: Part 6 of the production build. Imports `a` as `e` and exports it as `a`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_25

LANGUAGE: javascript
CODE:
```
import { e as a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -4
};
export { a };
```

----------------------------------------

TITLE: Core Postponement Logic and Assertion (JS)
DESCRIPTION: Defines the core `postponeWithTracking` function which triggers React's `unstable_postpone` and records dynamic accesses in the prerender state. Includes `assertPostpone` to verify that the `unstable_postpone` function is available.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_18

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import React from 'react';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 3
};
const hasPostpone = typeof React.unstable_postpone === 'function';
function postponeWithTracking(prerenderState, expression, pathname) {
    assertPostpone();
    const reason = `Route ${pathname} needs to bail out of prerendering at this point because it used ${expression}. ` + `React throws this special object to indicate where. It should not be caught by ` + `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`;
    prerenderState.dynamicAccesses.push({
        stack: prerenderState.isDebugSkeleton ? new Error().stack : undefined,
        expression
    });
    React.unstable_postpone(reason);
}
function assertPostpone() {
    if (!hasPostpone) {
        throw new Error(`Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`);
    }
}
export { hasPostpone as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { postponeWithTracking as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { assertPostpone as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Dog Reference Object Export
DESCRIPTION: Creates and exports an object containing dog variable references and accessor functions
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
export const dogRef = {
    initial: dog,
    get: getDog,
    set: setDog
};
```

----------------------------------------

TITLE: Initializing Event Callbacks Array
DESCRIPTION: Creates an array to store event callback functions for HMR events.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const eventCallbacks = [];
```

----------------------------------------

TITLE: Exporting wrapClientComponentLoader Function in JavaScript
DESCRIPTION: This function 'wrapClientComponentLoader' takes a component module as an argument and adds performance tracking for loading and requiring the component. It uses global performance API to calculate load times. The function relies on the global 'performance' object and the variables defined earlier.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
export function wrapClientComponentLoader(ComponentMod) {
    if (!('performance' in globalThis)) {
        return ComponentMod.__next_app__;
    }
    return {
        require: (...args)=>{
            const startTime = performance.now();
            if (clientComponentLoadStart === 0) {
                clientComponentLoadStart = startTime;
            }
            try {
                clientComponentLoadCount += 1;
                return ComponentMod.__next_app__.require(...args);
            } finally{
                clientComponentLoadTimes += performance.now() - startTime;
            }
        },
        loadChunk: (...args)=>{
            const startTime = performance.now();
            try {
                clientComponentLoadCount += 1;
                return ComponentMod.__next_app__.loadChunk(...args);
            } finally{
                clientComponentLoadTimes += performance.now() - startTime;
            }
        }
    };
}
```

----------------------------------------

TITLE: Part 12: Re-exporting Variables from Parts Javascript
DESCRIPTION: This is a top-level or entrypoint part that re-exports variables (`external1`, `foo`, `external2`, `foobar`) from their respective internal Turbopack parts, making them available from this module's public API.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
export { external1 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export external1"
};
export { foo } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export foo"
};
export { external2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export external2"
};
export { foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export foobar"
};
```

----------------------------------------

TITLE: Exporting Complex Objects with Shared References
DESCRIPTION: Creates and exports objects that reference the shared context, demonstrating module interconnectedness
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-2/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
export const a = {
    shared,
    a: "aaaaaaaaaaa"
};
```

LANGUAGE: javascript
CODE:
```
export const b = {
    shared,
    b: "bbbbbbbbbbb"
};
```

----------------------------------------

TITLE: Importing gridTemplateAreas Property - JS
DESCRIPTION: Imports the `gridTemplateAreas` CSS property value from a Turbopack part identified by a numeric ID and re-exports it, consistent with the modular CSS property definition pattern.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_61

LANGUAGE: javascript
CODE:
```
import { k as gridTemplateAreas } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -27
};
export { gridTemplateAreas };

```

----------------------------------------

TITLE: Variable Declaration - First Item
DESCRIPTION: Declares constant variable 'a' with string value 'a'
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const a = "a";

```

----------------------------------------

TITLE: Importing GlobalThis Utility - JavaScript
DESCRIPTION: Imports the _globalThis utility from a local module. This likely provides a cross-runtime way to access the global object, used here to get the environment from.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { _globalThis } from './globalThis';

```

----------------------------------------

TITLE: Exporting from TurboPack for Effects
DESCRIPTION: This snippet imports the 'effects' array from another TurboPack part and re-exports it, effectively optimizing module handling with assertions. It utilizes ES module syntax and relies on TurboPack's specific export structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
export { effect } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export effect"
};
export { effects } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export effects"
};
```

----------------------------------------

TITLE: Importing Userland Module Namespace JS
DESCRIPTION: Imports the entire module as a namespace object named `userland` from a virtual module `VAR_USERLAND`. This import is hoisted and has side effects.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import * as userland from 'VAR_USERLAND';

```

----------------------------------------

TITLE: Module Exports
DESCRIPTION: Export declarations for variables including named exports and re-exports with TurboPack assertions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/grouping/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
export const y = x;
```

LANGUAGE: javascript
CODE:
```
export { y } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export y"
};
```

----------------------------------------

TITLE: Hoisting and Exporting Default Userland Export - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'default' export, assigning it to a variable __TURBOPACK__default__export__. Finally, it re-exports this default export under the alias 'a'. This pattern is used internally by Turbopack to manage exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_30

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
const __TURBOPACK__default__export__ = hoist(userland, 'default');
export { __TURBOPACK__default__export__ as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Customizing Module Count in Benchmark
DESCRIPTION: Environment variable configuration to modify the number of modules tested in the benchmark, allowing scalable performance testing
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-bench/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
TURBOPACK_BENCH_COUNTS=5000 cargo bench -p turbopack-bench
```

----------------------------------------

TITLE: Importing Environment Utilities (Bundled) - JavaScript
DESCRIPTION: Represents an import statement included in a Turbopack bundle part (Part 0), importing environment utilities for use within that part.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import '../../utils/environment';

```

----------------------------------------

TITLE: Publishing Next.js Stable Release
DESCRIPTION: Command for repository maintainers to publish a new stable version of Next.js. This command prompts for the version type (major, minor, or patch) following semantic versioning principles.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/release-channels-publishing.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
pnpm publish-stable
```

----------------------------------------

TITLE: Initializing Root Span Attributes Store - JavaScript
DESCRIPTION: Initializes a `Map` named `rootSpanAttributesStore` to store attributes associated with root trace spans. This map is used by the tracing implementation to retrieve root span details. The initialized map is then exported.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_28

LANGUAGE: javascript
CODE:
```
const rootSpanAttributesStore = new Map();
export { rootSpanAttributesStore as i } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting Object with Variable in Javascript
DESCRIPTION: This code exports a constant `a` as an object containing `shared` and a string. This demonstrates how variables are exported as part of an object.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
export const a = {
    shared,
    a: "aaaaaaaaaaa"
};
```

----------------------------------------

TITLE: Conditionally Requiring OpenTelemetry API JavaScript
DESCRIPTION: This snippet imports the previously exported `api` variable placeholder from Turbopack parts. It then conditionally requires the `@opentelemetry/api` module based on the `NEXT_RUNTIME` environment variable ('edge' or default Node.js) and includes a fallback to a compiled version in a `try...catch` block, assigning the loaded API object to the `api` variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_19

LANGUAGE: javascript
CODE:
```
import { a as api } from "__TURBOPACK_PART__" assert {
    "__turbopack_part__": -3
};
import "__TURBOPACK_PART__" assert {
    "__turbopack_part__": 0
};
if (process.env.NEXT_RUNTIME === 'edge') {
    api = require('@opentelemetry/api');
} else {
    try {
        api = require('@opentelemetry/api');
    } catch (err) {
        api = require('next/dist/compiled/@opentelemetry/api');
    }
}

```

----------------------------------------

TITLE: Re-exporting reportWebVitals - JavaScript
DESCRIPTION: This snippet imports the reportWebVitals function previously aliased as 'f' from a Turbopack part and re-exports it with its original name, 'reportWebVitals'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_47

LANGUAGE: javascript
CODE:
```
import { f as reportWebVitals } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
export { reportWebVitals };
```

----------------------------------------

TITLE: Improving Console Methods - Node.js - JavaScript
DESCRIPTION: Defines a function `improveConsole` that wraps standard console methods (`error`, `warn`, `log`, etc.). The wrapper adds custom string markers (`TURBOPACK_OUTPUT_B`, `S`, `E`) before and after the original console output, and optionally includes a formatted stack trace.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const improveConsole = (name, stream, addStack)=>{
    const original = console[name];
    const stdio = process[stream];
    console[name] = (...args)=>{
        stdio.write(`TURBOPACK_OUTPUT_B\n`);
        original(...args);
        if (addStack) {
            const stack = new Error().stack?.replace(/^.+\n.+\n/, "") + "\n";
            stdio.write("TURBOPACK_OUTPUT_S\n");
            stdio.write(stack);
        }
        stdio.write("TURBOPACK_OUTPUT_E\n");
    };
};

```

----------------------------------------

TITLE: Defining Function d2 and Exporting it via TurboPack in JavaScript
DESCRIPTION: This snippet defines `d2`, mirroring the export pattern of `d1`, and applies TurboPack's variable assertions for optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
function d2() {}
export { d2 as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Postpone Logic and Exports Module Part 8
DESCRIPTION: This module part imports several other parts and defines functions for handling React's experimental `unstable_postpone` feature, specifically `postponeWithTracking` for prerendering bailouts and `assertPostpone` to check if the feature is available. It also exports these functions and a boolean indicating `hasPostpone` status.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import React from 'react';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 3
};
const hasPostpone = typeof React.unstable_postpone === 'function';
function postponeWithTracking(prerenderState, expression, pathname) {
    assertPostpone();
    const reason = `Route ${pathname} needs to bail out of prerendering at this point because it used ${expression}. ` + `React throws this special object to indicate where. It should not be caught by ` + `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`;
    prerenderState.dynamicAccesses.push({
        stack: prerenderState.isDebugSkeleton ? new Error().stack : undefined,
        expression
    });
    React.unstable_postpone(reason);
}
function assertPostpone() {
    if (!hasPostpone) {
        throw new Error(`Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`);
    }
}
export { hasPostpone as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { postponeWithTracking as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { assertPostpone as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Declaring Variable z and Assigning x Value in Javascript
DESCRIPTION: This snippet declares a variable 'z' and assigns it the current value of variable 'x'. This also demonstrates variable assignment and dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
let z = x;
```

----------------------------------------

TITLE: Importing gridColumn Property - JS
DESCRIPTION: Imports the `gridColumn` CSS property value from a Turbopack part identified by a numeric ID and re-exports it. This is part of the modular CSS property definition pattern.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_59

LANGUAGE: javascript
CODE:
```
import { d as gridColumn } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -20
};
export { gridColumn };

```

----------------------------------------

TITLE: Define and Export gridArea Style Function in JS
DESCRIPTION: Imports a `style` helper function. It defines a `gridArea` style function by calling `style` with an object specifying the CSS property 'gridArea'. The resulting function is then exported both directly as `gridArea` and with the alias `l`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_85

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 27
};
const gridArea = style({
    prop: 'gridArea'
});
export { gridArea };
export { gridArea as l } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Exporting `gridAutoColumns` Grid Style Function (JavaScript)
DESCRIPTION: Imports the `gridAutoColumns` CSS grid property function and re-exports it, making the individual styling function available for direct use.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_87

LANGUAGE: javascript
CODE:
```
import { g as gridAutoColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -23
};
export { gridAutoColumns };

```

----------------------------------------

TITLE: Importing, Modifying, and Exporting - Part 4 - JavaScript
DESCRIPTION: This module part imports 'foobar' from a relative Turbopack part (-2), initializes 'bar', and concatenates 'bar' onto 'foobar'. It then exports 'bar' under the alias 'c' via a Turbopack variable export.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_18

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
const bar = "bar";
foobar += bar;
export { bar as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting Function c1_1 and Calling c1_2 in JavaScript
DESCRIPTION: This snippet defines and exports the function `c1_1`. It calls another function `c1_2`, demonstrating a functional dependency. The export statement is optimized via TurboPack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
export function c1_1() {
    return c1_2();
}
```

----------------------------------------

TITLE: Defining 'internal' Function in JavaScript
DESCRIPTION: Defines a local function 'internal' that calls the imported 'upper' function with the current value of 'foobar' and returns the result. This function definition is hoisted and declares/writes to 'internal'. It eventually reads 'upper' and 'foobar' when called.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_10

LANGUAGE: javascript
CODE:
```
function internal() {
    return upper(foobar);
}

```

----------------------------------------

TITLE: Importing Module with Side Effects JS
DESCRIPTION: Imports an internal Next.js module for App Route modules purely for its side effects. The import is hoisted and does not create any local bindings.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_12

LANGUAGE: javascript
CODE:
```
import '../../server/future/route-modules/app-route/module.compiled';

```

----------------------------------------

TITLE: Importing Next.js App Component in JS
DESCRIPTION: This snippet imports the `App` component, a standard Next.js component used to initialize pages and can be used to control page initialization and layout. The actual module path is represented by a placeholder variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_4

LANGUAGE: js
CODE:
```
import App from 'VAR_MODULE_APP';
```

----------------------------------------

TITLE: Exporting `gridAutoFlow` Grid Style Function (JavaScript)
DESCRIPTION: Imports the `gridAutoFlow` CSS grid property function and re-exports it, making the individual styling function available for direct use.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_88

LANGUAGE: javascript
CODE:
```
import { f as gridAutoFlow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -22
};
export { gridAutoFlow };

```

----------------------------------------

TITLE: Importing Spacing Utilities in JavaScript
DESCRIPTION: Imports 'createUnaryUnit' and 'getValue' helper functions from the spacing module. These are used to transform spacing values based on the theme and apply units.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_2

LANGUAGE: js
CODE:
```
import { createUnaryUnit, getValue } from './spacing';
```

----------------------------------------

TITLE: Composing Grid Style Functions JavaScript
DESCRIPTION: Defines a constant `grid` by calling the `compose` function with a list of previously defined individual grid style functions. This creates a single composite function that applies multiple grid styles simultaneously. It depends on the `compose` function and all listed individual style functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_22

LANGUAGE: javascript
CODE:
```
const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
```

----------------------------------------

TITLE: Initializing Last Span ID Counter Javascript
DESCRIPTION: Initializes a variable `lastSpanId` to 0, which serves as a simple counter for generating unique span IDs locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_10

LANGUAGE: javascript
CODE:
```
let lastSpanId = 0;

```

----------------------------------------

TITLE: Importing Turbopack Part and Next.js Document (JavaScript)
DESCRIPTION: Imports a Turbopack module part along with the standard `next/document` module. This demonstrates how Turbopack integrates standard library imports within its internal module structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_6

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import 'next/document';
```

----------------------------------------

TITLE: Exporting Default Userland Export (Hoisted) in JS
DESCRIPTION: This snippet exports the default export from the `userland` module, processed through the `hoist` helper function. This makes the user's default page component or export available for the Next.js runtime.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_6

LANGUAGE: js
CODE:
```
export default hoist(userland, 'default');
```

----------------------------------------

TITLE: Defining Row Gap Filter Props in JavaScript
DESCRIPTION: Assigns a 'filterProps' array listing 'rowGap' to the 'rowGap' function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_13

LANGUAGE: js
CODE:
```
rowGap.filterProps = [ 'rowGap' ];
```

----------------------------------------

TITLE: Waiting for File Existence with devlow-bench - JavaScript
DESCRIPTION: Demonstrates using the `waitForFile` helper from `devlow-bench/file` to pause execution until a specified file appears on the file system, with an optional timeout.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import { waitForFile } from 'devlow-bench/file'

// wait for file to exist
await waitForFile('/path/to/file', /* timeout = */ 30000)
```

----------------------------------------

TITLE: Importing Turbopack Part 4 and Next Document - JavaScript
DESCRIPTION: Imports module part 4 and the `next/document` module, likely combining bundling logic with a necessary dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import 'next/document';

```

----------------------------------------

TITLE: Defining Functions c2_1, c2_2, c2_3 with TurboPack Exports in JavaScript
DESCRIPTION: This snippet introduces functions `c2_1`, `c2_2`, and `c2_3`, demonstrating interdependencies and using TurboPack for exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
import { c as d3 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
function c2_1() {
    return c2_2(d3);
}
function c2_2() {
    return c2_3();
}
function c2_3() {
    return c2_1();
}
export { c2_1 as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { c2_2 as h } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { c2_3 as i } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Example GitHub Pages URL
DESCRIPTION: Example of what the URL looks like when deployed to GitHub Pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
https://<github-user-name>.github.io/<github-project-name>/
```

----------------------------------------

TITLE: Importing parseStackTrace - Stacktrace Parser - JavaScript
DESCRIPTION: Imports the `parse` function, aliased as `parseStackTrace`, from a local stacktrace-parser module. This dependency is used for parsing string representations of call stacks into a structured format.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { parse as parseStackTrace } from "../compiled/stacktrace-parser";

```

----------------------------------------

TITLE: Configure rowGap Prop Types in JS
DESCRIPTION: Imports the `rowGap` style function and `responsivePropType`. It conditionally assigns `propTypes` to the `rowGap` function based on the `NODE_ENV` environment variable, using `responsivePropType` in non-production environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_75

LANGUAGE: js
CODE:
```
import { c as rowGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 9
};
import responsivePropType from './responsivePropType';
rowGap.propTypes = process.env.NODE_ENV !== 'production' ? {
    rowGap: responsivePropType
} : {};

```

----------------------------------------

TITLE: Exporting `gridColumn` Grid Style Function (JavaScript)
DESCRIPTION: Imports the `gridColumn` CSS grid property function and re-exports it, making the individual styling function available for direct use.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_90

LANGUAGE: javascript
CODE:
```
import { d as gridColumn } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -20
};
export { gridColumn };

```

----------------------------------------

TITLE: Declare Binding: toNodeOutgoingHttpHeaders - Next.js - JS
DESCRIPTION: Declares the `toNodeOutgoingHttpHeaders` variable, binding it to the export of the same name from the '../utils' module. This function converts standard Headers objects to a format compatible with Node.js outgoing HTTP headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { toNodeOutgoingHttpHeaders, validateURL } from '../utils';
```

----------------------------------------

TITLE: Cloning the Next.js Repository
DESCRIPTION: GitHub CLI command to clone the Next.js repository with optimizations for faster cloning, downloading only recent commits from the canary branch.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
gh repo clone vercel/next.js -- --filter=blob:none --branch canary --single-branch
```

----------------------------------------

TITLE: Defining Gap Prop Types in JavaScript
DESCRIPTION: Assigns prop type validation to the 'gap' function. It uses 'responsivePropType' to indicate that the 'gap' prop can accept responsive values, only in non-production environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_6

LANGUAGE: js
CODE:
```
gap.propTypes = process.env.NODE_ENV !== 'production' ? { gap: responsivePropType } : {};
```

----------------------------------------

TITLE: Specifying Next.js SWC Package for Apple Silicon
DESCRIPTION: This code snippet shows the package name for the Next.js SWC binary specifically compiled for aarch64-apple-darwin (Apple Silicon ARM64) architecture.
SOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/darwin-arm64/README.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
`@next/swc-darwin-arm64`
```

----------------------------------------

TITLE: Bulk Re-exporting Turbopack Module Parts (JavaScript)
DESCRIPTION: This snippet performs multiple re-exports, directly exporting various functions and variables (`routeModule`, `default`, `config`, data fetching functions, web vitals, etc.) from different Turbopack parts specified by `__turbopack_part__` asserts. It serves as a consolidated export list for this module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_61

LANGUAGE: javascript
CODE:
```
export { routeModule } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export routeModule"
};
export { default } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export default"
};
export { config } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export config"
};
export { getServerSideProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getServerSideProps"
};
export { getStaticPaths } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getStaticPaths"
};
export { getStaticProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getStaticProps"
};
export { reportWebVitals } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export reportWebVitals"
};
export { unstable_getServerProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export unstable_getServerProps"
};
export { unstable_getServerSideProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export unstable_getServerSideProps"
};
export { unstable_getStaticParams } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export unstable_getStaticParams"
};
export { unstable_getStaticPaths } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export unstable_getStaticPaths"
};
export { unstable_getStaticProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export unstable_getStaticProps"
};
```

----------------------------------------

TITLE: Appending String Literal to 'foobar' in JavaScript
DESCRIPTION: Appends the string literal "foo" to the current value of the mutable variable 'foobar'. It reads from and writes to 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
foobar += "foo";

```

----------------------------------------

TITLE: Creating Movie and Person Nodes with Relationships in Neo4j
DESCRIPTION: This Cypher script snippet creates nodes representing movies and people, and establishes relationships such as ACTED_IN, DIRECTED, WROTE, and PRODUCED to represent the connections between them. The script defines properties for each node, such as 'title', 'released', and 'tagline' for movies and 'name' and 'born' for people. These relationships are essential for constructing a knowledge graph representing the movie domain.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/movie-sample.md#2025-04-21_snippet_0

LANGUAGE: Cypher
CODE:
```
CREATE (TheMatrix:Movie {title:'The Matrix', released:1999, tagline:'Welcome to the Real World'})
CREATE (Keanu:Person {name:'Keanu Reeves', born:1964})
CREATE (Carrie:Person {name:'Carrie-Anne Moss', born:1967})
CREATE (Laurence:Person {name:'Laurence Fishburne', born:1961})
CREATE (Hugo:Person {name:'Hugo Weaving', born:1960})
CREATE (LillyW:Person {name:'Lilly Wachowski', born:1967})
CREATE (LanaW:Person {name:'Lana Wachowski', born:1965})
CREATE (JoelS:Person {name:'Joel Silver', born:1952})
CREATE
(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrix),
(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrix),
(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrix),
(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrix),
(LillyW)-[:DIRECTED]->(TheMatrix),
(LanaW)-[:DIRECTED]->(TheMatrix),
(JoelS)-[:PRODUCED]->(TheMatrix)

CREATE (Emil:Person {name:"Emil Eifrem", born:1978})
CREATE (Emil)-[:ACTED_IN {roles:["Emil"]}]->(TheMatrix)

CREATE (TheMatrixReloaded:Movie {title:'The Matrix Reloaded', released:2003, tagline:'Free your mind'})
CREATE
(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrixReloaded),
(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrixReloaded),
(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrixReloaded),
(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrixReloaded),
(LillyW)-[:DIRECTED]->(TheMatrixReloaded),
(LanaW)-[:DIRECTED]->(TheMatrixReloaded),
(JoelS)-[:PRODUCED]->(TheMatrixReloaded)

CREATE (TheMatrixRevolutions:Movie {title:'The Matrix Revolutions', released:2003, tagline:'Everything that has a beginning has an end'})
CREATE
(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrixRevolutions),
(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrixRevolutions),
(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrixRevolutions),
(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrixRevolutions),
(LillyW)-[:DIRECTED]->(TheMatrixRevolutions),
(LanaW)-[:DIRECTED]->(TheMatrixRevolutions),
(JoelS)-[:PRODUCED]->(TheMatrixRevolutions)

CREATE (TheDevilsAdvocate:Movie {title:"The Devil's Advocate", released:1997, tagline:'Evil has its winning ways'})
CREATE (Charlize:Person {name:'Charlize Theron', born:1975})
CREATE (Al:Person {name:'Al Pacino', born:1940})
CREATE (Taylor:Person {name:'Taylor Hackford', born:1944})
CREATE
(Keanu)-[:ACTED_IN {roles:['Kevin Lomax']}]->(TheDevilsAdvocate),
(Charlize)-[:ACTED_IN {roles:['Mary Ann Lomax']}]->(TheDevilsAdvocate),
(Al)-[:ACTED_IN {roles:['John Milton']}]->(TheDevilsAdvocate),
(Taylor)-[:DIRECTED]->(TheDevilsAdvocate)

CREATE (AFewGoodMen:Movie {title:"A Few Good Men", released:1992, tagline:"In the heart of the nation's capital, in a courthouse of the U.S. government, one man will stop at nothing to keep his honor, and one will stop at nothing to find the truth."})
CREATE (TomC:Person {name:'Tom Cruise', born:1962})
CREATE (JackN:Person {name:'Jack Nicholson', born:1937})
CREATE (DemiM:Person {name:'Demi Moore', born:1962})
CREATE (KevinB:Person {name:'Kevin Bacon', born:1958})
CREATE (KieferS:Person {name:'Kiefer Sutherland', born:1966})
CREATE (NoahW:Person {name:'Noah Wyle', born:1971})
CREATE (CubaG:Person {name:'Cuba Gooding Jr.', born:1968})
CREATE (KevinP:Person {name:'Kevin Pollak', born:1957})
CREATE (JTW:Person {name:'J.T. Walsh', born:1943})
CREATE (JamesM:Person {name:'James Marshall', born:1967})
CREATE (ChristopherG:Person {name:'Christopher Guest', born:1948})
CREATE (RobR:Person {name:'Rob Reiner', born:1947})
CREATE (AaronS:Person {name:'Aaron Sorkin', born:1961})
CREATE
(TomC)-[:ACTED_IN {roles:['Lt. Daniel Kaffee']}]->(AFewGoodMen),
(JackN)-[:ACTED_IN {roles:['Col. Nathan R. Jessup']}]->(AFewGoodMen),
(DemiM)-[:ACTED_IN {roles:['Lt. Cdr. JoAnne Galloway']}]->(AFewGoodMen),
(KevinB)-[:ACTED_IN {roles:['Capt. Jack Ross']}]->(AFewGoodMen),
(KieferS)-[:ACTED_IN {roles:['Lt. Jonathan Kendrick']}]->(AFewGoodMen),
(NoahW)-[:ACTED_IN {roles:['Cpl. Jeffrey Barnes']}]->(AFewGoodMen),
(CubaG)-[:ACTED_IN {roles:['Cpl. Carl Hammaker']}]->(AFewGoodMen),
(KevinP)-[:ACTED_IN {roles:['Lt. Sam Weinberg']}]->(AFewGoodMen),
(JTW)-[:ACTED_IN {roles:['Lt. Col. Matthew Andrew Markinson']}]->(AFewGoodMen),
(JamesM)-[:ACTED_IN {roles:['Pfc. Louden Downey']}]->(AFewGoodMen),
(ChristopherG)-[:ACTED_IN {roles:['Dr. Stone']}]->(AFewGoodMen),
(AaronS)-[:ACTED_IN {roles:['Man in Bar']}]->(AFewGoodMen),
(RobR)-[:DIRECTED]->(AFewGoodMen),
(AaronS)-[:WROTE]->(AFewGoodMen)

CREATE (TopGun:Movie {title:"Top Gun", released:1986, tagline:'I feel the need, the need for speed.'})
CREATE (KellyM:Person {name:'Kelly McGillis', born:1957})
CREATE (ValK:Person {name:'Val Kilmer', born:1959})
CREATE (AnthonyE:Person {name:'Anthony Edwards', born:1962})
CREATE (TomS:Person {name:'Tom Skerritt', born:1933})
CREATE (MegR:Person {name:'Meg Ryan', born:1961})
CREATE (TonyS:Person {name:'Tony Scott', born:1944})
CREATE (JimC:Person {name:'Jim Cash', born:1941})
CREATE
(TomC)-[:ACTED_IN {roles:['Maverick']}]->(TopGun),
(KellyM)-[:ACTED_IN {roles:['Charlie']}]->(TopGun),
(ValK)-[:ACTED_IN {roles:['Iceman']}]->(TopGun),
(AnthonyE)-[:ACTED_IN {roles:['Goose']}]->(TopGun),
(TomS)-[:ACTED_IN {roles:['Viper']}]->(TopGun),
(MegR)-[:ACTED_IN {roles:['Carole']}]->(TopGun),
(TonyS)-[:DIRECTED]->(TopGun),
(JimC)-[:WROTE]->(TopGun)

CREATE (JerryMaguire:Movie {title:'Jerry Maguire', released:2000, tagline:'The rest of his life begins now.'})
CREATE (ReneeZ:Person {name:'Renee Zellweger', born:1969})
CREATE (KellyP:Person {name:'Kelly Preston', born:1962})
CREATE (JerryO:Person {name:"Jerry O'Connell", born:1974})
CREATE (JayM:Person {name:'Jay Mohr', born:1970})
CREATE (BonnieH:Person {name:'Bonnie Hunt', born:1961})
CREATE (ReginaK:Person {name:'Regina King', born:1971})
CREATE (JonathanL:Person {name:'Jonathan Lipnicki', born:1996})
CREATE (CameronC:Person {name:'Cameron Crowe', born:1957})
CREATE
(TomC)-[:ACTED_IN {roles:['Jerry Maguire']}]->(JerryMaguire),
(CubaG)-[:ACTED_IN {roles:['Rod Tidwell']}]->(JerryMaguire),
(ReneeZ)-[:ACTED_IN {roles:['Dorothy Boyd']}]->(JerryMaguire),
(KellyP)-[:ACTED_IN {roles:['Avery Bishop']}]->(JerryMaguire),
(JerryO)-[:ACTED_IN {roles:['Frank Cushman']}]->(JerryMaguire),
(JayM)-[:ACTED_IN {roles:['Bob Sugar']}]->(JerryMaguire),
(BonnieH)-[:ACTED_IN {roles:['Laurel Boyd']}]->(JerryMaguire),
(ReginaK)-[:ACTED_IN {roles:['Marcee Tidwell']}]->(JerryMaguire),
(JonathanL)-[:ACTED_IN {roles:['Ray Boyd']}]->(JerryMaguire),
(CameronC)-[:DIRECTED]->(JerryMaguire),
(CameronC)-[:PRODUCED]->(JerryMaguire),
(CameronC)-[:WROTE]->(JerryMaguire)

CREATE (StandByMe:Movie {title:"Stand By Me", released:1986, tagline:"For some, it's the last real taste of innocence, and the first real taste of life. But for everyone, it's the time that memories are made of."})
CREATE (RiverP:Person {name:'River Phoenix', born:1970})
CREATE (CoreyF:Person {name:'Corey Feldman', born:1971})
CREATE (WilW:Person {name:'Wil Wheaton', born:1972})
CREATE (JohnC:Person {name:'John Cusack', born:1966})
CREATE (MarshallB:Person {name:'Marshall Bell', born:1942})
CREATE
(WilW)-[:ACTED_IN {roles:['Gordie Lachance']}]->(StandByMe),
(RiverP)-[:ACTED_IN {roles:['Chris Chambers']}]->(StandByMe),
(JerryO)-[:ACTED_IN {roles:['Vern Tessio']}]->(StandByMe),
(CoreyF)-[:ACTED_IN {roles:['Teddy Duchamp']}]->(StandByMe),
(JohnC)-[:ACTED_IN {roles:['Denny Lachance']}]->(StandByMe),
(KieferS)-[:ACTED_IN {roles:['Ace Merrill']}]->(StandByMe),
(MarshallB)-[:ACTED_IN {roles:['Mr. Lachance']}]->(StandByMe),
(RobR)-[:DIRECTED]->(StandByMe)

CREATE (AsGoodAsItGets:Movie {title:'As Good as It Gets', released:1997, tagline:'A comedy from the heart that goes for the throat.'})
CREATE (HelenH:Person {name:'Helen Hunt', born:1963})
CREATE (GregK:Person {name:'Greg Kinnear', born:1963})
CREATE (JamesB:Person {name:'James L. Brooks', born:1940})
CREATE
(JackN)-[:ACTED_IN {roles:['Melvin Udall']}]->(AsGoodAsItGets),
(HelenH)-[:ACTED_IN {roles:['Carol Connelly']}]->(AsGoodAsItGets),
(GregK)-[:ACTED_IN {roles:['Simon Bishop']}]->(AsGoodAsItGets),
(CubaG)-[:ACTED_IN {roles:['Frank Sachs']}]->(AsGoodAsItGets),
(JamesB)-[:DIRECTED]->(AsGoodAsItGets)

CREATE (WhatDreamsMayCome:Movie {title:'What Dreams May Come', released:1998, tagline:'After life there is more. The end is just the beginning.'})
CREATE (AnnabellaS:Person {name:'Annabella Sciorra', born:1960})
CREATE (MaxS:Person {name:'Max von Sydow', born:1929})
CREATE (WernerH:Person {name:'Werner Herzog', born:1942})
CREATE (Robin:Person {name:'Robin Williams', born:1951})
CREATE (VincentW:Person {name:'Vincent Ward', born:1956})
CREATE
(Robin)-[:ACTED_IN {roles:['Chris Nielsen']}]->(WhatDreamsMayCome),
(CubaG)-[:ACTED_IN {roles:['Albert Lewis']}]->(WhatDreamsMayCome),
(AnnabellaS)-[:ACTED_IN {roles:['Annie Collins-Nielsen']}]->(WhatDreamsMayCome),
(MaxS)-[:ACTED_IN {roles:['The Tracker']}]->(WhatDreamsMayCome),
(WernerH)-[:ACTED_IN {roles:['The Face']}]->(WhatDreamsMayCome),
(VincentW)-[:DIRECTED]->(WhatDreamsMayCome)

CREATE (SnowFallingonCedars:Movie {title:'Snow Falling on Cedars', released:1999, tagline:'First loves last. Forever.'})
CREATE (EthanH:Person {name:'Ethan Hawke', born:1970})
CREATE (RickY:Person {name:'Rick Yune', born:1971})
CREATE (JamesC:Person {name:'James Cromwell', born:1940})
CREATE (ScottH:Person {name:'Scott Hicks', born:1953})
CREATE
(EthanH)-[:ACTED_IN {roles:['Ishmael Chambers']}]->(SnowFallingonCedars),
(RickY)-[:ACTED_IN {roles:['Kazuo Miyamoto']}]->(SnowFallingonCedars),
(MaxS)-[:ACTED_IN {roles:['Nels Gudmundsson']}]->(SnowFallingonCedars),
(JamesC)-[:ACTED_IN {roles:['Judge Fielding']}]->(SnowFallingonCedars),
(ScottH)-[:DIRECTED]->(SnowFallingonCedars)

CREATE (YouveGotMail:Movie {title:"You've Got Mail", released:1998, tagline:'At odds in life... in love on-line.'})
CREATE (ParkerP:Person {name:'Parker Posey', born:1968})
CREATE (DaveC:Person {name:'Dave Chappelle', born:1973})
CREATE (SteveZ:Person {name:'Steve Zahn', born:1967})
CREATE (TomH:Person {name:'Tom Hanks', born:1956})
CREATE (NoraE:Person {name:'Nora Ephron', born:1941})
CREATE
```

----------------------------------------

TITLE: Development Module Merged Evaluation
DESCRIPTION: Merged module evaluation code in development environment
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import { a as a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
console.log(a);
export { };

```

----------------------------------------

TITLE: Creating Singleton Tracer Factory Javascript
DESCRIPTION: Creates an immediately invoked function expression (IIFE) that instantiates the `NextTracerImpl` class once and returns a factory function. This ensures that a single tracer instance is created and reused across the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
const getTracer = (()=>{{
    const tracer = new NextTracerImpl();
    return ()=>tracer;
}})();

```

----------------------------------------

TITLE: Part 0: External Module Import
DESCRIPTION: Imports a module named 'module'. This is a standard JavaScript import statement, likely bringing in external dependencies required by later parts.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
import "module";

```

----------------------------------------

TITLE: Exporting and Initializing 'foobar' Variable in JavaScript
DESCRIPTION: Declares and initializes an exported mutable variable 'foobar' with the string value "foo". This statement declares and writes the initial value to 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
export let foobar = "foo";

```

----------------------------------------

TITLE: Javascript Module Part 0
DESCRIPTION: This code snippet represents part 0 of a JavaScript module. It includes console logging, variable declarations, and exports variables under different names. The `assert` keyword suggests this is using the module assertions proposal.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
console.log("Hello");
const value = externalFunction();
const value2 = externalObject.propertyWithGetter;
const value3 = externalFunction();
const shared = {
    value,
    value2,
    value3
};
export { value as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { value2 as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { value3 as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { shared as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Initializing Turbopack Object
DESCRIPTION: Creates an empty Turbopack object on the process global scope. This serves as the initial setup for Turbopack functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-globals/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
process.turbopack = {};
```

----------------------------------------

TITLE: Adding propTypes to columnGap Function (JS)
DESCRIPTION: This snippet adds propTypes validation to the columnGap function. It uses responsivePropType to validate the columnGap prop, ensuring it supports responsive values in non-production environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_72

LANGUAGE: javascript
CODE:
```
import { b as columnGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 9
};
import responsivePropType from './responsivePropType';
columnGap.propTypes = process.env.NODE_ENV !== 'production' ? {
    columnGap: responsivePropType
} : {};
```

----------------------------------------

TITLE: Adding Prop Types to Column Gap Utility - Part 15 - JavaScript
DESCRIPTION: Assigns `propTypes` validation to the `columnGap` function, using `responsivePropType`. This validation is conditional based on the `NODE_ENV` environment variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_41

LANGUAGE: js
CODE:
```
import { b as columnGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 9
};
import responsivePropType from './responsivePropType';
columnGap.propTypes = process.env.NODE_ENV !== 'production' ? {
    columnGap: responsivePropType
} : {};
```

----------------------------------------

TITLE: Development Module Configuration
DESCRIPTION: Development environment module configuration that initializes Turbopack and exports an empty object.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-globals/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
process.turbopack = {};
export { };

```

----------------------------------------

TITLE: Importing and Re-exporting Variable - Part 3 - JavaScript
DESCRIPTION: This module part imports 'foobar' from a relative Turbopack part (-2), assigns it to a new constant 'foo', and exports 'foo'. It also re-exports 'foo' under the alias 'b' via a Turbopack variable export.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_17

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
const foo = foobar;
export { foo };
export { foo as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing and Re-exporting unstable_getServerProps (Turbopack, JavaScript)
DESCRIPTION: This snippet imports the `unstable_getServerProps` function, aliased from a Turbopack part, and re-exports it. It exposes a potentially unstable server-side data fetching function from a compiled segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_56

LANGUAGE: javascript
CODE:
```
import { j as unstable_getServerProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -21
};
export { unstable_getServerProps };
```

----------------------------------------

TITLE: Part 8: Logging Variable Javascript
DESCRIPTION: Imports `foobarCopy` (aliased as `f`) from another part and imports parts 1 and 7, as well as an external module 'other'. It logs the value of the imported `foobarCopy` to the console.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { f as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
console.log(foobarCopy);
import "other";
export { };
```

----------------------------------------

TITLE: Module Entrypoints Configuration - JSON
DESCRIPTION: Describes the entrypoints configured for the module bundle, indicating evaluation points and exports. Note: This snippet uses a non-standard JSON-like format.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_10

LANGUAGE: json
CODE:
```
{
    ModuleEvaluation: 10,
    Export(
        "default",
    ): 10,
    Exports: 11,
}
```

----------------------------------------

TITLE: Re-exporting Default Userland Export - JavaScript
DESCRIPTION: This snippet imports the default export previously aliased as 'a' from a Turbopack part (indicated by the negative part number) and re-exports it with its original name, 'default'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_42

LANGUAGE: javascript
CODE:
```
import { a as __TURBOPACK__default__export__ } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -12
};
export { __TURBOPACK__default__export__ as default };
```

----------------------------------------

TITLE: Declaring 'upper' Import Binding in JavaScript
DESCRIPTION: Represents the binding of the imported 'upper' function. This binding is hoisted and declares the variable 'upper' in the current scope.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { upper } from "module";

```

----------------------------------------

TITLE: Appending 'bar' to 'foobar' in JavaScript
DESCRIPTION: Appends the value of 'bar' to the current value of the mutable variable 'foobar'. It reads from both 'bar' and 'foobar' and writes to 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
foobar += bar;

```

----------------------------------------

TITLE: Define and Export gridTemplateRows Style Function in JS
DESCRIPTION: Imports a `style` helper function. It defines a `gridTemplateRows` style function by calling `style` with an object specifying the CSS property 'gridTemplateRows'. The resulting function is then exported with the alias `j`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_83

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 25
};
const gridTemplateRows = style({
    prop: 'gridTemplateRows'
});
export { gridTemplateRows as j } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Exporting Object 'a' with Shared State in JavaScript
DESCRIPTION: Defines and exports an object 'a', which includes the shared state and a string property. It depends on 'shared' being defined previously. This involves exporting the state configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
export const a = {
    shared,
    a: "aaaaaaaaaaa"
};
```

----------------------------------------

TITLE: Importing getProperError - Local Error Util - JavaScript
DESCRIPTION: Imports the `getProperError` function from a local `./error` utility file. This function is likely used to standardize or enhance error objects before further processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { getProperError } from "./error";

```

----------------------------------------

TITLE: Module Part 5 - JS
DESCRIPTION: This part imports `foobar` from Part -2 (likely Part 2) and also imports Part 4. It creates a copy `foobarCopy` and exports it with alias `d` via a Turbopack variable assert.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_33

LANGUAGE: js
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
let foobarCopy = foobar;
export { foobarCopy as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting Multiple Grid Properties - JS
DESCRIPTION: Exports several CSS grid-related properties (`gap`, `columnGap`, `rowGap`, `gridArea`, etc.) directly from their respective Turbopack parts, identified by string names in the assert clause. This consolidates multiple exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_64

LANGUAGE: javascript
CODE:
```
export { gap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gap"
};
export { columnGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export columnGap"
};
export { rowGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export rowGap"
};
export { gridArea } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridArea"
};
export { default } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export default"
};
export { gridAutoColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridAutoColumns"
};
export { gridAutoFlow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridAutoFlow"
};
export { gridAutoRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridAutoRows"
};
export { gridColumn } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridColumn"
};
export { gridRow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridRow"
};
export { gridTemplateAreas } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridTemplateAreas"
};
export { gridTemplateColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridTemplateColumns"
};
export { gridTemplateRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export gridTemplateRows"
};

```

----------------------------------------

TITLE: Exporting Config Object (Hoisted) in JS
DESCRIPTION: This snippet exports the `config` object from the `userland` module, processed through the `hoist` helper. The config object allows setting specific options for the page.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_10

LANGUAGE: js
CODE:
```
export const config = hoist(userland, 'config');
```

----------------------------------------

TITLE: Importing, Copying, and Exporting - Part 5 - JavaScript
DESCRIPTION: This module part imports 'foobar' from a relative Turbopack part (-2) and also imports part 4. It creates a copy of 'foobar' named 'foobarCopy' and exports it under the alias 'd' using a Turbopack variable export.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_19

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
let foobarCopy = foobar;
export { foobarCopy as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Defining Functions c1_1, c1_2, c1_3 with TurboPack Exports in JavaScript
DESCRIPTION: This snippet organizes the functions `c1_1`, `c1_2`, and `c1_3` and exports them through TurboPack. It provides a structure for modularity within the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
import { b as d2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
import { a as d1 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
function c1_1() {
    return c1_2();
}
function c1_2() {
    return c1_3(d1);
}
function c1_3() {
    return c1_1(d2);
}
export { c1_1 as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { c1_2 as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { c1_3 as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting `gridAutoRows` Grid Style Function (JavaScript)
DESCRIPTION: Imports the `gridAutoRows` CSS grid property function and re-exports it, making the individual styling function available for direct use.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_89

LANGUAGE: javascript
CODE:
```
import { h as gridAutoRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -24
};
export { gridAutoRows };

```

----------------------------------------

TITLE: Exporting `gridTemplateRows` Grid Style Function (JavaScript)
DESCRIPTION: Imports the `gridTemplateRows` CSS grid property function and re-exports it, making the individual styling function available for direct use.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_94

LANGUAGE: javascript
CODE:
```
import { j as gridTemplateRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -26
};
export { gridTemplateRows };

```

----------------------------------------

TITLE: Creating PagesRouteModule Instance - JavaScript
DESCRIPTION: This snippet imports necessary internal Next.js modules (`PagesRouteModule`, `RouteKind`) and userland components (`App`, `Document`) along with the collected userland exports. It instantiates a `PagesRouteModule` with the route definition, component map, and the gathered userland exports. The created module is then exported as `routeModule` and also under the alias 'l'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_41

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import { RouteKind } from '../../server/future/route-kind';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
import App from 'VAR_MODULE_APP';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import Document from 'VAR_MODULE_DOCUMENT';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 22
};
const routeModule = new PagesRouteModule({
    definition: {
        kind: RouteKind.PAGES,
        page: 'VAR_DEFINITION_PAGE',
        pathname: 'VAR_DEFINITION_PATHNAME',
        bundlePath: '',
        filename: ''
    },
    components: {
        App,
        Document
    },
    userland
});
export { routeModule };
export { routeModule as l } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Part 7: Modifying Variable Javascript
DESCRIPTION: Imports the variable `foobar` (aliased as `a`) from another part and also imports part 5. It concatenates the string 'foo' to the value of the imported `foobar` variable, demonstrating a side effect on the shared variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 5
};
foobar += "foo";
```

----------------------------------------

TITLE: Module Part 10 - JS
DESCRIPTION: This part imports `foobar` from Part -2 (likely Part 2). It defines the `external2` function which appends "." to `foobar` and exports `external2` and its alias `g` via a Turbopack variable assert.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_38

LANGUAGE: js
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
function external2() {
    foobar += ".";
}
export { external2 };
export { external2 as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Evaluating Functions with TurboPack Imports in JavaScript
DESCRIPTION: This snippet handles function invocation that brings together `c1_3` and `c2_2`, demonstrating the cascading effect of module imports and exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
import { f as c1_3 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import { h as c2_2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -4
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
c1_3();
c2_2();
export { };
```

----------------------------------------

TITLE: Merged Export of Single Module Part in TurboPack (JavaScript)
DESCRIPTION: This snippet demonstrates the merged result of exporting a single module part (c1_3) in TurboPack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_21

LANGUAGE: javascript
CODE:
```
import { e as c1_3 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
export { c1_3 };
```

----------------------------------------

TITLE: Merged JavaScript Module Content
DESCRIPTION: This snippet contains the combined code for a module part after processing and merging. It includes necessary imports, the conditional function call from Item 3, and an empty export statement, representing the final consolidated code.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/dce/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { baz } from './module';
import './module';
if (1 + 1 == 3) {
    baz();
}
export { };
```

----------------------------------------

TITLE: Javascript Module Part 5 (prod)
DESCRIPTION: Part 5 of the production build. It imports `shared` as `c`, imports a previous part, and defines/exports `b`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_24

LANGUAGE: javascript
CODE:
```
import { c as shared } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
const b = {
    shared,
    b: "bbbbbbbbbbb"
};
export { b };
export { b as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting Order Array Initialization in JavaScript
DESCRIPTION: This snippet initializes an empty array named 'order' and exports it. There are no prerequisites other than a JavaScript runtime. This serves as the base for storing order-related operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
export const order = [];
```

----------------------------------------

TITLE: Calling c1_3 and c2_2 for Side Effects in JavaScript
DESCRIPTION: This snippet initiates a call to the `c1_3` function, which triggers its interdependencies. It serves as a side effect trigger for functional execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
c1_3();
```

----------------------------------------

TITLE: Adding Filter Props to Row Gap Utility - Part 19 - JavaScript
DESCRIPTION: Defines the `filterProps` array for the `rowGap` function, indicating which props should be consumed by this utility. Exports the `rowGap` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_45

LANGUAGE: js
CODE:
```
import { c as rowGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 18
};
rowGap.filterProps = [
    'rowGap'
];
export { rowGap };
```

----------------------------------------

TITLE: Creating Grid Row Style Function using Utility in JavaScript
DESCRIPTION: Creates a style function specifically for the 'gridRow' CSS property using the generic 'style' utility function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_15

LANGUAGE: js
CODE:
```
export const gridRow = style({
    prop: 'gridRow'
});
```

----------------------------------------

TITLE: Re-exporting unstable_getServerSideProps - JavaScript
DESCRIPTION: This snippet imports the unstable_getServerSideProps function previously aliased as 'k' from a Turbopack part and re-exports it with its original name, 'unstable_getServerSideProps'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_49

LANGUAGE: javascript
CODE:
```
import { k as unstable_getServerSideProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -22
};
export { unstable_getServerSideProps };
```

----------------------------------------

TITLE: Exporting Cat Variable in JavaScript
DESCRIPTION: This snippet defines a constant `cat` with the value 'cat' and exports it using Turbopack assertions. It illustrates the process of exporting simple variables in a module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
let cat = "cat";\nexport { cat as e } from "__TURBOPACK_VAR__" assert {\n    __turbopack_var__: true\n};
```

----------------------------------------

TITLE: Declaring and Exporting Another Variable in JavaScript
DESCRIPTION: This snippet declares a constant `b` and exports it similarly to how `a` is exported, including an assertion for turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
const b = "b";
```

LANGUAGE: JavaScript
CODE:
```
const b = "b";
export { b };
export { b as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Part 10: Defining and Exporting Function Javascript
DESCRIPTION: Imports the variable `foobar` (aliased as `a`) from another part. It defines a function `external2` which modifies the imported `foobar` by concatenating a '.' character. The function `external2` is exported directly and also under the alias `g`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
function external2() {
    foobar += ".";
}
export { external2 };
export { external2 as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Creating Root Span ID Context Key Javascript
DESCRIPTION: Creates a unique context key using the OpenTelemetry API (`api.createContextKey`) specifically for storing the ID of the root span within the tracing context.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const rootSpanIdKey = api.createContextKey('next.rootSpanId');

```

----------------------------------------

TITLE: Importing and Exporting Variable - Part 11 - JavaScript
DESCRIPTION: This module part imports 'foobar' from a relative Turbopack part (-2) and also imports part 6. It then exports the imported 'foobar' variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_25

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
export { foobar };
```

----------------------------------------

TITLE: Importing Variable a as x in Javascript
DESCRIPTION: This snippet imports a variable 'a' and renames it to 'x' within the module's scope. It uses Turbopack-specific syntax for importing modules and assertions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
import { a as x } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
```

----------------------------------------

TITLE: Consolidated Re-exports from Turbopack Parts - JavaScript
DESCRIPTION: This snippet consolidates multiple exports, re-exporting various components, data-fetching functions, and the route module itself directly from different Turbopack parts. This is likely the final step in assembling the module's public API for the build system.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_53

LANGUAGE: javascript
CODE:
```
export { routeModule } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export routeModule"
};
export { default } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export default"
};
export { config } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export config"
};
export { getServerSideProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getServerSideProps"
};
export { getStaticPaths } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getStaticPaths"
};
export { getStaticProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getStaticProps"
};
export { reportWebVitals } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export reportWebVitals"
};
export { unstable_getServerProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export unstable_getServerProps"
};
export { unstable_getServerSideProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export unstable_getServerSideProps"
};
export { unstable_getStaticParams } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export unstable_getStaticParams"
};
export { unstable_getStaticPaths } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export unstable_getStaticPaths"
};
export { unstable_getStaticProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export unstable_getStaticProps"
};
```

----------------------------------------

TITLE: Module Export and Resolution for Effects
DESCRIPTION: This snippet utilizes ES module syntax to declare an array of effects and a function to manipulate it. It also includes export statements for both the 'effect' function and the 'effects' array, with assertions for internal optimization in a complex module system.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const effects = [];
function effect(name) {
    effects.push(name);
}
export { effect };
export { effects };
export { effects as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { effect as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Merged External1 Export - JS
DESCRIPTION: This snippet shows the merged code specifically for the `external1` export, including all its dependencies and definitions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_42

LANGUAGE: js
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { upper } from "module";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
function internal() {
    return upper(foobar);
}
function external1() {
    return internal() + foobar;
}
export { external1 };
export { internal as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { external1 as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Check for Dynamic API Usage (JS)
DESCRIPTION: Checks a given prerender state object to determine if any dynamic API accesses were recorded during the rendering process. Returns `true` if the `dynamicAccesses` array is not empty, indicating dynamic usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
function usedDynamicAPIs(prerenderState) {
    return prerenderState.dynamicAccesses.length > 0;
}
export { usedDynamicAPIs };
export { usedDynamicAPIs as i } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing All from Userland Module as Namespace in JS
DESCRIPTION: This snippet imports all exports from the 'userland' module (the user's actual page code) and assigns them to a namespace variable `userland`. The actual module path is represented by a placeholder.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_5

LANGUAGE: js
CODE:
```
import * as userland from 'VAR_USERLAND';
```

----------------------------------------

TITLE: Importing Turbopack Part 0 - JavaScript
DESCRIPTION: Imports a specific module part identified by `__turbopack_part__: 0`, which is part of the Turbopack bundling process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_12

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};

```

----------------------------------------

TITLE: Initializing EdgeDB project - Bash
DESCRIPTION: This command initializes an EdgeDB project. It uses the `edgedb project init` command to set up a local EdgeDB instance and apply migrations defined in the `dbschema/migrations` directory.  It requires the EdgeDB CLI to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
$ edgedb project init
```

----------------------------------------

TITLE: Importing OpenTelemetry Constants Javascript
DESCRIPTION: Imports constant values used for OpenTelemetry tracing configuration, such as allow lists for span logging, from an internal constants file.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { LogSpanAllowList, NextVanillaSpanAllowlist } from './constants';

```

----------------------------------------

TITLE: Declare Binding: validateURL - Next.js - JS
DESCRIPTION: Declares the `validateURL` variable, binding it to the export of the same name from the '../utils' module. This function ensures a given URL string is valid and correctly formatted for use in responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { toNodeOutgoingHttpHeaders, validateURL } from '../utils';
```

----------------------------------------

TITLE: Module Part 1 - Variable Export
DESCRIPTION: Declares and exports variable 'b' with TurboPack variable assertion
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const b = "b";
export { b };
export { b as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Defining gridTemplateRows Style Function JavaScript
DESCRIPTION: Defines and exports a constant `gridTemplateRows`. This constant is assigned the result of calling the `style` function with an object specifying the CSS property 'gridTemplateRows'. This function likely creates a style utility for the `grid-template-rows` CSS property.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_19

LANGUAGE: javascript
CODE:
```
export const gridTemplateRows = style({
    prop: 'gridTemplateRows'
});
```

----------------------------------------

TITLE: Defining gridTemplateRows Style Function (JS)
DESCRIPTION: Creates a style function for the CSS 'gridTemplateRows' property. It relies on the 'style' helper and Turbopack assertions for module parts, exporting the function with an alias.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_52

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 25
};
const gridTemplateRows = style({
    prop: 'gridTemplateRows'
});
export { gridTemplateRows as j } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting Function c1_3 and Calling c1_1 in JavaScript
DESCRIPTION: This snippet defines and exports the function `c1_3`, which relies on `c1_1` and `d2`. This showcases circular dependencies between the functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
export function c1_3() {
    return c1_1(d2);
}
```

----------------------------------------

TITLE: Module Part 9 - JS
DESCRIPTION: This part imports `foobar` from Part -2 (likely Part 2), imports Part 0 and Part 6, and imports `upper` from "module". It defines `internal` and `external1` functions and exports `external1` and aliases `internal` and `external1` via Turbopack variable asserts.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_37

LANGUAGE: js
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { upper } from "module";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
function internal() {
    return upper(foobar);
}
function external1() {
    return internal() + foobar;
}
export { external1 };
export { internal as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { external1 as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Compiled Module Part 9 JS
DESCRIPTION: A segment of the compiled module code (Part 9) that imports `routeModule` from another Turbopack part, destructures its properties, and exports the destructured variables (`requestAsyncStorage`, `workAsyncStorage`, `serverHooks`) using Turbopack's variable assertion syntax.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_18

LANGUAGE: javascript
CODE:
```
import { a as routeModule } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
const { requestAsyncStorage, workAsyncStorage, serverHooks } = routeModule;
export { requestAsyncStorage as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { workAsyncStorage as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { serverHooks as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Declaring RouteKind Enum in JavaScript
DESCRIPTION: Defines the variable RouteKind as an Enum with different routing categories like PAGES, PAGES_API, APP_PAGE, and APP_ROUTE in JavaScript. This snippet simply declares RouteKind without any initialization or modification.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
export var RouteKind;
```

----------------------------------------

TITLE: Importing Stylesheet JavaScript
DESCRIPTION: Imports a stylesheet file relative to the current module. This is likely part of a CSS or style bundling process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_26

LANGUAGE: javascript
CODE:
```
import './style';
```

----------------------------------------

TITLE: Defining gridColumn Style Function (JS)
DESCRIPTION: Defines a style function specifically for the CSS 'gridColumn' property. It imports a 'style' helper and uses Turbopack-specific assertions for module parts and variables, exporting the resulting function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_46

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 18
};
const gridColumn = style({
    prop: 'gridColumn'
});
export { gridColumn as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Appending String Literal to 'foobar' Variable in JavaScript
DESCRIPTION: Appends the string literal "foo" to the existing value of the 'foobar' variable. This operation reads from 'foobar' and writes the new value back to 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
foobar += "foo";

```

----------------------------------------

TITLE: Javascript Module Part 2 (prod)
DESCRIPTION: Part 2 of the production build. It imports `shared` from part -3, and part 1. It also sets an external property, and logs the value of shared.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_21

LANGUAGE: javascript
CODE:
```
import { c as shared } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
externalObject.propertyWithSetter = 42;
console.log(shared);
export { };
```

----------------------------------------

TITLE: Composing Grid Properties - JS
DESCRIPTION: Imports various individual grid-related CSS properties and a `compose` function, then uses `compose` to combine them into a single `grid` object. This composite object is then exported as the default module export.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_65

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import compose from './compose';
import { a as gap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -11
};
import { b as columnGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
import { c as rowGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
import { d as gridColumn } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -20
};
import { e as gridRow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -21
};
import { f as gridAutoFlow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -22
};
import { g as gridAutoColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -23
};
import { h as gridAutoRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -24
};
import { i as gridTemplateColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -25
};
import { j as gridTemplateRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -26
};
import { k as gridTemplateAreas } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -27
};
import { l as gridArea } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -28
};
const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
const __TURBOPACK__default__export__ = grid;
export { __TURBOPACK__default__export__ as default };
export { grid as m } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { __TURBOPACK__default__export__ as n } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Handle Middleware Request Headers - Next.js - JS
DESCRIPTION: Defines a function `handleMiddlewareField` that processes `request.headers` from the initial options object (`init`). If present and an instance of `Headers`, it copies these request headers to the response headers, prefixed with 'x-middleware-request-', and adds an 'x-middleware-override-headers' header listing the original keys, making them accessible to middleware.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
function handleMiddlewareField(init, headers) {
    var _init_request;
    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {
        if (!(init.request.headers instanceof Headers)) {
            throw new Error('request.headers must be an instance of Headers');
        }
        const keys = [];
        for (const [key, value] of init.request.headers){
            headers.set('x-middleware-request-' + key, value);
            keys.push(key);
        }
        headers.set('x-middleware-override-headers', keys.join(','));
    }
}
```

----------------------------------------

TITLE: Part 3: Import, Assign, and Export Variable
DESCRIPTION: Imports the variable aliased as `a` from Turbopack part -2 (likely referring to Part 2), assigning it to a new constant `foo`. It then exports `foo` under the alias `b` using `__TURBOPACK_VAR__`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_16

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
const foo = foobar;
export { foo as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Javascript Module Part 1 (prod)
DESCRIPTION: This represents part 1 of the production build. It imports a previous turbopack part and then declares and exports variable `value2`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_20

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
const value2 = externalObject.propertyWithGetter;
export { value2 as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing and Exporting Additional Module Parts in TurboPack (JavaScript)
DESCRIPTION: This snippet shows another example of importing and exporting module parts in TurboPack, using a different part identifier.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_18

LANGUAGE: javascript
CODE:
```
import { h as c2_2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
export { c2_2 };
```

----------------------------------------

TITLE: Module Entry Point Declaration
DESCRIPTION: This snippet represents a module entry point configuration that includes export references for the 'effect' function and 'effects' array, along with a promise resolution to ensure all asynchronous calls are completed before the module evaluation is finalized.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
await Promise.resolve();
export { };
```

----------------------------------------

TITLE: Declare Binding: NextURL - Next.js - JS
DESCRIPTION: Declares the `NextURL` variable, binding it to the export of the same name from the '../next-url' module. The `NextURL` class provides enhanced URL handling capabilities for Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { NextURL } from '../next-url';
```

----------------------------------------

TITLE: Importing Style Utility in JavaScript
DESCRIPTION: Imports the core 'style' utility function from a local module. This utility is likely used to create simple style functions for direct CSS properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_0

LANGUAGE: js
CODE:
```
import style from './style';
```

----------------------------------------

TITLE: Reporting Measurements in devlow-bench - JavaScript
DESCRIPTION: Shows how to use `measureTime` to record the duration of an asynchronous operation and `reportMeasurement` to report arbitrary numeric values with units. Both functions accept optional configuration for reporting.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { measureTime, reportMeasurement } from 'devlow-bench'

// Measure a time
await measureTime('name of the timing', {
  /* optional options */
})

// Report some other measurement
await reportMeasurement('name of the measurement', value, unit, {
  /* optional options */
})
```

----------------------------------------

TITLE: Development Module Part 1
DESCRIPTION: Variable declaration and export in development environment
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
var a;
export { a as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Creating and Relating Movie and Person Nodes in Neo4j (Cypher)
DESCRIPTION: The snippet includes several Neo4j Cypher queries that create nodes representing movies and persons, and it defines various relationships between them such as ACTED_IN, DIRECTED, PRODUCED, and WROTE. Each node is created using the CREATE statement, specifying properties like movie title, release year, or person's birth date. The snippet establishes many-to-many relationships showing actors' roles in movies or directors' involvement in film creation. The code operates under the assumption that a Neo4j database environment is set up and the Cypher language is supported.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/movie-sample.md#2025-04-21_snippet_1

LANGUAGE: Cypher
CODE:
```
(TomH)-[:ACTED_IN {roles:['Joe Fox']}]->(YouveGotMail),
(MegR)-[:ACTED_IN {roles:['Kathleen Kelly']}]->(YouveGotMail),
(GregK)-[:ACTED_IN {roles:['Frank Navasky']}]->(YouveGotMail),
(ParkerP)-[:ACTED_IN {roles:['Patricia Eden']}]->(YouveGotMail),
(DaveC)-[:ACTED_IN {roles:['Kevin Jackson']}]->(YouveGotMail),
(SteveZ)-[:ACTED_IN {roles:['George Pappas']}]->(YouveGotMail),
(NoraE)-[:DIRECTED]->(YouveGotMail)

CREATE (SleeplessInSeattle:Movie {title:'Sleepless in Seattle', released:1993, tagline:'What if someone you never met, someone you never saw, someone you never knew was the only someone for you?'})
CREATE (RitaW:Person {name:'Rita Wilson', born:1956})
CREATE (BillPull:Person {name:'Bill Pullman', born:1953})
CREATE (VictorG:Person {name:'Victor Garber', born:1949})
CREATE (RosieO:Person {name:"Rosie O'Donnell", born:1962})
CREATE
(TomH)-[:ACTED_IN {roles:['Sam Baldwin']}]->(SleeplessInSeattle),
(MegR)-[:ACTED_IN {roles:['Annie Reed']}]->(SleeplessInSeattle),
(RitaW)-[:ACTED_IN {roles:['Suzy']}]->(SleeplessInSeattle),
(BillPull)-[:ACTED_IN {roles:['Walter']}]->(SleeplessInSeattle),
(VictorG)-[:ACTED_IN {roles:['Greg']}]->(SleeplessInSeattle),
(RosieO)-[:ACTED_IN {roles:['Becky']}]->(SleeplessInSeattle),
(NoraE)-[:DIRECTED]->(SleeplessInSeattle)

CREATE (JoeVersustheVolcano:Movie {title:'Joe Versus the Volcano', released:1990, tagline:'A story of love, lava and burning desire.'})
CREATE (JohnS:Person {name:'John Patrick Stanley', born:1950})
CREATE (Nathan:Person {name:'Nathan Lane', born:1956})
CREATE
(TomH)-[:ACTED_IN {roles:['Joe Banks']}]->(JoeVersustheVolcano),
(MegR)-[:ACTED_IN {roles:['DeDe', 'Angelica Graynamore', 'Patricia Graynamore']}]->(JoeVersustheVolcano),
(Nathan)-[:ACTED_IN {roles:['Baw']}]->(JoeVersustheVolcano),
(JohnS)-[:DIRECTED]->(JoeVersustheVolcano)

CREATE (WhenHarryMetSally:Movie {title:'When Harry Met Sally', released:1998, tagline:'Can two friends sleep together and still love each other in the morning?'})
CREATE (BillyC:Person {name:'Billy Crystal', born:1948})
CREATE (CarrieF:Person {name:'Carrie Fisher', born:1956})
CREATE (BrunoK:Person {name:'Bruno Kirby', born:1949})
CREATE
(BillyC)-[:ACTED_IN {roles:['Harry Burns']}]->(WhenHarryMetSally),
(MegR)-[:ACTED_IN {roles:['Sally Albright']}]->(WhenHarryMetSally),
(CarrieF)-[:ACTED_IN {roles:['Marie']}]->(WhenHarryMetSally),
(BrunoK)-[:ACTED_IN {roles:['Jess']}]->(WhenHarryMetSally),
(RobR)-[:DIRECTED]->(WhenHarryMetSally),
(RobR)-[:PRODUCED]->(WhenHarryMetSally),
(NoraE)-[:PRODUCED]->(WhenHarryMetSally),
(NoraE)-[:WROTE]->(WhenHarryMetSally)

CREATE (ThatThingYouDo:Movie {title:'That Thing You Do', released:1996, tagline:'In every life there comes a time when that thing you dream becomes that thing you do'})
CREATE (LivT:Person {name:'Liv Tyler', born:1977})
CREATE
(TomH)-[:ACTED_IN {roles:['Mr. White']}]->(ThatThingYouDo),
(LivT)-[:ACTED_IN {roles:['Faye Dolan']}]->(ThatThingYouDo),
(Charlize)-[:ACTED_IN {roles:['Tina']}]->(ThatThingYouDo),
(TomH)-[:DIRECTED]->(ThatThingYouDo)

CREATE (TheReplacements:Movie {title:'The Replacements', released:2000, tagline:'Pain heals, Chicks dig scars... Glory lasts forever'})
CREATE (Brooke:Person {name:'Brooke Langton', born:1970})
CREATE (Gene:Person {name:'Gene Hackman', born:1930})
CREATE (Orlando:Person {name:'Orlando Jones', born:1968})
CREATE (Howard:Person {name:'Howard Deutch', born:1950})
CREATE
(Keanu)-[:ACTED_IN {roles:['Shane Falco']}]->(TheReplacements),
(Brooke)-[:ACTED_IN {roles:['Annabelle Farrell']}]->(TheReplacements),
(Gene)-[:ACTED_IN {roles:['Jimmy McGinty']}]->(TheReplacements),
(Orlando)-[:ACTED_IN {roles:['Clifford Franklin']}]->(TheReplacements),
(Howard)-[:DIRECTED]->(TheReplacements)

CREATE (RescueDawn:Movie {title:'RescueDawn', released:2006, tagline:"Based on the extraordinary true story of one man's fight for freedom"})
CREATE (ChristianB:Person {name:'Christian Bale', born:1974})
CREATE (ZachG:Person {name:'Zach Grenier', born:1954})
CREATE
(MarshallB)-[:ACTED_IN {roles:['Admiral']}]->(RescueDawn),
(ChristianB)-[:ACTED_IN {roles:['Dieter Dengler']}]->(RescueDawn),
(ZachG)-[:ACTED_IN {roles:['Squad Leader']}]->(RescueDawn),
(SteveZ)-[:ACTED_IN {roles:['Duane']}]->(RescueDawn),
(WernerH)-[:DIRECTED]->(RescueDawn)

CREATE (TheBirdcage:Movie {title:'The Birdcage', released:1996, tagline:'Come as you are'})
CREATE (MikeN:Person {name:'Mike Nichols', born:1931})
CREATE
(Robin)-[:ACTED_IN {roles:['Armand Goldman']}]->(TheBirdcage),
(Nathan)-[:ACTED_IN {roles:['Albert Goldman']}]->(TheBirdcage),
(Gene)-[:ACTED_IN {roles:['Sen. Kevin Keeley']}]->(TheBirdcage),
(MikeN)-[:DIRECTED]->(TheBirdcage)

CREATE (Unforgiven:Movie {title:'Unforgiven', released:1992, tagline:"It's a hell of a thing, killing a man"})
CREATE (RichardH:Person {name:'Richard Harris', born:1930})
CREATE (ClintE:Person {name:'Clint Eastwood', born:1930})
CREATE
(RichardH)-[:ACTED_IN {roles:['English Bob']}]->(Unforgiven),
(ClintE)-[:ACTED_IN {roles:['Bill Munny']}]->(Unforgiven),
(Gene)-[:ACTED_IN {roles:['Little Bill Daggett']}]->(Unforgiven),
(ClintE)-[:DIRECTED]->(Unforgiven)

CREATE (JohnnyMnemonic:Movie {title:'Johnny Mnemonic', released:1995, tagline:'The hottest data on earth. In the coolest head in town'})
CREATE (Takeshi:Person {name:'Takeshi Kitano', born:1947})
CREATE (Dina:Person {name:'Dina Meyer', born:1968})
CREATE (IceT:Person {name:'Ice-T', born:1958})
CREATE (RobertL:Person {name:'Robert Longo', born:1953})
CREATE
(Keanu)-[:ACTED_IN {roles:['Johnny Mnemonic']}]->(JohnnyMnemonic),
(Takeshi)-[:ACTED_IN {roles:['Takahashi']}]->(JohnnyMnemonic),
(Dina)-[:ACTED_IN {roles:['Jane']}]->(JohnnyMnemonic),
(IceT)-[:ACTED_IN {roles:['J-Bone']}]->(JohnnyMnemonic),
(RobertL)-[:DIRECTED]->(JohnnyMnemonic)

CREATE (CloudAtlas:Movie {title:'Cloud Atlas', released:2012, tagline:'Everything is connected'})
CREATE (HalleB:Person {name:'Halle Berry', born:1966})
CREATE (JimB:Person {name:'Jim Broadbent', born:1949})
CREATE (TomT:Person {name:'Tom Tykwer', born:1965})
CREATE (DavidMitchell:Person {name:'David Mitchell', born:1969})
CREATE (StefanArndt:Person {name:'Stefan Arndt', born:1961})
CREATE
(TomH)-[:ACTED_IN {roles:['Zachry', 'Dr. Henry Goose', 'Isaac Sachs', 'Dermot Hoggins']}]->(CloudAtlas),
(Hugo)-[:ACTED_IN {roles:['Bill Smoke', 'Haskell Moore', 'Tadeusz Kesselring', 'Nurse Noakes', 'Boardman Mephi', 'Old Georgie']}]->(CloudAtlas),
(HalleB)-[:ACTED_IN {roles:['Luisa Rey', 'Jocasta Ayrs', 'Ovid', 'Meronym']}]->(CloudAtlas),
(JimB)-[:ACTED_IN {roles:['Vyvyan Ayrs', 'Captain Molyneux', 'Timothy Cavendish']}]->(CloudAtlas),
(TomT)-[:DIRECTED]->(CloudAtlas),
(LillyW)-[:DIRECTED]->(CloudAtlas),
(LanaW)-[:DIRECTED]->(CloudAtlas),
(DavidMitchell)-[:WROTE]->(CloudAtlas),
(StefanArndt)-[:PRODUCED]->(CloudAtlas)

CREATE (TheDaVinciCode:Movie {title:'The Da Vinci Code', released:2006, tagline:'Break The Codes'})
CREATE (IanM:Person {name:'Ian McKellen', born:1939})
CREATE (AudreyT:Person {name:'Audrey Tautou', born:1976})
CREATE (PaulB:Person {name:'Paul Bettany', born:1971})
CREATE (RonH:Person {name:'Ron Howard', born:1954})
CREATE
(TomH)-[:ACTED_IN {roles:['Dr. Robert Langdon']}]->(TheDaVinciCode),
(IanM)-[:ACTED_IN {roles:['Sir Leight Teabing']}]->(TheDaVinciCode),
(AudreyT)-[:ACTED_IN {roles:['Sophie Neveu']}]->(TheDaVinciCode),
(PaulB)-[:ACTED_IN {roles:['Silas']}]->(TheDaVinciCode),
(RonH)-[:DIRECTED]->(TheDaVinciCode)

CREATE (VforVendetta:Movie {title:'V for Vendetta', released:2006, tagline:'Freedom! Forever!'})
CREATE (NatalieP:Person {name:'Natalie Portman', born:1981})
CREATE (StephenR:Person {name:'Stephen Rea', born:1946})
CREATE (JohnH:Person {name:'John Hurt', born:1940})
CREATE (BenM:Person {name: 'Ben Miles', born:1967})
CREATE
(Hugo)-[:ACTED_IN {roles:['V']}]->(VforVendetta),
(NatalieP)-[:ACTED_IN {roles:['Evey Hammond']}]->(VforVendetta),
(StephenR)-[:ACTED_IN {roles:['Eric Finch']}]->(VforVendetta),
(JohnH)-[:ACTED_IN {roles:['High Chancellor Adam Sutler']}]->(VforVendetta),
(BenM)-[:ACTED_IN {roles:['Dascomb']}]->(VforVendetta),
(JamesM)-[:DIRECTED]->(VforVendetta),
(LillyW)-[:PRODUCED]->(VforVendetta),
(LanaW)-[:PRODUCED]->(VforVendetta),
(JoelS)-[:PRODUCED]->(VforVendetta),
(LillyW)-[:WROTE]->(VforVendetta),
(LanaW)-[:WROTE]->(VforVendetta)

CREATE (SpeedRacer:Movie {title:'Speed Racer', released:2008, tagline:'Speed has no limits'})
CREATE (EmileH:Person {name:'Emile Hirsch', born:1985})
CREATE (JohnG:Person {name:'John Goodman', born:1960})
CREATE (SusanS:Person {name:'Susan Sarandon', born:1946})
CREATE (MatthewF:Person {name:'Matthew Fox', born:1966})
CREATE (ChristinaR:Person {name:'Christina Ricci', born:1980})
CREATE (Rain:Person {name:'Rain', born:1982})
CREATE
(EmileH)-[:ACTED_IN {roles:['Speed Racer']}]->(SpeedRacer),
(JohnG)-[:ACTED_IN {roles:['Pops']}]->(SpeedRacer),
(SusanS)-[:ACTED_IN {roles:['Mom']}]->(SpeedRacer),
(MatthewF)-[:ACTED_IN {roles:['Racer X']}]->(SpeedRacer),
(ChristinaR)-[:ACTED_IN {roles:['Trixie']}]->(SpeedRacer),
(Rain)-[:ACTED_IN {roles:['Taejo Togokahn']}]->(SpeedRacer),
(BenM)-[:ACTED_IN {roles:['Cass Jones']}]->(SpeedRacer),
(LillyW)-[:DIRECTED]->(SpeedRacer),
(LanaW)-[:DIRECTED]->(SpeedRacer),
(LillyW)-[:WROTE]->(SpeedRacer),
(LanaW)-[:WROTE]->(SpeedRacer),
(JoelS)-[:PRODUCED]->(SpeedRacer)

CREATE (NinjaAssassin:Movie {title:'Ninja Assassin', released:2009, tagline:'Prepare to enter a secret world of assassins'})
CREATE (NaomieH:Person {name:'Naomie Harris'})
CREATE
(Rain)-[:ACTED_IN {roles:['Raizo']}]->(NinjaAssassin),
(NaomieH)-[:ACTED_IN {roles:['Mika Coretti']}]->(NinjaAssassin),
(RickY)-[:ACTED_IN {roles:['Takeshi']}]->(NinjaAssassin),
(BenM)-[:ACTED_IN {roles:['Ryan Maslow']}]->(NinjaAssassin),
(JamesM)-[:DIRECTED]->(NinjaAssassin),
(LillyW)-[:PRODUCED]->(NinjaAssassin),
(LanaW)-[:PRODUCED]->(NinjaAssassin),
(JoelS)-[:PRODUCED]->(NinjaAssassin)

CREATE (TheGreenMile:Movie {title:'The Green Mile', released:1999, tagline:"Walk a mile you'll never forget."})
CREATE (MichaelD:Person {name:'Michael Clarke Duncan', born:1957})
```

----------------------------------------

TITLE: Exporting isBubbledError Function - JavaScript
DESCRIPTION: Re-exports the `isBubbledError` utility function, making it available for use in other modules. Depends on the `isBubbledError` function being defined elsewhere (or in an earlier part of the bundled file).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_27

LANGUAGE: javascript
CODE:
```
import { r as isBubbledError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
export { isBubbledError };
```

----------------------------------------

TITLE: Adding Prop Types to Row Gap Utility - Part 18 - JavaScript
DESCRIPTION: Assigns `propTypes` validation to the `rowGap` function, using `responsivePropType`. This validation is conditional based on the `NODE_ENV` environment variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_44

LANGUAGE: js
CODE:
```
import { c as rowGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 9
};
import responsivePropType from './responsivePropType';
rowGap.propTypes = process.env.NODE_ENV !== 'production' ? {
    rowGap: responsivePropType
} : {};
```

----------------------------------------

TITLE: Importing Constants JavaScript
DESCRIPTION: Imports constants from the local `./constants` file. This snippet is part of the build process structure, likely ensuring the constants module is included for use in other parts of the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_31

LANGUAGE: javascript
CODE:
```
import './constants';
```

----------------------------------------

TITLE: Part 5: Import, Copy, and Export Variable
DESCRIPTION: Imports `foobar` from part -2 and imports part 4. It creates a copy of the current `foobar` value in `foobarCopy` and exports `foobarCopy` under the alias `d` using `__TURBOPACK_VAR__`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_18

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
let foobarCopy = foobar;
export { foobarCopy as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Turbopack Export getEnvWithoutDefaults Assert Import - JavaScript
DESCRIPTION: An import statement used by Turbopack to reference the part of the bundled module graph that exports the 'getEnvWithoutDefaults' function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
export { getEnvWithoutDefaults } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getEnvWithoutDefaults"
};

```

----------------------------------------

TITLE: Importing Turbopack Part and Stack Trace Parser - JavaScript
DESCRIPTION: Imports code from Turbopack module part 0 and an external module located at `../compiled/stacktrace-parser`. These imports provide necessary dependencies for functionality related to parsing and processing stack trace information, used in structured error reporting.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import "../compiled/stacktrace-parser";
```

----------------------------------------

TITLE: Exporting Variable y as b in Javascript
DESCRIPTION: This snippet exports the variable 'y' as 'b' from a module, utilizing a Turbopack-specific assertion.  Similar to exporting 'x', this is related to module bundling and dependency management.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
export { y as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing Turbopack Partition 6 and App Module - JavaScript
DESCRIPTION: Imports Turbopack partition 6 along with a placeholder `VAR_MODULE_APP`, likely representing the user's custom `_app` component import. This integrates the main application wrapper component.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_26

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import 'VAR_MODULE_APP';
```

----------------------------------------

TITLE: Defining Function d1 and Exporting it via TurboPack in JavaScript
DESCRIPTION: This snippet defines `d1` and exports it as `a`. The use of the TurboPack variable assert ensures optimization during module execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
function d1() {}
export { d1 as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting Combined Constants with Export Assertions
DESCRIPTION: This snippet exports the constants 'CHIMERA' and 'DOG' directly from the imports with assertions to ensure proper structure in module exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
export { CHIMERA } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export CHIMERA"
};
export { DOG } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export DOG"
};
```

----------------------------------------

TITLE: Javascript Module Part 2
DESCRIPTION: This code snippet represents part 2 of a JavaScript module. It imports `shared` from a previous module part and imports another turbopack part.  It then defines and exports `b` and `f`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
import { d as shared } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
const b = {
    shared,
    b: "bbbbbbbbbbb"
};
export { b };
export { b as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting Initial Cat Variable in JavaScript
DESCRIPTION: This snippet imports the variable `cat`, assigns it to a new variable `initialCat`, and exports it. This shows how to reference imported variables and make them available for other modules.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
import { e as cat } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: -5\n};\nconst initialCat = cat;\nexport { initialCat };\nexport { initialCat as f } from "__TURBOPACK_VAR__" assert {\n    __turbopack_var__: true\n};
```

----------------------------------------

TITLE: Logging Dog Variable in JavaScript
DESCRIPTION: This snippet demonstrates usage of the `dog` variable by logging its value multiple times to the console. It shows how to effectively utilize imported variables within the execution scope.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
import { a as dog } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: -0\n};\nimport "__TURBOPACK_PART__" assert {\n    __turbopack_part__: 1\n};\nimport "__TURBOPACK_PART__" assert {\n    __turbopack_part__: 4\n};\nconsole.log(dog);\nconsole.log(dog);\nconsole.log(dog);\nexport { };
```

----------------------------------------

TITLE: Module Part 6 - JS
DESCRIPTION: This part imports `foobar` from Part -2 (likely Part 2) and also imports Part 4. It appends the string "foo" to `foobar`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_34

LANGUAGE: js
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
foobar += "foo";
```

----------------------------------------

TITLE: Import Turbopack Part 2 - JavaScript
DESCRIPTION: This snippet imports Turbopack part 2, which bundles the `crypto` import and the `url-alphabet` import.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
```

----------------------------------------

TITLE: Variable Declaration - Dog String
DESCRIPTION: Declares and initializes a string variable 'dog'
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let dog = "dog";
```

----------------------------------------

TITLE: Defining Responsive Row Gap Utility - Part 17 - JavaScript
DESCRIPTION: Creates a function `rowGap` that applies responsive `row-gap` CSS property based on input props, theme spacing, and breakpoints. It uses spacing and breakpoint helpers. Exports the function for internal use (aliased as `c`) via Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_43

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { createUnaryUnit } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { getValue } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import { handleBreakpoints } from './breakpoints';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 15
};
const rowGap = (props)=>{
    if (props.rowGap !== undefined && props.rowGap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
        const styleFromPropValue = (propValue)=>(
                {
                rowGap: getValue(transformer, propValue)
            });
        return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
};
export { rowGap as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Defining Responsive Gap Utility - Part 11 - JavaScript
DESCRIPTION: Creates a function `gap` that applies responsive `gap` CSS property based on input props, theme spacing, and breakpoints. It uses `createUnaryUnit`, `getValue`, and `handleBreakpoints` helpers. Exports the function for internal use (aliased as `a`) via Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_37

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { createUnaryUnit } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { getValue } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import { handleBreakpoints } from './breakpoints';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 9
};
const gap = (props)=>{
    if (props.gap !== undefined && props.gap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');
        const styleFromPropValue = (propValue)=>(
                {
                gap: getValue(transformer, propValue)
            });
        return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
};
export { gap as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing Turbopack Partition 0 and Route Kind - JavaScript
DESCRIPTION: Combines the import of Turbopack partition 0 with the module defining different route kinds in Next.js. This indicates a dependency on both the partitioned code and core server logic related to route types.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import '../../server/future/route-kind';
```

----------------------------------------

TITLE: Running Next.js Development Server for Source Mapping Test
DESCRIPTION: Command to start the Next.js development server for the source mapping test application. This command is used in both Server Components and Server Actions testing procedures.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/development/app-dir/source-mapping/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
pnpm next dev test/development/app-dir/source-mapping
```

----------------------------------------

TITLE: Evaluating Merged Module - JavaScript
DESCRIPTION: This snippet represents a merged module evaluation point. It imports specific Turbopack parts, logs a variable derived from one of them, and attempts to modify it. This demonstrates the state and dependencies at a particular stage of the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_27

LANGUAGE: javascript
CODE:
```
import { d as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
console.log(foobarCopy);
export { };
```

----------------------------------------

TITLE: Merged Module Evaluation (Initial) - JS
DESCRIPTION: This snippet shows the initial merged code for module evaluation, importing various parts and performing a console log before an unused assignment.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_26

LANGUAGE: js
CODE:
```
import { d as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
console.log(foobarCopy);
foobarCopy += "Unused";
export { };
```

----------------------------------------

TITLE: Javascript Module Part 4 (prod)
DESCRIPTION: Part 4 of the production build. It imports `shared` as `c` and then creates and exports object `a`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_23

LANGUAGE: javascript
CODE:
```
import { c as shared } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
const a = {
    shared,
    a: "aaaaaaaaaaa"
};
export { a as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting Function 'external2' Modifying 'foobar' in JavaScript
DESCRIPTION: Defines and exports a function named 'external2' that appends a period (.) to the mutable variable 'foobar'. This function is hoisted and declares/writes to 'external2', eventually writing to 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
export function external2() {
    foobar += ".";
}

```

----------------------------------------

TITLE: Importing Turbopack Module Part (JavaScript)
DESCRIPTION: Imports a specific module part managed internally by Turbopack using an `assert` clause. This pattern is used for dependency management and code splitting within the Turbopack build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_5

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: Part 12: Consolidate Exports
DESCRIPTION: This part consolidates exports from other parts using string identifiers with the `__turbopack_part__` assert. It exports `external1`, `external2`, `foobar`, and `foo`, making them available as the final exports of the bundled module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_25

LANGUAGE: javascript
CODE:
```
export { external1 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export external1"
};
export { external2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export external2"
};
export { foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export foobar"
};
export { foo } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export foo"
};

```

----------------------------------------

TITLE: Importing Next.js Pages Route Module - JavaScript
DESCRIPTION: Imports the compiled module responsible for handling pages routes within the Next.js server environment. This is a foundational dependency for the Next.js routing system.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_18

LANGUAGE: javascript
CODE:
```
import '../../server/future/route-modules/pages/module.compiled';
```

----------------------------------------

TITLE: HMR Message Listener Registration
DESCRIPTION: Function to add callback handlers for HMR messages to the eventCallbacks array.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
export function addMessageListener(cb) {
    eventCallbacks.push(cb);
}
```

----------------------------------------

TITLE: Turbopack Part Import (0) - JavaScript
DESCRIPTION: This import statement uses a Turbopack-specific assert (`__turbopack_part__`) to indicate that it is importing a particular module part, identified by the numeric value 0. This pattern is used internally by Turbopack for code splitting and managing dependencies across different parts of a compiled bundle.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};

```

----------------------------------------

TITLE: Turbopack Module Part 1: Importing Another Part with Assert in JavaScript
DESCRIPTION: This code demonstrates how Turbopack imports one generated module 'part' into another using a special import path '__TURBOPACK_PART__' and an 'assert' clause specifying the part ID. This is part of Turbopack's internal mechanism for composing modules.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: Implementing Function to Modify Order - JavaScript
DESCRIPTION: This function, named 'func', pushes the string 'd' into the 'order' array, illustrating the function's side effect of modifying the global state.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export function func() {
    order.push("d");
}
```

----------------------------------------

TITLE: Declaring Empty Fetch Function in JavaScript
DESCRIPTION: This snippet defines a simple, empty function named 'fetch'. In a real application, this function would likely contain logic for performing network requests or other data fetching operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function fetch() {}
```

----------------------------------------

TITLE: Importing and Re-exporting unstable_getServerSideProps (Turbopack, JavaScript)
DESCRIPTION: Imports the `unstable_getServerSideProps` function, aliased from a specific Turbopack part, and re-exports it. This makes an unstable server-side rendering function available from a compiled segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_57

LANGUAGE: javascript
CODE:
```
import { k as unstable_getServerSideProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -22
};
export { unstable_getServerSideSideProps };
```

----------------------------------------

TITLE: Exporting Function c2_2 and Calling c2_3 in JavaScript
DESCRIPTION: This snippet defines `c2_2` that calls `c2_3`, illustrating dependency management within the functions while being exportable through TurboPack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
export function c2_2() {
    return c2_3();
}
```

----------------------------------------

TITLE: Temporal Activity Logging Example
DESCRIPTION: Example output from Temporal activity logging showing inventory reservation and payment processing steps.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
Reserving 2 of item B102
Charging user 123 for 2 of item B102
```

----------------------------------------

TITLE: Turbopack Part Export (run) - JavaScript
DESCRIPTION: This export statement uses a Turbopack-specific assert (`__turbopack_part__`) to indicate that it is exporting the `run` function from a specific module part, identified by the string value "export run". This pattern is used internally by Turbopack to manage exports across different parts of a compiled bundle.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
export { run } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export run"
};

```

----------------------------------------

TITLE: Object Creation with Variables in Javascript
DESCRIPTION: This code declares a constant `shared` and initializes it to an object. The object contains the variables `value`, `value2`, and `value3`, indicating a dependency on their respective declarations.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const shared = {
    value,
    value2,
    value3
};
```

----------------------------------------

TITLE: Installing TypeScript Plugin Dependencies
DESCRIPTION: Command to install required dependencies for the TypeScript plugin fixture.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/development/typescript-plugin/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Creating a Copy of 'foobar' Variable in JavaScript
DESCRIPTION: Declares and initializes a new mutable variable 'foobarCopy' with the current value of 'foobar'. This statement declares and writes to 'foobarCopy', and reads from 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
let foobarCopy = foobar;

```

----------------------------------------

TITLE: Re-exporting NextResponse from Turbopack Part
DESCRIPTION: This JavaScript snippet re-exports the `NextResponse` class from a specific Turbopack part identifier. This is part of the build process, indicating how the symbol is made available from a bundled module chunk.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_19

LANGUAGE: javascript
CODE:
```
export { NextResponse } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export NextResponse"
};
```

----------------------------------------

TITLE: Logging 'foobarCopy' to Console in JavaScript
DESCRIPTION: Prints the current value of the 'foobarCopy' variable to the standard console output. This operation has side effects (console output) and reads from 'foobarCopy'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
console.log(foobarCopy);

```

----------------------------------------

TITLE: Define and Export gridAutoRows Style Function in JS
DESCRIPTION: Imports a `style` helper function. It defines a `gridAutoRows` style function by calling `style` with an object specifying the CSS property 'gridAutoRows'. The resulting function is then exported with the alias `h`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_81

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 23
};
const gridAutoRows = style({
    prop: 'gridAutoRows'
});
export { gridAutoRows as h } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Defining Column Gap Prop Types in JavaScript
DESCRIPTION: Assigns prop type validation to the 'columnGap' function using 'responsivePropType' in non-production environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_9

LANGUAGE: js
CODE:
```
columnGap.propTypes = process.env.NODE_ENV !== 'production' ? { columnGap: responsivePropType } : {};
```

----------------------------------------

TITLE: Format Dynamic API Access Traces (JS)
DESCRIPTION: Formats the recorded dynamic API access entries from the prerender state into readable strings, including the expression and a cleaned-up stack trace. It filters out internal Next.js and Node.js stack lines for clarity.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_15

LANGUAGE: javascript
CODE:
```
function formatDynamicAPIAccesses(prerenderState) {
    return prerenderState.dynamicAccesses.filter((access)=>typeof access.stack === 'string' && access.stack.length > 0).map(({ expression, stack })=>{
        stack = stack.split('\n').slice(4).filter((line)=>{
            if (line.includes('node_modules/next/')) {
                return false;
            }
            if (line.includes(' (<anonymous>)')) {
                return false;
            }
            if (line.includes(' (node:')) {
                return false;
            }
            return true;
        }).join('\n');
        return `Dynamic API Usage Debug - ${expression}:\n${stack}`;
    });
}
export { formatDynamicAPIAccesses };
export { formatDynamicAPIAccesses as j } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Mermaid Diagram Phase 1
DESCRIPTION: This mermaid diagram represents the module dependencies in phase 1. It shows the different items and their dependencies, visualizing the flow of data and execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_8

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item4;
    Item5;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item10["export a"];
    Item11;
    Item11["export b"];
```

----------------------------------------

TITLE: Turbo-tasks Registry Generation in Rust
DESCRIPTION: Example of auto-generated registry code that maps global identifiers to implementations. Shows how type registrations are handled for value types and functions. Generated by the build script to enable runtime type resolution and serialization.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack/architecture.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
{
crate::nothing::NOTHINGVC_IMPL_NEW_FUNCTION.register(r##"turbo-tasks@TODO::::nothing::NothingVc::new"##);
crate::display::VALUETOSTRING_TRAIT_TYPE.register(r##"turbo-tasks@TODO::::display::ValueToString"##);
crate::primitives::STRING_VALUE_TYPE.register(r##"turbo-tasks@TODO::::primitives::String"##);
crate::primitives::BOOL_VALUE_TYPE.register(r##"turbo-tasks@TODO::::primitives::Bool"##);
crate::nothing::NOTHING_VALUE_TYPE.register(r##"turbo-tasks@TODO::::nothing::Nothing"##);
crate::native_function::NATIVEFUNCTION_VALUE_TYPE.register(r##"turbo-tasks@TODO::::native_function::NativeFunction"##);
crate::completion::COMPLETION_VALUE_TYPE.register(r##"turbo-tasks@TODO::::completion::Completion"##);
}
```

----------------------------------------

TITLE: Importing Turbopack Part and patchFetch JS
DESCRIPTION: Combines a Turbopack part import with a standard module import (`patchFetch`). This demonstrates how Turbopack incorporates utility module imports into its part structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_15

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import '../../server/lib/patch-fetch';

```

----------------------------------------

TITLE: Declaring Order Array - JavaScript
DESCRIPTION: This snippet declares a constant array named 'order', which will be used to store string values. This is the foundation for managing the state throughout this module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export const order = []; 
```

----------------------------------------

TITLE: Exporting Constant 'foo' from 'foobar' in JavaScript
DESCRIPTION: Declares and initializes a constant variable 'foo' with the current value of 'foobar' and exports it. It declares and writes to 'foo' and reads from 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export const foo = foobar;

```

----------------------------------------

TITLE: Exporting Mutable Variable 'foobar' in JavaScript
DESCRIPTION: Declares and initializes a mutable variable 'foobar' with the string value "foo" and exports it. It declares and writes to 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export let foobar = "foo";

```

----------------------------------------

TITLE: Export urlAlphabet String - JavaScript
DESCRIPTION: Exports the `urlAlphabet` string, which contains the default set of URL-friendly characters used by the standard `nanoid` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import { urlAlphabet } from './url-alphabet/index.js';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
export { urlAlphabet };
```

----------------------------------------

TITLE: Defining Module Entrypoint Configuration (JSON)
DESCRIPTION: This configuration snippet defines the entrypoints for module evaluation. It maps entrypoint names like 'ModuleEvaluation' and 'Exports' to numerical identifiers, likely used internally by the build system to track different phases or types of module execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/dce/output.md#_snippet_3

LANGUAGE: json
CODE:
```
{
    "ModuleEvaluation": 0,
    "Exports": 1
}
```

----------------------------------------

TITLE: Define Redirect Status Codes Set - Next.js - JS
DESCRIPTION: Declares a constant variable `REDIRECTS` and initializes it with a `Set` containing standard HTTP status codes that indicate a redirect (301, 302, 303, 307, 308). This set is used by the static `NextResponse.redirect` method to validate the provided status code.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const REDIRECTS = new Set([
    301,
    302,
    303,
    307,
    308
]);
```

----------------------------------------

TITLE: Declaring clientComponentLoadStart Variable in JavaScript
DESCRIPTION: This snippet declares a variable 'clientComponentLoadStart' initialized to 0, used to track the start time of component loading. No external dependencies are required for this declaration.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let clientComponentLoadStart = 0;
```

----------------------------------------

TITLE: Variable Declaration - Dog
DESCRIPTION: Declares a constant variable 'dog' with string value
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const dog = "dog";

```

----------------------------------------

TITLE: Exporting Function 'external1' in JavaScript
DESCRIPTION: Defines and exports a function named 'external1' that calls the 'internal' function, appends the current value of 'foobar', and returns the combined string. This function is hoisted and declares/writes to 'external1', eventually reading 'internal' and 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
export function external1() {
    return internal() + foobar;
}

```

----------------------------------------

TITLE: Variable Declaration and Property Access in Javascript
DESCRIPTION: This snippet declares a constant `value2` and assigns to it the value of `externalObject.propertyWithGetter`. This could trigger a getter with potential side effects.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const value2 = externalObject.propertyWithGetter;
```

----------------------------------------

TITLE: Import Module: NextURL - Next.js - JS
DESCRIPTION: Imports the module located at '../next-url'. This module is expected to export the `NextURL` class, a custom extension of the standard URL API used within the Next.js framework.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { NextURL } from '../next-url';
```

----------------------------------------

TITLE: Declaring originalPathname Constant JS
DESCRIPTION: Declares a constant `originalPathname` and initializes it with a placeholder string 'VAR_ORIGINAL_PATHNAME'. This likely represents the original request pathname before any potential rewrites or processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const originalPathname = 'VAR_ORIGINAL_PATHNAME';

```

----------------------------------------

TITLE: Importing and Modifying Variable - Part 6 - JavaScript
DESCRIPTION: This module part imports 'foobar' from a relative Turbopack part (-2) and also imports part 4. It then concatenates the string 'foo' onto the imported 'foobar' variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
foobar += "foo";
```

----------------------------------------

TITLE: Part 9: Modifying Variable Javascript
DESCRIPTION: Imports `foobarCopy` (aliased as `f`) from another part. It concatenates the string 'Unused' to the value of the imported `foobarCopy` variable, likely intended as a side effect.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import { f as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -6
};
foobarCopy += "Unused";
```

----------------------------------------

TITLE: Calling c2_2 for Side Effects in JavaScript
DESCRIPTION: This snippet invokes the function `c2_2`, similarly causing its dependencies to execute within the module, showcasing how function calls propagate.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
c2_2();
```

----------------------------------------

TITLE: HTML Header with Turbopack Logo and Badges
DESCRIPTION: HTML markup for the page header containing the Turbopack logo with dark/light mode support and various informational badges including Vercel attribution, version information, license, and community links.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack/README.md#2025-04-21_snippet_0

LANGUAGE: html
CODE:
```
<p align="center">
  <a href="https://turbo.build/pack">
    <picture>
      <source media="(prefers-color-scheme: dark)" srcset="https://user-images.githubusercontent.com/4060187/196945323-570383ab-2a33-44d3-a8f5-14eec8d49a26.png">
      <img src="https://user-images.githubusercontent.com/4060187/196945312-673c61d1-a7b2-448f-8447-d2aecc06ecfe.png" height="128">
    </picture>
    <h1 align="center">Turbopack</h1>
  </a>
</p>

<p align="center">
  <a aria-label="Vercel logo" href="https://vercel.com/">
    <img src="https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&logo=Vercel&labelColor=000">
  </a>
  <a aria-label="Crates.io version" href="https://crates.io/crates/turbopack">
    <img alt="" src="https://img.shields.io/crates/v/turbopack.svg?style=for-the-badge&labelColor=000000">
  </a>
  <a aria-label="License" href="https://github.com/vercel/turbo/blob/main/LICENSE">
    <img alt="" src="https://img.shields.io/npm/l/turbo.svg?style=for-the-badge&labelColor=000000&color=">
  </a>
  <a aria-label="Join the community on GitHub" href="https://github.com/vercel/turbo/discussions">
    <img alt="" src="https://img.shields.io/badge/Join%20the%20community-blueviolet.svg?style=for-the-badge&logo=turborepo&labelColor=000000&logoWidth=20&logoColor=white">
  </a>
</p>
```

----------------------------------------

TITLE: Exporting Multiple Module Parts in TurboPack (JavaScript)
DESCRIPTION: This snippet demonstrates how to export multiple parts from different TurboPack modules, each with its own assertion for the specific part being exported.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
export { c1_1 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export c1_1"
};
export { c1_3 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export c1_3"
};
export { c2_2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export c2_2"
};
```

----------------------------------------

TITLE: Exporting unstable_getStaticProps (Hoisted) in JS
DESCRIPTION: This snippet exports the unstable `unstable_getStaticProps` function from the `userland` module, processed through the `hoist` helper. This is an unstable precursor to `getStaticProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_12

LANGUAGE: js
CODE:
```
export const unstable_getStaticProps = hoist(userland, 'unstable_getStaticProps');
```

----------------------------------------

TITLE: Empty Javascript Module
DESCRIPTION: This snippet represents an empty JavaScript module. It might indicate a module that doesn't perform any specific actions or is used for structural purposes within the Turbopack bundling process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```

```

----------------------------------------

TITLE: Assigning another Value to Variable x in Javascript
DESCRIPTION: This snippet assigns a new value to the variable 'x'. Here, 'x' is assigned the numerical value of 2.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
x = 2;
```

----------------------------------------

TITLE: Part 1: Importing Module Javascript
DESCRIPTION: A minimal module part that simply imports an external module named 'module'. This likely serves to include the external module's code or side effects in the bundle.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import "module";
```

----------------------------------------

TITLE: Running Turbo Static Analysis and Neo4j Setup
DESCRIPTION: Commands to run the Turbo Static analyzer on project folders and set up a Neo4j database for viewing the results. The tool generates a graph.cypherl file that can be loaded into any Cypher-compatible database.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-static/readme.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# pass in the root folders you want to analyze. the system will recursively
# parse all rust code looking for turbo tasks functions
cargo run --release -- ../../../turbo ../../../next.js
# now you can load graph.cypherl into your database of choice, such as neo4j
docker run \
    --publish=7474:7474 --publish=7687:7687 \
    --volume=$HOME/neo4j/data:/data \
    neo4j
```

----------------------------------------

TITLE: Importing Node.js Net Module - JavaScript
DESCRIPTION: Imports the built-in Node.js `node:net` module. This module is essential for establishing network connections and implementing socket-based communication, which is required for the IPC mechanism used in development mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import "node:net";
```

----------------------------------------

TITLE: Evaluating Merged Module - JavaScript
DESCRIPTION: This snippet represents a merged module evaluation point. It imports specific Turbopack parts, logs a variable derived from one of them, and attempts to modify it. This demonstrates the state and dependencies at a particular stage of the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_21

LANGUAGE: javascript
CODE:
```
import { d as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
console.log(foobarCopy);
export { };
```

----------------------------------------

TITLE: Defining getEnvWithoutDefaults Function - JavaScript
DESCRIPTION: Defines and exports the getEnvWithoutDefaults function. It directly parses the environment from the global object using parseEnvironment without merging with default values.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
export function getEnvWithoutDefaults() {
    return parseEnvironment(_globalThis);
}
```

----------------------------------------

TITLE: Define nanoid Function - JavaScript
DESCRIPTION: Defines the main `nanoid` function for generating unique IDs. It defaults to a size of 21 characters. It uses the `urlAlphabet` and an internal random pool mechanism (`fillPool`, `pool`, `poolOffset`) to efficiently generate IDs.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { d as fillPool } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -4
};
import { a as poolOffset } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import { urlAlphabet } from './url-alphabet/index.js';
import { b as pool } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
let nanoid = (size = 21)=>{
    fillPool((size -= 0));
    let id = '';
    for(let i = poolOffset - size; i < poolOffset; i++){
        id += urlAlphabet[pool[i] & 63];
    }
    return id;
};
export { nanoid as h } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Export customRandom Function - JavaScript
DESCRIPTION: Exports the `customRandom` function, making it available for import and use in other modules within the bundle or application.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { f as customRandom } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
export { customRandom };
```

----------------------------------------

TITLE: Importing Turbopack Part 0 JavaScript
DESCRIPTION: This snippet imports a specific build part (part 0) managed by Turbopack using a custom `assert` syntax. This is part of Turbopack's internal bundling mechanism for managing module dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_16

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    "__turbopack_part__": 0
};

```

----------------------------------------

TITLE: Import Module: Utils - Next.js - JS
DESCRIPTION: Imports the module located at '../utils'. This module is expected to export several utility functions used within the response handling logic, specifically `toNodeOutgoingHttpHeaders` and `validateURL`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { toNodeOutgoingHttpHeaders, validateURL } from '../utils';
```

----------------------------------------

TITLE: Basic MDX Content
DESCRIPTION: This snippet demonstrates the basic structure of an MDX file, including plain text content. It shows how text can be directly included within an MDX document.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/pages/pages/index.mdx#2025-04-21_snippet_0

LANGUAGE: MDX
CODE:
```
"# Hello World\n\nThis is MDX!"
```

----------------------------------------

TITLE: Getter Function - Dog Variable
DESCRIPTION: Defines a function that returns the dog variable value
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
function getDog() {
    return dog;
}
```

----------------------------------------

TITLE: Setter Function - Dog Variable
DESCRIPTION: Defines a function that sets a new value for the dog variable
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
function setDog(newDog) {
    dog = newDog;
}
```

----------------------------------------

TITLE: Demonstrating Markdown Syntax Example
DESCRIPTION: Shows a basic example of Markdown syntax, including bold text and a link, for comparison with its HTML output. This snippet illustrates the source format before conversion.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_0

LANGUAGE: md
CODE:
```
I **love** using [Next.js](https://nextjs.org/)
```

----------------------------------------

TITLE: Module Part 3 - JS
DESCRIPTION: This part imports `foobar` from Part -2 (likely Part 2), assigns it to `foo`, exports `foo`, and also exports `foo` with alias `b` via a Turbopack variable assert.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_31

LANGUAGE: js
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
const foo = foobar;
export { foo };
export { foo as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Part 4: Import, Modify, and Export Variable
DESCRIPTION: Imports `foobar` from part -2 and imports part 3. It defines a constant `bar`, appends it to the imported `foobar` variable, and exports `bar` under the alias `c` using `__TURBOPACK_VAR__`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_17

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 3
};
const bar = "bar";
foobar += bar;
export { bar as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Exporting `gridRow` Grid Style Function (JavaScript)
DESCRIPTION: Imports the `gridRow` CSS grid property function and re-exports it, making the individual styling function available for direct use.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_91

LANGUAGE: javascript
CODE:
```
import { e as gridRow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -21
};
export { gridRow };

```

----------------------------------------

TITLE: Importing React Module Part 0
DESCRIPTION: This JavaScript snippet imports the 'react' module as the initial part of a larger module bundle. It serves as a foundational dependency for subsequent parts.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import 'react';
```

----------------------------------------

TITLE: Declaring Variable x with Initial Value in Javascript
DESCRIPTION: This snippet declares a variable 'x' using the 'let' keyword and initializes it with the value 0. It serves as the starting point for subsequent operations performed on 'x'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let x = 0;
```

----------------------------------------

TITLE: Hoisting and Exporting getServerSideProps - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'getServerSideProps' export. Finally, it re-exports this value under the alias 'd'. This is part of Turbopack's internal handling of Next.js data-fetching functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_33

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 14
};
const getServerSideProps = hoist(userland, 'getServerSideProps');
export { getServerSideProps as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exposing OpenTelemetry API Components JavaScript
DESCRIPTION: This snippet imports the configured `api` variable containing the OpenTelemetry API object from previous Turbopack parts. It destructures several key components (context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT) and re-exports each of them under short aliases (b, c, d, e, f, g) using Turbopack's `__TURBOPACK_VAR__` assert mechanism.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import { a as api } from "__TURBOPACK_PART__" assert {
    "__turbopack_part__": -3
};
import "__TURBOPACK_PART__" assert {
    "__turbopack_part__": 4
};
const { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } = api;
export { context as b } from "__TURBOPACK_VAR__" assert {
    "__turbopack_var__": true
};
export { propagation as c } from "__TURBOPACK_VAR__" assert {
    "__turbopack_var__": true
};
export { trace as d } from "__TURBOPACK_VAR__" assert {
    "__turbopack_var__": true
};
export { SpanStatusCode as e } from "__TURBOPACK_VAR__" assert {
    "__turbopack_var__": true
};
export { SpanKind as f } from "__TURBOPACK_VAR__" assert {
    "__turbopack_var__": true
};
export { ROOT_CONTEXT as g } from "__TURBOPACK_VAR__" assert {
    "__turbopack_var__": true
};

```

----------------------------------------

TITLE: Defining Custom BubbledError Class (JavaScript)
DESCRIPTION: Defines a custom error class `BubbledError` that extends the standard `Error` class. It includes properties to store a `bubble` value and a `result`, intended for scenarios where an error needs to be propagated alongside a result.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_38

LANGUAGE: javascript
CODE:
```
class BubbledError extends Error {
    constructor(bubble, result){
        super();
        this.bubble = bubble;
        this.result = result;
    }
}
export { BubbledError as q } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing createConnection - Node.js Net - JavaScript
DESCRIPTION: Imports the `createConnection` function from the Node.js `net` module. This function is used to establish a connection to a specified port and host, typically for IPC.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { createConnection } from "node:net";

```

----------------------------------------

TITLE: Turbopack Generated Module Part 2 (Dev/Prod) - JavaScript
DESCRIPTION: This JavaScript snippet represents 'Part 2' of the bundled output generated by Turbopack for both development and production builds. This part consists solely of re-export declarations (`export { ... } from "__TURBOPACK_PART__"`) that reference other internally generated Turbopack parts. This pattern is characteristic of how bundlers compose the final module by linking together processed or split pieces of the original code.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
export { GET } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export GET"
};
export { runtime } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export runtime"
};
```

----------------------------------------

TITLE: Import Turbopack Part 0 and url-alphabet - JavaScript
DESCRIPTION: Imports Turbopack part 0 (containing the `crypto` module import) and the local `./url-alphabet/index.js` file, which provides the default character set for nanoid.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import './url-alphabet/index.js';
```

----------------------------------------

TITLE: Importing gridRow Property - JS
DESCRIPTION: Imports the `gridRow` CSS property value from a Turbopack part identified by a numeric ID and re-exports it, following the modular CSS property definition pattern.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_60

LANGUAGE: javascript
CODE:
```
import { e as gridRow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -21
};
export { gridRow };

```

----------------------------------------

TITLE: Importing and Exporting Module Parts in TurboPack (JavaScript)
DESCRIPTION: This snippet demonstrates how TurboPack imports and exports specific parts of modules. It uses assertions to specify the TurboPack part being imported or exported.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_17

LANGUAGE: javascript
CODE:
```
import { e as c1_3 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
export { c1_3 };
```

----------------------------------------

TITLE: Turbopack Part Import 5
DESCRIPTION: This snippet imports 'Part 4' using a Turbopack-specific mechanism (`__TURBOPACK_PART__` with an assert clause), indicating a dependency on that module part.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
```

----------------------------------------

TITLE: Retrieving Client Component Loader Metrics in Next.js
DESCRIPTION: Function that retrieves client component loading metrics with optional reset functionality. Captures loading start time, times, and count of client components.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/logger/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
function getClientComponentLoaderMetrics(options = {}) {
    const metrics = clientComponentLoadStart === 0 ? undefined : {
        clientComponentLoadStart,
        clientComponentLoadTimes,
        clientComponentLoadCount
    };
    if (options.reset) {
        clientComponentLoadStart = 0;
        clientComponentLoadTimes = 0;
        clientComponentLoadCount = 0;
    }
    return metrics;
}
```

----------------------------------------

TITLE: Generating a React Component Tree with Fuzzponent CLI
DESCRIPTION: Example command to create a dependency tree with 3020 files in the components directory. It specifies a depth of 2 levels and uses seed 206 for deterministic generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/bench/fuzzponent/readme.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
fuzzponent --depth 2 --seed 206 --outdir components
```

----------------------------------------

TITLE: Referencing File Path in Next.js Repository
DESCRIPTION: This code snippet shows how to reference a specific file path within the Next.js repository using markdown syntax.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/triaging.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
[`examples`](https://github.com/vercel/next.js/tree/canary/examples)
```

----------------------------------------

TITLE: Creating a Development Branch in Next.js
DESCRIPTION: Git command to create a new branch from the canary branch for local development work.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
git checkout -b MY_BRANCH_NAME origin/canary
```

----------------------------------------

TITLE: Define and Export gridRow Style Function in JS
DESCRIPTION: Imports a `style` helper function. It defines a `gridRow` style function by calling `style` with an object specifying the CSS property 'gridRow'. The resulting function is then exported with the alias `e`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_78

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 20
};
const gridRow = style({
    prop: 'gridRow'
});
export { gridRow as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Define customAlphabet Function - JavaScript
DESCRIPTION: Defines the `customAlphabet` function, which simplifies `customRandom` by using a default random byte source (imported as `e`). It takes an `alphabet` string and desired ID `size`, returning a function that generates IDs based on these parameters using the built-in secure random number generator.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { f as customRandom } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
import { e as random } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -7
};
let customAlphabet = (alphabet, size)=>customRandom(alphabet, size, random);
export { customAlphabet };
export { customAlphabet as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Marking Scope as Dynamic Module Part 10
DESCRIPTION: This module imports necessary utilities and defines `markCurrentScopeAsDynamic`. It checks the store's state to determine if dynamic access should cause an error, postpone, or trigger a dynamic server error, managing static generation bailouts based on configured dynamic behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import { DynamicServerError } from '../../client/components/hooks-server-context';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import { getPathname } from '../../lib/url';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { StaticGenBailoutError } from '../../client/components/static-generation-bailout';
import { b as postponeWithTracking } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
function markCurrentScopeAsDynamic(store, expression) {
    const pathname = getPathname(store.urlPathname);
    if (store.isUnstableCacheCallback) {
        return;
    } else if (store.dynamicShouldError) {
        throw new StaticGenBailoutError(`Route ${pathname} with \`dynamic = "error"\` couldn't be rendered statically because it used \`${expression}\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    } else if (store.prerenderState) {
        postponeWithTracking(store.prerenderState, expression, pathname);
    } else {
        store.revalidate = 0;
        if (store.isStaticGeneration) {
            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);
            store.dynamicUsageDescription = expression;
            store.dynamicUsageStack = err.stack;
            throw err;
        }
    }
}
export { markCurrentScopeAsDynamic };
export { markCurrentScopeAsDynamic as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Function and Order Handling in Module - JavaScript
DESCRIPTION: This module imports 'order' and manipulates it by pushing data, alongside exporting functionality as part of the module's public interface.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
import { a as order } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
function func() {
    order.push("d");
}
order.push("c");
export { func };
export { order };
export { func as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Re-exporting unstable_getStaticPaths - JavaScript
DESCRIPTION: This snippet imports the unstable_getStaticPaths function previously aliased as 'h' from a Turbopack part and re-exports it with its original name, 'unstable_getStaticPaths'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_51

LANGUAGE: javascript
CODE:
```
import { h as unstable_getStaticPaths } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -19
};
export { unstable_getStaticPaths };
```

----------------------------------------

TITLE: Exporting unstable_getServerProps (Hoisted) in JS
DESCRIPTION: This snippet exports the unstable `unstable_getServerProps` function from the `userland` module, processed through the `hoist` helper. This is an unstable precursor to `getServerSideProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_15

LANGUAGE: js
CODE:
```
export const unstable_getServerProps = hoist(userland, 'unstable_getServerProps');
```

----------------------------------------

TITLE: Part 11: Import and Export Variable
DESCRIPTION: Imports the variable aliased as `b` from Turbopack part -3 (likely referring to Part 3), assigning it to `foo`. It then exports `foo` directly.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_24

LANGUAGE: javascript
CODE:
```
import { b as foo } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
export { foo };

```

----------------------------------------

TITLE: Importing and Exporting Metrics Variables in JavaScript
DESCRIPTION: These snippets import the previously declared metrics variables from the '__TURBOPACK_PART__' and export them using aliases. The variables are used to maintain metrics across parts, ensuring correct tracking.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { b as clientComponentLoadTimes } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
```

LANGUAGE: javascript
CODE:
```
import { a as clientComponentLoadStart } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
```

LANGUAGE: javascript
CODE:
```
import { c as clientComponentLoadCount } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
```

----------------------------------------

TITLE: Part 3: Declaring and Exporting Variable Javascript
DESCRIPTION: Initializes a variable `foobar` with the string value 'foo'. This variable is then exported under the alias `a` using a Turbopack-specific `__TURBOPACK_VAR__` assert.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
let foobar = "foo";
export { foobar as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Building WebAssembly Target for SWC
DESCRIPTION: Command to build the WebAssembly version of the SWC compiler. Requires wasm-pack to be installed. The target parameter specifies the WebAssembly target architecture.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm --filter=@next/swc build-wasm --target <wasm_target>
```

----------------------------------------

TITLE: Importing Turbopack Part 0 JavaScript
DESCRIPTION: This snippet imports a specific build part (part 0) managed by Turbopack using a custom `assert` syntax. This is part of Turbopack's internal bundling mechanism, similar to the previous snippet.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_17

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    "__turbopack_part__": 0
};

```

----------------------------------------

TITLE: Adding Filter Props to Column Gap Utility - Part 16 - JavaScript
DESCRIPTION: Defines the `filterProps` array for the `columnGap` function, indicating which props should be consumed by this utility. Exports the `columnGap` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_42

LANGUAGE: js
CODE:
```
import { b as columnGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 15
};
columnGap.filterProps = [
    'columnGap'
];
export { columnGap };
```

----------------------------------------

TITLE: Part 6: Copying and Exporting Variable Javascript
DESCRIPTION: Imports `foobar` (aliased as `a`) from another part and also imports part 5. It then creates a variable `foobarCopy` and assigns it the current value of `foobar`. `foobarCopy` is exported under the alias `f`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 5
};
let foobarCopy = foobar;
export { foobarCopy as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting Default Grid Function JavaScript
DESCRIPTION: Exports the `grid` constant as the default export of the module. This makes the composite grid styling function available for import and use in other parts of the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_23

LANGUAGE: javascript
CODE:
```
export default grid;
```

----------------------------------------

TITLE: Creating IPC Client Connection - JavaScript
DESCRIPTION: Defines the `createIpc` function that establishes a TCP connection to a specified port on localhost, implementing a length-prefixed packet protocol for sending and receiving JSON messages. It provides methods (`send`, `recv`, `sendReady`, `sendError`) for inter-process communication and handles incoming data and connection events.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_16

LANGUAGE: javascript
CODE:
```
import { a as structuredError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { createConnection } from "node:net";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
function createIpc(port) {
    const socket = createConnection(port, "127.0.0.1");
    const packetQueue = [];
    const recvPromiseResolveQueue = [];
    function pushPacket(packet) {
        const recvPromiseResolve = recvPromiseResolveQueue.shift();
        if (recvPromiseResolve != null) {
            recvPromiseResolve(JSON.parse(packet.toString("utf8")));
        } else {
            packetQueue.push(packet);
        }
    }
    let state = {
        type: "waiting"
    };
    let buffer = Buffer.alloc(0);
    socket.once("connect", ()=>{
        socket.on("data", (chunk)=>{
            buffer = Buffer.concat([
                buffer,
                chunk
            ]);
            loop: while(true){
                switch(state.type){
                    case "waiting":
                        {
                            if (buffer.length >= 4) {
                                const length = buffer.readUInt32BE(0);
                                buffer = buffer.subarray(4);
                                state = {
                                    type: "packet",
                                    length
                                };
                            } else {
                                break loop;
                            }
                            break;
                        }
                    case "packet":
                        {
                            if (buffer.length >= state.length) {
                                const packet = buffer.subarray(0, state.length);
                                buffer = buffer.subarray(state.length);
                                state = {
                                    type: "waiting"
                                };
                                pushPacket(packet);
                            } else {
                                break loop;
                            }
                            break;
                        }
                }
            }
        });
    });
    socket.once("close", ()=>{
        process.exit(0);
    });
    function send(message) {
        const packet = Buffer.from(JSON.stringify(message), "utf8");
        const length = Buffer.alloc(4);
        length.writeUInt32BE(packet.length);
        socket.write(length);
        return new Promise((resolve, reject)=>{
            socket.write(packet, (err)=>{
                process.stderr.write(`TURBOPACK_OUTPUT_D\n`);
                process.stdout.write(`TURBOPACK_OUTPUT_D\n`);
                if (err != null) {
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
    }
    function sendReady() {
        const length = Buffer.from([
            0,
            0,
            0,
            0
        ]);
        return new Promise((resolve, reject)=>{
            socket.write(length, (err)=>{
                process.stderr.write(`TURBOPACK_OUTPUT_D\n`);
                process.stdout.write(`TURBOPACK_OUTPUT_D\n`);
                if (err != null) {
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
    }
    return {
        async recv () {
            const packet = packetQueue.shift();
            if (packet != null) {
                return JSON.parse(packet.toString("utf8"));
            }
            const result = await new Promise((resolve)=>{
                recvPromiseResolveQueue.push((result)=>{
                    resolve(result);
                });
            });
            return result;
        },
        send (message) {
            return send(message);
        },
        sendReady,
        async sendError (error) {
            try {
                await send({
                    type: "error",
                    ...structuredError(error)
                });
            } catch (err) {
                console.error("failed to send error back to rust:", err);
                process.exit(1);
            }
            process.exit(0);
        }
    };
}
const PORT = process.argv[2];
const IPC = createIpc(parseInt(PORT, 10));
export { createIpc as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { PORT as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { IPC as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Hoisting and Exporting unstable_getServerSideProps - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'unstable_getServerSideProps' export. Finally, it re-exports this value under the alias 'k'. This handles unstable data-fetching functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_40

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 21
};
const unstable_getServerSideProps = hoist(userland, 'unstable_getServerSideProps');
export { unstable_getServerSideProps as k } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Defining gridAutoRows Style Function JavaScript
DESCRIPTION: Defines and exports a constant `gridAutoRows`. This constant is assigned the result of calling the `style` function with an object specifying the CSS property 'gridAutoRows'. This function likely creates a style utility for the `grid-auto-rows` CSS property.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_18

LANGUAGE: javascript
CODE:
```
export const gridAutoRows = style({
    prop: 'gridAutoRows'
});
```

----------------------------------------

TITLE: Upgrading Next.js and React Dependencies using npm
DESCRIPTION: Command to upgrade Next.js to version 11 and React to version 17 using npm package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-11.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@11 react@17 react-dom@17
```

----------------------------------------

TITLE: Module Part 1 - JS
DESCRIPTION: This part imports Module Part 0, indicating a dependency chain within the bundled output.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_29

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: Import Turbopack Part 0 - JavaScript
DESCRIPTION: This snippet imports Turbopack part 0, which is identified as containing the `crypto` module import. This is part of the Turbopack bundling process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: WebSocket Protocol Determination Function
DESCRIPTION: Function to determine WebSocket protocol (ws/wss) based on the asset prefix URL or current location protocol.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
function getSocketProtocol(assetPrefix) {
    let protocol = location.protocol;
    try {
        protocol = new URL(assetPrefix).protocol;
    } catch (_) {}
    return protocol === "http:" ? "ws" : "wss";
}
```

----------------------------------------

TITLE: Improving Console Output for Turbopack Processing - JavaScript
DESCRIPTION: This JavaScript function `improveConsole` wraps existing `console` methods to add specific string markers before and after the original output. It takes the console method name, the target stdio stream ('stdout' or 'stderr'), and a boolean indicating whether to add a stack trace. This allows external parsers to easily identify and process console output blocks and potentially link them to their source location via the optional stack trace.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
const improveConsole = (name, stream, addStack)=>{
    const original = console[name];
    const stdio = process[stream];
    console[name] = (...args)=>{
        stdio.write(`TURBOPACK_OUTPUT_B\n`);
        original(...args);
        if (addStack) {
            const stack = new Error().stack?.replace(/^.+\n.+\n/, "") + "\n";
            stdio.write("TURBOPACK_OUTPUT_S\n");
            stdio.write(stack);
        }
        stdio.write("TURBOPACK_OUTPUT_E\n");
    };
};
improveConsole("error", "stderr", true);
improveConsole("warn", "stderr", true);
improveConsole("count", "stdout", true);
improveConsole("trace", "stderr", false);
improveConsole("log", "stdout", true);
improveConsole("group", "stdout", true);
improveConsole("groupCollapsed", "stdout", true);
improveConsole("table", "stdout", true);
improveConsole("debug", "stdout", true);
improveConsole("info", "stdout", true);
improveConsole("dir", "stdout", true);
improveConsole("dirxml", "stdout", true);
improveConsole("timeEnd", "stdout", true);
improveConsole("timeLog", "stdout", true);
improveConsole("timeStamp", "stdout", true);
improveConsole("assert", "stderr", true);
export { improveConsole as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Importing Turbopack Partition 10 - JavaScript
DESCRIPTION: Imports a module partition identified as part 10, representing the final explicit link in this sequence of partitioned module dependencies within the Turbopack build output.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_29

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
```

----------------------------------------

TITLE: Disabling Webpack 5 in next.config.js
DESCRIPTION: This code snippet demonstrates how to disable Webpack 5 in older versions of Next.js by setting the `webpack5` flag to `false` in the `next.config.js` file. This was a temporary measure to allow users to upgrade to newer Next.js versions while still using Webpack 4. This option has been removed in Next.js 12.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/webpack5.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  // Webpack 5 is enabled by default
  // You can still use webpack 4 while upgrading to the latest version of Next.js by adding the "webpack5: false" flag
  webpack5: false,
}
```

----------------------------------------

TITLE: Running Development Tests for App Router
DESCRIPTION: Command to run tests in the 'test/e2e/app-dir/app' test suite in development mode, which uses 'next dev'.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
pnpm test-dev test/e2e/app-dir/app/
```

----------------------------------------

TITLE: Module Part 0 - JS
DESCRIPTION: This is a simple module part that imports the standard 'module' built-in, likely for side effects or global setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_28

LANGUAGE: js
CODE:
```
import "module";
```

----------------------------------------

TITLE: Conditional Function Call in JavaScript
DESCRIPTION: This snippet shows a standard conditional statement that calls the imported 'baz' function only if the condition '1 + 1 == 3' is true. It demonstrates usage of an imported binding within conditional logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/dce/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
if (1 + 1 == 3) {
    baz();
}
```

----------------------------------------

TITLE: Exporting Variable x as a in Javascript
DESCRIPTION: This snippet exports the variable 'x' as 'a' from a module, utilizing a Turbopack-specific assertion.  This pattern is used for module bundling and dependency management within Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
export { x as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Hoisting and Exporting unstable_getStaticParams - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'unstable_getStaticParams' export. Finally, it re-exports this value under the alias 'i'. This handles unstable data-fetching functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_38

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 19
};
const unstable_getStaticParams = hoist(userland, 'unstable_getStaticParams');
export { unstable_getStaticParams as i } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Javascript Module Merged (dev)
DESCRIPTION: This code snippet merges JavaScript modules for development. It imports `shared`, modifies `externalObject`, logs it, defines `a`, and exports `e`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_18

LANGUAGE: javascript
CODE:
```
import { d as shared } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
externalObject.propertyWithSetter = 42;
console.log(shared);
const a = {
    shared,
    a: "aaaaaaaaaaa"
};
export { a as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Importing Turbopack Part and Userland JS
DESCRIPTION: Combines a Turbopack part import with the import of the userland module namespace. This shows the inclusion of user-provided code dependencies within a Turbopack part.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_16

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import 'VAR_USERLAND';

```

----------------------------------------

TITLE: Creating Shared Object with Random Value and Side Effects
DESCRIPTION: Generates a shared object containing a random number and triggers a side effect during object creation
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-2/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const shared = {
    random,
    effect: order.push("b")
};
```

----------------------------------------

TITLE: Importing patchFetch Function Alias JS
DESCRIPTION: Imports the `patchFetch` function, aliasing it as `_patchFetch`, from an internal Next.js utility file. This import is hoisted and has side effects during module loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { patchFetch as _patchFetch } from '../../server/lib/patch-fetch';

```

----------------------------------------

TITLE: Declaring Effects Array
DESCRIPTION: This snippet declares an empty array named 'effects' which will be used to store effects names. It uses ES6 module syntax to export the 'effects' array so it can be imported in other modules.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export const effects = [];
```

----------------------------------------

TITLE: Exporting Variable z as c in Javascript
DESCRIPTION: This snippet exports the variable 'z' as 'c' from a module, utilizing a Turbopack-specific assertion.  Similar to exporting 'x' and 'y', this is related to module bundling and dependency management.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_17

LANGUAGE: javascript
CODE:
```
export { z as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting Variables from a Part in JavaScript
DESCRIPTION: Exports variables `a` and `b` from parts using assert configuration for turbopack. This is useful for modularizing code and managing dependencies with `__TURBOPACK_PART__`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
export { a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export a"
};
export { b } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export b"
};
```

----------------------------------------

TITLE: Running MacOS Compression Manually
DESCRIPTION: Command to manually run the MacOS compression script for node_modules and target directories to save disk space.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_19

LANGUAGE: bash
CODE:
```
./scripts/macos-compress.sh
```

----------------------------------------

TITLE: Running Snapshot Tests with nextest
DESCRIPTION: This command uses `cargo nextest` to run snapshot tests. The `-E` flag specifies a filter expression to select only tests that contain the substring 'test(snapshot)'. This allows running only the snapshot tests.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cargo nextest run -E 'test(snapshot)'
```

----------------------------------------

TITLE: Declaring AppRouteRouteModule Binding JS
DESCRIPTION: References the binding for the `AppRouteRouteModule` class imported from an internal Next.js module file. This binding is hoisted and declares the local name `AppRouteRouteModule`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { AppRouteRouteModule } from '../../server/future/route-modules/app-route/module.compiled';

```

----------------------------------------

TITLE: Empty Export Statement (Bundled) - JavaScript
DESCRIPTION: An export statement included in a Turbopack bundle part (Part 3 or Merged), signifying that this part might contribute to the module graph without directly exporting named variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_10

LANGUAGE: javascript
CODE:
```
export { };

```

----------------------------------------

TITLE: Declaring clientComponentLoadCount Variable in JavaScript
DESCRIPTION: This snippet declares a variable 'clientComponentLoadCount' initialized to 0, which tracks the number of times components have been loaded. No external dependencies are needed.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
let clientComponentLoadCount = 0;
```

----------------------------------------

TITLE: Define and Export gridTemplateAreas Style Function in JS
DESCRIPTION: Imports a `style` helper function. It defines a `gridTemplateAreas` style function by calling `style` with an object specifying the CSS property 'gridTemplateAreas'. The resulting function is then exported with the alias `k`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_84

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 26
};
const gridTemplateAreas = style({
    prop: 'gridTemplateAreas'
});
export { gridTemplateAreas as k } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Importing Style Module - JS
DESCRIPTION: Imports a style module from a local path. This is typically used to include CSS or other styling assets into the module graph.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_66

LANGUAGE: javascript
CODE:
```
import './style';

```

----------------------------------------

TITLE: Exporting `gridTemplateAreas` Grid Style Function (JavaScript)
DESCRIPTION: Imports the `gridTemplateAreas` CSS grid property function and re-exports it, making the individual styling function available for direct use.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_92

LANGUAGE: javascript
CODE:
```
import { k as gridTemplateAreas } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -27
};
export { gridTemplateAreas };

```

----------------------------------------

TITLE: Importing Turbopack Partition 8 - JavaScript
DESCRIPTION: Imports a module partition identified as part 8, continuing the chain of dependencies on partitioned code within the Turbopack build structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_27

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
```

----------------------------------------

TITLE: Handling Uncaught Exceptions - Node.js Process - JavaScript
DESCRIPTION: Sets up an event listener for Node.js `uncaughtException` errors. When an uncaught exception occurs, it uses the exported `IPC` object to send the error details back over the IPC channel.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
process.on("uncaughtException", (err)=>{
    IPC.sendError(err);
});

```

----------------------------------------

TITLE: Importing Turbopack Module Part 4 - JavaScript
DESCRIPTION: Imports code from Turbopack module part 4 using the special `assert` syntax with `__turbopack_part__`. This signifies an internal dependency within the Turbopack build, connecting this module part to part 4.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
```

----------------------------------------

TITLE: Exporting Object with Variable in Javascript
DESCRIPTION: This code exports a constant `b` as an object containing `shared` and a string. This is similar to the previous export, using a different variable and string.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
export const b = {
    shared,
    b: "bbbbbbbbbbb"
};
```

----------------------------------------

TITLE: Declaring Variables with External Function - JavaScript
DESCRIPTION: This snippet declares a constant 'x1' that holds the result of calling 'externalFunction()'. It serves to show how variables capture external function outputs.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const x1 = externalFunction();
```

----------------------------------------

TITLE: Declaring Variable a and Assigning x Value in Javascript
DESCRIPTION: This snippet declares a variable 'a' and assigns it the current value of variable 'x'. This is similar to the declarations of variables 'y' and 'z'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
let a = x;
```

----------------------------------------

TITLE: Module Evaluation Entrypoint (Final) Javascript
DESCRIPTION: This snippet appears to be another module evaluation entry point, similar to the first one. It imports `foobarCopy` from a part, imports parts 1 and 7, and the external module 'other'. It logs `foobarCopy` but does not include the subsequent modification found in the first evaluation snippet.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import { f as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import "other";
console.log(foobarCopy);
export { };
```

----------------------------------------

TITLE: Production Module Configuration
DESCRIPTION: Production environment module configuration that matches the development setup, initializing Turbopack and exporting an empty object.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-globals/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
process.turbopack = {};
export { };

```

----------------------------------------

TITLE: Declaring _patchFetch Binding JS
DESCRIPTION: References the binding for the `patchFetch` function, aliased as `_patchFetch`, imported from an internal Next.js utility file. This binding is hoisted and declares the local name `_patchFetch`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { patchFetch as _patchFetch } from '../../server/lib/patch-fetch';

```

----------------------------------------

TITLE: Turbopack Part Import 4 with Static Generation Bailout
DESCRIPTION: This snippet imports 'Part 2' via Turbopack assert and also imports the internal Next.js module for static generation bailout (`../../client/components/static-generation-bailout`).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import '../../client/components/static-generation-bailout';
```

----------------------------------------

TITLE: Bundled getEnvWithoutDefaults Function Part - JavaScript
DESCRIPTION: Contains the transformed 'getEnvWithoutDefaults' function definition within a Turbopack bundle part (Part 6), including necessary imports for its dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_12

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 3
};
import { _globalThis } from './globalThis';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { parseEnvironment } from '../../utils/environment';
function getEnvWithoutDefaults() {
    return parseEnvironment(_globalThis);
}
export { getEnvWithoutDefaults };
export { getEnvWithoutDefaults as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Importing Constants Module JavaScript
DESCRIPTION: This snippet imports a local constants file into the current module context. It represents a standard module dependency within the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_15

LANGUAGE: javascript
CODE:
```
import './constants';

```

----------------------------------------

TITLE: Importing gridTemplateRows Property - JS
DESCRIPTION: Imports the `gridTemplateRows` CSS property value from a Turbopack part identified by a numeric ID and re-exports it, consistent with the modular CSS property definition pattern.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_63

LANGUAGE: javascript
CODE:
```
import { j as gridTemplateRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -26
};
export { gridTemplateRows };

```

----------------------------------------

TITLE: Part 8: Define and Export Internal Function
DESCRIPTION: Imports `foobar` from part -2, imports part 0, imports `upper` from 'module', and imports part 6. Defines an `internal` function that calls `upper` with the current value of `foobar`. Exports `internal` under the alias `e` using `__TURBOPACK_VAR__`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_21

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { upper } from "module";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
function internal() {
    return upper(foobar);
}
export { internal as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Specifying Next.js SWC package for Darwin x64
DESCRIPTION: This code snippet defines the package name for the Next.js SWC compiler binary targeting x86_64 macOS (Darwin) systems. It is used to identify and install the correct platform-specific implementation.
SOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/darwin-x64/README.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
`@next/swc-darwin-x64`
```

----------------------------------------

TITLE: Performing Browser Operations with devlow-bench - JavaScript
DESCRIPTION: Demonstrates using the `newBrowserSession` helper from `devlow-bench/browser` to interact with a browser instance. Includes examples for hard navigation, reloading, soft navigation via click, and closing the session.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { newBrowserSession } from 'devlow-bench/browser'

const session = await newBrowserSession({
  // options
})
await session.hardNavigation('metric name', 'https://example.com')
await session.reload('metric name')
await session.softNavigationByClick('metric name', '.selector-to-click')
await session.close()
```

----------------------------------------

TITLE: Client Component Loader Wrapper Implementation
DESCRIPTION: Wraps client component loader with performance tracking. Measures load times and counts component loads using the Performance API. Only activates if performance API is available.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/logger/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export function wrapClientComponentLoader(ComponentMod) {
    if (!('performance' in globalThis)) {
        return ComponentMod.__next_app__;
    }
    return {
        require: (...args)=>{
            if (clientComponentLoadStart === 0) {
                clientComponentLoadStart = performance.now();
            }
            const startTime = performance.now();
            try {
                clientComponentLoadCount += 1;
                return ComponentMod.__next_app__.require(...args);
            } finally{
                clientComponentLoadTimes += performance.now() - startTime;
            }
        },
        loadChunk: (...args)=>{
            const startTime = performance.now();
            try {
                clientComponentLoadCount += 1;
                return ComponentMod.__next_app__.loadChunk(...args);
            } finally{
                clientComponentLoadTimes += performance.now() - startTime;
            }
        }
    };
}
```

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change into the newly created application directory after installing the Next.js with Supabase template. This is a necessary step before configuring environment variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
cd with-supabase-app
```

----------------------------------------

TITLE: Initializing Empty Order Array in JavaScript
DESCRIPTION: Declares a global empty array that will be mutated throughout the module's lifecycle
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-2/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export const order = [];
```

----------------------------------------

TITLE: Part 7: Main Execution and Logging
DESCRIPTION: Imports `foobarCopy` from part -5 and imports parts 8, 6, 1, and 0. This part appears to be a primary execution point, logging the value of `foobarCopy` and then modifying it (though the modification is not exported). It exports nothing.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import { d as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
console.log(foobarCopy);
foobarCopy += "Unused";
export { };

```

----------------------------------------

TITLE: Turbopack Entrypoint Mapping - JSON
DESCRIPTION: This configuration snippet maps defined entrypoints (like module evaluation, specific exports) to their corresponding internal part identifiers within the Turbopack bundle.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_27

LANGUAGE: json
CODE:
```
{
    ModuleEvaluation: 7,
    Export(
        "external1",
    ): 9,
    Export(
        "external2",
    ): 10,
    Export(
        "foo",
    ): 3,
    Export(
        "foobar",
    ): 11,
    Exports: 12,
}
```

----------------------------------------

TITLE: Merged Module Evaluation (Final) - JS
DESCRIPTION: This snippet shows the final merged code for module evaluation, importing necessary parts and logging `foobarCopy`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_41

LANGUAGE: js
CODE:
```
import { d as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
console.log(foobarCopy);
export { };
```

----------------------------------------

TITLE: Javascript Module Part 4
DESCRIPTION: This code snippet represents part 4 of a JavaScript module. It exports `b` and `a` using a turbopack variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_17

LANGUAGE: javascript
CODE:
```
export { b } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export b"
};
export { a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export a"
};
```

----------------------------------------

TITLE: Javascript Module Merged (prod)
DESCRIPTION: Merged JavaScript modules for production. Imports shared, sets external property, and logs shared. 
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_27

LANGUAGE: javascript
CODE:
```
import { c as shared } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
externalObject.propertyWithSetter = 42;
console.log(shared);
export { };
```

----------------------------------------

TITLE: Declaring Constants in JavaScript
DESCRIPTION: This snippet declares a constant 'dog' and assigns it the string value 'dog'. It illustrates a basic variable declaration using 'const'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const dog = "dog";
```

----------------------------------------

TITLE: Importing JSX Runtime Functions (React)
DESCRIPTION: Imports essential functions (_jsx, _jsxs, _Fragment) from the React JSX runtime, enabling JSX transformation without needing to import React directly in every file.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_0

LANGUAGE: js
CODE:
```
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
```

----------------------------------------

TITLE: Turbopack Part Import 3
DESCRIPTION: This snippet imports 'Part 2' using a Turbopack-specific mechanism (`__TURBOPACK_PART__` with an assert clause), indicating a dependency on that module part.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
```

----------------------------------------

TITLE: Importing PagesRouteModule Class in JS
DESCRIPTION: This snippet imports the `PagesRouteModule` class, which is a core component for defining and handling routes in Next.js, specifically for the 'pages' directory structure. It is imported from a compiled internal path.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_0

LANGUAGE: js
CODE:
```
import { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';
```

----------------------------------------

TITLE: Define and Export gridTemplateColumns Style Function in JS
DESCRIPTION: Imports a `style` helper function. It defines a `gridTemplateColumns` style function by calling `style` with an object specifying the CSS property 'gridTemplateColumns'. The resulting function is then exported with the alias `i`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_82

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 24
};
const gridTemplateColumns = style({
    prop: 'gridTemplateColumns'
});
export { gridTemplateColumns as i } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Export NextResponse for Turbopack Module - JavaScript
DESCRIPTION: This snippet is a simple export statement specifically structured for the Turbopack build system. It exports the `NextResponse` class from this module part, allowing it to be imported elsewhere within the application or build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_16

LANGUAGE: javascript
CODE:
```
export { NextResponse } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export NextResponse"
};

```

----------------------------------------

TITLE: Creating Prerender State Module Part 9
DESCRIPTION: This simple module defines and exports the `createPrerenderState` function, which initializes an object structure used to track dynamic accesses during prerendering, including a debug skeleton flag and an array for storing dynamic access details.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_9

LANGUAGE: javascript
CODE:
```
function createPrerenderState(isDebugSkeleton) {
    return {
        isDebugSkeleton,
        dynamicAccesses: []
    };
}
export { createPrerenderState };
export { createPrerenderState as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Re-exporting unstable_getStaticProps - JavaScript
DESCRIPTION: This snippet imports the unstable_getStaticProps function previously aliased as 'g' from a Turbopack part and re-exports it with its original name, 'unstable_getStaticProps'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_52

LANGUAGE: javascript
CODE:
```
import { g as unstable_getStaticProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -18
};
export { unstable_getStaticProps };
```

----------------------------------------

TITLE: Hoisting and Exporting getStaticPaths - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'getStaticPaths' export. Finally, it re-exports this value under the alias 'c'. This is part of Turbopack's internal handling of Next.js data-fetching functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_32

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 13
};
const getStaticPaths = hoist(userland, 'getStaticPaths');
export { getStaticPaths as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting unstable_getServerSideProps (Hoisted) in JS
DESCRIPTION: This snippet exports the unstable `unstable_getServerSideProps` function from the `userland` module, processed through the `hoist` helper. This is an unstable precursor to `getServerSideProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_16

LANGUAGE: js
CODE:
```
export const unstable_getServerSideProps = hoist(userland, 'unstable_getServerSideProps');
```

----------------------------------------

TITLE: Part 2: Initialize and Export Variable
DESCRIPTION: Initializes a variable `foobar` with the string 'foo'. It then exports this variable under the alias `a` using the `__TURBOPACK_VAR__` assert, making it available to other Turbopack parts.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_15

LANGUAGE: javascript
CODE:
```
let foobar = "foo";
export { foobar as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Defining Module Entrypoints JSON Configuration
DESCRIPTION: This JSON object defines entry points and export mappings, likely used by a build tool (like Turbopack, based on surrounding context) to structure modules and identify exported symbols. It maps export names and concepts like `ModuleEvaluation` and `Exports` to numerical identifiers.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_17

LANGUAGE: json
CODE:
```
{
    ModuleEvaluation: 0,
    Export(
        "NextResponse",
    ): 0,
    Exports: 1,
}
```

----------------------------------------

TITLE: Importing GlobalThis Utility (Bundled) - JavaScript
DESCRIPTION: Represents an import statement included in a Turbopack bundle part (Part 3 or Merged), importing the globalThis utility.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import './globalThis';

```

----------------------------------------

TITLE: Asserting React Unstable Postpone Availability
DESCRIPTION: Checks if `React.unstable_postpone` is defined. If not, it throws an invariant error indicating that the wrong version of React might be loaded, which is considered a bug in Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_27

LANGUAGE: javascript
CODE:
```
import { a as hasPostpone } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
function assertPostpone() {
    if (!hasPostpone) {
        throw new Error(`Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`);
    }
}
export { assertPostpone as h } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Exporting RouteKind with TurboPack Integration in JavaScript (DEV)
DESCRIPTION: Exports RouteKind from the module, asserting with __TURBOPACK_VAR__, indicating TurboPack integration for optimized module handling during the development phase. This export syntax shows the conditional importing for improved web packing.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
var RouteKind;
(function(RouteKind) {
    RouteKind["PAGES"] = "PAGES";
    RouteKind["PAGES_API"] = "PAGES_API";
    RouteKind["APP_PAGE"] = "APP_PAGE";
    RouteKind["APP_ROUTE"] = "APP_ROUTE"];
})(RouteKind || (RouteKind = {}));
export { RouteKind };
export { RouteKind as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Re-exporting Config - JavaScript
DESCRIPTION: This snippet imports the config object previously aliased as 'e' from a Turbopack part and re-exports it with its original name, 'config'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_43

LANGUAGE: javascript
CODE:
```
import { e as config } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -16
};
export { config };
```

----------------------------------------

TITLE: Part 9: Define and Export External Function 1
DESCRIPTION: Imports `foobar` from part -2, `internal` from part -8, and imports part 6. Defines an `external1` function that concatenates the result of `internal()` and the current value of `foobar`. Exports `external1` directly and under the alias `f` using `__TURBOPACK_VAR__`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_22

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import { e as internal } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
function external1() {
    return internal() + foobar;
}
export { external1 };
export { external1 as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Defining Function d1 in JavaScript
DESCRIPTION: This snippet defines a function named `d1`, which does not take any parameters and has no implementation. It is a simple hoisted function declaration.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
function d1() {}
```

----------------------------------------

TITLE: Declaring Shared Object with Side Effects - JavaScript
DESCRIPTION: This snippet creates a constant 'shared' that contains an effect; it pushes the string 'b' into the 'order' array when 'shared' is instantiated.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
export const shared = {
    effect: order.push("b")
};
```

----------------------------------------

TITLE: Representing Named Re-export - JavaScript
DESCRIPTION: This snippet shows the source code for a named re-export statement. In the context of this file, it represents an individual processing item (Item 1 and Item 2) within the Turbopack build process, specifically an `ImportOfModule` operation and a `ReexportBinding`. It re-exports the `cat` symbol from the `./lib` module under the new name `fakeCat`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/export-named/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export { cat as fakeCat } from "./lib";
```

----------------------------------------

TITLE: Define and Export gridColumn Style Function in JS
DESCRIPTION: Imports a `style` helper function. It defines a `gridColumn` style function by calling `style` with an object specifying the CSS property 'gridColumn'. The resulting function is then exported with the alias `d`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_77

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 18
};
const gridColumn = style({
    prop: 'gridColumn'
});
export { gridColumn as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Importing Turbopack Part 0 Dependency (2) JavaScript
DESCRIPTION: Another import statement for the dependency identified by `__turbopack_part__: 0`, similar to Part 1. This reinforces the dependency on that specific build module, which might contain shared constants or setup logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_33

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: Getting Absolute Path of runtime.js
DESCRIPTION: This code snippet provides a method to obtain the absolute file system path of 'runtime.js' in the regenerator-runtime package. It is useful for debugging or for configuring build tools that require the path to this file.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
require("regenerator-runtime/path").path
```

----------------------------------------

TITLE: Development Module Code
DESCRIPTION: Combined module code including variable assignments, function declaration, logging and exports
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-fn/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
a = ()=>{};
function a() {}
console.log(a);
export { a as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Composing CSS Grid Style Functions (JavaScript)
DESCRIPTION: This snippet imports individual JavaScript functions, likely representing CSS grid style properties (e.g., gap, gridColumn, gridTemplateRows), from various Turbopack parts. It then uses a 'compose' function to combine these individual functions into a single 'grid' function. This 'grid' function is exported as the default export and also under the alias 'm' and 'n', likely for internal module handling by Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_96

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import compose from './compose';
import { a as gap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -11
};
import { b as columnGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
import { c as rowGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
import { d as gridColumn } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -20
};
import { e as gridRow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -21
};
import { f as gridAutoFlow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -22
};
import { g as gridAutoColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -23
};
import { h as gridAutoRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -24
};
import { i as gridTemplateColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -25
};
import { j as gridTemplateRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -26
};
import { k as gridTemplateAreas } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -27
};
import { l as gridArea } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -28
};
const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
const __TURBOPACK__default__export__ = grid;
export { __TURBOPACK__default__export__ as default };
export { grid as m } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { __TURBOPACK__default__export__ as n } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Module Part 4 - JS
DESCRIPTION: This part imports `foobar` from Part -2 (likely Part 2), initializes `bar`, appends `bar` to `foobar`, and exports `bar` with alias `c` via a Turbopack variable assert.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_32

LANGUAGE: js
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
const bar = "bar";
foobar += bar;
export { bar as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Create Prerender State Object (JS)
DESCRIPTION: Initializes and returns an object used to track dynamic accesses during the prerendering process. The state object includes a flag for debug mode and an array to store details of dynamic accesses.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_19

LANGUAGE: javascript
CODE:
```
function createPrerenderState(isDebugSkeleton) {
    return {
        isDebugSkeleton,
        dynamicAccesses: []
    };
}
export { createPrerenderState };
export { createPrerenderState as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Turbopack Export getEnv Assert Import - JavaScript
DESCRIPTION: An import statement used by Turbopack to reference the part of the bundled module graph that exports the 'getEnv' function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
export { getEnv } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getEnv"
};

```

----------------------------------------

TITLE: Appending String Literal to 'foobarCopy' Variable in JavaScript
DESCRIPTION: Appends the string literal "Unused" to the value of the 'foobarCopy' variable. This operation reads from and writes to 'foobarCopy'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_9

LANGUAGE: javascript
CODE:
```
foobarCopy += "Unused";

```

----------------------------------------

TITLE: Defining Function d2 in JavaScript
DESCRIPTION: This snippet defines a function named `d2` similar to `d1`, with no parameters and no implementation, also hoisted.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
function d2() {}
```

----------------------------------------

TITLE: Turbopack Part Import 2 with Hooks Context
DESCRIPTION: This snippet imports 'Part 0' via Turbopack assert and additionally imports the internal Next.js module related to server hooks context (`../../client/components/hooks-server-context`).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import '../../client/components/hooks-server-context';
```

----------------------------------------

TITLE: Updating Turbopack ECMAScript Test Snapshots with Cargo
DESCRIPTION: Command to run cargo tests for the turbopack-ecmascript package with the UPDATE environment variable set to 1, which will update the snapshot tests.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/readme.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
UPDATE=1 cargo test -p turbopack-ecmascript
```

----------------------------------------

TITLE: Exporting Variables from Other Parts - Part 12 - JavaScript
DESCRIPTION: This module part serves as an aggregation point, exporting variables ('foo', 'external1', 'external2', 'foobar') that are defined or exported in other Turbopack parts, referencing them by string identifiers.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_26

LANGUAGE: javascript
CODE:
```
export { foo } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export foo"
};
export { external1 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export external1"
};
export { external2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export external2"
};
export { foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export foobar"
};
```

----------------------------------------

TITLE: Defining Function c2_1 and Calling c2_2 in JavaScript
DESCRIPTION: This snippet defines `c2_1`, which returns the result of calling `c2_2`, demonstrating yet another functional layer within the module. It maintains hoisting behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
function c2_1() {
    return c2_2(d3);
}
```

----------------------------------------

TITLE: Merged Export of Multiple Module Parts in TurboPack (JavaScript)
DESCRIPTION: This snippet shows the merged result of exporting multiple module parts (c1_3 and c2_2) in TurboPack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_22

LANGUAGE: javascript
CODE:
```
import { e as c1_3 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
import { h as c2_2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
export { c1_3 };
export { c2_2 };
```

----------------------------------------

TITLE: Importing Turbopack Module Part JavaScript
DESCRIPTION: Imports a specific part of a Turbopack-bundled module using an assert condition. This indicates a dependency on a previously defined module part (part 0 in this case).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_27

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: Running next-build-test with project options generation and execution in Rust
DESCRIPTION: Commands to generate project options for a Next.js project and then run the build test tool. First generates the configuration file pointing to the Next.js project, then executes the build test with the generated configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/crates/next-build-test/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
cargo run -- generate /path/to/project > project_options.json
cargo run -- run
```

----------------------------------------

TITLE: Importing RouteKind Enum in JS
DESCRIPTION: This snippet imports the `RouteKind` enumeration, used to categorize different types of routes within the Next.js routing system. It is imported from an internal server path.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_1

LANGUAGE: js
CODE:
```
import { RouteKind } from '../../server/future/route-kind';
```

----------------------------------------

TITLE: Part 10: Define and Export External Function 2 and Variable
DESCRIPTION: Imports `foobar` from part -2. Defines an `external2` function that appends '.' to `foobar`. Exports `external2` directly, exports the `foobar` variable directly, and exports `external2` under the alias `g` using `__TURBOPACK_VAR__`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_23

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
function external2() {
    foobar += ".";
}
export { external2 };
export { foobar };
export { external2 as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Initializing Performance Tracking Variables
DESCRIPTION: Declares variables for tracking client component loading performance metrics including start time, total load time, and count of loads.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/logger/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let clientComponentLoadStart = 0;
let clientComponentLoadTimes = 0;
let clientComponentLoadCount = 0;
```

----------------------------------------

TITLE: Final Module State Representation
DESCRIPTION: This snippet represents the final configuration for module exports and evaluations, summarizing the output items in the module, including their identifiers and the nature of their exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
await Promise.resolve();
export { };
```

----------------------------------------

TITLE: Export Client Component Loader Functions with Turbopack in JavaScript
DESCRIPTION: Exports functions related to client component loaders using Turbopack assertions to specify parts. It's a setup for seamless integration with Turbopack, handling specific exports for managing client component loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_7

LANGUAGE: JavaScript
CODE:
```
export { wrapClientComponentLoader } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export wrapClientComponentLoader"
};
export { getClientComponentLoaderMetrics } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export getClientComponentLoaderMetrics"
};
```

----------------------------------------

TITLE: Importing Turbopack Part and Error Module - JavaScript
DESCRIPTION: Imports code from Turbopack module part 2 and a local module `./error`. The local error module likely contains utility functions, such as `getProperError`, that are used in handling and structuring error objects.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import "./error";
```

----------------------------------------

TITLE: TypeScript File Path References
DESCRIPTION: File paths referencing client components and error handling components for testing prop serialization.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/development/typescript-plugin/README.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
app/client.tsx#ClientComponent
```

LANGUAGE: typescript
CODE:
```
app/error.tsx#Error
```

LANGUAGE: typescript
CODE:
```
app/global-error.tsx#GlobalError
```

----------------------------------------

TITLE: Chimera Getter Function Export
DESCRIPTION: Exports a function that concatenates cat and dog variables
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
export function getChimera() {
    return cat + dog;
}
```

----------------------------------------

TITLE: Function Declaration
DESCRIPTION: Declares an empty function named 'a'
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-fn/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
function a() {}
```

----------------------------------------

TITLE: Defining Frontmatter in Markdown for Next.js Migration Guide
DESCRIPTION: This snippet defines the frontmatter for a Next.js migration guide page. It sets the title as 'Migrating' and provides a description explaining the purpose of the guide.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/index.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: Migrating
description: Learn how to migrate from popular frameworks to Next.js
---
```

----------------------------------------

TITLE: Executing spawnSync with Static Command Dynamic Args JavaScript
DESCRIPTION: Calls `child_process.spawnSync` with a static command ('node') but uses a dynamic variable (`unknown`) for the arguments. This still represents dynamic execution as the arguments determine the subprocess behavior and is flagged by the linter (TP1005). Requires the `child_process` module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(FreeVa-635fa3.txt#_snippet_2

LANGUAGE: JavaScript
CODE:
```
child_process.spawnSync('node', unknown)
```

----------------------------------------

TITLE: Appending 'bar' to 'foobar' Variable in JavaScript
DESCRIPTION: Appends the value of the 'bar' constant to the existing value of the 'foobar' variable. This operation reads from both 'bar' and 'foobar', and writes the concatenated value back to 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
foobar += bar;

```

----------------------------------------

TITLE: Defining the rowGap Style Function (JS)
DESCRIPTION: This snippet defines the rowGap function, similar to gap and columnGap but for the row-gap CSS property. It handles responsive values and spacing unit conversion for the rowGap prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_74

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { createUnaryUnit } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { getValue } from './spacing';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import { handleBreakpoints } from './breakpoints';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 15
};
const rowGap = (props)=>{
    if (props.rowGap !== undefined && props.rowGap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
        const styleFromPropValue = (propValue)=>({
                rowGap: getValue(transformer, propValue)
            });
        return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
};
export { rowGap as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Creating a Chimera Function in JavaScript
DESCRIPTION: This snippet imports both `dog` and `cat`, then defines a function `getChimera` that concatenates their values. The function is exported for use in other modules, demonstrating inter-variable interactions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
import { a as dog } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: -0\n};\nimport { e as cat } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: -5\n};\nimport "__TURBOPACK_PART__" assert {\n    __turbopack_part__: 4\n};\nfunction getChimera() {\n    return cat + dog;\n}\nexport { getChimera };\nexport { getChimera as g } from "__TURBOPACK_VAR__" assert {\n    __turbopack_var__: true\n};
```

----------------------------------------

TITLE: Defining Gap Style Function in JavaScript
DESCRIPTION: Defines the 'gap' style function. It checks if the 'gap' prop exists, transforms the value using spacing utilities and the theme, and applies the style responsively using 'handleBreakpoints'. Returns a CSS style object for 'gap' or null.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_5

LANGUAGE: js
CODE:
```
export const gap = (props)=>{
    if (props.gap !== undefined && props.gap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');
        const styleFromPropValue = (propValue)=>({ gap: getValue(transformer, propValue) });
        return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
};
```

----------------------------------------

TITLE: Defining Dynamic Variable with Math.random JavaScript
DESCRIPTION: Defines a JavaScript variable `unknown` and assigns it a dynamic value generated by `Math.random()`. This variable is then used in subsequent function calls to simulate unpredictable input, testing the build system's handling of dynamic dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(FreeVa-635fa3.txt#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const unknown = Math.random()
```

----------------------------------------

TITLE: Importing Turbopack Partition 4 and Document Module - JavaScript
DESCRIPTION: Imports Turbopack partition 4 and a placeholder `VAR_MODULE_DOCUMENT`, likely representing the user's custom `_document` component import. This integrates user-defined components into the partitioned structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_24

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import 'VAR_MODULE_DOCUMENT';
```

----------------------------------------

TITLE: Initializing WebSocket Source Variable
DESCRIPTION: Declares a global source variable to store WebSocket connection instance.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-1/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let source;
```

----------------------------------------

TITLE: Adding filterProps to columnGap Function (JS)
DESCRIPTION: This snippet adds a filterProps array to the columnGap function, listing 'columnGap' as the prop handled by this function. This helps styling systems identify and consume the relevant prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_73

LANGUAGE: javascript
CODE:
```
import { b as columnGap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 15
};
columnGap.filterProps = [
    'columnGap'
];
export { columnGap };
```

----------------------------------------

TITLE: Importing gridAutoRows Property - JS
DESCRIPTION: Imports the `gridAutoRows` CSS property value from a Turbopack part identified by a numeric ID and re-exports it. This follows the pattern for modular CSS property definitions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_58

LANGUAGE: javascript
CODE:
```
import { h as gridAutoRows } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -24
};
export { gridAutoRows };

```

----------------------------------------

TITLE: Logging Variable x to Console in Javascript
DESCRIPTION: This snippet uses 'console.log()' to output the current value of the variable 'x' to the console. This action is performed multiple times throughout the provided code.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
console.log(x);
```

----------------------------------------

TITLE: Exporting and Initializing 'foo' Constant in JavaScript
DESCRIPTION: Declares and initializes an exported constant 'foo' with the current value of 'foobar'. This statement declares and writes to 'foo', and reads from 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
export const foo = foobar;

```

----------------------------------------

TITLE: Re-exporting gridAutoColumns Style Function (JS)
DESCRIPTION: Imports the 'gridAutoColumns' style function and re-exports it, likely for specific module structure or bundling requirements within the Turbopack build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_56

LANGUAGE: javascript
CODE:
```
import { g as gridAutoColumns } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -23
};
export { gridAutoColumns };
```

----------------------------------------

TITLE: Exporting Cat from Turbopack Module in JavaScript
DESCRIPTION: This snippet imports the `cat` variable and immediately exports it. It shows the direct export of variables from a Turbopack module without additional processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
import { e as cat } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: -5\n};\nexport { cat };
```

----------------------------------------

TITLE: Handling Export Star with CommonJS Modules
DESCRIPTION: Warning about using export * with a CommonJS module that has runtime-only exports. Recommends manually listing exports or converting to ESM.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/async-modules/export-all/issues/unexpected export __star__-9b505f.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export * from "[project]/turbopack/crates/turbopack-tests/tests/execution/turbopack/async-modules/export-all/input/exports.js"
```

----------------------------------------

TITLE: Defining a Simple JavaScript Function
DESCRIPTION: This is a simple JavaScript function definition (`maybeReturn(x)`) that takes one parameter `x`. The function body is not shown, but it serves as an example of a function definition present in the file.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/comptime/issues/__l___Module not found____c__ Can't resolve __c_'.-809a40.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
function maybeReturn(x) {
```

----------------------------------------

TITLE: Defining and Exporting Effect Function
DESCRIPTION: This snippet defines a function named 'effect' that accepts a name as a parameter and pushes it into the 'effects' array. The function is also exported for use in other modules. The snippet relies on the 'effects' array declared earlier.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/tla-1/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
export function effect(name) {
    effects.push(name);
}
```

----------------------------------------

TITLE: Hoisting and Exporting reportWebVitals - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'reportWebVitals' export. Finally, it re-exports this value under the alias 'f'. This is part of Turbopack's internal handling of web vitals reporting.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_35

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 16
};
const reportWebVitals = hoist(userland, 'reportWebVitals');
export { reportWebVitals as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Showing Markdown Rendered HTML Output
DESCRIPTION: Displays the resulting HTML generated from the preceding Markdown snippet. It demonstrates how Markdown syntax is converted into standard HTML tags like <p>, <strong>, and <a>.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<p>I <strong>love</strong> using <a href="https://nextjs.org/">Next.js</a></p>
```

----------------------------------------

TITLE: Export random Byte Source - JavaScript
DESCRIPTION: Exports the internal `random` function (imported as `e`), which is responsible for retrieving random byte sequences from the buffer pool for ID generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { e as random } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -7
};
export { random };
```

----------------------------------------

TITLE: Identifying dynamic fs.readFileSync JavaScript
DESCRIPTION: This snippet shows a section of JavaScript code from a test file (`index.js`) that was analyzed by Turbopack. The line `fs.readFileSync(unknown)` is highlighted as 'very dynamic' because the argument is not a static value, preventing static analysis and potentially causing issues for bundling or optimization. The surrounding code also includes dynamic calls to `require`, `import`, `readFileSync`, and `new URL` for context within the 'very-dynamic' test scenario.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1004__ fs.readFileSync(FreeVar(Math)[-57458d.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
require(unknown)

import(unknown)

fs.readFileSync(unknown)
readFileSync(unknown)

new URL(unknown, import.meta.url)
```

----------------------------------------

TITLE: Representation of Module Entrypoints and Exports (Custom)
DESCRIPTION: This snippet shows a custom data structure or configuration representing module entrypoints and their associated exports, mapping export names to numerical identifiers or values.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_43

LANGUAGE: Custom
CODE:
```
{
    ModuleEvaluation: 7,
    Export(
        "external1",
    ): 9,
    Export(
        "external2",
    ): 10,
    Export(
        "foo",
    ): 3,
    Export(
        "foobar",
    ): 11,
    Exports: 12,
}
```

----------------------------------------

TITLE: Exporting Various Pet Variables in JavaScript
DESCRIPTION: This snippet exports multiple variables including `dogRef`, `initialCat`, `getChimera`, and `cat` from the module. It illustrates how to consolidate exports for multiple variables in one statement.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
export { dogRef } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: "export dogRef"};\nexport { initialCat } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: "export initialCat"};\nexport { getChimera } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: "export getChimera"};\nexport { cat } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: "export cat"};
```

----------------------------------------

TITLE: Module Part 11 - JS
DESCRIPTION: This part imports `foobar` from Part -2 (likely Part 2) and imports Part 6. It then exports the `foobar` variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_39

LANGUAGE: js
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
export { foobar };
```

----------------------------------------

TITLE: Closing OpenTelemetry Span with Error - JavaScript
DESCRIPTION: Implements the `closeSpanWithError` function responsible for properly ending an OpenTelemetry span when an error occurs. It checks for the custom `BubbledError` type and applies different span attributes or records the exception based on the error type and bubble flag. Depends on `isBubbledError` and OpenTelemetry `SpanStatusCode`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_24

LANGUAGE: javascript
CODE:
```
import { r as isBubbledError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
import { e as SpanStatusCode } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
const closeSpanWithError = (span, error)=>{
    if (isBubbledError(error) && error.bubble) {
        span.setAttribute('next.bubble', true);
    }
    else {
        if (error) {
            span.recordException(error);
        }
        span.setStatus({
            code: SpanStatusCode.ERROR,
            message: error == null ? void 0 : error.message
        });
    }
    span.end();
};
export { SpanStatusCode };
export { closeSpanWithError as h } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Variable Declaration and Basic Operations
DESCRIPTION: Basic JavaScript variable declarations and operations including initialization, reassignment, and console logging.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/grouping/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let x = 1;
```

LANGUAGE: javascript
CODE:
```
x = 2;
```

LANGUAGE: javascript
CODE:
```
x = 3;
```

LANGUAGE: javascript
CODE:
```
console.log(x);
```

----------------------------------------

TITLE: Destructuring RouteModule Properties JS
DESCRIPTION: Declares constants `requestAsyncStorage`, `workAsyncStorage`, and `serverHooks` by destructuring properties from the `routeModule` object. These variables hold references to parts of the route module's internal state or utilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const { requestAsyncStorage, workAsyncStorage, serverHooks } = routeModule;

```

----------------------------------------

TITLE: Module Evaluation Entrypoint (Initial) Javascript
DESCRIPTION: This snippet represents an initial module evaluation entry point, importing variables and parts from the Turbopack bundle. It logs the value of `foobarCopy` and then attempts to modify it, although the modification result is not exported or subsequently used within this specific snippet.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { f as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 9
};
import "other";
console.log(foobarCopy);
foobarCopy += "Unused";
export { };
```

----------------------------------------

TITLE: Logging Object to Console in Javascript
DESCRIPTION: This snippet logs the `shared` object to the console. It shows a simple logging of an object, indicating a read dependency on that object.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
console.log(shared);
```

----------------------------------------

TITLE: Declaring userland Binding JS
DESCRIPTION: References the binding for the `userland` namespace object imported from a virtual module. This binding is hoisted and declares the local name `userland`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import * as userland from 'VAR_USERLAND';

```

----------------------------------------

TITLE: Export nanoid Function - JavaScript
DESCRIPTION: Exports the `nanoid` function, providing the standard ID generation capability to other modules or the application entry point.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { h as nanoid } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -10
};
export { nanoid };
```

----------------------------------------

TITLE: Benchmarking Against Multiple Bundlers
DESCRIPTION: Command to run Turbopack benchmarks comparing performance across different bundlers, enabling comprehensive performance analysis
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-bench/README.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
cargo bench -p turbopack-bench -p turbopack-cli
```

----------------------------------------

TITLE: Calling spawnSync with Dynamic Node Argument - JavaScript
DESCRIPTION: This snippet shows calling `child_process.spawnSync` to execute 'node', but with a dynamic variable (`unknown`, derived from `Math.random()`) supplied as the first argument for 'node'. Turbopack specifically flags this pattern at line 7 as 'very dynamic'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__quo_-c0f309.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
child_process.spawnSync('node', unknown)
```

----------------------------------------

TITLE: Synchronously Reading File with Dynamic Path in JavaScript
DESCRIPTION: This JavaScript snippet uses Node.js's `fs.readFileSync` function to synchronously read a file. The file path is provided by a dynamic variable (`unknown`), preventing static analysis from identifying the specific file being accessed. The surrounding context indicates this dynamic usage is flagged as 'very dynamic', posing difficulties for bundlers like Turbopack in handling file dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1004__ fs.readFileSync(FreeVar(Math)[-7dbc77.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
fs.readFileSync(unknown)
```

----------------------------------------

TITLE: Module Part 3 and Merged Evaluation
DESCRIPTION: Empty export statement for module evaluation
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
export { };

```

----------------------------------------

TITLE: Using Router.onAppUpdated for Navigation - JavaScript
DESCRIPTION: This snippet shows how to use the Router.onAppUpdated hook to navigate to a new route. The hook is used to update the location href to initiate navigation, but has limitations as it does not support waiting for asynchronous operations. No dependencies are listed, and inputs are limited to the nextRoute parameter. It's an approach that has been deprecated and should be replaced.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-on-app-updated-hook.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
Router.onAppUpdated = function (nextRoute) {
  location.href = nextRoute
}
```

----------------------------------------

TITLE: Declaring and Exporting API Variable JavaScript
DESCRIPTION: This snippet declares a variable `api` and immediately exports it under the alias `a` using a Turbopack-specific `__TURBOPACK_VAR__` assert. This establishes the variable for later assignment and external access facilitated by Turbopack's variable tracking.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_18

LANGUAGE: javascript
CODE:
```
let api;
export { api as a } from "__TURBOPACK_VAR__" assert {
    "__turbopack_var__": true
};

```

----------------------------------------

TITLE: Importing and Re-exporting unstable_getStaticPaths (Turbopack, JavaScript)
DESCRIPTION: Imports the `unstable_getStaticPaths` function, aliased from a Turbopack part, and re-exports it. This makes an unstable function for generating static paths available from a compiled segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_59

LANGUAGE: javascript
CODE:
```
import { h as unstable_getStaticPaths } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -19
};
export { unstable_getStaticPaths };
```

----------------------------------------

TITLE: Define and Export Random Byte Pool - JavaScript
DESCRIPTION: Declares and exports the `pool` variable. This variable is intended to hold the `Buffer` containing cryptographically secure random bytes, managed and filled by the `fillPool` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
let pool;
export { pool as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Declaring clientComponentLoadTimes Variable in JavaScript
DESCRIPTION: This snippet declares a variable 'clientComponentLoadTimes' initialized to 0, used for recording the total loading times of client components. No external dependencies are required for this declaration.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
let clientComponentLoadTimes = 0;
```

----------------------------------------

TITLE: Part 0: Defining and Exporting Functions Javascript
DESCRIPTION: This module part defines two internal functions, `external1` and `internal`. `external1` depends on `internal` and an imported variable `foobar`. Both functions are exported, with `external1` also exported under the alias `b` and `internal` as `c` via Turbopack-specific `__TURBOPACK_VAR__` asserts.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
import { upper } from "module";
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
function external1() {
    return internal() + foobar;
}
function internal() {
    return upper(foobar);
}
export { external1 };
export { external1 as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { internal as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Part 11: Importing and Exporting Variable Javascript
DESCRIPTION: Imports the variable `foobar` (aliased as `a`) from another part and also imports part 7. This snippet simply re-exports the imported `foobar` variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_12

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
export { foobar };
```

----------------------------------------

TITLE: Importing Turbopack Partition 6 - JavaScript
DESCRIPTION: Imports a module partition identified as part 6, further chaining dependencies within the Turbopack build output process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_25

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
```

----------------------------------------

TITLE: Importing Turbopack Module Part JavaScript
DESCRIPTION: Imports a specific part of a Turbopack-bundled module using an assert condition, referencing part 4.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_31

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
```

----------------------------------------

TITLE: Importing Hoist Helper Function in JS
DESCRIPTION: This snippet imports a `hoist` helper function, likely used to correctly handle the scope and availability of variables or functions imported from other modules, particularly in the context of code transformation or bundling.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_2

LANGUAGE: js
CODE:
```
import { hoist } from './helpers';
```

----------------------------------------

TITLE: Importing Turbopack Partition 0 - JavaScript
DESCRIPTION: Imports a module partition identified as part 0, utilizing Turbopack's internal partitioning mechanism via a special assert clause. This mechanism is used by the bundler to manage and load code split into different segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_19

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: Triggering JavaScript Duplicate Binding Error
DESCRIPTION: This JavaScript snippet illustrates a duplicate binding error by attempting to import `Table` from `./table` and also exporting a function named `Table` within the same module scope. This setup is designed to test how the build tool (Turbopack) reports such conflicts during module compilation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/imports/duplicate-binding/issues/Ecmascript file had an error-baa6a4.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
import { Table } from './table'

export function Table() {
  console.log(Table)
}
```

----------------------------------------

TITLE: Checking for BubbledError Instance (JavaScript)
DESCRIPTION: Implements a utility function `isBubbledError` that checks if the provided `error` object is an instance of the custom `BubbledError` class. This function is used as a type guard for handling specific error types.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_39

LANGUAGE: javascript
CODE:
```
import { q as BubbledError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -7
};
function isBubbledError(error) {
    if (typeof error !== 'object' || error === null) return false;
    return error instanceof BubbledError;
}
export { isBubbledError as r } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Defining and Exporting Function Modifying Variable - Part 10 - JavaScript
DESCRIPTION: This module part imports 'foobar' from a relative Turbopack part (-2). It defines a function 'external2' that modifies the imported 'foobar' variable by concatenating a period. It exports 'external2' via a standard export and a Turbopack variable export.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_24

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
function external2() {
    foobar += ".";
}
export { external2 };
export { external2 as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Defining Custom BubbledError - JavaScript
DESCRIPTION: Defines a custom error class `BubbledError` used within the tracing system. It includes properties to indicate if the error should "bubble" and stores an associated result. This error type is handled specifically by the tracing cleanup logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_22

LANGUAGE: javascript
CODE:
```
class BubbledError extends Error {
    constructor(bubble, result){
        super();
        this.bubble = bubble;
        this.result = result;
    }
}
export { BubbledError as q } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Define and Export Random Pool Offset - JavaScript
DESCRIPTION: Declares and exports the `poolOffset` variable. This variable is used to track the current index within the `pool` buffer from which the next set of random bytes should be read.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
let poolOffset;
export { poolOffset as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Declaring OpenTelemetry API Variable Javascript
DESCRIPTION: Declares a variable `api` without initial assignment, which will later hold the reference to the OpenTelemetry API module based on the runtime environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
let api;

```

----------------------------------------

TITLE: Hoisting and Exporting getStaticProps - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'getStaticProps' export. Finally, it re-exports this value under the alias 'b'. This is part of Turbopack's internal handling of Next.js data-fetching functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_31

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 12
};
const getStaticProps = hoist(userland, 'getStaticProps');
export { getStaticProps as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Turbopack Module Part 0: Importing Node Stream Side Effects in JavaScript
DESCRIPTION: This snippet, part of Turbopack's module bundling output, imports the 'node:stream' module. This specific import syntax without a binding variable is typically used when the primary goal is to execute side effects or register something provided by the module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import 'node:stream';
```

----------------------------------------

TITLE: Dynamically Requiring Module - JavaScript
DESCRIPTION: This snippet shows calling the `require` function with a dynamic variable (`unknown`, derived from `Math.random()`) as the module identifier. This is a common dynamic pattern that prevents static analysis from determining required dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__quo_-c0f309.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
require(unknown)
```

----------------------------------------

TITLE: Running SWC AST Explorer with Cargo - Shell
DESCRIPTION: This shell snippet demonstrates how to execute the SWC AST Explorer using Cargo to generate syntax trees from input JavaScript code. The command reads console input and pipes it to the Cargo run command targeting the swc-ast-explorer package. This utilizes Rust's Cargo toolchain to run the specified binary.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-swc-ast-explorer/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
echo "console.log('hello')" | cargo run -p swc-ast-explorer
```

----------------------------------------

TITLE: Importing Module Part and Dependency JavaScript
DESCRIPTION: Imports a Turbopack module part (part 2) and another local module named 'spacing'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_30

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import './spacing';
```

----------------------------------------

TITLE: Compiled Module Part 10 JS
DESCRIPTION: A segment of the compiled module code (Part 10) which declares the `originalPathname` constant and exports it using both standard and Turbopack-specific export syntax.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_19

LANGUAGE: javascript
CODE:
```
const originalPathname = 'VAR_ORIGINAL_PATHNAME';
export { originalPathname };
export { originalPathname as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Javascript Module Part 0 (prod)
DESCRIPTION: This is part 0 for the production build.  It does a console log, defines a variable, and exports that variable as `a`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
console.log("Hello");
const value = externalFunction();
export { value as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing Turbopack Partition 2 and Helpers - JavaScript
DESCRIPTION: Imports Turbopack partition 2 along with local helper functions from `./helpers`. This shows how partitioned code might depend on project-specific utilities or shared functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_22

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import './helpers';
```

----------------------------------------

TITLE: Packing and Unpacking Local Next.js Version for Testing
DESCRIPTION: Commands to build a release version of Next.js, package it, and install it in a test application to overcome Turbopack symlink limitations.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
pnpm pack-next --release && pnpm unpack-next path/to/project
```

----------------------------------------

TITLE: Specifying Next.js SWC Binary for Linux ARM64 MUSL
DESCRIPTION: This code snippet defines the package name for the Linux ARM64 MUSL binary of the @next/swc package. It is used to specify the correct binary version for Next.js SWC compilation on Linux ARM64 systems using the MUSL library.
SOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/linux-arm64-musl/README.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# `@next/swc-linux-arm64-musl`
```

----------------------------------------

TITLE: Console Log Output
DESCRIPTION: Logging variable a to console
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
console.log(a);
```

----------------------------------------

TITLE: Module Part 8 - JS
DESCRIPTION: This part imports `foobarCopy` from Part -5 (likely Part 5) and appends the string "Unused" to it.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_36

LANGUAGE: js
CODE:
```
import { d as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
foobarCopy += "Unused";
```

----------------------------------------

TITLE: Empty Export Statement in JavaScript
DESCRIPTION: This snippet contains an empty export statement. It serves as a placeholder for future exports in modules.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
export { };
```

----------------------------------------

TITLE: Exporting unstable_getStaticParams (Hoisted) in JS
DESCRIPTION: This snippet exports the unstable `unstable_getStaticParams` function from the `userland` module, processed through the `hoist` helper. Used for generating params in unstable static generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_14

LANGUAGE: js
CODE:
```
export const unstable_getStaticParams = hoist(userland, 'unstable_getStaticParams');
```

----------------------------------------

TITLE: Part 2: Importing Turbopack Part Javascript
DESCRIPTION: This module part serves as a simple dependency declaration, importing another internal Turbopack part (__turbopack_part__: 1).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
```

----------------------------------------

TITLE: Importing Turbopack Partition 2 - JavaScript
DESCRIPTION: Imports a module partition identified as part 2, relying on code processed or contained within that specific partition. This continues the chain of dependencies managed by the Turbopack bundler.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_21

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
```

----------------------------------------

TITLE: Module Part 2 - Export References
DESCRIPTION: Exports variables from TurboPack parts with specific assertions
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
export { a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export a"
};
export { b } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export b"
};

```

----------------------------------------

TITLE: Importing and Modifying Variable Copy - Part 8 - JavaScript
DESCRIPTION: This module part imports 'foobarCopy' from a relative Turbopack part (-5). It then concatenates the string 'Unused' onto the imported 'foobarCopy' variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_22

LANGUAGE: javascript
CODE:
```
import { d as foobarCopy } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
foobarCopy += "Unused";
```

----------------------------------------

TITLE: Formatting Dynamic API Access Debug Information
DESCRIPTION: Formats the collected dynamic API access information stored in the `prerenderState` for debugging purposes. It filters out internal Next.js and Node.js frames from the stack traces and returns a formatted string for each dynamic access with a stack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_26

LANGUAGE: javascript
CODE:
```
function formatDynamicAPIAccesses(prerenderState) {
    return prerenderState.dynamicAccesses.filter((access)=>typeof access.stack === 'string' && access.stack.length > 0).map(({ expression, stack })=>{
        stack = stack.split('\n').slice(4).filter((line)=>{
            if (line.includes('node_modules/next/')) {
                return false;
            }
            if (line.includes(' (<anonymous>)')) {
                return false;
            }
            if (line.includes(' (node:')) {
                return false;
            }
            return true;
        }).join('\n');
        return `Dynamic API Usage Debug - ${expression}:\n${stack}`;
    });
}
export { formatDynamicAPIAccesses };
export { formatDynamicAPIAccesses as j } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Declaring and Exporting Constants with Assertions in JavaScript
DESCRIPTION: This part declares a constant 'dog' and exports it using a default import assert. It uses Turbopack variables for module exportation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const dog = "dog";
export { dog as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Hoisting and Exporting Config - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'config' export. Finally, it re-exports this value under the alias 'e'. This is part of Turbopack's internal handling of page configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_34

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 15
};
const config = hoist(userland, 'config');
export { config as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Re-exporting IPC and structuredError JavaScript
DESCRIPTION: This snippet acts as an entry point or re-exporter within the Turbopack module system, making the `IPC` instance and the `structuredError` function available for import by other modules.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
export { IPC } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export IPC"
};
export { structuredError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export structuredError"
};
```

----------------------------------------

TITLE: Defining gridAutoFlow Style Function (JS)
DESCRIPTION: Creates a style function for the CSS 'gridAutoFlow' property. It depends on a 'style' helper and uses Turbopack assertions for module part imports, exporting the function with a specific alias.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_48

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 21
};
const gridAutoFlow = style({
    prop: 'gridAutoFlow'
});
export { gridAutoFlow as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Creating Grid Auto Flow Style Function using Utility in JavaScript
DESCRIPTION: Creates a style function specifically for the 'gridAutoFlow' CSS property using the generic 'style' utility function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_16

LANGUAGE: js
CODE:
```
export const gridAutoFlow = style({
    prop: 'gridAutoFlow'
});
```

----------------------------------------

TITLE: Importing Turbopack Module Part JavaScript
DESCRIPTION: Imports a specific part of a Turbopack-bundled module using an assert condition, referencing part 2.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_29

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
```

----------------------------------------

TITLE: Exporting Object 'b' in JavaScript
DESCRIPTION: Similar to 'a', this snippet exports object 'b', incorporating the shared object with a unique string property. Requires 'shared' to be pre-defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_6

LANGUAGE: JavaScript
CODE:
```
export const b = {
    shared,
    b: "bbbbbbbbbbb"
};
```

----------------------------------------

TITLE: Development Module Part 0
DESCRIPTION: Exports 'dog' variable as 'DOG' and 'a' with Turbopack variable assertion
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const dog = "dog";
export { dog as DOG };
export { dog as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Exporting Default from Turbopack Part - JavaScript
DESCRIPTION: Exports the default value from a specific Turbopack part identified as "export default".
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
export { default } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export default"
};

```

----------------------------------------

TITLE: Defining Internal Function 'internal' in JavaScript
DESCRIPTION: Defines a function named 'internal' that calls the imported 'upper' function with the current value of 'foobar' and returns the result. This function is hoisted and declares/writes to 'internal', eventually reading 'upper' and 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
function internal() {
    return upper(foobar);
}

```

----------------------------------------

TITLE: Tracking Dynamic Fetch Calls in Next.js (JS)
DESCRIPTION: Tracks dynamic `fetch` calls made during server-side rendering or prerendering. If in a prerendering state and not inside an unstable cache callback, it records the fetch expression using `postponeWithTracking`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
import { b as postponeWithTracking } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
function trackDynamicFetch(store, expression) {
    if (!store.prerenderState || store.isUnstableCacheCallback) return;
    postponeWithTracking(store.prerenderState, expression, store.urlPathname);
}
export { trackDynamicFetch };
export { trackDynamicFetch as h } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Hoisting and Exporting unstable_getStaticProps - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'unstable_getStaticProps' export. Finally, it re-exports this value under the alias 'g'. This handles unstable data-fetching functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_36

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 17
};
const unstable_getStaticProps = hoist(userland, 'unstable_getStaticProps');
export { unstable_getStaticProps as g } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Logging statement in Javascript
DESCRIPTION: This snippet logs the string "Hello" to the console. It's a simple statement that demonstrates a basic side effect.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
console.log("Hello");
```

----------------------------------------

TITLE: Pushing to Order Array Again - JavaScript
DESCRIPTION: This statement pushes the string 'c' into the 'order' array, illustrating another update to the shared state during execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
order.push("c");
```

----------------------------------------

TITLE: Declare Binding: ResponseCookies - Next.js - JS
DESCRIPTION: Declares the `ResponseCookies` variable, binding it to the export of the same name from the './cookies' module. An instance of this class is used internally by `NextResponse` to manage response cookies.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import { ResponseCookies } from './cookies';
```

----------------------------------------

TITLE: Registering a new primary menu in WordPress (PHP)
DESCRIPTION: This code registers a new navigation menu named 'Primary menu' within the WordPress admin panel. It uses the `register_nav_menus` function, hooked to the `init` action, to make the menu available for selection in the WordPress backend under Appearance -> Menus. This allows users to define a custom menu to be displayed in the Next.js frontend.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_6

LANGUAGE: PHP
CODE:
```
<?php
/**
 * Registers new menus
 *
 * @return void
 */
add_action('init', 'register_new_menu');
function register_new_menu()
{
  register_nav_menus(
    array(
      'primary-menu' => __('Primary menu')
    )
  );
}

```

----------------------------------------

TITLE: Turbopack Part 3 Assert Import - JavaScript
DESCRIPTION: An import statement used by Turbopack to reference another part of the bundled module graph, specifically Part 3.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 3
};

```

----------------------------------------

TITLE: Importing AppRouteRouteModule Class JS
DESCRIPTION: Imports the `AppRouteRouteModule` class from an internal Next.js module file. This import is hoisted and has side effects during module loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { AppRouteRouteModule } from '../../server/future/route-modules/app-route/module.compiled';

```

----------------------------------------

TITLE: Tracking Dynamic Data Access in Next.js (JS)
DESCRIPTION: Tracks dynamic data access within a Next.js server rendering context. Based on the current rendering mode (cache callback, dynamic error mode, prerendering, static generation), it either throws an error, records the access for postponement, or marks the route as dynamic.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import { DynamicServerError } from '../../client/components/hooks-server-context';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import { getPathname } from '../../lib/url';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { StaticGenBailoutError } from '../../client/components/static-generation-bailout';
import { b as postponeWithTracking } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -8
};
function trackDynamicDataAccessed(store, expression) {
    const pathname = getPathname(store.urlPathname);
    if (store.isUnstableCacheCallback) {
        throw new Error(`Route ${pathname} used "${expression}" inside a function cached with "unstable_cache(...)". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "${expression}" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`);
    } else if (store.dynamicShouldError) {
        throw new StaticGenBailoutError(`Route ${pathname} with \`dynamic = "error"\` couldn't be rendered statically because it used \`${expression}\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    } else if (store.prerenderState) {
        postponeWithTracking(store.prerenderState, expression, pathname);
    } else {
        store.revalidate = 0;
        if (store.isStaticGeneration) {
            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);
            store.dynamicUsageDescription = expression;
            store.dynamicUsageStack = err.stack;
            throw err;
        }
    }
}
export { trackDynamicDataAccessed };
export { trackDynamicDataAccessed as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Declaring Imported Binding in JavaScript (ImportBinding)
DESCRIPTION: This snippet represents the act of declaring the 'baz' binding imported from the './module'. It focuses on making the imported function available in the local scope for use within the current module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/dce/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { baz } from './module';
```

----------------------------------------

TITLE: Module Part 12 - JS
DESCRIPTION: This part exports specific variables (`foo`, `external1`, `external2`, `foobar`) by referencing their corresponding export parts within the Turbopack bundle.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_40

LANGUAGE: js
CODE:
```
export { foo } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export foo"
};
export { external1 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export external1"
};
export { external2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export external2"
};
export { foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export foobar"
};
```

----------------------------------------

TITLE: Importing 'upper' from 'module' in JavaScript
DESCRIPTION: Imports the 'upper' function from the 'module'. This import statement is hoisted and has side effects related to module loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { upper } from "module";

```

----------------------------------------

TITLE: Property Assignment in Javascript
DESCRIPTION: This code assigns the value 42 to the property `externalObject.propertyWithSetter`. This operation likely has side effects, depending on the implementation of the setter.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
externalObject.propertyWithSetter = 42;
```

----------------------------------------

TITLE: Defining and Exporting 'external2' Function in JavaScript
DESCRIPTION: Defines and exports a function 'external2' that appends a period "." to the 'foobar' variable. This function definition is hoisted and declares/writes to 'external2'. It eventually writes to 'foobar' when called.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_12

LANGUAGE: javascript
CODE:
```
export function external2() {
    foobar += ".";
}

```

----------------------------------------

TITLE: Adding Prop Types to Gap Utility - Part 12 - JavaScript
DESCRIPTION: Assigns `propTypes` validation to the `gap` function, using `responsivePropType`. This validation is conditional based on the `NODE_ENV` environment variable.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_38

LANGUAGE: js
CODE:
```
import { a as gap } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -11
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 9
};
import responsivePropType from './responsivePropType';
gap.propTypes = process.env.NODE_ENV !== 'production' ? {
    gap: responsivePropType
} : {};
```

----------------------------------------

TITLE: Exporting BubbledError Class - JavaScript
DESCRIPTION: Exports the `BubbledError` class definition, making it available for use in other modules. Depends on the `BubbledError` class being defined elsewhere (or in an earlier part of the bundled file).
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_25

LANGUAGE: javascript
CODE:
```
import { q as BubbledError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -7
};
export { BubbledError };
```

----------------------------------------

TITLE: Checking for BubbledError Type - JavaScript
DESCRIPTION: Provides a utility function `isBubbledError` to determine if a given value is an instance of the custom `BubbledError` class. This function is used by the tracing cleanup logic to apply specific handling for bubbled errors. It depends on the `BubbledError` class definition.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_23

LANGUAGE: javascript
CODE:
```
import { q as BubbledError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -7
};
function isBubbledError(error) {
    if (typeof error !== 'object' || error === null) return false;
    return error instanceof BubbledError;
}
export { isBubbledError as r } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing Turbopack Module Part 2 - JavaScript
DESCRIPTION: Imports code from Turbopack module part 2 using the special `assert` syntax with `__turbopack_part__`. This establishes another internal dependency within the Turbopack bundling structure, linking this part to part 2.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_12

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
```

----------------------------------------

TITLE: Improving Console Output with Markers and Stacks - JavaScript
DESCRIPTION: Defines the `improveConsole` function which wraps standard `console` methods to prepend and append specific marker strings (`TURBOPACK_OUTPUT_B`, `TURBOPACK_OUTPUT_S`, `TURBOPACK_OUTPUT_E`) to stdout or stderr. This allows external tools to easily parse and process console output; an optional stack trace can also be included.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_18

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 3
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
const improveConsole = (name, stream, addStack)=>{
    const original = console[name];
    const stdio = process[stream];
    console[name] = (...args)=>{
        stdio.write(`TURBOPACK_OUTPUT_B\n`);
        original(...args);
        if (addStack) {
            const stack = new Error().stack?.replace(/^.+\n.+\n/, "") + "\n";
            stdio.write("TURBOPACK_OUTPUT_S\n");
            stdio.write(stack);
        }
        stdio.write("TURBOPACK_OUTPUT_E\n");
    };
};
improveConsole("error", "stderr", true);
improveConsole("warn", "stderr", true);
improveConsole("count", "stdout", true);
improveConsole("trace", "stderr", false);
improveConsole("log", "stdout", true);
improveConsole("group", "stdout", true);
improveConsole("groupCollapsed", "stdout", true);
improveConsole("table", "stdout", true);
improveConsole("debug", "stdout", true);
improveConsole("info", "stdout", true);
improveConsole("dir", "stdout", true);
improveConsole("dirxml", "stdout", true);
improveConsole("timeEnd", "stdout", true);
improveConsole("timeLog", "stdout", true);
improveConsole("timeStamp", "stdout", true);
improveConsole("assert", "stderr", true);
export { improveConsole as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Defining and Exporting Functions - Part 9 - JavaScript
DESCRIPTION: This module part imports 'foobar' from a relative Turbopack part (-2), imports parts 0 and 6, and imports the 'upper' function from 'module'. It defines internal and external functions that use 'foobar' and 'upper', and exports the external function and the internal function via Turbopack variable exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_23

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { upper } from "module";
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
function internal() {
    return upper(foobar);
}
function external1() {
    return internal() + foobar;
}
export { external1 };
export { internal as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { external1 as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Development Module Part 1
DESCRIPTION: Exports 'cat' variable directly and as 'b' with Turbopack variable assertion
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const cat = "cat";
export { cat };
export { cat as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Package Hierarchy Visualization
DESCRIPTION: Mermaid flowchart representing the hierarchical structure of Next.js SWC packages and their dependencies
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-swc/README.md#2025-04-21_snippet_3

LANGUAGE: mermaid
CODE:
```
flowchart TD
    C(next-custom-transforms) --> A(napi)
    C(next-custom-transforms) --> B(wasm)
    D(next-core) --> A(napi)
    E(next-build) --> A(napi)
    F(next-api) --> A(napi)
    C(next-custom-transforms) --> D
    D(next-core) --> F(next-api)
    D(next-core) --> E(next-build)
```

----------------------------------------

TITLE: Generating Author API URLs for Sitemap (PHP)
DESCRIPTION: This function generates an array of author URLs for sitemap generation. It retrieves user data using `get_users` function based on user inputs provided by `wsra_get_user_inputs` function and constructs the author URLs. It then returns array of author URLs.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_12

LANGUAGE: PHP
CODE:
```
<?php
function wsra_generate_author_api()
{
  [$args] = wsra_get_user_inputs();
  $author_urls = array();
  $authors =  get_users($args);
  foreach ($authors as $author) {
    $fullUrl = esc_url(get_author_posts_url($author->ID));
    $url = str_replace(home_url(), '', $fullUrl);
    $tempArray = [
      'url' => $url,
    ];
    array_push($author_urls, $tempArray);
  }
  return array_merge($author_urls);
}

```

----------------------------------------

TITLE: Turbopack Internal Import - Part 8 - JavaScript
DESCRIPTION: Imports a specific Turbopack part using the `assert` syntax. This is an internal module bundling mechanism and not typically relevant for library users.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_34

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 7
};
```

----------------------------------------

TITLE: Handling Uncaught Exceptions via IPC JavaScript
DESCRIPTION: Registers a handler for Node.js `uncaughtException` events. When an uncaught error occurs, this handler intercepts it and attempts to send the error details, formatted using `structuredError`, back to the Turbopack main process via the `IPC` connection before exiting. This ensures errors are reported reliably.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import { d as IPC } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -7
};
process.on("uncaughtException", (err)=>{
    IPC.sendError(err);
});
```

----------------------------------------

TITLE: Graph Representation of Dependencies with Mermaid
DESCRIPTION: Uses Mermaid syntax to graphically represent dependency relationships between items, showing the export process and links between item nodes.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_4

LANGUAGE: Mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item3["export a"];
    Item4;
    Item4["export b"];
```

LANGUAGE: Mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item3["export a"];
    Item4;
    Item4["export b"];
    Item3 --> Item1;
    Item4 --> Item2;
```

----------------------------------------

TITLE: Updating Snapshots Automatically
DESCRIPTION: This command updates all snapshot outputs automatically. It sets the `UPDATE` environment variable to 1 and then runs the snapshot tests using `cargo nextest`. The `-E` flag filters for snapshot tests.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
UPDATE=1 cargo nextest run -E 'test(snapshot)'
```

----------------------------------------

TITLE: Tracking Dynamic Data Access in Next.js
DESCRIPTION: Tracks dynamic data access during static generation. It throws a specific error if accessed within an `unstable_cache` callback, throws a `StaticGenBailoutError` if `dynamic = "error"` is set, triggers postponement if `prerenderState` exists, or throws a `DynamicServerError` if static generation is active without `prerenderState`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_21

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import { DynamicServerError } from '../../client/components/hooks-server-context';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import { getPathname } from '../../lib/url';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { StaticGenBailoutError } from '../../client/components/static-generation-bailout';
import { c as postponeWithTracking } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
function trackDynamicDataAccessed(store, expression) {
    const pathname = getPathname(store.urlPathname);
    if (store.isUnstableCacheCallback) {
        throw new Error(`Route ${pathname} used "${expression}" inside a function cached with "unstable_cache(...)". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "${expression}" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`);
    } else if (store.dynamicShouldError) {
        throw new StaticGenBailoutError(`Route ${pathname} with \`dynamic = "error"\` couldn't be rendered statically because it used \`${expression}\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    } else if (store.prerenderState) {
        postponeWithTracking(store.prerenderState, expression, pathname);
    } else {
        store.revalidate = 0;
        if (store.isStaticGeneration) {
            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);
            store.dynamicUsageDescription = expression;
            store.dynamicUsageStack = err.stack;
            throw err;
        }
    }
}
export { trackDynamicDataAccessed };
export { trackDynamicDataAccessed as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Pushing Another Element to Order Array in JavaScript
DESCRIPTION: This code snippet pushes 'c' to the 'order' array, showcasing another side effect operation on the order collection. The 'order' array must be declared beforehand.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
order.push("c");
```

----------------------------------------

TITLE: Console Log Statement
DESCRIPTION: Logs variable 'a' to the console
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-fn/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
console.log(a);
```

----------------------------------------

TITLE: Part 4: Assigning and Exporting Variable Javascript
DESCRIPTION: Imports a variable `foobar` (aliased as `a`) from another Turbopack part. It then declares a new constant `foo` and assigns the value of the imported `foobar` to it. `foo` is exported directly and also under the alias `d`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
const foo = foobar;
export { foo };
export { foo as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: License Attribution for formdata-polyfill in Next.js
DESCRIPTION: This comment provides license attribution for the formdata-polyfill library used in the body.js file of the undici/lib/web/fetch directory. It specifies the MIT License and credits Jimmy Wärting as the author.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@edge-runtime/primitives/load.js.LEGAL.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
```

----------------------------------------

TITLE: File Structure Overview - Text
DESCRIPTION: This text snippet outlines the file structure of the Todo app. It displays the organization of files and directories crucial for the project format, aiding developers in understanding the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
├── package.json
├── lib
│   ├── tigris.ts
├── db
│   └── models
│       └── todoItems.ts
└── pages
    ├── index.tsx
    └── api
        ├── item
        │   ├── [id].ts
        └── items
            ├── index.ts
            └── search.ts
```

----------------------------------------

TITLE: Turbopack Part 0 Assert Import - JavaScript
DESCRIPTION: An import statement used by Turbopack to reference another part of the bundled module graph, specifically Part 0.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/otel-core/output.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};

```

----------------------------------------

TITLE: Importing Internal Module Part - Part 1 - JavaScript
DESCRIPTION: This module part imports another internal Turbopack part (part 0). This illustrates the dependency chaining between different generated module segments in the build.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/1/output.md#_snippet_15

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: Exporting Default from Turbopack Part (JavaScript)
DESCRIPTION: Exports the default value from a specific Turbopack module part using an `assert` clause. This pattern is used internally by Turbopack to manage the final exports of bundled modules.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/amphtml-document/output.md#_snippet_8

LANGUAGE: js
CODE:
```
export { default } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export default"
};
```

----------------------------------------

TITLE: Creating IPC Connection and Handlers - Node.js Net - JavaScript
DESCRIPTION: Defines the `createIpc` function to establish a connection to a given port using `createConnection`. It sets up packet buffering and state management to handle length-prefixed messages received over the socket, queues incoming packets and promise resolves, and defines methods for sending messages, sending a ready signal, and sending structured errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
function createIpc(port) {
    const socket = createConnection(port, "127.0.0.1");
    const packetQueue = [];
    const recvPromiseResolveQueue = [];
    function pushPacket(packet) {
        const recvPromiseResolve = recvPromiseResolveQueue.shift();
        if (recvPromiseResolve != null) {
            recvPromiseResolve(JSON.parse(packet.toString("utf8")));
        } else {
            packetQueue.push(packet);
        }
    }
    let state = {
        type: "waiting"
    };
    let buffer = Buffer.alloc(0);
    socket.once("connect", ()=>{
        socket.on("data", (chunk)=>{
            buffer = Buffer.concat([
                buffer,
                chunk
            ]);
            loop: while(true){
                switch(state.type){
                    case "waiting":
                        {
                            if (buffer.length >= 4) {
                                const length = buffer.readUInt32BE(0);
                                buffer = buffer.subarray(4);
                                state = {
                                    type: "packet",
                                    length
                                };
                            } else {
                                break loop;
                            }
                            break;
                        }
                    case "packet":
                        {
                            if (buffer.length >= state.length) {
                                const packet = buffer.subarray(0, state.length);
                                buffer = buffer.subarray(state.length);
                                state = {
                                    type: "waiting"
                                };
                                pushPacket(packet);
                            } else {
                                break loop;
                            }
                            break;
                        }
                }
            }
        });
    });
    socket.once("close", ()=>{
        process.exit(0);
    });
    function send(message) {
        const packet = Buffer.from(JSON.stringify(message), "utf8");
        const length = Buffer.alloc(4);
        length.writeUInt32BE(packet.length);
        socket.write(length);
        return new Promise((resolve, reject)=>{
            socket.write(packet, (err)=>{
                process.stderr.write(`TURBOPACK_OUTPUT_D\n`);
                process.stdout.write(`TURBOPACK_OUTPUT_D\n`);
                if (err != null) {
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
    }
    function sendReady() {
        const length = Buffer.from([
            0,
            0,
            0,
            0
        ]);
        return new Promise((resolve, reject)=>{
            socket.write(length, (err)=>{
                process.stderr.write(`TURBOPACK_OUTPUT_D\n`);
                process.stdout.write(`TURBOPACK_OUTPUT_D\n`);
                if (err != null) {
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
    }
    return {
        async recv () {
            const packet = packetQueue.shift();
            if (packet != null) {
                return JSON.parse(packet.toString("utf8"));
            }
            const result = await new Promise((resolve)=>{
                recvPromiseResolveQueue.push((result)=>{
                    resolve(result);
                });
            });
            return result;
        },
        send (message) {
            return send(message);
        },
        sendReady,
        async sendError (error) {
            try {
                await send({
                    type: "error",
                    ...structuredError(error)
                });
            } catch (err) {
                console.error("failed to send error back to rust:", err);
                process.exit(1);
            }
            process.exit(0);
        }
    };
}

```

----------------------------------------

TITLE: Variable Declaration - Cat
DESCRIPTION: Declares a constant variable 'cat' with string value
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const cat = "cat";

```

----------------------------------------

TITLE: Importing Turbopack Partition 4 - JavaScript
DESCRIPTION: Imports a module partition identified as part 4, indicating sequential dependency on previously loaded partitions within the Turbopack build output.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_23

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
```

----------------------------------------

TITLE: Defining patchFetch Function JS
DESCRIPTION: Defines a function `patchFetch` that wraps the imported `_patchFetch` function. It calls `_patchFetch` with an object containing `serverHooks` and `workAsyncStorage` obtained from the `routeModule`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_11

LANGUAGE: javascript
CODE:
```
function patchFetch() {
    return _patchFetch({
        serverHooks,
        workAsyncStorage
    });
}

```

----------------------------------------

TITLE: Invalid JSON Example with Syntax Error
DESCRIPTION: Example of invalid JSON syntax showing a missing comma or closing brace. The error occurs in line 3 where a comment is used, which is not valid in JSON.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/imports/json/issues/Code generation for chunk item errored-1c3f39.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "nested": {
    "this-is": "invalid" // lint-staged will remove trailing commas, so here's a comment
  }
}
```

----------------------------------------

TITLE: Building Native SWC Components
DESCRIPTION: Command for working with Rust code in Next.js. After installing Rust, this command builds the native components of the SWC compiler used by Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/building.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
pnpm swc-build-native
```

----------------------------------------

TITLE: Creating Abort Signal for Postponement
DESCRIPTION: Creates an `AbortController` and calls `React.unstable_postpone` within a try/catch block. If `unstable_postpone` throws (as expected by React's implementation), the abort controller's signal is aborted with the thrown object, allowing dependent operations to be cancelled.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_28

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import React from 'react';
import { h as assertPostpone } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -17
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
function createPostponedAbortSignal(reason) {
    assertPostpone();
    const controller = new AbortController();
    try {
        React.unstable_postpone(reason);
    } catch (x) {
        controller.abort(x);
    }
    return controller.signal;
}
export { createPostponedAbortSignal };
export { createPostponedAbortSignal as k } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Mermaid Graph for Phase 1 Dependencies
DESCRIPTION: Depicts the structure of item relationships and dependencies in Phase 1 using Mermaid language. Item3 relates to the export of RouteKind.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_2

LANGUAGE: Mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item3["export RouteKind"];
```

----------------------------------------

TITLE: Importing Turbopack Module Part JavaScript
DESCRIPTION: Imports a specific part of a Turbopack-bundled module using an assert condition, referencing part 4.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_32

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
```

----------------------------------------

TITLE: Defining Function c1_2 and Calling c1_3 in JavaScript
DESCRIPTION: This snippet defines the function `c1_2` which calls `c1_3`, adding a layer of interactivity among the functions. It is also hoisted and has an export statement.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
function c1_2() {
    return c1_3(d1);
}
```

----------------------------------------

TITLE: Define and Export gridAutoFlow Style Function in JS
DESCRIPTION: Imports a `style` helper function. It defines a `gridAutoFlow` style function by calling `style` with an object specifying the CSS property 'gridAutoFlow'. The resulting function is then exported with the alias `f`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_79

LANGUAGE: js
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 21
};
const gridAutoFlow = style({
    prop: 'gridAutoFlow'
});
export { gridAutoFlow as f } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Copying 'foobar' to 'foobarCopy' in JavaScript
DESCRIPTION: Declares a mutable variable 'foobarCopy' and initializes it with the current value of 'foobar'. It declares and writes to 'foobarCopy' and reads from 'foobar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
let foobarCopy = foobar;

```

----------------------------------------

TITLE: Module Part 0 - Variable Export
DESCRIPTION: Declares and exports variable 'a' with TurboPack variable assertion
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const a = "a";
export { a };
export { a as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

```

----------------------------------------

TITLE: Turbopack Generated Module Part 1 (Dev/Prod) - JavaScript
DESCRIPTION: This JavaScript snippet represents 'Part 1' of the bundled output generated by Turbopack for both development and production builds. It defines the `runtime` constant and exports it using a standard named export declaration. It also includes an additional export declaration referencing an internal Turbopack variable (`__TURBOPACK_VAR__`) with an alias, illustrating how the bundler might handle specific constant exports and internal wiring.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const runtime = "edge";
export { runtime };
export { runtime as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Development Module Part 2
DESCRIPTION: Re-exports 'DOG' and 'cat' from Turbopack parts with assertions
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
export { DOG } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export DOG"
};
export { cat } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export cat"
};

```

----------------------------------------

TITLE: Module Declaration of Order with Assert - JavaScript
DESCRIPTION: This statement imports 'order' from a module with a specific assert condition, showcasing interoperability between module systems in JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
const order = [];
export { order as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Executing Turbopack Module Evaluation with IPC - JavaScript
DESCRIPTION: This asynchronous function orchestrates the module evaluation process. It sets up an internal IPC interface, loads and initializes the target module via a factory function, enters a loop to receive messages from the main IPC channel, processes 'evaluate' requests by adding them to a queue, and handles 'result' messages for ongoing requests. It uses a map to track pending requests and their promises.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-evaluate/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { IPC } from "./index";
const ipc = IPC;
const queue = [];
const run = async (moduleFactory)=>{
    let nextId = 1;
    const requests = new Map();
    const internalIpc = {
        sendInfo: (message)=>ipc.send({
                type: "info",
                data: message
            }),
        sendRequest: (message)=>{
            const id = nextId++;
            let resolve, reject;
            const promise = new Promise((res, rej)=>{
                resolve = res;
                reject = rej;
            });
            requests.set(id, {
                resolve,
                reject
            });
            return ipc.send({
                type: "request",
                id,
                data: message
            }).then(()=>promise);
        },
        sendError: (error)=>{
            return ipc.sendError(error);
        }
    };
    let getValue;
    try {
        const module = await moduleFactory();
        if (typeof module.init === "function") {
            await module.init();
        }
        getValue = module.default;
        await ipc.sendReady();
    } catch (err) {
        await ipc.sendReady();
        await ipc.sendError(err);
    }
    let isRunning = false;
    const run = async ()=>{
        while(queue.length > 0){
            const args = queue.shift();
            try {
                const value = await getValue(internalIpc, ...args);
                await ipc.send({
                    type: "end",
                    data: value === undefined ? undefined : JSON.stringify(value, null, 2),
                    duration: 0
                });
            } catch (e) {
                await ipc.sendError(e);
            }
        }
        isRunning = false;
    };
    while(true){
        const msg = await ipc.recv();
        switch(msg.type){
            case "evaluate":
                {
                    queue.push(msg.args);
                    if (!isRunning) {
                        isRunning = true;
                        run();
                    }
                    break;
                }
            case "result":
                {
                    const request = requests.get(msg.id);
                    if (request) {
                        requests.delete(msg.id);
                        if (msg.error) {
                            request.reject(new Error(msg.error));
                        } else {
                            request.resolve(msg.data);
                        }
                    }
                    break;
                }
            default:
                {
                    console.error("unexpected message type", msg.type);
                    process.exit(1);
                }
        }
    }
};
export { run };
export { ipc as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { queue as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { run as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Creating Package Tarballs
DESCRIPTION: Command to create tarballs for Next.js packages, which will be written to a 'tarballs' directory in the repository root.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
pnpm pack-next --tar
```

----------------------------------------

TITLE: Turbopack Module Part 3: Re-exporting Default from Another Part in JavaScript
DESCRIPTION: This snippet shows Turbopack re-exporting the default export from another generated part, identified by the special '__TURBOPACK_PART__' path and 'export default' specifier in the assert clause. This is another internal mechanism for wiring modules together.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
export { default } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export default"
};
```

----------------------------------------

TITLE: Merged Module Evaluation in TurboPack (JavaScript)
DESCRIPTION: This snippet shows the merged result of module evaluation in TurboPack. It imports specific parts, calls the imported functions, and exports an empty object.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_20

LANGUAGE: javascript
CODE:
```
import { e as c1_3 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
import { h as c2_2 } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
c1_3();
c2_2();
export { };
```

----------------------------------------

TITLE: Multiplying Variable x by 2 in Javascript
DESCRIPTION: This snippet multiplies the value of the variable 'x' by 2 using the multiplication assignment operator. This is another common arithmetic operation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
x *= 2;
```

----------------------------------------

TITLE: Cat Variable Export
DESCRIPTION: Declares and exports a cat string variable
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
export let cat = "cat";
```

----------------------------------------

TITLE: Modifying Order Array with Push Operations
DESCRIPTION: Demonstrates sequential push operations that modify the shared order array with side effects
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-2/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
order.push("a");
```

LANGUAGE: javascript
CODE:
```
order.push("b");
```

LANGUAGE: javascript
CODE:
```
order.push("c");
```

----------------------------------------

TITLE: Empty Export in JavaScript
DESCRIPTION: This snippet exports nothing. It might be used as a placeholder or to signify end of module exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
export { };
```

----------------------------------------

TITLE: Defining Function d3 in JavaScript
DESCRIPTION: This snippet defines a function named `d3` which is yet another hoisted function declaration with no parameters or implementation.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
function d3() {}
```

----------------------------------------

TITLE: Defining Column Gap Filter Props in JavaScript
DESCRIPTION: Assigns a 'filterProps' array listing 'columnGap' to the 'columnGap' function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_10

LANGUAGE: js
CODE:
```
columnGap.filterProps = [ 'columnGap' ];
```

----------------------------------------

TITLE: Modifying Dog Variable in JavaScript
DESCRIPTION: This snippet modifies the `dog` variable by appending a string to it. It demonstrates how to directly change the value of an imported variable in a Turbopack module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
import { a as dog } from "__TURBOPACK_PART__" assert {\n    __turbopack_part__: -0\n};\nimport "__TURBOPACK_PART__" assert {\n    __turbopack_part__: 1\n};\ndog += "!";
```

----------------------------------------

TITLE: Importing gridAutoFlow Property - JS
DESCRIPTION: Imports the `gridAutoFlow` CSS property value from a Turbopack part identified by a numeric ID and re-exports it. This pattern is used for modularizing CSS property definitions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_57

LANGUAGE: javascript
CODE:
```
import { f as gridAutoFlow } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -22
};
export { gridAutoFlow };

```

----------------------------------------

TITLE: Exporting Variable a as d in Javascript
DESCRIPTION: This snippet exports the variable 'a' as 'd' from a module, utilizing a Turbopack-specific assertion. Like other exports, it's part of Turbopack's module handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_18

LANGUAGE: javascript
CODE:
```
export { a as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Defining Shared Object in JavaScript
DESCRIPTION: The code defines an object 'shared' with properties 'random' and 'effect', which involves pushing 'b' to the order array. It depends on the presence of 'random' and 'order'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
const shared = {
    random,
    effect: order.push("b")
};
```

----------------------------------------

TITLE: License Attribution for ws Library in Next.js
DESCRIPTION: This comment provides license attribution for the ws library used in the frame.js file of the undici/lib/web/websocket directory. It specifies the MIT License and credits Einar Otto Stangvik as the author.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@edge-runtime/primitives/load.js.LEGAL.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
```

----------------------------------------

TITLE: Variable Declaration - Second Item
DESCRIPTION: Declares constant variable 'b' with string value 'b'
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/combined-export/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const b = "b";

```

----------------------------------------

TITLE: Package Name Reference in Markdown
DESCRIPTION: Reference to the Next.js SWC package name for Linux x64 GNU systems
SOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/linux-x64-gnu/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
@next/swc-linux-x64-gnu
```

----------------------------------------

TITLE: Mermaid Graph for Phase 2 to 4 Dependencies
DESCRIPTION: Demonstrates the expanded dependencies and export relationships among module items through Phases 2 to 4 with inclusion of mutual dependencies visualized in a directed graph setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_5

LANGUAGE: Mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item3["export RouteKind"];
    Item2 --> Item1;
    Item3 --> Item2;
    Item3 --> Item1;
```

----------------------------------------

TITLE: Processed Module Re-export (Part 1) - JavaScript
DESCRIPTION: Shows a separate module part generated by the build tool, specifically re-exporting the GET function. It utilizes a build-specific __TURBOPACK_PART__ assert to reference the export from another part of the bundle.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export { GET } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export GET"
};

```

----------------------------------------

TITLE: Compiled Module Part 8 JS
DESCRIPTION: A segment of the compiled module code (Part 8) including standard imports, Turbopack part imports, instantiation of the `AppRouteRouteModule`, and exports using Turbopack's variable assertion syntax.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_17

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { AppRouteRouteModule } from '../../server/future/route-modules/app-route/module.compiled';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import { RouteKind } from '../../server/future/route-kind';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 5
};
const routeModule = new AppRouteRouteModule({
    definition: {
        kind: RouteKind.APP_ROUTE,
        page: 'VAR_DEFINITION_PAGE',
        pathname: 'VAR_DEFINITION_PATHNAME',
        filename: 'VAR_DEFINITION_FILENAME',
        bundlePath: 'VAR_DEFINITION_BUNDLE_PATH'
    },
    resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',
    nextConfigOutput,
    userland
});
export { routeModule as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Importing Turbopack Partition 8 and Userland Code - JavaScript
DESCRIPTION: Imports Turbopack partition 8 and a placeholder `VAR_USERLAND`, representing the import of the main page or application code written by the user. This is where the core application logic resides.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_28

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
import 'VAR_USERLAND';
```

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the migration guide documentation page, defining the title, navigation title, description, and source path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/migrating/from-create-react-app.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: How to migrate from Create React App to Next.js
nav_title: Create React App
description: Learn how to migrate your existing React application from Create React App to Next.js.
source: app/guides/migrating/from-create-react-app
---
```

----------------------------------------

TITLE: Defining Markdown Frontmatter for Next.js Documentation
DESCRIPTION: YAML frontmatter block defining the title and description for a Next.js documentation page about data fetching capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/index.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: Data Fetching
description: Learn how to fetch, cache, revalidate, and mutate data with Next.js.
---
```

----------------------------------------

TITLE: Empty Exports Section in JavaScript
DESCRIPTION: An empty export statement, likely included for structural or architectural reasons in the module setup. It does not perform any actual functionality but might serve as a placeholder or a format requirement.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/let-bug-1/output.md#2025-04-21_snippet_8

LANGUAGE: JavaScript
CODE:
```
export { };
```

----------------------------------------

TITLE: Variable Increment Operations
DESCRIPTION: Series of compound assignment operations on variable x using the += operator.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/grouping/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
x += 6;
```

LANGUAGE: javascript
CODE:
```
x += 7;
```

LANGUAGE: javascript
CODE:
```
x += 8;
```

LANGUAGE: javascript
CODE:
```
x += 9;
```

----------------------------------------

TITLE: Setting Alt Text for Open Graph Image
DESCRIPTION: A simple text string that demonstrates what alt text for an Open Graph image might look like. Alt text helps with accessibility and SEO by providing a text description of the image.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/metadata/app/opengraph/static/opengraph-image.alt.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
A alt txt for og
```

----------------------------------------

TITLE: Changing Directory - Bash
DESCRIPTION: This command changes the current directory to `with-edgedb-app`. This is assumed to be the directory created in the previous steps when creating the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ cd with-edgedb-app
```

----------------------------------------

TITLE: Turbopack Part Import 7
DESCRIPTION: This snippet imports 'Part 6' using a Turbopack-specific mechanism (`__TURBOPACK_PART__` with an assert clause), indicating a dependency on that module part.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
```

----------------------------------------

TITLE: Generating Diagram Phase 4 Mermaid
DESCRIPTION: This Mermaid graph definition is identical to the one used in Phase 3, visualizing a directed graph (flowchart) showing dependencies and relationships between various items (Item1 through Item30). Items 29 and 30 are explicitly labeled. It includes explicit dependencies: Item7 depending on Item6 and Item5, and Item8 depending on Item4 and Item7.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item4;
    Item2;
    Item5;
    Item3;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item11;
    Item12;
    Item13;
    Item14;
    Item15;
    Item16;
    Item17;
    Item18;
    Item19;
    Item20;
    Item21;
    Item22;
    Item23;
    Item24;
    Item25;
    Item26;
    Item27;
    Item28;
    Item29;
    Item29["export structuredError"];
    Item30;
    Item30["export IPC"];
    Item2 --> Item1;
    Item3 --> Item2;
    Item9 --> Item3;
    Item9 -.-> Item6;
    Item9 -.-> Item5;
    Item9 -.-> Item4;
    Item9 -.-> Item7;
    Item10 --> Item8;
    Item10 --> Item9;
    Item10 -.-> Item6;
    Item10 -.-> Item5;
    Item10 -.-> Item4;
    Item10 -.-> Item7;
    Item11 --> Item10;
    Item11 -.-> Item6;
    Item11 -.-> Item5;
    Item11 -.-> Item4;
    Item11 -.-> Item7;
    Item12 --> Item11;
    Item12 -.-> Item6;
    Item12 -.-> Item5;
    Item12 -.-> Item4;
    Item12 -.-> Item7;
    Item13 --> Item12;
    Item13 -.-> Item6;
    Item13 -.-> Item5;
    Item13 -.-> Item4;
    Item13 -.-> Item7;
    Item14 --> Item12;
    Item14 --> Item13;
    Item14 -.-> Item6;
    Item14 -.-> Item5;
    Item14 -.-> Item4;
    Item14 -.-> Item7;
    Item15 --> Item12;
    Item15 --> Item14;
    Item15 -.-> Item6;
    Item15 -.-> Item5;
    Item15 -.-> Item4;
    Item15 -.-> Item7;
    Item16 --> Item12;
    Item16 --> Item15;
    Item16 -.-> Item6;
    Item16 -.-> Item5;
    Item16 -.-> Item4;
    Item16 -.-> Item7;
    Item17 --> Item12;
    Item17 --> Item16;
    Item17 -.-> Item6;
    Item17 -.-> Item5;
    Item17 -.-> Item4;
    Item17 -.-> Item7;
    Item18 --> Item12;
    Item18 --> Item17;
    Item18 -.-> Item6;
    Item18 -.-> Item5;
    Item18 -.-> Item4;
    Item18 -.-> Item7;
    Item19 --> Item12;
    Item19 --> Item18;
    Item19 -.-> Item6;
    Item19 -.-> Item5;
    Item19 -.-> Item4;
    Item19 -.-> Item7;
    Item20 --> Item12;
    Item20 --> Item19;
    Item20 -.-> Item6;
    Item20 -.-> Item5;
    Item20 -.-> Item4;
    Item20 -.-> Item7;
    Item21 --> Item12;
    Item21 --> Item20;
    Item21 -.-> Item6;
    Item21 -.-> Item5;
    Item21 -.-> Item4;
    Item21 -.-> Item7;
    Item22 --> Item12;
    Item22 --> Item21;
    Item22 -.-> Item6;
    Item22 -.-> Item5;
    Item22 -.-> Item4;
    Item22 -.-> Item7;
    Item23 --> Item12;
    Item23 --> Item22;
    Item23 -.-> Item6;
    Item23 -.-> Item5;
    Item23 -.-> Item4;
    Item23 -.-> Item7;
    Item24 --> Item12;
    Item24 --> Item23;
    Item24 -.-> Item6;
    Item24 -.-> Item5;
    Item24 -.-> Item4;
    Item24 -.-> Item7;
    Item25 --> Item12;
    Item25 --> Item24;
    Item25 -.-> Item6;
    Item25 -.-> Item5;
    Item25 -.-> Item4;
    Item25 -.-> Item7;
    Item26 --> Item12;
    Item26 --> Item25;
    Item26 -.-> Item6;
    Item26 -.-> Item5;
    Item26 -.-> Item4;
    Item26 -.-> Item7;
    Item27 --> Item12;
    Item27 --> Item26;
    Item27 -.-> Item6;
    Item27 -.-> Item5;
    Item27 -.-> Item4;
    Item27 -.-> Item7;
    Item28 --> Item12;
    Item28 --> Item27;
    Item28 -.-> Item6;
    Item28 -.-> Item5;
    Item28 -.-> Item4;
    Item28 -.-> Item7;
    Item29 --> Item7;
    Item30 --> Item11;
    Item30 --> Item10;
    Item7 --> Item6;
    Item7 --> Item5;
    Item8 --> Item4;
    Item8 --> Item7;
```

----------------------------------------

TITLE: Appending String Literal to 'foobarCopy' in JavaScript
DESCRIPTION: Appends the string literal "Unused" to the current value of the mutable variable 'foobarCopy'. It reads from and writes to 'foobarCopy'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
foobarCopy += "Unused";

```

----------------------------------------

TITLE: Importing a Turbopack Part in Javascript
DESCRIPTION: This snippet imports a Turbopack part. This indicates the usage of Turbopack's module bundling features.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 1
};
```

----------------------------------------

TITLE: Part 1: Turbopack Internal Import
DESCRIPTION: Imports a Turbopack internal part using the `__turbopack_part__` assert. This mechanism is used by Turbopack to link different compiled parts of the module together.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};

```

----------------------------------------

TITLE: Turbopack Part Import 1
DESCRIPTION: This snippet imports 'Part 0' using a Turbopack-specific mechanism (`__TURBOPACK_PART__` with an assert clause), indicating a dependency on the module part defined previously.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: Configure next export Trailing Slash Behavior
DESCRIPTION: Shows how to configure `next.config.js` to add trailing slashes to exported paths, reverting to the behavior of `next export` in Next.js versions prior to v9.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-9.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
module.exports = {
  trailingSlash: true,
}
```

----------------------------------------

TITLE: Mermaid Diagram Phase 2
DESCRIPTION: This mermaid diagram represents the module dependencies in phase 2. It shows the different items and their dependencies, visualizing the flow of data and execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_9

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item4;
    Item5;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item10["export a"];
    Item11;
    Item11["export b"];
    Item2 --> Item1;
    Item3 --> Item2;
    Item4 --> Item3;
    Item6 --> Item2;
    Item6 --> Item3;
    Item6 --> Item5;
    Item7 --> Item6;
    Item7 --> Item4;
    Item8 --> Item6;
    Item8 -.-> Item7;
    Item9 --> Item8;
    Item9 --> Item6;
    Item10 --> Item8;
    Item11 --> Item9;
```

----------------------------------------

TITLE: Executing Node with Dynamic Arguments Array (Node.js)
DESCRIPTION: This snippet uses `child_process.spawnSync` to execute 'node', providing an array of dynamic variables (`[unknown, unknown]`) as arguments. Using dynamic values within the arguments array makes the exact command execution difficult to analyze statically. This requires the built-in `child_process` module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1005__ child_process.spawnSync(__-3e2c30.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
child_process.spawnSync('node', [unknown, unknown])
```

----------------------------------------

TITLE: Checking React Unstable Postpone Feature Availability
DESCRIPTION: Determines if the `React.unstable_postpone` function is available by checking its type. This boolean value (`hasPostpone`) is used by `assertPostpone`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_29

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import React from 'react';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
const hasPostpone = typeof React.unstable_postpone === 'function';
export { hasPostpone as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Defining Next.js PagesRouteModule with Turbopack Parts (JavaScript)
DESCRIPTION: This snippet imports necessary components (`App`, `Document`), route handling classes (`PagesRouteModule`), route kind enums (`RouteKind`), and userland code from various Turbopack parts and placeholder variables. It then instantiates a `PagesRouteModule` using these imports and defines its characteristics (kind, page, pathname). Finally, it exports the created `routeModule`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_62

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
import { RouteKind } from '../../server/future/route-kind';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
import App from 'VAR_MODULE_APP';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 6
};
import Document from 'VAR_MODULE_DOCUMENT';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 22
};
const routeModule = new PagesRouteModule({
    definition: {
        kind: RouteKind.PAGES,
        page: 'VAR_DEFINITION_PAGE',
        pathname: 'VAR_DEFINITION_PATHNAME',
        bundlePath: '',
        filename: ''
    },
    components: {
        App,
        Document
    },
    userland
});
export { routeModule };
export { routeModule as l } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Re-exporting unstable_getStaticParams - JavaScript
DESCRIPTION: This snippet imports the unstable_getStaticParams function previously aliased as 'i' from a Turbopack part and re-exports it with its original name, 'unstable_getStaticParams'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_50

LANGUAGE: javascript
CODE:
```
import { i as unstable_getStaticParams } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -20
};
export { unstable_getStaticParams };
```

----------------------------------------

TITLE: Assigning a Constant Value to x in Javascript
DESCRIPTION: This snippet assigns the constant value 100 to the variable x, overwriting its previous value. It's a direct assignment with a literal value.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
x = 100;
```

----------------------------------------

TITLE: Define fillPool Function and Constants - JavaScript
DESCRIPTION: Defines the `fillPool` function which manages and fills the random byte pool. It checks if the pool needs to be initialized or refilled based on the requested byte size and the current `poolOffset`. It uses `crypto.randomFillSync` to populate the buffer. It also defines and exports the `POOL_SIZE_MULTIPLIER` constant.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nanoid/output.md#_snippet_12

LANGUAGE: javascript
CODE:
```
import { a as poolOffset } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -6
};
import { b as pool } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import crypto from 'crypto';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
const POOL_SIZE_MULTIPLIER = 128;
let fillPool = (bytes)=>{
    if (!pool || pool.length < bytes) {
        pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);
        crypto.randomFillSync(pool);
        poolOffset = 0;
    } else if (poolOffset + bytes > pool.length) {
        crypto.randomFillSync(pool);
        poolOffset = 0;
    }
    poolOffset += bytes;
};
export { POOL_SIZE_MULTIPLIER as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { fillPool as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Generating Diagram Mermaid
DESCRIPTION: This Mermaid graph definition visualizes a directed graph (flowchart) showing dependencies and relationships between various items (Item1 through Item30). Items 29 and 30 are explicitly labeled as 'export structuredError' and 'export IPC'. It uses standard arrows (`-->`) for direct dependencies and dashed arrows (`-.->`) for other types of relationships. This specific diagram structure is repeated across multiple phases.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item4;
    Item2;
    Item5;
    Item3;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item11;
    Item12;
    Item13;
    Item14;
    Item15;
    Item16;
    Item17;
    Item18;
    Item19;
    Item20;
    Item21;
    Item22;
    Item23;
    Item24;
    Item25;
    Item26;
    Item27;
    Item28;
    Item29;
    Item29["export structuredError"];
    Item30;
    Item30["export IPC"];
    Item2 --> Item1;
    Item3 --> Item2;
    Item9 --> Item3;
    Item9 -.-> Item6;
    Item9 -.-> Item5;
    Item9 -.-> Item4;
    Item9 -.-> Item7;
    Item10 --> Item8;
    Item10 --> Item9;
    Item10 -.-> Item6;
    Item10 -.-> Item5;
    Item10 -.-> Item4;
    Item10 -.-> Item7;
    Item11 --> Item10;
    Item11 -.-> Item6;
    Item11 -.-> Item5;
    Item11 -.-> Item4;
    Item11 -.-> Item7;
    Item12 --> Item11;
    Item12 -.-> Item6;
    Item12 -.-> Item5;
    Item12 -.-> Item4;
    Item12 -.-> Item7;
    Item13 --> Item12;
    Item13 -.-> Item6;
    Item13 -.-> Item5;
    Item13 -.-> Item4;
    Item13 -.-> Item7;
    Item14 --> Item12;
    Item14 --> Item13;
    Item14 -.-> Item6;
    Item14 -.-> Item5;
    Item14 -.-> Item4;
    Item14 -.-> Item7;
    Item15 --> Item12;
    Item15 --> Item14;
    Item15 -.-> Item6;
    Item15 -.-> Item5;
    Item15 -.-> Item4;
    Item15 -.-> Item7;
    Item16 --> Item12;
    Item16 --> Item15;
    Item16 -.-> Item6;
    Item16 -.-> Item5;
    Item16 -.-> Item4;
    Item16 -.-> Item7;
    Item17 --> Item12;
    Item17 --> Item16;
    Item17 -.-> Item6;
    Item17 -.-> Item5;
    Item17 -.-> Item4;
    Item17 -.-> Item7;
    Item18 --> Item12;
    Item18 --> Item17;
    Item18 -.-> Item6;
    Item18 -.-> Item5;
    Item18 -.-> Item4;
    Item18 -.-> Item7;
    Item19 --> Item12;
    Item19 --> Item18;
    Item19 -.-> Item6;
    Item19 -.-> Item5;
    Item19 -.-> Item4;
    Item19 -.-> Item7;
    Item20 --> Item12;
    Item20 --> Item19;
    Item20 -.-> Item6;
    Item20 -.-> Item5;
    Item20 -.-> Item4;
    Item20 -.-> Item7;
    Item21 --> Item12;
    Item21 --> Item20;
    Item21 -.-> Item6;
    Item21 -.-> Item5;
    Item21 -.-> Item4;
    Item21 -.-> Item7;
    Item22 --> Item12;
    Item22 --> Item21;
    Item22 -.-> Item6;
    Item22 -.-> Item5;
    Item22 -.-> Item4;
    Item22 -.-> Item7;
    Item23 --> Item12;
    Item23 --> Item22;
    Item23 -.-> Item6;
    Item23 -.-> Item5;
    Item23 -.-> Item4;
    Item23 -.-> Item7;
    Item24 --> Item12;
    Item24 --> Item23;
    Item24 -.-> Item6;
    Item24 -.-> Item5;
    Item24 -.-> Item4;
    Item24 -.-> Item7;
    Item25 --> Item12;
    Item25 --> Item24;
    Item25 -.-> Item6;
    Item25 -.-> Item5;
    Item25 -.-> Item4;
    Item25 -.-> Item7;
    Item26 --> Item12;
    Item26 --> Item25;
    Item26 -.-> Item6;
    Item26 -.-> Item5;
    Item26 -.-> Item4;
    Item26 -.-> Item7;
    Item27 --> Item12;
    Item27 --> Item26;
    Item27 -.-> Item6;
    Item27 -.-> Item5;
    Item27 -.-> Item4;
    Item27 -.-> Item7;
    Item28 --> Item12;
    Item28 --> Item27;
    Item28 -.-> Item6;
    Item28 -.-> Item5;
    Item28 -.-> Item4;
    Item28 -.-> Item7;
    Item29 --> Item7;
    Item30 --> Item11;
    Item30 --> Item10;
```

----------------------------------------

TITLE: Part 5: Modifying Variable and Exporting Javascript
DESCRIPTION: Imports the variable `foobar` (aliased as `a`) from another part. It declares a constant `bar` and then concatenates its value to the imported `foobar` variable. The `bar` variable is exported under the alias `e`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/2/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
const bar = "bar";
foobar += bar;
export { bar as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Importing Turbopack Module Part 0 - JavaScript
DESCRIPTION: Imports code from Turbopack module part 0 using a special `assert` syntax with `__turbopack_part__`. This represents an internal module dependency within the Turbopack build process, connecting this part to a previous one.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: Console Output - Dog Variable
DESCRIPTION: Logs the value of dog variable to console
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
console.log(dog);
```

----------------------------------------

TITLE: Defining a devlow-bench Scenario with Properties - JavaScript
DESCRIPTION: Example demonstrating how to use the `describe` function with scenario properties. The scenario function receives the property values as arguments and will run for each combination of specified property values.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { describe } from 'devlow-bench'

describe(
  'my scenario',
  {
    myProperty: [1, 2, 3],
    myOtherProperty: true,
  },
  async ({ myProperty, myOtherProperty }) => {
    console.log(myProperty, myOtherProperty)
  }
)
```

----------------------------------------

TITLE: Arrow Function Assignment
DESCRIPTION: Assigns an empty arrow function to variable 'a'
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-fn/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
a = ()=>{};
```

----------------------------------------

TITLE: Initializing AppRouteRouteModule Instance JS
DESCRIPTION: Declares a constant `routeModule` and initializes it with a new instance of `AppRouteRouteModule`. The constructor is called with configuration including route definition details, resolved page path, next config output, and the imported userland module.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const routeModule = new AppRouteRouteModule({
    definition: {
        kind: RouteKind.APP_ROUTE,
        page: 'VAR_DEFINITION_PAGE',
        pathname: 'VAR_DEFINITION_PATHNAME',
        filename: 'VAR_DEFINITION_FILENAME',
        bundlePath: 'VAR_DEFINITION_BUNDLE_PATH'
    },
    resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',
    nextConfigOutput,
    userland
});

```

----------------------------------------

TITLE: Declaring RouteKind Binding JS
DESCRIPTION: References the binding for the `RouteKind` enum imported from an internal Next.js module file. This binding is hoisted and declares the local name `RouteKind`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { RouteKind } from '../../server/future/route-kind';

```

----------------------------------------

TITLE: Defining Function c2_3 and Calling c2_1 in JavaScript
DESCRIPTION: This snippet captures the function `c2_3` which recursively refers to `c2_1`, creating a potential cycle and increasing the complexity of function interaction.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/3/output.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
function c2_3() {
    return c2_1();
}
```

----------------------------------------

TITLE: Exporting RouteKind with TurboPack Integration in JavaScript (PROD)
DESCRIPTION: Similar to the development variant, this snippet focuses on the production phase setup using TurboPack. RouteKind is exported with assertions for build optimization, showing how production builds of JavaScript modules manage exports.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-kind/output.md#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
var RouteKind;
(function(RouteKind) {
    RouteKind["PAGES"] = "PAGES";
    RouteKind["PAGES_API"] = "PAGES_API";
    RouteKind["APP_PAGE"] = "APP_PAGE";
    RouteKind["APP_ROUTE"] = "APP_ROUTE"];
})(RouteKind || (RouteKind = {}));
export { RouteKind };
export { RouteKind as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Importing Turbopack Part JS
DESCRIPTION: Imports a specific part of the compiled module bundle using a Turbopack-specific `assert` clause. This is part of Turbopack's internal module splitting and loading mechanism.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/app-route/output.md#_snippet_13

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};

```

----------------------------------------

TITLE: Importing Turbopack Part 0 Dependency (1) JavaScript
DESCRIPTION: Imports a dependency identified by the Turbopack part marker `__turbopack_part__: 0`. This likely ensures that a specific module, possibly related to constants or initial setup (as seen in Part 0), is loaded and processed by the build tool.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_32

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
```

----------------------------------------

TITLE: Creating Grid Column Style Function using Utility in JavaScript
DESCRIPTION: Creates a style function specifically for the 'gridColumn' CSS property using the generic 'style' utility function.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_14

LANGUAGE: js
CODE:
```
export const gridColumn = style({
    prop: 'gridColumn'
});
```

----------------------------------------

TITLE: Defining gridRow Style Function (JS)
DESCRIPTION: Defines a style function for the CSS 'gridRow' property. It utilizes a 'style' helper function and Turbopack assertions for module dependencies, exporting the function with an alias.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_47

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import style from './style';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 20
};
const gridRow = style({
    prop: 'gridRow'
});
export { gridRow as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Production Module Code
DESCRIPTION: Production version of the module code, identical to development version
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-fn/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
a = ()=>{};
function a() {}
console.log(a);
export { a as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };

```

----------------------------------------

TITLE: Importing Breakpoints Utility in JavaScript
DESCRIPTION: Imports the 'handleBreakpoints' utility function from the breakpoints module. This function is used to apply styles based on responsive breakpoint values provided in props.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_3

LANGUAGE: js
CODE:
```
import { handleBreakpoints } from './breakpoints';
```

----------------------------------------

TITLE: Re-exporting getStaticPaths - JavaScript
DESCRIPTION: This snippet imports the getStaticPaths function previously aliased as 'c' from a Turbopack part and re-exports it with its original name, 'getStaticPaths'. This pattern consolidates exports for final consumption.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_45

LANGUAGE: javascript
CODE:
```
import { c as getStaticPaths } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -14
};
export { getStaticPaths };
```

----------------------------------------

TITLE: Implementing Next.js Tracer Class (JavaScript)
DESCRIPTION: Defines the `NextTracerImpl` class to manage tracing within a Next.js application. It wraps OpenTelemetry-like functionality, providing methods for starting spans, managing trace context and propagation, and handling root span attributes. It also includes utility functions like `isPromise` and `getSpanId`.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_37

LANGUAGE: javascript
CODE:
```
import { b as context } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import { c as propagation } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import { a as api } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -3
};
import { h as closeSpanWithError } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -9
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { LogSpanAllowList } from './constants';
import { g as ROOT_CONTEXT } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { NextVanillaSpanAllowlist } from './constants';
import { d as trace } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -5
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
const isPromise = (p)=>{
    return p !== null && typeof p === 'object' && typeof p.then === 'function';
};
const rootSpanAttributesStore = new Map();
const rootSpanIdKey = api.createContextKey('next.rootSpanId');
let lastSpanId = 0;
const getSpanId = ()=>lastSpanId++;
const clientTraceDataSetter = {
    set (carrier, key, value) {
        carrier.push({
            key,
            value
        });
    }
};
class NextTracerImpl {
    getTracerInstance() {
        return trace.getTracer('next.js', '0.0.1');
    }
    getContext() {
        return context;
    }
    getTracePropagationData() {
        const activeContext = context.active();
        const entries = [];
        propagation.inject(activeContext, entries, clientTraceDataSetter);
        return entries;
    }
    getActiveScopeSpan() {
        return trace.getSpan(context == null ? void 0 : context.active());
    }
    withPropagatedContext(carrier, fn, getter) {
        const activeContext = context.active();
        if (trace.getSpanContext(activeContext)) {
            return fn();
        }
        const remoteContext = propagation.extract(activeContext, carrier, getter);
        return context.with(remoteContext, fn);
    }
    trace(...args) {
        var _trace_getSpanContext;
        const [type, fnOrOptions, fnOrEmpty] = args;
        const { fn, options } = typeof fnOrOptions === 'function' ? {
            fn: fnOrOptions,
            options: {}
        } : {
            fn: fnOrEmpty,
            options: {
                ...fnOrOptions
            }
        };
        const spanName = options.spanName ?? type;
        if (!NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== '1' || options.hideSpan) {
            return fn();
        }
        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        let isRootSpan = false;
        if (!spanContext) {
            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;
            isRootSpan = true;
        } else if (((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote)) {
            isRootSpan = true;
        }
        const spanId = getSpanId();
        options.attributes = {
            'next.span_name': spanName,
            'next.span_type': type,
            ...options.attributes
        };
        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{
                const startTime = 'performance' in globalThis && 'measure' in performance ? globalThis.performance.now() : undefined;
                const onCleanup = ()=>{
                    rootSpanAttributesStore.delete(spanId);
                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && LogSpanAllowList.includes(type || '')) {
                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split('.').pop() || '').replace(/[A-Z]/g, (match)=>'-' + match.toLowerCase())}`, {
                            start: startTime,
                            end: performance.now()
                        });
                    }
                };
                if (isRootSpan) {
                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));
                }
                try {
                    if (fn.length > 1) {
                        return fn(span, (err)=>closeSpanWithError(span, err));
                    }
                    const result = fn(span);
                    if (isPromise(result)) {
                        return result.then((res)=>{
                            span.end();
                            return res;
                        }).catch((err)=>{
                            closeSpanWithError(span, err);
                            throw err;
                        }).finally(onCleanup);
                    } else {
                        span.end();
                        onCleanup();
                    }
                    return result;
                } catch (err) {
                    closeSpanWithError(span, err);
                    onCleanup();
                    throw err;
                }
            }));
    }
    wrap(...args) {
        const tracer = this;
        const [name, options, fn] = args.length === 3 ? args : [
            args[0],
            {},
            args[1]
        ];
        if (!NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== '1') {
            return fn;
        }
        return function() {
            let optionsObj = options;
            if (typeof optionsObj === 'function' && typeof fn === 'function') {
                optionsObj = optionsObj.apply(this, arguments);
            }
            const lastArgId = arguments.length - 1;
            const cb = arguments[lastArgId];
            if (typeof cb === 'function') {
                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);
                return tracer.trace(name, optionsObj, (_span, done)=>{
                    arguments[lastArgId] = function(err) {
                        done == null ? void 0 : done(err);
                        return scopeBoundCb.apply(this, arguments);
                    };
                    return fn.apply(this, arguments);
                });
            } else {
                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));
            }
        };
    }
    startSpan(...args) {
        const [type, options] = args;
        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        return this.getTracerInstance().startSpan(type, options, spanContext);
    }
    getSpanContext(parentSpan) {
        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;
        return spanContext;
    }
    getRootSpanAttributes() {
        const spanId = context.active().getValue(rootSpanIdKey);
        return rootSpanAttributesStore.get(spanId);
    }
}
const getTracer = (()=>{
    const tracer = new NextTracerImpl();
    return ()=>tracer;
})();
export { getTracer };
export { isPromise as i } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { rootSpanAttributesStore as j } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { rootSpanIdKey as k } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { lastSpanId as l } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { getSpanId as m } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { clientTraceDataSetter as n } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { NextTracerImpl as o } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { getTracer as p } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Defining OpenTelemetry API Placeholder JavaScript
DESCRIPTION: Defines a placeholder variable `api` and exports it under an alias `a`. This variable is intended to hold the OpenTelemetry API instance, with its actual assignment happening in a subsequent build part.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_34

LANGUAGE: javascript
CODE:
```
let api;
export { api as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Ordering Operations & Sharing - JavaScript
DESCRIPTION: This module provides various exports of functions and objects, allowing for manipulation of state across different parts of the application via modularize practices.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/write-order/output.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
import { e as shared } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
export { shared }; 
```

----------------------------------------

TITLE: Mermaid Diagram Final
DESCRIPTION: This is the final mermaid diagram, outlining the dependencies between the created items.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_12

LANGUAGE: mermaid
CODE:
```
graph TD
    N0["Items: [ItemId(0, Normal), ItemId(1, VarDeclarator(0)), ItemId(2, VarDeclarator(0)), ItemId(4, VarDeclarator(0)), ItemId(5, VarDeclarator(0))] "];
    N1["Items: [ItemId(3, Normal), ItemId(6, Normal), ItemId(7, VarDeclarator(0))] "];
    N2["Items: [ItemId(8, VarDeclarator(0)), ItemId(Export((&quot;b&quot;, #2), &quot;b&quot;))] "];
    N3["Items: [ItemId(Export((&quot;a&quot;, #2), &quot;a&quot;))] "];
    N1 --> N0;
    N3 --> N1;
    N2 --> N0;
    N2 --> N1;
```

----------------------------------------

TITLE: Mermaid Diagram Phase 4
DESCRIPTION: This mermaid diagram represents the module dependencies in phase 4. It shows the different items and their dependencies, visualizing the flow of data and execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_11

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item4;
    Item5;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item10["export a"];
    Item11;
    Item11["export b"];
    Item2 --> Item1;
    Item3 --> Item2;
    Item4 --> Item3;
    Item6 --> Item2;
    Item6 --> Item3;
    Item6 --> Item5;
    Item7 --> Item6;
    Item7 --> Item4;
    Item8 --> Item6;
    Item8 -.-> Item7;
    Item9 --> Item8;
    Item9 --> Item6;
    Item10 --> Item8;
    Item11 --> Item9;
```

----------------------------------------

TITLE: Displaying Markdown Link in Next.js Documentation
DESCRIPTION: This code snippet demonstrates how to create a markdown link to the feature request discussion template in the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/triaging.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[this template](https://github.com/vercel/next.js/discussions/new?category=ideas)
```

----------------------------------------

TITLE: Importing Non-Existent Module: JavaScript
DESCRIPTION: This snippet shows an ECMAScript Modules (ESM) import statement attempting to load a module from the path 'does-not-exist/path'. This will result in a 'Module not found' error during resolution, as the specified module or subpath does not exist in the project dependencies or file system.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/imports/resolve_error_esm/issues/__l___Module not found____c__ Can't resolve __c_'d-8707b3.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
import dne from 'does-not-exist/path'
```

----------------------------------------

TITLE: Mermaid Graph illustrating dependencies
DESCRIPTION: This Mermaid code defines a directed graph showing the relationships and dependencies between numerous items (Item1 through Item44). It includes specific labels for some items indicating exports like 'gap', 'columnGap', etc., and shows how items connect to each other.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_25

LANGUAGE: Mermaid
CODE:
```
graph TD
    Item1;
    Item6;
    Item2;
    Item7;
    Item3;
    Item8;
    Item9;
    Item10;
    Item4;
    Item11;
    Item12;
    Item13;
    Item14;
    Item15;
    Item16;
    Item17;
    Item18;
    Item19;
    Item20;
    Item21;
    Item22;
    Item23;
    Item24;
    Item25;
    Item26;
    Item27;
    Item28;
    Item29;
    Item30;
    Item31;
    Item32;
    Item32["export gap"];
    Item33;
    Item33["export columnGap"];
    Item34;
    Item34["export rowGap"];
    Item35;
    Item35["export gridColumn"];
    Item36;
    Item36["export gridRow"];
    Item37;
    Item37["export gridAutoFlow"];
    Item38;
    Item38["export gridAutoColumns"];
    Item39;
    Item39["export gridAutoRows"];
    Item40;
    Item40["export gridTemplateColumns"];
    Item41;
    Item41["export gridTemplateRows"];
    Item42;
    Item42["export gridTemplateAreas"];
    Item43;
    Item43["export gridArea"];
    Item44;
    Item44["export default"];
    Item2 --> Item1;
    Item3 --> Item2;
    Item4 --> Item3;
    Item5 --> Item4;
    Item12 --> Item8;
    Item12 --> Item9;
    Item12 --> Item10;
    Item12 --> Item5;
    Item13 --> Item12;
    Item13 --> Item11;
    Item14 --> Item13;
    Item14 --> Item12;
    Item15 --> Item8;
    Item15 --> Item9;
    Item15 --> Item10;
    Item15 --> Item13;
    Item16 --> Item15;
    Item16 --> Item11;
    Item17 --> Item16;
    Item17 --> Item15;
    Item18 --> Item8;
    Item18 --> Item9;
    Item18 --> Item10;
    Item18 --> Item16;
    Item19 --> Item18;
    Item19 --> Item11;
    Item20 --> Item19;
    Item20 --> Item18;
    Item21 --> Item6;
    Item21 --> Item19;
    Item22 --> Item6;
    Item22 --> Item21;
    Item23 --> Item6;
    Item23 --> Item22;
    Item24 --> Item6;
    Item24 --> Item23;
    Item25 --> Item6;
    Item25 --> Item24;
    Item26 --> Item6;
    Item26 --> Item25;
    Item27 --> Item6;
    Item27 --> Item26;
    Item28 --> Item6;
    Item28 --> Item27;
    Item29 --> Item6;
    Item29 --> Item28;
    Item30 --> Item7;
    Item30 --> Item14;
    Item30 --> Item12;
    Item30 --> Item17;
    Item30 --> Item15;
    Item30 --> Item20;
    Item30 --> Item18;
    Item30 --> Item21;
    Item30 --> Item22;
    Item30 --> Item23;
    Item30 --> Item24;
    Item30 --> Item25;
    Item30 --> Item26;
    Item30 --> Item27;
    Item30 --> Item28;
    Item30 --> Item29;
    Item31 --> Item30;
    Item32 --> Item14;
    Item32 --> Item12;
    Item33 --> Item17;
    Item33 --> Item15;
    Item34 --> Item20;
    Item34 --> Item18;
    Item35 --> Item21;
    Item36 --> Item22;
    Item37 --> Item23;
    Item38 --> Item24;
    Item39 --> Item25;
    Item40 --> Item26;
    Item41 --> Item27;
    Item42 --> Item28;
    Item43 --> Item29;
    Item44 --> Item31;
```

----------------------------------------

TITLE: String Concatenation - Dog Variable
DESCRIPTION: Appends exclamation mark to dog variable
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
dog += "!";
```

----------------------------------------

TITLE: Defining getSpanId Helper Function Javascript
DESCRIPTION: Defines a utility function `getSpanId` that returns a unique sequential ID by incrementing the `lastSpanId` counter.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const getSpanId = ()=>lastSpanId++;

```

----------------------------------------

TITLE: Initial Cat Value Export
DESCRIPTION: Exports the initial value of the cat variable
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
export const initialCat = cat;
```

----------------------------------------

TITLE: Declaring Random Number in JavaScript
DESCRIPTION: This snippet generates a random number using Math.random() and stores it in the 'random' variable. No external dependencies are required, but a JavaScript environment is necessary. This forms part of the shared state.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
const random = Math.random();
```

----------------------------------------

TITLE: Turbopack Module Part 2: Processed Module Logic and Exports in JavaScript
DESCRIPTION: This comprehensive snippet represents a significant part of the Turbopack-processed module. It includes the original logic (stream import and check, fetch function) and adds Turbopack's internal default export variable '__TURBOPACK__default__export__', along with multiple exports using a special '__TURBOPACK_VAR__' assert syntax and the standard default export.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import Stream from 'node:stream';
const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;
function fetch() {}
const __TURBOPACK__default__export__ = fetch;
export { __TURBOPACK__default__export__ as default };
export { streamDestructionSupported as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { fetch as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { __TURBOPACK__default__export__ as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Exporting Constant DOG Using Assertions
DESCRIPTION: This snippet imports 'dog' from another module using assertions and exports it as constant 'DOG'. It demonstrates module interoperability.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import { a as dog } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
const DOG = dog;
export { DOG };
export { DOG as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Part 6: Import and Modify Variable
DESCRIPTION: Imports `foobar` from part -2 and imports parts 4 and 5. It appends the string 'foo' to the imported `foobar` variable. This modification affects the shared `foobar` variable across parts.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_19

LANGUAGE: javascript
CODE:
```
import { a as foobar } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -2
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 5
};
foobar += "foo";

```

----------------------------------------

TITLE: Compiling Next.js Changes in Markdown
DESCRIPTION: Instructions for compiling changes made to Next.js before running the benchmark. This step ensures that any local modifications are included in the benchmarking process.
SOURCE: https://github.com/vercel/next.js/blob/canary/bench/vercel/README.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
Note: if you made some changes to Next.js, make sure you compiled them by running at the root of the monorepo either `pnpm dev` or `pnpm build --force`.
```

----------------------------------------

TITLE: Logging 'foobarCopy' to Console in JavaScript
DESCRIPTION: Logs the current value of the variable 'foobarCopy' to the console. This statement has side effects (console output) and reads from 'foobarCopy'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
console.log(foobarCopy);

```

----------------------------------------

TITLE: Wrap Standard Console Methods for Turbopack Output in JavaScript
DESCRIPTION: This JavaScript code snippet defines and applies a function `improveConsole` that wraps standard console methods (`log`, `error`, `warn`, etc.). It modifies the method's behavior to write specific `TURBOPACK_OUTPUT_` markers to the designated stdio stream before and after the original console output. It also optionally adds a stack trace marked with `TURBOPACK_OUTPUT_S`. This wrapping allows Turbopack to parse and handle console output more effectively.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/ipc-index/output.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 8
};
const improveConsole = (name, stream, addStack)=>{
    const original = console[name];
    const stdio = process[stream];
    console[name] = (...args)=>{
        stdio.write(`TURBOPACK_OUTPUT_B\n`);
        original(...args);
        if (addStack) {
            const stack = new Error().stack?.replace(/^.+\n.+\n/, "") + "\n";
            stdio.write("TURBOPACK_OUTPUT_S\n");
            stdio.write(stack);
        }
        stdio.write("TURBOPACK_OUTPUT_E\n");
    };
};
improveConsole("error", "stderr", true);
improveConsole("warn", "stderr", true);
improveConsole("count", "stdout", true);
improveConsole("trace", "stderr", false);
improveConsole("log", "stdout", true);
improveConsole("group", "stdout", true);
improveConsole("groupCollapsed", "stdout", true);
improveConsole("table", "stdout", true);
improveConsole("debug", "stdout", true);
improveConsole("info", "stdout", true);
improveConsole("dir", "stdout", true);
improveConsole("dirxml", "stdout", true);
improveConsole("timeEnd", "stdout", true);
improveConsole("timeLog", "stdout", true);
improveConsole("timeStamp", "stdout", true);
improveConsole("assert", "stderr", true);
export { improveConsole as e } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Full Compaction Example: Initial State
DESCRIPTION: Presents a more complex initial state for a full compaction example, including multiple key families and sequence numbers.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-persistence/README.md#_snippet_2

LANGUAGE: text
CODE:
```
key hash range: | 0    ...    u64::MAX | Family
SST 1:             |-|                   1
SST 2:             |----------------|    1
SST 3:                |----------------| 1
SST 4:            |-----|                2
SST 5:                |-----|            2
SST 6:                 |-------|         1
SST 7:                    |-------|      1
SST 8:                 |--------|        2
SST 9:                     |--------|    2
CURRENT: 9
```

----------------------------------------

TITLE: Declare Binding: ReflectAdapter - Next.js - JS
DESCRIPTION: Declares the `ReflectAdapter` variable, binding it to the export of the same name from the './adapters/reflect' module. It is used here in a Proxy handler for the cookies object.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import { ReflectAdapter } from './adapters/reflect';
```

----------------------------------------

TITLE: Declaring Variable y and Assigning x Value in Javascript
DESCRIPTION: This snippet declares a variable 'y' and assigns it the current value of variable 'x'. This demonstrates variable assignment and dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
let y = x;
```

----------------------------------------

TITLE: Empty Export Module
DESCRIPTION: Empty module export statement
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/multi-export/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
export { };

```

----------------------------------------

TITLE: Declaring Another Constant in JavaScript
DESCRIPTION: This snippet declares a constant 'cat' and assigns it the string value 'cat'. Similar to the previous snippet, it demonstrates a basic use of 'const'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const cat = "cat";
```

----------------------------------------

TITLE: License information for undici/lib/web/websocket/frame.js
DESCRIPTION: This snippet shows the license information for the `frame.js` file within the `undici` library. It indicates that the code is licensed under the MIT License and credits Einar Otto Stangvik as the author.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@edge-runtime/primitives/fetch.js.LEGAL.txt#2025-04-21_snippet_1

LANGUAGE: None
CODE:
```
"/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */"
```

----------------------------------------

TITLE: Retrieving User Inputs for Sitemap Generation (PHP)
DESCRIPTION: This function retrieves user inputs from the $_GET superglobal array, sanitizes them, and returns them in a structured format for sitemap generation. It handles pagination parameters (pageNo, perPage), taxonomy type, and post type. It returns an array containing arguments for fetching users, posts, and the taxonomy.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_11

LANGUAGE: PHP
CODE:
```
<?php
function wsra_get_user_inputs()
{
  $pageNo = sprintf("%d", $_GET['pageNo']);
  $perPage = sprintf("%d", $_GET['perPage']);
  // Check for array key taxonomyType
  if (array_key_exists('taxonomyType', $_GET)) {
    $taxonomy = $_GET['taxonomyType'];
  } else {
    $taxonomy = 'category';
  }
  $postType = $_GET['postType'];
  $paged = $pageNo ? $pageNo : 1;
  $perPage = $perPage ? $perPage : 100;
  $offset = ($paged - 1) * $perPage;
  $args = array(
    'number' => $perPage,
    'offset' => $offset,
  );
  $postArgs = array(
    'posts_per_page' => $perPage,
    'post_type' => strval($postType ? $postType : 'post'),
    'paged' => $paged,
  );

  return [$args, $postArgs, $taxonomy];
}

```

----------------------------------------

TITLE: Frontmatter Configuration for Next.js Documentation Page
DESCRIPTION: Markdown frontmatter that defines metadata for a Next.js documentation page about styling applications. It includes title, description, and source path information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/04-styling/index.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: Styling
description: Learn the different ways you can style your Next.js application.
source: app/building-your-application/styling
---
```

----------------------------------------

TITLE: Module Dependency Graph
DESCRIPTION: Mermaid diagram showing the dependency relationships between modules in different phases.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-globals/output.md#2025-04-21_snippet_3

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
```

----------------------------------------

TITLE: Compacted SST File Layout Example
DESCRIPTION: Shows the resulting layout of SST files after compaction, demonstrating how overlapping ranges are reduced.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-persistence/README.md#_snippet_1

LANGUAGE: text
CODE:
```
key hash range: | 0    ...    u64::MAX |
SST 1':           |-------|
SST 2':                   |------|
SST 3':                          |-----|
```

----------------------------------------

TITLE: Importing Regenerator Runtime in ECMAScript 2015
DESCRIPTION: This code snippet shows how to import the regenerator-runtime module using ECMAScript 2015 syntax. It assigns 'regeneratorRuntime' to be used for handling generator and async functions, assuming a module system that supports ES6 imports.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/regenerator-runtime/README.md#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
// ECMAScript 2015
import regeneratorRuntime from "regenerator-runtime";
```

----------------------------------------

TITLE: Initial SST File Layout Example
DESCRIPTION: Illustrates an example layout of SST files and their key hash ranges before compaction, showing overlapping ranges.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-persistence/README.md#_snippet_0

LANGUAGE: text
CODE:
```
key hash range: | 0    ...    u64::MAX |
SST 1:             |----------------|
SST 2:                |----------------|
SST 3:            |-----|
```

----------------------------------------

TITLE: Declaring Constant 'bar' in JavaScript
DESCRIPTION: Declares and initializes a constant variable 'bar' with the string value "bar". It declares and writes to 'bar'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/test-config-1/output.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const bar = "bar";

```

----------------------------------------

TITLE: Frontmatter Configuration for Next.js Deployment Documentation
DESCRIPTION: YAML frontmatter configuration for a documentation page about deploying Next.js applications. Defines the page title, navigation title, description and source path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/01-getting-started/11-deploying.mdx#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: How to deploy your Next.js application
nav_title: Deploying
description: Learn how to deploy your Next.js application.
source: app/getting-started/deploying
---
```

----------------------------------------

TITLE: Assigning Value to Variable x in Javascript
DESCRIPTION: This snippet assigns a new value to the variable 'x'. In this case, 'x' is assigned the numerical value of 1.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
x = 1;
```

----------------------------------------

TITLE: Exporting a Combined Constant from Variables
DESCRIPTION: This snippet exports the constant 'CHIMERA', which is the concatenation of the constants 'cat' and 'dog'. It demonstrates the ability to export computed values.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple/output.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
export const CHIMERA = cat + dog;
```

----------------------------------------

TITLE: Hoisting and Exporting unstable_getStaticPaths - JavaScript
DESCRIPTION: This snippet imports necessary Turbopack parts and a 'hoist' helper. It imports all exports from 'VAR_USERLAND' and uses the 'hoist' helper to get the 'unstable_getStaticPaths' export. Finally, it re-exports this value under the alias 'h'. This handles unstable data-fetching functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_37

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
import { hoist } from './helpers';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 10
};
import * as userland from 'VAR_USERLAND';
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 18
};
const unstable_getStaticPaths = hoist(userland, 'unstable_getStaticPaths');
export { unstable_getStaticPaths as h } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
```

----------------------------------------

TITLE: Next.js SWC Linux x64 Musl Package Name
DESCRIPTION: Package name definition for the Linux x64 Musl binary variant of Next.js SWC compiler.
SOURCE: https://github.com/vercel/next.js/blob/canary/crates/napi/npm/linux-x64-musl/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
@next/swc-linux-x64-musl
```

----------------------------------------

TITLE: Parsing JavaScript with SWC AST Explorer - Rust
DESCRIPTION: This Rust snippet illustrates the generated abstract syntax tree (AST) for a simple JavaScript `console.log('hello')` command. The shown structure is part of the output when running the SWC AST Explorer. It defines the syntactic representation with nodes like `Script`, `Expr`, `CallExpr`, and their respective properties. This tree is used to understand the JavaScript code structure programmatically.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-swc-ast-explorer/README.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
Script(
  Script {
    body: [
      Expr(
        ExprStmt {
          expr: Call(
            CallExpr {
              callee: Expr(
                Member(
                  MemberExpr {
                    obj: Ident(
                      Ident {
                        sym: Atom('console' type=inline),
                        optional: false,
                      },
                    ),
                    prop: Ident(
                      Ident {
                        sym: Atom('log' type=inline),
                        optional: false,
                      },
                    ),
                  },
                ),
              ),
              args: [
                ExprOrSpread {
                  spread: None,
                  expr: Lit(
                    Str(
                      Str {
                        value: Atom('hello' type=inline),
                        raw: Some(
                          "'hello'",
                        ),
                      },
                    ),
                  ),
                },
              ],
              type_args: None,
            },
          ),
        },
      ),
    ],
    shebang: None,
  },
)
```

----------------------------------------

TITLE: Mermaid Diagram Phase 3
DESCRIPTION: This mermaid diagram represents the module dependencies in phase 3. It shows the different items and their dependencies, visualizing the flow of data and execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-and-side-effects/output.md#2025-04-21_snippet_10

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item4;
    Item5;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item10["export a"];
    Item11;
    Item11["export b"];
    Item2 --> Item1;
    Item3 --> Item2;
    Item4 --> Item3;
    Item6 --> Item2;
    Item6 --> Item3;
    Item6 --> Item5;
    Item7 --> Item6;
    Item7 --> Item4;
    Item8 --> Item6;
    Item8 -.-> Item7;
    Item9 --> Item8;
    Item9 --> Item6;
    Item10 --> Item8;
    Item11 --> Item9;
```

----------------------------------------

TITLE: Full Compaction Example: Final State
DESCRIPTION: Depicts the state after a full compaction operation, showing new SST files, copied files, the 'del' file, and the updated current sequence number.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-persistence/README.md#_snippet_3

LANGUAGE: text
CODE:
```
key hash range: | 0    ...    u64::MAX | Family
SST 1:             |-|                   1
SST 10:            |-----|               1
SST 12:                  |-----|         1
SST 11:            |------|              2
SST 14:                        |-------| 1
SST 13:                   |-----|        2
SST 15:                   |-------|      1
SST 16:                    |--------|    2
DEL 17:  (2, 3, 4, 5, 6, 7, 8, 9)
CURRENT: 17
```

----------------------------------------

TITLE: Mermaid Graph for Dependency Visualization
DESCRIPTION: Utilizes Mermaid graph syntax to visualize dependency and flow among declared items. This aids in understanding the relationship between various code elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/shared-regression/output.md#2025-04-21_snippet_7

LANGUAGE: Mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item4;
    Item5;
    Item6;
    Item7;
    Item8;
    Item8["export order"];
    Item9;
    Item9["export a"];
    Item10;
    Item10["export b"];
    Item2 --> Item1;
    Item3 --> Item2;
    Item4 --> Item3;
    Item4 --> Item2;
    Item4 --> Item1;
    Item5 --> Item4;
    Item5 --> Item1;
    Item6 --> Item4;
    Item7 --> Item6;
    Item7 --> Item4;
    Item8 --> Item5;
    Item8 --> Item1;
    Item9 --> Item6;
    Item10 --> Item7;
```

----------------------------------------

TITLE: Show Command Identifier
DESCRIPTION: Simple text file containing the command name 'show', likely used as a placeholder or command identifier in the Next.js project structure
SOURCE: https://github.com/vercel/next.js/blob/canary/test/production/standalone-mode/required-server-files/data.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
show
```

----------------------------------------

TITLE: Generating Diagram Phase 3 Mermaid
DESCRIPTION: This Mermaid graph definition is identical to the one used in Phase 2, visualizing a directed graph (flowchart) showing dependencies and relationships between various items (Item1 through Item30). Items 29 and 30 are explicitly labeled. It includes additional explicit dependencies: Item7 depending on Item6 and Item5, and Item8 depending on Item4 and Item7.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-3/output.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item4;
    Item2;
    Item5;
    Item3;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item11;
    Item12;
    Item13;
    Item14;
    Item15;
    Item16;
    Item17;
    Item18;
    Item19;
    Item20;
    Item21;
    Item22;
    Item23;
    Item24;
    Item25;
    Item26;
    Item27;
    Item28;
    Item29;
    Item29["export structuredError"];
    Item30;
    Item30["export IPC"];
    Item2 --> Item1;
    Item3 --> Item2;
    Item9 --> Item3;
    Item9 -.-> Item6;
    Item9 -.-> Item5;
    Item9 -.-> Item4;
    Item9 -.-> Item7;
    Item10 --> Item8;
    Item10 --> Item9;
    Item10 -.-> Item6;
    Item10 -.-> Item5;
    Item10 -.-> Item4;
    Item10 -.-> Item7;
    Item11 --> Item10;
    Item11 -.-> Item6;
    Item11 -.-> Item5;
    Item11 -.-> Item4;
    Item11 -.-> Item7;
    Item12 --> Item11;
    Item12 -.-> Item6;
    Item12 -.-> Item5;
    Item12 -.-> Item4;
    Item12 -.-> Item7;
    Item13 --> Item12;
    Item13 -.-> Item6;
    Item13 -.-> Item5;
    Item13 -.-> Item4;
    Item13 -.-> Item7;
    Item14 --> Item12;
    Item14 --> Item13;
    Item14 -.-> Item6;
    Item14 -.-> Item5;
    Item14 -.-> Item4;
    Item14 -.-> Item7;
    Item15 --> Item12;
    Item15 --> Item14;
    Item15 -.-> Item6;
    Item15 -.-> Item5;
    Item15 -.-> Item4;
    Item15 -.-> Item7;
    Item16 --> Item12;
    Item16 --> Item15;
    Item16 -.-> Item6;
    Item16 -.-> Item5;
    Item16 -.-> Item4;
    Item16 -.-> Item7;
    Item17 --> Item12;
    Item17 --> Item16;
    Item17 -.-> Item6;
    Item17 -.-> Item5;
    Item17 -.-> Item4;
    Item17 -.-> Item7;
    Item18 --> Item12;
    Item18 --> Item17;
    Item18 -.-> Item6;
    Item18 -.-> Item5;
    Item18 -.-> Item4;
    Item18 -.-> Item7;
    Item19 --> Item12;
    Item19 --> Item18;
    Item19 -.-> Item6;
    Item19 -.-> Item5;
    Item19 -.-> Item4;
    Item19 -.-> Item7;
    Item20 --> Item12;
    Item20 --> Item19;
    Item20 -.-> Item6;
    Item20 -.-> Item5;
    Item20 -.-> Item4;
    Item20 -.-> Item7;
    Item21 --> Item12;
    Item21 --> Item20;
    Item21 -.-> Item6;
    Item21 -.-> Item5;
    Item21 -.-> Item4;
    Item21 -.-> Item7;
    Item22 --> Item12;
    Item22 --> Item21;
    Item22 -.-> Item6;
    Item22 -.-> Item5;
    Item22 -.-> Item4;
    Item22 -.-> Item7;
    Item23 --> Item12;
    Item23 --> Item22;
    Item23 -.-> Item6;
    Item23 -.-> Item5;
    Item23 -.-> Item4;
    Item23 -.-> Item7;
    Item24 --> Item12;
    Item24 --> Item23;
    Item24 -.-> Item6;
    Item24 -.-> Item5;
    Item24 -.-> Item4;
    Item24 -.-> Item7;
    Item25 --> Item12;
    Item25 --> Item24;
    Item25 -.-> Item6;
    Item25 -.-> Item5;
    Item25 -.-> Item4;
    Item25 -.-> Item7;
    Item26 --> Item12;
    Item26 --> Item25;
    Item26 -.-> Item6;
    Item26 -.-> Item5;
    Item26 -.-> Item4;
    Item26 -.-> Item7;
    Item27 --> Item12;
    Item27 --> Item26;
    Item27 -.-> Item6;
    Item27 -.-> Item5;
    Item27 -.-> Item4;
    Item27 -.-> Item7;
    Item28 --> Item12;
    Item28 --> Item27;
    Item28 -.-> Item6;
    Item28 -.-> Item5;
    Item28 -.-> Item4;
    Item28 -.-> Item7;
    Item29 --> Item7;
    Item30 --> Item11;
    Item30 --> Item10;
    Item7 --> Item6;
    Item7 --> Item5;
    Item8 --> Item4;
    Item8 --> Item7;
```

----------------------------------------

TITLE: Assigning x + a + 5 to Variable x in Javascript
DESCRIPTION: This snippet assigns the sum of 'x', 'a', and 5 to the variable 'x'. This combines variable access, addition, and assignment.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
x = x + a + 5;
```

----------------------------------------

TITLE: Development Module Part 2
DESCRIPTION: Import and console log in development environment
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { a as a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
console.log(a);
export { };

```

----------------------------------------

TITLE: Turbopack Merged Module Evaluation Code in JavaScript
DESCRIPTION: This represents the final code intended for module evaluation after Turbopack has merged different parts. In this specific example, it appears identical to Module Part 2, containing all necessary imports, variable declarations, function definitions, and various export statements including internal Turbopack exports and the standard default export.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/node-fetch/output.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import Stream from 'node:stream';
const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;
function fetch() {}
const __TURBOPACK__default__export__ = fetch;
export { __TURBOPACK__default__export__ as default };
export { streamDestructionSupported as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { fetch as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { __TURBOPACK__default__export__ as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Mermaid Diagram for Phase 2
DESCRIPTION: This Mermaid code defines a directed graph (TD - Top Down) visualizing the relationships and dependencies between a series of numbered items (Item1 through Item44). It shows which items depend on or lead to other items, including specific labeled items like 'export gap' and 'export default'.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/mui-sys/output.md#_snippet_24

LANGUAGE: Mermaid
CODE:
```
graph TD
    Item1;
    Item6;
    Item2;
    Item7;
    Item3;
    Item8;
    Item9;
    Item10;
    Item4;
    Item11;
    Item12;
    Item13;
    Item14;
    Item15;
    Item16;
    Item17;
    Item18;
    Item19;
    Item20;
    Item21;
    Item22;
    Item23;
    Item24;
    Item25;
    Item26;
    Item27;
    Item28;
    Item29;
    Item30;
    Item31;
    Item32;
    Item32["export gap"];
    Item33;
    Item33["export columnGap"];
    Item34;
    Item34["export rowGap"];
    Item35;
    Item35["export gridColumn"];
    Item36;
    Item36["export gridRow"];
    Item37;
    Item37["export gridAutoFlow"];
    Item38;
    Item38["export gridAutoColumns"];
    Item39;
    Item39["export gridAutoRows"];
    Item40;
    Item40["export gridTemplateColumns"];
    Item41;
    Item41["export gridTemplateRows"];
    Item42;
    Item42["export gridTemplateAreas"];
    Item43;
    Item43["export gridArea"];
    Item44;
    Item44["export default"];
    Item2 --> Item1;
    Item3 --> Item2;
    Item4 --> Item3;
    Item5 --> Item4;
    Item12 --> Item8;
    Item12 --> Item9;
    Item12 --> Item10;
    Item12 --> Item5;
    Item13 --> Item12;
    Item13 --> Item11;
    Item14 --> Item13;
    Item14 --> Item12;
    Item15 --> Item8;
    Item15 --> Item9;
    Item15 --> Item10;
    Item15 --> Item13;
    Item16 --> Item15;
    Item16 --> Item11;
    Item17 --> Item16;
    Item17 --> Item15;
    Item18 --> Item8;
    Item18 --> Item9;
    Item18 --> Item10;
    Item18 --> Item16;
    Item19 --> Item18;
    Item19 --> Item11;
    Item20 --> Item19;
    Item20 --> Item18;
    Item21 --> Item6;
    Item21 --> Item19;
    Item22 --> Item6;
    Item22 --> Item21;
    Item23 --> Item6;
    Item23 --> Item22;
    Item24 --> Item6;
    Item24 --> Item23;
    Item25 --> Item6;
    Item25 --> Item24;
    Item26 --> Item6;
    Item26 --> Item25;
    Item27 --> Item6;
    Item27 --> Item26;
    Item28 --> Item6;
    Item28 --> Item27;
    Item29 --> Item6;
    Item29 --> Item28;
    Item30 --> Item7;
    Item30 --> Item14;
    Item30 --> Item12;
    Item30 --> Item17;
    Item30 --> Item15;
    Item30 --> Item20;
    Item30 --> Item18;
    Item30 --> Item21;
    Item30 --> Item22;
    Item30 --> Item23;
    Item30 --> Item24;
    Item30 --> Item25;
    Item30 --> Item26;
    Item30 --> Item27;
    Item30 --> Item28;
    Item30 --> Item29;
    Item31 --> Item30;
    Item32 --> Item14;
    Item32 --> Item12;
    Item33 --> Item17;
    Item33 --> Item15;
    Item34 --> Item20;
    Item34 --> Item18;
    Item35 --> Item21;
    Item36 --> Item22;
    Item37 --> Item23;
    Item38 --> Item24;
    Item39 --> Item25;
    Item40 --> Item26;
    Item41 --> Item27;
    Item42 --> Item28;
    Item43 --> Item29;
    Item44 --> Item31;
```

----------------------------------------

TITLE: Dependency Graph Definition using Mermaid
DESCRIPTION: These snippets define dependency graphs using the Mermaid syntax, visualizing the relationships between different items (statements) in the code. The graphs show data flow and dependencies between variables and operations during different phases of the process.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_12

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item4;
    Item5;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item11;
    Item12;
    Item13;
    Item14;
```

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item4;
    Item5;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item11;
    Item12;
    Item13;
    Item14;
    Item2 --> Item1;
    Item3 --> Item1;
    Item3 --> Item2;
    Item4 -.-> Item3;
    Item4 --> Item1;
    Item5 -.-> Item3;
    Item5 --> Item1;
    Item6 --> Item5;
    Item6 --> Item1;
    Item7 --> Item5;
    Item7 --> Item1;
    Item8 --> Item6;
    Item8 --> Item7;
    Item8 --> Item1;
    Item9 --> Item8;
    Item9 --> Item1;
    Item9 -.-> Item6;
    Item9 -.-> Item7;
    Item10 --> Item9;
    Item10 --> Item1;
    Item11 --> Item10;
    Item11 --> Item1;
    Item11 --> Item3;
    Item12 --> Item10;
    Item12 --> Item1;
    Item13 --> Item10;
    Item13 --> Item1;
    Item13 --> Item12;
    Item13 -.-> Item11;
    Item14 -.-> Item13;
    Item14 --> Item1;
```

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item4;
    Item5;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item11;
    Item12;
    Item13;
    Item14;
    Item2 --> Item1;
    Item3 --> Item1;
    Item3 --> Item2;
    Item4 -.-> Item3;
    Item4 --> Item1;
    Item5 -.-> Item3;
    Item5 --> Item1;
    Item6 --> Item5;
    Item6 --> Item1;
    Item7 --> Item5;
    Item7 --> Item1;
    Item8 --> Item6;
    Item8 --> Item7;
    Item8 --> Item1;
    Item9 --> Item8;
    Item9 --> Item1;
    Item9 -.-> Item6;
    Item9 -.-> Item7;
    Item10 --> Item9;
    Item10 --> Item1;
    Item11 --> Item10;
    Item11 --> Item1;
    Item11 --> Item3;
    Item12 --> Item10;
    Item12 --> Item1;
    Item13 --> Item10;
    Item13 --> Item1;
    Item13 --> Item12;
    Item13 -.-> Item11;
    Item14 -.-> Item13;
    Item14 --> Item1;
```

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item4;
    Item5;
    Item6;
    Item7;
    Item8;
    Item9;
    Item10;
    Item11;
    Item12;
    Item13;
    Item14;
    Item2 --> Item1;
    Item3 --> Item1;
    Item3 --> Item2;
    Item4 -.-> Item3;
    Item4 --> Item1;
    Item5 -.-> Item3;
    Item5 --> Item1;
    Item6 --> Item5;
    Item6 --> Item1;
    Item7 --> Item5;
    Item7 --> Item1;
    Item8 --> Item6;
    Item8 --> Item7;
    Item8 --> Item1;
    Item9 --> Item8;
    Item9 --> Item1;
    Item9 -.-> Item6;
    Item9 -.-> Item7;
    Item10 --> Item9;
    Item10 --> Item1;
    Item11 --> Item10;
    Item11 --> Item1;
    Item11 --> Item3;
    Item12 --> Item10;
    Item12 --> Item1;
    Item13 --> Item10;
    Item13 --> Item1;
    Item13 --> Item12;
    Item13 -.-> Item11;
    Item14 -.-> Item13;
    Item14 --> Item1;
```

LANGUAGE: mermaid
CODE:
```
graph TD
    N0["Items: [ItemId(0, VarDeclarator(0))]"
];
    N1["Items: [ItemId(1, Normal), ItemId(2, Normal)]"
];
    N2["Items: [ItemId(3, Normal)]"
];
    N3["Items: [ItemId(4, Normal)]"
];
    N4["Items: [ItemId(7, Normal), ItemId(8, Normal), ItemId(9, Normal), ItemId(10, Normal), ItemId(11, VarDeclarator(0)), ItemId(12, Normal), ItemId(13, Normal)]"
];
    N5["Items: [ItemId(5, VarDeclarator(0))]"
];
    N6["Items: [ItemId(6, VarDeclarator(0))]"
];
    N3 --> N0;
    N1 --> N0;
    N4 --> N0;
    N2 -.-> N1;
    N2 --> N0;
    N3 -.-> N1;
```

----------------------------------------

TITLE: Basic Variable Assignment
DESCRIPTION: Simple assignment of value 1 to variable a
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
a = 1;
```

----------------------------------------

TITLE: Importing and Re-exporting unstable_getStaticProps (Turbopack, JavaScript)
DESCRIPTION: This snippet imports the `unstable_getStaticProps` function, aliased from a specific Turbopack part, and re-exports it. It exposes an unstable version of the static data fetching function from a compiled segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_60

LANGUAGE: javascript
CODE:
```
import { g as unstable_getStaticProps } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -18
};
export { unstable_getStaticProps };
```

----------------------------------------

TITLE: Assigning Sum of y and z to x in Javascript
DESCRIPTION: This snippet assigns the sum of variables 'y' and 'z' to the variable 'x'. It involves an arithmetic operation and assignment.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/effects-1/output.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
x = y + z;
```

----------------------------------------

TITLE: Metadata Test File Paths
DESCRIPTION: File paths for testing metadata completion, type warnings, and client component restrictions.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/development/typescript-plugin/README.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
app/metadata/completion
app/metadata/missing-type-warning
app/metadata/client
```

----------------------------------------

TITLE: Variable Declaration
DESCRIPTION: Declaration of variable a using var keyword
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/assign-before-decl-var/output.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
var a;
```

----------------------------------------

TITLE: License information for undici/lib/web/fetch/body.js
DESCRIPTION: This snippet shows license information for the `body.js` file within the `undici` library. It indicates that the code is licensed under the MIT License and credits Jimmy Wärting as the author.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/@edge-runtime/primitives/fetch.js.LEGAL.txt#2025-04-21_snippet_0

LANGUAGE: None
CODE:
```
"/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */"
```

----------------------------------------

TITLE: HTML Comment with Content Instructions for Documentation
DESCRIPTION: An HTML comment that provides instructions for editing the documentation page content, explaining that the content is generated from the source specified in the frontmatter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/04-styling/index.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}
```

----------------------------------------

TITLE: Simple Text Content
DESCRIPTION: A minimal text string with a simple greeting
SOURCE: https://github.com/vercel/next.js/blob/canary/test/integration/dynamic-routing/public/hello+copy.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
hello world +
```