TITLE: Basic Writable Stream Usage
DESCRIPTION: Simple example showing the basic usage pattern of a Writable stream, demonstrating how to write data and end the stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
const myStream = getWritableStreamSomehow();
myStream.write('some data');
myStream.write('some more data');
myStream.end('done writing data');
```

----------------------------------------

TITLE: Requiring and Using a Local CommonJS Module in Node.js
DESCRIPTION: This snippet (`foo.js`) demonstrates how to use the `require()` function in Node.js to import a local CommonJS module (`./circle.js`). It then calls the `area` function exported by the `circle.js` module with a specific radius and logs the result.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_0

LANGUAGE: js
CODE:
```
const circle = require('./circle.js');
console.log(`The area of a circle of radius 4 is ${circle.area(4)}`);
```

----------------------------------------

TITLE: Installing libnpmdiff using npm
DESCRIPTION: This shell command demonstrates how to install the 'libnpmdiff' package using the Node Package Manager (npm). Running this command in a terminal will download and add the library to the project's dependencies or install it globally depending on the context.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmdiff/README.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ npm install libnpmdiff
```

----------------------------------------

TITLE: Reading Relative File with import.meta.url (Node.js JS)
DESCRIPTION: This code demonstrates using `import.meta.url` to create a `URL` object pointing to a file (`./data.proto`) relative to the current module's location. It then passes this URL object to `readFileSync` to read the file content. This pattern provides a reliable way to handle relative file paths in ES modules, regardless of the current working directory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_9

LANGUAGE: js
CODE:
```
import { readFileSync } from 'node:fs';
const buffer = readFileSync(new URL('./data.proto', import.meta.url));
```

----------------------------------------

TITLE: Basic Console Usage in Node.js
DESCRIPTION: Demonstrates basic usage of the global console object for logging messages and errors to stdout/stderr.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
console.log('hello world');
// Prints: hello world, to stdout
console.log('hello %s', 'world');
// Prints: hello world, to stdout
console.error(new Error('Whoops, something bad happened'));
// Prints error message and stack trace to stderr:
//   Error: Whoops, something bad happened
//     at [eval]:5:15
//     at Script.runInThisContext (node:vm:132:18)
//     at Object.runInThisContext (node:vm:309:38)
//     at node:internal/process/execution:77:19
//     at [eval]-wrapper:6:22
//     at evalScript (node:internal/process/execution:76:60)
//     at node:internal/main/eval_string:23:3

const name = 'Will Robinson';
console.warn(`Danger ${name}! Danger!`);
// Prints: Danger Will Robinson! Danger!, to stderr
```

----------------------------------------

TITLE: Fetch API Implementation with Undici
DESCRIPTION: Examples of using Undici's fetch implementation, including basic usage and custom dispatcher configuration using Agent.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import { fetch } from 'undici'

const res = await fetch('https://example.com')
const json = await res.json()
console.log(json)
```

LANGUAGE: javascript
CODE:
```
import { fetch, Agent } from 'undici'

const res = await fetch('https://example.com', {
  dispatcher: new Agent({
    keepAliveTimeout: 10,
    keepAliveMaxTimeout: 10
  })
})
const json = await res.json()
console.log(json)
```

----------------------------------------

TITLE: Executing a Node.js Script via Command Line (Shell)
DESCRIPTION: This snippet shows the standard command-line pattern for running a Node.js script. `node` invokes the runtime, `[options]` represents optional flags (detailed in the linked Command Line Options document), and `index.js` is the entry point script file to be executed. Requires Node.js installation.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/document_with_links.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
`node \[options\] index.js`
```

----------------------------------------

TITLE: Running a Node.js Application
DESCRIPTION: Command to execute a Node.js script using the node command, specifically for running the hello-world.js application.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/synopsis.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
node hello-world.js
```

----------------------------------------

TITLE: Getting Process Working Directory with Node.js process.cwd() - JavaScript
DESCRIPTION: These snippets demonstrate how to retrieve and print the current working directory of a Node.js process using the process.cwd() API. They require no external dependencies besides the Node.js built-in 'process' module. The output will be a string indicating the full path of the current working directory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_30

LANGUAGE: mjs
CODE:
```
import { cwd } from 'node:process';\n\nconsole.log(`Current directory: ${cwd()}`);
```

LANGUAGE: cjs
CODE:
```
const { cwd } = require('node:process');\n\nconsole.log(`Current directory: ${cwd()}`);
```

----------------------------------------

TITLE: Installing Acorn Walk via NPM
DESCRIPTION: Command to install the acorn-walk package using npm package manager.
SOURCE: https://github.com/nodejs/node/blob/main/deps/acorn/acorn-walk/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
npm install acorn-walk
```

----------------------------------------

TITLE: Using process.nextTick() to Create Consistent Asynchronous APIs in Node.js
DESCRIPTION: Demonstrates how to use process.nextTick() to ensure a function always behaves asynchronously, which avoids potentially hazardous API behavior where execution order may be unpredictable.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_59

LANGUAGE: JavaScript (Warning Example)
CODE:
```
// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!
function maybeSync(arg, cb) {
  if (arg) {
    cb();
    return;
  }

  fs.stat('file', cb);
}
```

LANGUAGE: JavaScript (Usage of Unsafe API)
CODE:
```
const maybeTrue = Math.random() > 0.5;

maybeSync(maybeTrue, () => {
  foo();
});

bar();
```

LANGUAGE: JavaScript (ESM)
CODE:
```
import { nextTick } from 'node:process';

function definitelyAsync(arg, cb) {
  if (arg) {
    nextTick(cb);
    return;
  }

  fs.stat('file', cb);
}
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { nextTick } = require('node:process');

function definitelyAsync(arg, cb) {
  if (arg) {
    nextTick(cb);
    return;
  }

  fs.stat('file', cb);
}
```

----------------------------------------

TITLE: Installing qrcode-terminal Locally in a Node.js Project (Shell)
DESCRIPTION: Shows the shell command for installing qrcode-terminal as a local project dependency using npm. Local installation is required for requiring the library in Node.js scripts. Execute within a Node.js project directory.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/qrcode-terminal/README.md#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
$ npm install qrcode-terminal
```

----------------------------------------

TITLE: Importing the Node.js os Module (ESM)
DESCRIPTION: Demonstrates how to import the `os` module using the ES Module syntax (`import`). This is the standard way to include modules in modern JavaScript projects configured for ES Modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import os from 'node:os';
```

----------------------------------------

TITLE: Reading and Mutating URLSearchParams - WHATWG URL API - JavaScript
DESCRIPTION: Demonstrates usage of the searchParams property to access the URLSearchParams object for managing individual query parameters. The snippet shows that changing the order of parameters or their encoding via URLSearchParams.sort() updates the search property and encodes certain characters (e.g., tilde '~'). No dependencies beyond a standard URL object; input is the original URL, mutation is performed with searchParams.sort, and the outcome is shown via the updated search property.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_27

LANGUAGE: JavaScript
CODE:
```
const myURL = new URL('https://example.org/abc?foo=~bar');

console.log(myURL.search);  // prints ?foo=~bar

// Modify the URL via searchParams...
myURL.searchParams.sort();

console.log(myURL.search);  // prints ?foo=%7Ebar

```

----------------------------------------

TITLE: Creating a Temporary Directory with mkdtemp() in Node.js
DESCRIPTION: Creates a unique temporary directory using the system's temporary directory as the base. This example shows how to properly use fs.mkdtemp() to generate a temporary directory with a random suffix.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_63

LANGUAGE: javascript
CODE:
```
import { mkdtemp } from 'node:fs';
import { join } from 'node:path';
import { tmpdir } from 'node:os';

mkdtemp(join(tmpdir(), 'foo-'), (err, directory) => {
  if (err) throw err;
  console.log(directory);
  // Prints: /tmp/foo-itXde2 or C:\Users\...\AppData\Local\Temp\foo-itXde2
});
```

----------------------------------------

TITLE: One-time Event Listener with once()
DESCRIPTION: Demonstrates registering a one-time event listener that automatically removes itself after execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_26

LANGUAGE: javascript
CODE:
```
server.once('connection', (stream) => {
  console.log('Ah, we have our first user!');
});
```

----------------------------------------

TITLE: Deleting Files/Links with fsPromises.unlink in Node.js
DESCRIPTION: Asynchronously removes a file or symbolic link at the specified `path`. If `path` is a symbolic link, only the link is removed. If it's a file path, the file is deleted. See POSIX unlink(2). Returns a Promise fulfilling with `undefined` on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_39

LANGUAGE: javascript
CODE:
```
fsPromises.unlink(path)
```

----------------------------------------

TITLE: Importing URL Module using ECMAScript Modules (ESM)
DESCRIPTION: This snippet demonstrates how to import the Node.js URL module using ECMAScript Modules (ESM) syntax with the 'node:' protocol prefix. This is the recommended approach for importing core modules in modern Node.js applications using ESM.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/document_with_esm_and_cjs_code_snippet.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import 'node:url';
```

----------------------------------------

TITLE: Specifying License in package.json
DESCRIPTION: Shows various ways to specify the license for a package, including using SPDX license identifiers for common licenses and custom license specifications.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
  "license" : "BSD-3-Clause"
}
```

LANGUAGE: json
CODE:
```
{
  "license" : "(ISC OR GPL-3.0)"
}
```

LANGUAGE: json
CODE:
```
{
  "license" : "SEE LICENSE IN <filename>"
}
```

----------------------------------------

TITLE: Exporting Function from ES Module (Node.js)
DESCRIPTION: Defines an ES module `addTwo.mjs` that exports a single function `addTwo`. This function takes a number and returns that number plus 2. It demonstrates the basic `export` syntax for named exports in an ES module file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// addTwo.mjs
function addTwo(num) {
  return num + 2;
}

export { addTwo };
```

----------------------------------------

TITLE: Exporting Functions via `exports` Object in Node.js CommonJS
DESCRIPTION: This snippet (`circle.js`) defines a CommonJS module that exports utility functions for circles. It exports `area` and `circumference` functions by attaching them as properties to the special `exports` object. The internal constant `PI` remains private to the module due to Node.js's module wrapper.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_1

LANGUAGE: js
CODE:
```
const { PI } = Math;

exports.area = (r) => PI * r ** 2;

exports.circumference = (r) => 2 * PI * r;
```

----------------------------------------

TITLE: Using randomInt for Cryptographic Random Numbers
DESCRIPTION: Shows how to generate cryptographically secure random integers within a specified range, both synchronously and asynchronously. Includes examples with and without minimum range values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_91

LANGUAGE: javascript
CODE:
```
// Asynchronous
const {
  randomInt,
} = await import('node:crypto');

randomInt(3, (err, n) => {
  if (err) throw err;
  console.log(`Random number chosen from (0, 1, 2): ${n}`);
});
```

LANGUAGE: javascript
CODE:
```
// Synchronous
const {
  randomInt,
} = await import('node:crypto');

const n = randomInt(3);
console.log(`Random number chosen from (0, 1, 2): ${n}`);
```

----------------------------------------

TITLE: Subpath Exports for Selective Module Exposure (JSON)
DESCRIPTION: Defines custom subpath-to-file export mappings in package.json using the exports field, which enables selective exposure of internal modules to consumers. The root entry is mapped via "." and additional submodules are mapped to their respective files, blocking access to all other files not specified. Requires Node.js v12.7.0 or later and results in import errors for undefined subpaths.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_8

LANGUAGE: json
CODE:
```
{
  "exports": {
    ".": "./index.js",
    "./submodule.js": "./src/submodule.js"
  }
}
```

----------------------------------------

TITLE: Defining test script in package.json
DESCRIPTION: Shows how to specify a test script in the package.json file, which will be executed by npm test.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-test.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test": "node test.js"
  }
}
```

----------------------------------------

TITLE: Parsing .env File Content into an Object Using parseEnv - JavaScript (CommonJS)
DESCRIPTION: This example parses the content of a .env file using the parseEnv function from the Node.js util module in CommonJS syntax. It consumes a raw string of .env file content where keys may repeat, in which case the last occurrence wins. The function returns an object mapping env variable names to values. Requires Node.js v20.12.0+ or v21.7.0+ for parseEnv. Input is a .env-formatted string; output is an object representing the parsed environment.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_40

LANGUAGE: JavaScript
CODE:
```
const { parseEnv } = require('node:util');

parseEnv('HELLO=world\nHELLO=oh my\n');
// Returns: { HELLO: 'oh my' }
```

----------------------------------------

TITLE: Reading Files Safely in Node.js (Not Recommended vs. Recommended)
DESCRIPTION: Compares the not recommended approach using fs.exists() before reading a file with the recommended approach of directly using fs.open(). The recommended method handles potential errors more effectively and avoids race conditions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_57

LANGUAGE: JavaScript
CODE:
```
import { open, close, exists } from 'node:fs';

exists('myfile', (e) => {
  if (e) {
    open('myfile', 'r', (err, fd) => {
      if (err) throw err;

      try {
        readMyData(fd);
      } finally {
        close(fd, (err) => {
          if (err) throw err;
        });
      }
    });
  } else {
    console.error('myfile does not exist');
  }
});
```

LANGUAGE: JavaScript
CODE:
```
import { open, close } from 'node:fs';

open('myfile', 'r', (err, fd) => {
  if (err) {
    if (err.code === 'ENOENT') {
      console.error('myfile does not exist');
      return;
    }

    throw err;
  }

  try {
    readMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
```

----------------------------------------

TITLE: Requesting an HTTPS Resource Using Node.js HTTPS.request ESM API - JavaScript
DESCRIPTION: Demonstrates how to perform an HTTPS GET request to a server using the ESM-style import of Node.js HTTPS module. Utilizes the request() function and streams the response data to stdout. Handles errors via an event listener. Requires Node.js v13+ for ESM support, imports 'node:https' and 'node:process', and expects an 'options' object containing 'hostname', 'port', 'path', and 'method'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { request } from 'node:https';
import process from 'node:process';

const options = {
  hostname: 'encrypted.google.com',
  port: 443,
  path: '/',
  method: 'GET',
};

const req = request(options, (res) => {
  console.log('statusCode:', res.statusCode);
  console.log('headers:', res.headers);

  res.on('data', (d) => {
    process.stdout.write(d);
  });
});

req.on('error', (e) => {
  console.error(e);
});
req.end();
```

----------------------------------------

TITLE: Implementing Inter-thread Communication with MessagePort in Node.js Worker Threads (ES Modules)
DESCRIPTION: This snippet demonstrates how to create a custom messaging channel between the main thread and a worker thread using MessageChannel and MessagePort. The main thread creates a worker, sets up a subChannel, and passes one end of the channel to the worker. The worker receives the port and uses it to send a message back to the main thread.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_15

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert';
import {
  Worker, MessageChannel, MessagePort, isMainThread, parentPort,
} from 'node:worker_threads';
if (isMainThread) {
  const worker = new Worker(new URL(import.meta.url));
  const subChannel = new MessageChannel();
  worker.postMessage({ hereIsYourPort: subChannel.port1 }, [subChannel.port1]);
  subChannel.port2.on('message', (value) => {
    console.log('received:', value);
  });
} else {
  parentPort.once('message', (value) => {
    assert(value.hereIsYourPort instanceof MessagePort);
    value.hereIsYourPort.postMessage('the worker is sending this');
    value.hereIsYourPort.close();
  });
}
```

----------------------------------------

TITLE: Creating an HMAC Digest as a Stream - Node.js Crypto (JavaScript CJS)
DESCRIPTION: This example creates an HMAC stream in CommonJS using a secret and outputs its hex digest after streaming in the data via hmac.write(). The digest is read after the 'readable' event fires. Suitable for authenticating streamed data. Requires Node.js and 'node:crypto' module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_35

LANGUAGE: JavaScript
CODE:
```
const {
  createHmac,
} = require('node:crypto');

const hmac = createHmac('sha256', 'a secret');

hmac.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = hmac.read();
  if (data) {
    console.log(data.toString('hex'));
    // Prints:
    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e
  }
});

hmac.write('some data to hash');
hmac.end();
```

----------------------------------------

TITLE: Reading File Contents Using fsPromises.readFile
DESCRIPTION: Examples of reading file contents using Node.js fs promises API, including abort signal usage and both ESM and CommonJS implementations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
import { readFile } from 'node:fs/promises';
try {
  const filePath = new URL('./package.json', import.meta.url);
  const contents = await readFile(filePath, { encoding: 'utf8' });
  console.log(contents);
} catch (err) {
  console.error(err.message);
}
```

LANGUAGE: javascript
CODE:
```
const { readFile } = require('node:fs/promises');
const { resolve } = require('node:path');
async function logFile() {
  try {
    const filePath = resolve('./package.json');
    const contents = await readFile(filePath, { encoding: 'utf8' });
    console.log(contents);
  } catch (err) {
    console.error(err.message);
  }
}
logFile();
```

LANGUAGE: javascript
CODE:
```
import { readFile } from 'node:fs/promises';

try {
  const controller = new AbortController();
  const { signal } = controller;
  const promise = readFile(fileName, { signal });

  // Abort the request before the promise settles.
  controller.abort();

  await promise;
} catch (err) {
  // When a request is aborted - err is an AbortError
  console.error(err);
}
```

----------------------------------------

TITLE: Using console.log for Standard Output in Node.js (JavaScript)
DESCRIPTION: Illustrates printing messages to `stdout` using `console.log`. Explains that it handles multiple arguments similarly to `console.error`, using the first as the primary message and others for substitution via `util.format()` if format specifiers (like `%d`) are present. Otherwise, arguments are inspected with `util.inspect()` and joined. Output includes a newline.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_5

LANGUAGE: js
CODE:
```
const count = 5;
console.log('count: %d', count);
// Prints: count: 5, to stdout
console.log('count:', count);
// Prints: count: 5, to stdout
```

----------------------------------------

TITLE: Allocating Zero-Filled Buffer using Buffer.alloc (MJS)
DESCRIPTION: Demonstrates allocating a new Node.js Buffer of a specified size using `Buffer.alloc` without providing a fill value, resulting in a zero-filled buffer. Requires importing `Buffer` from `node:buffer` using ESM syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.alloc(5);

console.log(buf);
// Prints: <Buffer 00 00 00 00 00>
```

----------------------------------------

TITLE: Installing mkdirp Locally using npm
DESCRIPTION: Provides the npm command to install the `mkdirp` module as a dependency for the current Node.js project. This makes the library available for `require()` or `import` statements within the project.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cacache/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm install mkdirp
```

----------------------------------------

TITLE: Properly Consuming Response Body in Fetch API
DESCRIPTION: This snippet shows the correct way to consume the response body when using the fetch API, emphasizing the importance of iterating through the body stream to prevent resource leaks.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
// Do
const { body, headers } = await fetch(url);
for await (const chunk of body) {
  // force consumption of body
}

// Do not
const { headers } = await fetch(url);
```

----------------------------------------

TITLE: Creating a Basic HTTP Server in Node.js
DESCRIPTION: JavaScript code for a simple Node.js HTTP server that listens on port 3000 and responds with 'Hello, World!' to all requests. The server uses the built-in http module to create a server instance and configure response headers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/synopsis.md#2025-04-23_snippet_3

LANGUAGE: js
CODE:
```
const http = require('node:http');

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello, World!\n');
});

server.listen(port, hostname, () => {
  console.log(`Server running at http://${hostname}:${port}/`);
});
```

----------------------------------------

TITLE: Defining Test Script in package.json
DESCRIPTION: Demonstrates how to define a test script in package.json using a locally installed dependency (tap).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-run-script.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
"scripts": {"test": "tap test/*.js"}
```

----------------------------------------

TITLE: Parsing URL from HTTP Request in Node.js
DESCRIPTION: Shows how to parse a URL from an HTTP request using the URL constructor with proper host handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_48

LANGUAGE: javascript
CODE:
```
new URL(`http://${process.env.HOST ?? 'localhost'}${request.url}`);
```

----------------------------------------

TITLE: Creating an HTTP Server with Node.js
DESCRIPTION: Demonstrates how to create a basic HTTP server using http.createServer() that responds with JSON data. The server listens on port 8000 and handles incoming requests.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_56

LANGUAGE: JavaScript
CODE:
```
import http from 'node:http';

// Create a local server to receive data from
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
```

LANGUAGE: JavaScript
CODE:
```
const http = require('node:http');

// Create a local server to receive data from
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
```

----------------------------------------

TITLE: Handling Synchronous Errors with try-catch in JavaScript
DESCRIPTION: Demonstrates the use of try-catch to handle synchronous errors in JavaScript. This snippet shows how to catch a ReferenceError when attempting to use an undefined variable.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
try {
  const m = 1;
  const n = m + z;
} catch (err) {
  // Handle the error here.
}
```

----------------------------------------

TITLE: Setting Up Development Environment with npm install (Shell)
DESCRIPTION: Illustrates the command for installing all dependencies specified in package.json, preparing the environment for contributing or running tests. Run at the project root.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/qrcode-terminal/README.md#2025-04-23_snippet_9

LANGUAGE: shell
CODE:
```
npm install
```

----------------------------------------

TITLE: Requiring ES Modules from CommonJS (Node.js - JavaScript)
DESCRIPTION: Demonstrates loading ES modules from a CommonJS context using require(). It requires both distance.mjs and point.mjs, logging their imported module namespace objects. Output comments show the structure for both named and default exports, as seen when using require(). Dependencies are the ES modules present in the local directory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_6

LANGUAGE: cjs
CODE:
```
const distance = require('./distance.mjs');\nconsole.log(distance);\n// [Module: null prototype] {\n//   distance: [Function: distance]\n// }\n\nconst point = require('./point.mjs');\nconsole.log(point);\n// [Module: null prototype] {\n//   default: [class Point],\n//   __esModule: true,\n// }
```

----------------------------------------

TITLE: Using AbortController with dgram Socket in Node.js
DESCRIPTION: Example demonstrating how to create a UDP socket with an AbortSignal and use it to gracefully close the socket. The code shows socket creation, message handling, and how to abort/close the server using AbortController.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
const controller = new AbortController();
const { signal } = controller;
const server = dgram.createSocket({ type: 'udp4', signal });
server.on('message', (msg, rinfo) => {
  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);
});
// Later, when you want to close the server.
controller.abort();
```

----------------------------------------

TITLE: Creating Directory Using fsPromises.mkdir
DESCRIPTION: Examples of creating directories asynchronously using Node.js fs promises API in both ESM and CommonJS formats. The code demonstrates recursive directory creation with error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
import { mkdir } from 'node:fs/promises';

try {
  const projectFolder = new URL('./test/project/', import.meta.url);
  const createDir = await mkdir(projectFolder, { recursive: true });

  console.log(`created ${createDir}`);
} catch (err) {
  console.error(err.message);
}
```

LANGUAGE: javascript
CODE:
```
const { mkdir } = require('node:fs/promises');
const { join } = require('node:path');

async function makeDirectory() {
  const projectFolder = join(__dirname, 'test', 'project');
  const dirCreation = await mkdir(projectFolder, { recursive: true });

  console.log(dirCreation);
  return dirCreation;
}

makeDirectory().catch(console.error);
```

----------------------------------------

TITLE: Using fetch() in Node.js
DESCRIPTION: Demonstrates how to use the fetch() function to make an HTTP request and handle the response. It includes error handling and JSON parsing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#2025-04-23_snippet_3

LANGUAGE: mjs
CODE:
```
const res = await fetch('https://nodejs.org/api/documentation.json');
if (res.ok) {
  const data = await res.json();
  console.log(data);
}
```

----------------------------------------

TITLE: Basic NPM Package Installation Examples
DESCRIPTION: Various examples of installing packages with different flags and configurations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm install sax
npm install githubname/reponame
npm install @myorg/privatepackage
npm install node-tap --save-dev
npm install dtrace-provider --save-optional
npm install readable-stream --save-exact
npm install ansi-regex --save-bundle
```

----------------------------------------

TITLE: Requiring the process Object in Node.js (CommonJS) - JavaScript
DESCRIPTION: Shows how to require the built-in 'process' module using CommonJS syntax. No external dependencies are required. The resulting 'process' object provides runtime and environment information, and is available by default in all Node.js modules. This is typically used in .js files with CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const process = require('node:process');
```

----------------------------------------

TITLE: Joining Path Segments using path.join
DESCRIPTION: Demonstrates `path.join()` combining multiple path segments using the platform-specific separator and normalizing the result (handling '..' segments).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_30

LANGUAGE: js
CODE:
```
path.join('/foo', 'bar', 'baz/asdf', 'quux', '..');
// Returns: '/foo/bar/baz/asdf'
```

----------------------------------------

TITLE: Basic npm ci Workflow Example in Bash
DESCRIPTION: A complete workflow showing how to ensure you have a package-lock.json file and then run npm ci.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-ci.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ cd ./my/npm/project
$ npm install
added 154 packages in 10s
$ ls | grep package-lock
```

----------------------------------------

TITLE: Querying Operating System Type with Node.js JavaScript
DESCRIPTION: Returns a string with the operating system name as provided by the system's uname(3) call (e.g., 'Linux', 'Darwin', 'Windows_NT') via os.type(). No parameters are needed. Uses only the Node.js os module and returns a descriptive string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
os.type()
```

----------------------------------------

TITLE: Deferring Execution with queueMicrotask in Node.js
DESCRIPTION: This code demonstrates the fundamental usage of `queueMicrotask()` in Node.js to schedule a callback function to be executed asynchronously after the current synchronous code block finishes, but before the next event loop tick. The output shows that 'start' and 'scheduled' log before the 'microtask callback'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_62

LANGUAGE: js
CODE:
```
console.log('start');
queueMicrotask(() => {
  console.log('microtask callback');
});
console.log('scheduled');
// Output:
// start
// scheduled
// microtask callback
```

----------------------------------------

TITLE: Correct Type Import Syntax for Node.js Type Stripping
DESCRIPTION: Example of TypeScript import statements that use the 'type' keyword correctly, which is supported by the built-in type stripping feature.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/typescript.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import type { Type1, Type2 } from './module.ts';
import { fn, type FnParams } from './fn.ts';
```

----------------------------------------

TITLE: Allocating Buffer with String Fill using Buffer.alloc (CJS)
DESCRIPTION: Demonstrates allocating a new Node.js Buffer of a specified size and initializing it by filling it with a given string. The string is interpreted using the default 'utf8' encoding. Requires requiring `Buffer` from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(5, 'a');

console.log(buf);
// Prints: <Buffer 61 61 61 61 61>
```

----------------------------------------

TITLE: Creating Secure HTTP/2 Server (ESM)
DESCRIPTION: This snippet demonstrates how to create a secure HTTP/2 server using `http2.createSecureServer` in Node.js with ES Module syntax. It configures the server with TLS certificates, listens for incoming streams, and sends a basic 'Hello World' HTML response. Required dependencies: `node:http2`, `node:fs`. Input: TLS certificate files. Output: An active secure HTTP/2 server listening on port 8443.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_43

LANGUAGE: nodejs
CODE:
```
import { createSecureServer } from 'node:http2';
import { readFileSync } from 'node:fs';

const options = {
  key: readFileSync('server-key.pem'),
  cert: readFileSync('server-cert.pem'),
};

// Create a secure HTTP/2 server
const server = createSecureServer(options);

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.end('<h1>Hello World</h1>');
});

server.listen(8443);
```

----------------------------------------

TITLE: Server Closure with Connection Management
DESCRIPTION: Shows how to close a server while properly managing all existing connections using closeAllConnections().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
const http = require('node:http');

const server = http.createServer({ keepAliveTimeout: 60000 }, (req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
// Close the server after 10 seconds
setTimeout(() => {
  server.close(() => {
    console.log('server on port 8000 closed successfully');
  });
  // Closes all connections, ensuring the server closes successfully
  server.closeAllConnections();
}, 10000);
```

----------------------------------------

TITLE: Defining Pre and Post Scripts in package.json
DESCRIPTION: Example of how to define pre and post scripts for a custom 'compress' script in package.json. This demonstrates the execution order of pre, main, and post scripts.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scripts.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "precompress": "{{ executes BEFORE the `compress` script }}",
    "compress": "{{ run command to compress files }}",
    "postcompress": "{{ executes AFTER `compress` script }}"
  }
}
```

----------------------------------------

TITLE: Configuring Homepage URL in package.json
DESCRIPTION: Shows how to set the homepage URL for a project in the package.json file. This field helps users find the project's website or documentation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
"homepage": "https://github.com/npm/example#readme"
```

----------------------------------------

TITLE: Conditional Return using If Statement - JavaScript
DESCRIPTION: This snippet uses an if-else structure to return `true` or `false` based on the evaluation of a boolean condition. This pattern explicitly demonstrates how the result of a boolean expression influences control flow.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-expected.txt#_snippet_13

LANGUAGE: javascript
CODE:
```
if ((0===One) && 1) return true; return false;
```

----------------------------------------

TITLE: Defining Class with Private Members in JavaScript
DESCRIPTION: This snippet defines a class 'Klass' with private fields, getters, setters, and methods. It demonstrates the syntax for declaring different types of private class members in JavaScript.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-private-class-member-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
class Klass {
   #field = "string";
   get #getterOnly() { return "getterOnly"; }
   set #setterOnly(val) { this.#field = "setterOnlyCalled"; }
   get #accessor() { return this.#field }
   set #accessor(val) { this.#field = val; }
   #method() { return "method"; }
}
const obj = new Klass();
debugger;
```

----------------------------------------

TITLE: Spawn Child Process (Node.js)
DESCRIPTION: Demonstrates spawning a new Node.js process using `child_process.spawn`. The child process attempts to write to a file (`/new-file`). This operation is restricted by the Permission Model unless the `--allow-child-process` flag is used.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const childProcess = require('node:child_process');
// Attempt to bypass the permission
childProcess.spawn('node', ['-e', 'require("fs").writeFileSync("/new-file", "example")']);
```

----------------------------------------

TITLE: Comparing Execution Order of Microtasks and NextTick in Node.js ESM
DESCRIPTION: This snippet demonstrates the execution order of promise handlers (`.then`), `queueMicrotask` callbacks, and `process.nextTick` callbacks within an ES Module context in Node.js. It shows that promise handlers and `queueMicrotask` callbacks, both using the microtask queue, execute before `process.nextTick` callbacks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_60

LANGUAGE: mjs
CODE:
```
import { nextTick } from 'node:process';

Promise.resolve().then(() => console.log('resolve'));
queueMicrotask(() => console.log('microtask'));
nextTick(() => console.log('nextTick'));
// Output:
// resolve
// microtask
// nextTick
```

----------------------------------------

TITLE: Using setInterval Promise Async Iterator (Node.js Timers - MJS/CJS)
DESCRIPTION: Illustrates how `timersPromises.setInterval` returns an async iterator. The loop iterates every `delay` milliseconds, yielding the specified `value`. The loop continues until explicitly broken or the iterator is cancelled (e.g., via AbortSignal).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_5

LANGUAGE: mjs
CODE:
```
import {
  setInterval,
} from 'node:timers/promises';

const interval = 100;
for await (const startTime of setInterval(interval, Date.now())) {
  const now = Date.now();
  console.log(now);
  if ((now - startTime) > 1000)
    break;
}
console.log(Date.now());
```

LANGUAGE: cjs
CODE:
```
const {
  setInterval,
} = require('node:timers/promises');
const interval = 100;

(async function() {
  for await (const startTime of setInterval(interval, Date.now())) {
    const now = Date.now();
    console.log(now);
    if ((now - startTime) > 1000)
      break;
  }
  console.log(Date.now());
})();
```

----------------------------------------

TITLE: Setting HTTP Headers with setHeader
DESCRIPTION: Sets a single header value or an array of values for the same header name. This example shows how to set Content-Type and Cookie headers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
request.setHeader('Content-Type', 'application/json');
```

----------------------------------------

TITLE: Establishing TLS Client Connection (MJS) in Node.js
DESCRIPTION: This MJS code snippet demonstrates how to establish a secure TLS client connection to a server listening on port 8000 using `tls.connect`. It imports necessary modules (`connect` from `node:tls`, `readFileSync` from `node:fs`, `stdin` from `node:process`), defines connection options (including optional client certificate authentication and server certificate validation), establishes the connection, logs connection status, pipes standard input to the socket, and handles incoming data and connection termination. Assumes a corresponding TLS echo server is running.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
```mjs
// Assumes an echo server that is listening on port 8000.
import { connect } from 'node:tls';
import { readFileSync } from 'node:fs';
import { stdin } from 'node:process';

const options = {
  // Necessary only if the server requires client certificate authentication.
  key: readFileSync('client-key.pem'),
  cert: readFileSync('client-cert.pem'),

  // Necessary only if the server uses a self-signed certificate.
  ca: [ readFileSync('server-cert.pem') ],

  // Necessary only if the server's cert isn't for "localhost".
  checkServerIdentity: () => { return null; },
};

const socket = connect(8000, options, () => {
  console.log('client connected',
              socket.authorized ? 'authorized' : 'unauthorized');
  stdin.pipe(socket);
  stdin.resume();
});
socket.setEncoding('utf8');
socket.on('data', (data) => {
  console.log(data);
});
socket.on('end', () => {
  console.log('server ends connection');
});
```
```

----------------------------------------

TITLE: Retrieving Response Header Value - Node.js HTTP/2
DESCRIPTION: Shows how to use the `response.getHeader()` method to fetch the value of a response header that has been previously set. The method is case-insensitive, allowing retrieval using names like 'content-type'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_61

LANGUAGE: js
CODE:
```
const contentType = response.getHeader('content-type');
```

----------------------------------------

TITLE: Handling HTTP/2 Stream Event on Server - MJS
DESCRIPTION: This ES Module snippet shows how to create an unencrypted HTTP/2 server and listen for the 'stream' event on the server instance. It demonstrates sending a simple HTML response and handling stream errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_1

LANGUAGE: mjs
CODE:
```
import { createServer } from 'node:http2';

// Create an unencrypted HTTP/2 server
const server = createServer();

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.on('error', (error) => console.error(error));
  stream.end('<h1>Hello World</h1>');
});

server.listen(8000);
```

----------------------------------------

TITLE: Using npm ci Command in Bash
DESCRIPTION: The basic syntax for using npm ci command, showing the command and its aliases.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-ci.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm ci

aliases: clean-install, ic, install-clean, isntall-clean
```

----------------------------------------

TITLE: Requiring a Scoped Package in JavaScript
DESCRIPTION: Demonstrates how to require a scoped package in JavaScript code, including the scope name in the require statement.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scope.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
require('@myorg/mypackage')
```

----------------------------------------

TITLE: Mocking Object Methods in Node.js Test Runner
DESCRIPTION: Demonstrates how to use the new mocking functionality in the Node.js test runner to spy on an object method and assert its behavior.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V19.md#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
test('spies on an object method', (t) => {
  const number = {
    value: 5,
    add(a) {
      return this.value + a;
    },
  };
  t.mock.method(number, 'add');

  assert.strictEqual(number.add(3), 8);
  assert.strictEqual(number.add.mock.calls.length, 1);
});
```

----------------------------------------

TITLE: Initializing and Using EventEmitter in Node.js (ESM)
DESCRIPTION: This snippet demonstrates how to import, extend, and use the EventEmitter class in Node.js using ECMAScript modules (ESM). It shows creating a custom emitter, attaching a listener, and emitting an event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter } from 'node:events';

class MyEmitter extends EventEmitter {}

const myEmitter = new MyEmitter();
myEmitter.on('event', () => {
  console.log('an event occurred!');
});
myEmitter.emit('event');
```

----------------------------------------

TITLE: Reading Directory Contents Synchronously in Node.js
DESCRIPTION: Uses fs.readdirSync to read the contents of a directory. Returns an array of file names or fs.Dirent objects. Supports options for encoding and recursive reading.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_88

LANGUAGE: JavaScript
CODE:
```
fs.readdirSync(path[, options])
```

----------------------------------------

TITLE: Example Output of os.networkInterfaces() in JavaScript
DESCRIPTION: Shows an example of the object structure returned by `os.networkInterfaces()`. The object keys are network interface names (e.g., 'lo', 'eth0'), and each value is an array of objects describing assigned network addresses for that interface. Each address object includes properties like `address`, `netmask`, `family` ('IPv4' or 'IPv6'), `mac`, `internal` status, `scopeid` (for IPv6), and `cidr` notation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_3

LANGUAGE: js
CODE:
```
{
  lo: [
    {
      address: '127.0.0.1',
      netmask: '255.0.0.0',
      family: 'IPv4',
      mac: '00:00:00:00:00:00',
      internal: true,
      cidr: '127.0.0.1/8'
    },
    {
      address: '::1',
      netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',
      family: 'IPv6',
      mac: '00:00:00:00:00:00',
      scopeid: 0,
      internal: true,
      cidr: '::1/128'
    }
  ],
  eth0: [
    {
      address: '192.168.1.108',
      netmask: '255.255.255.0',
      family: 'IPv4',
      mac: '01:02:03:0a:0b:0c',
      internal: false,
      cidr: '192.168.1.108/24'
    },
    {
      address: 'fe80::a00:27ff:fe4e:66a1',
      netmask: 'ffff:ffff:ffff:ffff::',
      family: 'IPv6',
      mac: '01:02:03:0a:0b:0c',
      scopeid: 1,
      internal: false,
      cidr: 'fe80::a00:27ff:fe4e:66a1/64'
    }
  ]
}
```

----------------------------------------

TITLE: Exporting Entire Folders and Patterns using Export Patterns (JSON)
DESCRIPTION: Demonstrates how to use export patterns in the exports field of package.json to expose whole directories and their files with or without file extensions. This increases flexibility, reduces entry duplication, and works with Node.js v12.7.0+. All exports are explicitly mapped, ensuring both explicit and pattern-based access, but care should be taken to avoid accidental overexposure of internal modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "name": "my-package",
  "exports": {
    ".": "./lib/index.js",
    "./lib": "./lib/index.js",
    "./lib/*": "./lib/*.js",
    "./lib/*.js": "./lib/*.js",
    "./feature": "./feature/index.js",
    "./feature/*": "./feature/*.js",
    "./feature/*.js": "./feature/*.js",
    "./package.json": "./package.json"
  }
}
```

----------------------------------------

TITLE: Generating Digest using Web Crypto API in JavaScript
DESCRIPTION: This function demonstrates how to generate a digest (hash) of data using the Web Crypto API. It supports various hash algorithms, with SHA-512 as the default.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function digest(data, algorithm = 'SHA-512') {
  const ec = new TextEncoder();
  const digest = await subtle.digest(algorithm, ec.encode(data));
  return digest;
}
```

----------------------------------------

TITLE: HTTP Server Stream Processing Example
DESCRIPTION: Example of using streams in a Node.js HTTP server implementation, demonstrating reading request data and writing responses using streams. Shows error handling and JSON parsing of incoming data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
const http = require('node:http');

const server = http.createServer((req, res) => {
  // `req` is an http.IncomingMessage, which is a readable stream.
  // `res` is an http.ServerResponse, which is a writable stream.

  let body = '';
  // Get the data as utf8 strings.
  // If an encoding is not set, Buffer objects will be received.
  req.setEncoding('utf8');

  // Readable streams emit 'data' events once a listener is added.
  req.on('data', (chunk) => {
    body += chunk;
  });

  // The 'end' event indicates that the entire body has been received.
  req.on('end', () => {
    try {
      const data = JSON.parse(body);
      // Write back something interesting to the user:
      res.write(typeof data);
      res.end();
    } catch (er) {
      // uh oh! bad json!
      res.statusCode = 400;
      return res.end(`error: ${er.message}`);
    }
  });
});

server.listen(1337);
```

----------------------------------------

TITLE: Creating and Piping a ReadableStream from Buffer Iterable (CJS)
DESCRIPTION: This example shows creating a `ReadableStream` from an async generator yielding `Buffer` objects in a CommonJS context using `ReadableStream.from()`. The stream is then piped to a `WritableStream` using `stream.pipeTo()` within an async IIFE. It uses `require` for imports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_12

LANGUAGE: cjs
CODE:
```
```cjs
const { ReadableStream } = require('node:stream/web');
const { Buffer } = require('node:buffer');

async function* asyncIterableGenerator() {
  yield Buffer.from('a');
  yield Buffer.from('b');
  yield Buffer.from('c');
}

const stream = ReadableStream.from(asyncIterableGenerator());

(async () => {
  await stream.pipeTo(createWritableStreamSomehow());
})();
```
```

----------------------------------------

TITLE: Importing readFile Named Export (Node.js JS)
DESCRIPTION: This code demonstrates importing a specific named export (`readFile`) from the Node.js built-in file system module (`node:fs`) using ES module syntax. It then calls `readFile` to asynchronously read a file, handling potential errors and logging the content. This relies on the file being an ES module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_7

LANGUAGE: js
CODE:
```
import { readFile } from 'node:fs';
readFile('./foo.txt', (err, source) => {
  if (err) {
    console.error(err);
  } else {
    console.log(source);
  }
});
```

----------------------------------------

TITLE: Reading File Stream Line by Line Using For-Await Loop (ESM)
DESCRIPTION: Demonstrates how to read a file line by line using the readline module with ES modules. Uses createReadStream and createInterface with a for-await loop to process each line.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_33

LANGUAGE: javascript
CODE:
```
import { createReadStream } from 'node:fs';
import { createInterface } from 'node:readline';

async function processLineByLine() {
  const fileStream = createReadStream('input.txt');

  const rl = createInterface({
    input: fileStream,
    crlfDelay: Infinity,
  });
  // Note: we use the crlfDelay option to recognize all instances of CR LF
  // ('\r\n') in input.txt as a single line break.

  for await (const line of rl) {
    // Each line in input.txt will be successively available here as `line`.
    console.log(`Line from file: ${line}`);
  }
}

processLineByLine();
```

----------------------------------------

TITLE: Mocking HTTP Requests with Different Matchers in Undici
DESCRIPTION: This example demonstrates how to use the MockAgent from Undici to intercept HTTP requests with various matchers including path, method regex, body validation, and header matching. It shows how to specify response status code and body content.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/foo',
  method: /^GET$/,
  body: (value) => value === 'form=data',
  headers: {
    'User-Agent': 'undici',
    Host: /^example.com$/
  }
}).reply(200, 'foo')

const {
  statusCode,
  body
} = await request('http://localhost:3000/foo', {
  method: 'GET',
  body: 'form=data',
  headers: {
    foo: 'bar',
    'User-Agent': 'undici',
    Host: 'example.com'
  }
})

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Creating Buffer from String
DESCRIPTION: Demonstrates creating a new Buffer from a string using `Buffer.from()`. The encoding parameter specifies how the string should be converted into bytes, defaulting to 'utf8'. Examples show creation with default 'utf8' and explicit 'hex' encoding.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_34

LANGUAGE: Node.js (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('this is a tést');
const buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');

console.log(buf1.toString());
// Prints: this is a tést
console.log(buf2.toString());
// Prints: this is a tést
console.log(buf1.toString('latin1'));
// Prints: this is a tÃ©st
```

LANGUAGE: Node.js (CJS)
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from('this is a tést');
const buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');

console.log(buf1.toString());
// Prints: this is a tést
console.log(buf2.toString());
// Prints: this is a tést
console.log(buf1.toString('latin1'));
// Prints: this is a tÃ©st
```

----------------------------------------

TITLE: Tracking Unhandled and Handled Promise Rejections in Node.js (ECMAScript Modules) - JavaScript
DESCRIPTION: Shows how to use 'unhandledRejection' and 'rejectionHandled' process events to track Promises whose rejections are initially unhandled but are handled later. Uses a Map to keep record of unhandled rejections and removes them when they are subsequently handled. Inputs: rejection reasons and the relevant Promises. Outputs: changes to the Map. This is useful for advanced error logging in long-running services.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_10

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

const unhandledRejections = new Map();
process.on('unhandledRejection', (reason, promise) => {
  unhandledRejections.set(promise, reason);
});
process.on('rejectionHandled', (promise) => {
  unhandledRejections.delete(promise);
});
```

----------------------------------------

TITLE: Tracking Request Context with AsyncLocalStorage
DESCRIPTION: This example illustrates using `AsyncLocalStorage` to assign a unique ID to each incoming HTTP request and make that ID available to logging functions within the request's asynchronous lifetime via `asyncLocalStorage.run()` and `asyncLocalStorage.getStore()`. It shows how the context persists across `setImmediate` calls.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_1

LANGUAGE: mjs
CODE:
```
import http from 'node:http';
import { AsyncLocalStorage } from 'node:async_hooks';

const asyncLocalStorage = new AsyncLocalStorage();

function logWithId(msg) {
  const id = asyncLocalStorage.getStore();
  console.log(`${id !== undefined ? id : '-'}:`, msg);
}

let idSeq = 0;
http.createServer((req, res) => {
  asyncLocalStorage.run(idSeq++, () => {
    logWithId('start');
    // Imagine any chain of async operations here
    setImmediate(() => {
      logWithId('finish');
      res.end();
    });
  });
}).listen(8080);

http.get('http://localhost:8080');
http.get('http://localhost:8080');
// Prints:
//   0: start
//   0: finish
//   1: start
//   1: finish
```

LANGUAGE: cjs
CODE:
```
const http = require('node:http');
const { AsyncLocalStorage } = require('node:async_hooks');

const asyncLocalStorage = new AsyncLocalStorage();

function logWithId(msg) {
  const id = asyncLocalStorage.getStore();
  console.log(`${id !== undefined ? id : '-'}:`, msg);
}

let idSeq = 0;
http.createServer((req, res) => {
  asyncLocalStorage.run(idSeq++, () => {
    logWithId('start');
    // Imagine any chain of async operations here
    setImmediate(() => {
      logWithId('finish');
      res.end();
    });
  });
}).listen(8080);

http.get('http://localhost:8080');
http.get('http://localhost:8080');
// Prints:
//   0: start
//   0: finish
//   1: start
//   1: finish
```

----------------------------------------

TITLE: Using fs/promises glob for Pattern Matching (ES Modules)
DESCRIPTION: Example of using the glob method from fs/promises to asynchronously find files matching a pattern. This version uses ES modules syntax with for-await-of to iterate through results.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
import { glob } from 'node:fs/promises';

for await (const entry of glob('**/*.js'))
  console.log(entry);
```

----------------------------------------

TITLE: Using stream.finished in ES Modules
DESCRIPTION: Example showing how to use the stream.finished function from the stream/promises API in ES Modules to be notified when a stream is no longer readable or writable. The function waits for the stream to finish.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
import { finished } from 'node:stream/promises';
import { createReadStream } from 'node:fs';

const rs = createReadStream('archive.tar');

async function run() {
  await finished(rs);
  console.log('Stream is done reading.');
}

run().catch(console.error);
rs.resume(); // Drain the stream.
```

----------------------------------------

TITLE: Reading File Contents with fs.readFile
DESCRIPTION: Basic example of reading a file asynchronously using fs.readFile. Shows how to handle errors and access file contents in the callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_68

LANGUAGE: javascript
CODE:
```
import { readFile } from 'node:fs';

readFile('/etc/passwd', (err, data) => {
  if (err) throw err;
  console.log(data);
});
```

----------------------------------------

TITLE: Creating a Require Function in ESM Context via createRequire - JavaScript
DESCRIPTION: This snippet demonstrates how to use createRequire from node:module to create a require function usable within ECMAScript modules (ESM). The createRequire function must be given a file URL, typically import.meta.url, as a parameter. It allows loading CommonJS modules (e.g., sibling-module.js) in an ESM context, bridging the gap between module types. Works in Node.js 12.2.0+ and requires ESM support.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { createRequire } from 'node:module';\nconst require = createRequire(import.meta.url);\n\n// sibling-module.js is a CommonJS module.\nconst siblingModule = require('./sibling-module');
```

----------------------------------------

TITLE: Initiating HTTP/2 Client Request (CJS)
DESCRIPTION: Shows how to connect to an HTTP/2 server, create a request using `clientSession.request()`, and handle the response headers and incoming data/end events on the resulting stream. Requires the `node:http2` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_14

LANGUAGE: cjs
CODE:
```
const http2 = require('node:http2');
const clientSession = http2.connect('https://localhost:1234');
const {
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_STATUS,
} = http2.constants;

const req = clientSession.request({ [HTTP2_HEADER_PATH]: '/' });
req.on('response', (headers) => {
  console.log(headers[HTTP2_HEADER_STATUS]);
  req.on('data', (chunk) => { /* .. */ });
  req.on('end', () => { /* .. */ });
});
```

----------------------------------------

TITLE: Using util.promisify() with async/await in Node.js (ESM)
DESCRIPTION: Illustrates how to use util.promisify() with async/await syntax for more readable asynchronous code in ECMAScript modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_44

LANGUAGE: JavaScript
CODE:
```
import { promisify } from 'node:util';
import { stat } from 'node:fs';

const promisifiedStat = promisify(stat);

async function callStat() {
  const stats = await promisifiedStat('.');
  console.log(`This directory is owned by ${stats.uid}`);
}

callStat();
```

----------------------------------------

TITLE: Cleanup Pattern for stream.finished()
DESCRIPTION: Shows how to properly clean up event listeners after stream.finished() callback execution to prevent memory leaks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_57

LANGUAGE: javascript
CODE:
```
const cleanup = finished(rs, (err) => {
  cleanup();
  // ...
});
```

----------------------------------------

TITLE: Basic NPM Package Commands
DESCRIPTION: Core syntax for npm pkg commands including set, get, delete, and fix operations on package.json
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-pkg.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm pkg set <key>=<value> [<key>=<value> ...]
npm pkg get [<key> [<key> ...]]
npm pkg delete <key> [<key> ...]
npm pkg set [<array>[<index>].<key>=<value> ...]
npm pkg set [<array>[].<key>=<value> ...]
npm pkg fix
```

----------------------------------------

TITLE: Using Promisified `exec` with Async/Await (CJS)
DESCRIPTION: Shows how to use the promisified version of `child_process.exec` (using `util.promisify`) within an async function in CommonJS. It demonstrates awaiting the command execution and destructuring the resulting object to get `stdout` and `stderr`. Errors, including non-zero exit codes, result in a rejected promise containing `error`, `stdout`, and `stderr` properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_8

LANGUAGE: cjs
CODE:
```
const util = require('node:util');
const exec = util.promisify(require('node:child_process').exec);

async function lsExample() {
  const { stdout, stderr } = await exec('ls');
  console.log('stdout:', stdout);
  console.error('stderr:', stderr);
}
lsExample();
```

----------------------------------------

TITLE: Handling Asynchronous Errors with Promises in Node.js
DESCRIPTION: Illustrates error handling for asynchronous operations using Promises in Node.js. This example shows how to handle errors when reading a file asynchronously using fs.readFile with promises.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
const fs = require('node:fs/promises');

(async () => {
  let data;
  try {
    data = await fs.readFile('a file that does not exist');
  } catch (err) {
    console.error('There was an error reading the file!', err);
    return;
  }
  // Otherwise handle the data
})();
```

----------------------------------------

TITLE: Appending Data to File Synchronously in Node.js
DESCRIPTION: Demonstrates how to use fs.appendFileSync() to append data to a file. It includes error handling and shows usage with both string and file descriptor arguments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_84

LANGUAGE: mjs
CODE:
```
import { appendFileSync } from 'node:fs';

try {
  appendFileSync('message.txt', 'data to append');
  console.log('The "data to append" was appended to file!');
} catch (err) {
  /* Handle the error */
}
```

LANGUAGE: mjs
CODE:
```
import { appendFileSync } from 'node:fs';

appendFileSync('message.txt', 'data to append', 'utf8');
```

LANGUAGE: mjs
CODE:
```
import { openSync, closeSync, appendFileSync } from 'node:fs';

let fd;

try {
  fd = openSync('message.txt', 'a');
  appendFileSync(fd, 'data to append', 'utf8');
} catch (err) {
  /* Handle the error */
} finally {
  if (fd !== undefined)
    closeSync(fd);
}
```

----------------------------------------

TITLE: Basic Package Override Example
DESCRIPTION: Shows how to override a package version regardless of what versions your dependencies rely on. This is useful for addressing security issues or ensuring consistency across dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_27

LANGUAGE: json
CODE:
```
{
  "overrides": {
    "@npm/foo": "1.0.0"
  }
}
```

----------------------------------------

TITLE: Retrieving File Stats with FileHandle.stat in Node.js
DESCRIPTION: Asynchronously retrieves the {fs.Stats} object for the file associated with the FileHandle. An optional `options` object can be provided with a `bigint` property (boolean, default: false) to specify if numeric values should be returned as `bigint`. Returns a Promise that fulfills with the {fs.Stats} object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_12



----------------------------------------

TITLE: Extracting Filename using path.basename
DESCRIPTION: Demonstrates the basic usage of `path.basename()` to extract the filename ('quux.html') from a given POSIX path string. Trailing directory separators are ignored.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_6

LANGUAGE: js
CODE:
```
path.basename('/foo/bar/baz/asdf/quux.html');
// Returns: 'quux.html'
```

----------------------------------------

TITLE: Requiring the node:querystring Module - Node.js JavaScript
DESCRIPTION: This snippet demonstrates how to import the core 'node:querystring' module in a Node.js environment. It uses CommonJS 'require' syntax to make the querystring utilities available in the file. No additional dependencies are needed beyond Node.js itself and there are no parameters required.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/querystring.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
const querystring = require('node:querystring');
```

----------------------------------------

TITLE: Implementing Mutual TLS Authentication with Node.js HTTPS Server and Undici Client
DESCRIPTION: Sets up an HTTPS server that requires and validates client certificates, and creates an Undici client that connects with its own certificate. The server validates incoming client certificates against a CA, while the client validates the server certificate. Includes certificate loading, server configuration with certificate validation options, and client request handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/client-certificate.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const { readFileSync } = require('node:fs')
const { join } = require('node:path')
const { createServer } = require('node:https')
const { Client } = require('undici')

const serverOptions = {
  ca: [
    readFileSync(join(__dirname, 'client-ca-crt.pem'), 'utf8')
  ],
  key: readFileSync(join(__dirname, 'server-key.pem'), 'utf8'),
  cert: readFileSync(join(__dirname, 'server-crt.pem'), 'utf8'),
  requestCert: true,
  rejectUnauthorized: false
}

const server = createServer(serverOptions, (req, res) => {
  // true if client cert is valid
  if(req.client.authorized === true) {
    console.log('valid')
  } else {
    console.error(req.client.authorizationError)
  }
  res.end()
})

server.listen(0, function () {
  const tls = {
    ca: [
      readFileSync(join(__dirname, 'server-ca-crt.pem'), 'utf8')
    ],
    key: readFileSync(join(__dirname, 'client-key.pem'), 'utf8'),
    cert: readFileSync(join(__dirname, 'client-crt.pem'), 'utf8'),
    rejectUnauthorized: false,
    servername: 'agent1'
  }
  const client = new Client(`https://localhost:${server.address().port}`, {
    connect: tls
  })

  client.request({
    path: '/',
    method: 'GET'
  }, (err, { body }) => {
    body.on('data', (buf) => {})
    body.on('end', () => {
      client.close()
      server.close()
    })
  })
})
```

----------------------------------------

TITLE: Serving Compressed HTTP Responses with zlib (ESM, JavaScript/Node.js)
DESCRIPTION: This ESM JavaScript/Node.js server example demonstrates content negotiation and dynamic compression (deflate, gzip, br) using the Accept-Encoding header to determine output encoding. It uses the node:zlib, node:http, node:fs, and node:stream core modules. The server reads an HTML file, sets the Vary header, and pipes the output through the requested compressor to the HTTP response. Parameters include the incoming request and the detected client-supported encodings; output is the compressed response. Error handling is implemented in the pipeline callback. Limitation: No compression result caching; accept-encoding parsing is naive.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_12

LANGUAGE: mjs
CODE:
```
// server example\n// Running a gzip operation on every request is quite expensive.\n// It would be much more efficient to cache the compressed buffer.\nimport zlib from 'node:zlib';\nimport http from 'node:http';\nimport fs from 'node:fs';\nimport { pipeline } from 'node:stream';\n\nhttp.createServer((request, response) => {\n  const raw = fs.createReadStream('index.html');\n  // Store both a compressed and an uncompressed version of the resource.\n  response.setHeader('Vary', 'Accept-Encoding');\n  const acceptEncoding = request.headers['accept-encoding'] || '';\n\n  const onError = (err) => {\n    if (err) {\n      // If an error occurs, there's not much we can do because\n      // the server has already sent the 200 response code and\n      // some amount of data has already been sent to the client.\n      // The best we can do is terminate the response immediately\n      // and log the error.\n      response.end();\n      console.error('An error occurred:', err);\n    }\n  };\n\n  // Note: This is not a conformant accept-encoding parser.\n  // See https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n  if (/\\bdeflate\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'deflate' });\n    pipeline(raw, zlib.createDeflate(), response, onError);\n  } else if (/\\bgzip\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'gzip' });\n    pipeline(raw, zlib.createGzip(), response, onError);\n  } else if (/\\bbr\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'br' });\n    pipeline(raw, zlib.createBrotliCompress(), response, onError);\n  } else {\n    response.writeHead(200, {});\n    pipeline(raw, response, onError);\n  }\n}).listen(1337);
```

----------------------------------------

TITLE: Importing EventEmitter Default Export (Node.js JS)
DESCRIPTION: This snippet shows how to import the default export from a Node.js built-in module (`node:events`) using an ES module `import` statement. It then creates an instance of the imported `EventEmitter` class. This requires the file to be treated as an ES module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_6

LANGUAGE: js
CODE:
```
import EventEmitter from 'node:events';
const e = new EventEmitter();
```

----------------------------------------

TITLE: Exporting a Default Class from an ES Module (Node.js - JavaScript)
DESCRIPTION: Defines an ES module that exports a default Point class with a constructor initializing x and y properties. This module provides a basic data structure for representing points in 2D space. No external dependencies required, and the output is the exported class under the default property in the module namespace.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_5

LANGUAGE: mjs
CODE:
```
// point.mjs\nexport default class Point {\n  constructor(x, y) { this.x = x; this.y = y; }\n}
```

----------------------------------------

TITLE: Spawning Detached Process with File Redirection (MJS)
DESCRIPTION: This ES Module snippet demonstrates spawning a detached child process (`prg`) while redirecting its stdout and stderr to a file (`./out.log`). It uses `fs.openSync` for file descriptors and sets `stdio` to `['ignore', out, err]`. The `detached: true` option and `subprocess.unref()` call allow the child to run independently of the parent.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_28

LANGUAGE: mjs
CODE:
```
import { openSync } from 'node:fs';
import { spawn } from 'node:child_process';
const out = openSync('./out.log', 'a');
const err = openSync('./out.log', 'a');

const subprocess = spawn('prg', [], {
  detached: true,
  stdio: [ 'ignore', out, err ],
});

subprocess.unref();
```

----------------------------------------

TITLE: Cancelling setImmediate Promise with AbortController (Node.js Timers - MJS/CJS)
DESCRIPTION: Demonstrates how to cancel a `setImmediate` promise using an `AbortController`. When the signal is aborted, the promise is rejected with an `AbortError`, preventing the scheduled callback/resolution from occurring.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_0

LANGUAGE: mjs
CODE:
```
import { setImmediate as setImmediatePromise } from 'node:timers/promises';

const ac = new AbortController();
const signal = ac.signal;

// We do not `await` the promise so `ac.abort()` is called concurrently.
setImmediatePromise('foobar', { signal })
  .then(console.log)
  .catch((err) => {
    if (err.name === 'AbortError')
      console.error('The immediate was aborted');
  });

ac.abort();
```

LANGUAGE: cjs
CODE:
```
const { setImmediate: setImmediatePromise } = require('node:timers/promises');

const ac = new AbortController();
const signal = ac.signal;

setImmediatePromise('foobar', { signal })
  .then(console.log)
  .catch((err) => {
    if (err.name === 'AbortError')
      console.error('The immediate was aborted');
  });

ac.abort();
```

----------------------------------------

TITLE: Array Buffer Transfer and Sharing (ESM)
DESCRIPTION: Shows different ways of transferring and sharing typed arrays using MessagePort, including copying, transferring ownership, and sharing memory between threads.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_10

LANGUAGE: mjs
CODE:
```
import { MessageChannel } from 'node:worker_threads';
const { port1, port2 } = new MessageChannel();

port1.on('message', (message) => console.log(message));

const uint8Array = new Uint8Array([ 1, 2, 3, 4 ]);
// This posts a copy of `uint8Array`:
port2.postMessage(uint8Array);
// This does not copy data, but renders `uint8Array` unusable:
port2.postMessage(uint8Array, [ uint8Array.buffer ]);

// The memory for the `sharedUint8Array` is accessible from both the
// original and the copy received by `.on('message')`:
const sharedUint8Array = new Uint8Array(new SharedArrayBuffer(4));
port2.postMessage(sharedUint8Array);

// This transfers a freshly created message port to the receiver.
// This can be used, for example, to create communication channels between
// multiple `Worker` threads that are children of the same parent thread.
const otherChannel = new MessageChannel();
port2.postMessage({ port: otherChannel.port1 }, [ otherChannel.port1 ]);
```

----------------------------------------

TITLE: Defining package.json with main entry - JSON
DESCRIPTION: This snippet demonstrates a package.json file specifying a 'main' entry, which determines the entry point for the module when the folder is required. The 'main' property should give the relative path to the module's primary file. Node.js uses this configuration as the file to load, unless overridden by index.* files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_15

LANGUAGE: JSON
CODE:
```
{ "name" : "some-library",
  "main" : "./lib/some-library.js" }
```

----------------------------------------

TITLE: Parsing Command-Line Arguments Using parseArgs - JavaScript (ESM)
DESCRIPTION: Demonstrates high-level command-line argument parsing using parseArgs from Node.js util module in ES Module format. Accepts an array of simulated arguments and options describing expected types (boolean for 'foo', string for 'bar'). The snippet destructures the result to get parsed values and positionals, then logs them. Inputs include the args array and options config; outputs are the argument values and positionals. Requires Node.js v18.3.0+.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_36

LANGUAGE: JavaScript
CODE:
```
import { parseArgs } from 'node:util';
const args = ['-f', '--bar', 'b'];
const options = {
  foo: {
    type: 'boolean',
    short: 'f',
  },
  bar: {
    type: 'string',
  },
};
const {
  values,
  positionals,
} = parseArgs({ args, options });
console.log(values, positionals);
// Prints: [Object: null prototype] { foo: true, bar: 'b' } []
```

----------------------------------------

TITLE: Handling Close and Exit Events with child_process.spawn in CommonJS
DESCRIPTION: Example demonstrating how to spawn a child process using the spawn method in CommonJS format, and how to handle the 'close' and 'exit' events along with stdout data. The example shows the distinction between 'close' and 'exit' events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_33

LANGUAGE: JavaScript
CODE:
```
const { spawn } = require('node:child_process');
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process close all stdio with code ${code}`);
});

ls.on('exit', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

----------------------------------------

TITLE: Handling HTTP/2 Stream Event using createSecureServer (ESM)
DESCRIPTION: This snippet demonstrates how to create a secure HTTP/2 server using the ESM syntax and handle incoming request streams via the 'stream' event. It shows how to access request headers and send a basic 'hello world' response. TLS options must be provided to `createSecureServer()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_39

LANGUAGE: javascript
CODE:
```
import { createSecureServer, constants } from 'node:http2';
const {
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_STATUS,
  HTTP2_HEADER_CONTENT_TYPE,
} = constants;

const options = getOptionsSomehow();

const server = createSecureServer(options);
server.on('stream', (stream, headers, flags) => {
  const method = headers[HTTP2_HEADER_METHOD];
  const path = headers[HTTP2_HEADER_PATH];
  // ...
  stream.respond({
    [HTTP2_HEADER_STATUS]: 200,
    [HTTP2_HEADER_CONTENT_TYPE]: 'text/plain; charset=utf-8',
  });
  stream.write('hello ');
  stream.end('world');
});
```

----------------------------------------

TITLE: Using execFileSync with ES Modules in Node.js
DESCRIPTION: Demonstrates synchronously executing an external script ('my-script.sh') with arguments using `execFileSync` via ES Module `import`. It configures `stdio` to 'pipe' for capturing output and uses 'utf8' encoding. Error handling distinguishes between spawn errors and non-zero exit codes, logging appropriate details.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_32

LANGUAGE: mjs
CODE:
```
import { execFileSync } from 'node:child_process';

try {
  const stdout = execFileSync('my-script.sh', ['my-arg'], {
    // Capture stdout and stderr from child process. Overrides the
    // default behavior of streaming child stderr to the parent stderr
    stdio: 'pipe',

    // Use utf8 encoding for stdio pipes
    encoding: 'utf8',
  });

  console.log(stdout);
} catch (err) {
  if (err.code) {
    // Spawning child process failed
    console.error(err.code);
  } else {
    // Child was spawned but exited with non-zero exit code
    // Error contains any stdout and stderr from the child
    const { stdout, stderr } = err;

    console.error({ stdout, stderr });
  }
}
```

----------------------------------------

TITLE: Closing an fs.FileHandle in Node.js JavaScript
DESCRIPTION: This JavaScript snippet demonstrates the recommended way to explicitly close an `fs.FileHandle` using `FileHandle.prototype.close()` within a `finally` block. This prevents reliance on garbage collection for closing, which is deprecated (DEP0137), and ensures the handle is closed even if errors occur during the open operation. It requires the `node:fs` promises API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/deprecations.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const fsPromises = require('node:fs').promises;
async function openAndClose() {
  let filehandle;
  try {
    filehandle = await fsPromises.open('thefile.txt', 'r');
  } finally {
    if (filehandle !== undefined)
      await filehandle.close();
  }
}
```

----------------------------------------

TITLE: Defining a Before Hook in Node.js Test Runner
DESCRIPTION: Demonstrates how to define a `before` hook within a test suite (`describe`) using the Node.js `node:test` module. This hook function runs once before any tests or nested suites within its parent suite begin execution, typically used for overall suite setup. Requires importing functions from `node:test`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_37

LANGUAGE: JavaScript
CODE:
```
describe('tests', async () => {
  before(() => console.log('about to run some test'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
```

----------------------------------------

TITLE: Using AbortController with pipeline in CommonJS
DESCRIPTION: Example demonstrating how to use AbortController with pipeline in CommonJS to cancel a stream operation. The pipeline will be aborted immediately through the signal parameter.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');
const zlib = require('node:zlib');

async function run() {
  const ac = new AbortController();
  const signal = ac.signal;

  setImmediate(() => ac.abort());
  await pipeline(
    fs.createReadStream('archive.tar'),
    zlib.createGzip(),
    fs.createWriteStream('archive.tar.gz'),
    { signal },
  );
}

run().catch(console.error); // AbortError
```

----------------------------------------

TITLE: Accessing and Mutating the Protocol Component - WHATWG URL API - JavaScript
DESCRIPTION: Shows usage of the protocol property on a Node.js URL object for reading and setting the protocol scheme. Changing protocol updates the href field accordingly. Only protocols deemed special by WHATWG (ftp, file, http, https, ws, wss) can be interchanged freely; setting a non-special protocol is ignored. No dependencies required; takes a URL string and a new protocol string as input, and outputs the protocol or the href after update.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_25

LANGUAGE: JavaScript
CODE:
```
const myURL = new URL('https://example.org');
console.log(myURL.protocol);
// Prints https:

myURL.protocol = 'ftp';
console.log(myURL.href);
// Prints ftp://example.org/

```

LANGUAGE: JavaScript
CODE:
```
const u = new URL('http://example.org');
u.protocol = 'https';
console.log(u.href);
// https://example.org/

```

LANGUAGE: JavaScript
CODE:
```
const u = new URL('http://example.org');
u.protocol = 'fish';
console.log(u.href);
// http://example.org/

```

LANGUAGE: JavaScript
CODE:
```
const u = new URL('fish://example.org');
u.protocol = 'http';
console.log(u.href);
// fish://example.org

```

----------------------------------------

TITLE: Incorrect Ordering of Asynchronous File Operations in Node.js
DESCRIPTION: This snippet demonstrates an error-prone way of renaming a file and then getting its stats, where the operations may complete out of order due to their asynchronous nature.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_109

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');

fs.rename('/tmp/hello', '/tmp/world', (err) => {
  if (err) throw err;
  console.log('renamed complete');
});
fs.stat('/tmp/world', (err, stats) => {
  if (err) throw err;
  console.log(`stats: ${JSON.stringify(stats)}`);
});
```

----------------------------------------

TITLE: Async Function Awaiting a Promise in Node.js (JavaScript)
DESCRIPTION: Defines asyncBoo, an async function that awaits a resolved promise. Used to illustrate basic usage of await with a resolved promise inside an asynchronous function. No parameters or dependencies; output is a resolved Promise.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-expected.txt#2025-04-23_snippet_9

LANGUAGE: JavaScript
CODE:
```
async function asyncBoo() {\n  #await Promise.resolve();\n}
```

----------------------------------------

TITLE: Setting Encoding for a Readable Stream in Node.js
DESCRIPTION: This snippet shows how to set the character encoding for data read from a Readable stream using the setEncoding() method. It ensures that the stream data is returned as strings of the specified encoding.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
const readable = getReadableStreamSomehow();
readable.setEncoding('utf8');
readable.on('data', (chunk) => {
  assert.equal(typeof chunk, 'string');
  console.log('Got %d characters of string data:', chunk.length);
});
```

----------------------------------------

TITLE: Using Promisified `exec` with Async/Await (MJS)
DESCRIPTION: Shows how to use the promisified version of `child_process.exec` (using `util.promisify`) within an async function using ES Modules syntax. It demonstrates awaiting the command execution and destructuring the resulting object to get `stdout` and `stderr`. Errors, including non-zero exit codes, result in a rejected promise containing `error`, `stdout`, and `stderr` properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_9

LANGUAGE: mjs
CODE:
```
import { promisify } from 'node:util';
import child_process from 'node:child_process';
const exec = promisify(child_process.exec);

async function lsExample() {
  const { stdout, stderr } = await exec('ls');
  console.log('stdout:', stdout);
  console.error('stderr:', stderr);
}
lsExample();
```

----------------------------------------

TITLE: Server Closure with Timeout Example
DESCRIPTION: Demonstrates how to properly close an HTTP server after a timeout period, including handling of existing connections.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
const http = require('node:http');

const server = http.createServer({ keepAliveTimeout: 60000 }, (req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
// Close the server after 10 seconds
setTimeout(() => {
  server.close(() => {
    console.log('server on port 8000 closed successfully');
  });
}, 10000);
```

----------------------------------------

TITLE: Async Iteration of Readable Streams
DESCRIPTION: Demonstrates using async iteration to read a file stream completely using for-await-of loop.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_40

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');

async function print(readable) {
  readable.setEncoding('utf8');
  let data = '';
  for await (const chunk of readable) {
    data += chunk;
  }
  console.log(data);
}

print(fs.createReadStream('file')).catch(console.error);
```

----------------------------------------

TITLE: Basic C++ Node.js Addon Implementation
DESCRIPTION: Implementation of a basic 'Hello World' addon in C++ that exports a single method returning a string value. Shows proper V8 integration and module initialization.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_1

LANGUAGE: cpp
CODE:
```
// hello.cc
#include <node.h>

namespace demo {

using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
using v8::NewStringType;
using v8::Object;
using v8::String;
using v8::Value;

void Method(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = args.GetIsolate();
  args.GetReturnValue().Set(String::NewFromUtf8(
      isolate, "world", NewStringType::kNormal).ToLocalChecked());
}

void Initialize(Local<Object> exports) {
  NODE_SET_METHOD(exports, "hello", Method);
}

NODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)

}  // namespace demo
```

----------------------------------------

TITLE: Implementing a Custom Readable Stream with Low-Level Source Wrapping in JavaScript
DESCRIPTION: Example of creating a custom Readable stream that wraps a lower-level source with pause/resume mechanism. The implementation handles data events from the source and manages backpressure by stopping the source when the internal buffer fills up.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_86

LANGUAGE: javascript
CODE:
```
// `_source` is an object with readStop() and readStart() methods,
// and an `ondata` member that gets called when it has data, and
// an `onend` member that gets called when the data is over.

class SourceWrapper extends Readable {
  constructor(options) {
    super(options);

    this._source = getLowLevelSourceObject();

    // Every time there's data, push it into the internal buffer.
    this._source.ondata = (chunk) => {
      // If push() returns false, then stop reading from source.
      if (!this.push(chunk))
        this._source.readStop();
    };

    // When the source ends, push the EOF-signaling `null` chunk.
    this._source.onend = () => {
      this.push(null);
    };
  }
  // _read() will be called when the stream wants to pull more data in.
  // The advisory size argument is ignored in this case.
  _read(size) {
    this._source.readStart();
  }
}
```

----------------------------------------

TITLE: Reading File with Encoding Specification
DESCRIPTION: Example showing how to read a file with specific encoding by passing the encoding as a string option.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_69

LANGUAGE: javascript
CODE:
```
import { readFile } from 'node:fs';

readFile('/etc/passwd', 'utf8', callback);
```

----------------------------------------

TITLE: Demonstrating Module Type Interpretation in Node.js
DESCRIPTION: This code snippet illustrates how Node.js interprets different files as ES modules or CommonJS based on package.json configuration and file extensions. It shows imports from various sources and how they are treated.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// my-app.js, treated as an ES module because there is a package.json
// file in the same folder with "type": "module".

import './startup/init.js';
// Loaded as ES module since ./startup contains no package.json file,
// and therefore inherits the "type" value from one level up.

import 'commonjs-package';
// Loaded as CommonJS since ./node_modules/commonjs-package/package.json
// lacks a "type" field or contains "type": "commonjs".

import './node_modules/commonjs-package/index.js';
// Loaded as CommonJS since ./node_modules/commonjs-package/package.json
// lacks a "type" field or contains "type": "commonjs".
```

----------------------------------------

TITLE: Using ReadableStreamBYOBReader for Byte-Oriented Streams (MJS)
DESCRIPTION: This snippet provides a comprehensive example of using a `ReadableStreamBYOBReader` ('Bring Your Own Buffer'). It defines a custom `Source` class with `type = 'bytes'` that reads from a file using `fs/promises`. The `read` function then acquires a BYOB reader (`stream.getReader({ mode: 'byob' })`) and repeatedly calls `reader.read()` with a pre-allocated `Buffer` to efficiently read data into it, minimizing copies. Finally, it concatenates the chunks and logs the result.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_13

LANGUAGE: mjs
CODE:
```
```mjs
import {
  open,
} from 'node:fs/promises';

import {
  ReadableStream,
} from 'node:stream/web';

import { Buffer } from 'node:buffer';

class Source {
  type = 'bytes';
  autoAllocateChunkSize = 1024;

  async start(controller) {
    this.file = await open(new URL(import.meta.url));
    this.controller = controller;
  }

  async pull(controller) {
    const view = controller.byobRequest?.view;
    const {
      bytesRead,
    } = await this.file.read({
      buffer: view,
      offset: view.byteOffset,
      length: view.byteLength,
    });

    if (bytesRead === 0) {
      await this.file.close();
      this.controller.close();
    }
    controller.byobRequest.respond(bytesRead);
  }
}

const stream = new ReadableStream(new Source());

async function read(stream) {
  const reader = stream.getReader({ mode: 'byob' });

  const chunks = [];
  let result;
  do {
    result = await reader.read(Buffer.alloc(100));
    if (result.value !== undefined)
      chunks.push(Buffer.from(result.value));
  } while (!result.done);

  return Buffer.concat(chunks);
}

const data = await read(stream);
console.log(Buffer.from(data).toString());
```
```

----------------------------------------

TITLE: Installing Specific NPM Package Versions
DESCRIPTION: Examples of installing packages with exact version numbers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
npm install sax@0.1.1
npm install @myorg/privatepackage@1.5.0
```

----------------------------------------

TITLE: Create Basic HTTP/2 Server (CJS)
DESCRIPTION: Illustrates creating an unencrypted HTTP/2 server using `http2.createServer` in CommonJS syntax. It demonstrates handling incoming streams via the `'stream'` event, sending a 200 OK response with simple HTML content, and initiating the server to listen on port 8000.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_42

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');

// Create an unencrypted HTTP/2 server.
// Since there are no browsers known that support
// unencrypted HTTP/2, the use of `http2.createSecureServer()`
// is necessary when communicating with browser clients.
const server = http2.createServer();

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.end('<h1>Hello World</h1>');
});

server.listen(8000);
```

----------------------------------------

TITLE: Writing Buffer Data with FileHandle.write in Node.js (Offset/Length/Position)
DESCRIPTION: Asynchronously writes data from a Buffer, TypedArray, or DataView (`buffer`) to the file associated with the FileHandle. Allows specifying `offset` (start position in `buffer`), `length` (bytes to write from `buffer`, defaults to `buffer.byteLength - offset`), and `position` (file offset, defaults to current position if null). Returns a Promise fulfilling with an object `{ bytesWritten, buffer }`. It is unsafe for concurrent calls on the same handle; use `createWriteStream` instead. Positional writes may not work in append mode on Linux.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_15



----------------------------------------

TITLE: Certificate Pinning and Verification in Node.js HTTPS Requests Using ESM - JavaScript
DESCRIPTION: Implements advanced certificate/public key pinning and custom server identity verification for HTTPS requests using ESM imports. The checkServerIdentity callback checks for public key and certificate fingerprint matches using SHA-256. It also prints detailed certificate chain information. Requires 'node:tls', 'node:https', and 'node:crypto' modules. Inputs and outputs relate to server certificate validation. Intended for sensitive environments requiring strict server identity verification.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
import { checkServerIdentity } from 'node:tls';
import { Agent, request } from 'node:https';
import { createHash } from 'node:crypto';

function sha256(s) {
  return createHash('sha256').update(s).digest('base64');
}
const options = {
  hostname: 'github.com',
  port: 443,
  path: '/',
  method: 'GET',
  checkServerIdentity: function(host, cert) {
    // Make sure the certificate is issued to the host we are connected to
    const err = checkServerIdentity(host, cert);
    if (err) {
      return err;
    }

    // Pin the public key, similar to HPKP pin-sha256 pinning
    const pubkey256 = 'SIXvRyDmBJSgatgTQRGbInBaAK+hZOQ18UmrSwnDlK8=';
    if (sha256(cert.pubkey) !== pubkey256) {
      const msg = 'Certificate verification error: ' +
        `The public key of '${cert.subject.CN}' ` +
        'does not match our pinned fingerprint';
      return new Error(msg);
    }

    // Pin the exact certificate, rather than the pub key
    const cert256 = 'FD:6E:9B:0E:F3:98:BC:D9:04:C3:B2:EC:16:7A:7B:' +
      '0F:DA:72:01:C9:03:C5:3A:6A:6A:E5:D0:41:43:63:EF:65';
    if (cert.fingerprint256 !== cert256) {
      const msg = 'Certificate verification error: ' +
        `The certificate of '${cert.subject.CN}' ` +
        'does not match our pinned fingerprint';
      return new Error(msg);
    }

    // This loop is informational only.
    // Print the certificate and public key fingerprints of all certs in the
    // chain. Its common to pin the public key of the issuer on the public
    // internet, while pinning the public key of the service in sensitive
    // environments.
    let lastprint256;
    do {
      console.log('Subject Common Name:', cert.subject.CN);
      console.log('  Certificate SHA256 fingerprint:', cert.fingerprint256);

      const hash = createHash('sha256');
      console.log('  Public key ping-sha256:', sha256(cert.pubkey));

      lastprint256 = cert.fingerprint256;
      cert = cert.issuerCertificate;
    } while (cert.fingerprint256 !== lastprint256);

  },
};

options.agent = new Agent(options);
const req = request(options, (res) => {
  console.log('All OK. Server matched our pinned cert or public key');
  console.log('statusCode:', res.statusCode);

  res.on('data', (d) => {});
});

req.on('error', (e) => {
  console.error(e.message);
});
req.end();
```

----------------------------------------

TITLE: Using ReadableStream.getReader() in JavaScript (ESM)
DESCRIPTION: This example demonstrates how to use the getReader() method of a ReadableStream to obtain a reader and read data from the stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { ReadableStream } from 'node:stream/web';

const stream = new ReadableStream();

const reader = stream.getReader();

console.log(await reader.read());
```

----------------------------------------

TITLE: Renaming Files/Directories with fsPromises.rename in Node.js
DESCRIPTION: Asynchronously renames `oldPath` to `newPath`. Returns a Promise that fulfills with `undefined` upon successful completion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_32

LANGUAGE: javascript
CODE:
```
fsPromises.rename(oldPath, newPath)
```

----------------------------------------

TITLE: Demonstrating --zero-fill-buffers Flag - Node.js Console
DESCRIPTION: Shows the effect of running Node.js with the `--zero-fill-buffers` command-line flag. When this flag is enabled, `Buffer.allocUnsafe(size)` allocates memory that is zero-filled, demonstrating that it does not contain potentially sensitive old data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_105

LANGUAGE: Console
CODE:
```
$ node --zero-fill-buffers
> Buffer.allocUnsafe(5);
<Buffer 00 00 00 00 00>
```

----------------------------------------

TITLE: Setting and manipulating URLSearchParams in Node.js
DESCRIPTION: Demonstrates how to use the set() method to modify URLSearchParams, including overwriting existing values and adding new pairs.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_41

LANGUAGE: javascript
CODE:
```
const params = new URLSearchParams();
params.append('foo', 'bar');
params.append('foo', 'baz');
params.append('abc', 'def');
console.log(params.toString());
// Prints foo=bar&foo=baz&abc=def

params.set('foo', 'def');
params.set('xyz', 'opq');
console.log(params.toString());
// Prints foo=def&abc=def&xyz=opq
```

----------------------------------------

TITLE: Using Transform Stream with Pipeline in Node.js
DESCRIPTION: Example of using a Transform stream with pipeline to validate JSON. The transform stream buffers incoming data, validates it as JSON, and only passes valid JSON to the output stream. Error handling is managed by the pipeline callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_92

LANGUAGE: javascript
CODE:
```
const { Transform, pipeline } = require('node:stream');
const fs = require('node:fs');

pipeline(
  fs.createReadStream('object.json')
    .setEncoding('utf8'),
  new Transform({
    decodeStrings: false, // Accept string input rather than Buffers
    construct(callback) {
      this.data = '';
      callback();
    },
    transform(chunk, encoding, callback) {
      this.data += chunk;
      callback();
    },
    flush(callback) {
      try {
        // Make sure is valid json.
        JSON.parse(this.data);
        this.push(this.data);
        callback();
      } catch (err) {
        callback(err);
      }
    },
  }),
  fs.createWriteStream('valid-object.json'),
  (err) => {
    if (err) {
      console.error('failed', err);
    } else {
      console.log('completed');
    }
  },
);
```

----------------------------------------

TITLE: Creating Node.js TLS Echo Server (CJS)
DESCRIPTION: Illustrates creating a TLS server using Node.js `tls.createServer` with CommonJS syntax. It reads server key and certificate files, optionally requires client certificates using `requestCert`, and specifies trusted CAs via the `ca` option if needed for client certificate verification. The provided listener handles new connections, logs authorization status, sends a welcome message, sets UTF-8 encoding, and echoes back received data. Depends on `node:tls` and `node:fs` modules and requires `server-key.pem`, `server-cert.pem`, and potentially `client-cert.pem` files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_27

LANGUAGE: cjs
CODE:
```
const { createServer } = require('node:tls');
const { readFileSync } = require('node:fs');

const options = {
  key: readFileSync('server-key.pem'),
  cert: readFileSync('server-cert.pem'),

  // This is necessary only if using client certificate authentication.
  requestCert: true,

  // This is necessary only if the client uses a self-signed certificate.
  ca: [ readFileSync('client-cert.pem') ],
};

const server = createServer(options, (socket) => {
  console.log('server connected',
              socket.authorized ? 'authorized' : 'unauthorized');
  socket.write('welcome!\n');
  socket.setEncoding('utf8');
  socket.pipe(socket);
});
server.listen(8000, () => {
  console.log('server bound');
});
```

----------------------------------------

TITLE: Resolving Absolute Paths in Node.js
DESCRIPTION: The path.resolve() method processes path segments from right to left to create an absolute path. If no absolute path is created from the segments, the current working directory is prepended.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_35

LANGUAGE: javascript
CODE:
```
path.resolve('/foo/bar', './baz');
// Returns: '/foo/bar/baz'
```

LANGUAGE: javascript
CODE:
```
path.resolve('/foo/bar', '/tmp/file/');
// Returns: '/tmp/file'
```

LANGUAGE: javascript
CODE:
```
path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif');
// If the current working directory is /home/myself/node,
// this returns '/home/myself/node/wwwroot/static_files/gif/image.gif'
```

----------------------------------------

TITLE: Running Locally Installed 'tap' Package with npx/npm exec (Bash)
DESCRIPTION: Provides examples of executing the `tap` testing tool, assumed to be available in the local project's dependencies. It shows the equivalent commands using both `npm exec` (with the `--` separator) and `npx` to pass arguments (`--bail test/foo.js`) to the `tap` executable.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npx.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
$ npm exec -- tap --bail test/foo.js
$ npx tap --bail test/foo.js
```

----------------------------------------

TITLE: Implementing a Counter Stream extending Node.js Readable
DESCRIPTION: Example of a basic Readable stream that emits numbers from 1 to 1,000,000 in ascending order and then ends. Demonstrates how to implement _read() method to push data into the stream's internal buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_88

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

class Counter extends Readable {
  constructor(opt) {
    super(opt);
    this._max = 1000000;
    this._index = 1;
  }

  _read() {
    const i = this._index++;
    if (i > this._max)
      this.push(null);
    else {
      const str = String(i);
      const buf = Buffer.from(str, 'ascii');
      this.push(buf);
    }
  }
}
```

----------------------------------------

TITLE: Using Web Crypto API with Promises in Node.js
DESCRIPTION: Example of a Promise-based Web Crypto API operation to generate HMAC keys. This demonstrates the modern asynchronous approach used in the Web Crypto API exposed via globalThis.crypto.
SOURCE: https://github.com/nodejs/node/blob/main/src/crypto/README.md#2025-04-23_snippet_3

LANGUAGE: js
CODE:
```
// Example Web Crypto API asynchronous single-call operation
const { subtle } = globalThis.crypto;

subtle.generateKeys({ name: 'HMAC', length: 256 }, true, ['sign'])
  .then((key) => {
    console.log(key);
  })
  .catch((error) => {
    console.error('an error occurred');
  });
```

----------------------------------------

TITLE: Using util.promisify() with fs.stat in Node.js (ESM)
DESCRIPTION: Demonstrates how to use util.promisify() to convert the fs.stat function from a callback-based API to a promise-based one in ECMAScript modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_42

LANGUAGE: JavaScript
CODE:
```
import { promisify } from 'node:util';
import { stat } from 'node:fs';

const promisifiedStat = promisify(stat);
promisifiedStat('.').then((stats) => {
  // Do something with `stats`
}).catch((error) => {
  // Handle the error.
});
```

----------------------------------------

TITLE: Converting Node.js Buffers & Strings (CJS)
DESCRIPTION: Demonstrates encoding strings to Buffers and decoding Buffers to strings in a CommonJS environment using `require`, showing conversions with Hex, Base64, and UTF16-LE encodings and the resulting byte representations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('hello world', 'utf8');

console.log(buf.toString('hex'));
// Prints: 68656c6c6f20776f726c64
console.log(buf.toString('base64'));
// Prints: aGVsbG8gd29ybGQ=

console.log(Buffer.from('fhqwhgads', 'utf8'));
// Prints: <Buffer 66 68 71 77 68 67 61 64 73>
console.log(Buffer.from('fhqwhgads', 'utf16le'));
// Prints: <Buffer 66 00 68 00 71 00 77 00 68 00 67 00 61 00 64 00 73 00>
```

----------------------------------------

TITLE: Resetting Mock Timers (MJS/CJS)
DESCRIPTION: Provides examples for explicitly calling `mock.timers.reset()`. This function restores the default behavior of all mocks previously created by this `MockTimers` instance and disassociates them. Note that `timers.reset()` is automatically called after each test completes on the test context's `MockTracker`. Presented in both MJS and CJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_49

LANGUAGE: mjs
CODE:
```
import { mock } from 'node:test';
mock.timers.reset();
```

LANGUAGE: cjs
CODE:
```
const { mock } = require('node:test');
mock.timers.reset();
```

----------------------------------------

TITLE: Measuring Dependency Load Time with PerformanceObserver and performance.timerify (ESM) - JavaScript
DESCRIPTION: Shows how to measure the time it takes to dynamically import a module using performance.timerify and PerformanceObserver in an ESM context. Needs Node.js with 'node:perf_hooks'. The PerformanceObserver logs import durations. Inputs are module names for import, and outputs are timing information for each import. Highlights module load profiling for asynchronous imports, and requires the observed module ('some-module') to be available.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_22

LANGUAGE: JavaScript
CODE:
```
```mjs\nimport { performance, PerformanceObserver } from 'node:perf_hooks';\n\n// Activate the observer\nconst obs = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  entries.forEach((entry) => {\n    console.log(`import('${entry[0]}')`, entry.duration);\n  });\n  performance.clearMarks();\n  performance.clearMeasures();\n  obs.disconnect();\n});\nobs.observe({ entryTypes: ['function'], buffered: true });\n\nconst timedImport = performance.timerify(async (module) => {\n  return await import(module);\n});\n\nawait timedImport('some-module');\n```
```

----------------------------------------

TITLE: Main Entry Point Export using Exports Field Only (JSON)
DESCRIPTION: Shows the recommended way for new packages to declare the main entry point using only the exports field in package.json. This approach ensures that only the defined entry point is accessible to importers; all other subpaths are blocked, enhancing encapsulation. Supported in all modern versions of Node.js, older runtimes may need both main and exports fields for compatibility.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
{
  "exports": "./index.js"
}
```

----------------------------------------

TITLE: Requesting and Decompressing HTTP Responses with zlib (ESM, JavaScript/Node.js)
DESCRIPTION: This ESM-style JavaScript snippet demonstrates how to make an HTTP request from a Node.js client using various Accept-Encoding values, and how to handle decompression of the HTTP response stream using node:zlib. Dependencies include the core Node modules: fs, zlib, http, process, and stream. The code selects the correct decompression pipeline (Brotli, gzip, or deflate) based on the server's Content-Encoding header. Input parameters include the hostname, endpoint path, port, and encodings to accept; output is the decompressed payload written to disk; error handling is performed in the pipeline handler. Limitations: This example is for demonstration and omits deeper error checking and caching for performance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_10

LANGUAGE: mjs
CODE:
```
// Client request example\nimport fs from 'node:fs';\nimport zlib from 'node:zlib';\nimport http from 'node:http';\nimport process from 'node:process';\nimport { pipeline } from 'node:stream';\n\nconst request = http.get({ host: 'example.com',\n                           path: '/',\n                           port: 80,\n                           headers: { 'Accept-Encoding': 'br,gzip,deflate' } });\nrequest.on('response', (response) => {\n  const output = fs.createWriteStream('example.com_index.html');\n\n  const onError = (err) => {\n    if (err) {\n      console.error('An error occurred:', err);\n      process.exitCode = 1;\n    }\n  };\n\n  switch (response.headers['content-encoding']) {\n    case 'br':\n      pipeline(response, zlib.createBrotliDecompress(), output, onError);\n      break;\n    // Or, just use zlib.createUnzip() to handle both of the following cases:\n    case 'gzip':\n      pipeline(response, zlib.createGunzip(), output, onError);\n      break;\n    case 'deflate':\n      pipeline(response, zlib.createInflate(), output, onError);\n      break;\n    default:\n      pipeline(response, output, onError);\n      break;\n  }\n});
```

----------------------------------------

TITLE: Replacing deprecated Buffer constructors with Buffer.from / Buffer.alloc (JavaScript)
DESCRIPTION: These patterns illustrate how to migrate deprecated Buffer and new Buffer usage to modern APIs. For numeric arguments, Buffer.alloc(number) should be used for zero-filled buffers. For string or other input, Buffer.from() (with optional encoding) is used. This refactoring improves security and performance on supported Node.js versions (≥ 4.5.0). No dependencies besides Node.js API, but eslint rules can help enforcement.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/safer-buffer/Porting-Buffer.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
// For `new Buffer(number)`, replace it with `Buffer.alloc(number)`.
// For `new Buffer(string)` or `new Buffer(string, encoding)`, replace with `Buffer.from(string)` or `Buffer.from(string, encoding)`.
// For other argument types, replace `new Buffer(...arguments)` with `Buffer.from(...arguments)`.
```

----------------------------------------

TITLE: Reading UInt32BE from Buffer - Node.js
DESCRIPTION: Demonstrates reading an unsigned, big-endian 32-bit integer from a Buffer using `readUInt32BE`. It shows reading from a buffer created with hex values and converting the output to a hex string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_67

LANGUAGE: JavaScript (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);

console.log(buf.readUInt32BE(0).toString(16));
// Prints: 12345678
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);

console.log(buf.readUInt32BE(0).toString(16));
// Prints: 12345678
```

----------------------------------------

TITLE: Generating HMAC Key with Node.js Crypto Module
DESCRIPTION: Demonstrates how to asynchronously generate a new random HMAC secret key using the crypto.generateKey function. The example shows both ES module and CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_64

LANGUAGE: JavaScript
CODE:
```
const {
  generateKey,
} = await import('node:crypto');

generateKey('hmac', { length: 512 }, (err, key) => {
  if (err) throw err;
  console.log(key.export().toString('hex'));  // 46e..........620
});
```

LANGUAGE: JavaScript
CODE:
```
const {
  generateKey,
} = require('node:crypto');

generateKey('hmac', { length: 512 }, (err, key) => {
  if (err) throw err;
  console.log(key.export().toString('hex'));  // 46e..........620
});
```

----------------------------------------

TITLE: Mocking setTimeout using Global Mock Timers - CommonJS
DESCRIPTION: Provides the CommonJS example for mocking the global `setTimeout` function using `mock.timers`. It follows the same pattern as the ES Module version, enabling specific timer APIs, using `tick` to advance time, and asserting the execution of the delayed callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_25

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { mock, test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', () => {
  const fn = mock.fn();

  // Optionally choose what to mock
  mock.timers.enable({ apis: ['setTimeout'] });
  setTimeout(fn, 9999);
  assert.strictEqual(fn.mock.callCount(), 0);

  // Advance in time
  mock.timers.tick(9999);
  assert.strictEqual(fn.mock.callCount(), 1);

  // Reset the globally tracked mocks.
  mock.timers.reset();

  // If you call reset mock instance, it will also reset timers instance
  mock.reset();
});
```

----------------------------------------

TITLE: Creating Buffer from TypedArray Buffer Property with Buffer.from (Node.js)
DESCRIPTION: Illustrates creating a `Buffer` from the `.buffer` property of a `TypedArray` view. It shows that the resulting `Buffer` may represent the full underlying `ArrayBuffer`, potentially extending beyond the original `TypedArray`'s defined range or offset. Highlights examples for both MJS and CJS module systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_30

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const arrA = Uint8Array.from([0x63, 0x64, 0x65, 0x66]); // 4 elements
const arrB = new Uint8Array(arrA.buffer, 1, 2); // 2 elements
console.log(arrA.buffer === arrB.buffer); // true

const buf = Buffer.from(arrB.buffer);
console.log(buf);
// Prints: <Buffer 63 64 65 66>
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const arrA = Uint8Array.from([0x63, 0x64, 0x65, 0x66]); // 4 elements
const arrB = new Uint8Array(arrA.buffer, 1, 2); // 2 elements
console.log(arrA.buffer === arrB.buffer); // true

const buf = Buffer.from(arrB.buffer);
console.log(buf);
// Prints: <Buffer 63 64 65 66>
```

----------------------------------------

TITLE: Formatting Dates Using Intl.DateTimeFormat - ECMAScript - JavaScript
DESCRIPTION: This code demonstrates how to use the Intl.DateTimeFormat constructor in JavaScript to format dates according to different locales. It compares formatting the month name in English and Spanish on a Node.js build with the 'small-icu' option, illustrating how locale support may be limited depending on ICU data availability. The example prints results for both English and Spanish, and details potential outcomes depending on the ICU data configuration. No external dependencies are needed beyond Node.js with appropriate ICU configuration.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/intl.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
const january = new Date(9e8);
const english = new Intl.DateTimeFormat('en', { month: 'long' });
const spanish = new Intl.DateTimeFormat('es', { month: 'long' });

console.log(english.format(january));
// Prints "January"
console.log(spanish.format(january));
// Prints either "M01" or "January" on small-icu, depending on the user’s default locale
// Should print "enero"
```

----------------------------------------

TITLE: Running only selected tests - Node.js Test Runner
DESCRIPTION: Demonstrates how to use the `only` option (on `test`, `it`, `describe`) or the `t.runOnly(true)` method to execute only a specified subset of tests when Node.js is run with the `--test-only` flag. Tests without the `only` option are skipped in this mode. Requires the `assert` module for assertions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_9

LANGUAGE: javascript
CODE:
```
// Assume Node.js is run with the --test-only command-line option.
// The suite's 'only' option is set, so these tests are run.
test('this test is run', { only: true }, async (t) => {
  // Within this test, all subtests are run by default.
  t.test('running subtest');

  // The test context can be updated to run subtests with the 'only' option.
  t.runOnly(true);
  t.test('this subtest is now skipped');
  t.test('this subtest is run', { only: true });

  // Switch the context back to execute all tests.
  t.runOnly(false);
  t.test('this subtest is now run');

  // Explicitly do not run these tests.
  t.test('skipped subtest 3', { only: false });
  t.test('skipped subtest 4', { skip: true });
});

// The 'only' option is not set, so this test is skipped.
test('this test is not run', () => {
  // This code is not run.
  throw new Error('fail');
});

describe('a suite', () => {
  // The 'only' option is set, so this test is run.
  it('this test is run', { only: true }, () => {
    // This code is run.
  });

  it('this test is not run', () => {
    // This code is not run.
    throw new Error('fail');
  });
});

describe.only('a suite', () => {
  // The 'only' option is set, so this test is run.
  it('this test is run', () => {
    // This code is run.
  });

  it('this test is run', () => {
    // This code is run.
  });
});
```

----------------------------------------

TITLE: Calling a Thread-Safe Function in Node-API
DESCRIPTION: Use napi_call_threadsafe_function() to initiate a call into JavaScript from any thread. This function can be configured to block or not block when the queue is full, and should not be called with napi_tsfn_blocking from a JavaScript thread to avoid deadlocks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_209

LANGUAGE: C
CODE:
```
napi_status napi_call_threadsafe_function(napi_threadsafe_function func,
                                      void* data,
                                      napi_threadsafe_function_call_mode is_blocking);
```

----------------------------------------

TITLE: Taking Initial Chunks from a Readable Stream using readable.take in Node.js (MJS)
DESCRIPTION: This snippet demonstrates the use of the `Readable.take(limit)` method to create a new stream consisting of only the first `limit` chunks from the original readable stream. It requires the `node:stream` module. The example takes the first 2 elements from a stream created via `Readable.from` and collects them into an array using `toArray()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_52

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';

await Readable.from([1, 2, 3, 4]).take(2).toArray(); // [1, 2]
```

----------------------------------------

TITLE: Using async generator as pipeline source in CommonJS
DESCRIPTION: Example demonstrating how to use an async generator as the source in a pipeline with CommonJS, properly handling the abort signal. The generator function receives a signal parameter that should be passed to any long-running operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');

async function run() {
  await pipeline(
    async function* ({ signal }) {
      await someLongRunningfn({ signal });
      yield 'asd';
    },
    fs.createWriteStream('uppercase.txt'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
```

----------------------------------------

TITLE: Reading Big-Endian Double from Buffer (Node.js) - JavaScript
DESCRIPTION: Shows how to read a 64-bit double-precision floating-point number from a Buffer using big-endian byte order with the `readDoubleBE()` method. The example creates a buffer with known byte values and prints the resulting double. Requires the Buffer class.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_63

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);

console.log(buf.readDoubleBE(0));
// Prints: 8.20788039913184e-304
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);

console.log(buf.readDoubleBE(0));
// Prints: 8.20788039913184e-304
```

----------------------------------------

TITLE: Parsing .env File Content into an Object Using parseEnv - JavaScript (ESM)
DESCRIPTION: Demonstrates parsing the contents of a .env file string to an object using the parseEnv utility in ES Module style. Consumes a raw .env format string, handling repeated keys by overriding earlier values. Returns an object with final variable assignments. Requires Node.js v20.12.0+ or v21.7.0+. Input is a multi-line environment string; output is an object of environment variables.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_41

LANGUAGE: JavaScript
CODE:
```
import { parseEnv } from 'node:util';

parseEnv('HELLO=world\nHELLO=oh my\n');
// Returns: { HELLO: 'oh my' }
```

----------------------------------------

TITLE: Specifying NPM Version Requirements
DESCRIPTION: Defines the compatible npm version required for package installation. Uses semver syntax to specify version constraints.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_34

LANGUAGE: json
CODE:
```
{
  "engines": {
    "npm": "~1.0.20"
  }
}
```

----------------------------------------

TITLE: Creating Buffer from Byte Array with Buffer.from (Node.js)
DESCRIPTION: Demonstrates creating a new `Buffer` instance by providing an array of integer byte values (0-255). This method allocates new memory and copies the bytes from the input array. Highlights examples for both MJS and CJS module systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_27

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

// Creates a new Buffer containing the UTF-8 bytes of the string 'buffer'.
const buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

// Creates a new Buffer containing the UTF-8 bytes of the string 'buffer'.
const buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);
```

----------------------------------------

TITLE: Comprehensive Async Hooks Example in Node.js (CommonJS)
DESCRIPTION: Demonstrates a detailed example of using Async Hooks in Node.js to track the lifecycle of asynchronous resources, including init, before, after, and destroy callbacks, using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
const async_hooks = require('node:async_hooks');
const fs = require('node:fs');
const net = require('node:net');
const { fd } = process.stdout;

let indent = 0;
async_hooks.createHook({
  init(asyncId, type, triggerAsyncId) {
    const eid = async_hooks.executionAsyncId();
    const indentStr = ' '.repeat(indent);
    fs.writeSync(
      fd,
      `${indentStr}${type}(${asyncId}):` +
      ` trigger: ${triggerAsyncId} execution: ${eid}\n`);
  },
  before(asyncId) {
    const indentStr = ' '.repeat(indent);
    fs.writeSync(fd, `${indentStr}before:  ${asyncId}\n`);
    indent += 2;
  },
  after(asyncId) {
    indent -= 2;
    const indentStr = ' '.repeat(indent);
    fs.writeSync(fd, `${indentStr}after:  ${asyncId}\n`);
  },
  destroy(asyncId) {
    const indentStr = ' '.repeat(indent);
    fs.writeSync(fd, `${indentStr}destroy:  ${asyncId}\n`);
  },
}).enable();

net.createServer(() => {}).listen(8080, () => {
  // Let's wait 10ms before logging the server started.
  setTimeout(() => {
    console.log('>>>', async_hooks.executionAsyncId());
  }, 10);
});
```

----------------------------------------

TITLE: Creating Buffer View from ArrayBuffer with Buffer.from (Node.js)
DESCRIPTION: Illustrates creating a `Buffer` instance that shares the same underlying memory as an `ArrayBuffer` (obtained from a `Uint16Array`'s buffer). Changes made to the original TypedArray are reflected in the Buffer because they share the same memory. Highlights examples for both MJS and CJS module systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_28

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const arr = new Uint16Array(2);

arr[0] = 5000;
arr[1] = 4000;

// Shares memory with `arr`.
const buf = Buffer.from(arr.buffer);

console.log(buf);
// Prints: <Buffer 88 13 a0 0f>

// Changing the original Uint16Array changes the Buffer also.
arr[1] = 6000;

console.log(buf);
// Prints: <Buffer 88 13 70 17>
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const arr = new Uint16Array(2);

arr[0] = 5000;
arr[1] = 4000;

// Shares memory with `arr`.
const buf = Buffer.from(arr.buffer);

console.log(buf);
// Prints: <Buffer 88 13 a0 0f>

// Changing the original Uint16Array changes the Buffer also.
arr[1] = 6000;

console.log(buf);
// Prints: <Buffer 88 13 70 17>
```

----------------------------------------

TITLE: Deleting References in Node-API (C)
DESCRIPTION: Deletes an existing reference. Can be called even with pending JavaScript exceptions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_55

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_delete_reference(napi_env env, napi_ref ref);
```

----------------------------------------

TITLE: Fixing vulnerabilities with npm audit
DESCRIPTION: Command to scan the project for vulnerabilities and automatically install any compatible updates to vulnerable dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ npm audit fix
```

----------------------------------------

TITLE: Implementing Inter-Process Communication in a Node.js Cluster
DESCRIPTION: This example shows how to implement inter-process communication in a Node.js cluster. It keeps a count in the primary process of HTTP requests received by workers, demonstrating message passing between primary and worker processes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import cluster from 'node:cluster';
import http from 'node:http';
import { availableParallelism } from 'node:os';
import process from 'node:process';

if (cluster.isPrimary) {

  // Keep track of http requests
  let numReqs = 0;
  setInterval(() => {
    console.log(`numReqs = ${numReqs}`);
  }, 1000);

  // Count requests
  function messageHandler(msg) {
    if (msg.cmd && msg.cmd === 'notifyRequest') {
      numReqs += 1;
    }
  }

  // Start workers and listen for messages containing notifyRequest
  const numCPUs = availableParallelism();
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  for (const id in cluster.workers) {
    cluster.workers[id].on('message', messageHandler);
  }

} else {

  // Worker processes have a http server.
  http.Server((req, res) => {
    res.writeHead(200);
    res.end('hello world\n');

    // Notify primary about the request
    process.send({ cmd: 'notifyRequest' });
  }).listen(8000);
}
```

----------------------------------------

TITLE: Allocating Uninitialized Buffer using Buffer.allocUnsafe (MJS)
DESCRIPTION: Demonstrates allocating a Node.js Buffer of a specified size using `Buffer.allocUnsafe`. This method does not initialize the buffer's contents, which may contain sensitive data, but is faster than `Buffer.alloc`. It also shows how to manually zero-fill the buffer afterwards. Requires importing `Buffer` from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(10);

console.log(buf);
// Prints (contents may vary): <Buffer a0 8b 28 3f 01 00 00 00 50 32>

buf.fill(0);

console.log(buf);
// Prints: <Buffer 00 00 00 00 00 00 00 00 00 00>
```

----------------------------------------

TITLE: Measuring Performance with Performance Marks and Observer in Node.js (CJS, JavaScript)
DESCRIPTION: Shows how to use Node.js's perf_hooks module with CommonJS require syntax to mark, measure, and observe intervals. An asynchronous IIFE mimics a long-running process by pausing for five seconds, then measures durations between predefined marks; a PerformanceObserver is set up to log measured entries. Requires Node.js 8.5.0+ in CJS mode. Expects no input except internal marks; produces console output of measured durations. Calling performance.clearMarks() is omitted, so marks accumulate unless cleared elsewhere.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const { PerformanceObserver, performance } = require('node:perf_hooks');

const obs = new PerformanceObserver((items) => {
  console.log(items.getEntries()[0].duration);
});
obs.observe({ type: 'measure' });
performance.measure('Start to Now');

performance.mark('A');
(async function doSomeLongRunningProcess() {
  await new Promise((r) => setTimeout(r, 5000));
  performance.measure('A to Now', 'A');

  performance.mark('B');
  performance.measure('A to B', 'A', 'B');
})();
```

----------------------------------------

TITLE: Handling Unhandled Promise Rejections in Node.js (CommonJS)
DESCRIPTION: Example of attaching an 'unhandledRejection' event handler in Node.js using CommonJS require. The handler logs details about promises that were rejected without any error handling attached. The example demonstrates a case with a typo that would cause an unhandled rejection.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
const process = require('node:process');

process.on('unhandledRejection', (reason, promise) => {
  console.log('Unhandled Rejection at:', promise, 'reason:', reason);
  // Application specific logging, throwing an error, or other logic here
});

somePromise.then((res) => {
  return reportToUser(JSON.pasre(res)); // Note the typo (`pasre`)
}); // No `.catch()` or `.then()`
```

----------------------------------------

TITLE: Demonstrating Package Name Formats in Markdown
DESCRIPTION: This snippet shows different formats for specifying package names, including scoped packages, version tags, and version ranges.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/package-spec.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
* `[<@scope>/]<pkg>`
* `[<@scope>/]<pkg>@<tag>`
* `[<@scope>/]<pkg>@<version>`
* `[<@scope>/]<pkg>@<version range>`
```

----------------------------------------

TITLE: Creating URLSearchParams from String in JavaScript
DESCRIPTION: Shows how to initialize URLSearchParams with a query string, which can optionally have a leading question mark. The example demonstrates parameter retrieval and string representation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
let params;

params = new URLSearchParams('user=abc&query=xyz');
console.log(params.get('user'));
// Prints 'abc'
console.log(params.toString());
// Prints 'user=abc&query=xyz'

params = new URLSearchParams('?user=abc&query=xyz');
console.log(params.toString());
// Prints 'user=abc&query=xyz'
```

----------------------------------------

TITLE: Reading Subprocess stdout Stream in Node.js
DESCRIPTION: Shows how to read data from a child process stdout stream by attaching a data event listener. Demonstrates usage in both CommonJS and ES modules syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_43

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');

const subprocess = spawn('ls');

subprocess.stdout.on('data', (data) => {
  console.log(`Received chunk ${data}`); 
});
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';

const subprocess = spawn('ls');

subprocess.stdout.on('data', (data) => {
  console.log(`Received chunk ${data}`);
});
```

----------------------------------------

TITLE: Parsing Query Strings to Objects Using querystring.parse - Node.js JavaScript
DESCRIPTION: This example demonstrates how to use 'querystring.parse' to convert a URL query string into a JavaScript object. The function splits the query string into key-value pairs and handles cases where the same key appears multiple times by storing the values in an array. The input is a query string and the output is an object without an Object prototype, which may affect typical object property checks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/querystring.md#2025-04-23_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "foo": "bar",
  "abc": ["xyz", "123"]
}
```

----------------------------------------

TITLE: Exports Field Sugar for Single Main Entry Point (JSON)
DESCRIPTION: Illustrates two equivalent forms of declaring a single main export in package.json: using either exports as an object with a dot key or directly as a string. This sugar simplifies configuration and is supported by Node.js v12.11.0 and above.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
{
  "exports": {
    ".": "./index.js"
  }
}
```

LANGUAGE: json
CODE:
```
{
  "exports": "./index.js"
}
```

----------------------------------------

TITLE: Subscribing to beforeExit and exit Events in Node.js (ECMAScript Modules) - JavaScript
DESCRIPTION: Demonstrates setting up event listeners for 'beforeExit' and 'exit' events on the Node.js process object using ESM syntax. Both listeners log the exit code when triggered. Expected input is none; output is messages to the console in the correct order before process termination. Dependencies: native 'process' module. Notes: Only synchronous operations should be performed in 'exit' handlers, and 'beforeExit' may be used to schedule further async tasks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_2

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

process.on('beforeExit', (code) => {
  console.log('Process beforeExit event with code: ', code);
});

process.on('exit', (code) => {
  console.log('Process exit event with code: ', code);
});

console.log('This message is displayed first.');

// Prints:
// This message is displayed first.
// Process beforeExit event with code: 0
// Process exit event with code: 0
```

----------------------------------------

TITLE: Executing npm test command in Bash
DESCRIPTION: Demonstrates the syntax for running the npm test command, including optional arguments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-test.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm test [-- <args>]
```

----------------------------------------

TITLE: Attaching Static Methods to Default Export for Named Export Compatibility (Node.js - JavaScript)
DESCRIPTION: An ES module exports a function and a default class, then attaches the distance function as a static property of the Point class. The class is also exported under 'module.exports' so CommonJS consumers can access both the class as default and distance via static property. ESM and CommonJS consumers can both access distance via Point.distance. No external dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_9

LANGUAGE: mjs
CODE:
```
export function distance(a, b) { return Math.sqrt((b.x - a.x) ** 2 + (b.y - a.y) ** 2); }\n\nexport default class Point {\n  constructor(x, y) { this.x = x; this.y = y; }\n  static distance = distance;\n}\n\nexport { Point as 'module.exports' }
```

----------------------------------------

TITLE: Specifying Repository Directory for Monorepos in package.json (JSON)
DESCRIPTION: This `package.json` snippet illustrates how to specify the location of a package within a monorepo using the `repository` field. The `directory` property indicates the subpath (`workspaces/libnpmpublish`) within the repository URL where the package's `package.json` is located.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_13

LANGUAGE: json
CODE:
```
{
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/cli.git",
    "directory": "workspaces/libnpmpublish"
  }
}
```

----------------------------------------

TITLE: Checking Node.js and npm versions using Bash commands
DESCRIPTION: These commands display the installed versions of Node.js and npm. They are used to verify if Node.js and npm are already installed on the system and to check their versions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/install.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
node -v
npm -v
```

----------------------------------------

TITLE: Defining a Scoped Package Dependency in package.json
DESCRIPTION: Illustrates how to specify a scoped package as a dependency in the package.json file, including the scope in the package name and version.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scope.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
"dependencies": {
  "@myorg/mypackage": "^1.3.0"
}
```

----------------------------------------

TITLE: Creating Worker Instances with the Worker Constructor in Node.js
DESCRIPTION: The Worker constructor initializes a new worker thread in Node.js. It accepts a filename path and various options to configure the worker's environment, resources, and behavior.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
new Worker(filename[, options])
```

----------------------------------------

TITLE: Importing Node.js Zlib Module using ES Modules
DESCRIPTION: Demonstrates how to import the `zlib` module in a Node.js application using the ES Module (`import`) syntax. This is the standard way to include modules in modern JavaScript projects configured for ES Modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import os from 'node:zlib';
```

----------------------------------------

TITLE: Basic Readline Usage with Promises and ES Modules in Node.js
DESCRIPTION: Illustrates a simple example using the promise-based `readline` API with ES Modules. It creates an interface bound to `process.stdin` and `process.stdout`, asynchronously asks a question using `rl.question`, logs the response, and then closes the interface. Requires Node.js environment with ES Module support.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import * as readline from 'node:readline/promises';
import { stdin as input, stdout as output } from 'node:process';

const rl = readline.createInterface({ input, output });

const answer = await rl.question('What do you think of Node.js? ');

console.log(`Thank you for your valuable feedback: ${answer}`);

rl.close();
```

----------------------------------------

TITLE: Viewing Specific Package Version Dependencies
DESCRIPTION: Demonstrates how to view dependencies of a specific version of a package using npm view command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-view.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm view ronn@0.3.5 dependencies
```

----------------------------------------

TITLE: Asynchronous Event Handling in Node.js (CommonJS)
DESCRIPTION: This example shows how to handle events asynchronously in Node.js using CommonJS modules. It demonstrates the use of setImmediate() to switch to an asynchronous mode of operation within the event listener.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', (a, b) => {
  setImmediate(() => {
    console.log('this happens asynchronously');
  });
});
myEmitter.emit('event', 'a', 'b');
```

----------------------------------------

TITLE: Initializing and Using EventEmitter in Node.js (CommonJS)
DESCRIPTION: This snippet shows how to require, extend, and use the EventEmitter class in Node.js using CommonJS modules. It demonstrates creating a custom emitter, attaching a listener, and emitting an event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
const EventEmitter = require('node:events');

class MyEmitter extends EventEmitter {}

const myEmitter = new MyEmitter();
myEmitter.on('event', () => {
  console.log('an event occurred!');
});
myEmitter.emit('event');
```

----------------------------------------

TITLE: Using Top-Level Await for Export (JavaScript)
DESCRIPTION: Example demonstrating the use of `await` directly within the top level of an ES module. The value of the export (`five`) is determined asynchronously after the promise resolves.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_17

LANGUAGE: javascript
CODE:
```
export const five = await Promise.resolve(5);
```

----------------------------------------

TITLE: Opening a File as a Blob using CommonJS (cjs) in Node.js
DESCRIPTION: This snippet demonstrates how to use the `fs.openAsBlob` function within a CommonJS module context to asynchronously open a file specified by path and represent its contents as a Blob object. It uses an async IIFE (Immediately Invoked Function Expression) to handle the promise returned by `openAsBlob`. It also shows accessing the Blob's data via `arrayBuffer()` and `stream()`. Requires the `node:fs` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_67

LANGUAGE: cjs
CODE:
```
const { openAsBlob } = require('node:fs');

(async () => {
  const blob = await openAsBlob('the.file.txt');
  const ab = await blob.arrayBuffer();
  blob.stream();
})();
```

----------------------------------------

TITLE: Allocating Buffer with String Fill and Encoding using Buffer.alloc (MJS)
DESCRIPTION: Demonstrates allocating a new Node.js Buffer of a specified size and initializing it by filling it with a given string interpreted using a specific encoding (base64 in this case). Requires importing `Buffer` from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');

console.log(buf);
// Prints: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>
```

----------------------------------------

TITLE: Retrieving Blob Data as Uint8Array - JavaScript
DESCRIPTION: Demonstrates using the asynchronous blob.bytes() method to obtain the raw byte data of a Blob instance as a Promise that resolves with a Uint8Array.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_10

LANGUAGE: js
CODE:
```
const blob = new Blob(['hello']);
blob.bytes().then((bytes) => {
  console.log(bytes); // Outputs: Uint8Array(5) [ 104, 101, 108, 108, 111 ]
});
```

----------------------------------------

TITLE: Reading Unsigned Little-Endian 64-bit Integer from Buffer (Node.js) - JavaScript
DESCRIPTION: Shows how to read an unsigned 64-bit integer (represented as a `bigint`) from a Buffer using little-endian byte order with the `readBigUInt64LE()` method. The example reads a known value from a created buffer and prints the resulting `bigint`. Requires the Buffer class and supports `bigint`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_62

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);

console.log(buf.readBigUInt64LE(0));
// Prints: 18446744069414584320n
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);

console.log(buf.readBigUInt64LE(0));
// Prints: 18446744069414584320n
```

----------------------------------------

TITLE: Create Basic HTTP/2 Server (MJS)
DESCRIPTION: Demonstrates creating an unencrypted HTTP/2 server using `http2.createServer` in ES module syntax. It sets up an event listener for incoming streams (`'stream'`), responds with a 200 status and simple HTML, and starts the server listening on port 8000.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_41

LANGUAGE: javascript
CODE:
```
import { createServer } from 'node:http2';

// Create an unencrypted HTTP/2 server.
// Since there are no browsers known that support
// unencrypted HTTP/2, the use of `createSecureServer()`
// is necessary when communicating with browser clients.
const server = createServer();

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.end('<h1>Hello World</h1>');
});

server.listen(8000);
```

----------------------------------------

TITLE: Setting a Single or Multiple HTTP Response Headers in Node.js (JavaScript)
DESCRIPTION: Demonstrates setting single and multiple (multi-value) headers using setHeader in http.ServerResponse. Inputs are the header name and value (string, number, or array of strings for multivalued). Shows mutation and replacement behaviors, and enables method chaining. Invalid header names/values will result in a TypeError. Multiple headers set with setHeader will be overridden by those set in writeHead for identical keys.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_36

LANGUAGE: js
CODE:
```
response.setHeader('Content-Type', 'text/html');

```

LANGUAGE: js
CODE:
```
response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);

```

LANGUAGE: js
CODE:
```
// Returns content-type = text/plain
const server = http.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('ok');
});

```

----------------------------------------

TITLE: Loading .env Files using process.loadEnvFile in JavaScript
DESCRIPTION: Demonstrates loading environment variables from a `.env` file using the `process.loadEnvFile()` function. It shows how to load the default `.env` file in the current directory and how to load a `.env` file from a specific path. This function modifies the `process.env` object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
process.loadEnvFile()
```

LANGUAGE: javascript
CODE:
```
process.loadEnvFile('./development.env')
```

----------------------------------------

TITLE: Configuring Stdio Options for Child Process (MJS)
DESCRIPTION: This ES Module snippet demonstrates various configurations for the `stdio` option. It shows using `stdio: 'inherit'` for the child to share the parent's stdio, configuring specific streams like sharing only stderr (`['pipe', 'pipe', process.stderr]`), and setting up custom file descriptor pipes, such as creating an extra pipe on fd 4 (`['pipe', null, null, null, 'pipe']`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_30

LANGUAGE: mjs
CODE:
```
import { spawn } from 'node:child_process';
import process from 'node:process';

// Child will use parent's stdios.
spawn('prg', [], { stdio: 'inherit' });

// Spawn child sharing only stderr.
spawn('prg', [], { stdio: ['pipe', 'pipe', process.stderr] });

// Open an extra fd=4, to interact with programs presenting a
// startd-style interface.
spawn('prg', [], { stdio: ['pipe', null, null, null, 'pipe'] });
```

----------------------------------------

TITLE: Creating a TCP Server and Handling Connections
DESCRIPTION: Shows how to create a TCP server, handle connections, and log the server's address information.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
const server = net.createServer((socket) => {
  socket.end('goodbye\n');
}).on('error', (err) => {
  // Handle errors here.
  throw err;
});

// Grab an arbitrary unused port.
server.listen(() => {
  console.log('opened server on', server.address());
});
```

----------------------------------------

TITLE: Importing Node.js path module (ES Modules)
DESCRIPTION: Imports the Node.js `path` module using the ES Modules `import` syntax. This makes the path utility functions available for use in the script.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_1

LANGUAGE: mjs
CODE:
```
import path from 'node:path';
```

----------------------------------------

TITLE: Running Node.js in Watch Mode with Specific Paths (Bash)
DESCRIPTION: Starts Node.js in watch mode and explicitly specifies directories or files to watch using `--watch-path`. This disables watching of required or imported modules. Multiple `--watch-path` options can be used.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_30

LANGUAGE: bash
CODE:
```
node --watch-path=./src --watch-path=./tests index.js
```

----------------------------------------

TITLE: Using PerformanceObserver with type Option in ES Modules
DESCRIPTION: Demonstrates creating multiple performance marks and observing them with the 'type' option in ES Modules. The observer is called asynchronously after all marks are created.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
import { performance, PerformanceObserver } from 'node:perf_hooks';

const obs = new PerformanceObserver((list, observer) => {
  // Called once asynchronously. `list` contains three items.
});
obs.observe({ type: 'mark' });

for (let n = 0; n < 3; n++)
  performance.mark(`test${n}`);
```

----------------------------------------

TITLE: Writing various test types - Node.js Test Runner
DESCRIPTION: Illustrates different patterns for writing tests with the `node:test` function, including synchronous tests (pass on no throw, fail on throw), asynchronous tests using Promises (pass on resolve, fail on reject), and callback-based tests (pass on `done()` with falsy first arg, fail on `done()` with truthy first arg). Requires the `assert` module for making assertions within tests.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_2

LANGUAGE: javascript
CODE:
```
test('synchronous passing test', (t) => {
  // This test passes because it does not throw an exception.
  assert.strictEqual(1, 1);
});

test('synchronous failing test', (t) => {
  // This test fails because it throws an exception.
  assert.strictEqual(1, 2);
});

test('asynchronous passing test', async (t) => {
  // This test passes because the Promise returned by the async
  // function is settled and not rejected.
  assert.strictEqual(1, 1);
});

test('asynchronous failing test', async (t) => {
  // This test fails because the Promise returned by the async
  // function is rejected.
  assert.strictEqual(1, 2);
});

test('failing test using Promises', (t) => {
  // Promises can be used directly as well.
  return new Promise((resolve, reject) => {
    setImmediate(() => {
      reject(new Error('this will cause the test to fail'));
    });
  });
});

test('callback passing test', (t, done) => {
  // done() is the callback function. When the setImmediate() runs, it invokes
  // done() with no arguments.
  setImmediate(done);
});

test('callback failing test', (t, done) => {
  // When the setImmediate() runs, done() is invoked with an Error object and
  // the test fails.
  setImmediate(() => {
    done(new Error('callback failure'));
  });
});
```

----------------------------------------

TITLE: Importing Cryptographic Keys with subtle.importKey in Node.js
DESCRIPTION: The importKey method converts external key data into a CryptoKey object. It supports various formats (raw, pkcs8, spki, jwk) and algorithms. The method returns a Promise that resolves with the created CryptoKey if the import is successful.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
subtle.importKey(format, keyData, algorithm, extractable, keyUsages)
```

----------------------------------------

TITLE: Recommended Pattern for Reading Files in Node.js
DESCRIPTION: Example of the recommended pattern for reading from a file by directly attempting to open it with the appropriate flags and handling any errors that occur.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_47

LANGUAGE: javascript
CODE:
```
import { open, close } from 'node:fs';

open('myfile', 'r', (err, fd) => {
  if (err) {
    if (err.code === 'ENOENT') {
      console.error('myfile does not exist');
      return;
    }

    throw err;
  }

  try {
    readMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
```

----------------------------------------

TITLE: Making an HTTP GET Request and Handling JSON Response in Node.js
DESCRIPTION: Illustrates how to use http.get() to make a GET request to a local server, handle the response, and parse JSON data. It also includes error handling and response validation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_58

LANGUAGE: JavaScript
CODE:
```
http.get('http://localhost:8000/', (res) => {
  const { statusCode } = res;
  const contentType = res.headers['content-type'];

  let error;
  // Any 2xx status code signals a successful response but
  // here we're only checking for 200.
  if (statusCode !== 200) {
    error = new Error('Request Failed.\n' +
                      `Status Code: ${statusCode}`);
  } else if (!/^application\/json/.test(contentType)) {
    error = new Error('Invalid content-type.\n' +
                      `Expected application/json but received ${contentType}`);
  }
  if (error) {
    console.error(error.message);
    // Consume response data to free up memory
    res.resume();
    return;
  }

  res.setEncoding('utf8');
  let rawData = '';
  res.on('data', (chunk) => { rawData += chunk; });
  res.on('end', () => {
    try {
      const parsedData = JSON.parse(rawData);
      console.log(parsedData);
    } catch (e) {
      console.error(e.message);
    }
  });
}).on('error', (e) => {
  console.error(`Got error: ${e.message}`);
});

// Create a local server to receive data from
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
```

----------------------------------------

TITLE: Registering On-Thread Module Hooks using module.registerHooks() in Node.js
DESCRIPTION: Demonstrates the usage of the newly introduced `module.registerHooks()` API in Node.js to customize module loading behavior. The example shows how to define `resolve` and `load` hooks that modify module specifiers and loaded source code, respectively, for both `require()` (via `createRequire`) and dynamic `import()` calls within the same thread. It relies on `node:assert` for verification, `node:module` for the core API, and `node:fs` for file system operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
```mjs
import assert from 'node:assert';
import { registerHooks, createRequire } from 'node:module';
import { writeFileSync } from 'node:fs';

writeFileSync('./bar.js', 'export const id = 123;', 'utf8');

registerHooks({
  resolve(specifier, context, nextResolve) {
    const replaced = specifier.replace('foo', 'bar');
    return nextResolve(replaced, context);
  },
  load(url, context, nextLoad) {
    const result = nextLoad(url, context);
    return {
      ...result,
      source: result.source.toString().replace('123', '456'),
    };
  },
});

// Checks that it works with require.
const require = createRequire(import.meta.url);
const required = require('./foo.js');  // Redirected by resolve hook to bar.js
assert.strictEqual(required.id, 456);  // Replaced by load hook to 456

// Checks that it works with import.
const imported = await import('./foo.js');  // Redirected by resolve hook to bar.js
assert.strictEqual(imported.id, 456);  // Replaced by load hook to 456
```
```

----------------------------------------

TITLE: Invoking npx with Different Syntax Options (Bash)
DESCRIPTION: Shows the various command-line syntaxes for using the `npx` command. It demonstrates how to run a package executable directly, how to specify the package explicitly using `--package`, and how to execute an arbitrary command string using `-c`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npx.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npx -- <pkg>[@<version>] [args...]
npx --package=<pkg>[@<version>] -- <cmd> [args...]
npx -c '<cmd> [args...]'
npx --package=foo -c '<cmd> [args...]'
```

----------------------------------------

TITLE: Parsing File Paths in Node.js
DESCRIPTION: The path.parse() method breaks a path string into an object containing its components: root, dir, base, name, and ext. It handles both POSIX and Windows path formats correctly.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_33

LANGUAGE: javascript
CODE:
```
path.parse('/home/user/dir/file.txt');
// Returns:
// { root: '/',
//   dir: '/home/user/dir',
//   base: 'file.txt',
//   ext: '.txt',
//   name: 'file' }
```

LANGUAGE: text
CODE:
```
┌─────────────────────┬────────────┐
│          dir        │    base    │
├──────┬              ├──────┬─────┤
│ root │              │ name │ ext │
"  /    home/user/dir / file  .txt "
└──────┴──────────────┴──────┴─────┘
(All spaces in the "" line should be ignored. They are purely for formatting.)
```

LANGUAGE: javascript
CODE:
```
path.parse('C:\\path\\dir\\file.txt');
// Returns:
// { root: 'C:\\',
//   dir: 'C:\\path\\dir',
//   base: 'file.txt',
//   ext: '.txt',
//   name: 'file' }
```

LANGUAGE: text
CODE:
```
┌─────────────────────┬────────────┐
│          dir        │    base    │
├──────┬              ├──────┬─────┤
│ root │              │ name │ ext │
" C:\\      path\\dir   \\ file  .txt "
└──────┴──────────────┴──────┴─────┘
(All spaces in the "" line should be ignored. They are purely for formatting.)
```

----------------------------------------

TITLE: Communicating Between Parent and Child Threads in Node.js
DESCRIPTION: Example demonstrating parent-child thread communication in Node.js using parentPort from worker_threads. The main thread creates a worker and sends a message, while the worker echoes back the received message.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Worker, isMainThread, parentPort } from 'node:worker_threads';

if (isMainThread) {
  const worker = new Worker(new URL(import.meta.url));
  worker.once('message', (message) => {
    console.log(message);  // Prints 'Hello, world!'.
  });
  worker.postMessage('Hello, world!');
} else {
  // When a message from the parent thread is received, send it back:
  parentPort.once('message', (message) => {
    parentPort.postMessage(message);
  });
}
```

LANGUAGE: javascript
CODE:
```
'use strict';

const { Worker, isMainThread, parentPort } = require('node:worker_threads');

if (isMainThread) {
  const worker = new Worker(__filename);
  worker.once('message', (message) => {
    console.log(message);  // Prints 'Hello, world!'.
  });
  worker.postMessage('Hello, world!');
} else {
  // When a message from the parent thread is received, send it back:
  parentPort.once('message', (message) => {
    parentPort.postMessage(message);
  });
}
```

----------------------------------------

TITLE: Using getEntriesByType() with PerformanceObserver in ES Modules
DESCRIPTION: Demonstrates how to use the getEntriesByType() method to filter performance entries by type in ES Modules. Shows retrieving all entries of type 'mark' in chronological order.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
import { performance, PerformanceObserver } from 'node:perf_hooks';

const obs = new PerformanceObserver((perfObserverList, observer) => {
  console.log(perfObserverList.getEntriesByType('mark'));
  /**
   * [
   *   PerformanceEntry {
   *     name: 'test',
   *     entryType: 'mark',
   *     startTime: 55.897834,
   *     duration: 0,
   *     detail: null
   *   },
   *   PerformanceEntry {
   *     name: 'meow',
   *     entryType: 'mark',
   *     startTime: 56.350146,
   *     duration: 0,
   *     detail: null
   *   }
   * ]
   */
  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ type: 'mark' });

performance.mark('test');
performance.mark('meow');
```

----------------------------------------

TITLE: Basic Readline Usage with Callbacks and CommonJS in Node.js
DESCRIPTION: Illustrates a simple example using the callback-based `readline` API with CommonJS. It creates an interface bound to `process.stdin` and `process.stdout`, asks a question using `rl.question` with a callback function to handle the response, logs the answer, and closes the interface within the callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_5

LANGUAGE: cjs
CODE:
```
const readline = require('node:readline');
const { stdin: input, stdout: output } = require('node:process');

const rl = readline.createInterface({ input, output });

rl.question('What do you think of Node.js? ', (answer) => {
  // TODO: Log the answer in a database
  console.log(`Thank you for your valuable feedback: ${answer}`);

  rl.close();
});
```

----------------------------------------

TITLE: Basic GET Request with Undici Client
DESCRIPTION: This example shows how to perform a basic GET request using Undici's request method. It demonstrates how to handle the response including status code, headers, and body, as well as proper resource cleanup with client and server closures.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.end('Hello, World!')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

try {
  const { body, headers, statusCode, trailers } = await client.request({
    path: '/',
    method: 'GET'
  })
  console.log(`response received ${statusCode}`)
  console.log('headers', headers)
  body.setEncoding('utf8')
  body.on('data', console.log)
  body.on('error', console.error)
  body.on('end', () => {
    console.log('trailers', trailers)
  })

  client.close()
  server.close()
} catch (error) {
  console.error(error)
}
```

----------------------------------------

TITLE: File Handle Management with Promise API
DESCRIPTION: Demonstrates proper file handle management using the promise-based fs API with automatic resource cleanup.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_121

LANGUAGE: javascript
CODE:
```
import { open } from 'node:fs/promises';

let file;
try {
  file = await open('/open/some/file.txt', 'r');
  const stat = await file.stat();
  // use stat
} finally {
  await file.close();
}
```

----------------------------------------

TITLE: Writing Buffer Data with FileHandle.write in Node.js (Options Object)
DESCRIPTION: Asynchronously writes data from a Buffer, TypedArray, or DataView to the file using an optional `options` object. The `options` object can specify `offset` (default: 0), `length` (default: `buffer.byteLength - offset`), and `position` (file offset, default: null). Returns a Promise fulfilling with an object `{ bytesWritten, buffer }`. Subject to the same concurrency and append mode limitations as the other `write` signature.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_16



----------------------------------------

TITLE: Parsing URLs with the WHATWG API
DESCRIPTION: Example showing how to parse a URL string using the WHATWG URL API by creating a new URL object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const myURL =
  new URL('https://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash');
```

----------------------------------------

TITLE: Generating and Exchanging Diffie-Hellman Keys in JavaScript
DESCRIPTION: This snippet demonstrates how to create Diffie-Hellman key exchanges using the crypto module in Node.js. It shows the process for both ECMAScript modules (mjs) and CommonJS modules (cjs).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_18

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert';

const {
  createDiffieHellman,
} = await import('node:crypto');

// Generate Alice's keys...
const alice = createDiffieHellman(2048);
const aliceKey = alice.generateKeys();

// Generate Bob's keys...
const bob = createDiffieHellman(alice.getPrime(), alice.getGenerator());
const bobKey = bob.generateKeys();

// Exchange and generate the secret...
const aliceSecret = alice.computeSecret(bobKey);
const bobSecret = bob.computeSecret(aliceKey);

// OK
assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));
```

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert');

const {
  createDiffieHellman,
} = require('node:crypto');

// Generate Alice's keys...
const alice = createDiffieHellman(2048);
const aliceKey = alice.generateKeys();

// Generate Bob's keys...
const bob = createDiffieHellman(alice.getPrime(), alice.getGenerator());
const bobKey = bob.generateKeys();

// Exchange and generate the secret...
const aliceSecret = alice.computeSecret(bobKey);
const bobSecret = bob.computeSecret(aliceKey);

// OK
assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));
```

----------------------------------------

TITLE: Defining Custom Lifecycle Scripts in npm package.json - JSON
DESCRIPTION: This snippet adds custom script commands to the package.json for both 'install' and 'postinstall' lifecycle stages, pointing to an executable at scripts/install.js. It demonstrates how different npm lifecycle events can trigger the same script, and suggests the use of environment variables like npm_lifecycle_event to determine which phase is running within the script. No external dependencies are required, but the referenced scripts must be executable within the package context.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scripts.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{\n  \"scripts\" : {\n    \"install\" : \"scripts/install.js\",\n    \"postinstall\" : \"scripts/install.js\"\n  }\n}
```

----------------------------------------

TITLE: Writing Files Asynchronously with Abort Using fsPromises.writeFile in Node.js (JavaScript)
DESCRIPTION: This snippet illustrates how to use the fsPromises.writeFile method to write data to a file asynchronously in Node.js, with support for cancellation using AbortController. It imports 'writeFile' from 'node:fs/promises' and 'Buffer' from 'node:buffer'. Key parameters include the file name ('message.txt'), data payload (as Uint8Array), and abort signal for cancellation. The code demonstrates aborting the write before completion, handling AbortError exceptions, and shows integration of modern abort and buffer APIs. Prerequisites include Node.js v14.17.0 or later; inputs are the file, data, and options object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_42

LANGUAGE: mjs
CODE:
```
import { writeFile } from 'node:fs/promises';\nimport { Buffer } from 'node:buffer';\n\ntry {\n  const controller = new AbortController();\n  const { signal } = controller;\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  const promise = writeFile('message.txt', data, { signal });\n\n  // Abort the request before the promise settles.\n  controller.abort();\n\n  await promise;\n} catch (err) {\n  // When a request is aborted - err is an AbortError\n  console.error(err);\n}
```

----------------------------------------

TITLE: Importing Function into ES Module (Node.js)
DESCRIPTION: Demonstrates importing the `addTwo` function from the relative path `./addTwo.mjs` into another ES module file `app.mjs`. It then calls the imported function and logs the result to the console, showing how to use imported functions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// app.mjs
import { addTwo } from './addTwo.mjs';

// Prints: 6
console.log(addTwo(4));
```

----------------------------------------

TITLE: Creating HMAC Hash with ESM
DESCRIPTION: Demonstrates how to create an HMAC hash using SHA-256 algorithm with ESM imports. The example shows creating a hash from a secret key and message, then outputting it in hexadecimal format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const { createHmac } = await import('node:crypto');

const secret = 'abcdefg';
const hash = createHmac('sha256', secret)
               .update('I love cupcakes')
               .digest('hex');
console.log(hash);
// Prints:
//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e
```

----------------------------------------

TITLE: FileHandle Close Example
DESCRIPTION: Demonstrates how to properly open and close a file using a FileHandle object with the promise-based API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { open } from 'node:fs/promises';

let filehandle;
try {
  filehandle = await open('thefile.txt', 'r');
} finally {
  await filehandle?.close();
}
```

----------------------------------------

TITLE: Handling POST Requests with JSON Data using Undici Client
DESCRIPTION: This example shows how to send a POST request with JSON data using Undici's dispatch method. It demonstrates handling request and response bodies, including parsing JSON data, and uses various callback events to track the request lifecycle.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  request.on('data', (data) => {
    console.log(`Request Data: ${data.toString('utf8')}`)
    const body = JSON.parse(data)
    body.message = 'World'
    response.end(JSON.stringify(body))
  })
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

const data = []

client.dispatch({
  path: '/',
  method: 'POST',
  headers: {
    'content-type': 'application/json'
  },
  body: JSON.stringify({ message: 'Hello' })
}, {
  onConnect: () => {
    console.log('Connected!')
  },
  onError: (error) => {
    console.error(error)
  },
  onHeaders: (statusCode, headers) => {
    console.log(`onHeaders | statusCode: ${statusCode} | headers: ${headers}`)
  },
  onData: (chunk) => {
    console.log('onData: chunk received')
    data.push(chunk)
  },
  onComplete: (trailers) => {
    console.log(`onComplete | trailers: ${trailers}`)
    const res = Buffer.concat(data).toString('utf8')
    console.log(`Response Data: ${res}`)
    client.close()
    server.close()
  }
})
```

----------------------------------------

TITLE: Logging __filename and __dirname - JavaScript
DESCRIPTION: This example further shows printing __filename and __dirname, helping to demonstrate their output when the script is executed. It is used to clarify the difference between file path and directory path within a module. No external dependencies are required, but __dirname and __filename are only available in CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_19

LANGUAGE: JavaScript
CODE:
```
console.log(__filename);
// Prints: /Users/mjr/example.js
console.log(__dirname);
// Prints: /Users/mjr
```

----------------------------------------

TITLE: Getting Child Process PID Example
DESCRIPTION: Demonstrates how to spawn a child process and access its process identifier (PID).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const grep = spawn('grep', ['ssh']);

console.log(`Spawned child pid: ${grep.pid}`);
grep.stdin.end();
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
const grep = spawn('grep', ['ssh']);

console.log(`Spawned child pid: ${grep.pid}`);
grep.stdin.end();
```

----------------------------------------

TITLE: Handling Error Events in Node.js EventEmitter (CommonJS)
DESCRIPTION: This example shows error handling in Node.js EventEmitter using CommonJS modules. It demonstrates how to attach an error event listener to prevent the Node.js process from crashing when an error event is emitted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('error', (err) => {
  console.error('whoops! there was an error');
});
myEmitter.emit('error', new Error('whoops!'));
// Prints: whoops! there was an error
```

----------------------------------------

TITLE: Creating Buffers from TypedArray (Copy vs. Share) - JavaScript
DESCRIPTION: Illustrates the difference between creating a Buffer directly from a TypedArray (copies data) and creating a Buffer from the TypedArray's .buffer property (shares memory). Modifying the original TypedArray affects the shared Buffer but not the copied one.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_8

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const arr = new Uint16Array(2);

arr[0] = 5000;
arr[1] = 4000;

// Copies the contents of `arr`.
const buf1 = Buffer.from(arr);

// Shares memory with `arr`.
const buf2 = Buffer.from(arr.buffer);

console.log(buf1);
// Prints: <Buffer 88 a0>
console.log(buf2);
// Prints: <Buffer 88 13 a0 0f>

arr[1] = 6000;

console.log(buf1);
// Prints: <Buffer 88 a0>
console.log(buf2);
// Prints: <Buffer 88 13 70 17>
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const arr = new Uint16Array(2);

arr[0] = 5000;
arr[1] = 4000;

// Copies the contents of `arr`.
const buf1 = Buffer.from(arr);

// Shares memory with `arr`.
const buf2 = Buffer.from(arr.buffer);

console.log(buf1);
// Prints: <Buffer 88 a0>
console.log(buf2);
// Prints: <Buffer 88 13 a0 0f>

arr[1] = 6000;

console.log(buf1);
// Prints: <Buffer 88 a0>
console.log(buf2);
// Prints: <Buffer 88 13 70 17>
```

----------------------------------------

TITLE: Using AbortController with execFile in CommonJS
DESCRIPTION: Example showing how to use AbortController to abort an execFile operation in CommonJS. The callback receives an AbortError when the operation is aborted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_16

LANGUAGE: JavaScript
CODE:
```
const { execFile } = require('node:child_process');
const controller = new AbortController();
const { signal } = controller;
const child = execFile('node', ['--version'], { signal }, (error) => {
  console.error(error); // an AbortError
});
controller.abort();
```

----------------------------------------

TITLE: TCP Echo Server in Node.js (ESM)
DESCRIPTION: Example of creating a TCP echo server that listens on port 8124 using ES modules format. Demonstrates basic server creation and connection handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_30

LANGUAGE: mjs
CODE:
```
import net from 'node:net';
const server = net.createServer((c) => {
  // 'connection' listener.
  console.log('client connected');
  c.on('end', () => {
    console.log('client disconnected');
  });
  c.write('hello\r\n');
  c.pipe(c);
});
server.on('error', (err) => {
  throw err;
});
server.listen(8124, () => {
  console.log('server bound');
});
```

----------------------------------------

TITLE: Defining Project Dependencies in package.json (JSON)
DESCRIPTION: This JSON snippet showcases various ways to define project dependencies in the `dependencies` field of `package.json`. It includes examples of exact versions, version ranges (using >, <, >=, <=, -, ||), approximate (`~`) and compatible (`^`) versions, URL dependencies, local file paths (`file:`), tags (`latest`), and aliased packages (`npm:`). Development tools should go in `devDependencies`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_15

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "foo": "1.0.0 - 2.9999.9999",
    "bar": ">=1.0.2 <2.1.2",
    "baz": ">1.0.2 <=2.3.4",
    "boo": "2.0.1",
    "qux": "<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0",
    "asd": "http://npmjs.com/example.tar.gz",
    "til": "~1.2",
    "elf": "~1.2.3",
    "two": "2.x",
    "thr": "3.3.x",
    "lat": "latest",
    "dyl": "file:../dyl",
    "kpg": "npm:pkg@1.0.0"
  }
}
```

----------------------------------------

TITLE: Sorting Buffers with Buffer.compare (Node.js)
DESCRIPTION: Illustrates using the static `Buffer.compare` method as a comparison function for sorting an array of `Buffer` instances. This is equivalent to calling `buf1.compare(buf2)` and is useful for sorting collections of buffers. Shows examples for both MJS and CJS module systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_24

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('1234');
const buf2 = Buffer.from('0123');
const arr = [buf1, buf2];

console.log(arr.sort(Buffer.compare));
// Prints: [ <Buffer 30 31 32 33>, <Buffer 31 32 33 34> ]
// (This result is equal to: [buf2, buf1].)
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from('1234');
const buf2 = Buffer.from('0123');
const arr = [buf1, buf2];

console.log(arr.sort(Buffer.compare));
// Prints: [ <Buffer 30 31 32 33>, <Buffer 31 32 33 34> ]
// (This result is equal to: [buf2, buf1].)
```

----------------------------------------

TITLE: Handling Backpressure with Writable Streams in Node.js
DESCRIPTION: Demonstrates how to properly handle backpressure when writing to a stream by using the 'drain' event. This pattern prevents memory issues by respecting the stream's buffer limits and waiting until the stream is ready to receive more data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
function write(data, cb) {
  if (!stream.write(data)) {
    stream.once('drain', cb);
  } else {
    process.nextTick(cb);
  }
}

// Wait for cb to be called before doing any other write.
write('hello', () => {
  console.log('Write completed, do more writes now.');
});
```

----------------------------------------

TITLE: Creating Nested Directories with mkdir() in Node.js
DESCRIPTION: Creates a directory and its parent directories using recursive option. This example demonstrates how to use fs.mkdir() with the recursive flag to create nested directory structures, regardless of whether parent directories exist.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_61

LANGUAGE: javascript
CODE:
```
import { mkdir } from 'node:fs';

// Create ./tmp/a/apple, regardless of whether ./tmp and ./tmp/a exist.
mkdir('./tmp/a/apple', { recursive: true }, (err) => {
  if (err) throw err;
});
```

----------------------------------------

TITLE: Basic Usage of SemVer Module in JavaScript
DESCRIPTION: Demonstrates importing the `semver` module in a Node.js application and using its core functions like `valid` (checking if a version string is valid), `clean` (removing leading/trailing whitespace and prefixes), `satisfies` (checking if a version meets range criteria), `gt`/`lt` (greater/less than comparisons), `minVersion` (finding the minimum satisfying version for a range), and `coerce` (attempting to convert a string into a valid SemVer version).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const semver = require('semver')

semver.valid('1.2.3') // '1.2.3'
semver.valid('a.b.c') // null
semver.clean('  =v1.2.3   ') // '1.2.3'
semver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true
semver.gt('1.2.3', '9.8.7') // false
semver.lt('1.2.3', '9.8.7') // true
semver.minVersion('>=1.0.0') // '1.0.0'
semver.valid(semver.coerce('v2')) // '2.0.0'
semver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7'
```

----------------------------------------

TITLE: Basic GET Stream Request with Undici
DESCRIPTION: Example demonstrating how to use the stream method for efficient processing of responses. This approach avoids creating intermediate Readable streams by directly writing to a Writable stream.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'
import { Writable } from 'stream'

const server = createServer((request, response) => {
  response.end('Hello, World!')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

const bufs = []

try {
  await client.stream({
    path: '/',
    method: 'GET',
    opaque: { bufs }
  }, ({ statusCode, headers, opaque: { bufs } }) => {
    console.log(`response received ${statusCode}`)
    console.log('headers', headers)
    return new Writable({
      write (chunk, encoding, callback) {
        bufs.push(chunk)
        callback()
      }
    })
  })

  console.log(Buffer.concat(bufs).toString('utf-8'))

  client.close()
  server.close()
} catch (error) {
  console.error(error)
}
```

----------------------------------------

TITLE: Making an HTTPS GET Request
DESCRIPTION: This example demonstrates how to make an HTTPS GET request using the https.get() method in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
// ESM version
import { get } from 'node:https';
import process from 'node:process';

get('https://encrypted.google.com/', (res) => {
  console.log('statusCode:', res.statusCode);
  console.log('headers:', res.headers);

  res.on('data', (d) => {
    process.stdout.write(d);
  });

}).on('error', (e) => {
  console.error(e);
});
```

LANGUAGE: javascript
CODE:
```
// CommonJS version
const https = require('node:https');

https.get('https://encrypted.google.com/', (res) => {
  console.log('statusCode:', res.statusCode);
  console.log('headers:', res.headers);

  res.on('data', (d) => {
    process.stdout.write(d);
  });

}).on('error', (e) => {
  console.error(e);
});
```

----------------------------------------

TITLE: Implementing Inheritance with ES6 Classes (MJS Alternative)
DESCRIPTION: Demonstrates the modern ES6 approach to inheritance using `class` and `extends` keywords in an ES Module context. This is the recommended alternative to `util.inherits`. The example shows `MyStream` extending `EventEmitter`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_16

LANGUAGE: mjs
CODE:
```
import EventEmitter from 'node:events';

class MyStream extends EventEmitter {
  write(data) {
    this.emit('data', data);
  }
}

const stream = new MyStream();

stream.on('data', (data) => {
  console.log(`Received data: "${data}"`);
});
stream.write('With ES6');
```

----------------------------------------

TITLE: Equivalent Object Notation for Single Executable in package.json (JSON)
DESCRIPTION: This JSON snippet illustrates the object-based equivalent of the shorthand `bin` field shown previously. Defining `bin` as an object mapping the package name (`my-program`) to the script path (`path/to/program`) achieves the same result as using the string shorthand.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{
  "name": "my-program",
  "version": "1.2.5",
  "bin": {
    "my-program": "path/to/program"
  }
}
```

----------------------------------------

TITLE: Using TextDecoder in Node.js
DESCRIPTION: Demonstrates how to use the TextDecoder class to decode a Uint8Array into a string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_53

LANGUAGE: JavaScript
CODE:
```
const decoder = new TextDecoder();
const u8arr = new Uint8Array([72, 101, 108, 108, 111]);
console.log(decoder.decode(u8arr)); // Hello
```

----------------------------------------

TITLE: Correct Ordering of Asynchronous File Operations using Promises in Node.js
DESCRIPTION: This snippet shows the correct way to rename a file and then get its stats using promises, ensuring proper ordering of asynchronous operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_110

LANGUAGE: javascript
CODE:
```
import { rename, stat } from 'node:fs/promises';

const oldPath = '/tmp/hello';
const newPath = '/tmp/world';

try {
  await rename(oldPath, newPath);
  const stats = await stat(newPath);
  console.log(`stats: ${JSON.stringify(stats)}`);
} catch (error) {
  console.error('there was an error:', error.message);
}
```

----------------------------------------

TITLE: Automatic Error Retry using reusedSocket Property (ES Modules)
DESCRIPTION: Demonstrates how to implement automatic retry logic for HTTP requests that fail with ECONNRESET error on reused sockets. Uses ES Modules syntax with a keep-alive agent.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
import http from 'node:http';
const agent = new http.Agent({ keepAlive: true });

function retriableRequest() {
  const req = http
    .get('http://localhost:3000', { agent }, (res) => {
      // ...
    })
    .on('error', (err) => {
      // Check if retry is needed
      if (req.reusedSocket && err.code === 'ECONNRESET') {
        retriableRequest();
      }
    });
}

retriableRequest();
```

----------------------------------------

TITLE: Initializing and Using mkdirp - Node.js - JavaScript (Promise API)
DESCRIPTION: This JavaScript code snippet demonstrates how to use the mkdirp package in a Node.js environment to create directories recursively using its promise-based API. The mkdirp function is required and invoked with a target directory path, returning a promise that resolves to the path of the first directory created. The example logs the result to the console, making it suitable for asynchronous workflows. Required dependency: the 'mkdirp' npm package. Input: directory path as a string. Output: promise resolving with the first created directory path or undefined if it exists.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
```js\nconst mkdirp = require('mkdirp')\n\n// return value is a Promise resolving to the first directory created\nmkdirp('/tmp/foo/bar/baz').then(made =>\n  console.log(`made directories, starting with ${made}`))\n```
```

----------------------------------------

TITLE: Importing CommonJS Named Exports (Node.js JS)
DESCRIPTION: This snippet demonstrates how Node.js performs static analysis on CommonJS modules to provide named exports in addition to the default export. Using a sample CommonJS module with `exports.name = 'exported'`, it shows that you can import the named export (`{ name }`), the default export (`cjs` which is `module.exports`), or the full namespace (`* as m`) which includes both the default, the `'module.exports'` alias, and the statically detected `name` export.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_12

LANGUAGE: js
CODE:
```
import { name } from './cjs.cjs';
console.log(name);
// Prints: 'exported'

import cjs from './cjs.cjs';
console.log(cjs);
// Prints: { name: 'exported' }

import * as m from './cjs.cjs';
console.log(m);
// Prints:
//   [Module] {
//     default: { name: 'exported' },
//     'module.exports': { name: 'exported' },
//     name: 'exported'
//   }
```

----------------------------------------

TITLE: Using readable.flatMap for Synchronous/Asynchronous Mapping in Node.js (MJS)
DESCRIPTION: Illustrates the `Readable.flatMap` method to apply a mapping function to each chunk of a stream and flatten the results into a new stream. Examples demonstrate synchronous mapping (duplicating elements) and asynchronous mapping where the function returns another iterable (a file stream created with `fs.createReadStream`) to concatenate file contents.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_50

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { createReadStream } from 'node:fs';

// With a synchronous mapper.
for await (const chunk of Readable.from([1, 2, 3, 4]).flatMap((x) => [x, x])) {
  console.log(chunk); // 1, 1, 2, 2, 3, 3, 4, 4
}
// With an asynchronous mapper, combine the contents of 4 files
const concatResult = Readable.from([
  './1.mjs',
  './2.mjs',
  './3.mjs',
  './4.mjs',
]).flatMap((fileName) => createReadStream(fileName));
for await (const result of concatResult) {
  // This will contain the contents (all chunks) of all 4 files
  console.log(result);
}
```

----------------------------------------

TITLE: Importing Node.js path module (CommonJS)
DESCRIPTION: Imports the Node.js `path` module using the CommonJS `require` syntax. This makes the path utility functions available for use in the script.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_0

LANGUAGE: cjs
CODE:
```
const path = require('node:path');
```

----------------------------------------

TITLE: Mocking setTimeout using TestContext Mock Timers - ES Module
DESCRIPTION: Demonstrates mocking `setTimeout` using the `context.mock.timers` API. This method is preferred within tests as the test runner automatically restores original timer functionality upon test completion. It enables the `setTimeout` API, advances time using `tick`, and verifies the callback execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_26

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  // Optionally choose what to mock
  context.mock.timers.enable({ apis: ['setTimeout'] });
  setTimeout(fn, 9999);
  assert.strictEqual(fn.mock.callCount(), 0);

  // Advance in time
  context.mock.timers.tick(9999);
  assert.strictEqual(fn.mock.callCount(), 1);
});
```

----------------------------------------

TITLE: Signing and Verifying Data using Web Crypto API in JavaScript
DESCRIPTION: These functions demonstrate how to sign and verify data using the RSASSA-PKCS1-v1_5 algorithm with the Web Crypto API. They handle text encoding and the signing/verifying process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function sign(key, data) {
  const ec = new TextEncoder();
  const signature =
    await subtle.sign('RSASSA-PKCS1-v1_5', key, ec.encode(data));
  return signature;
}

async function verify(key, signature, data) {
  const ec = new TextEncoder();
  const verified =
    await subtle.verify(
      'RSASSA-PKCS1-v1_5',
      key,
      signature,
      ec.encode(data));
  return verified;
}
```

----------------------------------------

TITLE: Importing 'url' Module with ES Modules (MJS)
DESCRIPTION: Shows how to import the built-in Node.js `url` module using the ES Module `import` statement with the `node:` prefix. This grants access to URL parsing and manipulation functions. Requires a Node.js environment supporting ES Modules.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/document_with_cjs_and_esm_code_snippet.md#2025-04-23_snippet_1

LANGUAGE: mjs
CODE:
```
import 'node:url';
```

----------------------------------------

TITLE: Uninstalling a Package with npm in Bash
DESCRIPTION: This example demonstrates how to uninstall the 'sax' package using npm. This command will remove the package and update package.json, npm-shrinkwrap.json, and package-lock.json files accordingly.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-uninstall.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm uninstall sax
```

----------------------------------------

TITLE: Emitting Events and Passing Arguments with EventEmitter (MJS/CJS)
DESCRIPTION: Illustrates how to use `emitter.emit()` to synchronously trigger all listeners registered for a specific event name. It shows how multiple listeners are called in the order they were added and how arguments passed to `emit()` are forwarded to the listener functions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_21

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
const myEmitter = new EventEmitter();

// First listener
myEmitter.on('event', function firstListener() {
  console.log('Helloooo! first listener');
});
// Second listener
myEmitter.on('event', function secondListener(arg1, arg2) {
  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
});
// Third listener
myEmitter.on('event', function thirdListener(...args) {
  const parameters = args.join(', ');
  console.log(`event with parameters ${parameters} in third listener`);
});

console.log(myEmitter.listeners('event'));

myEmitter.emit('event', 1, 2, 3, 4, 5);

// Prints:
// [
//   [Function: firstListener],
//   [Function: secondListener],
//   [Function: thirdListener]
// ]
// Helloooo! first listener
// event with parameters 1, 2 in second listener
// event with parameters 1, 2, 3, 4, 5 in third listener
```

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
const myEmitter = new EventEmitter();

// First listener
myEmitter.on('event', function firstListener() {
  console.log('Helloooo! first listener');
});
// Second listener
myEmitter.on('event', function secondListener(arg1, arg2) {
  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
});
// Third listener
myEmitter.on('event', function thirdListener(...args) {
  const parameters = args.join(', ');
  console.log(`event with parameters ${parameters} in third listener`);
});

console.log(myEmitter.listeners('event'));

myEmitter.emit('event', 1, 2, 3, 4, 5);

// Prints:
// [
//   [Function: firstListener],
//   [Function: secondListener],
//   [Function: thirdListener]
// ]
// Helloooo! first listener
// event with parameters 1, 2 in second listener
// event with parameters 1, 2, 3, 4, 5 in third listener
```

----------------------------------------

TITLE: Connecting to HTTP Server Through Proxy Without Authentication with Undici
DESCRIPTION: This code demonstrates how to use Undici's Client to connect to an HTTP server through a proxy without authentication. It sets up a local HTTP server and proxy server for testing, then makes a request through the proxy to the server.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/proxy.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Client } from 'undici'
import { createServer } from 'http'
import { createProxy } from 'proxy'

const server = await buildServer()
const proxyServer = await buildProxy()

const serverUrl = `http://localhost:${server.address().port}`
const proxyUrl = `http://localhost:${proxyServer.address().port}`

server.on('request', (req, res) => {
  console.log(req.url) // '/hello?foo=bar'
  res.setHeader('content-type', 'application/json')
  res.end(JSON.stringify({ hello: 'world' }))
})

const client = new Client(proxyUrl)

const response = await client.request({
  method: 'GET',
  path: serverUrl + '/hello?foo=bar'
})

response.body.setEncoding('utf8')
let data = ''
for await (const chunk of response.body) {
  data += chunk
}
console.log(response.statusCode) // 200
console.log(JSON.parse(data)) // { hello: 'world' }

server.close()
proxyServer.close()
client.close()

function buildServer () {
  return new Promise((resolve, reject) => {
    const server = createServer()
    server.listen(0, () => resolve(server))
  })
}

function buildProxy () {
  return new Promise((resolve, reject) => {
    const server = createProxy(createServer())
    server.listen(0, () => resolve(server))
  })
}
```

----------------------------------------

TITLE: Updating Local Main Branch from Upstream (Shell)
DESCRIPTION: Sequence of Git commands to update the local 'main' branch to match the latest state of the 'upstream' remote repository. It first checks out the local 'main' branch, then fetches the latest HEAD from the 'upstream' remote, and finally resets the local 'main' branch to exactly match the fetched state, discarding any local changes or commits on 'main'.
SOURCE: https://github.com/nodejs/node/blob/main/onboarding.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
git checkout main
git fetch upstream HEAD
git reset --hard FETCH_HEAD
```

----------------------------------------

TITLE: Handling Error Events in Node.js EventEmitter (ESM)
DESCRIPTION: This snippet demonstrates error handling in Node.js EventEmitter using ECMAScript modules. It shows how to attach an error event listener to prevent the Node.js process from crashing when an error event is emitted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('error', (err) => {
  console.error('whoops! there was an error');
});
myEmitter.emit('error', new Error('whoops!'));
// Prints: whoops! there was an error
```

----------------------------------------

TITLE: Granting Global node_modules Read Access with npx Permissions
DESCRIPTION: Shows how to use `npx` with Node.js permissions enabled, specifically granting read access (`--allow-fs-read`) to the global `node_modules` directory. This is often necessary when running globally installed packages via `npx` under the permission model, as `npx` needs to read the package files. The `$(npm prefix -g)` command substitution dynamically determines the global npm prefix path.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/permissions.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npx --node-options="--permission --allow-fs-read=$(npm prefix -g)" package-name
```

----------------------------------------

TITLE: Importing Builtin Modules via node: Scheme (Node.js)
DESCRIPTION: Provides an example of importing a standard Node.js builtin module (`fs/promises`) using the `node:` URL scheme. This scheme is an alternative way to reference core Node.js modules and makes it explicit that the module is a built-in.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import fs from 'node:fs/promises';
```

----------------------------------------

TITLE: Running Tests with node:test and TAP Reporter (ESM)
DESCRIPTION: Demonstrates how to use the `run` function from the `node:test` module to execute a specific test file in an ES module environment. It configures the runner to fail the process if any test fails and pipes the test results through the TAP reporter to standard output.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_35

LANGUAGE: JavaScript
CODE:
```
import { tap } from 'node:test/reporters';
import { run } from 'node:test';
import process from 'node:process';
import path from 'node:path';

run({ files: [path.resolve('./tests/test.js')] })
 .on('test:fail', () => {
   process.exitCode = 1;
 })
 .compose(tap)
 .pipe(process.stdout);
```

----------------------------------------

TITLE: Importing File System Module (ESM and CommonJS)
DESCRIPTION: Demonstrates how to import the fs module for both promise-based and callback/sync APIs in ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
import * as fs from 'node:fs/promises';
```

LANGUAGE: JavaScript
CODE:
```
const fs = require('node:fs/promises');
```

LANGUAGE: JavaScript
CODE:
```
import * as fs from 'node:fs';
```

LANGUAGE: JavaScript
CODE:
```
const fs = require('node:fs');
```

----------------------------------------

TITLE: Reading File Lines Using readLines() with Node.js fs/promises - JavaScript CommonJS
DESCRIPTION: Provides a Node.js CommonJS example for reading file lines with filehandle.readLines(), illustrating asynchronous iteration over text lines using require('node:fs/promises'). This approach is suitable for CommonJS-based projects and prints each line in the loop. The method is designed for efficient memory use and line-by-line processing, supporting all standard options documented for createReadStream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
const { open } = require('node:fs/promises');

(async () => {
  const file = await open('./some/file/to/read');

  for await (const line of file.readLines()) {
    console.log(line);
  }
})();

```

----------------------------------------

TITLE: Loading Environment Variables from .env File in Node.js
DESCRIPTION: Shows how to use process.loadEnvFile() to load environment variables from a .env file into process.env. This function defaults to loading from './.env' if no path is specified.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_54

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { loadEnvFile } = require('node:process');
loadEnvFile();
```

LANGUAGE: JavaScript (ESM)
CODE:
```
import { loadEnvFile } from 'node:process';
loadEnvFile();
```

----------------------------------------

TITLE: Monitoring Error Events without Consuming in Node.js (ESM)
DESCRIPTION: This snippet demonstrates how to monitor error events in Node.js EventEmitter without consuming them, using the errorMonitor symbol. It uses ECMAScript modules to show error monitoring without affecting the error propagation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_14

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter, errorMonitor } from 'node:events';

const myEmitter = new EventEmitter();
myEmitter.on(errorMonitor, (err) => {
  MyMonitoringTool.log(err);
});
myEmitter.emit('error', new Error('whoops!'));
// Still throws and crashes Node.js
```

----------------------------------------

TITLE: Piping Streams in Node.js
DESCRIPTION: Examples of piping streams to write files and creating stream chains.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_32

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');
const readable = getReadableStreamSomehow();
const writable = fs.createWriteStream('file.txt');
// All the data from readable goes into 'file.txt'.
readable.pipe(writable);
```

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');
const zlib = require('node:zlib');
const r = fs.createReadStream('file.txt');
const z = zlib.createGzip();
const w = fs.createWriteStream('file.txt.gz');
r.pipe(z).pipe(w);
```

----------------------------------------

TITLE: Gzip Compression Functions
DESCRIPTION: Functions for compressing data using gzip format. Accepts buffer input in various formats including Buffer, TypedArray, DataView, ArrayBuffer or string. Supports both async (gzip) and sync (gzipSync) operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_22

LANGUAGE: JavaScript
CODE:
```
zlib.gzip(buffer[, options], callback)
zlib.gzipSync(buffer[, options])
```

----------------------------------------

TITLE: Deep Nested Package Overrides
DESCRIPTION: Demonstrates how to override packages at arbitrary nesting depths by specifying the full path in the dependency tree. This provides very targeted control over deep dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_30

LANGUAGE: json
CODE:
```
{
  "overrides": {
    "@npm/baz": {
      "@npm/bar": {
        "@npm/foo": "1.0.0"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Node.js Watch Mode Without Clearing Console (Bash)
DESCRIPTION: Starts Node.js in watch mode using `--watch` and prevents the console output from being cleared when the process restarts by adding the `--watch-preserve-output` flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_31

LANGUAGE: bash
CODE:
```
node --watch --watch-preserve-output test.js
```

----------------------------------------

TITLE: Parsing Command-Line Arguments Using parseArgs - JavaScript (CommonJS)
DESCRIPTION: Provides an example of command-line argument parsing with parseArgs using CommonJS syntax. It sets up argument and option definitions, calls parseArgs, and logs the parsed values and positionals. Inputs are the arguments array and an options object; outputs the parsed result to the console. Works with Node.js v18.3.0+.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_37

LANGUAGE: JavaScript
CODE:
```
const { parseArgs } = require('node:util');
const args = ['-f', '--bar', 'b'];
const options = {
  foo: {
    type: 'boolean',
    short: 'f',
  },
  bar: {
    type: 'string',
  },
};
const {
  values,
  positionals,
} = parseArgs({ args, options });
console.log(values, positionals);
// Prints: [Object: null prototype] { foo: true, bar: 'b' } []
```

----------------------------------------

TITLE: Importing Value from Module with Top-Level Await (JavaScript)
DESCRIPTION: Shows how to import a value from another ES module that utilizes top-level await. The importing module (`b.mjs`) automatically waits for the dependency (`a.mjs`) to complete its top-level awaits before proceeding.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_18

LANGUAGE: javascript
CODE:
```
import { five } from './a.mjs';

console.log(five); // Logs `5`
```

----------------------------------------

TITLE: Advanced Client Error Handling with Connection Check
DESCRIPTION: Enhanced error handling example that checks for ECONNRESET errors and socket writability before sending an error response.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_26

LANGUAGE: javascript
CODE:
```
server.on('clientError', (err, socket) => {
  if (err.code === 'ECONNRESET' || !socket.writable) {
    return;
  }

  socket.end('HTTP/1.1 400 Bad Request\r\n\r\n');
});
```

----------------------------------------

TITLE: Using AbortController in Node.js
DESCRIPTION: Demonstrates using AbortController to signal cancelation in Promise-based APIs. Shows how to create an AbortController, add event listeners, and trigger abort events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const ac = new AbortController();

ac.signal.addEventListener('abort', () => console.log('Aborted!'),
                           { once: true });

ac.abort();

console.log(ac.signal.aborted);  // Prints true
```

----------------------------------------

TITLE: Basic Process Spawning in Node.js (CommonJS)
DESCRIPTION: Demonstrates how to spawn a child process to execute the 'ls' command using the CommonJS require syntax. Shows handling of stdout, stderr, and process completion events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_0

LANGUAGE: cjs
CODE:
```
const { spawn } = require('node:child_process');
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.stderr.on('data', (data) => {
  console.error(`stderr: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

----------------------------------------

TITLE: Error Handling with undici:request:error Channel
DESCRIPTION: Shows how to monitor request errors before they occur using the diagnostics channel.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:request:error').subscribe(({ request, error }) => {
  // request is the same object undici:request:create
})
```

----------------------------------------

TITLE: Using the URL host Property
DESCRIPTION: Example showing how to get and set the host portion of a URL, which includes both the hostname and port.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://example.org:81/foo');
console.log(myURL.host);
// Prints example.org:81

myURL.host = 'example.com:82';
console.log(myURL.href);
// Prints https://example.com:82/foo
```

----------------------------------------

TITLE: Using notEqual in ES Modules
DESCRIPTION: Demonstrates how to use assert.notEqual() method in ES Modules format to test shallow, coercive inequality between values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_34

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';

assert.notEqual(1, 2);
// OK

assert.notEqual(1, 1);
// AssertionError: 1 != 1

assert.notEqual(1, '1');
// AssertionError: 1 != '1'
```

----------------------------------------

TITLE: Creating Buffer from Existing Buffer/Uint8Array (Copy)
DESCRIPTION: Demonstrates how to create a new Buffer instance by copying data from an existing Buffer or Uint8Array using `Buffer.from()`. This operation creates a distinct copy, meaning modifications to the original buffer do not affect the newly created one.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_31

LANGUAGE: Node.js (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('buffer');
const buf2 = Buffer.from(buf1);

buf1[0] = 0x61;

console.log(buf1.toString());
// Prints: auffer
console.log(buf2.toString());
// Prints: buffer
```

LANGUAGE: Node.js (CJS)
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from('buffer');
const buf2 = Buffer.from(buf1);

buf1[0] = 0x61;

console.log(buf1.toString());
// Prints: auffer
console.log(buf2.toString());
// Prints: buffer
```

----------------------------------------

TITLE: Using assert.rejects() with custom validation function in Node.js (ESM)
DESCRIPTION: Illustrates how to use assert.rejects() with a custom validation function to test asynchronous functions. The validation function checks specific properties of the thrown error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_44

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

await assert.rejects(
  async () => {
    throw new TypeError('Wrong value');
  },
  (err) => {
    assert.strictEqual(err.name, 'TypeError');
    assert.strictEqual(err.message, 'Wrong value');
    return true;
  },
);
```

----------------------------------------

TITLE: Demonstrating the exports Shortcut Behavior in Node.js
DESCRIPTION: Illustrates how the exports variable is initially a reference to module.exports but can be reassigned, breaking the connection. Only module.exports is actually exported from the module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
module.exports.hello = true; // Exported from require of module
exports = { hello: false };  // Not exported, only available in the module
```

----------------------------------------

TITLE: Basic Process Spawning in Node.js (ES Modules)
DESCRIPTION: Demonstrates how to spawn a child process to execute the 'ls' command using ES Modules import syntax. Shows handling of stdout, stderr, and process completion events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_1

LANGUAGE: mjs
CODE:
```
import { spawn } from 'node:child_process';
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.stderr.on('data', (data) => {
  console.error(`stderr: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

----------------------------------------

TITLE: Running Tests with node:test and TAP Reporter (CJS)
DESCRIPTION: Shows how to use the `run` function from the `node:test` module to execute a specific test file in a CommonJS module environment. It sets the process exit code to 1 upon test failure and uses the TAP reporter to format and output the test results to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_36

LANGUAGE: JavaScript
CODE:
```
const { tap } = require('node:test/reporters');
const { run } = require('node:test');
const path = require('node:path');

run({ files: [path.resolve('./tests/test.js')] })
 .on('test:fail', () => {
   process.exitCode = 1;
 })
 .compose(tap)
 .pipe(process.stdout);
```

----------------------------------------

TITLE: Basic Client Instantiation in Undici
DESCRIPTION: Demonstrates how to instantiate a basic undici Client that connects to a local server. The client doesn't connect until a request is queued or connect() is explicitly called.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Client.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
'use strict'
import { Client } from 'undici'

const client = new Client('http://localhost:3000')
```

----------------------------------------

TITLE: Defining package-lock.json Structure in JSON
DESCRIPTION: This snippet outlines the key fields in a package-lock.json file, including name, version, lockfileVersion, and the packages object. It demonstrates the structure used to describe package dependencies and their metadata.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-lock-json.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "package-name",
  "version": "package-version",
  "lockfileVersion": 3,
  "packages": {
    "": {
      "version": "package-version",
      "resolved": "package-url",
      "integrity": "sha512-hash",
      "dev": true,
      "optional": false,
      "devOptional": false,
      "inBundle": false,
      "hasInstallScript": false,
      "hasShrinkwrap": false,
      "bin": {},
      "license": "license-type",
      "engines": {},
      "dependencies": {},
      "optionalDependencies": {}
    }
  }
}
```

----------------------------------------

TITLE: Using scryptSync with ESM in Node.js
DESCRIPTION: Demonstrates password-based key derivation using scryptSync with both default and custom parameters in ESM format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_93

LANGUAGE: javascript
CODE:
```
const {
  scryptSync,
} = await import('node:crypto');
// Using the factory defaults.

const key1 = scryptSync('password', 'salt', 64);
console.log(key1.toString('hex'));  // '3745e48...08d59ae'
// Using a custom N parameter. Must be a power of two.
const key2 = scryptSync('password', 'salt', 64, { N: 1024 });
console.log(key2.toString('hex'));  // '3745e48...aa39b34'
```

----------------------------------------

TITLE: Creating Global and Local Package Links in Bash
DESCRIPTION: Demonstrates how to create a global link for a package and then link it to another project.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
cd ~/projects/node-redis    # go into the package directory
npm link                    # creates global link
cd ~/projects/node-bloggy   # go into some other package directory.
npm link redis              # link-install the package
```

----------------------------------------

TITLE: Performing DNS Lookup in Node.js (ESM)
DESCRIPTION: This snippet demonstrates how to use the dns.lookup() method to resolve a domain name to an IP address using ECMAScript modules (ESM). It shows the basic usage of the DNS module for name resolution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
import dns from 'node:dns';

dns.lookup('example.org', (err, address, family) => {
  console.log('address: %j family: IPv%s', address, family);
});
// address: "2606:2800:21f:cb07:6820:80da:af6b:8b2c" family: IPv6
```

----------------------------------------

TITLE: Connecting to HTTP Server Through Proxy With Basic Authentication in Undici
DESCRIPTION: This code demonstrates how to use Undici's Client to connect to an HTTP server through a proxy with basic authentication. It configures the proxy server to require authentication and passes credentials via the proxy-authorization header.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/proxy.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { Client } from 'undici'
import { createServer } from 'http'
import { createProxy } from 'proxy'

const server = await buildServer()
const proxyServer = await buildProxy()

const serverUrl = `http://localhost:${server.address().port}`
const proxyUrl = `http://localhost:${proxyServer.address().port}`

proxyServer.authenticate = function (req) {
  return req.headers['proxy-authorization'] === `Basic ${Buffer.from('user:pass').toString('base64')}`
}

server.on('request', (req, res) => {
  console.log(req.url) // '/hello?foo=bar'
  res.setHeader('content-type', 'application/json')
  res.end(JSON.stringify({ hello: 'world' }))
})

const client = new Client(proxyUrl)

const response = await client.request({
  method: 'GET',
  path: serverUrl + '/hello?foo=bar',
  headers: {
    'proxy-authorization': `Basic ${Buffer.from('user:pass').toString('base64')}`
  }
})

response.body.setEncoding('utf8')
let data = ''
for await (const chunk of response.body) {
  data += chunk
}
console.log(response.statusCode) // 200
console.log(JSON.parse(data)) // { hello: 'world' }

server.close()
proxyServer.close()
client.close()

function buildServer () {
  return new Promise((resolve, reject) => {
    const server = createServer()
    server.listen(0, () => resolve(server))
  })
}

function buildProxy () {
  return new Promise((resolve, reject) => {
    const server = createProxy(createServer())
    server.listen(0, () => resolve(server))
  })
}
```

----------------------------------------

TITLE: Creating a JavaScript Date Object - Node-API - C
DESCRIPTION: Declares a function to create a JavaScript Date object from a millisecond timestamp since the Unix epoch, following ECMAScript Section 20.3. Inputs include the environment, time value (milliseconds), and output napi_value. Returns napi_ok on success. Leap seconds are ignored to maintain ECMAScript/POSIX time compatibility.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_79

LANGUAGE: c
CODE:
```
napi_status napi_create_date(napi_env env,
                             double time,
                             napi_value* result);
```

----------------------------------------

TITLE: Stringifying with Custom encodeURIComponent Function - Node.js JavaScript
DESCRIPTION: This snippet illustrates the use of 'querystring.stringify' with a custom percent-encoding function for scenarios where encodings other than UTF-8 are required. The example assumes the existence of the 'gbkEncodeURIComponent' function and passes it in the options object, enabling correct query string generation for non-UTF-8 content.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/querystring.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
// Assuming gbkEncodeURIComponent function already exists,

querystring.stringify({ w: '中文', foo: 'bar' }, null, null,
                      { encodeURIComponent: gbkEncodeURIComponent });
```

----------------------------------------

TITLE: Testing Deep Inequality with assert.notDeepEqual (Node.js, CommonJS, JavaScript)
DESCRIPTION: Demonstrates deep inequality checks using assert.notDeepEqual() in Node.js with CommonJS. Tests a sequence of object comparisons, showing AssertionErrors for deep equality and success for inequality or prototype variance. Dependency: node:assert. Accepts parameters actual, expected, message, working as the inverse of assert.deepEqual().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_31

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert');

const obj1 = {
  a: {
    b: 1,
  },
};
const obj2 = {
  a: {
    b: 2,
  },
};
const obj3 = {
  a: {
    b: 1,
  },
};
const obj4 = { __proto__: obj1 };

assert.notDeepEqual(obj1, obj1);
// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }

assert.notDeepEqual(obj1, obj2);
// OK

assert.notDeepEqual(obj1, obj3);
// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }

assert.notDeepEqual(obj1, obj4);
// OK
```

----------------------------------------

TITLE: Converting URL Objects to HTTP Options in Node.js
DESCRIPTION: Demonstrates the use of url.urlToHttpOptions() to convert a URL object into an options object suitable for http.request() and https.request() APIs.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_49

LANGUAGE: javascript
CODE:
```
import { urlToHttpOptions } from 'node:url';
const myURL = new URL('https://a:b@測試?abc#foo');

console.log(urlToHttpOptions(myURL));
/*
{
  protocol: 'https:',
  hostname: 'xn--g6w251d',
  hash: '#foo',
  search: '?abc',
  pathname: '/',
  path: '/?abc',
  href: 'https://a:b@xn--g6w251d/?abc#foo',
  auth: 'a:b'
}
*/
```

LANGUAGE: javascript
CODE:
```
const { urlToHttpOptions } = require('node:url');
const myURL = new URL('https://a:b@測試?abc#foo');

console.log(urlToHttpOptions(myURL));
/*
{
  protocol: 'https:',
  hostname: 'xn--g6w251d',
  hash: '#foo',
  search: '?abc',
  pathname: '/',
  path: '/?abc',
  href: 'https://a:b@xn--g6w251d/?abc#foo',
  auth: 'a:b'
}
*/
```

----------------------------------------

TITLE: Converting Duplex Stream to Web Streams (ES Modules)
DESCRIPTION: Example demonstrating how to convert a Duplex stream to Web Streams using ES Modules syntax
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_66

LANGUAGE: javascript
CODE:
```
import { Duplex } from 'node:stream';

const duplex = Duplex({
  objectMode: true,
  read() {
    this.push('world');
    this.push(null);
  },
  write(chunk, encoding, callback) {
    console.log('writable', chunk);
    callback();
  },
});

const { readable, writable } = Duplex.toWeb(duplex);
writable.getWriter().write('hello');

const { value } = await readable.getReader().read();
console.log('readable', value);
```

----------------------------------------

TITLE: Creating a Duplex Stream with ES6 Class Syntax in Node.js
DESCRIPTION: Example of creating a Duplex stream using ES6 class syntax. Duplex streams implement both Readable and Writable interfaces, allowing for bidirectional data flow.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_89

LANGUAGE: javascript
CODE:
```
const { Duplex } = require('node:stream');

class MyDuplex extends Duplex {
  constructor(options) {
    super(options);
    // ...
  }
}
```

----------------------------------------

TITLE: Measuring Async Operation Duration with Async Hooks and PerformanceObserver (ESM) - JavaScript
DESCRIPTION: Illustrates how to use async_hooks and performance APIs to measure the duration of asynchronous operations such as setTimeout callbacks in an ECMAScript module. Requires Node.js and access to 'node:async_hooks' and 'node:perf_hooks'. The PerformanceObserver captures and outputs measured durations. Inputs include a Timeout asynchronous operation, while outputs are printed performance entries. Highlights detailed timing of async activities.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_20

LANGUAGE: JavaScript
CODE:
```
```mjs\nimport { createHook } from 'node:async_hooks';\nimport { performance, PerformanceObserver } from 'node:perf_hooks';\n\nconst set = new Set();\nconst hook = createHook({\n  init(id, type) {\n    if (type === 'Timeout') {\n      performance.mark(`Timeout-${id}-Init`);\n      set.add(id);\n    }\n  },\n  destroy(id) {\n    if (set.has(id)) {\n      set.delete(id);\n      performance.mark(`Timeout-${id}-Destroy`);\n      performance.measure(`Timeout-${id}`,\n                          `Timeout-${id}-Init`,\n                          `Timeout-${id}-Destroy`);\n    }\n  },\n});\nhook.enable();\n\nconst obs = new PerformanceObserver((list, observer) => {\n  console.log(list.getEntries()[0]);\n  performance.clearMarks();\n  performance.clearMeasures();\n  observer.disconnect();\n});\nobs.observe({ entryTypes: ['measure'], buffered: true });\n\nsetTimeout(() => {}, 1000);\n```
```

----------------------------------------

TITLE: Executing Node.js with Permissions Enabled (Error Example)
DESCRIPTION: Demonstrates the error thrown when running a Node.js script (`index.js`) with the `--permission` flag without granting necessary file system read access for the entry script itself. The error `ERR_ACCESS_DENIED` with permission `FileSystemRead` indicates that access to the script file resource was restricted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/permissions.md#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ node --permission index.js

Error: Access to this API has been restricted
    at node:internal/main/run_main_module:23:47 {
  code: 'ERR_ACCESS_DENIED',
  permission: 'FileSystemRead',
  resource: '/home/user/index.js'
}
```

----------------------------------------

TITLE: Configuring Node.js Diagnostic Reports Programmatically in JavaScript
DESCRIPTION: This JavaScript code demonstrates how to configure Node.js diagnostic report generation at runtime using properties of the `process.report` object. It shows examples of enabling/disabling reports on fatal errors, signals, and uncaught exceptions, changing the signal used for external triggers (e.g., to 'SIGQUIT'), and excluding network interface details using `excludeNetwork`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_6

LANGUAGE: js
CODE:
```
// Trigger report only on uncaught exceptions.
process.report.reportOnFatalError = false;
process.report.reportOnSignal = false;
process.report.reportOnUncaughtException = true;

// Trigger report for both internal errors as well as external signal.
process.report.reportOnFatalError = true;
process.report.reportOnSignal = true;
process.report.reportOnUncaughtException = false;

// Change the default signal to 'SIGQUIT' and enable it.
process.report.reportOnFatalError = false;
process.report.reportOnUncaughtException = false;
process.report.reportOnSignal = true;
process.report.signal = 'SIGQUIT';

// Disable network interfaces reporting
process.report.excludeNetwork = true;
```

----------------------------------------

TITLE: Using stream.finished with cleanup option
DESCRIPTION: Example showing how to use the stream.finished function with the cleanup option to remove event listeners after the promise is resolved or rejected. This prevents dangling event listeners.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
await finished(rs, { cleanup: true });
```

----------------------------------------

TITLE: Basic HTTP Request with Undici
DESCRIPTION: Basic example showing how to make an HTTP request using Undici's request function. Demonstrates handling of status code, headers, trailers and body streaming.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { request } from 'undici'

const {
  statusCode,
  headers,
  trailers,
  body
} = await request('http://localhost:3000/foo')

console.log('response received', statusCode)
console.log('headers', headers)

for await (const data of body) { console.log('data', data) }

console.log('trailers', trailers)
```

----------------------------------------

TITLE: Creating a Custom Writable Stream Class in Node.js
DESCRIPTION: Example of extending the Writable stream class to create a custom implementation. Shows proper constructor setup with options handling and inheritance pattern.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_71

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

class MyWritable extends Writable {
  constructor({ highWaterMark, ...options }) {
    super({ highWaterMark });
    // ...
  }
}
```

----------------------------------------

TITLE: Handling Multiple Signal Events in Node.js (ES Modules)
DESCRIPTION: This snippet demonstrates how to handle multiple signal events (SIGINT and SIGTERM) in Node.js using ES Modules. It shows how to use a single function to handle multiple signals and keep the process running.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_22

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

// Begin reading from stdin so the process does not exit.
process.stdin.resume();

process.on('SIGINT', () => {
  console.log('Received SIGINT. Press Control-D to exit.');
});

// Using a single function to handle multiple signals
function handle(signal) {
  console.log(`Received ${signal}`);
}

process.on('SIGINT', handle);
process.on('SIGTERM', handle);
```

----------------------------------------

TITLE: Creating a URL with Relative Path
DESCRIPTION: Example showing how to create a URL by resolving a relative path against a base URL.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const myURL = new URL('/foo', 'https://example.org/');
// https://example.org/foo
```

----------------------------------------

TITLE: Creating an HTTP Server with Event Listener in Node.js
DESCRIPTION: Shows how to create an HTTP server using http.createServer() and attach a request event listener separately. This approach allows for more flexibility in handling requests.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_57

LANGUAGE: JavaScript
CODE:
```
import http from 'node:http';

// Create a local server to receive data from
const server = http.createServer();

// Listen to the request event
server.on('request', (request, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
```

LANGUAGE: JavaScript
CODE:
```
const http = require('node:http');

// Create a local server to receive data from
const server = http.createServer();

// Listen to the request event
server.on('request', (request, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
```

----------------------------------------

TITLE: Identifying the Operating System Platform in Node.js (CJS)
DESCRIPTION: This snippet shows how to identify the operating system platform on which the Node.js process is running using the `process.platform` property within a CommonJS module. It uses `require('node:process')` to get the `process` object, destructures the `platform` property, and logs its string value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_68

LANGUAGE: cjs
CODE:
```
const { platform } = require('node:process');

console.log(`This platform is ${platform}`);
```

----------------------------------------

TITLE: Executing Shell Commands with `exec` (CJS)
DESCRIPTION: Demonstrates basic usage of `child_process.exec` in CommonJS to run shell commands. It shows how to handle paths with spaces using double quotes and how shell variables like `$HOME` are interpreted, requiring escaping (`\$HOME`) if the literal string is needed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_4

LANGUAGE: cjs
CODE:
```
const { exec } = require('node:child_process');

exec('"/path/to/test file/test.sh" arg1 arg2');
// Double quotes are used so that the space in the path is not interpreted as
// a delimiter of multiple arguments.

exec('echo "The \\$HOME variable is $HOME"');
// The $HOME variable is escaped in the first instance, but not in the second.
```

----------------------------------------

TITLE: Writing Unsigned 32-bit Integer (BE) to Buffer (Node.js)
DESCRIPTION: Writes an unsigned 32-bit integer `value` to the Buffer `buf` at the specified `offset` using big-endian format. `value` must be a valid unsigned 32-bit integer (0-4294967295). Returns the offset plus four. Also available as `writeUint32BE`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_98

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeUInt32BE(0xfeedface, 0);

console.log(buf);
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeUInt32BE(0xfeedface, 0);

console.log(buf);
```

----------------------------------------

TITLE: Handling Close and Exit Events with child_process.spawn in ES Modules
DESCRIPTION: Example demonstrating how to spawn a child process using the spawn method in ES Modules format, and how to handle the 'close' and 'exit' events along with stdout data. This shows the same functionality as the CommonJS example but with ES import syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_34

LANGUAGE: JavaScript
CODE:
```
import { spawn } from 'node:child_process';
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process close all stdio with code ${code}`);
});

ls.on('exit', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

----------------------------------------

TITLE: Package.json Dual Entry Point Declaration for Compatibility (JSON)
DESCRIPTION: Lists both main and exports fields in package.json to ensure compatibility across old and new Node.js versions and modern build tools. The same module file is exposed as the main entry using both fields. Essential for maintaining cross-version compatibility without breaking clients in the ecosystem.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{
  "main": "./index.js",
  "exports": "./index.js"
}
```

----------------------------------------

TITLE: Converting Web Streams to Node Streams in JavaScript
DESCRIPTION: This snippet demonstrates how to convert a web stream obtained from a fetch response to a Node.js readable stream using the Readable.fromWeb() method.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import { fetch } from 'undici'
import { Readable } from 'node:stream'

const response = await fetch('https://example.com')
const readableWebStream = response.body
const readableNodeStream = Readable.fromWeb(readableWebStream)
```

----------------------------------------

TITLE: Aborting `exec` with AbortSignal (MJS)
DESCRIPTION: Demonstrates cancelling a child process initiated by `child_process.exec` using an `AbortController` and its associated `signal` using ES Modules syntax. Passing the signal in the options allows `controller.abort()` to terminate the process, resulting in an `AbortError` being passed to the callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_11

LANGUAGE: mjs
CODE:
```
import { exec } from 'node:child_process';
const controller = new AbortController();
const { signal } = controller;
const child = exec('grep ssh', { signal }, (error) => {
  console.error(error); // an AbortError
});
controller.abort();
```

----------------------------------------

TITLE: Executing Shell Commands with `exec` (MJS)
DESCRIPTION: Demonstrates basic usage of `child_process.exec` using ES Modules syntax to run shell commands. It shows how to handle paths with spaces using double quotes and how shell variables like `$HOME` are interpreted, requiring escaping (`\$HOME`) if the literal string is needed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_5

LANGUAGE: mjs
CODE:
```
import { exec } from 'node:child_process';

exec('"/path/to/test file/test.sh" arg1 arg2');
// Double quotes are used so that the space in the path is not interpreted as
// a delimiter of multiple arguments.

exec('echo "The \\$HOME variable is $HOME"');
// The $HOME variable is escaped in the first instance, but not in the second.
```

----------------------------------------

TITLE: Performing ECDH Key Exchange using CommonJS in Node.js
DESCRIPTION: Demonstrates a basic Elliptic Curve Diffie-Hellman (ECDH) key exchange between two parties (Alice and Bob) using CommonJS. It initializes two `ECDH` instances with the 'secp521r1' curve, generates key pairs for both, computes the shared secret using each other's public key, and asserts that the secrets match. Requires the `node:crypto` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_21

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');

const {
  createECDH,
} = require('node:crypto');

// Generate Alice's keys...
const alice = createECDH('secp521r1');
const aliceKey = alice.generateKeys();

// Generate Bob's keys...
const bob = createECDH('secp521r1');
const bobKey = bob.generateKeys();

// Exchange and generate the secret...
const aliceSecret = alice.computeSecret(bobKey);
const bobSecret = bob.computeSecret(aliceKey);

assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));
// OK
```

----------------------------------------

TITLE: Stream Composition with Words Split Example
DESCRIPTION: Shows how to compose streams using the compose() method to split text into words.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_41

LANGUAGE: javascript
CODE:
```
import { Readable } from 'node:stream';

async function* splitToWords(source) {
  for await (const chunk of source) {
    const words = String(chunk).split(' ');

    for (const word of words) {
      yield word;
    }
  }
}

const wordsStream = Readable.from(['this is', 'compose as operator']).compose(splitToWords);
const words = await wordsStream.toArray();

console.log(words); // prints ['this', 'is', 'compose', 'as', 'operator']
```

----------------------------------------

TITLE: Creating TypedArray from Buffer (Sharing Memory) - JavaScript
DESCRIPTION: Shows how to create a TypedArray (Uint16Array) that shares the underlying memory with an existing Buffer by using the Buffer's .buffer, .byteOffset, and .length properties. This approach is useful when the Buffer's data should be interpreted according to the TypedArray's element type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_7

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from('hello', 'utf16le');
const uint16array = new Uint16Array(
  buf.buffer,
  buf.byteOffset,
  buf.length / Uint16Array.BYTES_PER_ELEMENT);

console.log(uint16array);

// Prints: Uint16Array(5) [ 104, 101, 108, 108, 111 ]
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('hello', 'utf16le');
const uint16array = new Uint16Array(
  buf.buffer,
  buf.byteOffset,
  buf.length / Uint16Array.BYTES_PER_ELEMENT);

console.log(uint16array);

// Prints: Uint16Array(5) [ 104, 101, 108, 108, 111 ]
```

----------------------------------------

TITLE: Retrieving the Process ID (PID) in Node.js (CJS)
DESCRIPTION: This snippet demonstrates how to obtain the Process ID (PID) of the currently running Node.js process using the `process.pid` property within a CommonJS module. It uses `require('node:process')` to get the `process` object and accesses the `pid` property via destructuring before logging it.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_66

LANGUAGE: cjs
CODE:
```
const { pid } = require('node:process');

console.log(`This process is pid ${pid}`);
```

----------------------------------------

TITLE: Using the glob Library for File Matching in Node.js
DESCRIPTION: Demonstrates various methods provided by the 'glob' library for file matching in JavaScript. It covers importing/requiring the library (`import` and `require`), asynchronous (`glob`, `globStream`, `Glob` class async iterator), synchronous (`globSync`), and stream-based (`globStream`) file finding. Examples include ignoring paths (`ignore: 'node_modules/**'`), cancelling operations (`AbortSignal`), handling multiple patterns, reusing `Glob` objects for efficiency, retrieving `Path` objects (`withFileTypes: true`), accessing file statistics (`stat: true`) for sorting/filtering (e.g., by modification time or permissions), and defining complex custom ignore rules based on file names, parent directories, or modification times.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/glob/README.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
// load using import
import { glob, globSync, globStream, globStreamSync, Glob } from 'glob'
// or using commonjs, that's fine, too
const {
  glob,
  globSync,
  globStream,
  globStreamSync,
  Glob,
} = require('glob')

// the main glob() and globSync() resolve/return array of filenames

// all js files, but don't look in node_modules
const jsfiles = await glob('**/*.js', { ignore: 'node_modules/**' })

// pass in a signal to cancel the glob walk
const stopAfter100ms = await glob('**/*.css', {
  signal: AbortSignal.timeout(100),
})

// multiple patterns supported as well
const images = await glob(['css/*.{png,jpeg}', 'public/*.{png,jpeg}'])

// but of course you can do that with the glob pattern also
// the sync function is the same, just returns a string[] instead
// of Promise<string[]>
const imagesAlt = globSync('{css,public}/*.{png,jpeg}')

// you can also stream them, this is a Minipass stream
const filesStream = globStream(['**/*.dat', 'logs/**/*.log'])

// construct a Glob object if you wanna do it that way, which
// allows for much faster walks if you have to look in the same
// folder multiple times.
const g = new Glob('**/foo', {})
// glob objects are async iterators, can also do globIterate() or
// g.iterate(), same deal
for await (const file of g) {
  console.log('found a foo file:', file)
}
// pass a glob as the glob options to reuse its settings and caches
const g2 = new Glob('**/bar', g)
// sync iteration works as well
for (const file of g2) {
  console.log('found a bar file:', file)
}

// you can also pass withFileTypes: true to get Path objects
// these are like a Dirent, but with some more added powers
// check out http://npm.im/path-scurry for more info on their API
const g3 = new Glob('**/baz/**', { withFileTypes: true })
g3.stream().on('data', path => {
  console.log(
    'got a path object',
    path.fullpath(),
    path.isDirectory(),
    path.readdirSync().map(e => e.name),
  )
})

// if you use stat:true and withFileTypes, you can sort results
// by things like modified time, filter by permission mode, etc.
// All Stats fields will be available in that case. Slightly
// slower, though.
// For example:
const results = await glob('**', { stat: true, withFileTypes: true })

const timeSortedFiles = results
  .sort((a, b) => a.mtimeMs - b.mtimeMs)
  .map(path => path.fullpath())

const groupReadableFiles = results
  .filter(path => path.mode & 0o040)
  .map(path => path.fullpath())

// custom ignores can be done like this, for example by saying
// you'll ignore all markdown files, and all folders named 'docs'
const customIgnoreResults = await glob('**', {
  ignore: {
    ignored: p => /\.md$/.test(p.name),
    childrenIgnored: p => p.isNamed('docs'),
  },
})

// another fun use case, only return files with the same name as
// their parent folder, plus either `.ts` or `.js`
const folderNamedModules = await glob('**/*.{ts,js}', {
  ignore: {
    ignored: p => {
      const pp = p.parent
      return !(p.isNamed(pp.name + '.ts') || p.isNamed(pp.name + '.js'))
    },
  },
})

// find all files edited in the last hour, to do this, we ignore
// all of them that are more than an hour old
const newFiles = await glob('**', {
  // need stat so we have mtime
  stat: true,
  // only want the files, not the dirs
  nodir: true,
  ignore: {
    ignored: p => {
      return new Date() - p.mtime > 60 * 60 * 1000
    },
    // could add similar childrenIgnored here as well, but
    // directory mtime is inconsistent across platforms, so
    // probably better not to, unless you know the system
    // tracks this reliably.
  },
})
```

----------------------------------------

TITLE: Demonstrating Worker Event Loop Utilization in CommonJS
DESCRIPTION: This code example shows how to measure a worker thread's event loop utilization using the performance.eventLoopUtilization() method in CommonJS format. It creates a worker that executes CPU-intensive operations and handles messages from the main thread.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_19

LANGUAGE: cjs
CODE:
```
'use strict';

const { Worker, isMainThread, parentPort } = require('node:worker_threads');

if (isMainThread) {
  const worker = new Worker(__filename);
  setInterval(() => {
    worker.postMessage('hi');
    console.log(worker.performance.eventLoopUtilization());
  }, 100).unref();
} else {
  parentPort.on('message', () => console.log('msg')).unref();
  (function r(n) {
    if (--n < 0) return;
    const t = Date.now();
    while (Date.now() - t < 300);
    setImmediate(r, n);
  })(10);
}
```

----------------------------------------

TITLE: Sending Messages Between Non-Parent-Child Threads in Node.js
DESCRIPTION: Example showing how to communicate between threads that don't have a direct parent-child relationship using postMessageToThread. Creates a hierarchy of 10 nested workers with the deepest worker communicating with the main thread.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import process from 'node:process';
import {
  postMessageToThread,
  threadId,
  workerData,
  Worker,
} from 'node:worker_threads';

const channel = new BroadcastChannel('sync');
const level = workerData?.level ?? 0;

if (level < 10) {
  const worker = new Worker(new URL(import.meta.url), {
    workerData: { level: level + 1 },
  });
}

if (level === 0) {
  process.on('workerMessage', (value, source) => {
    console.log(`${source} -> ${threadId}:`, value);
    postMessageToThread(source, { message: 'pong' });
  });
} else if (level === 10) {
  process.on('workerMessage', (value, source) => {
    console.log(`${source} -> ${threadId}:`, value);
    channel.postMessage('done');
    channel.close();
  });

  await postMessageToThread(0, { message: 'ping' });
}

channel.onmessage = channel.close;
```

LANGUAGE: javascript
CODE:
```
'use strict';

const process = require('node:process');
const {
  postMessageToThread,
  threadId,
  workerData,
  Worker,
} = require('node:worker_threads');

const channel = new BroadcastChannel('sync');
const level = workerData?.level ?? 0;

if (level < 10) {
  const worker = new Worker(__filename, {
    workerData: { level: level + 1 },
  });
}

if (level === 0) {
  process.on('workerMessage', (value, source) => {
    console.log(`${source} -> ${threadId}:`, value);
    postMessageToThread(source, { message: 'pong' });
  });
} else if (level === 10) {
  process.on('workerMessage', (value, source) => {
    console.log(`${source} -> ${threadId}:`, value);
    channel.postMessage('done');
    channel.close();
  });

  postMessageToThread(0, { message: 'ping' });
}

channel.onmessage = channel.close;
```

----------------------------------------

TITLE: Mocking setTimeout using Global Mock Timers - ES Module
DESCRIPTION: Shows how to mock the global `setTimeout` function using `mock.timers`. It enables mocking for specific APIs, asserts that the callback hasn't run initially, advances the mocked time using `mock.timers.tick()`, and then asserts that the callback has been executed. Global mocks require manual reset.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_24

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { mock, test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', () => {
  const fn = mock.fn();

  // Optionally choose what to mock
  mock.timers.enable({ apis: ['setTimeout'] });
  setTimeout(fn, 9999);
  assert.strictEqual(fn.mock.callCount(), 0);

  // Advance in time
  mock.timers.tick(9999);
  assert.strictEqual(fn.mock.callCount(), 1);

  // Reset the globally tracked mocks.
  mock.timers.reset();

  // If you call reset mock instance, it will also reset timers instance
  mock.reset();
});
```

----------------------------------------

TITLE: Executing npm start Command (Bash)
DESCRIPTION: Shows the basic syntax for running the `npm start` command. Optional arguments (`<args>`) can be passed to the script being executed by placing them after `--`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-start.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm start [-- <args>]
```

----------------------------------------

TITLE: Context Recovery with diagnostics_channel and AsyncLocalStorage (ES Modules)
DESCRIPTION: Example of using AsyncLocalStorage with TracingChannel to maintain context across asynchronous boundaries in ES Modules. This demonstrates how to restore trace context between async operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_38

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';
import { AsyncLocalStorage } from 'node:async_hooks';

const channels = diagnostics_channel.tracingChannel('my-channel');
const myStore = new AsyncLocalStorage();

// The start channel sets the initial store data to something
// and stores that store data value on the trace context object
channels.start.bindStore(myStore, (data) => {
  const span = new Span(data);
  data.span = span;
  return span;
});

// Then asyncStart can restore from that data it stored previously
channels.asyncStart.bindStore(myStore, (data) => {
  return data.span;
});
```

----------------------------------------

TITLE: Using socket.address() to get bound address info (Node.js, JavaScript)
DESCRIPTION: Illustrates use of socket.address() method to retrieve the socket's currently bound address, containing port, family, and address properties. Dependencies include a net.Socket instance, typically used after binding or connecting. The output is an object like { port: 12346, family: 'IPv4', address: '127.0.0.1' }; limitations include variations across platforms and that the family property format has evolved over Node.js versions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
socket.address()
```

----------------------------------------

TITLE: Synchronous File Deletion Example
DESCRIPTION: Shows how to use the synchronous unlinkSync function to delete a file in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { unlinkSync } from 'node:fs';

try {
  unlinkSync('/tmp/hello');
  console.log('successfully deleted /tmp/hello');
} catch (err) {
  // handle the error
}
```

LANGUAGE: JavaScript
CODE:
```
const { unlinkSync } = require('node:fs');

try {
  unlinkSync('/tmp/hello');
  console.log('successfully deleted /tmp/hello');
} catch (err) {
  // handle the error
}
```

----------------------------------------

TITLE: Creating a Symbolic Link in Node.js
DESCRIPTION: This example shows how to create a symbolic link using fs.symlink(). It creates a link named 'mewtwo' pointing to 'mew' in the same directory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_74

LANGUAGE: mjs
CODE:
```
import { symlink } from 'node:fs';

symlink('./mew', './mewtwo', callback);
```

----------------------------------------

TITLE: Installing a Local npm Package in Another Project
DESCRIPTION: Shows how to install a locally developed npm package in a different project for testing. This involves navigating to another directory and specifying the local package path.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/developers.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
cd ../some-other-folder
npm install ../my-package
```

----------------------------------------

TITLE: Reading a File with readableWebStream Using Node.js fs/promises - JavaScript ES Module
DESCRIPTION: Demonstrates how to open a file using the ES module syntax, obtain a ReadableStream from filehandle.readableWebStream(), and iterate over its chunks asynchronously. Requires Node.js v17.0.0 or newer, and access to the 'node:fs/promises' module. The code reads the file in byte-oriented chunks and logs each chunk. The file handle must be explicitly closed after reading; the method will throw an error if the ReadableStream is requested more than once or after closure.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
import {
  open,
} from 'node:fs/promises';

const file = await open('./some/file/to/read');

for await (const chunk of file.readableWebStream())
  console.log(chunk);

await file.close();

```

----------------------------------------

TITLE: Using AsyncLocalStorage with async/await - Node.js JavaScript
DESCRIPTION: This snippet shows the recommended pattern for using `AsyncLocalStorage.run()` inside an async function. It creates a new `Map` instance as the store, runs a callback function within that store's context, sets a value in the store, and returns the result of `foo()`, which is awaited. The store is only accessible within the `run` callback and operations originating from it.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_6

LANGUAGE: javascript
CODE:
```
async function fn() {
  await asyncLocalStorage.run(new Map(), () => {
    asyncLocalStorage.getStore().set('key', value);
    return foo(); // The return value of foo will be awaited
  });
}
```

----------------------------------------

TITLE: Using pipeline with CommonJS in Node.js streams/promises API
DESCRIPTION: Example demonstrating how to use the pipeline function from the stream/promises API with CommonJS to process a file through gzip compression. The pipeline connects read stream, gzip transform, and write stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');
const zlib = require('node:zlib');

async function run() {
  await pipeline(
    fs.createReadStream('archive.tar'),
    zlib.createGzip(),
    fs.createWriteStream('archive.tar.gz'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
```

----------------------------------------

TITLE: Iterating over a ReadableStream using Async Iterator (MJS)
DESCRIPTION: This snippet demonstrates how to consume a `ReadableStream` using the async iterator protocol (`for await...of`). It imports `Buffer` to convert received chunks (assumed to be ArrayBuffers or similar) into strings for logging. The loop continues until the stream terminates, consuming all its chunks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_7

LANGUAGE: mjs
CODE:
```
```mjs
import { Buffer } from 'node:buffer';

const stream = new ReadableStream(getSomeSource());

for await (const chunk of stream)
  console.log(Buffer.from(chunk).toString());
```
```

----------------------------------------

TITLE: Running System Commands with Output Capture in Node.js
DESCRIPTION: Example showing how to run the 'ls' command and capture its stdout, stderr, and exit code using child_process.spawn()
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.stderr.on('data', (data) => {
  console.error(`stderr: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.stderr.on('data', (data) => {
  console.error(`stderr: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

----------------------------------------

TITLE: Defining Explicit Package Exports for Backwards Compatibility (JSON)
DESCRIPTION: Shows a sample package.json configuration using the exports field to explicitly re-export all previously supported entry points (directories and files, including package.json). This approach ensures a smooth transition to using the exports field without introducing breaking changes, and helps clearly define the public interface. Ensures all entry paths are accessible as before, and requires Node.js v12+.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "name": "my-package",
  "exports": {
    ".": "./lib/index.js",
    "./lib": "./lib/index.js",
    "./lib/index": "./lib/index.js",
    "./lib/index.js": "./lib/index.js",
    "./feature": "./feature/index.js",
    "./feature/index": "./feature/index.js",
    "./feature/index.js": "./feature/index.js",
    "./package.json": "./package.json"
  }
}
```

----------------------------------------

TITLE: Creating an HTTP/2 Client Connection in Node.js
DESCRIPTION: This code demonstrates how to create an HTTP/2 client connection using http2.connect() and make requests to an HTTP/2 server. It shows request and response handling with proper error management.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/util/missingssl-internal.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const http2 = require('http2');

// Connect to a server
const client = http2.connect('https://localhost:8443');

client.on('error', (err) => console.error(err));

// Make a request
const req = client.request({ ':path': '/' });

req.on('response', (headers) => {
  console.log(headers[':status']);
});

req.on('data', (chunk) => {
  console.log(chunk.toString());
});

req.on('end', () => {
  client.close();
});

req.end();
```

----------------------------------------

TITLE: Implementing Continuation Local Storage via executionAsyncResource (CommonJS Syntax) - JavaScript
DESCRIPTION: This CommonJS version mirrors the ES module example, using require syntax to set up HTTP server request context propagation with async_hooks. It demonstrates how to set, synchronize, and retrieve per-request state objects tied to unique Symbol keys on async resource objects. Requires Node.js's async_hooks and http modules. Key parameters include the request URL (stored in state), Symbol for context isolation, and async_hooks hook configuration. Inputs: HTTP requests; Outputs: JSON responses containing the per-request state.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_20

LANGUAGE: cjs
CODE:
```
const { createServer } = require('node:http');
const {
  executionAsyncId,
  executionAsyncResource,
  createHook,
} = require('node:async_hooks');
const sym = Symbol('state'); // Private symbol to avoid pollution

createHook({
  init(asyncId, type, triggerAsyncId, resource) {
    const cr = executionAsyncResource();
    if (cr) {
      resource[sym] = cr[sym];
    }
  },
}).enable();

const server = createServer((req, res) => {
  executionAsyncResource()[sym] = { state: req.url };
  setTimeout(function() {
    res.end(JSON.stringify(executionAsyncResource()[sym]));
  }, 100);
}).listen(3000);
```

----------------------------------------

TITLE: Hashing Data with Piped Streams - Node.js Crypto (JavaScript CJS)
DESCRIPTION: This snippet shows how to hash a file's content using piped streams in CommonJS. It requires 'node:fs', 'node:crypto', and 'node:process' modules. The file is read through a stream, piped through a SHA-256 hash, set to hex encoding, and output to stdout. Ensure the input file exists and Node.js is available.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_29

LANGUAGE: JavaScript
CODE:
```
const { createReadStream } = require('node:fs');
const { createHash } = require('node:crypto');
const { stdout } = require('node:process');

const hash = createHash('sha256');

const input = createReadStream('test.js');
input.pipe(hash).setEncoding('hex').pipe(stdout);
```

----------------------------------------

TITLE: Multiple Event Emissions with On Method in Node.js (ESM)
DESCRIPTION: This snippet demonstrates how the on() method in Node.js EventEmitter invokes the listener every time the named event is emitted. It uses ECMAScript modules to show multiple event emissions and listener invocations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
let m = 0;
myEmitter.on('event', () => {
  console.log(++m);
});
myEmitter.emit('event');
// Prints: 1
myEmitter.emit('event');
// Prints: 2
```

----------------------------------------

TITLE: Requiring an ES Module with Static Method Exports from CommonJS (Node.js - JavaScript)
DESCRIPTION: A CommonJS module requires an ES module that attaches a function as a static property to its default export. The required class is logged and the static method is accessed directly, providing compatibility with named exports for CommonJS consumers. Requires the ES module from the previous snippet.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_10

LANGUAGE: cjs
CODE:
```
const Point = require('./point.mjs');\nconsole.log(Point); // [class Point]\n\nconst { distance } = require('./point.mjs');\nconsole.log(distance); // [Function: distance]
```

----------------------------------------

TITLE: Accessing/Setting Buffer Bytes by Index
DESCRIPTION: Shows how to access and modify individual bytes within a Buffer using the square bracket `[index]` operator. This allows reading and writing octet values (0-255) at specific positions, similar to a `Uint8Array`. The example demonstrates populating a Buffer from an ASCII string character by character.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_37

LANGUAGE: Node.js (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

// Copy an ASCII string into a `Buffer` one byte at a time.
// (This only works for ASCII-only strings. In general, one should use
// `Buffer.from()` to perform this conversion.)

const str = 'Node.js';
const buf = Buffer.allocUnsafe(str.length);

for (let i = 0; i < str.length; i++) {
  buf[i] = str.charCodeAt(i);
}

console.log(buf.toString('utf8'));
// Prints: Node.js
```

LANGUAGE: Node.js (CJS)
CODE:
```
const { Buffer } = require('node:buffer');

// Copy an ASCII string into a `Buffer` one byte at a time.
// (This only works for ASCII-only strings. In general, one should use
// `Buffer.from()` to perform this conversion.)

const str = 'Node.js';
const buf = Buffer.allocUnsafe(str.length);

for (let i = 0; i < str.length; i++) {
  buf[i] = str.charCodeAt(i);
}

console.log(buf.toString('utf8'));
// Prints: Node.js
```

----------------------------------------

TITLE: Chaining Errors with the cause Option - Node.js Errors - JavaScript
DESCRIPTION: Demonstrates how to create a chained error using the Error constructor's options object with a cause property. Requires Node.js v16.9.0 or newer. The symptom error object contains a cause (the original error), which is seen when serializing with util.inspect() or printing to the console. The main parameter is the cause: an underlying Error instance. The output displays both error messages and their respective stack traces. No third-party dependencies required.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
const cause = new Error('The remote HTTP server responded with a 500 status');
const symptom = new Error('The message failed to send', { cause });

console.log(symptom);
// Prints:
//   Error: The message failed to send
//       at REPL2:1:17
//       at Script.runInThisContext (node:vm:130:12)
//       ... 7 lines matching cause stack trace ...
//       at [_line] [as _line] (node:internal/readline/interface:886:18) {
//     [cause]: Error: The remote HTTP server responded with a 500 status
//         at REPL1:1:15
//         at Script.runInThisContext (node:vm:130:12)
//         at REPLServer.defaultEval (node:repl:574:29)
//         at bound (node:domain:426:15)
//         at REPLServer.runBound [as eval] (node:domain:437:12)
//         at REPLServer.onLine (node:repl:902:10)
//         at REPLServer.emit (node:events:549:35)
//         at REPLServer.emit (node:domain:482:12)
//         at [_onLine] [as _onLine] (node:internal/readline/interface:425:12)
//         at [_line] [as _line] (node:internal/readline/interface:886:18)

```

----------------------------------------

TITLE: Calculating HMAC over Piped Streams - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This ESM example computes an HMAC over file data streamed from disk. 'node:fs' and 'node:process' provide the input and output streams, while HMAC is created via async import from 'node:crypto'. The whole file is piped through the HMAC and written to stdout. Requires correct secret and file, Node.js, and enabled ESM.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_36

LANGUAGE: JavaScript
CODE:
```
import { createReadStream } from 'node:fs';
import { stdout } from 'node:process';
const {
  createHmac,
} = await import('node:crypto');

const hmac = createHmac('sha256', 'a secret');

const input = createReadStream('test.js');
input.pipe(hmac).pipe(stdout);
```

----------------------------------------

TITLE: Copying Files Synchronously in Node.js
DESCRIPTION: Shows how to use fs.copyFileSync() to copy files. It demonstrates basic usage and how to use the COPYFILE_EXCL flag to prevent overwriting existing files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_85

LANGUAGE: mjs
CODE:
```
import { copyFileSync, constants } from 'node:fs';

// destination.txt will be created or overwritten by default.
copyFileSync('source.txt', 'destination.txt');
console.log('source.txt was copied to destination.txt');

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
copyFileSync('source.txt', 'destination.txt', constants.COPYFILE_EXCL);
```

----------------------------------------

TITLE: Managing Maximum Listeners in Node.js EventEmitter (CommonJS)
DESCRIPTION: CommonJS version of the previous example, showing how to temporarily increase the maximum number of listeners for an EventEmitter instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_35

LANGUAGE: JavaScript
CODE:
```
const EventEmitter = require('node:events');
const emitter = new EventEmitter();
emitter.setMaxListeners(emitter.getMaxListeners() + 1);
emitter.once('event', () => {
  // do stuff
  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));
});
```

----------------------------------------

TITLE: Basic MockClient Instantiation with MockAgent
DESCRIPTION: Creates a MockAgent with connections set to 1, which is required to return a MockClient instance. The MockClient is then obtained by calling the get method on the MockAgent with the target origin.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockClient.md#2025-04-23_snippet_0

LANGUAGE: js
CODE:
```
import { MockAgent } from 'undici'

// Connections must be set to 1 to return a MockClient instance
const mockAgent = new MockAgent({ connections: 1 })

const mockClient = mockAgent.get('http://localhost:3000')
```

----------------------------------------

TITLE: Converting Buffer to JSON - Node.js
DESCRIPTION: Illustrates the `buf.toJSON()` method, which returns a JSON representation of the Buffer. It shows how `JSON.stringify()` implicitly calls this method and how `Buffer.from()` can be used with the resulting object to recreate the buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_76

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);
const json = JSON.stringify(buf);

console.log(json);
// Prints: {"type":"Buffer","data":[1,2,3,4,5]}

const copy = JSON.parse(json, (key, value) => {
  return value && value.type === 'Buffer' ?
    Buffer.from(value) :
    value;
});

console.log(copy);
// Prints: <Buffer 01 02 03 04 05>
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);
const json = JSON.stringify(buf);

console.log(json);
// Prints: {"type":"Buffer","data":[1,2,3,4,5]}

const copy = JSON.parse(json, (key, value) => {
  return value && value.type === 'Buffer' ?
    Buffer.from(value) :
    value;
});

console.log(copy);
// Prints: <Buffer 01 02 03 04 05>
```

----------------------------------------

TITLE: Handling HTTP/2 Stream Event using createSecureServer (CJS)
DESCRIPTION: This snippet demonstrates how to create a secure HTTP/2 server using the CommonJS syntax and handle incoming request streams via the 'stream' event. It shows how to access request headers and send a basic 'hello world' response. TLS options must be provided to `http2.createSecureServer()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_40

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');
const {
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_STATUS,
  HTTP2_HEADER_CONTENT_TYPE,
} = http2.constants;

const options = getOptionsSomehow();

const server = http2.createSecureServer(options);
server.on('stream', (stream, headers, flags) => {
  const method = headers[HTTP2_HEADER_METHOD];
  const path = headers[HTTP2_HEADER_PATH];
  // ...
  stream.respond({
    [HTTP2_HEADER_STATUS]: 200,
    [HTTP2_HEADER_CONTENT_TYPE]: 'text/plain; charset=utf-8',
  });
  stream.write('hello ');
  stream.end('world');
});
```

----------------------------------------

TITLE: Using assert.strictEqual() in Node.js (ESM)
DESCRIPTION: Illustrates various use cases of assert.strictEqual() to test strict equality between values. Examples include comparing numbers, strings, and custom error messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_48

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

assert.strictEqual(1, 2);
// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:
//
// 1 !== 2

assert.strictEqual(1, 1);
// OK

assert.strictEqual('Hello foobar', 'Hello World!');
// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:
// + actual - expected
//
// + 'Hello foobar'
// - 'Hello World!'
//          ^

const apples = 1;
const oranges = 2;
assert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);
// AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2

assert.strictEqual(1, '1', new TypeError('Inputs are not identical'));
// TypeError: Inputs are not identical
```

----------------------------------------

TITLE: Abort Signal with Question Interface
DESCRIPTION: Shows how to use AbortSignal to implement a timeout for the question interface. Sets a 10-second timeout and handles the abort event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
const signal = AbortSignal.timeout(10_000);

signal.addEventListener('abort', () => {
  console.log('The food question timed out');
}, { once: true });

const answer = await rl.question('What is your favorite food? ', { signal });
console.log(`Oh, so your favorite food is ${answer}`);
```

----------------------------------------

TITLE: Generating Random Values in Node.js Crypto Module
DESCRIPTION: The crypto.getRandomValues function is an alias for crypto.webcrypto.getRandomValues(). It fills a typed array with cryptographically strong random values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_78

LANGUAGE: JavaScript
CODE:
```
crypto.getRandomValues(typedArray)
```

----------------------------------------

TITLE: Resolving Real Paths with fsPromises.realpath in Node.js
DESCRIPTION: Asynchronously determines the actual location of `path` using semantics similar to `fs.realpath.native()`. Returns a Promise that fulfills with the resolved path. Supports only paths convertible to UTF8. The optional `options` can specify encoding (defaults to 'utf8'); if 'buffer', a Buffer is returned. Note: Requires procfs mounted on /proc on Linux when linked against musl libc.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_31

LANGUAGE: javascript
CODE:
```
fsPromises.realpath(path[, options])
```

----------------------------------------

TITLE: Illustrating Unhandled Rejection with Async EventEmitter Handler (MJS/CJS)
DESCRIPTION: Demonstrates how using an `async` function as an event handler for `EventEmitter` can lead to an unhandled promise rejection if the function throws an error. The example sets up an event listener for 'something' that intentionally throws an error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_16

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
const ee = new EventEmitter();
ee.on('something', async (value) => {
  throw new Error('kaboom');
});
```

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
const ee = new EventEmitter();
ee.on('something', async (value) => {
  throw new Error('kaboom');
});
```

----------------------------------------

TITLE: Using pbkdf2Sync for Key Derivation in Node.js
DESCRIPTION: Demonstrates the use of the pbkdf2Sync function to derive a key from a password and salt. The example shows both ECMAScript module (ESM) and CommonJS module usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_83

LANGUAGE: JavaScript
CODE:
```
const {
  pbkdf2Sync,
} = await import('node:crypto');

const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha512');
console.log(key.toString('hex'));  // '3745e48...08d59ae'
```

LANGUAGE: JavaScript
CODE:
```
const {
  pbkdf2Sync,
} = require('node:crypto');

const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha512');
console.log(key.toString('hex'));  // '3745e48...08d59ae'
```

----------------------------------------

TITLE: Importing CommonJS Module Default/Namespace (Node.js JS)
DESCRIPTION: These snippets illustrate importing a CommonJS module (`cjs`) into an ES module context using different import syntaxes. The first shows that the default import syntax (`import cjsSugar`) and importing the default explicitly (`import { default as cjs }`) both yield the `module.exports` value. The second demonstrates that importing the entire namespace (`import * as m`) reveals the structure, including `default` and `'module.exports'` exports pointing to the same value, and shows the result of a dynamic import.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_11

LANGUAGE: js
CODE:
```
import { default as cjs } from 'cjs';
// Identical to the above
import cjsSugar from 'cjs';

console.log(cjs);
console.log(cjs === cjsSugar);
// Prints:
//   <module.exports>
//   true
```

LANGUAGE: js
CODE:
```
import * as m from 'cjs';
console.log(m);
console.log(m === await import('cjs'));
// Prints:
//   [Module] { default: <module.exports>, 'module.exports': <module.exports> }
//   true
```

----------------------------------------

TITLE: Closing Idle Connections on Node.js HTTP Server in JavaScript
DESCRIPTION: Demonstrates creating a Node.js HTTP server and using `server.closeIdleConnections()` in conjunction with `server.close()`. This is useful for gracefully shutting down the server by closing connections that are not actively processing requests, such as keep-alive connections, especially for Node.js versions prior to 19.0.0. The example sets up a server, listens on port 8000, and schedules its closure along with idle connections after 10 seconds. It depends on the `node:http` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_29

LANGUAGE: js
CODE:
```
```js
const http = require('node:http');

const server = http.createServer({ keepAliveTimeout: 60000 }, (req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
// Close the server after 10 seconds
setTimeout(() => {
  server.close(() => {
    console.log('server on port 8000 closed successfully');
  });
  // Closes idle connections, such as keep-alive connections. Server will close
  // once remaining active connections are terminated
  server.closeIdleConnections();
}, 10000);
```
```

----------------------------------------

TITLE: Spying on a Function using node:test/mock - CommonJS
DESCRIPTION: Shows the CommonJS equivalent of spying on a standard JavaScript function using the global `mock.fn()`. It performs the same assertions on call count and call details, demonstrating the identical API usage despite the different module system.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_22

LANGUAGE: cjs
CODE:
```
'use strict';
const assert = require('node:assert');
const { mock, test } = require('node:test');

test('spies on a function', () => {
  const sum = mock.fn((a, b) => {
    return a + b;
  });

  assert.strictEqual(sum.mock.callCount(), 0);
  assert.strictEqual(sum(3, 4), 7);
  assert.strictEqual(sum.mock.callCount(), 1);

  const call = sum.mock.calls[0];
  assert.deepStrictEqual(call.arguments, [3, 4]);
  assert.strictEqual(call.result, 7);
  assert.strictEqual(call.error, undefined);

  // Reset the globally tracked mocks.
  mock.reset();
});
```

----------------------------------------

TITLE: Writing Data and Replacing File with FileHandle.writeFile in Node.js
DESCRIPTION: Asynchronously writes `data` to the file associated with the FileHandle, replacing the file if it already exists. Accepts string, Buffer, TypedArray, DataView, AsyncIterable, Iterable, or Stream as `data`. `options` can be an object with `encoding` (default 'utf8') and `signal` (AbortSignal), or a string specifying the encoding. Returns a Promise fulfilling with `undefined` upon success. Requires write access on the FileHandle. Unsafe for concurrent calls. If preceded by `write()` calls, writing starts from the current position, not necessarily the beginning.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_18



----------------------------------------

TITLE: Creating an HTTPS Server with PFX Certificate
DESCRIPTION: This example demonstrates creating an HTTPS server using a PFX certificate file in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
// ESM version
import { createServer } from 'node:https';
import { readFileSync } from 'node:fs';

const options = {
  pfx: readFileSync('test_cert.pfx'),
  passphrase: 'sample',
};

createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000);
```

LANGUAGE: javascript
CODE:
```
// CommonJS version
const https = require('node:https');
const fs = require('node:fs');

const options = {
  pfx: fs.readFileSync('test_cert.pfx'),
  passphrase: 'sample',
};

https.createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000);
```

----------------------------------------

TITLE: Defining Executable Command Mapping in package.json (JSON)
DESCRIPTION: This JSON snippet shows how to use the `bin` field in `package.json` to map a command name (`myapp`) to a specific JavaScript file (`bin/cli.js`). When the package is installed globally, npm creates a symlink or command file, making the script executable via the specified command name.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
  "bin": {
    "myapp": "bin/cli.js"
  }
}
```

----------------------------------------

TITLE: Abort Listener Implementation Examples
DESCRIPTION: Shows how to safely use AbortSignals with a disposable pattern to prevent memory leaks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_48

LANGUAGE: cjs
CODE:
```
const { addAbortListener } = require('node:events');

function example(signal) {
  let disposable;
  try {
    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());
    disposable = addAbortListener(signal, (e) => {
      // Do something when signal is aborted.
    });
  } finally {
    disposable?.[Symbol.dispose]();
  }
}
```

LANGUAGE: mjs
CODE:
```
import { addAbortListener } from 'node:events';

function example(signal) {
  let disposable;
  try {
    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());
    disposable = addAbortListener(signal, (e) => {
      // Do something when signal is aborted.
    });
  } finally {
    disposable?.[Symbol.dispose]();
  }
}
```

----------------------------------------

TITLE: Implementing Custom WriteStream with _construct
DESCRIPTION: Example of a custom WriteStream implementation with _construct for async initialization, _write for writing data, and _destroy for cleanup.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_77

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');
const fs = require('node:fs');

class WriteStream extends Writable {
  constructor(filename) {
    super();
    this.filename = filename;
    this.fd = null;
  }
  _construct(callback) {
    fs.open(this.filename, 'w', (err, fd) => {
      if (err) {
        callback(err);
      } else {
        this.fd = fd;
        callback();
      }
    });
  }
  _write(chunk, encoding, callback) {
    fs.write(this.fd, chunk, callback);
  }
  _destroy(err, callback) {
    if (this.fd) {
      fs.close(this.fd, (er) => callback(er || err));
    } else {
      callback(err);
    }
  }
}
```

----------------------------------------

TITLE: Retrieving the Process ID (PID) in Node.js (ESM)
DESCRIPTION: This snippet demonstrates how to obtain the Process ID (PID) of the currently running Node.js process using the `process.pid` property within an ES Module. It imports the `pid` property specifically from the `node:process` module and logs it to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_65

LANGUAGE: mjs
CODE:
```
import { pid } from 'node:process';

console.log(`This process is pid ${pid}`);
```

----------------------------------------

TITLE: Creating Cryptographic Signatures with subtle.sign in Node.js
DESCRIPTION: The sign method generates a cryptographic signature for data using the specified algorithm and key. It supports various signing algorithms including RSA, ECDSA, EdDSA, and HMAC. The method returns a Promise that resolves with an ArrayBuffer containing the signature.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
subtle.sign(algorithm, key, data)
```

----------------------------------------

TITLE: Run Node.js with Permission Model (Disallow Addon) (Console)
DESCRIPTION: Demonstrates running a Node.js script (`index.js`) with the Permission Model enabled (`--permission`) and allowing all file system reads (`--allow-fs-read=*`). This command is shown in the context of attempting to load a native addon without the `--allow-addons` flag, which will result in an `ERR_DLOPEN_DISABLED` error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_1

LANGUAGE: Console
CODE:
```
node --permission --allow-fs-read=* index.js
```

----------------------------------------

TITLE: Handling 'this' context with util.promisify() in Node.js (ESM)
DESCRIPTION: Demonstrates how to properly handle 'this' context when using util.promisify() with class methods in ECMAScript modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_46

LANGUAGE: JavaScript
CODE:
```
import { promisify } from 'node:util';

class Foo {
  constructor() {
    this.a = 42;
  }

  bar(callback) {
    callback(null, this.a);
  }
}

const foo = new Foo();

const naiveBar = promisify(foo.bar);
// TypeError: Cannot read properties of undefined (reading 'a')
// naiveBar().then(a => console.log(a));

naiveBar.call(foo).then((a) => console.log(a)); // '42'

const bindBar = naiveBar.bind(foo);
bindBar().then((a) => console.log(a)); // '42'
```

----------------------------------------

TITLE: HMAC Digest using update() and digest() Methods - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This ESM snippet demonstrates using hmac.update() to input data and hmac.digest('hex') to get the authentication code in hexadecimal. It initializes an HMAC with SHA-256 algorithm and a provided secret. Note: hmac object cannot be reused after digest() is called. Requires 'node:crypto' and ESM-capable Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_38

LANGUAGE: JavaScript
CODE:
```
const {
  createHmac,
} = await import('node:crypto');

const hmac = createHmac('sha256', 'a secret');

hmac.update('some data to hash');
console.log(hmac.digest('hex'));
// Prints:
//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e
```

----------------------------------------

TITLE: Making HTTP POST Request with Node.js (ES Modules)
DESCRIPTION: Example of creating an HTTP POST request to upload JSON data using ES modules. The code demonstrates setting up request options, handling the response with event listeners, and writing data to the request body.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_59

LANGUAGE: javascript
CODE:
```
import http from 'node:http';
import { Buffer } from 'node:buffer';

const postData = JSON.stringify({
  'msg': 'Hello World!',
});

const options = {
  hostname: 'www.google.com',
  port: 80,
  path: '/upload',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData),
  },
};

const req = http.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
  res.setEncoding('utf8');
  res.on('data', (chunk) => {
    console.log(`BODY: ${chunk}`);
  });
  res.on('end', () => {
    console.log('No more data in response.');
  });
});

req.on('error', (e) => {
  console.error(`problem with request: ${e.message}`);
});

// Write data to request body
req.write(postData);
req.end();
```

----------------------------------------

TITLE: Implementing Portable Node-API Addon Core Functionality in C
DESCRIPTION: Core implementation of a Node.js native addon that uses only portable JavaScript Native API functions. It includes an error handling macro and a function that creates and exports functionality. This pattern allows the code to be reused with different Node-API implementations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_13

LANGUAGE: c
CODE:
```
// addon.c
#include "addon.h"

#define NODE_API_CALL(env, call)                                  \
  do {                                                            \
    napi_status status = (call);                                  \
    if (status != napi_ok) {                                      \
      const napi_extended_error_info* error_info = NULL;          \
      napi_get_last_error_info((env), &error_info);               \
      const char* err_message = error_info->error_message;        \
      bool is_pending;                                            \
      napi_is_exception_pending((env), &is_pending);              \
      /* If an exception is already pending, don't rethrow it */  \
      if (!is_pending) {                                          \
        const char* message = (err_message == NULL)               \
            ? "empty error message"                               \
            : err_message;                                        \
        napi_throw_error((env), NULL, message);                   \
      }                                                           \
      return NULL;                                                \
    }                                                             \
  } while(0)

static napi_value
DoSomethingUseful(napi_env env, napi_callback_info info) {
  // Do something useful.
  return NULL;
}

napi_value create_addon(napi_env env) {
  napi_value result;
  NODE_API_CALL(env, napi_create_object(env, &result));

  napi_value exported_function;
  NODE_API_CALL(env, napi_create_function(env,
                                          "doSomethingUseful",
                                          NAPI_AUTO_LENGTH,
                                          DoSomethingUseful,
                                          NULL,
                                          &exported_function));

  NODE_API_CALL(env, napi_set_named_property(env,
                                             result,
                                             "doSomethingUseful",
                                             exported_function));

  return result;
}
```

----------------------------------------

TITLE: Skipping individual tests - Node.js Test Runner
DESCRIPTION: Demonstrates how to mark tests to be skipped using either the `{ skip: true }` option in the test configuration object or by calling the `t.skip()` method within the test function. Skipped tests are reported but their code block is not executed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// The skip option is used, but no message is provided.
test('skip option', { skip: true }, (t) => {
  // This code is never executed.
});

// The skip option is used, and a message is provided.
test('skip option with message', { skip: 'this is skipped' }, (t) => {
  // This code is never executed.
});

test('skip() method', (t) => {
  // Make sure to return here as well if the test contains additional logic.
  t.skip();
});

test('skip() method with message', (t) => {
  // Make sure to return here as well if the test contains additional logic.
  t.skip('this is skipped');
});
```

----------------------------------------

TITLE: Configuring Git user information
DESCRIPTION: These commands set up the global Git configuration with the user's name and email address for proper commit attribution.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/CONTRIBUTING.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ git config --global user.name "J. Random User"
$ git config --global user.email "j.random.user@example.com"
```

----------------------------------------

TITLE: Decrypting Data Using Decipheriv as a Stream in CommonJS
DESCRIPTION: Example demonstrating how to use the Decipheriv class as a stream in CommonJS. It performs the same decryption operation as the ESM example but using the require syntax for module imports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
const {
  scryptSync,
  createDecipheriv,
} = require('node:crypto');
const { Buffer } = require('node:buffer');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';
// Key length is dependent on the algorithm. In this case for aes192, it is
// 24 bytes (192 bits).
// Use the async `crypto.scrypt()` instead.
const key = scryptSync(password, 'salt', 24);
// The IV is usually passed along with the ciphertext.
const iv = Buffer.alloc(16, 0); // Initialization vector.

const decipher = createDecipheriv(algorithm, key, iv);

let decrypted = '';
decipher.on('readable', () => {
  let chunk;
  while (null !== (chunk = decipher.read())) {
    decrypted += chunk.toString('utf8');
  }
});
decipher.on('end', () => {
  console.log(decrypted);
  // Prints: some clear text data
});

// Encrypted with same algorithm, key and iv.
const encrypted =
  'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';
decipher.write(encrypted, 'hex');
decipher.end();
```

----------------------------------------

TITLE: Sending HTTP/2 Stream Response with Headers
DESCRIPTION: Demonstrates how to send a response on an `Http2Stream` (typically a server stream) by calling the `stream.respond()` method. This example shows setting standard HTTP/2 headers like `content-type` and `:status`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_15

LANGUAGE: js
CODE:
```
stream.respond({
  'content-type': 'text/html; charset=utf-8',
  ':status': 200,
});
```

----------------------------------------

TITLE: Mocking Global and Module Timers with timers.tick()
DESCRIPTION: This snippet demonstrates that `context.mock.timers.enable()` and `context.mock.timers.tick()` work correctly with timer functions from the global context (`setTimeout`), `node:timers`, and `node:timers/promises`. It sets timeouts using all three methods and asserts that `tick()` triggers the callbacks for each after advancing time.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_54

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';
import nodeTimers from 'node:timers';
import nodeTimersPromises from 'node:timers/promises';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', async (context) => {
  const globalTimeoutObjectSpy = context.mock.fn();
  const nodeTimerSpy = context.mock.fn();
  const nodeTimerPromiseSpy = context.mock.fn();

  // Optionally choose what to mock
  context.mock.timers.enable({ apis: ['setTimeout'] });
  setTimeout(globalTimeoutObjectSpy, 9999);
  nodeTimers.setTimeout(nodeTimerSpy, 9999);

  const promise = nodeTimersPromises.setTimeout(9999).then(nodeTimerPromiseSpy);

  // Advance in time
  context.mock.timers.tick(9999);
  assert.strictEqual(globalTimeoutObjectSpy.mock.callCount(), 1);
  assert.strictEqual(nodeTimerSpy.mock.callCount(), 1);
  await promise;
  assert.strictEqual(nodeTimerPromiseSpy.mock.callCount(), 1);
});
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');
const nodeTimers = require('node:timers');
const nodeTimersPromises = require('node:timers/promises');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', async (context) => {
  const globalTimeoutObjectSpy = context.mock.fn();
  const nodeTimerSpy = context.mock.fn();
  const nodeTimerPromiseSpy = context.mock.fn();

  // Optionally choose what to mock
  context.mock.timers.enable({ apis: ['setTimeout'] });
  setTimeout(globalTimeoutObjectSpy, 9999);
  nodeTimers.setTimeout(nodeTimerSpy, 9999);

  const promise = nodeTimersPromises.setTimeout(9999).then(nodeTimerPromiseSpy);

  // Advance in time
  context.mock.timers.tick(9999);
  assert.strictEqual(globalTimeoutObjectSpy.mock.callCount(), 1);
  assert.strictEqual(nodeTimerSpy.mock.callCount(), 1);
  await promise;
  assert.strictEqual(nodeTimerPromiseSpy.mock.callCount(), 1);
});
```

----------------------------------------

TITLE: Handling 'this' context with util.promisify() in Node.js (CommonJS)
DESCRIPTION: Shows how to properly handle 'this' context when using util.promisify() with class methods in CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_47

LANGUAGE: JavaScript
CODE:
```
const { promisify } = require('node:util');

class Foo {
  constructor() {
    this.a = 42;
  }

  bar(callback) {
    callback(null, this.a);
  }
}

const foo = new Foo();

const naiveBar = promisify(foo.bar);
// TypeError: Cannot read properties of undefined (reading 'a')
// naiveBar().then(a => console.log(a));

naiveBar.call(foo).then((a) => console.log(a)); // '42'

const bindBar = naiveBar.bind(foo);
bindBar().then((a) => console.log(a)); // '42'
```

----------------------------------------

TITLE: Timing Operations with console.time and console.timeEnd in Node.js (JavaScript)
DESCRIPTION: Demonstrates using `console.time(label)` to start a timer identified by a unique `label` (defaults to 'default') and `console.timeEnd(label)` to stop the corresponding timer and print the elapsed time to `stdout`. The elapsed time is automatically formatted into suitable units (e.g., ms, s).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_7

LANGUAGE: js
CODE:
```
console.time('bunch-of-stuff');
// Do a bunch of stuff.
console.timeEnd('bunch-of-stuff');
// Prints: bunch-of-stuff: 225.438ms
```

----------------------------------------

TITLE: Identifying the Operating System Platform in Node.js (ESM)
DESCRIPTION: This snippet shows how to identify the operating system platform on which the Node.js process is running using the `process.platform` property within an ES Module. It imports the `platform` property from `node:process` and logs its string value (e.g., 'linux', 'darwin', 'win32').
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_67

LANGUAGE: mjs
CODE:
```
import { platform } from 'node:process';

console.log(`This platform is ${platform}`);
```

----------------------------------------

TITLE: Using clearTimeout with Mocked Timers
DESCRIPTION: This snippet shows that timer clearing functions like `clearTimeout` are also implicitly mocked when timers are enabled. It sets a `setTimeout`, immediately clears it using the returned ID, calls `tick()` to advance time, and then asserts that the callback function was never called because it was cleared.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_53

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  // Optionally choose what to mock
  context.mock.timers.enable({ apis: ['setTimeout'] });
  const id = setTimeout(fn, 9999);

  // Implicitly mocked as well
  clearTimeout(id);
  context.mock.timers.tick(9999);

  // As that setTimeout was cleared the mock function will never be called
  assert.strictEqual(fn.mock.callCount(), 0);
});
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  // Optionally choose what to mock
  context.mock.timers.enable({ apis: ['setTimeout'] });
  const id = setTimeout(fn, 9999);

  // Implicitly mocked as well
  clearTimeout(id);
  context.mock.timers.tick(9999);

  // As that setTimeout was cleared the mock function will never be called
  assert.strictEqual(fn.mock.callCount(), 0);
});
```

----------------------------------------

TITLE: Creating a JavaScript ArrayBuffer - Node-API - C
DESCRIPTION: Declares a function to create a JavaScript ArrayBuffer (a VM-managed byte buffer) in C. The function takes the target buffer size in bytes and outputs both a napi_value for the new ArrayBuffer and a raw pointer to access its memory. Only native code may write to the buffer directly; JavaScript must use a TypedArray or DataView. Returns napi_ok on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_76

LANGUAGE: c
CODE:
```
napi_status napi_create_arraybuffer(napi_env env,
                                    size_t byte_length,
                                    void** data,
                                    napi_value* result)
```

----------------------------------------

TITLE: Monitoring Promise Lifecycle Events with Node.js V8 promiseHooks (JavaScript)
DESCRIPTION: This snippet demonstrates the usage of Node.js's V8 promiseHooks for tracking promise lifecycle events ('init', 'settled', 'before', 'after'). It defines individual handlers for each promise event phase and attaches them using both separate onEvent methods and collectively via createHook, enabling deep observation and profiling of all asynchronous promise activity in a process. Dependencies include Node.js (v16.18.0+), with the snippet importing 'promiseHooks' from the 'node:v8' module. Inputs are callback functions for promise events, while outputs are logging side effects and teardown functions for disabling hooks; there are no external limitations besides the need to execute within a compatible Node.js environment.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_12

LANGUAGE: mjs
CODE:
```
import { promiseHooks } from 'node:v8';

// There are four lifecycle events produced by promises:

// The `init` event represents the creation of a promise. This could be a
// direct creation such as with `new Promise(...)` or a continuation such
// as `then()` or `catch()`. It also happens whenever an async function is
// called or does an `await`. If a continuation promise is created, the
// `parent` will be the promise it is a continuation from.
function init(promise, parent) {
  console.log('a promise was created', { promise, parent });
}

// The `settled` event happens when a promise receives a resolution or
// rejection value. This may happen synchronously such as when using
// `Promise.resolve()` on non-promise input.
function settled(promise) {
  console.log('a promise resolved or rejected', { promise });
}

// The `before` event runs immediately before a `then()` or `catch()` handler
// runs or an `await` resumes execution.
function before(promise) {
  console.log('a promise is about to call a then handler', { promise });
}

// The `after` event runs immediately after a `then()` handler runs or when
// an `await` begins after resuming from another.
function after(promise) {
  console.log('a promise is done calling a then handler', { promise });
}

// Lifecycle hooks may be started and stopped individually
const stopWatchingInits = promiseHooks.onInit(init);
const stopWatchingSettleds = promiseHooks.onSettled(settled);
const stopWatchingBefores = promiseHooks.onBefore(before);
const stopWatchingAfters = promiseHooks.onAfter(after);

// Or they may be started and stopped in groups
const stopHookSet = promiseHooks.createHook({
  init,
  settled,
  before,
  after,
});

// To stop a hook, call the function returned at its creation.
stopWatchingInits();
stopWatchingSettleds();
stopWatchingBefores();
stopWatchingAfters();
stopHookSet();
```

----------------------------------------

TITLE: Creating JavaScript TypedArray in Node-API (C)
DESCRIPTION: Creates a JavaScript TypedArray object over an existing ArrayBuffer. Takes environment, element type, length, ArrayBuffer, byte offset, and returns a napi_value representing the TypedArray.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_86

LANGUAGE: c
CODE:
```
napi_status napi_create_typedarray(napi_env env,
                                   napi_typedarray_type type,
                                   size_t length,
                                   napi_value arraybuffer,
                                   size_t byte_offset,
                                   napi_value* result)
```

----------------------------------------

TITLE: Defining and Aliasing Cryptographic OID Mappings - Text
DESCRIPTION: This snippet defines a configuration mapping of cryptographic object identifiers (OIDs), assigning descriptive text names and aliases to standard OID number sequences for use in cryptography-related software. Dependencies include knowledge of standard OID definitions (from ITU-T, ISO, IEEE, PKCS, S/MIME, and SECG), and the custom DSL is used for hierarchical navigation and documentation. Parameters are OID component numbers or existing OID names, with outputs being names, comments, and allowed aliases; usage is limited to environments which consume this specific text-based OID mapping format and does not provide parsing or validation logic itself.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/crypto/objects/objects.txt#2025-04-23_snippet_0

LANGUAGE: Text
CODE:
```
# CCITT was renamed to ITU-T quite some time ago\n0\t\t\t: ITU-T\t\t\t: itu-t\n!Alias ccitt itu-t\n\n1\t\t\t: ISO\t\t\t: iso\n\n2\t\t\t: JOINT-ISO-ITU-T\t: joint-iso-itu-t\n!Alias joint-iso-ccitt joint-iso-itu-t\n\niso 2\t\t\t: member-body\t\t: ISO Member Body\n\niso 3\t\t\t: identified-organization\n\n# GMAC OID\niso 0 9797 3 4                          : GMAC          : gmac\n\n# HMAC OIDs\nidentified-organization 6 1 5 5 8 1 1\t: HMAC-MD5\t: hmac-md5\nidentified-organization 6 1 5 5 8 1 2\t: HMAC-SHA1\t: hmac-sha1\n\n# \"1.3.36.8.3.3\"\nidentified-organization 36 8 3 3\t: x509ExtAdmission\t: Professional Information or basis for Admission\n\nidentified-organization 132\t: certicom-arc\n\nidentified-organization 111     : ieee\nieee 2 1619                     : ieee-siswg    : IEEE Security in Storage Working Group\n\njoint-iso-itu-t 23\t: international-organizations\t: International Organizations\n\ninternational-organizations 43\t: wap\nwap 1\t\t\t: wap-wsg\n\njoint-iso-itu-t 5 1 5\t: selected-attribute-types\t: Selected Attribute Types\n\nselected-attribute-types 55\t: clearance\n\nmember-body 840\t\t: ISO-US\t\t: ISO US Member Body\nISO-US 10040\t\t: X9-57\t\t: X9.57\nX9-57 4\t\t: X9cm\t\t: X9.57 CM ?\n\nmember-body 156         : ISO-CN        : ISO CN Member Body\nISO-CN 10197            : oscca\noscca 1                 : sm-scheme\n\n!Cname dsa\nX9cm 1\t\t\t: DSA\t\t\t: dsaEncryption\nX9cm 3\t\t\t: DSA-SHA1\t\t: dsaWithSHA1\n\n\nISO-US 10045\t\t: ansi-X9-62\t\t: ANSI X9.62\n!module X9-62\n!Alias id-fieldType ansi-X9-62 1\nX9-62_id-fieldType 1\t\t: prime-field\nX9-62_id-fieldType 2\t\t: characteristic-two-field\nX9-62_characteristic-two-field 3 : id-characteristic-two-basis\nX9-62_id-characteristic-two-basis 1 : onBasis\nX9-62_id-characteristic-two-basis 2 : tpBasis\nX9-62_id-characteristic-two-basis 3 : ppBasis\n!Alias id-publicKeyType ansi-X9-62 2\nX9-62_id-publicKeyType 1\t\t: id-ecPublicKey\n!Alias ellipticCurve ansi-X9-62 3\n!Alias c-TwoCurve X9-62_ellipticCurve 0\nX9-62_c-TwoCurve 1\t\t: c2pnb163v1\nX9-62_c-TwoCurve 2\t\t: c2pnb163v2\nX9-62_c-TwoCurve 3\t\t: c2pnb163v3\nX9-62_c-TwoCurve 4\t\t: c2pnb176v1\nX9-62_c-TwoCurve 5\t\t: c2tnb191v1\nX9-62_c-TwoCurve 6\t\t: c2tnb191v2\nX9-62_c-TwoCurve 7\t\t: c2tnb191v3\nX9-62_c-TwoCurve 8\t\t: c2onb191v4\nX9-62_c-TwoCurve 9\t\t: c2onb191v5\nX9-62_c-TwoCurve 10\t\t: c2pnb208w1\nX9-62_c-TwoCurve 11\t\t: c2tnb239v1\nX9-62_c-TwoCurve 12\t\t: c2tnb239v2\nX9-62_c-TwoCurve 13\t\t: c2tnb239v3\nX9-62_c-TwoCurve 14\t\t: c2onb239v4\nX9-62_c-TwoCurve 15\t\t: c2onb239v5\nX9-62_c-TwoCurve 16\t\t: c2pnb272w1\nX9-62_c-TwoCurve 17\t\t: c2pnb304w1\nX9-62_c-TwoCurve 18\t\t: c2tnb359v1\nX9-62_c-TwoCurve 19\t\t: c2pnb368w1\nX9-62_c-TwoCurve 20\t\t: c2tnb431r1\n!Alias primeCurve X9-62_ellipticCurve 1\nX9-62_primeCurve 1\t \t: prime192v1\nX9-62_primeCurve 2\t \t: prime192v2\nX9-62_primeCurve 3\t \t: prime192v3\nX9-62_primeCurve 4\t \t: prime239v1\nX9-62_primeCurve 5\t \t: prime239v2\nX9-62_primeCurve 6\t \t: prime239v3\nX9-62_primeCurve 7\t \t: prime256v1\n!Alias id-ecSigType ansi-X9-62 4\n!global\nX9-62_id-ecSigType 1\t\t: ecdsa-with-SHA1\nX9-62_id-ecSigType 2\t\t: ecdsa-with-Recommended\nX9-62_id-ecSigType 3\t\t: ecdsa-with-Specified\necdsa-with-Specified 1\t\t: ecdsa-with-SHA224\necdsa-with-Specified 2\t\t: ecdsa-with-SHA256\necdsa-with-Specified 3\t\t: ecdsa-with-SHA384\necdsa-with-Specified 4\t\t: ecdsa-with-SHA512\n\n# SECG curve OIDs from \"SEC 2: Recommended Elliptic Curve Domain Parameters\"\n# (http://www.secg.org/)\n!Alias secg_ellipticCurve certicom-arc 0\n# SECG prime curves OIDs\nsecg-ellipticCurve 6\t\t: secp112r1\nsecg-ellipticCurve 7\t\t: secp112r2\nsecg-ellipticCurve 28\t\t: secp128r1\nsecg-ellipticCurve 29\t\t: secp128r2\nsecg-ellipticCurve 9\t\t: secp160k1\nsecg-ellipticCurve 8\t\t: secp160r1\nsecg-ellipticCurve 30\t\t: secp160r2\nsecg-ellipticCurve 31\t\t: secp192k1\n# NOTE: the curve secp192r1 is the same as prime192v1 defined above\n#       and is therefore omitted\nsecg-ellipticCurve 32\t\t: secp224k1\nsecg-ellipticCurve 33\t\t: secp224r1\nsecg-ellipticCurve 10\t\t: secp256k1\n# NOTE: the curve secp256r1 is the same as prime256v1 defined above\n#       and is therefore omitted\nsecg-ellipticCurve 34\t\t: secp384r1\nsecg-ellipticCurve 35\t\t: secp521r1\n# SECG characteristic two curves OIDs\nsecg-ellipticCurve 4\t\t: sect113r1\nsecg-ellipticCurve 5\t\t: sect113r2\nsecg-ellipticCurve 22\t\t: sect131r1\nsecg-ellipticCurve 23\t\t: sect131r2\nsecg-ellipticCurve 1\t\t: sect163k1\nsecg-ellipticCurve 2\t\t: sect163r1\nsecg-ellipticCurve 15\t\t: sect163r2\nsecg-ellipticCurve 24\t\t: sect193r1\nsecg-ellipticCurve 25\t\t: sect193r2\nsecg-ellipticCurve 26\t\t: sect233k1\nsecg-ellipticCurve 27\t\t: sect233r1\nsecg-ellipticCurve 3\t\t: sect239k1\nsecg-ellipticCurve 16\t\t: sect283k1\nsecg-ellipticCurve 17\t\t: sect283r1\nsecg-ellipticCurve 36\t\t: sect409k1\nsecg-ellipticCurve 37\t\t: sect409r1\nsecg-ellipticCurve 38\t\t: sect571k1\nsecg-ellipticCurve 39\t\t: sect571r1\n\n# WAP/TLS curve OIDs (http://www.wapforum.org/)\n!Alias wap-wsg-idm-ecid wap-wsg 4\nwap-wsg-idm-ecid 1\t: wap-wsg-idm-ecid-wtls1\nwap-wsg-idm-ecid 3\t: wap-wsg-idm-ecid-wtls3\nwap-wsg-idm-ecid 4\t: wap-wsg-idm-ecid-wtls4\nwap-wsg-idm-ecid 5\t: wap-wsg-idm-ecid-wtls5\nwap-wsg-idm-ecid 6\t: wap-wsg-idm-ecid-wtls6\nwap-wsg-idm-ecid 7\t: wap-wsg-idm-ecid-wtls7\nwap-wsg-idm-ecid 8\t: wap-wsg-idm-ecid-wtls8\nwap-wsg-idm-ecid 9\t: wap-wsg-idm-ecid-wtls9\nwap-wsg-idm-ecid 10\t: wap-wsg-idm-ecid-wtls10\nwap-wsg-idm-ecid 11\t: wap-wsg-idm-ecid-wtls11\nwap-wsg-idm-ecid 12\t: wap-wsg-idm-ecid-wtls12\n\n\nISO-US 113533 7 66 10\t: CAST5-CBC\t\t: cast5-cbc\n\t\t\t: CAST5-ECB\t\t: cast5-ecb\n!Cname cast5-cfb64\n\t\t\t: CAST5-CFB\t\t: cast5-cfb\n!Cname cast5-ofb64\n\t\t\t: CAST5-OFB\t\t: cast5-ofb\n!Cname pbeWithMD5AndCast5-CBC\nISO-US 113533 7 66 12\t:\t\t: pbeWithMD5AndCast5CBC\n\n# Macs for CMP and CRMF\nISO-US 113533 7 66 13\t: id-PasswordBasedMAC\t: password based MAC\nISO-US 113533 7 66 30\t: id-DHBasedMac\t\t: Diffie-Hellman based MAC\n\nISO-US 113549\t\t: rsadsi\t\t: RSA Data Security, Inc.\n\nrsadsi 1\t\t: pkcs\t\t: RSA Data Security, Inc. PKCS\n\npkcs 1\t\t\t: pkcs1\npkcs1 1\t\t\t:\t\t: rsaEncryption\npkcs1 2\t\t\t: RSA-MD2\t\t: md2WithRSAEncryption\npkcs1 3\t\t\t: RSA-MD4\t\t: md4WithRSAEncryption\npkcs1 4\t\t\t: RSA-MD5\t\t: md5WithRSAEncryption\npkcs1 5\t\t\t: RSA-SHA1\t\t: sha1WithRSAEncryption\n# According to PKCS #1 version 2.1\npkcs1 7\t\t\t: RSAES-OAEP\t\t: rsaesOaep\npkcs1 8\t\t\t: MGF1\t\t: mgf1\npkcs1 9\t\t\t: PSPECIFIED\t\t: pSpecified\npkcs1 10\t\t\t: RSASSA-PSS\t\t: rsassaPss\n\npkcs1 11\t\t\t: RSA-SHA256\t\t: sha256WithRSAEncryption\npkcs1 12\t\t\t: RSA-SHA384\t\t: sha384WithRSAEncryption\npkcs1 13\t\t\t: RSA-SHA512\t\t: sha512WithRSAEncryption\npkcs1 14\t\t\t: RSA-SHA224\t\t: sha224WithRSAEncryption\npkcs1 15\t\t\t: RSA-SHA512/224\t: sha512-224WithRSAEncryption\npkcs1 16\t\t\t: RSA-SHA512/256\t: sha512-256WithRSAEncryption\n\npkcs 3\t\t\t: pkcs3\npkcs3 1\t\t\t:\t\t: dhKeyAgreement\n\npkcs 5\t\t\t: pkcs5\npkcs5 1\t\t\t: PBE-MD2-DES\t\t: pbeWithMD2AndDES-CBC\npkcs5 3\t\t\t: PBE-MD5-DES\t\t: pbeWithMD5AndDES-CBC\npkcs5 4\t\t\t: PBE-MD2-RC2-64\t: pbeWithMD2AndRC2-CBC\npkcs5 6\t\t\t: PBE-MD5-RC2-64\t: pbeWithMD5AndRC2-CBC\npkcs5 10\t\t\t: PBE-SHA1-DES\t\t: pbeWithSHA1AndDES-CBC\npkcs5 11\t\t\t: PBE-SHA1-RC2-64\t: pbeWithSHA1AndRC2-CBC\n!Cname id_pbkdf2\npkcs5 12\t\t\t:\t\t: PBKDF2\n!Cname pbes2\npkcs5 13\t\t\t:\t\t: PBES2\n!Cname pbmac1\npkcs5 14\t\t\t:\t\t: PBMAC1\n\npkcs 7\t\t\t: pkcs7\npkcs7 1\t\t\t:\t\t: pkcs7-data\n!Cname pkcs7-signed\npkcs7 2\t\t\t:\t\t: pkcs7-signedData\n!Cname pkcs7-enveloped\npkcs7 3\t\t\t:\t\t: pkcs7-envelopedData\n!Cname pkcs7-signedAndEnveloped\npkcs7 4\t\t\t:\t\t: pkcs7-signedAndEnvelopedData\n!Cname pkcs7-digest\npkcs7 5\t\t\t:\t\t: pkcs7-digestData\n!Cname pkcs7-encrypted\npkcs7 6\t\t\t:\t\t: pkcs7-encryptedData\n\npkcs 9\t\t\t: pkcs9\n!module pkcs9\npkcs9 1\t\t\t: \t\t: emailAddress\npkcs9 2\t\t\t:\t\t: unstructuredName\npkcs9 3\t\t\t:\t\t: contentType\npkcs9 4\t\t\t:\t\t: messageDigest\npkcs9 5\t\t\t:\t\t: signingTime\npkcs9 6\t\t\t:\t\t: countersignature\npkcs9 7\t\t\t:\t\t: challengePassword\npkcs9 8\t\t\t:\t\t: unstructuredAddress\n!Cname extCertAttributes\npkcs9 9\t\t\t:\t\t: extendedCertificateAttributes\n!global\n\n!Cname ext-req\npkcs9 14\t\t: extReq\t\t: Extension Request\n\n!Cname SMIMECapabilities\npkcs9 15\t\t: SMIME-CAPS\t\t: S/MIME Capabilities\n\n# S/MIME\n!Cname SMIME\npkcs9 16\t\t: SMIME\t\t: S/MIME\nSMIME 0\t\t\t: id-smime-mod\nSMIME 1\t\t\t: id-smime-ct\nSMIME 2\t\t\t: id-smime-aa\nSMIME 3\t\t\t: id-smime-alg\nSMIME 4\t\t\t: id-smime-cd\nSMIME 5\t\t\t: id-smime-spq\nSMIME 6\t\t\t: id-smime-cti\n\n# S/MIME Modules\nid-smime-mod 1\t\t: id-smime-mod-cms\nid-smime-mod 2\t\t: id-smime-mod-ess\nid-smime-mod 3\t\t: id-smime-mod-oid\nid-smime-mod 4\t\t: id-smime-mod-msg-v3\nid-smime-mod 5\t\t: id-smime-mod-ets-eSignature-88\nid-smime-mod 6\t\t: id-smime-mod-ets-eSignature-97\nid-smime-mod 7\t\t: id-smime-mod-ets-eSigPolicy-88\nid-smime-mod 8\t\t: id-smime-mod-ets-eSigPolicy-97\n\n# S/MIME Content Types\nid-smime-ct 1\t\t: id-smime-ct-receipt\nid-smime-ct 2\t\t: id-smime-ct-authData\nid-smime-ct 3\t\t: id-smime-ct-publishCert\nid-smime-ct 4\t\t: id-smime-ct-TSTInfo\nid-smime-ct 5\t\t: id-smime-ct-TDTInfo\nid-smime-ct 6\t\t: id-smime-ct-contentInfo\nid-smime-ct 7\t\t: id-smime-ct-DVCSRequestData\nid-smime-ct 8\t\t: id-smime-ct-DVCSResponseData\nid-smime-ct 9\t\t: id-smime-ct-compressedData\nid-smime-ct 19\t\t: id-smime-ct-contentCollection\nid-smime-ct 23\t\t: id-smime-ct-authEnvelopedData\nid-smime-ct 24\t\t: id-ct-routeOriginAuthz\nid-smime-ct 26\t\t: id-ct-rpkiManifest\nid-smime-ct 27\t\t: id-ct-asciiTextWithCRLF\nid-smime-ct 28\t\t: id-ct-xml\nid-smime-ct 35\t\t: id-ct-rpkiGhostbusters\nid-smime-ct 36\t\t: id-ct-resourceTaggedAttest\nid-smime-ct 47\t\t: id-ct-geofeedCSVwithCRLF\nid-smime-ct 48\t\t: id-ct-signedChecklist\n\n# S/MIME Attributes\nid-smime-aa 1\t\t: id-smime-aa-receiptRequest\nid-smime-aa 2\t\t: id-smime-aa-securityLabel\nid-smime-aa 3\t\t: id-smime-aa-mlExpandHistory\nid-smime-aa 4\t\t: id-smime-aa-contentHint\nid-smime-aa 5\t\t: id-smime-aa-msgSigDigest\n# obsolete\nid-smime-aa 6\t\t: id-smime-aa-encapContentType\nid-smime-aa 7\t\t: id-smime-aa-contentIdentifier\n
```

----------------------------------------

TITLE: Importing the process Object in Node.js (ECMAScript Modules) - JavaScript
DESCRIPTION: Demonstrates how to import the built-in Node.js 'process' module using ECMAScript Modules (ESM) syntax. No external dependencies are needed. The default import 'process' provides access to environment, event, and system interaction capabilities. This is suitable for .mjs files or when 'type' is set to 'module' in package.json.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import process from 'node:process';
```

----------------------------------------

TITLE: Running Node.js in Watch Mode with Default Paths (Bash)
DESCRIPTION: Starts the Node.js process in watch mode. By default, it watches the entry point file and any required or imported modules. The process restarts automatically upon detected changes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_29

LANGUAGE: bash
CODE:
```
node --watch index.js
```

----------------------------------------

TITLE: Spawning Detached Long-Running Process (MJS)
DESCRIPTION: This ES Module snippet demonstrates how to spawn a Node.js child process (`child_program.js`) that can continue running even after the parent process exits. It utilizes `detached: true` for decoupling and `stdio: 'ignore'` to prevent stdio inheritance. The `subprocess.unref()` method is called to ensure the parent process can exit without waiting for the child.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_26

LANGUAGE: mjs
CODE:
```
import { spawn } from 'node:child_process';
import process from 'node:process';

const subprocess = spawn(process.argv[0], ['child_program.js'], {
  detached: true,
  stdio: 'ignore',
});

subprocess.unref();
```

----------------------------------------

TITLE: Error Handling in Readable Streams in Node.js
DESCRIPTION: Demonstrates proper error handling in a Readable stream implementation. Shows how to propagate errors through the readable.destroy() method rather than throwing errors directly or emitting error events manually.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_87

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

const myReadable = new Readable({
  read(size) {
    const err = checkSomeErrorCondition();
    if (err) {
      this.destroy(err);
    } else {
      // Do some work.
    }
  },
});
```

----------------------------------------

TITLE: Generating a Basic package.json File
DESCRIPTION: Examples of using npm init to generate a basic package.json file, with and without prompts.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-init.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ mkdir my-npm-pkg && cd my-npm-pkg
$ git init
$ npm init
```

LANGUAGE: bash
CODE:
```
$ npm init -y
```

----------------------------------------

TITLE: Using transferableAbortSignal with MessageChannel in JavaScript
DESCRIPTION: Demonstrates how to create a transferable AbortSignal and send it through a MessageChannel using postMessage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_56

LANGUAGE: javascript
CODE:
```
const signal = transferableAbortSignal(AbortSignal.timeout(100));
const channel = new MessageChannel();
channel.port2.postMessage(signal, [signal]);
```

----------------------------------------

TITLE: Demonstrating Ignored Asynchronous Operations in exit Event Handler (ECMAScript Modules) - JavaScript
DESCRIPTION: Shows that asynchronous operations (like setTimeout) inside an 'exit' event handler are never executed, as the event loop will be abandoned immediately after synchronous handlers complete. Input: none. Output: none for the setTimeout, only synchronous operations are run. Intended to clarify the constraints around the 'exit' event on the process object using ESM syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_6

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

process.on('exit', (code) => {
  setTimeout(() => {
    console.log('This will not run');
  }, 0);
});
```

----------------------------------------

TITLE: Dropping Initial Chunks from a Readable Stream using readable.drop in Node.js (MJS)
DESCRIPTION: This snippet shows how to use the `Readable.drop(limit)` method to create a new stream that excludes the first `limit` chunks from the original readable stream. It depends on the `node:stream` module. The example drops the first 2 elements from a stream created with `Readable.from` and collects the remaining elements into an array using `toArray()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_51

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';

await Readable.from([1, 2, 3, 4]).drop(2).toArray(); // [3, 4]
```

----------------------------------------

TITLE: Creating Node.js TLS Echo Server (MJS)
DESCRIPTION: Illustrates creating a TLS server using Node.js `tls.createServer` with ES Module syntax. It reads server key and certificate files, optionally requires client certificates using `requestCert`, and specifies trusted CAs via the `ca` option if needed for client certificate verification. The provided listener handles new connections, logs authorization status, sends a welcome message, sets UTF-8 encoding, and echoes back received data. Depends on `node:tls` and `node:fs` modules and requires `server-key.pem`, `server-cert.pem`, and potentially `client-cert.pem` files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_26

LANGUAGE: mjs
CODE:
```
import { createServer } from 'node:tls';
import { readFileSync } from 'node:fs';

const options = {
  key: readFileSync('server-key.pem'),
  cert: readFileSync('server-cert.pem'),

  // This is necessary only if using client certificate authentication.
  requestCert: true,

  // This is necessary only if the client uses a self-signed certificate.
  ca: [ readFileSync('client-cert.pem') ],
};

const server = createServer(options, (socket) => {
  console.log('server connected',
              socket.authorized ? 'authorized' : 'unauthorized');
  socket.write('welcome!\n');
  socket.setEncoding('utf8');
  socket.pipe(socket);
});
server.listen(8000, () => {
  console.log('server bound');
});
```

----------------------------------------

TITLE: Defining a Distance Function in an ES Module (Node.js - JavaScript)
DESCRIPTION: Defines an ES module exporting a named function called distance, which computes the Euclidean distance between two points a and b. The function uses basic math operations to compute the result. There are no external dependencies and the function expects a and b to be objects with x and y properties. Exports are done using ESM export syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
// distance.mjs\nexport function distance(a, b) { return Math.sqrt((b.x - a.x) ** 2 + (b.y - a.y) ** 2); }
```

----------------------------------------

TITLE: Using AbortController with child_process.fork() in ES Modules
DESCRIPTION: Demonstrates how to use AbortController to manage a forked child process using ES Modules format. The example shows the same functionality as the CommonJS version but with ESM import syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
import { fork } from 'node:child_process';
import process from 'node:process';

if (process.argv[2] === 'child') {
  setTimeout(() => {
    console.log(`Hello from ${process.argv[2]}!`);
  }, 1_000);
} else {
  const controller = new AbortController();
  const { signal } = controller;
  const child = fork(import.meta.url, ['child'], { signal });
  child.on('error', (err) => {
    // This will be called with err being an AbortError if the controller aborts
  });
  controller.abort(); // Stops the child process
}
```

----------------------------------------

TITLE: Using scryptSync with CommonJS in Node.js
DESCRIPTION: Demonstrates password-based key derivation using scryptSync with both default and custom parameters in CommonJS format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_94

LANGUAGE: javascript
CODE:
```
const {
  scryptSync,
} = require('node:crypto');
// Using the factory defaults.

const key1 = scryptSync('password', 'salt', 64);
console.log(key1.toString('hex'));  // '3745e48...08d59ae'
// Using a custom N parameter. Must be a power of two.
const key2 = scryptSync('password', 'salt', 64, { N: 1024 });
console.log(key2.toString('hex'));  // '3745e48...aa39b34'
```

----------------------------------------

TITLE: Setting an Element on an Object in C using Node-API
DESCRIPTION: This function sets an element on a JavaScript object using a numeric index. It takes the environment, the target object, the index, and the value to set. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_158

LANGUAGE: c
CODE:
```
napi_status napi_set_element(napi_env env,
                             napi_value object,
                             uint32_t index,
                             napi_value value);
```

----------------------------------------

TITLE: Promisified execFile with ES Modules
DESCRIPTION: ES Modules implementation of promisified execFile, converting the callback-based function into a Promise-based one using util.promisify.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_15

LANGUAGE: JavaScript
CODE:
```
import { promisify } from 'node:util';
import child_process from 'node:child_process';
const execFile = promisify(child_process.execFile);
async function getVersion() {
  const { stdout } = await execFile('node', ['--version']);
  console.log(stdout);
}
getVersion();
```

----------------------------------------

TITLE: Using util.types.isRegExp to check for RegExp objects
DESCRIPTION: Shows how to use util.types.isRegExp() to check if a value is a regular expression object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_91

LANGUAGE: javascript
CODE:
```
util.types.isRegExp(/abc/);  // Returns true
util.types.isRegExp(new RegExp('abc'));  // Returns true
```

----------------------------------------

TITLE: Error Event Handling with AbortController
DESCRIPTION: Shows how to use AbortController with events.once() to cancel waiting for events, including error handling patterns.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_42

LANGUAGE: javascript
CODE:
```
const { EventEmitter, once } = require('node:events');

const ee = new EventEmitter();
const ac = new AbortController();

async function foo(emitter, event, signal) {
  try {
    await once(emitter, event, { signal });
    console.log('event emitted!');
  } catch (error) {
    if (error.name === 'AbortError') {
      console.error('Waiting for the event was canceled!');
    } else {
      console.error('There was an error', error.message);
    }
  }
}

foo(ee, 'foo', ac.signal);
ac.abort(); // Prints: Waiting for the event was canceled!
```

----------------------------------------

TITLE: Installing cssesc Globally for CLI Use - Bash
DESCRIPTION: This Bash command installs cssesc globally using npm, enabling the usage of the 'cssesc' command-line tool to escape text. Suitable for project-agnostic or scripting scenarios. Requires npm and Node.js installed globally.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cssesc/README.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
npm install -g cssesc
```

----------------------------------------

TITLE: Run Node.js with Permission Model (Disallow Worker) (Console)
DESCRIPTION: Demonstrates running a Node.js script (`index.js`) with the Permission Model enabled (`--permission`) and allowing all file system reads (`--allow-fs-read=*`). This command is shown in the context of attempting to create a worker thread without the `--allow-worker` flag, which will result in an `ERR_ACCESS_DENIED` error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_9

LANGUAGE: Console
CODE:
```
node --permission --allow-fs-read=* index.js
```

----------------------------------------

TITLE: Stream-based Gzip Compression with Pipeline (Callback) using CommonJS
DESCRIPTION: Illustrates compressing a file ('input.txt') into a Gzip archive ('input.txt.gz') using Node.js streams and the `pipeline` function from the `stream` module with a callback for error handling. It uses CommonJS syntax for requires (`fs`, `process`, `zlib`, `stream`). The example reads from a source stream, pipes it through a `zlib.createGzip()` transform stream, and writes to a destination stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_3

LANGUAGE: cjs
CODE:
```
const {
  createReadStream,
  createWriteStream,
} = require('node:fs');
const process = require('node:process');
const { createGzip } = require('node:zlib');
const { pipeline } = require('node:stream');

const gzip = createGzip();
const source = createReadStream('input.txt');
const destination = createWriteStream('input.txt.gz');

pipeline(source, gzip, destination, (err) => {
  if (err) {
    console.error('An error occurred:', err);
    process.exitCode = 1;
  }
});
```

----------------------------------------

TITLE: Tracking Unhandled and Handled Promise Rejections in Node.js (CommonJS) - JavaScript
DESCRIPTION: Presents a CommonJS version for tracking 'unhandledRejection' and 'rejectionHandled' events. Promises that become handled after being initially unhandled are dynamically removed from the tracking map. This pattern is useful for process-wide error logging and debugging of asynchronous workflows. Requires only Node's core modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_11

LANGUAGE: cjs
CODE:
```
const process = require('node:process');

const unhandledRejections = new Map();
process.on('unhandledRejection', (reason, promise) => {
  unhandledRejections.set(promise, reason);
});
process.on('rejectionHandled', (promise) => {
  unhandledRejections.delete(promise);
});
```

----------------------------------------

TITLE: Running TypeScript Files with Node.js Using Import Flag
DESCRIPTION: Command to run TypeScript files using Node.js with the tsx package loaded via the import flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/typescript.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
node --import=tsx your-file.ts
```

----------------------------------------

TITLE: Generating Cryptographic Keys with subtle.generateKey in Node.js
DESCRIPTION: The generateKey method creates new cryptographic keys based on the specified algorithm. It can generate either a single CryptoKey for symmetric algorithms or a CryptoKeyPair (public and private keys) for asymmetric algorithms. The method returns a Promise that resolves with the generated key(s).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
subtle.generateKey(algorithm, extractable, keyUsages)
```

----------------------------------------

TITLE: Batching Writable Stream Writes using cork(), uncork(), and nextTick() in Node.js (js)
DESCRIPTION: Demonstrates the recommended pattern for buffering multiple small writes using `writable.cork()` and then flushing them together. `writable.uncork()` is deferred using `process.nextTick()` to ensure all synchronous `write()` calls within the current event loop phase are batched before flushing. Requires access to the `process` global.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_23

LANGUAGE: js
CODE:
```
stream.cork();
stream.write('some ');
stream.write('data ');
process.nextTick(() => stream.uncork());
```

----------------------------------------

TITLE: Sorting URLSearchParams in Node.js
DESCRIPTION: Shows how to use the sort() method to sort all existing name-value pairs in-place by their names using a stable sorting algorithm.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_42

LANGUAGE: javascript
CODE:
```
const params = new URLSearchParams('query[]=abc&type=search&query[]=123');
params.sort();
console.log(params.toString());
// Prints query%5B%5D=abc&query%5B%5D=123&type=search
```

----------------------------------------

TITLE: Digital Signature Stream Example (ESM)
DESCRIPTION: Demonstrates using Sign and Verify objects as streams to create and verify digital signatures using EC keys in ESM format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_42

LANGUAGE: mjs
CODE:
```
const {
  generateKeyPairSync,
  createSign,
  createVerify,
} = await import('node:crypto');

const { privateKey, publicKey } = generateKeyPairSync('ec', {
  namedCurve: 'sect239k1',
});

const sign = createSign('SHA256');
sign.write('some data to sign');
sign.end();
const signature = sign.sign(privateKey, 'hex');

const verify = createVerify('SHA256');
verify.write('some data to sign');
verify.end();
console.log(verify.verify(publicKey, signature, 'hex'));
// Prints: true
```

----------------------------------------

TITLE: Using setImmediate Promise (Node.js Timers - MJS/CJS)
DESCRIPTION: Shows basic usage of `timersPromises.setImmediate`. It returns a promise that resolves after the current poll phase of the event loop with the given `value`. It can be used with `await` or `.then()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_4

LANGUAGE: mjs
CODE:
```
import {
  setImmediate,
} from 'node:timers/promises';

const res = await setImmediate('result');

console.log(res);  // Prints 'result'
```

LANGUAGE: cjs
CODE:
```
const {
  setImmediate,
} = require('node:timers/promises');

setImmediate('result').then((res) => {
  console.log(res);  // Prints 'result'
});
```

----------------------------------------

TITLE: Spying and Inspecting Object Method Calls (JavaScript)
DESCRIPTION: Shows how to use `t.mock.method()` to spy on an existing method (`number.subtract`) of an object. It demonstrates calling the mocked method and then accessing its call history (`mock.calls`) to inspect arguments, results, and context (`this`). Requires the Node.js test runner context (`t`) and `assert`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_44

LANGUAGE: JavaScript
CODE:
```
test('spies on an object method', (t) => {
  const number = {
    value: 5,
    subtract(a) {
      return this.value - a;
    },
  };

  t.mock.method(number, 'subtract');
  assert.strictEqual(number.subtract.mock.callCount(), 0);
  assert.strictEqual(number.subtract(3), 2);
  assert.strictEqual(number.subtract.mock.callCount(), 1);

  const call = number.subtract.mock.calls[0];

  assert.deepStrictEqual(call.arguments, [3]);
  assert.strictEqual(call.result, 2);
  assert.strictEqual(call.error, undefined);
  assert.strictEqual(call.target, undefined);
  assert.strictEqual(call.this, number);
});
```

----------------------------------------

TITLE: Implementing URL Resolution with WHATWG URL API
DESCRIPTION: Demonstrates how to achieve the same URL resolution functionality as url.resolve() but using the modern WHATWG URL API. This approach is recommended over the legacy API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_52

LANGUAGE: javascript
CODE:
```
function resolve(from, to) {
  const resolvedUrl = new URL(to, new URL(from, 'resolve://'));
  if (resolvedUrl.protocol === 'resolve:') {
    // `from` is a relative URL.
    const { pathname, search, hash } = resolvedUrl;
    return pathname + search + hash;
  }
  return resolvedUrl.toString();
}

resolve('/one/two/three', 'four');         // '/one/two/four'
resolve('http://example.com/', '/one');    // 'http://example.com/one'
resolve('http://example.com/one', '/two'); // 'http://example.com/two'
```

----------------------------------------

TITLE: Matching Strings with Regular Expressions Using assert.match (Node.js, CommonJS, JavaScript)
DESCRIPTION: Demonstrates use of assert.match() in CommonJS style to validate string regular expression matches, triggering AssertionError on failure. Shows handling of mismatched and invalid types as well as successful matches. Dependency: node:assert/strict. Parameters: string, regexp, message. On failure, throws AssertionError or a provided Error object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_29

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert/strict');

assert.match('I will fail', /pass/);
// AssertionError [ERR_ASSERTION]: The input did not match the regular ...

assert.match(123, /pass/);
// AssertionError [ERR_ASSERTION]: The "string" argument must be of type string.

assert.match('I will pass', /pass/);
// OK
```

----------------------------------------

TITLE: Run Node.js with Permission Model (Disallow WASI) (Console)
DESCRIPTION: Demonstrates running a Node.js script (`index.js`) with the Permission Model enabled (`--permission`) and allowing all file system reads (`--allow-fs-read=*`). This command is shown in the context of attempting to create a WASI instance without the `--allow-wasi` flag, which will result in an `ERR_ACCESS_DENIED` error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_7

LANGUAGE: Console
CODE:
```
node --permission --allow-fs-read=* index.js
```

----------------------------------------

TITLE: Handling Errors with EventEmitter in Node.js
DESCRIPTION: Demonstrates error handling using the EventEmitter pattern in Node.js. This example shows how to handle errors in a network connection by listening to the 'error' event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
const net = require('node:net');
const connection = net.connect('localhost');

// Adding an 'error' event handler to a stream:
connection.on('error', (err) => {
  // If the connection is reset by the server, or if it can't
  // connect at all, or on any sort of error encountered by
  // the connection, the error will be sent here.
  console.error(err);
});

connection.pipe(process.stdout);
```

----------------------------------------

TITLE: Accessing Node.js Dependency Versions (ES Modules)
DESCRIPTION: Demonstrates how to access version information for Node.js and its dependencies using process.versions in ES modules. It imports the versions object and logs it to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_99

LANGUAGE: javascript
CODE:
```
import { versions } from 'node:process';

console.log(versions);
```

----------------------------------------

TITLE: Truncating Files with fsPromises.truncate in Node.js
DESCRIPTION: Asynchronously truncates the file content at `path` to a specified length `len` (in bytes). If `len` is omitted, it defaults to 0. Returns a Promise that fulfills with `undefined` upon success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_38

LANGUAGE: javascript
CODE:
```
fsPromises.truncate(path[, len])
```

----------------------------------------

TITLE: Consuming Response Body with Undici Request API
DESCRIPTION: This snippet demonstrates how to properly consume the response body when using Undici's request API, showing both the correct and incorrect approaches.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
// Do
const { body, headers } = await request(url);
await res.body.dump(); // force consumption of body

// Do not
const { headers } = await request(url);
```

----------------------------------------

TITLE: Basic Package Exports Configuration in JSON
DESCRIPTION: Example of configuring package exports in package.json to define entry points and file mappings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_21

LANGUAGE: json
CODE:
```
{
  "name": "a-package",
  "exports": {
    ".": "./index.mjs",
    "./foo.js": "./foo.js"
  }
}
```

----------------------------------------

TITLE: Cancelling setTimeout Promise with AbortController (Node.js Timers - MJS/CJS)
DESCRIPTION: Illustrates how to cancel a `setTimeout` promise using an `AbortController`. When the signal is aborted, the promise is rejected with an `AbortError`, stopping the timer before the delay completes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_1

LANGUAGE: mjs
CODE:
```
import { setTimeout as setTimeoutPromise } from 'node:timers/promises';

const ac = new AbortController();
const signal = ac.signal;

// We do not `await` the promise so `ac.abort()` is called concurrently.
setTimeoutPromise(1000, 'foobar', { signal })
  .then(console.log)
  .catch((err) => {
    if (err.name === 'AbortError')
      console.error('The timeout was aborted');
  });

ac.abort();
```

LANGUAGE: cjs
CODE:
```
const { setTimeout: setTimeoutPromise } = require('node:timers/promises');

const ac = new AbortController();
const signal = ac.signal;

setTimeoutPromise(1000, 'foobar', { signal })
  .then(console.log)
  .catch((err) => {
    if (err.name === 'AbortError')
      console.error('The timeout was aborted');
  });

ac.abort();
```

----------------------------------------

TITLE: Handling Data Events in Node.js Readable Streams
DESCRIPTION: Example showing how to listen for 'data' events on a readable stream to process chunks of data as they become available.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
const readable = getReadableStreamSomehow();
readable.on('data', (chunk) => {
  console.log(`Received ${chunk.length} bytes of data.`);
});
```

----------------------------------------

TITLE: Checking File/Directory Stats in Node.js
DESCRIPTION: This snippet demonstrates how to use fs.stat() to check the stats of files and directories. It iterates through an array of paths and logs whether each is a directory and its full stats object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_73

LANGUAGE: mjs
CODE:
```
import { stat } from 'node:fs';

const pathsToCheck = ['./txtDir', './txtDir/file.txt'];

for (let i = 0; i < pathsToCheck.length; i++) {
  stat(pathsToCheck[i], (err, stats) => {
    console.log(stats.isDirectory());
    console.log(stats);
  });
}
```

----------------------------------------

TITLE: Using assert.deepStrictEqual in ES Modules (Node.js)
DESCRIPTION: Demonstrates the usage of assert.deepStrictEqual with various data types in ES Modules format. Shows examples of successful comparisons and assertion errors for different types including objects, primitives, dates, symbols, and weak collections.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
import assert from 'node:assert/strict';

// This fails because 1 !== '1'.
assert.deepStrictEqual({ a: 1 }, { a: '1' });
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
//   {
// +   a: 1
// -   a: '1'
//   }

// The following objects don't have own properties
const date = new Date();
const object = {};
const fakeDate = {};
Object.setPrototypeOf(fakeDate, Date.prototype);

// Different [[Prototype]]:
assert.deepStrictEqual(object, fakeDate);
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + {}
// - Date {}

// Different type tags:
assert.deepStrictEqual(date, fakeDate);
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + 2018-04-26T00:49:08.604Z
// - Date {}

assert.deepStrictEqual(NaN, NaN);
// OK because Object.is(NaN, NaN) is true.

// Different unwrapped numbers:
assert.deepStrictEqual(new Number(1), new Number(2));
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + [Number: 1]
// - [Number: 2]

assert.deepStrictEqual(new String('foo'), Object('foo'));
// OK because the object and the string are identical when unwrapped.

assert.deepStrictEqual(-0, -0);
// OK

// Different zeros:
assert.deepStrictEqual(0, -0);
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + 0
// - -0

const symbol1 = Symbol();
const symbol2 = Symbol();
assert.deepStrictEqual({ [symbol1]: 1 }, { [symbol1]: 1 });
// OK, because it is the same symbol on both objects.

assert.deepStrictEqual({ [symbol1]: 1 }, { [symbol2]: 1 });
// AssertionError [ERR_ASSERTION]: Inputs identical but not reference equal:
//
// {
//   Symbol(): 1
// }

const weakMap1 = new WeakMap();
const weakMap2 = new WeakMap();
const obj = {};

weakMap1.set(obj, 'value');
weakMap2.set(obj, 'value');

// Comparing different instances fails, even with same contents
assert.deepStrictEqual(weakMap1, weakMap2);
// AssertionError: Values have same structure but are not reference-equal:
//
// WeakMap {
//   <items unknown>
// }

// Comparing the same instance to itself succeeds
assert.deepStrictEqual(weakMap1, weakMap1);
// OK

const weakSet1 = new WeakSet();
const weakSet2 = new WeakSet();
weakSet1.add(obj);
weakSet2.add(obj);

// Comparing different instances fails, even with same contents
assert.deepStrictEqual(weakSet1, weakSet2);
// AssertionError: Values have same structure but are not reference-equal:
// + actual - expected
//
// WeakSet {
//   <items unknown>
// }

// Comparing the same instance to itself succeeds
assert.deepStrictEqual(weakSet1, weakSet1);
// OK
```

----------------------------------------

TITLE: Handling Asynchronous Errors with Callbacks in Node.js
DESCRIPTION: Shows how to handle errors in asynchronous operations using callbacks in Node.js. This example demonstrates error handling when reading a file using the fs.readFile method with a callback function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
const fs = require('node:fs');
fs.readFile('a file that does not exist', (err, data) => {
  if (err) {
    console.error('There was an error reading the file!', err);
    return;
  }
  // Otherwise handle the data
});
```

----------------------------------------

TITLE: Defining Source Repository URL in package.json (JSON)
DESCRIPTION: This JSON snippet demonstrates how to specify the project's source code repository using the `repository` field in `package.json`. It includes the `type` (e.g., 'git') and the `url` pointing to the repository, enabling commands like `npm repo`. The URL should be directly usable by a VCS program.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
{
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/cli.git"
  }
}
```

----------------------------------------

TITLE: Generating Random Bytes Asynchronously with Node.js Crypto (ESM)
DESCRIPTION: Demonstrates how to generate cryptographically strong random bytes asynchronously using the crypto.randomBytes function in ESM format. The example shows generating 256 bytes of random data and converting it to hexadecimal format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_84

LANGUAGE: javascript
CODE:
```
const {
  randomBytes,
} = await import('node:crypto');

randomBytes(256, (err, buf) => {
  if (err) throw err;
  console.log(`${buf.length} bytes of random data: ${buf.toString('hex')}`);
});
```

----------------------------------------

TITLE: Handling Post-Completion Asynchronous Activity in Node.js Tests - Javascript
DESCRIPTION: Illustrates how the Node.js test runner handles asynchronous operations, such as `setImmediate` callbacks, that are initiated within a test function but complete after the test's main body has finished executing. It shows how late subtests or unhandled errors are reported.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_12

LANGUAGE: Javascript
CODE:
```
test('a test that creates asynchronous activity', (t) => {
  setImmediate(() => {
    t.test('subtest that is created too late', (t) => {
      throw new Error('error1');
    });
  });

  setImmediate(() => {
    throw new Error('error2');
  });

  // The test finishes after this line.
});
```

----------------------------------------

TITLE: Using addAbortSignal with ReadableStream Web API in Node.js
DESCRIPTION: Demonstrates attaching an AbortSignal to a ReadableStream from the Web Streams API. Shows usage with the stream reader and handling abort events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_70

LANGUAGE: javascript
CODE:
```
const controller = new AbortController();
const rs = new ReadableStream({
  start(controller) {
    controller.enqueue('hello');
    controller.enqueue('world');
    controller.close();
  },
});

addAbortSignal(controller.signal, rs);

finished(rs, (err) => {
  if (err) {
    if (err.name === 'AbortError') {
      // The operation was cancelled
    }
  }
});

const reader = rs.getReader();

reader.read().then(({ value, done }) => {
  console.log(value); // hello
  console.log(done); // false
  controller.abort();
});
```

----------------------------------------

TITLE: Copying Files Asynchronously in Node.js
DESCRIPTION: Demonstrates how to use the fs.copyFile() method to asynchronously copy files in Node.js. It shows both a basic usage and how to use the COPYFILE_EXCL flag to prevent overwriting existing files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_52

LANGUAGE: javascript
CODE:
```
import { copyFile, constants } from 'node:fs';

function callback(err) {
  if (err) throw err;
  console.log('source.txt was copied to destination.txt');
}

// destination.txt will be created or overwritten by default.
copyFile('source.txt', 'destination.txt', callback);

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL, callback);
```

----------------------------------------

TITLE: Attempting to Write to a Destroyed Writable Stream in Node.js (cjs)
DESCRIPTION: Demonstrates the consequence of attempting to write data to a Node.js Writable stream after it has been destroyed using `destroy()`. The `write()` call's callback receives an `ERR_STREAM_DESTROYED` error, indicating the stream is no longer writable.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_20

LANGUAGE: cjs
CODE:
```
const { Writable } = require('node:stream');

const myStream = new Writable();
myStream.destroy();

myStream.write('foo', (error) => console.error(error.code));
// ERR_STREAM_DESTROYED
```

----------------------------------------

TITLE: Stream-based Gzip Compression with Pipeline (Callback) using ES Modules
DESCRIPTION: Illustrates compressing a file ('input.txt') into a Gzip archive ('input.txt.gz') using Node.js streams and the `pipeline` function from the `stream` module with a callback for error handling. It uses ES Module syntax for imports (`fs`, `process`, `zlib`, `stream`). The example reads from a source stream, pipes it through a `zlib.createGzip()` transform stream, and writes to a destination stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_2

LANGUAGE: mjs
CODE:
```
import {
  createReadStream,
  createWriteStream,
} from 'node:fs';
import process from 'node:process';
import { createGzip } from 'node:zlib';
import { pipeline } from 'node:stream';

const gzip = createGzip();
const source = createReadStream('input.txt');
const destination = createWriteStream('input.txt.gz');

pipeline(source, gzip, destination, (err) => {
  if (err) {
    console.error('An error occurred:', err);
    process.exitCode = 1;
  }
});
```

----------------------------------------

TITLE: AsyncLocalStorage.run Error Handling
DESCRIPTION: This example shows how `asyncLocalStorage.run()` handles errors. If an error is thrown inside the callback, `run()` re-throws it, ensuring the context is properly exited upon the exception while preserving the context active before the `run` call.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_4

LANGUAGE: js
CODE:
```
const store = { id: 2 };
try {
  asyncLocalStorage.run(store, () => {
    asyncLocalStorage.getStore(); // Returns the store object
    setTimeout(() => {
      asyncLocalStorage.getStore(); // Returns the store object
    }, 200);
    throw new Error();
  });
} catch (e) {
  asyncLocalStorage.getStore(); // Returns undefined
  // The error will be caught here
}
```

----------------------------------------

TITLE: Installing a Scoped Package using npm in Bash
DESCRIPTION: Shows how to install a scoped package using the npm install command. The package name is preceded by the scope with an '@' symbol.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scope.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm install @myorg/mypackage
```

----------------------------------------

TITLE: Worker Thread Task Processor (ESM)
DESCRIPTION: A simple Node.js Worker script using ES Modules. It listens for messages from the parent thread, expecting an object with numerical properties `a` and `b`, and posts their sum back as a message. This script serves as the task handler for the `WorkerPool` example.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_10

LANGUAGE: mjs
CODE:
```
import { parentPort } from 'node:worker_threads';
parentPort.on('message', (task) => {
  parentPort.postMessage(task.a + task.b);
});
```

----------------------------------------

TITLE: Context Recovery with diagnostics_channel and AsyncLocalStorage (CommonJS)
DESCRIPTION: Example of using AsyncLocalStorage with TracingChannel to maintain context across asynchronous boundaries in CommonJS. This demonstrates how to restore trace context between async operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_39

LANGUAGE: javascript
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');
const { AsyncLocalStorage } = require('node:async_hooks');

const channels = diagnostics_channel.tracingChannel('my-channel');
const myStore = new AsyncLocalStorage();

// The start channel sets the initial store data to something
// and stores that store data value on the trace context object
channels.start.bindStore(myStore, (data) => {
  const span = new Span(data);
  data.span = span;
  return span;
});

// Then asyncStart can restore from that data it stored previously
channels.asyncStart.bindStore(myStore, (data) => {
  return data.span;
});
```

----------------------------------------

TITLE: Creating a Hash Digest as a Stream - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This snippet demonstrates creating a SHA-256 hash using the Node.js crypto module as an async import in ESM format. The hash is computed by writing data to the stream and listening for the 'readable' event. Input data is written using hash.write() and finalized with hash.end(), then the digest is output in hexadecimal using toString('hex'). Requires Node.js 14+ with module support and 'node:crypto' module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_26

LANGUAGE: JavaScript
CODE:
```
const {
  createHash,
} = await import('node:crypto');

const hash = createHash('sha256');

hash.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = hash.read();
  if (data) {
    console.log(data.toString('hex'));
    // Prints:
    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50
  }
});

hash.write('some data to hash');
hash.end();
```

----------------------------------------

TITLE: Generating RSA Key Pair Asynchronously with ESM
DESCRIPTION: Example of generating an RSA key pair asynchronously using ESM imports. The code demonstrates generating a 4096-bit RSA key pair with SPKI public key encoding and PKCS8 private key encoding with AES-256-CBC encryption.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_65

LANGUAGE: javascript
CODE:
```
const {
  generateKeyPair,
} = await import('node:crypto');

generateKeyPair('rsa', {
  modulusLength: 4096,
  publicKeyEncoding: {
    type: 'spki',
    format: 'pem',
  },
  privateKeyEncoding: {
    type: 'pkcs8',
    format: 'pem',
    cipher: 'aes-256-cbc',
    passphrase: 'top secret',
  },
}, (err, publicKey, privateKey) => {
  // Handle errors and use the generated key pair.
});
```

----------------------------------------

TITLE: Circular Data Transfer using MessagePort (ESM)
DESCRIPTION: Demonstrates sending circular data references between threads using MessagePort in ESM format. Shows how the structured clone algorithm handles circular references.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_8

LANGUAGE: mjs
CODE:
```
import { MessageChannel } from 'node:worker_threads';
const { port1, port2 } = new MessageChannel();

port1.on('message', (message) => console.log(message));

const circularData = {};
circularData.foo = circularData;
// Prints: { foo: [Circular] }
port2.postMessage(circularData);
```

----------------------------------------

TITLE: Configuring Internal Imports with the Imports Field (JSON)
DESCRIPTION: Demonstrates use of the imports field in package.json to provide private import specifier mappings for modules used internally to the package. This enables conditional resolution based on the running environment, offering polyfills or native modules as needed. Entries must start with # for valid internal address resolution and requires Node.js v14.6.0+ or v12.19.0+.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_12

LANGUAGE: json
CODE:
```
// package.json
{
  "imports": {
    "#dep": {
      "node": "dep-node-native",
      "default": "./dep-polyfill.js"
    }
  },
  "dependencies": {
    "dep-node-native": "^1.0.0"
  }
}
```

----------------------------------------

TITLE: Initiating HTTP/2 Client Request (ESM)
DESCRIPTION: Shows how to connect to an HTTP/2 server, create a request using `clientSession.request()`, and handle the response headers and incoming data/end events on the resulting stream. Requires the `node:http2` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_13

LANGUAGE: mjs
CODE:
```
import { connect, constants } from 'node:http2';
const clientSession = connect('https://localhost:1234');
const {
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_STATUS,
} = constants;

const req = clientSession.request({ [HTTP2_HEADER_PATH]: '/' });
req.on('response', (headers) => {
  console.log(headers[HTTP2_HEADER_STATUS]);
  req.on('data', (chunk) => { /* .. */ });
  req.on('end', () => { /* .. */ });
});
```

----------------------------------------

TITLE: Sending Messages Between Parent and Child Processes in Node.js
DESCRIPTION: Demonstrates how to use subprocess.send() to communicate between parent and child processes. The parent sends a message to the child, and the child sends a message back to the parent.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_39

LANGUAGE: javascript
CODE:
```
const { fork } = require('node:child_process');
const forkedProcess = fork(`${__dirname}/sub.js`);

forkedProcess.on('message', (message) => {
  console.log('PARENT got message:', message);
});

// Causes the child to print: CHILD got message: { hello: 'world' }
forkedProcess.send({ hello: 'world' });
```

LANGUAGE: javascript
CODE:
```
import { fork } from 'node:child_process';
const forkedProcess = fork(`${import.meta.dirname}/sub.js`);

forkedProcess.on('message', (message) => {
  console.log('PARENT got message:', message);
});

// Causes the child to print: CHILD got message: { hello: 'world' }
forkedProcess.send({ hello: 'world' });
```

LANGUAGE: javascript
CODE:
```
process.on('message', (message) => {
  console.log('CHILD got message:', message);
});

// Causes the parent to print: PARENT got message: { foo: 'bar', baz: null }
process.send({ foo: 'bar', baz: NaN });
```

----------------------------------------

TITLE: Handling Client Errors in Node.js HTTP Server (CommonJS)
DESCRIPTION: Example of handling client errors in a Node.js HTTP server using CommonJS modules. Creates a server that responds to client errors with a 400 Bad Request response.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_25

LANGUAGE: cjs
CODE:
```
const http = require('node:http');

const server = http.createServer((req, res) => {
  res.end();
});
server.on('clientError', (err, socket) => {
  socket.end('HTTP/1.1 400 Bad Request\r\n\r\n');
});
server.listen(8000);
```

----------------------------------------

TITLE: Using Relative File Paths with fs.promises.open in Node.js
DESCRIPTION: This snippet demonstrates how to use a relative file path with the fs.promises.open method in Node.js, showing proper resource management with try-finally.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_113

LANGUAGE: javascript
CODE:
```
import { open } from 'node:fs/promises';

let fd;
try {
  fd = await open('file.txt', 'r');
  // Do something with the file
} finally {
  await fd?.close();
}
```

----------------------------------------

TITLE: Advancing node:timers/promises.setInterval with timers.tick()
DESCRIPTION: This snippet demonstrates mocking `setInterval` from the `node:timers/promises` module, which returns an `AsyncGenerator`. `context.mock.timers.tick()` is used multiple times to trigger the interval and yield values from the generator, simulating the passage of time for the interval.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_55

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';
import nodeTimersPromises from 'node:timers/promises';
test('should tick five times testing a real use case', async (context) => {
  context.mock.timers.enable({ apis: ['setInterval'] });

  const expectedIterations = 3;
  const interval = 1000;
  const startedAt = Date.now();
  async function run() {
    const times = [];
    for await (const time of nodeTimersPromises.setInterval(interval, startedAt)) {
      times.push(time);
      if (times.length === expectedIterations) break;
    }
    return times;
  }

  const r = run();
  context.mock.timers.tick(interval);
  context.mock.timers.tick(interval);
  context.mock.timers.tick(interval);

  const timeResults = await r;
  assert.strictEqual(timeResults.length, expectedIterations);
  for (let it = 1; it < expectedIterations; it++) {
    assert.strictEqual(timeResults[it - 1], startedAt + (interval * it));
  }
});
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');
const nodeTimersPromises = require('node:timers/promises');
test('should tick five times testing a real use case', async (context) => {
  context.mock.timers.enable({ apis: ['setInterval'] });

  const expectedIterations = 3;
  const interval = 1000;
  const startedAt = Date.now();
  async function run() {
    const times = [];
    for await (const time of nodeTimersPromises.setInterval(interval, startedAt)) {
      times.push(time);
      if (times.length === expectedIterations) break;
    } Elinor
    return times;
  }

  const r = run();
  context.mock.timers.tick(interval);
  context.mock.timers.tick(interval);
  context.mock.timers.tick(interval);

  const timeResults = await r;
  assert.strictEqual(timeResults.length, expectedIterations);
  for (let it = 1; it < expectedIterations; it++) {
    assert.strictEqual(timeResults[it - 1], startedAt + (interval * it));
  }
});
```

----------------------------------------

TITLE: Example ES Module Subpath Import (JavaScript)
DESCRIPTION: Demonstrates importing a submodule from an ES module package using its defined subpath export. The specified import path triggers Node.js to resolve and load the mapped file as defined in the package's exports field. Expects package.json with correct subpath mapping; this import will succeed and load the intended submodule.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_9

LANGUAGE: js
CODE:
```
import submodule from 'es-module-package/submodule.js';
// Loads ./node_modules/es-module-package/src/submodule.js
```

----------------------------------------

TITLE: Safely creating buffers from possibly non-number inputs (JavaScript)
DESCRIPTION: This snippet provides a cross-version pattern for safely constructing buffers from values that are *not* guaranteed to be numbers. If Buffer.from is available and correctly implemented (not an alias for Uint8Array.from), it is used. Otherwise, the code checks the type to prevent accidental unsafe allocation with a number. This guards against security vulnerabilities from user-provided input. Requires Node.js and some runtime type checks; works in Node.js environments back to early versions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/safer-buffer/Porting-Buffer.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
var buf;
if (Buffer.from && Buffer.from !== Uint8Array.from) {
  buf = Buffer.from(notNumber, encoding);
} else {
  if (typeof notNumber === 'number')
    throw new Error('The "size" argument must be of type number.');
  buf = new Buffer(notNumber, encoding);
}
```

----------------------------------------

TITLE: Using WebSocketStream with Readable and Writable Streams
DESCRIPTION: This example demonstrates the usage of WebSocketStream to create a bidirectional stream connection. It shows how to read from the readable stream with a reader and write to the writable stream with a writer, handling the asynchronous nature of WebSocket communication.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/WebSocket.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const stream = new WebSocketStream('https://echo.websocket.org/')
const { readable, writable } = await stream.opened

async function read () {
  /** @type {ReadableStreamReader} */
  const reader = readable.getReader()

  while (true) {
    const { done, value } = await reader.read()
    if (done) break

    // do something with value
  }
}

async function write () {
  /** @type {WritableStreamDefaultWriter} */
  const writer = writable.getWriter()
  writer.write('Hello, world!')
  writer.releaseLock()
}

read()

setInterval(() => write(), 5000)
```

----------------------------------------

TITLE: Using assert.rejects() with Promise.reject() in Node.js (CommonJS)
DESCRIPTION: Demonstrates how to use assert.rejects() in a CommonJS environment to test rejected promises. This example checks if the promise is rejected with an Error object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_47

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert/strict');

assert.rejects(
  Promise.reject(new Error('Wrong value')),
  Error,
).then(() => {
  // ...
});
```

----------------------------------------

TITLE: Setting Socket Timeout with Event Handler
DESCRIPTION: Example showing how to set a socket timeout and handle the timeout event. The code sets a 3-second timeout and closes the connection when triggered.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
socket.setTimeout(3000);
socket.on('timeout', () => {
  console.log('socket timeout');
  socket.end();
});
```

----------------------------------------

TITLE: Reading File Data into Multiple Buffers Synchronously in Node.js
DESCRIPTION: Uses fs.readvSync to read file data into multiple buffers. Returns the number of bytes read.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_92

LANGUAGE: JavaScript
CODE:
```
fs.readvSync(fd, buffers[, position])
```

----------------------------------------

TITLE: Defining an After Hook in Node.js Test Runner
DESCRIPTION: Shows how to define an `after` hook within a test suite (`describe`) using the Node.js `node:test` module. This hook function runs once after all tests and nested suites within its parent suite have finished execution, even if tests failed, typically used for overall suite teardown. Requires importing functions from `node:test`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_38

LANGUAGE: JavaScript
CODE:
```
describe('tests', async () => {
  after(() => console.log('finished running tests'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
```

----------------------------------------

TITLE: Configuring Build Commands and Test Scripts with npm Scripts - JSON
DESCRIPTION: This snippet specifies multiple scripts in the package.json, showing how to run shell commands for different lifecycle events: './configure' for preinstall, a compile and install command for install, and a 'make test' for the test script. It highlights that npm scripts can execute arbitrary shell commands via npm’s scripting interface. All commands listed must be valid and available in the environment where npm is run, and shell utilities like 'make' must be installed if referenced.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scripts.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{\n  \"scripts\" : {\n    \"preinstall\" : \"./configure\",\n    \"install\" : \"make && make install\",\n    \"test\" : \"make test\"\n  }\n}
```

----------------------------------------

TITLE: Checking File Accessibility with fs.access in Node.js
DESCRIPTION: Examples showing how to check if a file exists and is readable or writable using the fs.access method with different permission flags from the constants module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_43

LANGUAGE: javascript
CODE:
```
import { access, constants } from 'node:fs';

const file = 'package.json';

// Check if the file exists in the current directory.
access(file, constants.F_OK, (err) => {
  console.log(`${file} ${err ? 'does not exist' : 'exists'}`);
});

// Check if the file is readable.
access(file, constants.R_OK, (err) => {
  console.log(`${file} ${err ? 'is not readable' : 'is readable'}`);
});

// Check if the file is writable.
access(file, constants.W_OK, (err) => {
  console.log(`${file} ${err ? 'is not writable' : 'is writable'}`);
});

// Check if the file is readable and writable.
access(file, constants.R_OK | constants.W_OK, (err) => {
  console.log(`${file} ${err ? 'is not' : 'is'} readable and writable`);
});
```

----------------------------------------

TITLE: ESM Import Meta Updates - JavaScript
DESCRIPTION: Implementation adding import.meta.dirname and import.meta.filename functionality to ESM modules
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
import.meta.dirname
import.meta.filename
```

----------------------------------------

TITLE: Generating SHA256 Hash Using Node.js Crypto (CommonJS)
DESCRIPTION: Example demonstrating how to generate a SHA256 hash of a file using the crypto.createHash method in CommonJS format. Creates a readable stream from a file and generates its hash digest in hex format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_61

LANGUAGE: javascript
CODE:
```
const {
  createReadStream,
} = require('node:fs');
const {
  createHash,
} = require('node:crypto');
const { argv } = require('node:process');

const filename = argv[2];

const hash = createHash('sha256');

const input = createReadStream(filename);
input.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = input.read();
  if (data)
    hash.update(data);
  else {
    console.log(`${hash.digest('hex')} ${filename}`);
  }
});
```

----------------------------------------

TITLE: Using util.promisify() with fs.stat in Node.js (CommonJS)
DESCRIPTION: Shows how to use util.promisify() to convert the fs.stat function from a callback-based API to a promise-based one in CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_43

LANGUAGE: JavaScript
CODE:
```
const { promisify } = require('node:util');
const { stat } = require('node:fs');

const promisifiedStat = promisify(stat);
promisifiedStat('.').then((stats) => {
  // Do something with `stats`
}).catch((error) => {
  // Handle the error.
});
```

----------------------------------------

TITLE: Worker Thread Task Processor (CJS)
DESCRIPTION: A simple Node.js Worker script using CommonJS. It listens for messages from the parent thread, expecting an object with numerical properties `a` and `b`, and posts their sum back as a message. This script serves as the task handler for the `WorkerPool` example.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_11

LANGUAGE: cjs
CODE:
```
const { parentPort } = require('node:worker_threads');
parentPort.on('message', (task) => {
  parentPort.postMessage(task.a + task.b);
});
```

----------------------------------------

TITLE: Handling Output and Errors with `exec` Callback (MJS)
DESCRIPTION: Illustrates how to use the callback function with `child_process.exec` using ES Modules syntax. The callback receives `error`, `stdout`, and `stderr` arguments, allowing for checking command success (error is null), processing standard output, and capturing standard error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_7

LANGUAGE: mjs
CODE:
```
import { exec } from 'node:child_process';
exec('cat *.js missing_file | wc -l', (error, stdout, stderr) => {
  if (error) {
    console.error(`exec error: ${error}`);
    return;
  }
  console.log(`stdout: ${stdout}`);
  console.error(`stderr: ${stderr}`);
});
```

----------------------------------------

TITLE: Filtering Stream Data with filter() Method in Node.js
DESCRIPTION: Demonstrates using the Readable.filter() method to filter stream contents based on both synchronous and asynchronous predicates. The example shows filtering numbers and filtering domains based on DNS TTL values with concurrency control.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_44

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { Resolver } from 'node:dns/promises';

// With a synchronous predicate.
for await (const chunk of Readable.from([1, 2, 3, 4]).filter((x) => x > 2)) {
  console.log(chunk); // 3, 4
}
// With an asynchronous predicate, making at most 2 queries at a time.
const resolver = new Resolver();
const dnsResults = Readable.from([
  'nodejs.org',
  'openjsf.org',
  'www.linuxfoundation.org',
]).filter(async (domain) => {
  const { address } = await resolver.resolve4(domain, { ttl: true });
  return address.ttl > 60;
}, { concurrency: 2 });
for await (const result of dnsResults) {
  // Logs domains with more than 60 seconds on the resolved dns record.
  console.log(result);
}
```

----------------------------------------

TITLE: Defining a BeforeEach Hook in Node.js Test Runner
DESCRIPTION: Illustrates defining a `beforeEach` hook within a test suite (`describe`) using the Node.js `node:test` module. This hook function runs before each individual test or nested suite within its parent suite, useful for setting up common state or resources for each test. Requires importing functions from `node:test`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_39

LANGUAGE: JavaScript
CODE:
```
describe('tests', async () => {
  beforeEach(() => console.log('about to run a test'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
```

----------------------------------------

TITLE: Exporting and Importing HMAC Keys using Web Crypto API in JavaScript
DESCRIPTION: These functions demonstrate how to generate, export, and import HMAC keys using the Web Crypto API. They support different key formats and hash algorithms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function generateAndExportHmacKey(format = 'jwk', hash = 'SHA-512') {
  const key = await subtle.generateKey({
    name: 'HMAC',
    hash,
  }, true, ['sign', 'verify']);

  return subtle.exportKey(format, key);
}

async function importHmacKey(keyData, format = 'jwk', hash = 'SHA-512') {
  const key = await subtle.importKey(format, keyData, {
    name: 'HMAC',
    hash,
  }, true, ['sign', 'verify']);

  return key;
}
```

----------------------------------------

TITLE: Reading File Stream Line by Line Using For-Await Loop (CommonJS)
DESCRIPTION: CommonJS version of the file reading example using require instead of import. Uses the same approach with createReadStream and createInterface to process file lines.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_34

LANGUAGE: javascript
CODE:
```
const { createReadStream } = require('node:fs');
const { createInterface } = require('node:readline');

async function processLineByLine() {
  const fileStream = createReadStream('input.txt');

  const rl = createInterface({
    input: fileStream,
    crlfDelay: Infinity,
  });
  // Note: we use the crlfDelay option to recognize all instances of CR LF
  // ('\r\n') in input.txt as a single line break.

  for await (const line of rl) {
    // Each line in input.txt will be successively available here as `line`.
    console.log(`Line from file: ${line}`);
  }
}

processLineByLine();
```

----------------------------------------

TITLE: Handling 'warning' Event in Node.js (CommonJS)
DESCRIPTION: This snippet shows how to listen for and handle the 'warning' event in Node.js using CommonJS. It demonstrates accessing and logging the warning's name, message, and stack trace.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_21

LANGUAGE: cjs
CODE:
```
const process = require('node:process');

process.on('warning', (warning) => {
  console.warn(warning.name);    // Print the warning name
  console.warn(warning.message); // Print the warning message
  console.warn(warning.stack);   // Print the stack trace
});
```

----------------------------------------

TITLE: Multiple Event Emissions with On Method in Node.js (CommonJS)
DESCRIPTION: This example shows how the on() method in Node.js EventEmitter invokes the listener every time the named event is emitted. It uses CommonJS modules to demonstrate multiple event emissions and listener invocations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_9

LANGUAGE: JavaScript
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
let m = 0;
myEmitter.on('event', () => {
  console.log(++m);
});
myEmitter.emit('event');
// Prints: 1
myEmitter.emit('event');
// Prints: 2
```

----------------------------------------

TITLE: Encrypting Data Using cipher.update() and cipher.final() Methods in Node.js (ES Modules)
DESCRIPTION: This example shows how to encrypt data using the cipher.update() and cipher.final() methods in Node.js. It generates a key and initialization vector, then uses these to create a cipher and encrypt the data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
const {
  scrypt,
  randomFill,
  createCipheriv,
} = await import('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';

// First, we'll generate the key. The key length is dependent on the algorithm.
// In this case for aes192, it is 24 bytes (192 bits).
scrypt(password, 'salt', 24, (err, key) => {
  if (err) throw err;
  // Then, we'll generate a random initialization vector
  randomFill(new Uint8Array(16), (err, iv) => {
    if (err) throw err;

    const cipher = createCipheriv(algorithm, key, iv);

    let encrypted = cipher.update('some clear text data', 'utf8', 'hex');
    encrypted += cipher.final('hex');
    console.log(encrypted);
  });
});
```

----------------------------------------

TITLE: Establishing HTTP/2 Client Connection (ESM) - Node.js
DESCRIPTION: Demonstrates how to create an HTTP/2 client session to a specified remote authority using the `http2.connect` function with ECMAScript Module (ESM) syntax. It shows importing the function, creating the connection, and closing the session.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_45

LANGUAGE: javascript
CODE:
```
import { connect } from 'node:http2';
const client = connect('https://localhost:1234');

/* Use the client */

client.close();
```

----------------------------------------

TITLE: Inter-Process Communication using worker.send() in Node.js Cluster
DESCRIPTION: Illustrates basic message passing between the primary process and a worker using the Node.js cluster module. The primary sends a message using `worker.send()`, and the worker listens for messages using `process.on('message')` and echoes them back to the primary using `process.send()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_9

LANGUAGE: js
CODE:
```
if (cluster.isPrimary) {
  const worker = cluster.fork();
  worker.send('hi there');

} else if (cluster.isWorker) {
  process.on('message', (msg) => {
    process.send(msg);
  });
}
```

----------------------------------------

TITLE: Testing Array.reduceRight() with Initial Values in JavaScript
DESCRIPTION: Test cases for the reduceRight() method with an initial value of 4. Shows how the initial value is incorporated into the reduction process.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-reduceRight-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
[0,1,2,3].reduceRight(function(a,b){ return a + b; }, 4)
```

----------------------------------------

TITLE: Creating TCP Client Connection in Node.js (ESM)
DESCRIPTION: Example of creating a TCP client connection using net.createConnection in ES modules format. Demonstrates connecting to port 8124 and handling basic socket events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_25

LANGUAGE: mjs
CODE:
```
import net from 'node:net';
const client = net.createConnection({ port: 8124 }, () => {
  // 'connect' listener.
  console.log('connected to server!');
  client.write('world!\r\n');
});
client.on('data', (data) => {
  console.log(data.toString());
  client.end();
});
client.on('end', () => {
  console.log('disconnected from server');
});
```

----------------------------------------

TITLE: Failed Module Export with Asynchronous Assignment in Node.js
DESCRIPTION: Demonstrates an incorrect pattern where module.exports is assigned asynchronously, which doesn't work because the module is evaluated synchronously at require time.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_26

LANGUAGE: javascript
CODE:
```
setTimeout(() => {
  module.exports = { a: 'hello' };
}, 0);
```

----------------------------------------

TITLE: Using stream.pipeline() for Stream Composition
DESCRIPTION: Demonstrates using stream.pipeline() to pipe multiple streams together with proper error handling and cleanup. Shows example of creating a gzip compression pipeline.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_58

LANGUAGE: javascript
CODE:
```
const { pipeline } = require('node:stream');
const fs = require('node:fs');
const zlib = require('node:zlib');

pipeline(
  fs.createReadStream('archive.tar'),
  zlib.createGzip(),
  fs.createWriteStream('archive.tar.gz'),
  (err) => {
    if (err) {
      console.error('Pipeline failed.', err);
    } else {
      console.log('Pipeline succeeded.');
    }
  },
);
```

----------------------------------------

TITLE: MockClient Request with Intercepted Response
DESCRIPTION: Demonstrates the full workflow of creating a MockClient, intercepting a specific path with a predefined response, and then making a request to that path. The example shows how to extract the status code and read the response body.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockClient.md#2025-04-23_snippet_1

LANGUAGE: js
CODE:
```
import { MockAgent } from 'undici'

const mockAgent = new MockAgent({ connections: 1 })

const mockClient = mockAgent.get('http://localhost:3000')
mockClient.intercept({ path: '/foo' }).reply(200, 'foo')

const {
  statusCode,
  body
} = await mockClient.request({
  origin: 'http://localhost:3000',
  path: '/foo',
  method: 'GET'
})

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Aborting HTTP Requests with AbortController in Undici
DESCRIPTION: Example showing how to abort a request using AbortController with Undici's Client. The code creates a server, initiates a request, and then aborts it using the AbortController, resulting in a RequestAbortedError.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.end('Hello, World!')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)
const abortController = new AbortController()

try {
  client.request({
    path: '/',
    method: 'GET',
    signal: abortController.signal
  })
} catch (error) {
  console.error(error) // should print an RequestAbortedError
  client.close()
  server.close()
}

abortController.abort()
```

----------------------------------------

TITLE: Signature Verification Using subtle.verify Method - JavaScript
DESCRIPTION: Method for verifying cryptographic signatures using various algorithms including RSA, ECDSA, Ed25519, Ed448, and HMAC. Takes algorithm parameters, key, signature, and data as inputs and returns a Promise resolving to a boolean.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
subtle.verify(algorithm, key, signature, data)
```

----------------------------------------

TITLE: Reassigning Both module.exports and exports in Node.js
DESCRIPTION: Shows a common pattern where both module.exports and exports are reassigned to the same function to maintain the shortcut while completely replacing the exports object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
module.exports = exports = function Constructor() {
  // ... etc.
};
```

----------------------------------------

TITLE: Watching for File Changes using fsPromises.watch in Node.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the fsPromises.watch function to monitor changes on a specified file using an asynchronous iterator. It utilizes the AbortController API to control the duration of monitoring, automatically stopping the watcher after a timeout (10 seconds). Dependencies include the 'node:fs/promises' module; key parameters are the monitored file path and watch options such as the abort signal. The iterator yields event objects upon file system changes; limitations depend on platform-specific support for directory watching and event emission.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_41

LANGUAGE: js
CODE:
```
const { watch } = require('node:fs/promises');\n\nconst ac = new AbortController();\nconst { signal } = ac;\nsetTimeout(() => ac.abort(), 10000);\n\n(async () => {\n  try {\n    const watcher = watch(__filename, { signal });\n    for await (const event of watcher)\n      console.log(event);\n  } catch (err) {\n    if (err.name === 'AbortError')\n      return;\n    throw err;\n  }\n})();
```

----------------------------------------

TITLE: Implementing AsyncResource Worker Pool (ESM)
DESCRIPTION: Defines a `WorkerPool` class using ES Modules that manages a pool of Node.js Worker threads. It utilizes a nested `WorkerPoolTaskInfo` class, extending `AsyncResource`, to ensure that task callbacks executed by the worker threads maintain the correct asynchronous context of the scope where the task was originally submitted. It handles task queuing, worker creation, and error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_12

LANGUAGE: mjs
CODE:
```
import { AsyncResource } from 'node:async_hooks';
import { EventEmitter } from 'node:events';
import { Worker } from 'node:worker_threads';

const kTaskInfo = Symbol('kTaskInfo');
const kWorkerFreedEvent = Symbol('kWorkerFreedEvent');

class WorkerPoolTaskInfo extends AsyncResource {
  constructor(callback) {
    super('WorkerPoolTaskInfo');
    this.callback = callback;
  }

  done(err, result) {
    this.runInAsyncScope(this.callback, null, err, result);
    this.emitDestroy();  // `TaskInfo`s are used only once.
  }
}

export default class WorkerPool extends EventEmitter {
  constructor(numThreads) {
    super();
    this.numThreads = numThreads;
    this.workers = [];
    this.freeWorkers = [];
    this.tasks = [];

    for (let i = 0; i < numThreads; i++)
      this.addNewWorker();

    // Any time the kWorkerFreedEvent is emitted, dispatch
    // the next task pending in the queue, if any.
    this.on(kWorkerFreedEvent, () => {
      if (this.tasks.length > 0) {
        const { task, callback } = this.tasks.shift();
        this.runTask(task, callback);
      }K
    });
  }

  addNewWorker() {
    const worker = new Worker(new URL('task_processor.js', import.meta.url));
    worker.on('message', (result) => {
      // In case of success: Call the callback that was passed to `runTask`,
      // remove the `TaskInfo` associated with the Worker, and mark it as free
      // again.
      worker[kTaskInfo].done(null, result);
      worker[kTaskInfo] = null;
      this.freeWorkers.push(worker);
      this.emit(kWorkerFreedEvent);
    });
    worker.on('error', (err) => {
      // In case of an uncaught exception: Call the callback that was passed to
      // `runTask` with the error.
      if (worker[kTaskInfo])
        worker[kTaskInfo].done(err, null);
      else
        this.emit('error', err);
      // Remove the worker from the list and start a new Worker to replace the
      // current one.
      this.workers.splice(this.workers.indexOf(worker), 1);
      this.addNewWorker();
    });
    this.workers.push(worker);
    this.freeWorkers.push(worker);
    this.emit(kWorkerFreedEvent);
  }

  runTask(task, callback) {
    if (this.freeWorkers.length === 0) {
      // No free threads, wait until a worker thread becomes free.
      this.tasks.push({ task, callback });
      return;
    }

    const worker = this.freeWorkers.pop();
    worker[kTaskInfo] = new WorkerPoolTaskInfo(callback);
    worker.postMessage(task);
  }

  close() {
    for (const worker of this.workers) worker.terminate();
  }
}
```

----------------------------------------

TITLE: Using addAbortSignal with Async Iteration in Node.js
DESCRIPTION: Shows how to use an AbortSignal with a readable stream as an async iterable. Includes timeout configuration and error handling for AbortError.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_69

LANGUAGE: javascript
CODE:
```
const controller = new AbortController();
setTimeout(() => controller.abort(), 10_000); // set a timeout
const stream = addAbortSignal(
  controller.signal,
  fs.createReadStream(('object.json')),
);
(async () => {
  try {
    for await (const chunk of stream) {
      await process(chunk);
    }
  } catch (e) {
    if (e.name === 'AbortError') {
      // The operation was cancelled
    } else {
      throw e;
    }
  }
})();
```

----------------------------------------

TITLE: Importing the URL Module in ECMAScript modules
DESCRIPTION: Shows how to import the Node.js URL module using ECMAScript module syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import url from 'node:url';
```

----------------------------------------

TITLE: Implementing SOCKS 'bind' with SocksClient in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to use the `SocksClient` from the `socks` library to execute the SOCKS `bind` command. It involves configuring the client with proxy details, destination address (often a wildcard 0.0.0.0), and setting the command to 'bind'. Event listeners for 'bound' (when the proxy starts listening on a new port) and 'established' (when an external client connects to that port via the proxy) are set up to handle the connection lifecycle. An 'error' listener handles potential issues, and the `connect()` method initiates the process. Dependencies include the `socks` library (`SocksClient`, `SocksClientOptions`). The 'established' event provides a standard net.Socket for communication with the connecting client.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/typescript/bindExample.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    host: '104.131.124.203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will connect to the SOCKS proxy server on the newly bound port.
  // Most SOCKS servers accept 0.0.0.0 as a wildcard address to accept any client.
  destination: {
    host: '0.0.0.0',
    port: 0
  },

  command: 'bind'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new port for incoming connections.
client.on('bound', (info) => {
  console.log(info);
  /*
  {
    socket: <Socket ...>,
    remoteHost: { // This is the remote ip and port of the SOCKS proxy that is now accepting incoming connections.
      host: '104.131.124.203',
      port: 49928
    }
  }
  */
});

// This event is fired when the SOCKS server has accepted an incoming connection on the newly bound port.
client.on('established', (info) => {
  console.log(info);
  /*
  {
    socket: <Socket ...>,
    remoteHost: { // This is the remote ip and port that connected to the SOCKS proxy on the newly bound port.
      host: '1.2.3.4',
      port: 58232
    }
  }
  */

  // At this point info.socket is a regular net.Socket TCP connection between client and client2 (1.2.3.4) (the client which connected to the proxy on the newly bound port.)

  console.log(info.socket);
  // <Socket ...>  (this is a raw net.Socket that is established to the destination host through the given proxy servers)
});

// SOCKS proxy failed to bind.
client.on('error', () => {
  // Handle errors
});

// Start connection
client.connect();
```
```

----------------------------------------

TITLE: Converting Stream to Blob in Node.js
DESCRIPTION: Demonstrates how to convert a readable stream into a Blob using the streamConsumers.blob() utility. Shows both ESM and CommonJS implementations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
import { blob } from 'node:stream/consumers';

const dataBlob = new Blob(['hello world from consumers!']);

const readable = dataBlob.stream();
const data = await blob(readable);
console.log(`from readable: ${data.size}`);
// Prints: from readable: 27
```

LANGUAGE: javascript
CODE:
```
const { blob } = require('node:stream/consumers');

const dataBlob = new Blob(['hello world from consumers!']);

const readable = dataBlob.stream();
blob(readable).then((data) => {
  console.log(`from readable: ${data.size}`);
  // Prints: from readable: 27
});
```

----------------------------------------

TITLE: Identifying Primary and Worker Processes in Node.js Cluster (CommonJS)
DESCRIPTION: CommonJS version showing how to determine if the current process is a primary or worker process. It also demonstrates creating worker processes and accessing the worker ID in worker processes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
const cluster = require('node:cluster');

if (cluster.isPrimary) {
  console.log('I am primary');
  cluster.fork();
  cluster.fork();
} else if (cluster.isWorker) {
  console.log(`I am worker #${cluster.worker.id}`);
}
```

----------------------------------------

TITLE: Using stream.finished in CommonJS
DESCRIPTION: Example demonstrating how to use the stream.finished function from the stream/promises API in CommonJS to be notified when a stream is no longer readable or writable. The function waits for the stream to finish.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const { finished } = require('node:stream/promises');
const fs = require('node:fs');

const rs = fs.createReadStream('archive.tar');

async function run() {
  await finished(rs);
  console.log('Stream is done reading.');
}

run().catch(console.error);
rs.resume(); // Drain the stream.
```

----------------------------------------

TITLE: Using events.once() with CommonJS
DESCRIPTION: CommonJS version of the events.once() example, showing how to handle events and errors in an async context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_41

LANGUAGE: javascript
CODE:
```
const { once, EventEmitter } = require('node:events');

async function run() {
  const ee = new EventEmitter();

  process.nextTick(() => {
    ee.emit('myevent', 42);
  });

  const [value] = await once(ee, 'myevent');
  console.log(value);

  const err = new Error('kaboom');
  process.nextTick(() => {
    ee.emit('error', err);
  });

  try {
    await once(ee, 'myevent');
  } catch (err) {
    console.error('error happened', err);
  }
}

run();
```

----------------------------------------

TITLE: Synchronous Directory Creation with mkdirp.sync in JavaScript
DESCRIPTION: Demonstrates the synchronous usage of the `mkdirp.sync` function from the 'mkdirp' module in Node.js. It imports the function using ES Modules and creates a directory path recursively. The return value, which is the first directory created, is stored in the `made` variable and logged.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cacache/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { mkdirp } from 'mkdirp'

// return value is the first directory created
const made = mkdirp.sync('/tmp/foo/bar/baz')
console.log(`made directories, starting with ${made}`)
```

----------------------------------------

TITLE: Scoped Registry Login and Logout
DESCRIPTION: Example showing how to log in and out of a private scoped registry, including scope and registry configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-logout.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry.mycorp.com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

----------------------------------------

TITLE: Timing a Function using Node.js PerformanceObserver (ECMAScript Modules) - JavaScript
DESCRIPTION: Demonstrates how to use Node.js perf_hooks to measure the execution time of a function using the PerformanceObserver API and timerify. Requires Node.js v8.5.0+ and the 'node:perf_hooks' module. The wrapped function is executed and observed; its execution duration is logged. The observer clears marks and measures, then disconnects when the observation is complete. No external parameters are required, and the output is the duration in milliseconds as printed to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { performance, PerformanceObserver } from 'node:perf_hooks';\n\nfunction someFunction() {\n  console.log('hello world');\n}\n\nconst wrapped = performance.timerify(someFunction);\n\nconst obs = new PerformanceObserver((list) => {\n  console.log(list.getEntries()[0].duration);\n\n  performance.clearMarks();\n  performance.clearMeasures();\n  obs.disconnect();\n});\nobs.observe({ entryTypes: ['function'] });\n\n// A performance timeline entry will be created\nwrapped();
```

----------------------------------------

TITLE: Dynamic Response Generation with Undici MockAgent in Node.js
DESCRIPTION: This snippet shows how to use a function instead of an object in the 'reply' method of Undici's MockAgent. This allows for dynamically generating responses based on the request parameters, providing more flexibility in mocking HTTP responses.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/mocking-request.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
mockPool.intercept({
  path: '/bank-transfer',
  method: 'POST',
  headers: {
    'X-TOKEN-SECRET': 'SuperSecretToken',
  },
  body: JSON.stringify({
    recipient: '1234567890',
    amount: '100'
  })
}).reply(200, (opts) => {
  // do something with opts

  return { message: 'transaction processed' }
})
```

----------------------------------------

TITLE: Importing test module (ESM) - Node.js
DESCRIPTION: Demonstrates how to import the `node:test` module using ECMAScript module syntax (`import`). This is the standard way to access the test runner functions in modern Node.js projects using ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import test from 'node:test';
```

----------------------------------------

TITLE: Installing cssesc via npm - Bash
DESCRIPTION: This Bash command installs the cssesc package from npm, making it available for use in Node.js projects. The package will be accessible as a dependency in your node_modules folder after running this command. No additional parameters are required.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cssesc/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install cssesc
```

----------------------------------------

TITLE: Using addAbortSignal with ReadStream in Node.js
DESCRIPTION: Demonstrates how to attach an AbortSignal to a readable stream created with fs.createReadStream. This allows for cancellation of stream operations using an AbortController.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_68

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');

const controller = new AbortController();
const read = addAbortSignal(
  controller.signal,
  fs.createReadStream(('object.json')),
);
// Later, abort the operation closing the stream
controller.abort();
```

----------------------------------------

TITLE: Using AbortController with pipeline in ES Modules
DESCRIPTION: Example showing how to use AbortController with pipeline in ES Modules to cancel a stream operation. The pipeline will be aborted immediately through the signal parameter and the error is caught.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';
import { createGzip } from 'node:zlib';

const ac = new AbortController();
const { signal } = ac;
setImmediate(() => ac.abort());
try {
  await pipeline(
    createReadStream('archive.tar'),
    createGzip(),
    createWriteStream('archive.tar.gz'),
    { signal },
  );
} catch (err) {
  console.error(err); // AbortError
}
```

----------------------------------------

TITLE: Extracting Directory Name using path.dirname
DESCRIPTION: Demonstrates using `path.dirname()` to get the directory portion of a path string ('/foo/bar/baz/asdf'). Trailing directory separators are ignored.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_14

LANGUAGE: js
CODE:
```
path.dirname('/foo/bar/baz/asdf/quux');
// Returns: '/foo/bar/baz/asdf'
```

----------------------------------------

TITLE: Modifying Process Environment Variables
DESCRIPTION: Examples of modifying environment variables in Node.js, including property assignment and deletion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_40

LANGUAGE: mjs
CODE:
```
import { env } from 'node:process';

env.foo = 'bar';
console.log(env.foo);
```

LANGUAGE: cjs
CODE:
```
const { env } = require('node:process');

env.foo = 'bar';
console.log(env.foo);
```

----------------------------------------

TITLE: Accessing npm Script Environment Variables
DESCRIPTION: Example of how to access npm script environment variables in a bash script. This demonstrates accessing the package name and version, as well as the current lifecycle event.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scripts.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
process.env.npm_package_scripts_install === "foo.js"
```

----------------------------------------

TITLE: Accessing Error Message Property - Node.js Errors - JavaScript
DESCRIPTION: Shows how to access the message property of an Error instance. This property is set via the Error constructor or can be changed post instantiation. Only depends on the standard Node.js runtime. It takes a string message as a parameter and outputs the message string via console.error. The message is also the first line in the error stack trace.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
const err = new Error('The message');
console.error(err.message);
// Prints: The message

```

----------------------------------------

TITLE: Listing NPM Config Values in Bash
DESCRIPTION: Command to show all npm configuration settings. Use -l for defaults and --json for JSON format output.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-config.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm config list
```

----------------------------------------

TITLE: Setting Test Plan with Wait Timeout - Node.js Test - js
DESCRIPTION: Shows how to use the `wait` option with `t.plan` to specify a maximum duration for the test runner to wait for expected assertions or subtests to complete before timing out. Useful for testing asynchronous operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_72

LANGUAGE: js
CODE:
```
test('plan with wait: 2000 waits for async assertions', (t) => {
  t.plan(1, { wait: 2000 }); // Waits for up to 2 seconds for the assertion to complete.

  const asyncActivity = () => {
    setTimeout(() => {
      t.assert.ok(true, 'Async assertion completed within the wait time');
    }, 1000); // Completes after 1 second, within the 2-second wait time.
  };

  asyncActivity(); // The test will pass because the assertion is completed in time.
});
```

----------------------------------------

TITLE: Implementing Subpath Patterns in package.json
DESCRIPTION: Demonstrates how to define subpath patterns in package.json using wildcards to handle a large number of exports or imports. The '*' symbol allows for dynamic matching of nested subpaths with string replacement syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_13

LANGUAGE: json
CODE:
```
// ./node_modules/es-module-package/package.json
{
  "exports": {
    "./features/*.js": "./src/features/*.js"
  },
  "imports": {
    "#internal/*.js": "./src/internal/*.js"
  }
}
```

----------------------------------------

TITLE: Abort Controller Integration with Events in MJS
DESCRIPTION: Shows how to use AbortController with event listeners to cancel event waiting. Demonstrates signal handling in ES modules format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_46

LANGUAGE: mjs
CODE:
```
import { on, EventEmitter } from 'node:events';
import process from 'node:process';

const ac = new AbortController();

(async () => {
  const ee = new EventEmitter();

  // Emit later on
  process.nextTick(() => {
    ee.emit('foo', 'bar');
    ee.emit('foo', 42);
  });

  for await (const event of on(ee, 'foo', { signal: ac.signal })) {
    // The execution of this inner block is synchronous and it
    // processes one event at a time (even with await). Do not use
    // if concurrent execution is required.
    console.log(event); // prints ['bar'] [42]
  }
  // Unreachable here
})();

process.nextTick(() => ac.abort());
```

----------------------------------------

TITLE: Promise-based File Deletion Example
DESCRIPTION: Shows how to use the promise-based unlink function to delete a file in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { unlink } from 'node:fs/promises';

try {
  await unlink('/tmp/hello');
  console.log('successfully deleted /tmp/hello');
} catch (error) {
  console.error('there was an error:', error.message);
}
```

LANGUAGE: JavaScript
CODE:
```
const { unlink } = require('node:fs/promises');

(async function(path) {
  try {
    await unlink(path);
    console.log(`successfully deleted ${path}`);
  } catch (error) {
    console.error('there was an error:', error.message);
  }
})('/tmp/hello');
```

----------------------------------------

TITLE: Creating JavaScript BigInts from Word Arrays in C
DESCRIPTION: Function to create JavaScript BigInt values from arrays of 64-bit words with specified sign bit.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_95

LANGUAGE: c
CODE:
```
napi_status napi_create_bigint_words(napi_env env,
                                     int sign_bit,
                                     size_t word_count,
                                     const uint64_t* words,
                                     napi_value* result);
```

----------------------------------------

TITLE: Converting Stream to Buffer in Node.js
DESCRIPTION: Shows how to convert a readable stream into a Buffer using the streamConsumers.buffer() utility. Includes both ESM and CommonJS patterns.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
import { buffer } from 'node:stream/consumers';
import { Readable } from 'node:stream';
import { Buffer } from 'node:buffer';

const dataBuffer = Buffer.from('hello world from consumers!');

const readable = Readable.from(dataBuffer);
const data = await buffer(readable);
console.log(`from readable: ${data.length}`);
// Prints: from readable: 27
```

LANGUAGE: javascript
CODE:
```
const { buffer } = require('node:stream/consumers');
const { Readable } = require('node:stream');
const { Buffer } = require('node:buffer');

const dataBuffer = Buffer.from('hello world from consumers!');

const readable = Readable.from(dataBuffer);
buffer(readable).then((data) => {
  console.log(`from readable: ${data.length}`);
  // Prints: from readable: 27
});
```

----------------------------------------

TITLE: Running ES Module Code from the Command Line using Node.js (Bash)
DESCRIPTION: Demonstrates how to execute ES module JavaScript code passed either via the --eval flag or piped through STDIN to the Node.js runtime with the --input-type=module flag. No additional dependencies are required other than Node.js itself. Command-line arguments such as --input-type and --eval enable explicit module parsing, and the snippet logs the path separator to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
node --input-type=module --eval "import { sep } from 'node:path'; console.log(sep);"
```

LANGUAGE: bash
CODE:
```
echo "import { sep } from 'node:path'; console.log(sep);" | node --input-type=module
```

----------------------------------------

TITLE: Wrapping and Unwrapping HMAC Keys using Web Crypto API in JavaScript
DESCRIPTION: These functions demonstrate how to generate, wrap, and unwrap HMAC keys using the Web Crypto API. They use AES-KW for key wrapping and support different key formats and hash algorithms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function generateAndWrapHmacKey(format = 'jwk', hash = 'SHA-512') {
  const [
    key,
    wrappingKey,
  ] = await Promise.all([
    subtle.generateKey({
      name: 'HMAC', hash,
    }, true, ['sign', 'verify']),
    subtle.generateKey({
      name: 'AES-KW',
      length: 256,
    }, true, ['wrapKey', 'unwrapKey']),
  ]);

  const wrappedKey = await subtle.wrapKey(format, key, wrappingKey, 'AES-KW');

  return { wrappedKey, wrappingKey };
}

async function unwrapHmacKey(
  wrappedKey,
  wrappingKey,
  format = 'jwk',
  hash = 'SHA-512') {

  const key = await subtle.unwrapKey(
    format,
    wrappedKey,
    wrappingKey,
    'AES-KW',
    { name: 'HMAC', hash },
    true,
    ['sign', 'verify']);

  return key;
}
```

----------------------------------------

TITLE: Installing Bitbucket Packages - npm CLI - Bash
DESCRIPTION: Describes how to install packages directly from a Bitbucket repository using the npm CLI, supporting specification of user/project and optionally a commit-ish or semver range. Installs all dependencies if a prepare script exists. Inputs are repository coordinates, and installed packages are placed in node_modules.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
npm install bitbucket:mybitbucketuser/myproject
```

----------------------------------------

TITLE: Removing Files/Directories with fsPromises.rm in Node.js
DESCRIPTION: Asynchronously removes files and directories, similar to the POSIX `rm` command. Returns a Promise fulfilling with `undefined`. Options include `force` (ignore non-existent paths), `recursive` (for directories), `maxRetries`, and `retryDelay` (for retrying on specific errors during recursive removal).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_34

LANGUAGE: javascript
CODE:
```
fsPromises.rm(path[, options])
```

----------------------------------------

TITLE: Accessing and Mutating the Search Component - WHATWG URL API - JavaScript
DESCRIPTION: Highlights manipulation of the search property of a URL object in Node.js to get or set the serialized query string, with percent-encoding of invalid URL characters. The snippet updates the href value in real-time according to changes in the search portion. There are no dependencies; the snippet operates on a URL string and a new search string, showing outputs for each operation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_26

LANGUAGE: JavaScript
CODE:
```
const myURL = new URL('https://example.org/abc?123');
console.log(myURL.search);
// Prints ?123

myURL.search = 'abc=xyz';
console.log(myURL.href);
// Prints https://example.org/abc?abc=xyz

```

----------------------------------------

TITLE: Defining Single Executable Shorthand in package.json (JSON)
DESCRIPTION: This `package.json` example demonstrates the shorthand syntax for the `bin` field. When the executable's command name should be the same as the package name (`my-program`), you can provide the path to the script directly as a string value for `bin`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
{
  "name": "my-program",
  "version": "1.2.5",
  "bin": "path/to/program"
}
```

----------------------------------------

TITLE: Configuring Workspace Paths
DESCRIPTION: Defines workspace locations using file patterns that the install client should use for symlinking to node_modules.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_41

LANGUAGE: json
CODE:
```
{
  "name": "workspace-example",
  "workspaces": [
    "./packages/*"
  ]
}
```

----------------------------------------

TITLE: Exporting a Module in Workspace
DESCRIPTION: Example of how to export a module from a workspace. This demonstrates how workspaces can be used to create and share modules within a project.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/workspaces.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
// ./packages/a/index.js
module.exports = 'a'
```

----------------------------------------

TITLE: Creating an HTTPS Server with Key and Certificate
DESCRIPTION: This example shows how to create an HTTPS server using a private key and certificate file in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
// ESM version
import { createServer } from 'node:https';
import { readFileSync } from 'node:fs';

const options = {
  key: readFileSync('private-key.pem'),
  cert: readFileSync('certificate.pem'),
};

createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000);
```

LANGUAGE: javascript
CODE:
```
// CommonJS version
const https = require('node:https');
const fs = require('node:fs');

const options = {
  key: fs.readFileSync('private-key.pem'),
  cert: fs.readFileSync('certificate.pem'),
};

https.createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000);
```

----------------------------------------

TITLE: Conditional Breakpoints in Node.js Debugger
DESCRIPTION: Demonstrates setting and using conditional breakpoints that only trigger when specified conditions are met
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/debugger.md#2025-04-23_snippet_3

LANGUAGE: console
CODE:
```
$ node inspect main.js
< Debugger listening on ws://127.0.0.1:9229/ce24daa8-3816-44d4-b8ab-8273c8a66d35
< For help, see: https://nodejs.org/en/docs/inspector
<
connecting to 127.0.0.1:9229 ... ok
< Debugger attached.
Break on start in main.js:7
  5 }
  6
> 7 addOne(10);
  8 addOne(-1);
  9
debug> setBreakpoint('main.js', 4, 'num < 0')
  1 'use strict';
  2
  3 function addOne(num) {
> 4   return num + 1;
  5 }
  6
  7 addOne(10);
  8 addOne(-1);
  9
debug> cont
break in main.js:4
  2
  3 function addOne(num) {
> 4   return num + 1;
  5 }
  6
debug> exec('num')
-1
debug>
```

----------------------------------------

TITLE: Implementing Inter-thread Communication with MessagePort in Node.js Worker Threads (CommonJS)
DESCRIPTION: This snippet is the CommonJS equivalent of the previous example, demonstrating how to create a custom messaging channel between the main thread and a worker thread. It shows how to transfer a MessagePort from the main thread to a worker and use it for bidirectional communication.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_16

LANGUAGE: JavaScript
CODE:
```
'use strict';

const assert = require('node:assert');
const {
  Worker, MessageChannel, MessagePort, isMainThread, parentPort,
} = require('node:worker_threads');
if (isMainThread) {
  const worker = new Worker(__filename);
  const subChannel = new MessageChannel();
  worker.postMessage({ hereIsYourPort: subChannel.port1 }, [subChannel.port1]);
  subChannel.port2.on('message', (value) => {
    console.log('received:', value);
  });
} else {
  parentPort.once('message', (value) => {
    assert(value.hereIsYourPort instanceof MessagePort);
    value.hereIsYourPort.postMessage('the worker is sending this');
    value.hereIsYourPort.close();
  });
}
```

----------------------------------------

TITLE: Using --heap-prof Flag (Console)
DESCRIPTION: This console example demonstrates how to run a Node.js script with the `--heap-prof` flag enabled. It also shows the typical output file name format generated by the V8 heap profiler in the current directory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_23

LANGUAGE: console
CODE:
```
$ node --heap-prof index.js
$ ls *.heapprofile
Heap.20190409.202950.15293.0.001.heapprofile
```

----------------------------------------

TITLE: Generating and Signing with HMAC Key using Web Crypto API in JavaScript
DESCRIPTION: This snippet demonstrates how to generate an HMAC key, create a message, and sign it using the Web Crypto API's SubtleCrypto interface. It uses the HMAC algorithm with SHA-256 hash function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

(async function() {

  const key = await subtle.generateKey({
    name: 'HMAC',
    hash: 'SHA-256',
    length: 256,
  }, true, ['sign', 'verify']);

  const enc = new TextEncoder();
  const message = enc.encode('I love cupcakes');

  const digest = await subtle.sign({
    name: 'HMAC',
  }, key, message);

})();
```

----------------------------------------

TITLE: Aborting Async Operations with Test Signal | Node.js Test Runner | JavaScript
DESCRIPTION: This code snippet illustrates how to use the `t.signal` property of the `TestContext` with an asynchronous operation like `fetch`. Providing `t.signal` allows the async operation to be aborted if the test that contains it is aborted. Requires the Node.js built-in test runner and an operation compatible with `AbortSignal`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_74

LANGUAGE: javascript
CODE:
```
test('top level test', async (t) => {
  await fetch('some/uri', { signal: t.signal });
});
```

----------------------------------------

TITLE: Exporting Cryptographic Keys with subtle.exportKey in Node.js
DESCRIPTION: The exportKey method exports a CryptoKey into the specified format (raw, pkcs8, spki, or jwk). The method returns a Promise that resolves with either an ArrayBuffer or a JSON Web Key object. The key must be marked as extractable for the operation to succeed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
subtle.exportKey(format, key)
```

----------------------------------------

TITLE: Extracting Filename without Extension using path.basename
DESCRIPTION: Shows how to use the optional `suffix` argument with `path.basename()` to remove a specific extension ('.html') from the returned filename, resulting in 'quux'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_7

LANGUAGE: js
CODE:
```
path.basename('/foo/bar/baz/asdf/quux.html', '.html');
// Returns: 'quux'
```

----------------------------------------

TITLE: Omitting Prerelease Number in JavaScript
DESCRIPTION: Shows how to use `semver.inc` in JavaScript to create a prerelease version without a trailing number. By passing `false` as the 'identifierBase' parameter, the result is '1.2.4-beta' instead of '1.2.4-beta.0'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
semver.inc('1.2.3', 'prerelease', 'beta', false)
// '1.2.4-beta'
```

----------------------------------------

TITLE: Avoiding String-Based Error Matching with assert.throws() in Node.js
DESCRIPTION: Illustrates potential pitfalls when using strings for error matching in assert.throws() and recommends using regular expressions instead.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_53

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

function throwingFirst() {
  throw new Error('First');
}

function throwingSecond() {
  throw new Error('Second');
}

function notThrowing() {}

// The second argument is a string and the input function threw an Error.
// The first case will not throw as it does not match for the error message
// thrown by the input function!
assert.throws(throwingFirst, 'Second');
// In the next example the message has no benefit over the message from the
// error and since it is not clear if the user intended to actually match
// against the error message, Node.js throws an `ERR_AMBIGUOUS_ARGUMENT` error.
assert.throws(throwingSecond, 'Second');
// TypeError [ERR_AMBIGUOUS_ARGUMENT]

// The string is only used (as message) in case the function does not throw:
assert.throws(notThrowing, 'Second');
// AssertionError [ERR_ASSERTION]: Missing expected exception: Second

// If it was intended to match for the error message do this instead:
// It does not throw because the error messages match.
assert.throws(throwingSecond, /Second$/);

// If the error message does not match, an AssertionError is thrown.
assert.throws(throwingFirst, /Second$/);
// AssertionError [ERR_ASSERTION]
```

----------------------------------------

TITLE: Using child_process.execFile with CommonJS
DESCRIPTION: Example of using the execFile function to spawn a Node.js process and get its version. The callback receives error, stdout, and stderr parameters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
const { execFile } = require('node:child_process');
const child = execFile('node', ['--version'], (error, stdout, stderr) => {
  if (error) {
    throw error;
  }
  console.log(stdout);
});
```

----------------------------------------

TITLE: Correct Ordering of Asynchronous File Operations using Callbacks in Node.js
DESCRIPTION: This snippet demonstrates how to correctly order file rename and stat operations using callbacks in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_111

LANGUAGE: javascript
CODE:
```
import { rename, stat } from 'node:fs';

rename('/tmp/hello', '/tmp/world', (err) => {
  if (err) throw err;
  stat('/tmp/world', (err, stats) => {
    if (err) throw err;
    console.log(`stats: ${JSON.stringify(stats)}`);
  });
});
```

----------------------------------------

TITLE: Spawning Detached Long-Running Process (CJS)
DESCRIPTION: This CommonJS snippet demonstrates how to spawn a Node.js child process (`child_program.js`) that can continue running even after the parent process exits. It uses `detached: true` to decouple the child and `stdio: 'ignore'` to prevent the child from inheriting the parent's stdio, which would otherwise keep it attached. `subprocess.unref()` is called to allow the parent process to exit independently of the child.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_25

LANGUAGE: cjs
CODE:
```
const { spawn } = require('node:child_process');
const process = require('node:process');

const subprocess = spawn(process.argv[0], ['child_program.js'], {
  detached: true,
  stdio: 'ignore',
});

subprocess.unref();
```

----------------------------------------

TITLE: Using pipeline with async generators in ES Modules
DESCRIPTION: Example showing how to use pipeline with async generators in ES Modules to transform file content. The pipeline processes text from a readable stream, processes it with an async generator, and writes the result to a writable stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';

await pipeline(
  createReadStream('lowercase.txt'),
  async function* (source, { signal }) {
    source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.
    for await (const chunk of source) {
      yield await processChunk(chunk, { signal });
    }
  },
  createWriteStream('uppercase.txt'),
);
console.log('Pipeline succeeded.');
```

----------------------------------------

TITLE: Recommended Pattern for Writing Files in Node.js
DESCRIPTION: Example of the recommended pattern for writing to a file by directly attempting to open it with the appropriate flags and handling any errors that occur.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_45

LANGUAGE: javascript
CODE:
```
import { open, close } from 'node:fs';

open('myfile', 'wx', (err, fd) => {
  if (err) {
    if (err.code === 'EEXIST') {
      console.error('myfile already exists');
      return;
    }

    throw err;
  }

  try {
    writeMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
```

----------------------------------------

TITLE: Publishing an npm Package
DESCRIPTION: Shows the command to publish an npm package to the registry. This should be run in the root directory of the package after ensuring all tests pass and the package is ready for distribution.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/developers.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm publish
```

----------------------------------------

TITLE: Using a Custom Dispatcher with fetch()
DESCRIPTION: Shows how to use a custom dispatcher with the fetch() function for making HTTP requests. This allows for custom handling of network operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
fetch(url, { dispatcher: new MyAgent() });
```

----------------------------------------

TITLE: Creating Node.js Buffers (ESM)
DESCRIPTION: Demonstrates various methods for creating Node.js Buffer instances using the ES Module syntax, including allocating fixed-length buffers (zero-filled, initialized, or uninitialized) and creating buffers from arrays of bytes or strings with specified encodings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

// Creates a zero-filled Buffer of length 10.
const buf1 = Buffer.alloc(10);

// Creates a Buffer of length 10,
// filled with bytes which all have the value `1`.
const buf2 = Buffer.alloc(10, 1);

// Creates an uninitialized buffer of length 10.
// This is faster than calling Buffer.alloc() but the returned
// Buffer instance might contain old data that needs to be
// overwritten using fill(), write(), or other functions that fill the Buffer's
// contents.
const buf3 = Buffer.allocUnsafe(10);

// Creates a Buffer containing the bytes [1, 2, 3].
const buf4 = Buffer.from([1, 2, 3]);

// Creates a Buffer containing the bytes [1, 1, 1, 1] – the entries
// are all truncated using `(value & 255)` to fit into the range 0–255.
const buf5 = Buffer.from([257, 257.5, -255, '1']);

// Creates a Buffer containing the UTF-8-encoded bytes for the string 'tést':
// [0x74, 0xc3, 0xa9, 0x73, 0x74] (in hexadecimal notation)
// [116, 195, 169, 115, 116] (in decimal notation)
const buf6 = Buffer.from('tést');

// Creates a Buffer containing the Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].
const buf7 = Buffer.from('tést', 'latin1');
```

----------------------------------------

TITLE: Basic npm audit command syntax
DESCRIPTION: The basic syntax for the npm audit command, which can be run with optional 'fix' or 'signatures' arguments to either remediate vulnerabilities or verify registry signatures.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm audit [fix|signatures]
```

----------------------------------------

TITLE: Querying Dependencies with CSS-like Selector Syntax in npm
DESCRIPTION: Examples of using the dependency selector syntax to query npm dependencies. This includes selecting direct descendants, production dependencies with major updates, and dependencies with vulnerabilities.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/dependency-selectors.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
:root > :outdated(major)
```

LANGUAGE: css
CODE:
```
.prod:outdated(in-range)
```

LANGUAGE: css
CODE:
```
:root > .prod:vuln
```

LANGUAGE: css
CODE:
```
:vuln([severity=high])
```

LANGUAGE: css
CODE:
```
:vuln([severity=high],[severity=moderate])
```

LANGUAGE: css
CODE:
```
:vuln([cwe=1333])
```

----------------------------------------

TITLE: Uninstalling a Package without Updating package.json in Bash
DESCRIPTION: This example shows how to uninstall the 'lodash' package without updating the package.json file. The --no-save flag prevents npm from modifying package.json, npm-shrinkwrap.json, and package-lock.json.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-uninstall.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm uninstall lodash --no-save
```

----------------------------------------

TITLE: Sending Basic Headers with response.writeHead in Node.js
DESCRIPTION: This snippet shows how to send a 200 OK response status code along with essential headers like `Content-Length` and `Content-Type` using `response.writeHead`. It requires a response object and uses `Buffer.byteLength` to calculate the content length correctly in bytes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_71

LANGUAGE: js
CODE:
```
const body = 'hello world';
response.writeHead(200, {
  'Content-Length': Buffer.byteLength(body),
  'Content-Type': 'text/plain; charset=utf-8',
});
```

----------------------------------------

TITLE: Checking Worker Status with worker.isDead() using ES Modules in Node.js
DESCRIPTION: Demonstrates checking if a worker process has terminated using `worker.isDead()` within the 'fork' and 'exit' event handlers in the primary process, using ES Module syntax (`import`). Workers run an HTTP server and are killed upon receiving a request.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_7

LANGUAGE: mjs
CODE:
```
import cluster from 'node:cluster';
import http from 'node:http';
import { availableParallelism } from 'node:os';
import process from 'node:process';

const numCPUs = availableParallelism();

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('fork', (worker) => {
    console.log('worker is dead:', worker.isDead());
  });

  cluster.on('exit', (worker, code, signal) => {
    console.log('worker is dead:', worker.isDead());
  });
} else {
  // Workers can share any TCP connection. In this case, it is an HTTP server.
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end(`Current process\n ${process.pid}`);
    process.kill(process.pid);
  }).listen(8000);
}
```

----------------------------------------

TITLE: Hash Digest using update() and digest() Methods - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This code demonstrates updating a hash with string data and obtaining the digest in hexadecimal format, using ESM (async 'import'). The crypto module's createHash function initializes SHA-256; hash.update() feeds data and hash.digest('hex') outputs the hash. Node.js and 'node:crypto' module required. Cannot reuse the hash object after digest().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_30

LANGUAGE: JavaScript
CODE:
```
const {
  createHash,
} = await import('node:crypto');

const hash = createHash('sha256');

hash.update('some data to hash');
console.log(hash.digest('hex'));
// Prints:
//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50
```

----------------------------------------

TITLE: Restricting Package Exports to Feature Entry Points (JSON)
DESCRIPTION: Illustrates a stricter package.json exports configuration that exposes only select entry points and explicitly excludes internal features using null. This pattern enables tighter encapsulation, prevents unintended access to internal modules, and can be introduced in major version upgrades. Requires awareness that unlisted subpaths and those mapped to null will throw errors upon import.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
  "name": "my-package",
  "exports": {
    ".": "./lib/index.js",
    "./feature/*.js": "./feature/*.js",
    "./feature/internal/*": null
  }
}
```

----------------------------------------

TITLE: Using console.error to Print Errors in Node.js (JavaScript)
DESCRIPTION: Demonstrates printing messages to `stderr` using `console.error`. Shows how multiple arguments are handled, with the first as a primary message potentially containing `printf`-style format specifiers (like `%d`) processed by `util.format()`, and subsequent arguments as substitution values. If no format specifiers are found, arguments are inspected using `util.inspect()` and concatenated. Output includes a newline.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_4

LANGUAGE: js
CODE:
```
const code = 5;
console.error('error #%d', code);
// Prints: error #5, to stderr
console.error('error', code);
// Prints: error 5, to stderr
```

----------------------------------------

TITLE: Using assert.rejects() with async function in Node.js (CommonJS)
DESCRIPTION: Shows how to use assert.rejects() in a CommonJS environment to test asynchronous functions that are expected to throw errors. This example checks for a specific TypeError with a predefined message.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_43

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert/strict');

(async () => {
  await assert.rejects(
    async () => {
      throw new TypeError('Wrong value');
    },
    {
      name: 'TypeError',
      message: 'Wrong value',
    },
  );
})();
```

----------------------------------------

TITLE: Using crypto.pbkdf2() for Password-Based Key Derivation
DESCRIPTION: Examples of using PBKDF2 (Password-Based Key Derivation Function 2) to derive keys from passwords in both CommonJS and ES Modules format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_82

LANGUAGE: javascript
CODE:
```
const {
  pbkdf2,
} = await import('node:crypto');

pbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'
});
```

LANGUAGE: javascript
CODE:
```
const {
  pbkdf2,
} = require('node:crypto');

pbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'
});
```

----------------------------------------

TITLE: Creating a ReadableStream from an Async Iterable (CJS)
DESCRIPTION: This snippet shows how to use `ReadableStream.from()` with an asynchronous generator in a CommonJS environment. It creates a `ReadableStream` from the generator and uses `for await...of` within an async Immediately Invoked Function Expression (IIFE) to consume and log the stream's chunks. It uses `require` for importing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_10

LANGUAGE: cjs
CODE:
```
```cjs
const { ReadableStream } = require('node:stream/web');

async function* asyncIterableGenerator() {
  yield 'a';
  yield 'b';
  yield 'c';
}

(async () => {
  const stream = ReadableStream.from(asyncIterableGenerator());

  for await (const chunk of stream)
    console.log(chunk); // Prints: 'a', 'b', 'c'
})();
```
```

----------------------------------------

TITLE: Basic SQLite Database Operations in CommonJS
DESCRIPTION: Demonstrates creating an in-memory database, executing SQL statements, preparing and running statements for data insertion and querying. This example shows the CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/sqlite.md#2025-04-23_snippet_2

LANGUAGE: cjs
CODE:
```
'use strict';
const { DatabaseSync } = require('node:sqlite');
const database = new DatabaseSync(':memory:');

// Execute SQL statements from strings.
database.exec(`
  CREATE TABLE data(
    key INTEGER PRIMARY KEY,
    value TEXT
  ) STRICT
`);
// Create a prepared statement to insert data into the database.
const insert = database.prepare('INSERT INTO data (key, value) VALUES (?, ?)');
// Execute the prepared statement with bound values.
insert.run(1, 'hello');
insert.run(2, 'world');
// Create a prepared statement to read data from the database.
const query = database.prepare('SELECT * FROM data ORDER BY key');
// Execute the prepared statement and log the result set.
console.log(query.all());
// Prints: [ { key: 1, value: 'hello' }, { key: 2, value: 'world' } ]
```

----------------------------------------

TITLE: Declaring and Awaiting Asynchronous Functions in Node.js (JavaScript)
DESCRIPTION: This snippet defines an asynchronous function testAsyncAwait that awaits another async function asyncFoo and then another function awaitBoo. It demonstrates the chaining of await statements and the structure of async function declarations in JavaScript. Required dependencies are native async/await support (ES2017+); key parameters are the internal async functions being called, and the expected output is the sequential awaited result of these functions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-expected.txt#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
async function testAsyncAwait() {\n  #await asyncFoo();\n  await awaitBoo();
```

----------------------------------------

TITLE: Registering Multiple Handler Types with EventTarget (JavaScript)
DESCRIPTION: This snippet shows various patterns for registering event listeners on a single EventTarget in Node.js, including synchronous functions, async functions, and objects with handleEvent methods (both sync and async). It demonstrates that listeners receive the event object, may mutate it, and are invoked in registration order. This example does not require external dependencies but assumes Node.js version 14.5.0 or higher. Inputs are dispatched events of type 'foo', and outputs are console logs detailing listener invocation and event object modifications.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_51

LANGUAGE: JavaScript
CODE:
```
function handler1(event) {\n  console.log(event.type);  // Prints 'foo'\n  event.a = 1;\n}\n\nasync function handler2(event) {\n  console.log(event.type);  // Prints 'foo'\n  console.log(event.a);  // Prints 1\n}\n\nconst handler3 = {\n  handleEvent(event) {\n    console.log(event.type);  // Prints 'foo'\n  },\n};\n\nconst handler4 = {\n  async handleEvent(event) {\n    console.log(event.type);  // Prints 'foo'\n  },\n};\n\nconst target = new EventTarget();\n\ntarget.addEventListener('foo', handler1);\ntarget.addEventListener('foo', handler2);\ntarget.addEventListener('foo', handler3);\ntarget.addEventListener('foo', handler4, { once: true });
```

----------------------------------------

TITLE: Using child_process.execFile with ES Modules
DESCRIPTION: ES Modules implementation of execFile to spawn a Node.js process and get its version, using the same callback pattern with error, stdout, and stderr parameters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
import { execFile } from 'node:child_process';
const child = execFile('node', ['--version'], (error, stdout, stderr) => {
  if (error) {
    throw error;
  }
  console.log(stdout);
});
```

----------------------------------------

TITLE: Pause and Resume in Node.js Readable Streams
DESCRIPTION: Example showing how to implement flow control using pause and resume methods.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_31

LANGUAGE: javascript
CODE:
```
const readable = getReadableStreamSomehow();
readable.on('data', (chunk) => {
  console.log(`Received ${chunk.length} bytes of data.`);
  readable.pause();
  console.log('There will be no additional data for 1 second.');
  setTimeout(() => {
    console.log('Now data will start flowing again.');
    readable.resume();
  }, 1000);
});
```

----------------------------------------

TITLE: Spawning Detached Process with File Redirection (CJS)
DESCRIPTION: This CommonJS snippet shows how to spawn a detached child process (`prg`) and redirect its standard output and standard error streams to a log file (`./out.log`). It uses `fs.openSync` to get file descriptors for appending and configures `stdio` as `['ignore', out, err]`, ignoring stdin and directing stdout and stderr to the opened file descriptors. `detached: true` and `subprocess.unref()` ensure the child runs independently.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_27

LANGUAGE: cjs
CODE:
```
const { openSync } = require('node:fs');
const { spawn } = require('node:child_process');
const out = openSync('./out.log', 'a');
const err = openSync('./out.log', 'a');

const subprocess = spawn('prg', [], {
  detached: true,
  stdio: [ 'ignore', out, err ],
});

subprocess.unref();
```

----------------------------------------

TITLE: Creating and Reading from a ReadableStream in JavaScript (ESM)
DESCRIPTION: This snippet demonstrates how to create a ReadableStream that pushes the current performance.now() timestamp every second, and then reads from it using an async iterator.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import {
  ReadableStream,
} from 'node:stream/web';

import {
  setInterval as every,
} from 'node:timers/promises';

import {
  performance,
} from 'node:perf_hooks';

const SECOND = 1000;

const stream = new ReadableStream({
  async start(controller) {
    for await (const _ of every(SECOND))
      controller.enqueue(performance.now());
  },
});

for await (const value of stream)
  console.log(value);
```

----------------------------------------

TITLE: Using process.nextTick() for Asynchronous Execution in Node.js
DESCRIPTION: Demonstrates process.nextTick() which schedules a callback to be executed after the current operation completes but before the event loop continues. This example shows the execution order of synchronous and nextTick code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_57

LANGUAGE: JavaScript (ESM)
CODE:
```
import { nextTick } from 'node:process';

console.log('start');
nextTick(() => {
  console.log('nextTick callback');
});
console.log('scheduled');
// Output:
// start
// scheduled
// nextTick callback
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { nextTick } = require('node:process');

console.log('start');
nextTick(() => {
  console.log('nextTick callback');
});
console.log('scheduled');
// Output:
// start
// scheduled
// nextTick callback
```

----------------------------------------

TITLE: Removing Directories with fsPromises.rmdir in Node.js
DESCRIPTION: Asynchronously removes the directory identified by `path`. Returns a Promise that fulfills with `undefined` on success. Options include `maxRetries` and `retryDelay` for handling errors like EBUSY during recursive removal (though the `recursive` option itself is deprecated). Using this on a file results in an error. For `rm -rf` behavior, use `fsPromises.rm()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_33

LANGUAGE: javascript
CODE:
```
fsPromises.rmdir(path[, options])
```

----------------------------------------

TITLE: Measuring HTTP Round-Trip Time in ESM Format
DESCRIPTION: This example demonstrates how to measure the time taken for an HTTP request-response cycle using the PerformanceObserver API in ESM format. It creates an HTTP server, makes a request to it, and logs the performance metrics for both outgoing and incoming messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
import { PerformanceObserver } from 'node:perf_hooks';
import { createServer, get } from 'node:http';

const obs = new PerformanceObserver((items) => {
  items.getEntries().forEach((item) => {
    console.log(item);
  });
});

obs.observe({ entryTypes: ['http'] });

const PORT = 8080;

createServer((req, res) => {
  res.end('ok');
}).listen(PORT, () => {
  get(`http://127.0.0.1:${PORT}`);
});
```

----------------------------------------

TITLE: Validating IP Addresses using net.isIP in Node.js
DESCRIPTION: This snippet demonstrates the `net.isIP()` function from the Node.js `net` module. It shows how to check if a given string is a valid IPv4 or IPv6 address. The function returns `6` for IPv6, `4` for valid IPv4 (dot-decimal, no leading zeros), and `0` otherwise. Examples include IPv6, valid IPv4, IPv4 with leading zeros (invalid), CIDR notation (invalid), and a non-IP string (invalid).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_33

LANGUAGE: js
CODE:
```
```js
net.isIP('::1'); // returns 6
net.isIP('127.0.0.1'); // returns 4
net.isIP('127.000.000.001'); // returns 0
net.isIP('127.0.0.1/24'); // returns 0
net.isIP('fhqwhgads'); // returns 0
```
```

----------------------------------------

TITLE: Understanding Git URL Dependency Format (Bash/URL)
DESCRIPTION: This snippet outlines the generic format for specifying Git repositories as dependencies in `package.json`. It details the components: protocol (`git`, `git+ssh`, `git+http`, `git+https`, or `git+file`), optional user/password, hostname, optional port, path, and an optional commit-ish (like a branch, tag, or commit hash) or semver range (`#semver:<range>`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_16

LANGUAGE: bash
CODE:
```
<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
```

----------------------------------------

TITLE: Using util.promisify() with async/await in Node.js (CommonJS)
DESCRIPTION: Shows how to use util.promisify() with async/await syntax for more readable asynchronous code in CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_45

LANGUAGE: JavaScript
CODE:
```
const { promisify } = require('node:util');
const { stat } = require('node:fs');

const promisifiedStat = promisify(stat);

async function callStat() {
  const stats = await promisifiedStat('.');
  console.log(`This directory is owned by ${stats.uid}`);
}

callStat();
```

----------------------------------------

TITLE: Running mkdirp CLI using npx
DESCRIPTION: Shows how to execute the `mkdirp` command-line tool using `npx` without needing to install it globally. This is useful for running the command on a one-off basis.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cacache/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
npx mkdirp ...
```

----------------------------------------

TITLE: Encrypting a File Using Cipheriv and Piped Streams in Node.js (ES Modules)
DESCRIPTION: This example demonstrates how to encrypt a file using Cipheriv and piped streams in Node.js. It reads from an input file, encrypts the data, and writes the encrypted content to an output file using the pipeline function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
import {
  createReadStream,
  createWriteStream,
} from 'node:fs';

import {
  pipeline,
} from 'node:stream';

const {
  scrypt,
  randomFill,
  createCipheriv,
} = await import('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';

// First, we'll generate the key. The key length is dependent on the algorithm.
// In this case for aes192, it is 24 bytes (192 bits).
scrypt(password, 'salt', 24, (err, key) => {
  if (err) throw err;
  // Then, we'll generate a random initialization vector
  randomFill(new Uint8Array(16), (err, iv) => {
    if (err) throw err;

    const cipher = createCipheriv(algorithm, key, iv);

    const input = createReadStream('test.js');
    const output = createWriteStream('test.enc');

    pipeline(input, cipher, output, (err) => {
      if (err) throw err;
    });
  });
});
```

----------------------------------------

TITLE: Decoding Buffers in a Writable Stream - Node.js
DESCRIPTION: This snippet demonstrates how to decode multi-byte strings using StringDecoder in a custom Writable stream. It handles buffer input and concatenates decoded strings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_80

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');
const { StringDecoder } = require('node:string_decoder');

class StringWritable extends Writable {
  constructor(options) {
    super(options);
    this._decoder = new StringDecoder(options?.defaultEncoding);
    this.data = '';
  }
  _write(chunk, encoding, callback) {
    if (encoding === 'buffer') {
      chunk = this._decoder.write(chunk);
    }
    this.data += chunk;
    callback();
  }
  _final(callback) {
    this.data += this._decoder.end();
    callback();
  }
}

const euro = [[0xE2, 0x82], [0xAC]].map(Buffer.from);
const w = new StringWritable();

w.write('currency: ');
w.write(euro[0]);
w.end(euro[1]);

console.log(w.data); // currency: €
```

----------------------------------------

TITLE: Reading File Lines Using readLines() with Node.js fs/promises - JavaScript ES Module
DESCRIPTION: Demonstrates using filehandle.readLines() to asynchronously iterate over lines of a file inside an async function with the ES module import syntax. Requires Node.js v18.11.0 or later, and uses 'node:fs/promises'. Each line is printed out in turn. The readLines() method handles line breaks and streaming, allowing for memory-efficient reading of large files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
import { open } from 'node:fs/promises';

const file = await open('./some/file/to/read');

for await (const line of file.readLines()) {
  console.log(line);
}

```

----------------------------------------

TITLE: Generating SHA256 Hash Using Node.js Crypto (ESM)
DESCRIPTION: Example demonstrating how to generate a SHA256 hash of a file using the crypto.createHash method in ECMAScript modules format. Creates a readable stream from a file and generates its hash digest in hex format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_60

LANGUAGE: javascript
CODE:
```
import {
  createReadStream,
} from 'node:fs';
import { argv } from 'node:process';
const {
  createHash,
} = await import('node:crypto');

const filename = argv[2];

const hash = createHash('sha256');

const input = createReadStream(filename);
input.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = input.read();
  if (data)
    hash.update(data);
  else {
    console.log(`${hash.digest('hex')} ${filename}`);
  }
});
```

----------------------------------------

TITLE: Defining Workspaces in package.json
DESCRIPTION: Example of how to define workspaces in the package.json file of a project. This configuration allows npm to recognize and manage multiple packages within the project structure.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/workspaces.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "my-workspaces-powered-project",
  "workspaces": [
    "packages/a"
  ]
}
```

----------------------------------------

TITLE: Using util.aborted with ES Modules in Node.js
DESCRIPTION: Demonstrates the usage of util.aborted function to handle abort events on a custom abortable resource using ES module syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_58

LANGUAGE: javascript
CODE:
```
import { aborted } from 'node:util';

// Obtain an object with an abortable signal, like a custom resource or operation.
const dependent = obtainSomethingAbortable();

// Pass `dependent` as the resource, indicating the promise should only resolve
// if `dependent` is still in memory when the signal is aborted.
aborted(dependent.signal, dependent).then(() => {

  // This code runs when `dependent` is aborted.
  console.log('Dependent resource was aborted.');
});

// Simulate an event that triggers the abort.
dependent.on('event', () => {
  dependent.abort(); // This will cause the `aborted` promise to resolve.
});
```

----------------------------------------

TITLE: Correct Socket Server Implementation with Resume in Node.js
DESCRIPTION: Proper implementation of a socket server that handles data flow correctly by calling socket.resume() to start the flow of data, even when not processing it.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_103

LANGUAGE: javascript
CODE:
```
// Workaround.
net.createServer((socket) => {
  socket.on('end', () => {
    socket.end('The message was received but was not processed.\n');
  });

  // Start the flow of data, discarding it.
  socket.resume();
}).listen(1337);
```

----------------------------------------

TITLE: Using ReadableStream.pipeThrough() with TransformStream in JavaScript (ESM)
DESCRIPTION: This snippet demonstrates how to use the pipeThrough() method to connect a ReadableStream to a TransformStream, which converts the data to uppercase before it's read.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import {
  ReadableStream,
  TransformStream,
} from 'node:stream/web';

const stream = new ReadableStream({
  start(controller) {
    controller.enqueue('a');
  },
});

const transform = new TransformStream({
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
});

const transformedStream = stream.pipeThrough(transform);

for await (const chunk of transformedStream)
  console.log(chunk);
  // Prints: A
```

----------------------------------------

TITLE: Reporting CallTracker State - Node.js assert - CommonJS (cjs)
DESCRIPTION: Shows the same use of assert.CallTracker as above, but with CommonJS syntax. It creates a tracker, wraps a function to enforce call count, and obtains a report describing discrepancies between expected and actual invocations. Requires the built-in 'node:assert' module. Used for checking test conditions and function invocation counts.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_6

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}

// Returns a function that wraps func() that must be called exact times
// before tracker.verify().
const callsfunc = tracker.calls(func, 2);

// Returns an array containing information on callsfunc()
console.log(tracker.report());
// [
//  {
//    message: 'Expected the func function to be executed 2 time(s) but was
//    executed 0 time(s).',
//    actual: 0,
//    expected: 2,
//    operator: 'func',
//    stack: stack trace
//  }
// ]
```

----------------------------------------

TITLE: Enabling Mock Timers - Date with Initial Epoch (MJS/CJS)
DESCRIPTION: Illustrates how to enable mocking for the `Date` object and set its initial time using the `now` option with a numeric epoch timestamp. This affects the behavior of mocked timers as they use the same internal clock. Presented in both MJS and CJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_47

LANGUAGE: mjs
CODE:
```
import { mock } from 'node:test';
mock.timers.enable({ apis: ['Date'], now: 1000 });
```

LANGUAGE: cjs
CODE:
```
const { mock } = require('node:test');
mock.timers.enable({ apis: ['Date'], now: 1000 });
```

----------------------------------------

TITLE: Running Local Package Commands with npm exec in Bash
DESCRIPTION: Demonstrates how to use npm exec to run the tap package from local dependencies with arguments. Shows both npm exec and npx syntaxes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npm exec -- tap --bail test/foo.js
$ npx tap --bail test/foo.js
```

----------------------------------------

TITLE: Using util.types.isPromise to check for Promise objects
DESCRIPTION: Shows how to use util.types.isPromise() to check if a value is a built-in Promise instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_89

LANGUAGE: javascript
CODE:
```
util.types.isPromise(Promise.resolve(42));  // Returns true
```

----------------------------------------

TITLE: Executing npm prune Command in Bash
DESCRIPTION: This snippet shows the basic syntax for running the npm prune command. It can be used to remove extraneous packages from the node_modules folder, optionally specifying package names or scopes to limit which packages are pruned.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-prune.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm prune [[<@scope>/]<pkg>...]
```

----------------------------------------

TITLE: Checking File Existence Synchronously in Node.js
DESCRIPTION: Demonstrates how to use fs.existsSync() to check if a file or directory exists. This method is not deprecated, unlike its asynchronous counterpart.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_86

LANGUAGE: mjs
CODE:
```
import { existsSync } from 'node:fs';

if (existsSync('/etc/passwd'))
  console.log('The path exists.');
```

----------------------------------------

TITLE: Importing describe/it (ESM) - Node.js
DESCRIPTION: Shows how to import the `describe` and `it` aliases from the `node:test` module using ECMAScript module syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import { describe, it } from 'node:test';
```

----------------------------------------

TITLE: Appending Data to a File in Node.js
DESCRIPTION: Examples showing how to append data to a file using fs.appendFile with different parameter options including filename and file descriptor approaches.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_48

LANGUAGE: javascript
CODE:
```
import { appendFile } from 'node:fs';

appendFile('message.txt', 'data to append', (err) => {
  if (err) throw err;
  console.log('The "data to append" was appended to file!');
});
```

----------------------------------------

TITLE: Attempting to Consume an Asynchronously Exported Module in Node.js
DESCRIPTION: Shows why asynchronous exports don't work - the importing code runs immediately and tries to access properties before they're defined.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
const x = require('./x');
console.log(x.a);
```

----------------------------------------

TITLE: Implementing Basic Commands in Commander.js
DESCRIPTION: Demonstrates three ways to implement commands: using an action handler, using a standalone executable file, and adding a pre-configured command. Shows basic command configuration with source and destination parameters.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
program
  .command('clone <source> [destination]')
  .description('clone a repository into a newly created directory')
  .action((source, destination) => {
    console.log('clone command called');
  });

program
  .command('start <service>', 'start named service')
  .command('stop [service]', 'stop named service, or all if no name supplied');

program
  .addCommand(build.makeBuildCommand());
```

----------------------------------------

TITLE: Appending Headers in HTTP/2 Response - Node.js
DESCRIPTION: Demonstrates creating an HTTP/2 server that uses `response.setHeader` to set an initial 'set-cookie' header and then `response.appendHeader` to add a second 'set-cookie' value. This shows how to handle headers that can have multiple instances.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_60

LANGUAGE: js
CODE:
```
const server = http2.createServer((req, res) => {
  res.setHeader('set-cookie', 'a');
  res.appendHeader('set-cookie', 'b');
  res.writeHead(200);
  res.end('ok');
});
```

----------------------------------------

TITLE: Requesting an HTTPS Resource Using Node.js HTTPS.request CommonJS API - JavaScript
DESCRIPTION: Shows how to issue an HTTPS GET request using CommonJS-style imports in Node.js. Requires the 'node:https' module, constructs an options object for the request, and processes the response via callbacks. Handles errors through an error event handler. Expects synchronous CommonJS require syntactic support.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_9

LANGUAGE: JavaScript
CODE:
```
const https = require('node:https');

const options = {
  hostname: 'encrypted.google.com',
  port: 443,
  path: '/',
  method: 'GET',
};

const req = https.request(options, (res) => {
  console.log('statusCode:', res.statusCode);
  console.log('headers:', res.headers);

  res.on('data', (d) => {
    process.stdout.write(d);
  });
});

req.on('error', (e) => {
  console.error(e);
});
req.end();
```

----------------------------------------

TITLE: Setting Multiple Values for the Same HTTP Header
DESCRIPTION: Demonstrates how to set multiple values for a single header name by passing an array of strings to setHeader. This is useful for headers like Set-Cookie or Cookie.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
request.setHeader('Cookie', ['type=ninja', 'language=javascript']);
```

----------------------------------------

TITLE: Defining a stop script in package.json
DESCRIPTION: This JSON snippet demonstrates how to define a 'stop' script in a package's 'scripts' object within the package.json file.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-stop.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "stop": "node bar.js"
  }
}
```

----------------------------------------

TITLE: Creating a Subtest with Options | Node.js Test Runner | JavaScript
DESCRIPTION: This snippet illustrates how to define a subtest within an existing test using `t.test()`, providing a name, a configuration options object, and the subtest function itself. It shows common options like `only`, `skip`, `concurrency`, `todo`, and `plan`. The subtest function receives its own `TestContext` instance (`t` here).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_77

LANGUAGE: javascript
CODE:
```
test('top level test', async (t) => {
  t.test(
    'This is a subtest',
    { only: false, skip: false, concurrency: 1, todo: false, plan: 1 },
    (t) => {
      t.assert.ok('some relevant assertion here');
    },
  );
});
```

----------------------------------------

TITLE: Overriding NODE_OPTIONS with Command-Line Flags (Bash)
DESCRIPTION: Illustrates that command-line flags take precedence over the same flags specified in the `NODE_OPTIONS` environment variable. In this example, the inspector port specified on the command line (5555) overrides the one in `NODE_OPTIONS` (4444).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_33

LANGUAGE: bash
CODE:
```
NODE_OPTIONS='--inspect=localhost:4444' node --inspect=localhost:5555
```

----------------------------------------

TITLE: Measuring High-Resolution Time in Node.js
DESCRIPTION: Examples of using process.hrtime() and process.hrtime.bigint() for high-resolution time measurements, useful for benchmarking and performance analysis.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_51

LANGUAGE: JavaScript
CODE:
```
import { hrtime } from 'node:process';

const NS_PER_SEC = 1e9;
const time = hrtime();
// [ 1800216, 25 ]

setTimeout(() => {
  const diff = hrtime(time);
  // [ 1, 552 ]

  console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);
  // Benchmark took 1000000552 nanoseconds
}, 1000);
```

LANGUAGE: JavaScript
CODE:
```
const { hrtime } = require('node:process');

const NS_PER_SEC = 1e9;
const time = hrtime();
// [ 1800216, 25 ]

setTimeout(() => {
  const diff = hrtime(time);
  // [ 1, 552 ]

  console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);
  // Benchmark took 1000000552 nanoseconds
}, 1000);
```

LANGUAGE: JavaScript
CODE:
```
import { hrtime } from 'node:process';

const start = hrtime.bigint();
// 191051479007711n

setTimeout(() => {
  const end = hrtime.bigint();
  // 191052633396993n

  console.log(`Benchmark took ${end - start} nanoseconds`);
  // Benchmark took 1154389282 nanoseconds
}, 1000);
```

LANGUAGE: JavaScript
CODE:
```
const { hrtime } = require('node:process');

const start = hrtime.bigint();
// 191051479007711n

setTimeout(() => {
  const end = hrtime.bigint();
  // 191052633396993n

  console.log(`Benchmark took ${end - start} nanoseconds`);
  // Benchmark took 1154389282 nanoseconds
}, 1000);
```

----------------------------------------

TITLE: Piping Async Iterators to Writable Streams in Node.js
DESCRIPTION: Demonstrates two patterns for piping data from async iterators to writable streams using stream.pipeline(). Shows both callback and promise-based approaches with proper error and backpressure handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_101

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');
const { pipeline } = require('node:stream');
const { pipeline: pipelinePromise } = require('node:stream/promises');

const writable = fs.createWriteStream('./file');

const ac = new AbortController();
const signal = ac.signal;

const iterator = createIterator({ signal });

// Callback Pattern
pipeline(iterator, writable, (err, value) => {
  if (err) {
    console.error(err);
  } else {
    console.log(value, 'value returned');
  }
}).on('close', () => {
  ac.abort();
});

// Promise Pattern
pipelinePromise(iterator, writable)
  .then((value) => {
    console.log(value, 'value returned');
  })
  .catch((err) => {
    console.error(err);
    ac.abort();
  });
```

----------------------------------------

TITLE: Generating HMAC Using Node.js Crypto (CommonJS)
DESCRIPTION: Example showing how to generate an HMAC (Hash-based Message Authentication Code) of a file using crypto.createHmac in CommonJS format. Uses SHA256 algorithm with a secret key.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_63

LANGUAGE: javascript
CODE:
```
const {
  createReadStream,
} = require('node:fs');
const {
  createHmac,
} = require('node:crypto');
const { argv } = require('node:process');

const filename = argv[2];

const hmac = createHmac('sha256', 'a secret');

const input = createReadStream(filename);
input.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = input.read();
  if (data)
    hmac.update(data);
  else {
    console.log(`${hmac.digest('hex')} ${filename}`);
  }
});
```

----------------------------------------

TITLE: Accessing and Mutating the Pathname Component - WHATWG URL API - JavaScript
DESCRIPTION: Shows how to get and set the pathname property of a Node.js URL object. Updating the pathname alters the href and any invalid URL characters are percent-encoded. The change is immediately visible on the object's string representation. There are no external dependencies; inputs include a URL string and a new pathname, with outputs showing the pathname and resulting href.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_22

LANGUAGE: JavaScript
CODE:
```
const myURL = new URL('https://example.org/abc/xyz?123');
console.log(myURL.pathname);
// Prints /abc/xyz

myURL.pathname = '/abcdef';
console.log(myURL.href);
// Prints https://example.org/abcdef?123

```

----------------------------------------

TITLE: Querying Total System Memory with Node.js JavaScript
DESCRIPTION: Returns the total system memory in bytes as an integer using os.totalmem(). This method provides the physical memory available on the machine. No arguments or special dependencies are needed beyond Node.js os module. The result is an integer denoting total memory (in bytes).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
os.totalmem()
```

----------------------------------------

TITLE: Ending a Writable File Stream with a Final Chunk in Node.js (js)
DESCRIPTION: Illustrates writing data to a file stream (`fs.createWriteStream`) using `write()` and then writing a final chunk ('world!') while simultaneously signaling the end of the stream using `writable.end()`. Further calls to `write()` after `end()` will result in an error. Requires the `node:fs` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_22

LANGUAGE: js
CODE:
```
// Write 'hello, ' and then end with 'world!'.
const fs = require('node:fs');
const file = fs.createWriteStream('example.txt');
file.write('hello, ');
file.end('world!');
// Writing more now is not allowed!
```

----------------------------------------

TITLE: Promisified execFile with CommonJS
DESCRIPTION: Demonstrates how to use util.promisify to convert execFile into a Promise-based function. The Promise resolves with an object containing stdout and stderr properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_14

LANGUAGE: JavaScript
CODE:
```
const util = require('node:util');
const execFile = util.promisify(require('node:child_process').execFile);
async function getVersion() {
  const { stdout } = await execFile('node', ['--version']);
  console.log(stdout);
}
getVersion();
```

----------------------------------------

TITLE: Exporting a Class via `module.exports` in Node.js CommonJS
DESCRIPTION: This snippet (`square.js`) defines a CommonJS module that exports a single `Square` class as its primary export. This is achieved by directly assigning the class definition to `module.exports`, which replaces the default exports object. This pattern is necessary when the module's main purpose is to provide a single class, constructor function, or other value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_3

LANGUAGE: js
CODE:
```
// Assigning to exports will not modify module, must use module.exports
module.exports = class Square {
  constructor(width) {
    this.width = width;
  }

  area() {
    return this.width ** 2;
  }
};
```

----------------------------------------

TITLE: Implementing Nested Conditions in package.json
DESCRIPTION: Shows how to define nested conditional exports in package.json, allowing for more complex resolution scenarios like dual module formats that are specific to certain environments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_19

LANGUAGE: json
CODE:
```
{
  "exports": {
    "node": {
      "import": "./feature-node.mjs",
      "require": "./feature-node.cjs"
    },
    "default": "./feature.mjs"
  }
}
```

----------------------------------------

TITLE: Importing Async Hooks Modules
DESCRIPTION: These snippets demonstrate how to import the `AsyncLocalStorage` and `AsyncResource` classes from the `node:async_hooks` module using both ES module (import) and CommonJS (require) syntax in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_0

LANGUAGE: mjs
CODE:
```
import { AsyncLocalStorage, AsyncResource } from 'node:async_hooks';
```

LANGUAGE: cjs
CODE:
```
const { AsyncLocalStorage, AsyncResource } = require('node:async_hooks');
```

----------------------------------------

TITLE: Handling Unhandled Promise Rejections in Node.js (ESM)
DESCRIPTION: Example of attaching an 'unhandledRejection' event handler in Node.js using ESM imports. The handler logs details about promises that were rejected without any error handling attached. The example demonstrates a case with a typo that would cause an unhandled rejection.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
import process from 'node:process';

process.on('unhandledRejection', (reason, promise) => {
  console.log('Unhandled Rejection at:', promise, 'reason:', reason);
  // Application specific logging, throwing an error, or other logic here
});

somePromise.then((res) => {
  return reportToUser(JSON.pasre(res)); // Note the typo (`pasre`)
}); // No `.catch()` or `.then()`
```

----------------------------------------

TITLE: Stream Write with Backpressure Handling
DESCRIPTION: Example demonstrating how to write data to a stream while respecting backpressure using the 'drain' event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
function writeOneMillionTimes(writer, data, encoding, callback) {
  let i = 1000000;
  write();
  function write() {
    let ok = true;
    do {
      i--;
      if (i === 0) {
        // Last time!
        writer.write(data, encoding, callback);
      } else {
        // See if we should continue, or wait.
        // Don't pass the callback, because we're not done yet.
        ok = writer.write(data, encoding);
      }
    } while (i > 0 && ok);
    if (i > 0) {
      // Had to stop early!
      // Write some more once it drains.
      writer.once('drain', write);
    }
  }
}
```

----------------------------------------

TITLE: Filling Buffer with Value in Node.js (cjs)
DESCRIPTION: Demonstrates using the `fill()` method to fill a Buffer with a specific ASCII character or an empty string (resulting in null bytes) in Node.js CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_47

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

// Fill a `Buffer` with the ASCII character 'h'.

const b = Buffer.allocUnsafe(50).fill('h');

console.log(b.toString());
// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh

// Fill a buffer with empty string
const c = Buffer.allocUnsafe(5).fill('');

console.log(c.fill(''));
// Prints: <Buffer 00 00 00 00 00>
```

----------------------------------------

TITLE: Using HEAD Method for Fetching Headers Only
DESCRIPTION: This snippet shows how to use the HEAD request method to fetch only the headers, eliminating the need for body consumption or cancellation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const headers = await fetch(url, { method: 'HEAD' })
  .then(res => res.headers)
```

----------------------------------------

TITLE: Writing Files Safely in Node.js (Not Recommended vs. Recommended)
DESCRIPTION: Compares the not recommended approach using fs.exists() before writing a file with the recommended approach of directly using fs.open() with the 'wx' flag. The recommended method handles potential race conditions more effectively.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_56

LANGUAGE: JavaScript
CODE:
```
import { exists, open, close } from 'node:fs';

exists('myfile', (e) => {
  if (e) {
    console.error('myfile already exists');
  } else {
    open('myfile', 'wx', (err, fd) => {
      if (err) throw err;

      try {
        writeMyData(fd);
      } finally {
        close(fd, (err) => {
          if (err) throw err;
        });
      }
    });
  }
});
```

LANGUAGE: JavaScript
CODE:
```
import { open, close } from 'node:fs';
open('myfile', 'wx', (err, fd) => {
  if (err) {
    if (err.code === 'EEXIST') {
      console.error('myfile already exists');
      return;
    }

    throw err;
  }

  try {
    writeMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
```

----------------------------------------

TITLE: Creating and Using a TransformStream in JavaScript
DESCRIPTION: Example demonstrating how to create a TransformStream that converts incoming text chunks to uppercase, then writing to and reading from the stream simultaneously.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_16

LANGUAGE: mjs
CODE:
```
import {
  TransformStream,
} from 'node:stream/web';

const transform = new TransformStream({
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
});

await Promise.all([
  transform.writable.getWriter().write('A'),
  transform.readable.getReader().read(),
]);
```

----------------------------------------

TITLE: Truncating a File Descriptor using fs.ftruncate in Node.js (MJS)
DESCRIPTION: Demonstrates how to truncate a file associated with a given file descriptor (`fd`) to a specified length (`len`, defaulting to 4 bytes in this example) using the asynchronous `fs.ftruncate` function in Node.js with ES Module syntax. Requires the `open`, `close`, and `ftruncate` functions from the `node:fs` module. The example opens 'temp.txt', attempts to truncate it to 4 bytes, and ensures the file descriptor is closed in a `try...catch` block, handling potential errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_58

LANGUAGE: mjs
CODE:
```
import { open, close, ftruncate } from 'node:fs';

function closeFd(fd) {
  close(fd, (err) => {
    if (err) throw err;
  });
}

open('temp.txt', 'r+', (err, fd) => {
  if (err) throw err;

  try {
    ftruncate(fd, 4, (err) => {
      closeFd(fd);
      if (err) throw err;
    });
  } catch (err) {
    closeFd(fd);
    if (err) throw err;
  }
});
```

----------------------------------------

TITLE: Viewing Package Version History
DESCRIPTION: Shows how to view the version history of a package using npm view command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-view.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
npm view connect versions
```

----------------------------------------

TITLE: Using ReadableStream.values() in JavaScript (ESM)
DESCRIPTION: This snippet shows how to use the values() method of a ReadableStream to create an async iterator for consuming the stream's data, with options to prevent cancellation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const stream = new ReadableStream(getSomeSource());

for await (const chunk of stream.values({ preventCancel: true }))
  console.log(Buffer.from(chunk).toString());
```

----------------------------------------

TITLE: Installing Commander Package with npm
DESCRIPTION: Command for installing the Commander.js package using npm. This needs to be run before using Commander in your Node.js projects.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_0

LANGUAGE: sh
CODE:
```
npm install commander
```

----------------------------------------

TITLE: Generating HMAC Key using Web Crypto API in JavaScript
DESCRIPTION: This function generates an HMAC key using the Web Crypto API. It creates a symmetric key that can be used for signing and verifying operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function generateHmacKey(hash = 'SHA-256') {
  const key = await subtle.generateKey({
    name: 'HMAC',
    hash,
  }, true, ['sign', 'verify']);

  return key;
}
```

----------------------------------------

TITLE: Binding EventEmitter Listeners with AsyncResource (ESM)
DESCRIPTION: Demonstrates using `AsyncResource.bind()` with an EventEmitter (an `http.IncomingMessage` 'close' event) in an ES Module context. The listener wrapped by `AsyncResource.bind()` will execute with the async context active when `req.on()` was called, unlike the standard listener which runs with the context active when the event was emitted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_16

LANGUAGE: mjs
CODE:
```
import { createServer } from 'node:http';
import { AsyncResource, executionAsyncId } from 'node:async_hooks';

const server = createServer((req, res) => {
  req.on('close', AsyncResource.bind(() => {
    // Execution context is bound to the current outer scope.
  }));
  req.on('close', () => {
    // Execution context is bound to the scope that caused 'close' to emit.
  });
  res.end();
}).listen(3000);
```

----------------------------------------

TITLE: Custom Option Negation with parseArgs Tokens - JavaScript (ESM)
DESCRIPTION: Illustrates how to use parseArgs with the tokens option to implement custom behaviors such as handling negated options (e.g., --no-color) in ES Module style. Requires the 'node:util' module provided by Node.js v18.7.0+ with parseArgs supporting tokens. The snippet defines options (with both normal and --no-* negated forms), parses command-line options, then reprocesses the returned tokens to enforce that --no-foo sets foo to false. Final values are logged, demonstrating last-wins behavior for repeated/negated options.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_38

LANGUAGE: JavaScript
CODE:
```
import { parseArgs } from 'node:util';

const options = {
  'color': { type: 'boolean' },
  'no-color': { type: 'boolean' },
  'logfile': { type: 'string' },
  'no-logfile': { type: 'boolean' },
};
const { values, tokens } = parseArgs({ options, tokens: true });

// Reprocess the option tokens and overwrite the returned values.
tokens
  .filter((token) => token.kind === 'option')
  .forEach((token) => {
    if (token.name.startsWith('no-')) {
      // Store foo:false for --no-foo
      const positiveName = token.name.slice(3);
      values[positiveName] = false;
      delete values[token.name];
    } else {
      // Resave value so last one wins if both --foo and --no-foo.
      values[token.name] = token.value ?? true;
    }
  });

const color = values.color;
const logfile = values.logfile ?? 'default.log';

console.log({ logfile, color });
```

----------------------------------------

TITLE: Reading UInt8 from Buffer - Node.js
DESCRIPTION: Demonstrates how to read an unsigned 8-bit integer from a Buffer using `readUInt8`. It shows reading at valid offsets and the expected result (including signed conversion), and also illustrates the `ERR_OUT_OF_RANGE` error when reading beyond the buffer bounds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_64

LANGUAGE: JavaScript (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([1, -2]);

console.log(buf.readUInt8(0));
// Prints: 1
console.log(buf.readUInt8(1));
// Prints: 254
console.log(buf.readUInt8(2));
// Throws ERR_OUT_OF_RANGE.
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([1, -2]);

console.log(buf.readUInt8(0));
// Prints: 1
console.log(buf.readUInt8(1));
// Prints: 254
console.log(buf.readUInt8(2));
// Throws ERR_OUT_OF_RANGE.
```

----------------------------------------

TITLE: Sending File Response with Trailers - Node.js HTTP/2 - CJS
DESCRIPTION: Illustrates using `http2stream.respondWithFile` in CommonJS with the `waitForTrailers` option. This configuration defers stream closure after the file data is sent, enabling the server to attach trailing headers by listening for the `'wantTrailers'` event and subsequently calling `stream.sendTrailers()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_36

LANGUAGE: Node.js - CJS
CODE:
```
const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  stream.respondWithFile('/some/file',
                         { 'content-type': 'text/plain; charset=utf-8' },
                         { waitForTrailers: true });
  stream.on('wantTrailers', () => {
    stream.sendTrailers({ ABC: 'some value to send' });
  });
});
```

----------------------------------------

TITLE: Importing StringDecoder in ES Modules (MJS)
DESCRIPTION: Shows how to import the StringDecoder class from the node:string_decoder module using ES Modules syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/string_decoder.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import { StringDecoder } from 'node:string_decoder';
```

----------------------------------------

TITLE: Using File System Constants with fs.open in Node.js
DESCRIPTION: Demonstrates how to import and use file system constants with bitwise OR operations for the fs.open method, combining read-write, create, and exclusive flags.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_108

LANGUAGE: javascript
CODE:
```
import { open, constants } from 'node:fs';

const {
  O_RDWR,
  O_CREAT,
  O_EXCL,
} = constants;

open('/path/to/my/file', O_RDWR | O_CREAT | O_EXCL, (err, fd) => {
  // ...
});
```

----------------------------------------

TITLE: MessagePort Close Event Handling
DESCRIPTION: Shows how to handle the close event on MessagePorts when the communication channel is closed. Demonstrates message posting and close event listening.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
import { MessageChannel } from 'node:worker_threads';
const { port1, port2 } = new MessageChannel();

// Prints:
//   foobar
//   closed!
port2.on('message', (message) => console.log(message));
port2.on('close', () => console.log('closed!'));

port1.postMessage('foobar');
port1.close();
```

LANGUAGE: javascript
CODE:
```
'use strict';

const { MessageChannel } = require('node:worker_threads');
const { port1, port2 } = new MessageChannel();

// Prints:
//   foobar
//   closed!
port2.on('message', (message) => console.log(message));
port2.on('close', () => console.log('closed!'));

port1.postMessage('foobar');
port1.close();
```

----------------------------------------

TITLE: Converting file URLs to paths using url.fileURLToPath() in Node.js
DESCRIPTION: Shows how to use url.fileURLToPath() to convert file URLs to platform-specific file paths, handling various edge cases and encodings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_46

LANGUAGE: javascript
CODE:
```
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);

new URL('file:///C:/path/').pathname;      // Incorrect: /C:/path/
fileURLToPath('file:///C:/path/');         // Correct:   C:\path\ (Windows)

new URL('file://nas/foo.txt').pathname;    // Incorrect: /foo.txt
fileURLToPath('file://nas/foo.txt');       // Correct:   \\nas\foo.txt (Windows)

new URL('file:///你好.txt').pathname;      // Incorrect: /%E4%BD%A0%E5%A5%BD.txt
fileURLToPath('file:///你好.txt');         // Correct:   /你好.txt (POSIX)

new URL('file:///hello world').pathname;   // Incorrect: /hello%20world
fileURLToPath('file:///hello world');      // Correct:   /hello world (POSIX)
```

----------------------------------------

TITLE: Symbolic Link Creation with fs.symlinkSync
DESCRIPTION: Creates a symbolic link synchronously. Automatically detects target type if not specified.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_99

LANGUAGE: javascript
CODE:
```
fs.symlinkSync(target, path[, type])
```

----------------------------------------

TITLE: MessageChannel Implementation for Two-Way Communication
DESCRIPTION: Demonstrates creating a two-way communication channel between ports using MessageChannel. Shows how to send and receive messages between linked MessagePort instances.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import { MessageChannel } from 'node:worker_threads';

const { port1, port2 } = new MessageChannel();
port1.on('message', (message) => console.log('received', message));
port2.postMessage({ foo: 'bar' });
```

LANGUAGE: javascript
CODE:
```
'use strict';

const { MessageChannel } = require('node:worker_threads');

const { port1, port2 } = new MessageChannel();
port1.on('message', (message) => console.log('received', message));
port2.postMessage({ foo: 'bar' });
```

----------------------------------------

TITLE: Measuring Performance with Performance Marks and Observer in Node.js (ESM, JavaScript)
DESCRIPTION: Demonstrates importing the 'performance' and 'PerformanceObserver' from Node.js's perf_hooks module in an ECMAScript Module (ESM) context to mark significant events and measure intervals. The observer prints the duration of a measured interval and clears marks to avoid timeline clutter; asynchronous code simulates long-running operations. Requires Node.js version 8.5.0 or newer with ESM support. Inputs are performance marks, outputs are log messages with interval durations; timing depends on implementation details of doSomeLongRunningProcess.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import { performance, PerformanceObserver } from 'node:perf_hooks';

const obs = new PerformanceObserver((items) => {
  console.log(items.getEntries()[0].duration);
  performance.clearMarks();
});
obs.observe({ type: 'measure' });
performance.measure('Start to Now');

performance.mark('A');
doSomeLongRunningProcess(() => {
  performance.measure('A to Now', 'A');

  performance.mark('B');
  performance.measure('A to B', 'A', 'B');
});
```

----------------------------------------

TITLE: Decrypting Data Using update() and final() Methods in ESM
DESCRIPTION: Example demonstrating decryption using the update() and final() methods in ES modules. Instead of using the stream interface, this approach processes the data in one go, suitable for smaller data chunks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_16

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';
const {
  scryptSync,
  createDecipheriv,
} = await import('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';
// Use the async `crypto.scrypt()` instead.
const key = scryptSync(password, 'salt', 24);
// The IV is usually passed along with the ciphertext.
const iv = Buffer.alloc(16, 0); // Initialization vector.

const decipher = createDecipheriv(algorithm, key, iv);

// Encrypted using same algorithm, key and iv.
const encrypted =
  'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';
let decrypted = decipher.update(encrypted, 'hex', 'utf8');
decrypted += decipher.final('utf8');
console.log(decrypted);
// Prints: some clear text data
```

----------------------------------------

TITLE: Filling Buffer with Multi-byte Character in Node.js (mjs)
DESCRIPTION: Illustrates filling a Buffer with a character that requires multiple bytes in UTF-8 encoding using the `fill()` method in Node.js MJS syntax, showing how partial characters are handled at the end.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_48

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

// Fill a `Buffer` with character that takes up two bytes in UTF-8.

console.log(Buffer.allocUnsafe(5).fill('Ȣ'));
// Prints: <Buffer c8 a2 c8 a2 c8>
```

----------------------------------------

TITLE: Reading File Contents Synchronously in Node.js
DESCRIPTION: Demonstrates the use of fs.readFileSync to read the contents of a file. Returns the file contents as a string or buffer. Includes an example showing platform-specific behavior when reading a directory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_89

LANGUAGE: JavaScript
CODE:
```
import { readFileSync } from 'node:fs';

// macOS, Linux, and Windows
readFileSync('<directory>');
// => [Error: EISDIR: illegal operation on a directory, read <directory>]

//  FreeBSD
readFileSync('<directory>'); // => <data>
```

----------------------------------------

TITLE: Broken Socket Server Implementation in Node.js
DESCRIPTION: Example of incorrect socket server implementation that fails to process incoming data, causing the socket to remain paused indefinitely in Node.js 0.10 and later versions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_102

LANGUAGE: javascript
CODE:
```
// WARNING!  BROKEN!
net.createServer((socket) => {

  // We add an 'end' listener, but never consume the data.
  socket.on('end', () => {
    // It will never get here.
    socket.end('The message was received but was not processed.\n');
  });

}).listen(1337);
```

----------------------------------------

TITLE: Installing NPM Packages with Version Ranges
DESCRIPTION: Examples of installing packages using version range specifications.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
npm install sax@">=0.1.0 <0.2.0"
npm install @myorg/privatepackage@"16 - 17"
```

----------------------------------------

TITLE: Implementing Global Setup/Teardown with CJS - Javascript
DESCRIPTION: Provides an example of a CommonJS module (`setup-module.js`) that exports `globalSetup` and `globalTeardown` asynchronous functions. This module can be specified using the `--test-global-setup` flag to run code once before all tests and once after all tests.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_14

LANGUAGE: Javascript
CODE:
```
// setup-module.js
async function globalSetup() {
  // Setup shared resources, state, or environment
  console.log('Global setup executed');
  // Run servers, create files, prepare databases, etc.
}

async function globalTeardown() {
  // Clean up resources, state, or environment
  console.log('Global teardown executed');
  // Close servers, remove files, disconnect from databases, etc.
}

module.exports = { globalSetup, globalTeardown };
```

----------------------------------------

TITLE: Passing Arguments to Event Listeners in Node.js (ESM)
DESCRIPTION: This example illustrates how to pass arguments to event listeners and demonstrates the behavior of 'this' within listener functions using ECMAScript modules. It shows that 'this' refers to the EventEmitter instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', function(a, b) {
  console.log(a, b, this, this === myEmitter);
  // Prints:
  //   a b MyEmitter {
  //     _events: [Object: null prototype] { event: [Function (anonymous)] },
  //     _eventsCount: 1,
  //     _maxListeners: undefined,
  //     Symbol(shapeMode): false,
  //     Symbol(kCapture): false
  //   } true
});
myEmitter.emit('event', 'a', 'b');
```

----------------------------------------

TITLE: Asynchronous Walk Method in Glob
DESCRIPTION: Returns a Promise that resolves to an array containing all glob results.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/glob/README.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
g.walk()
```

----------------------------------------

TITLE: Custom AsyncResource Example (DBQuery) - Node.js JavaScript
DESCRIPTION: This snippet provides a practical example of how to extend the `AsyncResource` class to manage the asynchronous context of a database query. The `DBQuery` class inherits from `AsyncResource`, calls the super constructor with a type, and uses `runInAsyncScope` within the database callback (`db.get`) to ensure the original context is restored when the user-provided callback is executed. It also shows how to call `emitDestroy` when the resource is no longer needed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_9

LANGUAGE: javascript
CODE:
```
class DBQuery extends AsyncResource {
  constructor(db) {
    super('DBQuery');
    this.db = db;
  }

  getInfo(query, callback) {
    this.db.get(query, (err, data) => {
      this.runInAsyncScope(callback, null, err, data);
    });
  }

  close() {
    this.db = null;
    this.emitDestroy();
  }
}
```

----------------------------------------

TITLE: Advanced Argument Configuration in Commander.js
DESCRIPTION: Shows advanced argument configuration using the Argument class, including choices for drink sizes and default timeout values with custom descriptions.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
program
  .addArgument(new commander.Argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))
  .addArgument(new commander.Argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))
```

----------------------------------------

TITLE: Starting Node.js CPU Profiling with Custom Name - Console
DESCRIPTION: Shows how to combine `--cpu-prof` with the `--cpu-prof-name` flag to specify a custom filename for the generated V8 CPU profile. This overrides the default timestamped naming convention.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_15

LANGUAGE: console
CODE:
```
$ node --cpu-prof --cpu-prof-name 'CPU.${pid}.cpuprofile' index.js
$ ls *.cpuprofile
'CPU.${pid}.cpuprofile'
```

----------------------------------------

TITLE: Creating a Main Module that Loads Dependencies in Node.js
DESCRIPTION: Example demonstrating how to create a main module that loads other modules, showing the initialization order and state of loaded modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_14

LANGUAGE: js
CODE:
```
console.log('main starting');
const a = require('./a.js');
const b = require('./b.js');
console.log('in main, a.done = %j, b.done = %j', a.done, b.done);
```

----------------------------------------

TITLE: Making an HTTPS Request Using a URL Object as Options in Node.js - JavaScript
DESCRIPTION: Demonstrates how to create a Node.js HTTPS request using a constructed URL object. The example shows handling embedded authentication in the URL and passing the URL directly to https.request(). Requires Node.js support for URL objects as options and the 'https' module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
const options = new URL('https://abc:xyz@example.com');

const req = https.request(options, (res) => {
  // ...
});
```

----------------------------------------

TITLE: Acquiring Thread-safe Function Reference in N-API
DESCRIPTION: Indicates that a thread will be using the specified thread-safe function, preventing it from being destroyed while in use.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_215

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status
napi_acquire_threadsafe_function(napi_threadsafe_function func);
```

----------------------------------------

TITLE: Example package.json with tilde dependency in JSON
DESCRIPTION: An example of a package.json file with a tilde (~) dependency, which allows updates to the latest patch version within the same minor version.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-update.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
"dependencies": {
  "dep1": "~1.1.1"
}
```

----------------------------------------

TITLE: Setting Mock Date Time with setTime - node:test - MJS
DESCRIPTION: This snippet illustrates using `context.mock.timers.setTime()` to explicitly set the mocked current Unix timestamp for `Date` objects. It requires the `node:test` and `node:assert` modules and Date mocking must be enabled via `context.mock.timers.enable({ apis: ['Date'] })`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_58

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('runAll functions following the given order', (context) => {
  const now = Date.now();
  const setTime = 1000;
  // Date.now is not mocked
  assert.deepStrictEqual(Date.now(), now);

  context.mock.timers.enable({ apis: ['Date'] });
  context.mock.timers.setTime(setTime);
  // Date.now is now 1000
  assert.strictEqual(Date.now(), setTime);
});
```

----------------------------------------

TITLE: Handling 'EADDRINUSE' Error on Node.js Server Start in JavaScript
DESCRIPTION: This snippet demonstrates an approach to handle the common 'EADDRINUSE' error which occurs when attempting to start a server on a port or path already in use. It listens for the 'error' event on the server object. If the error code is 'EADDRINUSE', it logs a message, closes the server instance gracefully, and attempts to restart the server after a 1-second delay using `setTimeout`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
```js
server.on('error', (e) => {
  if (e.code === 'EADDRINUSE') {
    console.error('Address in use, retrying...');
    setTimeout(() => {
      server.close();
      server.listen(PORT, HOST);
    }, 1000);
  }
});
```
```

----------------------------------------

TITLE: Converting File Paths to URLs in Node.js
DESCRIPTION: Shows how to use url.pathToFileURL() to convert file paths to File URL objects, handling special characters and ensuring absolute paths.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_48

LANGUAGE: javascript
CODE:
```
import { pathToFileURL } from 'node:url';

new URL('/foo#1', 'file:');           // Incorrect: file:///foo#1
pathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)

new URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c
pathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)
```

LANGUAGE: javascript
CODE:
```
const { pathToFileURL } = require('node:url');
new URL(__filename);                  // Incorrect: throws (POSIX)
new URL(__filename);                  // Incorrect: C:\... (Windows)
pathToFileURL(__filename);            // Correct:   file:///... (POSIX)
pathToFileURL(__filename);            // Correct:   file:///C:/... (Windows)

new URL('/foo#1', 'file:');           // Incorrect: file:///foo#1
pathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)

new URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c
pathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)
```

----------------------------------------

TITLE: Adding AbortSignal Support to fs.writeFile
DESCRIPTION: Implementation of AbortSignal support in the fs.writeFile method, allowing write operations to be cancelled. This is marked as a SEMVER-MINOR change.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_35

LANGUAGE: JavaScript
CODE:
```
**(SEMVER-MINOR)** **fs**: support abortsignal in writeFile
```

----------------------------------------

TITLE: Running Node.js Tests in Watch Mode - Bash
DESCRIPTION: Demonstrates the command-line syntax for starting the Node.js test runner in watch mode using the `--watch` flag. In this mode, the runner monitors test files and their dependencies, automatically rerunning relevant tests when changes are detected.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_13

LANGUAGE: Bash
CODE:
```
node --test --watch
```

----------------------------------------

TITLE: Splitting Windows PATH using path.delimiter
DESCRIPTION: Shows how to split the Windows `PATH` environment variable string into an array of individual directory paths using the platform-specific delimiter provided by `path.delimiter` (which is `;` on Windows).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_13

LANGUAGE: js
CODE:
```
process.env.PATH.split(path.delimiter);
// Returns ['C:\\Windows\\system32', 'C:\\Windows', 'C:\\Program Files\\node\\']
```

----------------------------------------

TITLE: Configuring Project Package Manager in package.json
DESCRIPTION: JSON configuration showing how to specify a package manager version for a project using the packageManager field with version and hash validation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/corepack/README.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "packageManager": "yarn@3.2.3+sha224.953c8233f7a92884eee2de69a1b92d1f2ec1655e66d08071ba9a02fa"
}
```

----------------------------------------

TITLE: Failed Self-Reference Import Example
DESCRIPTION: Shows an example of a failing import due to undefined export path in package.json.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
import { another } from 'a-package/m.mjs';
```

----------------------------------------

TITLE: Creating and Registering Event Listeners with EventTarget (JavaScript)
DESCRIPTION: This snippet demonstrates the creation of a new EventTarget instance in Node.js and registering an event listener on it using addEventListener. The listener logs a message when the 'foo' event is triggered. No external dependencies are required—EventTarget is available globally in Node.js (v14.5.0+). The input is an event of type 'foo', received by dispatchEvent, and the output is console logging when the event occurs.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_50

LANGUAGE: JavaScript
CODE:
```
const target = new EventTarget();\n\ntarget.addEventListener('foo', (event) => {\n  console.log('foo event happened!');\n});
```

----------------------------------------

TITLE: Using BroadcastChannel for Multi-Worker Communication
DESCRIPTION: Shows how to implement one-to-many communication between workers using BroadcastChannel. Demonstrates creating multiple workers and broadcasting messages between them.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
import {
  isMainThread,
  BroadcastChannel,
  Worker,
} from 'node:worker_threads';

const bc = new BroadcastChannel('hello');

if (isMainThread) {
  let c = 0;
  bc.onmessage = (event) => {
    console.log(event.data);
    if (++c === 10) bc.close();
  };
  for (let n = 0; n < 10; n++)
    new Worker(new URL(import.meta.url));
} else {
  bc.postMessage('hello from every worker');
  bc.close();
}
```

LANGUAGE: javascript
CODE:
```
'use strict';

const {
  isMainThread,
  BroadcastChannel,
  Worker,
} = require('node:worker_threads');

const bc = new BroadcastChannel('hello');

if (isMainThread) {
  let c = 0;
  bc.onmessage = (event) => {
    console.log(event.data);
    if (++c === 10) bc.close();
  };
  for (let n = 0; n < 10; n++)
    new Worker(__filename);
} else {
  bc.postMessage('hello from every worker');
  bc.close();
}
```

----------------------------------------

TITLE: Handling Worker Exit Event and Restarting in Node.js Cluster
DESCRIPTION: Demonstrates handling the 'exit' event on the `cluster` object in the primary process. This event fires when a worker process terminates. The example shows logging the exit details (PID, signal/code) and restarting the worker using `cluster.fork()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_11

LANGUAGE: js
CODE:
```
cluster.on('exit', (worker, code, signal) => {
  console.log('worker %d died (%s). restarting...',
              worker.process.pid, signal || code);
  cluster.fork();
});
```

----------------------------------------

TITLE: Using Set.values() Iterator in JavaScript
DESCRIPTION: Creates a Set with two elements and gets its values iterator. The iterator contains the values 1 and 2, along with a length property of 2.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/internal-properties-entries-expected.txt#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
new Set([1,2]).values()
```

----------------------------------------

TITLE: Retrieving TLS Ciphers Example
DESCRIPTION: Example showing how to get the list of supported TLS ciphers using tls.getCiphers(). The returned array contains lowercase cipher names that must be uppercase when used with createSecureContext().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_30

LANGUAGE: javascript
CODE:
```
console.log(tls.getCiphers()); // ['aes128-gcm-sha256', 'aes128-sha', ...]
```

----------------------------------------

TITLE: Adding AbortSignal Support to HTTP Requests in JavaScript
DESCRIPTION: Adds support for the AbortSignal interface to http.request(), allowing requests to be aborted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_21

LANGUAGE: JavaScript
CODE:
```
http.request = function(url, options, callback) {
  // Handle AbortSignal
  // Implementation details 
};
```

----------------------------------------

TITLE: Handling Multiple Events with Promise.all()
DESCRIPTION: Demonstrates proper handling of multiple events emitted synchronously using Promise.all() to avoid missing events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_43

LANGUAGE: javascript
CODE:
```
const { EventEmitter, once } = require('node:events');

const myEE = new EventEmitter();

async function foo() {
  await Promise.all([once(myEE, 'bar'), once(myEE, 'foo')]);
  console.log('foo', 'bar');
}

process.nextTick(() => {
  myEE.emit('bar');
  myEE.emit('foo');
});

foo().then(() => console.log('done'));
```

----------------------------------------

TITLE: Demonstrating Ignored Asynchronous Operations in exit Event Handler (CommonJS) - JavaScript
DESCRIPTION: Illustrates that asynchronous operations, such as setTimeout, scheduled in an 'exit' event handler will not be executed, as the event loop shuts down immediately after synchronous handler execution. Shown using CommonJS syntax; the message inside setTimeout is never printed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_7

LANGUAGE: cjs
CODE:
```
const process = require('node:process');

process.on('exit', (code) => {
  setTimeout(() => {
    console.log('This will not run');
  }, 0);
});
```

----------------------------------------

TITLE: Creating Snapshot with Default Serialization - Node.js Test - js
DESCRIPTION: Illustrates using `t.assert.snapshot` for basic snapshot testing. The provided value is serialized with default test runner serializers and compared against or written to a snapshot file managed by the test runner.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_67

LANGUAGE: js
CODE:
```
test('snapshot test with default serialization', (t) => {
  t.assert.snapshot({ value1: 1, value2: 2 });
});
```

----------------------------------------

TITLE: Implementing Gzip Compression with Flush in Node.js (ESM)
DESCRIPTION: Creates an HTTP server that compresses and streams time updates using gzip compression. Demonstrates proper usage of zlib's flush() method to ensure immediate data availability.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
import zlib from 'node:zlib';
import http from 'node:http';
import { pipeline } from 'node:stream';

http.createServer((request, response) => {
  // For the sake of simplicity, the Accept-Encoding checks are omitted.
  response.writeHead(200, { 'content-encoding': 'gzip' });
  const output = zlib.createGzip();
  let i;

  pipeline(output, response, (err) => {
    if (err) {
      // If an error occurs, there's not much we can do because
      // the server has already sent the 200 response code and
      // some amount of data has already been sent to the client.
      // The best we can do is terminate the response immediately
      // and log the error.
      clearInterval(i);
      response.end();
      console.error('An error occurred:', err);
    }
  });

  i = setInterval(() => {
    output.write(`The current time is ${Date()}\n`, () => {
      // The data has been passed to zlib, but the compression algorithm may
      // have decided to buffer the data for more efficient compression.
      // Calling .flush() will make the data available as soon as the client
      // is ready to receive it.
      output.flush();
    });
  }, 1000);
}).listen(1337);
```

----------------------------------------

TITLE: Reverse DNS Lookup with lookupService in ES Modules
DESCRIPTION: Demonstrates how to perform reverse DNS lookups using the lookupService method in ES Modules format. This resolves an IP address and port into a hostname and service name.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_19

LANGUAGE: mjs
CODE:
```
import dnsPromises from 'node:dns/promises';
const result = await dnsPromises.lookupService('127.0.0.1', 22);

console.log(result.hostname, result.service); // Prints: localhost ssh
```

----------------------------------------

TITLE: Defining JavaScript Classes with napi_define_class
DESCRIPTION: Creates a JavaScript class with constructor, static and instance properties. Used to wrap C++ classes with JavaScript interfaces. Returns a constructor function that can be used to instantiate the class.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_178

LANGUAGE: c
CODE:
```
napi_status napi_define_class(napi_env env,
                              const char* utf8name,
                              size_t length,
                              napi_callback constructor,
                              void* data,
                              size_t property_count,
                              const napi_property_descriptor* properties,
                              napi_value* result);
```

----------------------------------------

TITLE: Using File URLs with Node.js fs Module
DESCRIPTION: Demonstrates reading files using file:// URL protocol in Node.js. Shows basic file URL usage with readFileSync.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_114

LANGUAGE: javascript
CODE:
```
import { readFileSync } from 'node:fs';

readFileSync(new URL('file:///tmp/hello'));
```

----------------------------------------

TITLE: Demonstrating Partial Path Matching with minimatch in JavaScript
DESCRIPTION: Examples showing how partial path matching works when the partial option is enabled, useful when walking through folder structures.
SOURCE: https://github.com/nodejs/node/blob/main/deps/minimatch/README.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
minimatch('/a/b', '/a/*/c/d', { partial: true }) // true, might be /a/b/c/d
minimatch('/a/b', '/**/d', { partial: true }) // true, might be /a/b/.../d
minimatch('/x/y/z', '/a/**/z', { partial: true }) // false, because x !== a
```

----------------------------------------

TITLE: Stringifying Objects to Query Strings Using querystring.stringify - Node.js JavaScript
DESCRIPTION: These code examples demonstrate how to serialize JavaScript objects into URL query strings using 'querystring.stringify'. The function handles arrays as repeated keys, allows customization of key-value and pair separators, and coerces non-serializable values to empty strings. Inputs are objects, with optional separators and options for percent-encoding customization.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/querystring.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });
// Returns 'foo=bar&baz=qux&baz=quux&corge='

querystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');
// Returns 'foo:bar;baz:qux'
```

----------------------------------------

TITLE: Example Output of npm ls Command in Bash
DESCRIPTION: Demonstrates the output of running 'npm ls promzard' in npm's source tree, showing the dependency tree for the specified package.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-ls.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm@11.3.0 /path/to/npm
└─┬ init-package-json@0.0.4
  └── promzard@0.1.5
```

----------------------------------------

TITLE: Checking File Accessibility with fsPromises.access in Node.js
DESCRIPTION: Asynchronously tests user permissions for a specified `path` (string, Buffer, or URL). The optional `mode` argument (integer, default `fs.constants.F_OK`) specifies the checks using constants like `R_OK`, `W_OK`, `X_OK` combined with bitwise OR. Returns a Promise that fulfills with `undefined` if successful, or rejects with an Error if checks fail. Using this before `fsPromises.open()` is discouraged due to potential race conditions; handle errors from `open` directly instead.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_21

LANGUAGE: mjs
CODE:
```
import { access, constants } from 'node:fs/promises';

try {
  await access('/etc/passwd', constants.R_OK | constants.W_OK);
  console.log('can access');
} catch {
  console.error('cannot access');
}
```

----------------------------------------

TITLE: Using URL Object with Node.js HTTP Request
DESCRIPTION: Example of making an HTTP request using a URL object as the options parameter. This demonstrates how to pass authentication credentials through the URL.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_61

LANGUAGE: javascript
CODE:
```
const options = new URL('http://abc:xyz@example.com');

const req = http.request(options, (res) => {
  // ...
});
```

----------------------------------------

TITLE: Destroying a Writable Stream without Error in Node.js (cjs)
DESCRIPTION: Illustrates destroying a Node.js Writable stream using `destroy()` without providing an error argument. An 'error' event listener is attached, but it's noted that it won't necessarily be triggered in this specific case unless the underlying `_destroy` implementation emits an error. The stream is immediately ended.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_19

LANGUAGE: cjs
CODE:
```
const { Writable } = require('node:stream');

const myStream = new Writable();

myStream.destroy();
myStream.on('error', function wontHappen() {});
```

----------------------------------------

TITLE: Launching Node.js Process with Command-Line Arguments
DESCRIPTION: This bash command demonstrates how to launch a Node.js process with command-line arguments, which can then be accessed using process.argv in the script.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_27

LANGUAGE: bash
CODE:
```
node process-args.js one two=three four
```

----------------------------------------

TITLE: Writing Signed 32-bit Integer Big-Endian to Buffer (Node.js)
DESCRIPTION: This snippet demonstrates using `buf.writeInt32BE()` to write a signed 32-bit integer into a Buffer at a specified offset using big-endian byte order. The value must be a valid signed 32-bit integer and is written as two's complement.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_91

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeInt32BE(0x01020304, 0);

console.log(buf);
// Prints: <Buffer 01 02 03 04>
```

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeInt32BE(0x01020304, 0);

console.log(buf);
// Prints: <Buffer 01 02 03 04>
```

----------------------------------------

TITLE: Opting Out of Connection Pooling with HTTPS Requests in Node.js - JavaScript
DESCRIPTION: Illustrates how to disable connection pooling by setting 'agent: false' in the HTTPS request options. This approach is useful when each request requires a fresh connection for custom TLS certs or to avoid shared agent context. Filesystem client certs are loaded via 'fs.readFileSync'. Requires 'fs' and 'https' modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_11

LANGUAGE: JavaScript
CODE:
```
const options = {
  hostname: 'encrypted.google.com',
  port: 443,
  path: '/',
  method: 'GET',
  key: fs.readFileSync('private-key.pem'),
  cert: fs.readFileSync('certificate.pem'),
  agent: false,
};

const req = https.request(options, (res) => {
  // ...
});
```

----------------------------------------

TITLE: Converting Stream to Text in Node.js
DESCRIPTION: Shows how to convert a readable stream into UTF-8 encoded text using the streamConsumers.text() utility. Demonstrates both ESM and CommonJS approaches.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
import { text } from 'node:stream/consumers';
import { Readable } from 'node:stream';

const readable = Readable.from('Hello world from consumers!');
const data = await text(readable);
console.log(`from readable: ${data.length}`);
// Prints: from readable: 27
```

LANGUAGE: javascript
CODE:
```
const { text } = require('node:stream/consumers');
const { Readable } = require('node:stream');

const readable = Readable.from('Hello world from consumers!');
text(readable).then((data) => {
  console.log(`from readable: ${data.length}`);
  // Prints: from readable: 27
});
```

----------------------------------------

TITLE: Checking Buffer Inclusion in Node.js (mjs)
DESCRIPTION: Shows how to check if a Buffer contains a specific value (string, Buffer, or integer) using the `includes()` method in Node.js MJS syntax, demonstrating checks with and without an offset.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_52

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from('this is a buffer');

console.log(buf.includes('this'));
// Prints: true
console.log(buf.includes('is'));
// Prints: true
console.log(buf.includes(Buffer.from('a buffer')));
// Prints: true
console.log(buf.includes(97));
// Prints: true (97 is the decimal ASCII value for 'a')
console.log(buf.includes(Buffer.from('a buffer example')));
// Prints: false
console.log(buf.includes(Buffer.from('a buffer example').slice(0, 8)));
// Prints: true
console.log(buf.includes('this', 4));
// Prints: false
```

----------------------------------------

TITLE: Demonstrating Uncaught Errors in EventEmitter in Node.js
DESCRIPTION: Illustrates how uncaught errors in EventEmitter can crash the Node.js process. This example shows an error being emitted without a handler, which will cause the process to crash.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
const EventEmitter = require('node:events');
const ee = new EventEmitter();

setImmediate(() => {
  // This will crash the process because no 'error' event
  // handler has been added.
  ee.emit('error', new Error('This will crash'));
});
```

----------------------------------------

TITLE: Changing File Timestamps with fsPromises.utimes in Node.js
DESCRIPTION: Asynchronously changes the file system timestamps (access time `atime` and modification time `mtime`) of the object at `path`. `atime` and `mtime` can be numbers (Unix epoch time), Date objects, or numeric strings. Returns a Promise fulfilling with `undefined` upon success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_40

LANGUAGE: javascript
CODE:
```
fsPromises.utimes(path, atime, mtime)
```

----------------------------------------

TITLE: Printing Command-Line Arguments in Node.js
DESCRIPTION: This snippet demonstrates how to access and print command-line arguments passed to a Node.js script using process.argv. It includes examples for both ECMAScript modules and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_26

LANGUAGE: javascript
CODE:
```
import { argv } from 'node:process';

// print process.argv
argv.forEach((val, index) => {
  console.log(`${index}: ${val}`);
});
```

LANGUAGE: javascript
CODE:
```
const { argv } = require('node:process');

// print process.argv
argv.forEach((val, index) => {
  console.log(`${index}: ${val}`);
});
```

----------------------------------------

TITLE: Deleting Files with fs.unlink in Node.js
DESCRIPTION: Demonstrates asynchronous file deletion using the fs.unlink method. The example shows how to remove a file and handle potential errors in the callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_76

LANGUAGE: mjs
CODE:
```
import { unlink } from 'node:fs';
// Assuming that 'path/file.txt' is a regular file.
unlink('path/file.txt', (err) => {
  if (err) throw err;
  console.log('path/file.txt was deleted');
});
```

----------------------------------------

TITLE: Accessing Worker Data in Node.js Worker Threads
DESCRIPTION: Demonstrates how to pass and access data between the main thread and worker threads using workerData. Shows implementation in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { Worker, isMainThread, workerData } from 'node:worker_threads';

if (isMainThread) {
  const worker = new Worker(new URL(import.meta.url), { workerData: 'Hello, world!' });
} else {
  console.log(workerData);  // Prints 'Hello, world!'.
}
```

LANGUAGE: javascript
CODE:
```
'use strict';

const { Worker, isMainThread, workerData } = require('node:worker_threads');

if (isMainThread) {
  const worker = new Worker(__filename, { workerData: 'Hello, world!' });
} else {
  console.log(workerData);  // Prints 'Hello, world!'.
}
```

----------------------------------------

TITLE: Importing and Using Minimatch for Basic Pattern Matching in JavaScript
DESCRIPTION: Demonstrates how to import minimatch using both ES modules and CommonJS syntax, then shows basic pattern matching examples including one with debug mode enabled.
SOURCE: https://github.com/nodejs/node/blob/main/deps/minimatch/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// hybrid module, load with require() or import
import { minimatch } from 'minimatch'
// or:
const { minimatch } = require('minimatch')

minimatch('bar.foo', '*.foo') // true!
minimatch('bar.foo', '*.bar') // false!
minimatch('bar.foo', '*.+(bar|foo)', { debug: true }) // true, and noisy!
```

----------------------------------------

TITLE: Shortcut for Linking Packages in Bash
DESCRIPTION: Shows a shorter method to link a dependency package to the main project.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
cd ~/projects/node-bloggy  # go into the dir of your main project
npm link ../node-redis     # link the dir of your dependency
```

----------------------------------------

TITLE: Iterating over Buffer using for...of - JavaScript
DESCRIPTION: Demonstrates using the standard JavaScript for...of loop to iterate directly over the byte values contained within a Node.js Buffer instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_12

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([1, 2, 3]);

for (const b of buf) {
  console.log(b);
}
// Prints:
//   1
//   2
//   3
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([1, 2, 3]);

for (const b of buf) {
  console.log(b);
}
// Prints:
//   1
//   2
//   3
```

----------------------------------------

TITLE: Configuring Multiple CA Certificates in TLS
DESCRIPTION: Demonstrates how to pass multiple CA certificates to TLS methods either as an array of strings or as a single new-line separated string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V5.md#2025-04-23_snippet_30

LANGUAGE: javascript
CODE:
```
const tls = require('tls');
const options = {
  ca: ['cert1', 'cert2'] // or 'cert1\ncert2'
};
```

----------------------------------------

TITLE: Hash Digest using update() and digest() Methods - Node.js Crypto (JavaScript CJS)
DESCRIPTION: This snippet shows using the CommonJS 'require' syntax to create a hash, update it with data, and output the hexadecimal digest. The hash object performs SHA-256 on string data. Requires Node.js with 'node:crypto' module and cannot reuse hash object after digest().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_31

LANGUAGE: JavaScript
CODE:
```
const {
  createHash,
} = require('node:crypto');

const hash = createHash('sha256');

hash.update('some data to hash');
console.log(hash.digest('hex'));
// Prints:
//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50
```

----------------------------------------

TITLE: Finding Files using fs.glob in Node.js (CJS)
DESCRIPTION: Shows how to find files matching a glob pattern (`**/*.js`) asynchronously using the `fs.glob` function in Node.js with CommonJS syntax (`require`). Requires the `glob` function from the `node:fs` module. The callback function receives an error object (if any) and an array of strings representing the matching file paths found within the current working directory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_60

LANGUAGE: cjs
CODE:
```
const { glob } = require('node:fs');

glob('**/*.js', (err, matches) => {
  if (err) throw err;
  console.log(matches);
});
```

----------------------------------------

TITLE: Reading File Stream Using Line Event (CommonJS)
DESCRIPTION: CommonJS version of the line event handler approach. Demonstrates the same functionality using require syntax instead of import.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
const { createReadStream } = require('node:fs');
const { createInterface } = require('node:readline');

const rl = createInterface({
  input: createReadStream('sample.txt'),
  crlfDelay: Infinity,
});

rl.on('line', (line) => {
  console.log(`Line from file: ${line}`);
});
```

----------------------------------------

TITLE: Generating Random Bytes Asynchronously with Node.js Crypto (CommonJS)
DESCRIPTION: Shows how to generate cryptographically strong random bytes asynchronously using the crypto.randomBytes function in CommonJS format. The example demonstrates generating 256 bytes of random data and converting it to hexadecimal format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_85

LANGUAGE: javascript
CODE:
```
const {
  randomBytes,
} = require('node:crypto');

randomBytes(256, (err, buf) => {
  if (err) throw err;
  console.log(`${buf.length} bytes of random data: ${buf.toString('hex')}`);
});
```

----------------------------------------

TITLE: Testing Object.prototype.hasOwnProperty functionality in JavaScript
DESCRIPTION: A series of test assertions that verify the behavior of the hasOwnProperty method. Tests include checking the method type, detecting own properties on objects and strings, and confirming that inherited properties return false.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/has-own-property-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS typeof {foo : 'yum'}.hasOwnProperty is "function"
PASS ({foo : 'yum'}).hasOwnProperty('foo') is true
PASS ''.hasOwnProperty('length') is true
PASS ({foo : 'yum'}).hasOwnProperty('bar') is false
PASS ({foo : 'yum'}).hasOwnProperty('toString') is false
PASS ''.hasOwnProperty('toString') is false
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Logging into a Scoped Registry in Bash
DESCRIPTION: Example of logging into a private registry with a specific scope. This maps the scope to the custom registry for future package installations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-login.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry.mycorp.com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

----------------------------------------

TITLE: Importing/Requiring the EventEmitter Class (MJS/CJS)
DESCRIPTION: Shows the standard way to import the `EventEmitter` class using ECMAScript Modules (`import`) and CommonJS (`require`) syntax from the built-in `node:events` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_19

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
```

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
```

----------------------------------------

TITLE: Event Listener Implementation in CJS
DESCRIPTION: Shows the CommonJS implementation of events.on() for event listening. Demonstrates same functionality as MJS version but using require syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_45

LANGUAGE: cjs
CODE:
```
const { on, EventEmitter } = require('node:events');

(async () => {
  const ee = new EventEmitter();

  // Emit later on
  process.nextTick(() => {
    ee.emit('foo', 'bar');
    ee.emit('foo', 42);
  });

  for await (const event of on(ee, 'foo')) {
    // The execution of this inner block is synchronous and it
    // processes one event at a time (even with await). Do not use
    // if concurrent execution is required.
    console.log(event); // prints ['bar'] [42]
  }
  // Unreachable here
})();
```

----------------------------------------

TITLE: Handling HTTP/2 Stream Event on Server - CJS
DESCRIPTION: This CommonJS snippet shows how to create an unencrypted HTTP/2 server using `require('node:http2')` and listen for the 'stream' event on the server instance. It demonstrates sending a simple HTML response and handling stream errors, similar to the MJS example.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_2

LANGUAGE: cjs
CODE:
```
const http2 = require('node:http2');

// Create an unencrypted HTTP/2 server
const server = http2.createServer();

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.on('error', (error) => console.error(error));
  stream.end('<h1>Hello World</h1>');
});

server.listen(8000);
```

----------------------------------------

TITLE: Creating a Readline Interface with ES Modules in Node.js (JavaScript)
DESCRIPTION: Demonstrates how to import and instantiate a readline.Interface using ES module syntax. Requires Node.js v14+ and usage of native readline and process modules. The interface reads from stdin and writes to stdout. No prompt is provided, but this sets up the base for event-based CLI input.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_25

LANGUAGE: mjs
CODE:
```
import { createInterface } from 'node:readline';\nimport { stdin, stdout } from 'node:process';\nconst rl = createInterface({\n  input: stdin,\n  output: stdout,\n});
```

----------------------------------------

TITLE: Finding Index in Buffer in Node.js (mjs)
DESCRIPTION: Shows how to find the first occurrence of a value (string, Buffer, or integer) within a Buffer using the `indexOf()` method in Node.js MJS syntax, including examples with different value types and UTF-16 encoding.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_54

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from('this is a buffer');

console.log(buf.indexOf('this'));
// Prints: 0
console.log(buf.indexOf('is'));
// Prints: 2
console.log(buf.indexOf(Buffer.from('a buffer')));
// Prints: 8
console.log(buf.indexOf(97));
// Prints: 8 (97 is the decimal ASCII value for 'a')
console.log(buf.indexOf(Buffer.from('a buffer example')));
// Prints: -1
console.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));
// Prints: 8

const utf16Buffer = Buffer.from('ΚΑΣΣΕ', 'utf16le');

console.log(utf16Buffer.indexOf('Σ', 0, 'utf16le'));
// Prints: 4
console.log(utf16Buffer.indexOf('Σ', -4, 'utf16le'));
// Prints: 6
```

----------------------------------------

TITLE: Console Module Import Examples
DESCRIPTION: Different ways to import the Console class in Node.js using ESM, CommonJS, and destructuring.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { Console } from 'node:console';
```

LANGUAGE: javascript
CODE:
```
const { Console } = require('node:console');
```

LANGUAGE: javascript
CODE:
```
const { Console } = console;
```

----------------------------------------

TITLE: Connecting a Node.js net.Socket via Port and Host
DESCRIPTION: Initiates a TCP connection asynchronously on the given socket using the specified `port` and optional `host`. This is an alias for `socket.connect({ port: port, host: host }[, connectListener])`. The 'connect' event is emitted on success, 'error' on failure. The optional `connectListener` is added as a one-time listener for the 'connect' event. Returns the socket instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
socket.connect(port[, host][, connectListener])
```

----------------------------------------

TITLE: Accessing Socket Information via HTTP Request (CommonJS)
DESCRIPTION: Demonstrates how to access the underlying socket of an HTTP request to retrieve local IP address and port information. Uses CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
const http = require('node:http');
const options = {
  host: 'www.google.com',
};
const req = http.get(options);
req.end();
req.once('response', (res) => {
  const ip = req.socket.localAddress;
  const port = req.socket.localPort;
  console.log(`Your IP address is ${ip} and your source port is ${port}.`);
  // Consume response object
});
```

----------------------------------------

TITLE: Audit with specified minimum vulnerability level
DESCRIPTION: Command to run an audit that only fails (non-zero exit code) if vulnerabilities of moderate level or higher are found.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
$ npm audit --audit-level=moderate
```

----------------------------------------

TITLE: Transferring TransformStream with postMessage
DESCRIPTION: Example showing how to transfer a TransformStream instance using MessagePort communication channel between threads.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
const stream = new TransformStream();

const { port1, port2 } = new MessageChannel();

port1.onmessage = ({ data }) => {
  const { writable, readable } = data;
  // ...
};

port2.postMessage(stream, [stream]);
```

----------------------------------------

TITLE: Creating and Encoding with TextEncoder in JavaScript
DESCRIPTION: Demonstrates how to create a TextEncoder instance and encode a string to a Uint8Array using UTF-8 encoding.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_54

LANGUAGE: javascript
CODE:
```
const encoder = new TextEncoder();
const uint8array = encoder.encode('this is some data');
```

----------------------------------------

TITLE: Using getEntries() with PerformanceObserver in ES Modules
DESCRIPTION: Demonstrates how to use the getEntries() method to retrieve all performance entries collected by a PerformanceObserver in ES Modules. Shows the structure of the returned PerformanceEntry objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
import { performance, PerformanceObserver } from 'node:perf_hooks';

const obs = new PerformanceObserver((perfObserverList, observer) => {
  console.log(perfObserverList.getEntries());
  /**
   * [
   *   PerformanceEntry {
   *     name: 'test',
   *     entryType: 'mark',
   *     startTime: 81.465639,
   *     duration: 0,
   *     detail: null
   *   },
   *   PerformanceEntry {
   *     name: 'meow',
   *     entryType: 'mark',
   *     startTime: 81.860064,
   *     duration: 0,
   *     detail: null
   *   }
   * ]
   */

  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ type: 'mark' });

performance.mark('test');
performance.mark('meow');
```

----------------------------------------

TITLE: Configuring the 'json' Option in npm
DESCRIPTION: Describes the `--json` flag (Boolean, default: false) which makes npm output data in JSON format instead of the standard textual output. It also affects `npm pkg set` by parsing input values as JSON before saving. Note that not all npm commands support this option.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_13

LANGUAGE: text
CODE:
```
#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output.

* In `npm pkg set` it enables parsing set values with JSON.parse() before
  saving them to your `package.json`.

Not supported by all npm commands.
```

----------------------------------------

TITLE: Combining NODE_OPTIONS and Command-Line Flags (Bash)
DESCRIPTION: Shows how flags that can be used multiple times (like `--require`) are handled when present in both `NODE_OPTIONS` and on the command line. The options from `NODE_OPTIONS` are processed first, followed by those on the command line.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_34

LANGUAGE: bash
CODE:
```
NODE_OPTIONS='--require "./a.js"' node --require "./b.js"
```

----------------------------------------

TITLE: Handling Online Event in Node.js Cluster
DESCRIPTION: This snippet demonstrates how to listen for the 'online' event which is emitted when a worker becomes available after being forked. The event provides access to the worker object that came online.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
cluster.on('online', (worker) => {
  console.log('Yay, the worker responded after it was forked');
});
```

----------------------------------------

TITLE: Installing a Local npm Package Globally
DESCRIPTION: Shows how to install a locally developed npm package globally for testing purposes. This command should be run in the root directory of the package.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/developers.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm install . -g
```

----------------------------------------

TITLE: Using AbortController with execFile in ES Modules
DESCRIPTION: ES Modules implementation showing how to use AbortController to abort an execFile operation. This allows canceling the child process execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_17

LANGUAGE: JavaScript
CODE:
```
import { execFile } from 'node:child_process';
const controller = new AbortController();
const { signal } = controller;
const child = execFile('node', ['--version'], { signal }, (error) => {
  console.error(error); // an AbortError
});
controller.abort();
```

----------------------------------------

TITLE: Listening for the exit Event in Node.js (ECMAScript Modules) - JavaScript
DESCRIPTION: Registers an event handler for the 'exit' event on the process object using ESM syntax. When the process is about to terminate, it logs the exit code synchronously. No dependencies except the core 'process' module. Inputs: none. Outputs: logs exit code. Listeners must not perform async operations, as further event loop operations are discarded.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

process.on('exit', (code) => {
  console.log(`About to exit with code: ${code}`);
});
```

----------------------------------------

TITLE: Building a Tiny CLI with Readline and CommonJS in Node.js (JavaScript)
DESCRIPTION: Shows a complete small CLI application using CommonJS syntax to create and configure a readline.Interface. Sets a custom prompt, processes commands using a switch statement, and handles 'line' and 'close' events for input and graceful exit. Input: user command; Output: console responses depending on entered command. Suitable for scripts or Node.js apps using CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_32

LANGUAGE: cjs
CODE:
```
const { createInterface } = require('node:readline');\nconst rl = createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: 'OHAI> ',\n});\n\nrl.prompt();\n\nrl.on('line', (line) => {\n  switch (line.trim()) {\n    case 'hello':\n      console.log('world!');\n      break;\n    default:\n      console.log(`Say what? I might have heard '${line.trim()}'`);\n      break;\n  }\n  rl.prompt();\n}).on('close', () => {\n  console.log('Have a great day!');\n  process.exit(0);\n});
```

----------------------------------------

TITLE: Validating Error Instances with assert.throws() in Node.js
DESCRIPTION: Shows how to use assert.throws() to validate errors using the Error constructor and regular expressions for error messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_51

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  Error,
);

assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  /^Error: Wrong value$/,
);
```

----------------------------------------

TITLE: Using notStrictEqual in ES Modules
DESCRIPTION: Demonstrates how to use assert.notStrictEqual() method in ES Modules format to test strict inequality between values using Object.is().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_36

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

assert.notStrictEqual(1, 2);
// OK

assert.notStrictEqual(1, 1);
// AssertionError [ERR_ASSERTION]: Expected "actual" to be strictly unequal to:
//
// 1

assert.notStrictEqual(1, '1');
// OK
```

----------------------------------------

TITLE: Writing String to Buffer (Node.js Buffer)
DESCRIPTION: Shows how to write a string into a Buffer at a specified offset using `buf.write()`. It demonstrates writing a string containing multi-byte characters and writing a string that exceeds the buffer's capacity, illustrating how the method returns the number of bytes actually written. Dependencies include the `Buffer` class from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_79

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.alloc(256);

const len = buf.write('\u00bd + \u00bc = \u00be', 0);

console.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);
// Prints: 12 bytes: ½ + ¼ = ¾

const buffer = Buffer.alloc(10);

const length = buffer.write('abcd', 8);

console.log(`${length} bytes: ${buffer.toString('utf8', 8, 10)}`);
// Prints: 2 bytes : ab
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(256);

const len = buf.write('\u00bd + \u00bc = \u00be', 0);

console.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);
// Prints: 12 bytes: ½ + ¼ = ¾

const buffer = Buffer.alloc(10);

const length = buffer.write('abcd', 8);

console.log(`${length} bytes: ${buffer.toString('utf8', 8, 10)}`);
// Prints: 2 bytes : ab
```

----------------------------------------

TITLE: Formatting a POSIX Path using path.format (root/base priority)
DESCRIPTION: Illustrates `path.format()` using `root` when `dir` is not specified. If only `root` and `base` are provided, the platform separator is not added between them. `ext` is ignored because `base` exists.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_22

LANGUAGE: js
CODE:
```
// `root` will be used if `dir` is not specified.
// If only `root` is provided or `dir` is equal to `root` then the
// platform separator will not be included. `ext` will be ignored.
path.format({
  root: '/',
  base: 'file.txt',
  ext: 'ignored',
});
// Returns: '/file.txt'
```

----------------------------------------

TITLE: Verifying package signatures command
DESCRIPTION: Command to verify the registry signatures of downloaded packages, ensuring their integrity and authenticity when downloaded from registries that support package signing.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npm audit signatures
```

----------------------------------------

TITLE: Abort Controller with Child Process in Node.js
DESCRIPTION: Example demonstrating how to use AbortController to stop a child process
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const controller = new AbortController();
const { signal } = controller;
const grep = spawn('grep', ['ssh'], { signal });
grep.on('error', (err) => {
  // This will be called with err being an AbortError if the controller aborts
});
controller.abort(); // Stops the child process
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
const controller = new AbortController();
const { signal } = controller;
const grep = spawn('grep', ['ssh'], { signal });
grep.on('error', (err) => {
  // This will be called with err being an AbortError if the controller aborts
});
controller.abort(); // Stops the child process
```

----------------------------------------

TITLE: Creating Readable Stream from Generator
DESCRIPTION: Example showing how to create a Readable stream from an async generator function using Readable.from()
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_62

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

async function * generate() {
  yield 'hello';
  yield 'streams';
}

const readable = Readable.from(generate());

readable.on('data', (chunk) => {
  console.log(chunk);
});
```

----------------------------------------

TITLE: Converting Streams to Arrays with toArray() Method in Node.js
DESCRIPTION: Demonstrates how to collect all stream contents into an array using the toArray() method. The example shows both simple conversion of numbers and advanced usage with concurrent DNS resolution using map() before collecting results.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_46

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { Resolver } from 'node:dns/promises';

await Readable.from([1, 2, 3, 4]).toArray(); // [1, 2, 3, 4]

// Make dns queries concurrently using .map and collect
// the results into an array using toArray
const dnsResults = await Readable.from([
  'nodejs.org',
  'openjsf.org',
  'www.linuxfoundation.org',
]).map(async (domain) => {
  const { address } = await resolver.resolve4(domain, { ttl: true });
  return address;
}, { concurrency: 2 }).toArray();
```

----------------------------------------

TITLE: Using RetryAgent to Automatically Retry HTTP Requests in JavaScript
DESCRIPTION: Example demonstrating how to create and use a RetryAgent to make HTTP requests with automatic retry functionality. The code creates a RetryAgent that wraps a standard Agent instance and then performs a request to example.com with built-in retry capabilities.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/RetryAgent.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Agent, RetryAgent } from 'undici'

const agent = new RetryAgent(new Agent())

const res = await agent.request('http://example.com')
console.log(res.statusCode)
console.log(await res.body.text())
```

----------------------------------------

TITLE: Using executionAsyncResource with Node.js fs (ES Module Syntax) - JavaScript
DESCRIPTION: This snippet illustrates how to use executionAsyncId and executionAsyncResource to inspect the current async resource context in an ES module. It imports open from fs and prints the async ID and resource before and within an async operation (file open). No third-party dependencies are required; this works with Node.js 13.9.0+ in ES module mode. The example demonstrates how execution context IDs change between synchronous and asynchronous code, and what kind of resource is available (empty object vs. FSReqWrap). Inputs are the current execution context, and outputs are IDs and their associated resources.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_17

LANGUAGE: mjs
CODE:
```
import { open } from 'node:fs';
import { executionAsyncId, executionAsyncResource } from 'node:async_hooks';

console.log(executionAsyncId(), executionAsyncResource());  // 1 {}
open(new URL(import.meta.url), 'r', (err, fd) => {
  console.log(executionAsyncId(), executionAsyncResource());  // 7 FSReqWrap
});
```

----------------------------------------

TITLE: Creating a WebSocket with Protocols Only in MJS
DESCRIPTION: This example shows the recommended pattern for creating a WebSocket when no custom dispatcher is needed. It imports WebSocket from 'undici' and creates a connection with specified protocols as an array.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/WebSocket.md#2025-04-23_snippet_1

LANGUAGE: mjs
CODE:
```
import { WebSocket } from 'undici'

const ws = new WebSocket('wss://echo.websocket.events', ['echo', 'chat'])
```

----------------------------------------

TITLE: Run Node.js with Permission Model (Allow FS Read for Main File) (Console)
DESCRIPTION: Demonstrates running a Node.js script (`index.js`) with the Permission Model enabled (`--permission`) and explicitly allowing file system read access to the main entry point (`/path/to/index.js`). This command is shown as the correct way to allow the process to read and execute the main script file itself.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_5

LANGUAGE: Console
CODE:
```
node --permission --allow-fs-read=/path/to/index.js index.js
```

----------------------------------------

TITLE: Transferring a ReadableStream via MessagePort (JavaScript)
DESCRIPTION: This example shows how a `ReadableStream` instance can be transferred between different execution contexts (like Web Workers or other windows/iframes in browsers, or worker_threads in Node.js) using a `MessageChannel`. The stream is sent via `port2.postMessage()` with the stream object included in the transferable list. The receiving port (`port1`) then gets the stream and uses its reader to read data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_8

LANGUAGE: js
CODE:
```
```js
const stream = new ReadableStream(getReadableSourceSomehow());

const { port1, port2 } = new MessageChannel();

port1.onmessage = ({ data }) => {
  data.getReader().read().then((chunk) => {
    console.log(chunk);
  });
};

port2.postMessage(stream, [stream]);
```
```

----------------------------------------

TITLE: Validating Number.prototype.toString Radix Edge Cases in JavaScript
DESCRIPTION: This snippet runs tests to verify how JavaScript's Number.prototype.toString handles different radix parameters, focusing on edge cases including zero, null, booleans, strings, and special number values. It confirms that a RangeError is thrown when the radix is out of bounds (not between 2 and 36) and checks for proper string representations for special values (such as 0, -0, Infinity, and NaN). These checks help ensure ECMAScript-compliant behavior for numeric conversions, requiring a JavaScript environment that supports Number.prototype.toString. The expected outputs and error messages are used to automate verification of JavaScript engine conformance.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/number-toString-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS (0.0).toString(4) is "0"
PASS (-0.0).toString(4) is "0"
PASS (0.0).toString() is "0"
PASS (-0.0).toString() is "0"
PASS (1234.567).toString() is "1234.567"
PASS (1234.567).toString(0) threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString(null) threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString(false) threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString('foo') threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString(nan) threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString(1) threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString(true) threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString('1') threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString(2) is "10011010010.1001000100100110111010010111100011010101"
PASS (1234.567).toString(3) is "1200201.120022100021001021021002202"
PASS (1234.567).toString(4) is "103102.21010212322113203111"
PASS (1234.567).toString(4.9) is "103102.21010212322113203111"
PASS (1234.567).toString(5) is "14414.240414141414141414"
PASS (1234.567).toString(6) is "5414.32224554134430233"
PASS (1234.567).toString(7) is "3412.365323661111653"
PASS (1234.567).toString(8) is "2322.44223351361524"
PASS (1234.567).toString(9) is "1621.50830703723265"
PASS (1234.567).toString(10) is "1234.567"
PASS (1234.567).toString(11) is "a22.62674a0a5885"
PASS (1234.567).toString(12) is "86a.697938b17701"
PASS (1234.567).toString(13) is "73c.74a91191a65"
PASS (1234.567).toString(14) is "642.7d1bc2caa757"
PASS (1234.567).toString(15) is "574.87895959596"
PASS (1234.567).toString(16) is "4d2.9126e978d5"
PASS (1234.567).toString(17) is "44a.9aeb6faa0da"
PASS (1234.567).toString(18) is "3ea.a3cd7102ac"
PASS (1234.567).toString(19) is "37i.aed102a04d"
PASS (1234.567).toString(20) is "31e.b6g"
PASS (1234.567).toString(21) is "2gg.bj0kf5cfe9"
PASS (1234.567).toString(22) is "2c2.ca9937cak"
PASS (1234.567).toString(23) is "27f.d0lfjb1a7c"
PASS (1234.567).toString(24) is "23a.dee4nj99j"
PASS (1234.567).toString(25) is "1o9.e49999999"
PASS (1234.567).toString(26) is "1lc.ej7fa4pkf"
PASS (1234.567).toString(27) is "1ij.f8971772k"
PASS (1234.567).toString(28) is "1g2.foelqia8e"
PASS (1234.567).toString(29) is "1dg.gcog9e05q"
PASS (1234.567).toString(30) is "1b4.h09"
PASS (1234.567).toString(31) is "18p.hhrfcj3t"
PASS (1234.567).toString(32) is "16i.i4jeiu6l"
PASS (1234.567).toString(33) is "14d.inf96rdvm"
PASS (1234.567).toString(34) is "12a.j9fchdtm"
PASS (1234.567).toString(35) is "109.jtk4d4d4e"
PASS (1234.567).toString(36) is "ya.kety9sifl"
PASS (1234.567).toString(37) threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString(-1) threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString(posInf) threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS (1234.567).toString(negInf) threw exception RangeError: toString() radix argument must be between 2 and 36.
PASS posInf.toString() is "Infinity"
PASS negInf.toString() is "-Infinity"
PASS nan.toString() is "NaN"
PASS "" + -0.0 is "0"
PASS successfullyParsed is true

TEST COMPLETE

```

----------------------------------------

TITLE: Running npm-doctor Command in Bash
DESCRIPTION: This snippet shows the syntax for running the npm-doctor command. It can check various aspects of the npm environment such as connection, registry, versions, environment, permissions, and cache.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-doctor.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm doctor [connection] [registry] [versions] [environment] [permissions] [cache]
```

----------------------------------------

TITLE: Finding Last Index in Buffer (Node.js) - JavaScript
DESCRIPTION: Illustrates the `lastIndexOf()` method for finding the last index of a `value` (string, Buffer, Uint8Array, or integer) within a Buffer. Includes examples searching for different types, using offsets, and demonstrates behavior with invalid or coerced parameters and empty search values. Returns -1 if the value is not found.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_59

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from('this buffer is a buffer');

console.log(buf.lastIndexOf('this'));
// Prints: 0
console.log(buf.lastIndexOf('buffer'));
// Prints: 17
console.log(buf.lastIndexOf(Buffer.from('buffer')));
// Prints: 17
console.log(buf.lastIndexOf(97));
// Prints: 15 (97 is the decimal ASCII value for 'a')
console.log(buf.lastIndexOf(Buffer.from('yolo')));
// Prints: -1
console.log(buf.lastIndexOf('buffer', 5));
// Prints: 5
console.log(buf.lastIndexOf('buffer', 4));
// Prints: -1

const utf16Buffer = Buffer.from('\u039a\u0391\u03a3\u03a3\u0395', 'utf16le');

console.log(utf16Buffer.lastIndexOf('\u03a3', undefined, 'utf16le'));
// Prints: 6
console.log(utf16Buffer.lastIndexOf('\u03a3', -5, 'utf16le'));
// Prints: 4

const b = Buffer.from('abcdef');

// Passing a value that's a number, but not a valid byte.
// Prints: 2, equivalent to searching for 99 or 'c'.
console.log(b.lastIndexOf(99.9));
console.log(b.lastIndexOf(256 + 99));

// Passing a byteOffset that coerces to NaN.
// Prints: 1, searching the whole buffer.
console.log(b.lastIndexOf('b', undefined));
console.log(b.lastIndexOf('b', {}));

// Passing a byteOffset that coerces to 0.
// Prints: -1, equivalent to passing 0.
console.log(b.lastIndexOf('b', null));
console.log(b.lastIndexOf('b', []));
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('this buffer is a buffer');

console.log(buf.lastIndexOf('this'));
// Prints: 0
console.log(buf.lastIndexOf('buffer'));
// Prints: 17
console.log(buf.lastIndexOf(Buffer.from('buffer')));
// Prints: 17
console.log(buf.lastIndexOf(97));
// Prints: 15 (97 is the decimal ASCII value for 'a')
console.log(buf.lastIndexOf(Buffer.from('yolo')));
// Prints: -1
console.log(buf.lastIndexOf('buffer', 5));
// Prints: 5
console.log(buf.lastIndexOf('buffer', 4));
// Prints: -1

const utf16Buffer = Buffer.from('\u039a\u0391\u03a3\u03a3\u0395', 'utf16le');

console.log(utf16Buffer.lastIndexOf('\u03a3', undefined, 'utf16le'));
// Prints: 6
console.log(utf16Buffer.lastIndexOf('\u03a3', -5, 'utf16le'));
// Prints: 4

const b = Buffer.from('abcdef');

// Passing a value that's a number, but not a valid byte.
// Prints: 2, equivalent to searching for 99 or 'c'.
console.log(b.lastIndexOf(99.9));
console.log(b.lastIndexOf(256 + 99));

// Passing a byteOffset that coerces to NaN.
// Prints: 1, searching the whole buffer.
console.log(b.lastIndexOf('b', undefined));
console.log(b.lastIndexOf('b', {}));

// Passing a byteOffset that coerces to 0.
// Prints: -1, equivalent to passing 0.
console.log(b.lastIndexOf('b', null));
console.log(b.lastIndexOf('b', []));
```

----------------------------------------

TITLE: Monitoring Uncaught Exceptions in Node.js (ESM)
DESCRIPTION: Example of attaching an 'uncaughtExceptionMonitor' event handler in Node.js using ESM imports. This event allows monitoring exceptions without changing the default crash behavior. The process will still crash after the monitor handler executes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
import process from 'node:process';

process.on('uncaughtExceptionMonitor', (err, origin) => {
  MyMonitoringTool.logSync(err, origin);
});

// Intentionally cause an exception, but don't catch it.
nonexistentFunc();
// Still crashes Node.js
```

----------------------------------------

TITLE: Running Tests in All Workspaces
DESCRIPTION: Shows how to run tests in all configured workspaces using the workspaces config.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-run-script.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
npm test --workspaces
```

----------------------------------------

TITLE: Defining Abseil C++ Function Utility Libraries - Bash Build Script
DESCRIPTION: This snippet uses custom macros in a Bash-compatible CMake-like script to declare C++ library and test targets for function-related utilities in Abseil. It specifies names, source and header files, compiler options, and all relevant dependencies, enabling modular builds and easy test integration. The configuration supports incremental builds, encapsulates best practices in C++ library management, and requires Abseil's build tooling along with external test frameworks like GTest, with target-specific and global options passed via variables such as ABSL_DEFAULT_COPTS and ABSL_TEST_COPTS.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/functional/CMakeLists.txt#2025-04-23_snippet_0

LANGUAGE: Bash
CODE:
```
#
# Copyright 2019 The Abseil Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

absl_cc_library(
  NAME
    any_invocable
  SRCS
    "internal/any_invocable.h"
  HDRS
    "any_invocable.h"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::base_internal
    absl::config
    absl::core_headers
    absl::type_traits
    absl::utility
  PUBLIC
)

absl_cc_test(
  NAME
    any_invocable_test
  SRCS
    "any_invocable_test.cc"
    "internal/any_invocable.h"
  COPTS
    ${ABSL_TEST_COPTS}
  DEPS
    absl::any_invocable
    absl::base_internal
    absl::config
    absl::core_headers
    absl::type_traits
    absl::utility
    GTest::gmock_main
)

absl_cc_library(
  NAME
    bind_front
  SRCS
    "internal/front_binder.h"
  HDRS
    "bind_front.h"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::base_internal
    absl::compressed_tuple
  PUBLIC
)

absl_cc_test(
  NAME
    bind_front_test
  SRCS
    "bind_front_test.cc"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::bind_front
    absl::memory
    GTest::gmock_main
)

absl_cc_library(
  NAME
    function_ref
  SRCS
    "internal/function_ref.h"
  HDRS
    "function_ref.h"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::base_internal
    absl::core_headers
    absl::any_invocable
    absl::meta
  PUBLIC
)

absl_cc_test(
  NAME
    function_ref_test
  SRCS
    "function_ref_test.cc"
  COPTS
    ${ABSL_TEST_COPTS}
  DEPS
    absl::function_ref
    absl::memory
    absl::test_instance_tracker
    GTest::gmock_main
)

absl_cc_library(
  NAME
    overload
  HDRS
    "overload.h"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::meta
  PUBLIC
)

absl_cc_test(
  NAME
    overload_test
  SRCS
    "overload_test.cc"
  COPTS
    ${ABSL_TEST_COPTS}
  DEPS
    absl::config
    absl::overload
    absl::string_view
    absl::strings
    absl::variant
    GTest::gmock_main
)

```

----------------------------------------

TITLE: Creating Temporary Directory Using fsPromises.mkdtemp
DESCRIPTION: Example of creating a unique temporary directory using Node.js fs promises API. The code demonstrates using the system's temporary directory with a prefix.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_26

LANGUAGE: javascript
CODE:
```
import { mkdtemp } from 'node:fs/promises';
import { join } from 'node:path';
import { tmpdir } from 'node:os';

try {
  await mkdtemp(join(tmpdir(), 'foo-'));
} catch (err) {
  console.error(err);
}
```

----------------------------------------

TITLE: Accessing Node.js Timers Promises API (MJS/CJS)
DESCRIPTION: Shows the standard way to import or require the promise-based timer functions (`setTimeout`, `setImmediate`, `setInterval`) from the built-in `node:timers/promises` module in both ES Module and CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_2

LANGUAGE: mjs
CODE:
```
import {
  setTimeout,
  setImmediate,
  setInterval,
} from 'node:timers/promises';
```

LANGUAGE: cjs
CODE:
```
const {
  setTimeout,
  setImmediate,
  setInterval,
} = require('node:timers/promises');
```

----------------------------------------

TITLE: Resolving IP and Port to Hostname and Service with dns.lookupService() in Node.js
DESCRIPTION: Shows how to use dns.lookupService() to resolve an IP address and port number into a hostname and service name. The example includes both ES module and CommonJS usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
import dns from 'node:dns';
dns.lookupService('127.0.0.1', 22, (err, hostname, service) => {
  console.log(hostname, service);
  // Prints: localhost ssh
});
```

LANGUAGE: JavaScript
CODE:
```
const dns = require('node:dns');
dns.lookupService('127.0.0.1', 22, (err, hostname, service) => {
  console.log(hostname, service);
  // Prints: localhost ssh
});
```

----------------------------------------

TITLE: Using npm dedupe Command (Bash)
DESCRIPTION: Basic usage of the npm dedupe command with its alias. This command simplifies the package tree structure by moving dependencies up in the hierarchy.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-dedupe.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm dedupe

alias: ddp
```

----------------------------------------

TITLE: Using randomFillSync with Buffer in Node.js
DESCRIPTION: Demonstrates how to use the randomFillSync function to fill a buffer with cryptographically strong random data. Shows usage with different buffer types including Buffer, TypedArray, and DataView.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_90

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';
const { randomFillSync } = await import('node:crypto');

const buf = Buffer.alloc(10);
console.log(randomFillSync(buf).toString('hex'));

randomFillSync(buf, 5);
console.log(buf.toString('hex'));

// The above is equivalent to the following:
randomFillSync(buf, 5, 5);
console.log(buf.toString('hex'));
```

----------------------------------------

TITLE: Generating Heap Snapshots Near Limit (Console)
DESCRIPTION: This console example shows how to use the `--heapsnapshot-near-heap-limit` flag with a maximum snapshot count and a small heap size (`--max-old-space-size`). It illustrates the process writing multiple heap snapshots before the process eventually runs out of memory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_24

LANGUAGE: console
CODE:
```
$ node --max-old-space-size=100 --heapsnapshot-near-heap-limit=3 index.js
Wrote snapshot to Heap.20200430.100036.49580.0.001.heapsnapshot
Wrote snapshot to Heap.20200430.100037.49580.0.002.heapsnapshot
Wrote snapshot to Heap.20200430.100038.49580.0.003.heapsnapshot

<--- Last few GCs --->

[49580:0x110000000]     4826 ms: Mark-sweep 130.6 (147.8) -> 130.5 (147.8) MB, 27.4 / 0.0 ms  (average mu = 0.126, current mu = 0.034) allocation failure scavenge might not succeed
[49580:0x110000000]     4845 ms: Mark-sweep 130.6 (147.8) -> 130.6 (147.8) MB, 18.8 / 0.0 ms  (average mu = 0.088, current mu = 0.031) allocation failure scavenge might not succeed


<--- JS stacktrace --->

FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory
....
```

----------------------------------------

TITLE: Reading Last 10 Bytes of a File
DESCRIPTION: Demonstrates how to create a read stream to read the last 10 bytes of a 100-byte file using the FileHandle API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { open } from 'node:fs/promises';

const fd = await open('sample.txt');
fd.createReadStream({ start: 90, end: 99 });
```

----------------------------------------

TITLE: Allocating Buffer with String Fill using Buffer.alloc (MJS)
DESCRIPTION: Demonstrates allocating a new Node.js Buffer of a specified size and initializing it by filling it with a given string. The string is interpreted using the default 'utf8' encoding. Requires importing `Buffer` from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.alloc(5, 'a');

console.log(buf);
// Prints: <Buffer 61 61 61 61 61>
```

----------------------------------------

TITLE: Setting and Getting HTTP Response Headers in Node.js (JavaScript)
DESCRIPTION: Demonstrates how to set, retrieve, and interpret HTTP response headers using Node.js http.ServerResponse. Requires Node.js, with Buffer if calculating body length. Shows how header values can be primitive types or arrays, and that getHeader returns the values as they were set via setHeader. Inputs depend on which headers are set; outputs are the header value as set. Note that header names are case-insensitive and value types are preserved unless sent.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_31

LANGUAGE: js
CODE:
```
response.setHeader('Content-Type', 'text/html');
response.setHeader('Content-Length', Buffer.byteLength(body));
response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);
const contentType = response.getHeader('content-type');
// contentType is 'text/html'
const contentLength = response.getHeader('Content-Length');
// contentLength is of type number
const setCookie = response.getHeader('set-cookie');
// setCookie is of type string[]

```

----------------------------------------

TITLE: Using execFileSync with CommonJS in Node.js
DESCRIPTION: Demonstrates synchronously executing an external script ('my-script.sh') with arguments using `execFileSync` via CommonJS `require`. It captures stdout and stderr by setting `stdio` to 'pipe' and uses 'utf8' encoding. Includes error handling to differentiate between process spawn failures and non-zero exit codes, logging relevant output.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_31

LANGUAGE: cjs
CODE:
```
const { execFileSync } = require('node:child_process');

try {
  const stdout = execFileSync('my-script.sh', ['my-arg'], {
    // Capture stdout and stderr from child process. Overrides the
    // default behavior of streaming child stderr to the parent stderr
    stdio: 'pipe',

    // Use utf8 encoding for stdio pipes
    encoding: 'utf8',
  });

  console.log(stdout);
} catch (err) {
  if (err.code) {
    // Spawning child process failed
    console.error(err.code);
  } else {
    // Child was spawned but exited with non-zero exit code
    // Error contains any stdout and stderr from the child
    const { stdout, stderr } = err;

    console.error({ stdout, stderr });
  }
}
```

----------------------------------------

TITLE: Finding Relative Paths in Node.js
DESCRIPTION: The path.relative() method calculates the relative path from one location to another. It returns a string that, when joined to the first path, resolves to the second path.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_34

LANGUAGE: javascript
CODE:
```
path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb');
// Returns: '../../impl/bbb'
```

LANGUAGE: javascript
CODE:
```
path.relative('C:\\orandea\\test\\aaa', 'C:\\orandea\\impl\\bbb');
// Returns: '..\\..\\impl\\bbb'
```

----------------------------------------

TITLE: Using assert.throws with Precise Error Message Regex in JavaScript
DESCRIPTION: Shows the recommended practice for using `assert.throws` in Node.js tests when checking for specific error messages. It demonstrates verifying the exact error message by providing a regular expression that matches the complete string, anchored at the start (`^`) and end (`$`). Depends on the `node:assert` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-tests.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  /^Error: Wrong value$/, // Instead of something like /Wrong value/
);
```

----------------------------------------

TITLE: Accessing Package.json Variables in npm Scripts
DESCRIPTION: Example of how to access package.json fields as environment variables in npm scripts. This shows how the 'name' and 'version' fields are made available.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scripts.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "name" : "foo",
  "dependencies" : {
    "bar" : "0.1.x"
  },
  "scripts": {
    "start" : "bar ./test"
  }
}
```

----------------------------------------

TITLE: Single-step Deflate Compression and Unzip Decompression using ES Modules
DESCRIPTION: Shows how to compress a string using `zlib.deflate` and decompress a Base64 encoded buffer using `zlib.unzip` in a single operation using callbacks. It also demonstrates using `util.promisify` to convert the callback-based `unzip` function into a promise-returning function for use with `async/await`. Uses ES Module syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_6

LANGUAGE: mjs
CODE:
```
import process from 'node:process';
import { Buffer } from 'node:buffer';
import { deflate, unzip } from 'node:zlib';

const input = '.................................';
deflate(input, (err, buffer) => {
  if (err) {
    console.error('An error occurred:', err);
    process.exitCode = 1;
  }
  console.log(buffer.toString('base64'));
});

const buffer = Buffer.from('eJzT0yMAAGTvBe8=', 'base64');
unzip(buffer, (err, buffer) => {
  if (err) {
    console.error('An error occurred:', err);
    process.exitCode = 1;
  }
  console.log(buffer.toString());
});

// Or, Promisified

import { promisify } from 'node:util';
const do_unzip = promisify(unzip);

const unzippedBuffer = await do_unzip(buffer);
console.log(unzippedBuffer.toString());
```

----------------------------------------

TITLE: Generating Self-Signed Server Certificate using OpenSSL
DESCRIPTION: Provides the `openssl` command to generate a self-signed X.509 certificate (`server-cert.pem`) and a corresponding 2048-bit RSA private key (`server-key.pem`) suitable for testing the Node.js TLS server examples. The `-nodes` option prevents encryption of the private key, and `-subj` sets the subject name, commonly '/CN=localhost' for local testing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_28

LANGUAGE: bash
CODE:
```
openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \
  -keyout server-key.pem -out server-cert.pem
```

----------------------------------------

TITLE: Creating Custom Test Reporter with Transform (ESM)
DESCRIPTION: Illustrates implementing a custom test reporter using Node.js `stream.Transform` in ESM. It processes various test events (`test:start`, `test:pass`, etc.) emitted by a `TestsStream` and transforms them into simple string outputs. Depends on `node:stream`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_30

LANGUAGE: mjs
CODE:
```
import { Transform } from 'node:stream';

const customReporter = new Transform({
  writableObjectMode: true,
  transform(event, encoding, callback) {
    switch (event.type) {
      case 'test:dequeue':
        callback(null, `test ${event.data.name} dequeued`);
        break;
      case 'test:enqueue':
        callback(null, `test ${event.data.name} enqueued`);
        break;
      case 'test:watch:drained':
        callback(null, 'test watch queue drained');
        break;
      case 'test:start':
        callback(null, `test ${event.data.name} started`);
        break;
      case 'test:pass':
        callback(null, `test ${event.data.name} passed`);
        break;
      case 'test:fail':
        callback(null, `test ${event.data.name} failed`);
        break;
      case 'test:plan':
        callback(null, 'test plan');
        break;
      case 'test:diagnostic':
      case 'test:stderr':
      case 'test:stdout':
        callback(null, event.data.message);
        break;
      case 'test:coverage': {
        const { totalLineCount } = event.data.summary.totals;
        callback(null, `total line count: ${totalLineCount}\n`);
        break;
      }
    }
  },
});

export default customReporter;
```

----------------------------------------

TITLE: Converting Stream to JSON in Node.js
DESCRIPTION: Demonstrates parsing a readable stream as JSON using the streamConsumers.json() utility. Shows implementation in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
import { json } from 'node:stream/consumers';
import { Readable } from 'node:stream';

const items = Array.from(
  {
    length: 100,
  },
  () => ({
    message: 'hello world from consumers!',
  }),
);

const readable = Readable.from(JSON.stringify(items));
const data = await json(readable);
console.log(`from readable: ${data.length}`);
// Prints: from readable: 100
```

LANGUAGE: javascript
CODE:
```
const { json } = require('node:stream/consumers');
const { Readable } = require('node:stream');

const items = Array.from(
  {
    length: 100,
  },
  () => ({
    message: 'hello world from consumers!',
  }),
);

const readable = Readable.from(JSON.stringify(items));
json(readable).then((data) => {
  console.log(`from readable: ${data.length}`);
  // Prints: from readable: 100
});
```

----------------------------------------

TITLE: Show vulnerability details without fixing
DESCRIPTION: Command to scan the project for vulnerabilities and display the details without applying any remediation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
$ npm audit
```

----------------------------------------

TITLE: Serving Compressed HTTP Responses with zlib (CommonJS, JavaScript/Node.js)
DESCRIPTION: This CommonJS Node.js server snippet accepts HTTP requests and delivers index.html compressed with deflate, gzip, br, or zstd, depending on the client's Accept-Encoding. It uses core modules node:zlib, node:http, node:fs, and node:stream. For each request, it reads from disk, detects accepted encodings, and pipes the resource through the selected compression stream(s) before sending the response. Limitations: The Accept-Encoding parser is simplistic and does not handle priorities; compressing on every request is inefficient (caching is advised for production). Error handling terminates the response and logs issues if they arise.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_13

LANGUAGE: cjs
CODE:
```
// server example\n// Running a gzip operation on every request is quite expensive.\n// It would be much more efficient to cache the compressed buffer.\nconst zlib = require('node:zlib');\nconst http = require('node:http');\nconst fs = require('node:fs');\nconst { pipeline } = require('node:stream');\n\nhttp.createServer((request, response) => {\n  const raw = fs.createReadStream('index.html');\n  // Store both a compressed and an uncompressed version of the resource.\n  response.setHeader('Vary', 'Accept-Encoding');\n  const acceptEncoding = request.headers['accept-encoding'] || '';\n\n  const onError = (err) => {\n    if (err) {\n      // If an error occurs, there's not much we can do because\n      // the server has already sent the 200 response code and\n      // some amount of data has already been sent to the client.\n      // The best we can do is terminate the response immediately\n      // and log the error.\n      response.end();\n      console.error('An error occurred:', err);\n    }\n  };\n\n  // Note: This is not a conformant accept-encoding parser.\n  // See https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n  if (/\\bdeflate\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'deflate' });\n    pipeline(raw, zlib.createDeflate(), response, onError);\n  } else if (/\\bgzip\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'gzip' });\n    pipeline(raw, zlib.createGzip(), response, onError);\n  } else if (/\\bbr\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'br' });\n    pipeline(raw, zlib.createBrotliCompress(), response, onError);\n  } else if (/\\bzstd\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'zstd' });\n    pipeline(raw, zlib.createZstdCompress(), response, onError);\n  } else {\n    response.writeHead(200, {});\n    pipeline(raw, response, onError);\n  }\n}).listen(1337);
```

----------------------------------------

TITLE: Handling 'upgrade' Event between HTTP Client and Server (CommonJS) - JavaScript
DESCRIPTION: Exemplifies a Node.js HTTP server and client using CommonJS to handle upgrade requests, such as for WebSocket protocols. The server listens for 'upgrade' events and writes a 101 response with appropriate headers. The client sends an upgrade request and, upon 'upgrade', acknowledges and terminates the socket. Requires 'node:http' and both server/client must run on the same port. Useful for demonstrating custom protocol handshakes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_10

LANGUAGE: cjs
CODE:
```
const http = require('node:http');

// Create an HTTP server
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('okay');
});
server.on('upgrade', (req, socket, head) => {
  socket.write('HTTP/1.1 101 Web Socket Protocol Handshake\r\n' +
               'Upgrade: WebSocket\r\n' +
               'Connection: Upgrade\r\n' +
               '\r\n');

  socket.pipe(socket); // echo back
});

// Now that server is running
server.listen(1337, '127.0.0.1', () => {

  // make a request
  const options = {
    port: 1337,
    host: '127.0.0.1',
    headers: {
      'Connection': 'Upgrade',
      'Upgrade': 'websocket',
    },
  };

  const req = http.request(options);
  req.end();

  req.on('upgrade', (res, socket, upgradeHead) => {
    console.log('got upgraded!');
    socket.end();
    process.exit(0);
  });
});

```

----------------------------------------

TITLE: Package Type Configuration
DESCRIPTION: Example of setting module type in package.json for ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_26

LANGUAGE: json
CODE:
```
{
  "type": "module"
}
```

----------------------------------------

TITLE: File/Directory Removal with fs.rmSync
DESCRIPTION: Synchronously removes files and directories with POSIX rm-like behavior. Supports recursive removal and retry options for busy files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_96

LANGUAGE: javascript
CODE:
```
fs.rmSync(path[, options])
```

----------------------------------------

TITLE: Force major updates to fix vulnerabilities
DESCRIPTION: Command to force npm to install SemVer-major updates to top-level dependencies during audit fix, not just SemVer-compatible ones.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
$ npm audit fix --force
```

----------------------------------------

TITLE: Writing Files with Encoding Option in Node.js
DESCRIPTION: Shows how to use fs.writeFile with a string encoding option instead of an options object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_80

LANGUAGE: javascript
CODE:
```
import { writeFile } from 'node:fs';

writeFile('message.txt', 'Hello Node.js', 'utf8', callback);
```

----------------------------------------

TITLE: Using getEntriesByType() with PerformanceObserver in CommonJS
DESCRIPTION: Demonstrates how to use the getEntriesByType() method to filter performance entries by type in CommonJS. Shows retrieving all entries of type 'mark' in chronological order.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((perfObserverList, observer) => {
  console.log(perfObserverList.getEntriesByType('mark'));
  /**
   * [
   *   PerformanceEntry {
   *     name: 'test',
   *     entryType: 'mark',
   *     startTime: 55.897834,
   *     duration: 0,
   *     detail: null
   *   },
   *   PerformanceEntry {
   *     name: 'meow',
   *     entryType: 'mark',
   *     startTime: 56.350146,
   *     duration: 0,
   *     detail: null
   *   }
   * ]
   */
  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ type: 'mark' });

performance.mark('test');
performance.mark('meow');
```

----------------------------------------

TITLE: Importing test module (CJS) - Node.js
DESCRIPTION: Demonstrates how to import the `node:test` module using CommonJS syntax (`require`). This is used in traditional Node.js projects or environments where CommonJS modules are still in use.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const test = require('node:test');
```

----------------------------------------

TITLE: Testing Array.prototype.every() with Single Argument in JavaScript
DESCRIPTION: This snippet demonstrates the usage of the every() method with a single callback function to check if all elements in an array meet a certain condition.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-every-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every(isBigEnough)
```

LANGUAGE: javascript
CODE:
```
[12, 54, 18, 130, 44].every(isBigEnough)
```

----------------------------------------

TITLE: Returning Logical or Comparison Result - JavaScript
DESCRIPTION: Tests the result of a logical or comparison expression when used directly in a return statement. Various expressions involving logical OR (||), AND (&&), equality (==, ===), and inequality (!=, !==) operators are evaluated.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-expected.txt#_snippet_4

LANGUAGE: javascript
CODE:
```
return ("b"==letterA);
```

----------------------------------------

TITLE: Defining a Start Script in package.json (JSON)
DESCRIPTION: Provides an example of how to define a custom `start` script within the `scripts` object in a `package.json` file. In this case, `npm start` will execute `node foo.js`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-start.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "start": "node foo.js"
  }
}
```

----------------------------------------

TITLE: Basic Event Listener Registration with on()
DESCRIPTION: Demonstrates how to register an event listener using the on() method for a 'connection' event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
server.on('connection', (stream) => {
  console.log('someone connected!');
});
```

----------------------------------------

TITLE: Implementing Conditional Exports in package.json
DESCRIPTION: Shows how to define conditional exports in package.json to provide different entry points based on how the package is being imported (via import or require). This allows for dual CommonJS and ES module support.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_17

LANGUAGE: json
CODE:
```
// package.json
{
  "exports": {
    "import": "./index-module.js",
    "require": "./index-require.cjs"
  },
  "type": "module"
}
```

----------------------------------------

TITLE: Using the URL href Property
DESCRIPTION: Example showing how to get and set the complete URL string using the href property.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://example.org/foo');
console.log(myURL.href);
// Prints https://example.org/foo

myURL.href = 'https://example.com/bar';
console.log(myURL.href);
// Prints https://example.com/bar
```

----------------------------------------

TITLE: Unhandled Promise Rejection Example
DESCRIPTION: Example demonstrating potential unhandled rejection when using Readable.from() with promises
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_63

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

Readable.from([
  new Promise((resolve) => setTimeout(resolve('1'), 1500)),
  new Promise((_, reject) => setTimeout(reject(new Error('2')), 1000)), // Unhandled rejection
]);
```

----------------------------------------

TITLE: Creating a Brotli Compression Stream with Custom Options in JavaScript
DESCRIPTION: This snippet demonstrates how to create a Brotli compression stream with custom chunk size and compression parameters. It sets the compression mode to text, quality to 4, and provides a size hint based on the input file size.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_18

LANGUAGE: JavaScript
CODE:
```
const stream = zlib.createBrotliCompress({
  chunkSize: 32 * 1024,
  params: {
    [zlib.constants.BROTLI_PARAM_MODE]: zlib.constants.BROTLI_MODE_TEXT,
    [zlib.constants.BROTLI_PARAM_QUALITY]: 4,
    [zlib.constants.BROTLI_PARAM_SIZE_HINT]: fs.statSync(inputFile).size,
  },
});
```

----------------------------------------

TITLE: Triggering a TypeError with node:url in JavaScript
DESCRIPTION: This snippet demonstrates causing and catching a TypeError by invoking the parse function from the node:url module with an invalid argument type. It requires Node.js and relies on the node:url core module. The function expects a string parameter, but a function is passed, resulting in an immediate TypeError. The output is a thrown TypeError that can be inspected for validation and debugging.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
require('node:url').parse(() => { });
// Throws TypeError, since it expected a string.
```

----------------------------------------

TITLE: Setting Script Configuration Parameters in package.json (JSON)
DESCRIPTION: This JSON example demonstrates the use of the `config` field in `package.json` to define configuration parameters (like `port`). These values become environment variables (`npm_package_config_<key>`, e.g., `npm_package_config_port`) accessible within npm scripts, allowing for configurable behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_14

LANGUAGE: json
CODE:
```
{
  "name": "foo",
  "config": {
    "port": "8080"
  }
}
```

----------------------------------------

TITLE: Using Readline Promise API in Node.js
DESCRIPTION: Demonstrates how to use the new Readline Promise API to read user input asynchronously. It imports the readline/promises module, creates an interface, and uses await to get user input.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V17.md#2025-04-23_snippet_40

LANGUAGE: JavaScript
CODE:
```
import * as readline from 'node:readline/promises';
import { stdin as input, stdout as output } from 'process';

const rl = readline.createInterface({ input, output });

const answer = await rl.question('What do you think of Node.js? ');

console.log(`Thank you for your valuable feedback: ${answer}`);

rl.close();
```

----------------------------------------

TITLE: Creating a Node.js Cluster Server (CommonJS)
DESCRIPTION: This snippet shows how to create a cluster of Node.js processes using CommonJS modules. It performs the same functionality as the ES modules version, forking workers and setting up an HTTP server on port 8000.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const cluster = require('node:cluster');
const http = require('node:http');
const numCPUs = require('node:os').availableParallelism();
const process = require('node:process');

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end('hello world\n');
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}
```

----------------------------------------

TITLE: Adding New Stream Methods in Node.js
DESCRIPTION: Introduces new methods for streams including find, toArray, forEach, some, and every. These additions enhance the functionality and ease of use of streams in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V17.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
{{1ae648567a}} - **(SEMVER-MINOR)** **stream**: add iterator helper find (linkgoron) [#41849](https://github.com/nodejs/node/pull/41849)
{{62e1a68077}} - **(SEMVER-MINOR)** **stream**: add toArray (Benjamin Gruenbaum) [#41553](https://github.com/nodejs/node/pull/41553)
{{da11b95988}} - **(SEMVER-MINOR)** **stream**: add forEach method (Benjamin Gruenbaum) [#41445](https://github.com/nodejs/node/pull/41445)
{{34684a1c89}} - **(SEMVER-MINOR)** **stream**: support some and every (Benjamin Gruenbaum) [#41573](https://github.com/nodejs/node/pull/41573)
```

----------------------------------------

TITLE: Executing npm uninstall Command in Bash
DESCRIPTION: This snippet shows the basic syntax for using the npm uninstall command. It can be used to remove a package from a Node.js project, including scoped packages. The command has several aliases: unlink, remove, rm, r, and un.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-uninstall.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm uninstall [<@scope>/]<pkg>...
```

----------------------------------------

TITLE: Installing mkdirp via npm for Local and Global Use - Shell
DESCRIPTION: This code segment demonstrates how to install the mkdirp package either locally (for use as a project dependency) or globally (for system-wide CLI access) via npm. It also shows using npx to run the binary directly without installation. These are shell commands intended to be run in a terminal with npm available. No input other than the command itself, outputs depend on npm installation results.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_4

LANGUAGE: Shell
CODE:
```
npm install mkdirp
```

LANGUAGE: Shell
CODE:
```
npm install -g mkdirp
```

LANGUAGE: Shell
CODE:
```
npx mkdirp ...
```

----------------------------------------

TITLE: Using crypto.hkdf() for Key Derivation
DESCRIPTION: Examples of using the HKDF (HMAC-based Key Derivation Function) in both async and sync forms to derive cryptographic keys from input material.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_80

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';
const {
  hkdf,
} = await import('node:crypto');

hkdf('sha512', 'key', 'salt', 'info', 64, (err, derivedKey) => {
  if (err) throw err;
  console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'
});
```

LANGUAGE: javascript
CODE:
```
const {
  hkdf,
} = require('node:crypto');
const { Buffer } = require('node:buffer');

hkdf('sha512', 'key', 'salt', 'info', 64, (err, derivedKey) => {
  if (err) throw err;
  console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'
});
```

----------------------------------------

TITLE: NPM Outdated Command Example Output
DESCRIPTION: Demonstrates example output of the npm outdated command showing package versions including current, wanted, and latest versions along with their locations and dependent packages.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-outdated.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npm outdated
Package      Current   Wanted   Latest  Location                  Depended by
glob          5.0.15   5.0.15    6.0.1  node_modules/glob         dependent-package-name
nothingness    0.0.3      git      git  node_modules/nothingness  dependent-package-name
npm            3.5.1    3.5.2    3.5.1  node_modules/npm          dependent-package-name
local-dev      0.0.3   linked   linked  local-dev                 dependent-package-name
once           1.3.2    1.3.3    1.3.3  node_modules/once         dependent-package-name
```

----------------------------------------

TITLE: Extracting File Extension using path.extname (Hidden File with Extension)
DESCRIPTION: Shows `path.extname()` returning the extension ('.md') for a hidden file (starting with a dot) that also has an extension.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_20

LANGUAGE: js
CODE:
```
path.extname('.index.md');
// Returns: '.md'
```

----------------------------------------

TITLE: Copying stdin to stdout in Node.js (ES Modules)
DESCRIPTION: This snippet demonstrates how to pipe the process.stdin stream to process.stdout using ES Modules syntax. It imports the stdin and stdout streams from the 'node:process' module and uses the pipe method to connect them.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_93

LANGUAGE: JavaScript
CODE:
```
import { stdin, stdout } from 'node:process';

stdin.pipe(stdout);
```

----------------------------------------

TITLE: Get detailed audit report in JSON format
DESCRIPTION: Command to scan for vulnerabilities and output the detailed report in JSON format for programmatic processing.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
$ npm audit --json
```

----------------------------------------

TITLE: Calling JavaScript Function from C Native Code
DESCRIPTION: Example C code that retrieves a JavaScript function "AddTwo" from the global object, calls it with an argument, and converts the result back to a native type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_167

LANGUAGE: c
CODE:
```
// Get the function named "AddTwo" on the global object
napi_value global, add_two, arg;
napi_status status = napi_get_global(env, &global);
if (status != napi_ok) return;

status = napi_get_named_property(env, global, "AddTwo", &add_two);
if (status != napi_ok) return;

// const arg = 1337
status = napi_create_int32(env, 1337, &arg);
if (status != napi_ok) return;

napi_value* argv = &arg;
size_t argc = 1;

// AddTwo(arg);
napi_value return_val;
status = napi_call_function(env, global, add_two, argc, argv, &return_val);
if (status != napi_ok) return;

// Convert the result back to a native type
int32_t result;
status = napi_get_value_int32(env, return_val, &result);
if (status != napi_ok) return;
```

----------------------------------------

TITLE: Handling 'warning' Event in Node.js (ES Modules)
DESCRIPTION: This snippet demonstrates how to listen for and handle the 'warning' event in Node.js using ES Modules. It shows how to access and log the warning's name, message, and stack trace.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_20

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

process.on('warning', (warning) => {
  console.warn(warning.name);    // Print the warning name
  console.warn(warning.message); // Print the warning message
  console.warn(warning.stack);   // Print the stack trace
});
```

----------------------------------------

TITLE: Using AbortController with Readable Stream - Node.js
DESCRIPTION: This snippet demonstrates how to use an AbortController with a Readable stream. It allows for aborting the stream operation using the AbortController.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_84

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');
const controller = new AbortController();
const read = new Readable({
  read(size) {
    // ...
  },
  signal: controller.signal,
});
// Later, abort the operation closing the stream
controller.abort();
```

----------------------------------------

TITLE: Handling Uncaught Exceptions in Node.js (ESM)
DESCRIPTION: Example of attaching an 'uncaughtException' event handler in Node.js using ESM imports. The handler logs the exception details to stderr before the process exits. The code demonstrates that scheduled tasks will still run before the exception is thrown.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
import process from 'node:process';
import fs from 'node:fs';

process.on('uncaughtException', (err, origin) => {
  fs.writeSync(
    process.stderr.fd,
    `Caught exception: ${err}\n` +
    `Exception origin: ${origin}\n`,
  );
});

setTimeout(() => {
  console.log('This will still run.');
}, 500);

// Intentionally cause an exception, but don't catch it.
nonexistentFunc();
console.log('This will not run.');
```

----------------------------------------

TITLE: Using setTimeout Promise (Node.js Timers - MJS/CJS)
DESCRIPTION: Demonstrates basic usage of `timersPromises.setTimeout`. It returns a promise that resolves after the specified `delay` (milliseconds) with the given `value`. It can be used with `await` or `.then()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_3

LANGUAGE: mjs
CODE:
```
import {
  setTimeout,
} from 'node:timers/promises';

const res = await setTimeout(100, 'result');

console.log(res);  // Prints 'result'
```

LANGUAGE: cjs
CODE:
```
const {
  setTimeout,
} = require('node:timers/promises');

setTimeout(100, 'result').then((res) => {
  console.log(res);  // Prints 'result'
});
```

----------------------------------------

TITLE: File Watching with Node.js fs.watchFile()
DESCRIPTION: Example demonstrating how to watch a file for changes using fs.watchFile(). The code shows how to monitor file modifications by comparing modification times of current and previous states.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_78

LANGUAGE: javascript
CODE:
```
import { watchFile } from 'node:fs';

watchFile('message.text', (curr, prev) => {
  console.log(`the current mtime is: ${curr.mtime}`);
  console.log(`the previous mtime was: ${prev.mtime}`);
});
```

----------------------------------------

TITLE: Using --require option in Node.js (Bash)
DESCRIPTION: Demonstrates how to use the --require or -r command-line option in Node.js to load multiple modules before executing the main script. This is useful for preloading necessary dependencies or setting up the execution environment.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_35

LANGUAGE: Bash
CODE:
```
node --require "./a.js" --require "./b.js"
```

----------------------------------------

TITLE: Passing TCP Server Handle to Child Process in Node.js
DESCRIPTION: Shows how to pass a TCP server object from the parent process to a child process using subprocess.send(). The child process can then handle connections on the same server.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_40

LANGUAGE: javascript
CODE:
```
const { fork } = require('node:child_process');
const { createServer } = require('node:net');

const subprocess = fork('subprocess.js');

// Open up the server object and send the handle.
const server = createServer();
server.on('connection', (socket) => {
  socket.end('handled by parent');
});
server.listen(1337, () => {
  subprocess.send('server', server);
});
```

LANGUAGE: javascript
CODE:
```
import { fork } from 'node:child_process';
import { createServer } from 'node:net';

const subprocess = fork('subprocess.js');

// Open up the server object and send the handle.
const server = createServer();
server.on('connection', (socket) => {
  socket.end('handled by parent');
});
server.listen(1337, () => {
  subprocess.send('server', server);
});
```

LANGUAGE: javascript
CODE:
```
process.on('message', (m, server) => {
  if (m === 'server') {
    server.on('connection', (socket) => {
      socket.end('handled by child');
    });
  }
});
```

----------------------------------------

TITLE: Installing NPM Packages from Git Repositories
DESCRIPTION: Examples of installing packages from Git repositories with various protocols and configurations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
npm install git+ssh://git@github.com:npm/cli.git#v1.0.27
npm install git+ssh://git@github.com:npm/cli#pull/273
npm install git+ssh://git@github.com:npm/cli#semver:^5.0
npm install git+https://isaacs@github.com/npm/cli.git
npm install git://github.com/npm/cli.git#v1.0.27
GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/cli.git
```

----------------------------------------

TITLE: Graceful Worker Shutdown using worker.disconnect() in Node.js
DESCRIPTION: Demonstrates how the primary process can initiate a graceful shutdown of a worker. The primary sends a 'shutdown' message, calls `worker.disconnect()`, and sets a timeout to kill the worker if it doesn't disconnect within 2 seconds. The worker listens for the 'shutdown' message to perform cleanup before closing its server.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_5

LANGUAGE: js
CODE:
```
if (cluster.isPrimary) {
  const worker = cluster.fork();
  let timeout;

  worker.on('listening', (address) => {
    worker.send('shutdown');
    worker.disconnect();
    timeout = setTimeout(() => {
      worker.kill();
    }, 2000);
  });

  worker.on('disconnect', () => {
    clearTimeout(timeout);
  });

} else if (cluster.isWorker) {
  const net = require('node:net');
  const server = net.createServer((socket) => {
    // Connections never end
  });

  server.listen(8000);

  process.on('message', (msg) => {
    if (msg === 'shutdown') {
      // Initiate graceful close of any connections to server
    }
  });
}
```

----------------------------------------

TITLE: Executing npm install command in Bash
DESCRIPTION: The npm install command is used to install one or more packages. It can be called with optional package specifications. The command has several aliases for convenience.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install [<package-spec> ...]

aliases: add, i, in, ins, inst, insta, instal, isnt, isnta, isntal, isntall
```

----------------------------------------

TITLE: Creating a New npm User Account
DESCRIPTION: Demonstrates the command to create a new npm user account. This is necessary before publishing packages to the npm registry.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/developers.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm adduser
```

----------------------------------------

TITLE: Copying stdin to stdout in Node.js (CommonJS)
DESCRIPTION: This snippet shows how to pipe the process.stdin stream to process.stdout using CommonJS syntax. It requires the stdin and stdout streams from the 'node:process' module and uses the pipe method to connect them.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_94

LANGUAGE: JavaScript
CODE:
```
const { stdin, stdout } = require('node:process');

stdin.pipe(stdout);
```

----------------------------------------

TITLE: Handling Output and Errors with `exec` Callback (CJS)
DESCRIPTION: Illustrates how to use the callback function with `child_process.exec` in CommonJS. The callback receives `error`, `stdout`, and `stderr` arguments, allowing for checking command success (error is null), processing standard output, and capturing standard error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_6

LANGUAGE: cjs
CODE:
```
const { exec } = require('node:child_process');
exec('cat *.js missing_file | wc -l', (error, stdout, stderr) => {
  if (error) {
    console.error(`exec error: ${error}`);
    return;
  }
  console.log(`stdout: ${stdout}`);
  console.error(`stderr: ${stderr}`);
});
```

----------------------------------------

TITLE: Running Specific Package Commands with npm exec in Bash
DESCRIPTION: Shows how to run a command other than the package's default command by specifying the --package option. Demonstrates both npm exec and npx versions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ npm exec --package=foo -- bar --bar-argument
# ~ or ~
$ npx --package=foo bar --bar-argument
```

----------------------------------------

TITLE: Creating Custom HTTP Agent with Keep-Alive in Node.js
DESCRIPTION: Demonstrates how to create and use a custom HTTP Agent instance with keep-alive enabled for managing connection persistence and reuse.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { Agent, request } from 'node:http';
const keepAliveAgent = new Agent({ keepAlive: true });
options.agent = keepAliveAgent;
request(options, onResponseCallback);
```

LANGUAGE: javascript
CODE:
```
const http = require('node:http');
const keepAliveAgent = new http.Agent({ keepAlive: true });
options.agent = keepAliveAgent;
http.request(options, onResponseCallback);
```

----------------------------------------

TITLE: Sending Basic HTTP/2 Response (CJS)
DESCRIPTION: Demonstrates sending a basic HTTP/2 response using `stream.respond()` with initial headers followed by writing response data and ending the stream with `stream.end()` in CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_26

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  stream.respond({ ':status': 200 });
  stream.end('some data');
});
```

----------------------------------------

TITLE: Generating Random Bytes Synchronously with Node.js Crypto (ESM)
DESCRIPTION: Demonstrates synchronous generation of cryptographically strong random bytes using the crypto.randomBytes function in ESM format. Shows how to generate 256 bytes of random data and display it in hexadecimal format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_86

LANGUAGE: javascript
CODE:
```
const {
  randomBytes,
} = await import('node:crypto');

const buf = randomBytes(256);
console.log(
  `${buf.length} bytes of random data: ${buf.toString('hex')}`);
```

----------------------------------------

TITLE: Mocking setTimeout using TestContext Mock Timers - CommonJS
DESCRIPTION: Shows the CommonJS implementation for mocking `setTimeout` via the `context.mock.timers` API. This approach provides automatic cleanup of mocked timers. It enables the `setTimeout` API, uses `tick` to advance time, and asserts the successful execution of the delayed callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_27

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  // Optionally choose what to mock
  context.mock.timers.enable({ apis: ['setTimeout'] });
  setTimeout(fn, 9999);
  assert.strictEqual(fn.mock.callCount(), 0);

  // Advance in time
  context.mock.timers.tick(9999);
  assert.strictEqual(fn.mock.callCount(), 1);
});
```

----------------------------------------

TITLE: Vulnerable Web Service Using Buffer Constructor in Node.js
DESCRIPTION: This function demonstrates a vulnerable implementation of a string-to-base64 conversion service. The code uses the deprecated Buffer constructor without type validation, potentially allowing attackers to exploit memory leaks or trigger denial of service attacks.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/safer-buffer/Porting-Buffer.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
function stringToBase64(req, res) {
  // The request body should have the format of `{ string: 'foobar' }`
  const rawBytes = new Buffer(req.body.string)
  const encoded = rawBytes.toString('base64')
  res.end({ encoded: encoded })
}
```

----------------------------------------

TITLE: Using crypto.hash() in Node.js
DESCRIPTION: Examples of using the crypto.hash() function to create hash digests in both CommonJS and ES Modules format. Shows hashing strings and buffers with different output encodings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_79

LANGUAGE: javascript
CODE:
```
const crypto = require('node:crypto');
const { Buffer } = require('node:buffer');

// Hashing a string and return the result as a hex-encoded string.
const string = 'Node.js';
// 10b3493287f831e81a438811a1ffba01f8cec4b7
console.log(crypto.hash('sha1', string));

// Encode a base64-encoded string into a Buffer, hash it and return
// the result as a buffer.
const base64 = 'Tm9kZS5qcw==';
// <Buffer 10 b3 49 32 87 f8 31 e8 1a 43 88 11 a1 ff ba 01 f8 ce c4 b7>
console.log(crypto.hash('sha1', Buffer.from(base64, 'base64'), 'buffer'));
```

LANGUAGE: javascript
CODE:
```
import crypto from 'node:crypto';
import { Buffer } from 'node:buffer';

// Hashing a string and return the result as a hex-encoded string.
const string = 'Node.js';
// 10b3493287f831e81a438811a1ffba01f8cec4b7
console.log(crypto.hash('sha1', string));

// Encode a base64-encoded string into a Buffer, hash it and return
// the result as a buffer.
const base64 = 'Tm9kZS5qcw==';
// <Buffer 10 b3 49 32 87 f8 31 e8 1a 43 88 11 a1 ff ba 01 f8 ce c4 b7>
console.log(crypto.hash('sha1', Buffer.from(base64, 'base64'), 'buffer'));
```

----------------------------------------

TITLE: Event Listener Implementation in MJS
DESCRIPTION: Demonstrates using events.on() to listen for events in ES modules format. Shows basic event emission and handling with EventEmitter.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_44

LANGUAGE: mjs
CODE:
```
import { on, EventEmitter } from 'node:events';
import process from 'node:process';

const ee = new EventEmitter();

// Emit later on
process.nextTick(() => {
  ee.emit('foo', 'bar');
  ee.emit('foo', 42);
});

for await (const event of on(ee, 'foo')) {
  // The execution of this inner block is synchronous and it
  // processes one event at a time (even with await). Do not use
  // if concurrent execution is required.
  console.log(event); // prints ['bar'] [42]
}
// Unreachable here
```

----------------------------------------

TITLE: Resolving Module Specifiers with import.meta.resolve (Node.js JS)
DESCRIPTION: These examples demonstrate the usage of `import.meta.resolve()` to programmatically resolve module specifiers (both package names and relative paths) into absolute URL strings relative to the current module. This synchronous function respects standard Node.js module resolution rules and provides a programmatic equivalent to `require.resolve` for ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_10

LANGUAGE: js
CODE:
```
const dependencyAsset = import.meta.resolve('component-lib/asset.css');
// file:///app/node_modules/component-lib/asset.css
```

LANGUAGE: js
CODE:
```
import.meta.resolve('./dep.js');
// file:///app/dep.js
```

----------------------------------------

TITLE: Executing npm stop command in Bash
DESCRIPTION: This snippet shows the basic syntax for running the npm stop command, which can include optional arguments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-stop.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm stop [-- <args>]
```

----------------------------------------

TITLE: Enabling Node.js deprecation warnings with NODE_OPTIONS (Console)
DESCRIPTION: This snippet demonstrates setting Node.js environment variables to enable detailed traces for warnings, notably deprecation warnings regarding Buffer constructor usage. By setting NODE_OPTIONS with the appropriate flags, developers can get visible stack traces for deprecated API usage during development or CI runs. No dependencies except Node.js ≥ 8.0.0; applicable in bash or similar shells.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/safer-buffer/Porting-Buffer.md#2025-04-23_snippet_1

LANGUAGE: Console
CODE:
```
export NODE_OPTIONS='--trace-warnings --pending-deprecation'
cat example.js
'use strict';
const foo = new Buffer('foo');
node example.js
(node:7147) [DEP0005] DeprecationWarning: The Buffer() and new Buffer() constructors are not recommended for use due to security and usability concerns. Please use the new Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() construction methods instead.
    at showFlaggedDeprecation (buffer.js:127:13)
    at new Buffer (buffer.js:148:3)
    at Object.<anonymous> (/path/to/example.js:2:13)
    [... more stack trace lines ...]
```

----------------------------------------

TITLE: Executing npm cache Commands in Bash
DESCRIPTION: This snippet shows the various ways to use the npm cache command, including adding packages, cleaning the cache, listing cache contents, verifying the cache, and manipulating the npx cache.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-cache.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm cache add <package-spec>
npm cache clean [<key>]
npm cache ls [<name>@<version>]
npm cache verify
npm cache npx ls
npm cache npx rm [<key>...]
npm cache npx info <key>...
```

----------------------------------------

TITLE: Sharing Environment Variables Between Threads in Node.js
DESCRIPTION: Example showing how to share environment variables between worker threads using the SHARE_ENV symbol. This allows both the main thread and worker thread to read and modify the same set of environment variables.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import process from 'node:process';
import { Worker, SHARE_ENV } from 'node:worker_threads';
new Worker('process.env.SET_IN_WORKER = "foo"', { eval: true, env: SHARE_ENV })
  .on('exit', () => {
    console.log(process.env.SET_IN_WORKER);  // Prints 'foo'.
  });
```

LANGUAGE: javascript
CODE:
```
'use strict';

const { Worker, SHARE_ENV } = require('node:worker_threads');
new Worker('process.env.SET_IN_WORKER = "foo"', { eval: true, env: SHARE_ENV })
  .on('exit', () => {
    console.log(process.env.SET_IN_WORKER);  // Prints 'foo'.
  });
```

----------------------------------------

TITLE: Resource with Rejected Promise Example in Node.js (ESM)
DESCRIPTION: Example demonstrating how initializing a property with a rejected Promise can trigger the 'unhandledRejection' event in Node.js using ESM imports. This pattern should be avoided as it creates unhandled rejections if not properly caught.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
import process from 'node:process';

function SomeResource() {
  // Initially set the loaded status to a rejected promise
  this.loaded = Promise.reject(new Error('Resource not yet loaded!'));
}

const resource = new SomeResource();
// no .catch or .then on resource.loaded for at least a turn
```

----------------------------------------

TITLE: Handling Worker Listening Event in Node.js Cluster
DESCRIPTION: Shows how the primary process can detect when a worker has successfully started listening on a port. When a worker's server emits 'listening' after `listen()` is called, the `cluster` object in the primary emits a 'listening' event with the worker object and address details.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_13

LANGUAGE: js
CODE:
```
cluster.on('listening', (worker, address) => {
  console.log(
    `A worker is now connected to ${address.address}:${address.port}`);
});
```

----------------------------------------

TITLE: Testing Bank Transfer Function with Undici MockAgent in Node.js
DESCRIPTION: This snippet demonstrates how to use Undici's MockAgent to intercept HTTP requests and return mocked responses. It includes examples of successful and failed bank transfers, and shows how to make assertions on the mocked responses.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/mocking-request.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
// index.test.mjs
import { strict as assert } from 'node:assert'
import { MockAgent, setGlobalDispatcher, } from 'undici'
import { bankTransfer } from './bank.mjs'

const mockAgent = new MockAgent();

setGlobalDispatcher(mockAgent);

// Provide the base url to the request
const mockPool = mockAgent.get('http://localhost:3000');

// intercept the request
mockPool.intercept({
  path: '/bank-transfer',
  method: 'POST',
  headers: {
    'X-TOKEN-SECRET': 'SuperSecretToken',
  },
  body: JSON.stringify({
    recipient: '1234567890',
    amount: '100'
  })
}).reply(200, {
  message: 'transaction processed'
})

const success = await bankTransfer('1234567890', '100')

assert.deepEqual(success, { message: 'transaction processed' })

// if you dont want to check whether the body or the headers contain the same value
// just remove it from interceptor
mockPool.intercept({
  path: '/bank-transfer',
  method: 'POST',
}).reply(400, {
  message: 'bank account not found'
})

const badRequest = await bankTransfer('1234567890', '100')

assert.deepEqual(badRequest, { message: 'bank account not found' })
```

----------------------------------------

TITLE: Implementing _construct in a Readable Stream - Node.js
DESCRIPTION: This example shows how to implement the _construct method in a custom Readable stream. It demonstrates asynchronous initialization of resources before the stream can be used.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_85

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');
const fs = require('node:fs');

class ReadStream extends Readable {
  constructor(filename) {
    super();
    this.filename = filename;
    this.fd = null;
  }
  _construct(callback) {
    fs.open(this.filename, (err, fd) => {
      if (err) {
        callback(err);
      } else {
        this.fd = fd;
        callback();
      }
    });
  }
  _read(n) {
    const buf = Buffer.alloc(n);
    fs.read(this.fd, buf, 0, n, null, (err, bytesRead) => {
      if (err) {
        this.destroy(err);
      } else {
        this.push(bytesRead > 0 ? buf.slice(0, bytesRead) : null);
      }
    });
  }
  _destroy(err, callback) {
    if (this.fd) {
      fs.close(this.fd, (er) => callback(er || err));
    } else {
      callback(err);
    }
  }
}
```

----------------------------------------

TITLE: Simple Command-Line Interface with Commander
DESCRIPTION: Basic example showing how to create a simple CLI tool using Commander.js. This script demonstrates options handling and argument parsing for a string splitting utility.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const { program } = require('commander');

program
  .option('--first')
  .option('-s, --separator <char>');

program.parse();

const options = program.opts();
const limit = options.first ? 1 : undefined;
console.log(program.args[0].split(options.separator, limit));
```

----------------------------------------

TITLE: Specifying peerDependencies for Plugin Compatibility
DESCRIPTION: Shows how to use peerDependencies to express compatibility with a host package without directly requiring it. This is commonly used for plugins that need to work with specific versions of their host packages.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_22

LANGUAGE: json
CODE:
```
{
  "name": "@npm/tea-latte",
  "version": "1.3.5",
  "peerDependencies": {
    "@npm/tea": "2.x"
  }
}
```

----------------------------------------

TITLE: Async Promise Rejection Testing with assert.doesNotReject
DESCRIPTION: Shows how to use assert.doesNotReject() to test async functions and promises for expected non-rejection behavior.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_18

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

await assert.doesNotReject(
  async () => {
    throw new TypeError('Wrong value');
  },
  SyntaxError,
);
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

(async () => {
  await assert.doesNotReject(
    async () => {
      throw new TypeError('Wrong value');
    },
    SyntaxError,
  );
})();
```

----------------------------------------

TITLE: Creating JavaScript Objects with node-addon-api in C++
DESCRIPTION: This snippet shows how to create a new JavaScript object and set a property named "foo" with the string value "bar" using the `node-addon-api` C++ wrapper. It utilizes the `Object::New` and `String::New` methods within a Node-API environment (`env`). This approach simplifies interaction with the underlying C Node-API functions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_0

LANGUAGE: cpp
CODE:
```
Object obj = Object::New(env);
obj["foo"] = String::New(env, "bar");
```

----------------------------------------

TITLE: Using scrypt for Password-Based Key Derivation
DESCRIPTION: Demonstrates the usage of the scrypt function for password-based key derivation. Shows examples with both default parameters and custom cost factors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_92

LANGUAGE: javascript
CODE:
```
const {
  scrypt,
} = await import('node:crypto');

// Using the factory defaults.
scrypt('password', 'salt', 64, (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'
});
// Using a custom N parameter. Must be a power of two.
scrypt('password', 'salt', 64, { N: 1024 }, (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...aa39b34'
});
```

----------------------------------------

TITLE: Working with ClientRequest Headers (Setting, Getting, Listing) - JavaScript
DESCRIPTION: Illustrates how to use setHeader, getHeader, getHeaderNames, and getHeaders on a Node.js ClientRequest object. Demonstrates setting various header types (string, number, array), and retrieving headers as values or arrays, as well as listing all header names and full header objects. No external dependencies beyond Node.js HTTP. Inputs are individual header assignments; outputs are the retrieval of those headers or their names.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_11

LANGUAGE: js
CODE:
```
request.setHeader('content-type', 'text/html');
request.setHeader('Content-Length', Buffer.byteLength(body));
request.setHeader('Cookie', ['type=ninja', 'language=javascript']);
const contentType = request.getHeader('Content-Type');
// 'contentType' is 'text/html'
const contentLength = request.getHeader('Content-Length');
// 'contentLength' is of type number
const cookie = request.getHeader('Cookie');
// 'cookie' is of type string[]

```

LANGUAGE: js
CODE:
```
request.setHeader('Foo', 'bar');
request.setHeader('Cookie', ['foo=bar', 'bar=baz']);

const headerNames = request.getHeaderNames();
// headerNames === ['foo', 'cookie']

```

LANGUAGE: js
CODE:
```
request.setHeader('Foo', 'bar');
request.setHeader('Cookie', ['foo=bar', 'bar=baz']);

const headers = request.getHeaders();
// headers === { foo: 'bar', 'cookie': ['foo=bar', 'bar=baz'] }

```

----------------------------------------

TITLE: Using fs/promises glob for Pattern Matching (CommonJS)
DESCRIPTION: Example of using the glob method from fs/promises to asynchronously find files matching a pattern. This version uses CommonJS syntax with an IIFE and for-await-of to iterate through results.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
const { glob } = require('node:fs/promises');

(async () => {
  for await (const entry of glob('**/*.js'))
    console.log(entry);
})();
```

----------------------------------------

TITLE: Using Body Mixins with Undici
DESCRIPTION: Example demonstrating how to use body mixins to parse response data into JSON format. Shows proper response handling with status code and headers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { request } from 'undici'

const {
  statusCode,
  headers,
  trailers,
  body
} = await request('http://localhost:3000/foo')

console.log('response received', statusCode)
console.log('headers', headers)
console.log('data', await body.json())
console.log('trailers', trailers)
```

----------------------------------------

TITLE: Using process.nextTick() for Constructor Pattern in Node.js
DESCRIPTION: Shows a design pattern using process.nextTick() to ensure that an object's event handlers can be attached before any I/O operations begin. This allows for proper API initialization sequence.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_58

LANGUAGE: JavaScript (ESM)
CODE:
```
import { nextTick } from 'node:process';

function MyThing(options) {
  this.setupOptions(options);

  nextTick(() => {
    this.startDoingStuff();
  });
}

const thing = new MyThing();
thing.getReadyForStuff();

// thing.startDoingStuff() gets called now, not before.
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { nextTick } = require('node:process');

function MyThing(options) {
  this.setupOptions(options);

  nextTick(() => {
    this.startDoingStuff();
  });
}

const thing = new MyThing();
thing.getReadyForStuff();

// thing.startDoingStuff() gets called now, not before.
```

----------------------------------------

TITLE: Resource with Rejected Promise Example in Node.js (CommonJS)
DESCRIPTION: Example demonstrating how initializing a property with a rejected Promise can trigger the 'unhandledRejection' event in Node.js using CommonJS require. This pattern should be avoided as it creates unhandled rejections if not properly caught.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
const process = require('node:process');

function SomeResource() {
  // Initially set the loaded status to a rejected promise
  this.loaded = Promise.reject(new Error('Resource not yet loaded!'));
}

const resource = new SomeResource();
// no .catch or .then on resource.loaded for at least a turn
```

----------------------------------------

TITLE: Setting NPM Config Values in Bash
DESCRIPTION: Commands for setting npm configuration values. Can set multiple key-value pairs at once. Modifies user configuration unless location is specified.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-config.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm config set key=value [key=value...]
npm set key=value [key=value...]
```

----------------------------------------

TITLE: Copying Files with Error Handling using Node.js fs/promises
DESCRIPTION: Demonstrates asynchronous file copying using the copyFile method from the fs/promises module with error handling. The example shows basic usage and how to use the COPYFILE_EXCL flag to prevent overwriting existing files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
import { copyFile, constants } from 'node:fs/promises';

try {
  await copyFile('source.txt', 'destination.txt');
  console.log('source.txt was copied to destination.txt');
} catch {
  console.error('The file could not be copied');
}

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
try {
  await copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL);
  console.log('source.txt was copied to destination.txt');
} catch {
  console.error('The file could not be copied');
}
```

----------------------------------------

TITLE: Creating an HTTP/2 Server with Node.js
DESCRIPTION: This snippet demonstrates how to create an HTTP/2 server using the http2.createServer() method. It includes setting up event listeners for the 'stream' event and handling incoming requests.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/util/missingssl-internal.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const http2 = require('http2');

// Create an unencrypted HTTP/2 server
const server = http2.createServer();

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html',
    ':status': 200
  });
  stream.end('<h1>Hello World</h1>');
});

server.listen(8000);
```

----------------------------------------

TITLE: Implementing cppgc Object Creation and JS Callback - C++
DESCRIPTION: Provides the recommended pattern for creating cppgc-managed C++ objects using `cppgc::MakeGarbageCollected` within a static `New` method and handles the V8 `FunctionCallbackInfo` when the JavaScript constructor is invoked.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_22

LANGUAGE: C++
CODE:
```
MyWrap* MyWrap::New(Environment* env, v8::Local<v8::Object> object) {
  // Per cppgc rules, the constructor of MyWrap cannot be invoked directly.
  // It's recommended to implement a New() static method that prepares
  // and forwards the necessary arguments to cppgc::MakeGarbageCollected()
  // and just return the raw pointer around - do not use any C++ smart
  // pointer with this, as this is not managed by the native memory
  // allocator but by V8.
  return cppgc::MakeGarbageCollected<MyWrap>(
      env->isolate()->GetCppHeap()->GetAllocationHandle(), env, object);
}

// Binding method to be invoked by JavaScript.
void MyWrap::New(const FunctionCallbackInfo<Value>& args) {
  Environment* env = Environment::GetCurrent(args);
  Isolate* isolate = env->isolate();
  Local<Context> context = env->context();

  CHECK(args.IsConstructCall());

  // Get more arguments from JavaScript land if necessary.
  New(env, args.This());
}

```

----------------------------------------

TITLE: Handling HTTP/2 Session Timeout - JS
DESCRIPTION: This JavaScript snippet demonstrates how to configure a timeout duration for an `Http2Session` using `setTimeout()` and how to register a listener for the 'timeout' event, which is emitted if no activity occurs within the specified time.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_3

LANGUAGE: js
CODE:
```
session.setTimeout(2000);
session.on('timeout', () => { /* .. */ });
```

----------------------------------------

TITLE: Constructing a URL by Setting Properties
DESCRIPTION: Example showing how to construct a URL by setting individual properties on a URL object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://example.org');
myURL.pathname = '/a/b/c';
myURL.search = '?d=e';
myURL.hash = '#fgh';
```

----------------------------------------

TITLE: Accessing and Mutating the Password Component - WHATWG URL API - JavaScript
DESCRIPTION: Demonstrates using the URL object's password property in Node.js to read and set the password portion of a URL. When setting the password, invalid characters are percent-encoded automatically as per the WHATWG URL standard. The code snippet shows that updating the password reflects immediately in the object's href property. No external dependencies required; input is a URL string and password assignment, output is the updated password and full URL.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_21

LANGUAGE: JavaScript
CODE:
```
const myURL = new URL('https://abc:xyz@example.com');
console.log(myURL.password);
// Prints xyz

myURL.password = '123';
console.log(myURL.href);
// Prints https://abc:123@example.com/

```

----------------------------------------

TITLE: Creating Writable Stream using Simplified Constructor
DESCRIPTION: Example showing how to create a Writable stream using the simplified constructor approach with inline write and writev implementations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_75

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

const myWritable = new Writable({
  write(chunk, encoding, callback) {
    // ...
  },
  writev(chunks, callback) {
    // ...
  },
});
```

----------------------------------------

TITLE: Accessing and Mutating the Username Component - WHATWG URL API - JavaScript
DESCRIPTION: Shows how to get and set the username portion of a URL using the username property. Modifications are directly reflected in the href property and any invalid characters are percent-encoded. The snippet works without any external dependencies; inputs are a URL string and a new username, and outputs show the username and full mutated URL.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_28

LANGUAGE: JavaScript
CODE:
```
const myURL = new URL('https://abc:xyz@example.com');
console.log(myURL.username);
// Prints abc

myURL.username = '123';
console.log(myURL.href);
// Prints https://123:xyz@example.com/

```

----------------------------------------

TITLE: Spying on a Function using node:test/mock - ES Module
DESCRIPTION: Demonstrates how to use the global `mock.fn()` to create a spy on a standard JavaScript function. It asserts the initial call count, verifies the function executes correctly, checks the call count after execution, and inspects the arguments, result, and error of the captured call.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_21

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { mock, test } from 'node:test';

test('spies on a function', () => {
  const sum = mock.fn((a, b) => {
    return a + b;
  });

  assert.strictEqual(sum.mock.callCount(), 0);
  assert.strictEqual(sum(3, 4), 7);
  assert.strictEqual(sum.mock.callCount(), 1);

  const call = sum.mock.calls[0];
  assert.deepStrictEqual(call.arguments, [3, 4]);
  assert.strictEqual(call.result, 7);
  assert.strictEqual(call.error, undefined);

  // Reset the globally tracked mocks.
  mock.reset();
});
```

----------------------------------------

TITLE: Testing Deep Equality with assert.deepEqual - Node.js assert - ECMAScript Module (mjs)
DESCRIPTION: Shows an example where assert.deepEqual does not throw an error due to non-strict equality ('==') comparison rules. Compares a string and a boolean, which are considered equal. Requires 'node:assert'. Inputs are two primitive values; output is no error thrown despite differing types. Demonstrates the behavior of deepEqual in legacy mode.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_11

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
// WARNING: This does not throw an AssertionError!

assert.deepEqual('+00000000', false);
```

----------------------------------------

TITLE: Setting the HTTP Response Status Code in Node.js (JavaScript)
DESCRIPTION: Sets a custom HTTP status code for the response using the statusCode property on http.ServerResponse. By default, the status code is 200; setting it before headers are sent allows custom error or informational returns. The value should be a valid HTTP status code number.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_39

LANGUAGE: js
CODE:
```
response.statusCode = 404;

```

----------------------------------------

TITLE: Checking the 'destroyed' Property of a Writable Stream in Node.js (cjs)
DESCRIPTION: Shows how to check the `destroyed` boolean property of a Node.js Writable stream. The example logs `false` initially and `true` after the `destroy()` method has been called on the stream instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_21

LANGUAGE: cjs
CODE:
```
const { Writable } = require('node:stream');

const myStream = new Writable();

console.log(myStream.destroyed); // false
myStream.destroy();
console.log(myStream.destroyed); // true
```

----------------------------------------

TITLE: Example package.json with caret dependency in JSON
DESCRIPTION: An example of a package.json file with a caret (^) dependency, which allows updates to the latest minor and patch versions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-update.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
"dependencies": {
  "dep1": "^1.1.1"
}
```

----------------------------------------

TITLE: Getting NPM Config Values in Bash
DESCRIPTION: Commands to retrieve npm configuration values. Can get multiple values at once. If no keys specified, lists all config settings.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-config.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm config get [key ...]
npm get [key ...]
```

----------------------------------------

TITLE: Complete CLI Application with Subcommands
DESCRIPTION: More comprehensive example showing a multi-command CLI application with descriptions, version information, and action handlers. This demonstrates Commander's subcommand capabilities.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const { Command } = require('commander');
const program = new Command();

program
  .name('string-util')
  .description('CLI to some JavaScript string utilities')
  .version('0.8.0');

program.command('split')
  .description('Split a string into substrings and display as an array')
  .argument('<string>', 'string to split')
  .option('--first', 'display just the first substring')
  .option('-s, --separator <char>', 'separator character', ',')
  .action((str, options) => {
    const limit = options.first ? 1 : undefined;
    console.log(str.split(options.separator, limit));
  });

program.parse();
```

----------------------------------------

TITLE: Creating Local Command Object in CommonJS
DESCRIPTION: Shows how to create a local Command object in CommonJS modules. This approach is recommended for larger programs and unit testing.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
// CommonJS (.cjs)
const { Command } = require('commander');
const program = new Command();
```

----------------------------------------

TITLE: Creating Promise in Node-API
DESCRIPTION: Function to create a deferred object and associated JavaScript promise. Returns napi_ok on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_202

LANGUAGE: c
CODE:
```
napi_status napi_create_promise(napi_env env,
                                napi_deferred* deferred,
                                napi_value* promise);
```

----------------------------------------

TITLE: Implementing a Simple Writable Stream - Node.js
DESCRIPTION: This example shows a basic implementation of a custom Writable stream. It extends the Writable class and overrides the _write method to handle chunk processing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_79

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

class MyWritable extends Writable {
  _write(chunk, encoding, callback) {
    if (chunk.toString().indexOf('a') >= 0) {
      callback(new Error('chunk is invalid'));
    } else {
      callback();
    }
  }
}
```

----------------------------------------

TITLE: Consuming an Event Emitter Module in Node.js
DESCRIPTION: Shows how to use the event emitter module created in the previous example by requiring it and setting up an event listener for the 'ready' event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
const a = require('./a');
a.on('ready', () => {
  console.log('module "a" is ready');
});
```

----------------------------------------

TITLE: Handling Client Errors in Node.js HTTP Server (ESM)
DESCRIPTION: Example of handling client errors in a Node.js HTTP server using ES modules. Creates a server that responds to client errors with a 400 Bad Request response.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_24

LANGUAGE: mjs
CODE:
```
import http from 'node:http';

const server = http.createServer((req, res) => {
  res.end();
});
server.on('clientError', (err, socket) => {
  socket.end('HTTP/1.1 400 Bad Request\r\n\r\n');
});
server.listen(8000);
```

----------------------------------------

TITLE: Checking 'this' in Basic Arrow Function Scope (Node.js/JavaScript)
DESCRIPTION: This snippet defines an Immediately Invoked Function Expression (IIFE) containing an arrow function `f`. A breakpoint (`#debugger;`) is set inside the arrow function. The surrounding text indicates that when execution pauses at this breakpoint, `this` is expected to be `undefined` in both `callFrame` and `evaluateOnCallFrame`, reflecting the lexical scoping of `this` in arrow functions within a non-method context.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/this-in-arrow-function-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
(function() {
  let f = () => { #debugger; };
  f();
```

----------------------------------------

TITLE: Handling Optional Dependencies in Code
DESCRIPTION: Demonstrates how to safely handle optional dependencies in code using try/catch blocks. This allows your program to gracefully handle missing or incompatible optional dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_26

LANGUAGE: js
CODE:
```
try {
  var foo = require('@npm/foo')
  var fooVersion = require('@npm/foo/package.json').version
} catch (er) {
  foo = null
}
if ( notGoodFooVersion(fooVersion) ) {
  foo = null
}

// .. then later in your program ..

if (foo) {
  foo.doFooThings()
}
```

----------------------------------------

TITLE: Importing JSON Modules with Import Attributes (Node.js)
DESCRIPTION: Shows the syntax for importing JSON files as modules in Node.js using import attributes (`with { type: 'json' }`). The first line uses a static `import`, while the second uses a dynamic `import()`, both requiring the attribute to correctly load the JSON file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import fooData from './foo.json' with { type: 'json' };

const { default: barData } =
  await import('./bar.json', { with: { type: 'json' } });
```

----------------------------------------

TITLE: Checking Worker Status with worker.isDead() using CommonJS in Node.js
DESCRIPTION: Demonstrates checking if a worker process has terminated using `worker.isDead()` within the 'fork' and 'exit' event handlers in the primary process, using CommonJS syntax (`require`). Workers run an HTTP server and are killed upon receiving a request.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_8

LANGUAGE: cjs
CODE:
```
const cluster = require('node:cluster');
const http = require('node:http');
const numCPUs = require('node:os').availableParallelism();
const process = require('node:process');

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('fork', (worker) => {
    console.log('worker is dead:', worker.isDead());
  });

  cluster.on('exit', (worker, code, signal) => {
    console.log('worker is dead:', worker.isDead());
  });
} else {
  // Workers can share any TCP connection. In this case, it is an HTTP server.
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end(`Current process\n ${process.pid}`);
    process.kill(process.pid);
  }).listen(8000);
}
```

----------------------------------------

TITLE: Installing Tagged NPM Packages
DESCRIPTION: Examples of installing packages using specific tags.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
npm install sax@latest
npm install @myorg/mypackage@latest
```

----------------------------------------

TITLE: Basic npm exec Command Syntax in Bash
DESCRIPTION: Shows the various syntax options for the npm exec command, including running with package names, using the --package flag, and using the -c flag for arbitrary commands. Also shows the 'x' alias.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm exec -- <pkg>[@<version>] [args...]
npm exec --package=<pkg>[@<version>] -- <cmd> [args...]
npm exec -c '<cmd> [args...]'
npm exec --package=foo -c '<cmd> [args...]'

alias: x
```

----------------------------------------

TITLE: Integrating Busboy with Fetch API in Node.js
DESCRIPTION: Example demonstrating how to use Busboy library to parse multipart/form-data from a fetch response body. Shows integration between Node.js streams and Web Streams API for efficient form data processing.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Fetch.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Busboy } from '@fastify/busboy'
import { Readable } from 'node:stream'

const response = await fetch('...')
const busboy = new Busboy({
  headers: {
    'content-type': response.headers.get('content-type')
  }
})

Readable.fromWeb(response.body).pipe(busboy)
```

----------------------------------------

TITLE: Using Arrow Functions as Event Listeners in Node.js (ESM)
DESCRIPTION: This snippet demonstrates the use of ES6 Arrow Functions as event listeners in Node.js using ECMAScript modules. It shows that 'this' does not reference the EventEmitter instance when using arrow functions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', (a, b) => {
  console.log(a, b, this);
  // Prints: a b undefined
});
myEmitter.emit('event', 'a', 'b');
```

----------------------------------------

TITLE: Importing Path Module using CommonJS
DESCRIPTION: This snippet shows how to import the Node.js Path module using the traditional CommonJS require() syntax. This approach is used in Node.js applications written with the CommonJS module system.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/document_with_esm_and_cjs_code_snippet.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
require('path');
```

----------------------------------------

TITLE: Consuming Node.js Readable Streams with Async Iterators
DESCRIPTION: Example of using async/await with for-await-of loops to consume a readable stream. This modern approach simplifies stream consumption by leveraging JavaScript's async iteration capabilities.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_99

LANGUAGE: javascript
CODE:
```
(async function() {
  for await (const chunk of readable) {
    console.log(chunk);
  }
})();
```

----------------------------------------

TITLE: Testing Deep Object Equality with assert.deepEqual - Node.js assert - CommonJS (cjs)
DESCRIPTION: Replicates the deep object comparison example in CommonJS, illustrating how assert.deepEqual checks nested object properties and ignores the prototype chain. Comments annotate assertion outcomes to clarify pass and fail cases. Requires 'node:assert'. Expects object pairs; output is assertion pass or error depending on object structure and values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_14

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');

const obj1 = {
  a: {
    b: 1,
  },
};
const obj2 = {
  a: {
    b: 2,
  },
};
const obj3 = {
  a: {
    b: 1,
  },
};
const obj4 = { __proto__: obj1 };

assert.deepEqual(obj1, obj1);
// OK

// Values of b are different:
assert.deepEqual(obj1, obj2);
// AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }

assert.deepEqual(obj1, obj3);
// OK

// Prototypes are ignored:
assert.deepEqual(obj1, obj4);
// AssertionError: { a: { b: 1 } } deepEqual {}
```

----------------------------------------

TITLE: Create Worker Thread (Node.js)
DESCRIPTION: Demonstrates creating a new worker thread using `require('node:worker_threads').Worker`. The example attempts to load the current file (`__filename`) as the worker script. This operation is restricted by the Permission Model unless the `--allow-worker` flag is used.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const { Worker } = require('node:worker_threads');
// Attempt to bypass the permission
new Worker(__filename);
```

----------------------------------------

TITLE: Writing HTTP Headers with writeHead in Node.js
DESCRIPTION: Shows how to send response headers to an HTTP request using the writeHead method. This example sets a 200 status code with appropriate Content-Length and Content-Type headers, demonstrating the method's chainable return value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_42

LANGUAGE: javascript
CODE:
```
const body = 'hello world';
response
  .writeHead(200, {
    'Content-Length': Buffer.byteLength(body),
    'Content-Type': 'text/plain',
  })
  .end(body);
```

----------------------------------------

TITLE: Generating RSA Key Pair using Web Crypto API in JavaScript
DESCRIPTION: This function generates an RSA key pair using the Web Crypto API. It creates both public and private keys that can be used for signing and verifying operations using the RSASSA-PKCS1-v1_5 algorithm.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;
const publicExponent = new Uint8Array([1, 0, 1]);

async function generateRsaKey(modulusLength = 2048, hash = 'SHA-256') {
  const {
    publicKey,
    privateKey,
  } = await subtle.generateKey({
    name: 'RSASSA-PKCS1-v1_5',
    modulusLength,
    publicExponent,
    hash,
  }, true, ['sign', 'verify']);

  return { publicKey, privateKey };
}
```

----------------------------------------

TITLE: Basic Node.js Addon Initialization Pattern
DESCRIPTION: Standard pattern for initializing Node.js addons, showing the required function signature and module declaration.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_2

LANGUAGE: cpp
CODE:
```
void Initialize(Local<Object> exports);
NODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)
```

----------------------------------------

TITLE: Installing Windows Build Tools via npm
DESCRIPTION: This command uses npm to globally install the `windows-build-tools` package. This package sets up the necessary Microsoft C++ build tools (part of Visual Studio) required for compiling Node.js native addons on Windows.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
npm install --global windows-build-tools
```

----------------------------------------

TITLE: Equality Testing with assert.equal
DESCRIPTION: Shows usage of assert.equal() for testing equality between values, including special handling of NaN comparisons.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_20

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';

assert.equal(1, 1);
// OK, 1 == 1
assert.equal(1, '1');
// OK, 1 == '1'
assert.equal(NaN, NaN);
// OK

assert.equal(1, 2);
// AssertionError: 1 == 2
assert.equal({ a: { b: 1 } }, { a: { b: 1 } });
// AssertionError: { a: { b: 1 } } == { a: { b: 1 } }
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');

assert.equal(1, 1);
// OK, 1 == 1
assert.equal(1, '1');
// OK, 1 == '1'
assert.equal(NaN, NaN);
// OK

assert.equal(1, 2);
// AssertionError: 1 == 2
assert.equal({ a: { b: 1 } }, { a: { b: 1 } });
// AssertionError: { a: { b: 1 } } == { a: { b: 1 } }
```

----------------------------------------

TITLE: Creating Node.js Buffers (CJS)
DESCRIPTION: Shows how to create Buffer instances using the CommonJS `require` syntax, mirroring the examples for allocating fixed-length buffers and creating buffers from arrays or strings with specified encodings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

// Creates a zero-filled Buffer of length 10.
const buf1 = Buffer.alloc(10);

// Creates a Buffer of length 10,
// filled with bytes which all have the value `1`.
const buf2 = Buffer.alloc(10, 1);

// Creates an uninitialized buffer of length 10.
// This is faster than calling Buffer.alloc() but the returned
// Buffer instance might contain old data that needs to be
// overwritten using fill(), write(), or other functions that fill the Buffer's
// contents.
const buf3 = Buffer.allocUnsafe(10);

// Creates a Buffer containing the bytes [1, 2, 3].
const buf4 = Buffer.from([1, 2, 3]);

// Creates a Buffer containing the bytes [1, 1, 1, 1] – the entries
// are all truncated using `(value & 255)` to fit into the range 0–255.
const buf5 = Buffer.from([257, 257.5, -255, '1']);

// Creates a Buffer containing the UTF-8-encoded bytes for the string 'tést':
// [0x74, 0xc3, 0xa9, 0x73, 0x74] (in hexadecimal notation)
// [116, 195, 169, 115, 116] (in decimal notation)
const buf6 = Buffer.from('tést');

// Creates a Buffer containing the Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].
const buf7 = Buffer.from('tést', 'latin1');
```

----------------------------------------

TITLE: Dynamically Importing User Modules with Default Loader using vm.Script (ESM)
DESCRIPTION: Demonstrates writing module and data files, then compiling a vm.Script that dynamically imports an ESM module and a JSON data file in sequence. Shows use of 'filename' for resolution and 'importModuleDynamically' set to 'USE_MAIN_CONTEXT_DEFAULT_LOADER'. Requires Node.js with 'vm', 'path', and 'fs' modules. Inputs: filesystem operations, dynamic script compilation; Outputs: imported JSON data as ES module namespace object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_29

LANGUAGE: mjs
CODE:
```
import { Script, constants } from 'node:vm';
import { resolve } from 'node:path';
import { writeFileSync } from 'node:fs';

// Write test.js and test.txt to the directory where the current script
// being run is located.
writeFileSync(resolve(import.meta.dirname, 'test.mjs'),
              'export const filename = "./test.json";');
writeFileSync(resolve(import.meta.dirname, 'test.json'),
              '{"hello": "world"}');

// Compile a script that loads test.mjs and then test.json
// as if the script is placed in the same directory.
const script = new Script(
  `(async function() {
    const { filename } = await import('./test.mjs');
    return import(filename, { with: { type: 'json' } })
  })();`,
  {
    filename: resolve(import.meta.dirname, 'test-with-default.js'),
    importModuleDynamically: constants.USE_MAIN_CONTEXT_DEFAULT_LOADER,
  });

// { default: { hello: 'world' } }
script.runInThisContext().then(console.log);
```

----------------------------------------

TITLE: Building a Tiny CLI with Readline and ES Modules in Node.js (JavaScript)
DESCRIPTION: Implements a complete minimal CLI app using a readline interface with custom prompt and command handling. Demonstrates event-driven input processing with 'line' and 'close' event listeners, and uses ES Module syntax for imports. On 'hello', outputs 'world!'; on other inputs, prints a message. Exits gracefully upon interface closure. Dependencies: Node.js 14+; Input: user commands; Output: console messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_31

LANGUAGE: mjs
CODE:
```
import { createInterface } from 'node:readline';\nimport { exit, stdin, stdout } from 'node:process';\nconst rl = createInterface({\n  input: stdin,\n  output: stdout,\n  prompt: 'OHAI> ',\n});\n\nrl.prompt();\n\nrl.on('line', (line) => {\n  switch (line.trim()) {\n    case 'hello':\n      console.log('world!');\n      break;\n    default:\n      console.log(`Say what? I might have heard '${line.trim()}'`);\n      break;\n  }\n  rl.prompt();\n}).on('close', () => {\n  console.log('Have a great day!');\n  exit(0);\n});
```

----------------------------------------

TITLE: Accessing HTTP Request Headers in Node.js
DESCRIPTION: Demonstrates how to access and log HTTP request headers using the headers property. Shows the standard format of header key-value pairs with lowercase header names.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_45

LANGUAGE: javascript
CODE:
```
// Prints something like:
//
// { 'user-agent': 'curl/7.22.0',
//   host: '127.0.0.1:8000',
//   accept: '*/*' }
console.log(request.headers);
```

----------------------------------------

TITLE: Example Output of npm start (Bash)
DESCRIPTION: Illustrates the typical output when running `npm start` with a defined start script (like the one in the JSON example). It shows npm identifying the script, executing it (`node foo.js`), and then includes the output from the executed script.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-start.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm start

> npm@x.x.x start
> node foo.js

(foo.js output would be here)

```

----------------------------------------

TITLE: Recommended tsconfig.json for Node.js Type Stripping
DESCRIPTION: Recommended TypeScript configuration for use with Node.js built-in type stripping feature. Includes settings for targeting modern JavaScript and enabling compatibility with Node.js module system.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/typescript.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
     "noEmit": true, // Optional - see note below
     "target": "esnext",
     "module": "nodenext",
     "rewriteRelativeImportExtensions": true,
     "erasableSyntaxOnly": true,
     "verbatimModuleSyntax": true
  }
}
```

----------------------------------------

TITLE: Handling V8 Maybe and Array Iteration in C++
DESCRIPTION: This C++ code demonstrates how to handle v8::Maybe for potentially failing operations (like array element access via a getter) and how to iterate through a v8::Array. It shows returning an empty Maybe on error and extracting the result using To(). The second function demonstrates calling the helper from a V8 function callback.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_16

LANGUAGE: cpp
CODE:
```
// This could also return a v8::MaybeLocal<v8::Number>, for example.
v8::Maybe<double> SumNumbers(v8::Local<v8::Context> context,
                             v8::Local<v8::Array> array_of_integers) {
  v8::Isolate* isolate = context->GetIsolate();
  v8::HandleScope handle_scope(isolate);

  double sum = 0;

  for (uint32_t i = 0; i < array_of_integers->Length(); i++) {
    v8::Local<v8::Value> entry;
    if (!array_of_integers->Get(context, i).ToLocal(&entry)) {
      // Oops, we might have hit a getter that throws an exception!
      // It's better to not continue return an empty (“nothing”) Maybe.
      return v8::Nothing<double>();
    }

    if (!entry->IsNumber()) {
      // Let's just skip any non-numbers. It would also be reasonable to throw
      // an exception here, e.g. using the error system in src/node_errors.h,
      // and then to return an empty Maybe again.
      continue;
    }

    // This cast is valid, because we've made sure it's really a number.
    v8::Local<v8::Number> entry_as_number = entry.As<v8::Number>();

    sum += entry_as_number->Value();
  }

  return v8::Just(sum);
}

// Function that is exposed to JS:
void SumNumbers(const v8::FunctionCallbackInfo<v8::Value>& args) {
  // This will crash if the first argument is not an array. Let's assume we
  // have performed type checking in a JavaScript wrapper function.
  CHECK(args[0]->IsArray());

  double sum;
  if (!SumNumbers(args.GetIsolate()->GetCurrentContext(),
                  args[0].As<v8::Array>()).To(&sum)) {
    // Nothing to do, we can just return directly to JavaScript.
    return;
  }

  args.GetReturnValue().Set(sum);
}
```

----------------------------------------

TITLE: Testing Array.isArray Method with Various Inputs
DESCRIPTION: A series of test cases validating Array.isArray behavior. Tests include empty arrays, array constructors, array-like objects, primitive values, and special cases like arguments object. Each test verifies the expected boolean return value.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/Array-isArray-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
Array.isArray([]) is true
Array.isArray(new Array) is true
Array.isArray(Array()) is true
Array.isArray('abc'.match(/(a)*/g)) is true
(function(){ return Array.isArray(arguments); })() is false
Array.isArray() is false
Array.isArray(null) is false
Array.isArray(undefined) is false
Array.isArray(true) is false
Array.isArray(false) is false
Array.isArray('a string') is false
Array.isArray({}) is false
Array.isArray({length: 5}) is false
Array.isArray({__proto__: Array.prototype, length:1, 0:1, 1:2}) is false
```

----------------------------------------

TITLE: Closing a Node.js Server using AbortController in JavaScript
DESCRIPTION: This example illustrates using the `AbortSignal` mechanism to close a Node.js `net.Server`. An `AbortController` is created, and its `signal` is passed as an option to the `server.listen()` method. Calling `controller.abort()` at a later point will trigger the server to close asynchronously, similarly to calling `server.close()` directly. This provides an alternative way to manage the server's lifecycle, often useful for coordinating cancellation across asynchronous operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
```js
const controller = new AbortController();
server.listen({
  host: 'localhost',
  port: 80,
  signal: controller.signal,
});
// Later, when you want to close the server.
controller.abort();
```
```

----------------------------------------

TITLE: Random Buffer Filling with Node.js Crypto (ESM)
DESCRIPTION: Demonstrates how to fill buffers with random data using crypto.randomFill in ESM format. Shows different ways to fill buffers including TypedArrays, DataView, and ArrayBuffer with random cryptographic data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_88

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';
const { randomFill } = await import('node:crypto');

const a = new Uint32Array(10);
randomFill(a, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)
    .toString('hex'));
});

const b = new DataView(new ArrayBuffer(10));
randomFill(b, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)
    .toString('hex'));
});

const c = new ArrayBuffer(10);
randomFill(c, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf).toString('hex'));
});
```

----------------------------------------

TITLE: Filling Buffer with Value in Node.js (mjs)
DESCRIPTION: Shows how to fill an entire Buffer with a specified ASCII character or an empty string (which results in null bytes) using the `fill()` method in Node.js MJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_46

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

// Fill a `Buffer` with the ASCII character 'h'.

const b = Buffer.allocUnsafe(50).fill('h');

console.log(b.toString());
// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh

// Fill a buffer with empty string
const c = Buffer.allocUnsafe(5).fill('');

console.log(c.fill(''));
// Prints: <Buffer 00 00 00 00 00>
```

----------------------------------------

TITLE: Implementing Node-API Addon in C++
DESCRIPTION: Shows how to create a Node.js addon using Node-API, which provides ABI stability across Node.js versions. This example creates a simple 'hello world' function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_9

LANGUAGE: cpp
CODE:
```
// hello.cc using Node-API
#include <node_api.h>

namespace demo {

napi_value Method(napi_env env, napi_callback_info args) {
  napi_value greeting;
  napi_status status;

  status = napi_create_string_utf8(env, "world", NAPI_AUTO_LENGTH, &greeting);
  if (status != napi_ok) return nullptr;
  return greeting;
}

napi_value init(napi_env env, napi_value exports) {
  napi_status status;
  napi_value fn;

  status = napi_create_function(env, nullptr, 0, Method, nullptr, &fn);
  if (status != napi_ok) return nullptr;

  status = napi_set_named_property(env, exports, "hello", fn);
  if (status != napi_ok) return nullptr;
  return exports;
}

NAPI_MODULE(NODE_GYP_MODULE_NAME, init)

}  // namespace demo
```

----------------------------------------

TITLE: Listening on an Exclusive Port with Node.js net.Server in JavaScript
DESCRIPTION: This code snippet shows how to configure a Node.js `net.Server` to listen on a specific host and port using the options object signature of `server.listen()`. The `exclusive` property is set to `true`, which prevents the underlying server handle from being shared among cluster workers, ensuring this specific server instance has exclusive use of the port. Attempted port sharing by other workers will result in an error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
```js
server.listen({
  host: 'localhost',
  port: 80,
  exclusive: true,
});
```
```

----------------------------------------

TITLE: Importing Commander in ES Modules
DESCRIPTION: Shows how to import Commander in ECMAScript modules and create a local Command object.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
// ECMAScript (.mjs)
import { Command } from 'commander';
const program = new Command();
```

----------------------------------------

TITLE: Using Symbol.iterator with URLSearchParams in Node.js
DESCRIPTION: Demonstrates how to use the Symbol.iterator to iterate over name-value pairs in URLSearchParams.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_43

LANGUAGE: javascript
CODE:
```
const params = new URLSearchParams('foo=bar&xyz=baz');
for (const [name, value] of params) {
  console.log(name, value);
}
// Prints:
//   foo bar
//   xyz baz
```

----------------------------------------

TITLE: Handling Coercion and Offset in Buffer Indexing in Node.js (mjs)
DESCRIPTION: Explains how the `indexOf()` method handles value coercion for numbers and byteOffset coercion for non-numeric inputs in Node.js MJS syntax, showing examples where floating-point numbers or non-numeric offsets are provided.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_56

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const b = Buffer.from('abcdef');

// Passing a value that's a number, but not a valid byte.
// Prints: 2, equivalent to searching for 99 or 'c'.
console.log(b.indexOf(99.9));
console.log(b.indexOf(256 + 99));

// Passing a byteOffset that coerces to NaN or 0.
// Prints: 1, searching the whole buffer.
console.log(b.indexOf('b', undefined));
console.log(b.indexOf('b', {}));
console.log(b.indexOf('b', null));
console.log(b.indexOf('b', []));
```

----------------------------------------

TITLE: Writing Big-Endian Unsigned 64-bit Integer (Node.js Buffer)
DESCRIPTION: Shows how to use `buf.writeBigUInt64BE()` to write a BigInt value into the buffer as a big-endian 64-bit unsigned integer. The example initializes a buffer and writes a hexadecimal BigInt, demonstrating the resulting byte order. Dependencies include the `Buffer` class from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_82

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeBigUInt64BE(0xdecafafecacefaden, 0);

console.log(buf);
// Prints: <Buffer de ca fa fe ca ce fa de>
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeBigUInt64BE(0xdecafafecacefaden, 0);

console.log(buf);
// Prints: <Buffer de ca fa fe ca ce fa de>
```

----------------------------------------

TITLE: Configuring Dependency Omission with 'omit' in npm
DESCRIPTION: Describes the `--omit` option, which specifies dependency types ('dev', 'optional', 'peer') to exclude from the physical installation in `node_modules`. The default is 'dev' if `NODE_ENV` is 'production'. Omitted dependencies are still resolved and recorded in the lockfile. If 'dev' is omitted, `NODE_ENV` is set to 'production' for lifecycle scripts.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_16

LANGUAGE: text
CODE:
```
#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty.
* Type: "dev", "optional", or "peer" (can be set multiple times)

Dependency types to omit from the installation tree on disk.

Note that these dependencies _are_ still resolved and added to the
`package-lock.json` or `npm-shrinkwrap.json` file. They are just not
physically installed on disk.

If a package type appears in both the `--include` and `--omit` lists, then
it will be included.

If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts.
```

----------------------------------------

TITLE: Requiring a Module Exporting a Class in Node.js CommonJS
DESCRIPTION: This snippet (`bar.js`) shows how to import a module (`./square.js`) that exports a class using `module.exports`. It uses `require()` to get the `Square` class, creates a new instance of it, and then calls the instance's `area()` method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_2

LANGUAGE: js
CODE:
```
const Square = require('./square.js');
const mySquare = new Square(2);
console.log(`The area of mySquare is ${mySquare.area()}`);
```

----------------------------------------

TITLE: Creating JavaScript Numbers from Int64 Values in C
DESCRIPTION: Function to convert C int64_t values to JavaScript numbers. Note that values outside the safe integer range will lose precision.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_91

LANGUAGE: c
CODE:
```
napi_status napi_create_int64(napi_env env, int64_t value, napi_value* result)
```

----------------------------------------

TITLE: Direct File Descriptor Writing in Node.js
DESCRIPTION: Shows the equivalent operation of writing to a file descriptor using fs.write instead of fs.writeFile.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_82

LANGUAGE: javascript
CODE:
```
import { write } from 'node:fs';
import { Buffer } from 'node:buffer';

write(fd, Buffer.from(data, options.encoding), callback);
```

----------------------------------------

TITLE: Getting All MockCallHistory Logs as Array in JavaScript
DESCRIPTION: Retrieves all registered MockCallHistoryLog entries as an array using the calls() method.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockCallHistory.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
mockAgent.getCallHistory()?.calls()
```

----------------------------------------

TITLE: Importing the Node.js os Module (CommonJS)
DESCRIPTION: Demonstrates how to import the `os` module using the CommonJS syntax (`require`). This is the traditional way to include modules in Node.js projects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const os = require('node:os');
```

----------------------------------------

TITLE: Iterating Buffer Keys (Node.js) - JavaScript
DESCRIPTION: Demonstrates how to use the `keys()` method of a Node.js Buffer to get an iterator over its byte indexes. The code iterates through the keys and prints each index to the console. This method is useful for accessing elements within the buffer by their position.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_58

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from('buffer');

for (const key of buf.keys()) {
  console.log(key);
}
// Prints:
//   0
//   1
//   2
//   3
//   4
//   5
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('buffer');

for (const key of buf.keys()) {
  console.log(key);
}
// Prints:
//   0
//   1
//   2
//   3
//   4
//   5
```

----------------------------------------

TITLE: Debugging Fetch API Output
DESCRIPTION: Shows how to enable debug logging for the Fetch API using NODE_DEBUG=fetch flag. Displays similar output to Undici but scoped specifically to fetch operations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Debug.md#2025-04-23_snippet_1

LANGUAGE: sh
CODE:
```
NODE_DEBUG=fetch node script.js

FETCH 16241: connecting to nodejs.org using https:h1
FETCH 16241: connecting to nodejs.org using https:h1
FETCH 16241: connected to nodejs.org using https:h1
FETCH 16241: sending request to GET https://nodejs.org//
FETCH 16241: received response to GET https://nodejs.org// - HTTP 307
FETCH 16241: connecting to nodejs.org using https:h1
FETCH 16241: trailers received from GET https://nodejs.org//
FETCH 16241: connected to nodejs.org using https:h1
FETCH 16241: sending request to GET https://nodejs.org//en
FETCH 16241: received response to GET https://nodejs.org//en - HTTP 200
FETCH 16241: trailers received from GET https://nodejs.org//en
```

----------------------------------------

TITLE: Demonstrating Asynchronous Directory Creation with mkdirp - Node.js - JavaScript
DESCRIPTION: This snippet showcases using the mkdirp module asynchronously in Node.js, employing both ES module and CommonJS import styles. It returns a Promise resolving to the path of the first newly created directory or undefined if all directories already exist. Required dependency is the 'mkdirp' npm package. The primary parameter is the directory path to create; on completion, the Promise resolves with the directory created, which is then logged to the console. Ensure Node.js v10.12.0+ for best compatibility, though earlier versions are partially supported.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
// hybrid module, import or require() both work\nimport { mkdirp } from 'mkdirp'\n// or:\nconst { mkdirp } = require('mkdirp')\n\n// return value is a Promise resolving to the first directory created\nmkdirp('/tmp/foo/bar/baz').then(made =>\n  console.log(`made directories, starting with ${made}`)\n)
```

----------------------------------------

TITLE: Creating a Node.js Cluster Server (ES Modules)
DESCRIPTION: This snippet demonstrates how to create a cluster of Node.js processes using ES modules. It forks worker processes based on the number of available CPUs and sets up an HTTP server that shares port 8000 among all workers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import cluster from 'node:cluster';
import http from 'node:http';
import { availableParallelism } from 'node:os';
import process from 'node:process';

const numCPUs = availableParallelism();

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end('hello world\n');
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}
```

----------------------------------------

TITLE: Generating HMAC Secret Key Synchronously with ESM
DESCRIPTION: Example of generating a symmetric HMAC secret key synchronously using ESM imports. Demonstrates creating a 512-bit key and exporting it as hexadecimal.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_69

LANGUAGE: javascript
CODE:
```
const {
  generateKeySync,
} = await import('node:crypto');

const key = generateKeySync('hmac', { length: 512 });
console.log(key.export().toString('hex'));  // e89..........41e
```

----------------------------------------

TITLE: Using assert.rejects() with Promise.reject() in Node.js (ESM)
DESCRIPTION: Shows how to use assert.rejects() to test rejected promises. This example checks if the promise is rejected with an Error object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_46

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

assert.rejects(
  Promise.reject(new Error('Wrong value')),
  Error,
).then(() => {
  // ...
});
```

----------------------------------------

TITLE: Creating a React Project with create-react-app
DESCRIPTION: Example of using npm init to create a new React-based project using the create-react-app package.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-init.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npm init react-app ./my-react-app
```

----------------------------------------

TITLE: Creating and Exporting a Native Function to JavaScript
DESCRIPTION: Example code showing how to create a native C function that can be called from JavaScript and how to expose it as part of a module's exports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_169

LANGUAGE: c
CODE:
```
napi_value SayHello(napi_env env, napi_callback_info info) {
  printf("Hello\n");
  return NULL;
}

napi_value Init(napi_env env, napi_value exports) {
  napi_status status;

  napi_value fn;
  status = napi_create_function(env, NULL, 0, SayHello, NULL, &fn);
  if (status != napi_ok) return NULL;

  status = napi_set_named_property(env, exports, "sayHello", fn);
  if (status != napi_ok) return NULL;

  return exports;
}

NAPI_MODULE(NODE_GYP_MODULE_NAME, Init)
```

----------------------------------------

TITLE: Implementing Custom REPL Commands
DESCRIPTION: Shows how to add custom dot-commands to a REPL instance with help text and custom actions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_21

LANGUAGE: mjs
CODE:
```
import repl from 'node:repl';

const replServer = repl.start({ prompt: '> ' });
replServer.defineCommand('sayhello', {
  help: 'Say hello',
  action(name) {
    this.clearBufferedCommand();
    console.log(`Hello, ${name}!`);
    this.displayPrompt();
  },
});
replServer.defineCommand('saybye', function saybye() {
  console.log('Goodbye!');
  this.close();
});
```

----------------------------------------

TITLE: Inspecting TypedArrays in Node.js - JavaScript
DESCRIPTION: This snippet provides a detailed object representation of a TypedArray (specifically an Int32Array with indexes from 79 to 99), highlighting each element's name, type, and value. The structure demonstrates how each numeric index maps to an object property with type and initial value. These representations are commonly used in debugging or previewing array contents in JavaScript environments such as Node.js Inspector. Dependencies include the Node.js runtime and understanding of typed array objects; input and output are directly structured JS objects mapping indices to metadata for each element.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_48

LANGUAGE: JavaScript
CODE:
```
{
    [79] : {
        name : 79
        type : number
        value : 0
    }
    [80] : {
        name : 80
        type : number
        value : 0
    }
    [81] : {
        name : 81
        type : number
        value : 0
    }
    [82] : {
        name : 82
        type : number
        value : 0
    }
    [83] : {
        name : 83
        type : number
        value : 0
    }
    [84] : {
        name : 84
        type : number
        value : 0
    }
    [85] : {
        name : 85
        type : number
        value : 0
    }
    [86] : {
        name : 86
        type : number
        value : 0
    }
    [87] : {
        name : 87
        type : number
        value : 0
    }
    [88] : {
        name : 88
        type : number
        value : 0
    }
    [89] : {
        name : 89
        type : number
        value : 0
    }
    [90] : {
        name : 90
        type : number
        value : 0
    }
    [91] : {
        name : 91
        type : number
        value : 0
    }
    [92] : {
        name : 92
        type : number
        value : 0
    }
    [93] : {
        name : 93
        type : number
        value : 0
    }
    [94] : {
        name : 94
        type : number
        value : 0
    }
    [95] : {
        name : 95
        type : number
        value : 0
    }
    [96] : {
        name : 96
        type : number
        value : 0
    }
    [97] : {
        name : 97
        type : number
        value : 0
    }
    [98] : {
        name : 98
        type : number
        value : 0
    }
    [99] : {
        name : 99
        type : number
        value : 0
    }
}

```

----------------------------------------

TITLE: Importing Node.js Release Keys with GPG
DESCRIPTION: Bash commands to import the full set of trusted release keys for Node.js, including subkeys possibly used to sign releases. Each command imports a key for a specific releaser.
SOURCE: https://github.com/nodejs/node/blob/main/README.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
gpg --keyserver hkps://keys.openpgp.org --recv-keys C0D6248439F1D5604AAFFB4021D900FFDB233756 # Antoine du Hamel
gpg --keyserver hkps://keys.openpgp.org --recv-keys DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7 # Juan José Arboleda
gpg --keyserver hkps://keys.openpgp.org --recv-keys CC68F5A3106FF448322E48ED27F5E38D5B0A215F # Marco Ippolito
gpg --keyserver hkps://keys.openpgp.org --recv-keys 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 # Michaël Zasso
gpg --keyserver hkps://keys.openpgp.org --recv-keys 890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 # Rafael Gonzaga
gpg --keyserver hkps://keys.openpgp.org --recv-keys C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C # Richard Lau
gpg --keyserver hkps://keys.openpgp.org --recv-keys 108F52B48DB57BB0CC439B2997B01419BD92F80A # Ruy Adorno
gpg --keyserver hkps://keys.openpgp.org --recv-keys A363A499291CBBC940DD62E41F10027AF002F8B0 # Ulises Gascón
```

----------------------------------------

TITLE: Another Dependency Tree Example
DESCRIPTION: Shows another example of a dependency graph with duplication where c@1.0.3 is at the root level and c@1.9.9 is nested under d.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-dedupe.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
a
+-- b <-- depends on c@1.0.x
+-- c@1.0.3
`-- d <-- depends on c@1.x
    `-- c@1.9.9
```

----------------------------------------

TITLE: Requesting and Decompressing HTTP Responses with zlib (CommonJS, JavaScript/Node.js)
DESCRIPTION: This CommonJS-style Node.js snippet demonstrates how to make an HTTP client request and decompress various Content-Encoding formats ('br', 'gzip', 'deflate', and 'zstd') on the response stream using node:zlib. Dependencies: node:zlib, node:http, node:fs, node:stream. The Accept-Encoding header sent by the client advertises supported encodings and the response's content is written to disk after decompression. Error handling in the pipeline calls ensures robust operation. The example is not production-ready and omits cache logic for efficiency.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_11

LANGUAGE: cjs
CODE:
```
// Client request example\nconst zlib = require('node:zlib');\nconst http = require('node:http');\nconst fs = require('node:fs');\nconst { pipeline } = require('node:stream');\n\nconst request = http.get({ host: 'example.com',\n                           path: '/',\n                           port: 80,\n                           headers: { 'Accept-Encoding': 'br,gzip,deflate,zstd' } });\nrequest.on('response', (response) => {\n  const output = fs.createWriteStream('example.com_index.html');\n\n  const onError = (err) => {\n    if (err) {\n      console.error('An error occurred:', err);\n      process.exitCode = 1;\n    }\n  };\n\n  switch (response.headers['content-encoding']) {\n    case 'br':\n      pipeline(response, zlib.createBrotliDecompress(), output, onError);\n      break;\n    // Or, just use zlib.createUnzip() to handle both of the following cases:\n    case 'gzip':\n      pipeline(response, zlib.createGunzip(), output, onError);\n      break;\n    case 'deflate':\n      pipeline(response, zlib.createInflate(), output, onError);\n      break;\n    case 'zstd':\n      pipeline(response, zlib.createZstdDecompress(), output, onError);\n      break;\n    default:\n      pipeline(response, output, onError);\n      break;\n  }\n});
```

----------------------------------------

TITLE: Monitoring Event Loop Delay Using perf_hooks (ESM) - JavaScript
DESCRIPTION: Demonstrates how to monitor event loop delays in a Node.js application using the monitorEventLoopDelay API from the 'perf_hooks' module in ECMAScript module syntax. Requires Node.js version 11.10.0 or newer, with access to 'node:perf_hooks'. The monitored histogram is enabled, then various statistics (min, max, mean, stddev, percentiles) are logged after disabling monitoring. This pattern is suitable for asynchronous performance analysis in JavaScript modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_18

LANGUAGE: JavaScript
CODE:
```
```mjs\nimport { monitorEventLoopDelay } from 'node:perf_hooks';\n\nconst h = monitorEventLoopDelay({ resolution: 20 });\nh.enable();\n// Do something.\nh.disable();\nconsole.log(h.min);\nconsole.log(h.max);\nconsole.log(h.mean);\nconsole.log(h.stddev);\nconsole.log(h.percentiles);\nconsole.log(h.percentile(50));\nconsole.log(h.percentile(99));\n```
```

----------------------------------------

TITLE: Generating Ed25519 and X25519 Key Pairs using Web Crypto API in JavaScript
DESCRIPTION: These functions generate Ed25519 and X25519 key pairs using the Web Crypto API. Ed25519 is used for signing and verifying, while X25519 is used for key derivation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function generateEd25519Key() {
  return subtle.generateKey({
    name: 'Ed25519',
  }, true, ['sign', 'verify']);
}

async function generateX25519Key() {
  return subtle.generateKey({
    name: 'X25519',
  }, true, ['deriveKey']);
}
```

----------------------------------------

TITLE: Importing a Non-Exported Subpath Throws Error (JavaScript)
DESCRIPTION: Shows the result of trying to import an undefined or private subpath from a package that uses the exports field to restrict entry points. Node.js throws an ERR_PACKAGE_PATH_NOT_EXPORTED error as the subpath was not specified in the exports. Helps illustrate the security benefit of strict export field usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_10

LANGUAGE: js
CODE:
```
import submodule from 'es-module-package/private-module.js';
// Throws ERR_PACKAGE_PATH_NOT_EXPORTED
```

----------------------------------------

TITLE: Ignoring Next Line(s) for Node.js Test Coverage - Javascript
DESCRIPTION: Demonstrates using the `/* node:coverage ignore next */` comment to exclude the immediate following line from coverage reporting, and `/* node:coverage ignore next N */` to exclude the subsequent N lines, useful for skipping lines that are intentionally not covered.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_19

LANGUAGE: Javascript
CODE:
```
/* node:coverage ignore next */
if (anAlwaysFalseCondition) { console.log('this is never executed'); }

/* node:coverage ignore next 3 */
if (anAlwaysFalseCondition) {
  console.log('this is never executed');
}
```

----------------------------------------

TITLE: Creating and Piping a ReadableStream from Buffer Iterable (MJS)
DESCRIPTION: This example demonstrates creating a `ReadableStream` using `ReadableStream.from()` where the source iterable yields `Buffer` objects. This is suitable for piping the stream to a `WritableStream`. The snippet uses ES Module syntax and pipes the resulting stream using `stream.pipeTo()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_11

LANGUAGE: mjs
CODE:
```
```mjs
import { ReadableStream } from 'node:stream/web';
import { Buffer } from 'node:buffer';

async function* asyncIterableGenerator() {
  yield Buffer.from('a');
  yield Buffer.from('b');
  yield Buffer.from('c');
}

const stream = ReadableStream.from(asyncIterableGenerator());

await stream.pipeTo(createWritableStreamSomehow());
```
```

----------------------------------------

TITLE: Setting a cookie with setCookie in Undici
DESCRIPTION: Example demonstrating how to use the setCookie function to append a cookie to the Set-Cookie header. It requires Headers from Undici and a Cookie object, and returns void.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Cookies.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import { setCookie, Headers } from 'undici'

const headers = new Headers()
setCookie(headers, { name: 'undici', value: 'setCookie' })

console.log(headers.get('Set-Cookie')) // undici=setCookie
```

----------------------------------------

TITLE: Iterating over URLSearchParams in Node.js
DESCRIPTION: Demonstrates how to use the forEach() method of URLSearchParams to iterate over name-value pairs in a URL's query string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_39

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://example.org/?a=b&c=d');
myURL.searchParams.forEach((value, name, searchParams) => {
  console.log(name, value, myURL.searchParams === searchParams);
});
// Prints:
//   a b true
//   c d true
```

----------------------------------------

TITLE: Configuring Travis CI to Use npm ci
DESCRIPTION: Example Travis CI configuration that uses npm ci instead of npm install and caches the npm directory for faster builds.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-ci.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
# .travis.yml
install:
- npm ci
# keep the npm cache around to speed up installs
cache:
  directories:
  - "$HOME/.npm"
```

----------------------------------------

TITLE: Finding Index in Buffer in Node.js (cjs)
DESCRIPTION: Illustrates using the `indexOf()` method to find the first index of a value (string, Buffer, or integer) within a Buffer in Node.js CommonJS syntax, providing examples with various input types and encodings like UTF-16.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_55

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('this is a buffer');

console.log(buf.indexOf('this'));
// Prints: 0
console.log(buf.indexOf('is'));
// Prints: 2
console.log(buf.indexOf(Buffer.from('a buffer')));
// Prints: 8
console.log(buf.indexOf(97));
// Prints: 8 (97 is the decimal ASCII value for 'a')
console.log(buf.indexOf(Buffer.from('a buffer example')));
// Prints: -1
console.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));
// Prints: 8

const utf16Buffer = Buffer.from('ΚΑΣΣΕ', 'utf16le');

console.log(utf16Buffer.indexOf('Σ', 0, 'utf16le'));
// Prints: 4
console.log(utf16Buffer.indexOf('Σ', -4, 'utf16le'));
// Prints: 6
```

----------------------------------------

TITLE: Streaming HTTP Responses to Fastify Server with Undici
DESCRIPTION: Example showing integration between Undici and Fastify. It demonstrates how to efficiently stream a response from an HTTP server to a Fastify client by passing the Fastify response to the opaque option.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'
import fastify from 'fastify'

const nodeServer = createServer((request, response) => {
  response.end('Hello, World! From Node.js HTTP Server')
}).listen()

await once(nodeServer, 'listening')

console.log('Node Server listening')

const nodeServerUndiciClient = new Client(`http://localhost:${nodeServer.address().port}`)

const fastifyServer = fastify()

fastifyServer.route({
  url: '/',
  method: 'GET',
  handler: (request, response) => {
    nodeServerUndiciClient.stream({
      path: '/',
      method: 'GET',
      opaque: response
    }, ({ opaque }) => opaque.raw)
  }
})

await fastifyServer.listen()

console.log('Fastify Server listening')

const fastifyServerUndiciClient = new Client(`http://localhost:${fastifyServer.server.address().port}`)

try {
  const { statusCode, body } = await fastifyServerUndiciClient.request({
    path: '/',
    method: 'GET'
  })

  console.log(`response received ${statusCode}`)
  body.setEncoding('utf8')
  body.on('data', console.log)

  nodeServerUndiciClient.close()
  fastifyServerUndiciClient.close()
  fastifyServer.close()
  nodeServer.close()
} catch (error) { }
```

----------------------------------------

TITLE: Extended Query Selector Examples
DESCRIPTION: Comprehensive examples of CSS-like selectors for querying npm dependencies including direct deps, workspaces, and specific package queries
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-query.md#2025-04-23_snippet_2

LANGUAGE: stylus
CODE:
```
// all deps
*

// all direct deps
:root > *

// direct production deps
:root > .prod

// direct development deps
:root > .dev

// any peer dep of a direct deps
:root > * > .peer

// any workspace dep
.workspace

// all workspaces that depend on another workspace
.workspace > .workspace

// all workspaces that have peer deps
.workspace:has(.peer)

// any dep named "lodash"
// equivalent to [name="lodash"]
#lodash

// any deps named "lodash" & within semver range ^"1.2.3"
#lodash@^1.2.3
// equivalent to...
[name="lodash"]:semver(^1.2.3)

// get the hoisted node for a given semver range
#lodash@^1.2.3:not(:deduped)

// querying deps with a specific version
#lodash@2.1.5
// equivalent to...
[name="lodash"][version="2.1.5"]

// has any deps
:has(*)

// deps with no other deps (ie. "leaf" nodes)
:empty

// manually querying git dependencies
[repository^=github:],
[repository^=git:],
[repository^=https://github.com],
[repository^=http://github.com],
[repository^=https://github.com],
[repository^=+git:...]

// querying for all git dependencies
:type(git)

// get production dependencies that aren't also dev deps
.prod:not(.dev)

// get dependencies with specific licenses
[license=MIT], [license=ISC]

// find all packages that have @ruyadorno as a contributor
:attr(contributors, [email=ruyadorno@github.com])
```

----------------------------------------

TITLE: Basic MockPool Instantiation with Undici
DESCRIPTION: Demonstrates how to create a basic MockPool instance using MockAgent. This setup prepares for request interception but doesn't do anything until registered as the agent and mock requests are configured.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { MockAgent } from 'undici'

const mockAgent = new MockAgent()

const mockPool = mockAgent.get('http://localhost:3000')
```

----------------------------------------

TITLE: Comprehensive Async Hooks Example in Node.js (ES Modules)
DESCRIPTION: Provides a detailed example of using Async Hooks in Node.js to track the lifecycle of asynchronous resources, including init, before, after, and destroy callbacks, using ES Modules syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
import async_hooks from 'node:async_hooks';
import fs from 'node:fs';
import net from 'node:net';
import { stdout } from 'node:process';
const { fd } = stdout;

let indent = 0;
async_hooks.createHook({
  init(asyncId, type, triggerAsyncId) {
    const eid = async_hooks.executionAsyncId();
    const indentStr = ' '.repeat(indent);
    fs.writeSync(
      fd,
      `${indentStr}${type}(${asyncId}):` +
      ` trigger: ${triggerAsyncId} execution: ${eid}\n`);
  },
  before(asyncId) {
    const indentStr = ' '.repeat(indent);
    fs.writeSync(fd, `${indentStr}before:  ${asyncId}\n`);
    indent += 2;
  },
  after(asyncId) {
    indent -= 2;
    const indentStr = ' '.repeat(indent);
    fs.writeSync(fd, `${indentStr}after:  ${asyncId}\n`);
  },
  destroy(asyncId) {
    const indentStr = ' '.repeat(indent);
    fs.writeSync(fd, `${indentStr}destroy:  ${asyncId}\n`);
  },
}).enable();

net.createServer(() => {}).listen(8080, () => {
  // Let's wait 10ms before logging the server started.
  setTimeout(() => {
    console.log('>>>', async_hooks.executionAsyncId());
  }, 10);
});
```

----------------------------------------

TITLE: Incrementing an Existing Prerelease Version using CLI
DESCRIPTION: Shows how to use the `semver` command-line tool to increment an existing prerelease version. Given `1.2.4-beta.0` and the `-i prerelease` flag, it increments the prerelease number, resulting in `1.2.4-beta.1`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
$ semver 1.2.4-beta.0 -i prerelease
1.2.4-beta.1
```

----------------------------------------

TITLE: Implementing Gzip Compression with Flush in Node.js (CommonJS)
DESCRIPTION: CommonJS version of the HTTP server that compresses and streams time updates using gzip compression. Demonstrates proper usage of zlib's flush() method to ensure immediate data availability.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
const zlib = require('node:zlib');
const http = require('node:http');
const { pipeline } = require('node:stream');

http.createServer((request, response) => {
  // For the sake of simplicity, the Accept-Encoding checks are omitted.
  response.writeHead(200, { 'content-encoding': 'gzip' });
  const output = zlib.createGzip();
  let i;

  pipeline(output, response, (err) => {
    if (err) {
      // If an error occurs, there's not much we can do because
      // the server has already sent the 200 response code and
      // some amount of data has already been sent to the client.
      // The best we can do is terminate the response immediately
      // and log the error.
      clearInterval(i);
      response.end();
      console.error('An error occurred:', err);
    }
  });

  i = setInterval(() => {
    output.write(`The current time is ${Date()}\n`, () => {
      // The data has been passed to zlib, but the compression algorithm may
      // have decided to buffer the data for more efficient compression.
      // Calling .flush() will make the data available as soon as the client
      // is ready to receive it.
      output.flush();
    });
  }, 1000);
}).listen(1337);
```

----------------------------------------

TITLE: Capturing Execution Context with AsyncLocalStorage.snapshot
DESCRIPTION: These snippets demonstrate using `AsyncLocalStorage.snapshot()` to capture the current execution context. The returned function allows executing code within the captured context, useful for preserving context across different `run` calls or for simple context tracking without `AsyncResource`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_2

LANGUAGE: js
CODE:
```
const asyncLocalStorage = new AsyncLocalStorage();
const runInAsyncScope = asyncLocalStorage.run(123, () => AsyncLocalStorage.snapshot());
const result = asyncLocalStorage.run(321, () => runInAsyncScope(() => asyncLocalStorage.getStore()));
console.log(result);  // returns 123
```

LANGUAGE: js
CODE:
```
class Foo {
  #runInAsyncScope = AsyncLocalStorage.snapshot();

  get() { return this.#runInAsyncScope(() => asyncLocalStorage.getStore()); }
}

const foo = asyncLocalStorage.run(123, () => new Foo());
console.log(asyncLocalStorage.run(321, () => foo.get())); // returns 123
```

----------------------------------------

TITLE: Stream Pipe Event Handling
DESCRIPTION: Example demonstrating how to handle the 'pipe' event when a Readable stream is piped to a Writable stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
const writer = getWritableStreamSomehow();
const reader = getReadableStreamSomehow();
writer.on('pipe', (src) => {
  console.log('Something is piping into the writer.');
  assert.equal(src, reader);
});
reader.pipe(writer);
```

----------------------------------------

TITLE: Running Tests with npm - Bash
DESCRIPTION: This snippet runs the project's test suite using 'npm test'. With the 'GENERATE=1' environment variable, it updates test expectations, useful when behavioral baselines change. These commands require Node.js and npm, and presuppose that test scripts are defined in the project's package.json.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/tools/clusterfuzz/js_fuzzer/README.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ npm test
```

----------------------------------------

TITLE: Using PerformanceObserver with type Option in CommonJS
DESCRIPTION: Demonstrates creating multiple performance marks and observing them with the 'type' option in CommonJS. The observer is called asynchronously after all marks are created.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((list, observer) => {
  // Called once asynchronously. `list` contains three items.
});
obs.observe({ type: 'mark' });

for (let n = 0; n < 3; n++)
  performance.mark(`test${n}`);
```

----------------------------------------

TITLE: Checking if Object is Buffer with isBuffer
DESCRIPTION: Illustrates the use of the static method `Buffer.isBuffer()` to determine if a given object is a Node.js Buffer instance. It returns `true` for Buffers and `false` for other types like strings, arrays, or Uint8Arrays.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_35

LANGUAGE: Node.js (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

Buffer.isBuffer(Buffer.alloc(10)); // true
Buffer.isBuffer(Buffer.from('foo')); // true
Buffer.isBuffer('a string'); // false
Buffer.isBuffer([]); // false
Buffer.isBuffer(new Uint8Array(1024)); // false
```

LANGUAGE: Node.js (CJS)
CODE:
```
const { Buffer } = require('node:buffer');

Buffer.isBuffer(Buffer.alloc(10)); // true
Buffer.isBuffer(Buffer.from('foo')); // true
Buffer.isBuffer('a string'); // false
Buffer.isBuffer([]); // false
Buffer.isBuffer(new Uint8Array(1024)); // false
```

----------------------------------------

TITLE: Creating External JavaScript Strings from UTF16 Text in C
DESCRIPTION: Function to create JavaScript string values from UTF16-LE encoded C strings without copying, with optional finalization callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_99

LANGUAGE: c
CODE:
```
napi_status
node_api_create_external_string_utf16(napi_env env,
                                      char16_t* str,
                                      size_t length,
                                      napi_finalize finalize_callback,
                                      void* finalize_hint,
                                      napi_value* result,
                                      bool* copied);
```

----------------------------------------

TITLE: String Pattern Matching with assert.doesNotMatch
DESCRIPTION: Demonstrates usage of assert.doesNotMatch() to verify strings do not match regular expressions. Shows examples of successful assertions and error cases.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_17

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

assert.doesNotMatch('I will fail', /fail/);
// AssertionError [ERR_ASSERTION]: The input was expected to not match the ...

assert.doesNotMatch(123, /pass/);
// AssertionError [ERR_ASSERTION]: The "string" argument must be of type string.

assert.doesNotMatch('I will pass', /different/);
// OK
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

assert.doesNotMatch('I will fail', /fail/);
// AssertionError [ERR_ASSERTION]: The input was expected to not match the ...

assert.doesNotMatch(123, /pass/);
// AssertionError [ERR_ASSERTION]: The "string" argument must be of type string.

assert.doesNotMatch('I will pass', /different/);
// OK
```

----------------------------------------

TITLE: Basic npm diff Command Syntax
DESCRIPTION: The basic syntax for the npm diff command, which can take optional paths as arguments to filter which files to compare.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-diff.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm diff [...<paths>]
```

----------------------------------------

TITLE: Importing a Workspace Module
DESCRIPTION: Example of how to import and use a module from a workspace in another part of the project. This showcases the seamless integration of workspaces in the Node.js module resolution system.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/workspaces.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
// ./lib/index.js
const moduleA = require('a')
console.log(moduleA) // -> a
```

----------------------------------------

TITLE: Using assert.deepStrictEqual in CommonJS (Node.js)
DESCRIPTION: Demonstrates the usage of assert.deepStrictEqual with various data types in CommonJS format. Shows identical examples to the ES Modules version, covering objects, primitives, dates, symbols, and weak collections.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
const assert = require('node:assert/strict');

// This fails because 1 !== '1'.
assert.deepStrictEqual({ a: 1 }, { a: '1' });
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
//   {
// +   a: 1
// -   a: '1'
//   }

// The following objects don't have own properties
const date = new Date();
const object = {};
const fakeDate = {};
Object.setPrototypeOf(fakeDate, Date.prototype);

// Different [[Prototype]]:
assert.deepStrictEqual(object, fakeDate);
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + {}
// - Date {}

// Different type tags:
assert.deepStrictEqual(date, fakeDate);
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + 2018-04-26T00:49:08.604Z
// - Date {}

assert.deepStrictEqual(NaN, NaN);
// OK because Object.is(NaN, NaN) is true.

// Different unwrapped numbers:
assert.deepStrictEqual(new Number(1), new Number(2));
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + [Number: 1]
// - [Number: 2]

assert.deepStrictEqual(new String('foo'), Object('foo'));
// OK because the object and the string are identical when unwrapped.

assert.deepStrictEqual(-0, -0);
// OK

// Different zeros:
assert.deepStrictEqual(0, -0);
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + 0
// - -0

const symbol1 = Symbol();
const symbol2 = Symbol();
assert.deepStrictEqual({ [symbol1]: 1 }, { [symbol1]: 1 });
// OK, because it is the same symbol on both objects.

assert.deepStrictEqual({ [symbol1]: 1 }, { [symbol2]: 1 });
// AssertionError [ERR_ASSERTION]: Inputs identical but not reference equal:
//
// {
//   Symbol(): 1
// }

const weakMap1 = new WeakMap();
const weakMap2 = new WeakMap();
const obj = {};

weakMap1.set(obj, 'value');
weakMap2.set(obj, 'value');

// Comparing different instances fails, even with same contents
assert.deepStrictEqual(weakMap1, weakMap2);
// AssertionError: Values have same structure but are not reference-equal:
//
// WeakMap {
//   <items unknown>
// }

// Comparing the same instance to itself succeeds
assert.deepStrictEqual(weakMap1, weakMap1);
// OK

const weakSet1 = new WeakSet();
const weakSet2 = new WeakSet();
weakSet1.add(obj);
weakSet2.add(obj);

// Comparing different instances fails, even with same contents
assert.deepStrictEqual(weakSet1, weakSet2);
// AssertionError: Values have same structure but are not reference-equal:
// + actual - expected
//
// WeakSet {
//   <items unknown>
// }

// Comparing the same instance to itself succeeds
assert.deepStrictEqual(weakSet1, weakSet1);
// OK
```

----------------------------------------

TITLE: Capturing Promise Rejections with EventEmitter Options (MJS/CJS)
DESCRIPTION: Shows how to enable automatic promise rejection capturing by setting the `captureRejections: true` option in the `EventEmitter` constructor. It demonstrates routing the captured rejection to either an 'error' event handler or a custom handler assigned to `Symbol.for('nodejs.rejection')`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_17

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
const ee1 = new EventEmitter({ captureRejections: true });
ee1.on('something', async (value) => {
  throw new Error('kaboom');
});

ee1.on('error', console.log);

const ee2 = new EventEmitter({ captureRejections: true });
ee2.on('something', async (value) => {
  throw new Error('kaboom');
});

ee2[Symbol.for('nodejs.rejection')] = console.log;
```

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
const ee1 = new EventEmitter({ captureRejections: true });
ee1.on('something', async (value) => {
  throw new Error('kaboom');
});

ee1.on('error', console.log);

const ee2 = new EventEmitter({ captureRejections: true });
ee2.on('something', async (value) => {
  throw new Error('kaboom');
});

ee2[Symbol.for('nodejs.rejection')] = console.log;
```

----------------------------------------

TITLE: Deriving Bits and Keys using PBKDF2 with Web Crypto API in JavaScript
DESCRIPTION: These functions demonstrate how to derive bits and keys using the PBKDF2 algorithm with the Web Crypto API. They handle password-based key derivation for generating cryptographic keys or raw bits.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function pbkdf2(pass, salt, iterations = 1000, length = 256) {
  const ec = new TextEncoder();
  const key = await subtle.importKey(
    'raw',
    ec.encode(pass),
    'PBKDF2',
    false,
    ['deriveBits']);
  const bits = await subtle.deriveBits({
    name: 'PBKDF2',
    hash: 'SHA-512',
    salt: ec.encode(salt),
    iterations,
  }, key, length);
  return bits;
}

async function pbkdf2Key(pass, salt, iterations = 1000, length = 256) {
  const ec = new TextEncoder();
  const keyMaterial = await subtle.importKey(
    'raw',
    ec.encode(pass),
    'PBKDF2',
    false,
    ['deriveKey']);
  const key = await subtle.deriveKey({
    name: 'PBKDF2',
    hash: 'SHA-512',
    salt: ec.encode(salt),
    iterations,
  }, keyMaterial, {
    name: 'AES-GCM',
    length,
  }, true, ['encrypt', 'decrypt']);
  return key;
}
```

----------------------------------------

TITLE: Example Output of os.cpus() in JavaScript
DESCRIPTION: Illustrates the typical structure and data returned by the `os.cpus()` method. It returns an array of objects, where each object represents a logical CPU core and contains details like the model, speed (in MHz), and CPU time spent in different modes (user, nice, sys, idle, irq). Note that `nice` values are POSIX-only.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_2

LANGUAGE: js
CODE:
```
[
  {
    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
    speed: 2926,
    times: {
      user: 252020,
      nice: 0,
      sys: 30340,
      idle: 1070356870,
      irq: 0,
    },
  },
  {
    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
    speed: 2926,
    times: {
      user: 306960,
      nice: 0,
      sys: 26980,
      idle: 1071569080,
      irq: 0,
    },
  },
  {
    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
    speed: 2926,
    times: {
      user: 248450,
      nice: 0,
      sys: 21750,
      idle: 1070919370,
      irq: 0,
    },
  },
  {
    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
    speed: 2926,
    times: {
      user: 256880,
      nice: 0,
      sys: 19430,
      idle: 1070905480,
      irq: 20,
    },
  },
]
```

----------------------------------------

TITLE: Accessing Node.js Dependency Versions (CommonJS)
DESCRIPTION: Shows how to access version information for Node.js and its dependencies using process.versions in CommonJS modules. It requires the versions object and logs it to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_100

LANGUAGE: javascript
CODE:
```
const { versions } = require('node:process');

console.log(versions);
```

----------------------------------------

TITLE: Equivalent Commands for Linking Packages in Bash
DESCRIPTION: Illustrates the equivalent commands for creating a global link and then linking it to the project.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
(cd ../node-redis; npm link)
npm link redis
```

----------------------------------------

TITLE: Adding a New Developer to an npm Organization
DESCRIPTION: Shows how to add a new developer to an npm organization using the npm org set command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-org.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npm org set my-org @mx-smith
```

----------------------------------------

TITLE: Monitoring Uncaught Exceptions in Node.js (CommonJS)
DESCRIPTION: Example of attaching an 'uncaughtExceptionMonitor' event handler in Node.js using CommonJS require. This event allows monitoring exceptions without changing the default crash behavior. The process will still crash after the monitor handler executes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
const process = require('node:process');

process.on('uncaughtExceptionMonitor', (err, origin) => {
  MyMonitoringTool.logSync(err, origin);
});

// Intentionally cause an exception, but don't catch it.
nonexistentFunc();
// Still crashes Node.js
```

----------------------------------------

TITLE: Defining an Asynchronous Function Returning a Value in Node.js (JavaScript)
DESCRIPTION: This snippet defines asyncFoo, an async function that internally awaits a promise, performs a transformation, and calls return42. It highlights the chaining of promises and the direct return of values in async functions. No external dependencies are required; parameters are implicit, and the output is derived from the return42 function.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-expected.txt#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
async function asyncFoo() {\n  #await Promise.resolve().then(v => v * 2);\n  return42();
```

----------------------------------------

TITLE: Testing Array.prototype.some with Various Arrays and Callbacks in JavaScript
DESCRIPTION: This snippet demonstrates the use of Array.prototype.some method with different array types and callback functions. It tests the method's behavior with empty arrays, large empty arrays, large sparse arrays, and simple arrays, using callbacks that return index, increase length, decrease length, and halve length.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-enumerators-functions-expected.txt#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.some.call(toObject(emptyArray), forwarders[f], returnIndex, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(largeEmptyArray).some(forwarders[f], returnIndex, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.some.call(toObject(largeSparseArray), forwarders[f], returnIndex, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(simpleArray).some(forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.some.call(toObject(simpleArray), forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(largeSparseArray).some(forwarders[f], halveLength, 0);
```

----------------------------------------

TITLE: Destroying a Writable Stream with Error in Node.js (cjs)
DESCRIPTION: Demonstrates destroying a Node.js Writable stream using the `destroy()` method with an Error argument. An 'error' event listener is attached to catch and log the provided error message. After `destroy()` is called, the stream ends, and subsequent operations like `write()` will fail.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_18

LANGUAGE: cjs
CODE:
```
const { Writable } = require('node:stream');

const myStream = new Writable();

const fooErr = new Error('foo error');
myStream.destroy(fooErr);
myStream.on('error', (fooErr) => console.error(fooErr.message)); // foo error
```

----------------------------------------

TITLE: Creating and running subtests - Node.js Test Runner
DESCRIPTION: Shows how to create nested tests within a parent test using the `t.test()` method, where `t` is the test context object provided to the test function. This structure helps organize tests hierarchically; failure in a subtest causes the parent test to fail. Requires the `assert` module for making assertions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_3

LANGUAGE: javascript
CODE:
```
test('top level test', async (t) => {
  t.test('subtest 1', (t) => {
    assert.strictEqual(1, 1);
  });

  t.test('subtest 2', (t) => {
    assert.strictEqual(2, 2);
  });
});
```

----------------------------------------

TITLE: Using Subpath Patterns in JavaScript Imports
DESCRIPTION: Shows how subpath patterns defined in package.json are used in JavaScript import statements. The patterns allow developers to access nested files while maintaining the exported structure.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_14

LANGUAGE: js
CODE:
```
import featureX from 'es-module-package/features/x.js';
// Loads ./node_modules/es-module-package/src/features/x.js

import featureY from 'es-module-package/features/y/y.js';
// Loads ./node_modules/es-module-package/src/features/y/y.js

import internalZ from '#internal/z.js';
// Loads ./node_modules/es-module-package/src/internal/z.js
```

----------------------------------------

TITLE: Analyzing Async Stack Traces in Node.js
DESCRIPTION: This snippet shows multiple stack traces for async function calls, demonstrating how async/await and Promise.then affect the call stack in Node.js. It includes traces for foo1, foo2, and test functions across different asynchronous operations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/async-stack-await-expected.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
foo2 (test.js:15:2)
-- await --
test (test.js:24:8)
(anonymous) (expr.js:0:0)

foo2 (test.js:17:2)
-- await --
test (test.js:24:8)
(anonymous) (expr.js:0:0)

foo1 (test.js:9:2)
foo2 (test.js:18:8)
-- await --
test (test.js:24:8)
(anonymous) (expr.js:0:0)

foo1 (test.js:9:2)
-- Promise.then --
foo2 (test.js:19:43)
-- await --
test (test.js:24:8)
(anonymous) (expr.js:0:0)

foo2 (test.js:20:2)
-- await --
test (test.js:24:8)
(anonymous) (expr.js:0:0)
```

----------------------------------------

TITLE: Triggering Heap Snapshot via Signal (Console)
DESCRIPTION: This console example demonstrates how to start a Node.js process configured to write a heap snapshot upon receiving a specific signal (SIGUSR2). It shows the process running in the background, identifying its PID, sending the signal using `kill`, and verifying that a heap snapshot file was generated.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_25

LANGUAGE: console
CODE:
```
$ node --heapsnapshot-signal=SIGUSR2 index.js &
$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
node         1  5.5  6.1 787252 247004 ?       Ssl  16:43   0:02 node --heapsnapshot-signal=SIGUSR2 index.js
$ kill -USR2 1
$ ls
Heap.20190718.133405.15554.0.001.heapsnapshot
```

----------------------------------------

TITLE: Creating JavaScript Strings from UTF16 Text in C
DESCRIPTION: Function to create JavaScript string values from UTF16-LE encoded C strings by copying the input.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_98

LANGUAGE: c
CODE:
```
napi_status napi_create_string_utf16(napi_env env,
                                     const char16_t* str,
                                     size_t length,
                                     napi_value* result)
```

----------------------------------------

TITLE: Using path.win32.basename for Consistent Windows Path Handling
DESCRIPTION: Shows how to use `path.win32.basename()` to ensure consistent handling of Windows-style paths, regardless of the underlying operating system. This method always treats backslashes as separators.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_4

LANGUAGE: js
CODE:
```
path.win32.basename('C:\\temp\\myfile.html');
// Returns: 'myfile.html'
```

----------------------------------------

TITLE: Accessing MockAgent Call History in Undici for Node.js
DESCRIPTION: This snippet shows how to enable and use the call history feature of Undici's MockAgent. It demonstrates making assertions on various aspects of the request configuration, such as URL, method, headers, and body.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/mocking-request.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
// index.test.mjs
import { strict as assert } from 'node:assert'
import { MockAgent, setGlobalDispatcher, fetch } from 'undici'
import { app } from './app.mjs'

// given an application server running on http://localhost:3000
await app.start()

// enable call history at instantiation
const mockAgent = new MockAgent({ enableCallHistory: true })
// or after instantiation
mockAgent.enableCallHistory()

setGlobalDispatcher(mockAgent)

// this call is made (not intercepted)
await fetch(`http://localhost:3000/endpoint?query='hello'`, {
  method: 'POST',
  headers: { 'content-type': 'application/json' }
  body: JSON.stringify({ data: '' })
})

// access to the call history of the MockAgent (which register every call made intercepted or not)
assert.ok(mockAgent.getCallHistory()?.calls().length === 1)
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.fullUrl, `http://localhost:3000/endpoint?query='hello'`)
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.body, JSON.stringify({ data: '' }))
assert.deepStrictEqual(mockAgent.getCallHistory()?.firstCall()?.searchParams, { query: 'hello' })
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.port, '3000')
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.host, 'localhost:3000')
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.method, 'POST')
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.path, '/endpoint')
assert.deepStrictEqual(mockAgent.getCallHistory()?.firstCall()?.headers, { 'content-type': 'application/json' })

// clear all call history logs
mockAgent.clearCallHistory()

assert.ok(mockAgent.getCallHistory()?.calls().length === 0)
```

----------------------------------------

TITLE: Adding AbortSignal Support to fs.readFile
DESCRIPTION: Implementation of AbortSignal support in the fs.readFile method, enabling cancellation of read operations. This is marked as a SEMVER-MINOR change.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_37

LANGUAGE: JavaScript
CODE:
```
**(SEMVER-MINOR)** **fs**: add support for AbortSignal in readFile
```

----------------------------------------

TITLE: Using minimatch.match to Filter a List of Files in JavaScript
DESCRIPTION: Demonstrates how to use minimatch.match to filter a list of files against a pattern in a glob or fnmatch style.
SOURCE: https://github.com/nodejs/node/blob/main/deps/minimatch/README.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
var javascripts = minimatch.match(fileList, '*.js', { matchBase: true })
```

----------------------------------------

TITLE: Specifying ICU Data Directory via CLI - Node.js Runtime Option - Bash
DESCRIPTION: This snippet demonstrates how to pass a custom ICU data directory using the --icu-data-dir command-line parameter when launching a Node.js process. It overrides other ICU data sources and is useful for enabling full locale support in environments built with 'small-icu'. The provided directory should contain the properly formatted ICU data file compatible with the running Node.js version.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/intl.md#2025-04-23_snippet_3

LANGUAGE: Bash
CODE:
```
node --icu-data-dir=/runtime/directory/with/dat/file
```

----------------------------------------

TITLE: Reading Unsigned Big-Endian 64-bit Integer from Buffer (Node.js) - JavaScript
DESCRIPTION: Shows how to read an unsigned 64-bit integer (represented as a `bigint`) from a Buffer using big-endian byte order with the `readBigUInt64BE()` method. The example reads a known value from a created buffer and prints the resulting `bigint`. Requires the Buffer class and supports `bigint`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_61

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);

console.log(buf.readBigUInt64BE(0));
// Prints: 4294967295n
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);

console.log(buf.readBigUInt64BE(0));
// Prints: 4294967295n
```

----------------------------------------

TITLE: Installing mkdirp Globally using npm
DESCRIPTION: Provides the npm command to install the `mkdirp` module globally. This makes the `mkdirp` command-line tool accessible from any directory in the system's terminal.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cacache/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
npm install -g mkdirp
```

----------------------------------------

TITLE: Testing Deep Object Equality with assert.deepEqual - Node.js assert - ECMAScript Module (mjs)
DESCRIPTION: Provides multiple deep equality checks between objects, demonstrating how assert.deepEqual compares nested properties and ignores prototypes. Failing and passing cases are illustrated, including comments noting assertion outcomes. Requires 'node:assert'. Input parameters are pairs of nested objects; output is assertion pass for matching values and assertion errors for differing or prototype-affected objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_13

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';

const obj1 = {
  a: {
    b: 1,
  },
};
const obj2 = {
  a: {
    b: 2,
  },
};
const obj3 = {
  a: {
    b: 1,
  },
};
const obj4 = { __proto__: obj1 };

assert.deepEqual(obj1, obj1);
// OK

// Values of b are different:
assert.deepEqual(obj1, obj2);
// AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }

assert.deepEqual(obj1, obj3);
// OK

// Prototypes are ignored:
assert.deepEqual(obj1, obj4);
// AssertionError: { a: { b: 1 } } deepEqual {}
```

----------------------------------------

TITLE: Response Error Interceptor Usage in Undici
DESCRIPTION: Demonstrates how to use the responseError interceptor in Undici to throw errors for responses with status codes >= 400.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
const { Client, interceptors } = require("undici");
const { responseError } = interceptors;

const client = new Client("http://example.com").compose(
  responseError()
);

// Will throw a ResponseError for status codes >= 400
await client.request({
  method: "GET",
  path: "/"
});
```

----------------------------------------

TITLE: Checking for Absolute Paths on POSIX
DESCRIPTION: Shows examples of `path.isAbsolute()` determining if various paths are absolute on POSIX systems. Paths starting with '/' are absolute, relative paths are not.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_28

LANGUAGE: js
CODE:
```
path.isAbsolute('/foo/bar');   // true
path.isAbsolute('/baz/..');    // true
path.isAbsolute('/baz/../..'); // true
path.isAbsolute('qux/');       // false
path.isAbsolute('.');          // false
```

----------------------------------------

TITLE: Checking Crypto Support with ESM
DESCRIPTION: Demonstrates how to safely check for crypto support availability using ESM dynamic imports in a try-catch block.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
let crypto;
try {
  crypto = await import('node:crypto');
} catch (err) {
  console.error('crypto support is disabled!');
}
```

----------------------------------------

TITLE: Converting Buffer to String (Node.js Buffer)
DESCRIPTION: Demonstrates using the `buf.toString()` method to decode a Buffer into a string. It shows conversion to UTF-8 with and without offset/length, and conversion to hexadecimal. Dependencies include the `Buffer` class from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_77

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

console.log(buf1.toString('utf8'));
// Prints: abcdefghijklmnopqrstuvwxyz
console.log(buf1.toString('utf8', 0, 5));
// Prints: abcde

const buf2 = Buffer.from('tést');

console.log(buf2.toString('hex'));
// Prints: 74c3a97374
console.log(buf2.toString('utf8', 0, 3));
// Prints: té
console.log(buf2.toString(undefined, 0, 3));
// Prints: té
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

console.log(buf1.toString('utf8'));
// Prints: abcdefghijklmnopqrstuvwxyz
console.log(buf1.toString('utf8', 0, 5));
// Prints: abcde

const buf2 = Buffer.from('tést');

console.log(buf2.toString('hex'));
// Prints: 74c3a97374
console.log(buf2.toString('utf8', 0, 3));
// Prints: té
console.log(buf2.toString(undefined, 0, 3));
// Prints: té
```

----------------------------------------

TITLE: Multiple Listener Management
DESCRIPTION: Demonstrates handling multiple instances of the same listener function and removal behavior.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
import { EventEmitter } from 'node:events';
const ee = new EventEmitter();

function pong() {
  console.log('pong');
}

ee.on('ping', pong);
ee.once('ping', pong);
ee.removeListener('ping', pong);

ee.emit('ping');
ee.emit('ping');
```

LANGUAGE: javascript
CODE:
```
const EventEmitter = require('node:events');
const ee = new EventEmitter();

function pong() {
  console.log('pong');
}

ee.on('ping', pong);
ee.once('ping', pong);
ee.removeListener('ping', pong);

ee.emit('ping');
ee.emit('ping');
```

----------------------------------------

TITLE: Using Stream-Oriented Crypto Operations in Node.js
DESCRIPTION: Example of a stream-oriented crypto operation using the hash API. This pattern maintains state across multiple operations that can be performed over time, allowing for incremental processing.
SOURCE: https://github.com/nodejs/node/blob/main/src/crypto/README.md#2025-04-23_snippet_4

LANGUAGE: js
CODE:
```
// Example stream-oriented operation
const hash = crypto.createHash('sha256');
let updates = 10;
setTimeout(() => {
  hash.update('hello world');
  setTimeout(() => {
    console.log(hash.digest();)
  }, 1000);
}, 1000);
```

----------------------------------------

TITLE: Customizing Default Options for util.inspect in JavaScript
DESCRIPTION: Shows how to modify the default options for util.inspect, which affects functions like console.log that implicitly use it. The example demonstrates changing the maxArrayLength option.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_31

LANGUAGE: javascript
CODE:
```
import { inspect } from 'node:util';
const arr = Array(156).fill(0);

console.log(arr); // Logs the truncated array
inspect.defaultOptions.maxArrayLength = null;
console.log(arr); // logs the full array
```

LANGUAGE: javascript
CODE:
```
const { inspect } = require('node:util');
const arr = Array(156).fill(0);

console.log(arr); // Logs the truncated array
inspect.defaultOptions.maxArrayLength = null;
console.log(arr); // logs the full array
```

----------------------------------------

TITLE: Using Deprecated Buffer Slice - Node.js
DESCRIPTION: Illustrates the deprecated `buf.slice()` method, which returns a new Buffer referencing the same memory as the original, demonstrating that modifying the slice modifies the original. It contrasts this behavior with `Uint8Array.prototype.slice.call(buf)` which creates a copy.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_72

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from('buffer');

const copiedBuf = Uint8Array.prototype.slice.call(buf);
copiedBuf[0]++;
console.log(copiedBuf.toString());
// Prints: cuffer

console.log(buf.toString());
// Prints: buffer

// With buf.slice(), the original buffer is modified.
const notReallyCopiedBuf = buf.slice();
notReallyCopiedBuf[0]++;
console.log(notReallyCopiedBuf.toString());
// Prints: cuffer
console.log(buf.toString());
// Also prints: cuffer (!)
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('buffer');

const copiedBuf = Uint8Array.prototype.slice.call(buf);
copiedBuf[0]++;
console.log(copiedBuf.toString());
// Prints: cuffer

console.log(buf.toString());
// Prints: buffer

// With buf.slice(), the original buffer is modified.
const notReallyCopiedBuf = buf.slice();
notReallyCopiedBuf[0]++;
console.log(notReallyCopiedBuf.toString());
// Prints: cuffer
console.log(buf.toString());
// Also prints: cuffer (!)
```

----------------------------------------

TITLE: Validating Parsability of URL Input Strings - WHATWG URL API - JavaScript
DESCRIPTION: Shows how to check if a URL string or relative path can be parsed as a valid URL, optionally in relation to a base URL, using URL.canParse in Node.js. The method returns a boolean result indicating validity. This snippet requires no external dependencies and accepts both absolute and relative strings for validation, outputting a boolean true or false.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_31

LANGUAGE: JavaScript
CODE:
```
const isValid = URL.canParse('/foo', 'https://example.org/'); // true

const isNotValid = URL.canParse('/foo'); // false

```

----------------------------------------

TITLE: Optional Boolean Value Options in Commander.js
DESCRIPTION: Shows how to create an option that can be used as both a boolean flag and accept an optional value using square bracket syntax.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
program
  .option('-c, --cheese [type]', 'Add cheese with optional type');

program.parse(process.argv);

const options = program.opts();
if (options.cheese === undefined) console.log('no cheese');
else if (options.cheese === true) console.log('add cheese');
else console.log(`add cheese type ${options.cheese}`);
```

----------------------------------------

TITLE: Performing ECDH Key Exchange using ES Modules in Node.js
DESCRIPTION: Demonstrates a basic Elliptic Curve Diffie-Hellman (ECDH) key exchange between two parties (Alice and Bob) using ES Modules. It initializes two `ECDH` instances with the 'secp521r1' curve, generates key pairs for both, computes the shared secret using each other's public key, and asserts that the secrets match. Requires the `node:crypto` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_20

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';

const {
  createECDH,
} = await import('node:crypto');

// Generate Alice's keys...
const alice = createECDH('secp521r1');
const aliceKey = alice.generateKeys();

// Generate Bob's keys...
const bob = createECDH('secp521r1');
const bobKey = bob.generateKeys();

// Exchange and generate the secret...
const aliceSecret = alice.computeSecret(bobKey);
const bobSecret = bob.computeSecret(aliceKey);

assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));
// OK
```

----------------------------------------

TITLE: Formatting a Windows Path using path.format
DESCRIPTION: Demonstrates `path.format()` constructing a Windows path using `dir` and `base`. The result is `${dir}${path.win32.sep}${base}`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_25

LANGUAGE: js
CODE:
```
path.format({
  dir: 'C:\\path\\dir',
  base: 'file.txt',
});
// Returns: 'C:\\path\\dir\\file.txt'
```

----------------------------------------

TITLE: Handling File Change Events with fs.watch() in Node.js
DESCRIPTION: Demonstrates how to use fs.watch() to monitor file changes in a directory. The example shows handling the 'change' event and logging filename changes as a Buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_104

LANGUAGE: javascript
CODE:
```
import { watch } from 'node:fs';
// Example when handled through fs.watch() listener
watch('./tmp', { encoding: 'buffer' }, (eventType, filename) => {
  if (filename) {
    console.log(filename);
    // Prints: <Buffer ...>
  }
});
```

----------------------------------------

TITLE: Using '--' Separator with npm exec for Equivalent npx Behavior (Bash)
DESCRIPTION: Demonstrates the recommended way to use `npm exec` to replicate the behavior of the initial `npx` example. The double-hyphen (`--`) explicitly tells `npm exec` to stop parsing options, ensuring that `--package=@npmcli/foo` is passed as an argument to the `bar` command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npx.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
$ npm exec -- foo@latest bar --package=@npmcli/foo
```

----------------------------------------

TITLE: Implementing Custom Inspection in JavaScript
DESCRIPTION: Demonstrates how to use the util.inspect.custom symbol to create a custom inspection function for a Password class. This allows for controlled output when the object is logged or inspected.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_30

LANGUAGE: javascript
CODE:
```
const customInspectSymbol = Symbol.for('nodejs.util.inspect.custom');

class Password {
  constructor(value) {
    this.value = value;
  }

  toString() {
    return 'xxxxxxxx';
  }

  [customInspectSymbol](depth, inspectOptions, inspect) {
    return `Password <${this.toString()}>`;
  }
}

const password = new Password('r0sebud');
console.log(password);
// Prints Password <xxxxxxxx>
```

----------------------------------------

TITLE: Handling Client Disconnect Event in Undici (JavaScript)
DESCRIPTION: This example demonstrates how to set up an HTTP server and an Undici client, and handle the 'disconnect' event emitted by the client when the connection is closed. It uses the http, undici, and events modules.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Client.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.destroy()
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

client.on('disconnect', (origin) => {
  console.log(`Disconnected from ${origin}`)
})

try {
  await client.request({
    path: '/',
    method: 'GET'
  })
} catch (error) {
  console.error(error.message)
  client.close()
  server.close()
}
```

----------------------------------------

TITLE: Measuring TCP Connection Time in CommonJS Format
DESCRIPTION: This example demonstrates how to measure TCP connection performance using the PerformanceObserver API in CommonJS format. It creates a TCP server, attempts to connect to it, and logs the performance metrics for the connection process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
'use strict';
const { PerformanceObserver } = require('node:perf_hooks');
const net = require('node:net');
const obs = new PerformanceObserver((items) => {
  items.getEntries().forEach((item) => {
    console.log(item);
  });
});
obs.observe({ entryTypes: ['net'] });
const PORT = 8080;
net.createServer((socket) => {
  socket.destroy();
}).listen(PORT, () => {
  net.connect(PORT);
});
```

----------------------------------------

TITLE: Non-Recommended Pattern for Writing Files in Node.js
DESCRIPTION: Example of a non-recommended pattern for writing to a file that introduces a race condition by checking file accessibility before opening it.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_44

LANGUAGE: javascript
CODE:
```
import { access, open, close } from 'node:fs';

access('myfile', (err) => {
  if (!err) {
    console.error('myfile already exists');
    return;
  }

  open('myfile', 'wx', (err, fd) => {
    if (err) throw err;

    try {
      writeMyData(fd);
    } finally {
      close(fd, (err) => {
        if (err) throw err;
      });
    }
  });
});
```

----------------------------------------

TITLE: Certificate Pinning and Verification in Node.js HTTPS Requests Using CommonJS - JavaScript
DESCRIPTION: Illustrates advanced certificate/public key pinning and custom server identity validation for Node.js HTTPS requests with CommonJS modules. Checks the server certificate and public key against expected fingerprints, and prints the certificate chain. Requires 'node:tls', 'node:https', and 'node:crypto' modules with appropriate versions. Used for enforcing strict certificate matching in security-focused deployments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_14

LANGUAGE: JavaScript
CODE:
```
const tls = require('node:tls');
const https = require('node:https');
const crypto = require('node:crypto');

function sha256(s) {
  return crypto.createHash('sha256').update(s).digest('base64');
}
const options = {
  hostname: 'github.com',
  port: 443,
  path: '/',
  method: 'GET',
  checkServerIdentity: function(host, cert) {
    // Make sure the certificate is issued to the host we are connected to
    const err = tls.checkServerIdentity(host, cert);
    if (err) {
      return err;
    }

    // Pin the public key, similar to HPKP pin-sha256 pinning
    const pubkey256 = 'SIXvRyDmBJSgatgTQRGbInBaAK+hZOQ18UmrSwnDlK8=';
    if (sha256(cert.pubkey) !== pubkey256) {
      const msg = 'Certificate verification error: ' +
        `The public key of '${cert.subject.CN}' ` +
        'does not match our pinned fingerprint';
      return new Error(msg);
    }

    // Pin the exact certificate, rather than the pub key
    const cert256 = 'FD:6E:9B:0E:F3:98:BC:D9:04:C3:B2:EC:16:7A:7B:' +
      '0F:DA:72:01:C9:03:C5:3A:6A:6A:E5:D0:41:43:63:EF:65';
    if (cert.fingerprint256 !== cert256) {
      const msg = 'Certificate verification error: ' +
        `The certificate of '${cert.subject.CN}' ` +
        'does not match our pinned fingerprint';
      return new Error(msg);
    }

    // This loop is informational only.
    // Print the certificate and public key fingerprints of all certs in the
    // chain. Its common to pin the public key of the issuer on the public
    // internet, while pinning the public key of the service in sensitive
    // environments.
    do {
      console.log('Subject Common Name:', cert.subject.CN);
      console.log('  Certificate SHA256 fingerprint:', cert.fingerprint256);

      hash = crypto.createHash('sha256');
      console.log('  Public key ping-sha256:', sha256(cert.pubkey));

      lastprint256 = cert.fingerprint256;
      cert = cert.issuerCertificate;
    } while (cert.fingerprint256 !== lastprint256);

  },
};

options.agent = new https.Agent(options);
const req = https.request(options, (res) => {
  console.log('All OK. Server matched our pinned cert or public key');
  console.log('statusCode:', res.statusCode);

  res.on('data', (d) => {});
});

req.on('error', (e) => {
  console.error(e.message);
});
req.end();
```

----------------------------------------

TITLE: Creating Symbolic Links with fsPromises.symlink in Node.js
DESCRIPTION: Asynchronously creates a symbolic link named `path` that points to `target`. Returns a Promise fulfilling with `undefined`. The `type` argument ('dir', 'file', 'junction') is used only on Windows; if omitted or null, Node.js autodetects the target type. Windows junctions require an absolute destination path.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
fsPromises.symlink(target, path[, type])
```

----------------------------------------

TITLE: Creating Cipheriv Instances with Node.js Crypto
DESCRIPTION: Creates and returns a `Cipheriv` stream object for encryption using a specified algorithm, key, and initialization vector (IV). The key and IV can be strings, Buffers, TypedArrays, DataViews, or KeyObjects. Stream options can be provided, and the `authTagLength` option is required for CCM/OCB modes and configurable for GCM/chacha20-poly1305 modes. IVs should be unpredictable and unique. Introduced in Node.js v0.1.94.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_58

LANGUAGE: javascript
CODE:
```
crypto.createCipheriv(algorithm, key, iv[, options])
```

----------------------------------------

TITLE: Using NODE_OPTIONS with Escaped Spaces (Bash)
DESCRIPTION: Demonstrates how to set the `NODE_OPTIONS` environment variable when a required option's value contains spaces. The value must be enclosed in double quotes within the environment variable assignment.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_32

LANGUAGE: bash
CODE:
```
NODE_OPTIONS='--require "./my path/file.js"'
```

----------------------------------------

TITLE: Concatenating Buffers with Buffer.concat (Node.js)
DESCRIPTION: Provides an example of using `Buffer.concat` to combine a list of `Buffer` instances into a single `Buffer`. It shows how to calculate the total length and use it as an argument, resulting in a new buffer containing the data from the input buffers sequentially. Demonstrates examples for both MJS and CJS module systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_25

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

// Create a single `Buffer` from a list of three `Buffer` instances.

const buf1 = Buffer.alloc(10);
const buf2 = Buffer.alloc(14);
const buf3 = Buffer.alloc(18);
const totalLength = buf1.length + buf2.length + buf3.length;

console.log(totalLength);
// Prints: 42

const bufA = Buffer.concat([buf1, buf2, buf3], totalLength);

console.log(bufA);
// Prints: <Buffer 00 00 00 00 ...>
console.log(bufA.length);
// Prints: 42
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

// Create a single `Buffer` from a list of three `Buffer` instances.

const buf1 = Buffer.alloc(10);
const buf2 = Buffer.alloc(14);
const buf3 = Buffer.alloc(18);
const totalLength = buf1.length + buf2.length + buf3.length;

console.log(totalLength);
// Prints: 42

const bufA = Buffer.concat([buf1, buf2, buf3], totalLength);

console.log(bufA);
// Prints: <Buffer 00 00 00 00 ...>
console.log(bufA.length);
// Prints: 42
```

----------------------------------------

TITLE: Using async generator as pipeline source in ES Modules
DESCRIPTION: Example showing how to use an async generator as the source in a pipeline with ES Modules, properly handling the abort signal. The generator function receives a signal parameter that should be passed to any long-running operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import { pipeline } from 'node:stream/promises';
import fs from 'node:fs';
await pipeline(
  async function* ({ signal }) {
    await someLongRunningfn({ signal });
    yield 'asd';
  },
  fs.createWriteStream('uppercase.txt'),
);
console.log('Pipeline succeeded.');
```

----------------------------------------

TITLE: Testing Finally with Return - JavaScript
DESCRIPTION: This Immediately Invoked Function Expression (IIFE) tests the execution of a `finally` block when a `return` statement is present in the preceding `try` block. It demonstrates that the `finally` block executes even after `return` is encountered in `try`, but the value returned is the one from the `try` block *before* the `finally` block runs and potentially modifies variables.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/finally-codegen-failure-expected.txt#_snippet_0

LANGUAGE: JavaScript
CODE:
```
(function () { var a = true; try { return a; } finally { a = false; }})()
```

----------------------------------------

TITLE: Managing Thread-Safe Function References in Node-API
DESCRIPTION: Use napi_acquire_threadsafe_function() and napi_release_threadsafe_function() to manage the reference count of a thread-safe function. These functions are used to indicate when threads start or stop using the thread-safe function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_210

LANGUAGE: C
CODE:
```
napi_status napi_acquire_threadsafe_function(napi_threadsafe_function func);

napi_status napi_release_threadsafe_function(napi_threadsafe_function func,
                                             napi_threadsafe_function_release_mode mode);
```

----------------------------------------

TITLE: Configuring Script Execution with 'ignore-scripts' in npm
DESCRIPTION: Describes the `--ignore-scripts` flag (Boolean, default: false). If set to true, npm will skip running scripts defined in `package.json` files during processes like installation. However, commands specifically designed to run scripts (e.g., `npm start`, `npm test`, `npm run-script`) will still execute their target script but will skip any associated pre- or post-scripts.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_19

LANGUAGE: text
CODE:
```
#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package.json files.

Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts.
```

----------------------------------------

TITLE: Setting Multiple Headers using Map in Node.js
DESCRIPTION: Alternative approach to set multiple headers using a Map object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_54

LANGUAGE: javascript
CODE:
```
const headers = new Map([['foo', 'bar']]);
outgoingMessage.setHeaders(headers);
```

----------------------------------------

TITLE: Installing Local Directory Packages with NPM
DESCRIPTION: Examples of installing packages from local directories, with and without the --install-links option.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm install ../../other-package --install-links
npm install ./sub-package
```

----------------------------------------

TITLE: Using readable.every with Synchronous/Asynchronous Predicates in Node.js (MJS)
DESCRIPTION: Demonstrates using the `Readable.every` method to test if all chunks in a stream satisfy a given predicate function. Includes examples with a synchronous function checking numbers and an asynchronous function checking file stats using `fs/promises.stat`, showcasing the `concurrency` option. The method returns a promise resolving to `true` if all chunks pass the test, and `false` otherwise.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_49

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { stat } from 'node:fs/promises';

// With a synchronous predicate.
await Readable.from([1, 2, 3, 4]).every((x) => x > 2); // false
await Readable.from([1, 2, 3, 4]).every((x) => x > 0); // true

// With an asynchronous predicate, making at most 2 file checks at a time.
const allBigFiles = await Readable.from([
  'file1',
  'file2',
  'file3',
]).every(async (fileName) => {
  const stats = await stat(fileName);
  return stats.size > 1024 * 1024;
}, { concurrency: 2 });
// `true` if all files in the list are bigger than 1MiB
console.log(allBigFiles);
console.log('done'); // Stream has finished
```

----------------------------------------

TITLE: Dependency Graph Example for peerDependencies
DESCRIPTION: Shows the resulting dependency graph when installing a package with peerDependencies. The host package and plugin are installed side by side at the same level in the dependency tree.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_23

LANGUAGE: bash
CODE:
```
├── @npm/tea-latte@1.3.5
└── @npm/tea@2.2.0
```

----------------------------------------

TITLE: Validating Public API Arguments - Node.js JavaScript
DESCRIPTION: Provides an example from `zlib.js` demonstrating how public Node.js APIs validate arguments using JavaScript checks (`typeof`, `isArrayBufferView`, `validateUint32`) and throw specific user-friendly `ERR_INVALID_*` errors for invalid inputs before calling the underlying C++ binding function.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_13

LANGUAGE: javascript
CODE:
```
function crc32(data, value = 0) {
  if (typeof data !== 'string' && !isArrayBufferView(data)) {
    throw new ERR_INVALID_ARG_TYPE('data', ['Buffer', 'TypedArray', 'DataView','string'], data);
  }
  validateUint32(value, 'value');
  return crc32Native(data, value);
}
```

----------------------------------------

TITLE: Advanced stream.compose() with Async Functions
DESCRIPTION: Demonstrates advanced usage of stream.compose() with async iterables, generators and functions for stream transformation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_61

LANGUAGE: javascript
CODE:
```
import { compose } from 'node:stream';
import { finished } from 'node:stream/promises';

// Convert AsyncIterable into readable Duplex.
const s1 = compose(async function*() {
  yield 'Hello';
  yield 'World';
}());

// Convert AsyncGenerator into transform Duplex.
const s2 = compose(async function*(source) {
  for await (const chunk of source) {
    yield String(chunk).toUpperCase();
  }
});

let res = '';

// Convert AsyncFunction into writable Duplex.
const s3 = compose(async function(source) {
  for await (const chunk of source) {
    res += chunk;
  }
});

await finished(compose(s1, s2, s3));

console.log(res); // prints 'HELLOWORLD'
```

----------------------------------------

TITLE: Getting the Constructed URL String
DESCRIPTION: Example showing how to retrieve the complete URL string from a URL object using the href property.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
console.log(myURL.href);
```

----------------------------------------

TITLE: Logging Intermediate Times with console.timeLog in Node.js (JavaScript)
DESCRIPTION: Illustrates using `console.timeLog(label, ...data)` to print the current elapsed time for a timer previously started with `console.time(label)`, along with any additional `data` arguments provided, to `stdout`. This allows logging checkpoints within a timed operation without stopping the timer itself. The `label` defaults to 'default'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_8

LANGUAGE: js
CODE:
```
console.time('process');
const value = expensiveProcess1(); // Returns 42
console.timeLog('process', value);
// Prints "process: 365.227ms 42".
doExpensiveProcess2(value);
console.timeEnd('process');
```

----------------------------------------

TITLE: Passing Socket Objects to Child Processes in Node.js
DESCRIPTION: Demonstrates how to pass socket objects to child processes for handling connections with different priorities. The parent process distributes connections to two child processes based on the remote address.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_41

LANGUAGE: javascript
CODE:
```
const { fork } = require('node:child_process');
const { createServer } = require('node:net');

const normal = fork('subprocess.js', ['normal']);
const special = fork('subprocess.js', ['special']);

// Open up the server and send sockets to child. Use pauseOnConnect to prevent
// the sockets from being read before they are sent to the child process.
const server = createServer({ pauseOnConnect: true });
server.on('connection', (socket) => {

  // If this is special priority...
  if (socket.remoteAddress === '74.125.127.100') {
    special.send('socket', socket);
    return;
  }
  // This is normal priority.
  normal.send('socket', socket);
});
server.listen(1337);
```

LANGUAGE: javascript
CODE:
```
import { fork } from 'node:child_process';
import { createServer } from 'node:net';

const normal = fork('subprocess.js', ['normal']);
const special = fork('subprocess.js', ['special']);

// Open up the server and send sockets to child. Use pauseOnConnect to prevent
// the sockets from being read before they are sent to the child process.
const server = createServer({ pauseOnConnect: true });
server.on('connection', (socket) => {

  // If this is special priority...
  if (socket.remoteAddress === '74.125.127.100') {
    special.send('socket', socket);
    return;
  }
  // This is normal priority.
  normal.send('socket', socket);
});
server.listen(1337);
```

LANGUAGE: javascript
CODE:
```
process.on('message', (m, socket) => {
  if (m === 'socket') {
    if (socket) {
      // Check that the client socket exists.
      // It is possible for the socket to be closed between the time it is
      // sent and the time it is received in the child process.
      socket.end(`Request handled with ${process.argv[2]} priority`);
    }
  }
});
```

----------------------------------------

TITLE: Advanced Mocked Request with Query Parameters, Headers and Trailers
DESCRIPTION: Shows a comprehensive example of mocking with query parameters, request body validation, custom request headers, and response headers/trailers. This demonstrates the full capability of MockPool for complex testing scenarios.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/foo?hello=there&see=ya',
  method: 'POST',
  body: 'form1=data1&form2=data2',
  headers: {
    'User-Agent': 'undici',
    Host: 'example.com'
  }
}).reply(200, { foo: 'bar' }, {
  headers: { 'content-type': 'application/json' },
  trailers: { 'Content-MD5': 'test' }
})

const {
  statusCode,
  headers,
  trailers,
  body
} = await request('http://localhost:3000/foo?hello=there&see=ya', {
    method: 'POST',
    body: 'form1=data1&form2=data2',
    headers: {
      foo: 'bar',
      'User-Agent': 'undici',
      Host: 'example.com'
    }
  })

console.log('response received', statusCode) // response received 200
console.log('headers', headers) // { 'content-type': 'application/json' }

for await (const data of body) {
  console.log('data', data.toString('utf8')) // '{"foo":"bar"}'
}

console.log('trailers', trailers) // { 'content-md5': 'test' }
```

----------------------------------------

TITLE: Using partialDeepStrictEqual in ES Modules
DESCRIPTION: Examples demonstrating the usage of assert.partialDeepStrictEqual method with various data types in ES modules format. Shows both successful assertions and cases that would throw AssertionError.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_54

LANGUAGE: javascript
CODE:
```
import assert from 'node:assert';

assert.partialDeepStrictEqual(
  { a: { b: { c: 1 } } },
  { a: { b: { c: 1 } } },
);
// OK

assert.partialDeepStrictEqual(
  { a: 1, b: 2, c: 3 },
  { b: 2 },
);
// OK

assert.partialDeepStrictEqual(
  [1, 2, 3, 4, 5, 6, 7, 8, 9],
  [4, 5, 8],
);
// OK

assert.partialDeepStrictEqual(
  new Set([{ a: 1 }, { b: 1 }]),
  new Set([{ a: 1 }]),
);
// OK

assert.partialDeepStrictEqual(
  new Map([['key1', 'value1'], ['key2', 'value2']]),
  new Map([['key2', 'value2']]),
);
// OK

assert.partialDeepStrictEqual(123n, 123n);
// OK

assert.partialDeepStrictEqual(
  [1, 2, 3, 4, 5, 6, 7, 8, 9],
  [5, 4, 8],
);
// AssertionError

assert.partialDeepStrictEqual(
  { a: 1 },
  { a: 1, b: 2 },
);
// AssertionError

assert.partialDeepStrictEqual(
  { a: { b: 2 } },
  { a: { b: '2' } },
);
// AssertionError
```

----------------------------------------

TITLE: Executing a Package with npx Where Options Follow Arguments (Bash)
DESCRIPTION: Example of running `npx` where an `npx` option (`--package`) is placed *after* the positional arguments intended for the executed command. In this scenario, `npx` treats `--package=@npmcli/foo` as an argument to the `bar` command, not as an instruction to `npx` itself.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npx.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npx foo@latest bar --package=@npmcli/foo
```

----------------------------------------

TITLE: Initializing Custom Asynchronous Context in Node-API (C)
DESCRIPTION: Function to initialize a custom asynchronous context. It takes an async_resource object and name, and returns an initialized async context. The async_resource object must be kept alive until napi_async_destroy is called.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_192

LANGUAGE: c
CODE:
```
napi_status napi_async_init(napi_env env,
                            napi_value async_resource,
                            napi_value async_resource_name,
                            napi_async_context* result)
```

----------------------------------------

TITLE: Using crypto.hkdfSync() for Synchronous Key Derivation
DESCRIPTION: Examples of using the synchronous version of HKDF key derivation in both CommonJS and ES Modules format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_81

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';
const {
  hkdfSync,
} = await import('node:crypto');

const derivedKey = hkdfSync('sha512', 'key', 'salt', 'info', 64);
console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'
```

LANGUAGE: javascript
CODE:
```
const {
  hkdfSync,
} = require('node:crypto');
const { Buffer } = require('node:buffer');

const derivedKey = hkdfSync('sha512', 'key', 'salt', 'info', 64);
console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'
```

----------------------------------------

TITLE: Illustrating Potential Performance Issues with Concurrent Zlib Operations (cjs)
DESCRIPTION: Warns against creating and using a large number of zlib objects concurrently, as shown in this example using CommonJS syntax. Calling `zlib.deflate` repeatedly in a loop without managing concurrency can lead to significant memory fragmentation due to the internal threadpool usage and OS memory allocation behavior. Caching compression results is recommended.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_9

LANGUAGE: cjs
CODE:
```
const zlib = require('node:zlib');

const payload = Buffer.from('This is some data');

// WARNING: DO NOT DO THIS!
for (let i = 0; i < 30000; ++i) {
  zlib.deflate(payload, (err, buffer) => {});
}
```

----------------------------------------

TITLE: Configuring Operating System Compatibility
DESCRIPTION: Specifies which operating systems the package supports using an array of OS identifiers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_35

LANGUAGE: json
CODE:
```
{
  "os": [
    "darwin",
    "linux"
  ]
}
```

----------------------------------------

TITLE: Mocking Builtin Module Exports (JS)
DESCRIPTION: Demonstrates how to use `t.mock.module` to mock a Node.js builtin module (`node:readline`). It shows setting named exports (`namedExports`), verifying the mock works correctly with both ESM `import` and CommonJS `require`, and restoring the original module using `mock.restore()`. Requires the `--experimental-test-module-mocks` flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_45

LANGUAGE: js
CODE:
```
test('mocks a builtin module in both module systems', async (t) => {
  // Create a mock of 'node:readline' with a named export named 'fn', which
  // does not exist in the original 'node:readline' module.
  const mock = t.mock.module('node:readline', {
    namedExports: { fn() { return 42; } },
  });

  let esmImpl = await import('node:readline');
  let cjsImpl = require('node:readline');

  // cursorTo() is an export of the original 'node:readline' module.
  assert.strictEqual(esmImpl.cursorTo, undefined);
  assert.strictEqual(cjsImpl.cursorTo, undefined);
  assert.strictEqual(esmImpl.fn(), 42);
  assert.strictEqual(cjsImpl.fn(), 42);

  mock.restore();

  // The mock is restored, so the original builtin module is returned.
  esmImpl = await import('node:readline');
  cjsImpl = require('node:readline');

  assert.strictEqual(typeof esmImpl.cursorTo, 'function');
  assert.strictEqual(typeof cjsImpl.cursorTo, 'function');
  assert.strictEqual(esmImpl.fn, undefined);
  assert.strictEqual(cjsImpl.fn, undefined);
});
```

----------------------------------------

TITLE: Custom Logger Implementation
DESCRIPTION: Example of creating a custom logger using Console class with file streams for stdout and stderr.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');
const { Console } = require('node:console');
// Alternatively
// const { Console } = console;

const output = fs.createWriteStream('./stdout.log');
const errorOutput = fs.createWriteStream('./stderr.log');
// Custom simple logger
const logger = new Console({ stdout: output, stderr: errorOutput });
// use it like console
const count = 5;
logger.log('count: %d', count);
// In stdout.log: count 5
```

----------------------------------------

TITLE: Creating New JavaScript Instance in Node-API
DESCRIPTION: Function to create a new JavaScript object instance using a constructor. Takes constructor function and arguments as parameters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_173

LANGUAGE: c
CODE:
```
napi_status napi_new_instance(napi_env env,
                              napi_value cons,
                              size_t argc,
                              napi_value* argv,
                              napi_value* result)
```

----------------------------------------

TITLE: Measuring Event Loop Utilization in Node.js (ESM, JavaScript)
DESCRIPTION: Illustrates using eventLoopUtilization from perf_hooks in ESM to compute event loop activity. The script records event loop stats before and after a synchronous child process spawn (which blocks the event loop), logging the utilization metric. Inputs are timing snapshots, output is a utilization number. Requires Node.js 12.19.0+ and the ability to invoke 'sleep' via spawnSync. Limitations: only works in platforms with 'sleep' command, and blocks the event loop during the operation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_2

LANGUAGE: mjs
CODE:
```
import { eventLoopUtilization } from 'node:perf_hooks';
import { spawnSync } from 'node:child_process';

setImmediate(() => {
  const elu = eventLoopUtilization();
  spawnSync('sleep', ['5']);
  console.log(eventLoopUtilization(elu).utilization);
});
```

----------------------------------------

TITLE: Defining and Calling an Anonymous Function Expression in JavaScript
DESCRIPTION: This snippet declares an anonymous function expression that takes two arguments (a, b) and returns their sum. The function expression is assigned to the variable `x`, which is then immediately invoked with arguments 1 and 2. The surrounding text indicates this test expects the result to be 3.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/named-function-expression-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
var x = (function(a,b){ return a + b; }); x(1,2)
```

----------------------------------------

TITLE: Inspecting WeakSets with ShowHidden Option (ES Modules)
DESCRIPTION: Demonstrates inspecting WeakSet entries using the showHidden option in ES Modules format
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
import { inspect } from 'node:util';

const obj = { a: 1 };
const obj2 = { b: 2 };
const weakSet = new WeakSet([obj, obj2]);

console.log(inspect(weakSet, { showHidden: true }));
```

----------------------------------------

TITLE: Formatting a POSIX Path using path.format (name/ext priority)
DESCRIPTION: Shows `path.format()` using `name` and `ext` to construct the filename when `base` is not specified. The result is formed as `${root}${name}${ext}`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_23

LANGUAGE: js
CODE:
```
// `name` + `ext` will be used if `base` is not specified.
path.format({
  root: '/',
  name: 'file',
  ext: '.txt',
});
// Returns: '/file.txt'
```

----------------------------------------

TITLE: Implementing Scope-Based Cleanup with OnScopeLeave C++
DESCRIPTION: This snippet demonstrates the use of the `OnScopeLeave()` utility in a Node.js C++ internal function (`GetUserInfo`). It retrieves user password information using `uv_os_get_passwd()` and then registers a lambda function with `OnScopeLeave()` to ensure that `uv_os_free_passwd()` is called to free the allocated memory for `pwd` automatically when the `GetUserInfo` function exits, regardless of the return path.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_30

LANGUAGE: C++
CODE:
```
static void GetUserInfo(const FunctionCallbackInfo<Value>& args) {
  Environment* env = Environment::GetCurrent(args);
  uv_passwd_t pwd;
  // ...

  const int err = uv_os_get_passwd(&pwd);

  if (err) {
    // ... error handling, return early ...
  }

  auto free_passwd = OnScopeLeave([&]() { uv_os_free_passwd(&pwd); });

  // ...
  // Turn `pwd` into a JavaScript object now; whenever we return from this
  // function, `uv_os_free_passwd()` will be called.
  // ...
}
```

----------------------------------------

TITLE: Stream Mapping Example
DESCRIPTION: Shows how to use map() method on streams for both synchronous and asynchronous transformations with concurrency control.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_43

LANGUAGE: javascript
CODE:
```
import { Readable } from 'node:stream';
import { Resolver } from 'node:dns/promises';

// With a synchronous mapper.
for await (const chunk of Readable.from([1, 2, 3, 4]).map((x) => x * 2)) {
  console.log(chunk); // 2, 4, 6, 8
}
// With an asynchronous mapper, making at most 2 queries at a time.
const resolver = new Resolver();
const dnsResults = Readable.from([
  'nodejs.org',
  'openjsf.org',
  'www.linuxfoundation.org',
]).map((domain) => resolver.resolve4(domain), { concurrency: 2 });
for await (const result of dnsResults) {
  console.log(result); // Logs the DNS result of resolver.resolve4.
}
```

----------------------------------------

TITLE: Node.js Module Documentation Template in Markdown
DESCRIPTION: Comprehensive example showing the standard documentation format for Node.js modules, including sections for module properties, functions, classes, methods, and events. Demonstrates YAML metadata blocks, parameter documentation, and proper formatting for different documentation elements.
SOURCE: https://github.com/nodejs/node/blob/main/tools/doc/README.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
# module

<!--introduced_in=v0.10.0-->

> Stability: 2 - Stable

A description and examples.

## module.property
<!-- YAML
added: v0.10.0
-->

* {type}

A description of the property.

## module.someFunction(x, y, [z=100])
<!-- YAML
added: v0.10.0
-->

* `x` {string} The description of the string.
* `y` {boolean} Should I stay or should I go?
* `z` {number} How many zebras to bring. **Default:** `100`.

A description of the function.

## module.someNewFunction(x)
<!-- YAML
added: REPLACEME
-->

* `x` {string} The description of the string.

This feature is not in a release yet.

## Event: 'blerg'
<!-- YAML
added: v0.10.0
-->

* `anArg` {type} A description of the listener argument.

Modules don't usually raise events on themselves. `cluster` is the
only exception.

## Class: SomeClass
<!-- YAML
added: v0.10.0
-->

A description of the class.

### SomeClass.classMethod(anArg)
<!-- YAML
added: v0.10.0
-->

* `anArg` {Object} Just an argument.
  * `field` {string} `anArg` can have this field.
  * `field2` {boolean} Another field. **Default:** `false`.
* Returns: {boolean} `true` if it worked.

A description of the method for humans.

### SomeClass.nextSibling()
<!-- YAML
added: v0.10.0
-->

* Returns: {SomeClass | null} The next `SomeClass` in line.

`SomeClass` must be registered in `tools/doc/type-parser.mjs`
to be properly parsed in `{type}` fields.

### SomeClass.someProperty
<!-- YAML
added: v0.10.0
-->

* {string}

The indication of what `someProperty` is.

### Event: 'grelb'
<!-- YAML
added: v0.10.0
-->

* `isBlerg` {boolean}

This event is emitted on instances of `SomeClass`, not on the module itself.
```

----------------------------------------

TITLE: Creating and Using a Custom DNS Resolver (ESM)
DESCRIPTION: This snippet demonstrates how to create a custom DNS resolver using the Resolver class. It shows how to set custom DNS servers for the resolver and use it to resolve domain names independently of global settings. Uses ECMAScript modules (ESM) syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { Resolver } from 'node:dns';
const resolver = new Resolver();
resolver.setServers(['4.4.4.4']);

// This request will use the server at 4.4.4.4, independent of global settings.
resolver.resolve4('example.org', (err, addresses) => {
  // ...
});
```

----------------------------------------

TITLE: Defining and Instantiating Class with Private Members - JavaScript
DESCRIPTION: This snippet defines a JavaScript class (Klass) with various private members, including fields, getter-only accessors, setter-only accessors, getter/setter accessors, and a private method, and then instantiates it. Dependencies: None outside standard ECMAScript 2022 JavaScript support. The class defines several private members using # notation to test access and behavior in subsequent runtime evaluations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-private-class-member-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
class Klass {
   #field = "string";
   get #getterOnly() { return "getterOnly"; }
   set #setterOnly(val) { this.#field = "setterOnlyCalled"; }
   get #accessor() { return this.#field }
   set #accessor(val) { this.#field = val; }
   #method() { return "method"; }
}
const obj = new Klass();
```

----------------------------------------

TITLE: Demonstrating Stack Trace Contents - Node.js Errors - JavaScript
DESCRIPTION: Presents a sample error stack trace as displayed on the console, illustrating the structure of error.stack for a generic error with function call locations and file references. Useful for understanding how stack traces map function calls to code locations in user modules and dependencies. No code execution here; intended to show the format and content of stack traces for troubleshooting.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_8

LANGUAGE: console
CODE:
```
Error: Things keep happening!
   at /home/gbusey/file.js:525:2
   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)
   at Actor.<anonymous> (/home/gbusey/actors.js:400:8)
   at increaseSynergy (/home/gbusey/actors.js:701:6)

```

----------------------------------------

TITLE: Aborting `exec` with AbortSignal (CJS)
DESCRIPTION: Demonstrates cancelling a child process initiated by `child_process.exec` using an `AbortController` and its associated `signal` in CommonJS. Passing the signal in the options allows `controller.abort()` to terminate the process, resulting in an `AbortError` being passed to the callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_10

LANGUAGE: cjs
CODE:
```
const { exec } = require('node:child_process');
const controller = new AbortController();
const { signal } = controller;
const child = exec('grep ssh', { signal }, (error) => {
  console.error(error); // an AbortError
});
controller.abort();
```

----------------------------------------

TITLE: Sending Basic HTTP/2 Response (MJS)
DESCRIPTION: Demonstrates sending a basic HTTP/2 response using `stream.respond()` with initial headers followed by writing response data and ending the stream with `stream.end()` in ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_25

LANGUAGE: javascript
CODE:
```
import { createServer } from 'node:http2';
const server = createServer();
server.on('stream', (stream) => {
  stream.respond({ ':status': 200 });
  stream.end('some data');
});
```

----------------------------------------

TITLE: Handling the 'line' Event in Node.js Readline
DESCRIPTION: Provides an example of attaching an event listener to the 'line' event of a `readline.Interface` instance (`rl`). The listener function receives the input line as an argument and logs it to the console. This event is triggered each time the user presses Enter or Return after typing input or when a stream ends without a final newline.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_6

LANGUAGE: js
CODE:
```
rl.on('line', (input) => {
  console.log(`Received: ${input}`);
});
```

----------------------------------------

TITLE: Using pipeline with async generators in CommonJS
DESCRIPTION: Example demonstrating how to use pipeline with async generators in CommonJS to transform file content. The pipeline processes text from a readable stream, processes it with an async generator, and writes the result to a writable stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');

async function run() {
  await pipeline(
    fs.createReadStream('lowercase.txt'),
    async function* (source, { signal }) {
      source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.
      for await (const chunk of source) {
        yield await processChunk(chunk, { signal });
      }
    },
    fs.createWriteStream('uppercase.txt'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
```

----------------------------------------

TITLE: Implementing AsyncResource Worker Pool (CJS)
DESCRIPTION: Defines a `WorkerPool` class using CommonJS that manages a pool of Node.js Worker threads. It utilizes a nested `WorkerPoolTaskInfo` class, extending `AsyncResource`, to ensure that task callbacks executed by the worker threads maintain the correct asynchronous context of the scope where the task was originally submitted. It handles task queuing, worker creation, and error handling. Uses `path.resolve` to locate the worker script.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_13

LANGUAGE: cjs
CODE:
```
const { AsyncResource } = require('node:async_hooks');
const { EventEmitter } = require('node:events');
const path = require('node:path');
const { Worker } = require('node:worker_threads');

const kTaskInfo = Symbol('kTaskInfo');
const kWorkerFreedEvent = Symbol('kWorkerFreedEvent');

class WorkerPoolTaskInfo extends AsyncResource {
  constructor(callback) {
    super('WorkerPoolTaskInfo');
    this.callback = callback;
  }

  done(err, result) {
    this.runInAsyncScope(this.callback, null, err, result);
    this.emitDestroy();  // `TaskInfo`s are used only once.
  }
}

class WorkerPool extends EventEmitter {
  constructor(numThreads) {
    super();
    this.numThreads = numThreads;
    this.workers = [];
    this.freeWorkers = [];
    this.tasks = [];

    for (let i = 0; i < numThreads; i++)
      this.addNewWorker();

    // Any time the kWorkerFreedEvent is emitted, dispatch
    // the next task pending in the queue, if any.
    this.on(kWorkerFreedEvent, () => {
      if (this.tasks.length > 0) {
        const { task, callback } = this.tasks.shift();
        this.runTask(task, callback);
      }
    });
  }

  addNewWorker() {
    const worker = new Worker(path.resolve(__dirname, 'task_processor.js'));
    worker.on('message', (result) => {
      // In case of success: Call the callback that was passed to `runTask`,
      // remove the `TaskInfo` associated with the Worker, and mark it as free
      // again.
      worker[kTaskInfo].done(null, result);
      worker[kTaskInfo] = null;
      this.freeWorkers.push(worker);
      this.emit(kWorkerFreedEvent);
    });
    worker.on('error', (err) => {
      // In case of an uncaught exception: Call the callback that was passed to
      // `runTask` with the error.
      if (worker[kTaskInfo])
        worker[kTaskInfo].done(err, null);
      else
        this.emit('error', err);
      // Remove the worker from the list and start a new Worker to replace the
      // current one.
      this.workers.splice(this.workers.indexOf(worker), 1);
      this.addNewWorker();
    });
    this.workers.push(worker);
    this.freeWorkers.push(worker);
    this.emit(kWorkerFreedEvent);
  }

  runTask(task, callback) {
    if (this.freeWorkers.length === 0) {
      // No free threads, wait until a worker thread becomes free.
      this.tasks.push({ task, callback });
      return;
    }

    const worker = this.freeWorkers.pop();
    worker[kTaskInfo] = new WorkerPoolTaskInfo(callback);
    worker.postMessage(task);
  }

  close() {
    for (const worker of this.workers) worker.terminate();
  }
}

module.exports = WorkerPool;
```

----------------------------------------

TITLE: Creating a Symlink for a Local npm Package
DESCRIPTION: Demonstrates how to create a symlink for a local npm package, which is useful for development and testing without repeated installations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/developers.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm link
```

----------------------------------------

TITLE: Testing Intl.PluralRules Methods - JavaScript
DESCRIPTION: Inspects Intl.PluralRules functionality by testing locale support, constructing with specific locale, resolving options, and category selection for numeric values. Depends on ECMAScript Intl.PluralRules. Parameters include locale IDs and numbers; outputs plural category strings and option objects.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-without-side-effects-i18n-expected.txt#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
Intl.PluralRules.supportedLocalesOf(["en-US"])
new Intl.PluralRules("en-US")
someGlobalPluralRules.resolvedOptions()
someGlobalPluralRules.select(42)
```

----------------------------------------

TITLE: Checking File Existence with fs.exists() in Node.js
DESCRIPTION: Demonstrates how to use fs.exists() to check if a file exists. This method is deprecated and not recommended due to race conditions. The example shows both the deprecated usage and the recommended alternative using fs.stat() or fs.access().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_55

LANGUAGE: JavaScript
CODE:
```
import { exists } from 'node:fs';

exists('/etc/passwd', (e) => {
  console.log(e ? 'it exists' : 'no passwd!');
});
```

----------------------------------------

TITLE: Initializing an ESM-Compatible Package
DESCRIPTION: Example of creating a new ESM-compatible package using the create-esm initializer.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-init.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ mkdir my-esm-lib && cd my-esm-lib
$ npm init esm --yes
```

----------------------------------------

TITLE: Reading UInt32LE from Buffer - Node.js
DESCRIPTION: Demonstrates reading an unsigned, little-endian 32-bit integer from a Buffer using `readUInt32LE`. It shows reading from a buffer with hex values and converting the output to a hex string, illustrating little-endian byte order. It also includes an out-of-range example.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_68

LANGUAGE: JavaScript (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);

console.log(buf.readUInt32LE(0).toString(16));
// Prints: 78563412
console.log(buf.readUInt32LE(1).toString(16));
// Throws ERR_OUT_OF_RANGE.
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);

console.log(buf.readUInt32LE(0).toString(16));
// Prints: 78563412
console.log(buf.readUInt32LE(1).toString(16));
// Throws ERR_OUT_OF_RANGE.
```

----------------------------------------

TITLE: Creating HTTP Server with Socket Reuse Detection (CommonJS)
DESCRIPTION: Creates an HTTP server and demonstrates how to use the reusedSocket property. This example shows how to handle socket reuse in keepAlive scenarios using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
const http = require('node:http');

// Server has a 5 seconds keep-alive timeout by default
http
  .createServer((req, res) => {
    res.write('hello\n');
    res.end();
  })
  .listen(3000);

setInterval(() => {
  // Adapting a keep-alive agent
  http.get('http://localhost:3000', { agent }, (res) => {
    res.on('data', (data) => {
      // Do nothing
    });
  });
}, 5000); // Sending request on 5s interval so it's easy to hit idle timeout
```

----------------------------------------

TITLE: Generating Client Certificate and Key using OpenSSL (Bash)
DESCRIPTION: This Bash command uses the `openssl` tool to generate a new RSA 2048-bit private key (`client-key.pem`) and a corresponding self-signed X.509 certificate (`client-cert.pem`). The `-nodes` option prevents encryption of the private key, and `-subj '/CN=localhost'` sets the certificate's Common Name to 'localhost'. These files are typically used for client authentication in TLS connections as shown in the Node.js examples.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_23

LANGUAGE: bash
CODE:
```
```bash
openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \
  -keyout client-key.pem -out client-cert.pem
```
```

----------------------------------------

TITLE: UDP Socket Cluster Example with CommonJS
DESCRIPTION: Demonstrates how to share UDP sockets across multiple cluster workers using CommonJS, showing proper multicast membership handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_3

LANGUAGE: cjs
CODE:
```
const cluster = require('node:cluster');
const dgram = require('node:dgram');

if (cluster.isPrimary) {
  cluster.fork(); // Works ok.
  cluster.fork(); // Fails with EADDRINUSE.
} else {
  const s = dgram.createSocket('udp4');
  s.bind(1234, () => {
    s.addMembership('224.0.0.114');
  });
}
```

----------------------------------------

TITLE: Creating URLSearchParams from Iterable in JavaScript
DESCRIPTION: Shows different ways to create URLSearchParams from iterables - arrays, Maps, and generator functions. Each key-value pair in the iterable becomes a parameter entry, and duplicate keys are allowed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_38

LANGUAGE: javascript
CODE:
```
let params;

// Using an array
params = new URLSearchParams([
  ['user', 'abc'],
  ['query', 'first'],
  ['query', 'second'],
]);
console.log(params.toString());
// Prints 'user=abc&query=first&query=second'

// Using a Map object
const map = new Map();
map.set('user', 'abc');
map.set('query', 'xyz');
params = new URLSearchParams(map);
console.log(params.toString());
// Prints 'user=abc&query=xyz'

// Using a generator function
function* getQueryPairs() {
  yield ['user', 'abc'];
  yield ['query', 'first'];
  yield ['query', 'second'];
}
params = new URLSearchParams(getQueryPairs());
console.log(params.toString());
// Prints 'user=abc&query=first&query=second'

// Each key-value pair must have exactly two elements
new URLSearchParams([
  ['user', 'abc', 'error'],
]);
// Throws TypeError [ERR_INVALID_TUPLE]:
//        Each query pair must be an iterable [name, value] tuple
```

----------------------------------------

TITLE: Incrementing Version with Prerelease Identifier using CLI
DESCRIPTION: Demonstrates the command-line equivalent of incrementing a version with a prerelease identifier. The `semver` command takes the version `1.2.3`, the increment level `-i prerelease`, and the identifier `--preid beta`, outputting the resulting version `1.2.4-beta.0`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
$ semver 1.2.3 -i prerelease --preid beta
1.2.4-beta.0
```

----------------------------------------

TITLE: Advancing setTimeout with timers.tick() in Node.js Tests
DESCRIPTION: This snippet demonstrates how to use `context.mock.timers.tick()` to manually advance the mocked time and trigger a `setTimeout` callback. It shows enabling timer mocks, setting a timeout, asserting the callback hasn't fired, advancing time with `tick()`, and then asserting the callback has fired.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_50

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  context.mock.timers.enable({ apis: ['setTimeout'] });

  setTimeout(fn, 9999);

  assert.strictEqual(fn.mock.callCount(), 0);

  // Advance in time
  context.mock.timers.tick(9999);

  assert.strictEqual(fn.mock.callCount(), 1);
});
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();
  context.mock.timers.enable({ apis: ['setTimeout'] });

  setTimeout(fn, 9999);
  assert.strictEqual(fn.mock.callCount(), 0);

  // Advance in time
  context.mock.timers.tick(9999);

  assert.strictEqual(fn.mock.callCount(), 1);
});
```

----------------------------------------

TITLE: Initiating HTTP/2 Push Stream (CJS)
DESCRIPTION: Shows how to initiate an HTTP/2 push stream from a server-side `ServerHttp2Stream` instance using the `pushStream` method in CommonJS. It demonstrates responding to the initial request and then initiating and responding to a push stream within the callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_24

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  stream.respond({ ':status': 200 });
  stream.pushStream({ ':path': '/' }, (err, pushStream, headers) => {
    if (err) throw err;
    pushStream.respond({ ':status': 200 });
    pushStream.end('some pushed data');
  });
  stream.end('some data');
});
```

----------------------------------------

TITLE: Using the Heap Profiler in Node.js
DESCRIPTION: Example demonstrating how to use the Node.js Heap Profiler to take a heap snapshot and save it to a file. The code connects an inspector session, listens for chunk events, and writes them to a file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/inspector.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
const inspector = require('node:inspector');
const fs = require('node:fs');
const session = new inspector.Session();

const fd = fs.openSync('profile.heapsnapshot', 'w');

session.connect();

session.on('HeapProfiler.addHeapSnapshotChunk', (m) => {
  fs.writeSync(fd, m.params.chunk);
});

session.post('HeapProfiler.takeHeapSnapshot', null, (err, r) => {
  console.log('HeapProfiler.takeHeapSnapshot done:', err, r);
  session.disconnect();
  fs.closeSync(fd);
});
```

----------------------------------------

TITLE: Debugging Mock Values with Undici MockAgent in Node.js
DESCRIPTION: This snippet demonstrates how to use the 'disableNetConnect()' method of Undici's MockAgent to prevent real HTTP requests and debug mock values. It shows how unmatched interceptors will throw an error instead of making a real request.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/mocking-request.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const mockAgent = new MockAgent();

setGlobalDispatcher(mockAgent);
mockAgent.disableNetConnect()

// Provide the base url to the request
const mockPool = mockAgent.get('http://localhost:3000');

mockPool.intercept({
  path: '/bank-transfer',
  method: 'POST',
}).reply(200, {
  message: 'transaction processed'
})

const badRequest = await bankTransfer('1234567890', '100')
// Will throw an error
// MockNotMatchedError: Mock dispatch not matched for path '/bank-transfer':
// subsequent request to origin http://localhost:3000 was not allowed (net.connect disabled)
```

----------------------------------------

TITLE: Illustrating Potential Performance Issues with Concurrent Zlib Operations (mjs)
DESCRIPTION: Warns against creating and using a large number of zlib objects concurrently, as shown in this example using ES Module syntax. Calling `zlib.deflate` repeatedly in a loop without managing concurrency can lead to significant memory fragmentation due to the internal threadpool usage and OS memory allocation behavior. Caching compression results is recommended.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_8

LANGUAGE: mjs
CODE:
```
import zlib from 'node:zlib';
import { Buffer } from 'node:buffer';

const payload = Buffer.from('This is some data');

// WARNING: DO NOT DO THIS!
for (let i = 0; i < 30000; ++i) {
  zlib.deflate(payload, (err, buffer) => {});
}
```

----------------------------------------

TITLE: Checking Process Permissions with process.permission.has in Node.js
DESCRIPTION: This code demonstrates using the `process.permission.has(scope[, reference])` method, available when Node.js is run with the `--permission` flag, to check if the current process has specific permissions. The examples show checking for read permission on a specific file ('./README.md') and checking for the general file system read scope ('fs.read'). This is part of the experimental Node.js Permission Model.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_64

LANGUAGE: js
CODE:
```
// Check if the process has permission to read the README file
process.permission.has('fs.read', './README.md');
// Check if the process has read permission operations
process.permission.has('fs.read');
```

----------------------------------------

TITLE: Introducing Promise.any() and New Logical Operators in V8 8.6
DESCRIPTION: V8 8.6 brings new JavaScript features including Promise.any(), AggregateError, String.prototype.replaceAll(), and logical assignment operators.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_49

LANGUAGE: JavaScript
CODE:
```
// New Promise.any() feature
Promise.any([promise1, promise2])

// New logical assignment operators
x &&= y;  // x && (x = y)
x ||= y;  // x || (x = y)
x ??= y;  // x ?? (x = y)

// New replaceAll method
"hello".replaceAll("l", "w");
```

----------------------------------------

TITLE: Measuring Async Operation Duration with Async Hooks and PerformanceObserver (CommonJS) - JavaScript
DESCRIPTION: Provides an example of tracking asynchronous operation durations using the async_hooks and perf_hooks modules in CommonJS format. Requires Node.js and 'node:async_hooks', 'node:perf_hooks'. The code hooks into Timeout events, marks their start and end, and uses a PerformanceObserver to log and clean up measurements. Inputs are Timeout events, with outputs printed to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_21

LANGUAGE: JavaScript
CODE:
```
```cjs\n'use strict';\nconst async_hooks = require('node:async_hooks');\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nconst set = new Set();\nconst hook = async_hooks.createHook({\n  init(id, type) {\n    if (type === 'Timeout') {\n      performance.mark(`Timeout-${id}-Init`);\n      set.add(id);\n    }\n  },\n  destroy(id) {\n    if (set.has(id)) {\n      set.delete(id);\n      performance.mark(`Timeout-${id}-Destroy`);\n      performance.measure(`Timeout-${id}`,\n                          `Timeout-${id}-Init`,\n                          `Timeout-${id}-Destroy`);\n    }\n  },\n});\nhook.enable();\n\nconst obs = new PerformanceObserver((list, observer) => {\n  console.log(list.getEntries()[0]);\n  performance.clearMarks();\n  performance.clearMeasures();\n  observer.disconnect();\n});\nobs.observe({ entryTypes: ['measure'] });\n\nsetTimeout(() => {}, 1000);\n```
```

----------------------------------------

TITLE: Starting a REPL with Custom Prompt in JavaScript
DESCRIPTION: Demonstrates how to use repl.start() to create a REPL instance with a custom Unix-style prompt in both ES modules and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
import repl from 'node:repl';

// a Unix style prompt
repl.start('$ ');
```

LANGUAGE: javascript
CODE:
```
const repl = require('node:repl');

// a Unix style prompt
repl.start('$ ');
```

----------------------------------------

TITLE: Stream Consumer Utility Import Examples
DESCRIPTION: Examples showing how to import stream consumer utilities in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
import {
  arrayBuffer,
  blob,
  buffer,
  json,
  text,
} from 'node:stream/consumers';
```

LANGUAGE: javascript
CODE:
```
const {
  arrayBuffer,
  blob,
  buffer,
  json,
  text,
} = require('node:stream/consumers');
```

----------------------------------------

TITLE: Planning with Asynchronous Streams - Node.js Test - js
DESCRIPTION: Demonstrates using `t.plan` with asynchronous code, specifically streams. It shows how to set a plan based on the expected number of data events and use `t.assert.strictEqual` within the stream's data handler.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_71

LANGUAGE: js
CODE:
```
test('planning with streams', (t, done) => {
  function* generate() {
    yield 'a';
    yield 'b';
    yield 'c';
  }
  const expected = ['a', 'b', 'c'];
  t.plan(expected.length);
  const stream = Readable.from(generate());
  stream.on('data', (chunk) => {
    t.assert.strictEqual(chunk, expected.shift());
  });

  stream.on('end', () => {
    done();
  });
});
```

----------------------------------------

TITLE: Using --force Flag in npm Install - npm CLI - Bash
DESCRIPTION: Illustrates using the --force (or -f) CLI argument to force npm to re-fetch remote resources, overriding any local cache. The command ensures the package is freshly installed regardless of any existing copy. The input is a package name flag combination, and the output is the reinstated module in node_modules.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
npm install sax --force
```

----------------------------------------

TITLE: Transcoding Buffer using ES Module Syntax - Node.js JavaScript
DESCRIPTION: Demonstrates how to use the `buffer.transcode()` function with ES module syntax (`import`) to re-encode a Buffer from UTF-8 to ASCII, showing the character substitution that occurs when a character (like '€') cannot be represented in the target encoding. The output shows the substituted character.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_103

LANGUAGE: JavaScript
CODE:
```
import { Buffer, transcode } from 'node:buffer';

const newBuf = transcode(Buffer.from('€'), 'utf8', 'ascii');
console.log(newBuf.toString('ascii'));
// Prints: '?'
```

----------------------------------------

TITLE: Creating JavaScript BigInts from Int64 Values in C
DESCRIPTION: Function to convert C int64_t values to JavaScript BigInt type for precise integer representation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_93

LANGUAGE: c
CODE:
```
napi_status napi_create_bigint_int64(napi_env env,
                                     int64_t value,
                                     napi_value* result);
```

----------------------------------------

TITLE: Calculating Byte Length with Buffer.byteLength (Node.js)
DESCRIPTION: Demonstrates how to use `Buffer.byteLength` to find the number of bytes a string occupies when encoded using a specific encoding (UTF-8 in this case), contrasting it with `String.prototype.length` which counts characters. Shows examples for both MJS and CJS module systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_23

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const str = '\u00bd + \u00bc = \u00be';

console.log(`${str}: ${str.length} characters, ` +
            `${Buffer.byteLength(str, 'utf8')} bytes`);
// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const str = '\u00bd + \u00bc = \u00be';

console.log(`${str}: ${str.length} characters, ` +
            `${Buffer.byteLength(str, 'utf8')} bytes`);
// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes
```

----------------------------------------

TITLE: Using assert as a Function in ES Modules
DESCRIPTION: Demonstrates how to use assert() function directly in ES Modules format, which works the same way as assert.ok().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_40

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

// Using `assert()` works the same:
assert(0);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert(0)
```

----------------------------------------

TITLE: Using the URL origin Property
DESCRIPTION: Examples showing how to get the read-only origin of a URL, including how it handles IDN (Internationalized Domain Names).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://example.org/foo/bar?baz');
console.log(myURL.origin);
// Prints https://example.org
```

----------------------------------------

TITLE: Generating RSA Key Pair Asynchronously with CommonJS
DESCRIPTION: Example of generating an RSA key pair asynchronously using CommonJS require. Uses the same configuration as the ESM example with 4096-bit keys and encrypted private key storage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_66

LANGUAGE: javascript
CODE:
```
const {
  generateKeyPair,
} = require('node:crypto');

generateKeyPair('rsa', {
  modulusLength: 4096,
  publicKeyEncoding: {
    type: 'spki',
    format: 'pem',
  },
  privateKeyEncoding: {
    type: 'pkcs8',
    format: 'pem',
    cipher: 'aes-256-cbc',
    passphrase: 'top secret',
  },
}, (err, publicKey, privateKey) => {
  // Handle errors and use the generated key pair.
});
```

----------------------------------------

TITLE: Handling 'upgrade' Event between HTTP Client and Server (ESM) - JavaScript
DESCRIPTION: Provides a full ESM example for both server and client using Node.js HTTP modules to demonstrate the 'upgrade' event. The HTTP server listens for upgrade requests (e.g., WebSocket handshake), replies with a 101 Upgrade response, and pipes the socket back to itself. The client requests an upgrade and, when the 'upgrade' event fires, ends the socket and exits. Dependencies include 'node:http' and 'node:process'. Key parameters are connection headers and port. Outputs confirmation of upgrade on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_9

LANGUAGE: mjs
CODE:
```
import http from 'node:http';
import process from 'node:process';

// Create an HTTP server
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('okay');
});
server.on('upgrade', (req, socket, head) => {
  socket.write('HTTP/1.1 101 Web Socket Protocol Handshake\r\n' +
               'Upgrade: WebSocket\r\n' +
               'Connection: Upgrade\r\n' +
               '\r\n');

  socket.pipe(socket); // echo back
});

// Now that server is running
server.listen(1337, '127.0.0.1', () => {

  // make a request
  const options = {
    port: 1337,
    host: '127.0.0.1',
    headers: {
      'Connection': 'Upgrade',
      'Upgrade': 'websocket',
    },
  };

  const req = http.request(options);
  req.end();

  req.on('upgrade', (res, socket, upgradeHead) => {
    console.log('got upgraded!');
    socket.end();
    process.exit(0);
  });
});

```

----------------------------------------

TITLE: Error Handling in Child Process Spawn
DESCRIPTION: Example showing how to handle errors when spawning a process fails
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const subprocess = spawn('bad_command');

subprocess.on('error', (err) => {
  console.error('Failed to start subprocess.');
});
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
const subprocess = spawn('bad_command');

subprocess.on('error', (err) => {
  console.error('Failed to start subprocess.');
});
```

----------------------------------------

TITLE: Creating a Duplex Stream with Simplified Constructor in Node.js
DESCRIPTION: Example of creating a Duplex stream using the simplified constructor approach. This method defines the read and write implementations directly in the constructor options object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_91

LANGUAGE: javascript
CODE:
```
const { Duplex } = require('node:stream');

const myDuplex = new Duplex({
  read(size) {
    // ...
  },
  write(chunk, encoding, callback) {
    // ...
  },
});
```

----------------------------------------

TITLE: Handling Line Input with readlinePromises Interface in Node.js
DESCRIPTION: Illustrates a common use case for a `readlinePromises.Interface` instance (`rl`) by listening for the `'line'` event. A callback function is executed whenever a line of input is received from the input stream, logging the received line.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_20

LANGUAGE: js
CODE:
```
rl.on('line', (line) => {
  console.log(`Received: ${line}`);
});
```

----------------------------------------

TITLE: Handling Uncaught Exceptions in Node.js (CommonJS)
DESCRIPTION: Example of attaching an 'uncaughtException' event handler in Node.js using CommonJS require. The handler logs the exception details to stderr before the process exits. The code demonstrates that scheduled tasks will still run before the exception is thrown.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
const process = require('node:process');
const fs = require('node:fs');

process.on('uncaughtException', (err, origin) => {
  fs.writeSync(
    process.stderr.fd,
    `Caught exception: ${err}\n` +
    `Exception origin: ${origin}\n`,
  );
});

setTimeout(() => {
  console.log('This will still run.');
}, 500);

// Intentionally cause an exception, but don't catch it.
nonexistentFunc();
console.log('This will not run.');
```

----------------------------------------

TITLE: Sending File Response with Error and Stat Checks - Node.js HTTP/2 - MJS
DESCRIPTION: Demonstrates how to use `http2stream.respondWithFile` to serve a file, incorporating custom logic via the `statCheck` function to modify response headers based on file stats and the `onError` function to handle potential errors during file reading, such as file not found ('ENOENT'), by sending appropriate HTTP status codes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_31

LANGUAGE: Node.js - MJS
CODE:
```
import { createServer } from 'node:http2';
const server = createServer();
server.on('stream', (stream) => {
  function statCheck(stat, headers) {
    headers['last-modified'] = stat.mtime.toUTCString();
  }

  function onError(err) {
    // stream.respond() can throw if the stream has been destroyed by
    // the other side.
    try {
      if (err.code === 'ENOENT') {
        stream.respond({ ':status': 404 });
      } else {
        stream.respond({ ':status': 500 });
      }
    } catch (err) {
      // Perform actual error handling.
      console.error(err);
    }
    stream.end();
  }

  stream.respondWithFile('/some/file',
                         { 'content-type': 'text/plain; charset=utf-8' },
                         { statCheck, onError });
});
```

----------------------------------------

TITLE: Basic NPM Logout Command
DESCRIPTION: Basic usage of the npm logout command to end the current authentication session.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-logout.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm logout
```

----------------------------------------

TITLE: Node.js Debugger with Resume on Start
DESCRIPTION: Shows debugging session with NODE_INSPECT_RESUME_ON_START=1 flag, including REPL usage and step-by-step execution
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/debugger.md#2025-04-23_snippet_1

LANGUAGE: console
CODE:
```
$ cat myscript.js
// myscript.js
global.x = 5;
setTimeout(() => {
  debugger;
  console.log('world');
}, 1000);
console.log('hello');
$ NODE_INSPECT_RESUME_ON_START=1 node inspect myscript.js
< Debugger listening on ws://127.0.0.1:9229/f1ed133e-7876-495b-83ae-c32c6fc319c2
< For help, see: https://nodejs.org/en/docs/inspector
<
connecting to 127.0.0.1:9229 ... ok
< Debugger attached.
<
< hello
<
break in myscript.js:4
  2 global.x = 5;
  3 setTimeout(() => {
> 4   debugger;
  5   console.log('world');
  6 }, 1000);
debug> next
break in myscript.js:5
  3 setTimeout(() => {
  4   debugger;
> 5   console.log('world');
  6 }, 1000);
  7 console.log('hello');
debug> repl
Press Ctrl+C to leave debug repl
> x
5
> 2 + 2
4
debug> next
< world
<
break in myscript.js:6
  4   debugger;
  5   console.log('world');
> 6 }, 1000);
  7 console.log('hello');
  8
debug> .exit
$
```

----------------------------------------

TITLE: Subscribing to beforeExit and exit Events in Node.js (CommonJS) - JavaScript
DESCRIPTION: Sets up 'beforeExit' and 'exit' event handlers using CommonJS require syntax. Both events print their codes in the documented order to show the process lifecycle. No special dependencies other than the built-in 'process' module are necessary. Only synchronous operations are allowed in 'exit' listeners. This demonstrates direct translation from ESM to CJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_3

LANGUAGE: cjs
CODE:
```
const process = require('node:process');

process.on('beforeExit', (code) => {
  console.log('Process beforeExit event with code: ', code);
});

process.on('exit', (code) => {
  console.log('Process exit event with code: ', code);
});

console.log('This message is displayed first.');

// Prints:
// This message is displayed first.
// Process beforeExit event with code: 0
// Process exit event with code: 0
```

----------------------------------------

TITLE: Resolving/Rejecting Promise Example
DESCRIPTION: Example demonstrating how to resolve or reject a promise after an asynchronous operation completes. Shows proper handling of the deferred object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_201

LANGUAGE: c
CODE:
```
napi_deferred deferred;
napi_value undefined;
napi_status status;

// Create a value with which to conclude the deferred.
status = napi_get_undefined(env, &undefined);
if (status != napi_ok) return NULL;

// Resolve or reject the promise associated with the deferred depending on
// whether the asynchronous action succeeded.
if (asynchronous_action_succeeded) {
  status = napi_resolve_deferred(env, deferred, undefined);
} else {
  status = napi_reject_deferred(env, deferred, undefined);
}
if (status != napi_ok) return NULL;

// At this point the deferred has been freed, so we should assign NULL to it.
deferred = NULL;
```

----------------------------------------

TITLE: Scoped Package Configuration Example
DESCRIPTION: Shows configuration and usage of a scoped package with exports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_25

LANGUAGE: json
CODE:
```
{
  "name": "@my/package",
  "exports": "./index.js"
}
```

LANGUAGE: javascript
CODE:
```
module.exports = 42;
```

LANGUAGE: javascript
CODE:
```
console.log(require('@my/package'));
```

----------------------------------------

TITLE: Defining Multiple Certificate Authorities in .npmrc - INI
DESCRIPTION: Explains how to trust multiple CAs for npm by specifying the 'ca[]' field multiple times in .npmrc. Each entry holds a separate PEM-formatted certificate. This configuration is essential for projects interacting with multiple registries or internal CA hierarchies. Inputs are one or more certificate strings; output is npm's recognized set of trusted authorities.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/config.md#2025-04-23_snippet_3

LANGUAGE: ini
CODE:
```
ca[]="..."
ca[]="..."
```

----------------------------------------

TITLE: Timing a Function using Node.js PerformanceObserver (CommonJS) - JavaScript
DESCRIPTION: Shows how to time a function in Node.js using CommonJS syntax and the perf_hooks module. Requires Node.js v8.5.0+ and 'node:perf_hooks'. The example wraps a function, sets up a PerformanceObserver to listen for 'function' entries, prints the timing result, then cleans up observer state. Functions identically to the ECMAScript module example with CommonJS conventions; output is the measured duration of the wrapped function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
const {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nfunction someFunction() {\n  console.log('hello world');\n}\n\nconst wrapped = performance.timerify(someFunction);\n\nconst obs = new PerformanceObserver((list) => {\n  console.log(list.getEntries()[0].duration);\n\n  performance.clearMarks();\n  performance.clearMeasures();\n  obs.disconnect();\n});\nobs.observe({ entryTypes: ['function'] });\n\n// A performance timeline entry will be created\nwrapped();
```

----------------------------------------

TITLE: Passing Arguments to npm Scripts in Bash
DESCRIPTION: Shows how to pass arguments to an npm script, specifically for a test script with a grep pattern.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-run-script.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm run test -- --grep="pattern"
```

----------------------------------------

TITLE: Transcoding Buffer using CommonJS Syntax - Node.js JavaScript
DESCRIPTION: Illustrates the use of the `buffer.transcode()` function with CommonJS syntax (`require`) to re-encode a Buffer from UTF-8 to ASCII. It highlights how characters not supported in the target encoding are replaced, specifically showing '€' being replaced by '?'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_104

LANGUAGE: JavaScript
CODE:
```
const { Buffer, transcode } = require('node:buffer');

const newBuf = transcode(Buffer.from('€'), 'utf8', 'ascii');
console.log(newBuf.toString('ascii'));
// Prints: '?'
```

----------------------------------------

TITLE: Creating a Scoped Package with NPM Init in Bash
DESCRIPTION: Example showing how to create a scoped package using npm init. This creates a package named with the specified scope prefix.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-login.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
# accept all defaults, and create a package named "@foo/whatever",
# instead of just named "whatever"
npm init --scope=@foo --yes
```

----------------------------------------

TITLE: Basic H2CClient Usage Example
DESCRIPTION: Demonstrates basic usage of H2CClient with a simple HTTP/2 server implementation and request handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/H2CClient.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const { createServer } = require('node:http2')
const { once } = require('node:events')
const { H2CClient } = require('undici')

const server = createServer((req, res) => {
  res.writeHead(200)
  res.end('Hello, world!')
})

server.listen()
once(server, 'listening').then(() => {
  const client = new H2CClient(`http://localhost:${server.address().port}/`)

  const response = await client.request({ path: '/', method: 'GET' })
  console.log(response.statusCode) // 200
  response.body.text.then((text) => {
    console.log(text) // Hello, world!
  })
})
```

----------------------------------------

TITLE: Logging in to npm with a Scoped Registry in Bash
DESCRIPTION: Shows how to log in to npm while associating a scope with a specific registry using the --registry and --scope flags.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scope.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm login --registry=http://reg.example.com --scope=@myco
```

----------------------------------------

TITLE: Performing One-Shot Hashing using crypto.hash in JavaScript
DESCRIPTION: Shows the usage of the `crypto.hash()` function from the `node:crypto` module to compute a cryptographic hash digest in a single operation. This function takes the algorithm (e.g., 'sha1') and the input data (string or Buffer) as arguments and returns the hash. It is optimized for performance, especially for smaller inputs available entirely in memory, compared to the stream-based `createHash()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
const crypto = require('node:crypto');

// Hashing a string and return the result as a hex-encoded string.
const string = 'Node.js';
// 10b3493287f831e81a438811a1ffba01f8cec4b7
console.log(crypto.hash('sha1', string));
```

----------------------------------------

TITLE: Enabling Trace Events via Command Line
DESCRIPTION: Shows how to enable trace events using command line flags with specific categories.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tracing.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
node --trace-event-categories v8,node,node.async_hooks server.js
```

----------------------------------------

TITLE: Referencing GitHub URLs in package.json Dependencies
DESCRIPTION: Demonstrates how to specify dependencies using GitHub repository references in package.json. This allows referencing specific repositories, commits, or branches without publishing them to npm.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_18

LANGUAGE: json
CODE:
```
{
  "name": "foo",
  "version": "0.0.0",
  "dependencies": {
    "express": "expressjs/express",
    "mocha": "mochajs/mocha#4727d357ea",
    "module": "npm/example-github-repo#feature\/branch"
  }
}
```

----------------------------------------

TITLE: Complete Context-Aware Addon Implementation
DESCRIPTION: Full implementation of a context-aware addon with proper instance data management, cleanup hooks, and JavaScript method exposure.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_4

LANGUAGE: cpp
CODE:
```
#include <node.h>

using namespace v8;

class AddonData {
 public:
  explicit AddonData(Isolate* isolate):
      call_count(0) {
    // Ensure this per-addon-instance data is deleted at environment cleanup.
    node::AddEnvironmentCleanupHook(isolate, DeleteInstance, this);
  }

  // Per-addon data.
  int call_count;

  static void DeleteInstance(void* data) {
    delete static_cast<AddonData*>(data);
  }
};

static void Method(const v8::FunctionCallbackInfo<v8::Value>& info) {
  // Retrieve the per-addon-instance data.
  AddonData* data =
      reinterpret_cast<AddonData*>(info.Data().As<External>()->Value());
  data->call_count++;
  info.GetReturnValue().Set((double)data->call_count);
}

// Initialize this addon to be context-aware.
NODE_MODULE_INIT(/* exports, module, context */) {
  Isolate* isolate = context->GetIsolate();

  // Create a new instance of `AddonData` for this instance of the addon and
  // tie its life cycle to that of the Node.js environment.
  AddonData* data = new AddonData(isolate);

  // Wrap the data in a `v8::External` so we can pass it to the method we
  // expose.
  Local<External> external = External::New(isolate, data);

  // Expose the method `Method` to JavaScript, and make sure it receives the
  // per-addon-instance data we created above by passing `external` as the
  // third parameter to the `FunctionTemplate` constructor.
  exports->Set(context,
               String::NewFromUtf8(isolate, "method").ToLocalChecked(),
               FunctionTemplate::New(isolate, Method, external)
                  ->GetFunction(context).ToLocalChecked()).FromJust();
}
```

----------------------------------------

TITLE: Iterating Over Map Values in JavaScript
DESCRIPTION: This snippet creates a Map, gets its values iterator, advances it once with next(), and returns the iterator. It shows how to work with Map value iterators.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
it = new Map([['a', {b: 2}]]).values(); it.next(); it
```

----------------------------------------

TITLE: Composing Interceptors with Undici Client
DESCRIPTION: Example showing how to create and compose interceptors with Undici's Client. It demonstrates a redirect interceptor that handles HTTP redirects by creating a custom dispatcher function that wraps the original dispatch method.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
const { Client, RedirectHandler } = require('undici')

const redirectInterceptor = dispatch => {
    return (opts, handler) => {
      const { maxRedirections } = opts

      if (!maxRedirections) {
        return dispatch(opts, handler)
      }

      const redirectHandler = new RedirectHandler(
        dispatch,
        maxRedirections,
        opts,
        handler
      )
      opts = { ...opts, maxRedirections: 0 } // Stop sub dispatcher from also redirecting.
      return dispatch(opts, redirectHandler)
    }
}

const client = new Client('http://localhost:3000')
  .compose(redirectInterceptor)

await client.request({ path: '/', method: 'GET' })
```

----------------------------------------

TITLE: Testing Strict Equality Comparisons in JavaScript
DESCRIPTION: This code snippet contains a series of strict equality comparisons between various JavaScript values. It tests primitives, objects, and special values to verify the expected behavior of the === operator.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/equality-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
PASS true === "0" is false
PASS true === "1" is false
PASS true === "0.1" is false
PASS true === "-0" is false
PASS true === null is false
PASS true === undefined is false
PASS true === false is false
PASS true === true is true
PASS true === new String("0") is false
PASS true === new Object is false
PASS new String("0") === 0 is false
PASS new String("0") === 1 is false
PASS new String("0") === 0.1 is false
PASS new String("0") === 2 is false
PASS new String("0") === 3 is false
PASS new String("0") === 4 is false
PASS new String("0") === 5 is false
PASS new String("0") === 6 is false
PASS new String("0") === 7 is false
PASS new String("0") === -0 is false
PASS new String("0") === "0" is false
PASS new String("0") === "1" is false
PASS new String("0") === "0.1" is false
PASS new String("0") === "-0" is false
PASS new String("0") === null is false
PASS new String("0") === undefined is false
PASS new String("0") === false is false
PASS new String("0") === true is false
PASS new String("0") === new String("0") is false
PASS new String("0") === new Object is false
PASS new Object === 0 is false
PASS new Object === 1 is false
PASS new Object === 0.1 is false
PASS new Object === 2 is false
PASS new Object === 3 is false
PASS new Object === 4 is false
PASS new Object === 5 is false
PASS new Object === 6 is false
PASS new Object === 7 is false
PASS new Object === -0 is false
PASS new Object === "0" is false
PASS new Object === "1" is false
PASS new Object === "0.1" is false
PASS new Object === "-0" is false
PASS new Object === null is false
PASS new Object === undefined is false
PASS new Object === false is false
PASS new Object === true is false
PASS new Object === new String("0") is false
PASS new Object === new Object is false
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Referencing a Node.js net.Socket to Prevent Program Exit
DESCRIPTION: Marks the socket as referenced, which is the default behavior. A referenced socket will prevent the Node.js event loop from exiting if it's the only active handle remaining. This method counteracts a previous call to `socket.unref()`. Calling `ref()` on an already referenced socket has no effect. Returns the socket instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
socket.ref()
```

----------------------------------------

TITLE: Executing npm restart command in Bash
DESCRIPTION: This command restarts a Node.js project. It is equivalent to running 'npm run-script restart'. If a 'restart' script is specified in package.json, it will run prerestart, restart, and postrestart scripts. Otherwise, it will run stop and start scripts if available.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-restart.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm restart [-- <args>]
```

----------------------------------------

TITLE: Configuring Asset Embedding for Single Executable Applications (SEA) in JSON
DESCRIPTION: Provides an example JSON configuration for embedding assets into a Node.js Single Executable Application (SEA). The `assets` field contains a dictionary mapping asset keys (used for retrieval) to their file paths. Node.js bundles these assets during the build process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "main": "/path/to/bundled/script.js",
  "output": "/path/to/write/the/generated/blob.blob",
  "assets": {
    "a.jpg": "/path/to/a.jpg",
    "b.txt": "/path/to/b.txt"
  }
}
```

----------------------------------------

TITLE: Using MockTimers Test API
DESCRIPTION: Example demonstrating the now-stable MockTimers API for mocking Date and timer functions in tests.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_16

LANGUAGE: JavaScript
CODE:
```
import { mock } from 'node:test';
mock.timers.enable({ apis: ['Date'], now: new Date('1970-01-01') });
```

----------------------------------------

TITLE: Nested Promise Creation with Manual Resolution and Await in Node.js (JavaScript)
DESCRIPTION: Creates a nested promise and exposes its resolver for delayed execution via setTimeout, followed by awaiting the promise. Tests nested asynchronous flow and manual promise fulfillment. Requires an event loop, Promises API, and async/await support.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-expected.txt#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
var resolveNested;\nvar p = #new Promise(resolve => resolveNested = resolve);\nsetTimeout(resolveNested, 0);
```

LANGUAGE: JavaScript
CODE:
```
var resolveNested;\nvar p = new Promise(resolve => resolveNested #= resolve);\nsetTimeout(resolveNested, 0);
```

LANGUAGE: JavaScript
CODE:
```
var resolveNested;\nvar p = new Promise(resolve => resolveNested = resolve#);\nsetTimeout(resolveNested, 0);
```

LANGUAGE: JavaScript
CODE:
```
var p = new Promise(resolve => resolveNested = resolve);\n#setTimeout(resolveNested, 0);\nawait p;
```

LANGUAGE: JavaScript
CODE:
```
setTimeout(resolveNested, 0);\n#await p;\n}
```

----------------------------------------

TITLE: Debug Break Flag with Host/Port Configuration
DESCRIPTION: Command line flag that pauses execution at the start of Node.js application code and waits for a debugger connection. Accepts optional host and port parameters, defaulting to 127.0.0.1:9229.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/internal-api.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
--inspect-brk-node[=[host:]port]
```

----------------------------------------

TITLE: Testing String.replace with RegExp Ranges in JavaScript
DESCRIPTION: This snippet demonstrates how String.replace is used with regular expressions containing {n, m} quantifiers to match and replace substrings occurring within a given range. It includes assertions that validate the replace operations on specific input strings (e.g., replacing sequences of 'Y' or 'M' characters with different replacements), as well as a flag indicating the entire test was successfully parsed. The expected outputs are compared and reported as 'PASS' for each test case.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/string_replace-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
PASS "YY".replace(/Y{1,4}/g,"YYYY") is "YYYY"
PASS "MM".replace(/M{1,2}/g,"M") is "M"
PASS "YY".replace(/Y{1,4}/g,"MMMM") is "MMMM"
PASS successfullyParsed is true

TEST COMPLETE
```

----------------------------------------

TITLE: Async Iteration with Readline Interface
DESCRIPTION: Demonstrates how to use async iteration to process input lines from a readline interface. Creates an async function that processes each line of input using a for-await-of loop.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
async function processLineByLine() {
  const rl = readline.createInterface({
    // ...
  });

  for await (const line of rl) {
    // Each line in the readline input will be successively available here as
    // `line`.
  }
}
```

----------------------------------------

TITLE: Triggering Assertion Failures with assert.fail (Node.js, ECMAScript Module, JavaScript)
DESCRIPTION: Demonstrates multiple ways to trigger failed assertions using assert.fail() in Node.js ESM style. The examples show behaviors with different combinations of parameters, including message and operator overrides, as well as throwing an Error-derived object. Dependency: node:assert/strict. Key parameters include actual, expected, message, operator, and stackStartFn. The output varies between default, custom message, and stack trace suppression. Throws AssertionError or custom error; outputs are determined by input parameters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_22

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

assert.fail('a', 'b');
// AssertionError [ERR_ASSERTION]: 'a' != 'b'

assert.fail(1, 2, undefined, '>');
// AssertionError [ERR_ASSERTION]: 1 > 2

assert.fail(1, 2, 'fail');
// AssertionError [ERR_ASSERTION]: fail

assert.fail(1, 2, 'whoops', '>');
// AssertionError [ERR_ASSERTION]: whoops

assert.fail(1, 2, new TypeError('need array'));
// TypeError: need array
```

----------------------------------------

TITLE: Implementing CCM Mode Encryption/Decryption in Node.js (CJS)
DESCRIPTION: Demonstrates CCM mode encryption and decryption using the Node.js crypto module with CommonJS modules. Identical functionality to the ESM version but using require() syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_97

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');
const {
  createCipheriv,
  createDecipheriv,
  randomBytes,
} = require('node:crypto');

const key = 'keykeykeykeykeykeykeykey';
const nonce = randomBytes(12);

const aad = Buffer.from('0123456789', 'hex');

const cipher = createCipheriv('aes-192-ccm', key, nonce, {
  authTagLength: 16,
});
const plaintext = 'Hello world';
cipher.setAAD(aad, {
  plaintextLength: Buffer.byteLength(plaintext),
});
const ciphertext = cipher.update(plaintext, 'utf8');
cipher.final();
const tag = cipher.getAuthTag();

// Now transmit { ciphertext, nonce, tag }.

const decipher = createDecipheriv('aes-192-ccm', key, nonce, {
  authTagLength: 16,
});
decipher.setAuthTag(tag);
decipher.setAAD(aad, {
  plaintextLength: ciphertext.length,
});
const receivedPlaintext = decipher.update(ciphertext, null, 'utf8');

try {
  decipher.final();
} catch (err) {
  throw new Error('Authentication failed!', { cause: err });
}

console.log(receivedPlaintext);
```

----------------------------------------

TITLE: Installing GitHub Packages - npm CLI - Bash
DESCRIPTION: Demonstrates multiple ways to install packages directly from a GitHub repository using the npm CLI. Supports specifying the repository by user and project, with or without explicit protocol, and optionally a commit-ish or semver range. Dependencies are automatically installed if the package defines a prepare script. Inputs are repository or user/project strings, and outputs are the installed package(s) in node_modules.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
npm install mygithubuser/myproject
npm install github:mygithubuser/myproject
```

----------------------------------------

TITLE: Getting Array Elements with Node-API
DESCRIPTION: Demonstrates retrieving an element from an array using Node-API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_145

LANGUAGE: javascript
CODE:
```
const arr = [];
const value = arr[123];
```

LANGUAGE: c
CODE:
```
napi_status status = napi_generic_failure;

// const arr = []
napi_value arr, value;
status = napi_create_array(env, &arr);
if (status != napi_ok) return status;

// const value = arr[123]
status = napi_get_element(env, arr, 123, &value);
if (status != napi_ok) return status;
```

----------------------------------------

TITLE: Querying Current User Information with Node.js JavaScript
DESCRIPTION: Returns information about the current user as an object using os.userInfo([options]). The optional options parameter allows changing the encoding of string values. The returned object contains 'username', 'uid', 'gid', 'shell', and 'homedir'. On POSIX platforms, additional information may be available; on Windows, some fields are limited. May throw a SystemError if 'username' or 'homedir' is missing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
os.userInfo([options])
```

----------------------------------------

TITLE: Basic Node.js Debugger Usage
DESCRIPTION: Demonstrates basic usage of Node.js debugger with a simple script containing a global variable and setTimeout
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/debugger.md#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ node inspect myscript.js
< Debugger listening on ws://127.0.0.1:9229/621111f9-ffcb-4e82-b718-48a145fa5db8
< For help, see: https://nodejs.org/en/docs/inspector
<
connecting to 127.0.0.1:9229 ... ok
< Debugger attached.
<
 ok
Break on start in myscript.js:2
  1 // myscript.js
> 2 global.x = 5;
  3 setTimeout(() => {
  4   debugger;
debug>
```

----------------------------------------

TITLE: Stream Iterator Usage Example
DESCRIPTION: Demonstrates the difference between using iterator() and Symbol.asyncIterator with stream destruction behavior.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_42

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

async function printIterator(readable) {
  for await (const chunk of readable.iterator({ destroyOnReturn: false })) {
    console.log(chunk); // 1
    break;
  }

  console.log(readable.destroyed); // false

  for await (const chunk of readable.iterator({ destroyOnReturn: false })) {
    console.log(chunk); // Will print 2 and then 3
  }

  console.log(readable.destroyed); // True, stream was totally consumed
}

async function printSymbolAsyncIterator(readable) {
  for await (const chunk of readable) {
    console.log(chunk); // 1
    break;
  }

  console.log(readable.destroyed); // true
}

async function showBoth() {
  await printIterator(Readable.from([1, 2, 3]));
  await printSymbolAsyncIterator(Readable.from([1, 2, 3]));
}

showBoth();
```

----------------------------------------

TITLE: Retrieving Native Objects with napi_unwrap
DESCRIPTION: Retrieves a previously wrapped native instance from a JavaScript object. Used in native callbacks to access the C++ instance associated with the JavaScript this object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_180

LANGUAGE: c
CODE:
```
napi_status napi_unwrap(napi_env env,
                        napi_value js_object,
                        void** result);
```

----------------------------------------

TITLE: Querying npm packages with libnpmsearch - JavaScript
DESCRIPTION: Demonstrates an asynchronous example of using the libnpmsearch library to query the npm package registry for matching packages and output results to the console. The search function returns a promise that resolves to an array of package descriptors. Requires installation of the libnpmsearch package and execution within a context allowing top-level await or wrapping in an async function. Accepts a string query and optional parameters such as result limits.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmsearch/README.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
const search = require('libnpmsearch')

console.log(await search('libnpm'))
=>
[
  {
    name: 'libnpm',
    description: 'programmatic npm API',
    ...etc
  },
  {
    name: 'libnpmsearch',
    description: 'Programmatic API for searching in npm and compatible registries',
    ...etc
  },
  ...more
]
```

----------------------------------------

TITLE: Creating and Capturing Stack Traces in Node.js
DESCRIPTION: Demonstrates how to create and capture stack traces in Node.js using Error.captureStackTrace(). This example shows how to create a stack trace and how to omit certain functions from the trace.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
function a() {
  b();
}

function b() {
  c();
}

function c() {
  // Create an error without stack trace to avoid calculating the stack trace twice.
  const { stackTraceLimit } = Error;
  Error.stackTraceLimit = 0;
  const error = new Error();
  Error.stackTraceLimit = stackTraceLimit;

  // Capture the stack trace above function b
  Error.captureStackTrace(error, b); // Neither function c, nor b is included in the stack trace
  throw error;
}

a();
```

----------------------------------------

TITLE: Measuring DNS Resolution Time in CommonJS Format
DESCRIPTION: This example demonstrates how to measure DNS resolution performance using the PerformanceObserver API in CommonJS format. It performs both callback-based and promise-based DNS lookups and logs the performance metrics for the resolution process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
'use strict';
const { PerformanceObserver } = require('node:perf_hooks');
const dns = require('node:dns');
const obs = new PerformanceObserver((items) => {
  items.getEntries().forEach((item) => {
    console.log(item);
  });
});
obs.observe({ entryTypes: ['dns'] });
dns.lookup('localhost', () => {});
dns.promises.resolve('localhost');
```

----------------------------------------

TITLE: Importing Readline Callback/Sync API using CommonJS in Node.js
DESCRIPTION: Shows how to import the callback and synchronous APIs of the `node:readline` module using the CommonJS `require` function. This is used for accessing the traditional event-emitter based interface.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_3

LANGUAGE: cjs
CODE:
```
const readline = require('node:readline');
```

----------------------------------------

TITLE: Checking Voluntary Worker Exit with exitedAfterDisconnect in Node.js
DESCRIPTION: Illustrates how to use the `worker.exitedAfterDisconnect` boolean property within a cluster 'exit' event handler. This allows the primary process to determine if a worker exited voluntarily (due to `disconnect()`) or was terminated unexpectedly, enabling conditional logic like deciding whether to respawn the worker.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_6

LANGUAGE: js
CODE:
```
cluster.on('exit', (worker, code, signal) => {
  if (worker.exitedAfterDisconnect === true) {
    console.log('Oh, it was just voluntary – no need to worry');
  }
});

// kill worker
worker.kill();
```

----------------------------------------

TITLE: Instantiating a net.Socket instance in Node.js (JavaScript)
DESCRIPTION: Demonstrates how to create a new net.Socket object, optionally configuring its behavior via an options object. Supports parameters such as allowHalfOpen for controlling duplex closure behavior and fd for wrapping existing file descriptors. This snippet requires Node.js core 'net' module and is used in context where low-level TCP or IPC streams are needed, with expected input as an options object and output as a net.Socket instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
new net.Socket([options])
```

----------------------------------------

TITLE: Viewing Version-Specific Dependencies
DESCRIPTION: Demonstrates how to view dependencies for multiple versions of a package that match a version range.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-view.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
npm view yui3@'>0.5.4' dependencies.jsdom
```

----------------------------------------

TITLE: Resolving SRV Records with dnsPromises.resolveSrv() in Node.js
DESCRIPTION: This snippet shows the structure of the object returned when resolving SRV (Service) records using the dnsPromises.resolveSrv() method. It includes properties such as priority, weight, port, and name.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
{
  priority: 10,
  weight: 5,
  port: 21223,
  name: 'service.example.com'
}
```

----------------------------------------

TITLE: Encrypting Data Using cipher.update() and cipher.final() Methods in Node.js (CommonJS)
DESCRIPTION: This snippet demonstrates how to encrypt data using the cipher.update() and cipher.final() methods in Node.js with CommonJS syntax. It follows the same process as the ES Modules version, generating a key and IV, then encrypting the data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_11

LANGUAGE: JavaScript
CODE:
```
const {
  scrypt,
  randomFill,
  createCipheriv,
} = require('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';

// First, we'll generate the key. The key length is dependent on the algorithm.
// In this case for aes192, it is 24 bytes (192 bits).
scrypt(password, 'salt', 24, (err, key) => {
  if (err) throw err;
  // Then, we'll generate a random initialization vector
  randomFill(new Uint8Array(16), (err, iv) => {
    if (err) throw err;

    const cipher = createCipheriv(algorithm, key, iv);

    let encrypted = cipher.update('some clear text data', 'utf8', 'hex');
    encrypted += cipher.final('hex');
    console.log(encrypted);
  });
});
```

----------------------------------------

TITLE: Override Error.prepareStackTrace while Retaining Source Maps in Node.js (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to customize the stack trace formatting using `Error.prepareStackTrace` while ensuring that source map processing, enabled by the `--enable-source-maps` flag, remains active. It captures the original function, defines a custom function to modify error/trace data, and then calls the original function to produce the final, source map-adjusted stack trace.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_21

LANGUAGE: javascript
CODE:
```
const originalPrepareStackTrace = Error.prepareStackTrace;
Error.prepareStackTrace = (error, trace) => {
  // Modify error and trace and format stack trace with
  // original Error.prepareStackTrace.
  return originalPrepareStackTrace(error, trace);
};
```

----------------------------------------

TITLE: Directory Iterator Example using fs.Dir
DESCRIPTION: Example showing how to asynchronously iterate through directory entries using the fs.Dir class with ES modules import. The code demonstrates opening a directory stream and logging each entry name.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_103

LANGUAGE: mjs
CODE:
```
import { opendir } from 'node:fs/promises';

try {
  const dir = await opendir('./');
  for await (const dirent of dir)
    console.log(dirent.name);
} catch (err) {
  console.error(err);
}
```

----------------------------------------

TITLE: Generating AES Key using Web Crypto API in JavaScript
DESCRIPTION: This function generates an AES-CBC key using the Web Crypto API. It creates a symmetric key that can be used for encryption and decryption operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function generateAesKey(length = 256) {
  const key = await subtle.generateKey({
    name: 'AES-CBC',
    length,
  }, true, ['encrypt', 'decrypt']);

  return key;
}
```

----------------------------------------

TITLE: Importing the Node.js REPL Module (CommonJS) in JavaScript
DESCRIPTION: Requires the REPL module using CommonJS syntax, suitable for Node.js scripts that are not using ESM modules. No additional dependencies are required beyond Node.js and its built-in 'repl' module. The function returns a reference to the 'repl' module, enabling REPL features within the application.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const repl = require('node:repl');
```

----------------------------------------

TITLE: Checking for Buffer or Uint8Array Type with napi_is_buffer in C
DESCRIPTION: This function checks if a JavaScript object is a Buffer or Uint8Array. It returns the result as a boolean. Note that napi_is_typedarray is preferred for checking Uint8Arrays specifically.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_135

LANGUAGE: c
CODE:
```
napi_status napi_is_buffer(napi_env env, napi_value value, bool* result)
```

----------------------------------------

TITLE: Using Absolute File Paths with fs.promises.open in Node.js
DESCRIPTION: This snippet shows how to use an absolute file path with the fs.promises.open method in Node.js, demonstrating proper resource management with try-finally.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_112

LANGUAGE: javascript
CODE:
```
import { open } from 'node:fs/promises';

let fd;
try {
  fd = await open('/open/some/file.txt', 'r');
  // Do something with the file
} finally {
  await fd?.close();
}
```

----------------------------------------

TITLE: Handling HTTP/2 Client Response Event (MJS)
DESCRIPTION: Demonstrates how to listen for the 'response' event on a Node.js HTTP/2 client request using ES modules. This event is emitted when response HEADERS are received from the server. The listener receives the headers object and flags.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_21

LANGUAGE: javascript
CODE:
```
import { connect } from 'node:http2';
const client = connect('https://localhost');
const req = client.request({ ':path': '/' });
req.on('response', (headers, flags) => {
  console.log(headers[':status']);
});
```

----------------------------------------

TITLE: Streaming Data with Undici Pipeline and Node.js Streams
DESCRIPTION: This example demonstrates how to use Undici's pipeline method with Node.js streams. It creates a pipeline that reads data from a Readable stream, sends it through an Undici request, and processes the response through a Writable stream.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import { Readable, Writable, PassThrough, pipeline } from 'stream'
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  request.pipe(response)
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

let res = ''

pipeline(
  new Readable({
    read () {
      this.push(Buffer.from('undici'))
      this.push(null)
    }
  }),
  client.pipeline({
    path: '/',
    method: 'GET'
  }, ({ statusCode, headers, body }) => {
    console.log(`response received ${statusCode}`)
    console.log('headers', headers)
    return pipeline(body, new PassThrough(), () => {})
  }),
  new Writable({
    write (chunk, _, callback) {
      res += chunk.toString()
      callback()
    },
    final (callback) {
      console.log(`Response pipelined to writable: ${res}`)
      callback()
    }
  }),
  error => {
    if (error) {
      console.error(error)
    }

    client.close()
    server.close()
  }
)
```

----------------------------------------

TITLE: Using assert.ok in CommonJS
DESCRIPTION: Demonstrates how to use assert.ok() method in CommonJS format to test if a value is truthy. Shows various scenarios including missing arguments and falsy values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_39

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

assert.ok(true);
// OK
assert.ok(1);
// OK

assert.ok();
// AssertionError: No value argument passed to `assert.ok()`

assert.ok(false, 'it\'s false');
// AssertionError: it's false

// In the repl:
assert.ok(typeof 123 === 'string');
// AssertionError: false == true

// In a file (e.g. test.js):
assert.ok(typeof 123 === 'string');
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(typeof 123 === 'string')

assert.ok(false);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(false)

assert.ok(0);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(0)
```

----------------------------------------

TITLE: Multiple Intercepted Requests with Undici MockPool
DESCRIPTION: Demonstrates how to configure multiple intercepts for different paths on the same MockPool. This example shows handling different endpoints with unique responses in a testing scenario.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/foo',
  method: 'GET'
}).reply(200, 'foo')

mockPool.intercept({
  path: '/hello',
  method: 'GET',
}).reply(200, 'hello')

const result1 = await request('http://localhost:3000/foo')

console.log('response received', result1.statusCode) // response received 200

for await (const data of result1.body) {
  console.log('data', data.toString('utf8')) // data foo
}

const result2 = await request('http://localhost:3000/hello')

console.log('response received', result2.statusCode) // response received 200

for await (const data of result2.body) {
  console.log('data', data.toString('utf8')) // data hello
}
```

----------------------------------------

TITLE: Measuring CPU Usage in Node.js
DESCRIPTION: This snippet demonstrates how to measure CPU usage of the current process using process.cpuUsage(). It shows how to get a diff reading by passing a previous measurement as an argument.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
import { cpuUsage } from 'node:process';

const startUsage = cpuUsage();
// { user: 38579, system: 6986 }

// spin the CPU for 500 milliseconds
const now = Date.now();
while (Date.now() - now < 500);

console.log(cpuUsage(startUsage));
// { user: 514883, system: 11226 }
```

LANGUAGE: javascript
CODE:
```
const { cpuUsage } = require('node:process');

const startUsage = cpuUsage();
// { user: 38579, system: 6986 }

// spin the CPU for 500 milliseconds
const now = Date.now();
while (Date.now() - now < 500);

console.log(cpuUsage(startUsage));
// { user: 514883, system: 11226 }
```

----------------------------------------

TITLE: Triggering Mock Timers with runAll - node:test - MJS
DESCRIPTION: This snippet demonstrates how to use `context.mock.timers.runAll()` to immediately execute all pending mocked timers and advance the mocked `Date` object to the time of the furthest timer. It requires the `node:test` and `node:assert` modules and timer/Date mocking must be enabled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_56

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('runAll functions following the given order', (context) => {
  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
  const results = [];
  setTimeout(() => results.push(1), 9999);

  // Notice that if both timers have the same timeout,
  // the order of execution is guaranteed
  setTimeout(() => results.push(3), 8888);
  setTimeout(() => results.push(2), 8888);

  assert.deepStrictEqual(results, []);

  context.mock.timers.runAll();
  assert.deepStrictEqual(results, [3, 2, 1]);
  // The Date object is also advanced to the furthest timer's time
  assert.strictEqual(Date.now(), 9999);
});
```

----------------------------------------

TITLE: Measuring Event Loop Utilization in Node.js (CJS, JavaScript)
DESCRIPTION: This CommonJS example retrieves event loop utilization stats using perf_hooks.performance in Node.js. It compares event loop idle and active times before and after a synchronous sleep operation using spawnSync, then logs the utilization metric. Meant for Node.js 12.19.0+ on systems with the 'sleep' command available; input is the event loop state, and output is a printed utilization figure. Blocking operations skew the measurement towards 1 regardless of actual CPU usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_3

LANGUAGE: cjs
CODE:
```
'use strict';
const { eventLoopUtilization } = require('node:perf_hooks').performance;
const { spawnSync } = require('node:child_process');

setImmediate(() => {
  const elu = eventLoopUtilization();
  spawnSync('sleep', ['5']);
  console.log(eventLoopUtilization(elu).utilization);
});
```

----------------------------------------

TITLE: Using devDependencies with Build Scripts
DESCRIPTION: Demonstrates how to use devDependencies for development tools like CoffeeScript and the prepare script to compile source code. This allows developers to publish pre-compiled code while maintaining a clear development workflow.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_21

LANGUAGE: json
CODE:
```
{
  "name": "@npm/ethopia-waza",
  "description": "a delightfully fruity coffee varietal",
  "version": "1.2.3",
  "devDependencies": {
    "coffee-script": "~1.6.3"
  },
  "scripts": {
    "prepare": "coffee -o lib/ -c src/waza.coffee"
  },
  "main": "lib/waza.js"
}
```

----------------------------------------

TITLE: Dynamically Importing User Modules with Default Loader using vm.Script (CommonJS)
DESCRIPTION: Shows creating test modules and importing them dynamically in a script compiled with vm.Script using CommonJS. Highlights use of 'filename' for relative resolution and demonstrates how JSON and ESM imports work across contexts with 'importModuleDynamically'. Requires Node.js 'vm', 'path', 'fs' modules. Inputs: creation of files and dynamic script evaluation; Outputs: imported JSON object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_30

LANGUAGE: cjs
CODE:
```
const { Script, constants } = require('node:vm');
const { resolve } = require('node:path');
const { writeFileSync } = require('node:fs');

// Write test.js and test.txt to the directory where the current script
// being run is located.
writeFileSync(resolve(__dirname, 'test.mjs'),
              'export const filename = "./test.json";');
writeFileSync(resolve(__dirname, 'test.json'),
              '{"hello": "world"}');

// Compile a script that loads test.mjs and then test.json
// as if the script is placed in the same directory.
const script = new Script(
  `(async function() {
    const { filename } = await import('./test.mjs');
    return import(filename, { with: { type: 'json' } })
  })();`,
  {
    filename: resolve(__dirname, 'test-with-default.js'),
    importModuleDynamically: constants.USE_MAIN_CONTEXT_DEFAULT_LOADER,
  });

// { default: { hello: 'world' } }
script.runInThisContext().then(console.log);
```

----------------------------------------

TITLE: Creating an HTTP/2 Secure Server with Node.js
DESCRIPTION: This snippet shows how to create a secure HTTP/2 server using the http2.createSecureServer() method with TLS certificates. It configures secure settings and sets up stream handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/util/missingssl-internal.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const http2 = require('http2');
const fs = require('fs');

const options = {
  key: fs.readFileSync('server-key.pem'),
  cert: fs.readFileSync('server-cert.pem')
};

// Create a secure HTTP/2 server
const server = http2.createSecureServer(options);

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html',
    ':status': 200
  });
  stream.end('<h1>Hello World</h1>');
});

server.listen(8443);
```

----------------------------------------

TITLE: Writing Signed 16-bit Integer Little-Endian to Buffer (Node.js)
DESCRIPTION: This snippet demonstrates using `buf.writeInt16LE()` to write a signed 16-bit integer into a Buffer at a specified offset using little-endian byte order. The value must be a valid signed 16-bit integer and is written as two's complement.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_90

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(2);

buf.writeInt16LE(0x0304, 0);

console.log(buf);
// Prints: <Buffer 04 03>
```

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(2);

buf.writeInt16LE(0x0304, 0);

console.log(buf);
// Prints: <Buffer 04 03>
```

----------------------------------------

TITLE: Explaining Async Execution vs Causality with triggerAsyncId (JavaScript)
DESCRIPTION: This snippet illustrates the use of async_hooks.executionAsyncId and triggerAsyncId in the context of net server and listeners to distinguish between execution context and trigger (causal) resource context in callback handlers. It uses pseudo-code and commentary to clarify which IDs are returned in different situations. The code requires Node.js modules net and async_hooks, and demonstrates how IDs are associated differently based on where the callback is invoked. Inputs: server connections and listeners; Outputs: Resource IDs.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_23

LANGUAGE: js
CODE:
```
const server = net.createServer((conn) => {
  // Returns the ID of the server, not of the new connection, because the
  // callback runs in the execution scope of the server's MakeCallback().
  async_hooks.executionAsyncId();

}).listen(port, () => {
  // Returns the ID of a TickObject (process.nextTick()) because all
  // callbacks passed to .listen() are wrapped in a nextTick().
  async_hooks.executionAsyncId();
});
```

LANGUAGE: js
CODE:
```
const server = net.createServer((conn) => {
  // The resource that caused (or triggered) this callback to be called
  // was that of the new connection. Thus the return value of triggerAsyncId()
  // is the asyncId of "conn".
  async_hooks.triggerAsyncId();

}).listen(port, () => {
  // Even though all callbacks passed to .listen() are wrapped in a nextTick()
  // the callback itself exists because the call to the server's .listen()
  // was made. So the return value would be the ID of the server.
  async_hooks.triggerAsyncId();
});
```

----------------------------------------

TITLE: Creating a Writable Stream with Simplified Construction in Node.js
DESCRIPTION: Demonstrates creating a writable stream without inheritance by directly instantiating the Writable class and providing implementation methods as options.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_72

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

const myWritable = new Writable({
  construct(callback) {
    // Initialize state and load resources...
  },
  write(chunk, encoding, callback) {
    // ...
  },
  destroy() {
    // Free resources...
  },
});
```

----------------------------------------

TITLE: Using Once Method for Single Event Handling in Node.js (ESM)
DESCRIPTION: This snippet demonstrates the use of the once() method in Node.js EventEmitter, which registers a listener that is called at most once for a particular event. It uses ECMAScript modules to show the behavior of once().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
let m = 0;
myEmitter.once('event', () => {
  console.log(++m);
});
myEmitter.emit('event');
// Prints: 1
myEmitter.emit('event');
// Ignored
```

----------------------------------------

TITLE: Complete Duplex Stream Implementation Example in Node.js
DESCRIPTION: Comprehensive example of a Duplex stream that wraps a lower-level source object. It implements both _write and _read methods to handle the Writable and Readable aspects of the stream, converting between Node.js stream format and the underlying source's API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_93

LANGUAGE: javascript
CODE:
```
const { Duplex } = require('node:stream');
const kSource = Symbol('source');

class MyDuplex extends Duplex {
  constructor(source, options) {
    super(options);
    this[kSource] = source;
  }

  _write(chunk, encoding, callback) {
    // The underlying source only deals with strings.
    if (Buffer.isBuffer(chunk))
      chunk = chunk.toString();
    this[kSource].writeSomeData(chunk);
    callback();
  }

  _read(size) {
    this[kSource].fetchSomeData(size, (data, encoding) => {
      this.push(Buffer.from(data, encoding));
    });
  }
}
```

----------------------------------------

TITLE: Using URLPattern to match URLs in JavaScript
DESCRIPTION: Demonstrates how to create a URLPattern instance and use it to match a URL. The example shows both exec() and test() methods for pattern matching against URLs.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_32

LANGUAGE: javascript
CODE:
```
const myPattern = new URLPattern('https://nodejs.org/docs/latest/api/*.html');
console.log(myPattern.exec('https://nodejs.org/docs/latest/api/dns.html'));
// Prints:
// {
//  "hash": { "groups": {  "0": "" },  "input": "" },
//  "hostname": { "groups": {}, "input": "nodejs.org" },
//  "inputs": [
//    "https://nodejs.org/docs/latest/api/dns.html"
//  ],
//  "password": { "groups": { "0": "" }, "input": "" },
//  "pathname": { "groups": { "0": "dns" }, "input": "/docs/latest/api/dns.html" },
//  "port": { "groups": {}, "input": "" },
//  "protocol": { "groups": {}, "input": "https" },
//  "search": { "groups": { "0": "" }, "input": "" },
//  "username": { "groups": { "0": "" }, "input": "" }
// }

console.log(myPattern.test('https://nodejs.org/docs/latest/api/dns.html'));
// Prints: true
```

----------------------------------------

TITLE: Scoped Registry Login Example in Bash
DESCRIPTION: Example showing how to log in to a private registry with a scope and how to log out. Demonstrates linking a scope to a custom registry.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-adduser.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry.mycorp.com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

----------------------------------------

TITLE: Decrypting Data Using Decipheriv as a Stream in ESM
DESCRIPTION: Example demonstrating how to use the Decipheriv class as a stream in ES modules. It creates a decipher using AES-192-CBC algorithm, derives a key using scryptSync, sets up event listeners for the readable stream, and decrypts hex-encoded data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';
const {
  scryptSync,
  createDecipheriv,
} = await import('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';
// Key length is dependent on the algorithm. In this case for aes192, it is
// 24 bytes (192 bits).
// Use the async `crypto.scrypt()` instead.
const key = scryptSync(password, 'salt', 24);
// The IV is usually passed along with the ciphertext.
const iv = Buffer.alloc(16, 0); // Initialization vector.

const decipher = createDecipheriv(algorithm, key, iv);

let decrypted = '';
decipher.on('readable', () => {
  let chunk;
  while (null !== (chunk = decipher.read())) {
    decrypted += chunk.toString('utf8');
  }
});
decipher.on('end', () => {
  console.log(decrypted);
  // Prints: some clear text data
});

// Encrypted with same algorithm, key and iv.
const encrypted =
  'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';
decipher.write(encrypted, 'hex');
decipher.end();
```

----------------------------------------

TITLE: Setting Max Old Space Size for V8 (bash)
DESCRIPTION: This command shows how to use the V8 flag `--max-old-space-size` when starting a Node.js application. The flag sets the maximum memory limit (in MiB) for V8's old memory section, helping to manage garbage collection frequency and prevent excessive memory usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_39

LANGUAGE: bash
CODE:
```
node --max-old-space-size=1536 index.js
```

----------------------------------------

TITLE: Configuring Subprocess stdio Streams in Node.js
DESCRIPTION: Demonstrates configuring child process stdio streams using spawn() with custom file descriptors. Shows how to set up stdin, stdout and stderr with different configurations including piping and file output.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_42

LANGUAGE: javascript
CODE:
```
const assert = require('node:assert');
const fs = require('node:fs');
const child_process = require('node:child_process');

const subprocess = child_process.spawn('ls', {
  stdio: [
    0, // Use parent's stdin for child.
    'pipe', // Pipe child's stdout to parent.
    fs.openSync('err.out', 'w'), // Direct child's stderr to a file.
  ],
});

assert.strictEqual(subprocess.stdio[0], null);
assert.strictEqual(subprocess.stdio[0], subprocess.stdin);

assert(subprocess.stdout);
assert.strictEqual(subprocess.stdio[1], subprocess.stdout);

assert.strictEqual(subprocess.stdio[2], null);
assert.strictEqual(subprocess.stdio[2], subprocess.stderr);
```

LANGUAGE: javascript
CODE:
```
import assert from 'node:assert';
import fs from 'node:fs';
import child_process from 'node:child_process';

const subprocess = child_process.spawn('ls', {
  stdio: [
    0, // Use parent's stdin for child.
    'pipe', // Pipe child's stdout to parent.
    fs.openSync('err.out', 'w'), // Direct child's stderr to a file.
  ],
});

assert.strictEqual(subprocess.stdio[0], null);
assert.strictEqual(subprocess.stdio[0], subprocess.stdin);

assert(subprocess.stdout);
assert.strictEqual(subprocess.stdio[1], subprocess.stdout);

assert.strictEqual(subprocess.stdio[2], null);
assert.strictEqual(subprocess.stdio[2], subprocess.stderr);
```

----------------------------------------

TITLE: Reducing Stream Data Asynchronously with readable.reduce in Node.js (MJS)
DESCRIPTION: This example demonstrates using the `Readable.reduce` method with an asynchronous reducer function to process stream chunks sequentially. It calculates the total size of files in a directory by iterating through file names obtained from `fs.readdir` and calling `fs.stat` within the reducer. The method returns a promise resolving to the final accumulated value (total size).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_53

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { readdir, stat } from 'node:fs/promises';
import { join } from 'node:path';

const directoryPath = './src';
const filesInDir = await readdir(directoryPath);

const folderSize = await Readable.from(filesInDir)
  .reduce(async (totalSize, file) => {
    const { size } = await stat(join(directoryPath, file));
    return totalSize + size;
  }, 0);

console.log(folderSize);
```

----------------------------------------

TITLE: Using .mjs and .cjs Extensions for Explicit Module Type in Node.js
DESCRIPTION: This code snippet demonstrates how .mjs and .cjs file extensions can be used to explicitly specify module type, overriding package.json settings. It shows imports of files with these extensions and how they are interpreted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import './legacy-file.cjs';
// Loaded as CommonJS since .cjs is always loaded as CommonJS.

import 'commonjs-package/src/index.mjs';
// Loaded as ES module since .mjs is always loaded as ES module.
```

----------------------------------------

TITLE: Converting JavaScript Number to C Int32 in N-API
DESCRIPTION: Converts a JavaScript number to a C int32_t primitive, truncating values outside the 32-bit range. Non-finite values like NaN and Infinity result in zero.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_117

LANGUAGE: c
CODE:
```
napi_status napi_get_value_int32(napi_env env,
                                 napi_value value,
                                 int32_t* result)
```

----------------------------------------

TITLE: Instantiating EventSource in Undici
DESCRIPTION: Demonstrates how to import and create a new EventSource instance from Undici and handle incoming messages. This example shows the basic usage pattern for connecting to a server endpoint and processing server-sent events.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/EventSource.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { EventSource } from 'undici'

const eventSource = new EventSource('http://localhost:3000')
eventSource.onmessage = (event) => {
  console.log(event.data)
}
```

----------------------------------------

TITLE: Implementing Custom Retry Logic with RetryHandler in Node.js
DESCRIPTION: Example showing how to create a RetryHandler instance with custom retry logic, including error handling, status code checking, and chunk processing. The handler implements custom retry timing and specific error condition handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/RetryHandler.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const client = new Client(`http://localhost:${server.address().port}`);
const chunks = [];
const handler = new RetryHandler(
  {
    ...dispatchOptions,
    retryOptions: {
      // custom retry function
      retry: function (err, state, callback) {
        counter++;

        if (err.code && err.code === "UND_ERR_DESTROYED") {
          callback(err);
          return;
        }

        if (err.statusCode === 206) {
          callback(err);
          return;
        }

        setTimeout(() => callback(null), 1000);
      },
    },
  },
  {
    dispatch: (...args) => {
      return client.dispatch(...args);
    },
    handler: {
      onConnect() {},
      onBodySent() {},
      onHeaders(status, _rawHeaders, resume, _statusMessage) {
        // do something with headers
      },
      onData(chunk) {
        chunks.push(chunk);
        return true;
      },
      onComplete() {},
      onError() {
        // handle error properly
      },
    },
  }
);
```

----------------------------------------

TITLE: Using AbortController with child_process.fork() in CommonJS
DESCRIPTION: Demonstrates how to use AbortController to manage a forked child process in CommonJS format. The example shows both parent and child process code, with the parent having the ability to abort the child process execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
const { fork } = require('node:child_process');
const process = require('node:process');

if (process.argv[2] === 'child') {
  setTimeout(() => {
    console.log(`Hello from ${process.argv[2]}!`);
  }, 1_000);
} else {
  const controller = new AbortController();
  const { signal } = controller;
  const child = fork(__filename, ['child'], { signal });
  child.on('error', (err) => {
    // This will be called with err being an AbortError if the controller aborts
  });
  controller.abort(); // Stops the child process
}
```

----------------------------------------

TITLE: Chained Compose with Redirect and Retry Interceptors in Undici
DESCRIPTION: Demonstrates how to create a custom Undici Client with chained compose using redirect and retry interceptors. It shows the implementation of custom interceptor functions and their application to the Client instance.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
const { Client, RedirectHandler, RetryHandler } = require('undici')

const redirectInterceptor = dispatch => {
    return (opts, handler) => {
      const { maxRedirections } = opts

      if (!maxRedirections) {
        return dispatch(opts, handler)
      }

      const redirectHandler = new RedirectHandler(
        dispatch,
        maxRedirections,
        opts,
        handler
      )
      opts = { ...opts, maxRedirections: 0 }
      return dispatch(opts, redirectHandler)
    }
}

const retryInterceptor = dispatch => {
  return function retryInterceptor (opts, handler) {
    return dispatch(
      opts,
      new RetryHandler(opts, {
        handler,
        dispatch
      })
    )
  }
}

const client = new Client('http://localhost:3000')
  .compose(redirectInterceptor)
  .compose(retryInterceptor)

await client.request({ path: '/', method: 'GET' })
```

----------------------------------------

TITLE: Creating a WebSocket with Custom Dispatcher in MJS
DESCRIPTION: This example demonstrates creating a WebSocket with a proxy agent dispatcher. It imports WebSocket and ProxyAgent from 'undici', sets up a proxy agent, and establishes a WebSocket connection with specified protocols.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/WebSocket.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import { WebSocket, ProxyAgent } from 'undici'

const proxyAgent = new ProxyAgent('my.proxy.server')

const ws = new WebSocket('wss://echo.websocket.events', {
  dispatcher: proxyAgent,
  protocols: ['echo', 'chat']
})
```

----------------------------------------

TITLE: Resulting Command Execution from npm exec Example (Bash)
DESCRIPTION: Shows the command executed as a result of the `npm exec foo@latest bar --package=@npmcli/foo` example. Because `npm exec` parsed `--package=@npmcli/foo` first, it sets up the environment with that package and then executes `foo@latest bar` within that context.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npx.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ foo@latest bar
```

----------------------------------------

TITLE: Setting Multiple Headers using Headers API in Node.js
DESCRIPTION: Shows how to set multiple headers using the Headers API or Map object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_53

LANGUAGE: javascript
CODE:
```
const headers = new Headers({ foo: 'bar' });
outgoingMessage.setHeaders(headers);
```

----------------------------------------

TITLE: Run Node.js with Permission Model (Disallow Child Process) (Console)
DESCRIPTION: Demonstrates running a Node.js script (`index.js`) with the Permission Model enabled (`--permission`) and allowing all file system reads (`--allow-fs-read=*`). This command is shown in the context of attempting to spawn a child process without the `--allow-child-process` flag, which will result in an `ERR_ACCESS_DENIED` error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_3

LANGUAGE: Console
CODE:
```
node --permission --allow-fs-read=* index.js
```

----------------------------------------

TITLE: Using Once Method for Single Event Handling in Node.js (CommonJS)
DESCRIPTION: This example shows the use of the once() method in Node.js EventEmitter, which registers a listener that is called at most once for a particular event. It uses CommonJS modules to demonstrate the behavior of once().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_11

LANGUAGE: JavaScript
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
let m = 0;
myEmitter.once('event', () => {
  console.log(++m);
});
myEmitter.emit('event');
// Prints: 1
myEmitter.emit('event');
// Ignored
```

----------------------------------------

TITLE: Async Iterable Request Body with Undici
DESCRIPTION: Example showing how to use async iterables as request body with Undici's fetch implementation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { fetch } from 'undici'

const data = {
  async *[Symbol.asyncIterator]() {
    yield 'hello'
    yield 'world'
  },
}

await fetch('https://example.com', { body: data, method: 'POST', duplex: 'half' })
```

----------------------------------------

TITLE: Using assert.strictEqual() in Node.js (CommonJS)
DESCRIPTION: Demonstrates various use cases of assert.strictEqual() in a CommonJS environment to test strict equality between values. Examples include comparing numbers, strings, and custom error messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_49

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert/strict');

assert.strictEqual(1, 2);
// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:
//
// 1 !== 2

assert.strictEqual(1, 1);
// OK

assert.strictEqual('Hello foobar', 'Hello World!');
// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:
// + actual - expected
//
// + 'Hello foobar'
// - 'Hello World!'
//          ^

const apples = 1;
const oranges = 2;
assert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);
// AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2

assert.strictEqual(1, '1', new TypeError('Inputs are not identical'));
// TypeError: Inputs are not identical
```

----------------------------------------

TITLE: Checking for Error Values with assert.ifError (Node.js, ECMAScript Module, JavaScript)
DESCRIPTION: Shows usage of assert.ifError() in ESM to throw AssertionError if the supplied value is not undefined or null. Demonstrates handling of various values: null, 0, string, Error, and error objects with custom stack frames. Dependency: node:assert/strict. Key parameter: value. If value is not null/undefined, AssertionError is thrown with details; otherwise, no error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_26

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

assert.ifError(null);
// OK
assert.ifError(0);
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0
assert.ifError('error');
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'error'
assert.ifError(new Error());
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error

// Create some random error frames.
let err;
(function errorFrame() {
  err = new Error('test error');
})();

(function ifErrorFrame() {
  assert.ifError(err);
})();
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error
//     at ifErrorFrame
//     at errorFrame
```

----------------------------------------

TITLE: Constructing a URL Using Template Literals
DESCRIPTION: Example showing how to construct a URL using JavaScript template literals to combine URL components.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
const pathname = '/a/b/c';
const search = '?d=e';
const hash = '#fgh';
const myURL = new URL(`https://example.org${pathname}${search}${hash}`);
```

----------------------------------------

TITLE: Formatting a POSIX Path using path.format (automatic dot for ext)
DESCRIPTION: Demonstrates that `path.format()` automatically prepends a dot to the `ext` property if it is missing and `base` is not provided.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_24

LANGUAGE: js
CODE:
```
// The dot will be added if it is not specified in `ext`.
path.format({
  root: '/',
  name: 'file',
  ext: 'txt',
});
// Returns: '/file.txt'
```

----------------------------------------

TITLE: Defining Thread-Safe Function JavaScript Callback Signature - N-API - C
DESCRIPTION: Defines a function pointer typedef for callbacks executed on the main thread as a result of thread-safe function calls from secondary threads in N-API. Inputs include environment (may be NULL), a JavaScript callback function (may be NULL), optional context, and thread-created data. The function is responsible for converting input data to JavaScript values and ensuring proper data deallocation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_27

LANGUAGE: c
CODE:
```
typedef void (*napi_threadsafe_function_call_js)(napi_env env,\n                                                 napi_value js_callback,\n                                                 void* context,\n                                                 void* data);
```

----------------------------------------

TITLE: Querying Temporary Directory with Node.js JavaScript
DESCRIPTION: Returns the operating system's default path for temporary files as a string using os.tmpdir(). This function prioritizes certain environment variables based on platform, and is cross-platform consistent (no trailing slash in the result). No arguments are required. The output is a string representing the temp directory path. No external dependencies except Node.js os module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
os.tmpdir()
```

----------------------------------------

TITLE: Connecting through SOCKS Proxy with SocksClient using Event Handlers in TypeScript
DESCRIPTION: This example uses event-driven programming by instantiating SocksClient and registering 'established' and 'error' event handlers to manage connection flow. After a successful connection, it writes an HTTP GET request over the established SOCKS5 socket and processes the server response. Dependencies include the 'socks' package; key parameters are proxy information, target destination, and event callbacks. This pattern is ideal for reacting to connection state changes in real time.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/javascript/connectExample.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const SocksClient = require('socks').SocksClient;

const options  = {
  proxy: {
    ipaddress: '104.131.124.203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api.com', // host names are supported with SOCKS v4a and SOCKS v5.
    port: 80
  },

  command: 'connect'
};

const client = new SocksClient(options);

client.on('established', (info) => {
  console.log(info.socket);
  // <Socket ...>  (this is a raw net.Socket that is established to the destination host through the given proxy servers)

  info.socket.write('GET /json HTTP/1.1\nHost: ip-api.com\n\n');
  info.socket.on('data', (data) => {
    console.log(data.toString()); // ip-api.com sees that the last proxy (104.131.124.203) is connected to it and not the origin client (you).
    /*
      HTTP/1.1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        "as":"AS14061 Digital Ocean, Inc.",
        "city":"Clifton",
        "country":"United States",
        "countryCode":"US",
        "isp":"Digital Ocean",
        "lat":40.8326,
        "lon":-74.1307,
        "org":"Digital Ocean",
        "query":"104.131.124.203",
        "region":"NJ",
        "regionName":"New Jersey",
        "status":"success",
        "timezone":"America/New_York",
        "zip":"07014"
      }
    */
});

// Failed to establish proxy connection to destination.
client.on('error', () => {
  // Handle errors
});
```

----------------------------------------

TITLE: Using assert.rejects() with custom validation function in Node.js (CommonJS)
DESCRIPTION: Demonstrates how to use assert.rejects() with a custom validation function in a CommonJS environment to test asynchronous functions. The validation function checks specific properties of the thrown error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_45

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert/strict');

(async () => {
  await assert.rejects(
    async () => {
      throw new TypeError('Wrong value');
    },
    (err) => {
      assert.strictEqual(err.name, 'TypeError');
      assert.strictEqual(err.message, 'Wrong value');
      return true;
    },
  );
})();
```

----------------------------------------

TITLE: Managing Package Owners with NPM CLI Commands
DESCRIPTION: Basic npm owner command syntax for managing package maintainers. Includes commands to add owners, remove owners, and list current owners of a package. Can be aliased as 'author'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-owner.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm owner add <user> <package-spec>
npm owner rm <user> <package-spec>
npm owner ls <package-spec>

alias: author
```

----------------------------------------

TITLE: Listening for the exit Event in Node.js (CommonJS) - JavaScript
DESCRIPTION: Sets up an 'exit' event listener on the process object using CommonJS syntax to log when the process is exiting. No additional dependencies are required. The listener receives the exit code as a parameter and performs only synchronous logging before process shutdown.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_5

LANGUAGE: cjs
CODE:
```
const process = require('node:process');

process.on('exit', (code) => {
  console.log(`About to exit with code: ${code}`);
});
```

----------------------------------------

TITLE: Circular Data Transfer using MessagePort (CommonJS)
DESCRIPTION: Demonstrates sending circular data references between threads using MessagePort in CommonJS format. Shows how the structured clone algorithm handles circular references.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_9

LANGUAGE: cjs
CODE:
```
'use strict';

const { MessageChannel } = require('node:worker_threads');
const { port1, port2 } = new MessageChannel();

port1.on('message', (message) => console.log(message));

const circularData = {};
circularData.foo = circularData;
// Prints: { foo: [Circular] }
port2.postMessage(circularData);
```

----------------------------------------

TITLE: Running TypeScript Files with tsx
DESCRIPTION: Command to run TypeScript files using the tsx package for full TypeScript support.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/typescript.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npx tsx your-file.ts
```

----------------------------------------

TITLE: Using ReadableStream.getReader() in JavaScript (CommonJS)
DESCRIPTION: This example shows how to use the getReader() method of a ReadableStream to obtain a reader and read data from the stream in CommonJS format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const { ReadableStream } = require('node:stream/web');

const stream = new ReadableStream();

const reader = stream.getReader();

reader.read().then(console.log);
```

----------------------------------------

TITLE: Configuring Subpath Imports in package.json - Node.js - JSON
DESCRIPTION: This snippet illustrates the use of the "imports" field in a Node.js package.json file to define subpath imports. The example maps the internal specifier "#dep" to either a native Node.js dependency ("dep-node-native") or a local polyfill depending on the environment, supporting environment-aware module resolution. Dependencies must be listed in the dependencies field, and all mapped paths must be valid and accessible within the package or its dependencies. The "imports" keys must start with "#" and are only accessible inside the package itself.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_28

LANGUAGE: json
CODE:
```
// package.json\n{\n  "imports": {\n    "#dep": {\n      "node": "dep-node-native",\n      "default": "./dep-polyfill.js"\n    }\n  },\n  "dependencies": {\n    "dep-node-native": "^1.0.0"\n  }\n}
```

----------------------------------------

TITLE: Getting Execution Async ID with fs.open (ES Module Syntax) - JavaScript
DESCRIPTION: This snippet uses fs.open in Node.js ES module format to demonstrate how executionAsyncId returns the ID for both top-level execution and within an asynchronous file operation. It shows the typical change in async IDs between the synchronous context and an I/O callback. Dependencies are node:fs and node:async_hooks (executionAsyncId). Inputs are the execution context; outputs are numeric async IDs printed to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_21

LANGUAGE: mjs
CODE:
```
import { executionAsyncId } from 'node:async_hooks';
import fs from 'node:fs';

console.log(executionAsyncId());  // 1 - bootstrap
const path = '.';
fs.open(path, 'r', (err, fd) => {
  console.log(executionAsyncId());  // 6 - open()
});
```

----------------------------------------

TITLE: Importing and Using X509Certificate in CommonJS (JavaScript)
DESCRIPTION: Example showing how to import the X509Certificate class from the Node.js crypto module using CommonJS syntax, create a new X509Certificate instance from a PEM encoded certificate, and access its subject property.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_45

LANGUAGE: javascript
CODE:
```
const { X509Certificate } = require('node:crypto');

const x509 = new X509Certificate('{... pem encoded cert ...}');

console.log(x509.subject);
```

----------------------------------------

TITLE: Conditionally Reading the Response Body in Undici
DESCRIPTION: Example showing how to conditionally read the response body based on status code. If status code is 200, it returns the body as an ArrayBuffer, otherwise it dumps the body and returns null.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
const { body, statusCode } = await client.request({
  path: '/',
  method: 'GET'
})

if (statusCode === 200) {
  return await body.arrayBuffer()
}

await body.dump()

return null
```

----------------------------------------

TITLE: Using URLSearchParams keys() method in Node.js
DESCRIPTION: Shows how to use the keys() method of URLSearchParams to iterate over the names of each name-value pair in the query string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_40

LANGUAGE: javascript
CODE:
```
const params = new URLSearchParams('foo=bar&foo=baz');
for (const name of params.keys()) {
  console.log(name);
}
// Prints:
//   foo
//   foo
```

----------------------------------------

TITLE: Copying Buffers Node.js JavaScript
DESCRIPTION: Shows how to use `buf.copy()` to copy a specific range of bytes from one Buffer instance to another, starting at a specified offset in the target buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_42

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

// Create two `Buffer` instances.
const buf1 = Buffer.allocUnsafe(26);
const buf2 = Buffer.allocUnsafe(26).fill('!');

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

// Copy `buf1` bytes 16 through 19 into `buf2` starting at byte 8 of `buf2`.
buf1.copy(buf2, 8, 16, 20);
// This is equivalent to:
// buf2.set(buf1.subarray(16, 20), 8);

console.log(buf2.toString('ascii', 0, 25));
// Prints: !!!!!!!!qrst!!!!!!!!!!!!!
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

// Create two `Buffer` instances.
const buf1 = Buffer.allocUnsafe(26);
const buf2 = Buffer.allocUnsafe(26).fill('!');

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

// Copy `buf1` bytes 16 through 19 into `buf2` starting at byte 8 of `buf2`.
buf1.copy(buf2, 8, 16, 20);
// This is equivalent to:
// buf2.set(buf1.subarray(16, 20), 8);

console.log(buf2.toString('ascii', 0, 25));
// Prints: !!!!!!!!qrst!!!!!!!!!!!!!
```

----------------------------------------

TITLE: Defining Asynchronous Completion Callback Signature - N-API - C
DESCRIPTION: Declares a typedef for the completion phase callback used in N-API asynchronous operations, called after the execution phase to handle results or errors. It accepts the N-API environment, a status code, and a pointer to user data. This function is used to interact with JavaScript and should be used for any cleanup or result handling after async execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_26

LANGUAGE: c
CODE:
```
typedef void (*napi_async_complete_callback)(napi_env env,\n                                             napi_status status,\n                                             void* data);
```

----------------------------------------

TITLE: Packing HTTP/2 Settings (ESM) - Node.js
DESCRIPTION: Shows how to use the `http2.getPackedSettings` function in ECMAScript Module (ESM) syntax to serialize an HTTP/2 settings object into a Buffer, which can be used for the `HTTP2-Settings` header field. The example packs settings to disable server push.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_47

LANGUAGE: javascript
CODE:
```
import { getPackedSettings } from 'node:http2';

const packed = getPackedSettings({ enablePush: false });

console.log(packed.toString('base64'));
// Prints: AAIAAAAA
```

----------------------------------------

TITLE: Throwing a RangeError via Invalid Port - Node.js Errors - JavaScript
DESCRIPTION: Illustrates automatic generation of a RangeError when supplying an out-of-range argument to a Node.js API. In this case, passing -1 as a port to net.connect causes immediate validation and error throwing. Requires Node.js core 'net' module; the only input is an invalid port number. Expected output is a RangeError with a message stating the allowed port range.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
require('node:net').connect(-1);
// Throws "RangeError: \"port\" option should be >= 0 and < 65536: -1"

```

----------------------------------------

TITLE: Managing Maximum Listeners for EventEmitter and EventTarget (CommonJS)
DESCRIPTION: CommonJS version of the previous example, showing how to get and set the maximum number of listeners for both EventEmitter and EventTarget instances.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_39

LANGUAGE: JavaScript
CODE:
```
const { getMaxListeners, setMaxListeners, EventEmitter } = require('node:events');

{
  const ee = new EventEmitter();
  console.log(getMaxListeners(ee)); // 10
  setMaxListeners(11, ee);
  console.log(getMaxListeners(ee)); // 11
}
{
  const et = new EventTarget();
  console.log(getMaxListeners(et)); // 10
  setMaxListeners(11, et);
  console.log(getMaxListeners(et)); // 11
}
```

----------------------------------------

TITLE: Testing Regex BOL and Multiline Anchors - JavaScript
DESCRIPTION: These snippets illustrate test cases for JavaScript regular expressions using beginning-of-line (^) anchors, both in standard and multiline modes. The tests use the String.prototype.match() method to evaluate a sample string 's' against various regex patterns. No external dependencies are required. Outputs show assertion results, with expected matches displayed, demonstrating the effect of the multiline flag (m) and grouping on regex evaluation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/regexp-bol-with-multiline-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS s.match(/^abc/) is null
PASS s.match(/^abc/m) is ["abc"]
PASS s.match(/(^|X)abc/) is null
PASS s.match(/(^|X)abc/m) is ["abc",""]
PASS s.match(/(^a|Xa)bc/m) is ["abc","a"]
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Creating custom promisified functions in Node.js (CommonJS)
DESCRIPTION: Shows how to create custom promisified functions using util.promisify.custom symbol in CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_49

LANGUAGE: JavaScript
CODE:
```
const { promisify } = require('node:util');

function doSomething(foo, callback) {
  // ...
}

doSomething[promisify.custom] = (foo) => {
  return getPromiseSomehow();
};

const promisified = promisify(doSomething);
console.log(promisified === doSomething[promisify.custom]);
// prints 'true'
```

----------------------------------------

TITLE: Custom Socket Connector with Validation in Undici
DESCRIPTION: Shows how to implement a custom connector function that performs additional checks on the socket before it's used for requests. This example uses a connector with TLS validation disabled and adds custom validation logic.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Client.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
'use strict'
import { Client, buildConnector } from 'undici'

const connector = buildConnector({ rejectUnauthorized: false })
const client = new Client('https://localhost:3000', {
  connect (opts, cb) {
    connector(opts, (err, socket) => {
      if (err) {
        cb(err)
      } else if (/* assertion */) {
        socket.destroy()
        cb(new Error('kaboom'))
      } else {
        cb(null, socket)
      }
    })
  }
})
```

----------------------------------------

TITLE: Establishing TLS Client Connection (CJS) in Node.js
DESCRIPTION: This CJS code snippet shows how to create a TLS client connection using the CommonJS `require` syntax. It connects to a server on port 8000, mirroring the functionality of the MJS example. It requires `tls` and `fs` modules, sets up connection options (potentially including client key/cert and server CA), initiates the connection with `tls.connect`, handles the 'secureConnect' event via the callback, pipes `process.stdin` to the resulting socket, and logs data and the 'end' event. Assumes a corresponding TLS echo server is running.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
```cjs
// Assumes an echo server that is listening on port 8000.
const { connect } = require('node:tls');
const { readFileSync } = require('node:fs');

const options = {
  // Necessary only if the server requires client certificate authentication.
  key: readFileSync('client-key.pem'),
  cert: readFileSync('client-cert.pem'),

  // Necessary only if the server uses a self-signed certificate.
  ca: [ readFileSync('server-cert.pem') ],

  // Necessary only if the server's cert isn't for "localhost".
  checkServerIdentity: () => { return null; },
};

const socket = connect(8000, options, () => {
  console.log('client connected',
              socket.authorized ? 'authorized' : 'unauthorized');
  process.stdin.pipe(socket);
  process.stdin.resume();
});
socket.setEncoding('utf8');
socket.on('data', (data) => {
  console.log(data);
});
socket.on('end', () => {
  console.log('server ends connection');
});
```
```

----------------------------------------

TITLE: Parsing cookies with getCookies in Undici
DESCRIPTION: Example demonstrating how to use the getCookies function to parse the Cookie header and return a list of attributes and values. It requires Headers from Undici and returns a Record object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Cookies.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { getCookies, Headers } from 'undici'

const headers = new Headers({
  cookie: 'get=cookies; and=attributes'
})

console.log(getCookies(headers)) // { get: 'cookies', and: 'attributes' }
```

----------------------------------------

TITLE: Random Buffer Filling with Node.js Crypto (CommonJS)
DESCRIPTION: Shows how to fill buffers with random data using crypto.randomFill in CommonJS format. Demonstrates filling different buffer types including TypedArrays, DataView, and ArrayBuffer with random cryptographic data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_89

LANGUAGE: javascript
CODE:
```
const { randomFill } = require('node:crypto');
const { Buffer } = require('node:buffer');

const a = new Uint32Array(10);
randomFill(a, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)
    .toString('hex'));
});

const b = new DataView(new ArrayBuffer(10));
randomFill(b, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)
    .toString('hex'));
});

const c = new ArrayBuffer(10);
randomFill(c, (err, buf) => {
  if (err) throw err;
  console.log(Buffer.from(buf).toString('hex'));
});
```

----------------------------------------

TITLE: File Descriptor Management with Callback API
DESCRIPTION: Shows proper file descriptor management using the callback-based fs API, including error handling and cleanup.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_120

LANGUAGE: javascript
CODE:
```
import { open, close, fstat } from 'node:fs';

function closeFd(fd) {
  close(fd, (err) => {
    if (err) throw err;
  });
}

open('/open/some/file.txt', 'r', (err, fd) => {
  if (err) throw err;
  try {
    fstat(fd, (err, stat) => {
      if (err) {
        closeFd(fd);
        throw err;
      }

      // use stat

      closeFd(fd);
    });
  } catch (err) {
    closeFd(fd);
    throw err;
  }
});
```

----------------------------------------

TITLE: Copy and Digest a Rolling Hash - Node.js Crypto (JavaScript CJS)
DESCRIPTION: Demonstrates rolling hash calculation in CommonJS by updating, copying, and digesting a Hash object. Each copy represents the current state, and digest() returns the hex result. Useful for incremental digest needs. Requires Node.js with crypto module. Cannot copy after digest() has been called.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_33

LANGUAGE: JavaScript
CODE:
```
// Calculate a rolling hash.
const {
  createHash,
} = require('node:crypto');

const hash = createHash('sha256');

hash.update('one');
console.log(hash.copy().digest('hex'));

hash.update('two');
console.log(hash.copy().digest('hex'));

hash.update('three');
console.log(hash.copy().digest('hex'));

// Etc.
```

----------------------------------------

TITLE: Adding Include Directories to a GYP Target
DESCRIPTION: Shows how to add include search paths (equivalent to `-I` or `/I` compiler flags) to a GYP target ('existing_target'). The 'include_dirs' key accepts a list of directory paths relative to the GYP file (e.g., '..', 'include'). These paths are added to the compiler's search path during compilation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/UserDocumentation.md#2025-04-23_snippet_10

LANGUAGE: gyp
CODE:
```
  {
    'targets': [
      {
        'target_name': 'existing_target',
        'include_dirs': [
          '..',
          'include',
        ],
      },
    ],
  },
```

----------------------------------------

TITLE: Using scheduler.wait Promise (Node.js Timers - MJS)
DESCRIPTION: Shows usage of the experimental `timersPromises.scheduler.wait` function, which is a promise-based equivalent to `setTimeout` without a fulfillment value. It pauses execution asynchronously for the specified `delay`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_6

LANGUAGE: mjs
CODE:
```
import { scheduler } from 'node:timers/promises';

await scheduler.wait(1000); // Wait one second before continuing
```

----------------------------------------

TITLE: Checking Supported Encoding with isEncoding
DESCRIPTION: Demonstrates the static method `Buffer.isEncoding()` which checks if a given string is a name of a character encoding supported by Node.js Buffers. It returns `true` for valid encoding names like 'utf8' and 'hex', and `false` otherwise.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_36

LANGUAGE: Node.js (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

console.log(Buffer.isEncoding('utf8'));
// Prints: true

console.log(Buffer.isEncoding('hex'));
// Prints: true

console.log(Buffer.isEncoding('utf/8'));
// Prints: false

console.log(Buffer.isEncoding(''));
// Prints: false
```

LANGUAGE: Node.js (CJS)
CODE:
```
const { Buffer } = require('node:buffer');

console.log(Buffer.isEncoding('utf8'));
// Prints: true

console.log(Buffer.isEncoding('hex'));
// Prints: true

console.log(Buffer.isEncoding('utf/8'));
// Prints: false

console.log(Buffer.isEncoding(''));
// Prints: false
```

----------------------------------------

TITLE: AbortSignal with Custom Reason
DESCRIPTION: Demonstrates how to abort a signal with a custom reason that can be accessed through the signal's reason property.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const ac = new AbortController();
ac.abort(new Error('boom!'));
console.log(ac.signal.reason);  // Error: boom!
```

----------------------------------------

TITLE: Importing Assert Module in Strict Mode
DESCRIPTION: Different ways to import and use the assert module in strict assertion mode, which provides more detailed error messages and strict equality comparisons.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import { strict as assert } from 'node:assert';
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert').strict;
```

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');
```

----------------------------------------

TITLE: Heap Profiling with Inspector Session (Promises API)
DESCRIPTION: Demonstrates how to use the Heap Profiler through the inspector session using the Promises API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/inspector.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import { Session } from 'node:inspector/promises';
import fs from 'node:fs';
const session = new Session();

const fd = fs.openSync('profile.heapsnapshot', 'w');

session.connect();

session.on('HeapProfiler.addHeapSnapshotChunk', (m) => {
  fs.writeSync(fd, m.params.chunk);
});

const result = await session.post('HeapProfiler.takeHeapSnapshot', null);
console.log('HeapProfiler.takeHeapSnapshot done:', result);
session.disconnect();
fs.closeSync(fd);
```

----------------------------------------

TITLE: Self-Referencing Package Import Example in ES Modules
DESCRIPTION: Demonstrates how to import from your own package using the package name as reference.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
import { something } from 'a-package'; // Imports "something" from ./index.mjs.
```

----------------------------------------

TITLE: Using getEntriesByName() with PerformanceObserver in ES Modules
DESCRIPTION: Demonstrates how to use the getEntriesByName() method to filter performance entries by name and optionally by type in ES Modules. Shows filtering by name only and by both name and type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
import { performance, PerformanceObserver } from 'node:perf_hooks';

const obs = new PerformanceObserver((perfObserverList, observer) => {
  console.log(perfObserverList.getEntriesByName('meow'));
  /**
   * [
   *   PerformanceEntry {
   *     name: 'meow',
   *     entryType: 'mark',
   *     startTime: 98.545991,
   *     duration: 0,
   *     detail: null
   *   }
   * ]
   */
  console.log(perfObserverList.getEntriesByName('nope')); // []

  console.log(perfObserverList.getEntriesByName('test', 'mark'));
  /**
   * [
   *   PerformanceEntry {
   *     name: 'test',
   *     entryType: 'mark',
   *     startTime: 63.518931,
   *     duration: 0,
   *     detail: null
   *   }
   * ]
   */
  console.log(perfObserverList.getEntriesByName('test', 'measure')); // []

  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ entryTypes: ['mark', 'measure'] });

performance.mark('test');
performance.mark('meow');
```

----------------------------------------

TITLE: Throwing a JavaScript SyntaxError with N-API in C
DESCRIPTION: This function creates and throws a JavaScript `SyntaxError` object. It requires the N-API environment (`env`), an optional error code string (`code`), and the error message string (`msg`). The provided code, if not NULL, is associated with the generated error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_38

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status node_api_throw_syntax_error(napi_env env,
                                                    const char* code,
                                                    const char* msg);
```

----------------------------------------

TITLE: Creating Secure HTTP/2 Server (CJS)
DESCRIPTION: This snippet demonstrates how to create a secure HTTP/2 server using `http2.createSecureServer` in Node.js with CommonJS syntax. It configures the server with TLS certificates, listens for incoming streams, and sends a basic 'Hello World' HTML response. Required dependencies: `node:http2`, `node:fs`. Input: TLS certificate files. Output: An active secure HTTP/2 server listening on port 8443.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_44

LANGUAGE: nodejs
CODE:
```
const http2 = require('node:http2');
const fs = require('node:fs');

const options = {
  key: fs.readFileSync('server-key.pem'),
  cert: fs.readFileSync('server-cert.pem'),
};

// Create a secure HTTP/2 server
const server = http2.createSecureServer(options);

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.end('<h1>Hello World</h1>');
});

server.listen(8443);
```

----------------------------------------

TITLE: Creating Node.js Readable Stream from Async Generator
DESCRIPTION: Example of using Readable.from() to create a readable stream from an async generator function. This includes handling abort signals for cancellation of long-running operations when the stream is closed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_100

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

const ac = new AbortController();
const signal = ac.signal;

async function * generate() {
  yield 'a';
  await someLongRunningFn({ signal });
  yield 'b';
  yield 'c';
}

const readable = Readable.from(generate());
readable.on('close', () => {
  ac.abort();
});

readable.on('data', (chunk) => {
  console.log(chunk);
});
```

----------------------------------------

TITLE: Promise Rejection with Finally Handler
DESCRIPTION: Tests promise rejection handling using finally blocks and catch methods, showing error propagation through the promise chain.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-promise-catch-prediction-expected.txt#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
finallyAndCatchMethod (catch-prediction.js:258:2)
runWithResolution (catch-prediction.js:427:22)
```

----------------------------------------

TITLE: Enabling Node.js Permissions via npx --node-options
DESCRIPTION: Demonstrates how to execute a package using `npx` while enabling the Node.js permission model for the executed package's Node.js process. The `--node-options="--permission"` flag passes the `--permission` argument to the underlying Node.js runtime started by `npx`, setting the `NODE_OPTIONS` environment variable specifically for that spawned process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/permissions.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
npx --node-options="--permission" package-name
```

----------------------------------------

TITLE: Matching Strings with Regular Expressions Using assert.match (Node.js, ECMAScript Module, JavaScript)
DESCRIPTION: Illustrates assert.match() in ESM to verify that a string matches a specified regular expression. Triggers AssertionError for mismatches or non-string input. Dependency: node:assert/strict. Parameters: string, regexp, message. Throws AssertionError with custom or default message, or an Error-derived instance if given; otherwise does nothing on match.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_28

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

assert.match('I will fail', /pass/);
// AssertionError [ERR_ASSERTION]: The input did not match the regular ...

assert.match(123, /pass/);
// AssertionError [ERR_ASSERTION]: The "string" argument must be of type string.

assert.match('I will pass', /pass/);
// OK
```

----------------------------------------

TITLE: Conditional Exports for Subpaths
DESCRIPTION: Demonstrates how conditional exports can be extended to subpaths, allowing different implementations of specific features depending on the environment or import method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_18

LANGUAGE: json
CODE:
```
{
  "exports": {
    ".": "./index.js",
    "./feature.js": {
      "node": "./feature-node.js",
      "default": "./feature.js"
    }
  }
}
```

----------------------------------------

TITLE: Generating Client Certificate File (PKCS12) using OpenSSL
DESCRIPTION: Provides the `openssl pkcs12` command to export the previously generated server certificate (`server-cert.pem`) and private key (`server-key.pem`) into a single PKCS12 file (`client-cert.pem`). This file format is often used for distributing client certificates and keys. In the context of the server example, this generated file might be specified in the `ca` option if the server needs to trust this specific certificate when `requestCert` is enabled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_29

LANGUAGE: bash
CODE:
```
openssl pkcs12 -certpbe AES-256-CBC -export -out client-cert.pem \
  -inkey server-key.pem -in server-cert.pem
```

----------------------------------------

TITLE: Creating a Custom Readable Stream - Node.js
DESCRIPTION: This example shows how to create a custom Readable stream by extending the Readable class. It demonstrates the use of the constructor and the _read method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_81

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

class MyReadable extends Readable {
  constructor(options) {
    // Calls the stream.Readable(options) constructor.
    super(options);
    // ...
  }
}
```

----------------------------------------

TITLE: Node-API Module Initialization Function
DESCRIPTION: Signature for the initialization function of a Node-API module. This function sets up the module's exports and is called when the module is loaded.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_64

LANGUAGE: c
CODE:
```
napi_value Init(napi_env env, napi_value exports);
```

----------------------------------------

TITLE: Defining Basic Finalizer Callback Signature - Node-API - C
DESCRIPTION: Declares a typedef for a function pointer used as a finalizer in Node-API where the user can define a cleanup callback to be notified when the associated JavaScript object is garbage-collected. Dependencies include the correct Node-API environment (node_api_basic_env) and proper handling of finalize_data and finalize_hint for user data and hints. Inputs are the environment, the data to finalize, and an optional hint; the function has no return value. Only Node-API calls accepting node_api_basic_env are safe to invoke within this callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_23

LANGUAGE: c
CODE:
```
typedef void (*node_api_basic_finalize)(node_api_basic_env env,\n                                      void* finalize_data,\n                                      void* finalize_hint);
```

----------------------------------------

TITLE: Customizing Help Option in Commander.js
DESCRIPTION: Shows how to change the default help flags and description or disable the built-in help option.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_31

LANGUAGE: javascript
CODE:
```
program
  .helpOption('-e, --HELP', 'read more information');
```

----------------------------------------

TITLE: Creating Custom Transform Stream with ES6 Class in Node.js
DESCRIPTION: Example of extending the Transform class using ES6 class syntax to create a custom Transform stream implementation. This shows the basic class structure for implementing a Transform stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_95

LANGUAGE: javascript
CODE:
```
const { Transform } = require('node:stream');

class MyTransform extends Transform {
  constructor(options) {
    super(options);
    // ...
  }
}
```

----------------------------------------

TITLE: Importing Commander in CommonJS
DESCRIPTION: Shows how to import Commander in CommonJS modules. This demonstrates the global object approach for quick programs.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
// CommonJS (.cjs)
const { program } = require('commander');
```

----------------------------------------

TITLE: Basic NPM Login Command in Bash
DESCRIPTION: The basic syntax for logging into an npm registry using the npm command line tool. This command prompts for credentials and saves them to the .npmrc file.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-login.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm login
```

----------------------------------------

TITLE: Using getEntries() with PerformanceObserver in CommonJS
DESCRIPTION: Demonstrates how to use the getEntries() method to retrieve all performance entries collected by a PerformanceObserver in CommonJS. Shows the structure of the returned PerformanceEntry objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((perfObserverList, observer) => {
  console.log(perfObserverList.getEntries());
  /**
   * [
   *   PerformanceEntry {
   *     name: 'test',
   *     entryType: 'mark',
   *     startTime: 81.465639,
   *     duration: 0,
   *     detail: null
   *   },
   *   PerformanceEntry {
   *     name: 'meow',
   *     entryType: 'mark',
   *     startTime: 81.860064,
   *     duration: 0,
   *     detail: null
   *   }
   * ]
   */

  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ type: 'mark' });

performance.mark('test');
performance.mark('meow');
```

----------------------------------------

TITLE: Type Tagging Objects with napi_type_tag_object
DESCRIPTION: Associates a type tag pointer with a JavaScript object or external value for type checking. Allows verifying object types using napi_check_object_type_tag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_182

LANGUAGE: c
CODE:
```
napi_status napi_type_tag_object(napi_env env,
                                 napi_value js_object,
                                 const napi_type_tag* type_tag);
```

----------------------------------------

TITLE: Resolving Deferred Promise in Node-API
DESCRIPTION: Function to resolve a JavaScript promise using its associated deferred object. The deferred object is freed on successful completion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_203

LANGUAGE: c
CODE:
```
napi_status napi_resolve_deferred(napi_env env,
                                  napi_deferred deferred,
                                  napi_value resolution);
```

----------------------------------------

TITLE: Local Path Dependencies in package.json
DESCRIPTION: Shows how local path dependencies are normalized and stored in the package.json file. This is useful for local development but should not be used when publishing packages.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_20

LANGUAGE: json
CODE:
```
{
  "name": "baz",
  "dependencies": {
    "bar": "file:../foo/bar"
  }
}
```

----------------------------------------

TITLE: Asynchronous Directory Creation with mkdirp in JavaScript
DESCRIPTION: Demonstrates the asynchronous usage of the `mkdirp` function from the 'mkdirp' module in Node.js. It shows how to import the function using both ES Modules (`import`) and CommonJS (`require`). The example creates a directory path recursively and logs the first directory created upon successful completion of the promise.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cacache/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// hybrid module, import or require() both work
import { mkdirp } from 'mkdirp'
// or:
const { mkdirp } = require('mkdirp')

// return value is a Promise resolving to the first directory created
mkdirp('/tmp/foo/bar/baz').then(made =>
  console.log(`made directories, starting with ${made}`)
)
```

----------------------------------------

TITLE: Handling Incoming HTTP/2 Request Headers (ESM)
DESCRIPTION: Sets up an HTTP/2 server using `createServer` from `node:http2`. It listens for the 'stream' event, which provides the `stream` object and the incoming `headers` object. The example logs specific header values. The incoming headers object has a `null` prototype.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_50

LANGUAGE: javascript
CODE:
```
import { createServer } from 'node:http2';
const server = createServer();
server.on('stream', (stream, headers) => {
  console.log(headers[':path']);
  console.log(headers.ABC);
});
```

----------------------------------------

TITLE: Handling Server Stream Event - Node.js HTTP/2 - CJS
DESCRIPTION: Shows a fundamental example of an `Http2Server` handling streams in CommonJS. It sets up a listener for the `'stream'` event, processes basic request headers (method, path), constructs and sends an HTTP/2 response header block with status 200 and content type, writes body data, and terminates the stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_38

LANGUAGE: Node.js - CJS
CODE:
```
const http2 = require('node:http2');
const {
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_STATUS,
  HTTP2_HEADER_CONTENT_TYPE,
} = http2.constants;

const server = http2.createServer();
server.on('stream', (stream, headers, flags) => {
  const method = headers[HTTP2_HEADER_METHOD];
  const path = headers[HTTP2_HEADER_PATH];
  // ...
  stream.respond({
    [HTTP2_HEADER_STATUS]: 200,
    [HTTP2_HEADER_CONTENT_TYPE]: 'text/plain; charset=utf-8',
  });
  stream.write('hello ');
  stream.end('world');
});
```

----------------------------------------

TITLE: Initializing readlinePromises.Interface using CommonJS in Node.js
DESCRIPTION: Shows how to create an instance of `readlinePromises.Interface` using CommonJS (`require`) syntax. It requires `createInterface` from `node:readline/promises`. An options object specifying the `input` (e.g., `process.stdin`) and `output` (e.g., `process.stdout`) streams is passed to `createInterface`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_19

LANGUAGE: cjs
CODE:
```
const { createInterface } = require('node:readline/promises');
const rl = createInterface({
  input: process.stdin,
  output: process.stdout,
});
```

----------------------------------------

TITLE: Triggering Assertion Failures with assert.fail (Node.js, CommonJS, JavaScript)
DESCRIPTION: Shows how to use assert.fail() in CommonJS (cjs) style in Node.js to programmatically fail with custom messages, operators, and errors. It mimics the ESM version but uses require() syntax. Dependency: node:assert/strict. Accepts parameters actual, expected, message, operator, and stackStartFn, with thrown error dependent on provided arguments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_23

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert/strict');

assert.fail('a', 'b');
// AssertionError [ERR_ASSERTION]: 'a' != 'b'

assert.fail(1, 2, undefined, '>');
// AssertionError [ERR_ASSERTION]: 1 > 2

assert.fail(1, 2, 'fail');
// AssertionError [ERR_ASSERTION]: fail

assert.fail(1, 2, 'whoops', '>');
// AssertionError [ERR_ASSERTION]: whoops

assert.fail(1, 2, new TypeError('need array'));
// TypeError: need array
```

----------------------------------------

TITLE: Mocked Request with Dynamic Response Data in Undici
DESCRIPTION: Demonstrates how to use callback functions to create dynamic responses based on the incoming request. This example shows how to access and use request headers to customize the mock response.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/echo',
  method: 'GET',
  headers: {
    'User-Agent': 'undici',
    Host: 'example.com'
  }
}).reply(200, ({ headers }) => ({ message: headers.get('message') }))

const { statusCode, body, headers } = await request('http://localhost:3000', {
  headers: {
    message: 'hello world!'
  }
})

console.log('response received', statusCode) // response received 200
console.log('headers', headers) // { 'content-type': 'application/json' }

for await (const data of body) {
  console.log('data', data.toString('utf8')) // { "message":"hello world!" }
}
```

----------------------------------------

TITLE: Marking a Test as Skipped | Node.js Test Runner | JavaScript
DESCRIPTION: This snippet shows how to call `t.skip('message')` within a test function to mark the test as skipped in the test runner output. An optional message can be provided to indicate the reason for skipping. Calling `skip()` does not stop execution, so a `return` might be necessary depending on the test logic.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_75

LANGUAGE: javascript
CODE:
```
test('top level test', (t) => {
  // Make sure to return here as well if the test contains additional logic.
  t.skip('this is skipped');
});
```

----------------------------------------

TITLE: OpenSSL Key and Certificate Generation Commands
DESCRIPTION: Series of OpenSSL commands for generating private keys, CSRs, certificates, and PFX files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
openssl genrsa -out ryans-key.pem 2048
```

LANGUAGE: bash
CODE:
```
openssl req -new -sha256 -key ryans-key.pem -out ryans-csr.pem
```

LANGUAGE: bash
CODE:
```
openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem
```

LANGUAGE: bash
CODE:
```
openssl pkcs12 -export -in ryans-cert.pem -inkey ryans-key.pem \
      -certfile ca-cert.pem -out ryans.pfx
```

----------------------------------------

TITLE: Generating PFX Certificate for HTTPS Server
DESCRIPTION: This bash command generates a PFX certificate from an existing private key and certificate for use with an HTTPS server.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
openssl pkcs12 -certpbe AES-256-CBC -export -out test_cert.pfx \
  -inkey private-key.pem -in certificate.pem -passout pass:sample
```

----------------------------------------

TITLE: Writing Files with fs.writeFile in Node.js
DESCRIPTION: Demonstrates using fs.writeFile to asynchronously write data to a file using a Uint8Array buffer. Shows basic error handling and confirmation logging.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_79

LANGUAGE: javascript
CODE:
```
import { writeFile } from 'node:fs';
import { Buffer } from 'node:buffer';

const data = new Uint8Array(Buffer.from('Hello Node.js'));
writeFile('message.txt', data, (err) => {
  if (err) throw err;
  console.log('The file has been saved!');
});
```

----------------------------------------

TITLE: Event Listener Order with prependListener()
DESCRIPTION: Shows how prependListener() affects event listener execution order compared to on(), with examples in both ES modules and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
import { EventEmitter } from 'node:events';
const myEE = new EventEmitter();
myEE.on('foo', () => console.log('a'));
myEE.prependListener('foo', () => console.log('b'));
myEE.emit('foo');
// Prints:
//   b
//   a
```

LANGUAGE: javascript
CODE:
```
const EventEmitter = require('node:events');
const myEE = new EventEmitter();
myEE.on('foo', () => console.log('a'));
myEE.prependListener('foo', () => console.log('b'));
myEE.emit('foo');
// Prints:
//   b
//   a
```

----------------------------------------

TITLE: Importing WebAssembly Instance as Module (JavaScript)
DESCRIPTION: Shows how to import a `.wasm` file directly into a JavaScript ES module. This imports the instantiated WebAssembly module, making its exports available via the imported namespace object (`M`). Requires the `--experimental-wasm-modules` flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import * as M from './library.wasm';
console.log(M);
```

----------------------------------------

TITLE: Creating a Read Stream from a FileHandle
DESCRIPTION: Shows how to create a read stream from a FileHandle object and handle potential issues with blocking reads.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { open } from 'node:fs/promises';

const fd = await open('/dev/input/event0');
// Create a stream from some character device.
const stream = fd.createReadStream();
setTimeout(() => {
  stream.close(); // This may not close the stream.
  // Artificially marking end-of-stream, as if the underlying resource had
  // indicated end-of-file by itself, allows the stream to close.
  // This does not cancel pending read operations, and if there is such an
  // operation, the process may still not be able to exit successfully
  // until it finishes.
  stream.push(null);
  stream.read(0);
}, 100);
```

----------------------------------------

TITLE: Synchronizing a Branch with Upstream and Force Pushing - Bash
DESCRIPTION: This snippet details the process for fetching the latest changes from the original upstream repository, rebasing the contributor's branch on top of it, and force-pushing the result to the remote fork. The commands are: 'git fetch upstream HEAD' to retrieve the latest upstream changes, 'git rebase FETCH_HEAD' to replay local commits on top, and 'git push --force-with-lease origin my-branch' to update the remote branch. This is used when rebasing is necessary due to conflicts or when keeping the branch up-to-date. Caution is advised with force-pushing, as it rewrites history and may affect collaborators' ability to review changes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
git fetch upstream HEAD
git rebase FETCH_HEAD
git push --force-with-lease origin my-branch
```

----------------------------------------

TITLE: Defining npm Scripts for Version Lifecycle in package.json
DESCRIPTION: Illustrates how to set up preversion, version, and postversion scripts in package.json to automate tasks during the versioning process.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-version.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "preversion": "npm test",
    "version": "npm run build && git add -A dist",
    "postversion": "git push && git push --tags && rm -rf build/temp"
  }
}
```

----------------------------------------

TITLE: Binding a UDP Socket in Node.js
DESCRIPTION: Demonstrates how to bind a UDP socket to a specific address and port using the socket.bind() method. The example shows binding to localhost on port 8000 with exclusive access.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
socket.bind({
  address: 'localhost',
  port: 8000,
  exclusive: true,
});
```

----------------------------------------

TITLE: Barebones binding.gyp Configuration - Python-like JSON
DESCRIPTION: Presents a minimal 'binding.gyp' file in JSON-like syntax required for node-gyp to build a Node.js addon. This file must be placed in the project root. The 'targets' array defines build targets; here, a single target named 'binding' is linked to the specified source file. Required by node-gyp for generating build configurations; users should adjust target names and sources as needed. No comments or trailing commas allowed.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/README.md#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
{
  "targets": [
    {
      "target_name": "binding",
      "sources": [ "src/binding.cc" ]
    }
  ]
}
```

----------------------------------------

TITLE: Measuring TCP Connection Time in ESM Format
DESCRIPTION: This example demonstrates how to measure TCP connection performance using the PerformanceObserver API in ESM format. It creates a TCP server, attempts to connect to it, and logs the performance metrics for the connection process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_26

LANGUAGE: javascript
CODE:
```
import { PerformanceObserver } from 'node:perf_hooks';
import { connect, createServer } from 'node:net';

const obs = new PerformanceObserver((items) => {
  items.getEntries().forEach((item) => {
    console.log(item);
  });
});
obs.observe({ entryTypes: ['net'] });
const PORT = 8080;
createServer((socket) => {
  socket.destroy();
}).listen(PORT, () => {
  connect(PORT);
});
```

----------------------------------------

TITLE: Using Trace Events with CommonJS
DESCRIPTION: Shows how to use trace_events module with CommonJS to enable and disable tracing for specific categories.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tracing.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const { createTracing } = require('node:trace_events');
const tracing = createTracing({ categories: ['node.perf'] });
tracing.enable();  // Enable trace event capture for the 'node.perf' category

// do work

tracing.disable();  // Disable trace event capture for the 'node.perf' category
```

----------------------------------------

TITLE: Using req.abort() for HTTP Client Requests
DESCRIPTION: Adds req.abort() method to abort client-side HTTP requests. This allows cancelling an in-progress request.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_ARCHIVE.md#2025-04-23_snippet_9

LANGUAGE: JavaScript
CODE:
```
const http = require('http');

const req = http.get('http://example.com', (res) => {
  // Handle response
});

// Abort the request
req.abort();
```

----------------------------------------

TITLE: Implementing Variadic Arguments in Commander.js
DESCRIPTION: Demonstrates how to use variadic arguments (allowing multiple values) for the last parameter of a command. Shows implementation of a directory removal command that accepts multiple directory paths.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
program
  .version('0.1.0')
  .command('rmdir')
  .argument('<dirs...>')
  .action(function (dirs) {
    dirs.forEach((dir) => {
      console.log('rmdir %s', dir);
    });
  });
```

----------------------------------------

TITLE: Getting System Error Map with util.getSystemErrorMap (JS)
DESCRIPTION: Illustrates how to use `util.getSystemErrorMap` to obtain a Map containing all available system error codes and their corresponding string names. The example then uses this map within an `fs.access` callback to find the error name associated with `err.errno`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_13

LANGUAGE: js
CODE:
```
fs.access('file/that/does/not/exist', (err) => {
  const errorMap = util.getSystemErrorMap();
  const name = errorMap.get(err.errno);
  console.error(name);  // ENOENT
});
```

----------------------------------------

TITLE: Testing Array Reduction in JavaScript
DESCRIPTION: This snippet demonstrates basic usage of the reduce() method on arrays, both with and without an initial value. It tests summing array elements using reduce().
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-reduce-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
[0,1,2,3].reduce(function(a,b){ return a + b; })
```

LANGUAGE: JavaScript
CODE:
```
[0,1,2,3].reduce(function(a,b){ return a + b; }, 4)
```

----------------------------------------

TITLE: Extracting File Extension using path.extname (Multiple Dots)
DESCRIPTION: Shows `path.extname()` returning only the last extension ('.md') when multiple dots are present in the filename.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_16

LANGUAGE: js
CODE:
```
path.extname('index.coffee.md');
// Returns: '.md'
```

----------------------------------------

TITLE: Package Dependencies Configuration Example
DESCRIPTION: Shows an example package.json dependencies configuration that corresponds to the outdated command output, demonstrating various dependency specification formats.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-outdated.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
  "glob": "^5.0.15",
  "nothingness": "github:othiym23/nothingness#master",
  "npm": "^3.5.1",
  "once": "^1.3.1"
}
```

----------------------------------------

TITLE: Handling Server Stream Event - Node.js HTTP/2 - MJS
DESCRIPTION: Provides a basic example of how an `Http2Server` handles incoming streams. It listens for the `'stream'` event, extracts request headers (method, path), sends a simple 200 OK response with a text content type, writes data to the stream, and then ends it.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_37

LANGUAGE: Node.js - MJS
CODE:
```
import { createServer, constants } from 'node:http2';
const {
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_STATUS,
  HTTP2_HEADER_CONTENT_TYPE,
} = constants;

const server = createServer();
server.on('stream', (stream, headers, flags) => {
  const method = headers[HTTP2_HEADER_METHOD];
  const path = headers[HTTP2_HEADER_PATH];
  // ...
  stream.respond({
    [HTTP2_HEADER_STATUS]: 200,
    [HTTP2_HEADER_CONTENT_TYPE]: 'text/plain; charset=utf-8',
  });
  stream.write('hello ');
  stream.end('world');
});
```

----------------------------------------

TITLE: Defining an AfterEach Hook in Node.js Test Runner
DESCRIPTION: Demonstrates defining an `afterEach` hook within a test suite (`describe`) using the Node.js `node:test` module. This hook function runs after each individual test or nested suite within its parent suite has finished, even if the test failed, useful for cleaning up resources after each test. Requires importing functions from `node:test`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_40

LANGUAGE: JavaScript
CODE:
```
describe('tests', async () => {
  afterEach(() => console.log('finished running a test'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
```

----------------------------------------

TITLE: Registering afterEach Hook - Node.js Test - js
DESCRIPTION: Illustrates how to use `t.afterEach` to register a function that will run after each subtest within the current test. The hook function receives the subtest's context and is useful for cleanup or logging after subtest execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_64

LANGUAGE: js
CODE:
```
test('top level test', async (t) => {
  t.afterEach((t) => t.diagnostic(`finished running ${t.name}`));
  t.test('This is a subtest', (t) => {
    assert.ok('some relevant assertion here');
  });
});
```

----------------------------------------

TITLE: Broadcasting Messages to All Workers in Node.js Cluster (CommonJS)
DESCRIPTION: CommonJS version showing how to send a message to all worker processes from the primary process using the cluster.workers object, which contains references to all active workers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
const cluster = require('node:cluster');

for (const worker of Object.values(cluster.workers)) {
  worker.send('big announcement to all workers');
}
```

----------------------------------------

TITLE: Getting JavaScript Boolean Singleton in Node-API
DESCRIPTION: Function to retrieve JavaScript boolean singleton object for a given C boolean value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_123

LANGUAGE: c
CODE:
```
napi_status napi_get_boolean(napi_env env, bool value, napi_value* result)
```

----------------------------------------

TITLE: Iterating Over Map Entries in JavaScript
DESCRIPTION: This snippet creates a Map, gets its entries iterator, advances it once with next(), and returns the iterator. It shows how to work with Map entry iterators.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
it = new Map([['a', {b: 2}]]).entries(); it.next(); it
```

----------------------------------------

TITLE: Removing an HTTP Response Header in Node.js (JavaScript)
DESCRIPTION: Illustrates the removal of headers set for transmission using removeHeader on the http.ServerResponse object. Takes a header name (case-insensitive) and removes it from the list of to-be-sent headers. It does not affect headers that have already been transmitted to the client.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_35

LANGUAGE: js
CODE:
```
response.removeHeader('Content-Encoding');

```

----------------------------------------

TITLE: Destroying Dispatcher Examples
DESCRIPTION: Shows different ways to destroy a dispatcher with and without error handling and callbacks.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
dispatcher.destroy() // -> Promise
dispatcher.destroy(new Error()) // -> Promise
dispatcher.destroy(() => {}) // -> void
dispatcher.destroy(new Error(), () => {}) // -> void
```

----------------------------------------

TITLE: Binding EventEmitter Listeners with AsyncResource (CJS)
DESCRIPTION: Demonstrates using `AsyncResource.bind()` with an EventEmitter (an `http.IncomingMessage` 'close' event) in a CommonJS context. The listener wrapped by `AsyncResource.bind()` will execute with the async context active when `req.on()` was called, unlike the standard listener which runs with the context active when the event was emitted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_17

LANGUAGE: cjs
CODE:
```
const { createServer } = require('node:http');
const { AsyncResource, executionAsyncId } = require('node:async_hooks');

const server = createServer((req, res) => {
  req.on('close', AsyncResource.bind(() => {
    // Execution context is bound to the current outer scope.
  }));
  req.on('close', () => {
    // Execution context is bound to the scope that caused 'close' to emit.
  });
  res.end();
}).listen(3000);
```

----------------------------------------

TITLE: Checking for Absolute Paths on Windows
DESCRIPTION: Shows examples of `path.isAbsolute()` determining if various paths are absolute on Windows systems. Paths starting with drive letters (C:/), UNC paths (//server or \\server) are absolute.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_29

LANGUAGE: js
CODE:
```
path.isAbsolute('//server');    // true
path.isAbsolute('\\\\server');  // true
path.isAbsolute('C:/foo/..');   // true
path.isAbsolute('C:\\foo\\..'); // true
path.isAbsolute('bar\\baz');    // false
path.isAbsolute('bar/baz');     // false
path.isAbsolute('.');           // false
```

----------------------------------------

TITLE: Unwrapping Encrypted Keys with subtle.unwrapKey in Node.js
DESCRIPTION: The unwrapKey method decrypts a wrapped (encrypted) key and creates a CryptoKey object from it. It's equivalent to decrypting the key data first and then importing it. The method supports various wrapping algorithms and returns a Promise that resolves with a CryptoKey if successful.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
subtle.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages)
```

----------------------------------------

TITLE: Handling Worker Disconnect Event in Node.js Cluster
DESCRIPTION: Shows how to listen for the 'disconnect' event on the `cluster` object in the primary process. This event is emitted when a worker's IPC channel disconnects, either through graceful shutdown, manual disconnection, or being killed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_10

LANGUAGE: js
CODE:
```
cluster.on('disconnect', (worker) => {
  console.log(`The worker #${worker.id} has disconnected`);
});
```

----------------------------------------

TITLE: Demonstrating Node.js Exit Code for Unresolved Top-Level Await (JavaScript)
DESCRIPTION: This snippet spawns a Node.js process executing a short script with a top-level await on a promise that never resolves. It captures and logs the exit code, illustrating that Node.js terminates with status `13` in such cases.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
import { execPath } from 'node:process';

spawn(execPath, [
  '--input-type=module',
  '--eval',
  // Never-resolving Promise:
  'await new Promise(() => {})',
]).once('exit', (code) => {
  console.log(code); // Logs `13`
});
```

----------------------------------------

TITLE: Checking Own Property Existence on an Object in C using Node-API
DESCRIPTION: This function checks if an object has a specific own property. It takes the environment, the object to query, the property key, and a pointer to store the result. The key must be a string or symbol. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_154

LANGUAGE: c
CODE:
```
napi_status napi_has_own_property(napi_env env,
                                  napi_value object,
                                  napi_value key,
                                  bool* result);
```

----------------------------------------

TITLE: Installing Aliased NPM Packages
DESCRIPTION: Examples of installing packages under custom aliases for side-by-side versions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm install my-react@npm:react
npm install jquery2@npm:jquery@2
npm install jquery3@npm:jquery@3
npm install npa@npm:npm-package-arg
```

----------------------------------------

TITLE: Retrieving Headers using getHeaders - Node.js HTTP/2 JavaScript
DESCRIPTION: Demonstrates how to use the `response.getHeaders()` method to retrieve a shallow copy of the current outgoing response headers. Header names are returned in lowercase, and array values are preserved. This method returns a special object that does not inherit from `Object.prototype`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_63

LANGUAGE: javascript
CODE:
```
response.setHeader('Foo', 'bar');
response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headers = response.getHeaders();
// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }
```

----------------------------------------

TITLE: Marking HTTP/2 Headers as Sensitive (JavaScript)
DESCRIPTION: Illustrates adding the `[http2.sensitiveHeaders]` property to a headers object. The value is an array containing the names of headers that should not be indexed by the HPACK compression algorithm, protecting sensitive information like cookies.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_52

LANGUAGE: javascript
CODE:
```
const headers = {
  ':status': '200',
  'content-type': 'text-plain',
  'cookie': 'some-cookie',
  'other-sensitive-header': 'very secret data',
  [http2.sensitiveHeaders]: ['cookie', 'other-sensitive-header'],
};

stream.respond(headers);
```

----------------------------------------

TITLE: Importing and Using X509Certificate in ES Modules (JavaScript)
DESCRIPTION: Example showing how to import the X509Certificate class from the Node.js crypto module using ES Modules syntax, create a new X509Certificate instance from a PEM encoded certificate, and access its subject property.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_44

LANGUAGE: javascript
CODE:
```
const { X509Certificate } = await import('node:crypto');

const x509 = new X509Certificate('{... pem encoded cert ...}');

console.log(x509.subject);
```

----------------------------------------

TITLE: Extending Source Files in node-gyp for Addons (JSON)
DESCRIPTION: This code modifies the 'sources' field of a binding.gyp JSON configuration to include multiple C++ source files, such as 'addon.cc' and 'myexample.cc'. This allows you to build an addon from more than one C++ source file using node-gyp. No other configuration changes are necessary unless additional build requirements exist.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
\"sources\": [\"addon.cc\", \"myexample.cc\"]\n
```

----------------------------------------

TITLE: Connecting as a QUIC Client Session in Node.js JavaScript
DESCRIPTION: This example showcases establishing a QUIC client connection using the Node.js 'quic.connect' API with ESM syntax. It demonstrates importing 'connect' from 'node:quic', preparing a TextEncoder, setting an ALPN identifier, and opening a unidirectional stream to the server. Required dependencies include the experimental QUIC module and the Buffer API. The primary parameters are the target address and client ALPN settings; outputs are a connected client session and a new stream sending encoded data. The usage of 'await' necessitates an async context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/quic.md#2025-04-23_snippet_2

LANGUAGE: mjs
CODE:
```
import { connect } from 'node:quic';
import { Buffer } from 'node:buffer';

const enc = new TextEncoder();
const alpn = 'foo';
const client = await connect('123.123.123.123:8888', { alpn });
await client.createUnidirectionalStream({
  body: enc.encode('hello world'),
});
```

----------------------------------------

TITLE: Establishing SOCKS Connection using createConnection with Callbacks in TypeScript
DESCRIPTION: Illustrates using `SocksClient.createConnection` with a callback function as the second parameter in TypeScript. It establishes a SOCKS connection to 'ip-api.com:80' via a SOCKS5 proxy. The callback handles potential errors or, upon success, sends an HTTP GET request and logs the response. Requires the 'socks' library. Note: Mixing callbacks and Promises is discouraged.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/typescript/connectExample.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    ipaddress: '104.131.124.203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api.com', // host names are supported with SOCKS v4a and SOCKS v5.
    port: 80
  },

  command: 'connect'
};

SocksClient.createConnection(options, (err, info) => {
  if (err) {
    // handle errors
  } else {
    console.log(info.socket);
    // <Socket ...>  (this is a raw net.Socket that is established to the destination host through the given proxy servers)

    info.socket.write('GET /json HTTP/1.1\nHost: ip-api.com\n\n');
    info.socket.on('data', (data) => {
      console.log(data.toString()); // ip-api.com sees that the last proxy (104.131.124.203) is connected to it and not the origin client (you).
      /*
        HTTP/1.1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          "as":"AS14061 Digital Ocean, Inc.",
          "city":"Clifton",
          "country":"United States",
          "countryCode":"US",
          "isp":"Digital Ocean",
          "lat":40.8326,
          "lon":-74.1307,
          "org":"Digital Ocean",
          "query":"104.131.124.203",
          "region":"NJ",
          "regionName":"New Jersey",
          "status":"success",
          "timezone":"America/New_York",
          "zip":"07014"
        }
      */
    });
  }
})
```

----------------------------------------

TITLE: Installing Undici via NPM
DESCRIPTION: Command to install the Undici package using npm package manager.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm i undici
```

----------------------------------------

TITLE: Illustrating Package Alias Examples in Markdown
DESCRIPTION: This snippet provides examples of package aliases, showing how to reference packages with alternative names, specific versions, or tags.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/package-spec.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
* `semver:@npm:@npmcli/semver-with-patch`
* `semver:@npm:semver@7.2.2`
* `semver:@npm:semver@legacy`
```

----------------------------------------

TITLE: Creating Object Mode Duplex Transform Stream in Node.js
DESCRIPTION: Example of creating a Transform stream with writableObjectMode enabled that converts JavaScript numbers to hexadecimal strings. The transform method processes number inputs and outputs ASCII hexadecimal representations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_94

LANGUAGE: javascript
CODE:
```
const { Transform } = require('node:stream');

// All Transform streams are also Duplex Streams.
const myTransform = new Transform({
  writableObjectMode: true,

  transform(chunk, encoding, callback) {
    // Coerce the chunk to a number if necessary.
    chunk |= 0;

    // Transform the chunk into something else.
    const data = chunk.toString(16);

    // Push the data onto the readable queue.
    callback(null, '0'.repeat(data.length % 2) + data);
  },
});

myTransform.setEncoding('ascii');
myTransform.on('data', (chunk) => console.log(chunk));

myTransform.write(1);
// Prints: 01
myTransform.write(10);
// Prints: 0a
myTransform.write(100);
// Prints: 64
```

----------------------------------------

TITLE: Marking a Test as TODO | Node.js Test Runner | JavaScript
DESCRIPTION: This code demonstrates using `t.todo('message')` within a test function to mark it as a TODO test in the test runner output. An optional message can be included to provide context for the TODO item. Like `skip()`, this call does not terminate the test function execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_76

LANGUAGE: javascript
CODE:
```
test('top level test', (t) => {
  // This test is marked as `TODO`
  t.todo('this is a todo');
});
```

----------------------------------------

TITLE: Configuring Node.js Engine Version Requirements
DESCRIPTION: Specifies the compatible Node.js version range for the package. Uses semver syntax to define version constraints.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_33

LANGUAGE: json
CODE:
```
{
  "engines": {
    "node": ">=0.10.3 <15"
  }
}
```

----------------------------------------

TITLE: Using util.aborted with CommonJS in Node.js
DESCRIPTION: Shows how to use the util.aborted function to handle abort events on a custom abortable resource using CommonJS module syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_57

LANGUAGE: javascript
CODE:
```
const { aborted } = require('node:util');

// Obtain an object with an abortable signal, like a custom resource or operation.
const dependent = obtainSomethingAbortable();

// Pass `dependent` as the resource, indicating the promise should only resolve
// if `dependent` is still in memory when the signal is aborted.
aborted(dependent.signal, dependent).then(() => {

  // This code runs when `dependent` is aborted.
  console.log('Dependent resource was aborted.');
});

// Simulate an event that triggers the abort.
dependent.on('event', () => {
  dependent.abort(); // This will cause the `aborted` promise to resolve.
});
```

----------------------------------------

TITLE: Using sourceMap Option with util.getCallSites (TS)
DESCRIPTION: Illustrates calling `util.getCallSites` with the `sourceMap` option set to `true` in a TypeScript file. This option attempts to reconstruct original source locations from source maps. The comments indicate the potential differences in output line/column numbers when source maps are successfully used.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_10

LANGUAGE: ts
CODE:
```
import { getCallSites } from 'node:util';

interface Foo {
  foo: string;
}

const callSites = getCallSites({ sourceMap: true });

// With sourceMap:
// Function Name: ''
// Script Name: example.js
// Line Number: 7
// Column Number: 26

// Without sourceMap:
// Function Name: ''
// Script Name: example.js
// Line Number: 2
// Column Number: 26
```

----------------------------------------

TITLE: Implementing C++ Object Methods for Node.js Addon
DESCRIPTION: This implementation file defines the methods of the MyObject class, including initialization, constructor, and the 'plusOne' method exposed to JavaScript.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_23

LANGUAGE: cpp
CODE:
```
#include "myobject.h"

namespace demo {

using v8::Context;
using v8::Function;
using v8::FunctionCallbackInfo;
using v8::FunctionTemplate;
using v8::Isolate;
using v8::Local;
using v8::Number;
using v8::Object;
using v8::ObjectTemplate;
using v8::String;
using v8::Value;

MyObject::MyObject(double value) : value_(value) {
}

MyObject::~MyObject() {
}

void MyObject::Init(Local<Object> exports) {
  Isolate* isolate = exports->GetIsolate();
  Local<Context> context = isolate->GetCurrentContext();

  Local<ObjectTemplate> addon_data_tpl = ObjectTemplate::New(isolate);
  addon_data_tpl->SetInternalFieldCount(1);
  Local<Object> addon_data =
      addon_data_tpl->NewInstance(context).ToLocalChecked();

  Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New, addon_data);
  tpl->SetClassName(String::NewFromUtf8(isolate, "MyObject").ToLocalChecked());
  tpl->InstanceTemplate()->SetInternalFieldCount(1);

  NODE_SET_PROTOTYPE_METHOD(tpl, "plusOne", PlusOne);

  Local<Function> constructor = tpl->GetFunction(context).ToLocalChecked();
  addon_data->SetInternalField(0, constructor);
  exports->Set(context, String::NewFromUtf8(
      isolate, "MyObject").ToLocalChecked(),
      constructor).FromJust();
}

void MyObject::New(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = args.GetIsolate();
  Local<Context> context = isolate->GetCurrentContext();

  if (args.IsConstructCall()) {
    double value = args[0]->IsUndefined() ?
        0 : args[0]->NumberValue(context).FromMaybe(0);
    MyObject* obj = new MyObject(value);
    obj->Wrap(args.This());
    args.GetReturnValue().Set(args.This());
  } else {
    const int argc = 1;
    Local<Value> argv[argc] = { args[0] };
    Local<Function> cons =
        args.Data().As<Object>()->GetInternalField(0)
            .As<Value>().As<Function>();
    Local<Object> result =
        cons->NewInstance(context, argc, argv).ToLocalChecked();
    args.GetReturnValue().Set(result);
  }
}

void MyObject::PlusOne(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = args.GetIsolate();

  MyObject* obj = ObjectWrap::Unwrap<MyObject>(args.This());
  obj->value_ += 1;

  args.GetReturnValue().Set(Number::New(isolate, obj->value_));
}

}  // namespace demo
```

----------------------------------------

TITLE: Filtering Workspaces for npm exec in Bash
DESCRIPTION: Demonstrates how to run commands in specific workspaces using the --workspace flag with a workspace name or directory path.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm exec --workspace=a -- eslint ./*.js
```

----------------------------------------

TITLE: Testing Captured Local Variables in Node.js Closures
DESCRIPTION: This snippet creates a closure that captures a local variable 'x' from the outer scope. It then defines a new local variable 'y' within the closure and sets a debugger breakpoint to examine both variables.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-in-module-expected.txt#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
let x = 5;
(function() { let y = x; debugger; })()
```

----------------------------------------

TITLE: Reading Data from a Readable Stream in Node.js
DESCRIPTION: This snippet demonstrates how to read data from a Readable stream using the 'readable' and 'end' events. It uses a while loop to continuously read chunks of data until the stream ends.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_33

LANGUAGE: javascript
CODE:
```
const readable = getReadableStreamSomehow();

// 'readable' may be triggered multiple times as data is buffered in
readable.on('readable', () => {
  let chunk;
  console.log('Stream is readable (new data received in buffer)');
  // Use a loop to make sure we read all currently available data
  while (null !== (chunk = readable.read())) {
    console.log(`Read ${chunk.length} bytes of data...`);
  }
});

// 'end' will be triggered once when there is no more data available
readable.on('end', () => {
  console.log('Reached end of stream.');
});
```

----------------------------------------

TITLE: Creating Async Work in Node-API (C)
DESCRIPTION: Creates an async work item that can be scheduled for execution in a worker thread. This function sets up the async operation with execute and complete callbacks, allowing native code to perform work without blocking the main event loop.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_188

LANGUAGE: c
CODE:
```
napi_status napi_create_async_work(napi_env env,
                                   napi_value async_resource,
                                   napi_value async_resource_name,
                                   napi_async_execute_callback execute,
                                   napi_async_complete_callback complete,
                                   void* data,
                                   napi_async_work* result);
```

----------------------------------------

TITLE: Generating RSA Key Pair Synchronously with CommonJS
DESCRIPTION: Example of generating an RSA key pair synchronously using CommonJS require. Returns the key pair immediately using the same configuration as previous examples.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_68

LANGUAGE: javascript
CODE:
```
const {
  generateKeyPairSync,
} = require('node:crypto');

const {
  publicKey,
  privateKey,
} = generateKeyPairSync('rsa', {
  modulusLength: 4096,
  publicKeyEncoding: {
    type: 'spki',
    format: 'pem',
  },
  privateKeyEncoding: {
    type: 'pkcs8',
    format: 'pem',
    cipher: 'aes-256-cbc',
    passphrase: 'top secret',
  },
});
```

----------------------------------------

TITLE: Registering after Hook - Node.js Test - js
DESCRIPTION: Shows how to use `t.after` to register a function that will run after the current test finishes. This hook receives the test context and is typically used for teardown or final logging.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_63

LANGUAGE: js
CODE:
```
test('top level test', async (t) => {
  t.after((t) => t.diagnostic(`finished running ${t.name}`));
  assert.ok('some relevant assertion here');
});
```

----------------------------------------

TITLE: Creating Basic Benchmark with Buffer Allocation (JavaScript)
DESCRIPTION: Shows a standard Node.js benchmark structure using `common.createBenchmark`. It defines benchmark parameters (`n`, `type`, `size`) and process options (`flags`), initializes the benchmark runner, and provides a `main` function. The `main` function executes a loop allocating buffers and uses `bench.start()` and `bench.end()` to time the operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-and-running-benchmarks.md#_snippet_23

LANGUAGE: javascript
CODE:
```
'use strict';
const common = require('../common.js');
const { Buffer } = require('node:buffer');

const configs = {
  // Number of operations, specified here so they show up in the report.
  // Most benchmarks just use one value for all runs.
  n: [1024],
  type: ['fast', 'slow'],  // Custom configurations
  size: [16, 128, 1024],  // Custom configurations
};

const options = {
  // Add --expose-internals in order to require internal modules in main
  flags: ['--zero-fill-buffers'],
};

// `main` and `configs` are required, `options` is optional.
const bench = common.createBenchmark(main, configs, options);

// Any code outside main will be run twice,
// in different processes, with different command line arguments.

function main(conf) {
  // Only flags that have been passed to createBenchmark
  // earlier when main is run will be in effect.
  // In order to benchmark the internal modules, require them here. For example:
  // const URL = require('internal/url').URL

  // Start the timer
  bench.start();

  // Do operations here

  for (let i = 0; i < conf.n; i++) {
    conf.type === 'fast' ?
      Buffer.allocUnsafe(conf.size) :
      Buffer.allocUnsafeSlow(conf.size);
  }

  // End the timer, pass in the number of operations
  bench.end(conf.n);
}
```

----------------------------------------

TITLE: Using the Debugger Statement in Node.js
DESCRIPTION: A simple debugger statement that serves as a breakpoint. When this statement is encountered during execution, the JavaScript debugger will pause at this point, allowing developers to inspect the current state.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/caught-exception-from-framework-inside-async-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
debugger;
```

----------------------------------------

TITLE: Renaming Files or Directories Synchronously in Node.js
DESCRIPTION: Uses fs.renameSync to rename a file or directory. Returns undefined.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_94

LANGUAGE: JavaScript
CODE:
```
fs.renameSync(oldPath, newPath)
```

----------------------------------------

TITLE: Asynchronous Event Handling in Node.js (ESM)
DESCRIPTION: This snippet demonstrates how to handle events asynchronously in Node.js using ECMAScript modules. It uses setImmediate() to switch to an asynchronous mode of operation within the event listener.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', (a, b) => {
  setImmediate(() => {
    console.log('this happens asynchronously');
  });
});
myEmitter.emit('event', 'a', 'b');
```

----------------------------------------

TITLE: Using Decipheriv with Piped Streams in CommonJS
DESCRIPTION: Example showing how to decrypt a file using Decipheriv with piped streams in CommonJS. It performs the same file decryption operation as the ESM example but with require syntax for imports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_15

LANGUAGE: JavaScript
CODE:
```
const {
  createReadStream,
  createWriteStream,
} = require('node:fs');
const {
  scryptSync,
  createDecipheriv,
} = require('node:crypto');
const { Buffer } = require('node:buffer');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';
// Use the async `crypto.scrypt()` instead.
const key = scryptSync(password, 'salt', 24);
// The IV is usually passed along with the ciphertext.
const iv = Buffer.alloc(16, 0); // Initialization vector.

const decipher = createDecipheriv(algorithm, key, iv);

const input = createReadStream('test.enc');
const output = createWriteStream('test.js');

input.pipe(decipher).pipe(output);
```

----------------------------------------

TITLE: Initializing and Using Arborist Nodes for Dependency Queries - JavaScript
DESCRIPTION: Illustrates the programmatic instantiation and querying of dependency trees using the Arborist Node API in Node.js. It shows how to require the Arborist package, instantiate it, and use the loadActual() and querySelectorAll() methods to retrieve dependencies matching specific selector patterns. Requires '@npmcli/arborist' as a dependency, and expects input selectors as strings; outputs results as Node lists or arrays, with asynchronous usage employing promises or async/await.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/dependency-selectors.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
const Arborist = require('@npmcli/arborist')\nconst arb = new Arborist({})
```

LANGUAGE: JavaScript
CODE:
```
// root-level\narb.loadActual().then(async (tree) => {\n  // query all production dependencies\n  const results = await tree.querySelectorAll('.prod')\n  console.log(results)\n})
```

LANGUAGE: JavaScript
CODE:
```
// iterative\narb.loadActual().then(async (tree) => {\n  // query for the deduped version of react\n  const results = await tree.querySelectorAll('#react:not(:deduped)')\n  // query the deduped react for git deps\n  const deps = await results[0].querySelectorAll(':type(git)')\n  console.log(deps)\n})
```

----------------------------------------

TITLE: Reading File Range with createReadStream in Node.js
DESCRIPTION: Example demonstrating how to read a specific byte range from a file using createReadStream. Shows reading the last 10 bytes of a 100-byte file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_54

LANGUAGE: javascript
CODE:
```
import { createReadStream } from 'node:fs';

createReadStream('sample.txt', { start: 90, end: 99 });
```

----------------------------------------

TITLE: Retrieving Event Listeners in Node.js (ES Modules)
DESCRIPTION: Demonstrates the use of getEventListeners() function to retrieve listeners for both EventEmitter and EventTarget instances. This is useful for debugging and diagnostic purposes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_36

LANGUAGE: JavaScript
CODE:
```
import { getEventListeners, EventEmitter } from 'node:events';

{
  const ee = new EventEmitter();
  const listener = () => console.log('Events are fun');
  ee.on('foo', listener);
  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]
}
{
  const et = new EventTarget();
  const listener = () => console.log('Events are fun');
  et.addEventListener('foo', listener);
  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]
}
```

----------------------------------------

TITLE: Versioning and Publishing an npm Package using Bash
DESCRIPTION: Illustrates the `npm version` command (e.g., `npm version patch`) used to bump the package version, run pre-version scripts (like `coverage` and `lint`), create a Git commit and tag, publish the package to npm, and push the changes and tags to the origin repository.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmteam/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
# Example
$ npm version patch
# 1. Runs `coverage` and `lint` scripts
# 2. Bumps package version; and **create commit/tag**
# 3. Runs `npm publish`; publishing directory with **unpushed commit**
# 4. Runs `git push origin --follow-tags`
```

----------------------------------------

TITLE: Using Decipheriv with Piped Streams in ESM
DESCRIPTION: Example showing how to decrypt a file using Decipheriv with piped streams in ES modules. It reads from an encrypted file, decrypts the content, and writes to a new file using the Node.js filesystem streams API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_14

LANGUAGE: JavaScript
CODE:
```
import {
  createReadStream,
  createWriteStream,
} from 'node:fs';
import { Buffer } from 'node:buffer';
const {
  scryptSync,
  createDecipheriv,
} = await import('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';
// Use the async `crypto.scrypt()` instead.
const key = scryptSync(password, 'salt', 24);
// The IV is usually passed along with the ciphertext.
const iv = Buffer.alloc(16, 0); // Initialization vector.

const decipher = createDecipheriv(algorithm, key, iv);

const input = createReadStream('test.enc');
const output = createWriteStream('test.js');

input.pipe(decipher).pipe(output);
```

----------------------------------------

TITLE: Setting Default Reply Headers in Mocked HTTP Requests
DESCRIPTION: This example demonstrates how to configure default reply headers for mocked HTTP responses using Undici's MockAgent. It shows how to chain the defaultReplyHeaders method with the reply method to customize response headers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/foo',
  method: 'GET'
}).defaultReplyHeaders({ foo: 'bar' })
  .reply(200, 'foo')

const { headers } = await request('http://localhost:3000/foo')

console.log('headers', headers) // headers { foo: 'bar' }
```

----------------------------------------

TITLE: Writing Multiple Buffers with FileHandle.writev (Scatter/Gather) in Node.js
DESCRIPTION: Asynchronously writes an array of Buffer, TypedArray, or DataView objects (`buffers`) to the file associated with the FileHandle (scatter/gather I/O). Allows specifying an optional file `position` (defaults to current position if null). Returns a Promise fulfilling with an object `{ bytesWritten, buffers }`. Unsafe for concurrent calls. Positional writes may not work in append mode on Linux.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_19



----------------------------------------

TITLE: Defining Abseil Time Zone Library (absl::time_zone) using Bazel/CMake
DESCRIPTION: Defines the Abseil C++ time zone library (`absl::time_zone`). It includes CCTZ headers (`time_zone.h`, `zone_info_source.h`) and numerous internal source files responsible for handling time zone logic, including fixed zones, formatting, interfaces, implementation details, zone info parsing (tzfile), libc integration, and POSIX rules. Dependencies include system threads (`Threads::Threads`) and platform-specific linking for CoreFoundation on Apple platforms. Uses default Abseil compiler options (`${ABSL_DEFAULT_COPTS}`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/time/CMakeLists.txt#2025-04-23_snippet_2

LANGUAGE: bazel
CODE:
```
absl_cc_library(
  NAME
    time_zone
  HDRS
    "internal/cctz/include/cctz/time_zone.h"
    "internal/cctz/include/cctz/zone_info_source.h"
  SRCS
    "internal/cctz/src/time_zone_fixed.cc"
    "internal/cctz/src/time_zone_fixed.h"
    "internal/cctz/src/time_zone_format.cc"
    "internal/cctz/src/time_zone_if.cc"
    "internal/cctz/src/time_zone_if.h"
    "internal/cctz/src/time_zone_impl.cc"
    "internal/cctz/src/time_zone_impl.h"
    "internal/cctz/src/time_zone_info.cc"
    "internal/cctz/src/time_zone_info.h"
    "internal/cctz/src/time_zone_libc.cc"
    "internal/cctz/src/time_zone_libc.h"
    "internal/cctz/src/time_zone_lookup.cc"
    "internal/cctz/src/time_zone_posix.cc"
    "internal/cctz/src/time_zone_posix.h"
    "internal/cctz/src/tzfile.h"
    "internal/cctz/src/zone_info_source.cc"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    Threads::Threads
    # TODO(#1495): Use $<LINK_LIBRARY:FRAMEWORK,CoreFoundation> once our
    # minimum CMake version >= 3.24
    $<$<PLATFORM_ID:Darwin,iOS,tvOS,visionOS,watchOS>:-Wl,-framework,CoreFoundation>
)
```

----------------------------------------

TITLE: Generating Test Coverage Report using LCOV Reporter - Bash
DESCRIPTION: Executes Node.js tests with experimental coverage enabled and directs the coverage results to the `lcov` reporter, outputting an `lcov.info` file. This reporter provides detailed coverage data but does not report test results directly and is best used alongside another reporter.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_20

LANGUAGE: bash
CODE:
```
node --test --experimental-test-coverage --test-reporter=lcov --test-reporter-destination=lcov.info
```

----------------------------------------

TITLE: URLPattern.exec() Method Example in JavaScript
DESCRIPTION: Demonstrates the URLPattern.exec() method that returns an object with detailed information about how a URL matches a pattern, including the matched groups and inputs.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_33

LANGUAGE: javascript
CODE:
```
const myPattern = new URLPattern('https://nodejs.org/docs/latest/api/*.html');
console.log(myPattern.exec('https://nodejs.org/docs/latest/api/dns.html'));
// Prints:
// {
//  "hash": { "groups": {  "0": "" },  "input": "" },
//  "hostname": { "groups": {}, "input": "nodejs.org" },
//  "inputs": [
//    "https://nodejs.org/docs/latest/api/dns.html"
//  ],
//  "password": { "groups": { "0": "" }, "input": "" },
//  "pathname": { "groups": { "0": "dns" }, "input": "/docs/latest/api/dns.html" },
//  "port": { "groups": {}, "input": "" },
//  "protocol": { "groups": {}, "input": "https" },
//  "search": { "groups": { "0": "" }, "input": "" },
//  "username": { "groups": { "0": "" }, "input": "" }
// }
```

----------------------------------------

TITLE: Resolving IPv4 Addresses and Performing Reverse DNS Lookup (ESM)
DESCRIPTION: This code snippet demonstrates how to use dns.resolve4() to get IPv4 addresses for a domain and then perform reverse DNS lookups on those addresses using dns.reverse(). It uses ECMAScript modules (ESM) syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
import dns from 'node:dns';

dns.resolve4('archive.org', (err, addresses) => {
  if (err) throw err;

  console.log(`addresses: ${JSON.stringify(addresses)}`);

  addresses.forEach((a) => {
    dns.reverse(a, (err, hostnames) => {
      if (err) {
        throw err;
      }
      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);
    });
  });
});
```

----------------------------------------

TITLE: Defining JavaScript TypedArray Types - Node-API - C
DESCRIPTION: Defines an enumeration that represents the different underlying scalar datatypes for JavaScript TypedArrays, as described in ECMAScript Section 22.2. This enum allows native code to work generically with various TypedArray buffer types, providing compatibility with ECMAScript's standard typed array types including integer and floating point values (with clamped and BigInt variants as well). No dependencies outside of the core Node-API C header files are required; intended for use when interacting with typed datasets between C and JavaScript.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_73

LANGUAGE: c
CODE:
```
typedef enum {
  napi_int8_array,
  napi_uint8_array,
  napi_uint8_clamped_array,
  napi_int16_array,
  napi_uint16_array,
  napi_int32_array,
  napi_uint32_array,
  napi_float32_array,
  napi_float64_array,
  napi_bigint64_array,
  napi_biguint64_array,
} napi_typedarray_type;
```

----------------------------------------

TITLE: Observing HTTP/2 Performance Metrics (ES Modules) in Node.js
DESCRIPTION: This snippet demonstrates how to use the `PerformanceObserver` API to collect performance data for HTTP/2 sessions and streams using ES module syntax (`import`). It sets up an observer to listen for entries with `entryType` 'http2' and logs the type of the observed entry.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_73

LANGUAGE: mjs
CODE:
```
import { PerformanceObserver } from 'node:perf_hooks';

const obs = new PerformanceObserver((items) => {
  const entry = items.getEntries()[0];
  console.log(entry.entryType);  // prints 'http2'
  if (entry.name === 'Http2Session') {
    // Entry contains statistics about the Http2Session
  } else if (entry.name === 'Http2Stream') {
    // Entry contains statistics about the Http2Stream
  }
});
obs.observe({ entryTypes: ['http2'] });
```

----------------------------------------

TITLE: Parsing Arguments in Commander.js
DESCRIPTION: Shows different ways to parse arguments using the parse() method, including auto-detecting electron and parsing user-provided arguments.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_35

LANGUAGE: javascript
CODE:
```
program.parse(process.argv); // Explicit, node conventions
program.parse(); // Implicit, and auto-detect electron
program.parse(['-f', 'filename'], { from: 'user' });
```

----------------------------------------

TITLE: Reading Variable-Length UIntLE from Buffer - Node.js
DESCRIPTION: Demonstrates reading a variable-length unsigned, little-endian integer (up to 48 bits) from a Buffer using `readUIntLE`. It shows reading 6 bytes from a buffer created with hex values and converting the output to a hex string, highlighting the little-endian byte order.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_70

LANGUAGE: JavaScript (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readUIntLE(0, 6).toString(16));
// Prints: ab9078563412
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readUIntLE(0, 6).toString(16));
// Prints: ab9078563412
```

----------------------------------------

TITLE: Mocked Request Using Reply Options Callback in Undici
DESCRIPTION: Shows how to use a callback function to dynamically control all aspects of a response including status code and data. This provides more flexibility than the standard reply method by allowing custom status codes based on request properties.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/echo',
  method: 'GET',
  headers: {
    'User-Agent': 'undici',
    Host: 'example.com'
  }
}).reply(({ headers }) => ({ statusCode: 200, data: { message: headers.get('message') }}))

const { statusCode, body, headers } = await request('http://localhost:3000', {
  headers: {
    message: 'hello world!'
  }
})

console.log('response received', statusCode) // response received 200
console.log('headers', headers) // { 'content-type': 'application/json' }

for await (const data of body) {
  console.log('data', data.toString('utf8')) // { "message":"hello world!" }
}
```

----------------------------------------

TITLE: Promise-based Question Interface
DESCRIPTION: Demonstrates using the promise-based question method to get user input. Shows basic usage and handling with async/await syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
const answer = await rl.question('What is your favorite food? ');
console.log(`Oh, so your favorite food is ${answer}`);
```

----------------------------------------

TITLE: Creating a New Team in npm Organization
DESCRIPTION: Command to create a new team within an npm organization.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/orgs.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm team create <org:team>
```

----------------------------------------

TITLE: Managing CMake Build Variable Scoping and Macros for Feature Checks - CMake
DESCRIPTION: This section saves original CMake variables for definitions, libraries, and extra headers to local variables, modifies them for feature and symbol checks, and establishes a macro (CARES_EXTRAINCLUDE_IFSET) for conditional inclusion of system headers. It ensures the environment can be reverted post-detection, preventing unintended side effects for parent/including projects, and iteratively applies feature header checks via the macro.
SOURCE: https://github.com/nodejs/node/blob/main/deps/cares/CMakeLists.txt#2025-04-23_snippet_7

LANGUAGE: CMake
CODE:
```
# When checking for symbols, we need to make sure we set the proper
# headers, libraries, and definitions for the detection to work properly
# CMAKE_REQUIRED_DEFINITIONS, CMAKE_REQUIRED_LIBRARIES, and
# CMAKE_EXTRA_INCLUDE_FILES.  When we're done with the detection, we'll
# restore them to their original values (otherwise a parent project
# that tries to set these won't be maintained, see Issue #729)
SET (ORIG_CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEEFINITIONS})
SET (ORIG_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
SET (ORIG_CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES})

SET (CMAKE_REQUIRED_DEFINITIONS ${SYSFLAGS})
LIST (APPEND CMAKE_REQUIRED_LIBRARIES ${CARES_DEPENDENT_LIBS})

MACRO (CARES_EXTRAINCLUDE_IFSET var include)
	IF (${var})
		LIST (APPEND CMAKE_EXTRA_INCLUDE_FILES ${include})
	ENDIF ()
ENDMACRO ()

CARES_EXTRAINCLUDE_IFSET (HAVE_AVAILABILITYMACROS_H AvailabilityMacros.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_STDBOOL_H      stdbool.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_TYPES_H    sys/types.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_ARPA_INET_H    arpa/inet.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_ARPA_NAMESER_H arpa/nameser.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_NETDB_H        netdb.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_NET_IF_H       net/if.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_IFADDRS_H      ifaddrs.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_NETINET_IN_H   netinet/in.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_NETINET6_IN6_H netinet6/in6.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_NETINET_TCP_H  netinet/tcp.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SIGNAL_H       signal.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_STDLIB_H       stdlib.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_STRING_H       string.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_STRINGS_H      strings.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_IOCTL_H    sys/ioctl.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_RANDOM_H   sys/random.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_SELECT_H   sys/select.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_SOCKET_H   sys/socket.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_SOCKIO_H	sys/sockio.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_TIME_H     sys/time.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_STAT_H     sys/stat.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_UIO_H      sys/uio.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_EVENT_H    sys/event.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_EPOLL_H    sys/epoll.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_TIME_H         time.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_POLL_H         poll.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_FCNTL_H        fcntl.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_UNISTD_H       unistd.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_WINSOCK2_H     winsock2.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_WS2TCPIP_H     ws2tcpip.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_IPHLPAPI_H     iphlpapi.h)
CARES_EXTRAINCLUDE_IFSET (HAVE_WINDOWS_H      windows.h)
```

----------------------------------------

TITLE: Importing Readline Callback/Sync API using ES Modules in Node.js
DESCRIPTION: Demonstrates how to import the callback and synchronous APIs of the `node:readline` module using ES Module `import` syntax. This provides access to the event-driven and non-promise-based functions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_2

LANGUAGE: mjs
CODE:
```
import * as readline from 'node:readline';
```

----------------------------------------

TITLE: Listing npm Organization Users in JSON Format
DESCRIPTION: Shows how to list all users in an npm organization in JSON format using the --json flag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-org.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
$ npm org ls my-org --json
```

----------------------------------------

TITLE: Sending UDP Packets from a Connected Socket (CommonJS) - JavaScript
DESCRIPTION: Provides an example of sending a UDP packet after connecting a socket to a destination using Node.js 'dgram' in CommonJS. The connected state allows 'send' to omit the port/address. Steps: create socket, connect, send Buffer, handle callbacks, close socket. Dependencies: 'dgram', 'buffer'. Inputs: message, port, address. Output: message delivery via connected UDP socket.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_11

LANGUAGE: JavaScript
CODE:
```
const dgram = require('node:dgram');\nconst { Buffer } = require('node:buffer');\n\nconst message = Buffer.from('Some bytes');\nconst client = dgram.createSocket('udp4');\nclient.connect(41234, 'localhost', (err) => {\n  client.send(message, (err) => {\n    client.close();\n  });\n});
```

----------------------------------------

TITLE: Defining Wasm Module with External Debug Info (639d13c6)
DESCRIPTION: This snippet shows the raw hexadecimal representation of a WebAssembly module identified by 'wasm://wasm/639d13c6', captured across two sessions. It defines a function signature, declares a function type index, exports a 'main' function (index 1), and defines the body for function 0 (a 'nop' function named 'nopFunction') and function 1 ('main'). It includes custom sections '.debug_info' and 'external_debug_info' potentially containing debugging metadata, and a 'name' section mapping function indices to names ('nopFunction', 'main'). The module has no imports.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-scripts-expected.txt#2025-04-23_snippet_7

LANGUAGE: wasm
CODE:
```
Raw: 00 61 73 6d 01 00 00 00 01 07 02 60 00 00 60 00 00 03 03 02 00 01 07 08 01 04 6d 61 69 6e 00 01 0a 0e 02 03 00 01 0b 08 00 02 40 41 02 1a 0b 0b 00 18 13 65 78 74 65 72 6e 61 6c 5f 64 65 62 75 67 5f 69 6e 66 6f 03 61 62 63 00 11 0b 2e 64 65 62 75 67 5f 69 6e 66 6f 01 02 03 04 05 00 1b 04 6e 61 6d 65 01 14 02 00 0b 6e 6f 70 46 75 6e 63 74 69 6f 6e 01 04 6d 61 69 6e
```

----------------------------------------

TITLE: Importing Built-in Test Reporters (ESM)
DESCRIPTION: Demonstrates how to import the standard Node.js `node:test` reporters (tap, spec, dot, junit, lcov) using ECMAScript Modules syntax for use in Node.js applications.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_28

LANGUAGE: mjs
CODE:
```
import { tap, spec, dot, junit, lcov } from 'node:test/reporters';
```

----------------------------------------

TITLE: Evaluating Boolean Expression with If Statement - JavaScript
DESCRIPTION: This snippet tests a complex boolean expression as the condition for an `if` statement. It verifies that the correct branch (`return true;` or `return false;`) is executed based on the truthiness or falsiness of the expression, demonstrating control flow driven by boolean logic.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-expected.txt#_snippet_9

LANGUAGE: javascript
CODE:
```
if (("a"==letterA) || 1) return true; return false;
```

----------------------------------------

TITLE: Handling WebSocket Upgrade Requests with Undici Client and Node.js HTTP Server
DESCRIPTION: This example demonstrates how to dispatch a WebSocket upgrade request using Undici Client. It creates an HTTP server that listens for upgrade events and implements a basic WebSocket handshake, then uses Undici to initiate the connection upgrade.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.end()
}).listen()

await once(server, 'listening')

server.on('upgrade', (request, socket, head) => {
  console.log('Node.js Server - upgrade event')
  socket.write('HTTP/1.1 101 Web Socket Protocol Handshake\r\n')
  socket.write('Upgrade: WebSocket\r\n')
  socket.write('Connection: Upgrade\r\n')
  socket.write('\r\n')
  socket.end()
})

const client = new Client(`http://localhost:${server.address().port}`)

client.dispatch({
  path: '/',
  method: 'GET',
  upgrade: 'websocket'
}, {
  onConnect: () => {
    console.log('Undici Client - onConnect')
  },
  onError: (error) => {
    console.log('onError') // shouldn't print
  },
  onUpgrade: (statusCode, headers, socket) => {
    console.log('Undici Client - onUpgrade')
    console.log(`onUpgrade Headers: ${headers}`)
    socket.on('data', buffer => {
      console.log(buffer.toString('utf8'))
    })
    socket.on('end', () => {
      client.close()
      server.close()
    })
    socket.end()
  }
})
```

----------------------------------------

TITLE: Parsing Environment Variable Strings using util.parseEnv in JavaScript
DESCRIPTION: Shows how to parse a string containing environment variable assignments (e.g., 'KEY=value') into an object using the `util.parseEnv()` function from the 'node:util' module. This is useful for processing environment variable data from sources other than `.env` files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
require('node:util').parseEnv('HELLO=world')
```

----------------------------------------

TITLE: AbortSignal Event Handling Example
DESCRIPTION: Shows how to handle abort events using both the onabort property and EventTarget API. Demonstrates proper event listener cleanup using the once option.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const ac = new AbortController();

// Use either the onabort property...
ac.signal.onabort = () => console.log('aborted!');

// Or the EventTarget API...
ac.signal.addEventListener('abort', (event) => {
  console.log(event.type);  // Prints 'abort'
}, { once: true });

ac.abort();
```

----------------------------------------

TITLE: Using byteOffset for TypedArray View
DESCRIPTION: Illustrates how to use the `buf.byteOffset` and `buf.length` properties when creating a `TypedArray` view that shares memory with a Buffer. This is necessary because the Buffer's memory might not start at byte offset 0 within its underlying `ArrayBuffer`, particularly for pooled Buffers smaller than `Buffer.poolSize`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_39

LANGUAGE: Node.js (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

// Create a buffer smaller than `Buffer.poolSize`.
const nodeBuffer = Buffer.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);

// When casting the Node.js Buffer to an Int8Array, use the byteOffset
// to refer only to the part of `nodeBuffer.buffer` that contains the memory
// for `nodeBuffer`.
new Int8Array(nodeBuffer.buffer, nodeBuffer.byteOffset, nodeBuffer.length);
```

LANGUAGE: Node.js (CJS)
CODE:
```
const { Buffer } = require('node:buffer');

// Create a buffer smaller than `Buffer.poolSize`.
const nodeBuffer = Buffer.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);

// When casting the Node.js Buffer to an Int8Array, use the byteOffset
// to refer only to the part of `nodeBuffer.buffer` that contains the memory
// for `nodeBuffer`.
new Int8Array(nodeBuffer.buffer, nodeBuffer.byteOffset, nodeBuffer.length);
```

----------------------------------------

TITLE: Adding Environment Cleanup Hooks in C++ Node.js Addon
DESCRIPTION: Demonstrates how to use AddEnvironmentCleanupHook to register cleanup functions that run before a Node.js instance shuts down. This is crucial for supporting Worker threads and cleaning up resources.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_5

LANGUAGE: cpp
CODE:
```
// addon.cc
#include <node.h>
#include <assert.h>
#include <stdlib.h>

using node::AddEnvironmentCleanupHook;
using v8::HandleScope;
using v8::Isolate;
using v8::Local;
using v8::Object;

// Note: In a real-world application, do not rely on static/global data.
static char cookie[] = "yum yum";
static int cleanup_cb1_called = 0;
static int cleanup_cb2_called = 0;

static void cleanup_cb1(void* arg) {
  Isolate* isolate = static_cast<Isolate*>(arg);
  HandleScope scope(isolate);
  Local<Object> obj = Object::New(isolate);
  assert(!obj.IsEmpty());  // assert VM is still alive
  assert(obj->IsObject());
  cleanup_cb1_called++;
}

static void cleanup_cb2(void* arg) {
  assert(arg == static_cast<void*>(cookie));
  cleanup_cb2_called++;
}

static void sanity_check(void*) {
  assert(cleanup_cb1_called == 1);
  assert(cleanup_cb2_called == 1);
}

// Initialize this addon to be context-aware.
NODE_MODULE_INIT(/* exports, module, context */) {
  Isolate* isolate = context->GetIsolate();

  AddEnvironmentCleanupHook(isolate, sanity_check, nullptr);
  AddEnvironmentCleanupHook(isolate, cleanup_cb2, cookie);
  AddEnvironmentCleanupHook(isolate, cleanup_cb1, isolate);
}
```

----------------------------------------

TITLE: Mocking HTTP Requests with Error Responses in Undici
DESCRIPTION: This example shows how to use MockAgent to simulate failed HTTP requests by returning custom errors. It demonstrates the replyWithError method to throw a specific error when the mocked endpoint is called.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/foo',
  method: 'GET'
}).replyWithError(new Error('kaboom'))

try {
  await request('http://localhost:3000/foo', {
    method: 'GET'
  })
} catch (error) {
  console.error(error) // Error: kaboom
}
```

----------------------------------------

TITLE: Conditional Package Overrides for Child Dependencies
DESCRIPTION: Shows how to override a package only when it appears as a child of another specific package. This allows targeted fixes for specific dependency paths.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_29

LANGUAGE: json
CODE:
```
{
  "overrides": {
    "@npm/bar": {
      "@npm/foo": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: Connecting through SOCKS Proxy with SocksClient using Promises in TypeScript
DESCRIPTION: This snippet illustrates the use of SocksClient.createConnection with Promise chaining to establish a SOCKS5 proxy connection in Node.js TypeScript. After connecting, it sends a simple HTTP GET request via the proxy and handles the response asynchronously. Dependencies include the 'socks' package and Node.js; input parameters specify the proxy, destination, and command; the response is received via a data event on the socket.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/javascript/connectExample.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const SocksClient = require('socks').SocksClient;

const options  = {
  proxy: {
    ipaddress: '104.131.124.203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api.com', // host names are supported with SOCKS v4a and SOCKS v5.
    port: 80
  },

  command: 'connect'
};

SocksClient.createConnection(options)
.then(info => {
  console.log(info.socket);
  // <Socket ...>  (this is a raw net.Socket that is established to the destination host through the given proxy servers)

  info.socket.write('GET /json HTTP/1.1\nHost: ip-api.com\n\n');
  info.socket.on('data', (data) => {
    console.log(data.toString()); // ip-api.com sees that the last proxy (104.131.124.203) is connected to it and not the origin client (you).
    /*
      HTTP/1.1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        "as":"AS14061 Digital Ocean, Inc.",
        "city":"Clifton",
        "country":"United States",
        "countryCode":"US",
        "isp":"Digital Ocean",
        "lat":40.8326,
        "lon":-74.1307,
        "org":"Digital Ocean",
        "query":"104.131.124.203",
        "region":"NJ",
        "regionName":"New Jersey",
        "status":"success",
        "timezone":"America/New_York",
        "zip":"07014"
      }
    */
})
.catch(err => {
  // handle errors
});
```

----------------------------------------

TITLE: Defining Abseil synchronization Library (bazel)
DESCRIPTION: Defines the main public Abseil C++ synchronization library named `synchronization`. It lists numerous header and source files implementing synchronization primitives like Mutex, Barrier, Notification, etc., along with internal helpers. It uses default compiler options and depends on various internal and external Abseil modules (`graphcycles_internal`, `kernel_timeout_internal`, `base`, `time`, etc.) and system threads (`Threads::Threads`). The `PUBLIC` keyword indicates it's intended for public consumption.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/synchronization/CMakeLists.txt#2025-04-23_snippet_3

LANGUAGE: bazel
CODE:
```
absl_cc_library(
  NAME
    synchronization
  HDRS
    "barrier.h"
    "blocking_counter.h"
    "internal/create_thread_identity.h"
    "internal/futex.h"
    "internal/futex_waiter.h"
    "internal/per_thread_sem.h"
    "internal/pthread_waiter.h"
    "internal/sem_waiter.h"
    "internal/stdcpp_waiter.h"
    "internal/waiter.h"
    "internal/waiter_base.h"
    "internal/win32_waiter.h"
    "mutex.h"
    "notification.h"
  SRCS
    "barrier.cc"
    "blocking_counter.cc"
    "internal/create_thread_identity.cc"
    "internal/futex_waiter.cc"
    "internal/per_thread_sem.cc"
    "internal/pthread_waiter.cc"
    "internal/sem_waiter.cc"
    "internal/stdcpp_waiter.cc"
    "internal/waiter_base.cc"
    "internal/win32_waiter.cc"
    "notification.cc"
    "mutex.cc"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::graphcycles_internal
    absl::kernel_timeout_internal
    absl::atomic_hook
    absl::base
    absl::base_internal
    absl::config
    absl::core_headers
    absl::dynamic_annotations
    absl::malloc_internal
    absl::raw_logging_internal
    absl::stacktrace
    absl::symbolize
    absl::tracing_internal
    absl::time
    absl::tracing_internal
    Threads::Threads
  PUBLIC
)
```

----------------------------------------

TITLE: Creating UDP Server Using ES Modules
DESCRIPTION: Example of creating a UDP server using ES Modules (mjs) that listens on port 41234 and handles various socket events including errors, messages, and listening states.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import dgram from 'node:dgram';

const server = dgram.createSocket('udp4');

server.on('error', (err) => {
  console.error(`server error:\n${err.stack}`);
  server.close();
});

server.on('message', (msg, rinfo) => {
  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);
});

server.on('listening', () => {
  const address = server.address();
  console.log(`server listening ${address.address}:${address.port}`);
});

server.bind(41234);
// Prints: server listening 0.0.0.0:41234
```

----------------------------------------

TITLE: Using util.debuglog for Conditional Debugging
DESCRIPTION: Examples of using debuglog to create conditional debug logging based on NODE_DEBUG environment variable.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_3

LANGUAGE: mjs
CODE:
```
import { debuglog } from 'node:util';
const log = debuglog('foo');

log('hello from foo [%d]', 123);
```

LANGUAGE: cjs
CODE:
```
const { debuglog } = require('node:util');
const log = debuglog('foo');

log('hello from foo [%d]', 123);
```

----------------------------------------

TITLE: Updating package-lock.json without modifying node_modules
DESCRIPTION: Command to fix vulnerabilities in the package-lock.json file without modifying the node_modules directory, useful for staged updates.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
$ npm audit fix --package-lock-only
```

----------------------------------------

TITLE: Configuring Primary Settings with setupPrimary in Node.js Cluster (CommonJS)
DESCRIPTION: CommonJS version of the setupPrimary() example, showing how to configure settings for worker processes. It demonstrates changing the worker script path and arguments between fork calls.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
const cluster = require('node:cluster');

cluster.setupPrimary({
  exec: 'worker.js',
  args: ['--use', 'https'],
  silent: true,
});
cluster.fork(); // https worker
cluster.setupPrimary({
  exec: 'worker.js',
  args: ['--use', 'http'],
});
cluster.fork(); // http worker
```

----------------------------------------

TITLE: Example package.json with caret dependency below 1.0.0 in JSON
DESCRIPTION: An example of a package.json file with a caret (^) dependency for a version below 1.0.0, which behaves differently than for versions 1.0.0 and above.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-update.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
"dependencies": {
  "dep1": "^0.2.0"
}
```

----------------------------------------

TITLE: Setting Named Properties in JavaScript and Node-API
DESCRIPTION: Demonstrates creating an object and setting a named property in both JavaScript and its Node-API equivalent.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_143

LANGUAGE: javascript
CODE:
```
const obj = {};
obj.myProp = 123;
```

LANGUAGE: c
CODE:
```
napi_status status = napi_generic_failure;

// const obj = {}
napi_value obj, value;
status = napi_create_object(env, &obj);
if (status != napi_ok) return status;

// Create a napi_value for 123
status = napi_create_int32(env, 123, &value);
if (status != napi_ok) return status;

// obj.myProp = 123
status = napi_set_named_property(env, obj, "myProp", value);
if (status != napi_ok) return status;
```

----------------------------------------

TITLE: Managing Maximum Listeners in Node.js EventEmitter (ES Modules)
DESCRIPTION: Demonstrates how to temporarily increase the maximum number of listeners for an EventEmitter instance to avoid 'possible EventEmitter memory leak' warnings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_34

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter } from 'node:events';
const emitter = new EventEmitter();
emitter.setMaxListeners(emitter.getMaxListeners() + 1);
emitter.once('event', () => {
  // do stuff
  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));
});
```

----------------------------------------

TITLE: Changing File Timestamps with FileHandle.utimes in Node.js
DESCRIPTION: Asynchronously changes the file system timestamps (access time `atime` and modification time `mtime`) of the file associated with the FileHandle. Accepts numbers, strings, or Date objects for timestamps. Returns a Promise that fulfills with `undefined` upon success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_14



----------------------------------------

TITLE: Running npm ci in a Project
DESCRIPTION: Example of running npm ci in a project directory, showing the typical output.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-ci.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ npm ci
added 154 packages in 5s
```

----------------------------------------

TITLE: Using util.types.isNumberObject to check for Number objects
DESCRIPTION: Demonstrates how to use util.types.isNumberObject() to distinguish between primitive numbers and Number objects created with the Number constructor.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_88

LANGUAGE: javascript
CODE:
```
util.types.isNumberObject(0);  // Returns false
util.types.isNumberObject(new Number(0));   // Returns true
```

----------------------------------------

TITLE: Checking for TypedArray Type with napi_is_typedarray in C
DESCRIPTION: This function checks if a JavaScript object is a TypedArray. It returns the result as a boolean, indicating whether the given value represents any kind of TypedArray instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_138

LANGUAGE: c
CODE:
```
napi_status napi_is_typedarray(napi_env env, napi_value value, bool* result)
```

----------------------------------------

TITLE: Configuring, Building, and Testing OpenSSL - Unix/Linux/macOS - Shell
DESCRIPTION: This snippet demonstrates the command-line steps needed to configure, compile, and test OpenSSL on Unix, Linux, or macOS platforms. The process assumes prerequisite tools (Perl, make, and a C compiler) are already installed, and should be executed in the OpenSSL source directory. 'make test' is optional but recommended for production reliability; successful builds will generate OpenSSL binaries ready for installation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/INSTALL.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ ./Configure
$ make
$ make test
```

----------------------------------------

TITLE: Attempting Let Variable Redeclaration in JavaScript
DESCRIPTION: This snippet attempts to redeclare the let variable 'a' with a new value. It results in a SyntaxError because 'a' has already been declared in the same scope.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/console/scoped-variables-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
let a = 239;
```

----------------------------------------

TITLE: Creating Decipheriv Instances with Node.js Crypto
DESCRIPTION: Creates and returns a `Decipheriv` stream object for decryption using a specified algorithm, key, and initialization vector (IV). The key and IV must match those used for encryption and can be strings, Buffers, TypedArrays, DataViews, or KeyObjects. Stream options can be provided, and the `authTagLength` option is required for CCM/OCB modes and should match the tag length used during encryption for GCM/chacha20-poly1305 modes. Introduced in Node.js v0.1.94.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_59

LANGUAGE: javascript
CODE:
```
crypto.createDecipheriv(algorithm, key, iv[, options])
```

----------------------------------------

TITLE: Running npm run-script Command in Bash
DESCRIPTION: Demonstrates the basic syntax for running an npm script, including how to pass arguments to the script.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-run-script.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm run-script <command> [-- <args>]
```

----------------------------------------

TITLE: Creating a JavaScript External Value - Node-API - C
DESCRIPTION: Declares a function for allocating a JavaScript value representing external (native) data, including optional finalizer callbacks to cleanup the data upon GC. Inputs are native pointers for the data and finalize context, with an optional finalize callback. The resulting napi_value is not an object and cannot have JS properties; it can later be extracted back in C code using napi_get_value_external.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_80

LANGUAGE: c
CODE:
```
napi_status napi_create_external(napi_env env,
                                 void* data,
                                 napi_finalize finalize_cb,
                                 void* finalize_hint,
                                 napi_value* result)
```

----------------------------------------

TITLE: Using AbortSignal with child_process.spawn() in Node.js
DESCRIPTION: Demonstrates how to use an AbortController and its associated AbortSignal to gracefully terminate a child process started with child_process.spawn(). When controller.abort() is called, the child process receives a signal, and the 'error' event is emitted on the child process object with an AbortError. Requires the 'child_process' module and Node.js v15.5.0 or later.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_7

LANGUAGE: js
CODE:
```
const controller = new AbortController();
const { signal } = controller;
const grep = spawn('grep', ['ssh'], { signal });
grep.on('error', (err) => {
  // This will be called with err being an AbortError if the controller aborts
});
controller.abort(); // stops the process
```

----------------------------------------

TITLE: Executing npm unstar Command in Bash
DESCRIPTION: The npm unstar command is used to remove one or more packages from the user's list of favorite packages. It can be run with one or more package specifications as arguments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-unstar.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm unstar [<package-spec>...]
```

----------------------------------------

TITLE: Computing ECDH Shared Secret with Specific Private Key using ES Modules in Node.js
DESCRIPTION: Shows an example of ECDH key exchange where one party (Alice) sets her private key explicitly using `setPrivateKey` (derived from a SHA256 hash, noted as insecure for real use), and the other party (Bob) generates keys randomly. They then compute the shared secret using `computeSecret` and verify that both parties arrive at the same secret. Uses ES Modules and requires `createECDH` and `createHash` from `node:crypto`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_24

LANGUAGE: mjs
CODE:
```
const {
  createECDH,
  createHash,
} = await import('node:crypto');

const alice = createECDH('secp256k1');
const bob = createECDH('secp256k1');

// This is a shortcut way of specifying one of Alice's previous private
// keys. It would be unwise to use such a predictable private key in a real
// application.
alice.setPrivateKey(
  createHash('sha256').update('alice', 'utf8').digest(),
);

// Bob uses a newly generated cryptographically strong
// pseudorandom key pair
bob.generateKeys();

const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');
const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');

// aliceSecret and bobSecret should be the same shared secret value
console.log(aliceSecret === bobSecret);
```

----------------------------------------

TITLE: Executing npm update command in Bash
DESCRIPTION: The npm update command syntax, which updates packages to their latest versions. It can be used with or without specifying package names.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-update.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm update [<pkg>...]

aliases: up, upgrade, udpate
```

----------------------------------------

TITLE: Handling Emitted Warnings with process.on('warning') - JavaScript
DESCRIPTION: These snippets set up an event handler on the process object to listen for 'warning' events, printing the warning's name, message, code, stack, and detail. Dependencies include only the built-in 'process' module. The event handler can be used to log or filter custom process warnings triggered with process.emitWarning.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_34

LANGUAGE: mjs
CODE:
```
import process from 'node:process';\n\nprocess.on('warning', (warning) => {\n  console.warn(warning.name);    // 'Warning'\n  console.warn(warning.message); // 'Something happened!'\n  console.warn(warning.code);    // 'MY_WARNING'\n  console.warn(warning.stack);   // Stack trace\n  console.warn(warning.detail);  // 'This is some additional information'\n});
```

LANGUAGE: cjs
CODE:
```
const process = require('node:process');\n\nprocess.on('warning', (warning) => {\n  console.warn(warning.name);    // 'Warning'\n  console.warn(warning.message); // 'Something happened!'\n  console.warn(warning.code);    // 'MY_WARNING'\n  console.warn(warning.stack);   // Stack trace\n  console.warn(warning.detail);  // 'This is some additional information'\n});
```

----------------------------------------

TITLE: Getting an Element from an Object in C using Node-API
DESCRIPTION: This function retrieves an element from a JavaScript object using a numeric index. It takes the environment, the source object, the index, and a pointer to store the result. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_159

LANGUAGE: c
CODE:
```
napi_status napi_get_element(napi_env env,
                             napi_value object,
                             uint32_t index,
                             napi_value* result);
```

----------------------------------------

TITLE: Removing Event Listeners
DESCRIPTION: Shows how to remove specific event listeners and demonstrates the behavior of removeListener() during event emission.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
const callback = (stream) => {
  console.log('someone connected!');
};
server.on('connection', callback);
// ...
server.removeListener('connection', callback);
```

LANGUAGE: javascript
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();

const callbackA = () => {
  console.log('A');
  myEmitter.removeListener('event', callbackB);
};

const callbackB = () => {
  console.log('B');
};

myEmitter.on('event', callbackA);

myEmitter.on('event', callbackB);

myEmitter.emit('event');

myEmitter.emit('event');
```

----------------------------------------

TITLE: Appending Data with Encoding Specification in Node.js
DESCRIPTION: Example of using fs.appendFile with an explicit encoding parameter by passing a string as the options parameter.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_49

LANGUAGE: javascript
CODE:
```
import { appendFile } from 'node:fs';

appendFile('message.txt', 'data to append', 'utf8', callback);
```

----------------------------------------

TITLE: Disabling Node.js Test Coverage for Code Blocks - Javascript
DESCRIPTION: Shows how to use inline comments `/* node:coverage disable */` and `/* node:coverage enable */` within JavaScript code to exclude specific blocks of code between these comments from being included in the test coverage report generated by the `--experimental-test-coverage` flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_18

LANGUAGE: Javascript
CODE:
```
/* node:coverage disable */
if (anAlwaysFalseCondition) {
  // Code in this branch will never be executed, but the lines are ignored for
  // coverage purposes. All lines following the 'disable' comment are ignored
  // until a corresponding 'enable' comment is encountered.
  console.log('this is never executed');
}
/* node:coverage enable */
```

----------------------------------------

TITLE: HMAC Digest using update() and digest() Methods - Node.js Crypto (JavaScript CJS)
DESCRIPTION: This CommonJS version updates an HMAC with string data and prints its hexadecimal digest. Uses SHA-256 algorithm and requires a secret. Once digest() is called, the HMAC object can't be used further. Needs Node.js with 'node:crypto' module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_39

LANGUAGE: JavaScript
CODE:
```
const {
  createHmac,
} = require('node:crypto');

const hmac = createHmac('sha256', 'a secret');

hmac.update('some data to hash');
console.log(hmac.digest('hex'));
// Prints:
//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e
```

----------------------------------------

TITLE: Demonstrating Header Precedence with response.writeHead in Node.js
DESCRIPTION: This example creates an HTTP/2 server to show how headers set using `response.writeHead` take precedence over headers set with `response.setHeader` when both methods are used for the same header name. It requires the `http2` module and demonstrates that the final `Content-Type` will be 'text/plain'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_72

LANGUAGE: js
CODE:
```
const server = http2.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html; charset=utf-8');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });
  res.end('ok');
});
```

----------------------------------------

TITLE: TCP Echo Server in Node.js (CommonJS)
DESCRIPTION: Example of creating a TCP echo server that listens on port 8124 using CommonJS format. Demonstrates basic server creation and connection handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_31

LANGUAGE: cjs
CODE:
```
const net = require('node:net');
const server = net.createServer((c) => {
  // 'connection' listener.
  console.log('client connected');
  c.on('end', () => {
    console.log('client disconnected');
  });
  c.write('hello\r\n');
  c.pipe(c);
});
server.on('error', (err) => {
  throw err;
});
server.listen(8124, () => {
  console.log('server bound');
});
```

----------------------------------------

TITLE: Sending Signals to Child Process using kill() Method
DESCRIPTION: Demonstrates how to send a SIGHUP signal to a child process using the subprocess.kill() method. Shows error handling and signal event handling patterns.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_35

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const grep = spawn('grep', ['ssh']);

grep.on('close', (code, signal) => {
  console.log(
    `child process terminated due to receipt of signal ${signal}`);
});

// Send SIGHUP to process.
grep.kill('SIGHUP');
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
const grep = spawn('grep', ['ssh']);

grep.on('close', (code, signal) => {
  console.log(
    `child process terminated due to receipt of signal ${signal}`);
});

// Send SIGHUP to process.
grep.kill('SIGHUP');
```

----------------------------------------

TITLE: Sending File Response with Error and Stat Checks - Node.js HTTP/2 - CJS
DESCRIPTION: Illustrates using `http2stream.respondWithFile` in CommonJS to serve a file. The example includes a `statCheck` function to add headers like `last-modified` based on file statistics and an `onError` function to gracefully handle file reading errors, responding with 404 for file not found or 500 for other issues.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_32

LANGUAGE: Node.js - CJS
CODE:
```
const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  function statCheck(stat, headers) {
    headers['last-modified'] = stat.mtime.toUTCString();
  }

  function onError(err) {
    // stream.respond() can throw if the stream has been destroyed by
    // the other side.
    try {
      if (err.code === 'ENOENT') {
        stream.respond({ ':status': 404 });
      } else {
        stream.respond({ ':status': 500 });
      }
    } catch (err) {
      // Perform actual error handling.
      console.error(err);
    }
    stream.end();
  }

  stream.respondWithFile('/some/file',
                         { 'content-type': 'text/plain; charset=utf-8' },
                         { statCheck, onError });
});
```

----------------------------------------

TITLE: Subscribing to Tracing Channel Events - Node.js (ESM)
DESCRIPTION: Demonstrates batch subscription to multiple trace-related events using TracingChannel in ES Module syntax. Utilizes diagnostics_channel.tracingChannel to create a channel group and provides handlers for start, end, asyncStart, asyncEnd, and error events. Suitable for tracking application flow and spans. Requires 'node:diagnostics_channel' (v18.19.0+), with each handler receiving the relevant message object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_28

LANGUAGE: JavaScript (ESM)
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';\n\nconst channels = diagnostics_channel.tracingChannel('my-channel');\n\nchannels.subscribe({\n  start(message) {\n    // Handle start message\n  },\n  end(message) {\n    // Handle end message\n  },\n  asyncStart(message) {\n    // Handle asyncStart message\n  },\n  asyncEnd(message) {\n    // Handle asyncEnd message\n  },\n  error(message) {\n    // Handle error message\n  },\n});
```

----------------------------------------

TITLE: Checking Node.js net.Socket Connection Status Property
DESCRIPTION: A boolean property indicating the connection status of the socket. It is `true` if `socket.connect()` was called and the connection process has not yet completed. It becomes `false` after the connection is successfully established and the 'connect' event is emitted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
socket.connecting
```

----------------------------------------

TITLE: Defining and Calling a Named Function Expression in JavaScript
DESCRIPTION: This snippet declares a named function expression called `Named` that takes two arguments (a, b) and returns their sum. The function expression is assigned to the variable `x`, which is then immediately invoked with arguments 2 and 3. The name `Named` is primarily useful for recursion or debugging and is local to the function's scope. The surrounding text indicates this test expects the result to be 5.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/named-function-expression-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
var x = (function Named(a,b){ return a + b; }); x(2,3)
```

----------------------------------------

TITLE: Validating Custom Error Objects with assert.throws() in Node.js
DESCRIPTION: Demonstrates how to use assert.throws() with custom validation objects and regular expressions to test for specific error properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_50

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

const err = new TypeError('Wrong value');
err.code = 404;
err.foo = 'bar';
err.info = {
  nested: true,
  baz: 'text',
};
err.reg = /abc/i;

assert.throws(
  () => {
    throw err;
  },
  {
    name: 'TypeError',
    message: 'Wrong value',
    info: {
      nested: true,
      baz: 'text',
    },
    // Only properties on the validation object will be tested for.
    // Using nested objects requires all properties to be present. Otherwise
    // the validation is going to fail.
  },
);

// Using regular expressions to validate error properties:
assert.throws(
  () => {
    throw err;
  },
  {
    // The `name` and `message` properties are strings and using regular
    // expressions on those will match against the string. If they fail, an
    // error is thrown.
    name: /^TypeError$/,
    message: /Wrong/,
    foo: 'bar',
    info: {
      nested: true,
      // It is not possible to use regular expressions for nested properties!
      baz: 'text',
    },
    // The `reg` property contains a regular expression and only if the
    // validation object contains an identical regular expression, it is going
    // to pass.
    reg: /abc/i,
  },
);

// Fails due to the different `message` and `name` properties:
assert.throws(
  () => {
    const otherErr = new Error('Not found');
    // Copy all enumerable properties from `err` to `otherErr`.
    for (const [key, value] of Object.entries(err)) {
      otherErr[key] = value;
    }
    throw otherErr;
  },
  // The error's `message` and `name` properties will also be checked when using
  // an error as validation object.
  err,
);
```

----------------------------------------

TITLE: Aborting File Read Operation
DESCRIPTION: Shows how to abort an ongoing file read operation using AbortController and AbortSignal.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_71

LANGUAGE: javascript
CODE:
```
import { readFile } from 'node:fs';

const controller = new AbortController();
const signal = controller.signal;
readFile(fileInfo[0].name, { signal }, (err, buf) => {
  // ...
});
// When you want to abort the request
controller.abort();
```

----------------------------------------

TITLE: Creating a React App Workspace
DESCRIPTION: Example of creating a new React app as a nested workspace within a project using npm init with create-react-app.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-init.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm init -w packages/my-react-app react-app .
```

----------------------------------------

TITLE: Rebasing Local Branch with Upstream in Git
DESCRIPTION: Commands to fetch the latest changes from the upstream repository and rebase the local branch onto those changes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
git fetch upstream HEAD
git rebase FETCH_HEAD
```

----------------------------------------

TITLE: Checking Full ICU Support using `Intl.DateTimeFormat` in JavaScript
DESCRIPTION: This snippet attempts to detect full ICU support (or system ICU with comprehensive locale data) by testing locale-specific date formatting. It creates an `Intl.DateTimeFormat` instance for Spanish ('es') and checks if it correctly formats a date's month name ('enero'). A try-catch block handles potential errors if the locale is unsupported.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/intl.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
```js
const hasFullICU = (() => {
  try {
    const january = new Date(9e8);
    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });
    return spanish.format(january) === 'enero';
  } catch (err) {
    return false;
  }
})();
```
```

----------------------------------------

TITLE: Throwing a JavaScript Value with N-API in C
DESCRIPTION: This function throws the provided JavaScript value (`error`) as an exception in the current N-API environment (`env`). This allows native code to trigger JavaScript exceptions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_34

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_throw(napi_env env, napi_value error);
```

----------------------------------------

TITLE: Validating IPv4 Addresses using net.isIPv4 in Node.js
DESCRIPTION: This snippet showcases the `net.isIPv4()` function from the Node.js `net` module. It illustrates how to specifically validate if a string represents an IPv4 address using dot-decimal notation without leading zeros. The function returns `true` for valid IPv4 inputs and `false` otherwise, as shown with examples including a valid IPv4, an IPv4 with leading zeros, CIDR notation, and a non-IP string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_34

LANGUAGE: js
CODE:
```
```js
net.isIPv4('127.0.0.1'); // returns true
net.isIPv4('127.000.000.001'); // returns false
net.isIPv4('127.0.0.1/24'); // returns false
net.isIPv4('fhqwhgads'); // returns false
```
```

----------------------------------------

TITLE: Testing Object.defineProperty Getters and Setters in JavaScript
DESCRIPTION: Tests the behavior of getter and setter functions defined using Object.defineProperty. It covers scenarios with both getters and setters, only getters, and only setters.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/Object-defineProperty-expected.txt#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}});
o.foo is 42
```

----------------------------------------

TITLE: Stream Finish Event Handler
DESCRIPTION: Example showing how to handle the 'finish' event on a Writable stream after all data has been written and flushed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
const writer = getWritableStreamSomehow();
for (let i = 0; i < 100; i++) {
  writer.write(`hello, #${i}!\n`);
}
writer.on('finish', () => {
  console.log('All writes are now complete.');
});
writer.end('This is the end\n');
```

----------------------------------------

TITLE: Sending UDP Packets with Node.js dgram (CommonJS) - JavaScript
DESCRIPTION: Shows how to send a single UDP packet using the Node.js 'dgram' module in CommonJS. A message is built with Buffer and sent to a specified port and address. Completion invokes a callback to close the socket. Dependencies: 'dgram' and 'buffer'. Input: message (Buffer), port, address. Output: packet sent; callback receives error if any. Intended for Node.js environments using CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
const dgram = require('node:dgram');\nconst { Buffer } = require('node:buffer');\n\nconst message = Buffer.from('Some bytes');\nconst client = dgram.createSocket('udp4');\nclient.send(message, 41234, 'localhost', (err) => {\n  client.close();\n});
```

----------------------------------------

TITLE: Initializing and Using nopt for Option Parsing in Node.js
DESCRIPTION: Demonstrates the basic setup and usage of the 'nopt' library. It requires 'nopt', 'stream', and 'path', defines known options ('knownOpts') with various expected types (String, Stream, Number, path, custom enum, Boolean, Array), and defines shorthand aliases ('shortHands'). It then parses the command-line arguments from 'process.argv' (skipping the first two elements) using these definitions and prints the resulting 'parsed' object. Dependencies include the 'nopt' library.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/nopt/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// my-program.js
var nopt = require("nopt")
  , Stream = require("stream").Stream
  , path = require("path")
  , knownOpts = { "foo" : [String, null]
                , "bar" : [Stream, Number]
                , "baz" : path
                , "bloo" : [ "big", "medium", "small" ]
                , "flag" : Boolean
                , "pick" : Boolean
                , "many1" : [String, Array]
                , "many2" : [path, Array]
                }
  , shortHands = { "foofoo" : ["--foo", "Mr. Foo"]
                 , "b7" : ["--bar", "7"]
                 , "m" : ["--bloo", "medium"]
                 , "p" : ["--pick"]
                 , "f" : ["--flag"]
                 }
             // everything is optional.
             // knownOpts and shorthands default to {}
             // arg list defaults to process.argv
             // slice defaults to 2
  , parsed = nopt(knownOpts, shortHands, process.argv, 2)
console.log(parsed)
```

----------------------------------------

TITLE: HTTPS Tunneling with ProxyAgent
DESCRIPTION: Example of using ProxyAgent for HTTPS tunneling through a secure proxy server.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/ProxyAgent.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import { ProxyAgent, fetch } from 'undici';

// Define a ProxyAgent for HTTPS proxy
const proxyAgent = new ProxyAgent('https://secure.proxy.server');

// Make a request to an HTTPS endpoint via the proxy
const response = await fetch('https://secure.endpoint.com/api/data', {
  dispatcher: proxyAgent,
  method: 'GET',
});

console.log('Response status:', response.status);
console.log('Response data:', await response.json());
```

----------------------------------------

TITLE: Writing Signed 8-bit Integer to Buffer (Node.js)
DESCRIPTION: This snippet demonstrates using `buf.writeInt8()` to write a signed 8-bit integer into a Buffer at a specified offset. The value must be a valid signed 8-bit integer and is written as two's complement.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_88

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(2);

buf.writeInt8(2, 0);
buf.writeInt8(-2, 1);

console.log(buf);
// Prints: <Buffer 02 fe>
```

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(2);

buf.writeInt8(2, 0);
buf.writeInt8(-2, 1);

console.log(buf);
// Prints: <Buffer 02 fe>
```

----------------------------------------

TITLE: Skip updating devDependencies during audit
DESCRIPTION: Command to fix vulnerabilities only in production dependencies, skipping development dependencies using the --only flag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
$ npm audit fix --only=prod
```

----------------------------------------

TITLE: Running Node.js Tests with Specific Glob Patterns - Bash
DESCRIPTION: Demonstrates how to use the `--test` flag followed by one or more glob patterns as arguments. This allows explicit control over which test files are executed, overriding the default discovery patterns. Patterns should be quoted to prevent shell expansion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_17

LANGUAGE: Bash
CODE:
```
node --test "**/*.test.js" "**/*.spec.js"
```

----------------------------------------

TITLE: Encrypting a File Using Cipheriv and Piped Streams in Node.js (CommonJS)
DESCRIPTION: This snippet shows how to encrypt a file using Cipheriv and piped streams in Node.js with CommonJS syntax. It follows the same process as the ES Modules version, reading from an input file, encrypting the data, and writing to an output file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_9

LANGUAGE: JavaScript
CODE:
```
const {
  createReadStream,
  createWriteStream,
} = require('node:fs');

const {
  pipeline,
} = require('node:stream');

const {
  scrypt,
  randomFill,
  createCipheriv,
} = require('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';

// First, we'll generate the key. The key length is dependent on the algorithm.
// In this case for aes192, it is 24 bytes (192 bits).
scrypt(password, 'salt', 24, (err, key) => {
  if (err) throw err;
  // Then, we'll generate a random initialization vector
  randomFill(new Uint8Array(16), (err, iv) => {
    if (err) throw err;

    const cipher = createCipheriv(algorithm, key, iv);

    const input = createReadStream('test.js');
    const output = createWriteStream('test.enc');

    pipeline(input, cipher, output, (err) => {
      if (err) throw err;
    });
  });
});
```

----------------------------------------

TITLE: Reading Symbolic Link Value Synchronously in Node.js
DESCRIPTION: Uses fs.readlinkSync to return the symbolic link's string value. Supports options for encoding.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_90

LANGUAGE: JavaScript
CODE:
```
fs.readlinkSync(path[, options])
```

----------------------------------------

TITLE: Creating UDP Server Using CommonJS
DESCRIPTION: Example of creating a UDP server using CommonJS (cjs) that listens on port 41234 and handles various socket events including errors, messages, and listening states.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const dgram = require('node:dgram');
const server = dgram.createSocket('udp4');

server.on('error', (err) => {
  console.error(`server error:\n${err.stack}`);
  server.close();
});

server.on('message', (msg, rinfo) => {
  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);
});

server.on('listening', () => {
  const address = server.address();
  console.log(`server listening ${address.address}:${address.port}`);
});

server.bind(41234);
// Prints: server listening 0.0.0.0:41234
```

----------------------------------------

TITLE: Using Promise.reject for Immediate Rejection
DESCRIPTION: Uses Promise.reject to immediately create a rejected promise. This is used to test how the system predicts handling for immediately rejected promises.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-promise-catch-prediction-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
promiseReject (catch-prediction.js:14:17)
```

----------------------------------------

TITLE: Executing a Package Command with libnpmexec in Node.js
DESCRIPTION: Demonstrates the basic usage of the libnpmexec library in Node.js. It imports the library and calls the main function asynchronously to execute the 'yosay' command with arguments. The example specifies cache locations and enables the 'yes' option to automatically confirm package downloads. Requires the 'libnpmexec' package to be installed via 'npm install libnpmexec'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmexec/README.md#2025-04-23_snippet_0

LANGUAGE: js
CODE:
```
const libexec = require('libnpmexec')
await libexec({
  args: ['yosay', 'Bom dia!'],
  cache: '~/.npm/_cacache',
  npxCache: '~/.npm/_npx',
  yes: true,
})
```

----------------------------------------

TITLE: Illustrating Package Name Examples in Markdown
DESCRIPTION: This snippet provides examples of different package name formats, including scoped packages, specific versions, and version ranges.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/package-spec.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
* `npm`
* `@npmcli/arborist`
* `@npmcli/arborist@latest`
* `npm@6.13.1`
* `npm@^4.0.0`
```

----------------------------------------

TITLE: Assertion Failure with assert.fail
DESCRIPTION: Demonstrates using assert.fail() to throw assertion errors with custom messages or error types.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_21

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

assert.fail();
// AssertionError [ERR_ASSERTION]: Failed

assert.fail('boom');
// AssertionError [ERR_ASSERTION]: boom

assert.fail(new TypeError('need array'));
// TypeError: need array
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

assert.fail();
// AssertionError [ERR_ASSERTION]: Failed

assert.fail('boom');
// AssertionError [ERR_ASSERTION]: boom

assert.fail(new TypeError('need array'));
// TypeError: need array
```

----------------------------------------

TITLE: Demonstrating Worker Event Loop Utilization in ECMAScript Modules
DESCRIPTION: This code example shows how to measure a worker thread's event loop utilization using the performance.eventLoopUtilization() method in ESM format. It creates a worker that executes CPU-intensive operations and handles messages from the main thread.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_18

LANGUAGE: mjs
CODE:
```
import { Worker, isMainThread, parentPort } from 'node:worker_threads';

if (isMainThread) {
  const worker = new Worker(new URL(import.meta.url));
  setInterval(() => {
    worker.postMessage('hi');
    console.log(worker.performance.eventLoopUtilization());
  }, 100).unref();
} else {
  parentPort.on('message', () => console.log('msg')).unref();
  (function r(n) {
    if (--n < 0) return;
    const t = Date.now();
    while (Date.now() - t < 300);
    setImmediate(r, n);
  })(10);
}
```

----------------------------------------

TITLE: Global Dispatcher ProxyAgent Request
DESCRIPTION: Demonstrates setting up a ProxyAgent as a global dispatcher and making HTTP requests through the proxy.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/ProxyAgent.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { setGlobalDispatcher, request, ProxyAgent } from 'undici'

const proxyAgent = new ProxyAgent('my.proxy.server')
setGlobalDispatcher(proxyAgent)

const { statusCode, body } = await request('http://localhost:3000/foo')

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Implementing Promise Rejection Event Handlers in Node.js
DESCRIPTION: Events emitted by process for unhandled Promise rejections. The 'unhandledRejection' event fires when a Promise is rejected without an error handler, while 'rejectionHandled' fires when a handler is attached after rejection.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_IOJS.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
process.on('unhandledRejection', (reason, promise) => {
  // Handling unhandled promise rejections
});

process.on('rejectionHandled', (promise) => {
  // Handling promises that were rejected and handled later
});
```

----------------------------------------

TITLE: Escaping Handles in Node-API (C)
DESCRIPTION: Function to promote a handle to a JavaScript object so it remains valid for the outer scope's lifetime. Can only be called once per scope.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_53

LANGUAGE: c
CODE:
```
napi_status napi_escape_handle(napi_env env,
                               napi_escapable_handle_scope scope,
                               napi_value escapee,
                               napi_value* result);
```

----------------------------------------

TITLE: Enabling Mock Timers - setInterval (MJS/CJS)
DESCRIPTION: Shows how to enable mocking specifically for the `setInterval` timer using `mock.timers.enable` with the `apis` option. This implicitly also mocks the associated `clearInterval` function, affecting calls from `node:timers`, `node:timers/promises`, and `globalThis`. Presented in both MJS and CJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_46

LANGUAGE: mjs
CODE:
```
import { mock } from 'node:test';
mock.timers.enable({ apis: ['setInterval'] });
```

LANGUAGE: cjs
CODE:
```
const { mock } = require('node:test');
mock.timers.enable({ apis: ['setInterval'] });
```

----------------------------------------

TITLE: Executing npm view Command with Package Name
DESCRIPTION: Shows the basic usage of npm view command to retrieve information about a package from the registry.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-view.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm view connect
```

----------------------------------------

TITLE: Setting Log Levels in npm CLI
DESCRIPTION: These are various aliases for setting different log levels in npm. They demonstrate how to adjust the verbosity of npm's output using command-line flags.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/logging.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
-d: --loglevel info
--dd: --loglevel verbose
--verbose: --loglevel verbose
--ddd: --loglevel silly
-q: --loglevel warn
--quiet: --loglevel warn
-s: --loglevel silent
--silent: --loglevel silent
```

----------------------------------------

TITLE: Importing describe/it (CJS) - Node.js
DESCRIPTION: Shows how to import the `describe` and `it` aliases from the `node:test` module using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const { describe, it } = require('node:test');
```

----------------------------------------

TITLE: Configuring Author Information in package.json
DESCRIPTION: Demonstrates how to set author information in package.json, either as an object with name, email, and URL fields, or as a single string that npm will parse.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "name" : "Barney Rubble",
  "email" : "barney@npmjs.com",
  "url" : "http://barnyrubble.npmjs.com/"
}
```

LANGUAGE: json
CODE:
```
{
  "author": "Barney Rubble <barney@npmjs.com> (http://barnyrubble.npmjs.com/)"
}
```

----------------------------------------

TITLE: File System Watch Events in Node.js
DESCRIPTION: Shows how to watch for file system changes using fs.watch(). The example demonstrates handling watch events including file changes and renames, with proper event type and filename logging.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_77

LANGUAGE: mjs
CODE:
```
import { watch } from 'node:fs';
watch('somedir', (eventType, filename) => {
  console.log(`event type is: ${eventType}`);
  if (filename) {
    console.log(`filename provided: ${filename}`);
  } else {
    console.log('filename not provided');
  }
});
```

----------------------------------------

TITLE: Node.js Commit Message Format
DESCRIPTION: Example of a well-formatted commit message following Node.js contribution guidelines, including subsystem prefix, description, body, and issue references.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_7

LANGUAGE: text
CODE:
```
subsystem: explain the commit in one line

The body of the commit message should be one or more paragraphs, explaining
things in more detail. Please word-wrap to keep columns to 72 characters or
less.

Fixes: https://github.com/nodejs/node/issues/1337
Refs: https://eslint.org/docs/rules/space-in-parens.html
```

----------------------------------------

TITLE: Creating a Zstd Compression Stream with Custom Options in JavaScript
DESCRIPTION: This example shows how to create a Zstd compression stream with a custom chunk size and compression parameters. It sets the compression level to 10 and enables checksum generation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_19

LANGUAGE: JavaScript
CODE:
```
const stream = zlib.createZstdCompress({
  chunkSize: 32 * 1024,
  params: {
    [zlib.constants.ZSTD_c_compressionLevel]: 10,
    [zlib.constants.ZSTD_c_checksumFlag]: 1,
  },
});
```

----------------------------------------

TITLE: Calling Thread-safe JavaScript Function in N-API
DESCRIPTION: Invokes a thread-safe JavaScript function with provided data. Supports blocking or non-blocking behavior when the queue is full.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_214

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status
napi_call_threadsafe_function(napi_threadsafe_function func,
                              void* data,
                              napi_threadsafe_function_call_mode is_blocking);
```

----------------------------------------

TITLE: Formatting URL Objects in Node.js
DESCRIPTION: Demonstrates using url.format() to convert a URL object into a formatted URL string. This example creates a URL with protocol, hostname, pathname, and query parameters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_50

LANGUAGE: javascript
CODE:
```
const url = require('node:url');
url.format({
  protocol: 'https',
  hostname: 'example.com',
  pathname: '/some/path',
  query: {
    page: 1,
    format: 'json',
  },
});

// => 'https://example.com/some/path?page=1&format=json'
```

----------------------------------------

TITLE: Generating Random Bytes Synchronously with Node.js Crypto (CommonJS)
DESCRIPTION: Shows synchronous generation of cryptographically strong random bytes using the crypto.randomBytes function in CommonJS format. Demonstrates generating 256 bytes of random data and displaying it in hexadecimal format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_87

LANGUAGE: javascript
CODE:
```
const {
  randomBytes,
} = require('node:crypto');

const buf = randomBytes(256);
console.log(
  `${buf.length} bytes of random data: ${buf.toString('hex')}`);
```

----------------------------------------

TITLE: FileHandle Web Stream Implementation
DESCRIPTION: Addition of readableWebStream() method to FileHandle prototype for web stream compatibility.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V17.md#2025-04-23_snippet_43

LANGUAGE: JavaScript
CODE:
```
FileHandle.prototype.readableWebStream()
```

----------------------------------------

TITLE: Incrementing Version with Prerelease Identifier in JavaScript
DESCRIPTION: Shows how to use the `semver.inc` function in JavaScript to increment a version number to the next prerelease version, appending a specified identifier ('beta'). The result '1.2.4-beta.0' indicates the next patch version (`1.2.4`) with the first prerelease tag (`beta.0`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
semver.inc('1.2.3', 'prerelease', 'beta')
// '1.2.4-beta.0'
```

----------------------------------------

TITLE: Importing 'path' Module with CommonJS (CJS)
DESCRIPTION: Demonstrates importing the built-in Node.js `path` module using the CommonJS `require` function. This makes the module's path manipulation utilities available in the script. Requires a Node.js environment.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/document_with_cjs_and_esm_code_snippet.md#2025-04-23_snippet_0

LANGUAGE: cjs
CODE:
```
require('path');
```

----------------------------------------

TITLE: HTTP Server with Pipeline Error Handling
DESCRIPTION: Shows potential issues when using stream.pipeline() with HTTP responses and error handling considerations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_59

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');
const http = require('node:http');
const { pipeline } = require('node:stream');

const server = http.createServer((req, res) => {
  const fileStream = fs.createReadStream('./fileNotExist.txt');
  pipeline(fileStream, res, (err) => {
    if (err) {
      console.log(err); // No such file
      // this message can't be sent once `pipeline` already destroyed the socket
      return res.end('error!!!');
    }
  });
});
```

----------------------------------------

TITLE: Duplex Stream from Web Streams (CommonJS)
DESCRIPTION: Example showing how to create a Duplex stream from Web Streams using CommonJS syntax
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_65

LANGUAGE: javascript
CODE:
```
const { Duplex } = require('node:stream');
const {
  ReadableStream,
  WritableStream,
} = require('node:stream/web');

const readable = new ReadableStream({
  start(controller) {
    controller.enqueue('world');
  },
});

const writable = new WritableStream({
  write(chunk) {
    console.log('writable', chunk);
  },
});

const pair = {
  readable,
  writable,
};
const duplex = Duplex.fromWeb(pair, { encoding: 'utf8', objectMode: true });

duplex.write('hello');
duplex.once('readable', () => console.log('readable', duplex.read()));
```

----------------------------------------

TITLE: Importing Readline Promise API using ES Modules in Node.js
DESCRIPTION: Demonstrates how to import the promise-based API of the `node:readline` module using ES Module `import` syntax. This is typically used for modern Node.js applications preferring async/await.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import * as readline from 'node:readline/promises';
```

----------------------------------------

TITLE: Initializing C++ Addon Module for Object Wrapping in Node.js
DESCRIPTION: This code initializes a Node.js addon module that wraps a C++ object. It sets up the necessary includes and defines the entry point for the addon.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_21

LANGUAGE: cpp
CODE:
```
#include <node.h>
#include "myobject.h"

namespace demo {

using v8::Local;
using v8::Object;

void InitAll(Local<Object> exports) {
  MyObject::Init(exports);
}

NODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)

}  // namespace demo
```

----------------------------------------

TITLE: Using getEntriesByName() with PerformanceObserver in CommonJS
DESCRIPTION: Demonstrates how to use the getEntriesByName() method to filter performance entries by name and optionally by type in CommonJS. Shows filtering by name only and by both name and type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((perfObserverList, observer) => {
  console.log(perfObserverList.getEntriesByName('meow'));
  /**
   * [
   *   PerformanceEntry {
   *     name: 'meow',
   *     entryType: 'mark',
   *     startTime: 98.545991,
   *     duration: 0,
   *     detail: null
   *   }
   * ]
   */
  console.log(perfObserverList.getEntriesByName('nope')); // []

  console.log(perfObserverList.getEntriesByName('test', 'mark'));
  /**
   * [
   *   PerformanceEntry {
   *     name: 'test',
   *     entryType: 'mark',
   *     startTime: 63.518931,
   *     duration: 0,
   *     detail: null
   *   }
   * ]
   */
  console.log(perfObserverList.getEntriesByName('test', 'measure')); // []

  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ entryTypes: ['mark', 'measure'] });

performance.mark('test');
performance.mark('meow');
```

----------------------------------------

TITLE: Running a VM Script in Multiple New Contexts (JavaScript)
DESCRIPTION: This snippet demonstrates how to compile code that sets a global variable and then execute it in multiple different contexts. It also shows how to create a frozen context using vm.constants.DONT_CONTEXTIFY.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
const vm = require('node:vm');

const script = new vm.Script('globalVar = "set"');

const contexts = [{}, {}, {}];
contexts.forEach((context) => {
  script.runInNewContext(context);
});

console.log(contexts);
// Prints: [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]

// This would throw if the context is created from a contextified object.
// vm.constants.DONT_CONTEXTIFY allows creating contexts with ordinary
// global objects that can be frozen.
const freezeScript = new vm.Script('Object.freeze(globalThis); globalThis;');
const frozenContext = freezeScript.runInNewContext(vm.constants.DONT_CONTEXTIFY);
```

----------------------------------------

TITLE: Handling End Events in Node.js Readable Streams
DESCRIPTION: Example demonstrating how to handle both data and end events for complete stream processing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
const readable = getReadableStreamSomehow();
readable.on('data', (chunk) => {
  console.log(`Received ${chunk.length} bytes of data.`);
});
readable.on('end', () => {
  console.log('There will be no more data.');
});
```

----------------------------------------

TITLE: Reading Entire Contents of a Readable Stream in Node.js
DESCRIPTION: This snippet shows how to read the entire contents of a Readable stream by collecting chunks across multiple 'readable' events and joining them at the end.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_34

LANGUAGE: javascript
CODE:
```
const chunks = [];

readable.on('readable', () => {
  let chunk;
  while (null !== (chunk = readable.read())) {
    chunks.push(chunk);
  }
});

readable.on('end', () => {
  const content = chunks.join('');
});
```

----------------------------------------

TITLE: Initializing and Running WASI Application in CommonJS
DESCRIPTION: This snippet shows how to set up a WASI environment, compile and instantiate a WebAssembly module, and run it using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/wasi.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
'use strict';
const { readFile } = require('node:fs/promises');
const { WASI } = require('node:wasi');
const { argv, env } = require('node:process');
const { join } = require('node:path');

const wasi = new WASI({
  version: 'preview1',
  args: argv,
  env,
  preopens: {
    '/local': '/some/real/path/that/wasm/can/access',
  },
});

(async () => {
  const wasm = await WebAssembly.compile(
    await readFile(join(__dirname, 'demo.wasm')),
  );
  const instance = await WebAssembly.instantiate(wasm, wasi.getImportObject());

  wasi.start(instance);
})();
```

----------------------------------------

TITLE: Creating and Reading from a ReadableStream in JavaScript (CommonJS)
DESCRIPTION: This snippet shows how to create a ReadableStream that pushes the current performance.now() timestamp every second, and then reads from it using an async iterator in CommonJS format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const {
  ReadableStream,
} = require('node:stream/web');

const {
  setInterval: every,
} = require('node:timers/promises');

const {
  performance,
} = require('node:perf_hooks');

const SECOND = 1000;

const stream = new ReadableStream({
  async start(controller) {
    for await (const _ of every(SECOND))
      controller.enqueue(performance.now());
  },
});

(async () => {
  for await (const value of stream)
    console.log(value);
})();
```

----------------------------------------

TITLE: Importing the Node.js REPL Module (ECMAScript Module) in JavaScript
DESCRIPTION: Imports the REPL module using ECMAScript module syntax for use in applications. Prerequisite: Node.js v13.2.0 or higher with ESM support is recommended. The 'repl' module allows launching or embedding a REPL environment, and this import makes its classes and functions accessible. No parameters are needed, and the output is the imported 'repl' object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import repl from 'node:repl';
```

----------------------------------------

TITLE: Mocking Function with Limited Implementations (JavaScript)
DESCRIPTION: Demonstrates creating a mock function using `t.mock.fn()` with an `implementation` and `times` option. The mock uses the provided implementation for the specified number of calls (`times: 2`) before automatically restoring the original function's behavior. Requires the Node.js test runner context (`t`) and `assert`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_43

LANGUAGE: JavaScript
CODE:
```
test('mocks a counting function', (t) => {
  let cnt = 0;

  function addOne() {
    cnt++;
    return cnt;
  }

  function addTwo() {
    cnt += 2;
    return cnt;
  }

  const fn = t.mock.fn(addOne, addTwo, { times: 2 });

  assert.strictEqual(fn(), 2);
  assert.strictEqual(fn(), 4);
  assert.strictEqual(fn(), 5);
  assert.strictEqual(fn(), 6);
});
```

----------------------------------------

TITLE: Implementing CCM Mode Encryption/Decryption in Node.js (ESM)
DESCRIPTION: Demonstrates CCM mode encryption and decryption using the Node.js crypto module with ES modules. Shows handling of authentication tags, additional authenticated data (AAD), and proper error handling for authentication failures.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_96

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';
const {
  createCipheriv,
  createDecipheriv,
  randomBytes,
} = await import('node:crypto');

const key = 'keykeykeykeykeykeykeykey';
const nonce = randomBytes(12);

const aad = Buffer.from('0123456789', 'hex');

const cipher = createCipheriv('aes-192-ccm', key, nonce, {
  authTagLength: 16,
});
const plaintext = 'Hello world';
cipher.setAAD(aad, {
  plaintextLength: Buffer.byteLength(plaintext),
});
const ciphertext = cipher.update(plaintext, 'utf8');
cipher.final();
const tag = cipher.getAuthTag();

// Now transmit { ciphertext, nonce, tag }.

const decipher = createDecipheriv('aes-192-ccm', key, nonce, {
  authTagLength: 16,
});
decipher.setAuthTag(tag);
decipher.setAAD(aad, {
  plaintextLength: ciphertext.length,
});
const receivedPlaintext = decipher.update(ciphertext, null, 'utf8');

try {
  decipher.final();
} catch (err) {
  throw new Error('Authentication failed!', { cause: err });
}

console.log(receivedPlaintext);
```

----------------------------------------

TITLE: Finding Stream Elements with find() Method in Node.js
DESCRIPTION: Demonstrates using the Readable.find() method to locate the first element in a stream that satisfies a condition. Examples show synchronous number checks and asynchronous file size checks with concurrency control.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_48

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { stat } from 'node:fs/promises';

// With a synchronous predicate.
await Readable.from([1, 2, 3, 4]).find((x) => x > 2); // 3
await Readable.from([1, 2, 3, 4]).find((x) => x > 0); // 1
await Readable.from([1, 2, 3, 4]).find((x) => x > 10); // undefined

// With an asynchronous predicate, making at most 2 file checks at a time.
const foundBigFile = await Readable.from([
  'file1',
  'file2',
  'file3',
]).find(async (fileName) => {
  const stats = await stat(fileName);
  return stats.size > 1024 * 1024;
}, { concurrency: 2 });
console.log(foundBigFile); // File name of large file, if any file in the list is bigger than 1MB
console.log('done'); // Stream has finished
```

----------------------------------------

TITLE: Pushing a Local Branch to GitHub Fork - Bash
DESCRIPTION: This snippet demonstrates how to push a local Git branch to a remote fork on GitHub, which is a necessary first step for opening a pull request. It uses the 'git push' command, where 'origin' refers to the user's fork and 'my-branch' specifies the branch to push. No additional dependencies are needed aside from Git itself. The command takes the current state of 'my-branch' and uploads it to the remote repository so it can be used for collaboration and code review.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
git push origin my-branch
```

----------------------------------------

TITLE: Importing TLS Module in Node.js
DESCRIPTION: Examples showing how to import the TLS module in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import tls from 'node:tls';
```

LANGUAGE: javascript
CODE:
```
const tls = require('node:tls');
```

----------------------------------------

TITLE: Creating URLSearchParams from Object in JavaScript
DESCRIPTION: Demonstrates creating URLSearchParams from an object where property names become parameter names. Array values are converted to strings using toString(), which joins array elements with commas.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
const params = new URLSearchParams({
  user: 'abc',
  query: ['first', 'second'],
});
console.log(params.getAll('query'));
// Prints [ 'first,second' ]
console.log(params.toString());
// Prints 'user=abc&query=first%2Csecond'
```

----------------------------------------

TITLE: Configuring Node.js Diagnostic Reports via Environment Variables in Bash
DESCRIPTION: This Bash code snippet shows how to configure Node.js diagnostic report generation using the `NODE_OPTIONS` environment variable. It demonstrates setting options equivalent to the programmatic `process.report` properties, such as enabling reports on uncaught exceptions (`--report-uncaught-exception`), fatal errors (`--report-on-fatalerror`), signals (`--report-on-signal`), specifying the signal (`--report-signal`), and defining the output filename (`--report-filename`) and directory (`--report-directory`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
NODE_OPTIONS="--report-uncaught-exception \
  --report-on-fatalerror --report-on-signal \
  --report-signal=SIGUSR2  --report-filename=./report.json \
  --report-directory=/home/nodeuser"
```

----------------------------------------

TITLE: Setting Node.js Test Flags via Comments in JavaScript
DESCRIPTION: Demonstrates how to specify command-line flags like `--expose-internals` within a JavaScript test file using a `// Flags:` comment. This allows the test runner to invoke Node.js with the necessary flags, enabling access to internal modules like `node:internal/freelist`. Requires the Node.js test runner environment.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-tests.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
'use strict';

// Flags: --expose-internals

require('../common');
const assert = require('node:assert');
const freelist = require('node:internal/freelist');
```

----------------------------------------

TITLE: Using findPackageJSON in ESM Context via node:module - JavaScript
DESCRIPTION: This code shows usage of findPackageJSON from node:module within an ESM file for discovering paths to relevant package.json files. It demonstrates finding package.json with various specifiers and explains differences when using relative, bare, or absolute specifiers. Requires Node.js 22.14.0/23.2.0+, ESM syntax, and is designed for introspecting package locations. Parameters include the module specifier and optional base URL (import.meta.url), returning a string path or undefined.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
// /path/to/project/packages/bar/bar.js\nimport { findPackageJSON } from 'node:module';\n\nfindPackageJSON('..', import.meta.url);\n// '/path/to/project/package.json'\n// Same result when passing an absolute specifier instead:\nfindPackageJSON(new URL('../', import.meta.url));\nfindPackageJSON(import.meta.resolve('../'));\n\nfindPackageJSON('some-package', import.meta.url);\n// '/path/to/project/packages/bar/node_modules/some-package/package.json'\n// When passing an absolute specifier, you might get a different result if the\n// resolved module is inside a subfolder that has nested `package.json`.\nfindPackageJSON(import.meta.resolve('some-package'));\n// '/path/to/project/packages/bar/node_modules/some-package/some-subfolder/package.json'\n\nfindPackageJSON('@foo/qux', import.meta.url);\n// '/path/to/project/packages/qux/package.json'
```

----------------------------------------

TITLE: Displaying File Statistics in Node.js
DESCRIPTION: Shows the structure of a Stats object returned by fs.stat() and related methods. Includes both regular and BigInt versions of the stats object, demonstrating various file metadata properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_105

LANGUAGE: javascript
CODE:
```
Stats {
  dev: 2114,
  ino: 48064969,
  mode: 33188,
  nlink: 1,
  uid: 85,
  gid: 100,
  rdev: 0,
  size: 527,
  blksize: 4096,
  blocks: 8,
  atimeMs: 1318289051000.1,
  mtimeMs: 1318289051000.1,
  ctimeMs: 1318289051000.1,
  birthtimeMs: 1318289051000.1,
  atime: Mon, 10 Oct 2011 23:24:11 GMT,
  mtime: Mon, 10 Oct 2011 23:24:11 GMT,
  ctime: Mon, 10 Oct 2011 23:24:11 GMT,
  birthtime: Mon, 10 Oct 2011 23:24:11 GMT }
```

LANGUAGE: javascript
CODE:
```
BigIntStats {
  dev: 2114n,
  ino: 48064969n,
  mode: 33188n,
  nlink: 1n,
  uid: 85n,
  gid: 100n,
  rdev: 0n,
  size: 527n,
  blksize: 4096n,
  blocks: 8n,
  atimeMs: 1318289051000n,
  mtimeMs: 1318289051000n,
  ctimeMs: 1318289051000n,
  birthtimeMs: 1318289051000n,
  atimeNs: 1318289051000000000n,
  mtimeNs: 1318289051000000000n,
  ctimeNs: 1318289051000000000n,
  birthtimeNs: 1318289051000000000n,
  atime: Mon, 10 Oct 2011 23:24:11 GMT,
  mtime: Mon, 10 Oct 2011 23:24:11 GMT,
  ctime: Mon, 10 Oct 2011 23:24:11 GMT,
  birthtime: Mon, 10 Oct 2011 23:24:11 GMT }
```

----------------------------------------

TITLE: Throwing a Standard JavaScript Error with N-API in C
DESCRIPTION: This function creates and throws a standard JavaScript `Error` object. It takes the N-API environment (`env`), an optional error code string (`code`), and the error message string (`msg`). If a code is provided, it's added to the error object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_35

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_throw_error(napi_env env,
                                         const char* code,
                                         const char* msg);
```

----------------------------------------

TITLE: Retrieving Diagnostic Report as JavaScript Object
DESCRIPTION: This code demonstrates how to obtain the diagnostic report as a JavaScript object using the Node.js API. It shows how to get a report with and without an error context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const report = process.report.getReport();
console.log(typeof report === 'object'); // true

// Similar to process.report.writeReport() output
console.log(JSON.stringify(report, null, 2));

const report = process.report.getReport(new Error('custom error'));
console.log(typeof report === 'object'); // true
```

----------------------------------------

TITLE: Array Buffer Transfer and Sharing (CommonJS)
DESCRIPTION: Shows different ways of transferring and sharing typed arrays using MessagePort in CommonJS format, including copying, transferring ownership, and sharing memory between threads.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_11

LANGUAGE: cjs
CODE:
```
'use strict';

const { MessageChannel } = require('node:worker_threads');
const { port1, port2 } = new MessageChannel();

port1.on('message', (message) => console.log(message));

const uint8Array = new Uint8Array([ 1, 2, 3, 4 ]);
// This posts a copy of `uint8Array`:
port2.postMessage(uint8Array);
// This does not copy data, but renders `uint8Array` unusable:
port2.postMessage(uint8Array, [ uint8Array.buffer ]);

// The memory for the `sharedUint8Array` is accessible from both the
// original and the copy received by `.on('message')`:
const sharedUint8Array = new Uint8Array(new SharedArrayBuffer(4));
port2.postMessage(sharedUint8Array);

// This transfers a freshly created message port to the receiver.
// This can be used, for example, to create communication channels between
// multiple `Worker` threads that are children of the same parent thread.
const otherChannel = new MessageChannel();
port2.postMessage({ port: otherChannel.port1 }, [ otherChannel.port1 ]);
```

----------------------------------------

TITLE: Writing Diagnostic Report in Node.js
DESCRIPTION: This snippet demonstrates how to write a diagnostic report to a file using the process.report.writeReport() method in both ECMAScript modules and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_80

LANGUAGE: JavaScript
CODE:
```
import { report } from 'node:process';

report.writeReport();
```

LANGUAGE: JavaScript
CODE:
```
const { report } = require('node:process');

report.writeReport();
```

----------------------------------------

TITLE: Testing 'debugger', 'break', 'continue', and 'throw' Statements - Node.js - JavaScript
DESCRIPTION: This set of snippets tests the parser's response to various control flow statements in JavaScript including 'debugger', 'break', 'continue', and 'throw'. The test cases focus on both legal and illegal usages, operand expectations, and their integration in control structures or functions. Dependencies include JS grammar understanding, especially concerning statement-only keywords and their valid context. Inputs are raw code strings.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/parser-syntax-check-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
"debugger X"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { debugger X }"
```

LANGUAGE: JavaScript
CODE:
```
"break 0.2"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { break 0.2 }"
```

LANGUAGE: JavaScript
CODE:
```
"continue a++"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { continue a++ }"
```

LANGUAGE: JavaScript
CODE:
```
"continue (my_friend)"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { continue (my_friend) }"
```

LANGUAGE: JavaScript
CODE:
```
"while (1) break"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { while (1) break }"
```

LANGUAGE: JavaScript
CODE:
```
"do if (a) with (b) continue; else debugger; while (false)"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { do if (a) with (b) continue; else debugger; while (false) }"
```

LANGUAGE: JavaScript
CODE:
```
"throw a"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { throw a }"
```

LANGUAGE: JavaScript
CODE:
```
"throw a + b in void c"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { throw a + b in void c }"
```

LANGUAGE: JavaScript
CODE:
```
"throw"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { throw }"
```

----------------------------------------

TITLE: Setting ICU Data Directory at Runtime - Node.js Environment Variable - Bash
DESCRIPTION: This snippet shows how to launch Node.js with the NODE_ICU_DATA environment variable to specify a custom directory containing ICU locale data at runtime. This allows for overriding or augmenting locale support when running a 'small-icu' Node.js build, without requiring a custom build. Ensure that the specified path contains the correctly named data file appropriate for the ICU version.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/intl.md#2025-04-23_snippet_2

LANGUAGE: Bash
CODE:
```
env NODE_ICU_DATA=/runtime/directory/with/dat/file node
```

----------------------------------------

TITLE: Handling Errors in Writable Stream - Node.js
DESCRIPTION: This snippet demonstrates how to handle errors in a custom Writable stream implementation. It checks for the presence of the letter 'a' in the chunk and triggers an error if found.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_78

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

const myWritable = new Writable({
  write(chunk, encoding, callback) {
    if (chunk.toString().indexOf('a') >= 0) {
      callback(new Error('chunk is invalid'));
    } else {
      callback();
    }
  },
});
```

----------------------------------------

TITLE: Creating and Using a WritableStream in JavaScript
DESCRIPTION: Example showing how to create a WritableStream with a write handler that logs chunks to the console, and then writing data to it using a writer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_14

LANGUAGE: mjs
CODE:
```
import {
  WritableStream,
} from 'node:stream/web';

const stream = new WritableStream({
  write(chunk) {
    console.log(chunk);
  },
});

await stream.getWriter().write('Hello World');
```

----------------------------------------

TITLE: Accessing Socket Information via HTTP Request (ES Modules)
DESCRIPTION: Demonstrates how to access the underlying socket of an HTTP request to retrieve local IP address and port information. Uses ES Modules syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
import http from 'node:http';
const options = {
  host: 'www.google.com',
};
const req = http.get(options);
req.end();
req.once('response', (res) => {
  const ip = req.socket.localAddress;
  const port = req.socket.localPort;
  console.log(`Your IP address is ${ip} and your source port is ${port}.`);
  // Consume response object
});
```

----------------------------------------

TITLE: Accessing Crypto Constants in Node.js
DESCRIPTION: Provides access to an object containing commonly used constants for cryptographic and security-related operations within the Node.js `crypto` module. These constants are defined in the 'Crypto constants' section of the Node.js documentation. Introduced in Node.js v6.3.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_57

LANGUAGE: javascript
CODE:
```
crypto.constants
```

----------------------------------------

TITLE: Piping Between Child Processes in Node.js
DESCRIPTION: Advanced example demonstrating how to pipe data between two child processes (ps and grep) to simulate 'ps ax | grep ssh'
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const ps = spawn('ps', ['ax']);
const grep = spawn('grep', ['ssh']);

ps.stdout.on('data', (data) => {
  grep.stdin.write(data);
});

ps.stderr.on('data', (data) => {
  console.error(`ps stderr: ${data}`);
});

ps.on('close', (code) => {
  if (code !== 0) {
    console.log(`ps process exited with code ${code}`);
  }
  grep.stdin.end();
});

grep.stdout.on('data', (data) => {
  console.log(data.toString());
});

grep.stderr.on('data', (data) => {
  console.error(`grep stderr: ${data}`);
});

grep.on('close', (code) => {
  if (code !== 0) {
    console.log(`grep process exited with code ${code}`);
  }
});
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
const ps = spawn('ps', ['ax']);
const grep = spawn('grep', ['ssh']);

ps.stdout.on('data', (data) => {
  grep.stdin.write(data);
});

ps.stderr.on('data', (data) => {
  console.error(`ps stderr: ${data}`);
});

ps.on('close', (code) => {
  if (code !== 0) {
    console.log(`ps process exited with code ${code}`);
  }
  grep.stdin.end();
});

grep.stdout.on('data', (data) => {
  console.log(data.toString());
});

grep.stderr.on('data', (data) => {
  console.error(`grep stderr: ${data}`);
});

grep.on('close', (code) => {
  if (code !== 0) {
    console.log(`grep process exited with code ${code}`);
  }
});
```

----------------------------------------

TITLE: Synopsis for npm ls Command in Bash
DESCRIPTION: Shows the basic usage of the npm ls command, which lists installed packages. It also mentions the alias 'list' for the command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-ls.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm ls <package-spec>

alias: list
```

----------------------------------------

TITLE: Creating and Resolving Promises Example
DESCRIPTION: Example showing how to create a promise and pass it to an asynchronous worker. Creates a deferred object and associated promise that can be returned to JavaScript.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_200

LANGUAGE: c
CODE:
```
napi_deferred deferred;
napi_value promise;
napi_status status;

// Create the promise.
status = napi_create_promise(env, &deferred, &promise);
if (status != napi_ok) return NULL;

// Pass the deferred to a function that performs an asynchronous action.
do_something_asynchronous(deferred);

// Return the promise to JS
return promise;
```

----------------------------------------

TITLE: Generating HMAC Secret Key Synchronously with CommonJS
DESCRIPTION: Example of generating a symmetric HMAC secret key synchronously using CommonJS require. Creates a 512-bit key and exports it as hexadecimal.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_70

LANGUAGE: javascript
CODE:
```
const {
  generateKeySync,
} = require('node:crypto');

const key = generateKeySync('hmac', { length: 512 });
console.log(key.export().toString('hex'));  // e89..........41e
```

----------------------------------------

TITLE: Demonstrating Module Exports in Node.js
DESCRIPTION: Example showing how module exports work in a Node.js environment, specifically demonstrating how to export and modify properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_12

LANGUAGE: js
CODE:
```
console.log('a starting');
exports.done = false;
const b = require('./b.js');
console.log('in a, b.done = %j', b.done);
exports.done = true;
console.log('a done');
```

----------------------------------------

TITLE: Combining Named Exports and Custom module.exports in ES Modules (Node.js - JavaScript)
DESCRIPTION: Defines an ES module exporting both a default class and a named function, then re-exports the class under the name 'module.exports' to customize what CommonJS consumers receive. The function distance is otherwise unavailable to CommonJS require consumers unless attached to the class. Prerequisite: understanding of ESM export syntax and module.exports interop.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_7

LANGUAGE: mjs
CODE:
```
// point.mjs\nexport default class Point {\n  constructor(x, y) { this.x = x; this.y = y; }\n}\n\n// `distance` is lost to CommonJS consumers of this module, unless it's\n// added to `Point` as a static property.\nexport function distance(a, b) { return Math.sqrt((b.x - a.x) ** 2 + (b.y - a.y) ** 2); }\nexport { Point as 'module.exports' }
```

----------------------------------------

TITLE: Using npm find-dupes Command in Bash
DESCRIPTION: The basic command for finding duplicate packages in the npm dependency tree. This runs npm dedupe in dry-run mode to identify duplications without changing the package structure.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-find-dupes.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm find-dupes
```

----------------------------------------

TITLE: Configuring Lifecycle Scripts for libnpmversion in package.json
DESCRIPTION: Example configuration within a `package.json` file demonstrating how to define `preversion`, `version`, and `postversion` scripts. These scripts are executed by `libnpmversion` (unless `ignoreScripts: true` is set) during the versioning process. `preversion` runs before the version bump (e.g., for tests), `version` runs after the bump but before committing (e.g., for building and adding files), and `postversion` runs after committing and tagging (e.g., for cleanup or pushing).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmversion/README.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
```json
{
  "scripts": {
    "preversion": "npm test",
    "version": "npm run build && git add -A dist",
    "postversion": "git push && git push --tags && rm -rf build/temp"
  }
}
```
```

----------------------------------------

TITLE: Unpiping a Writable Stream from a Readable Stream in Node.js
DESCRIPTION: This snippet demonstrates how to detach a Writable stream from a Readable stream using the unpipe() method. It shows piping data for a specific duration before stopping the write operation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');
const readable = getReadableStreamSomehow();
const writable = fs.createWriteStream('file.txt');
// All the data from readable goes into 'file.txt',
// but only for the first second.
readable.pipe(writable);
setTimeout(() => {
  console.log('Stop writing to file.txt.');
  readable.unpipe(writable);
  console.log('Manually close the file stream.');
  writable.end();
}, 1000);
```

----------------------------------------

TITLE: Passing Arguments to queueMicrotask Callbacks in Node.js
DESCRIPTION: This snippet illustrates how to pass arguments to a function scheduled with `queueMicrotask()` in Node.js. Since `queueMicrotask()` doesn't directly support passing extra arguments like `process.nextTick()`, this example uses `Function.prototype.bind()` to create a bound function with predefined arguments (1 and 2) that are then passed to the `deferred` function when the microtask executes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_63

LANGUAGE: js
CODE:
```
function deferred(a, b) {
  console.log('microtask', a + b);
}

console.log('start');
queueMicrotask(deferred.bind(undefined, 1, 2));
console.log('scheduled');
// Output:
// start
// scheduled
// microtask 3
```

----------------------------------------

TITLE: Overview of AsyncResource API - ESM Node.js JavaScript
DESCRIPTION: This snippet demonstrates the basic usage pattern for the `AsyncResource` class in an ES Module environment. It shows how to import `AsyncResource` and `executionAsyncId`, instantiate an `AsyncResource`, call `runInAsyncScope` to execute code within its context, call `emitDestroy` to signal resource destruction, and retrieve the resource's `asyncId` and `triggerAsyncId`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_7

LANGUAGE: mjs
CODE:
```
import { AsyncResource, executionAsyncId } from 'node:async_hooks';

// AsyncResource() is meant to be extended. Instantiating a
// new AsyncResource() also triggers init. If triggerAsyncId is omitted then
// async_hook.executionAsyncId() is used.
const asyncResource = new AsyncResource(
  type, { triggerAsyncId: executionAsyncId(), requireManualDestroy: false },
);

// Run a function in the execution context of the resource. This will
// * establish the context of the resource
// * trigger the AsyncHooks before callbacks
// * call the provided function `fn` with the supplied arguments
// * trigger the AsyncHooks after callbacks
// * restore the original execution context
asyncResource.runInAsyncScope(fn, thisArg, ...args);

// Call AsyncHooks destroy callbacks.
asyncResource.emitDestroy();

// Return the unique ID assigned to the AsyncResource instance.
asyncResource.asyncId();

// Return the trigger ID for the AsyncResource instance.
asyncResource.triggerAsyncId();
```

----------------------------------------

TITLE: Using Private Subfolder Exclusions in JavaScript
DESCRIPTION: Shows how excluded private subfolders defined in package.json affect import statements. Attempts to import excluded paths will throw an ERR_PACKAGE_PATH_NOT_EXPORTED error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_16

LANGUAGE: js
CODE:
```
import featureInternal from 'es-module-package/features/private-internal/m.js';
// Throws: ERR_PACKAGE_PATH_NOT_EXPORTED

import featureX from 'es-module-package/features/x.js';
// Loads ./node_modules/es-module-package/src/features/x.js
```

----------------------------------------

TITLE: Checking Permissions Runtime with process.permission.has()
DESCRIPTION: Shows how to use the `process.permission.has()` method in JavaScript to check if the current Node.js process has been granted specific permissions at runtime. It demonstrates checking for general file system write (`fs.write`) and specific path write/read access. This API is available on the `process.permission` object only when the permission model is enabled via the `--permission` flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/permissions.md#2025-04-23_snippet_1

LANGUAGE: js
CODE:
```
process.permission.has('fs.write'); // true
process.permission.has('fs.write', '/home/rafaelgss/protected-folder'); // true

process.permission.has('fs.read'); // true
process.permission.has('fs.read', '/home/rafaelgss/protected-folder'); // false
```

----------------------------------------

TITLE: Accessing Memory Usage Information in Node.js
DESCRIPTION: Demonstrates how to use process.memoryUsage() to retrieve detailed memory statistics including RSS, heap total, heap used, external memory, and ArrayBuffer memory usage in bytes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_55

LANGUAGE: JavaScript (ESM)
CODE:
```
import { memoryUsage } from 'node:process';

console.log(memoryUsage());
// Prints:
// {
//  rss: 4935680,
//  heapTotal: 1826816,
//  heapUsed: 650472,
//  external: 49879,
//  arrayBuffers: 9386
// }
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { memoryUsage } = require('node:process');

console.log(memoryUsage());
// Prints:
// {
//  rss: 4935680,
//  heapTotal: 1826816,
//  heapUsed: 650472,
//  external: 49879,
//  arrayBuffers: 9386
// }
```

----------------------------------------

TITLE: Process Exit Implementation
DESCRIPTION: Demonstrates proper process termination techniques using process.exit() and process.exitCode.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_41

LANGUAGE: mjs
CODE:
```
import { exit } from 'node:process';

exit(1);
```

LANGUAGE: cjs
CODE:
```
const { exit } = require('node:process');

exit(1);
```

----------------------------------------

TITLE: Basic Mocked Request Implementation with Undici
DESCRIPTION: Shows how to set up a mock request handler that intercepts requests to a specific path and returns a predetermined response. This example demonstrates the core functionality of request interception and response mocking.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

// MockPool
const mockPool = mockAgent.get('http://localhost:3000')
mockPool.intercept({ path: '/foo' }).reply(200, 'foo')

const {
  statusCode,
  body
} = await request('http://localhost:3000/foo')

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Getting Headers Example in Node.js
DESCRIPTION: Demonstrates how to set and retrieve HTTP headers using the OutgoingMessage class methods.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_50

LANGUAGE: javascript
CODE:
```
outgoingMessage.setHeader('Foo', 'bar');
outgoingMessage.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headers = outgoingMessage.getHeaders();
// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }
```

----------------------------------------

TITLE: Updating Pull Request with New Commits - Bash
DESCRIPTION: This snippet shows the sequence of Git commands to stage changes, commit them, and push updates to the same branch on the remote fork linked to an existing pull request. 'git add' is used to stage the modified files, 'git commit' saves the changes locally, and 'git push origin my-branch' publishes the changes to GitHub. This process allows contributors to update their pull requests with additional commits as requested during code review. Git must be installed and configured, and the user must be on the correct branch for this flow.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
git add my/changed/files
git commit
git push origin my-branch
```

----------------------------------------

TITLE: Implementing an Asynchronous Autocompletion Function for Readline (JavaScript)
DESCRIPTION: Demonstrates an asynchronous completer function for readline interfaces, supporting Node.js-style callbacks. When the function signature includes a callback, it must invoke the callback with matches. This enables non-blocking lookups, e.g., from a database or API. Parameters: 'linePartial' is the current input, 'callback' is a function to return the results. Output: the callback receives an array of suggestions and the original partial input.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_29

LANGUAGE: js
CODE:
```
function completer(linePartial, callback) {\n  callback(null, [['123'], linePartial]);\n}
```

----------------------------------------

TITLE: Running npm install-test Command in Bash
DESCRIPTION: Command syntax for npm install-test (aliased as 'it') which installs packages and immediately runs tests. It accepts the same arguments as the npm install command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install-test.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install-test [<package-spec> ...]

alias: it
```

----------------------------------------

TITLE: Extracting File Extension using path.extname (Simple Case)
DESCRIPTION: Demonstrates `path.extname()` returning the file extension ('.html') from a simple filename.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_15

LANGUAGE: js
CODE:
```
path.extname('index.html');
// Returns: '.html'
```

----------------------------------------

TITLE: Using the URL hostname Property
DESCRIPTION: Example showing how to get and set the hostname portion of a URL without affecting the port.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://example.org:81/foo');
console.log(myURL.hostname);
// Prints example.org

// Setting the hostname does not change the port
myURL.hostname = 'example.com';
console.log(myURL.href);
// Prints https://example.com:81/foo

// Use myURL.host to change the hostname and port
myURL.host = 'example.org:82';
console.log(myURL.href);
// Prints https://example.org:82/foo
```

----------------------------------------

TITLE: Configuring node-gyp Build Files - Bash
DESCRIPTION: Demonstrates running the 'node-gyp configure' command in the project root to generate platform-appropriate build files (Makefile, vcxproj, etc.). Requires the presence of a 'binding.gyp' file in the current directory. Produces platform-specific project files in the 'build/' subdirectory.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/README.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
node-gyp configure
```

----------------------------------------

TITLE: TTY Input Processing with Debounce
DESCRIPTION: Example showing how to process TTY input with debounced filtering of values based on current input line. Uses event listener for keypress events to show filtered results.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
const values = ['lorem ipsum', 'dolor sit amet'];
const rl = readline.createInterface(process.stdin);
const showResults = debounce(() => {
  console.log(
    '\n',
    values.filter((val) => val.startsWith(rl.line)).join(' '),
  );
}, 300);
process.stdin.on('keypress', (c, k) => {
  showResults();
});
```

----------------------------------------

TITLE: Comparing VM execution with eval in Node.js
DESCRIPTION: This example demonstrates the difference between vm.runInThisContext() and eval() when accessing local scope variables. While vm.runInThisContext() operates within the global context and cannot access local variables, eval() can access and modify local variables.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
const vm = require('node:vm');
let localVar = 'initial value';

const vmResult = vm.runInThisContext('localVar = "vm";');
console.log(`vmResult: '${vmResult}', localVar: '${localVar}'`);
// Prints: vmResult: 'vm', localVar: 'initial value'

const evalResult = eval('localVar = "eval";');
console.log(`evalResult: '${evalResult}', localVar: '${localVar}'`);
// Prints: evalResult: 'eval', localVar: 'eval'
```

----------------------------------------

TITLE: Using SQLite Aggregate Functions in CommonJS
DESCRIPTION: Demonstrates how to register and use a custom aggregate function with a SQLite database in CommonJS format. This example creates a 'sumint' function to calculate the total sum of values in a column.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/sqlite.md#2025-04-23_snippet_3

LANGUAGE: cjs
CODE:
```
const { DatabaseSync } = require('node:sqlite');

const db = new DatabaseSync(':memory:');
db.exec(`
  CREATE TABLE t3(x, y);
  INSERT INTO t3 VALUES ('a', 4),
                        ('b', 5),
                        ('c', 3),
                        ('d', 8),
                        ('e', 1);
`);

db.aggregate('sumint', {
  start: 0,
  step: (acc, value) => acc + value,
});

db.prepare('SELECT sumint(y) as total FROM t3').get(); // { total: 21 }
```

----------------------------------------

TITLE: Comparing Buffers (Offsets) Node.js JavaScript
DESCRIPTION: Illustrates using the optional offset arguments (`targetStart`, `targetEnd`, `sourceStart`, `sourceEnd`) with `buf.compare()` to limit the comparison to specific ranges within the buffers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_41

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);
const buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);

console.log(buf1.compare(buf2, 5, 9, 0, 4));
// Prints: 0
console.log(buf1.compare(buf2, 0, 6, 4));
// Prints: -1
console.log(buf1.compare(buf2, 5, 6, 5));
// Prints: 1
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);
const buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);

console.log(buf1.compare(buf2, 5, 9, 0, 4));
// Prints: 0
console.log(buf1.compare(buf2, 0, 6, 4));
// Prints: -1
console.log(buf1.compare(buf2, 5, 6, 5));
// Prints: 1
```

----------------------------------------

TITLE: Using events.once() with ES Modules
DESCRIPTION: Demonstrates how to use events.once() to create a Promise that resolves when an event is emitted. Shows basic event handling and error handling patterns.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_40

LANGUAGE: javascript
CODE:
```
import { once, EventEmitter } from 'node:events';
import process from 'node:process';

const ee = new EventEmitter();

process.nextTick(() => {
  ee.emit('myevent', 42);
});

const [value] = await once(ee, 'myevent');
console.log(value);

const err = new Error('kaboom');
process.nextTick(() => {
  ee.emit('error', err);
});

try {
  await once(ee, 'myevent');
} catch (err) {
  console.error('error happened', err);
}
```

----------------------------------------

TITLE: Querying User Input using rl.question in Node.js
DESCRIPTION: Shows how to use the `rl.question()` method from the callback-based `readline.Interface`. It displays a query to the user, waits for input on the associated input stream, and invokes the provided callback function with the user's answer as the sole argument.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_23

LANGUAGE: js
CODE:
```
rl.question('What is your favorite food? ', (answer) => {
  console.log(`Oh, so your favorite food is ${answer}`);
});
```

----------------------------------------

TITLE: Checking Buffer Inclusion in Node.js (cjs)
DESCRIPTION: Illustrates using the `includes()` method to determine if a Buffer contains a specific value (string, Buffer, or integer) in Node.js CommonJS syntax, showing various search scenarios including using an offset.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_53

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('this is a buffer');

console.log(buf.includes('this'));
// Prints: true
console.log(buf.includes('is'));
// Prints: true
console.log(buf.includes(Buffer.from('a buffer')));
// Prints: true
console.log(buf.includes(97));
// Prints: true (97 is the decimal ASCII value for 'a')
console.log(buf.includes(Buffer.from('a buffer example')));
// Prints: false
console.log(buf.includes(Buffer.from('a buffer example').slice(0, 8)));
// Prints: true
console.log(buf.includes('this', 4));
// Prints: false
```

----------------------------------------

TITLE: Initiating HTTP/2 Push Stream (MJS)
DESCRIPTION: Shows how to initiate an HTTP/2 push stream from a server-side `ServerHttp2Stream` instance using the `pushStream` method in ES modules. It demonstrates responding to the initial request and then initiating and responding to a push stream within the callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_23

LANGUAGE: javascript
CODE:
```
import { createServer } from 'node:http2';
const server = createServer();
server.on('stream', (stream) => {
  stream.respond({ ':status': 200 });
  stream.pushStream({ ':path': '/' }, (err, pushStream, headers) => {
    if (err) throw err;
    pushStream.respond({ ':status': 200 });
    pushStream.end('some pushed data');
  });
  stream.end('some data');
});
```

----------------------------------------

TITLE: Logging __dirname and __filename - JavaScript
DESCRIPTION: This code demonstrates printing the directory (__dirname) and the absolute filename (__filename) of the current module. Both values are injected by Node.js and provide information about the module path. path.dirname(__filename) returns the directory portion of the filename, matching __dirname's value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_18

LANGUAGE: JavaScript
CODE:
```
console.log(__dirname);
// Prints: /Users/mjr
console.log(path.dirname(__filename));
// Prints: /Users/mjr
```

----------------------------------------

TITLE: Scoped Registry Login Example
DESCRIPTION: Demonstrates how to log in and out of a private scoped registry using npm login and logout commands with custom scope
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/config.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry.mycorp.com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

----------------------------------------

TITLE: Creating Buffer Subarrays - Node.js
DESCRIPTION: Demonstrates how to use the `buf.subarray` method to create a new Buffer that is a view referencing the same memory as the original, offset and cropped by the provided start and end indices. It also shows how modifying the subarray affects the original Buffer due to shared memory and how negative indices are handled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_71

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

// Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte
// from the original `Buffer`.

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

const buf2 = buf1.subarray(0, 3);

console.log(buf2.toString('ascii', 0, buf2.length));
// Prints: abc

buf1[0] = 33;

console.log(buf2.toString('ascii', 0, buf2.length));
// Prints: !bc
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

// Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte
// from the original `Buffer`.

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

const buf2 = buf1.subarray(0, 3);

console.log(buf2.toString('ascii', 0, buf2.length));
// Prints: abc

buf1[0] = 33;

console.log(buf2.toString('ascii', 0, buf2.length));
// Prints: !bc
```

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from('buffer');

console.log(buf.subarray(-6, -1).toString());
// Prints: buffe
// (Equivalent to buf.subarray(0, 5).)

console.log(buf.subarray(-6, -2).toString());
// Prints: buff
// (Equivalent to buf.subarray(0, 4).)

console.log(buf.subarray(-5, -2).toString());
// Prints: uff
// (Equivalent to buf.subarray(1, 4).)
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('buffer');

console.log(buf.subarray(-6, -1).toString());
// Prints: buffe
// (Equivalent to buf.subarray(0, 5).)

console.log(buf.subarray(-6, -2).toString());
// Prints: buff
// (Equivalent to buf.subarray(0, 4).)

console.log(buf.subarray(-5, -2).toString());
// Prints: uff
// (Equivalent to buf.subarray(1, 4).)
```

----------------------------------------

TITLE: Enabling Mock Timers - Date with Initial Date Object (MJS/CJS)
DESCRIPTION: Shows how to enable mocking for the `Date` object and set its initial time using the `now` option with a `Date` object. This affects the behavior of mocked timers as they use the same internal clock. Presented in both MJS and CJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_48

LANGUAGE: mjs
CODE:
```
import { mock } from 'node:test';
mock.timers.enable({ apis: ['Date'], now: new Date() });
```

LANGUAGE: cjs
CODE:
```
const { mock } = require('node:test');
mock.timers.enable({ apis: ['Date'], now: new Date() });
```

----------------------------------------

TITLE: Making an HTTPS Request with Custom TLS Certificates and HTTPS.Agent - JavaScript
DESCRIPTION: Performs an HTTPS GET request using custom TLS options ('key' and 'cert') by reading a private key and certificate from the filesystem. Assigns an HTTPS.Agent with these options to enable client authentication. Requires 'fs' and 'https' modules. Expects valid PEM files for 'private-key.pem' and 'certificate.pem'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
const options = {
  hostname: 'encrypted.google.com',
  port: 443,
  path: '/',
  method: 'GET',
  key: fs.readFileSync('private-key.pem'),
  cert: fs.readFileSync('certificate.pem'),
};
options.agent = new https.Agent(options);

const req = https.request(options, (res) => {
  // ...
});
```

----------------------------------------

TITLE: Using assert.ok in ES Modules
DESCRIPTION: Demonstrates how to use assert.ok() method in ES Modules format to test if a value is truthy. Shows various scenarios including missing arguments and falsy values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_38

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

assert.ok(true);
// OK
assert.ok(1);
// OK

assert.ok();
// AssertionError: No value argument passed to `assert.ok()`

assert.ok(false, 'it\'s false');
// AssertionError: it's false

// In the repl:
assert.ok(typeof 123 === 'string');
// AssertionError: false == true

// In a file (e.g. test.js):
assert.ok(typeof 123 === 'string');
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(typeof 123 === 'string')

assert.ok(false);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(false)

assert.ok(0);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert.ok(0)
```

----------------------------------------

TITLE: Loading Compiled Node.js Addon in JavaScript
DESCRIPTION: Illustrates how to load a compiled Node.js addon using require() and call its exported function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
// hello.js
const addon = require('./build/Release/addon');

console.log(addon.hello());
// Prints: 'world'
```

----------------------------------------

TITLE: Custom Proxy Server with ProxyAgent
DESCRIPTION: Shows how to create a custom proxy server and use it with ProxyAgent for HTTP requests.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/ProxyAgent.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
import * as http from 'node:http';
import { createProxy } from 'proxy';
import { ProxyAgent, fetch } from 'undici';

// Create a proxy server
const proxyServer = createProxy(http.createServer());
proxyServer.listen(8000, () => {
  console.log('Proxy server running on port 8000');
});

// Define and use the ProxyAgent
const proxyAgent = new ProxyAgent('http://localhost:8000');

const response = await fetch('http://example.com', {
  dispatcher: proxyAgent,
  method: 'GET',
});

console.log('Response status:', response.status);
console.log('Response data:', await response.text());
```

----------------------------------------

TITLE: Incrementing and Accessing Public and Private Fields in JavaScript
DESCRIPTION: This code snippet shows a JavaScript method that increments a public field 'x' by a parameter 'y' and then returns the value of a private field '#x'. It demonstrates the syntax for accessing both public and private class fields.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/regression-424142-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
this.x += y;
return this.#x;
```

----------------------------------------

TITLE: Required Options Implementation in Commander.js
DESCRIPTION: Demonstrates how to create mandatory options using requiredOption() method that must have a value after parsing.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
program
  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');

program.parse();
```

----------------------------------------

TITLE: Listening for 'line' Events on a Readline Interface (JavaScript)
DESCRIPTION: Shows how to attach a listener for the 'line' event on a readline.Interface instance. Whenever the user submits a line of input, the callback logs the received text. Requires a previously created readline.Interface. Input: user-typed strings; Output: console log with the received input.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_27

LANGUAGE: js
CODE:
```
rl.on('line', (line) => {\n  console.log(`Received: ${line}`);\n});
```

----------------------------------------

TITLE: Testing toLowerCase and toUpperCase Edge Cases with JavaScript
DESCRIPTION: This snippet presents output-style assertions for testing JavaScript's String.prototype.toLowerCase and toUpperCase methods with complex Unicode and locale-specific characters. It demonstrates expected behavior for special characters such as German eszett, Greek scripts, ligatures, and extended Unicode points, and checks results using direct string comparison and String.fromCharCode. The snippet assumes a JavaScript environment supporting Unicode and standard String methods, and does not require external dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/string-capitalization-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS String("A𐐀").toLowerCase() is "a𐐨"
PASS String("a𐐨").toUpperCase() is "A𐐀"
PASS String("ΚΟΣΜΟΣ ΚΟΣΜΟΣ").toLowerCase() is "κοσμος κοσμος"
PASS String("ß").toUpperCase() is "SS"
PASS String("ŉ").toUpperCase() is "ʼN"
PASS String("ǰ").toUpperCase() is "J̌"
PASS String("ﬃ").toUpperCase() is "FFI"
PASS String("FFI").toLowerCase() is "ffi"
PASS String("Ĳ").toLowerCase() is "ĳ"
PASS expected[String.fromCharCode(0xA78D).toLowerCase()] is true
PASS expected[String.fromCharCode(0x0265).toUpperCase()] is true
PASS expected[String.fromCharCode(0x10C7).toLowerCase()] is true
PASS expected[String.fromCharCode(0x2D27).toUpperCase()] is true
PASS expected[String.fromCharCode(0x2D2D).toLowerCase()] is true
PASS expected[String.fromCharCode(0x10CD).toUpperCase()] is true
PASS expected[String.fromCharCode(0x2CF2).toLowerCase()] is true
PASS expected[String.fromCharCode(0x2CF3).toUpperCase()] is true
PASS expected[String.fromCharCode(0xA792).toLowerCase()] is true
PASS expected[String.fromCharCode(0xA793).toUpperCase()] is true
PASS expected[String.fromCharCode(0xA7AA).toLowerCase()] is true
PASS expected[String.fromCharCode(0x0266).toUpperCase()] is true
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Running Tests in Specific Workspaces
DESCRIPTION: Demonstrates how to run tests in specific workspaces using the workspace config and shorthand notation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-run-script.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm test --workspace=a
```

LANGUAGE: bash
CODE:
```
npm test -w a -w b
```

----------------------------------------

TITLE: Detaching ArrayBuffer with napi_detach_arraybuffer in C
DESCRIPTION: This function detaches an ArrayBuffer, setting its internal data to null. It can only be used on detachable ArrayBuffers, typically those created with napi_create_external_arraybuffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_141

LANGUAGE: c
CODE:
```
napi_status napi_detach_arraybuffer(napi_env env,
                                    napi_value arraybuffer)
```

----------------------------------------

TITLE: WebAssembly Text Format for 'Hello World' WASI Application
DESCRIPTION: This WebAssembly text format (WAT) code defines a module that imports the WASI fd_write function and uses it to write 'hello world\n' to stdout.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/wasi.md#2025-04-23_snippet_2

LANGUAGE: webassembly
CODE:
```
(module
    ;; Import the required fd_write WASI function which will write the given io vectors to stdout
    ;; The function signature for fd_write is:
    ;; (File Descriptor, *iovs, iovs_len, nwritten) -> Returns number of bytes written
    (import "wasi_snapshot_preview1" "fd_write" (func $fd_write (param i32 i32 i32 i32) (result i32)))

    (memory 1)
    (export "memory" (memory 0))

    ;; Write 'hello world\n' to memory at an offset of 8 bytes
    ;; Note the trailing newline which is required for the text to appear
    (data (i32.const 8) "hello world\n")

    (func $main (export "_start")
        ;; Creating a new io vector within linear memory
        (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - This is a pointer to the start of the 'hello world\n' string
        (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - The length of the 'hello world\n' string

        (call $fd_write
            (i32.const 1) ;; file_descriptor - 1 for stdout
            (i32.const 0) ;; *iovs - The pointer to the iov array, which is stored at memory location 0
            (i32.const 1) ;; iovs_len - We're printing 1 string stored in an iov - so one.
            (i32.const 20) ;; nwritten - A place in memory to store the number of bytes written
        )
        drop ;; Discard the number of bytes written from the top of the stack
    )
)
```

----------------------------------------

TITLE: Creating and Using a Custom DNS Resolver (CommonJS)
DESCRIPTION: This snippet shows how to create a custom DNS resolver using the Resolver class. It demonstrates setting custom DNS servers for the resolver and using it to resolve domain names independently of global settings. Uses CommonJS module syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
const { Resolver } = require('node:dns');
const resolver = new Resolver();
resolver.setServers(['4.4.4.4']);

// This request will use the server at 4.4.4.4, independent of global settings.
resolver.resolve4('example.org', (err, addresses) => {
  // ...
});
```

----------------------------------------

TITLE: Configuring Undici Agent for Testing - JavaScript
DESCRIPTION: Sets up Undici with optimized socket timeout settings for testing environments. Configures keepAliveTimeout and keepAliveMaxTimeout to 10ms to prevent long socket persistence that could slow down test execution.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/writing-tests.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { request, setGlobalDispatcher, Agent } from 'undici'

const agent = new Agent({
  keepAliveTimeout: 10, // milliseconds
  keepAliveMaxTimeout: 10 // milliseconds
})

setGlobalDispatcher(agent)
```

----------------------------------------

TITLE: Filling Buffer with Multi-byte Character in Node.js (cjs)
DESCRIPTION: Shows how to fill a Buffer with a character that occupies multiple bytes in UTF-8 encoding using the `fill()` method in Node.js CommonJS syntax, highlighting that only complete bytes fitting in the buffer are written.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_49

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

// Fill a `Buffer` with character that takes up two bytes in UTF-8.

console.log(Buffer.allocUnsafe(5).fill('Ȣ'));
// Prints: <Buffer c8 a2 c8 a2 c8>
```

----------------------------------------

TITLE: Using util.types.isWeakMap to check for WeakMap objects
DESCRIPTION: Demonstrates how to use util.types.isWeakMap() to check if a value is a built-in WeakMap instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_102

LANGUAGE: javascript
CODE:
```
util.types.isWeakMap(new WeakMap());  // Returns true
```

----------------------------------------

TITLE: Importing ES Modules with Different Query Strings (Node.js)
DESCRIPTION: Illustrates that importing the same module file (`./foo.mjs`) using relative URL specifiers with different query strings (`?query=1` and `?query=2`) results in the module being loaded and evaluated twice, once for each unique URL.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import './foo.mjs?query=1'; // loads ./foo.mjs with query of "?query=1"
import './foo.mjs?query=2'; // loads ./foo.mjs with query of "?query=2"
```

----------------------------------------

TITLE: Enabling Timing Information in npm CLI
DESCRIPTION: This command shows how to enable timing information output in npm while suppressing other terminal output. It's useful for performance analysis without affecting the execution time.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/logging.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
--timing --silent
```

----------------------------------------

TITLE: Truncating a File in Node.js
DESCRIPTION: These snippets demonstrate how to truncate a file using fs.truncate(). The function is shown in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_75

LANGUAGE: mjs
CODE:
```
import { truncate } from 'node:fs';
// Assuming that 'path/file.txt' is a regular file.
truncate('path/file.txt', (err) => {
  if (err) throw err;
  console.log('path/file.txt was truncated');
});
```

LANGUAGE: cjs
CODE:
```
const { truncate } = require('node:fs');
// Assuming that 'path/file.txt' is a regular file.
truncate('path/file.txt', (err) => {
  if (err) throw err;
  console.log('path/file.txt was truncated');
});
```

----------------------------------------

TITLE: Testing C++ Object Wrapper in Node.js
DESCRIPTION: This JavaScript code demonstrates how to use the wrapped C++ object in Node.js, creating instances and calling methods.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
const addon = require('./build/Release/addon');

const obj = new addon.MyObject(10);
console.log(obj.plusOne());
// Prints: 11
console.log(obj.plusOne());
// Prints: 12
console.log(obj.plusOne());
// Prints: 13
```

----------------------------------------

TITLE: Matching a Path with a Glob Pattern (Successful Match)
DESCRIPTION: Demonstrates the experimental `path.matchesGlob()` function successfully matching the path '/foo/bar' against the glob pattern '/foo/*'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_26

LANGUAGE: js
CODE:
```
path.matchesGlob('/foo/bar', '/foo/*'); // true
```

----------------------------------------

TITLE: Building Node.js Addons with node-gyp (Bash)
DESCRIPTION: This bash command demonstrates how to invoke node-gyp to configure and build a Node.js native addon based on the present binding.gyp file. It runs both the 'configure' and 'build' phases in one command. Requires node-gyp installed globally (npm install -g node-gyp) and supported Python and C++ build tools available on the system.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
node-gyp configure build\n
```

----------------------------------------

TITLE: Using Asynchronous Single-Call Crypto Operation with Callbacks in Node.js
DESCRIPTION: Example of an asynchronous single-call crypto operation that fills a buffer with random bytes. The operation defers work to the libuv threadpool and uses a callback to return results.
SOURCE: https://github.com/nodejs/node/blob/main/src/crypto/README.md#2025-04-23_snippet_2

LANGUAGE: js
CODE:
```
// Example asynchronous single-call operation
const buf = new Uint8Array(10);
crypto.randomFill(buf, (err, buf) => {
  console.log(buf);
});
```

----------------------------------------

TITLE: Retrieving the Parent Process ID (PPID) in Node.js (ESM)
DESCRIPTION: This snippet demonstrates how to obtain the Process ID (PID) of the parent process of the currently running Node.js process using the `process.ppid` property within an ES Module. It imports the `ppid` property from `node:process` and logs it to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_69

LANGUAGE: mjs
CODE:
```
import { ppid } from 'node:process';

console.log(`The parent process is pid ${ppid}`);
```

----------------------------------------

TITLE: Calculating HMAC over Piped Streams - Node.js Crypto (JavaScript CJS)
DESCRIPTION: In CommonJS syntax, this code hmacs the content of a file read stream and pipes the result to stdout. It uses 'require' to import 'fs', 'crypto', and 'process'. Ensure the file exists and a suitable secret is given. Node.js required.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_37

LANGUAGE: JavaScript
CODE:
```
const {
  createReadStream,
} = require('node:fs');
const {
  createHmac,
} = require('node:crypto');
const { stdout } = require('node:process');

const hmac = createHmac('sha256', 'a secret');

const input = createReadStream('test.js');
input.pipe(hmac).pipe(stdout);
```

----------------------------------------

TITLE: Testing C++ Node.js Addon in JavaScript
DESCRIPTION: Shows how to load and test a compiled C++ addon in a JavaScript file using require().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
// test.js
require('./build/Release/addon');
```

----------------------------------------

TITLE: Blocking Specific Operating Systems
DESCRIPTION: Excludes specific operating systems from running the package by prefixing OS identifiers with '!'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_36

LANGUAGE: json
CODE:
```
{
  "os": [
    "!win32"
  ]
}
```

----------------------------------------

TITLE: Using addEventListener with capture options in Node.js EventTarget
DESCRIPTION: Demonstrates how to use the addEventListener method with different capture options. The example shows that listeners can be registered separately with capture=true and capture=false, and how to properly remove them using removeEventListener with matching options.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_52

LANGUAGE: javascript
CODE:
```
function handler(event) {}

const target = new EventTarget();
target.addEventListener('foo', handler, { capture: true });  // first
target.addEventListener('foo', handler, { capture: false }); // second

// Removes the second instance of handler
target.removeEventListener('foo', handler);

// Removes the first instance of handler
target.removeEventListener('foo', handler, { capture: true });
```

----------------------------------------

TITLE: Accessing Buffer Length (Node.js) - JavaScript
DESCRIPTION: Shows how to retrieve the size in bytes of a Node.js Buffer using the `length` property. The example demonstrates that allocating a buffer with a specific size determines its `length`, and subsequently writing data smaller than the allocated size does not change the overall buffer length.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_60

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

// Create a `Buffer` and write a shorter string to it using UTF-8.

const buf = Buffer.alloc(1234);

console.log(buf.length);
// Prints: 1234

buf.write('some string', 0, 'utf8');

console.log(buf.length);
// Prints: 1234
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

// Create a `Buffer` and write a shorter string to it using UTF-8.

const buf = Buffer.alloc(1234);

console.log(buf.length);
// Prints: 1234

buf.write('some string', 0, 'utf8');

console.log(buf.length);
// Prints: 1234
```

----------------------------------------

TITLE: Implementing Continuation Local Storage via executionAsyncResource (ES Module Syntax) - JavaScript
DESCRIPTION: This advanced example demonstrates how to attach and propagate request-specific state across asynchronous operations without relying on an external Map. It creates an HTTP server and uses a Symbol to store custom state on resource objects, synchronized in init hooks by leveraging executionAsyncResource and createHook. The code runs in Node.js ES module environments and requires async_hooks and http. Key parameters are the state object (tied to request URL), propagated via the Symbol. Inputs: HTTP request; Outputs: JSON response with the per-request state. Limitations include the need to avoid resource object collisions and care in Symbol management.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_19

LANGUAGE: mjs
CODE:
```
import { createServer } from 'node:http';
import {
  executionAsyncId,
  executionAsyncResource,
  createHook,
} from 'node:async_hooks';
const sym = Symbol('state'); // Private symbol to avoid pollution

createHook({
  init(asyncId, type, triggerAsyncId, resource) {
    const cr = executionAsyncResource();
    if (cr) {
      resource[sym] = cr[sym];
    }
  },
}).enable();

const server = createServer((req, res) => {
  executionAsyncResource()[sym] = { state: req.url };
  setTimeout(function() {
    res.end(JSON.stringify(executionAsyncResource()[sym]));
  }, 100);
}).listen(3000);
```

----------------------------------------

TITLE: Defining Wasm Module with Source Map URL (95e97206)
DESCRIPTION: This snippet presents the raw hexadecimal representation of a WebAssembly module identified by 'wasm://wasm/95e97206', captured across two sessions. It defines a function signature, declares a function type index, exports a 'main' function (index 1), and defines the body for function 0 ('nopFunction') and function 1 ('main'). It includes custom sections '.debug_info' and 'sourceMappingURL' ('abc'), indicating a link to a source map file, and a 'name' section mapping function indices to names. The module has no imports.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-scripts-expected.txt#2025-04-23_snippet_8

LANGUAGE: wasm
CODE:
```
Raw: 00 61 73 6d 01 00 00 00 01 07 02 60 00 00 60 00 00 03 03 02 00 01 07 08 01 04 6d 61 69 6e 00 01 0a 0e 02 03 00 01 0b 08 00 02 40 41 02 1a 0b 0b 00 11 0b 2e 64 65 62 75 67 5f 69 6e 66 6f 01 02 03 04 05 00 15 10 73 6f 75 72 63 65 4d 61 70 70 69 6e 67 55 52 4c 03 61 62 63 00 1b 04 6e 61 6d 65 01 14 02 00 0b 6e 6f 70 46 75 6e 63 74 69 6f 6e 01 04 6d 61 69 6e
```

----------------------------------------

TITLE: Basic RetryHandler Implementation with Default Settings
DESCRIPTION: Simple example demonstrating how to create a RetryHandler with default retry settings, showing the minimal required implementation of the handler interface.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/RetryHandler.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const client = new Client(`http://localhost:${server.address().port}`);
const handler = new RetryHandler(dispatchOptions, {
  dispatch: client.dispatch.bind(client),
  handler: {
    onConnect() {},
    onBodySent() {},
    onHeaders(status, _rawHeaders, resume, _statusMessage) {},
    onData(chunk) {},
    onComplete() {},
    onError(err) {},
  },
});
```

----------------------------------------

TITLE: Initializing Node.js C++ Binding Module - C++
DESCRIPTION: Provides an example of the `Initialize` function used to set up a Node.js native module binding. It demonstrates how to obtain the `Environment`, attach C++ functions as properties on a target JavaScript object or a class prototype using helpers like `SetMethod` and `SetProtoMethod`, create C++ wrappers for JS classes using V8 templates (`NewFunctionTemplate`), and register the initialization function using the `NODE_BINDING_CONTEXT_AWARE_INTERNAL` macro.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_8

LANGUAGE: C++
CODE:
```
void Initialize(Local<Object> target,
                Local<Value> unused,
                Local<Context> context,
                void* priv) {
  Environment* env = Environment::GetCurrent(context);

  SetMethod(context, target, "getaddrinfo", GetAddrInfo);
  SetMethod(context, target, "getnameinfo", GetNameInfo);

  // 'SetMethodNoSideEffect' means that debuggers can safely execute this
  // function for e.g. previews.
  SetMethodNoSideEffect(context, target, "canonicalizeIP", CanonicalizeIP);

  // ... more code ...

  Isolate* isolate = env->isolate();
  // Building the \`ChannelWrap\` class for JS:
  Local<FunctionTemplate> channel_wrap =
      NewFunctionTemplate(isolate, ChannelWrap::New);
  // Allow for 1 internal field, see \`BaseObject\` for details on this:
  channel_wrap->InstanceTemplate()->SetInternalFieldCount(1);
  channel_wrap->Inherit(AsyncWrap::GetConstructorTemplate(env));

  // Set various methods on the class (i.e. on the prototype):
  SetProtoMethod(isolate, channel_wrap, "queryAny", Query<QueryAnyWrap>);
  SetProtoMethod(isolate, channel_wrap, "queryA", Query<QueryAWrap>);
  // ...
  SetProtoMethod(isolate, channel_wrap, "querySoa", Query<QuerySoaWrap>);
  SetProtoMethod(isolate, channel_wrap, "getHostByAddr", Query<QueryReverseWrap>);

  SetProtoMethodNoSideEffect(isolate, channel_wrap, "getServers", GetServers);

  SetConstructorFunction(context, target, "ChannelWrap", channel_wrap);
}

// Run the \`Initialize\` function when loading this binding through
// \`internalBinding('cares_wrap')\` in Node.js's built-in JavaScript code:
NODE_BINDING_CONTEXT_AWARE_INTERNAL(cares_wrap, Initialize)
```

----------------------------------------

TITLE: Custom Inspection Implementation (ES Modules)
DESCRIPTION: Shows how to implement a custom inspection function using Symbol.for('nodejs.util.inspect.custom') in ES Modules format
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
import { inspect } from 'node:util';

class Box {
  constructor(value) {
    this.value = value;
  }

  [inspect.custom](depth, options, inspect) {
    if (depth < 0) {
      return options.stylize('[Box]', 'special');
    }
    const newOptions = Object.assign({}, options, {
      depth: options.depth === null ? null : options.depth - 1,
    });
    const padding = ' '.repeat(5);
    const inner = inspect(this.value, newOptions)
                  .replace(/\n/g, `\n${padding}`);
    return `${options.stylize('Box', 'special')}< ${inner} >`;
  }
}
```

----------------------------------------

TITLE: Enabling Network Connections with a Custom Matcher Function
DESCRIPTION: Demonstrates using a custom function with enableNetConnect() to determine which hosts should be allowed to make real HTTP requests based on a programmatic condition.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

mockAgent.enableNetConnect((value) => value === 'example.com')

await request('http://example.com')
// A real request is made
```

----------------------------------------

TITLE: Using util.deprecate for Function Deprecation
DESCRIPTION: Examples showing how to mark functions as deprecated using util.deprecate in both ESM and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import { deprecate } from 'node:util';

export const obsoleteFunction = deprecate(() => {
  // Do something here.
}, 'obsoleteFunction() is deprecated. Use newShinyFunction() instead.');
```

LANGUAGE: cjs
CODE:
```
const { deprecate } = require('node:util');

exports.obsoleteFunction = deprecate(() => {
  // Do something here.
}, 'obsoleteFunction() is deprecated. Use newShinyFunction() instead.');
```

----------------------------------------

TITLE: Executing npm version Command in Bash
DESCRIPTION: Demonstrates the basic syntax for running the npm version command, including options for specifying the new version or using semantic versioning keywords.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-version.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]
```

----------------------------------------

TITLE: Setting HTTP Headers with UTF-8 Characters using RFC 8187
DESCRIPTION: Demonstrates how to set headers with UTF-8 characters using the RFC 8187 standard for proper encoding. This example sets a Content-Disposition header with a filename containing emoji.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
const filename = 'Rock 🎵.txt';
request.setHeader('Content-Disposition', `attachment; filename*=utf-8''${encodeURIComponent(filename)}`);
```

----------------------------------------

TITLE: Sending SIGHUP Signal Using process.kill() in Node.js
DESCRIPTION: Demonstrates using process.kill() to send a SIGHUP signal to the current process, which is then caught by a signal event handler. The example includes a timeout that exits the process after 100ms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_53

LANGUAGE: JavaScript (ESM)
CODE:
```
import process, { kill } from 'node:process';

process.on('SIGHUP', () => {
  console.log('Got SIGHUP signal.');
});

setTimeout(() => {
  console.log('Exiting.');
  process.exit(0);
}, 100);

kill(process.pid, 'SIGHUP');
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const process = require('node:process');

process.on('SIGHUP', () => {
  console.log('Got SIGHUP signal.');
});

setTimeout(() => {
  console.log('Exiting.');
  process.exit(0);
}, 100);

process.kill(process.pid, 'SIGHUP');
```

----------------------------------------

TITLE: DNS Server Configuration Example
DESCRIPTION: Shows the format of DNS server configuration arrays returned by getServers(). Includes examples of IPv4, IPv6, and custom port configurations formatted according to RFC 5952.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
[
  '8.8.8.8',
  '2001:4860:4860::8888',
  '8.8.8.8:1053',
  '[2001:4860:4860::8888]:1053',
]
```

----------------------------------------

TITLE: Inspecting Circular References with CommonJS
DESCRIPTION: Shows how util.inspect() handles circular object references in CommonJS format, with reference anchors marked in the output.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
const { inspect } = require('node:util');

const obj = {};
obj.a = [obj];
obj.b = {};
obj.b.inner = obj.b;
obj.b.obj = obj;

console.log(inspect(obj));
// <ref *1> {
//   a: [ [Circular *1] ],
//   b: <ref *2> { inner: [Circular *2], obj: [Circular *1] }
// }
```

----------------------------------------

TITLE: Checking for Error Values with assert.ifError (Node.js, CommonJS, JavaScript)
DESCRIPTION: Demonstrates assert.ifError() in Node.js with CommonJS to assert the absence of error-like values, throwing AssertionError when any value (other than undefined or null) is encountered. Shows handling of numeric, string, and Error object cases, as well as stack trace preservation. Dependency: node:assert/strict.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_27

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert/strict');

assert.ifError(null);
// OK
assert.ifError(0);
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0
assert.ifError('error');
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'error'
assert.ifError(new Error());
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error

// Create some random error frames.
let err;
(function errorFrame() {
  err = new Error('test error');
})();

(function ifErrorFrame() {
  assert.ifError(err);
})();
// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error
//     at ifErrorFrame
//     at errorFrame
```

----------------------------------------

TITLE: Building & Loading Node.js Snapshots (Script Entry) - Console
DESCRIPTION: Demonstrates creating a Node.js snapshot of an application's initial state using `--build-snapshot` and `--snapshot-blob`, then loading the snapshot to run another script that accesses the snapshotted state. Requires `--snapshot-blob` to specify the output/input file path for the snapshot blob.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_10

LANGUAGE: console
CODE:
```
$ echo "globalThis.foo = 'I am from the snapshot'" > snapshot.js

# Run snapshot.js to initialize the application and snapshot the
# state of it into snapshot.blob.
$ node --snapshot-blob snapshot.blob --build-snapshot snapshot.js

$ echo "console.log(globalThis.foo)" > index.js

# Load the generated snapshot and start the application from index.js.
$ node --snapshot-blob snapshot.blob index.js
I am from the snapshot
```

----------------------------------------

TITLE: Testing Primitive Type Wrapper Behavior in JavaScript
DESCRIPTION: A series of test assertions that verify the type of 'this' when methods are called directly on primitive values. Each test case checks that the primitive value is automatically wrapped in an object when used as 'this'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/primitive-method-this-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
PASS (1).thisType() is 'object'
PASS (2.3).thisType() is 'object'
PASS 'xxx'.thisType() is 'object'
PASS (false).thisType() is 'object'
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Changing Current Working Directory in Node.js
DESCRIPTION: This code snippet shows how to change the current working directory of the Node.js process using process.chdir(). It includes error handling and logging of the directory change.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
import { chdir, cwd } from 'node:process';

console.log(`Starting directory: ${cwd()}`);
try {
  chdir('/tmp');
  console.log(`New directory: ${cwd()}`);
} catch (err) {
  console.error(`chdir: ${err}`);
}
```

LANGUAGE: javascript
CODE:
```
const { chdir, cwd } = require('node:process');

console.log(`Starting directory: ${cwd()}`);
try {
  chdir('/tmp');
  console.log(`New directory: ${cwd()}`);
} catch (err) {
  console.error(`chdir: ${err}`);
}
```

----------------------------------------

TITLE: Configuring Primary Settings with setupPrimary in Node.js Cluster (ES Modules)
DESCRIPTION: This example shows how to use setupPrimary() to configure settings for worker processes. It demonstrates changing the worker script path and arguments between fork calls, affecting only future workers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
import cluster from 'node:cluster';

cluster.setupPrimary({
  exec: 'worker.js',
  args: ['--use', 'https'],
  silent: true,
});
cluster.fork(); // https worker
cluster.setupPrimary({
  exec: 'worker.js',
  args: ['--use', 'http'],
});
cluster.fork(); // http worker
```

----------------------------------------

TITLE: Sending Multiple Buffers via UDP with Node.js dgram (ES Module) - JavaScript
DESCRIPTION: Illustrates sending a UDP packet composed of multiple Buffer objects as an array using the Node.js 'dgram' module (ES module style). Buffers are created and sent together in a single datagram, targeting a specific port. Dependencies: 'dgram', 'buffer'. Input: array of Buffers, destination port. Output: composite UDP packet sent; callback cleans up the socket. Useful for performance-sensitive or composite message scenarios.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
import dgram from 'node:dgram';\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from('Some ');\nconst buf2 = Buffer.from('bytes');\nconst client = dgram.createSocket('udp4');\nclient.send([buf1, buf2], 41234, (err) => {\n  client.close();\n});
```

----------------------------------------

TITLE: Using ReadableStream.pipeThrough() with TransformStream in JavaScript (CommonJS)
DESCRIPTION: This example shows how to use the pipeThrough() method to connect a ReadableStream to a TransformStream, which converts the data to uppercase before it's read, in CommonJS format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
const {
  ReadableStream,
  TransformStream,
} = require('node:stream/web');

const stream = new ReadableStream({
  start(controller) {
    controller.enqueue('a');
  },
});

const transform = new TransformStream({
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
});

const transformedStream = stream.pipeThrough(transform);

(async () => {
  for await (const chunk of transformedStream)
    console.log(chunk);
    // Prints: A
})();
```

----------------------------------------

TITLE: Setting User ID in Node.js (ESM)
DESCRIPTION: Example of using the process.setuid() method to set the user identity of the process in ESM format. This POSIX-only function accepts either a numeric ID or a username string and verifies the change after execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_91

LANGUAGE: javascript
CODE:
```
import process from 'node:process';

if (process.getuid && process.setuid) {
  console.log(`Current uid: ${process.getuid()}`);
  try {
    process.setuid(501);
    console.log(`New uid: ${process.getuid()}`);
  } catch (err) {
    console.error(`Failed to set uid: ${err}`);
  }
}
```

----------------------------------------

TITLE: Writing Unsigned Little-Endian Integer to Buffer (CJS)
DESCRIPTION: Demonstrates how to write a 48-bit unsigned integer into a Node.js Buffer in little-endian format using the `writeUIntLE` method. It utilizes the `Buffer.allocUnsafe` method to create a buffer and shows the resulting byte sequence using common CJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_102

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(6);

buf.writeUIntLE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: <Buffer ab 90 78 56 34 12>
```

----------------------------------------

TITLE: Multiple Workspace Selection with npm exec in Bash
DESCRIPTION: Shows how to run a command in multiple workspaces by specifying the workspace flag multiple times or using the -w shorthand.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
npm exec -w a -w b -- eslint ./*.js
```

----------------------------------------

TITLE: Running Shell Scripts with npm exec in Bash
DESCRIPTION: Examples of running arbitrary shell scripts in the context of the current project using npm exec with the -c flag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ npm x -c 'eslint && say "hooray, lint passed"'
$ npx -c 'eslint && say "hooray, lint passed"'
```

----------------------------------------

TITLE: Creating a Thread-Safe Function in Node-API
DESCRIPTION: Use napi_create_threadsafe_function() to create a persistent reference to a JavaScript function that can be called from multiple threads. This function allows setting up a callback for finalization and specifying the initial thread count.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_208

LANGUAGE: C
CODE:
```
napi_status napi_create_threadsafe_function(napi_env env,
                                        napi_value func,
                                        napi_value async_resource,
                                        napi_value async_resource_name,
                                        size_t max_queue_size,
                                        size_t initial_thread_count,
                                        void* thread_finalize_data,
                                        napi_finalize thread_finalize_cb,
                                        void* context,
                                        napi_threadsafe_function_call_js call_js_cb,
                                        napi_threadsafe_function* result);
```

----------------------------------------

TITLE: Specifying Array Values in npmrc
DESCRIPTION: This example shows how to specify multiple values for a single key in the .npmrc file using array notation. This is useful for configuration options that can have multiple values.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/npmrc.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
key[] = "first value"
key[] = "second value"
```

----------------------------------------

TITLE: Creating a TCP REPL Server using net.Server (CJS)
DESCRIPTION: Sets up a Node.js TCP server using the `net` module that listens on port 1337. For each incoming socket connection, it starts a full-featured REPL instance, piping the socket as input and output, enabling terminal features. The server uses CommonJS syntax (`require`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_26

LANGUAGE: cjs
CODE:
```
// repl-server.js
const repl = require('node:repl');
const net = require('node:net');

net
  .createServer((socket) => {
    const r = repl.start({
      prompt: `socket ${socket.remoteAddress}:${socket.remotePort}> `,
      input: socket,
      output: socket,
      terminal: true,
      useGlobal: false,
    });
    r.on('exit', () => {
      socket.end();
    });
    r.context.socket = socket;
  })
  .listen(1337);
```

----------------------------------------

TITLE: Creating Buffer from Partial ArrayBuffer - JavaScript
DESCRIPTION: Shows how to create a Buffer that is a view over a specific byte range of an existing ArrayBuffer (like the one backing a TypedArray) by providing the byteOffset and length parameters to Buffer.from().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_9

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const arr = new Uint16Array(20);
const buf = Buffer.from(arr.buffer, 0, 16);

console.log(buf.length);
// Prints: 16
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const arr = new Uint16Array(20);
const buf = Buffer.from(arr.buffer, 0, 16);

console.log(buf.length);
// Prints: 16
```

----------------------------------------

TITLE: Changing File Permissions with fs.chmod in Node.js
DESCRIPTION: Example showing how to change file permissions using the fs.chmod function with octal notation for permission bits.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_51

LANGUAGE: javascript
CODE:
```
import { chmod } from 'node:fs';

chmod('my_file.txt', 0o775, (err) => {
  if (err) throw err;
  console.log('The permissions for file "my_file.txt" have been changed!');
});
```

----------------------------------------

TITLE: Node-API Constructor Implementation
DESCRIPTION: C code demonstrating how to replicate JavaScript object construction using Node-API functions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_175

LANGUAGE: c
CODE:
```
// Get the constructor function MyObject
napi_value global, constructor, arg, value;
napi_status status = napi_get_global(env, &global);
if (status != napi_ok) return;

status = napi_get_named_property(env, global, "MyObject", &constructor);
if (status != napi_ok) return;

// const arg = "hello"
status = napi_create_string_utf8(env, "hello", NAPI_AUTO_LENGTH, &arg);
if (status != napi_ok) return;

napi_value* argv = &arg;
size_t argc = 1;

// const value = new MyObject(arg)
status = napi_new_instance(env, constructor, argc, argv, &value);
```

----------------------------------------

TITLE: Testing Native Callback Addon in JavaScript (JavaScript)
DESCRIPTION: Shows how to require and invoke the C++ addon that expects a callback function in JavaScript. The example passes a function that prints the received message, expecting 'hello world' as the output. Intended to test synchronous invocation of JavaScript callbacks from C++ code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_16

LANGUAGE: js
CODE:
```
// test.js\nconst addon = require('./build/Release/addon');\n\naddon((msg) => {\n  console.log(msg);\n// Prints: 'hello world'\n});\n
```

----------------------------------------

TITLE: Declaring TracedReference Member for cppgc Object - C++
DESCRIPTION: Demonstrates the declaration of a `v8::TracedReference` member within a `cppgc`-managed C++ class to hold a reference to a V8 heap object, ensuring it is traced by the garbage collector.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_26

LANGUAGE: C++
CODE:
```
class MyWrap : ... {
 v8::TracedReference<v8::UnboundScript> script;
}

```

----------------------------------------

TITLE: Enabling Network Connections with Regular Expressions
DESCRIPTION: Shows how to use a regular expression pattern with enableNetConnect() to allow real HTTP requests for hosts matching the pattern.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

mockAgent.enableNetConnect(new RegExp('example.com'))

await request('http://example.com')
// A real request is made
```

----------------------------------------

TITLE: Timer Callback Handling in Node.js
DESCRIPTION: Demonstrates the Timer API usage with unref() during callback execution. The code shows how setTimeout() will only run the callback once after an unref() is called during the callback execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_IOJS.md#2025-04-23_snippet_15

LANGUAGE: JavaScript
CODE:
```
Timer#close()
setTimeout(() => {
  unref()
}, delay)
```

----------------------------------------

TITLE: MockAgent Instantiation with Custom Agent
DESCRIPTION: Demonstrates creating a MockAgent with a custom Agent instance.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { Agent, MockAgent } from 'undici'

const agent = new Agent()

const mockAgent = new MockAgent({ agent })
```

----------------------------------------

TITLE: Generating Certificate and Key for HTTPS Server
DESCRIPTION: This bash command generates a self-signed certificate and private key for use with an HTTPS server.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \
  -keyout private-key.pem -out certificate.pem
```

----------------------------------------

TITLE: Writing Signed Integer (LE) to Buffer (Node.js)
DESCRIPTION: Writes a signed integer `value` of `byteLength` bytes to the Buffer `buf` at the specified `offset` using little-endian format. Supports values up to 48 bits accuracy. `value` must be a signed integer. Returns the offset plus the number of bytes written.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_94

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(6);

buf.writeIntLE(0x1234567890ab, 0, 6);

console.log(buf);
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(6);

buf.writeIntLE(0x1234567890ab, 0, 6);

console.log(buf);
```

----------------------------------------

TITLE: Using path.basename on Windows Systems
DESCRIPTION: Demonstrates the default behavior of `path.basename()` on Windows systems. It correctly identifies the backslash as a separator and returns the filename part of the path.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_3

LANGUAGE: js
CODE:
```
path.basename('C:\\temp\\myfile.html');
// Returns: 'myfile.html'
```

----------------------------------------

TITLE: Mocked Request with Local Mock Agent Dispatcher
DESCRIPTION: Example of using MockAgent as a local dispatcher for HTTP requests.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import { MockAgent, request } from 'undici'

const mockAgent = new MockAgent()

const mockPool = mockAgent.get('http://localhost:3000')
mockPool.intercept({ path: '/foo' }).reply(200, 'foo')

const {
  statusCode,
  body
} = await request('http://localhost:3000/foo', { dispatcher: mockAgent })

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Identifying Primary and Worker Processes in Node.js Cluster (ES Modules)
DESCRIPTION: This snippet shows how to determine if the current process is a primary or worker process using cluster.isPrimary and cluster.isWorker. It also demonstrates accessing the worker ID in worker processes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
import cluster from 'node:cluster';

if (cluster.isPrimary) {
  console.log('I am primary');
  cluster.fork();
  cluster.fork();
} else if (cluster.isWorker) {
  console.log(`I am worker #${cluster.worker.id}`);
}
```

----------------------------------------

TITLE: Writing Unsigned 32-bit Integer (LE) to Buffer (Node.js)
DESCRIPTION: Writes an unsigned 32-bit integer `value` to the Buffer `buf` at the specified `offset` using little-endian format. `value` must be a valid unsigned 32-bit integer (0-4294967295). Returns the offset plus four. Also available as `writeUint32LE`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_99

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeUInt32LE(0xfeedface, 0);

console.log(buf);
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeUInt32LE(0xfeedface, 0);

console.log(buf);
```

----------------------------------------

TITLE: URLPattern.test() Method Example in JavaScript
DESCRIPTION: Shows how to use the URLPattern.test() method to perform a simple boolean check if a URL matches a pattern without retrieving the detailed matching data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_34

LANGUAGE: javascript
CODE:
```
const myPattern = new URLPattern('https://nodejs.org/docs/latest/api/*.html');
console.log(myPattern.test('https://nodejs.org/docs/latest/api/dns.html'));
// Prints: true
```

----------------------------------------

TITLE: Specifying Module Imports with Import Statement - JavaScript ESM
DESCRIPTION: Demonstrates how to declare a module import with a specifier in native ECMAScript Modules (ESM). Shows the format to be used for the specifier parameter in the VM linking context, which is critical for proper dependency resolution via the linker function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
import foo from 'foo';
//              ^^^^^ the module specifier
```

----------------------------------------

TITLE: Using SOCKS Associate Command with Node.js `socks` Library
DESCRIPTION: This Node.js snippet demonstrates establishing a UDP relay using the SOCKS 'associate' command via the `socks` library. It initializes a local UDP socket (`dgram`), configures `SocksClient` with proxy and destination details, and specifies the 'associate' command. On the 'established' event, it obtains the proxy's relay port and sends a UDP frame (created with `SocksClient.createUDPFrame`) through it. Incoming UDP frames are received on the local socket and parsed using `SocksClient.parseUDPFrame`. Basic error handling is included. Dependencies are the built-in `dgram` module and the `socks` npm package.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/javascript/associateExample.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
```typescript
const dgram = require('dgram');
const SocksClient = require('socks').SocksClient;

// Create a local UDP socket for sending/receiving packets to/from the proxy.
const udpSocket = dgram.createSocket('udp4');
udpSocket.bind();

// Listen for incoming UDP packets from the proxy server.
udpSocket.on('message', (message, rinfo) => {
  console.log(SocksClient.parseUDPFrame(message));
  /*
  { frameNumber: 0,
    remoteHost: { host: '8.8.8.8', port: 53 }, // The remote host that replied with a UDP packet
    data: <Buffer 74 65 73 74 0a> // The data
  }
  */
});

const options = {
  proxy: {
    host: '104.131.124.203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will be sending UDP frames to the newly opened UDP port on the server.
  // Most SOCKS servers accept 0.0.0.0 as a wildcard address to accept UDP frames from any source.
  destination: {
    host: '0.0.0.0',
    port: 0
  },

  command: 'associate'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new UDP port for UDP relaying.
client.on('established', info => {
  console.log(info);
  /*
  {
    socket: <Socket ...>,
    remoteHost: { // This is the remote port on the SOCKS proxy server to send UDP frame packets to.
      host: '104.131.124.203',
      port: 58232
    }
  }
  */

  // Send a udp frame to 8.8.8.8 on port 53 through the proxy.
  const packet = SocksClient.createUDPFrame({
    remoteHost: { host: '8.8.8.8', port: 53 },
    data: Buffer.from('hello') // A DNS lookup in the real world.
  });

  // Send packet.
  udpSocket.send(packet, info.remoteHost.port, info.remoteHost.host);
});

// SOCKS proxy failed to bind.
client.on('error', () => {
  // Handle errors
});
```
```

----------------------------------------

TITLE: Formatting Strings with util.format() in Node.js
DESCRIPTION: Illustrates the usage of util.format() function to create formatted strings using various specifiers. It shows examples of formatting with different types of arguments and specifiers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
util.format('%s:%s', 'foo');
// Returns: 'foo:%s'

util.format('%s:%s', 'foo', 'bar', 'baz');
// Returns: 'foo:bar baz'

util.format(1, 2, 3);
// Returns: '1 2 3'

util.format('%% %s');
// Returns: '%% %s'
```

----------------------------------------

TITLE: Importing Commander in TypeScript
DESCRIPTION: Shows how to import Commander in TypeScript modules and create a local Command object.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
// TypeScript (.ts)
import { Command } from 'commander';
const program = new Command();
```

----------------------------------------

TITLE: Retrieving All Property Names of an Object in C using Node-API
DESCRIPTION: This function retrieves all property names of a JavaScript object. It allows specifying options for key collection mode, filtering, and conversion. The result is returned as an array of JavaScript values representing property names.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_149

LANGUAGE: c
CODE:
```
napi_get_all_property_names(napi_env env,
                            napi_value object,
                            napi_key_collection_mode key_mode,
                            napi_key_filter key_filter,
                            napi_key_conversion key_conversion,
                            napi_value* result);
```

----------------------------------------

TITLE: Enabling All Network Connections in MockAgent
DESCRIPTION: Shows how to configure MockAgent to allow all non-matching URLs to be dispatched as real HTTP requests by calling enableNetConnect() without parameters.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

mockAgent.enableNetConnect()

await request('http://example.com')
// A real request is made
```

----------------------------------------

TITLE: Resolving IPv4 Addresses and Performing Reverse DNS Lookup (CommonJS)
DESCRIPTION: This code snippet shows how to use dns.resolve4() to get IPv4 addresses for a domain and then perform reverse DNS lookups on those addresses using dns.reverse(). It uses CommonJS module syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
const dns = require('node:dns');

dns.resolve4('archive.org', (err, addresses) => {
  if (err) throw err;

  console.log(`addresses: ${JSON.stringify(addresses)}`);

  addresses.forEach((a) => {
    dns.reverse(a, (err, hostnames) => {
      if (err) {
        throw err;
      }
      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);
    });
  });
});
```

----------------------------------------

TITLE: CallTracker Usage Example
DESCRIPTION: Example showing how to use CallTracker to verify function call counts and track function arguments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import process from 'node:process';

const tracker = new assert.CallTracker();

function func() {}

const callsfunc = tracker.calls(func, 1);

callsfunc();

process.on('exit', () => {
  tracker.verify();
});
```

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';

const tracker = new assert.CallTracker();

function func() {}
const callsfunc = tracker.calls(func);
callsfunc(1, 2, 3);

assert.deepStrictEqual(tracker.getCalls(callsfunc),
                       [{ thisArg: undefined, arguments: [1, 2, 3] }]);
```

----------------------------------------

TITLE: Using util.types.isSet to check for Set objects
DESCRIPTION: Demonstrates how to use util.types.isSet() to check if a value is a built-in Set instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_92

LANGUAGE: javascript
CODE:
```
util.types.isSet(new Set());  // Returns true
```

----------------------------------------

TITLE: Granting Package Access to a Team in npm
DESCRIPTION: Command to grant read-only or read-write access to a package for a specific team in an npm organization.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/orgs.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm access grant <read-only|read-write> <org:team> [<package>]
```

----------------------------------------

TITLE: Adding Custom Event Listeners in Commander.js
DESCRIPTION: Demonstrates how to execute custom actions by listening to command and option events.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_34

LANGUAGE: javascript
CODE:
```
program.on('option:verbose', function () {
  process.env.VERBOSE = this.opts().verbose;
});
```

----------------------------------------

TITLE: Executing npm undeprecate command in Bash
DESCRIPTION: This command removes deprecation warnings for a specified package version in the npm registry. It requires a package specification as an argument.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-undeprecate.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm undeprecate <package-spec>
```

----------------------------------------

TITLE: Correct Usage of mkdtemp() with Path Separator in Node.js
DESCRIPTION: Shows the correct way to use mkdtemp() by appending a path separator to ensure the temporary directory is created within the system's temporary directory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_65

LANGUAGE: javascript
CODE:
```
// This method is *CORRECT*:
import { sep } from 'node:path';
mkdtemp(`${tmpDir}${sep}`, (err, directory) => {
  if (err) throw err;
  console.log(directory);
  // Will print something similar to `/tmp/abc123`.
  // A new temporary directory is created within
  // the /tmp directory.
});
```

----------------------------------------

TITLE: Implementing Asynchronous Module Hooks in Node.js
DESCRIPTION: Defines the structure for asynchronous module hooks including initialize, resolve, and load functions. These hooks are used to customize module resolution and loading processes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
export async function initialize({ number, port }) {
  // Receives data from `register`.
}

export async function resolve(specifier, context, nextResolve) {
  // Take an `import` or `require` specifier and resolve it to a URL.
}

export async function load(url, context, nextLoad) {
  // Take a resolved URL and return the source code to be evaluated.
}
```

----------------------------------------

TITLE: Disabling All Network Connections
DESCRIPTION: Shows how to configure MockAgent to block all non-intercepted HTTP requests by using disableNetConnect(), which causes any non-matched request to throw an error.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
import { MockAgent, request } from 'undici'

const mockAgent = new MockAgent()

mockAgent.disableNetConnect()

await request('http://example.com')
// Will throw
```

----------------------------------------

TITLE: Scoped Package Initialization
DESCRIPTION: Example showing how to initialize a new scoped package using npm init.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-logout.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
# accept all defaults, and create a package named "@foo/whatever",
# instead of just named "whatever"
npm init --scope=@foo --yes
```

----------------------------------------

TITLE: Command Line Hook Registration
DESCRIPTION: Examples showing how to register module hooks using command line flags. Demonstrates both --import and --require approaches.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
node --import ./register-hooks.js ./my-app.js
node --require ./register-hooks.js ./my-app.js
```

----------------------------------------

TITLE: Removing Asynchronous Cleanup Hook in Node-API
DESCRIPTION: Unregisters a previously added asynchronous cleanup hook using the handle provided by napi_add_async_cleanup_hook. This prevents the hook from executing if it hasn't started yet.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_62

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_remove_async_cleanup_hook(
    napi_async_cleanup_hook_handle remove_handle);
```

----------------------------------------

TITLE: NPM Rebuild Command Syntax
DESCRIPTION: Shows the basic syntax for the npm rebuild command and its alias
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-rebuild.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm rebuild [<package-spec>] ...]

alias: rb
```

----------------------------------------

TITLE: Error on missing module - Console Output
DESCRIPTION: This snippet shows the default error message displayed in the console when Node.js cannot find the required module after searching all possible resolution locations. The error message includes the module name that was not found. No dependencies are required to see this error—simply require a nonexistent module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_16

LANGUAGE: console
CODE:
```
Error: Cannot find module 'some-library'
```

----------------------------------------

TITLE: Forcing Microtasks to Obey Timeout using microtaskMode in Node.js VM Context (JavaScript)
DESCRIPTION: Illustrates enforcing the timeout behavior on Promise microscheduling by specifying 'microtaskMode: \'afterEvaluate\'' in 'vm.runInNewContext'. Here, microtasks are handled synchronously and are subject to the timeout, causing an infinite loop to be properly interrupted. Dependencies: Node.js 'vm' module. Inputs: as before; outputs: the loop is interrupted as expected.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_26

LANGUAGE: js
CODE:
```
const vm = require('node:vm');

function loop() {
  while (1) console.log(Date.now());
}

vm.runInNewContext(
  'Promise.resolve().then(() => loop());',
  { loop, console },
  { timeout: 5, microtaskMode: 'afterEvaluate' },
);
```

----------------------------------------

TITLE: Example package.json with multiple dependencies in JSON
DESCRIPTION: An example of a package.json file with multiple dependencies, demonstrating how npm handles subdependencies during updates.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-update.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "name": "my-app",
  "dependencies": {
      "dep1": "^1.0.0",
      "dep2": "1.0.0"
  }
}
```

----------------------------------------

TITLE: Iterating Over MIME Parameters Using MIMEType - JavaScript (ESM)
DESCRIPTION: Demonstrates how to iterate over MIME type parameters using the params iterator from the Node.js util module's MIMEType class in ES Module syntax. Requires the 'node:util' module. The snippet constructs a MIMEType object, accesses its parameters, and iterates through them, logging each key-value pair. Inputs are the MIME type string; output is to the console. This requires Node.js v18.7.0 or later for MIMEType support.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_34

LANGUAGE: JavaScript
CODE:
```
import { MIMEType } from 'node:util';

const { params } = new MIMEType('text/plain;foo=bar;xyz=baz');
for (const [name, value] of params) {
  console.log(name, value);
}
// Prints:
//   foo bar
//   xyz baz
```

----------------------------------------

TITLE: Configuring Node.js with External ICU Source (Unpacked) - Bash
DESCRIPTION: Configures Node.js to use an already-unpacked ICU source directory for full or minimal ICU builds. Accepts small-icu or full-icu for the --with-intl flag and a filesystem path to the ICU source. Enables custom or upgraded ICU builds when platform defaults are unavailable or insufficient.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_43

LANGUAGE: Bash
CODE:
```
./configure --with-intl=[small-icu,full-icu] --with-icu-source=/path/to/icu
```

----------------------------------------

TITLE: Extracting File Extension using path.extname (No Extension)
DESCRIPTION: Shows `path.extname()` returning an empty string when the path has no dot or extension.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_18

LANGUAGE: js
CODE:
```
path.extname('index');
// Returns: ''
```

----------------------------------------

TITLE: File Statistics with fs.statSync
DESCRIPTION: Retrieves file statistics synchronously. Supports bigint values and optional throwing behavior when entry doesn't exist.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_97

LANGUAGE: javascript
CODE:
```
fs.statSync(path[, options])
```

----------------------------------------

TITLE: Rejecting Promise After Delay in Promise Constructor
DESCRIPTION: Creates a promise that rejects after a delay using setTimeout within the Promise constructor. This pattern is used to test asynchronous rejection handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-promise-catch-prediction-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
rejectAfterDelayInPromiseConstructor (catch-prediction.js:10:9)
```

----------------------------------------

TITLE: Generating and Saving Diagnostic Report in Node.js
DESCRIPTION: This snippet shows how to generate a diagnostic report using process.report.getReport() and save it to a file using fs.writeFileSync() in both ECMAScript modules and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_75

LANGUAGE: JavaScript
CODE:
```
import { report } from 'node:process';
import util from 'node:util';

const data = report.getReport();
console.log(data.header.nodejsVersion);

// Similar to process.report.writeReport()
import fs from 'node:fs';
fs.writeFileSync('my-report.log', util.inspect(data), 'utf8');
```

LANGUAGE: JavaScript
CODE:
```
const { report } = require('node:process');
const util = require('node:util');

const data = report.getReport();
console.log(data.header.nodejsVersion);

// Similar to process.report.writeReport()
const fs = require('node:fs');
fs.writeFileSync('my-report.log', util.inspect(data), 'utf8');
```

----------------------------------------

TITLE: Testing Arithmetic Operations with Various Numeric Types
DESCRIPTION: Test cases validating arithmetic operations between different numeric values and edge cases. Tests include operations with integers, floats, Infinity, -Infinity, NaN, and string coercion scenarios. Each test verifies both the operation itself and its expected result.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-transforms-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
PASS values.one - +values.someFloat is -41.42
PASS +values.one - +values.someFloat is values.one - values.someFloat
PASS +values.one - +values.someFloat is -41.42
PASS +values.one * values.one is values.one * values.one
PASS +values.one * values.one is 1
PASS values.one * +values.one is values.one * values.one
PASS values.one * +values.one is 1
PASS +values.one * +values.one is values.one * values.one
PASS +values.one * +values.one is 1
```

----------------------------------------

TITLE: Creating HTTP/2 Response Headers Object (JavaScript)
DESCRIPTION: Demonstrates how to define HTTP/2 response headers using a standard JavaScript object. Property keys become lower-case, values are coerced to strings or can be arrays of strings. The example uses `stream.respond()` to send the headers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_49

LANGUAGE: javascript
CODE:
```
const headers = {
  ':status': '200',
  'content-type': 'text-plain',
  'ABC': ['has', 'more', 'than', 'one', 'value'],
};

stream.respond(headers);
```

----------------------------------------

TITLE: Handling Readable Events in Node.js Streams
DESCRIPTION: Example showing how to handle 'readable' events for manual stream reading using while loop.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
const readable = getReadableStreamSomehow();
readable.on('readable', function() {
  // There is some data to read now.
  let data;

  while ((data = this.read()) !== null) {
    console.log(data);
  }
});
```

----------------------------------------

TITLE: Using Context Assertions with Plan - Node.js Test - js
DESCRIPTION: Demonstrates accessing assertion methods through the `t.assert` object, which are bound to the test context. It shows how to set a plan using `t.plan` and then use `t.assert.strictEqual` to perform an assertion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_65

LANGUAGE: js
CODE:
```
test('test', (t) => {
  t.plan(1);
  t.assert.strictEqual(true, true);
});
```

----------------------------------------

TITLE: Increasing File Descriptor Limits with ulimit in Shell
DESCRIPTION: This shell command example is provided as a remediation for system-wide file descriptor exhaustion (EMFILE error). It increases the file descriptor limit in the current shell session to 2048 using ulimit. No additional dependencies are needed but administrative privileges may be required depending on system configuration. The command should be run before starting the Node.js process to prevent "Too many open files" errors when running file-heavy applications.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_14

LANGUAGE: Shell
CODE:
```
ulimit -n 2048
```

----------------------------------------

TITLE: Querying Package.json Attributes with Attribute Selectors in npm
DESCRIPTION: Examples of using attribute selectors to query specific fields in package.json files. This includes querying for test scripts and browser configurations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/dependency-selectors.md#2025-04-23_snippet_1

LANGUAGE: css
CODE:
```
*:attr(scripts, [test~=tap])
```

LANGUAGE: css
CODE:
```
*:attr(testling, browsers, [~=opera])
```

----------------------------------------

TITLE: Configuring Workspace Option in NPM
DESCRIPTION: The workspace option allows running commands in the context of configured workspaces. It can be set to workspace names, paths to workspace directories, or paths to parent workspace directories.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_5

LANGUAGE: markdown
CODE:
```
#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option.

Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project.

This value is not exported to the environment for child processes.
```

----------------------------------------

TITLE: Iterating Buffer Entries Node.js JavaScript
DESCRIPTION: Illustrates using the `buf.entries()` method to create an iterator that yields `[index, byte]` pairs for each byte in the buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_44

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

// Log the entire contents of a `Buffer`.

const buf = Buffer.from('buffer');

for (const pair of buf.entries()) {
  console.log(pair);
}
// Prints:
//   [0, 98]
//   [1, 117]
//   [2, 102]
//   [3, 102]
//   [4, 101]
//   [5, 114]
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

// Log the entire contents of a `Buffer`.

const buf = Buffer.from('buffer');

for (const pair of buf.entries()) {
  console.log(pair);
}
// Prints:
//   [0, 98]
//   [1, 117]
//   [2, 102]
//   [3, 102]
//   [4, 101]
//   [5, 114]
```

----------------------------------------

TITLE: Sending HTTP/2 Response with Trailers (CJS)
DESCRIPTION: Shows how to send an HTTP/2 response that includes trailing headers using CommonJS. It calls `respond()` with `waitForTrailers: true`, listens for the 'wantTrailers' event, and sends trailers using `sendTrailers()` within the event handler.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_28

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  stream.respond({ ':status': 200 }, { waitForTrailers: true });
  stream.on('wantTrailers', () => {
    stream.sendTrailers({ ABC: 'some value to send' });
  });
  stream.end('some data');
});
```

----------------------------------------

TITLE: Iterating Buffer Bytes (Node.js Buffer)
DESCRIPTION: Illustrates using the `buf.values()` method, which returns an iterator for the buffer's bytes, and shows that a Buffer is iterable directly using `for...of`. Dependencies include the `Buffer` class from `node:buffer`. Input is a Buffer instance; output is a sequence of numbers representing byte values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_78

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from('buffer');

for (const value of buf.values()) {
  console.log(value);
}
// Prints:
//   98
//   117
//   102
//   102
//   101
//   114

for (const value of buf) {
  console.log(value);
}
// Prints:
//   98
//   117
//   102
//   102
//   101
//   114
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('buffer');

for (const value of buf.values()) {
  console.log(value);
}
// Prints:
//   98
//   117
//   102
//   102
//   101
//   114

for (const value of buf) {
  console.log(value);
}
// Prints:
//   98
//   117
//   102
//   102
//   101
//   114
```

----------------------------------------

TITLE: Computing CRC32 Checksums with CommonJS
DESCRIPTION: Demonstrates how to compute CRC32 checksums using zlib in Node.js with CommonJS modules. Shows examples of checksum calculation for both UTF-8 and UTF-16LE encoded strings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
const zlib = require('node:zlib');
const { Buffer } = require('node:buffer');

let crc = zlib.crc32('hello');  // 907060870
crc = zlib.crc32('world', crc);  // 4192936109

crc = zlib.crc32(Buffer.from('hello', 'utf16le'));  // 1427272415
crc = zlib.crc32(Buffer.from('world', 'utf16le'), crc);  // 4150509955
```

----------------------------------------

TITLE: Using Buffer Paths with Node.js fs Promises
DESCRIPTION: Example of using Buffer-based paths with the promise-based fs API, specifically for POSIX systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_119

LANGUAGE: javascript
CODE:
```
import { open } from 'node:fs/promises';
import { Buffer } from 'node:buffer';

let fd;
try {
  fd = await open(Buffer.from('/open/some/file.txt'), 'r');
  // Do something with the file
} finally {
  await fd?.close();
}
```

----------------------------------------

TITLE: Creating and Using PerformanceObserver in CommonJS
DESCRIPTION: Shows how to create a PerformanceObserver, observe mark entries, and handle performance data in CommonJS modules. The observer logs entries, clears marks and measures, and disconnects itself after processing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((list, observer) => {
  console.log(list.getEntries());

  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ entryTypes: ['mark'], buffered: true });

performance.mark('test');
```

----------------------------------------

TITLE: Adding KeyObject.prototype.toCryptoKey in Node.js Crypto Module
DESCRIPTION: This commit adds a new method toCryptoKey to the KeyObject prototype in the crypto module. It allows conversion of KeyObject instances to CryptoKey objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_25

LANGUAGE: JavaScript
CODE:
```
KeyObject.prototype.toCryptoKey
```

----------------------------------------

TITLE: Validating HTTP Header Names in CommonJS
DESCRIPTION: Shows how to use the validateHeaderName function from Node.js HTTP module using CommonJS require. The example demonstrates error handling when an invalid header name is provided.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_63

LANGUAGE: cjs
CODE:
```
const { validateHeaderName } = require('node:http');

try {
  validateHeaderName('');
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code); // --> 'ERR_INVALID_HTTP_TOKEN'
  console.error(err.message); // --> 'Header name must be a valid HTTP token [""]'
}
```

----------------------------------------

TITLE: Custom Console Instance Creation
DESCRIPTION: Shows how to create a custom Console instance with specific output streams for logging and errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const out = getStreamSomehow();
const err = getStreamSomehow();
const myConsole = new console.Console(out, err);

myConsole.log('hello world');
// Prints: hello world, to out
myConsole.log('hello %s', 'world');
// Prints: hello world, to out
myConsole.error(new Error('Whoops, something bad happened'));
// Prints: [Error: Whoops, something bad happened], to err

const name = 'Will Robinson';
myConsole.warn(`Danger ${name}! Danger!`);
// Prints: Danger Will Robinson! Danger!, to err
```

----------------------------------------

TITLE: Handling Client Drain Event in Undici (JavaScript)
DESCRIPTION: This example shows how to handle the 'drain' event emitted by an Undici client when the pipeline is no longer busy. It sets up an HTTP server, creates a client, sends multiple requests, and listens for the drain event to close the connections.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Client.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.end('Hello, World!')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

client.on('drain', () => {
  console.log('drain event')
  client.close()
  server.close()
})

const requests = [
  client.request({ path: '/', method: 'GET' }),
  client.request({ path: '/', method: 'GET' }),
  client.request({ path: '/', method: 'GET' })
]

await Promise.all(requests)

console.log('requests completed')
```

----------------------------------------

TITLE: Using Path Separators in Node.js
DESCRIPTION: The path.sep property provides the platform-specific path segment separator: backslash on Windows and forward slash on POSIX systems. It can be used to split paths appropriately.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
'foo/bar/baz'.split(path.sep);
// Returns: ['foo', 'bar', 'baz']
```

LANGUAGE: javascript
CODE:
```
'foo\\bar\\baz'.split(path.sep);
// Returns: ['foo', 'bar', 'baz']
```

----------------------------------------

TITLE: Configuring the 'force' Option in npm
DESCRIPTION: Explains the `--force` flag (Boolean, default: false) which bypasses several safety checks and protections in npm. Using this option allows potentially destructive actions like clobbering files, ignoring engine mismatches, modifying git history uncleanly, force-fixing audits outside dependency ranges, and unpublishing packages. It should be used with extreme caution.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_12

LANGUAGE: text
CODE:
```
#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input.

* Allow clobbering non-npm files in global installs.
* Allow the `npm version` command to work on an unclean git repository.
* Allow deleting the cache folder with `npm cache clean`.
* Allow installing packages that have an `engines` declaration requiring a
  different version of npm.
* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled.
* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes).
* Allow unpublishing all versions of a published package.
* Allow conflicting peerDependencies to be installed in the root project.
* Implicitly set `--yes` during `npm init`.
* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version).

If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!
```

----------------------------------------

TITLE: Finding Files using fs.glob in Node.js (MJS)
DESCRIPTION: Shows how to find files matching a glob pattern (`**/*.js`) asynchronously using the `fs.glob` function in Node.js with ES Module syntax. Requires the `glob` function from the `node:fs` module. The callback function receives an error object (if any) and an array of strings representing the matching file paths found within the current working directory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_59

LANGUAGE: mjs
CODE:
```
import { glob } from 'node:fs';

glob('**/*.js', (err, matches) => {
  if (err) throw err;
  console.log(matches);
});
```

----------------------------------------

TITLE: Socket Error Information Interface
DESCRIPTION: TypeScript interface defining the structure of socket metadata available in SocketError instances. Includes properties for local and remote connection details, timeout settings, and transfer statistics.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Errors.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
interface SocketInfo {
  localAddress?: string
  localPort?: number
  remoteAddress?: string
  remotePort?: number
  remoteFamily?: string
  timeout?: number
  bytesWritten?: number
  bytesRead?: number
}
```

----------------------------------------

TITLE: Deleting Async Work in Node-API (C)
DESCRIPTION: Frees a previously allocated async work object. This function should be called after the async work is completed or cancelled to properly clean up resources. It can be safely called even when there is a pending JavaScript exception.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_189

LANGUAGE: c
CODE:
```
napi_status napi_delete_async_work(napi_env env,
                                   napi_async_work work);
```

----------------------------------------

TITLE: Using util.types.isTypedArray to check for TypedArray objects
DESCRIPTION: Shows how to use util.types.isTypedArray() to check if a value is a built-in TypedArray instance, such as Uint8Array or Float64Array.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_97

LANGUAGE: javascript
CODE:
```
util.types.isTypedArray(new ArrayBuffer());  // Returns false
util.types.isTypedArray(new Uint8Array());  // Returns true
util.types.isTypedArray(new Float64Array());  // Returns true
```

----------------------------------------

TITLE: Handling Worker Fork Event with Custom Timeout in Node.js Cluster
DESCRIPTION: Illustrates using the 'fork' event to manage worker startup. A timeout is set when a worker is forked. This timeout is cleared if the worker emits a 'listening' event, indicating successful startup. If the worker exits or the timeout expires before listening, an error message is logged.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_12

LANGUAGE: js
CODE:
```
const timeouts = [];
function errorMsg() {
  console.error('Something must be wrong with the connection ...');
}

cluster.on('fork', (worker) => {
  timeouts[worker.id] = setTimeout(errorMsg, 2000);
});
cluster.on('listening', (worker, address) => {
  clearTimeout(timeouts[worker.id]);
});
cluster.on('exit', (worker, code, signal) => {
  clearTimeout(timeouts[worker.id]);
  errorMsg();
});
```

----------------------------------------

TITLE: Creating Custom Test Reporter with Generator (ESM)
DESCRIPTION: Shows how to create a custom test reporter using an async generator function in ESM. The generator consumes test events from a source stream and yields formatted strings based on the event type, offering an alternative to `stream.Transform`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_32

LANGUAGE: mjs
CODE:
```
export default async function * customReporter(source) {
  for await (const event of source) {
    switch (event.type) {
      case 'test:dequeue':
        yield `test ${event.data.name} dequeued\n`;
        break;
      case 'test:enqueue':
        yield `test ${event.data.name} enqueued\n`;
        break;
      case 'test:watch:drained':
        yield 'test watch queue drained\n';
        break;
      case 'test:start':
        yield `test ${event.data.name} started\n`;
        break;
      case 'test:pass':
        yield `test ${event.data.name} passed\n`;
        break;
      case 'test:fail':
        yield `test ${event.data.name} failed\n`;
        break;
      case 'test:plan':
        yield 'test plan\n';
        break;
      case 'test:diagnostic':
      case 'test:stderr':
      case 'test:stdout':
        yield `${event.data.message}\n`;
        break;
      case 'test:coverage': {
        const { totalLineCount } = event.data.summary.totals;
        yield `total line count: ${totalLineCount}\n`;
        break;
      }
    }
  }
}
```

----------------------------------------

TITLE: Testing Comparison Operations with Numbers in JavaScript
DESCRIPTION: This snippet tests various comparison operations (>, >=) with numbers, including integers, floats, and zero. It covers direct comparisons and conditional statements.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-greater-expected.txt#2025-04-23_snippet_21

LANGUAGE: JavaScript
CODE:
```
if (0.5 >= 1 || 0) true; else false
if (1.5 >= 2 || 0) true; else false
if (1 <  1.5 || 0) true; else false
if (2 <  1.5 || 0) true; else false
zero >= zero
1 >= zero
1 >= 1
1 > zero
zero >= 1
1 >= 2
1 > 1
1 > 2
```

----------------------------------------

TITLE: Configuring Node.js Addon Build with binding.gyp
DESCRIPTION: Demonstrates how to create a binding.gyp file to configure the build process for a Node.js addon using node-gyp.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{
  "targets": [
    {
      "target_name": "addon",
      "sources": [ "hello.cc" ]
    }
  ]
}
```

----------------------------------------

TITLE: Checking BigInt64Array in JavaScript
DESCRIPTION: Demonstrates the use of util.types.isBigInt64Array() to check if a value is a BigInt64Array instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_64

LANGUAGE: javascript
CODE:
```
util.types.isBigInt64Array(new BigInt64Array());   // Returns true
util.types.isBigInt64Array(new BigUint64Array());  // Returns false
```

----------------------------------------

TITLE: Adding Members to a Team in npm
DESCRIPTION: Command to add a user to a specific team within an npm organization.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/orgs.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm team add <org:team> <user>
```

----------------------------------------

TITLE: Starting a REPL Session with Injected Context Variable (CommonJS) in JavaScript
DESCRIPTION: Starts a REPL session in a Node.js script (CommonJS), injecting a variable 'm' into the REPL context for interactive use. The code depends on the built-in 'node:repl' module. The prompt parameter customizes the session’s command line interface. The user can reference 'm' inside the REPL, which reflects the value 'message'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_3

LANGUAGE: cjs
CODE:
```
const repl = require('node:repl');
const msg = 'message';

repl.start('> ').context.m = msg;
```

----------------------------------------

TITLE: Creating, Linking, and Evaluating Modules with vm.Module (CJS) - JavaScript
DESCRIPTION: This snippet presents the same vm.SourceTextModule workflow as above, but using CommonJS (require) syntax. It performs module parsing, dependency linking with a custom linker, and evaluation in an asynchronous IIFE. Dependencies must be resolved by the async linker and modules are evaluated inside a Node.js VM context. Prerequisites: Node.js with --experimental-vm-modules flag. Inputs include module source strings and context objects; evaluation prints results. Limitation: In production, modules should be cached to prevent duplicate instantiation during linking.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
const vm = require('node:vm');\n\nconst contextifiedObject = vm.createContext({\n  secret: 42,\n  print: console.log,\n});\n\n(async () => {\n  // Step 1\n  //\n  // Create a Module by constructing a new `vm.SourceTextModule` object. This\n  // parses the provided source text, throwing a `SyntaxError` if anything goes\n  // wrong. By default, a Module is created in the top context. But here, we\n  // specify `contextifiedObject` as the context this Module belongs to.\n  //\n  // Here, we attempt to obtain the default export from the module "foo", and\n  // put it into local binding "secret".\n\n  const bar = new vm.SourceTextModule(`\n    import s from 'foo';\n    s;\n    print(s);\n  `, { context: contextifiedObject });\n\n  // Step 2\n  //\n  // "Link" the imported dependencies of this Module to it.\n  //\n  // The provided linking callback (the "linker") accepts two arguments: the\n  // parent module (`bar` in this case) and the string that is the specifier of\n  // the imported module. The callback is expected to return a Module that\n  // corresponds to the provided specifier, with certain requirements documented\n  // in `module.link()`.\n  //\n  // If linking has not started for the returned Module, the same linker\n  // callback will be called on the returned Module.\n  //\n  // Even top-level Modules without dependencies must be explicitly linked. The\n  // callback provided would never be called, however.\n  //\n  // The link() method returns a Promise that will be resolved when all the\n  // Promises returned by the linker resolve.\n  //\n  // Note: This is a contrived example in that the linker function creates a new\n  // "foo" module every time it is called. In a full-fledged module system, a\n  // cache would probably be used to avoid duplicated modules.\n\n  async function linker(specifier, referencingModule) {\n    if (specifier === 'foo') {\n      return new vm.SourceTextModule(`\n        // The "secret" variable refers to the global variable we added to\n        // "contextifiedObject" when creating the context.\n        export default secret;\n      `, { context: referencingModule.context });\n\n      // Using `contextifiedObject` instead of `referencingModule.context`\n      // here would work as well.\n    }\n    throw new Error(`Unable to resolve dependency: ${specifier}`);\n  }\n  await bar.link(linker);\n\n  // Step 3\n  //\n  // Evaluate the Module. The evaluate() method returns a promise which will\n  // resolve after the module has finished evaluating.\n\n  // Prints 42.\n  await bar.evaluate();\n})();
```

----------------------------------------

TITLE: Allocating Buffer with String Fill and Encoding using Buffer.alloc (CJS)
DESCRIPTION: Demonstrates allocating a new Node.js Buffer of a specified size and initializing it by filling it with a given string interpreted using a specific encoding (base64 in this case). Requires requiring `Buffer` from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');

console.log(buf);
// Prints: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>
```

----------------------------------------

TITLE: Installing Dependencies with Preferred Tag
DESCRIPTION: Demonstrates how to specify a preferred tag when installing dependencies, which can be used with npm install and other commands that resolve dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-dist-tag.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm install --tag <tag>
```

----------------------------------------

TITLE: Sending Async Wake-up Signal in C
DESCRIPTION: Wakes up the event loop and calls the async handle's callback. It's safe to call from any thread, and the callback will be executed on the loop thread. This function is async-signal-safe and can be called from signal handlers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/async.rst#2025-04-23_snippet_1

LANGUAGE: C
CODE:
```
int uv_async_send(uv_async_t* async)
```

----------------------------------------

TITLE: Writing Little-Endian Signed 64-bit Integer (Node.js Buffer)
DESCRIPTION: Demonstrates using `buf.writeBigInt64LE()` to write a BigInt value into the buffer as a little-endian 64-bit signed integer. The example initializes a buffer and writes a hexadecimal BigInt, showing the resulting byte order. Dependencies include the `Buffer` class from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_81

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeBigInt64LE(0x0102030405060708n, 0);

console.log(buf);
// Prints: <Buffer 08 07 06 05 04 03 02 01>
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeBigInt64LE(0x0102030405060708n, 0);

console.log(buf);
// Prints: <Buffer 08 07 06 05 04 03 02 01>
```

----------------------------------------

TITLE: Directory Removal with fs.rmdirSync
DESCRIPTION: Synchronously removes a directory. Supports recursive removal with retry options. Can handle WHATWG URL objects using file: protocol.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_95

LANGUAGE: javascript
CODE:
```
fs.rmdirSync(path[, options])
```

----------------------------------------

TITLE: Using Synchronous Single-Call Crypto Operation in Node.js
DESCRIPTION: Example of a synchronous single-call crypto operation that compares two arrays using timingSafeEqual. This operation blocks the main thread and performs its action immediately.
SOURCE: https://github.com/nodejs/node/blob/main/src/crypto/README.md#2025-04-23_snippet_1

LANGUAGE: js
CODE:
```
// Example synchronous single-call operation
const a = new Uint8Array(10);
const b = new Uint8Array(10);
crypto.timingSafeEqual(a, b);
```

----------------------------------------

TITLE: Matching a Path with a Glob Pattern (Failed Match)
DESCRIPTION: Demonstrates the experimental `path.matchesGlob()` function returning false when the path '/foo/bar*' does not match the glob pattern 'foo/bird'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_27

LANGUAGE: js
CODE:
```
path.matchesGlob('/foo/bar*', 'foo/bird'); // false
```

----------------------------------------

TITLE: Simple EnvHttpProxyAgent Creation
DESCRIPTION: Basic example showing how to create an EnvHttpProxyAgent instance without any configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/EnvHttpProxyAgent.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { EnvHttpProxyAgent } from 'undici'

const envHttpProxyAgent = new EnvHttpProxyAgent()
```

----------------------------------------

TITLE: Creating a Readline Interface with CommonJS in Node.js (JavaScript)
DESCRIPTION: Illustrates creating a readline.Interface using CommonJS require() syntax. Input and output streams are process.stdin and process.stdout, respectively. No additional options are set, providing a basic interactive shell foundation. Suitable for older Node.js versions or scripts using CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_26

LANGUAGE: cjs
CODE:
```
const { createInterface } = require('node:readline');\nconst rl = createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});
```

----------------------------------------

TITLE: TCP Client with Buffer Reading in Node.js (ESM)
DESCRIPTION: Example of creating a TCP client with custom buffer reading configuration using the onread option in ES modules format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_28

LANGUAGE: mjs
CODE:
```
import net from 'node:net';
import { Buffer } from 'node:buffer';
net.createConnection({
  port: 8124,
  onread: {
    // Reuses a 4KiB Buffer for every read from the socket.
    buffer: Buffer.alloc(4 * 1024),
    callback: function(nread, buf) {
      // Received data is available in `buf` from 0 to `nread`.
      console.log(buf.toString('utf8', 0, nread));
    },
  },
});
```

----------------------------------------

TITLE: Casting V8 Local Value Handles (C++)
DESCRIPTION: Shows how to cast a generic `v8::Local<v8::Value>` to a specific type like `v8::Local<v8::Uint8Array>` using the `.As<...>()` method. Emphasizes the critical requirement of first verifying the object's type using an `IsX()` method (like `IsUint8Array`) before casting to avoid crashes.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_4

LANGUAGE: C++
CODE:
```
v8::Local<v8::Value> some_value;
// CHECK() is a Node.js utilitity that works similar to assert().
CHECK(some_value->IsUint8Array());
v8::Local<v8::Uint8Array> as_uint8 = some_value.As<v8::Uint8Array>();
```

----------------------------------------

TITLE: Reporting CallTracker State - Node.js assert - ECMAScript Module (mjs)
DESCRIPTION: Demonstrates how to create a CallTracker with Node.js's assert module, wrap a function to track its call count, and use tracker.report() to get an array describing the expected and actual call information for each tracked function. Dependencies include the built-in 'node:assert' module. Parameters include the original function and the number of expected invocations. Input is a function and expected count, output is an array of tracked call information.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_5

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}

// Returns a function that wraps func() that must be called exact times
// before tracker.verify().
const callsfunc = tracker.calls(func, 2);

// Returns an array containing information on callsfunc()
console.log(tracker.report());
// [
//  {
//    message: 'Expected the func function to be executed 2 time(s) but was
//    executed 0 time(s).',
//    actual: 0,
//    expected: 2,
//    operator: 'func',
//    stack: stack trace
//  }
// ]
```

----------------------------------------

TITLE: Creating TypedArray from Buffer (Copying Data) - JavaScript
DESCRIPTION: Demonstrates how constructing a TypedArray (Uint32Array) directly from a Buffer copies the Buffer's contents. The TypedArray constructor interprets the source Buffer as an array of integers, not necessarily a byte sequence for the target type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_6

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([1, 2, 3, 4]);
const uint32array = new Uint32Array(buf);

console.log(uint32array);

// Prints: Uint32Array(4) [ 1, 2, 3, 4 ]
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([1, 2, 3, 4]);
const uint32array = new Uint32Array(buf);

console.log(uint32array);

// Prints: Uint32Array(4) [ 1, 2, 3, 4 ]
```

----------------------------------------

TITLE: Checking for Pending Exceptions in Node-API
DESCRIPTION: Function to check if there is a pending JavaScript exception. Returns boolean result.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_45

LANGUAGE: c
CODE:
```
napi_status napi_is_exception_pending(napi_env env, bool* result);
```

----------------------------------------

TITLE: Granting npm Cache Read Access with npx Permissions
DESCRIPTION: Illustrates running a package with `npx` and Node.js permissions, granting read access (`--allow-fs-read`) to the npm cache directory. This is useful when `npx` installs a package temporarily or relies on its cache, requiring read access to that location. The `$(npm config get cache)` command substitution dynamically finds the npm cache path.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/permissions.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npx --node-options="--permission --allow-fs-read=$(npm config get cache)" package-name
```

----------------------------------------

TITLE: Collecting Trace Events via Node.js Inspector API - JavaScript (ESM)
DESCRIPTION: This snippet demonstrates how to use the Node.js Inspector API with ECMAScript modules to collect V8 tracing data. It creates a Session, connects to the debugger, sets up event listeners for trace data, and starts/stops tracing using async functions and Promises. Requires a recent version of Node.js supporting native ESM and inspector. The function collects data for 1 second before stopping tracing and disconnecting the session. Input parameters include the event category ('v8') and output is an array of event chunks logged to the console. Assumes network connectivity is not required as it operates within the local process context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tracing.md#2025-04-23_snippet_6

LANGUAGE: mjs
CODE:
```
import { Session } from 'node:inspector';\nconst session = new Session();\nsession.connect();\n\nfunction post(message, data) {\n  return new Promise((resolve, reject) => {\n    session.post(message, data, (err, result) => {\n      if (err)\n        reject(new Error(JSON.stringify(err)));\n      else\n        resolve(result);\n    });\n  });\n}\n\nasync function collect() {\n  const data = [];\n  session.on('NodeTracing.dataCollected', (chunk) => data.push(chunk));\n  session.on('NodeTracing.tracingComplete', () => {\n    // done\n  });\n  const traceConfig = { includedCategories: ['v8'] };\n  await post('NodeTracing.start', { traceConfig });\n  // do something\n  setTimeout(() => {\n    post('NodeTracing.stop').then(() => {\n      session.disconnect();\n      console.log(data);\n    });\n  }, 1000);\n}\n\ncollect();
```

----------------------------------------

TITLE: Lifecycle Hooks in Commander.js
DESCRIPTION: Demonstrates how to implement lifecycle hooks for tracing command execution, including access to command arguments and options.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
program
  .option('-t, --trace', 'display trace statements for commands')
  .hook('preAction', (thisCommand, actionCommand) => {
    if (thisCommand.opts().trace) {
      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);
      console.log('arguments: %O', actionCommand.args);
      console.log('options: %o', actionCommand.opts());
    }
  });
```

----------------------------------------

TITLE: Handling TLS Session Event for Session Resumption with Node.js TLSSocket - JavaScript
DESCRIPTION: This snippet captures the 'session' event on a tls.TLSSocket, which provides the session Buffer when a new session or ticket is received. The session can be reused to resume a TLS connection, improving performance. It demonstrates using the 'once' method to only process the first session received, which is a common requirement for most clients. The snippet is dependent on a pre-initialized tls.TLSSocket instance and the tls module for the connect() method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
tlsSocket.once('session', (session) => {\n  // The session can be used immediately or later.\n  tls.connect({\n    session: session,\n    // Other connect options...\n  });\n});
```

----------------------------------------

TITLE: TCP Client with Buffer Reading in Node.js (CommonJS)
DESCRIPTION: Example of creating a TCP client with custom buffer reading configuration using the onread option in CommonJS format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_29

LANGUAGE: cjs
CODE:
```
const net = require('node:net');
net.createConnection({
  port: 8124,
  onread: {
    // Reuses a 4KiB Buffer for every read from the socket.
    buffer: Buffer.alloc(4 * 1024),
    callback: function(nread, buf) {
      // Received data is available in `buf` from 0 to `nread`.
      console.log(buf.toString('utf8', 0, nread));
    },
  },
});
```

----------------------------------------

TITLE: Reading UInt16LE from Buffer - Node.js
DESCRIPTION: Demonstrates reading an unsigned, little-endian 16-bit integer from a Buffer using `readUInt16LE`. It shows reading from a buffer with hex values and converting the output to hex strings, highlighting the difference in endianness compared to `readUInt16BE`. It also includes an out-of-range example.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_66

LANGUAGE: JavaScript (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56]);

console.log(buf.readUInt16LE(0).toString(16));
// Prints: 3412
console.log(buf.readUInt16LE(1).toString(16));
// Prints: 5634
console.log(buf.readUInt16LE(2).toString(16));
// Throws ERR_OUT_OF_RANGE.
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56]);

console.log(buf.readUInt16LE(0).toString(16));
// Prints: 3412
console.log(buf.readUInt16LE(1).toString(16));
// Prints: 5634
console.log(buf.readUInt16LE(2).toString(16));
// Throws ERR_OUT_OF_RANGE.
```

----------------------------------------

TITLE: Using util.styleText() for terminal output in Node.js (CommonJS)
DESCRIPTION: Demonstrates how to use util.styleText() to format text for terminal output with color and style in CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_52

LANGUAGE: JavaScript
CODE:
```
const { styleText } = require('node:util');
const { stderr } = require('node:process');

const successMessage = styleText('green', 'Success!');
console.log(successMessage);

const errorMessage = styleText(
  'red',
  'Error! Error!',
  // Validate if process.stderr has TTY
  { stream: stderr },
);
console.error(errorMessage);
```

----------------------------------------

TITLE: Using assert as a Function in CommonJS
DESCRIPTION: Demonstrates how to use assert() function directly in CommonJS format, which works the same way as assert.ok().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_41

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');

// Using `assert()` works the same:
assert(0);
// AssertionError: The expression evaluated to a falsy value:
//
//   assert(0)
```

----------------------------------------

TITLE: Starting a REPL Session with Injected Context Variable (ECMAScript Module) in JavaScript
DESCRIPTION: Demonstrates starting a REPL session and injecting a variable ('m') into the REPL context using ECMAScript Modules. Requires Node.js ESM support and the 'node:repl' module. The main parameter is the REPL prompt string ('> '), and 'm' is set so users can reference it during the interactive session. Inputs are handled through the REPL; the output is an interactive session where 'm' equals the string 'message'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_2

LANGUAGE: mjs
CODE:
```
import repl from 'node:repl';
const msg = 'message';

repl.start('> ').context.m = msg;
```

----------------------------------------

TITLE: Checking Date Object in JavaScript
DESCRIPTION: Shows how to use util.types.isDate() to check if a value is a built-in Date instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_70

LANGUAGE: javascript
CODE:
```
util.types.isDate(new Date());  // Returns true
```

----------------------------------------

TITLE: Filling Buffer with Hex String in Node.js (cjs)
DESCRIPTION: Shows how to fill a Buffer using a hexadecimal string and the 'hex' encoding option in Node.js CommonJS syntax, explaining that invalid hex data will be truncated and may cause exceptions if no valid data remains.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_51

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(5);

console.log(buf.fill('a'));
// Prints: <Buffer 61 61 61 61 61>
console.log(buf.fill('aazz', 'hex'));
// Prints: <Buffer aa aa aa aa aa>
console.log(buf.fill('zz', 'hex'));
// Throws an exception.
```

----------------------------------------

TITLE: Creating TCP Client Connection in Node.js (CommonJS)
DESCRIPTION: Example of creating a TCP client connection using net.createConnection in CommonJS format. Demonstrates connecting to port 8124 and handling basic socket events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_26

LANGUAGE: cjs
CODE:
```
const net = require('node:net');
const client = net.createConnection({ port: 8124 }, () => {
  // 'connect' listener.
  console.log('connected to server!');
  client.write('world!\r\n');
});
client.on('data', (data) => {
  console.log(data.toString());
  client.end();
});
client.on('end', () => {
  console.log('disconnected from server');
});
```

----------------------------------------

TITLE: Inspecting Objects with Compact and Depth Options
DESCRIPTION: Shows how to use util.inspect() with different formatting options like compact and depth to control output appearance
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
console.log(inspect(o, { compact: true, depth: 5, breakLength: 80 }));
console.log(inspect(o, { compact: false, depth: 5, breakLength: 80 }));
```

----------------------------------------

TITLE: Local Proxy Request Implementation
DESCRIPTION: Demonstrates using EnvHttpProxyAgent with request API using local dispatcher configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/EnvHttpProxyAgent.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { EnvHttpProxyAgent, request } from 'undici'

const envHttpProxyAgent = new EnvHttpProxyAgent()

const {
  statusCode,
  body
} = await request('http://localhost:3000/foo', { dispatcher: envHttpProxyAgent })

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Inspecting Wasm Bytecode Output in Node.js Test
DESCRIPTION: This snippet displays the raw bytecode (in hexadecimal representation with offset comments) of a WebAssembly module named `moduleName` as captured during a Node.js test session. It represents the binary format corresponding to the disassembled text, defining two functions (`f1`, `f2`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-scripts-disassembly-expected.txt#2025-04-23_snippet_0

LANGUAGE: hex
CODE:
```
bytecode:
0x00 0x61 0x73 0x6d 0x01 0x00 0x00 0x00  ;; offset 0..7
0x01 0x09 0x02 0x60 0x01 0x6f 0x01 0x7f  ;; offset 8..15
0x60 0x00 0x00 0x03 0x03 0x02 0x00 0x01  ;; offset 16..23
0x0a 0x12 0x02 0x0b 0x02 0x01 0x7f 0x01  ;; offset 24..31
0x7c 0x20 0x01 0x1a 0x41 0x2a 0x0b 0x04  ;; offset 32..39
0x00 0x01 0x01 0x0b 0x00 0x27 0x04 0x6e  ;; offset 40..47
0x61 0x6d 0x65 0x00 0x0b 0x0a 0x6d 0x6f  ;; offset 48..55
0x64 0x75 0x6c 0x65 0x4e 0x61 0x6d 0x65  ;; offset 56..63
0x01 0x09 0x02 0x00 0x02 0x66 0x31 0x01  ;; offset 64..71
0x02 0x66 0x32 0x02 0x08 0x01 0x00 0x01  ;; offset 72..79
0x01 0x03 0x78 0x79 0x7a
```

----------------------------------------

TITLE: Testing Math Operations with Various Data Types in JavaScript
DESCRIPTION: This comprehensive test suite checks the behavior of mathematical operations (multiplication, division, subtraction) with different data types and special numeric values. It ensures consistency when using unary plus and multiplication by 1 across various scenarios.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-transforms-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
PASS values.someInt * 1 is +values.someInt
PASS values.someInt * 1 is 42
PASS 1 * values.someInt is +values.someInt
PASS 1 * values.someInt is 42
PASS values.someFloat * 1 is +values.someFloat
PASS values.someFloat * 1 is 42.42
PASS 1 * values.someFloat is +values.someFloat
PASS 1 * values.someFloat is 42.42
PASS values.one * 1 is +values.one
PASS values.one * 1 is 1
PASS 1 * values.one is +values.one
PASS 1 * values.one is 1
PASS values.minusOne * 1 is +values.minusOne
PASS values.minusOne * 1 is -1
PASS 1 * values.minusOne is +values.minusOne
PASS 1 * values.minusOne is -1
PASS values.zero * 1 is +values.zero
PASS values.zero * 1 is 0
PASS 1 * values.zero is +values.zero
PASS 1 * values.zero is 0
PASS values.minusZero * 1 is +values.minusZero
PASS values.minusZero * 1 is -0
PASS 1 * values.minusZero is +values.minusZero
PASS 1 * values.minusZero is -0
PASS values.infinity * 1 is +values.infinity
PASS values.infinity * 1 is Infinity
PASS 1 * values.infinity is +values.infinity
PASS 1 * values.infinity is Infinity
PASS values.minusInfinity * 1 is +values.minusInfinity
PASS values.minusInfinity * 1 is -Infinity
PASS 1 * values.minusInfinity is +values.minusInfinity
PASS 1 * values.minusInfinity is -Infinity
PASS values.notANumber * 1 is +values.notANumber
PASS values.notANumber * 1 is NaN
PASS 1 * values.notANumber is +values.notANumber
PASS 1 * values.notANumber is NaN
PASS values.nonNumberString * 1 is +values.nonNumberString
PASS values.nonNumberString * 1 is NaN
PASS 1 * values.nonNumberString is +values.nonNumberString
PASS 1 * values.nonNumberString is NaN
PASS values.someFloatString * 1 is +values.someFloatString
PASS values.someFloatString * 1 is 42.42
PASS 1 * values.someFloatString is +values.someFloatString
PASS 1 * values.someFloatString is 42.42
PASS +values.someInt * values.someInt is values.someInt * values.someInt
PASS +values.someInt * values.someInt is 1764
PASS values.someInt * +values.someInt is values.someInt * values.someInt
PASS values.someInt * +values.someInt is 1764
PASS +values.someInt * +values.someInt is values.someInt * values.someInt
PASS +values.someInt * +values.someInt is 1764
PASS +values.someInt / values.someInt is values.someInt / values.someInt
PASS +values.someInt / values.someInt is 1
PASS values.someInt / +values.someInt is values.someInt / values.someInt
PASS values.someInt / +values.someInt is 1
PASS +values.someInt / +values.someInt is values.someInt / values.someInt
PASS +values.someInt / +values.someInt is 1
PASS +values.someInt - values.someInt is values.someInt - values.someInt
PASS +values.someInt - values.someInt is 0
PASS values.someInt - +values.someInt is values.someInt - values.someInt
PASS values.someInt - +values.someInt is 0
PASS +values.someInt - +values.someInt is values.someInt - values.someInt
PASS +values.someInt - +values.someInt is 0
PASS +values.someInt * values.someFloat is values.someInt * values.someFloat
PASS +values.someInt * values.someFloat is 1781.64
PASS values.someInt * +values.someFloat is values.someInt * values.someFloat
PASS values.someInt * +values.someFloat is 1781.64
PASS +values.someInt * +values.someFloat is values.someInt * values.someFloat
PASS +values.someInt * +values.someFloat is 1781.64
PASS +values.someInt / values.someFloat is values.someInt / values.someFloat
PASS +values.someInt / values.someFloat is 0.9900990099009901
PASS values.someInt / +values.someFloat is values.someInt / values.someFloat
PASS values.someInt / +values.someFloat is 0.9900990099009901
PASS +values.someInt / +values.someFloat is values.someInt / values.someFloat
PASS +values.someInt / +values.someFloat is 0.9900990099009901
PASS +values.someInt - values.someFloat is values.someInt - values.someFloat
PASS +values.someInt - values.someFloat is -0.4200000000000017
PASS values.someInt - +values.someFloat is values.someInt - values.someFloat
PASS values.someInt - +values.someFloat is -0.4200000000000017
PASS +values.someInt - +values.someFloat is values.someInt - values.someFloat
PASS +values.someInt - +values.someFloat is -0.4200000000000017
PASS +values.someInt * values.one is values.someInt * values.one
PASS +values.someInt * values.one is 42
PASS values.someInt * +values.one is values.someInt * values.one
PASS values.someInt * +values.one is 42
PASS +values.someInt * +values.one is values.someInt * values.one
PASS +values.someInt * +values.one is 42
PASS +values.someInt / values.one is values.someInt / values.one
PASS +values.someInt / values.one is 42
PASS values.someInt / +values.one is values.someInt / values.one
PASS values.someInt / +values.one is 42
PASS +values.someInt / +values.one is values.someInt / values.one
PASS +values.someInt / +values.one is 42
PASS +values.someInt - values.one is values.someInt - values.one
PASS +values.someInt - values.one is 41
PASS values.someInt - +values.one is values.someInt - values.one
PASS values.someInt - +values.one is 41
PASS +values.someInt - +values.one is values.someInt - values.one
PASS +values.someInt - +values.one is 41
PASS +values.someInt * values.minusOne is values.someInt * values.minusOne
PASS +values.someInt * values.minusOne is -42
PASS values.someInt * +values.minusOne is values.someInt * values.minusOne
PASS values.someInt * +values.minusOne is -42
PASS +values.someInt * +values.minusOne is values.someInt * values.minusOne
PASS +values.someInt * +values.minusOne is -42
PASS +values.someInt / values.minusOne is values.someInt / values.minusOne
PASS +values.someInt / values.minusOne is -42
PASS values.someInt / +values.minusOne is values.someInt / values.minusOne
PASS values.someInt / +values.minusOne is -42
PASS +values.someInt / +values.minusOne is values.someInt / values.minusOne
PASS +values.someInt / +values.minusOne is -42
PASS +values.someInt - values.minusOne is values.someInt - values.minusOne
PASS +values.someInt - values.minusOne is 43
PASS values.someInt - +values.minusOne is values.someInt - values.minusOne
PASS values.someInt - +values.minusOne is 43
PASS +values.someInt - +values.minusOne is values.someInt - values.minusOne
PASS +values.someInt - +values.minusOne is 43
PASS +values.someInt * values.zero is values.someInt * values.zero
PASS +values.someInt * values.zero is 0
PASS values.someInt * +values.zero is values.someInt * values.zero
PASS values.someInt * +values.zero is 0
PASS +values.someInt * +values.zero is values.someInt * values.zero
PASS +values.someInt * +values.zero is 0
PASS +values.someInt / values.zero is values.someInt / values.zero
PASS +values.someInt / values.zero is Infinity
PASS values.someInt / +values.zero is values.someInt / values.zero
PASS values.someInt / +values.zero is Infinity
PASS +values.someInt / +values.zero is values.someInt / values.zero
PASS +values.someInt / +values.zero is Infinity
PASS +values.someInt - values.zero is values.someInt - values.zero
PASS +values.someInt - values.zero is 42
PASS values.someInt - +values.zero is values.someInt - values.zero
PASS values.someInt - +values.zero is 42
PASS +values.someInt - +values.zero is values.someInt - values.zero
PASS +values.someInt - +values.zero is 42
PASS +values.someInt * values.minusZero is values.someInt * values.minusZero
PASS +values.someInt * values.minusZero is -0
PASS values.someInt * +values.minusZero is values.someInt * values.minusZero
PASS values.someInt * +values.minusZero is -0
PASS +values.someInt * +values.minusZero is values.someInt * values.minusZero
PASS +values.someInt * +values.minusZero is -0
PASS +values.someInt / values.minusZero is values.someInt / values.minusZero
PASS +values.someInt / values.minusZero is -Infinity
PASS values.someInt / +values.minusZero is values.someInt / values.minusZero
PASS values.someInt / +values.minusZero is -Infinity
PASS +values.someInt / +values.minusZero is values.someInt / values.minusZero
PASS +values.someInt / +values.minusZero is -Infinity
PASS +values.someInt - values.minusZero is values.someInt - values.minusZero
PASS +values.someInt - values.minusZero is 42
PASS values.someInt - +values.minusZero is values.someInt - values.minusZero
PASS values.someInt - +values.minusZero is 42
PASS +values.someInt - +values.minusZero is values.someInt - values.minusZero
PASS +values.someInt - +values.minusZero is 42
PASS +values.someInt * values.infinity is values.someInt * values.infinity
PASS +values.someInt * values.infinity is Infinity
PASS values.someInt * +values.infinity is values.someInt * values.infinity
PASS values.someInt * +values.infinity is Infinity
PASS +values.someInt * +values.infinity is values.someInt * values.infinity
PASS +values.someInt * +values.infinity is Infinity
PASS +values.someInt / values.infinity is values.someInt / values.infinity
PASS +values.someInt / values.infinity is 0
PASS values.someInt / +values.infinity is values.someInt / values.infinity
PASS values.someInt / +values.infinity is 0
PASS +values.someInt / +values.infinity is values.someInt / values.infinity
PASS +values.someInt / +values.infinity is 0
PASS +values.someInt - values.infinity is values.someInt - values.infinity
PASS +values.someInt - values.infinity is -Infinity
PASS values.someInt - +values.infinity is values.someInt - values.infinity
PASS values.someInt - +values.infinity is -Infinity
PASS +values.someInt - +values.infinity is values.someInt - values.infinity
PASS +values.someInt - +values.infinity is -Infinity
PASS +values.someInt * values.minusInfinity is values.someInt * values.minusInfinity
PASS +values.someInt * values.minusInfinity is -Infinity
PASS values.someInt * +values.minusInfinity is values.someInt * values.minusInfinity
PASS values.someInt * +values.minusInfinity is -Infinity
```

----------------------------------------

TITLE: Using notDeepStrictEqual in CommonJS
DESCRIPTION: Demonstrates how to use assert.notDeepStrictEqual() method in CommonJS format to test for deep strict inequality between objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_33

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

assert.notDeepStrictEqual({ a: 1 }, { a: '1' });
// OK
```

----------------------------------------

TITLE: Using AbortSignal with stream.Readable Constructor in Node.js
DESCRIPTION: Illustrates passing an AbortSignal to the constructor of a stream.Readable. Calling controller.abort() on the associated AbortController will destroy the stream with an AbortError, effectively stopping the read operation. This functionality is also applicable to stream.Writable. Requires the 'stream' module and Node.js v15.5.0 or later.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_8

LANGUAGE: js
CODE:
```
const { Readable } = require('stream');
const controller = new AbortController();
const read = new Readable({
  read(size) {
    // ...
  },
  signal: controller.signal,
});
// Later, abort the operation closing the stream
controller.abort();
```

----------------------------------------

TITLE: Testing NaN Arithmetic Operations in JavaScript
DESCRIPTION: A comprehensive set of test assertions verifying arithmetic operations with NaN values against different numeric types including zero, infinity, and strings. Each operation tests multiplication, division, and subtraction with both regular and unary plus operators.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-transforms-expected.txt#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
+values.notANumber / +values.zero is NaN
+values.notANumber - values.zero is NaN
values.notANumber - +values.zero is NaN
+values.notANumber * values.minusZero is NaN
values.notANumber * +values.minusZero is NaN
+values.notANumber / values.minusZero is NaN
```

----------------------------------------

TITLE: Using `Function.prototype.call` with `null` Context in JavaScript
DESCRIPTION: Invokes `myFunction` using `Function.prototype.call`, passing `null` as the `this` context. In non-strict mode, `this` typically defaults to the global object. The output `[this, \"myFunction\", undefined]` reflects the resulting `this` context and no additional arguments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-convert-this-dom-window-expected.txt#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
myFunction.call(null)
```

----------------------------------------

TITLE: Checking if HTTP Header Exists with hasHeader
DESCRIPTION: Checks if a header is set in the outgoing headers using case-insensitive matching. Returns a boolean value indicating if the header exists.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
const hasContentType = request.hasHeader('content-type');
```

----------------------------------------

TITLE: Setting a Function as Node-API Module Export
DESCRIPTION: Example of how to set a single function as the export of a Node-API module, which will be returned when the module is required.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_66

LANGUAGE: c
CODE:
```
napi_value Init(napi_env env, napi_value exports) {
  napi_value method;
  napi_status status;
  status = napi_create_function(env, "exports", NAPI_AUTO_LENGTH, Method, NULL, &method);
  if (status != napi_ok) return NULL;
  return method;
}
```

----------------------------------------

TITLE: Listing All Users in an npm Organization
DESCRIPTION: Demonstrates how to list all users in an npm organization using the npm org ls command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-org.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ npm org ls my-org
```

----------------------------------------

TITLE: Installing Packages Using dist-tags
DESCRIPTION: Shows how to install a package using a tag reference instead of a specific version number, which allows for more flexible version management.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-dist-tag.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm install <name>@<tag>
```

----------------------------------------

TITLE: Comparing Strings and Arrays with util.diff() in Node.js
DESCRIPTION: Demonstrates the usage of util.diff() function to compare strings and arrays. It shows how to compare two strings, two arrays, and equal values, returning an array of difference entries.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
const { diff } = require('node:util');

// Comparing strings
const actualString = '12345678';
const expectedString = '12!!5!7!';
console.log(diff(actualString, expectedString));
// [
//   [0, '1'],
//   [0, '2'],
//   [1, '3'],
//   [1, '4'],
//   [-1, '!'],
//   [-1, '!'],
//   [0, '5'],
//   [1, '6'],
//   [-1, '!'],
//   [0, '7'],
//   [1, '8'],
//   [-1, '!'],
// ]
// Comparing arrays
const actualArray = ['1', '2', '3'];
const expectedArray = ['1', '3', '4'];
console.log(diff(actualArray, expectedArray));
// [
//   [0, '1'],
//   [1, '2'],
//   [0, '3'],
//   [-1, '4'],
// ]
// Equal values return empty array
console.log(diff('same', 'same'));
// []
```

----------------------------------------

TITLE: Testing Intl.RelativeTimeFormat Methods - JavaScript
DESCRIPTION: Executes and validates Intl.RelativeTimeFormat methods by checking supported locales, instantiating with options, formatting relative times, formatting to parts, and resolving options. Requires ECMAScript Intl.RelativeTimeFormat. Inputs include relative numeric values and time units, outputs are formatted strings or descriptive objects.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-without-side-effects-i18n-expected.txt#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
Intl.RelativeTimeFormat.supportedLocalesOf(["en-US"])
new Intl.RelativeTimeFormat("en-US", {style: "narrow"})
someGlobalRelativeTimeFormat.format(2, "day")
someGlobalRelativeTimeFormat.formatToParts(2, "day")
someGlobalRelativeTimeFormat.resolvedOptions()
```

----------------------------------------

TITLE: Testing isPrototypeOf Implementation in JavaScript
DESCRIPTION: Series of test assertions verifying the behavior of isPrototypeOf method on different object types including strings, arrays, and custom objects. Tests validate both positive and negative cases to ensure ECMA spec compliance.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/isPrototypeOf-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
Object.isPrototypeOf('string') is false
Array.prototype.isPrototypeOf(new Array()) is true
ObjectA.prototype.isPrototypeOf(objb) is true
ObjectA.prototype.isPrototypeOf(objc) is true
```

----------------------------------------

TITLE: Adding isReadable Helper to Node.js Streams
DESCRIPTION: New utility function to check if a stream is readable, improving stream state verification
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V17.md#2025-04-23_snippet_21

LANGUAGE: JavaScript
CODE:
```
isReadable(stream)
```

----------------------------------------

TITLE: Setting Funding Information in package.json
DESCRIPTION: Shows various ways to specify funding information for a package, including single URLs, objects with type and URL, and arrays of funding sources.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "funding": {
    "type" : "individual",
    "url" : "http://npmjs.com/donate"
  }
}
```

LANGUAGE: json
CODE:
```
{
  "funding": "http://npmjs.com/donate"
}
```

LANGUAGE: json
CODE:
```
{
  "funding": [
    {
      "type" : "individual",
      "url" : "http://npmjs.com/donate"
    },
    "http://npmjs.com/donate-also",
    {
      "type" : "patreon",
      "url" : "https://www.patreon.com/user"
    }
  ]
}
```

----------------------------------------

TITLE: Gracefully Destroying a Node.js net.Socket After Writes
DESCRIPTION: Destroys the socket after all pending write operations have completed. If the socket is still writable, it implicitly calls `socket.end()` to signal the end of writes. If the 'finish' event has already been emitted, the socket is destroyed immediately.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
socket.destroySoon()
```

----------------------------------------

TITLE: Adding Zero-Fill Buffers Command Line Option in Node.js
DESCRIPTION: This commit adds a new command line option --zero-fill-buffers to Node.js. This option likely causes newly created Buffer instances to be automatically filled with zeros for security purposes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V5.md#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
// Usage would likely be:
// node --zero-fill-buffers script.js

// Implementation details not provided in the commit message
```

----------------------------------------

TITLE: Specifying Git URLs for npm Packages
DESCRIPTION: Demonstrates various formats for specifying Git URLs when referencing npm packages. These URLs can include specific commits, branches, or tags.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/developers.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
git://github.com/user/project.git#commit-ish
git+ssh://user@hostname:project.git#commit-ish
git+http://user@hostname/project/blah.git#commit-ish
git+https://user@hostname/project/blah.git#commit-ish
```

----------------------------------------

TITLE: Connecting through SOCKS Proxy with SocksClient using Async/Await in TypeScript
DESCRIPTION: This snippet demonstrates how to use the SocksClient.createConnection method with async/await syntax to establish a SOCKS proxy connection in Node.js TypeScript. The code sends an HTTP GET request via a SOCKS5 proxy and listens for the server's JSON response. Dependencies include the 'socks' package and Node.js, and key options specify proxy server, target host, and command type. Input parameters include proxy and destination details; output is HTTP data from the remote server.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/javascript/connectExample.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
const SocksClient = require('socks').SocksClient;

const options  = {
  proxy: {
    host: '104.131.124.203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api.com', // host names are supported with SOCKS v4a and SOCKS v5.
    port: 80
  },

  command: 'connect'
};

async function start() {
  try {
    const info = await SocksClient.createConnection(options);

    console.log(info.socket);
    // <Socket ...>  (this is a raw net.Socket that is established to the destination host through the given proxy servers)

    info.socket.write('GET /json HTTP/1.1\nHost: ip-api.com\n\n');
    info.socket.on('data', (data) => {
      console.log(data.toString()); // ip-api.com sees that the last proxy (104.131.124.203) is connected to it and not the origin client (you).
      /*
        HTTP/1.1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          "as":"AS14061 Digital Ocean, Inc.",
          "city":"Clifton",
          "country":"United States",
          "countryCode":"US",
          "isp":"Digital Ocean",
          "lat":40.8326,
          "lon":-74.1307,
          "org":"Digital Ocean",
          "query":"104.131.124.203",
          "region":"NJ",
          "regionName":"New Jersey",
          "status":"success",
          "timezone":"America/New_York",
          "zip":"07014"
        }
      */
  } catch (err) {
    // Handle errors
  }
}

start();
```

----------------------------------------

TITLE: Testing 'this' Binding in Strict Mode JavaScript
DESCRIPTION: This snippet tests the behavior of 'this' binding in strict mode for various types of function calls.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/basic-strict-mode-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
testThis.call(null)
testThis.call(1)
testThis.call(true)
testThis.call(false)
testThis.call(undefined)
testThis.call('a string')
```

----------------------------------------

TITLE: Basic Usage of StringDecoder with CommonJS
DESCRIPTION: Demonstrates the basic use of the StringDecoder class to decode Buffer objects containing UTF-8 encoded characters into strings using CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/string_decoder.md#2025-04-23_snippet_3

LANGUAGE: cjs
CODE:
```
const { StringDecoder } = require('node:string_decoder');
const decoder = new StringDecoder('utf8');

const cent = Buffer.from([0xC2, 0xA2]);
console.log(decoder.write(cent)); // Prints: ¢

const euro = Buffer.from([0xE2, 0x82, 0xAC]);
console.log(decoder.write(euro)); // Prints: €
```

----------------------------------------

TITLE: Checking subclasses of native error types
DESCRIPTION: Shows that custom error classes that extend the Error constructor also return true when checked with util.types.isNativeError().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_84

LANGUAGE: javascript
CODE:
```
class MyError extends Error {}
console.log(util.types.isNativeError(new MyError()));  // true
```

----------------------------------------

TITLE: Abortable File Writing in Node.js
DESCRIPTION: Demonstrates using AbortController to cancel an in-progress fs.writeFile operation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_81

LANGUAGE: javascript
CODE:
```
import { writeFile } from 'node:fs';
import { Buffer } from 'node:buffer';

const controller = new AbortController();
const { signal } = controller;
const data = new Uint8Array(Buffer.from('Hello Node.js'));
writeFile('message.txt', data, { signal }, (err) => {
  // When a request is aborted - the callback is called with an AbortError
});
// When the request should be aborted
controller.abort();
```

----------------------------------------

TITLE: Running Node.js Tests with Sharding (Bash)
DESCRIPTION: This snippet demonstrates how to execute a Node.js test suite using the --test-shard option, splitting the tests into three equal parts and running each part separately. The option takes the format <index>/<total> to specify which shard to run. Requires Node.js with test runner support.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_28

LANGUAGE: bash
CODE:
```
node --test --test-shard=1/3
node --test --test-shard=2/3
node --test --test-shard=3/3
```

----------------------------------------

TITLE: Creating and Using PerformanceObserver in ES Modules
DESCRIPTION: Demonstrates how to create a PerformanceObserver, observe mark entries, and handle performance data in ECMAScript modules. The observer logs entries, clears marks and measures, and disconnects itself after processing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import { performance, PerformanceObserver } from 'node:perf_hooks';

const obs = new PerformanceObserver((list, observer) => {
  console.log(list.getEntries());

  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ entryTypes: ['mark'], buffered: true });

performance.mark('test');
```

----------------------------------------

TITLE: Validating IPv6 Addresses using net.isIPv6 in Node.js
DESCRIPTION: This snippet demonstrates the `net.isIPv6()` function from the Node.js `net` module. It shows how to check if a given string is a valid IPv6 address. The function returns `true` for valid IPv6 inputs and `false` for any other input format, as illustrated with examples of a valid IPv6 address and a non-IP string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_35

LANGUAGE: js
CODE:
```
```js
net.isIPv6('::1'); // returns true
net.isIPv6('fhqwhgads'); // returns false
```
```

----------------------------------------

TITLE: Converting ECDH Public Key Format using CommonJS in Node.js
DESCRIPTION: Illustrates using the static `ECDH.convertKey` method to convert a compressed ECDH public key to its uncompressed format using CommonJS. It generates a key pair, retrieves the public key in compressed hex format, converts it to uncompressed hex format using `ECDH.convertKey`, and verifies it matches the key obtained directly in uncompressed format. Requires `createECDH` and `ECDH` from `node:crypto`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_23

LANGUAGE: cjs
CODE:
```
const {
  createECDH,
  ECDH,
} = require('node:crypto');

const ecdh = createECDH('secp256k1');
ecdh.generateKeys();

const compressedKey = ecdh.getPublicKey('hex', 'compressed');

const uncompressedKey = ECDH.convertKey(compressedKey,
                                        'secp256k1',
                                        'hex',
                                        'hex',
                                        'uncompressed');

// The converted key and the uncompressed public key should be the same
console.log(uncompressedKey === ecdh.getPublicKey('hex'));
```

----------------------------------------

TITLE: Setting Test Plan Count - Node.js Test - js
DESCRIPTION: Illustrates basic usage of `t.plan` to declare the expected number of assertions and subtests within the current test. The test fails if the executed count does not match the planned count.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_70

LANGUAGE: js
CODE:
```
test('top level test', (t) => {
  t.plan(2);
  t.assert.ok('some relevant assertion here');
  t.test('subtest', () => {});
});
```

----------------------------------------

TITLE: Running Node.js with Custom Conditional Exports - Bash
DESCRIPTION: Illustrates how to use the `-C` or `--conditions` flag to specify custom conditional export resolution conditions when executing a Node.js application. This allows developers to define and use environment-specific module loading logic within their `package.json` `exports` field.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_13

LANGUAGE: bash
CODE:
```
node -C development app.js
```

----------------------------------------

TITLE: Implementing an Asynchronous Completer Function for Readline in Node.js
DESCRIPTION: Demonstrates how a `completer` function can be asynchronous, returning a Promise or using `async/await`. This allows performing asynchronous operations (like fetching data) before providing completion suggestions. The function must eventually resolve to the standard completer result format: `[[completions], linePartial]`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_22

LANGUAGE: js
CODE:
```
async function completer(linePartial) {
  await someAsyncWork();
  return [['123'], linePartial];
}
```

----------------------------------------

TITLE: Basic NPM Ping Command Syntax
DESCRIPTION: The basic command syntax for pinging the npm registry
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-ping.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm ping
```

----------------------------------------

TITLE: Testing Intl.DateTimeFormat and Related Methods - JavaScript
DESCRIPTION: Tests the Intl.DateTimeFormat features such as supported locales, construction, formatting dates, formatting date parts, resolving options, and formatting ranges. Utilizes new Date(year, month) objects and tests for the 'en-US' locale. Requires ECMAScript Internationalization support and possibly global date-time format test objects; inputs are Date objects and locale IDs, and outputs are formatted strings and option objects.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-without-side-effects-i18n-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
Intl.DateTimeFormat.supportedLocalesOf(["en-US"])
new Intl.DateTimeFormat("en-US")
someGlobalDateTimeFormat.format(new Date(2021, 5))
someGlobalDateTimeFormat.formatToParts(new Date(2021, 5))
someGlobalDateTimeFormat.resolvedOptions()
someGlobalDateTimeFormat.formatRange(new Date(2021, 5), new Date(2022, 1))
someGlobalDateTimeFormat.formatRangeToParts(new Date(2021, 5), new Date(2022, 1))
```

----------------------------------------

TITLE: Unsubscribing from a channel in Node.js (ESM)
DESCRIPTION: Illustrates how to unsubscribe a previously registered message handler from a channel.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

function onMessage(message, name) {
  // Received data
}

diagnostics_channel.subscribe('my-channel', onMessage);

diagnostics_channel.unsubscribe('my-channel', onMessage);
```

----------------------------------------

TITLE: Using findPackageJSON in CommonJS Context via node:module - JavaScript
DESCRIPTION: This code demonstrates how to call findPackageJSON from node:module in a CommonJS (.js/.cjs) file to locate package.json files based on module specifiers and base paths. It uses require() to import node:module, node:url, and node:path, and illustrates supplying __filename and absolute paths for resolution. Node.js 22.14.0/23.2.0+ is required. Returns resolved package.json paths as strings or undefined. No external dependencies, just Node core modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
// /path/to/project/packages/bar/bar.js\nconst { findPackageJSON } = require('node:module');\nconst { pathToFileURL } = require('node:url');\nconst path = require('node:path');\n\nfindPackageJSON('..', __filename);\n// '/path/to/project/package.json'\n// Same result when passing an absolute specifier instead:\nfindPackageJSON(pathToFileURL(path.join(__dirname, '..')));\n\nfindPackageJSON('some-package', __filename);\n// '/path/to/project/packages/bar/node_modules/some-package/package.json'\n// When passing an absolute specifier, you might get a different result if the\n// resolved module is inside a subfolder that has nested `package.json`.\nfindPackageJSON(pathToFileURL(require.resolve('some-package')));\n// '/path/to/project/packages/bar/node_modules/some-package/some-subfolder/package.json'\n\nfindPackageJSON('@foo/qux', __filename);\n// '/path/to/project/packages/qux/package.json'
```

----------------------------------------

TITLE: Requiring Node.js Zlib Module using CommonJS
DESCRIPTION: Shows how to include the `zlib` module in a Node.js application using the CommonJS (`require`) syntax. This is the traditional way to include modules in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const zlib = require('node:zlib');
```

----------------------------------------

TITLE: Creating HMAC Hash with CommonJS
DESCRIPTION: Shows how to create an HMAC hash using SHA-256 algorithm with CommonJS require. Creates the same hash as the ESM example using a different module import method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const { createHmac } = require('node:crypto');

const secret = 'abcdefg';
const hash = createHmac('sha256', secret)
               .update('I love cupcakes')
               .digest('hex');
console.log(hash);
// Prints:
//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e
```

----------------------------------------

TITLE: Version-Specific Package Overrides
DESCRIPTION: Shows how to override a package only when it appears as a child of another package with a specific version. This allows targeting fixes to specific versions of dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_31

LANGUAGE: json
CODE:
```
{
  "overrides": {
    "@npm/bar@2.0.0": {
      "@npm/foo": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: Checking if a Value is an Error with N-API in C
DESCRIPTION: This function checks if a given `napi_value` represents a JavaScript Error object within the specified N-API environment (`env`). The result (true or false) is written to the output parameter `result`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_39

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_is_error(napi_env env,
                                      napi_value value,
                                      bool* result);
```

----------------------------------------

TITLE: Unzip Decompression Functions
DESCRIPTION: General-purpose decompression functions that can handle multiple formats. Offers both async (unzip) and sync (unzipSync) methods for decompressing data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_25

LANGUAGE: JavaScript
CODE:
```
zlib.unzip(buffer[, options], callback)
zlib.unzipSync(buffer[, options])
```

----------------------------------------

TITLE: Removing Org Members via libnpmorg rm() in JavaScript
DESCRIPTION: Shows how to remove a user from an npm Organization using org.rm() in the libnpmorg library for Node.js. The parameters are org and user names (optionally @-prefixed), with an authentication token in the options. The function returns a Promise resolving to null upon successful removal. Assumes libnpmorg is installed and a node environment is present.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmorg/README.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
await org.rm('myorg', 'myuser', {token: 'deadbeef'})
```

----------------------------------------

TITLE: Executing npm-docs Command in Bash
DESCRIPTION: This snippet shows the syntax for using the npm-docs command. It can be used with one or more package names, or without any arguments to use the current package's name.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-docs.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm docs [<pkgname> [<pkgname> ...]]
```

----------------------------------------

TITLE: Evaluating Variable Reassignment in Strict Mode JavaScript
DESCRIPTION: This code tests the behavior of variables when using eval() in strict mode. It checks if variables declared outside the eval() maintain their values.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/basic-strict-mode-expected.txt#2025-04-23_snippet_17

LANGUAGE: JavaScript
CODE:
```
'use strict'; (function (){var a = true; eval('var a = false'); return a; })()
```

----------------------------------------

TITLE: Using Diagnostics Channel API in Node.js
DESCRIPTION: Example showing how to create and use a diagnostics channel to broadcast MySQL query information. The code demonstrates publishing and subscribing to diagnostic data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_38

LANGUAGE: JavaScript
CODE:
```
const dc = require('diagnostics_channel');
const channel = dc.channel('mysql.query');

MySQL.prototype.query = function query(queryString, values, callback) {
  // Broadcast query information whenever a query is made
  channel.publish({
    query: queryString,
    host: this.hostname,
  });

  this.doQuery(queryString, values, callback);
};
```

LANGUAGE: JavaScript
CODE:
```
const dc = require('diagnostics_channel');
const channel = dc.channel('mysql.query');

channel.subscribe(({ query, host }) => {
  console.log(`mysql query to ${host}: ${query}`);
});
```

----------------------------------------

TITLE: Setting Headers using setHeader - Node.js HTTP/2 JavaScript
DESCRIPTION: Demonstrates how to use the `response.setHeader(name, value)` method to set a single header value or multiple values using an array. This method is primarily used for setting implicit headers and replaces existing headers with the same name. Using invalid characters throws a `TypeError`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_66

LANGUAGE: javascript
CODE:
```
response.setHeader('Content-Type', 'text/html; charset=utf-8');
```

LANGUAGE: javascript
CODE:
```
response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);
```

----------------------------------------

TITLE: Accessing and Mutating the Port Component - WHATWG URL API - JavaScript
DESCRIPTION: Illustrates access and assignment of the port property using a URL object in Node.js. The code shows handling of valid, default, empty, invalid, partially valid (leading numbers), truncated non-integers, and out-of-range values for the port field. Changing the port updates the URL object's representation, and only valid integer values in range 0-65535 are accepted. This snippet requires no dependencies and input variations are demonstrated with different port assignments, outputting the mutated port and href.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_23

LANGUAGE: JavaScript
CODE:
```
const myURL = new URL('https://example.org:8888');
console.log(myURL.port);
// Prints 8888

// Default ports are automatically transformed to the empty string
// (HTTPS protocol's default port is 443)
myURL.port = '443';
console.log(myURL.port);
// Prints the empty string
console.log(myURL.href);
// Prints https://example.org/

myURL.port = 1234;
console.log(myURL.port);
// Prints 1234
console.log(myURL.href);
// Prints https://example.org:1234/

// Completely invalid port strings are ignored
myURL.port = 'abcd';
console.log(myURL.port);
// Prints 1234

// Leading numbers are treated as a port number
myURL.port = '5678abcd';
console.log(myURL.port);
// Prints 5678

// Non-integers are truncated
myURL.port = 1234.5678;
console.log(myURL.port);
// Prints 1234

// Out-of-range numbers which are not represented in scientific notation
// will be ignored.
myURL.port = 1e10; // 10000000000, will be range-checked as described below
console.log(myURL.port);
// Prints 1234

```

----------------------------------------

TITLE: Applying Mock Implementation Once (JavaScript)
DESCRIPTION: Illustrates using `fn.mock.mockImplementationOnce()` to provide a temporary implementation for the mock function that is used only for the very next invocation, after which the mock reverts to its previous behavior. Requires the Node.js test runner context (`t`) and `assert`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_42

LANGUAGE: JavaScript
CODE:
```
test('changes a mock behavior once', (t) => {
  let cnt = 0;

  function addOne() {
    cnt++;
    return cnt;
  }

  function addTwo() {
    cnt += 2;
    return cnt;
  }

  const fn = t.mock.fn(addOne);

  assert.strictEqual(fn(), 1);
  fn.mock.mockImplementationOnce(addTwo);
  assert.strictEqual(fn(), 3);
  assert.strictEqual(fn(), 4);
});
```

----------------------------------------

TITLE: Importing JSON Module with Attributes (JavaScript)
DESCRIPTION: Demonstrates how to import a local JSON file as an ES module using the mandatory `with { type: 'json' }` syntax. The content of the JSON file is exposed as the default export of the module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_13

LANGUAGE: javascript
CODE:
```
import packageConfig from './package.json' with { type: 'json' };
```

----------------------------------------

TITLE: Object Cloning with Prototypes
DESCRIPTION: Shows how object cloning handles class instances, private fields, symbols, and getters during message transfer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
const b = Symbol('b');

class Foo {
  #a = 1;
  constructor() {
    this[b] = 2;
    this.c = 3;
  }

  get d() { return 4; }
}

const { port1, port2 } = new MessageChannel();

port1.onmessage = ({ data }) => console.log(data);

port2.postMessage(new Foo());

// Prints: { c: 3 }
```

----------------------------------------

TITLE: Blocking Specific CPU Architectures
DESCRIPTION: Excludes specific CPU architectures from running the package by prefixing architecture identifiers with '!'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_38

LANGUAGE: json
CODE:
```
{
  "cpu": [
    "!arm",
    "!mips"
  ]
}
```

----------------------------------------

TITLE: Running npm-edit Command in Bash
DESCRIPTION: This snippet shows the syntax for using the npm-edit command to edit an installed package or subpackage. It allows developers to modify locally installed dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-edit.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm edit <pkg>[/<subpkg>...]
```

----------------------------------------

TITLE: Using npm dist-tag Commands
DESCRIPTION: The basic syntax for the npm dist-tag command, which allows adding, removing, and listing distribution tags on packages. The command has three main operations: add, rm, and ls.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-dist-tag.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm dist-tag add <package-spec (with version)> [<tag>]
npm dist-tag rm <package-spec> <tag>
npm dist-tag ls [<package-spec>]

alias: dist-tags
```

----------------------------------------

TITLE: Packing HTTP/2 Settings (CommonJS) - Node.js
DESCRIPTION: Demonstrates how to use the `http2.getPackedSettings` function in CommonJS (CJS) syntax to serialize an HTTP/2 settings object into a Buffer, suitable for the `HTTP2-Settings` header field. The example packs settings to disable server push.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_48

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');

const packed = http2.getPackedSettings({ enablePush: false });

console.log(packed.toString('base64'));
// Prints: AAIAAAAA
```

----------------------------------------

TITLE: Implementing Node.js-Specific Entry Point for Node-API Addon in C
DESCRIPTION: A Node.js-specific implementation file that serves as the entry point for the addon when loaded in a Node.js environment. It uses NAPI_MODULE_INIT macro to register the module and calls the portable create_addon function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_14

LANGUAGE: c
CODE:
```
// addon_node.c
#include <node_api.h>
#include "addon.h"

NAPI_MODULE_INIT(/* napi_env env, napi_value exports */) {
  // This function body is expected to return a `napi_value`.
  // The variables `napi_env env` and `napi_value exports` may be used within
  // the body, as they are provided by the definition of `NAPI_MODULE_INIT()`.
  return create_addon(env);
}
```

----------------------------------------

TITLE: Promise All Handler
DESCRIPTION: Implementation of Promise.all() with error handling for caught rejections.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-promise-catch-prediction-expected.txt#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
caughtPromiseAll (catch-prediction.js:309:23)
```

----------------------------------------

TITLE: Using the npm install-ci-test command and its aliases
DESCRIPTION: Demonstrates the basic syntax of the npm install-ci-test command, which performs a clean installation and runs tests in a single operation. Includes the available command aliases.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install-ci-test.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install-ci-test

aliases: cit, clean-install-test, sit
```

----------------------------------------

TITLE: Building Node.js Native Addon with node-gyp - Bash
DESCRIPTION: Illustrates how to invoke the build command after configuration, which compiles the native addon using the generated build files. A prior 'configure' step and a valid 'binding.gyp' file are required. Output artifacts will appear under 'build/Debug/' (for debug builds) or 'build/Release/' (for release builds) as '.node' files.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/README.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
node-gyp build
```

----------------------------------------

TITLE: Example Certificate Object Structure in Node.js
DESCRIPTION: An example of a certificate object structure in Node.js showing various properties including subject, issuer, validation dates, fingerprints, and key information. This demonstrates the format and content of a typical SSL/TLS certificate as represented in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
{ subject:
   { OU: [ 'Domain Control Validated', 'PositiveSSL Wildcard' ],
     CN: '*.nodejs.org' },
  issuer:
   { C: 'GB',
     ST: 'Greater Manchester',
     L: 'Salford',
     O: 'COMODO CA Limited',
     CN: 'COMODO RSA Domain Validation Secure Server CA' },
  subjectaltname: 'DNS:*.nodejs.org, DNS:nodejs.org',
  infoAccess:
   { 'CA Issuers - URI':
      [ 'http://crt.comodoca.com/COMODORSADomainValidationSecureServerCA.crt' ],
     'OCSP - URI': [ 'http://ocsp.comodoca.com' ] },
  modulus
  exponent: '0x10001',
  pubkey: <Buffer ... >,
  valid_from: 'Aug 14 00:00:00 2017 GMT',
  valid_to: 'Nov 20 23:59:59 2019 GMT',
  fingerprint: '01:02:59:D9:C3:D2:0D:08:F7:82:4E:44:A4:B4:53:C5:E2:3A:87:4D',
  fingerprint256: '69:AE:1A:6A:D4:3D:C6:C1:1B:EA:C6:23:DE:BA:2A:14:62:62:93:5C:7A:EA:06:41:9B:0B:BC:87:CE:48:4E:02',
  fingerprint512: '19:2B:3E:C3:B3:5B:32:E8:AE:BB:78:97:27:E4:BA:6C:39:C9:92:79:4F:31:46:39:E2:70:E5:5F:89:42:17:C9:E8:64:CA:FF:BB:72:56:73:6E:28:8A:92:7E:A3:2A:15:8B:C2:E0:45:CA:C3:BC:EA:40:52:EC:CA:A2:68:CB:32',
  ext_key_usage: [ '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2' ],
  serialNumber: '66593D57F20CBC573E433381B5FEC280',
  raw: <Buffer ... > }
```

----------------------------------------

TITLE: Using npm help Command in Bash
DESCRIPTION: The npm help command syntax for viewing documentation pages. It accepts one or more terms as arguments and will display the appropriate documentation page or search for matching terms.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-help.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm help <term> [<terms..>]

alias: hlep
```

----------------------------------------

TITLE: Command-Line Examples for nopt Option Parsing
DESCRIPTION: Provides various examples of invoking a Node.js script ('my-program.js') that uses 'nopt' for argument parsing. It illustrates how different command-line arguments, including long options (--foo), short options (-f), negated booleans (--no-flag), shorthands (--foofoo), combined flags (-fp), options with values (--bar 7), path resolution (--baz), handling unknown options (--blatzk), assigning values to unknown options (--blatzk=1000), using Array types (--many1, --many2), and the argument terminator (--), are parsed into a JavaScript object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/nopt/README.md#2025-04-23_snippet_1

LANGUAGE: console
CODE:
```
$ node my-program.js --foo "blerp" --no-flag
{ "foo" : "blerp", "flag" : false }

$ node my-program.js ---bar 7 --foo "Mr. Hand" --flag
{ bar: 7, foo: "Mr. Hand", flag: true }

$ node my-program.js --foo "blerp" -f -----p
{ foo: "blerp", flag: true, pick: true }

$ node my-program.js -fp --foofoo
{ foo: "Mr. Foo", flag: true, pick: true }

$ node my-program.js --foofoo -- -fp  # -- stops the flag parsing.
{ foo: "Mr. Foo", argv: { remain: ["-fp"] } }

$ node my-program.js --blatzk -fp # unknown opts are ok.
{ blatzk: true, flag: true, pick: true }

$ node my-program.js --blatzk=1000 -fp # but you need to use = if they have a value
{ blatzk: 1000, flag: true, pick: true }

$ node my-program.js --no-blatzk -fp # unless they start with "no-"
{ blatzk: false, flag: true, pick: true }

$ node my-program.js --baz b/a/z # known paths are resolved.
{ baz: "/Users/isaacs/b/a/z" }

# if Array is one of the types, then it can take many
# values, and will always be an array.  The other types provided
# specify what types are allowed in the list.

$ node my-program.js --many1 5 --many1 null --many1 foo
{ many1: ["5", "null", "foo"] }

$ node my-program.js --many2 foo --many2 bar
{ many2: ["/path/to/foo", "path/to/bar"] }
```

----------------------------------------

TITLE: Getting List of Response Header Names - Node.js HTTP/2
DESCRIPTION: Demonstrates using `response.getHeaderNames()` to get an array of all unique header names that have been set for the response. The method returns all header names in lowercase, regardless of how they were originally set.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_62

LANGUAGE: js
CODE:
```
response.setHeader('Foo', 'bar');
response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headerNames = response.getHeaderNames();
```

----------------------------------------

TITLE: Executing npm token commands in Bash
DESCRIPTION: This snippet shows the basic syntax for using the npm token command to list, revoke, and create authentication tokens. It includes options for creating read-only tokens and specifying CIDR ranges.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-token.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm token list
npm token revoke <id|token>
npm token create [--read-only] [--cidr=list]
```

----------------------------------------

TITLE: File Truncation with fs.truncateSync
DESCRIPTION: Truncates a file to a specified length synchronously. Can accept file path or descriptor.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_100

LANGUAGE: javascript
CODE:
```
fs.truncateSync(path[, len])
```

----------------------------------------

TITLE: CPU Profiling with Inspector Session (Promises API)
DESCRIPTION: Shows how to use the CPU Profiler through the inspector session using the Promises API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/inspector.md#2025-04-23_snippet_3

LANGUAGE: mjs
CODE:
```
import { Session } from 'node:inspector/promises';
import fs from 'node:fs';
const session = new Session();
session.connect();

await session.post('Profiler.enable');
await session.post('Profiler.start');
// Invoke business logic under measurement here...

// some time later...
const { profile } = await session.post('Profiler.stop');

// Write profile to disk, upload, etc.
fs.writeFileSync('./profile.cpuprofile', JSON.stringify(profile));
```

----------------------------------------

TITLE: Destroying a Node.js net.Socket Connection
DESCRIPTION: Ensures no more I/O activity happens on the socket. This method destroys the stream and closes the connection immediately. An optional `error` object can be passed, which will be emitted as an 'error' event. Returns the socket instance. See `writable.destroy()` for more details.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
socket.destroy([error])
```

----------------------------------------

TITLE: Adding Path Alias Modules in JavaScript
DESCRIPTION: Adds 'path/posix' and 'path/win32' alias modules for easier access to platform-specific path operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_24

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  posix: require('path').posix,
  win32: require('path').win32
};
```

----------------------------------------

TITLE: Advanced Overrides with Object Notation
DESCRIPTION: Demonstrates the full object form of overrides, allowing overriding both a package itself and its children. This provides fine-grained control over the dependency tree.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_28

LANGUAGE: json
CODE:
```
{
  "overrides": {
    "@npm/foo": {
      ".": "1.0.0",
      "@npm/bar": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: Excluding Private Subfolders in Subpath Patterns
DESCRIPTION: Demonstrates how to exclude specific private subfolders from being exposed through subpath patterns by using null targets in the exports configuration.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_15

LANGUAGE: json
CODE:
```
// ./node_modules/es-module-package/package.json
{
  "exports": {
    "./features/*.js": "./src/features/*.js",
    "./features/private-internal/*": null
  }
}
```

----------------------------------------

TITLE: Consuming a Readable Stream without Processing in Node.js
DESCRIPTION: This snippet demonstrates how to fully consume a Readable stream without processing any of its data, using the resume() method and the 'end' event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_35

LANGUAGE: javascript
CODE:
```
getReadableStreamSomehow()
  .resume()
  .on('end', () => {
    console.log('Reached the end, but did not read anything.');
  });
```

----------------------------------------

TITLE: Prepending One-time Event Listeners
DESCRIPTION: Shows how to use prependOnceListener() to add one-time listeners to the beginning of the listener array.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
import { EventEmitter } from 'node:events';
const myEE = new EventEmitter();
myEE.once('foo', () => console.log('a'));
myEE.prependOnceListener('foo', () => console.log('b'));
myEE.emit('foo');
// Prints:
//   b
//   a
```

LANGUAGE: javascript
CODE:
```
const EventEmitter = require('node:events');
const myEE = new EventEmitter();
myEE.once('foo', () => console.log('a'));
myEE.prependOnceListener('foo', () => console.log('b'));
myEE.emit('foo');
// Prints:
//   b
//   a
```

----------------------------------------

TITLE: Retrieving Resource Usage Information in Node.js (ESM)
DESCRIPTION: Demonstrates how to import and use the resourceUsage() method from the Node.js process module in ESM format. This method returns detailed information about the current process's resource consumption, including CPU time and memory usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_81

LANGUAGE: javascript
CODE:
```
import { resourceUsage } from 'node:process';

console.log(resourceUsage());
/*
  Will output:
  {
    userCPUTime: 82872,
    systemCPUTime: 4143,
    maxRSS: 33164,
    sharedMemorySize: 0,
    unsharedDataSize: 0,
    unsharedStackSize: 0,
    minorPageFault: 2469,
    majorPageFault: 0,
    swappedOut: 0,
    fsRead: 0,
    fsWrite: 8,
    ipcSent: 0,
    ipcReceived: 0,
    signalsCount: 0,
    voluntaryContextSwitches: 79,
    involuntaryContextSwitches: 1
  }
*/
```

----------------------------------------

TITLE: Installing the glob Package using npm
DESCRIPTION: Installs the 'glob' package using the Node Package Manager (npm). This command downloads and adds the library to the project's dependencies, making its functions available for use in Node.js code.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/glob/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
npm i glob
```

----------------------------------------

TITLE: Basic NPM Outdated Command Syntax
DESCRIPTION: Shows the basic command syntax for checking outdated packages using npm outdated. The command can accept optional package specifications.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-outdated.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm outdated [<package-spec> ...]
```

----------------------------------------

TITLE: Initializing and Using Custom DNS Resolver in ES Modules
DESCRIPTION: Demonstrates how to create an independent resolver for DNS requests with custom DNS servers in ES Modules format. The example sets a custom DNS server (4.4.4.4) and resolves IPv4 addresses for a domain.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_14

LANGUAGE: mjs
CODE:
```
import { Resolver } from 'node:dns/promises';
const resolver = new Resolver();
resolver.setServers(['4.4.4.4']);

// This request will use the server at 4.4.4.4, independent of global settings.
const addresses = await resolver.resolve4('example.org');
```

----------------------------------------

TITLE: Converting domains to ASCII using url.domainToASCII() in Node.js
DESCRIPTION: Shows how to use the url.domainToASCII() method to convert Unicode domain names to Punycode ASCII representation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_44

LANGUAGE: javascript
CODE:
```
import url from 'node:url';

console.log(url.domainToASCII('español.com'));
// Prints xn--espaol-zwa.com
console.log(url.domainToASCII('中文.com'));
// Prints xn--fiq228c.com
console.log(url.domainToASCII('xn--iñvalid.com'));
// Prints an empty string
```

----------------------------------------

TITLE: Arrow Function Closure Warning Example
DESCRIPTION: Demonstrates an anti-pattern using arrow functions that can prevent garbage collection due to closure retention.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_44

LANGUAGE: javascript
CODE:
```
class Test {
  constructor() {
    finalization.register(this, (ref) => ref.dispose());

    // Even something like this is highly discouraged
    // finalization.register(this, () => this.dispose());
  }
  dispose() {}
}
```

----------------------------------------

TITLE: Callback-based File Deletion Example
DESCRIPTION: Demonstrates how to use the callback-based unlink function to delete a file in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { unlink } from 'node:fs';

unlink('/tmp/hello', (err) => {
  if (err) throw err;
  console.log('successfully deleted /tmp/hello');
});
```

LANGUAGE: JavaScript
CODE:
```
const { unlink } = require('node:fs');

unlink('/tmp/hello', (err) => {
  if (err) throw err;
  console.log('successfully deleted /tmp/hello');
});
```

----------------------------------------

TITLE: Implementing a basic asynchronous 'load' hook for custom source retrieval
DESCRIPTION: Example of a basic asynchronous 'load' hook that demonstrates conditional custom logic for retrieving source code. This allows for custom source loading based on specific conditions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_35

LANGUAGE: javascript
CODE:
```
// Asynchronous version accepted by module.register().
export async function load(url, context, nextLoad) {
  const { format } = context;

  if (Math.random() > 0.5) { // Some condition
    /*
      For some or all URLs, do some custom logic for retrieving the source.
      Always return an object of the form {
        format: <string>,
        source: <string|buffer>,
      }.
    */
    return {
      format,
      shortCircuit: true,
      source: '...',
    };
  }

  // Defer to the next hook in the chain.
  return nextLoad(url);
}
```

----------------------------------------

TITLE: Running Multiple Test Reporters (Bash)
DESCRIPTION: Illustrates how to invoke the Node.js test runner with multiple built-in reporters (`spec` and `dot`) directed to different destinations (`stdout` and a file `file.txt`) using command-line flags. Requires the Node.js test runner and appropriate command-line flags.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_34

LANGUAGE: bash
CODE:
```
node --test-reporter=spec --test-reporter=dot --test-reporter-destination=stdout --test-reporter-destination=file.txt
```

----------------------------------------

TITLE: Generating Server Certificate Bundle using OpenSSL (Bash)
DESCRIPTION: This Bash command utilizes `openssl pkcs12` to create a PKCS#12 file (`server-cert.pem`) by exporting the previously generated client certificate (`client-cert.pem`) and its corresponding private key (`client-key.pem`). This bundled format is often used for server configurations or when a client needs the server's certificate (or the CA that signed it) for validation, potentially referenced in the `ca` option of `tls.connect` in the Node.js examples.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_24

LANGUAGE: bash
CODE:
```
```bash
openssl pkcs12 -certpbe AES-256-CBC -export -out server-cert.pem \
  -inkey client-key.pem -in client-cert.pem
```
```

----------------------------------------

TITLE: Importing cssesc in Node.js - JavaScript
DESCRIPTION: This JavaScript code imports the cssesc library in a Node.js environment using require(). It makes the cssesc API available for escaping CSS strings and identifiers programmatically within Node.js scripts. Assumes that cssesc is installed as a dependency via npm.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cssesc/README.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const cssesc = require('cssesc');
```

----------------------------------------

TITLE: Using util.types.isArrayBufferView in JavaScript
DESCRIPTION: Shows how to use util.types.isArrayBufferView to check if a value is an instance of an ArrayBuffer view, such as typed arrays or DataView.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_60

LANGUAGE: javascript
CODE:
```
util.types.isArrayBufferView(new Int8Array());  // true
util.types.isArrayBufferView(Buffer.from('hello world')); // true
util.types.isArrayBufferView(new DataView(new ArrayBuffer(16)));  // true
util.types.isArrayBufferView(new ArrayBuffer());  // false
```

----------------------------------------

TITLE: Listing Organization Members in npm
DESCRIPTION: Command to check who has been added to your npm organization by listing members of the default 'developers' team.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/orgs.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm team ls <org>:developers
```

----------------------------------------

TITLE: Editing NPM Config in Bash
DESCRIPTION: Command to open the npm configuration file in an editor. Use --global flag to edit global config.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-config.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm config edit
```

----------------------------------------

TITLE: ArrayBuffer Stream Consumer Examples
DESCRIPTION: Examples demonstrating usage of the arrayBuffer stream consumer utility in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
import { arrayBuffer } from 'node:stream/consumers';
import { Readable } from 'node:stream';
import { TextEncoder } from 'node:util';

const encoder = new TextEncoder();
const dataArray = encoder.encode('hello world from consumers!');

const readable = Readable.from(dataArray);
const data = await arrayBuffer(readable);
console.log(`from readable: ${data.byteLength}`);
// Prints: from readable: 76
```

LANGUAGE: javascript
CODE:
```
const { arrayBuffer } = require('node:stream/consumers');
const { Readable } = require('node:stream');
const { TextEncoder } = require('node:util');

const encoder = new TextEncoder();
const dataArray = encoder.encode('hello world from consumers!');
const readable = Readable.from(dataArray);
arrayBuffer(readable).then((data) => {
  console.log(`from readable: ${data.byteLength}`);
  // Prints: from readable: 76
});
```

----------------------------------------

TITLE: Accessing the HTTP Response Socket in Node.js Using ES Modules (JavaScript)
DESCRIPTION: Shows how to extract the underlying network socket of a response using Node.js's ES Module import syntax. Requires Node.js 12+ and ESM support. Accesses remote IP and port for the current connection. This is useful for inspecting client network details within an http server callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_37

LANGUAGE: mjs
CODE:
```
import http from 'node:http';
const server = http.createServer((req, res) => {
  const ip = res.socket.remoteAddress;
  const port = res.socket.remotePort;
  res.end(`Your IP address is ${ip} and your source port is ${port}.`);
}).listen(3000);

```

----------------------------------------

TITLE: Comparing isNativeError and instanceof for errors from different realms (ESM)
DESCRIPTION: Demonstrates the difference between util.types.isNativeError() and instanceof when dealing with errors from different realms. isNativeError returns true for errors from other realms while instanceof returns false.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_85

LANGUAGE: javascript
CODE:
```
import { createContext, runInContext } from 'node:vm';
import { types } from 'node:util';

const context = createContext({});
const myError = runInContext('new Error()', context);
console.log(types.isNativeError(myError)); // true
console.log(myError instanceof Error); // false
```

----------------------------------------

TITLE: Removing a Header using removeHeader - Node.js HTTP/2 JavaScript
DESCRIPTION: Shows how to use the `response.removeHeader(name)` method to remove a header that has been previously set and is queued for implicit sending. This is useful for removing default headers or headers set earlier in the response processing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_65

LANGUAGE: javascript
CODE:
```
response.removeHeader('Content-Encoding');
```

----------------------------------------

TITLE: Enhanced Child Process Spawn Options in Node.js
DESCRIPTION: Addition of 'shell' option to spawn() and spawnSync() methods to allow command execution inside a shell environment.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V5.md#2025-04-23_snippet_14

LANGUAGE: JavaScript
CODE:
```
spawn(command, args, {
  shell: true // or path to custom shell
})
```

----------------------------------------

TITLE: Example Git URL Dependencies (Bash/URL)
DESCRIPTION: These lines provide concrete examples of Git URLs that can be used as dependencies in `package.json`. They demonstrate different protocols (`git+ssh`, `git+https`, `git`), including authentication, and specifying exact versions (`#v1.0.27`) or semver ranges (`#semver:^5.0`). If no commit-ish or semver is specified, the default branch is used.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
git+ssh://git@github.com:npm/cli.git#v1.0.27
git+ssh://git@github.com:npm/cli#semver:^5.0
git+https://isaacs@github.com/npm/cli.git
git://github.com/npm/cli.git#v1.0.27
```

----------------------------------------

TITLE: Removing Socket from Agent Pool in Node.js HTTP
DESCRIPTION: Demonstrates how to remove a socket from an agent's pool when intending to keep an HTTP request open for a long time without keeping it in the agent.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
http.get(options, (res) => {
  // Do stuff
}).on('socket', (socket) => {
  socket.emit('agentRemove');
});
```

----------------------------------------

TITLE: Resolving ESM Specifiers - ESM_RESOLVE Algorithm
DESCRIPTION: This algorithm resolves an ES module specifier against a parent URL. It handles various specifier types (URLs, relative paths, package imports, bare specifiers) and determines the final resolved URL and module format for file-based or other URL-based modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_21

LANGUAGE: Algorithm Specification (Node.js Module Resolution)
CODE:
```
ESM_RESOLVE(_specifier_, _parentURL_)

> 1. Let _resolved_ be **undefined**.
> 2. If _specifier_ is a valid URL, then
>    1. Set _resolved_ to the result of parsing and reserializing
>       _specifier_ as a URL.
> 3. Otherwise, if _specifier_ starts with _"/"_, _"./"_, or _"../"_, then
>    1. Set _resolved_ to the URL resolution of _specifier_ relative to
>       _parentURL_.
> 4. Otherwise, if _specifier_ starts with _"#"_, then
>    1. Set _resolved_ to the result of
>       **PACKAGE_IMPORTS_RESOLVE**(_specifier_,
>       _parentURL_, _defaultConditions_).
> 5. Otherwise,
>    1. Note: _specifier_ is now a bare specifier.
>    2. Set _resolved_ the result of
>       **PACKAGE_RESOLVE**(_specifier_, _parentURL_).
> 6. Let _format_ be **undefined**.
> 7. If _resolved_ is a _"file:"_ URL, then
>    1. If _resolved_ contains any percent encodings of _"/"_ or _"\\"_ (_"%2F"_
>       and _"%5C"_ respectively), then
>       1. Throw an _Invalid Module Specifier_ error.
>    2. If the file at _resolved_ is a directory, then
>       1. Throw an _Unsupported Directory Import_ error.
>    3. If the file at _resolved_ does not exist, then
>       1. Throw a _Module Not Found_ error.
>    4. Set _resolved_ to the real path of _resolved_, maintaining the
>       same URL querystring and fragment components.
>    5. Set _format_ to the result of **ESM_FILE_FORMAT**(_resolved_).
> 8. Otherwise,
>    1. Set _format_ the module format of the content type associated with the
>       URL _resolved_.
> 9. Return _format_ and _resolved_ to the loading phase
```

----------------------------------------

TITLE: Emitting Warnings with Different Signatures Using process.emitWarning - JavaScript
DESCRIPTION: These code samples illustrate various usages of process.emitWarning: emitting with just a message, with a type, with code, and with an Error object. The function signatures account for string and Error inputs as well as setting custom naming, codes, and constructors. Each call emits a process warning that can be handled by the 'warning' event. These snippets do not require any special dependencies outside standard Node.js modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_35

LANGUAGE: mjs
CODE:
```
import { emitWarning } from 'node:process';\n\n// Emit a warning using a string.\nemitWarning('Something happened!');\n// Emits: (node: 56338) Warning: Something happened!
```

LANGUAGE: cjs
CODE:
```
const { emitWarning } = require('node:process');\n\n// Emit a warning using a string.\nemitWarning('Something happened!');\n// Emits: (node: 56338) Warning: Something happened!
```

LANGUAGE: mjs
CODE:
```
import { emitWarning } from 'node:process';\n\n// Emit a warning using a string and a type.\nemitWarning('Something Happened!', 'CustomWarning');\n// Emits: (node:56338) CustomWarning: Something Happened!
```

LANGUAGE: cjs
CODE:
```
const { emitWarning } = require('node:process');\n\n// Emit a warning using a string and a type.\nemitWarning('Something Happened!', 'CustomWarning');\n// Emits: (node:56338) CustomWarning: Something Happened!
```

LANGUAGE: mjs
CODE:
```
import { emitWarning } from 'node:process';\n\nemitWarning('Something happened!', 'CustomWarning', 'WARN001');\n// Emits: (node:56338) [WARN001] CustomWarning: Something happened!
```

LANGUAGE: cjs
CODE:
```
const { emitWarning } = require('node:process');\n\nprocess.emitWarning('Something happened!', 'CustomWarning', 'WARN001');\n// Emits: (node:56338) [WARN001] CustomWarning: Something happened!
```

----------------------------------------

TITLE: Using assert.partialDeepStrictEqual in Node.js
DESCRIPTION: Examples of using the new assert.partialDeepStrictEqual method to compare objects and arrays partially, allowing additional properties in the actual value that are not in the expected value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
assert.partialDeepStrictEqual(
  { a: 1, b: 2, c: 3 },
  { a: 1, b: 2 },
);

assert.partialDeepStrictEqual(
  [1, 2, 3, 4],
  [2, 3],
);

assert.partialDeepStrictEqual(
  { a: { b: { c: 1, d: 2 } }, e: 3 },
  { a: { b: { c: 1 } } },
);

assert.partialDeepStrictEqual(
  { a: { b: { c: 1, d: 2 } }, e: 3 },
  { a: { b: { c: 1 } } },
);

assert.partialDeepStrictEqual(
  new Set([{ a: 1 }, { b: 1 }]),
  new Set([{ a: 1 }]),
);

assert.partialDeepStrictEqual(
  { a: new Set([{ a: 1 }, { b: 1 }]), b: new Map(), c: [1, 2, 3] },
  { a: new Set([{ a: 1 }]), c: [2] },
);
```

----------------------------------------

TITLE: Installing Xcode Command Line Tools on macOS
DESCRIPTION: This shell command installs the necessary C/C++ compiler toolchain on macOS using `xcode-select`. This is a prerequisite for building Node.js native addons on macOS without installing the full Xcode IDE.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
xcode-select --install
```

----------------------------------------

TITLE: Emitting Keypress Events from a Readable Stream with Readline (JavaScript)
DESCRIPTION: Shows how to enable 'keypress' events on process.stdin using readline.emitKeypressEvents(). Essential for implementing advanced keyboard controls or keybinding customizations. TTY streams must be in raw mode to receive keypresses. Input: stream (like process.stdin); Output: keypress events emitted on the stream object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_30

LANGUAGE: js
CODE:
```
readline.emitKeypressEvents(process.stdin);\nif (process.stdin.isTTY)\n  process.stdin.setRawMode(true);
```

----------------------------------------

TITLE: Using TextEncoder.encodeInto() in JavaScript
DESCRIPTION: Shows how to use the encodeInto method of TextEncoder to encode a string into a pre-allocated Uint8Array, returning information about read and written bytes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_55

LANGUAGE: javascript
CODE:
```
const encoder = new TextEncoder();
const src = 'this is some data';
const dest = new Uint8Array(10);
const { read, written } = encoder.encodeInto(src, dest);
```

----------------------------------------

TITLE: AsyncLocalStorage.exit Error Handling
DESCRIPTION: This example demonstrates `asyncLocalStorage.exit()`, which temporarily runs a function outside the current context. If an error is thrown within the `exit()` callback, it is caught and the context that was active before calling `exit()` is automatically re-entered.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_5

LANGUAGE: js
CODE:
```
// Within a call to run
try {
  asyncLocalStorage.getStore(); // Returns the store object or value
  asyncLocalStorage.exit(() => {
    asyncLocalStorage.getStore(); // Returns undefined
    throw new Error();
  });
} catch (e) {
  asyncLocalStorage.getStore(); // Returns the same object or value
  // The error will be caught here
}
```

----------------------------------------

TITLE: Using util.types.isWeakSet to check for WeakSet objects
DESCRIPTION: Shows how to use util.types.isWeakSet() to check if a value is a built-in WeakSet instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_103

LANGUAGE: javascript
CODE:
```
util.types.isWeakSet(new WeakSet());  // Returns true
```

----------------------------------------

TITLE: Custom Error Validation with assert.throws() in Node.js
DESCRIPTION: Demonstrates how to use a custom validation function with assert.throws() to perform complex error checks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_52

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  (err) => {
    assert(err instanceof Error);
    assert(/value/.test(err));
    // Avoid returning anything from validation functions besides `true`.
    // Otherwise, it's not clear what part of the validation failed. Instead,
    // throw an error about the specific validation that failed (as done in this
    // example) and add as much helpful debugging information to that error as
    // possible.
    return true;
  },
  'unexpected error',
);
```

----------------------------------------

TITLE: Comparing Installed Package with Latest Registry Version
DESCRIPTION: Example showing how to compare an installed package with its latest version from the registry.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-diff.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm diff --diff=abbrev
```

----------------------------------------

TITLE: Listing Supported Hash Algorithms in Node.js Crypto Module
DESCRIPTION: The crypto.getHashes function returns an array of names of supported hash algorithms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_77

LANGUAGE: JavaScript
CODE:
```
const {
  getHashes,
} = await import('node:crypto');

console.log(getHashes()); // ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]
```

LANGUAGE: JavaScript
CODE:
```
const {
  getHashes,
} = require('node:crypto');

console.log(getHashes()); // ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]
```

----------------------------------------

TITLE: Accessing UV Metrics Info using Node.js Performance API (ES Modules)
DESCRIPTION: This code snippet demonstrates how to use setImmediate to retrieve event loop metrics using the uvMetricsInfo property from the Node.js performance API in ES Modules format. The metrics include loop count, events processed, and events waiting.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
import { performance } from 'node:perf_hooks';

setImmediate(() => {
  console.log(performance.nodeTiming.uvMetricsInfo);
});
```

----------------------------------------

TITLE: Using the URL hash Property
DESCRIPTION: Example showing how to get and set the hash (fragment) portion of a URL.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://example.org/foo#bar');
console.log(myURL.hash);
// Prints #bar

myURL.hash = 'baz';
console.log(myURL.href);
// Prints https://example.org/foo#baz
```

----------------------------------------

TITLE: Creating a Workspace within a Project
DESCRIPTION: Demonstrates how to use npm init to create a new workspace within an existing project, including updating the root package.json.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-init.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ npm init -w packages/a
```

----------------------------------------

TITLE: Registering Synchronous Hooks with CommonJS
DESCRIPTION: Example demonstrating how to register synchronous module hooks using CommonJS syntax. Shows implementation of resolve and load hooks running in the main thread.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
// Use module.registerHooks() to register synchronous hooks in the main thread.
const { registerHooks } = require('node:module');
registerHooks({
  resolve(specifier, context, nextResolve) { /* implementation */ },
  load(url, context, nextLoad) { /* implementation */ },
});
```

----------------------------------------

TITLE: Using npm-access Command Syntax
DESCRIPTION: Command syntax for npm-access showing all available subcommands for managing package access controls, including listing packages, managing collaborators, and setting access levels.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-access.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm access list packages [<user>|<scope>|<scope:team>] [<package>]
npm access list collaborators [<package> [<user>]]
npm access get status [<package>]
npm access set status=public|private [<package>]
npm access set mfa=none|publish|automation [<package>]
npm access grant <read-only|read-write> <scope:team> [<package>]
npm access revoke <scope:team> [<package>]
```

----------------------------------------

TITLE: Filling Buffer with Hex String in Node.js (mjs)
DESCRIPTION: Demonstrates filling a Buffer using a hexadecimal string and the 'hex' encoding option in Node.js MJS syntax, illustrating how invalid characters can cause truncation or exceptions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_50

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(5);

console.log(buf.fill('a'));
// Prints: <Buffer 61 61 61 61 61>
console.log(buf.fill('aazz', 'hex'));
// Prints: <Buffer aa aa aa aa aa>
console.log(buf.fill('zz', 'hex'));
// Throws an exception.
```

----------------------------------------

TITLE: Linking Scoped Packages in Bash
DESCRIPTION: Shows how to link a scoped package using npm link command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm link @myorg/privatepackage
```

----------------------------------------

TITLE: Managing Process References Example
DESCRIPTION: Shows how to manage process reference counting using ref() and unref() methods to control process lifetime behavior.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_38

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const process = require('node:process');

const subprocess = spawn(process.argv[0], ['child_program.js'], {
  detached: true,
  stdio: 'ignore'
});

subprocess.unref();
subprocess.ref();
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
import process from 'node:process';

const subprocess = spawn(process.argv[0], ['child_program.js'], {
  detached: true,
  stdio: 'ignore'
});

subprocess.unref();
subprocess.ref();
```

----------------------------------------

TITLE: Working with MIME Parameters in JavaScript
DESCRIPTION: Shows how to use the util.MIMEParams class to manipulate parameters of a MIME type. It demonstrates iterating over parameters, setting new values, and converting parameters to a string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_33

LANGUAGE: javascript
CODE:
```
import { MIMEType } from 'node:util';

const { params } = new MIMEType('text/plain;foo=0;bar=1');
for (const name of params.keys()) {
  console.log(name);
}
// Prints:
//   foo
//   bar
```

LANGUAGE: javascript
CODE:
```
const { MIMEType } = require('node:util');

const { params } = new MIMEType('text/plain;foo=0;bar=1');
for (const name of params.keys()) {
  console.log(name);
}
// Prints:
//   foo
//   bar
```

LANGUAGE: javascript
CODE:
```
import { MIMEType } from 'node:util';

const { params } = new MIMEType('text/plain;foo=0;bar=1');
params.set('foo', 'def');
params.set('baz', 'xyz');
console.log(params.toString());
// Prints: foo=def;bar=1;baz=xyz
```

LANGUAGE: javascript
CODE:
```
const { MIMEType } = require('node:util');

const { params } = new MIMEType('text/plain;foo=0;bar=1');
params.set('foo', 'def');
params.set('baz', 'xyz');
console.log(params.toString());
// Prints: foo=def;bar=1;baz=xyz
```

----------------------------------------

TITLE: Defining a Scoped Package Name in Bash
DESCRIPTION: Demonstrates the format of a scoped package name, which includes the scope preceded by an '@' symbol and followed by a slash, then the package name.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scope.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
@somescope/somepackagename
```

----------------------------------------

TITLE: Converting random byte sequences to UTF-8 strings in Node.js
DESCRIPTION: This example demonstrates how random byte sequences can lose information when converted to UTF-8 strings and back. The code shows how invalid UTF-8 sequences get replaced with Unicode replacement characters, resulting in a different byte sequence than the original.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_95

LANGUAGE: javascript
CODE:
```
const original = [0xc0, 0xaf];
const bytesAsString = Buffer.from(original).toString('utf8');
const stringAsBytes = Buffer.from(bytesAsString, 'utf8');
console.log(stringAsBytes);
// Prints '<Buffer ef bf bd ef bf bd>'.
```

----------------------------------------

TITLE: Configuring the 'package-lock-only' Option in npm
DESCRIPTION: Details the `--package-lock-only` flag (Boolean, default: false). When set to true, npm operations like `update` or `list` will exclusively use the `package-lock.json` file and ignore the `node_modules` directory. For `update`, only the lockfile is updated; for `list`, the output reflects the lockfile's dependency tree.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_14

LANGUAGE: text
CODE:
```
#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock.json`,
ignoring `node_modules`.

For `update` this means only the `package-lock.json` will be updated,
instead of checking `node_modules` and downloading dependencies.

For `list` this means the output will be based on the tree described by the
`package-lock.json`, rather than the contents of `node_modules`.
```

----------------------------------------

TITLE: Structuring a Typical Chromium .gyp File (GYP)
DESCRIPTION: Defines the overall skeleton of a typical `.gyp` file used in Chromium/Node.js projects. It showcases the top-level dictionary structure containing keys like 'variables' for defining reusable values, 'includes' for incorporating other `.gypi` files, 'target_defaults' for common settings across targets, 'targets' for defining build outputs (executables, libraries), and 'conditions' for platform-specific configurations. The syntax is JSON-like with Pythonic comments (#) and trailing commas allowed.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/UserDocumentation.md#2025-04-23_snippet_0

LANGUAGE: gyp
CODE:
```
  {
    'variables': {
      .
      .
      .
    },
    'includes': [
      '../build/common.gypi',
    ],
    'target_defaults': {
      .
      .
      .
    },
    'targets': [
      {
        'target_name': 'target_1',
          .
          .
          .
      },
      {
        'target_name': 'target_2',
          .
          .
          .
      },
    ],
    'conditions': [
      ['OS=="linux"', {
        'targets': [
          {
            'target_name': 'linux_target_3',
              .
              .
              .
          },
        ],
      }],
      ['OS=="win"', {
        'targets': [
          {
            'target_name': 'windows_target_4',
              .
              .
              .
          },
        ],
      }, { # OS != "win"
        'targets': [
          {
            'target_name': 'non_windows_target_5',
              .
              .
              .
          },
      }],
    ],
  }
```

----------------------------------------

TITLE: Creating a SEA Configuration File in Bash
DESCRIPTION: Creates a JSON configuration file that specifies the main script and output path for generating a Single Executable Application preparation blob.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
echo '{ "main": "hello.js", "output": "sea-prep.blob" }' > sea-config.json
```

----------------------------------------

TITLE: Using BlockList to Check IP Addresses
DESCRIPTION: Demonstrates how to use the BlockList class to add rules and check IP addresses against those rules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
const blockList = new net.BlockList();
blockList.addAddress('123.123.123.123');
blockList.addRange('10.0.0.1', '10.0.0.10');
blockList.addSubnet('8592:757c:efae:4e45::', 64, 'ipv6');

console.log(blockList.check('123.123.123.123'));  // Prints: true
console.log(blockList.check('10.0.0.3'));  // Prints: true
console.log(blockList.check('222.111.111.222'));  // Prints: false

// IPv6 notation for IPv4 addresses works:
console.log(blockList.check('::ffff:7b7b:7b7b', 'ipv6')); // Prints: true
console.log(blockList.check('::ffff:123.123.123.123', 'ipv6')); // Prints: true
```

----------------------------------------

TITLE: Fetching, Extracting, and Retrieving Tarballs with pacote in Node.js
DESCRIPTION: Demonstrates how to import the 'pacote' library and use its main methods: fetching a package manifest, extracting a package to disk, and fetching a package tarball's raw data. Dependencies required include the 'pacote' Node.js package, and these methods are asynchronous (promise-based). Parameters include the npm package specifier or URL, output destination paths, and optional settings objects. Outputs are package manifest objects, extraction status, or raw buffer data for tarballs. This example assumes the user is familiar with Node.js promises and the npm package specification system.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/pacote/README.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
const pacote = require('pacote')

// get a package manifest
pacote.manifest('foo@1.x').then(manifest => console.log('got it', manifest))

// extract a package into a folder
pacote.extract('github:npm/cli', 'some/path', options)
  .then(({from, resolved, integrity}) => {
    console.log('extracted!', from, resolved, integrity)
  })

pacote.tarball('https://server.com/package.tgz').then(data => {
  console.log('got ' + data.length + ' bytes of tarball data')
})
```

----------------------------------------

TITLE: Using Boolean Expressions in If Statement Conditions (JavaScript)
DESCRIPTION: These snippets demonstrate using various boolean expressions as the condition for an 'if' statement. If the condition evaluates to true, the code immediately returns true. Otherwise, execution continues, and the code returns false. These test the evaluation of comparisons (<, <=) and logical operators (&&, ||) with literals (0, 1) and a variable 'Zero'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-less-expected.txt#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
if (1 || (0<=0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 && (0<0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 && (0<=0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((1<0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((1<=0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((1<0) || 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((1<=0) || 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((1<0) && 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((1<=0) && 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 || (1<0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 || (1<=0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 && (1<0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 && (1<=0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<1)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<=1)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<1) || 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<=1) || 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<1) && 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<=1) && 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 || (Zero<1)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 || (Zero<=1)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 && (Zero<1)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 && (Zero<=1)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<=0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<0) || 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<=0) || 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<0) && 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((Zero<=0) && 1) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 || (Zero<0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 || (Zero<=0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 && (Zero<0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if (1 && (Zero<=0)) return true; return false;
```

LANGUAGE: javascript
CODE:
```
if ((1<Zero)) return true; return false;
```

----------------------------------------

TITLE: Escaping All Characters with escapeEverything Option - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates setting the 'escapeEverything' option in cssesc() to true, forcing every character in the output to be escaped using a hexadecimal sequence. Ensures maximum ASCII-safe output, regardless of the original characters. The result is suitable for environments requiring complete character escaping.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cssesc/README.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
cssesc('lolwat"foo\'bar', {
  'escapeEverything': true
});
// → '\\6C\\6F\\6C\\77\\61\\74\\"\\66\\6F\\6F\\\'\\62\\61\\72'
// → "\\6C\\6F\\6C\\77\\61\\74\\\"\\66\\6F\\6F\\'\\62\\61\\72"
```

----------------------------------------

TITLE: File Deletion with fs.unlinkSync
DESCRIPTION: Deletes a file synchronously using unlink(2). Accepts file paths or WHATWG URL objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_101

LANGUAGE: javascript
CODE:
```
fs.unlinkSync(path)
```

----------------------------------------

TITLE: Implementing a Node.js Addon-Wrapped C++ Object - C++
DESCRIPTION: Implements the 'MyObject' class for use in a Node.js addon, managing its memory and lifecycle. Provides V8 binding setup, constructor logic for both direct and functional invocation, and cleanup hooks for environment teardown. Uses V8 API calls to wrap, unwrap, and expose the object to JavaScript; requires Node.js and V8 environment. Not thread-safe and assumes synchronous operation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_32

LANGUAGE: C++
CODE:
```
// myobject.cc
#include <node.h>
#include "myobject.h"

namespace demo {

using node::AddEnvironmentCleanupHook;
using v8::Context;
using v8::Function;
using v8::FunctionCallbackInfo;
using v8::FunctionTemplate;
using v8::Global;
using v8::Isolate;
using v8::Local;
using v8::Object;
using v8::String;
using v8::Value;

// Warning! This is not thread-safe, this addon cannot be used for worker
// threads.
Global<Function> MyObject::constructor;

MyObject::MyObject(double value) : value_(value) {
}

MyObject::~MyObject() {
}

void MyObject::Init(Isolate* isolate) {
  // Prepare constructor template
  Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New);
  tpl->SetClassName(String::NewFromUtf8(isolate, "MyObject").ToLocalChecked());
  tpl->InstanceTemplate()->SetInternalFieldCount(1);

  Local<Context> context = isolate->GetCurrentContext();
  constructor.Reset(isolate, tpl->GetFunction(context).ToLocalChecked());

  AddEnvironmentCleanupHook(isolate, [](void*) {
    constructor.Reset();
  }, nullptr);
}

void MyObject::New(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = args.GetIsolate();
  Local<Context> context = isolate->GetCurrentContext();

  if (args.IsConstructCall()) {
    // Invoked as constructor: `new MyObject(...)`
    double value = args[0]->IsUndefined() ?
        0 : args[0]->NumberValue(context).FromMaybe(0);
    MyObject* obj = new MyObject(value);
    obj->Wrap(args.This());
    args.GetReturnValue().Set(args.This());
  } else {
    // Invoked as plain function `MyObject(...)`, turn into construct call.
    const int argc = 1;
    Local<Value> argv[argc] = { args[0] };
    Local<Function> cons = Local<Function>::New(isolate, constructor);
    Local<Object> instance =
        cons->NewInstance(context, argc, argv).ToLocalChecked();
    args.GetReturnValue().Set(instance);
  }
}

void MyObject::NewInstance(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = args.GetIsolate();

  const unsigned argc = 1;
  Local<Value> argv[argc] = { args[0] };
  Local<Function> cons = Local<Function>::New(isolate, constructor);
  Local<Context> context = isolate->GetCurrentContext();
  Local<Object> instance =
      cons->NewInstance(context, argc, argv).ToLocalChecked();

  args.GetReturnValue().Set(instance);
}

}  // namespace demo
```

----------------------------------------

TITLE: Executing npm Test Script with Arguments via Node --run (Console)
DESCRIPTION: This command shows how to execute the 'test' script defined in the nearest package.json using `node --run` and pass additional arguments (`--verbose`) to the script itself. Arguments placed after `--` are forwarded to the executed script.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_27

LANGUAGE: console
CODE:
```
$ node --run test -- --verbose
```

----------------------------------------

TITLE: Configuring Development Engine Requirements
DESCRIPTION: Specifies runtime and package manager requirements for development environments with custom failure behaviors.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_40

LANGUAGE: json
CODE:
```
{
  "devEngines": {
    "runtime": {
      "name": "node",
      "onFail": "error"
    },
    "packageManager": {
      "name": "npm",
      "onFail": "error"
    }
  }
}
```

----------------------------------------

TITLE: Defining Functions with Arrow Function Syntax - JavaScript
DESCRIPTION: This snippet demonstrates preferred use of arrow functions for defining standalone and inline callback functions in modern JavaScript. It encourages contributors to use 'const' or 'let' variable declarations and concise syntax for better readability, especially in test setups and callbacks. Parameters can be single or multiple, and the function body is enclosed within curly braces if it includes multiple statements.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/wpt/resource-timing/CodingConventions.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
const func1 = param1 => {
  body();
}
const func2 = (param1, param2) => {
  body();
}
fn(param => {
    body();
});
```

----------------------------------------

TITLE: Using npm bugs Command in Bash
DESCRIPTION: Command syntax for the npm bugs command which opens a package's bug tracker URL in a browser. It accepts one or more package names as arguments and has 'issues' as an alias.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-bugs.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm bugs [<pkgname> [<pkgname> ...]]

alias: issues
```

----------------------------------------

TITLE: Checking Header Existence in Node.js
DESCRIPTION: Shows how to check if a specific header exists in the outgoing message.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_51

LANGUAGE: javascript
CODE:
```
const hasContentType = outgoingMessage.hasHeader('content-type');
```

----------------------------------------

TITLE: Validating Node.js Internal Errors via Code Property in JavaScript
DESCRIPTION: Illustrates the preferred method for testing internal Node.js errors using `assert.throws`. Instead of matching the potentially unstable error message string, it checks the `code` property of the thrown error object for a specific, stable error code (e.g., 'ERR_FS_FILE_TOO_LARGE'). Depends on the `node:assert` module and Node.js internal error definitions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-tests.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
assert.throws(
  () => {
    throw new ERR_FS_FILE_TOO_LARGE(`${sizeKiB} Kb`);
  },
  { code: 'ERR_FS_FILE_TOO_LARGE' },
  // Do not include message: /^File size ([0-9]+ Kb) is greater than 2 GiB$/
);
```

----------------------------------------

TITLE: Checking TracingChannel Subscribers in JavaScript (ES Modules)
DESCRIPTION: Example of using the hasSubscribers property to check if any of the TracingChannel's individual channels have subscribers in ES Modules. This helps optimize code by only performing tracing operations when necessary.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_40

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

const channels = diagnostics_channel.tracingChannel('my-channel');

if (channels.hasSubscribers) {
  // Do something
}
```

----------------------------------------

TITLE: Binding AsyncLocalStorage to Channel - Node.js (ESM)
DESCRIPTION: Demonstrates binding an AsyncLocalStorage instance to a diagnostics channel with an optional transform function using ES Module import syntax. Requires both 'node:diagnostics_channel' and 'node:async_hooks' modules. Binds the store to the channel such that context data is made available when channel.runStores is invoked. Transform function allows customizing the context object. This feature is experimental as of Node.js v18.19.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_22

LANGUAGE: JavaScript (ESM)
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';\nimport { AsyncLocalStorage } from 'node:async_hooks';\n\nconst store = new AsyncLocalStorage();\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.bindStore(store, (data) => {\n  return { data };\n});
```

----------------------------------------

TITLE: Creating Thread-safe Function in Node.js N-API
DESCRIPTION: Creates a JavaScript function that can be called safely from multiple threads. Parameters control queue size, thread counts, cleanup behavior, and optional context data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_212

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status
napi_create_threadsafe_function(napi_env env,
                                napi_value func,
                                napi_value async_resource,
                                napi_value async_resource_name,
                                size_t max_queue_size,
                                size_t initial_thread_count,
                                void* thread_finalize_data,
                                napi_finalize thread_finalize_cb,
                                void* context,
                                napi_threadsafe_function_call_js call_js_cb,
                                napi_threadsafe_function* result);
```

----------------------------------------

TITLE: Iterable Object Implementation
DESCRIPTION: Implementation of an iterable object using Symbol.iterator with a custom iterator that yields values from an array [1, 2].
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/array-spread-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const iterable = _{
  [Symbol.iterator]() {
    const it = _[1, 2].values();
    _return {next() { _return it.next(); }};
  }
};
```

----------------------------------------

TITLE: Request Resolution Before Client Close Example
DESCRIPTION: Shows how to make an HTTP request and properly close the client after the request completes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.end('undici')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

try {
  const { body } = await client.request({
      path: '/',
      method: 'GET'
  })
  body.setEncoding('utf8')
  body.on('data', console.log)
} catch (error) {}

await client.close()

console.log('Client closed')
server.close()
```

----------------------------------------

TITLE: Creating a Readable Stream with Simplified Constructor - Node.js
DESCRIPTION: This example shows how to create a Readable stream using the simplified constructor approach. It defines the read method inline.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_83

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

const myReadable = new Readable({
  read(size) {
    // ...
  },
});
```

----------------------------------------

TITLE: Asynchronous Disposal of a UDP Socket in Node.js
DESCRIPTION: Shows the usage of the experimental Symbol.asyncDispose method for closing a UDP socket. This method returns a promise that resolves when the socket has been closed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
socket[Symbol.asyncDispose]()
```

----------------------------------------

TITLE: Example Node.js Diagnostic Report in JSON Format
DESCRIPTION: A complete example of a diagnostic report generated by Node.js when an uncaught exception occurs. The report includes header information, JavaScript and native stack traces, heap statistics, resource usage metrics, libuv information, and environment variables.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "header": {
    "reportVersion": 5,
    "event": "exception",
    "trigger": "Exception",
    "filename": "report.20181221.005011.8974.0.001.json",
    "dumpEventTime": "2018-12-21T00:50:11Z",
    "dumpEventTimeStamp": "1545371411331",
    "processId": 8974,
    "cwd": "/home/nodeuser/project/node",
    "commandLine": [
      "/home/nodeuser/project/node/out/Release/node",
      "--report-uncaught-exception",
      "/home/nodeuser/project/node/test/report/test-exception.js",
      "child"
    ],
    "nodejsVersion": "v12.0.0-pre",
    "glibcVersionRuntime": "2.17",
    "glibcVersionCompiler": "2.17",
    "wordSize": "64 bit",
    "arch": "x64",
    "platform": "linux",
    "componentVersions": {
      "node": "12.0.0-pre",
      "v8": "7.1.302.28-node.5",
      "uv": "1.24.1",
      "zlib": "1.2.11",
      "ares": "1.15.0",
      "modules": "68",
      "nghttp2": "1.34.0",
      "napi": "3",
      "llhttp": "1.0.1",
      "openssl": "1.1.0j"
    },
    "release": {
      "name": "node"
    },
    "osName": "Linux",
    "osRelease": "3.10.0-862.el7.x86_64",
    "osVersion": "#1 SMP Wed Mar 21 18:14:51 EDT 2018",
    "osMachine": "x86_64",
    "cpus": [
      {
        "model": "Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz",
        "speed": 2700,
        "user": 88902660,
        "nice": 0,
        "sys": 50902570,
        "idle": 241732220,
        "irq": 0
      },
      {
        "model": "Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz",
        "speed": 2700,
        "user": 88902660,
        "nice": 0,
        "sys": 50902570,
        "idle": 241732220,
        "irq": 0
      }
    ],
    "networkInterfaces": [
      {
        "name": "en0",
        "internal": false,
        "mac": "13:10:de:ad:be:ef",
        "address": "10.0.0.37",
        "netmask": "255.255.255.0",
        "family": "IPv4"
      }
    ],
    "host": "test_machine"
  },
  "javascriptStack": {
    "message": "Error: *** test-exception.js: throwing uncaught Error",
    "stack": [
      "at myException (/home/nodeuser/project/node/test/report/test-exception.js:9:11)",
      "at Object.<anonymous> (/home/nodeuser/project/node/test/report/test-exception.js:12:3)",
      "at Module._compile (internal/modules/cjs/loader.js:718:30)",
      "at Object.Module._extensions..js (internal/modules/cjs/loader.js:729:10)",
      "at Module.load (internal/modules/cjs/loader.js:617:32)",
      "at tryModuleLoad (internal/modules/cjs/loader.js:560:12)",
      "at Function.Module._load (internal/modules/cjs/loader.js:552:3)",
      "at Function.Module.runMain (internal/modules/cjs/loader.js:771:12)",
      "at executeUserCode (internal/bootstrap/node.js:332:15)"
    ]
  },
  "nativeStack": [
    {
      "pc": "0x000055b57f07a9ef",
      "symbol": "report::GetNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, v8::Local<v8::String>, std::ostream&) [./node]"
    },
    {
      "pc": "0x000055b57f07cf03",
      "symbol": "report::GetReport(v8::FunctionCallbackInfo<v8::Value> const&) [./node]"
    },
    {
      "pc": "0x000055b57f1bccfd",
      "symbol": " [./node]"
    },
    {
      "pc": "0x000055b57f1be048",
      "symbol": "v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*) [./node]"
    },
    {
      "pc": "0x000055b57feeda0e",
      "symbol": " [./node]"
    }
  ],
  "javascriptHeap": {
    "totalMemory": 5660672,
    "executableMemory": 524288,
    "totalCommittedMemory": 5488640,
    "availableMemory": 4341379928,
    "totalGlobalHandlesMemory": 8192,
    "usedGlobalHandlesMemory": 3136,
    "usedMemory": 4816432,
    "memoryLimit": 4345298944,
    "mallocedMemory": 254128,
    "externalMemory": 315644,
    "peakMallocedMemory": 98752,
    "nativeContextCount": 1,
    "detachedContextCount": 0,
    "doesZapGarbage": 0,
    "heapSpaces": {
      "read_only_space": {
        "memorySize": 524288,
        "committedMemory": 39208,
        "capacity": 515584,
        "used": 30504,
        "available": 485080
      },
      "new_space": {
        "memorySize": 2097152,
        "committedMemory": 2019312,
        "capacity": 1031168,
        "used": 985496,
        "available": 45672
      },
      "old_space": {
        "memorySize": 2273280,
        "committedMemory": 1769008,
        "capacity": 1974640,
        "used": 1725488,
        "available": 249152
      },
      "code_space": {
        "memorySize": 696320,
        "committedMemory": 184896,
        "capacity": 152128,
        "used": 152128,
        "available": 0
      },
      "map_space": {
        "memorySize": 536576,
        "committedMemory": 344928,
        "capacity": 327520,
        "used": 327520,
        "available": 0
      },
      "large_object_space": {
        "memorySize": 0,
        "committedMemory": 0,
        "capacity": 1520590336,
        "used": 0,
        "available": 1520590336
      },
      "new_large_object_space": {
        "memorySize": 0,
        "committedMemory": 0,
        "capacity": 0,
        "used": 0,
        "available": 0
      }
    }
  },
  "resourceUsage": {
    "rss": "35766272",
    "free_memory": "1598337024",
    "total_memory": "17179869184",
    "available_memory": "1598337024",
    "maxRss": "36624662528",
    "constrained_memory": "36624662528",
    "userCpuSeconds": 0.040072,
    "kernelCpuSeconds": 0.016029,
    "cpuConsumptionPercent": 5.6101,
    "userCpuConsumptionPercent": 4.0072,
    "kernelCpuConsumptionPercent": 1.6029,
    "pageFaults": {
      "IORequired": 0,
      "IONotRequired": 4610
    },
    "fsActivity": {
      "reads": 0,
      "writes": 0
    }
  },
  "uvthreadResourceUsage": {
    "userCpuSeconds": 0.039843,
    "kernelCpuSeconds": 0.015937,
    "cpuConsumptionPercent": 5.578,
    "userCpuConsumptionPercent": 3.9843,
    "kernelCpuConsumptionPercent": 1.5937,
    "fsActivity": {
      "reads": 0,
      "writes": 0
    }
  },
  "libuv": [
    {
      "type": "async",
      "is_active": true,
      "is_referenced": false,
      "address": "0x0000000102910900",
      "details": ""
    },
    {
      "type": "timer",
      "is_active": false,
      "is_referenced": false,
      "address": "0x00007fff5fbfeab0",
      "repeat": 0,
      "firesInMsFromNow": 94403548320796,
      "expired": true
    },
    {
      "type": "check",
      "is_active": true,
      "is_referenced": false,
      "address": "0x00007fff5fbfeb48"
    },
    {
      "type": "idle",
      "is_active": false,
      "is_referenced": true,
      "address": "0x00007fff5fbfebc0"
    },
    {
      "type": "prepare",
      "is_active": false,
      "is_referenced": false,
      "address": "0x00007fff5fbfec38"
    },
    {
      "type": "check",
      "is_active": false,
      "is_referenced": false,
      "address": "0x00007fff5fbfecb0"
    },
    {
      "type": "async",
      "is_active": true,
      "is_referenced": false,
      "address": "0x000000010188f2e0"
    },
    {
      "type": "tty",
      "is_active": false,
      "is_referenced": true,
      "address": "0x000055b581db0e18",
      "width": 204,
      "height": 55,
      "fd": 17,
      "writeQueueSize": 0,
      "readable": true,
      "writable": true
    },
    {
      "type": "signal",
      "is_active": true,
      "is_referenced": false,
      "address": "0x000055b581d80010",
      "signum": 28,
      "signal": "SIGWINCH"
    },
    {
      "type": "tty",
      "is_active": true,
      "is_referenced": true,
      "address": "0x000055b581df59f8",
      "width": 204,
      "height": 55,
      "fd": 19,
      "writeQueueSize": 0,
      "readable": true,
      "writable": true
    },
    {
      "type": "loop",
      "is_active": true,
      "address": "0x000055fc7b2cb180",
      "loopIdleTimeSeconds": 22644.8
    },
    {
      "type": "tcp",
      "is_active": true,
      "is_referenced": true,
      "address": "0x000055e70fcb85d8",
      "localEndpoint": {
        "host": "localhost",
        "ip4": "127.0.0.1",
        "port": 48986
      },
      "remoteEndpoint": {
        "host": "localhost",
        "ip4": "127.0.0.1",
        "port": 38573
      },
      "sendBufferSize": 2626560,
      "recvBufferSize": 131072,
      "fd": 24,
      "writeQueueSize": 0,
      "readable": true,
      "writable": true
    }
  ],
  "workers": [],
  "environmentVariables": {
    "REMOTEHOST": "REMOVED",
    "MANPATH": "/opt/rh/devtoolset-3/root/usr/share/man:",
    "XDG_SESSION_ID": "66126",
    "HOSTNAME": "test_machine",
    "HOST": "test_machine",
    "TERM": "xterm-256color",
    "SHELL": "/bin/csh",
    "SSH_CLIENT": "REMOVED",
    "PERL5LIB": "/opt/rh/devtoolset-3/root//usr/lib64/perl5/vendor_perl:/opt/rh/devtoolset-3/root/usr/lib/perl5:/opt/rh/devtoolset-3/root//usr/share/perl5/vendor_perl",
    "OLDPWD": "/home/nodeuser/project/node/src"
  }
}
```

----------------------------------------

TITLE: Error Throwing Assertion with assert.doesNotThrow
DESCRIPTION: Demonstrates assert.doesNotThrow() usage for verifying functions don't throw specific types of errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_19

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

assert.doesNotThrow(
  () => {
    throw new TypeError('Wrong value');
  },
  /Wrong value/,
  'Whoops',
);
// Throws: AssertionError: Got unwanted exception: Whoops
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

assert.doesNotThrow(
  () => {
    throw new TypeError('Wrong value');
  },
  /Wrong value/,
  'Whoops',
);
// Throws: AssertionError: Got unwanted exception: Whoops
```

----------------------------------------

TITLE: Spying on an Object Method using TestContext Mock - JavaScript
DESCRIPTION: Illustrates how to use the `t.mock.method()` API available on the `TestContext` object to create a spy on a method of an object. This approach automatically restores the original method after the test completes. It verifies call count, arguments, result, and the `this` context of the method call.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_23

LANGUAGE: js
CODE:
```
test('spies on an object method', (t) => {
  const number = {
    value: 5,
    add(a) {
      return this.value + a;
    },
  };

  t.mock.method(number, 'add');
  assert.strictEqual(number.add.mock.callCount(), 0);
  assert.strictEqual(number.add(3), 8);
  assert.strictEqual(number.add.mock.callCount(), 1);

  const call = number.add.mock.calls[0];

  assert.deepStrictEqual(call.arguments, [3]);
  assert.strictEqual(call.result, 8);
  assert.strictEqual(call.target, undefined);
  assert.strictEqual(call.this, number);
});
```

----------------------------------------

TITLE: Compiling and Running JavaScript with vm.Script in Node.js
DESCRIPTION: This example shows how to use vm.Script to compile JavaScript code and run it multiple times in a specific context, demonstrating how global variables are affected.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
const vm = require('node:vm');

const context = {
  animal: 'cat',
  count: 2,
};

const script = new vm.Script('count += 1; name = "kitty";');

vm.createContext(context);
for (let i = 0; i < 10; ++i) {
  script.runInContext(context);
}

console.log(context);
// Prints: { animal: 'cat', count: 12, name: 'kitty' }
```

----------------------------------------

TITLE: Installing TypeScript Support Package with npm
DESCRIPTION: Command to install the tsx package as a development dependency using npm for full TypeScript support.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/typescript.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev tsx
```

----------------------------------------

TITLE: Resulting Command Execution from npx Example (Bash)
DESCRIPTION: Illustrates the actual command executed by the system based on the preceding `npx` example (`npx foo@latest bar --package=@npmcli/foo`). It shows that `foo` (resolved from `foo@latest`) is executed with `bar` and `--package=@npmcli/foo` as its arguments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npx.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ foo bar --package=@npmcli/foo
```

----------------------------------------

TITLE: Accessing Raw HTTP Headers in Node.js
DESCRIPTION: Demonstrates accessing raw HTTP headers that preserves original casing and duplicate headers in an array format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_47

LANGUAGE: javascript
CODE:
```
// Prints something like:
//
// [ 'user-agent',
//   'this is invalid because there can be only one',
//   'User-Agent',
//   'curl/7.22.0',
//   'Host',
//   '127.0.0.1:8000',
//   'ACCEPT',
//   '*/*' ]
console.log(request.rawHeaders);
```

----------------------------------------

TITLE: Incorrect Type Import Syntax for Node.js Type Stripping
DESCRIPTION: Example of TypeScript import statements that don't use the 'type' keyword, which will result in runtime errors when using the built-in type stripping feature.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/typescript.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { Type1, Type2 } from './module.ts';
import { fn, FnParams } from './fn.ts';
```

----------------------------------------

TITLE: Unsubscribing from Tracing Channel Events - Node.js (CommonJS)
DESCRIPTION: Provides an example for unsubscribing multiple event handlers from a tracing channel using CommonJS syntax. The unsubscribe method takes an object defining all lifecycle event handler functions and removes each. Returns true if successful, false otherwise. Needs 'node:diagnostics_channel' version 18.19.0 or above.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_31

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');\n\nconst channels = diagnostics_channel.tracingChannel('my-channel');\n\nchannels.unsubscribe({\n  start(message) {\n    // Handle start message\n  },\n  end(message) {\n    // Handle end message\n  },\n  asyncStart(message) {\n    // Handle asyncStart message\n  },\n  asyncEnd(message) {\n    // Handle asyncEnd message\n  },\n  error(message) {\n    // Handle error message\n  },\n});
```

----------------------------------------

TITLE: Testing 'this' Context in Strict Mode with Array.reduceRight() in JavaScript
DESCRIPTION: Tests the 'this' value within the reduceRight() callback function when using strict mode. In strict mode, 'this' should be undefined if not explicitly set.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-reduceRight-expected.txt#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
[2,3].reduceRight(function() {'use strict'; return this;})
```

----------------------------------------

TITLE: JavaScript Wrapper for C++ Binding with Error Handling
DESCRIPTION: JavaScript wrapper function that handles type checking and error processing from the C++ binding. It demonstrates how to properly throw JavaScript errors based on the error context returned from C++.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/cpp-style-guide.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
exports.foo = function(str) {
  // Prefer doing the type-checks in JavaScript
  if (typeof str !== 'string') {
    throw new errors.codes.ERR_INVALID_ARG_TYPE('str', 'string');
  }

  const ctx = {};
  const result = binding.foo(str, ctx);
  if (ctx.code !== undefined) {
    throw new errors.codes.ERR_ERROR_NAME(ctx.code);
  }
  return result;
};
```

----------------------------------------

TITLE: Parsing Set-Cookie headers with getSetCookies in Undici
DESCRIPTION: Example showing how to use the getSetCookies function to parse all Set-Cookie headers. It requires Headers from Undici and returns an array of Cookie objects.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Cookies.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { getSetCookies, Headers } from 'undici'

const headers = new Headers({ 'set-cookie': 'undici=getSetCookies; Secure' })

console.log(getSetCookies(headers))
// [
//   {
//     name: 'undici',
//     value: 'getSetCookies',
//     secure: true
//   }
// ]

```

----------------------------------------

TITLE: Using executionAsyncResource with Node.js fs (CommonJS Syntax) - JavaScript
DESCRIPTION: Similar to the ES module version, this example uses CommonJS require statements to access fs and async_hooks. It shows how to retrieve the async execution ID and associated resource in a synchronous context, and within an asynchronous file open callback. No additional dependencies are needed; intended for use in Node.js CommonJS environments. Inputs and outputs are the same as the ES module version, tracking how async_hooks contexts change around async operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_18

LANGUAGE: cjs
CODE:
```
const { open } = require('node:fs');
const { executionAsyncId, executionAsyncResource } = require('node:async_hooks');

console.log(executionAsyncId(), executionAsyncResource());  // 1 {}
open(__filename, 'r', (err, fd) => {
  console.log(executionAsyncId(), executionAsyncResource());  // 7 FSReqWrap
});
```

----------------------------------------

TITLE: Testing Intl.DisplayNames Methods - JavaScript
DESCRIPTION: Verifies construction and method invocation for the Intl.DisplayNames API, including supported locales, object instantiation specifying type 'region', value lookup, and options inspection. Requires ECMAScript Internationalization support and the 'en-US' locale. Parameters involve locales and type descriptors; outputs descriptive or resolved strings.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-without-side-effects-i18n-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
Intl.DisplayNames.supportedLocalesOf(["en-US"])
new Intl.DisplayNames(["en-US"], {type: "region"})
someGlobalDisplayNames.of("en")
someGlobalDisplayNames.resolvedOptions()
```

----------------------------------------

TITLE: Create Hook Example - ESM
DESCRIPTION: Example of creating an async hook with init and destroy callbacks using ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_3

LANGUAGE: mjs
CODE:
```
import { createHook } from 'node:async_hooks';

const asyncHook = createHook({
  init(asyncId, type, triggerAsyncId, resource) { },
  destroy(asyncId) { },
});
```

----------------------------------------

TITLE: Writing Unsigned 16-bit Integer (BE) to Buffer (Node.js)
DESCRIPTION: Writes an unsigned 16-bit integer `value` to the Buffer `buf` at the specified `offset` using big-endian format. `value` must be a valid unsigned 16-bit integer (0-65535). Returns the offset plus two. Also available as `writeUint16BE`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_96

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeUInt16BE(0xdead, 0);
buf.writeUInt16BE(0xbeef, 2);

console.log(buf);
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeUInt16BE(0xdead, 0);
buf.writeUInt16BE(0xbeef, 2);

console.log(buf);
```

----------------------------------------

TITLE: Using traceCallback with diagnostics_channel in JavaScript (CommonJS)
DESCRIPTION: Example of using the traceCallback method to trace a function that accepts a callback in CommonJS. It traces synchronous execution and async callback execution, following Node's error-first callback pattern.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.traceCallback((arg1, callback) => {
  // Do something
  callback(null, 'result');
}, 1, {
  some: 'thing',
}, thisArg, arg1, callback);
```

----------------------------------------

TITLE: Setting Up Node.js Per-Instance State in C++
DESCRIPTION: This code sets up a Node.js instance, including the v8::Isolate, event loop, and Environment. It demonstrates how to create and run a Node.js environment, load and execute JavaScript code, and handle the event loop.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/embedding.md#2025-04-23_snippet_1

LANGUAGE: cpp
CODE:
```
int RunNodeInstance(MultiIsolatePlatform* platform,
                    const std::vector<std::string>& args,
                    const std::vector<std::string>& exec_args) {
  int exit_code = 0;

  // Setup up a libuv event loop, v8::Isolate, and Node.js Environment.
  std::vector<std::string> errors;
  std::unique_ptr<CommonEnvironmentSetup> setup =
      CommonEnvironmentSetup::Create(platform, &errors, args, exec_args);
  if (!setup) {
    for (const std::string& err : errors)
      fprintf(stderr, "%s: %s\n", args[0].c_str(), err.c_str());
    return 1;
  }

  Isolate* isolate = setup->isolate();
  Environment* env = setup->env();

  {
    Locker locker(isolate);
    Isolate::Scope isolate_scope(isolate);
    HandleScope handle_scope(isolate);
    // The v8::Context needs to be entered when node::CreateEnvironment() and
    // node::LoadEnvironment() are being called.
    Context::Scope context_scope(setup->context());

    // Set up the Node.js instance for execution, and run code inside of it.
    // There is also a variant that takes a callback and provides it with
    // the `require` and `process` objects, so that it can manually compile
    // and run scripts as needed.
    // The `require` function inside this script does *not* access the file
    // system, and can only load built-in Node.js modules.
    // `module.createRequire()` is being used to create one that is able to
    // load files from the disk, and uses the standard CommonJS file loader
    // instead of the internal-only `require` function.
    MaybeLocal<Value> loadenv_ret = node::LoadEnvironment(
        env,
        "const publicRequire ="
        "  require('node:module').createRequire(process.cwd() + '/');"
        "globalThis.require = publicRequire;"
        "require('node:vm').runInThisContext(process.argv[1]);");

    if (loadenv_ret.IsEmpty())  // There has been a JS exception.
      return 1;

    exit_code = node::SpinEventLoop(env).FromMaybe(1);

    // node::Stop() can be used to explicitly stop the event loop and keep
    // further JavaScript from running. It can be called from any thread,
    // and will act like worker.terminate() if called from another thread.
    node::Stop(env);
  }

  return exit_code;
}
```

----------------------------------------

TITLE: Testing Object Literal Serialization in JavaScript
DESCRIPTION: This snippet contains multiple test cases for serializing object literals with various property types. It uses a 'compileAndSerialize' function (not shown) to process the input and compare it with expected output.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/function-toString-object-literals-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS compileAndSerialize('a = { 1: null }') is 'a = { 1: null }'
PASS compileAndSerialize('a = { 0: null }') is 'a = { 0: null }'
PASS compileAndSerialize('a = { 1.0: null }') is 'a = { 1.0: null }'
PASS compileAndSerialize('a = { "1.0": null }') is 'a = { "1.0": null }'
PASS compileAndSerialize('a = { 1e-500: null }') is 'a = { 1e-500: null }'
PASS compileAndSerialize('a = { 1e-300: null }') is 'a = { 1e-300: null }'
PASS compileAndSerialize('a = { 1e300: null }') is 'a = { 1e300: null }'
PASS compileAndSerialize('a = { 1e500: null }') is 'a = { 1e500: null }'
PASS compileAndSerialize('a = { NaN: null }') is 'a = { NaN: null }'
PASS compileAndSerialize('a = { Infinity: null }') is 'a = { Infinity: null }'
PASS compileAndSerialize('a = { "1": null }') is 'a = { "1": null }'
PASS compileAndSerialize('a = { "1hi": null }') is 'a = { "1hi": null }'
PASS compileAndSerialize('a = { "'": null }') is 'a = { "'": null }'
PASS compileAndSerialize('a = { "\"": null }') is 'a = { "\"": null }'
PASS compileAndSerialize('a = { get x() { } }') is 'a = { get x() { } }'
PASS compileAndSerialize('a = { set x(y) { } }') is 'a = { set x(y) { } }'
PASS compileAndSerialize('a = { --1: null }') threw exception SyntaxError: Unexpected token '--'.
PASS compileAndSerialize('a = { -NaN: null }') threw exception SyntaxError: Unexpected token '-'.
PASS compileAndSerialize('a = { -0: null }') threw exception SyntaxError: Unexpected token '-'.
PASS compileAndSerialize('a = { -0.0: null }') threw exception SyntaxError: Unexpected token '-'.
PASS compileAndSerialize('a = { -Infinity: null }') threw exception SyntaxError: Unexpected token '-'.
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Defining Object Identifiers (OIDs) for Cryptography and Security in C
DESCRIPTION: This snippet defines a large set of Object Identifiers (OIDs) as hexadecimal string constants. These OIDs are used to uniquely identify various objects, algorithms, and attributes in cryptography and security protocols.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/fuzz/oids.txt#2025-04-23_snippet_3

LANGUAGE: C
CODE:
```
OBJ_iana="\x2B\x06\x01"
OBJ_Directory="\x2B\x06\x01\x01"
OBJ_Management="\x2B\x06\x01\x02"
OBJ_Experimental="\x2B\x06\x01\x03"
OBJ_Private="\x2B\x06\x01\x04"
OBJ_Security="\x2B\x06\x01\x05"
OBJ_SNMPv2="\x2B\x06\x01\x06"
OBJ_Mail="\x2B\x06\x01\x07"
OBJ_Enterprises="\x2B\x06\x01\x04\x01"
OBJ_dcObject="\x2B\x06\x01\x04\x01\x8B\x3A\x82\x58"
OBJ_domainComponent="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x19"
OBJ_Domain="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x0D"
OBJ_selected_attribute_types="\x55\x01\x05"
OBJ_clearance="\x55\x01\x05\x37"
OBJ_md4WithRSAEncryption="\x2A\x86\x48\x86\xF7\x0D\x01\x01\x03"
OBJ_ac_proxying="\x2B\x06\x01\x05\x05\x07\x01\x0A"
OBJ_sinfo_access="\x2B\x06\x01\x05\x05\x07\x01\x0B"
OBJ_id_aca_encAttrs="\x2B\x06\x01\x05\x05\x07\x0A\x06"
OBJ_role="\x55\x04\x48"
OBJ_policy_constraints="\x55\x1D\x24"
OBJ_target_information="\x55\x1D\x37"
OBJ_no_rev_avail="\x55\x1D\x38"
OBJ_ansi_X9_62="\x2A\x86\x48\xCE\x3D"
OBJ_X9_62_prime_field="\x2A\x86\x48\xCE\x3D\x01\x01"
OBJ_X9_62_characteristic_two_field="\x2A\x86\x48\xCE\x3D\x01\x02"
OBJ_X9_62_id_ecPublicKey="\x2A\x86\x48\xCE\x3D\x02\x01"
OBJ_X9_62_prime192v1="\x2A\x86\x48\xCE\x3D\x03\x01\x01"
OBJ_X9_62_prime192v2="\x2A\x86\x48\xCE\x3D\x03\x01\x02"
OBJ_X9_62_prime192v3="\x2A\x86\x48\xCE\x3D\x03\x01\x03"
OBJ_X9_62_prime239v1="\x2A\x86\x48\xCE\x3D\x03\x01\x04"
OBJ_X9_62_prime239v2="\x2A\x86\x48\xCE\x3D\x03\x01\x05"
OBJ_X9_62_prime239v3="\x2A\x86\x48\xCE\x3D\x03\x01\x06"
OBJ_X9_62_prime256v1="\x2A\x86\x48\xCE\x3D\x03\x01\x07"
OBJ_ecdsa_with_SHA1="\x2A\x86\x48\xCE\x3D\x04\x01"
OBJ_ms_csp_name="\x2B\x06\x01\x04\x01\x82\x37\x11\x01"
OBJ_aes_128_ecb="\x60\x86\x48\x01\x65\x03\x04\x01\x01"
OBJ_aes_128_cbc="\x60\x86\x48\x01\x65\x03\x04\x01\x02"
OBJ_aes_128_ofb128="\x60\x86\x48\x01\x65\x03\x04\x01\x03"
OBJ_aes_128_cfb128="\x60\x86\x48\x01\x65\x03\x04\x01\x04"
OBJ_aes_192_ecb="\x60\x86\x48\x01\x65\x03\x04\x01\x15"
OBJ_aes_192_cbc="\x60\x86\x48\x01\x65\x03\x04\x01\x16"
OBJ_aes_192_ofb128="\x60\x86\x48\x01\x65\x03\x04\x01\x17"
OBJ_aes_192_cfb128="\x60\x86\x48\x01\x65\x03\x04\x01\x18"
OBJ_aes_256_ecb="\x60\x86\x48\x01\x65\x03\x04\x01\x29"
OBJ_aes_256_cbc="\x60\x86\x48\x01\x65\x03\x04\x01\x2A"
OBJ_aes_256_ofb128="\x60\x86\x48\x01\x65\x03\x04\x01\x2B"
OBJ_aes_256_cfb128="\x60\x86\x48\x01\x65\x03\x04\x01\x2C"
OBJ_hold_instruction_code="\x55\x1D\x17"
OBJ_hold_instruction_none="\x2A\x86\x48\xCE\x38\x02\x01"
OBJ_hold_instruction_call_issuer="\x2A\x86\x48\xCE\x38\x02\x02"
OBJ_hold_instruction_reject="\x2A\x86\x48\xCE\x38\x02\x03"
OBJ_data="\x09"
OBJ_pss="\x09\x92\x26"
OBJ_ucl="\x09\x92\x26\x89\x93\xF2\x2C"
OBJ_pilot="\x09\x92\x26\x89\x93\xF2\x2C\x64"
OBJ_pilotAttributeType="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01"
OBJ_pilotAttributeSyntax="\x09\x92\x26\x89\x93\xF2\x2C\x64\x03"
OBJ_pilotObjectClass="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04"
OBJ_pilotGroups="\x09\x92\x26\x89\x93\xF2\x2C\x64\x0A"
OBJ_iA5StringSyntax="\x09\x92\x26\x89\x93\xF2\x2C\x64\x03\x04"
OBJ_caseIgnoreIA5StringSyntax="\x09\x92\x26\x89\x93\xF2\x2C\x64\x03\x05"
OBJ_pilotObject="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x03"
OBJ_pilotPerson="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x04"
OBJ_account="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x05"
OBJ_document="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x06"
OBJ_room="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x07"
OBJ_documentSeries="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x09"
OBJ_rFC822localPart="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x0E"
OBJ_dNSDomain="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x0F"
OBJ_domainRelatedObject="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x11"
OBJ_friendlyCountry="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x12"
OBJ_simpleSecurityObject="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x13"
OBJ_pilotOrganization="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x14"
OBJ_pilotDSA="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x15"
OBJ_qualityLabelledData="\x09\x92\x26\x89\x93\xF2\x2C\x64\x04\x16"
OBJ_userId="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x01"
OBJ_textEncodedORAddress="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x02"
OBJ_rfc822Mailbox="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x03"
OBJ_info="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x04"
OBJ_favouriteDrink="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x05"
OBJ_roomNumber="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x06"
OBJ_photo="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x07"
OBJ_userClass="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x08"
OBJ_host="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x09"
OBJ_manager="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x0A"
OBJ_documentIdentifier="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x0B"
OBJ_documentTitle="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x0C"
OBJ_documentVersion="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x0D"
OBJ_documentAuthor="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x0E"
OBJ_documentLocation="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x0F"
OBJ_homeTelephoneNumber="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x14"
OBJ_secretary="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x15"
OBJ_otherMailbox="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x16"
OBJ_lastModifiedTime="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x17"
OBJ_lastModifiedBy="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x18"
OBJ_aRecord="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x1A"
OBJ_pilotAttributeType27="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x1B"
OBJ_mXRecord="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x1C"
OBJ_nSRecord="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x1D"
OBJ_sOARecord="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x1E"
OBJ_cNAMERecord="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x1F"
OBJ_associatedDomain="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x25"
OBJ_associatedName="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x26"
OBJ_homePostalAddress="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x27"
OBJ_personalTitle="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x28"
OBJ_mobileTelephoneNumber="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x29"
OBJ_pagerTelephoneNumber="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x2A"
OBJ_friendlyCountryName="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x2B"
OBJ_organizationalStatus="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x2D"
OBJ_janetMailbox="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x2E"
OBJ_mailPreferenceOption="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x2F"
OBJ_buildingName="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x30"
OBJ_dSAQuality="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x31"
OBJ_singleLevelQuality="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x32"
OBJ_subtreeMinimumQuality="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x33"
OBJ_subtreeMaximumQuality="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x34"
OBJ_personalSignature="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x35"
OBJ_dITRedirect="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x36"
OBJ_audio="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x37"
OBJ_documentPublisher="\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x38"
OBJ_x500UniqueIdentifier="\x55\x04\x2D"
OBJ_mime_mhs="\x2B\x06\x01\x07\x01"
OBJ_mime_mhs_headings="\x2B\x06\x01\x07\x01\x01"
OBJ_mime_mhs_bodies="\x2B\x06\x01\x07\x01\x02"
OBJ_id_hex_partial_message="\x2B\x06\x01\x07\x01\x01\x01"
OBJ_id_hex_multipart_message="\x2B\x06\x01\x07\x01\x01\x02"
OBJ_generationQualifier="\x55\x04\x2C"
OBJ_pseudonym="\x55\x04\x41"
OBJ_id_set="\x67\x2A"
OBJ_set_ctype="\x67\x2A\x00"
OBJ_set_msgExt="\x67\x2A\x01"
OBJ_set_attr="\x67\x2A\x03"
OBJ_set_policy="\x67\x2A\x05"
OBJ_set_certExt="\x67\x2A\x07"
OBJ_set_brand="\x67\x2A\x08"
OBJ_setct_PANData="\x67\x2A\x00\x00"
OBJ_setct_PANToken="\x67\x2A\x00\x01"
OBJ_setct_PANOnly="\x67\x2A\x00\x02"
OBJ_setct_OIData="\x67\x2A\x00\x03"
OBJ_setct_PI="\x67\x2A\x00\x04"
OBJ_setct_PIData="\x67\x2A\x00\x05"
OBJ_setct_PIDataUnsigned="\x67\x2A\x00\x06"
OBJ_setct_HODInput="\x67\x2A\x00\x07"
OBJ_setct_AuthResBaggage="\x67\x2A\x00\x08"
OBJ_setct_AuthRevReqBaggage="\x67\x2A\x00\x09"
OBJ_setct_AuthRevResBaggage="\x67\x2A\x00\x0A"
OBJ_setct_CapTokenSeq="\x67\x2A\x00\x0B"
OBJ_setct_PInitResData="\x67\x2A\x00\x0C"
OBJ_setct_PI_TBS="\x67\x2A\x00\x0D"
OBJ_setct_PResData="\x67\x2A\x00\x0E"
OBJ_setct_AuthReqTBS="\x67\x2A\x00\x10"
OBJ_setct_AuthResTBS="\x67\x2A\x00\x11"
OBJ_setct_AuthResTBSX="\x67\x2A\x00\x12"
OBJ_setct_AuthTokenTBS="\x67\x2A\x00\x13"
OBJ_setct_CapTokenData="\x67\x2A\x00\x14"
OBJ_setct_CapTokenTBS="\x67\x2A\x00\x15"
OBJ_setct_AcqCardCodeMsg="\x67\x2A\x00\x16"
OBJ_setct_AuthRevReqTBS="\x67\x2A\x00\x17"
OBJ_setct_AuthRevResData="\x67\x2A\x00\x18"
OBJ_setct_AuthRevResTBS="\x67\x2A\x00\x19"
OBJ_setct_CapReqTBS="\x67\x2A\x00\x1A"
OBJ_setct_CapReqTBSX="\x67\x2A\x00\x1B"
OBJ_setct_CapResData="\x67\x2A\x00\x1C"
OBJ_setct_CapRevReqTBS="\x67\x2A\x00\x1D"
OBJ_setct_CapRevReqTBSX="\x67\x2A\x00\x1E"
OBJ_setct_CapRevResData="\x67\x2A\x00\x1F"
OBJ_setct_CredReqTBS="\x67\x2A\x00\x20"
OBJ_setct_CredReqTBSX="\x67\x2A\x00\x21"
OBJ_setct_CredResData="\x67\x2A\x00\x22"
OBJ_setct_CredRevReqTBS="\x67\x2A\x00\x23"
OBJ_setct_CredRevReqTBSX="\x67\x2A\x00\x24"
OBJ_setct_CredRevResData="\x67\x2A\x00\x25"
OBJ_setct_PCertReqData="\x67\x2A\x00\x26"
OBJ_setct_PCertResTBS="\x67\x2A\x00\x27"
OBJ_setct_BatchAdminReqData="\x67\x2A\x00\x28"
OBJ_setct_BatchAdminResData="\x67\x2A\x00\x29"
OBJ_setct_CardCInitResTBS="\x67\x2A\x00\x2A"
OBJ_setct_MeAqCInitResTBS="\x67\x2A\x00\x2B"
OBJ_setct_RegFormResTBS="\x67\x2A\x00\x2C"
OBJ_setct_CertReqData="\x67\x2A\x00\x2D"
OBJ_setct_CertReqTBS="\x67\x2A\x00\x2E"
OBJ_setct_CertResData="\x67\x2A\x00\x2F"
OBJ_setct_CertInqReqTBS="\x67\x2A\x00\x30"
OBJ_setct_ErrorTBS="\x67\x2A\x00\x31"
OBJ_setct_PIDualSignedTBE="\x67\x2A\x00\x32"
OBJ_setct_PIUnsignedTBE="\x67\x2A\x00\x33"
OBJ_setct_AuthReqTBE="\x67\x2A\x00\x34"
OBJ_setct_AuthResTBE="\x67\x2A\x00\x35"
OBJ_setct_AuthResTBEX="\x67\x2A\x00\x36"
OBJ_setct_AuthTokenTBE="\x67\x2A\x00\x37"
OBJ_setct_CapTokenTBE="\x67\x2A\x00\x38"
OBJ_setct_CapTokenTBEX="\x67\x2A\x00\x39"
OBJ_setct_AcqCardCodeMsgTBE="\x67\x2A\x00\x3A"
OBJ_setct_AuthRevReqTBE="\x67\x2A\x00\x3B"
OBJ_setct_AuthRevResTBE="\x67\x2A\x00\x3C"
OBJ_setct_AuthRevResTBEB="\x67\x2A\x00\x3D"
OBJ_setct_CapReqTBE="\x67\x2A\x00\x3E"
OBJ_setct_CapReqTBEX="\x67\x2A\x00\x3F"
OBJ_setct_CapResTBE="\x67\x2A\x00\x40"
OBJ_setct_CapRevReqTBE="\x67\x2A\x00\x41"
OBJ_setct_CapRevReqTBEX="\x67\x2A\x00\x42"
OBJ_setct_CapRevResTBE="\x67\x2A\x00\x43"
OBJ_setct_CredReqTBE="\x67\x2A\x00\x44"
```

----------------------------------------

TITLE: Computing ECDH Shared Secret with Specific Private Key using CommonJS in Node.js
DESCRIPTION: Shows an example of ECDH key exchange where one party (Alice) sets her private key explicitly using `setPrivateKey` (derived from a SHA256 hash, noted as insecure for real use), and the other party (Bob) generates keys randomly. They then compute the shared secret using `computeSecret` and verify that both parties arrive at the same secret. Uses CommonJS and requires `createECDH` and `createHash` from `node:crypto`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_25

LANGUAGE: cjs
CODE:
```
const {
  createECDH,
  createHash,
} = require('node:crypto');

const alice = createECDH('secp256k1');
const bob = createECDH('secp256k1');

// This is a shortcut way of specifying one of Alice's previous private
// keys. It would be unwise to use such a predictable private key in a real
// application.
alice.setPrivateKey(
  createHash('sha256').update('alice', 'utf8').digest(),
);

// Bob uses a newly generated cryptographically strong
// pseudorandom key pair
bob.generateKeys();

const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');
const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');

// aliceSecret and bobSecret should be the same shared secret value
console.log(aliceSecret === bobSecret);
```

----------------------------------------

TITLE: Configuring Node.js Snapshots
DESCRIPTION: Example showing how to use the new --build-snapshot-config flag to configure snapshots using a JSON configuration file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_14

LANGUAGE: console
CODE:
```
node --build-snapshot-config=/path/to/myconfig.json
```

----------------------------------------

TITLE: Publishing a message to a channel in Node.js (ESM)
DESCRIPTION: Illustrates how to publish a message to subscribers of a specific channel.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

const channel = diagnostics_channel.channel('my-channel');

channel.publish({
  some: 'message',
});
```

----------------------------------------

TITLE: Opening Escapable Handle Scopes in Node-API
DESCRIPTION: Function to open a new escapable handle scope that allows promoting one object to outer scope.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_51

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status
    napi_open_escapable_handle_scope(napi_env env,
                                     napi_handle_scope* result);
```

----------------------------------------

TITLE: Cloning and Configuring Node.js Repository in Git
DESCRIPTION: Commands for forking the Node.js repository, cloning it locally, adding the upstream remote, and configuring Git user information.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
git clone git@github.com:username/node.git
cd node
git remote add upstream https://github.com/nodejs/node.git
git fetch upstream

git config user.name "J. Random User"
git config user.email "j.random.user@example.com"
```

----------------------------------------

TITLE: Testing Factory Pattern for C++ Object Creation in Node.js
DESCRIPTION: This JavaScript code demonstrates how to use the factory pattern to create and use instances of the wrapped C++ object in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
const createObject = require('./build/Release/addon');

const obj = createObject(10);
console.log(obj.plusOne());
// Prints: 11
console.log(obj.plusOne());
// Prints: 12
console.log(obj.plusOne());
// Prints: 13

const obj2 = createObject(20);
console.log(obj2.plusOne());
// Prints: 21
console.log(obj2.plusOne());
// Prints: 22
console.log(obj2.plusOne());
// Prints: 23
```

----------------------------------------

TITLE: Checking Property Existence on an Object in C using Node-API
DESCRIPTION: This function checks if a property exists on a JavaScript object. It takes the environment, the object to query, the property key, and a pointer to store the result. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_152

LANGUAGE: c
CODE:
```
napi_status napi_has_property(napi_env env,
                              napi_value object,
                              napi_value key,
                              bool* result);
```

----------------------------------------

TITLE: Handling HTTP/2 ALPN Negotiation in Node.js
DESCRIPTION: This snippet shows how to handle Application-Layer Protocol Negotiation (ALPN) for HTTP/2. It demonstrates configuring TLS options for proper protocol negotiation between HTTP/1.1 and HTTP/2.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/util/missingssl-internal.txt#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
const http2 = require('http2');
const fs = require('fs');

const options = {
  key: fs.readFileSync('server-key.pem'),
  cert: fs.readFileSync('server-cert.pem'),
  allowHTTP1: true,  // Allow HTTP/1.1 connections
  // Specify ALPN protocols, HTTP/2 first for preference
  ALPNProtocols: ['h2', 'http/1.1']
};

const server = http2.createSecureServer(options);

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html',
    ':status': 200
  });
  stream.end('<h1>HTTP/2 Response</h1>');
});

server.on('request', (req, res) => {
  // This handler is called for HTTP/1.1 requests
  res.writeHead(200, { 'Content-Type': 'text/html' });
  res.end('<h1>HTTP/1.1 Response</h1>');
});

server.listen(8443);
```

----------------------------------------

TITLE: Setting IPv4 Multicast Interface Using setMulticastInterface - JavaScript
DESCRIPTION: Shows how to define the outgoing multicast interface for an IPv4 UDP socket in Node.js using 'setMulticastInterface'. After binding the socket, it sets the interface using an IP address configured on the host. Dependencies: 'dgram', host network IP knowledge. Inputs: bind port, IP address for multicast interface. The socket will send multicast packets via the specified interface.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_14

LANGUAGE: JavaScript
CODE:
```
const socket = dgram.createSocket('udp4');\n\nsocket.bind(1234, () => {\n  socket.setMulticastInterface('10.0.0.2');\n});
```

----------------------------------------

TITLE: Checking Primality Synchronously with Node.js Crypto
DESCRIPTION: Synchronously checks the primality of a candidate number using Miller-Rabin probabilistic tests. Accepts the candidate (as various buffer types or bigint) and optional configuration for the number of checks. Returns a boolean indicating primality with a specified low error probability. Introduced in Node.js v15.8.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_56

LANGUAGE: javascript
CODE:
```
crypto.checkPrimeSync(candidate[, options])
```

----------------------------------------

TITLE: Adding BlockList.isBlockList Method to Node.js Net Module
DESCRIPTION: A new static method isBlockList(value) is added to the BlockList class in the net module to check if a value is a BlockList instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
BlockList.isBlockList(value)
```

----------------------------------------

TITLE: Demonstrating triggerAsyncId in Node.js Async Hooks (ES Modules)
DESCRIPTION: Illustrates the use of triggerAsyncId in the init callback of an AsyncHook to track the cause of resource creation in Node.js using ES Modules syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
import { createHook, executionAsyncId } from 'node:async_hooks';
import { stdout } from 'node:process';
import net from 'node:net';
import fs from 'node:fs';

createHook({
  init(asyncId, type, triggerAsyncId) {
    const eid = executionAsyncId();
    fs.writeSync(
      stdout.fd,
      `${type}(${asyncId}): trigger: ${triggerAsyncId} execution: ${eid}\n`);
  },
}).enable();

net.createServer((conn) => {}).listen(8080);
```

----------------------------------------

TITLE: Configuring Test Context to Run Only Subtests | Node.js Test Runner | JavaScript
DESCRIPTION: This snippet shows how to call `t.runOnly(true)` within a test to make the test context only execute subtests that have the `only: true` option set. It demonstrates that subsequent subtests without `only: true` are skipped. Requires the Node.js built-in test runner and is a no-op if Node.js was not started with the `--test-only` command-line option.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_73

LANGUAGE: javascript
CODE:
```
test('top level test', (t) => {
  // The test context can be set to run subtests with the 'only' option.
  t.runOnly(true);
  t.test('this subtest is now skipped');
  t.test('this subtest is run', { only: true });
});
```

----------------------------------------

TITLE: Tracking Multiple Promise Resolutions with multipleResolves Event (ECMAScript Modules) - JavaScript
DESCRIPTION: Sets up a 'multipleResolves' event listener using ESM syntax to detect when a Promise is resolved or rejected multiple times. The example defines an async function that intentionally triggers both a double resolve and a subsequent reject. On event, the listener logs details and exits the process. Requires only built-in modules. Useful for debugging Promise logic, but recognized as deprecated in newer Node versions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_8

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

process.on('multipleResolves', (type, promise, reason) => {
  console.error(type, promise, reason);
  setImmediate(() => process.exit(1));
});

async function main() {
  try {
    return await new Promise((resolve, reject) => {
      resolve('First call');
      resolve('Swallowed resolve');
      reject(new Error('Swallowed reject'));
    });
  } catch {
    throw new Error('Failed');
  }
}

main().then(console.log);
// resolve: Promise { 'First call' } 'Swallowed resolve'
// reject: Promise { 'First call' } Error: Swallowed reject
//     at Promise (*)
//     at new Promise (<anonymous>)
//     at main (*)
// First call
```

----------------------------------------

TITLE: Adding Platform-Specific Compiler Flags in GYP
DESCRIPTION: Demonstrates adding compiler-specific flags to a GYP target ('existing_target') using the 'cflags' setting within 'conditions'. It sets '/WX' (treat warnings as errors) for Windows ('OS=="win"') and '-Werror' (treat warnings as errors) for other platforms. This approach is necessary because compiler flags often differ between toolchains.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/UserDocumentation.md#2025-04-23_snippet_11

LANGUAGE: gyp
CODE:
```
  {
    'targets': [
      {
        'target_name': 'existing_target',
        'conditions': [
          ['OS=="win"', {
            'cflags': [
              '/WX',
            ],
          }, { # OS != "win"
            'cflags': [
              '-Werror',
            ],
          }],
        ],
      },
    ],
  },
```

----------------------------------------

TITLE: Safe Object Property Definition in Node.js
DESCRIPTION: Shows how prototype pollution can affect ObjectDefineProperty when using regular objects as property descriptors. Demonstrates the use of null-prototype objects to avoid this issue.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/primordials.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
// User-land
Object.prototype.get = function get() {};

// Core
try {
  ObjectDefineProperty({}, 'someProperty', { value: 0 });
} catch (err) {
  console.log(err); // TypeError: Invalid property descriptor.
}
```

LANGUAGE: javascript
CODE:
```
// User-land
Object.prototype.get = function get() {};

// Core
ObjectDefineProperty({}, 'someProperty', { __proto__: null, value: 0 });
console.log('no errors'); // no errors.
```

----------------------------------------

TITLE: Avoiding Spread Operator on Arrays in JavaScript
DESCRIPTION: This snippet demonstrates the unsafe use of the spread operator on arrays and provides safer alternatives using ECMAScript features.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/primordials.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
const arrayCopy = [...array];
func(...array);
```

LANGUAGE: javascript
CODE:
```
const arrayCopy = ArrayPrototypeSlice(array);
ReflectApply(func, null, array);
```

----------------------------------------

TITLE: Testing property descriptor accessor behaviors in Object.create()
DESCRIPTION: Tests that verify Object.create() correctly handles accessor functions in property descriptors for various property attributes like value, enumerable, configurable, writable, get, and set.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/Object-create-expected.txt#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
PASS Object.create(null, DescriptorWithValueGetter).foo is true
PASS Object.create(null, DescriptorWithEnumerableGetter).foo is true
PASS Object.create(null, DescriptorWithConfigurableGetter).foo is true
PASS Object.create(null, DescriptorWithWritableGetter).foo is true
PASS Object.create(null, DescriptorWithGetGetter).foo is true
PASS Object.create(null, DescriptorWithSetGetter).foo is true
```

----------------------------------------

TITLE: Comparing Buffers (Basic) Node.js JavaScript
DESCRIPTION: Demonstrates the basic usage of the `buf.compare()` method to compare different Buffer instances and how to use `Buffer.compare` with `Array.prototype.sort`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_40

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('ABC');
const buf2 = Buffer.from('BCD');
const buf3 = Buffer.from('ABCD');

console.log(buf1.compare(buf1));
// Prints: 0
console.log(buf1.compare(buf2));
// Prints: -1
console.log(buf1.compare(buf3));
// Prints: -1
console.log(buf2.compare(buf1));
// Prints: 1
console.log(buf2.compare(buf3));
// Prints: 1
console.log([buf1, buf2, buf3].sort(Buffer.compare));
// Prints: [ <Buffer 41 42 43>, <Buffer 41 42 43 44>, <Buffer 42 43 44> ]
// (This result is equal to: [buf1, buf3, buf2].)
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from('ABC');
const buf2 = Buffer.from('BCD');
const buf3 = Buffer.from('ABCD');

console.log(buf1.compare(buf1));
// Prints: 0
console.log(buf1.compare(buf2));
// Prints: -1
console.log(buf1.compare(buf3));
// Prints: -1
console.log(buf2.compare(buf1));
// Prints: 1
console.log(buf2.compare(buf3));
// Prints: 1
console.log([buf1, buf2, buf3].sort(Buffer.compare));
// Prints: [ <Buffer 41 42 43>, <Buffer 41 42 43 44>, <Buffer 42 43 44> ]
// (This result is equal to: [buf1, buf3, buf2].)
```

----------------------------------------

TITLE: Connecting to a TCP REPL Server using net.Socket (MJS)
DESCRIPTION: Implements a Node.js client using the `net` module to connect to the TCP REPL server running on port 1337. It pipes `process.stdin` to the socket and the socket's output to `process.stdout`, enabling interaction with the remote REPL. It also handles raw mode for terminal compatibility and uses ES Module syntax (`import`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_27

LANGUAGE: mjs
CODE:
```
// repl-client.js
import net from 'node:net';
import process from 'node:process';

const sock = net.connect(1337);

process.stdin.pipe(sock);
sock.pipe(process.stdout);

sock.on('connect', () => {
  process.stdin.resume();
  process.stdin.setRawMode(true);
});

sock.on('close', () => {
  process.stdin.setRawMode(false);
  process.stdin.pause();
  sock.removeListener('close', done);
});

process.stdin.on('end', () => {
  sock.destroy();
  console.log();
});

process.stdin.on('data', (b) => {
  if (b.length === 1 && b[0] === 4) {
    process.stdin.emit('end');
  }
});
```

----------------------------------------

TITLE: CLI Options Example with Boolean and Value Types
DESCRIPTION: Example showing how to implement common option types - boolean flags and options that take values. Demonstrates option parsing and accessing option values.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
program
  .option('-d, --debug', 'output extra debugging')
  .option('-s, --small', 'small pizza size')
  .option('-p, --pizza-type <type>', 'flavour of pizza');

program.parse(process.argv);

const options = program.opts();
if (options.debug) console.log(options);
console.log('pizza details:');
if (options.small) console.log('- small pizza size');
if (options.pizzaType) console.log(`- ${options.pizzaType}`);
```

----------------------------------------

TITLE: Advanced Option Configuration in Commander.js
DESCRIPTION: Demonstrates advanced option configuration including hidden options, defaults, choices, environment variables, and option conflicts.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
program
  .addOption(new Option('-s, --secret').hideHelp())
  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))
  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']))
  .addOption(new Option('-p, --port <number>', 'port number').env('PORT'))
  .addOption(new Option('--donate [amount]', 'optional donation in dollars').preset('20').argParser(parseFloat))
  .addOption(new Option('--disable-server', 'disables the server').conflicts('port'))
  .addOption(new Option('--free-drink', 'small drink included free ').implies({ drink: 'small' }));
```

----------------------------------------

TITLE: Retrieving Values from a Set in JavaScript
DESCRIPTION: This snippet creates a Set and calls the values() method on it. It demonstrates how to get an iterator for the values in a Set.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
new Set([1,2,3]).values()
```

----------------------------------------

TITLE: Checking Object Type Tags in Node-API (C)
DESCRIPTION: Verifies if a JavaScript object has a specific type tag. This function is used to implement type checking for native objects, comparing a provided tag with any tag found on the object and returning the result of the comparison.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_183

LANGUAGE: c
CODE:
```
napi_status napi_check_object_type_tag(napi_env env,
                                       napi_value js_object,
                                       const napi_type_tag* type_tag,
                                       bool* result);
```

----------------------------------------

TITLE: Using References in Package Overrides
DESCRIPTION: Demonstrates how to use references to direct dependencies in overrides using the $ prefix. This helps avoid conflicts between direct dependencies and overrides.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_32

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "@npm/foo": "^1.0.0"
  },
  "overrides": {
    // BAD, will throw an EOVERRIDE error
    // "foo": "^2.0.0"
    // GOOD, specs match so override is allowed
    // "foo": "^1.0.0"
    // BEST, the override is defined as a reference to the dependency
    "@npm/foo": "$foo",
    // the referenced package does not need to match the overridden one
    "@npm/bar": "$foo"
  }
}
```

----------------------------------------

TITLE: Using Default Loader for Dynamic Imports in vm Scripts (JavaScript)
DESCRIPTION: Illustrates how to enable dynamic `import()` within scripts executed via the `node:vm` module by using the `vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER` option for `importModuleDynamically`. This allows the script to use the application's main module loader for resolving dynamic imports, simplifying the process and potentially utilizing compilation cache. The example creates temporary modules (`.mjs`, `.json`), compiles a script that imports them dynamically, and runs it.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
const { Script, constants } = require('node:vm');
const { resolve } = require('node:path');
const { writeFileSync } = require('node:fs');

// Write test.js and test.txt to the directory where the current script
// being run is located.
writeFileSync(resolve(__dirname, 'test.mjs'),
              'export const filename = "./test.json";');
writeFileSync(resolve(__dirname, 'test.json'),
              '{"hello": "world"}');

// Compile a script that loads test.mjs and then test.json
// as if the script is placed in the same directory.
const script = new Script(
  `(async function() {
    const { filename } = await import('./test.mjs');
    return import(filename, { with: { type: 'json' } })
  })();`,
  {
    filename: resolve(__dirname, 'test-with-default.js'),
    importModuleDynamically: constants.USE_MAIN_CONTEXT_DEFAULT_LOADER,
  });

// { default: { hello: 'world' } }
script.runInThisContext().then(console.log);
```

----------------------------------------

TITLE: Listing Pending Interceptors with pendingInterceptors()
DESCRIPTION: Demonstrates how to retrieve a list of all pending interceptors registered on a MockAgent, which includes interceptors that have not been fully consumed according to their configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
const agent = new MockAgent()
agent.disableNetConnect()

agent
  .get('https://example.com')
  .intercept({ method: 'GET', path: '/' })
  .reply(200)

const pendingInterceptors = agent.pendingInterceptors()
// Returns [
//   {
//     timesInvoked: 0,
//     times: 1,
//     persist: false,
//     consumed: false,
//     pending: true,
//     path: '/',
//     method: 'GET',
//     body: undefined,
//     headers: undefined,
//     data: {
//       error: null,
//       statusCode: 200,
//       data: '',
//       headers: {},
//       trailers: {}
//     },
//     origin: 'https://example.com'
//   }
// ]
```

----------------------------------------

TITLE: Canceling Asynchronous Work in Node-API (C)
DESCRIPTION: Function to cancel queued asynchronous work if it has not yet started. Returns napi_ok on success. The complete callback will be invoked with napi_cancelled status if cancellation is successful.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_191

LANGUAGE: c
CODE:
```
napi_status napi_cancel_async_work(node_api_basic_env env,
                                   napi_async_work work);
```

----------------------------------------

TITLE: Establishing HTTP/2 Client Connection (CommonJS) - Node.js
DESCRIPTION: Illustrates how to establish an HTTP/2 client session to a specified remote authority using the `http2.connect` function with CommonJS (CJS) syntax. It shows requiring the module, creating the connection, and closing the session.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_46

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');
const client = http2.connect('https://localhost:1234');

/* Use the client */

client.close();
```

----------------------------------------

TITLE: Using Top-Level Await in REPL (console)
DESCRIPTION: Demonstrates REPL's support for the 'await' keyword at the top level, including resolving promises, handling errors, and using asynchronous delays. Inputs leverage built-in objects and utilities with no extra dependencies. Expected input is valid JavaScript with await; output includes resolved values, error messages, and elapsed time calculations. Limitation: 'const' lexical bindings may be affected by top-level await.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_12

LANGUAGE: console
CODE:
```
> await Promise.resolve(123)
123
> await Promise.reject(new Error('REPL await'))
Uncaught Error: REPL await
    at REPL2:1:54
> const timeout = util.promisify(setTimeout);
undefined
> const old = Date.now(); await timeout(1000); console.log(Date.now() - old);
1002
undefined
```

----------------------------------------

TITLE: Executing npm whoami Command in Bash
DESCRIPTION: This command displays the npm username of the currently logged-in user. It connects to the registry's whoami endpoint for token-based auth or prints the username for Basic Auth.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-whoami.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm whoami
```

----------------------------------------

TITLE: Variadic Options in Commander.js
DESCRIPTION: Shows implementation of options that can accept multiple values using the ... syntax, storing results in arrays.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
program
  .option('-n, --number <numbers...>', 'specify numbers')
  .option('-l, --letter [letters...]', 'specify letters');

program.parse();

console.log('Options: ', program.opts());
console.log('Remaining arguments: ', program.args);
```

----------------------------------------

TITLE: Demonstrating Synchronous Directory Creation with mkdirp.sync - Node.js - JavaScript
DESCRIPTION: This example demonstrates the synchronous use of mkdirp, specifically the mkdirp.sync method for immediate execution. It imports the required mkdirp API (must be installed via npm), creates the specified directory path, and logs the first directory created. The function returns a string of the directory path created, or undefined if all directories already exist. Use this for scenarios where Promise-based workflows are not desired.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { mkdirp } from 'mkdirp'\n\n// return value is the first directory created\nconst made = mkdirp.sync('/tmp/foo/bar/baz')\nconsole.log(`made directories, starting with ${made}`)
```

----------------------------------------

TITLE: Running the SEA Binary on Non-Windows Systems
DESCRIPTION: Demonstrates running the created Single Executable Application on Unix-like systems with command-line arguments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_13

LANGUAGE: console
CODE:
```
$ ./hello world
Hello, world!
```

----------------------------------------

TITLE: Using Channel.hasSubscribers in Node.js (ESM)
DESCRIPTION: Demonstrates how to check if a specific channel has active subscribers before publishing a message.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

const channel = diagnostics_channel.channel('my-channel');

if (channel.hasSubscribers) {
  // There are subscribers, prepare and publish message
}
```

----------------------------------------

TITLE: Defining Node.js C++ Binding Function - C++
DESCRIPTION: Illustrates the standard signature for a C++ function intended to be exposed to JavaScript in Node.js. It shows how to access arguments passed from JS using `args[n]`, perform checks on argument types using `CHECK`, and set the function's return value using `args.GetReturnValue().Set()`. This is a fundamental pattern for creating native Node.js modules.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_7

LANGUAGE: C++
CODE:
```
void ArrayBufferViewHasBuffer(const FunctionCallbackInfo<Value>& args) {
  CHECK(args[0]->IsArrayBufferView());
  args.GetReturnValue().Set(args[0].As<ArrayBufferView>()->HasBuffer());
}
```

----------------------------------------

TITLE: Using peerDependenciesMeta to Mark Optional Peers
DESCRIPTION: Demonstrates how to use peerDependenciesMeta to mark certain peer dependencies as optional. This allows a package to work with multiple host packages without requiring all of them to be installed.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_24

LANGUAGE: json
CODE:
```
{
  "name": "@npm/tea-latte",
  "version": "1.3.5",
  "peerDependencies": {
    "@npm/tea": "2.x",
    "@npm/soy-milk": "1.2"
  },
  "peerDependenciesMeta": {
    "@npm/soy-milk": {
      "optional": true
    }
  }
}
```

----------------------------------------

TITLE: Configuring Command Arguments in Commander.js
DESCRIPTION: Shows how to configure command arguments with required username and optional password parameters. Demonstrates argument configuration with default values and descriptions.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
program
  .version('0.1.0')
  .argument('<username>', 'user to login')
  .argument('[password]', 'password for user, if required', 'no password given')
  .action((username, password) => {
    console.log('username:', username);
    console.log('password:', password);
  });
```

----------------------------------------

TITLE: Accessing Underlying ArrayBuffer
DESCRIPTION: Demonstrates accessing the underlying `ArrayBuffer` instance upon which a Node.js Buffer is based using the `buf.buffer` property. The example shows that for a Buffer created directly from an `ArrayBuffer`, the `buf.buffer` property references the original `ArrayBuffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_38

LANGUAGE: Node.js (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const arrayBuffer = new ArrayBuffer(16);
const buffer = Buffer.from(arrayBuffer);

console.log(buffer.buffer === arrayBuffer);
// Prints: true
```

LANGUAGE: Node.js (CJS)
CODE:
```
const { Buffer } = require('node:buffer');

const arrayBuffer = new ArrayBuffer(16);
const buffer = Buffer.from(arrayBuffer);

console.log(buffer.buffer === arrayBuffer);
// Prints: true
```

----------------------------------------

TITLE: Creating an External JavaScript ArrayBuffer - Node-API - C
DESCRIPTION: Declares a function to create a JavaScript ArrayBuffer whose contents are managed externally by native code, with user-controlled lifetime via a finalize callback. Inputs include the external memory pointer, its length, finalize callback, finalize context, and outputs a napi_value referencing the JS object. Not all runtimes (like Electron) support external buffers; fallback strategies may be required for cross-runtime compatibility.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_81

LANGUAGE: c
CODE:
```
napi_status
napi_create_external_arraybuffer(napi_env env,
                                 void* external_data,
                                 size_t byte_length,
                                 napi_finalize finalize_cb,
                                 void* finalize_hint,
                                 napi_value* result)
```

----------------------------------------

TITLE: Writing Unsigned 8-bit Integer to Buffer (Node.js)
DESCRIPTION: Writes an unsigned 8-bit integer `value` to the Buffer `buf` at the specified `offset`. `value` must be a valid unsigned 8-bit integer (0-255). Returns the offset plus one. Also available as `writeUint8`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_95

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeUInt8(0x3, 0);
buf.writeUInt8(0x4, 1);
buf.writeUInt8(0x23, 2);
buf.writeUInt8(0x42, 3);

console.log(buf);
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeUInt8(0x3, 0);
buf.writeUInt8(0x4, 1);
buf.writeUInt8(0x23, 2);
buf.writeUInt8(0x42, 3);

console.log(buf);
```

----------------------------------------

TITLE: Queuing Microtasks with queueMicrotask - JavaScript
DESCRIPTION: Demonstrates using the queueMicrotask() API in Node.js to ensure asynchronous event emission within an object method. This pattern leverages the V8 microtask queue, as opposed to process.nextTick(), to guarantee event order with promise jobs and other asynchronous tasks. Dependencies include Node.js v11.0.0+ for queueMicrotask(), and the DataHandler class should support caching and event emission, while input and output involve cache lookups and emitting 'load' events. The snippet shows precise placement of microtask scheduling for consistent asynchronous behavior.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#2025-04-23_snippet_11

LANGUAGE: JavaScript
CODE:
```
// Here, `queueMicrotask()` is used to ensure the 'load' event is always
// emitted asynchronously, and therefore consistently. Using
// `process.nextTick()` here would result in the 'load' event always emitting
// before any other promise jobs.

DataHandler.prototype.load = async function load(key) {
  const hit = this._cache.get(key);
  if (hit !== undefined) {
    queueMicrotask(() => {
      this.emit('load', hit);
    });
    return;
  }

  const data = await fetchData(key);
  this._cache.set(key, data);
  this.emit('load', data);
};
```

----------------------------------------

TITLE: Loading and Initializing a Dynamic OpenSSL ENGINE in C Code - C
DESCRIPTION: Illustrates loading a dynamic ENGINE implementation at runtime using direct ENGINE API calls in C. It demonstrates setting the SO_PATH (shared library location), specifying an ENGINE ID (if required), loading the ENGINE, and passing a custom control command (CMD_FOO) with its parameter. It assumes inclusion of ENGINE-related headers and linking to libcrypto. Key functions: ENGINE_by_id, ENGINE_ctrl_cmd_string. Inputs: ENGINE ID and control strings. Outputs: dynamically loaded ENGINE, ready for further commands. Does not include error checking and assumes the shared library exists at the given path.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/README-ENGINES.md#2025-04-23_snippet_2

LANGUAGE: c
CODE:
```
ENGINE *e = ENGINE_by_id("dynamic");
ENGINE_ctrl_cmd_string(e, "SO_PATH", "/lib/libfoo.so", 0);
ENGINE_ctrl_cmd_string(e, "ID", "foo", 0);
ENGINE_ctrl_cmd_string(e, "LOAD", NULL, 0);
ENGINE_ctrl_cmd_string(e, "CMD_FOO", "some input data", 0);
```

----------------------------------------

TITLE: Returning JavaScript Functions from C++ with V8 (C++)
DESCRIPTION: Implements a C++ factory addon that creates and returns a JavaScript function from C++ using V8's FunctionTemplate. The returned function, when called, returns the string 'hello world'. The function is named 'theFunction' for identification. Requires node-gyp and V8 APIs to build; exposes only the factory to JavaScript via module.exports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_19

LANGUAGE: cpp
CODE:
```
// addon.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid MyFunction(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  args.GetReturnValue().Set(String::NewFromUtf8(\n      isolate, \"hello world\").ToLocalChecked());\n}\n\nvoid CreateFunction(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n\n  Local<Context> context = isolate->GetCurrentContext();\n  Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, MyFunction);\n  Local<Function> fn = tpl->GetFunction(context).ToLocalChecked();\n\n  // omit this to make it anonymous\n  fn->SetName(String::NewFromUtf8(\n      isolate, \"theFunction\").ToLocalChecked());\n\n  args.GetReturnValue().Set(fn);\n}\n\nvoid Init(Local<Object> exports, Local<Object> module) {\n  NODE_SET_METHOD(module, \"exports\", CreateFunction);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\n
```

----------------------------------------

TITLE: Valgrind Output for Node.js Binary Memory Leak
DESCRIPTION: Valgrind output showing a potential memory leak in the Node.js binary itself. This output is from a release build, providing some information but lacking specific line numbers in the source code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/investigating-native-memory-leaks.md#2025-04-23_snippet_12

LANGUAGE: console
CODE:
```
 ==4174== 304 bytes in 1 blocks are possibly lost in loss record 27 of 35
==4174==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4174==    by 0x40134A6: allocate_dtv (dl-tls.c:286)
==4174==    by 0x40134A6: _dl_allocate_tls (dl-tls.c:530)
==4174==    by 0x5987227: allocate_stack (allocatestack.c:627)
==4174==    by 0x5987227: pthread_create@@GLIBC_2.2.5 (pthread_create.c:644)
==4174==    by 0xAAF9DC: node::inspector::Agent::Start(std::string const&, node::DebugOptions const&, std::shared_ptr<node::HostPort>, bool) (in /home/user1/valgrind/node-v12.14.1-linux-x64/bin/node)
==4174==    by 0x9A8BE7: node::Environment::InitializeInspector(std::unique_ptr<node::inspector::ParentInspectorHandle, std::default_delete<node::inspector::ParentInspectorHandle> >) (in /home/user1/valgrind/node-v12.14.1-linux-x64/bin/node)
==4174==    by 0xA1C9A5: node::NodeMainInstance::CreateMainEnvironment(int*) (in /home/user1/valgrind/node-v12.14.1-linux-x64/bin/node)
==4174==    by 0xA1CB42: node::NodeMainInstance::Run() (in /home/user1/valgrind/node-v12.14.1-linux-x64/bin/node)
==4174==    by 0x9ACB67: node::Start(int, char**) (in /home/user1/valgrind/node-v12.14.1-linux-x64/bin/node)
==4174==    by 0x5BBFB96: (below main) (libc-start.c:310)
```

----------------------------------------

TITLE: Expected Runtime.evaluate Result for new Function TypeError (JSON)
DESCRIPTION: This JSON structure represents the expected result object returned by a `Runtime.evaluate` call in Node.js when evaluating code like `new Function("... \n ... \n 0()")()`. It details a `TypeError` ('0 is not a function'), correctly identifying the error location at `lineNumber: 2` and `columnNumber: 3` within the evaluated code block, relative to the start of the function's body. This structure is crucial for asserting the accuracy of error reporting for dynamically generated functions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-new-function-error-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        exceptionDetails : {
            columnNumber : 3
            exception : {
                className : TypeError
                description : TypeError: 0 is not a function     at eval (eval at <anonymous> (:1:1), <anonymous>:3:4)     at <anonymous>:1:22
                objectId : <objectId>
                subtype : error
                type : object
            }
            exceptionId : <exceptionId>
            lineNumber : 2
            scriptId : <scriptId>
            text : Uncaught
        }
        result : {
            className : TypeError
            description : TypeError: 0 is not a function     at eval (eval at <anonymous> (:1:1), <anonymous>:3:4)     at <anonymous>:1:22
            objectId : <objectId>
            subtype : error
            type : object
        }
    }
}
```

----------------------------------------

TITLE: Allocating Uninitialized Buffer using Buffer.allocUnsafe (CJS)
DESCRIPTION: Demonstrates allocating a Node.js Buffer of a specified size using `Buffer.allocUnsafe`. This method does not initialize the buffer's contents, which may contain sensitive data, but is faster than `Buffer.alloc`. It also shows how to manually zero-fill the buffer afterwards. Requires requiring `Buffer` from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(10);

console.log(buf);
// Prints (contents may vary): <Buffer a0 8b 28 3f 01 00 00 00 50 32>

buf.fill(0);

console.log(buf);
// Prints: <Buffer 00 00 00 00 00 00 00 00 00 00>
```

----------------------------------------

TITLE: Verifying Prototype Chain in Extended Classes
DESCRIPTION: This snippet checks the prototype chain of extended classes, including cases with null as the superclass.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/class-syntax-extends-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
PASS x.__proto__ is Base
PASS Object.getPrototypeOf(x) is Base
PASS x.prototype.__proto__ is Base.prototype
PASS Object.getPrototypeOf(x.prototype) is Base.prototype
PASS x = class extends null { constructor() { } }; x.__proto__ is Function.prototype
PASS x.__proto__ is Function.prototype
```

----------------------------------------

TITLE: Debugger Breakpoint - Node.js
DESCRIPTION: Sets a debugger breakpoint using the debugger keyword.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-over-another-context-group-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
debugger;
```

----------------------------------------

TITLE: Formatting URLs with Custom Options in Node.js
DESCRIPTION: Demonstrates how to use url.format() to create a customized string representation of a URL object. The example shows different output based on formatting options.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_47

LANGUAGE: javascript
CODE:
```
import url from 'node:url';
const myURL = new URL('https://a:b@測試?abc#foo');

console.log(myURL.href);
// Prints https://a:b@xn--g6w251d/?abc#foo

console.log(myURL.toString());
// Prints https://a:b@xn--g6w251d/?abc#foo

console.log(url.format(myURL, { fragment: false, unicode: true, auth: false }));
// Prints 'https://測試/?abc'
```

LANGUAGE: javascript
CODE:
```
const url = require('node:url');
const myURL = new URL('https://a:b@測試?abc#foo');

console.log(myURL.href);
// Prints https://a:b@xn--g6w251d/?abc#foo

console.log(myURL.toString());
// Prints https://a:b@xn--g6w251d/?abc#foo

console.log(url.format(myURL, { fragment: false, unicode: true, auth: false }));
// Prints 'https://測試/?abc'
```

----------------------------------------

TITLE: Local Proxy Fetch Implementation
DESCRIPTION: Shows how to use EnvHttpProxyAgent with fetch API using local dispatcher configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/EnvHttpProxyAgent.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
import { EnvHttpProxyAgent, fetch } from 'undici'

const envHttpProxyAgent = new EnvHttpProxyAgent()

const {
  status,
  json
} = await fetch('http://localhost:3000/foo', { dispatcher: envHttpProxyAgent })

console.log('response received', status) // response received 200

const data = await json() // data { foo: "bar" }
```

----------------------------------------

TITLE: Building Static Library for c-ares with Platform-Specific Settings
DESCRIPTION: Configures and builds the static library version of c-ares with appropriate naming conventions for different platforms. Sets up target properties, includes, compile definitions, and installation targets.
SOURCE: https://github.com/nodejs/node/blob/main/deps/cares/src/lib/CMakeLists.txt#2025-04-23_snippet_3

LANGUAGE: CMake
CODE:
```
IF (CARES_STATIC)
	SET (LIBNAME ${PROJECT_NAME}${STATIC_SUFFIX})

	ADD_LIBRARY (${LIBNAME} STATIC ${CSOURCES})

	SET_TARGET_PROPERTIES (${LIBNAME} PROPERTIES
		EXPORT_NAME                  cares${STATIC_SUFFIX}
		COMPILE_PDB_NAME             cares${STATIC_SUFFIX}
		C_STANDARD                   90
	)

	# On Windows, the output name should have a static suffix since otherwise
	# we would have conflicting output names (libcares.lib) for the link
	# library.
	# However on Unix-like systems, we typically have something like
	# libcares.so  for shared libraries  and libcares.a for static
	# libraries, so these don't conflict.
	# This behavior better emulates what happens with autotools builds
	IF (WIN32)
		SET_TARGET_PROPERTIES(${LIBNAME} PROPERTIES OUTPUT_NAME cares${STATIC_SUFFIX})
	ELSE ()
		SET_TARGET_PROPERTIES(${LIBNAME} PROPERTIES OUTPUT_NAME cares)
	ENDIF()

	IF (ANDROID)
		SET_TARGET_PROPERTIES (${LIBNAME} PROPERTIES C_STANDARD 99)
	ENDIF ()

	IF (CARES_STATIC_PIC)
		SET_TARGET_PROPERTIES (${LIBNAME} PROPERTIES POSITION_INDEPENDENT_CODE True)
	ENDIF ()

	TARGET_INCLUDE_DIRECTORIES (${LIBNAME}
		PUBLIC "$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>"
		       "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>"
		       "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>"
		       "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
		PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}"
		        "${CMAKE_CURRENT_SOURCE_DIR}/include"
	)

	TARGET_COMPILE_DEFINITIONS (${LIBNAME} PRIVATE HAVE_CONFIG_H=1 CARES_BUILDING_LIBRARY)

	# Only matters on Windows
	IF (WIN32 OR CYGWIN)
		TARGET_COMPILE_DEFINITIONS (${LIBNAME} PUBLIC CARES_STATICLIB)
	ENDIF()

	TARGET_LINK_LIBRARIES (${LIBNAME} PUBLIC ${CARES_DEPENDENT_LIBS})
	IF (CARES_INSTALL)
		INSTALL (TARGETS ${LIBNAME} EXPORT ${PROJECT_NAME}-targets COMPONENT Devel
			${TARGETS_INST_DEST}
		)
	ENDIF ()

	# For chain building: add alias targets that look like import libs that would be returned by find_package(c-ares).
	ADD_LIBRARY (${PROJECT_NAME}::cares_static ALIAS ${LIBNAME})
	IF (NOT TARGET ${PROJECT_NAME}::cares)
		# Only use static for the generic alias if shared lib wasn't built.
		ADD_LIBRARY (${PROJECT_NAME}::cares ALIAS ${LIBNAME})
	ENDIF ()
ENDIF ()
```

----------------------------------------

TITLE: Creating JavaScript Numbers from Double Values in C
DESCRIPTION: Function to convert C double values to JavaScript numbers with double precision.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_92

LANGUAGE: c
CODE:
```
napi_status napi_create_double(napi_env env, double value, napi_value* result)
```

----------------------------------------

TITLE: Handling Partial Multi-byte Characters with StringDecoder in ES Modules
DESCRIPTION: Shows how StringDecoder handles multi-byte UTF-8 characters that span multiple write operations using ES Modules. The decoder buffers incomplete characters until they can be fully decoded.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/string_decoder.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import { StringDecoder } from 'node:string_decoder';
import { Buffer } from 'node:buffer';
const decoder = new StringDecoder('utf8');

decoder.write(Buffer.from([0xE2]));
decoder.write(Buffer.from([0x82]));
console.log(decoder.end(Buffer.from([0xAC]))); // Prints: €
```

----------------------------------------

TITLE: Displaying Incremental Coverage Test Results for Profiler.collectCoverage
DESCRIPTION: Shows the output of testPreciseCountCoverageIncremental which demonstrates how coverage data changes as code execution progresses, including optimization status changes and execution count increments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/cpu-profiler/coverage-block-expected.txt#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            description : 8
            type : number
            value : 8
        }
    }
}
{
    id : <messageId>
    result : {
        result : [
            [0] : {
                functions : [
                    [0] : {
                        functionName : 
                        isBlockCoverage : true
                        ranges : [
                            [0] : {
                                count : 1
                                endOffset : 221
                                startOffset : 0
                            }
                        ]
                    }
                    [1] : {
                        functionName : fib
                        isBlockCoverage : true
                        ranges : [
                            [0] : {
                                count : 15
                                endOffset : 73
                                startOffset : 1
                            }
                            [1] : {
                                count : 8
                                endOffset : 41
                                startOffset : 32
                            }
                            [2] : {
                                count : 7
                                endOffset : 72
                                startOffset : 41
                            }
                        ]
                    }
                    [2] : {
                        functionName : is_optimized
                        isBlockCoverage : false
                        ranges : [
                            [0] : {
                                count : 0
                                endOffset : 175
                                startOffset : 74
                            }
                        ]
                    }
                    [3] : {
                        functionName : iife
                        isBlockCoverage : true
                        ranges : [
                            [0] : {
                                count : 1
                                endOffset : 208
                                startOffset : 177
                            }
                        ]
                    }
                ]
                scriptId : <scriptId>
                url : testPreciseCountCoverageIncremental
            }
        ]
        timestamp : <timestamp>
    }
}
{
    id : <messageId>
    result : {
        result : {
            type : string
            value : unoptimized
        }
    }
}
{
    id : <messageId>
    result : {
        result : {
            description : 10946
            type : number
            value : 10946
        }
    }
}
{
    id : <messageId>
    result : {
        result : {
            type : string
            value : optimized
        }
    }
}
{
    id : <messageId>
    result : {
        result : [
            [0] : {
                functions : [
                    [0] : {
                        functionName : fib
                        isBlockCoverage : true
                        ranges : [
                            [0] : {
                                count : 21891
                                endOffset : 73
                                startOffset : 1
                            }
                            [1] : {
                                count : 10946
                                endOffset : 41
                                startOffset : 32
                            }
                            [2] : {
                                count : 10945
                                endOffset : 72
                                startOffset : 41
                            }
                        ]
                    }
                    [1] : {
                        functionName : is_optimized
                        isBlockCoverage : true
                        ranges : [
                            [0] : {
                                count : 2
                                endOffset : 175
                                startOffset : 74
                            }
                            [1] : {
                                count : 1
                                endOffset : 156
                                startOffset : 143
                            }
                            [2] : {
                                count : 1
                                endOffset : 172
                                startOffset : 157
                            }
                        ]
                    }
                ]
                scriptId : <scriptId>
                url : testPreciseCountCoverageIncremental
            }
            [1] : {
                functions : [
                    [0] : {
                        functionName : 
                        isBlockCoverage : true
                        ranges : [
                            [0] : {
                                count : 2
                                endOffset : 17
                                startOffset : 0
                            }
                        ]
                    }
                ]
                scriptId : <scriptId>
                url : 
            }
            [2] : {
                functions : [
                    [0] : {
                        functionName : 
                        isBlockCoverage : true
                        ranges : [
                            [0] : {
                                count : 1
                                endOffset : 7
                                startOffset : 0
                            }
                        ]
                    }
                ]
                scriptId : <scriptId>
                url : 
            }
        ]
        timestamp : <timestamp>
    }
}
```

----------------------------------------

TITLE: Defining ES2022 Static Private Fields, Accessors, and Methods - JavaScript
DESCRIPTION: This code defines a JavaScript class, 'Klass', that demonstrates several forms of static private class members: a field, accessor pair (getter and setter), getter-only accessor, setter-only accessor, and a method. It serves as a basis for introspection and testing of private member semantics, especially for out-of-class scope access and mutation. No external dependencies are required; key members include '#field', '#getterOnly', '#setterOnly', '#accessor', and '#method', accessed only via class scope, and often attempted via the V8 inspector.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-private-class-member-static-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
class Klass {
  static #field = "string";
  static get #getterOnly() { return "getterOnly"; }
  static set #setterOnly(val) { this.#field = "setterOnlyCalled"; }
  static get #accessor() { return this.#field }
  static set #accessor(val) { this.#field = val; }
  static #method() { return "method"; }
}
const obj = new Klass();
```

----------------------------------------

TITLE: Single-step Deflate Compression and Unzip Decompression using CommonJS
DESCRIPTION: Shows how to compress a string using `zlib.deflate` and decompress a Base64 encoded buffer using `zlib.unzip` in a single operation using callbacks. It also demonstrates using `util.promisify` to convert the callback-based `unzip` function into a promise-returning function, handling the result with `.then` and errors with `.catch`. Uses CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_7

LANGUAGE: cjs
CODE:
```
const { deflate, unzip } = require('node:zlib');

const input = '.................................';
deflate(input, (err, buffer) => {
  if (err) {
    console.error('An error occurred:', err);
    process.exitCode = 1;
  }
  console.log(buffer.toString('base64'));
});

const buffer = Buffer.from('eJzT0yMAAGTvBe8=', 'base64');
unzip(buffer, (err, buffer) => {
  if (err) {
    console.error('An error occurred:', err);
    process.exitCode = 1;
  }
  console.log(buffer.toString());
});

// Or, Promisified

const { promisify } = require('node:util');
const do_unzip = promisify(unzip);

do_unzip(buffer)
  .then((buf) => console.log(buf.toString()))
  .catch((err) => {
    console.error('An error occurred:', err);
    process.exitCode = 1;
  });
```

----------------------------------------

TITLE: Demonstrating instanceof behavior across different realms in JavaScript
DESCRIPTION: This snippet illustrates how instanceof can produce unexpected results when dealing with values from different realms. It uses the vm module to create a new context and compares objects across realms. It also shows more reliable alternatives using Array.isArray().
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/primordials.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
const vm = require('node:vm');

console.log(vm.runInNewContext('[]') instanceof Array); // false
console.log(vm.runInNewContext('[]') instanceof vm.runInNewContext('Array')); // false
console.log([] instanceof vm.runInNewContext('Array')); // false

console.log(Array.isArray(vm.runInNewContext('[]'))); // true
console.log(vm.runInNewContext('Array').isArray(vm.runInNewContext('[]'))); // true
console.log(vm.runInNewContext('Array').isArray([])); // true
```

----------------------------------------

TITLE: Extracting File Extension using path.extname (Hidden File)
DESCRIPTION: Demonstrates `path.extname()` returning an empty string for a hidden file (starting with a dot) that has no other dots.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_19

LANGUAGE: js
CODE:
```
path.extname('.index');
// Returns: ''
```

----------------------------------------

TITLE: Writing Unsigned 16-bit Integer (LE) to Buffer (Node.js)
DESCRIPTION: Writes an unsigned 16-bit integer `value` to the Buffer `buf` at the specified `offset` using little-endian format. `value` must be a valid unsigned 16-bit integer (0-65535). Returns the offset plus two. Also available as `writeUint16LE`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_97

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeUInt16LE(0xdead, 0);
buf.writeUInt16LE(0xbeef, 2);

console.log(buf);
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeUInt16LE(0xdead, 0);
buf.writeUInt16LE(0xbeef, 2);

console.log(buf);
```

----------------------------------------

TITLE: Testing Object Property Modification Methods
DESCRIPTION: Test assertions checking behavior of Object.preventExtensions(), Object.seal(), and Object.freeze() methods. Includes tests for regular objects, functions, arrays, and arguments objects.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/preventExtensions-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
var o = {}; Object.preventExtensions(o); o.__proto__ = { newProp: "Should not see this" }; o.newProp;
```

LANGUAGE: javascript
CODE:
```
"use strict"; var o = {}; Object.preventExtensions(o); o.__proto__ = { newProp: "Should not see this" }; o.newProp;
```

LANGUAGE: javascript
CODE:
```
var arr = Object.preventExtensions([]); arr[0] = 42;
```

LANGUAGE: javascript
CODE:
```
"use strict"; var arr = Object.preventExtensions([]); arr[0] = 42;
```

----------------------------------------

TITLE: Using traceSync with diagnostics_channel in JavaScript (CommonJS)
DESCRIPTION: Example of using the traceSync method to wrap a synchronous function in a trace operation with CommonJS. This produces start and end events around function execution and supports passing context data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_33

LANGUAGE: javascript
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.traceSync(() => {
  // Do something
}, {
  some: 'thing',
});
```

----------------------------------------

TITLE: Node-API Module Registration Macro
DESCRIPTION: Macro used to register a Node-API module, specifying the module name and initialization function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_63

LANGUAGE: c
CODE:
```
NAPI_MODULE(NODE_GYP_MODULE_NAME, Init)
```

----------------------------------------

TITLE: Decompressing a Truncated Buffer Using zlib (JavaScript/Node.js)
DESCRIPTION: This JavaScript snippet demonstrates decompressing a truncated (incomplete) buffer using zlib.unzip and the finishFlush option set to Z_SYNC_FLUSH. It uses Node.js modules zlib and process. The handler logs errors and prints the decompressed string if successful. Input is a base64-encoded compressed buffer; output is the decompressed string, though some integrity and completeness checks are skipped. Limitation: Using this method may mask premature input completion and missing integrity checks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_14

LANGUAGE: js
CODE:
```
// This is a truncated version of the buffer from the above examples\nconst buffer = Buffer.from('eJzT0yMA', 'base64');\n\nzlib.unzip(\n  buffer,\n  // For Brotli, the equivalent is zlib.constants.BROTLI_OPERATION_FLUSH.\n  // For Zstd, the equivalent is zlib.constants.ZSTD_e_flush.\n  { finishFlush: zlib.constants.Z_SYNC_FLUSH },\n  (err, buffer) => {\n    if (err) {\n      console.error('An error occurred:', err);\n      process.exitCode = 1;\n    }\n    console.log(buffer.toString());\n  });
```

----------------------------------------

TITLE: Demonstrating Local Folder References in Markdown
DESCRIPTION: This snippet shows how to reference packages from local folders, emphasizing the importance of using proper path prefixes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/package-spec.md#2025-04-23_snippet_4

LANGUAGE: markdown
CODE:
```
* `./my-package`
* `/opt/npm/my-package`
```

----------------------------------------

TITLE: Setting Package Values
DESCRIPTION: Examples of setting various values in package.json using npm pkg set command
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-pkg.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm pkg set bin.mynewcommand=cli.js
npm pkg set description='Awesome package' engines.node='>=10'
npm pkg set contributors[0].name='Foo' contributors[0].email='foo@bar.ca'
npm pkg set contributors[].name='Foo' contributors[].name='Bar'
npm pkg set private=true --json
npm pkg set tap.timeout=60 --json
```

----------------------------------------

TITLE: Converting X509 Certificate to String in Node.js
DESCRIPTION: Returns the PEM-encoded representation of the certificate as a string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_53

LANGUAGE: javascript
CODE:
```
x509.toString()
```

----------------------------------------

TITLE: Getting Node.js Version in Node-API (C)
DESCRIPTION: Function to retrieve the version information for the currently running Node.js instance. Returns major, minor, patch versions, and release name.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_197

LANGUAGE: c
CODE:
```
typedef struct {
  uint32_t major;
  uint32_t minor;
  uint32_t patch;
  const char* release;
} napi_node_version;

napi_status napi_get_node_version(node_api_basic_env env,
                                  const napi_node_version** version);
```

----------------------------------------

TITLE: Testing JSON.stringify with Undefined and Null in JavaScript
DESCRIPTION: These functions test how JSON.stringify handles undefined and null values directly, as well as when they are returned from toJSON methods in objects and arrays.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/run-json-stringify-expected.txt#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(undefined);
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(null);
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({toJSON:function(){ return undefined; }});
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({toJSON:function(){ return null; }});
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify([{toJSON:function(){ return undefined; }}]);
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify([{toJSON:function(){ return null; }}]);
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({a:{toJSON:function(){ return undefined; }}});
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({a:{toJSON:function(){ return null; }}});
    }
```

----------------------------------------

TITLE: Accessing Other OpenSSL Constants in Node.js
DESCRIPTION: These constants include various OpenSSL-specific values used for Diffie-Hellman key exchange, RSA padding, and elliptic curve point conversion. They can be accessed through the crypto module in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_100

LANGUAGE: JavaScript
CODE:
```
const crypto = require('crypto');

console.log(crypto.constants.DH_CHECK_P_NOT_SAFE_PRIME);
console.log(crypto.constants.DH_CHECK_P_NOT_PRIME);
console.log(crypto.constants.DH_UNABLE_TO_CHECK_GENERATOR);
console.log(crypto.constants.DH_NOT_SUITABLE_GENERATOR);
console.log(crypto.constants.RSA_PKCS1_PADDING);
console.log(crypto.constants.RSA_SSLV23_PADDING);
console.log(crypto.constants.RSA_NO_PADDING);
console.log(crypto.constants.RSA_PKCS1_OAEP_PADDING);
console.log(crypto.constants.RSA_X931_PADDING);
console.log(crypto.constants.RSA_PKCS1_PSS_PADDING);
console.log(crypto.constants.RSA_PSS_SALTLEN_DIGEST);
console.log(crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN);
console.log(crypto.constants.RSA_PSS_SALTLEN_AUTO);
console.log(crypto.constants.POINT_CONVERSION_COMPRESSED);
console.log(crypto.constants.POINT_CONVERSION_UNCOMPRESSED);
console.log(crypto.constants.POINT_CONVERSION_HYBRID);
```

----------------------------------------

TITLE: Streaming Org Roster via libnpmorg ls.stream() in JavaScript
DESCRIPTION: Demonstrates use of org.ls.stream() to iterate asynchronously over an npm Organization's roster using async iteration and streams in Node.js. For each emitted [user, role] entry, outputs formatted information. libnpmorg, a valid token, and Node.js async iterators are required. The stream adheres to the Symbol.asyncIterator protocol and is suitable for processing large orgs. Useful for memory-efficient, on-the-fly role enumeration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmorg/README.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
for await (let [user, role] of org.ls.stream('myorg', {token: 'deadbeef'})) {
  console.log(`user: ${user} (${role})`)
}
=>
user: zkat (developer)
user: iarna (admin)
user: isaacs (owner)
```

----------------------------------------

TITLE: Handling HTTP/2 Client Origin Event (CJS)
DESCRIPTION: Demonstrates how to connect to an HTTP/2 server using `node:http2` and listen for the `'origin'` event on the client session. This event is emitted when an `ORIGIN` frame is received, providing an array of origin strings from the server.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_12

LANGUAGE: cjs
CODE:
```
const http2 = require('node:http2');
const client = http2.connect('https://example.org');

client.on('origin', (origins) => {
  for (let n = 0; n < origins.length; n++)
    console.log(origins[n]);
});
```

----------------------------------------

TITLE: Testing Object.defineProperty in Strict Mode JavaScript
DESCRIPTION: Examines the behavior of Object.defineProperty in strict mode, particularly focusing on setter behavior and exceptions thrown when attempting to set read-only properties.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/Object-defineProperty-expected.txt#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
'use strict';
var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:undefined});
o.foo = 42;
o.result; threw exception TypeError: Cannot set property foo of #<Object> which has only a getter.
```

----------------------------------------

TITLE: Using path.basename on POSIX Systems
DESCRIPTION: Demonstrates the default behavior of `path.basename()` on POSIX systems when given a Windows-style path. It returns the entire path string because backslashes are treated as literal characters, not separators.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_2

LANGUAGE: js
CODE:
```
path.basename('C:\\temp\\myfile.html');
// Returns: 'C:\\temp\\myfile.html'
```

----------------------------------------

TITLE: Implementing Dynamic Import in Node.js VM Module (CommonJS)
DESCRIPTION: This code shows how to use the importModuleDynamically function in a CommonJS module context. It creates a new Script instance with a dynamic import, customizes the import behavior, and runs the script in the current context within an async IIFE.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_32

LANGUAGE: javascript
CODE:
```
// This script must be run with --experimental-vm-modules.
const { Script, SyntheticModule } = require('node:vm');

(async function main() {
  const script = new Script('import("foo.json", { with: { type: "json" } })', {
    async importModuleDynamically(specifier, referrer, importAttributes) {
      console.log(specifier);  // 'foo.json'
      console.log(referrer);   // The compiled script
      console.log(importAttributes);  // { type: 'json' }
      const m = new SyntheticModule(['bar'], () => { });
      await m.link(() => { });
      m.setExport('bar', { hello: 'world' });
      return m;
    },
  });
  const result = await script.runInThisContext();
  console.log(result);  //  { bar: { hello: 'world' } }
})();
```

----------------------------------------

TITLE: Configuring Install-Links Option in NPM
DESCRIPTION: The install-links option determines how file: protocol dependencies are handled during installation. When set to true, these dependencies are packed and installed as regular dependencies instead of creating symlinks.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_8

LANGUAGE: markdown
CODE:
```
#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink. This option has no effect on
workspaces.
```

----------------------------------------

TITLE: URL Object Cloning Limitation
DESCRIPTION: Demonstrates the limitation of cloning built-in objects like URL through MessagePort.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
const { port1, port2 } = new MessageChannel();

port1.onmessage = ({ data }) => console.log(data);

port2.postMessage(new URL('https://example.org'));

// Prints: { }
```

----------------------------------------

TITLE: Registering Synchronous Hooks with ES Modules
DESCRIPTION: Example demonstrating how to register synchronous module hooks using ES Modules syntax. Shows implementation of resolve and load hooks running in the main thread.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
// Use module.registerHooks() to register synchronous hooks in the main thread.
import { registerHooks } from 'node:module';
registerHooks({
  resolve(specifier, context, nextResolve) { /* implementation */ },
  load(url, context, nextLoad) { /* implementation */ },
});
```

----------------------------------------

TITLE: Pseudocode Implementation of Node.js require() Resolution Algorithm
DESCRIPTION: A detailed pseudocode implementation showing how Node.js resolves module paths when require() is called, including file resolution, directory loading, and package.json handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_11

LANGUAGE: text
CODE:
```
require(X) from module at path Y
1. If X is a core module,
   a. return the core module
   b. STOP
2. If X begins with '/'
   a. set Y to the file system root
3. If X is equal to '.', or X begins with './', '/' or '../'
   a. LOAD_AS_FILE(Y + X)
   b. LOAD_AS_DIRECTORY(Y + X)
   c. THROW "not found"
4. If X begins with '#'
   a. LOAD_PACKAGE_IMPORTS(X, dirname(Y))
5. LOAD_PACKAGE_SELF(X, dirname(Y))
6. LOAD_NODE_MODULES(X, dirname(Y))
7. THROW "not found"

MAYBE_DETECT_AND_LOAD(X)
1. If X parses as a CommonJS module, load X as a CommonJS module. STOP.
2. Else, if the source code of X can be parsed as ECMAScript module using
  <a href="esm.md#resolver-algorithm-specification">DETECT_MODULE_SYNTAX defined in
  the ESM resolver</a>,
  a. Load X as an ECMAScript module. STOP.
3. THROW the SyntaxError from attempting to parse X as CommonJS in 1. STOP.

LOAD_AS_FILE(X)
1. If X is a file, load X as its file extension format. STOP
2. If X.js is a file,
    a. Find the closest package scope SCOPE to X.
    b. If no scope was found
      1. MAYBE_DETECT_AND_LOAD(X.js)
    c. If the SCOPE/package.json contains "type" field,
      1. If the "type" field is "module", load X.js as an ECMAScript module. STOP.
      2. If the "type" field is "commonjs", load X.js as a CommonJS module. STOP.
    d. MAYBE_DETECT_AND_LOAD(X.js)
3. If X.json is a file, load X.json to a JavaScript Object. STOP
4. If X.node is a file, load X.node as binary addon. STOP

LOAD_INDEX(X)
1. If X/index.js is a file
    a. Find the closest package scope SCOPE to X.
    b. If no scope was found, load X/index.js as a CommonJS module. STOP.
    c. If the SCOPE/package.json contains "type" field,
      1. If the "type" field is "module", load X/index.js as an ECMAScript module. STOP.
      2. Else, load X/index.js as a CommonJS module. STOP.
2. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP
3. If X/index.node is a file, load X/index.node as binary addon. STOP

LOAD_AS_DIRECTORY(X)
1. If X/package.json is a file,
   a. Parse X/package.json, and look for "main" field.
   b. If "main" is a falsy value, GOTO 2.
   c. let M = X + (json main field)
   d. LOAD_AS_FILE(M)
   e. LOAD_INDEX(M)
   f. LOAD_INDEX(X) DEPRECATED
   g. THROW "not found"
2. LOAD_INDEX(X)

LOAD_NODE_MODULES(X, START)
1. let DIRS = NODE_MODULES_PATHS(START)
2. for each DIR in DIRS:
   a. LOAD_PACKAGE_EXPORTS(X, DIR)
   b. LOAD_AS_FILE(DIR/X)
   c. LOAD_AS_DIRECTORY(DIR/X)

NODE_MODULES_PATHS(START)
1. let PARTS = path split(START)
2. let I = count of PARTS - 1
3. let DIRS = []
4. while I >= 0,
   a. if PARTS[I] = "node_modules", GOTO d.
   b. DIR = path join(PARTS[0 .. I] + "node_modules")
   c. DIRS = DIR + DIRS
   d. let I = I - 1
5. return DIRS + GLOBAL_FOLDERS

LOAD_PACKAGE_IMPORTS(X, DIR)
1. Find the closest package scope SCOPE to DIR.
2. If no scope was found, return.
3. If the SCOPE/package.json "imports" is null or undefined, return.
4. If `--experimental-require-module` is enabled
  a. let CONDITIONS = ["node", "require", "module-sync"]
  b. Else, let CONDITIONS = ["node", "require"]
5. let MATCH = PACKAGE_IMPORTS_RESOLVE(X, pathToFileURL(SCOPE),
  CONDITIONS) <a href="esm.md#resolver-algorithm-specification">defined in the ESM resolver</a>.
6. RESOLVE_ESM_MATCH(MATCH).

LOAD_PACKAGE_EXPORTS(X, DIR)
1. Try to interpret X as a combination of NAME and SUBPATH where the name
   may have a @scope/ prefix and the subpath begins with a slash (`/`).
2. If X does not match this pattern or DIR/NAME/package.json is not a file,
   return.
3. Parse DIR/NAME/package.json, and look for "exports" field.
4. If "exports" is null or undefined, return.
5. If `--experimental-require-module` is enabled
  a. let CONDITIONS = ["node", "require", "module-sync"]
  b. Else, let CONDITIONS = ["node", "require"]
6. let MATCH = PACKAGE_EXPORTS_RESOLVE(pathToFileURL(DIR/NAME), "." + SUBPATH,
   `package.json` "exports", CONDITIONS) <a href="esm.md#resolver-algorithm-specification">defined in the ESM resolver</a>.
7. RESOLVE_ESM_MATCH(MATCH)

LOAD_PACKAGE_SELF(X, DIR)
1. Find the closest package scope SCOPE to DIR.
2. If no scope was found, return.
3. If the SCOPE/package.json "exports" is null or undefined, return.
4. If the SCOPE/package.json "name" is not the first segment of X, return.
5. let MATCH = PACKAGE_EXPORTS_RESOLVE(pathToFileURL(SCOPE),
   "." + X.slice("name".length), `package.json` "exports", ["node", "require"])
   <a href="esm.md#resolver-algorithm-specification">defined in the ESM resolver</a>.
6. RESOLVE_ESM_MATCH(MATCH)

RESOLVE_ESM_MATCH(MATCH)
1. let RESOLVED_PATH = fileURLToPath(MATCH)
2. If the file at RESOLVED_PATH exists, load RESOLVED_PATH as its extension
   format. STOP
3. THROW "not found"
```

----------------------------------------

TITLE: Throwing a JavaScript TypeError with N-API in C
DESCRIPTION: This function creates and throws a JavaScript `TypeError` object. It accepts the N-API environment (`env`), an optional error code string (`code`), and the error message string (`msg`). The optional code is associated with the error if provided.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_36

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_throw_type_error(napi_env env,
                                              const char* code,
                                              const char* msg);
```

----------------------------------------

TITLE: Testing Function Properties in Strict Mode JavaScript
DESCRIPTION: This snippet checks the behavior of function properties like 'arguments' and 'caller' in strict mode. It verifies if these properties are undefined or have specific descriptors.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/basic-strict-mode-expected.txt#2025-04-23_snippet_18

LANGUAGE: JavaScript
CODE:
```
(function f(arg){'use strict'; return Object.getOwnPropertyDescriptor(f.__proto__, 'arguments').value; })()
```

----------------------------------------

TITLE: Starting CPU Profiles with console.profile in Node.js Inspector (JavaScript)
DESCRIPTION: Demonstrates how `console.profile(label)` initiates a JavaScript CPU profiling session, identified by an optional `label`. This method only functions when the Node.js process is run with the inspector enabled (`--inspect` flag). The profile data is collected until `console.profileEnd(label)` is called, at which point the results are added to the 'Profile' panel in the connected inspector client. It does not produce console output otherwise.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_10

LANGUAGE: js
CODE:
```
console.profile('MyLabel');
// Some code
console.profileEnd('MyLabel');
// Adds the profile 'MyLabel' to the Profiles panel of the inspector.
```

----------------------------------------

TITLE: Reading Empty File Stream in Node.js
DESCRIPTION: Example demonstrating readable event behavior with an empty file stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_30

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');
const rr = fs.createReadStream('foo.txt');
rr.on('readable', () => {
  console.log(`readable: ${rr.read()}`);
});
rr.on('end', () => {
  console.log('end');
});
```

----------------------------------------

TITLE: Testing Array.prototype.every() Early Exit Behavior in JavaScript
DESCRIPTION: This snippet demonstrates the 'short-circuiting' behavior of the every() method, where it stops iterating as soon as the callback returns a falsy value.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-every-expected.txt#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every(isBigEnoughShortCircuit)
```

LANGUAGE: javascript
CODE:
```
[12, 54, 18, 130, 44].every(isBigEnoughShortCircuit)
```

----------------------------------------

TITLE: Connecting a Node.js net.Socket via IPC Path
DESCRIPTION: Initiates an IPC connection asynchronously on the given socket using a specified `path`. This is an alias for `socket.connect({ path: path }[, connectListener])`. The 'connect' event is emitted on success, 'error' on failure. The optional `connectListener` is added as a one-time listener for the 'connect' event. Returns the socket instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
socket.connect(path[, connectListener])
```

----------------------------------------

TITLE: Handling TLS Keylog Event in Node.js
DESCRIPTION: Demonstrates how to handle the 'keylog' event in a TLS server. This event is emitted when key material is generated or received, and can be used for debugging TLS traffic.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
const logFile = fs.createWriteStream('/tmp/ssl-keys.log', { flags: 'a' });
// ...
server.on('keylog', (line, tlsSocket) => {
  if (tlsSocket.remoteAddress !== '...')
    return; // Only log keys for a particular IP
  logFile.write(line);
});
```

----------------------------------------

TITLE: Creating and Resolving Blob Object URLs - WHATWG URL API - JavaScript
DESCRIPTION: Demonstrates creation of in-memory, thread-local URLs for Blob objects via URL.createObjectURL, and retrieving the Blob later by calling resolveObjectURL. Usage is shown with Node.js's 'node:buffer' module, specifically the Blob class and resolveObjectURL. Blob URLs are valid only in the thread that created them and must be manually revoked to free memory. Required dependencies: 'node:buffer'. Inputs are Blob instance and the generated URL id; output is Blob size after retrieval.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_30

LANGUAGE: JavaScript
CODE:
```
const {
  Blob,
  resolveObjectURL,
} = require('node:buffer');

const blob = new Blob(['hello']);
const id = URL.createObjectURL(blob);

// later...

const otherBlob = resolveObjectURL(id);
console.log(otherBlob.size);

```

----------------------------------------

TITLE: Unix Socket Connection in Node.js
DESCRIPTION: Example showing how to create a Unix domain socket connection using net.createConnection.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
const client = net.createConnection({ path: '/tmp/echo.sock' });
```

----------------------------------------

TITLE: Demonstrating Worker Stdio Blocking in CommonJS
DESCRIPTION: This example illustrates how a Worker's stdout can be blocked by synchronous code in the main thread when using CommonJS. It shows that console output from a worker thread can be delayed when the main thread is busy with CPU-intensive operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_21

LANGUAGE: cjs
CODE:
```
'use strict';

const {
  Worker,
  isMainThread,
} = require('node:worker_threads');

if (isMainThread) {
  new Worker(__filename);
  for (let n = 0; n < 1e10; n++) {
    // Looping to simulate work.
  }
} else {
  // This output will be blocked by the for loop in the main thread.
  console.log('foo');
}
```

----------------------------------------

TITLE: Creating a Node.js Buffer with Copied Data - Node-API - C
DESCRIPTION: Declares a function for allocating a Buffer and initializing its memory by copying data from a source buffer in native code. Requires the input buffer, its length, and outputs both a napi_value and the copied buffer pointer. Useful for transferring ownership of data from native to JavaScript. Returns napi_ok on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_78

LANGUAGE: c
CODE:
```
napi_status napi_create_buffer_copy(napi_env env,
                                    size_t length,
                                    const void* data,
                                    void** result_data,
                                    napi_value* result)
```

----------------------------------------

TITLE: Measuring DNS Resolution Time in ESM Format
DESCRIPTION: This example demonstrates how to measure DNS resolution performance using the PerformanceObserver API in ESM format. It performs both callback-based and promise-based DNS lookups and logs the performance metrics for the resolution process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
import { PerformanceObserver } from 'node:perf_hooks';
import { lookup, promises } from 'node:dns';

const obs = new PerformanceObserver((items) => {
  items.getEntries().forEach((item) => {
    console.log(item);
  });
});
obs.observe({ entryTypes: ['dns'] });
lookup('localhost', () => {});
promises.resolve('localhost');
```

----------------------------------------

TITLE: Retrieving Active Resource Information in Node.js
DESCRIPTION: Demonstrates the use of process.getActiveResourcesInfo() to get an array of active resources keeping the event loop alive. The example shows the difference before and after setting a timeout.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_47

LANGUAGE: JavaScript
CODE:
```
import { getActiveResourcesInfo } from 'node:process';
import { setTimeout } from 'node:timers';

console.log('Before:', getActiveResourcesInfo());
setTimeout(() => {}, 1000);
console.log('After:', getActiveResourcesInfo());
// Prints:
//   Before: [ 'CloseReq', 'TTYWrap', 'TTYWrap', 'TTYWrap' ]
//   After: [ 'CloseReq', 'TTYWrap', 'TTYWrap', 'TTYWrap', 'Timeout' ]
```

LANGUAGE: JavaScript
CODE:
```
const { getActiveResourcesInfo } = require('node:process');
const { setTimeout } = require('node:timers');

console.log('Before:', getActiveResourcesInfo());
setTimeout(() => {}, 1000);
console.log('After:', getActiveResourcesInfo());
// Prints:
//   Before: [ 'TTYWrap', 'TTYWrap', 'TTYWrap' ]
//   After: [ 'TTYWrap', 'TTYWrap', 'TTYWrap', 'Timeout' ]
```

----------------------------------------

TITLE: Unsubscribing from Tracing Channel Events - Node.js (ESM)
DESCRIPTION: Demonstrates unsubscribing multiple event handlers from a TracingChannel in ES Module syntax. The unsubscribe method receives an object mapping event names to handler functions, removing each from its respective event channel. Returns true if all handlers are removed. Requires 'node:diagnostics_channel' (v18.19.0 or newer).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_30

LANGUAGE: JavaScript (ESM)
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';\n\nconst channels = diagnostics_channel.tracingChannel('my-channel');\n\nchannels.unsubscribe({\n  start(message) {\n    // Handle start message\n  },\n  end(message) {\n    // Handle end message\n  },\n  asyncStart(message) {\n    // Handle asyncStart message\n  },\n  asyncEnd(message) {\n    // Handle asyncEnd message\n  },\n  error(message) {\n    // Handle error message\n  },\n});
```

----------------------------------------

TITLE: Creating Syntax Errors in Node-API
DESCRIPTION: Function to create a JavaScript SyntaxError with custom error code and message. Returns napi_ok on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_43

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status node_api_create_syntax_error(napi_env env,
                                                     napi_value code,
                                                     napi_value msg,
                                                     napi_value* result);
```

----------------------------------------

TITLE: Loading Built-in Modules in Node.js
DESCRIPTION: Shows how to use process.getBuiltinModule(id) to conditionally load a Node.js built-in module. This method is useful for ES Modules that need to support other environments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_48

LANGUAGE: JavaScript
CODE:
```
if (globalThis.process?.getBuiltinModule) {
  // Run in Node.js, use the Node.js fs module.
  const fs = globalThis.process.getBuiltinModule('fs');
  // If `require()` is needed to load user-modules, use createRequire()
  const module = globalThis.process.getBuiltinModule('module');
  const require = module.createRequire(import.meta.url);
  const foo = require('foo');
}
```

----------------------------------------

TITLE: Building & Loading Node.js Snapshots (v8.startupSnapshot) - Console
DESCRIPTION: Shows how to build a Node.js snapshot using the `v8.startupSnapshot` API to define the deserialization entry point within the snapshotted code itself. This eliminates the need for a separate entry script when loading the snapshot using `--snapshot-blob`. Requires `--build-snapshot` and `--snapshot-blob`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_11

LANGUAGE: console
CODE:
```
$ echo "require('v8').startupSnapshot.setDeserializeMainFunction(() => console.log('I am from the snapshot'))" > snapshot.js
$ node --snapshot-blob snapshot.blob --build-snapshot snapshot.js
$ node --snapshot-blob snapshot.blob
I am from the snapshot
```

----------------------------------------

TITLE: ProxyAgent with Fetch API
DESCRIPTION: Demonstrates using ProxyAgent with the Fetch API for making HTTP requests through a proxy.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/ProxyAgent.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { ProxyAgent, fetch } from 'undici';

// Define the ProxyAgent
const proxyAgent = new ProxyAgent('http://localhost:8000');

// Make a GET request through the proxy
const response = await fetch('http://localhost:3000/foo', {
  dispatcher: proxyAgent,
  method: 'GET',
});

console.log('Response status:', response.status);
console.log('Response data:', await response.text());
```

----------------------------------------

TITLE: Checking Int8Array in JavaScript
DESCRIPTION: Demonstrates how to use util.types.isInt8Array() to check if a value is a built-in Int8Array instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_77

LANGUAGE: javascript
CODE:
```
util.types.isInt8Array(new ArrayBuffer());  // Returns false
util.types.isInt8Array(new Int8Array());  // Returns true
util.types.isInt8Array(new Float64Array());  // Returns false
```

----------------------------------------

TITLE: Checking Map in JavaScript
DESCRIPTION: Demonstrates the use of util.types.isMap() to check if a value is a built-in Map instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_80

LANGUAGE: javascript
CODE:
```
util.types.isMap(new Map());  // Returns true
```

----------------------------------------

TITLE: Including Node-API Header with Experimental Features in C
DESCRIPTION: Shows how to enable experimental Node-API features by defining `NAPI_EXPERIMENTAL` before including `node_api.h`. This grants access to the entire API surface, including features that are not yet stable and might change or be removed in future Node.js versions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_10

LANGUAGE: c
CODE:
```
#define NAPI_EXPERIMENTAL
#include <node_api.h>
```

----------------------------------------

TITLE: Testing Basic Class Inheritance in JavaScript
DESCRIPTION: This snippet tests the basic inheritance behavior of ES6 classes, including instanceof checks and prototype chain verification.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/class-syntax-extends-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
PASS (new Base) instanceof Base is true
PASS Object.getPrototypeOf(new Base) is Base.prototype
PASS (new Derived) instanceof Derived is true
PASS Object.getPrototypeOf(new Derived) is Derived.prototype
PASS Object.getPrototypeOf(Derived.prototype) is Base.prototype
```

----------------------------------------

TITLE: Connecting with a Specific QuicEndpoint in Node.js JavaScript
DESCRIPTION: This code demonstrates specifying a precise local UDP address/port by creating a QuicEndpoint and passing it as an option to 'connect'. It requires the experimental 'node:quic' module and illustrates usage of the QuicEndpoint constructor. Inputs include the server address and a custom endpoint address; outputs are a client session bound to the selected local port. Ensure Node.js is started with '--experimental-quic'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/quic.md#2025-04-23_snippet_3

LANGUAGE: mjs
CODE:
```
import { QuicEndpoint, connect } from 'node:quic';

const endpoint = new QuicEndpoint({
  address: '127.0.0.1:1234',
});

const client = await connect('123.123.123.123:8888', { endpoint });
```

----------------------------------------

TITLE: Implementing Async Event Iteration in EventEmitter
DESCRIPTION: Addition of EventEmitter.on method to enable async iteration over events. This is a semver-minor change that enhances event handling capabilities in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V13.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
EventEmitter.on = async function* (events) {
  // Implementation allows async iteration over events
}
```

----------------------------------------

TITLE: Implementing Negatable Boolean Options in Commander.js
DESCRIPTION: Demonstrates how to define boolean options with negatable flags and optional values. Shows usage of --no-prefix for negative boolean values and handling of cheese and sauce options.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
program
  .option('--no-sauce', 'Remove sauce')
  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')
  .option('--no-cheese', 'plain with no cheese')
  .parse();

const options = program.opts();
const sauceStr = options.sauce ? 'sauce' : 'no sauce';
const cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;
console.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);
```

----------------------------------------

TITLE: Testing Deep Inequality with assert.notDeepEqual (Node.js, ECMAScript Module, JavaScript)
DESCRIPTION: Shows usage of assert.notDeepEqual() in ESM to compare objects for deep (non-strict) inequality. Demonstrates failures on deep equality and success on inequality, with various object and prototype examples. Dependency: node:assert. Key parameters: actual, expected, message. If actual and expected are deeply equal, throws AssertionError; otherwise, passes. In strict mode, notDeepEqual is an alias of notDeepStrictEqual.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_30

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert';

const obj1 = {
  a: {
    b: 1,
  },
};
const obj2 = {
  a: {
    b: 2,
  },
};
const obj3 = {
  a: {
    b: 1,
  },
};
const obj4 = { __proto__: obj1 };

assert.notDeepEqual(obj1, obj1);
// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }

assert.notDeepEqual(obj1, obj2);
// OK

assert.notDeepEqual(obj1, obj3);
// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }

assert.notDeepEqual(obj1, obj4);
// OK
```

----------------------------------------

TITLE: Checking Boolean Object in JavaScript
DESCRIPTION: Demonstrates how to use util.types.isBooleanObject() to check if a value is a boolean object created by new Boolean().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_67

LANGUAGE: javascript
CODE:
```
util.types.isBooleanObject(false);  // Returns false
util.types.isBooleanObject(true);   // Returns false
util.types.isBooleanObject(new Boolean(false)); // Returns true
util.types.isBooleanObject(new Boolean(true));  // Returns true
util.types.isBooleanObject(Boolean(false)); // Returns false
util.types.isBooleanObject(Boolean(true));  // Returns false
```

----------------------------------------

TITLE: Configuring Node-GYP Build for C++ Addon
DESCRIPTION: This binding.gyp file configures the build process for the Node.js addon, specifying the target name and source files to be compiled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_24

LANGUAGE: json
CODE:
```
{
  "targets": [
    {
      "target_name": "addon",
      "sources": [
        "addon.cc",
        "myobject.cc"
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Unbinding AsyncLocalStorage from Channel - Node.js (ESM)
DESCRIPTION: Demonstrates how to unbind an AsyncLocalStorage store from a diagnostics channel using ES Modules. Involves binding a store, then calling unbindStore to remove it. unbindStore returns true if the store was previously bound and removed, false if not found. Requires 'node:diagnostics_channel' and 'node:async_hooks'. Experimental feature introduced in v18.19.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_24

LANGUAGE: JavaScript (ESM)
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';\nimport { AsyncLocalStorage } from 'node:async_hooks';\n\nconst store = new AsyncLocalStorage();\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.bindStore(store);\nchannel.unbindStore(store);
```

----------------------------------------

TITLE: Evaluating Private Static Field Access and Assignment via V8 Runtime.evaluate - JavaScript
DESCRIPTION: These evaluation strings are used within V8's Runtime.evaluate method to test reading, writing, and increment/decrement operations on the static private field '#field' of 'Klass'. The tests probe assignment, arithmetic, and post/pre-increment semantics, asserting correct observable results and type outputs, including error handling for illegal operations. Inputs are direct JavaScript expressions evaluated in the runtime; outputs are value/type/result objects as returned by V8.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-private-class-member-static-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
Klass.#field
Klass.#field = 1
Klass.#field
Klass.#field++
Klass.#field
++Klass.#field
Klass.#field
Klass.#field -= 3
Klass.#field
```

----------------------------------------

TITLE: Safe Proxy Handler Definition in Node.js
DESCRIPTION: Shows how prototype pollution can affect Proxy handlers when using plain object literals, and demonstrates using null-prototype objects for Proxy handlers to prevent this issue.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/primordials.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
// User-land
Object.prototype.get = () => 'Unrelated user-provided data';

// Core
const objectToProxy = { someProperty: 'genuine value' };

const proxyWithPlainObjectLiteral = new Proxy(objectToProxy, {
  has() { return false; },
});
console.log(proxyWithPlainObjectLiteral.someProperty); // Unrelated user-provided data

const proxyWithNullPrototypeObject = new Proxy(objectToProxy, {
  __proto__: null,
  has() { return false; },
});
console.log(proxyWithNullPrototypeObject.someProperty); // genuine value
```

----------------------------------------

TITLE: Creating an HTTP Tunneling Proxy in Node.js (ES Modules)
DESCRIPTION: This code snippet demonstrates how to create an HTTP tunneling proxy using Node.js with ES Modules. It sets up a proxy server that handles CONNECT requests and establishes a connection to the target server.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { createServer, request } from 'node:http';
import { connect } from 'node:net';
import { URL } from 'node:url';

// Create an HTTP tunneling proxy
const proxy = createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('okay');
});
proxy.on('connect', (req, clientSocket, head) => {
  // Connect to an origin server
  const { port, hostname } = new URL(`http://${req.url}`);
  const serverSocket = connect(port || 80, hostname, () => {
    clientSocket.write('HTTP/1.1 200 Connection Established\r\n' +
                    'Proxy-agent: Node.js-Proxy\r\n' +
                    '\r\n');
    serverSocket.write(head);
    serverSocket.pipe(clientSocket);
    clientSocket.pipe(serverSocket);
  });
});

// Now that proxy is running
proxy.listen(1337, '127.0.0.1', () => {

  // Make a request to a tunneling proxy
  const options = {
    port: 1337,
    host: '127.0.0.1',
    method: 'CONNECT',
    path: 'www.google.com:80',
  };

  const req = request(options);
  req.end();

  req.on('connect', (res, socket, head) => {
    console.log('got connected!');

    // Make a request over an HTTP tunnel
    socket.write('GET / HTTP/1.1\r\n' +
                 'Host: www.google.com:80\r\n' +
                 'Connection: close\r\n' +
                 '\r\n');
    socket.on('data', (chunk) => {
      console.log(chunk.toString());
    });
    socket.on('end', () => {
      proxy.close();
    });
  });
});
```

----------------------------------------

TITLE: Initializing and Running WASI Application in ES Modules
DESCRIPTION: This snippet demonstrates how to set up a WASI environment, compile and instantiate a WebAssembly module, and run it using ES modules syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/wasi.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { readFile } from 'node:fs/promises';
import { WASI } from 'node:wasi';
import { argv, env } from 'node:process';

const wasi = new WASI({
  version: 'preview1',
  args: argv,
  env,
  preopens: {
    '/local': '/some/real/path/that/wasm/can/access',
  },
});

const wasm = await WebAssembly.compile(
  await readFile(new URL('./demo.wasm', import.meta.url)),
);
const instance = await WebAssembly.instantiate(wasm, wasi.getImportObject());

wasi.start(instance);
```

----------------------------------------

TITLE: Initializing and Using Custom DNS Resolver in CommonJS
DESCRIPTION: Shows how to create an independent resolver for DNS requests with custom DNS servers in CommonJS format. The example demonstrates both promise chain and async-await patterns for resolving IPv4 addresses.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_15

LANGUAGE: cjs
CODE:
```
const { Resolver } = require('node:dns').promises;
const resolver = new Resolver();
resolver.setServers(['4.4.4.4']);

// This request will use the server at 4.4.4.4, independent of global settings.
resolver.resolve4('example.org').then((addresses) => {
  // ...
});

// Alternatively, the same code can be written using async-await style.
(async function() {
  const addresses = await resolver.resolve4('example.org');
})();
```

----------------------------------------

TITLE: Allocating Zero-Filled Buffer using Buffer.alloc (CJS)
DESCRIPTION: Demonstrates allocating a new Node.js Buffer of a specified size using `Buffer.alloc` without providing a fill value, resulting in a zero-filled buffer. Requires requiring `Buffer` from `node:buffer` using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(5);

console.log(buf);
// Prints: <Buffer 00 00 00 00 00>
```

----------------------------------------

TITLE: Using Path Callback Functions for Advanced Request Matching
DESCRIPTION: This example demonstrates how to use a callback function for path matching to implement complex request matching logic. It parses the URL path and query parameters to determine if a request should be mocked based on custom criteria.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'
import querystring from 'querystring'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

const matchPath = requestPath => {
  const [pathname, search] = requestPath.split('?')
  const requestQuery = querystring.parse(search)

  if (!pathname.startsWith('/foo')) {
    return false
  }

  if (!Object.keys(requestQuery).includes('foo') || requestQuery.foo !== 'bar') {
    return false
  }

  return true
}

mockPool.intercept({
  path: matchPath,
  method: 'GET'
}).reply(200, 'foo')

const result = await request('http://localhost:3000/foo?foo=bar')
// Will match and return mocked data
```

----------------------------------------

TITLE: Retrieving Raw Listeners in Node.js EventEmitter (CommonJS)
DESCRIPTION: CommonJS version of the previous example, demonstrating the use of emitter.rawListeners() method to get unprocessed listeners for an event, including once() wrappers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_31

LANGUAGE: JavaScript
CODE:
```
const EventEmitter = require('node:events');
const emitter = new EventEmitter();
emitter.once('log', () => console.log('log once'));

// Returns a new Array with a function `onceWrapper` which has a property
// `listener` which contains the original listener bound above
const listeners = emitter.rawListeners('log');
const logFnWrapper = listeners[0];

// Logs "log once" to the console and does not unbind the `once` event
logFnWrapper.listener();

// Logs "log once" to the console and removes the listener
logFnWrapper();

emitter.on('log', () => console.log('log persistently'));
// Will return a new Array with a single function bound by `.on()` above
const newListeners = emitter.rawListeners('log');

// Logs "log persistently" twice
newListeners[0]();
emitter.emit('log');
```

----------------------------------------

TITLE: Handling the 'pause' Event in Node.js Readline
DESCRIPTION: Shows how to attach an event listener for the 'pause' event on a `readline.Interface` instance (`rl`). This event is emitted when the associated input stream is paused, for example, by calling `rl.pause()` or receiving a `SIGCONT` event when already paused. The listener function logs a message indicating that readline is paused.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_8

LANGUAGE: js
CODE:
```
rl.on('pause', () => {
  console.log('Readline paused.');
});
```

----------------------------------------

TITLE: console.table Output for Array of Objects (JSON-like)
DESCRIPTION: Shows the `console.table` output for an array containing three 'Person' objects. Each object's preview displays its 'firstName' and 'lastName'. The output details the array structure, object properties, and value previews.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-table-expected.txt#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
    description : Array(3)
    overflow : false
    properties : [
        [0] : {
            name : 0
            type : object
            value : Person
            valuePreview : {
                description : Person
                overflow : false
                properties : [
                    [0] : {
                        name : firstName
                        type : string
                        value : John
                    }
                    [1] : {
                        name : lastName
                        type : string
                        value : Smith
                    }
                ]
                type : object
            }
        }
        [1] : {
            name : 1
            type : object
            value : Person
            valuePreview : {
                description : Person
                overflow : false
                properties : [
                    [0] : {
                        name : firstName
                        type : string
                        value : Jane
                    }
                    [1] : {
                        name : lastName
                        type : string
                        value : Doe
                    }
                ]
                type : object
            }
        }
        [2] : {
            name : 2
            type : object
            value : Person
            valuePreview : {
                description : Person
                overflow : false
                properties : [
                    [0] : {
                        name : firstName
                        type : string
                        value : Emily
                    }
                    [1] : {
                        name : lastName
                        type : string
                        value : Jones
                    }
                ]
                type : object
            }
        }
    ]
    subtype : array
    type : object
}
```

----------------------------------------

TITLE: Testing Logical or Comparison in If Condition - JavaScript
DESCRIPTION: Evaluates a logical or comparison expression within an if statement. The snippet demonstrates how the truthiness of the expression determines the execution path, returning true if the condition is met and false otherwise. Various conditions are tested.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-expected.txt#_snippet_5

LANGUAGE: javascript
CODE:
```
if (("b"==letterA)) return true; return false;
```

----------------------------------------

TITLE: System Error Message Utility Implementation
DESCRIPTION: Introduction of new utility function util.getSystemErrorMessage(err) for handling system error messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_21

LANGUAGE: JavaScript
CODE:
```
**src,lib**: introduce `util.getSystemErrorMessage(err)`
```

----------------------------------------

TITLE: Retrieving Resource Usage Information in Node.js (CommonJS)
DESCRIPTION: Demonstrates how to require and use the resourceUsage() method from the Node.js process module in CommonJS format. This method returns detailed information about the current process's resource consumption.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_82

LANGUAGE: javascript
CODE:
```
const { resourceUsage } = require('node:process');

console.log(resourceUsage());
/*
  Will output:
  {
    userCPUTime: 82872,
    systemCPUTime: 4143,
    maxRSS: 33164,
    sharedMemorySize: 0,
    unsharedDataSize: 0,
    unsharedStackSize: 0,
    minorPageFault: 2469,
    majorPageFault: 0,
    swappedOut: 0,
    fsRead: 0,
    fsWrite: 8,
    ipcSent: 0,
    ipcReceived: 0,
    signalsCount: 0,
    voluntaryContextSwitches: 79,
    involuntaryContextSwitches: 1
  }
*/
```

----------------------------------------

TITLE: Using ECDH in Node.js Crypto Module
DESCRIPTION: Example of creating and using ECDH (Elliptic Curve Diffie-Hellman) objects with the crypto module. The public key is now automatically computed when setting a private key, and setPublicKey() method is deprecated.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V5.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
const crypto = require('crypto');
const ecdh = crypto.createECDH(curve_name);
```

----------------------------------------

TITLE: WebSocket Error Handling with undici:websocket:socket_error Channel
DESCRIPTION: Demonstrates handling WebSocket socket errors through the diagnostics channel.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:websocket:socket_error').subscribe((error) => {
  console.log(error)
})
```

----------------------------------------

TITLE: DNS Lookup with Options in CommonJS
DESCRIPTION: Shows how to use the DNS lookup function with different option configurations in CommonJS format. Demonstrates IPv6 lookups with various hint flags and retrieving multiple addresses using the 'all' option.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_18

LANGUAGE: cjs
CODE:
```
const dns = require('node:dns');
const dnsPromises = dns.promises;
const options = {
  family: 6,
  hints: dns.ADDRCONFIG | dns.V4MAPPED,
};

dnsPromises.lookup('example.org', options).then((result) => {
  console.log('address: %j family: IPv%s', result.address, result.family);
  // address: "2606:2800:21f:cb07:6820:80da:af6b:8b2c" family: IPv6
});

// When options.all is true, the result will be an Array.
options.all = true;
dnsPromises.lookup('example.org', options).then((result) => {
  console.log('addresses: %j', result);
  // addresses: [{"address":"2606:2800:21f:cb07:6820:80da:af6b:8b2c","family":6}]
});
```

----------------------------------------

TITLE: Adding Custom Help Text in Commander.js
DESCRIPTION: Demonstrates how to add extra text to be displayed along with the built-in help using the addHelpText method.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
program
  .option('-f, --foo', 'enable some foo');

program.addHelpText('after', `

Example call:
  $ custom-help --help`);
```

----------------------------------------

TITLE: Retrieving Event Names from EventEmitter (MJS/CJS)
DESCRIPTION: Shows how to use the `emitter.eventNames()` method to get an array containing all the event names (as strings or Symbols) for which the emitter has registered listeners.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_22

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';

const myEE = new EventEmitter();
myEE.on('foo', () => {});
myEE.on('bar', () => {});

const sym = Symbol('symbol');
myEE.on(sym, () => {});

console.log(myEE.eventNames());
// Prints: [ 'foo', 'bar', Symbol(symbol) ]
```

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');

const myEE = new EventEmitter();
myEE.on('foo', () => {});
myEE.on('bar', () => {});

const sym = Symbol('symbol');
myEE.on(sym, () => {});

console.log(myEE.eventNames());
// Prints: [ 'foo', 'bar', Symbol(symbol) ]
```

----------------------------------------

TITLE: Defining a Class with Static Private Members in JavaScript
DESCRIPTION: A JavaScript class definition that includes various types of static private members: a field, a getter-only accessor, a setter-only accessor, an accessor with both getter and setter, and a method.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-private-class-member-static-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
class Klass {
  static #field = "string";
  static get #getterOnly() { return "getterOnly"; }
  static set #setterOnly(val) { this.#field = "setterOnlyCalled"; }
  static get #accessor() { return this.#field }
  static set #accessor(val) { this.#field = val; }
  static #method() { return "method"; }
}
const obj = new Klass();
debugger;
```

----------------------------------------

TITLE: Transferring Blob via MessageChannel - JavaScript
DESCRIPTION: Illustrates how a Blob object can be efficiently transferred between MessagePort instances using postMessage. The data is not copied until accessed via methods like arrayBuffer() or text(), allowing a single Blob instance to be sent to multiple destinations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_11

LANGUAGE: mjs
CODE:
```
import { Blob } from 'node:buffer';
import { setTimeout as delay } from 'node:timers/promises';

const blob = new Blob(['hello there']);

const mc1 = new MessageChannel();
const mc2 = new MessageChannel();

mc1.port1.onmessage = async ({ data }) => {
  console.log(await data.arrayBuffer());
  mc1.port1.close();
};

mc2.port1.onmessage = async ({ data }) => {
  await delay(1000);
  console.log(await data.arrayBuffer());
  mc2.port1.close();
};

mc1.port2.postMessage(blob);
mc2.port2.postMessage(blob);

// The Blob is still usable after posting.
blob.text().then(console.log);
```

LANGUAGE: cjs
CODE:
```
const { Blob } = require('node:buffer');
const { setTimeout: delay } = require('node:timers/promises');

const blob = new Blob(['hello there']);

const mc1 = new MessageChannel();
const mc2 = new MessageChannel();

mc1.port1.onmessage = async ({ data }) => {
  console.log(await data.arrayBuffer());
  mc1.port1.close();
};

mc2.port1.onmessage = async ({ data }) => {
  await delay(1000);
  console.log(await data.arrayBuffer());
  mc2.port1.close();
};

mc1.port2.postMessage(blob);
mc2.port2.postMessage(blob);

// The Blob is still usable after posting.
blob.text().then(console.log);
```

----------------------------------------

TITLE: Executing npm-explore Command in Bash
DESCRIPTION: This snippet shows the basic syntax for using the npm-explore command. It allows users to spawn a subshell in the directory of an installed package, optionally running a specified command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-explore.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm explore <pkg> [ -- <command>]
```

----------------------------------------

TITLE: Using util.types.isUint16Array to check for Uint16Array objects
DESCRIPTION: Demonstrates how to use util.types.isUint16Array() to check if a value is a built-in Uint16Array instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_100

LANGUAGE: javascript
CODE:
```
util.types.isUint16Array(new ArrayBuffer());  // Returns false
util.types.isUint16Array(new Uint16Array());  // Returns true
util.types.isUint16Array(new Float64Array());  // Returns false
```

----------------------------------------

TITLE: Checking for subscribers using hasSubscribers (ESM)
DESCRIPTION: Demonstrates how to check if a channel has active subscribers before publishing a message, which can be useful for performance-sensitive code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

if (diagnostics_channel.hasSubscribers('my-channel')) {
  // There are subscribers, prepare and publish message
}
```

----------------------------------------

TITLE: Checking if Value is Promise in Node-API
DESCRIPTION: Function to examine if a value is a native promise object created by the underlying engine.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_205

LANGUAGE: c
CODE:
```
napi_status napi_is_promise(napi_env env,
                            napi_value value,
                            bool* is_promise);
```

----------------------------------------

TITLE: Using rl.write() to Programmatically Interact with Node.js Readline
DESCRIPTION: Demonstrates the use of the `rl.write()` method on a `readline.Interface` instance (`rl`). The first call writes a string to the output as if typed by the user. The second call simulates pressing `Ctrl+U` (using the key object parameter with `ctrl: true` and `name: 'u'`) to delete the entire line just written. This method allows programmatic manipulation of the input line displayed to the user.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_13

LANGUAGE: js
CODE:
```
rl.write('Delete this!');
// Simulate Ctrl+U to delete the line written previously
rl.write(null, { ctrl: true, name: 'u' });
```

----------------------------------------

TITLE: Formatting with Custom Inspect Options using util.formatWithOptions() in Node.js
DESCRIPTION: Shows how to use util.formatWithOptions() function to format strings with custom inspect options. It demonstrates passing color options to the formatting function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
util.formatWithOptions({ colors: true }, 'See object %O', { foo: 42 });
// Returns 'See object { foo: 42 }', where `42` is colored as a number
// when printed to a terminal.
```

----------------------------------------

TITLE: Deleting a Property from an Object in C using Node-API
DESCRIPTION: This function attempts to delete a property from a JavaScript object. It takes the environment, the object to modify, the property key, and a pointer to store the result of the deletion. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_153

LANGUAGE: c
CODE:
```
napi_status napi_delete_property(napi_env env,
                                 napi_value object,
                                 napi_value key,
                                 bool* result);
```

----------------------------------------

TITLE: Detaching Child Process Using unref() in Node.js
DESCRIPTION: Demonstrates how to detach a child process from its parent process using unref(), allowing the parent to exit independently when there is no IPC channel.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_44

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const process = require('node:process');

const subprocess = spawn(process.argv[0], ['child_program.js'], {
  detached: true,
  stdio: 'ignore',
});

subprocess.unref();
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
import process from 'node:process';

const subprocess = spawn(process.argv[0], ['child_program.js'], {
  detached: true,
  stdio: 'ignore',
});

subprocess.unref();
```

----------------------------------------

TITLE: Setting DNS Servers using dnsPromises.setServers in Node.js
DESCRIPTION: This snippet demonstrates how to configure the IP addresses and ports of DNS servers to be used by the `dnsPromises` API for subsequent DNS resolutions. It accepts an array of strings, where each string is an RFC 5952 formatted address (IPv4 or IPv6). The IANA default port (53) can be omitted. An error is thrown if invalid addresses are provided or if called during an ongoing DNS query.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_26

LANGUAGE: js
CODE:
```
dnsPromises.setServers([
  '8.8.8.8',
  '[2001:4860:4860::8888]',
  '8.8.8.8:1053',
  '[2001:4860:4860::8888]:1053',
]);
```

----------------------------------------

TITLE: Decrypting Data Using update() and final() Methods in CommonJS
DESCRIPTION: Example demonstrating decryption using the update() and final() methods in CommonJS. It performs the same one-step decryption process as the ESM example but with require syntax for imports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_17

LANGUAGE: JavaScript
CODE:
```
const {
  scryptSync,
  createDecipheriv,
} = require('node:crypto');
const { Buffer } = require('node:buffer');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';
// Use the async `crypto.scrypt()` instead.
const key = scryptSync(password, 'salt', 24);
// The IV is usually passed along with the ciphertext.
const iv = Buffer.alloc(16, 0); // Initialization vector.

const decipher = createDecipheriv(algorithm, key, iv);

// Encrypted using same algorithm, key and iv.
const encrypted =
  'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';
let decrypted = decipher.update(encrypted, 'hex', 'utf8');
decrypted += decipher.final('utf8');
console.log(decrypted);
// Prints: some clear text data
```

----------------------------------------

TITLE: Adding SocketAddress.parse Method to Node.js Net Module
DESCRIPTION: A new static method parse is added to the SocketAddress class in the net module for parsing socket address strings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
SocketAddress.parse(addressString)
```

----------------------------------------

TITLE: Using traceCallback with diagnostics_channel in JavaScript (ES Modules)
DESCRIPTION: Example of using the traceCallback method to trace a function that accepts a callback in ES Modules. It traces synchronous execution and async callback execution, following Node's error-first callback pattern.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.traceCallback((arg1, callback) => {
  // Do something
  callback(null, 'result');
}, 1, {
  some: 'thing',
}, thisArg, arg1, callback);
```

----------------------------------------

TITLE: Handling Terminal Resize Events
DESCRIPTION: Demonstrates how to listen for terminal resize events and access the updated terminal dimensions (columns and rows).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tty.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
process.stdout.on('resize', () => {
  console.log('screen size has changed!');
  console.log(`${process.stdout.columns}x${process.stdout.rows}`);
});
```

----------------------------------------

TITLE: Running Node.js Module with Top-Level Await Import (Bash)
DESCRIPTION: Command-line instruction to execute an ES module file (`b.mjs`) that imports values from another module using top-level await. Node.js correctly handles the asynchronous dependency resolution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_19

LANGUAGE: bash
CODE:
```
node b.mjs # works
```

----------------------------------------

TITLE: Deleting NPM Config Values in Bash
DESCRIPTION: Command to delete specified configuration keys from all configuration files.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-config.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
npm config delete key [key ...]
```

----------------------------------------

TITLE: Promise Execution Tracking with Hooks Enabled (CommonJS)
DESCRIPTION: Demonstrates promise execution tracking with async hooks enabled in CommonJS format. Shows how proper async IDs are assigned to promises when tracking is enabled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
const { createHook, executionAsyncId, triggerAsyncId } = require('node:async_hooks');

createHook({ init() {} }).enable(); // forces PromiseHooks to be enabled.
Promise.resolve(1729).then(() => {
  console.log(`eid ${executionAsyncId()} tid ${triggerAsyncId()}`);
});
// produces:
// eid 7 tid 6
```

----------------------------------------

TITLE: Configuring Workspaces Option in NPM
DESCRIPTION: The workspaces option allows running commands in the context of all configured workspaces. It affects how commands like install, update, test, and publish behave in relation to workspaces.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_6

LANGUAGE: markdown
CODE:
```
#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces.

Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether. When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc.)
will link workspaces into the `node_modules` folder. - Commands that do
other things (test, exec, publish, etc.) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config.

This value is not exported to the environment for child processes.
```

----------------------------------------

TITLE: Implementing Asynchronous CSS Class Validator Plugin for PostCSS in JavaScript
DESCRIPTION: This snippet demonstrates an asynchronous implementation of a PostCSS plugin that validates CSS class names. It uses promises to process rules and reject if a class name contains underscores or dashes. The plugin walks through rules and processes selectors asynchronously.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_42

LANGUAGE: javascript
CODE:
```
let processor = (root) => {
    return new Promise((resolve, reject) => {
        root.walkClasses((classNode) => {
            if (/^(.*)[-_]/.test(classNode.value)) {
                let msg = "classes may not have underscores or dashes in them";
                reject(root.error(msg, {
                    index: classNode.sourceIndex + RegExp.$1.length + 1,
                    word: classNode.value
                }));
            }
        });
        resolve();
    });
};

const postcss = require("postcss");
const parser = require("postcss-selector-parser");
const selectorProcessor = parser(processor);
const plugin = postcss.plugin('classValidator', (options) => {
    return (root) => {
        let promises = [];
        root.walkRules(rule => {
            promises.push(selectorProcessor.process(rule));
        });
        return Promise.all(promises);
    };
});
postcss(plugin()).process(`
.foo-bar {
  color: red;
}
`.trim(), {from: 'test.css'}).catch((e) => console.error(e.toString()));

// CssSyntaxError: classValidator: ./test.css:1:5: classes may not have underscores or dashes in them
//
// > 1 | .foo-bar {
//     |     ^
//   2 |   color: red;
//   3 | }
```

----------------------------------------

TITLE: Resolving Real Path Synchronously in Node.js
DESCRIPTION: Demonstrates fs.realpathSync and fs.realpathSync.native for resolving the real path of a file or directory. Returns the resolved pathname.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_93

LANGUAGE: JavaScript
CODE:
```
fs.realpathSync(path[, options])
```

LANGUAGE: JavaScript
CODE:
```
fs.realpathSync.native(path[, options])
```

----------------------------------------

TITLE: Serving Files with HTTP/2 Server Push in Node.js
DESCRIPTION: This example demonstrates HTTP/2 server push functionality, allowing a server to proactively send resources to the client. It shows how to push multiple associated resources along with the main response.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/util/missingssl-internal.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const http2 = require('http2');
const fs = require('fs');
const path = require('path');

const options = {
  key: fs.readFileSync('server-key.pem'),
  cert: fs.readFileSync('server-cert.pem')
};

const server = http2.createSecureServer(options);

server.on('stream', (stream, headers) => {
  const requestPath = headers[':path'];
  
  if (requestPath === '/') {
    // Push CSS and JavaScript files with the main HTML
    stream.pushStream({ ':path': '/style.css' }, (pushStream) => {
      pushStream.respond({ ':status': 200, 'content-type': 'text/css' });
      fs.createReadStream(path.join(__dirname, 'style.css')).pipe(pushStream);
    });
    
    stream.pushStream({ ':path': '/script.js' }, (pushStream) => {
      pushStream.respond({ ':status': 200, 'content-type': 'text/javascript' });
      fs.createReadStream(path.join(__dirname, 'script.js')).pipe(pushStream);
    });
    
    // Send the main HTML
    stream.respond({ ':status': 200, 'content-type': 'text/html' });
    fs.createReadStream(path.join(__dirname, 'index.html')).pipe(stream);
  }
});

server.listen(8443);
```

----------------------------------------

TITLE: Performing Arithmetic Operations with Positive Infinity in JavaScript
DESCRIPTION: Illustrates multiplication, division, and subtraction involving positive `Infinity` in JavaScript. A positive number (derived from `values.someFloatString`) is multiplied by, divided by, or subtracted from `Infinity`. Multiplication results in `Infinity`, division results in `0`, and subtracting `Infinity` results in `-Infinity`. Tests include variations with explicit unary plus coercion (`+`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-transforms-expected.txt#2025-04-23_snippet_16

LANGUAGE: text
CODE:
```
PASS +values.someFloatString * values.infinity is values.someFloatString * values.infinity
PASS +values.someFloatString * values.infinity is Infinity
PASS values.someFloatString * +values.infinity is values.someFloatString * values.infinity
PASS values.someFloatString * +values.infinity is Infinity
PASS +values.someFloatString * +values.infinity is values.someFloatString * values.infinity
PASS +values.someFloatString * +values.infinity is Infinity
PASS +values.someFloatString / values.infinity is values.someFloatString / values.infinity
PASS +values.someFloatString / values.infinity is 0
PASS values.someFloatString / +values.infinity is values.someFloatString / values.infinity
PASS values.someFloatString / +values.infinity is 0
PASS +values.someFloatString / +values.infinity is values.someFloatString / values.infinity
PASS +values.someFloatString / +values.infinity is 0
PASS +values.someFloatString - values.infinity is values.someFloatString - values.infinity
PASS +values.someFloatString - values.infinity is -Infinity
PASS values.someFloatString - +values.infinity is values.someFloatString - values.infinity
PASS values.someFloatString - +values.infinity is -Infinity
PASS +values.someFloatString - +values.infinity is values.someFloatString - values.infinity
PASS +values.someFloatString - +values.infinity is -Infinity
```

----------------------------------------

TITLE: Connecting a Node.js net.Socket using an Options Object
DESCRIPTION: Initiates a connection asynchronously on a given socket using an options object. This method supports TCP connections (specifying `port`, `host`, `family`, `localAddress`, `keepAlive`, etc.) and IPC connections (specifying `path`). The 'connect' event is emitted on success, 'error' on failure. A `connectListener` can be provided for the 'connect' event. Primarily used for custom sockets or reconnecting after 'close'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
socket.connect(options[, connectListener])
```

----------------------------------------

TITLE: Key Wrapping Using subtle.wrapKey Method - JavaScript
DESCRIPTION: Method for exporting and encrypting cryptographic keys using various wrapping algorithms including RSA-OAEP, AES-CTR, AES-CBC, AES-GCM, and AES-KW. Takes format, key, wrapping key, and algorithm parameters as inputs.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
subtle.wrapKey(format, key, wrappingKey, wrapAlgo)
```

----------------------------------------

TITLE: Truncating a File with FileHandle.truncate in Node.js
DESCRIPTION: Asynchronously truncates the file associated with the FileHandle to a specified length (`len`). If the file is larger, it's shortened; if shorter, it's extended with null bytes. Defaults to truncating to 0 bytes. Negative `len` is treated as 0. Returns a Promise that fulfills with `undefined` upon success. Requires an open FileHandle obtained via `fs.promises.open`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_11

LANGUAGE: mjs
CODE:
```
import { open } from 'node:fs/promises';

let filehandle = null;
try {
  filehandle = await open('temp.txt', 'r+');
  await filehandle.truncate(4);
} finally {
  await filehandle?.close();
}
```

----------------------------------------

TITLE: Setting Command Description and Summary in Commander.js
DESCRIPTION: Demonstrates how to set the description and summary for a command, which appear in the help output.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_30

LANGUAGE: javascript
CODE:
```
program
  .command("duplicate")
  .summary("make a copy")
  .description(`Make a copy of the current project.
This may require additional disk space.
  `);
```

----------------------------------------

TITLE: Defining C++ Object Header for Node.js Addon
DESCRIPTION: This header file defines the MyObject class that inherits from node::ObjectWrap. It declares the necessary methods for initialization and JavaScript interface.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_22

LANGUAGE: cpp
CODE:
```
#ifndef MYOBJECT_H
#define MYOBJECT_H

#include <node.h>
#include <node_object_wrap.h>

namespace demo {

class MyObject : public node::ObjectWrap {
 public:
  static void Init(v8::Local<v8::Object> exports);

 private:
  explicit MyObject(double value = 0);
  ~MyObject();

  static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
  static void PlusOne(const v8::FunctionCallbackInfo<v8::Value>& args);

  double value_;
};

}  // namespace demo

#endif
```

----------------------------------------

TITLE: Using util.types.isArrayBuffer in JavaScript
DESCRIPTION: Shows how to use util.types.isArrayBuffer to check if a value is a built-in ArrayBuffer instance, excluding SharedArrayBuffer instances.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_62

LANGUAGE: javascript
CODE:
```
util.types.isArrayBuffer(new ArrayBuffer());  // Returns true
util.types.isArrayBuffer(new SharedArrayBuffer());  // Returns false
```

----------------------------------------

TITLE: Defining OpenSSL Error UNABLE_TO_GET_ISSUER_CERT_LOCALLY (Text)
DESCRIPTION: An OpenSSL error indicating that the issuer of a certificate is not present in the local list of trusted certificates.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_50

LANGUAGE: text
CODE:
```
UNABLE_TO_GET_ISSUER_CERT_LOCALLY
```

----------------------------------------

TITLE: Accessing Hardware Concurrency with navigator.hardwareConcurrency
DESCRIPTION: Shows how to use the navigator.hardwareConcurrency property to get the number of logical processors available to the current Node.js instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
console.log(`This process is running on ${navigator.hardwareConcurrency} logical processors`);
```

----------------------------------------

TITLE: Retrieving Unique HTTP Response Header Names in Node.js (JavaScript)
DESCRIPTION: Shows how to acquire a list of unique, currently set HTTP response headers with getHeaderNames in Node.js. Requires an instance of http.ServerResponse. This method returns all set header names in lowercase. Particularly useful for debugging or custom header management.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_32

LANGUAGE: js
CODE:
```
response.setHeader('Foo', 'bar');
response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headerNames = response.getHeaderNames();
// headerNames === ['foo', 'set-cookie']

```

----------------------------------------

TITLE: Multiple Mock Intercepts Example
DESCRIPTION: Demonstrates how to set up multiple mock intercepts for different endpoints.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')
mockPool.intercept({ path: '/foo' }).reply(200, 'foo')
mockPool.intercept({ path: '/hello'}).reply(200, 'hello')

const result1 = await request('http://localhost:3000/foo')

console.log('response received', result1.statusCode) // response received 200

for await (const data of result1.body) {
  console.log('data', data.toString('utf8')) // data foo
}

const result2 = await request('http://localhost:3000/hello')

console.log('response received', result2.statusCode) // response received 200

for await (const data of result2.body) {
  console.log('data', data.toString('utf8')) // data hello
}
```

----------------------------------------

TITLE: Custom Option Processing in Commander.js
DESCRIPTION: Shows how to implement custom processing functions for option arguments, including type coercion and value accumulation.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
function myParseInt(value, dummyPrevious) {
  const parsedValue = parseInt(value, 10);
  if (isNaN(parsedValue)) {
    throw new commander.InvalidArgumentError('Not a number.');
  }
  return parsedValue;
}

function increaseVerbosity(dummyValue, previous) {
  return previous + 1;
}

function collect(value, previous) {
  return previous.concat([value]);
}

function commaSeparatedList(value, dummyPrevious) {
  return value.split(',');
}

program
  .option('-f, --float <number>', 'float argument', parseFloat)
  .option('-i, --integer <number>', 'integer argument', myParseInt)
  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)
  .option('-c, --collect <value>', 'repeatable value', collect, [])
  .option('-l, --list <items>', 'comma separated list', commaSeparatedList);
```

----------------------------------------

TITLE: Example Structure of the process.release Object in Node.js
DESCRIPTION: This code shows an example of the object returned by `process.release` for a specific Node.js LTS release (v18.12.0, 'Hydrogen'). It includes properties like the release name ('node'), LTS codename, URLs for source and header tarballs, and potentially a libUrl for Windows builds, providing metadata about the current Node.js installation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_71

LANGUAGE: js
CODE:
```
{
  name: 'node',
  lts: 'Hydrogen',
  sourceUrl: 'https://nodejs.org/download/release/v18.12.0/node-v18.12.0.tar.gz',
  headersUrl: 'https://nodejs.org/download/release/v18.12.0/node-v18.12.0-headers.tar.gz',
  libUrl: 'https://nodejs.org/download/release/v18.12.0/win-x64/node.lib'
}
```

----------------------------------------

TITLE: Canceling rl.question with AbortController in Node.js
DESCRIPTION: Illustrates canceling an active `rl.question()` prompt using an `AbortController`. An `AbortSignal` is passed in the `options` object. Calling `ac.abort()` triggers the 'abort' event on the signal, allowing cleanup or notification, such as logging a timeout message. This requires Node.js v0.3.3 or later.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_24

LANGUAGE: js
CODE:
```
const ac = new AbortController();
const signal = ac.signal;

rl.question('What is your favorite food? ', { signal }, (answer) => {
  console.log(`Oh, so your favorite food is ${answer}`);
});

signal.addEventListener('abort', () => {
  console.log('The food question timed out');
}, { once: true });

setTimeout(() => ac.abort(), 10000);
```

----------------------------------------

TITLE: Handling the 'SIGINT' (Ctrl+C) Event in Node.js Readline
DESCRIPTION: Illustrates how to register a listener for the 'SIGINT' event, triggered by `Ctrl+C`. Instead of terminating, the listener uses `rl.question` to ask for confirmation. If the user confirms (e.g., enters 'y' or 'yes' matching the regex), `rl.pause()` is called to pause the input stream. This overrides the default `SIGINT` behavior which would normally emit 'pause' or terminate.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_11

LANGUAGE: js
CODE:
```
rl.on('SIGINT', () => {
  rl.question('Are you sure you want to exit? ', (answer) => {
    if (answer.match(/^y(es)?$/i)) rl.pause();
  });
});
```

----------------------------------------

TITLE: Header Precedence in Node.js Server
DESCRIPTION: Demonstrates header precedence when using setHeaders and writeHead methods.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_55

LANGUAGE: javascript
CODE:
```
// Returns content-type = text/plain
const server = http.createServer((req, res) => {
  const headers = new Headers({ 'Content-Type': 'text/html' });
  res.setHeaders(headers);
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('ok');
});
```

----------------------------------------

TITLE: Resolving Package Exports - PACKAGE_EXPORTS_RESOLVE Algorithm
DESCRIPTION: This algorithm resolves a subpath within a package's `exports` object, potentially handling the main export (`.`) or subpath exports (`./`). It validates the structure of the `exports` object and delegates the final target resolution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_24

LANGUAGE: Algorithm Specification (Node.js Module Resolution)
CODE:
```
PACKAGE_EXPORTS_RESOLVE(_packageURL_, _subpath_, _exports_, _conditions_)

Note: This function is directly invoked by the CommonJS resolution algorithm.

> 1. If _exports_ is an Object with both a key starting with _"."_ and a key not
>    starting with _"."_, throw an _Invalid Package Configuration_ error.
> 2. If _subpath_ is equal to _"."_, then
>    1. Let _mainExport_ be **undefined**.
>    2. If _exports_ is a String or Array, or an Object containing no keys
>       starting with _"."_, then
>       1. Set _mainExport_ to _exports_.
>    3. Otherwise if _exports_ is an Object containing a _"."_ property, then
>       1. Set _mainExport_ to _exports_[_"."_].
>    4. If _mainExport_ is not **undefined**, then
>       1. Let _resolved_ be the result of **PACKAGE_TARGET_RESOLVE**(
>          _packageURL_, _mainExport_, **null**, **false**, _conditions_).
>       2. If _resolved_ is not **null** or **undefined**, return _resolved_.
> 3. Otherwise, if _exports_ is an Object and all keys of _exports_ start with
>    _"."_, then
>    1. Assert: _subpath_ begins with _"./"_.
>    2. Let _resolved_ be the result of **PACKAGE_IMPORTS_EXPORTS_RESOLVE**(
>       _subpath_, _exports_, _packageURL_, **false**, _conditions_).
>    3. If _resolved_ is not **null** or **undefined**, return _resolved_.
> 4. Throw a _Package Path Not Exported_ error.
```

----------------------------------------

TITLE: Disabling Spelling Suggestions After Errors in Commander.js
DESCRIPTION: Shows how to disable the default behavior of suggesting correct spelling after an error for an unknown command or option.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
program.showSuggestionAfterError(false);
```

----------------------------------------

TITLE: Managing Per-Binding State using Realm::AddBindingData - Node.js C++
DESCRIPTION: Illustrates the process of creating a `BindingData` class inheriting from `BaseObject` for storing binding-specific state. It shows how to set a binding ID via `SET_BINDING_ID`, access the state using `Realm::GetBindingData` within a binding function (like a constructor), and initialize it using `Realm::AddBindingData` in the binding's initialization function. It also shows how to add the binding ID to `UNSERIALIZABLE_BINDING_TYPES` or `SERIALIZABLE_BINDING_TYPES` for snapshot support.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_12

LANGUAGE: cpp
CODE:
```
// In base_object_types.h, add the binding to either
// UNSERIALIZABLE_BINDING_TYPES or SERIALIZABLE_BINDING_TYPES.
// The second parameter is a descriptive name of the class, which is
// usually the fully-specified class name.

#define UNSERIALIZABLE_BINDING_TYPES(V)                                         \
  V(http_parser_binding_data, http_parser::BindingData)

// In the HTTP parser source code file:
class BindingData : public BaseObject {
 public:
  BindingData(Realm* realm, Local<Object> obj) : BaseObject(realm, obj) {}

  SET_BINDING_ID(http_parser_binding_data)

  std::vector<char> parser_buffer;
  bool parser_buffer_in_use = false;

  // ...
};

// Available for binding functions, e.g. the HTTP Parser constructor:
static void New(const FunctionCallbackInfo<Value>& args) {
  BindingData* binding_data = Realm::GetBindingData<BindingData>(args);
  new Parser(binding_data, args.This());
}

// ... because the initialization function told the Realm to store the
// BindingData object:
void InitializeHttpParser(Local<Object> target,
                          Local<Value> unused,
                          Local<Context> context,
                          void* priv) {
  Realm* realm = Realm::GetCurrent(context);
  BindingData* const binding_data = realm->AddBindingData<BindingData>(target);
  if (binding_data == nullptr) return;

  Local<FunctionTemplate> t = NewFunctionTemplate(realm->isolate(), Parser::New);
  ...
}
```

----------------------------------------

TITLE: Setting Timezone with TZ Environment Variable (console)
DESCRIPTION: This snippet demonstrates how to set the `TZ` environment variable before executing a Node.js command. It shows using `node -pe` to evaluate an inline JavaScript expression that creates a `Date` object, illustrating how the `TZ` variable affects the reported timezone. Node.js supports basic timezone IDs for this variable.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_38

LANGUAGE: console
CODE:
```
$ TZ=Europe/Dublin node -pe "new Date().toString()"
Wed May 12 2021 20:30:48 GMT+0100 (Irish Standard Time)
```

----------------------------------------

TITLE: setTime Does Not Trigger Existing Timers - node:test - MJS
DESCRIPTION: This snippet shows that calling `context.mock.timers.setTime()` updates the mocked `Date` object but does not trigger timers previously set with `setTimeout` or `setInterval`. Timers are only triggered by methods like `tick` or `runAll`. Requires `node:test`, `node:assert`, and enabled timer/Date mocking.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_60

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('runAll functions following the given order', (context) => {
  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
  const results = [];
  setTimeout(() => results.push(1), 9999);

  assert.deepStrictEqual(results, []);
  context.mock.timers.setTime(12000);
  assert.deepStrictEqual(results, []);
  // The date is advanced but the timers don't tick
  assert.strictEqual(Date.now(), 12000);
});
```

----------------------------------------

TITLE: Implementing a Basic Synchronous Completer Function for Readline in Node.js
DESCRIPTION: Provides an example of a synchronous `completer` function used for Tab autocompletion with the `readline` interface. It takes the current line input, filters a predefined list of completions based on the input, and returns an array containing the list of matching hits (or all completions if no match) and the original input substring used for matching.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_21

LANGUAGE: js
CODE:
```
function completer(line) {
  const completions = '.help .error .exit .quit .q'.split(' ');
  const hits = completions.filter((c) => c.startsWith(line));
  // Show all completions if none found
  return [hits.length ? hits : completions, line];
}
```

----------------------------------------

TITLE: Implementing Custom Number Squaring REPL in CommonJS
DESCRIPTION: Creates a custom REPL that squares input numbers using CommonJS modules. Includes error handling for non-numeric inputs and demonstrates custom evaluation function usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_15

LANGUAGE: cjs
CODE:
```
const repl = require('node:repl');

function byThePowerOfTwo(number) {
  return number * number;
}

function myEval(code, context, replResourceName, callback) {
  if (isNaN(code)) {
    callback(new Error(`${code.trim()} is not a number`));
  } else {
    callback(null, byThePowerOfTwo(code));
  }
}

repl.start({ prompt: 'Enter a number: ', eval: myEval });
```

----------------------------------------

TITLE: Aborting HTTP Requests with EventEmitter in Undici
DESCRIPTION: Example demonstrating how to abort a request using an EventEmitter as an abort controller. The example creates an EventEmitter instance that emits an 'abort' event to trigger request cancellation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import EventEmitter, { once } from 'events'

const server = createServer((request, response) => {
  response.end('Hello, World!')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)
const ee = new EventEmitter()

try {
  client.request({
    path: '/',
    method: 'GET',
    signal: ee
  })
} catch (error) {
  console.error(error) // should print an RequestAbortedError
  client.close()
  server.close()
}

ee.emit('abort')
```

----------------------------------------

TITLE: Logging TLS Key Material for Debugging
DESCRIPTION: This snippet demonstrates how to log TLS key material for debugging purposes using the keylog event of the HTTPS global agent.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
https.globalAgent.on('keylog', (line, tlsSocket) => {
  fs.appendFileSync('/tmp/ssl-keys.log', line, { mode: 0o600 });
});
```

----------------------------------------

TITLE: Triggering Mock Timers with runAll - node:test - CJS
DESCRIPTION: This snippet demonstrates how to use `context.mock.timers.runAll()` to immediately execute all pending mocked timers and advance the mocked `Date` object to the time of the furthest timer. It requires the `node:test` and `node:assert` modules and timer/Date mocking must be enabled. This example uses CJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_57

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('runAll functions following the given order', (context) => {
  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
  const results = [];
  setTimeout(() => results.push(1), 9999);

  // Notice that if both timers have the same timeout,
  // the order of execution is guaranteed
  setTimeout(() => results.push(3), 8888);
  setTimeout(() => results.push(2), 8888);

  assert.deepStrictEqual(results, []);

  context.mock.timers.runAll();
  assert.deepStrictEqual(results, [3, 2, 1]);
  // The Date object is also advanced to the furthest timer's time
  assert.strictEqual(Date.now(), 9999);
});
```

----------------------------------------

TITLE: Making Asynchronous Callbacks in Node-API (C)
DESCRIPTION: Function to call a JavaScript function from native code after returning from an async operation. It handles setting up the async context and running any scheduled microtasks before returning to C/C++.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_194

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_make_callback(napi_env env,
                                           napi_async_context async_context,
                                           napi_value recv,
                                           napi_value func,
                                           size_t argc,
                                           const napi_value* argv,
                                           napi_value* result);
```

----------------------------------------

TITLE: Checking TracingChannel Subscribers in JavaScript (CommonJS)
DESCRIPTION: Example of using the hasSubscribers property to check if any of the TracingChannel's individual channels have subscribers in CommonJS. This helps optimize code by only performing tracing operations when necessary.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_41

LANGUAGE: javascript
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');

const channels = diagnostics_channel.tracingChannel('my-channel');

if (channels.hasSubscribers) {
  // Do something
}
```

----------------------------------------

TITLE: Using Streams with TLS Connection in Node.js
DESCRIPTION: Implementation showing how to use regular streams as an underlying socket for TLS connections using tls.connect()
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_IOJS.md#2025-04-23_snippet_26

LANGUAGE: javascript
CODE:
```
const tls = require('tls');
const stream = getStreamSomehow();
const tlsConnection = tls.connect({
  socket: stream,
  // other tls options
});
```

----------------------------------------

TITLE: Documenting License Header for V8 and Apple Sources - Shell
DESCRIPTION: This shell-style commented license header provides legal terms for redistribution and use of the code. It outlines warranty disclaimers, liability limitations, and redistribution requirements. No code execution is present; only licensing text, intended for inclusion at the top of source code files to inform users of legal obligations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-rshift-by-zero-eliminate-valuetoint32-expected.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
# Copyright 2013 the V8 project authors. All rights reserved.\n# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# 1.  Redistributions of source code must retain the above copyright\n#     notice, this list of conditions and the following disclaimer.\n# 2.  Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY\n# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n
```

----------------------------------------

TITLE: HTTP/2 Server Handshake Implementation
DESCRIPTION: Implements server handshake utility for HTTP/2 connections, allowing customization of settings and improving compatibility.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
**(SEMVER-MINOR)** **http2**: add server handshake utility
```

----------------------------------------

TITLE: Configuring and Building OpenSSL with MinGW (MSYS2/Linux/Cygwin) - Shell
DESCRIPTION: These commands are used for configuring and compiling OpenSSL on Windows using MinGW in an MSYS2 or equivalent shell. They require MSYS2, compatible MinGW compilers, Perl (5.10.0+), and GNU 'make'. Configuration is platform-specific, involving arguments such as 'mingw', 'mingw64', or a default architecture, and may also include '--cross-compile-prefix' when cross-compiling from Linux or Cygwin. Inputs include compiler prefixes and target architectures. Output is a set of native OpenSSL binaries, not dependent on the build environment at runtime.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/NOTES-WINDOWS.md#2025-04-23_snippet_3

LANGUAGE: sh
CODE:
```
sh
./Configure mingw ...
./Configure mingw64 ...
./Configure ...
./Configure mingw --cross-compile-prefix=i686-w64-mingw32- ...
./Configure mingw64 --cross-compile-prefix=x86_64-w64-mingw32- ...

```

----------------------------------------

TITLE: Testing Unicode RegExp Character Classes in JavaScript
DESCRIPTION: This snippet demonstrates a series of RegExp tests using Unicode characters. It checks the behavior of character classes like \s (whitespace), \S (non-whitespace), \w (word characters), \W (non-word characters), \d (digits), and \D (non-digits) with Unicode strings.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/regexp-negative-special-characters-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS "\s", " \t\f\v\r\n".
PASS "\S", "Проверка".
PASS "\s", "Проверка".
PASS "[\s]", "Проверка".
PASS "[\S]", "Проверка".
PASS "[^\s]", "Проверка".
PASS "[^\S]", "Проверка".
PASS "[\s\S]*", "\u2002Проверка\r\n\u00a0".
PASS "\S\S", "уф".
PASS "\S{2}", "уф".
PASS "\w", "Проверка".
PASS "\W", "Проверка".
PASS "[\w]", "Проверка".
PASS "[\W]", "Проверка".
PASS "[^\w]", "Проверка".
PASS "[^\W]", "Проверка".
PASS "\W\W", "уф".
PASS "\W{2}", "уф".
PASS "\d", "Проверка".
PASS "\D", "Проверка".
PASS "[\d]", "Проверка".
PASS "[\D]", "Проверка".
PASS "[^\d]", "Проверка".
PASS "[^\D]", "Проверка".
PASS "\D\D", "уф".
PASS "\D{2}", "уф".
PASS "[\S\d]", "Проверка123".
PASS "[\d\S]", "Проверка123".
PASS "[^\S\d]", "Проверка123".
PASS "[^\d\S]", "Проверка123".
PASS "[ \S]", " Проверка ".
PASS "[\S ]", " Проверка ".
PASS "[ф \S]", " Проверка ".
PASS "[\Sф ]", " Проверка ".
PASS "[^р\S]", " Проверка ".
PASS "[^\Sр]", " Проверка ".
PASS "[^р\s]", " Проверка ".
PASS "[^\sр]", " Проверка ".
PASS "[ф \s\S]", "Проверка \r\n".
PASS "[\S\sф ]", "Проверка \r\n".
PASS "[^z]", "Проверка \r\n".
PASS "[^ф]", "Проверка \r\n".
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Invoking JavaScript Callbacks from C++ Addons (C++)
DESCRIPTION: Implements a C++ Node.js addon that receives a JavaScript callback function, then synchronously calls it from C++ with a specific string argument ('hello world'). Uses V8 context and type casting for callback invocation. The addon completely overwrites module.exports to expose just the callback-invoking function; requires correct argument checking for production use.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_15

LANGUAGE: cpp
CODE:
```
// addon.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Null;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid RunCallback(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n  Local<Function> cb = Local<Function>::Cast(args[0]);\n  const unsigned argc = 1;\n  Local<Value> argv[argc] = {\n      String::NewFromUtf8(isolate,\n                          \"hello world\").ToLocalChecked() };\n  cb->Call(context, Null(isolate), argc, argv).ToLocalChecked();\n}\n\nvoid Init(Local<Object> exports, Local<Object> module) {\n  NODE_SET_METHOD(module, \"exports\", RunCallback);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\n
```

----------------------------------------

TITLE: Generating HMAC Using Node.js Crypto (ESM)
DESCRIPTION: Example showing how to generate an HMAC (Hash-based Message Authentication Code) of a file using crypto.createHmac in ESM format. Uses SHA256 algorithm with a secret key.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_62

LANGUAGE: javascript
CODE:
```
import {
  createReadStream,
} from 'node:fs';
import { argv } from 'node:process';
const {
  createHmac,
} = await import('node:crypto');

const filename = argv[2];

const hmac = createHmac('sha256', 'a secret');

const input = createReadStream(filename);
input.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = input.read();
  if (data)
    hmac.update(data);
  else {
    console.log(`${hmac.digest('hex')} ${filename}`);
  }
});
```

----------------------------------------

TITLE: Including Non-ABI Stable Node.js C++ Headers
DESCRIPTION: Lists the `#include` directives for Node.js C++ headers (`node.h`, `node_buffer.h`, etc.) that do *not* guarantee ABI stability across different Node.js major versions. Using these APIs can lead to addons requiring recompilation for new Node.js releases and should be avoided if ABI stability is desired.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_2

LANGUAGE: cpp
CODE:
```
#include <node.h>
#include <node_buffer.h>
#include <node_version.h>
#include <node_object_wrap.h>
```

----------------------------------------

TITLE: Testing Identifier Classification in JavaScript
DESCRIPTION: This code snippet demonstrates the usage of a classifyIdentifier function to test various strings against ES5 keyword and reserved word specifications. It includes tests for regular identifiers, keywords, and strict mode reserved words.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/keywords-and-reserved_words-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS classifyIdentifier("x") is "identifier"
PASS classifyIdentifier("id") is "identifier"
PASS classifyIdentifier("identifier") is "identifier"
PASS classifyIdentifier("keyword") is "identifier"
PASS classifyIdentifier("strict") is "identifier"
PASS classifyIdentifier("use") is "identifier"
PASS classifyIdentifier("abstract") is "identifier"
PASS classifyIdentifier("boolean") is "identifier"
PASS classifyIdentifier("byte") is "identifier"
PASS classifyIdentifier("char") is "identifier"
PASS classifyIdentifier("double") is "identifier"
PASS classifyIdentifier("final") is "identifier"
PASS classifyIdentifier("float") is "identifier"
PASS classifyIdentifier("goto") is "identifier"
PASS classifyIdentifier("int") is "identifier"
PASS classifyIdentifier("long") is "identifier"
PASS classifyIdentifier("native") is "identifier"
PASS classifyIdentifier("short") is "identifier"
PASS classifyIdentifier("synchronized") is "identifier"
PASS classifyIdentifier("throws") is "identifier"
PASS classifyIdentifier("transient") is "identifier"
PASS classifyIdentifier("volatile") is "identifier"
PASS classifyIdentifier("break") is "keyword"
PASS classifyIdentifier("case") is "keyword"
PASS classifyIdentifier("catch") is "keyword"
PASS classifyIdentifier("continue") is "keyword"
PASS classifyIdentifier("debugger") is "keyword"
PASS classifyIdentifier("default") is "keyword"
PASS classifyIdentifier("delete") is "keyword"
PASS classifyIdentifier("do") is "keyword"
PASS classifyIdentifier("else") is "keyword"
PASS classifyIdentifier("finally") is "keyword"
PASS classifyIdentifier("for") is "keyword"
PASS classifyIdentifier("function") is "keyword"
PASS classifyIdentifier("if") is "keyword"
PASS classifyIdentifier("in") is "keyword"
PASS classifyIdentifier("instanceof") is "keyword"
PASS classifyIdentifier("new") is "keyword"
PASS classifyIdentifier("return") is "keyword"
PASS classifyIdentifier("switch") is "keyword"
PASS classifyIdentifier("this") is "keyword"
PASS classifyIdentifier("throw") is "keyword"
PASS classifyIdentifier("try") is "keyword"
PASS classifyIdentifier("typeof") is "keyword"
PASS classifyIdentifier("var") is "keyword"
PASS classifyIdentifier("void") is "keyword"
PASS classifyIdentifier("while") is "keyword"
PASS classifyIdentifier("with") is "keyword"
PASS classifyIdentifier("class") is "keyword"
PASS classifyIdentifier("const") is "keyword"
PASS classifyIdentifier("enum") is "keyword"
PASS classifyIdentifier("export") is "keyword"
PASS classifyIdentifier("extends") is "keyword"
PASS classifyIdentifier("import") is "keyword"
PASS classifyIdentifier("super") is "keyword"
PASS classifyIdentifier("implements") is "strict"
PASS classifyIdentifier("interface") is "strict"
PASS classifyIdentifier("let") is "strict"
PASS classifyIdentifier("package") is "strict"
PASS classifyIdentifier("private") is "strict"
PASS classifyIdentifier("protected") is "strict"
PASS classifyIdentifier("public") is "strict"
PASS classifyIdentifier("static") is "strict"
PASS classifyIdentifier("yield") is "strict"
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Extending Acorn Parser with Plugins
DESCRIPTION: Example demonstrating how to extend Acorn parser with plugins (JSX in this case).
SOURCE: https://github.com/nodejs/node/blob/main/deps/acorn/acorn/README.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
var acorn = require("acorn");
var jsx = require("acorn-jsx");
var JSXParser = acorn.Parser.extend(jsx());
JSXParser.parse("foo(<bar/>)", {ecmaVersion: 2020});
```

----------------------------------------

TITLE: Combining npm view Commands
DESCRIPTION: Demonstrates a more complex use case of npm view, combining multiple commands to view information about a dependency's specific version.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-view.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm view opts@$(npm view ronn dependencies.opts)
```

----------------------------------------

TITLE: Closing Escapable Handle Scope in Node-API (C)
DESCRIPTION: Function to close a handle scope that was previously created. Scopes must be closed in reverse order of creation. Can be called even with pending JavaScript exceptions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_52

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status
    napi_close_escapable_handle_scope(napi_env env,
                                      napi_handle_scope scope);
```

----------------------------------------

TITLE: Scoped Package Initialization in Bash
DESCRIPTION: Example showing how to initialize a new scoped package using npm init with the --scope flag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-adduser.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
# accept all defaults, and create a package named "@foo/whatever",
# instead of just named "whatever"
npm init --scope=@foo --yes
```

----------------------------------------

TITLE: Testing 'do-while', 'while', and 'if' Loop Statements - Node.js - JavaScript
DESCRIPTION: These snippets test the proper parsing and nesting of JavaScript loop constructs ('do-while', 'while') and 'if' statements, including correct block and single-line statement handling. They explore interactions such as ambiguous syntax, missing parentheses or braces, and placement within functions. Inputs and outputs are code strings analyzed for grammatical correctness by a JS parser.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/parser-syntax-check-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
"while (a() - new b) ;"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { while (a() - new b) ; }"
```

LANGUAGE: JavaScript
CODE:
```
"while a {}"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { while a {} }"
```

LANGUAGE: JavaScript
CODE:
```
"do ; while(0) i++"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { do ; while(0) i++ }"
```

LANGUAGE: JavaScript
CODE:
```
"do if (a) x; else y; while(z)"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { do if (a) x; else y; while(z) }"
```

LANGUAGE: JavaScript
CODE:
```
"do g; while 4"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { do g; while 4 }"
```

LANGUAGE: JavaScript
CODE:
```
"do g; while ((4)"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { do g; while ((4) }"
```

LANGUAGE: JavaScript
CODE:
```
"{ { do do do ; while(0) while(0) while(0) } }"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { { { do do do ; while(0) while(0) while(0) } } }"
```

LANGUAGE: JavaScript
CODE:
```
"do while (0) if (a) {} else y; while(0)"
```

LANGUAGE: JavaScript
CODE:
```
"function f() { do while (0) if (a) {} else y; while(0) }"
```

----------------------------------------

TITLE: Synchronous CoffeeScript transpilation hooks
DESCRIPTION: A synchronous version of the CoffeeScript transpilation hooks that performs the same operations but uses synchronous file operations and registers via registerHooks().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_40

LANGUAGE: javascript
CODE:
```
// coffeescript-sync-hooks.mjs
import { readFileSync } from 'node:fs';
import { registerHooks, findPackageJSON } from 'node:module';
import coffeescript from 'coffeescript';

const extensionsRegex = /\.(coffee|litcoffee|coffee\.md)$/;

function load(url, context, nextLoad) {
  if (extensionsRegex.test(url)) {
    const { source: rawSource } = nextLoad(url, { ...context, format: 'coffee' });
    const transformedSource = coffeescript.compile(rawSource.toString(), url);

    return {
      format: getPackageType(url),
      shortCircuit: true,
      source: transformedSource,
    };
  }

  return nextLoad(url, context);
}

function getPackageType(url) {
  const pJson = findPackageJSON(url);
  if (!pJson) {
    return undefined;
  }
  try {
    const file = readFileSync(pJson, 'utf-8');
    return JSON.parse(file)?.type;
  } catch {
    return undefined;
  }
}

registerHooks({ load });
```

----------------------------------------

TITLE: Listing Supported Elliptic Curves in Node.js Crypto Module
DESCRIPTION: The crypto.getCurves function returns an array of names of supported elliptic curves.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_74

LANGUAGE: JavaScript
CODE:
```
const {
  getCurves,
} = await import('node:crypto');

console.log(getCurves()); // ['Oakley-EC2N-3', 'Oakley-EC2N-4', ...]
```

LANGUAGE: JavaScript
CODE:
```
const {
  getCurves,
} = require('node:crypto');

console.log(getCurves()); // ['Oakley-EC2N-3', 'Oakley-EC2N-4', ...]
```

----------------------------------------

TITLE: Enabling AsyncHook in Node.js (CommonJS)
DESCRIPTION: Shows how to create and enable an AsyncHook instance using CommonJS syntax in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const async_hooks = require('node:async_hooks');

const hook = async_hooks.createHook(callbacks).enable();
```

----------------------------------------

TITLE: Checking Module Namespace Object in JavaScript
DESCRIPTION: Illustrates the use of util.types.isModuleNamespaceObject() to check if a value is an instance of a Module Namespace Object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_82

LANGUAGE: javascript
CODE:
```
import * as ns from './a.js';

util.types.isModuleNamespaceObject(ns);  // Returns true
```

----------------------------------------

TITLE: Creating a Named Pipe Server on Windows
DESCRIPTION: Illustrates how to create a server listening on a named pipe in Windows, using proper escaping for the path.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
net.createServer().listen(
  path.join('\\\\?\\pipe', process.cwd(), 'myctl'));
```

----------------------------------------

TITLE: Using notStrictEqual in CommonJS
DESCRIPTION: Demonstrates how to use assert.notStrictEqual() method in CommonJS format to test strict inequality between values using Object.is().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_37

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

assert.notStrictEqual(1, 2);
// OK

assert.notStrictEqual(1, 1);
// AssertionError [ERR_ASSERTION]: Expected "actual" to be strictly unequal to:
//
// 1

assert.notStrictEqual(1, '1');
// OK
```

----------------------------------------

TITLE: HTTP Response Vary Header Example
DESCRIPTION: Example showing the structure of a Vary header response and its corresponding JavaScript object representation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/CacheStore.md#2025-04-23_snippet_0

LANGUAGE: http
CODE:
```
Vary: content-encoding, accepts
content-encoding: utf8
accepts: application/json
```

----------------------------------------

TITLE: Async Generator Function Security Issues in Node.js
DESCRIPTION: Shows how user code can override the next method of async generators, causing them to never resolve and preventing finally blocks from executing when using for await...of loops.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/primordials.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
// User-land
Object.getPrototypeOf(async function* () {}).prototype.next = function next() {
  return new Promise(() => {});
};

// Core
async function* someGenerator() {
  yield 1;
  yield 2;
  yield 3;
}
let finallyBlockExecuted = false;
async () => {
  try {
    for await (const nb of someGenerator()) {
      // some code;
    }
  } finally {
    finallyBlockExecuted = true;
  }
};
process.on('exit', () => console.log(finallyBlockExecuted)); // false
```

----------------------------------------

TITLE: Testing JSON Stringify with Objects Having Getters/Setters and Deleting Properties - JavaScript
DESCRIPTION: These tests evaluate JSON.stringify's interaction with JavaScript objects that use property accessors (getters), some of which modify or delete properties during serialization. They check whether accessor side-effects (like incrementing a counter or deleting keys) are properly reflected, and if only string keys are considered. These cases involve JavaScript object property mechanics and getter/setter behaviors.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/run-json-stringify-expected.txt#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({get Foo() { return "bar"; }});
    }
```

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({get Foo() { this.foo="wibble"; return "bar"; }});
    }
```

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        var count = 0;
        jsonObject.stringify({get Foo() { count++; return "bar"; }});
        return count;
    }
```

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        var count = 0;
        return jsonObject.stringify({get Foo() { count++; delete this.bar; return "bar"; }, bar: "wibble"});
    }
```

----------------------------------------

TITLE: Monitoring Response Headers with undici:request:headers Channel
DESCRIPTION: Illustrates how to track response headers reception and access status code and header information.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:request:headers').subscribe(({ request, response }) => {
  // request is the same object undici:request:create
  console.log('statusCode', response.statusCode)
  console.log(response.statusText)
  // response.headers are buffers.
  console.log(response.headers.map((x) => x.toString()))
})
```

----------------------------------------

TITLE: Create Hook Example - CommonJS
DESCRIPTION: Example of creating an async hook with init and destroy callbacks using CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_4

LANGUAGE: cjs
CODE:
```
const async_hooks = require('node:async_hooks');

const asyncHook = async_hooks.createHook({
  init(asyncId, type, triggerAsyncId, resource) { },
  destroy(asyncId) { },
});
```

----------------------------------------

TITLE: Consuming Console Log Events in Node.js
DESCRIPTION: Example of how to subscribe to and handle console.log events using the diagnostics_channel module. This snippet demonstrates the structure of the 'args' array passed to the event handler.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_42

LANGUAGE: javascript
CODE:
```
console.log()
```

----------------------------------------

TITLE: Handling the 'SIGTSTP' (Ctrl+Z) Event in Node.js Readline
DESCRIPTION: Shows how to attach a listener to the 'SIGTSTP' event, which is typically triggered by `Ctrl+Z`. By registering a listener, the default behavior (suspending the process and sending it to the background) is overridden. The example listener simply logs a message. Note: This event is not supported on Windows.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_12

LANGUAGE: js
CODE:
```
rl.on('SIGTSTP', () => {
  // This will override SIGTSTP and prevent the program from going to the
  // background.
  console.log('Caught SIGTSTP.');
});
```

----------------------------------------

TITLE: Granting Full File System Access with Node.js Permissions
DESCRIPTION: Example command demonstrating how to run a Node.js script (`index.js`) with the permission model enabled (`--permission`) while granting full read (`--allow-fs-read=*`) and write (`--allow-fs-write=*`) access to the entire file system. Using the wildcard `*` bypasses specific path restrictions for file system operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/permissions.md#2025-04-23_snippet_2

LANGUAGE: console
CODE:
```
$ node --permission --allow-fs-read=* --allow-fs-write=* index.js
Hello world!
```

----------------------------------------

TITLE: Safe Array Concatenation in JavaScript
DESCRIPTION: This snippet shows how Array.prototype.concat can be unsafe due to the @@isConcatSpreadable symbol and provides safer alternatives for concatenating arrays.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/primordials.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
{
  const array = [];
  ArrayPrototypeConcat(array);
}
```

LANGUAGE: javascript
CODE:
```
// User-land
Object.defineProperty(Object.prototype, Symbol.isConcatSpreadable, {
  get() {
    this.push(5);
    return true;
  },
});

// Core
{
  const a = [1, 2];
  const b = [3, 4];
  console.log(ArrayPrototypeConcat(a, b)); // [1, 2, 5, 3, 4, 5]
}
{
  const a = [1, 2];
  const b = [3, 4];
  const concatArray = [];
  ArrayPrototypePush(concatArray, ...new SafeArrayIterator(a),
                     ...new SafeArrayIterator(b));
  console.log(concatArray); // [1, 2, 3, 4]

  ArrayPrototypePushApply(a, b);
  console.log(a); // [1, 2, 3, 4]
}
```

----------------------------------------

TITLE: Using DONT_CONTEXTIFY constant with VM contexts
DESCRIPTION: This example demonstrates using vm.constants.DONT_CONTEXTIFY to create a context with an ordinary global object. This allows freezing the global object and changes the behavior of global variable assignment in the context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
const vm = require('node:vm');

// Use vm.constants.DONT_CONTEXTIFY to freeze the global object.
const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);
vm.runInContext('Object.freeze(globalThis);', context);
try {
  vm.runInContext('bar = 1; bar;', context);
} catch (e) {
  console.log(e); // Uncaught ReferenceError: bar is not defined
}
```

----------------------------------------

TITLE: Complex Shell Process Management Example
DESCRIPTION: Shows how child processes behave when running in a shell context, particularly focusing on process termination behavior on Linux systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');

const subprocess = spawn(
  'sh',
  [
    '-c',
    `node -e "setInterval(() => {
      console.log(process.pid, 'is alive')
    }, 500);"`
  ], {
    stdio: ['inherit', 'inherit', 'inherit']
  }
);

setTimeout(() => {
  subprocess.kill(); // Does not terminate the Node.js process in the shell.
}, 2000);
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';

const subprocess = spawn(
  'sh',
  [
    '-c',
    `node -e "setInterval(() => {
      console.log(process.pid, 'is alive')
    }, 500);"`
  ], {
    stdio: ['inherit', 'inherit', 'inherit']
  }
);

setTimeout(() => {
  subprocess.kill(); // Does not terminate the Node.js process in the shell.
}, 2000);
```

----------------------------------------

TITLE: Handling ALTSVC event on ClientHttp2Session
DESCRIPTION: Explains how to listen for the `'altsvc'` event on a Node.js HTTP/2 client session. This event is emitted when the client receives an ALTSVC frame from the server, providing alternative service information, origin, and stream ID. Requires an active `ClientHttp2Session`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
import { connect } from 'node:http2';
const client = connect('https://example.org');

client.on('altsvc', (alt, origin, streamId) => {
  console.log(alt);
  console.log(origin);
  console.log(streamId);
});
```

LANGUAGE: JavaScript
CODE:
```
const http2 = require('node:http2');
const client = http2.connect('https://example.org');

client.on('altsvc', (alt, origin, streamId) => {
  console.log(alt);
  console.log(origin);
  console.log(streamId);
});
```

----------------------------------------

TITLE: Sending Early Hints using writeEarlyHints - Node.js HTTP/2 JavaScript
DESCRIPTION: Illustrates how to use the `response.writeEarlyHints(hints)` method to send a `103 Early Hints` status with specified headers, typically 'Link'. This allows the client's user agent to preload or preconnect to resources before the final response, potentially improving perceived performance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_70

LANGUAGE: javascript
CODE:
```
const earlyHintsLink = '</styles.css>; rel=preload; as=style';
response.writeEarlyHints({
  'link': earlyHintsLink,
});
```

LANGUAGE: javascript
CODE:
```
const earlyHintsLinks = [
  '</styles.css>; rel=preload; as=style',
  '</scripts.js>; rel=preload; as=script',
];
response.writeEarlyHints({
  'link': earlyHintsLinks,
});
```

----------------------------------------

TITLE: Creating an npm Team (Bash)
DESCRIPTION: This command demonstrates how to create a new team named `newteam` within the `@org` organization. The command requires the fully qualified team name `@org:newteam` and may require an OTP code if two-factor authentication is enabled.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-team.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm team create @org:newteam
```

----------------------------------------

TITLE: Configuring Stdio Options for Child Process (CJS)
DESCRIPTION: This CommonJS snippet illustrates different ways to configure the `stdio` option when spawning a child process. The first example uses `stdio: 'inherit'` to make the child use the parent's stdio streams. The second example configures pipes for stdin and stdout but shares the parent's stderr with the child (`['pipe', 'pipe', process.stderr]`). The third example creates standard pipes for stdin (fd 0) and an additional pipe for fd 4, ignoring fds 1, 2, and 3 (`['pipe', null, null, null, 'pipe']`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_29

LANGUAGE: cjs
CODE:
```
const { spawn } = require('node:child_process');
const process = require('node:process');

// Child will use parent's stdios.
spawn('prg', [], { stdio: 'inherit' });

// Spawn child sharing only stderr.
spawn('prg', [], { stdio: ['pipe', 'pipe', process.stderr] });

// Open an extra fd=4, to interact with programs presenting a
// startd-style interface.
spawn('prg', [], { stdio: ['pipe', null, null, null, 'pipe'] });
```

----------------------------------------

TITLE: Globally Enabling Promise Rejection Capturing for EventEmitter (MJS/CJS)
DESCRIPTION: Demonstrates how to globally enable promise rejection capturing for all new `EventEmitter` instances by setting `EventEmitter.captureRejections = true` (MJS) or `events.captureRejections = true` (CJS). Subsequent emitters will automatically capture rejections from async handlers and route them to the 'error' event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_18

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';

EventEmitter.captureRejections = true;
const ee1 = new EventEmitter();
ee1.on('something', async (value) => {
  throw new Error('kaboom');
});

ee1.on('error', console.log);
```

LANGUAGE: cjs
CODE:
```
const events = require('node:events');
events.captureRejections = true;
const ee1 = new events.EventEmitter();
ee1.on('something', async (value) => {
  throw new Error('kaboom');
});

ee1.on('error', console.log);
```

----------------------------------------

TITLE: Adding a Method to Node-API Module Exports
DESCRIPTION: Example of how to add a method named 'hello' to the exports object of a Node-API module during initialization.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_65

LANGUAGE: c
CODE:
```
napi_value Init(napi_env env, napi_value exports) {
  napi_status status;
  napi_property_descriptor desc = {
    "hello",
    NULL,
    Method,
    NULL,
    NULL,
    NULL,
    napi_writable | napi_enumerable | napi_configurable,
    NULL
  };
  status = napi_define_properties(env, exports, 1, &desc);
  if (status != napi_ok) return NULL;
  return exports;
}
```

----------------------------------------

TITLE: Setting Command Name in Commander.js
DESCRIPTION: Demonstrates how to specify the program name using the name() method or in the Command constructor.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
program.name('pizza');
const pm = new Command('pm');
```

----------------------------------------

TITLE: Using AsyncResource Worker Pool Example (ESM)
DESCRIPTION: Example demonstrating how to use the `WorkerPool` class (ESM version). It initializes the pool with a number of threads equal to available CPU cores, submits 10 simple addition tasks, logs the results of each task's callback, and closes the pool once all tasks are complete.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_14

LANGUAGE: mjs
CODE:
```
import WorkerPool from './worker_pool.js';
import os from 'node:os';

const pool = new WorkerPool(os.availableParallelism());

let finished = 0;
for (let i = 0; i < 10; i++) {
  pool.runTask({ a: 42, b: 100 }, (err, result) => {
    console.log(i, err, result);
    if (++finished === 10)
      pool.close();
  });
}
```

----------------------------------------

TITLE: Example Return Value of tlsSocket.getCipher in JSON
DESCRIPTION: Illustrates the structure of the JSON object returned by `tlsSocket.getCipher()`. This object provides details about the negotiated cipher suite, including the OpenSSL name (`name`), the IETF standard name (`standardName`), and the minimum TLS protocol version supported by the cipher (`version`). This example shows a TLSv1.2 connection using the AES256-SHA cipher.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_15

LANGUAGE: json
CODE:
```
```json
{
    "name": "AES256-SHA",
    "standardName": "TLS_RSA_WITH_AES_256_CBC_SHA",
    "version": "SSLv3"
}
```
```

----------------------------------------

TITLE: Accessing Symbol-Keyed Properties in JavaScript
DESCRIPTION: This code snippet shows how to access symbol-keyed properties of an object, demonstrating that while symbols provide a level of privacy, they are not fully private as the data can still be accessed using Object.getOwnPropertySymbols().
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/using-symbols.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
for (const s of Object.getOwnPropertySymbols(obj)) {
  const desc = s.toString().replace(/Symbol\((.*?)\)$/, '$1');
  if (desc === 'kField') {
    console.log(obj[s]); // 'something'
  }
}
```

----------------------------------------

TITLE: Configuring File-based Require in SEA Main Script
DESCRIPTION: Shows how to enable file-based require functionality in the injected main script of a Single Executable Application by creating a new require function using createRequire from the node:module package.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
const { createRequire } = require('node:module');
require = createRequire(__filename);
```

----------------------------------------

TITLE: Basic DNS Interceptor Configuration in Undici
DESCRIPTION: Shows how to set up and use the DNS interceptor in Undici for caching DNS lookups. It demonstrates the basic usage with custom options.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
const { Client, interceptors } = require("undici");
const { dns } = interceptors;

const client = new Agent().compose([
  dns({ ...opts })
])

const response = await client.request({
  origin: `http://localhost:3030`,
  ...requestOpts
})
```

----------------------------------------

TITLE: Analyzing V8 Engine Stack Trace for Data Race in C++
DESCRIPTION: This stack trace shows a data race detected by ThreadSanitizer in the V8 JavaScript engine. The race condition occurs in the MemMove function, with the trace showing the call stack from the main entry point through platform initialization.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/tools/testrunner/testproc/stack_utils/testdata/custom_analyzer/data_race_4.txt#2025-04-23_snippet_4

LANGUAGE: C++
CODE:
```
#11 v8::platform::DefaultPlatform::DefaultPlatform(int, v8::platform::IdleTaskSupport, std::Cr::unique_ptr<v8::TracingController, std::Cr::default_delete<v8::TracingController>>) src/libplatform/default-platform.cc:108:5 (d8+0x2015d60)
#12 make_unique<v8::platform::DefaultPlatform, int &, v8::platform::IdleTaskSupport &, std::Cr::unique_ptr<v8::TracingController, std::Cr::default_delete<v8::TracingController> > > buildtools/third_party/libc++/trunk/include/__memory/unique_ptr.h:686:30 (d8+0x20153d2) (BuildId: 06e6c95b54bbb645)
#13 v8::platform::NewDefaultPlatform(int, v8::platform::IdleTaskSupport, v8::platform::InProcessStackDumping, std::Cr::unique_ptr<v8::TracingController, std::Cr::default_delete<v8::TracingController>>) src/libplatform/default-platform.cc:53:19 (d8+0x20153d2)
#14 v8::Shell::Main(int, char**) src/d8/d8.cc:5812:16 (d8+0x5dfb09) (BuildId: 06e6c95b54bbb645)
#15 main src/d8/d8.cc:6117:43 (d8+0x5e0f10) (BuildId: 06e6c95b54bbb645)

SUMMARY: ThreadSanitizer: data race src/utils/memcopy.h:123:7 in MemMove
==================
ThreadSanitizer: reported 2 warnings
```

----------------------------------------

TITLE: Filtering Compare Results and Plotting Box Plot - Console
DESCRIPTION: Demonstrates filtering the benchmark comparison CSV (`compare-pr-5134.csv`) using `sed` to include only rows where the `encoding` is 'ascii' (while preserving the header row). The filtered data is then piped to `Rscript benchmark/compare.R` which analyzes the results and generates a box plot image file (`compare-plot.png`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-and-running-benchmarks.md#_snippet_20

LANGUAGE: console
CODE:
```
$ cat compare-pr-5134.csv | sed '1p;/encoding=\'"'"'ascii\'"'"'/!d' | Rscript benchmark/compare.R --plot compare-plot.png

                                                                                      confidence improvement accuracy (*)    (**)   (***)
 string_decoder/string-decoder.js n=2500000 chunkLen=16 inLen=128 encoding='ascii'           ***     -3.76 %       ±1.36%  ±1.82%  ±2.40%
 string_decoder/string-decoder.js n=2500000 chunkLen=16 inLen=32 encoding='ascii'            ***     -2.70 %       ±0.83%  ±1.11%  ±1.45%
 string_decoder/string-decoder.js n=2500000 chunkLen=16 inLen=4096 encoding='ascii'          ***     -4.06 %       ±0.31%  ±0.41%  ±0.54%
 string_decoder/string-decoder.js n=2500000 chunkLen=256 inLen=1024 encoding='ascii'         ***     -1.42 %       ±0.58%  ±0.77%  ±1.01%
...
```

----------------------------------------

TITLE: Setting Effective Group ID in Node.js (ESM)
DESCRIPTION: Example of using the process.setegid() method to set the effective group identity of the process in ESM format. This POSIX-only function changes the group identity and then verifies the change using getegid().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_83

LANGUAGE: javascript
CODE:
```
import process from 'node:process';

if (process.getegid && process.setegid) {
  console.log(`Current gid: ${process.getegid()}`);
  try {
    process.setegid(501);
    console.log(`New gid: ${process.getegid()}`);
  } catch (err) {
    console.error(`Failed to set gid: ${err}`);
  }
}
```

----------------------------------------

TITLE: Displaying Tabular Data with console.table in Node.js (JavaScript)
DESCRIPTION: Shows how `console.table` attempts to format data (like arrays of objects) into a readable table logged to the console (`stdout`). Explains its fallback behavior with non-tabular data (logging the argument directly using `util.inspect`) and demonstrates how to specify which properties to include as columns using the optional `properties` array argument.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_6

LANGUAGE: js
CODE:
```
// These can't be parsed as tabular data
console.table(Symbol());
// Symbol()

console.table(undefined);
// undefined

console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }]);
// ┌─────────┬─────┬─────┐
// │ (index) │ a   │ b   │
// ├─────────┼─────┼─────┤
// │ 0       │ 1   │ 'Y' │
// │ 1       │ 'Z' │ 2   │
// └─────────┴─────┴─────┘

console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }], ['a']);
// ┌─────────┬─────┐
// │ (index) │ a   │
// ├─────────┼─────┤
// │ 0       │ 1   │
// │ 1       │ 'Z' │
// └─────────┴─────┘
```

----------------------------------------

TITLE: Analyzing Best Effort Coverage with Precise Count Enabled in Node.js
DESCRIPTION: This code snippet shows the result of a code coverage analysis test with precise count enabled. It provides similar information to the previous test, including function coverage details, execution ranges, and script information.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/cpu-profiler/coverage-block-expected.txt#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
{
    id : <messageId>
    result : {
        result : [
            [0] : {
                functions : [
                    [0] : {
                        functionName : 
                        isBlockCoverage : false
                        ranges : [
                            [0] : {
                                count : 1
                                endOffset : 221
                                startOffset : 0
                            }
                        ]
                    }
                    [1] : {
                        functionName : fib
                        isBlockCoverage : false
                        ranges : [
                            [0] : {
                                count : 1
                                endOffset : 73
                                startOffset : 1
                            }
                        ]
                    }
                    [2] : {
                        functionName : is_optimized
                        isBlockCoverage : false
                        ranges : [
                            [0] : {
                                count : 0
                                endOffset : 175
                                startOffset : 74
                            }
                        ]
                    }
                    [3] : {
                        functionName : iife
                        isBlockCoverage : false
                        ranges : [
                            [0] : {
                                count : 1
                                endOffset : 208
                                startOffset : 177
                            }
                        ]
                    }
                ]
                scriptId : <scriptId>
                url : testBestEffortCoverageWithPreciseCountEnabled
            }
            [1] : {
                functions : [
                    [0] : {
                        functionName : 
                        isBlockCoverage : false
                        ranges : [
                            [0] : {
                                count : 1
                                endOffset : 38
                                startOffset : 0
                            }
                        ]
                    }
                ]
                scriptId : <scriptId>
                url : 
            }
        ]
    }
}
```

----------------------------------------

TITLE: Managing TLS Sessions in Node.js
DESCRIPTION: Illustrates how to manage TLS sessions using the 'newSession' and 'resumeSession' events. This allows for storing and resuming TLS sessions, which can improve connection performance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
const tlsSessionStore = {};
server.on('newSession', (id, data, cb) => {
  tlsSessionStore[id.toString('hex')] = data;
  cb();
});
server.on('resumeSession', (id, cb) => {
  cb(null, tlsSessionStore[id.toString('hex')] || null);
});
```

----------------------------------------

TITLE: Structured Runtime.bindingCalled Event Output - Node.js - Plain Text
DESCRIPTION: These snippets represent formatted log or expected responses showing the 'Runtime.bindingCalled' method triggered by binding calls in various test scenarios. Each displays the context id, name of the binding, and the payload, relevant for tracking invocation and agent context. No code execution occurs; these are structured trace outputs supporting validation of binding mechanisms during tests. Inputs correspond to test flow actions, outputs are structured logs; invalid formatting or unexpected context states would not be represented here.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/add-binding-expected.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
{
    method : Runtime.bindingCalled
    params : {
        executionContextId : <executionContextId>
        name : send
        payload : payload
    }
}
```

LANGUAGE: plaintext
CODE:
```
{
    method : Runtime.bindingCalled
    params : {
        executionContextId : <executionContextId>
        name : frobnicate
        payload : message
    }
}
```

----------------------------------------

TITLE: Defining Public C++ Library crc32c in Bazel
DESCRIPTION: Defines the main public Abseil C++ library `crc32c` using `absl_cc_library`. This library provides CRC32C computation functionality, including optimized CRC-aware memcpy implementations (fallback and x86/ARM combined) and non-temporal memcpy logic. It specifies headers and sources, uses default compile options, and depends on internal CRC helpers (`absl::crc_cpu_detect`, `absl::crc_internal`), non-temporal memcpy (`absl::non_temporal_memcpy`), and other core Abseil libraries.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/crc/CMakeLists.txt#2025-04-23_snippet_2

LANGUAGE: starlark
CODE:
```
absl_cc_library(
  NAME
    crc32c
  HDRS
    "crc32c.h"
    "internal/crc32c.h"
    "internal/crc_memcpy.h"
  SRCS
    "crc32c.cc"
    "internal/crc32c_inline.h"
    "internal/crc_memcpy_fallback.cc"
    "internal/crc_memcpy_x86_arm_combined.cc"
    "internal/crc_non_temporal_memcpy.cc"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::crc_cpu_detect
    absl::crc_internal
    absl::non_temporal_memcpy
    absl::config
    absl::core_headers
    absl::endian
    absl::prefetch
    absl::str_format
    absl::strings
)
```

----------------------------------------

TITLE: Setting Effective User ID in Node.js (CommonJS)
DESCRIPTION: Demonstrates using the process.seteuid() method to set the effective user identity of the process in CommonJS format. This POSIX-only function accepts either a numeric ID or username string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_86

LANGUAGE: javascript
CODE:
```
const process = require('node:process');

if (process.geteuid && process.seteuid) {
  console.log(`Current uid: ${process.geteuid()}`);
  try {
    process.seteuid(501);
    console.log(`New uid: ${process.geteuid()}`);
  } catch (err) {
    console.error(`Failed to set uid: ${err}`);
  }
}
```

----------------------------------------

TITLE: Advancing Time and Mocked Date with timers.tick()
DESCRIPTION: This snippet illustrates that when `Date` is included in the mocked APIs, `context.mock.timers.tick()` not only triggers timers but also advances the time reported by `Date.now()`. It sets a timeout, asserts the initial `Date.now()` is 0, calls `tick()`, and then asserts the callback fired and `Date.now()` matches the advanced time.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_52

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
  setTimeout(fn, 9999);

  assert.strictEqual(fn.mock.callCount(), 0);
  assert.strictEqual(Date.now(), 0);

  // Advance in time
  context.mock.timers.tick(9999);
  assert.strictEqual(fn.mock.callCount(), 1);
  assert.strictEqual(Date.now(), 9999);
});
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();
  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });

  setTimeout(fn, 9999);
  assert.strictEqual(fn.mock.callCount(), 0);
  assert.strictEqual(Date.now(), 0);

  // Advance in time
  context.mock.timers.tick(9999);
  assert.strictEqual(fn.mock.callCount(), 1);
  assert.strictEqual(Date.now(), 9999);
});
```

----------------------------------------

TITLE: Testing explicit new.target usage in JavaScript constructor functions
DESCRIPTION: Tests how new.target can be accessed directly within a constructor function, capturing its value and then hitting a debugger breakpoint for inspection.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-new-target-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
function C() {   const fn = new.target;   debugger; }
```

----------------------------------------

TITLE: Rejecting Deferred Promise in Node-API
DESCRIPTION: Function to reject a JavaScript promise using its associated deferred object. The deferred object is freed on successful completion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_204

LANGUAGE: c
CODE:
```
napi_status napi_reject_deferred(napi_env env,
                                 napi_deferred deferred,
                                 napi_value rejection);
```

----------------------------------------

TITLE: Converting JavaScript BigInt to Word Array in N-API
DESCRIPTION: Converts a JavaScript BigInt to a sign bit and array of 64-bit words in little-endian format. Allows getting just the word count by passing NULL for sign_bit and words.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_115

LANGUAGE: c
CODE:
```
napi_status napi_get_value_bigint_words(napi_env env,
                                        napi_value value,
                                        int* sign_bit,
                                        size_t* word_count,
                                        uint64_t* words)
```

----------------------------------------

TITLE: Using getRawHeaderNames in Node.js HTTP Requests
DESCRIPTION: Returns an array of the current outgoing raw header names with their exact casing. This example demonstrates setting headers and retrieving their names using getRawHeaderNames().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
request.setHeader('Foo', 'bar');
request.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headerNames = request.getRawHeaderNames();
// headerNames === ['Foo', 'Set-Cookie']
```

----------------------------------------

TITLE: Demonstrating Punycode Encoding with WHATWG URL in Node.js
DESCRIPTION: This code snippet demonstrates how the WHATWG URL implementation handles non-ASCII characters in hostnames by applying Punycode encoding. It creates a URL with a Greek pi character (π) in the hostname that's percent-encoded, showing how it's converted to Punycode format in the resulting href and origin properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_53

LANGUAGE: js
CODE:
```
const myURL = new URL('https://%CF%80.example.com/foo');
console.log(myURL.href);
// Prints https://xn--1xa.example.com/foo
console.log(myURL.origin);
// Prints https://xn--1xa.example.com
```

----------------------------------------

TITLE: Importing diagnostics_channel in Node.js (ESM)
DESCRIPTION: Shows how to import the diagnostics_channel module using ECMAScript modules (ESM) syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';
```

----------------------------------------

TITLE: Initializing and Linking SourceTextModule - JavaScript CJS with vm
DESCRIPTION: Demonstrates how to use vm.SourceTextModule in CommonJS format, equivalent to the previous ESM example. It creates and configures import.meta in a custom context and links/evaluates the module asynchronously. This showcases usage in environments still relying on require syntax. Requires Node.js with --experimental-vm-modules flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_11

LANGUAGE: JavaScript
CODE:
```
const vm = require('node:vm');
const contextifiedObject = vm.createContext({ secret: 42 });
(async () => {
  const module = new vm.SourceTextModule(
    'Object.getPrototypeOf(import.meta.prop).secret = secret;',
    {
      initializeImportMeta(meta) {
        // Note: this object is created in the top context. As such,
        // Object.getPrototypeOf(import.meta.prop) points to the
        // Object.prototype in the top context rather than that in
        // the contextified object.
        meta.prop = {};
      },
    });
  // Since module has no dependencies, the linker function will never be called.
  await module.link(() => {});
  await module.evaluate();
  // Now, Object.prototype.secret will be equal to 42.
  //
  // To fix this problem, replace
  //     meta.prop = {};
  // above with
  //     meta.prop = vm.runInContext('{}', contextifiedObject);
})();
```

----------------------------------------

TITLE: Configuring and Building OpenSSL with Visual C++ - Shell (cmd) Commands
DESCRIPTION: This series of Windows command-line commands configures, builds, tests, and installs OpenSSL using Microsoft Visual C++ (MSVC) on Windows. Dependencies include Strawberry Perl (or ActiveState Perl with Win32/Console.pm), NASM, and a recent MSVC version; all must be on the system path. The configuration step uses 'perl Configure' with platform-specific arguments, followed by 'nmake' for building, 'nmake test' for test runs, and 'nmake install' for installation. Environment variables are set using the Visual Studio Developer Command Prompt or 'vcvarsall.bat', which is required for compiler and build tool availability. Input parameters include the chosen platform and architecture, strongly influencing build artifacts.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/NOTES-WINDOWS.md#2025-04-23_snippet_0

LANGUAGE: cmd
CODE:
```
cmd
perl Configure VC-WIN32
perl Configure VC-WIN64A
perl Configure VC-WIN64-ARM
perl Configure
nmake
nmake test
nmake install

```

----------------------------------------

TITLE: Importing the SQLite Module in JavaScript
DESCRIPTION: Shows how to import the SQLite module in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/sqlite.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import sqlite from 'node:sqlite';
```

LANGUAGE: cjs
CODE:
```
const sqlite = require('node:sqlite');
```

----------------------------------------

TITLE: Sorted Property Inspection (ES Modules)
DESCRIPTION: Shows how to use the sorted option to control object property ordering during inspection in ES Modules format
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
import { inspect } from 'node:util';
import assert from 'node:assert';

const o1 = {
  b: [2, 3, 1],
  a: '`a` comes before `b`',
  c: new Set([2, 3, 1]),
};
console.log(inspect(o1, { sorted: true }));
console.log(inspect(o1, { sorted: (a, b) => b.localeCompare(a) }));
```

----------------------------------------

TITLE: Retrieving Call Sites with util.getCallSites (CJS)
DESCRIPTION: Demonstrates how to require and use `util.getCallSites` in a CommonJS environment. Similar to the MJS example, it shows retrieving and iterating over call site objects within nested function calls to display stack trace details.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_9

LANGUAGE: cjs
CODE:
```
const { getCallSites } = require('node:util');

function exampleFunction() {
  const callSites = getCallSites();

  console.log('Call Sites:');
  callSites.forEach((callSite, index) => {
    console.log(`CallSite ${index + 1}:`);
    console.log(`Function Name: ${callSite.functionName}`);
    console.log(`Script Name: ${callSite.scriptName}`);
    console.log(`Line Number: ${callSite.lineNumber}`);
    console.log(`Column Number: ${callSite.column}`);
  });
  // CallSite 1:
  // Function Name: exampleFunction
  // Script Name: /home/example.js
  // Line Number: 5
  // Column Number: 26

  // CallSite 2:
  // Function Name: anotherFunction
  // Script Name: /home/example.js
  // Line Number: 22
  // Column Number: 3

  // ...
}

// A function to simulate another stack layer
function anotherFunction() {
  exampleFunction();
}

anotherFunction();
```

----------------------------------------

TITLE: Stripping TypeScript Types using CommonJS (Basic)
DESCRIPTION: Shows how to require and use `stripTypeScriptTypes` from `node:module` in a CommonJS context to remove basic TypeScript type annotations. The default `mode` ('strip') is used, preserving code structure but removing types.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_7

LANGUAGE: cjs
CODE:
```
const { stripTypeScriptTypes } = require('node:module');
const code = 'const a: number = 1;';
const strippedCode = stripTypeScriptTypes(code);
console.log(strippedCode);
// Prints: const a         = 1;
```

----------------------------------------

TITLE: Validating Private Key with x509.checkPrivateKey Method in Node.js
DESCRIPTION: Checks whether the public key for this certificate is consistent with a given private key. Returns a boolean indicating the result.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_50

LANGUAGE: javascript
CODE:
```
x509.checkPrivateKey(privateKey)
```

----------------------------------------

TITLE: Using NAPI_MODULE_INIT Macro for Node-API Module
DESCRIPTION: Example of using the NAPI_MODULE_INIT macro as a shorthand for NAPI_MODULE and defining an Init function in a Node-API module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_68

LANGUAGE: c
CODE:
```
NAPI_MODULE_INIT(/* napi_env env, napi_value exports */) {
  napi_value answer;
  napi_status result;

  status = napi_create_int64(env, 42, &answer);
  if (status != napi_ok) return NULL;

  status = napi_set_named_property(env, exports, "answer", answer);
  if (status != napi_ok) return NULL;

  return exports;
}
```

----------------------------------------

TITLE: Implementing a Synchronous Autocompletion Function for Readline (JavaScript)
DESCRIPTION: Defines a custom synchronous completer function for use with readline's Tab autocompletion feature. It filters a pre-defined list of command strings and returns matches that start with the entered input. To use, supply this function as the 'completer' option when creating a readline interface. Parameters: 'line' (string) is the current user input; Output: Array with matches and the completion substring.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_28

LANGUAGE: js
CODE:
```
function completer(line) {\n  const completions = '.help .error .exit .quit .q'.split(' ');\n  const hits = completions.filter((c) => c.startsWith(line));\n  // Show all completions if none found\n  return [hits.length ? hits : completions, line];\n}
```

----------------------------------------

TITLE: Deprecating module.createRequireFromPath() in Node.js
DESCRIPTION: module.createRequireFromPath() is deprecated. Use module.createRequire() instead.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V13.md#2025-04-23_snippet_34

LANGUAGE: JavaScript
CODE:
```
const { createRequire } = require('module');
const require = createRequire(import.meta.url);
```

----------------------------------------

TITLE: Using promiseHooks.onInit in CommonJS
DESCRIPTION: CommonJS version of registering a callback for promise initialization. The function receives the promise and its parent as arguments. Returns a function to stop the hook.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_14

LANGUAGE: cjs
CODE:
```
const { promiseHooks } = require('node:v8');

const stop = promiseHooks.onInit((promise, parent) => {});
```

----------------------------------------

TITLE: Requiring qrcode-terminal Library in Node.js (JavaScript)
DESCRIPTION: Demonstrates how to import the qrcode-terminal module into a Node.js script using require. This is a prerequisite for utilizing any QR code generating functionality provided by the library. No parameters involved; ensure qrcode-terminal is installed via npm.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/qrcode-terminal/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
var qrcode = require('qrcode-terminal');
```

----------------------------------------

TITLE: Demonstrating Worker Stdio Blocking in ECMAScript Modules
DESCRIPTION: This example illustrates how a Worker's stdout can be blocked by synchronous code in the main thread when using ESM. It shows that console output from a worker thread can be delayed when the main thread is busy with CPU-intensive operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_20

LANGUAGE: mjs
CODE:
```
import {
  Worker,
  isMainThread,
} from 'node:worker_threads';

if (isMainThread) {
  new Worker(new URL(import.meta.url));
  for (let n = 0; n < 1e10; n++) {
    // Looping to simulate work.
  }
} else {
  // This output will be blocked by the for loop in the main thread.
  console.log('foo');
}
```

----------------------------------------

TITLE: Verifying X.509 Certificate Signature with Node.js Crypto
DESCRIPTION: Verifies if an X.509 certificate instance was signed by the provided public key. Requires a `KeyObject` representing the public key and returns a boolean. Note that this method only checks the signature and does not perform other validation checks like expiration or revocation. Introduced in Node.js v15.6.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_54

LANGUAGE: javascript
CODE:
```
x509.verify(publicKey)
```

----------------------------------------

TITLE: Implementing Dynamic Import in Node.js VM Module (ESM)
DESCRIPTION: This code demonstrates how to use the importModuleDynamically function in an ECMAScript module context. It creates a new Script instance with a dynamic import, customizes the import behavior, and runs the script in the current context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_31

LANGUAGE: javascript
CODE:
```
// This script must be run with --experimental-vm-modules.
import { Script, SyntheticModule } from 'node:vm';

const script = new Script('import("foo.json", { with: { type: "json" } })', {
  async importModuleDynamically(specifier, referrer, importAttributes) {
    console.log(specifier);  // 'foo.json'
    console.log(referrer);   // The compiled script
    console.log(importAttributes);  // { type: 'json' }
    const m = new SyntheticModule(['bar'], () => { });
    await m.link(() => { });
    m.setExport('bar', { hello: 'world' });
    return m;
  },
});
const result = await script.runInThisContext();
console.log(result);  //  { bar: { hello: 'world' } }
```

----------------------------------------

TITLE: Writing Big-Endian Double-Precision Float (Node.js Buffer)
DESCRIPTION: Shows how to use `buf.writeDoubleBE()` to write a standard JavaScript number into the buffer as a big-endian 64-bit IEEE 754 double-precision float. The example initializes a buffer and writes a floating-point number, showing its hexadecimal representation. Dependencies include the `Buffer` class from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_84

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeDoubleBE(123.456, 0);

console.log(buf);
// Prints: <Buffer 40 5e dd 2f 1a 9f be 77>
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeDoubleBE(123.456, 0);

console.log(buf);
// Prints: <Buffer 40 5e dd 2f 1a 9f be 77>
```

----------------------------------------

TITLE: QUIC Callback Functions Definition
DESCRIPTION: Essential callback functions for handling QUIC session events, streams, datagrams, and connection lifecycle.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/quic.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
// Session callback
function onSession(session) {
  // 'this' refers to QuicEndpoint
}

// Stream callback
function onStream(stream) {
  // 'this' refers to QuicSession
}

// Datagram callback
function onDatagram(datagram, early) {
  // 'this' refers to QuicSession
}

// Path validation callback
function onPathValidation(result, newLocalAddress, newRemoteAddress, oldLocalAddress, oldRemoteAddress, preferredAddress) {
  // 'this' refers to QuicSession
}
```

----------------------------------------

TITLE: Creating an HTTP Tunneling Proxy in Node.js (CommonJS)
DESCRIPTION: This code snippet shows how to create an HTTP tunneling proxy using Node.js with CommonJS modules. It sets up a proxy server that handles CONNECT requests and establishes a connection to the target server.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
const http = require('node:http');
const net = require('node:net');
const { URL } = require('node:url');

// Create an HTTP tunneling proxy
const proxy = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('okay');
});
proxy.on('connect', (req, clientSocket, head) => {
  // Connect to an origin server
  const { port, hostname } = new URL(`http://${req.url}`);
  const serverSocket = net.connect(port || 80, hostname, () => {
    clientSocket.write('HTTP/1.1 200 Connection Established\r\n' +
                    'Proxy-agent: Node.js-Proxy\r\n' +
                    '\r\n');
    serverSocket.write(head);
    serverSocket.pipe(clientSocket);
    clientSocket.pipe(serverSocket);
  });
});

// Now that proxy is running
proxy.listen(1337, '127.0.0.1', () => {

  // Make a request to a tunneling proxy
  const options = {
    port: 1337,
    host: '127.0.0.1',
    method: 'CONNECT',
    path: 'www.google.com:80',
  };

  const req = http.request(options);
  req.end();

  req.on('connect', (res, socket, head) => {
    console.log('got connected!');

    // Make a request over an HTTP tunnel
    socket.write('GET / HTTP/1.1\r\n' +
                 'Host: www.google.com:80\r\n' +
                 'Connection: close\r\n' +
                 '\r\n');
    socket.on('data', (chunk) => {
      console.log(chunk.toString());
    });
    socket.on('end', () => {
      proxy.close();
    });
  });
});
```

----------------------------------------

TITLE: Custom Argument Processing in Commander.js
DESCRIPTION: Demonstrates implementation of custom argument processing with an add command that handles integer arguments and provides default values.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
program
  .command('add')
  .argument('<first>', 'integer argument', myParseInt)
  .argument('[second]', 'integer argument', myParseInt, 1000)
  .action((first, second) => {
    console.log(`${first} + ${second} = ${first + second}`);
  })
```

----------------------------------------

TITLE: Defining Read-Only Properties in REPL Context (CommonJS) in JavaScript
DESCRIPTION: Illustrates how to make REPL context variables read-only in a Node.js script using CommonJS. It starts the REPL and defines property 'm' on the REPL context as non-configurable and enumerable with a fixed value. The dependencies are Node.js and the 'node:repl' module. This restricts users from modifying 'm' during an interactive session.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_5

LANGUAGE: cjs
CODE:
```
const repl = require('node:repl');
const msg = 'message';

const r = repl.start('> ');
Object.defineProperty(r.context, 'm', {
  configurable: false,
  enumerable: true,
  value: msg,
});
```

----------------------------------------

TITLE: Working with Promise.prototype.finally Security Issues in Node.js
DESCRIPTION: Demonstrates how user-land code can override Promise.prototype.then, affecting PromisePrototypeFinally behavior, versus the safe behavior of async/await finally blocks which are immune to this manipulation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/primordials.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
// User-land
Promise.prototype.then = function then(a, b) {
  return Promise.resolve();
};

// Core
let finallyBlockExecuted = false;
PromisePrototypeFinally(somePromiseThatEventuallySettles,
                        () => { finallyBlockExecuted = true; });
process.on('exit', () => console.log(finallyBlockExecuted)); // false
```

LANGUAGE: javascript
CODE:
```
// User-land
Promise.prototype.then = function then(a, b) {
  return Promise.resolve();
};

// Core
let finallyBlockExecuted = false;
(async () => {
  try {
    return await somePromiseThatEventuallySettles;
  } finally {
    finallyBlockExecuted = true;
  }
})();
process.on('exit', () => console.log(finallyBlockExecuted)); // true
```

----------------------------------------

TITLE: Retrieving Cipher Information in Node.js Crypto Module
DESCRIPTION: The crypto.getCipherInfo function returns information about a given cipher, including its name, nid, block size, IV length, key length, and mode.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_72

LANGUAGE: JavaScript
CODE:
```
crypto.getCipherInfo(nameOrNid[, options])
```

----------------------------------------

TITLE: Converting JavaScript Date to C Double in N-API
DESCRIPTION: Converts a JavaScript Date object to a C double representing milliseconds since Unix epoch. Does not account for leap seconds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_110

LANGUAGE: c
CODE:
```
napi_status napi_get_date_value(napi_env env,
                                napi_value value,
                                double* result)
```

----------------------------------------

TITLE: Example module using HTTPS imports
DESCRIPTION: A simple module that imports code directly from an HTTPS URL, demonstrating how the HTTPS loader hooks can be used in practice.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_38

LANGUAGE: javascript
CODE:
```
// main.mjs
import { VERSION } from 'https://coffeescript.org/browser-compiler-modern/coffeescript.js';

console.log(VERSION);
```

----------------------------------------

TITLE: Monitoring Network Socket Creation in Node.js
DESCRIPTION: Illustrates how to subscribe to the 'net.client.socket' event, which is emitted when a new TCP or pipe client socket is created. The event provides access to the net.Socket object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_45

LANGUAGE: javascript
CODE:
```
net.client.socket
```

----------------------------------------

TITLE: Executing npm search command in Bash
DESCRIPTION: This snippet shows the syntax for using the npm search command to search for packages in the npm registry. It allows for multiple search terms and has aliases 'find', 's', and 'se'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-search.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm search <search term> [<search term> ...]

aliases: find, s, se
```

----------------------------------------

TITLE: Implementing module-sync Exports Condition in Node.js Module System
DESCRIPTION: This commit implements the 'module-sync' exports condition in the Node.js module system, providing a way to specify synchronous module exports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_29

LANGUAGE: JavaScript
CODE:
```
// package.json
{
  "exports": {
    "module-sync": "./sync.js",
    "import": "./async.js"
  }
}
```

----------------------------------------

TITLE: Transforming TypeScript Features using CommonJS
DESCRIPTION: Demonstrates using `stripTypeScriptTypes` in CommonJS with `mode: 'transform'` and `sourceMap: true`. This strips types, transforms TypeScript features (e.g., namespaces) to equivalent JavaScript, and includes a source map comment (`//# sourceMappingURL=...`) containing the mapping data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_11

LANGUAGE: cjs
CODE:
```
const { stripTypeScriptTypes } = require('node:module');
const code = `
  namespace MathUtil {
    export const add = (a: number, b: number) => a + b;
  }`;
const strippedCode = stripTypeScriptTypes(code, { mode: 'transform', sourceMap: true });
console.log(strippedCode);
// Prints:
// var MathUtil;
// (function(MathUtil) {
//     MathUtil.add = (a, b)=>a + b;
// })(MathUtil || (MathUtil = {}));
// # sourceMappingURL=data:application/json;base64, ...
```

----------------------------------------

TITLE: Displaying Help and Generating QR Codes with qrcode-terminal CLI (Shell)
DESCRIPTION: Demonstrates usage of the command-line qrcode-terminal tool. The --help flag displays usage instructions; passing a string argument, the tool outputs a QR code to the terminal; piping from echo allows passing input via stdin. Requires global installation of qrcode-terminal.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/qrcode-terminal/README.md#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
$ qrcode-terminal --help
$ qrcode-terminal 'http://github.com'
$ echo 'http://github.com' | qrcode-terminal
```

----------------------------------------

TITLE: Create WASI Instance (Node.js)
DESCRIPTION: Demonstrates creating a WASI (WebAssembly System Interface) instance using `require('node:wasi').WASI`. The example attempts to preopen the entire filesystem (`/`), which is restricted by the Permission Model unless the `--allow-wasi` flag is used.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const { WASI } = require('node:wasi');
// Attempt to bypass the permission
new WASI({
  version: 'preview1',
  // Attempt to mount the whole filesystem
  preopens: {
    '/': '/',
  },
});
```

----------------------------------------

TITLE: Requiring an ES Module Exporting module.exports from CommonJS (Node.js - JavaScript)
DESCRIPTION: Shows how a CommonJS file can import an ES module that exports 'module.exports' directly. The required class is logged and attempts to destructure named exports (like distance) yield undefined, as they are not present. Requires point.mjs from the previous snippet to exist.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_8

LANGUAGE: cjs
CODE:
```
const Point = require('./point.mjs');\nconsole.log(Point); // [class Point]\n\n// Named exports are lost when 'module.exports' is used\nconst { distance } = require('./point.mjs');\nconsole.log(distance); // undefined
```

----------------------------------------

TITLE: Full AST Walking Example
DESCRIPTION: Demonstrates using the full walk function to traverse all nodes in the syntax tree.
SOURCE: https://github.com/nodejs/node/blob/main/deps/acorn/acorn-walk/README.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
const acorn = require("acorn")
const walk = require("acorn-walk")

walk.full(acorn.parse("1 + 1"), node => {
  console.log(`There's a ${node.type} node at ${node.ch}`)
})
```

----------------------------------------

TITLE: Unbinding AsyncLocalStorage from Channel - Node.js (CommonJS)
DESCRIPTION: Provides a CommonJS example of unbinding an AsyncLocalStorage from a diagnostics channel. After binding the store, unbindStore is called to detach it. Returns a boolean indicating success. Requires 'node:diagnostics_channel' and 'node:async_hooks'. This is an experimental API as of Node.js v18.19.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_25

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');\nconst { AsyncLocalStorage } = require('node:async_hooks');\n\nconst store = new AsyncLocalStorage();\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.bindStore(store);\nchannel.unbindStore(store);
```

----------------------------------------

TITLE: Installing Corepack with npm
DESCRIPTION: Command to install Corepack globally using npm, which is necessary when not using the version bundled with Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/deps/corepack/README.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
npm install -g corepack
```

----------------------------------------

TITLE: Generating & Sourcing Node.js Bash Completion - Bash
DESCRIPTION: Provides the bash commands necessary to generate the Node.js bash completion script and source it into the current shell session. Sourcing the script enables command-line auto-completion for Node.js flags and arguments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_12

LANGUAGE: bash
CODE:
```
node --completion-bash > node_bash_completion
source node_bash_completion
```

----------------------------------------

TITLE: Closing Dispatcher with Promise and Callback Examples
DESCRIPTION: Demonstrates two ways to close a dispatcher - using Promise-based approach and callback-based approach.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
dispatcher.close() // -> Promise
dispatcher.close(() => {}) // -> void
```

----------------------------------------

TITLE: Implementing Custom Number Squaring REPL in ES Modules
DESCRIPTION: Creates a custom REPL that squares input numbers using ES Modules. Includes error handling for non-numeric inputs and demonstrates custom evaluation function usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_14

LANGUAGE: mjs
CODE:
```
import repl from 'node:repl';

function byThePowerOfTwo(number) {
  return number * number;
}

function myEval(code, context, replResourceName, callback) {
  if (isNaN(code)) {
    callback(new Error(`${code.trim()} is not a number`));
  } else {
    callback(null, byThePowerOfTwo(code));
  }
}

repl.start({ prompt: 'Enter a number: ', eval: myEval });
```

----------------------------------------

TITLE: Defining a JavaScript Object Literal with a Trailing Comma
DESCRIPTION: This snippet tests the handling of a single trailing comma after the last property in a JavaScript object literal. Modern JavaScript allows this syntax. The test verifies that assigning `{ 'bar' : 'YES', }` to `foo` allows `foo.bar` to be accessed with the value 'YES'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/object-extra-comma-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
var foo = { 'bar' : 'YES', };
```

----------------------------------------

TITLE: Using tracePromise with diagnostics_channel in JavaScript (ES Modules)
DESCRIPTION: Example of using the tracePromise method to trace an async function with ES Modules. This produces start/end events around the synchronous portion and asyncStart/asyncEnd events for the asynchronous portion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_34

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.tracePromise(async () => {
  // Do something
}, {
  some: 'thing',
});
```

----------------------------------------

TITLE: Parsing Headers using Readable Stream unshift()
DESCRIPTION: Demonstrates how to parse headers from a stream by reading until a delimiter is found and using unshift() to return unused data back to the stream. Uses StringDecoder for proper UTF-8 handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_38

LANGUAGE: javascript
CODE:
```
// Pull off a header delimited by \n\n.
// Use unshift() if we get too much.
// Call the callback with (error, header, stream).
const { StringDecoder } = require('node:string_decoder');
function parseHeader(stream, callback) {
  stream.on('error', callback);
  stream.on('readable', onReadable);
  const decoder = new StringDecoder('utf8');
  let header = '';
  function onReadable() {
    let chunk;
    while (null !== (chunk = stream.read())) {
      const str = decoder.write(chunk);
      if (str.includes('\n\n')) {
        // Found the header boundary.
        const split = str.split(/\n\n/);
        header += split.shift();
        const remaining = split.join('\n\n');
        const buf = Buffer.from(remaining, 'utf8');
        stream.removeListener('error', callback);
        // Remove the 'readable' listener before unshifting.
        stream.removeListener('readable', onReadable);
        if (buf.length)
          stream.unshift(buf);
        // Now the body of the message can be read from the stream.
        callback(null, header, stream);
        return;
      }
      // Still reading the header.
      header += str;
    }
  }
}
```

----------------------------------------

TITLE: Tracking Request Body Completion with undici:request:bodySent Channel
DESCRIPTION: Shows how to monitor when a request body has been fully sent using the diagnostics channel.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:request:bodySent').subscribe(({ request }) => {
  // request is the same object undici:request:create
})
```

----------------------------------------

TITLE: Understanding isNativeError vs instanceof for Error-like objects
DESCRIPTION: Explains the difference between isNativeError and instanceof for objects that inherit from Error.prototype but weren't created by a native Error constructor.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_87

LANGUAGE: javascript
CODE:
```
const myError = { __proto__: Error.prototype };
console.log(util.types.isNativeError(myError)); // false
console.log(myError instanceof Error); // true
```

----------------------------------------

TITLE: Clearing Call History in MockAgent
DESCRIPTION: Shows how to clear all call history records from a MockAgent using the clearAllCallHistory method.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
const mockAgent = new MockAgent()

mockAgent.clearAllCallHistory()
```

----------------------------------------

TITLE: Custom Option Negation with parseArgs Tokens - JavaScript (CommonJS)
DESCRIPTION: Shows how to use parseArgs with tokens to manually apply negation for options named --no-* using CommonJS syntax. The code defines both normal and negative-flag versions in the option spec, parses them with tokens: true, and revises the values dict so --no-foo overwrites foo as false. This allows support for mutually conflicting/repeated flags with last-wins priority. Input is the options object and args are taken from process.argv by default; log output demonstrates the selected/negated values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_39

LANGUAGE: JavaScript
CODE:
```
const { parseArgs } = require('node:util');

const options = {
  'color': { type: 'boolean' },
  'no-color': { type: 'boolean' },
  'logfile': { type: 'string' },
  'no-logfile': { type: 'boolean' },
};
const { values, tokens } = parseArgs({ options, tokens: true });

// Reprocess the option tokens and overwrite the returned values.
tokens
  .filter((token) => token.kind === 'option')
  .forEach((token) => {
    if (token.name.startsWith('no-')) {
      // Store foo:false for --no-foo
      const positiveName = token.name.slice(3);
      values[positiveName] = false;
      delete values[token.name];
    } else {
      // Resave value so last one wins if both --foo and --no-foo.
      values[token.name] = token.value ?? true;
    }
  });

const color = values.color;
const logfile = values.logfile ?? 'default.log';

console.log({ logfile, color });
```

----------------------------------------

TITLE: Aborting HTTP Requests by Destroying the Response Body in Undici
DESCRIPTION: Example showing how to abort a request by destroying the response body. This approach cancels the request after receiving the response but before fully consuming the body.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.end('Hello, World!')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

try {
  const { body } = await client.request({
    path: '/',
    method: 'GET'
  })
  body.destroy()
} catch (error) {
  console.error(error) // should print an RequestAbortedError
  client.close()
  server.close()
}
```

----------------------------------------

TITLE: HTTP Request Diagnostics Channel Integration
DESCRIPTION: Implements request start and end reporting through the diagnostics_channel module for HTTP requests.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_42



----------------------------------------

TITLE: JavaScript Addition Function Example
DESCRIPTION: Example JavaScript function that adds 2 to a number, which is then exposed globally to be called from native code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_166

LANGUAGE: js
CODE:
```
function AddTwo(num) {
  return num + 2;
}
global.AddTwo = AddTwo;
```

----------------------------------------

TITLE: Querying npm Org Memberships via libnpmorg in JavaScript
DESCRIPTION: Demonstrates how to require the libnpmorg library in Node.js and asynchronously list the roster of members for a specific npm organization, authenticating with a token. The snippet uses async/await and assumes Node.js 10+ or transpilation. Outputs a Roster object mapping usernames to roles. Requires installation of libnpmorg and an authentication token via npm or another valid registry method.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmorg/README.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
const org = require('libnpmorg')

console.log(await org.ls('myorg', {token: 'deadbeef'}))
=>
Roster {
  zkat: 'developer',
  iarna: 'admin',
  isaacs: 'owner'
}
```

----------------------------------------

TITLE: Using util.types.isNativeError to check for native Error instances
DESCRIPTION: Demonstrates how to use util.types.isNativeError() to check if a value is a native Error, TypeError, RangeError, or a custom Error subclass. Returns true for errors created by built-in Error constructors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_83

LANGUAGE: javascript
CODE:
```
console.log(util.types.isNativeError(new Error()));  // true
console.log(util.types.isNativeError(new TypeError()));  // true
console.log(util.types.isNativeError(new RangeError()));  // true
```

----------------------------------------

TITLE: Testing Subclass Private Members
DESCRIPTION: Shows private property and method implementation in a subclass, demonstrating private member scope isolation from the base class.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/class-private-methods-static-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
class B extends A {
  get #accessor() { return 'subclassAccessor'; }
  #subclassMethod() { return B.#accessor; }
}
```

----------------------------------------

TITLE: Modifying instanceof behavior using Symbol.hasInstance in JavaScript
DESCRIPTION: This snippet demonstrates how to modify the behavior of the instanceof operator by defining custom Symbol.hasInstance methods on Array and Date objects. It also shows how to use the FunctionPrototypeSymbolHasInstance method from primordials for comparison.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/primordials.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
// User-land
Object.defineProperty(Array, Symbol.hasInstance, {
  __proto__: null,
  value: () => true,
});
Object.defineProperty(Date, Symbol.hasInstance, {
  __proto__: null,
  value: () => false,
});

// Core
const {
  FunctionPrototypeSymbolHasInstance,
} = primordials;

console.log(new Date() instanceof Array); // true
console.log(new Date() instanceof Date); // false

console.log(FunctionPrototypeSymbolHasInstance(Array, new Date())); // false
console.log(FunctionPrototypeSymbolHasInstance(Date, new Date())); // true
```

----------------------------------------

TITLE: Type-Tagged Object Implementation
DESCRIPTION: Example showing how to implement type-safe object handling using Node-API type tagging capabilities.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_177

LANGUAGE: c
CODE:
```
static const napi_type_tag DatabaseHandleTypeTag = {
  0x1edf75a38336451d, 0xa5ed9ce2e4c00c38
};

static const napi_type_tag QueryHandleTypeTag = {
  0x9c73317f9fad44a3, 0x93c3920bf3b0ad6a
};

static napi_value
openDatabase(napi_env env, napi_callback_info info) {
  napi_status status;
  napi_value result;

  // Perform the underlying action which results in a database handle.
  DatabaseHandle* dbHandle = open_database();

  // Create a new, empty JS object.
  status = napi_create_object(env, &result);
  if (status != napi_ok) return NULL;

  // Tag the object to indicate that it holds a pointer to a `DatabaseHandle`.
  status = napi_type_tag_object(env, result, &DatabaseHandleTypeTag);
  if (status != napi_ok) return NULL;

  // Store the pointer to the `DatabaseHandle` structure inside the JS object.
  status = napi_wrap(env, result, dbHandle, NULL, NULL, NULL);
  if (status != napi_ok) return NULL;

  return result;
}

static napi_value
query(napi_env env, napi_callback_info info) {
  napi_status status;
  size_t argc = 2;
  napi_value argv[2];
  bool is_db_handle;

  status = napi_get_cb_info(env, info, &argc, argv, NULL, NULL);
  if (status != napi_ok) return NULL;

  // Check that the object passed as the first parameter has the previously
  // applied tag.
  status = napi_check_object_type_tag(env,
                                      argv[0],
                                      &DatabaseHandleTypeTag,
                                      &is_db_handle);
  if (status != napi_ok) return NULL;

  // Throw a `TypeError` if it doesn't.
  if (!is_db_handle) {
    // Throw a TypeError.
    return NULL;
  }
}
```

----------------------------------------

TITLE: Retrieving Module File Name in Node.js Native API (C)
DESCRIPTION: Function to retrieve the absolute path of the location from which a Node.js add-on was loaded. The path is returned as a URL string, prefixed with 'file://' for local filesystem files. The returned string is owned by the environment and must not be modified or freed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_219

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status
node_api_get_module_file_name(node_api_basic_env env, const char** result);
```

----------------------------------------

TITLE: Using MockPool.request Method for Direct Requests
DESCRIPTION: This example demonstrates how to use the MockPool.request method to make requests directly through a specific mock pool. This approach allows testing of specific endpoints without affecting the global dispatcher configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
import { MockAgent } from 'undici'

const mockAgent = new MockAgent()

const mockPool = mockAgent.get('http://localhost:3000')
mockPool.intercept({
  path: '/foo',
  method: 'GET',
}).reply(200, 'foo')

const {
  statusCode,
  body
} = await mockPool.request({
  origin: 'http://localhost:3000',
  path: '/foo',
  method: 'GET'
})

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Pausing via Indirect Eval with Strict Mode in Node.js - JavaScript
DESCRIPTION: This snippet executes the same function as above, but in strict mode by including 'use strict'; at the top. It then performs an indirect eval ((0, eval)(x)). The purpose is to test how Node.js manages eval in strict mode with a 'with' statement, which is forbidden. Key dependencies: Node.js, ES6+. If executed, this code should throw a SyntaxError due to the prohibition of 'with' in strict mode. Inputs: none. Outputs: exception (SyntaxError). Limitation: will not run successfully due to 'with' statement.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/regress/regress-crbug-1510427-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
'use strict';
var x = `
  (function y() {
    with ({}) {
      var z = () => { debugger; };
      z();
    }
  })();
`;
(0, eval)(x);
```

----------------------------------------

TITLE: Detecting unsafe Buffer usage with grep (Shell/Console)
DESCRIPTION: This snippet demonstrates how to use grep with extended regex to search for potentially unsafe Buffer constructor calls in a project's codebase, excluding the node_modules directory. It helps developers identify legacy code that needs to be updated to safer Buffer APIs. Requires grep with -E and -r support; outputs file locations and lines with problematic patterns.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/safer-buffer/Porting-Buffer.md#2025-04-23_snippet_0

LANGUAGE: Console
CODE:
```
grep -nrE '[^a-zA-Z](Slow)?Buffer\s*\(' --exclude-dir node_modules
```

----------------------------------------

TITLE: Python Dependencies Configuration for Node.js Documentation
DESCRIPTION: A requirements.txt file that specifies the Python packages and their versions required for building Node.js documentation with Sphinx. It divides the packages into primary dependencies (Furo theme and Sphinx) and their supporting dependencies with pinned versions for reproducible builds.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/requirements.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
# primary
furo==2023.5.20
Sphinx==6.1.3

# dependencies
alabaster==0.7.13
Babel==2.11.0
beautifulsoup4==4.12.2
certifi==2022.12.7
charset-normalizer==3.0.1
colorama==0.4.6
docutils==0.19
idna==3.4
imagesize==1.4.1
importlib-metadata==6.0.0
Jinja2==3.1.2
livereload==2.6.3
MarkupSafe==2.1.2
packaging==23.0
Pygments==2.14.0
pytz==2022.7.1
requests==2.28.2
six==1.16.0
snowballstemmer==2.2.0
soupsieve==2.4.1
sphinx-autobuild==2021.3.14
sphinx-basic-ng==1.0.0b2
sphinxcontrib-devhelp==1.0.2
sphinxcontrib-htmlhelp==2.0.0
sphinxcontrib-jsmath==1.0.1
sphinxcontrib-qthelp==1.0.3
sphinxcontrib-serializinghtml==1.1.5
sphinxcontrib.applehelp==1.0.3
tornado==6.3.2
urllib3==1.26.14
zipp==3.11.0
```

----------------------------------------

TITLE: Testing Step Out Precision in Async Functions with Node.js
DESCRIPTION: This test verifies that the stepOut operation correctly navigates to the resumed outer generator in a complex async function scenario with timeouts.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/async-function-step-out-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
bar (testStepOutPrecision.js:61:8)
-- await --
foo (testStepOutPrecision.js:55:14)
-- await --
test (testStepOutPrecision.js:48:14)
-- await --
(anonymous) (:0:0)

foo (testStepOutPrecision.js:56:8)
-- await --
test (testStepOutPrecision.js:48:14)
-- await --
(anonymous) (:0:0)

test (testStepOutPrecision.js:49:8)
-- await --
(anonymous) (:0:0)

floodWithTimeouts (testStepOutPrecision.js:40:15)
-- setTimeout --
floodWithTimeouts (testStepOutPrecision.js:41:10)
-- setTimeout --
floodWithTimeouts (testStepOutPrecision.js:41:10)
-- setTimeout --
floodWithTimeouts (testStepOutPrecision.js:41:10)
-- setTimeout --
floodWithTimeouts (testStepOutPrecision.js:41:10)
test (testStepOutPrecision.js:46:8)
(anonymous) (:0:0)

test (testStepOutPrecision.js:50:8)
-- await --
(anonymous) (:0:0)

floodWithTimeouts (testStepOutPrecision.js:40:15)
-- setTimeout --
floodWithTimeouts (testStepOutPrecision.js:41:10)
-- setTimeout --
floodWithTimeouts (testStepOutPrecision.js:41:10)
-- setTimeout --
floodWithTimeouts (testStepOutPrecision.js:41:10)
-- setTimeout --
floodWithTimeouts (testStepOutPrecision.js:41:10)
-- setTimeout --
floodWithTimeouts (testStepOutPrecision.js:41:10)
test (testStepOutPrecision.js:46:8)
(anonymous) (:0:0)
```

----------------------------------------

TITLE: Digital Signature Update Method Example (ESM)
DESCRIPTION: Shows how to use sign.update() and verify.update() methods to create and verify digital signatures using RSA keys in ESM format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_43

LANGUAGE: mjs
CODE:
```
const {
  generateKeyPairSync,
  createSign,
  createVerify,
} = await import('node:crypto');

const { privateKey, publicKey } = generateKeyPairSync('rsa', {
  modulusLength: 2048,
});

const sign = createSign('SHA256');
sign.update('some data to sign');
sign.end();
const signature = sign.sign(privateKey);

const verify = createVerify('SHA256');
verify.update('some data to sign');
verify.end();
console.log(verify.verify(publicKey, signature));
// Prints: true
```

----------------------------------------

TITLE: Configuring Package Manager via devEngines in package.json
DESCRIPTION: JSON configuration showing how to use the devEngines.packageManager field to set compatibility requirements and validation behavior for package managers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/corepack/README.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
  "devEngines":{
    "packageManager": {
      "name": "yarn",
      "version": "3.2.3+sha224.953c8233f7a92884eee2de69a1b92d1f2ec1655e66d08071ba9a02fa"
    }
  }
}
```

----------------------------------------

TITLE: Inspecting Circular References with ES Modules
DESCRIPTION: Shows how util.inspect() handles circular object references in ES modules format, with reference anchors marked in the output.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
import { inspect } from 'node:util';

const obj = {};
obj.a = [obj];
obj.b = {};
obj.b.inner = obj.b;
obj.b.obj = obj;

console.log(inspect(obj));
// <ref *1> {
//   a: [ [Circular *1] ],
//   b: <ref *2> { inner: [Circular *2], obj: [Circular *1] }
// }
```

----------------------------------------

TITLE: Calculating zlib and Brotli Memory Usage Options (JavaScript/Node.js)
DESCRIPTION: This JavaScript snippet provides formulas and practical code for customizing memory usage with zlib-based streams by setting the windowBits and memLevel options. The code shows both the memory requirement formula and an example options object for reduced memory. This is useful for developers tuning compression speed, memory, and tradeoffs in Node.js. Limitations: Changing these settings may degrade compression efficiency.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_15

LANGUAGE: js
CODE:
```
(1 << (windowBits + 2)) + (1 << (memLevel + 9))
```

LANGUAGE: js
CODE:
```
const options = { windowBits: 14, memLevel: 7 };
```

----------------------------------------

TITLE: Basic SQLite Database Operations in ESM
DESCRIPTION: Demonstrates creating an in-memory database, executing SQL statements, preparing and running statements for data insertion and querying. This example shows the ESM syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/sqlite.md#2025-04-23_snippet_1

LANGUAGE: mjs
CODE:
```
import { DatabaseSync } from 'node:sqlite';
const database = new DatabaseSync(':memory:');

// Execute SQL statements from strings.
database.exec(`
  CREATE TABLE data(
    key INTEGER PRIMARY KEY,
    value TEXT
  ) STRICT
`);
// Create a prepared statement to insert data into the database.
const insert = database.prepare('INSERT INTO data (key, value) VALUES (?, ?)');
// Execute the prepared statement with bound values.
insert.run(1, 'hello');
insert.run(2, 'world');
// Create a prepared statement to read data from the database.
const query = database.prepare('SELECT * FROM data ORDER BY key');
// Execute the prepared statement and log the result set.
console.log(query.all());
// Prints: [ { key: 1, value: 'hello' }, { key: 2, value: 'world' } ]
```

----------------------------------------

TITLE: Importing Modules using Data URLs (Node.js)
DESCRIPTION: Shows how to import modules directly from base64-encoded or URL-encoded strings using the `data:` URL scheme. The first line imports inline JavaScript, while the second imports inline JSON, requiring the `with { type: 'json' }` attribute.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import 'data:text/javascript,console.log("hello!");';
import _ from 'data:application/json,"world!"' with { type: 'json' };
```

----------------------------------------

TITLE: Getting the Local IP Family of a Node.js net.Socket
DESCRIPTION: A string property representing the local IP family used for the connection. Possible values are 'IPv4' or 'IPv6'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
socket.localFamily
```

----------------------------------------

TITLE: Requiring postcss-selector-parser in JavaScript
DESCRIPTION: This snippet shows how to import (require) the postcss-selector-parser module to access its parsing and node manipulation methods. It assumes that postcss-selector-parser is installed as a project dependency (e.g., with npm install postcss-selector-parser). The parser variable will thereafter refer to the API.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const parser = require('postcss-selector-parser');
```

----------------------------------------

TITLE: Synchronizing Built-in ES Module Exports in Node.js
DESCRIPTION: Provides an example of using `module.syncBuiltinESMExports` to update the live bindings of built-in ES Modules (like `node:fs`) to reflect changes made to the corresponding CommonJS exports after the initial load. It demonstrates how modifying the required `fs` object (updating `readFile`, deleting `readFileSync`, adding `newAPI`) and then calling `syncBuiltinESMExports` affects the asynchronously imported `esmFS` object. Note that existing properties are updated, deleted properties remain accessible in the ESM version (but might point to undefined if the underlying CJS property was removed), and newly added properties on the CJS object are not added to the ESM exports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_12

LANGUAGE: js
CODE:
```
const fs = require('node:fs');
const assert = require('node:assert');
const { syncBuiltinESMExports } = require('node:module');

fs.readFile = newAPI;

delete fs.readFileSync;

function newAPI() {
  // ...
}

fs.newAPI = newAPI;

syncBuiltinESMExports();

import('node:fs').then((esmFS) => {
  // It syncs the existing readFile property with the new value
  assert.strictEqual(esmFS.readFile, newAPI);
  // readFileSync has been deleted from the required fs
  assert.strictEqual('readFileSync' in fs, false);
  // syncBuiltinESMExports() does not remove readFileSync from esmFS
  assert.strictEqual('readFileSync' in esmFS, true);
  // syncBuiltinESMExports() does not add names
  assert.strictEqual(esmFS.newAPI, undefined);
});
```

----------------------------------------

TITLE: Getting System Error Message with util.getSystemErrorMessage (JS)
DESCRIPTION: Shows how to retrieve the platform-dependent descriptive string message for a numeric system error code using `util.getSystemErrorMessage`. The example uses `fs.access` to trigger an error and then gets the message corresponding to `err.errno`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_14

LANGUAGE: js
CODE:
```
fs.access('file/that/does/not/exist', (err) => {
  const message = util.getSystemErrorMessage(err.errno);
  console.error(message);  // No such file or directory
});
```

----------------------------------------

TITLE: Verifying Node.js binary checksums using sha256sum
DESCRIPTION: This command verifies the SHA256 checksums of downloaded Node.js files against the SHASUMS256.txt file. It helps ensure the integrity and authenticity of the downloaded binaries.
SOURCE: https://github.com/nodejs/node/blob/main/README.md#2025-04-23_snippet_1

LANGUAGE: Bash
CODE:
```
sha256sum -c SHASUMS256.txt --ignore-missing
```

----------------------------------------

TITLE: Overriding TempDir Function in C++ for Google Test
DESCRIPTION: Macro to provide a custom implementation for the testing::TempDir() function in Google Test.
SOURCE: https://github.com/nodejs/node/blob/main/deps/googletest/include/gtest/internal/custom/README.md#2025-04-23_snippet_1

LANGUAGE: cpp
CODE:
```
GTEST_CUSTOM_TEMPDIR_FUNCTION_
```

----------------------------------------

TITLE: Adding Environment Cleanup Hook in Node-API (C)
DESCRIPTION: Registers a cleanup function to be called when the current Node.js environment exits. Multiple registrations are allowed with different arguments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_59

LANGUAGE: c
CODE:
```
NODE_EXTERN napi_status napi_add_env_cleanup_hook(node_api_basic_env env,
                                                  napi_cleanup_hook fun,
                                                  void* arg);
```

----------------------------------------

TITLE: Polyfill-safe buffer creation for numeric sizes (JavaScript, early Node.js support)
DESCRIPTION: This snippet offers both a verbose (multi-line) and a concise (ternary) way to create a zero-filled buffer in environments that may not have Buffer.alloc. On recent Node.js versions, it uses Buffer.alloc(number). On older ones, it falls back to new Buffer(number).fill(0). This ensures zero-filling for safety, supports Node.js ≥ 0.10.x, and prevents exposure of old memory contents. No dependencies except Node.js and possibly a linter.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/safer-buffer/Porting-Buffer.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
var buf;
if (Buffer.alloc) {
  buf = Buffer.alloc(number);
} else {
  buf = new Buffer(number);
  buf.fill(0);
}
```

LANGUAGE: JavaScript
CODE:
```
const buf = Buffer.alloc ? Buffer.alloc(number) : new Buffer(number).fill(0);
```

----------------------------------------

TITLE: Handling Server Push Streams on HTTP/2 Client (CJS)
DESCRIPTION: Shows how to set up a listener for the 'stream' event on a `ClientHttp2Session` using `require('node:http2')`. This event is triggered when the server initiates a push stream. The example shows how to access the pushed stream and listen for its 'data' event. This is the CommonJS equivalent of the previous snippet.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_54

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');

const client = http2.connect('http://localhost');

client.on('stream', (pushedStream, requestHeaders) => {
  pushedStream.on('push', (responseHeaders) => {
    // Process response headers
  });
  pushedStream.on('data', (chunk) => { /* handle pushed data */ });
});

const req = client.request({ ':path': '/' });
```

----------------------------------------

TITLE: Installing Valgrind on Debian/Ubuntu
DESCRIPTION: Command to install Valgrind on Debian-based Linux distributions using the apt package manager.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/investigating-native-memory-leaks.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
apt-get install valgrind
```

----------------------------------------

TITLE: Illustrating HTTP/2 Header Removal Failure - Node.js
DESCRIPTION: Shows that removing all headers from `request.headers`, including crucial HTTP/2 pseudo-headers like `:path`, can break core request properties like `request.url`, causing assertions or other operations to fail.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_56

LANGUAGE: js
CODE:
```
removeAllHeaders(request.headers);
assert(request.url);   // Fails because the :path header has been removed
```

----------------------------------------

TITLE: Setting Supplementary Group IDs in Node.js (ESM)
DESCRIPTION: Demonstrates the use of process.setgroups() to set the supplementary group IDs for the Node.js process in ESM format. This privileged operation requires root access or CAP_SETGID capability and is POSIX-only.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_89

LANGUAGE: javascript
CODE:
```
import process from 'node:process';

if (process.getgroups && process.setgroups) {
  try {
    process.setgroups([501]);
    console.log(process.getgroups()); // new groups
  } catch (err) {
    console.error(`Failed to set groups: ${err}`);
  }
}
```

----------------------------------------

TITLE: Parsing with Custom decodeURIComponent Function - Node.js JavaScript
DESCRIPTION: This snippet shows how to use 'querystring.parse' with a custom percent-decoding function to handle encodings other than UTF-8. It assumes the existence of a function called 'gbkDecodeURIComponent' for decoding GBK-encoded values. The main input is a URL query string and an options object that provides an alternative decoding implementation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/querystring.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
// Assuming gbkDecodeURIComponent function already exists...

querystring.parse('w=%D6%D0%CE%C4&foo=bar', null, null,
                  { decodeURIComponent: gbkDecodeURIComponent });
```

----------------------------------------

TITLE: Accessing TypedArray Information in N-API
DESCRIPTION: Retrieves properties of a JavaScript TypedArray including its type, length, underlying buffer and offset. Returns various properties through output parameters with proper null checking.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_108

LANGUAGE: c
CODE:
```
napi_status napi_get_typedarray_info(napi_env env,
                                     napi_value typedarray,
                                     napi_typedarray_type* type,
                                     size_t* length,
                                     void** data,
                                     napi_value* arraybuffer,
                                     size_t* byte_offset)
```

----------------------------------------

TITLE: ReferenceError Upon Undefined Variable Access - Node.js Errors - JavaScript
DESCRIPTION: Shows a basic scenario where accessing an undeclared variable triggers a ReferenceError in JavaScript. There are no dependencies or required modules. The code is a single statement referencing a variable that does not exist, causing Node.js (through V8) to throw a ReferenceError. Intended to illustrate the automatic detection of undefined variable usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_11

LANGUAGE: JavaScript
CODE:
```
doesNotExist;
// Throws ReferenceError, doesNotExist is not a variable in this program.

```

----------------------------------------

TITLE: Initializing MockCallHistoryLog with MockAgent in JavaScript
DESCRIPTION: Creates a MockAgent instance with call history enabled and accesses the first call in the history.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockCallHistoryLog.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const mockAgent = new MockAgent({ enableCallHistory: true })
mockAgent.getCallHistory()?.firstCall()
```

----------------------------------------

TITLE: Configuring Dependency Inclusion with 'include' in npm
DESCRIPTION: Details the `--include` option, which explicitly defines which dependency types ('prod', 'dev', 'optional', 'peer') should be installed. This acts as the inverse of `--omit`. Dependencies specified via `--include` will always be installed, overriding any corresponding `--omit` flags.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_17

LANGUAGE: text
CODE:
```
#### `include`

* Default:
* Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

Option that allows for defining which types of dependencies to install.

This is the inverse of `--omit=<type>`.

Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line.
```

----------------------------------------

TITLE: Configuring, Building, and Testing OpenSSL - Windows (Visual Studio) - Shell
DESCRIPTION: For Windows developers using Visual Studio, this shell snippet details how to configure, build, and test OpenSSL from a Developer Command Prompt. Ensure Perl and 'nmake' are in your PATH. The 'perl Configure' step selects the appropriate build target; the subsequent 'nmake' and 'nmake test' commands compile and validate the build.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/INSTALL.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ perl Configure
$ nmake
$ nmake test
```

----------------------------------------

TITLE: Installing Acorn via NPM
DESCRIPTION: Commands to install Acorn package from NPM registry.
SOURCE: https://github.com/nodejs/node/blob/main/deps/acorn/acorn/README.md#2025-04-23_snippet_0

LANGUAGE: sh
CODE:
```
npm install acorn
```

----------------------------------------

TITLE: Listening for QUIC Sessions as a Server in Node.js JavaScript
DESCRIPTION: This snippet shows how to start a QUIC server listening for new sessions using the 'listen' method from the QUIC module. It includes asynchronous creation of an endpoint, handling session objects via a callback, and graceful shutdown through 'endpoint.close()'. The dependencies are the 'node:quic' module and an async compatible environment. The 'listen' function takes a callback and optional session options; outputs include an active endpoint for server sessions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/quic.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import { listen } from 'node:quic';

const endpoint = await listen((session) => {
  // ... handle the session
});

// Closing the endpoint allows any sessions open when close is called
// to complete naturally while preventing new sessions from being
// initiated. Once all existing sessions have finished, the endpoint
// will be destroyed. The call returns a promise that is resolved once
// the endpoint is destroyed.
await endpoint.close();
```

----------------------------------------

TITLE: Writing Unsigned Integer (BE) to Buffer (Node.js)
DESCRIPTION: Writes an unsigned integer `value` of `byteLength` bytes to the Buffer `buf` at the specified `offset` using big-endian format. Supports values up to 48 bits accuracy. `value` must be an unsigned integer. Returns the offset plus the number of bytes written. Also available as `writeUintBE`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_100

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(6);

buf.writeUIntBE(0x1234567890ab, 0, 6);

console.log(buf);
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(6);

buf.writeUIntBE(0x1234567890ab, 0, 6);

console.log(buf);
```

----------------------------------------

TITLE: Setting Process Umask in Node.js (CommonJS)
DESCRIPTION: Shows how to set the Node.js process's file mode creation mask using process.umask() in CommonJS modules. It demonstrates changing the umask and logging the old and new values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_96

LANGUAGE: javascript
CODE:
```
const { umask } = require('node:process');

const newmask = 0o022;
const oldmask = umask(newmask);
console.log(
  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`,
);
```

----------------------------------------

TITLE: Reading File Data Synchronously in Node.js
DESCRIPTION: Demonstrates two variants of fs.readSync for reading file data into a buffer. Returns the number of bytes read. Supports options for offset, length, and position.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_91

LANGUAGE: JavaScript
CODE:
```
fs.readSync(fd, buffer, offset, length[, position])
```

LANGUAGE: JavaScript
CODE:
```
fs.readSync(fd, buffer[, options])
```

----------------------------------------

TITLE: Defining Multiple Properties with Node-API
DESCRIPTION: Shows how to define multiple properties with attributes using Object.defineProperties in JavaScript and Node-API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_146

LANGUAGE: javascript
CODE:
```
const obj = {};
Object.defineProperties(obj, {
  'foo': { value: 123, writable: true, configurable: true, enumerable: true },
  'bar': { value: 456, writable: true, configurable: true, enumerable: true },
});
```

LANGUAGE: c
CODE:
```
napi_status status = napi_status_generic_failure;

// const obj = {};
napi_value obj;
status = napi_create_object(env, &obj);
if (status != napi_ok) return status;

// Create napi_values for 123 and 456
napi_value fooValue, barValue;
status = napi_create_int32(env, 123, &fooValue);
if (status != napi_ok) return status;
status = napi_create_int32(env, 456, &barValue);
if (status != napi_ok) return status;

// Set the properties
napi_property_descriptor descriptors[] = {
  { "foo", NULL, NULL, NULL, NULL, fooValue, napi_writable | napi_configurable, NULL },
  { "bar", NULL, NULL, NULL, NULL, barValue, napi_writable | napi_configurable, NULL }
}
status = napi_define_properties(env,
                                obj,
                                sizeof(descriptors) / sizeof(descriptors[0]),
                                descriptors);
if (status != napi_ok) return status;
```

----------------------------------------

TITLE: Unflagging ESM JSON Modules in Node.js
DESCRIPTION: Removes the experimental flag from ESM JSON modules, making them a stable feature in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V17.md#2025-04-23_snippet_14

LANGUAGE: JavaScript
CODE:
```
{{9c6b078892}} - **module**: unflag esm json modules (Geoffrey Booth) [#41736](https://github.com/nodejs/node/pull/41736)
```

----------------------------------------

TITLE: Allocating Unpooled Buffer using Buffer.allocUnsafeSlow (CJS)
DESCRIPTION: Demonstrates using `Buffer.allocUnsafeSlow` to allocate uninitialized buffers that are not part of Node.js's internal buffer pool. This is suitable for small memory chunks that need to persist for an indeterminate time, avoiding potential issues with the pool. The example shows copying data from a stream into such a buffer. Requires requiring `Buffer` from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

// Need to keep around a few small chunks of memory.
const store = [];

socket.on('readable', () => {
  let data;
  while (null !== (data = readable.read())) {
    // Allocate for retained data.
    const sb = Buffer.allocUnsafeSlow(10);

    // Copy the data into the new allocation.
    data.copy(sb, 0, 0, 10);

    store.push(sb);
  }
});
```

----------------------------------------

TITLE: Overriding Module Cache with require.cache - JavaScript
DESCRIPTION: This code shows how to replace or mock built-in modules by manually modifying require.cache. By assigning a custom object as the exports for a module key, further require() calls will receive the custom version instead of the real module. Native add-ons (such as compiled .node files) cannot be reloaded this way, and special care should be taken to avoid conflicts.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_21

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert');
const realFs = require('node:fs');

const fakeFs = {};
require.cache.fs = { exports: fakeFs };

assert.strictEqual(require('fs'), fakeFs);
assert.strictEqual(require('node:fs'), realFs);
```

----------------------------------------

TITLE: Generating a Diagnostic Report via API in JavaScript
DESCRIPTION: This code snippet shows how to programmatically generate a diagnostic report using the Node.js API. It demonstrates writing a report to a file and handling errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
process.report.writeReport();

process.report.writeReport('./foo.json');

try {
  process.chdir('/non-existent-path');
} catch (err) {
  process.report.writeReport(err);
}
// Any other code

try {
  process.chdir('/non-existent-path');
} catch (err) {
  process.report.writeReport(filename, err);
}
// Any other code
```

----------------------------------------

TITLE: Testing ICU Internationalization
DESCRIPTION: JavaScript code snippet to test ICU internationalization functionality by formatting a date in Spanish.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/maintaining/maintaining-icu.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
new Intl.DateTimeFormat('es', { month: 'long' }).format(new Date(9E8));
```

----------------------------------------

TITLE: Retrieving Call Sites with util.getCallSites (MJS)
DESCRIPTION: Demonstrates how to import and use `util.getCallSites` in an ES Module environment. The example defines nested functions, retrieves the call site objects, and iterates through them to print details like function name, script name, line number, and column number.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_8

LANGUAGE: mjs
CODE:
```
import { getCallSites } from 'node:util';

function exampleFunction() {
  const callSites = getCallSites();

  console.log('Call Sites:');
  callSites.forEach((callSite, index) => {
    console.log(`CallSite ${index + 1}:`);
    console.log(`Function Name: ${callSite.functionName}`);
    console.log(`Script Name: ${callSite.scriptName}`);
    console.log(`Line Number: ${callSite.lineNumber}`);
    console.log(`Column Number: ${callSite.column}`);
  });
  // CallSite 1:
  // Function Name: exampleFunction
  // Script Name: /home/example.js
  // Line Number: 5
  // Column Number: 26

  // CallSite 2:
  // Function Name: anotherFunction
  // Script Name: /home/example.js
  // Line Number: 22
  // Column Number: 3

  // ...
}

// A function to simulate another stack layer
function anotherFunction() {
  exampleFunction();
}

anotherFunction();
```

----------------------------------------

TITLE: Importing Deprecated Module (ESM) - JavaScript
DESCRIPTION: A simple example using ES module syntax to import the deprecated `node:sys` module. This code is used in the documentation to illustrate how the `--disable-warning` flag can selectively suppress deprecation warnings by code or type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_16

LANGUAGE: mjs
CODE:
```
import sys from 'node:sys';
```

----------------------------------------

TITLE: Executing Node.js with Stack Trace Limit Bash
DESCRIPTION: This command demonstrates how to execute a Node.js script using the bash shell while setting the `--stack-trace-limit` flag. It sets the limit to 12 and then uses the `-p` (print) and `-e` (evaluate) flags to execute a JavaScript expression that prints the effective value of `Error.stackTraceLimit`, confirming the flag's effect.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_41

LANGUAGE: bash
CODE:
```
node --stack-trace-limit=12 -p -e "Error.stackTraceLimit" # prints 12
```

----------------------------------------

TITLE: Converting Duplex Stream to Web Streams (CommonJS)
DESCRIPTION: Example demonstrating how to convert a Duplex stream to Web Streams using CommonJS syntax
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_67

LANGUAGE: javascript
CODE:
```
const { Duplex } = require('node:stream');

const duplex = Duplex({
  objectMode: true,
  read() {
    this.push('world');
    this.push(null);
  },
  write(chunk, encoding, callback) {
    console.log('writable', chunk);
    callback();
  },
});

const { readable, writable } = Duplex.toWeb(duplex);
writable.getWriter().write('hello');

readable.getReader().read().then((result) => {
  console.log('readable', result.value);
});
```

----------------------------------------

TITLE: Getting JavaScript Undefined Value in Node-API
DESCRIPTION: Function to retrieve the JavaScript undefined value singleton.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_126

LANGUAGE: c
CODE:
```
napi_status napi_get_undefined(napi_env env, napi_value* result)
```

----------------------------------------

TITLE: Opening a File as a Blob using ES Modules (mjs) in Node.js
DESCRIPTION: This snippet demonstrates how to use the `fs.openAsBlob` function within an ES Module context to asynchronously open a file specified by path and represent its contents as a Blob object. It then shows how to access the Blob's data using `arrayBuffer()` and `stream()`. Requires the `node:fs` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_66

LANGUAGE: mjs
CODE:
```
import { openAsBlob } from 'node:fs';

const blob = await openAsBlob('the.file.txt');
const ab = await blob.arrayBuffer();
blob.stream();
```

----------------------------------------

TITLE: Expanding CLI Configuration Shorthands with npm - Bash
DESCRIPTION: Demonstrates how the npm CLI automatically expands partially-typed configuration flags and shorthands into their full form. The first snippet shows how '\--par' becomes '\--parseable' when supplied unambiguously. Useful for showcasing CLI argument convenience. No dependencies are required aside from npm being installed. Accepts npm subcommands and their options, outputs expanded form or errors if ambiguous.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/config.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm ls --par
# same as:
npm ls --parseable
```

----------------------------------------

TITLE: Combining setHeader and writeHead - Node.js HTTP/2 JavaScript
DESCRIPTION: Illustrates the interaction when using both `response.setHeader()` and `response.writeHead()`. Headers set with `setHeader` are merged with those provided in `writeHead`, but the headers passed directly to `writeHead` are given precedence in case of conflicts for the same header name.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_67

LANGUAGE: javascript
CODE:
```
const server = http2.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html; charset=utf-8');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });
  res.end('ok');
});
```

----------------------------------------

TITLE: Querying npm packages with search() - JavaScript
DESCRIPTION: Provides an example usage of the async search function from libnpmsearch for querying npm packages. The snippet calls search with a string term and expects an array of result objects matching the documented format. The function can accept optional parameters such as limits and sorting behavior. Intended for JavaScript or Node.js environments capable of await syntax.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmsearch/README.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
await search('libnpm')
=>
[
  {
    name: 'libnpm',
    description: 'programmatic npm API',
    ...etc
  },
  {
    name: 'libnpmsearch',
    description: 'Programmatic API for searching in npm and compatible registries',
    ...etc
  },
  ...more
]

```

----------------------------------------

TITLE: Creating Plain JavaScript Object in Node-API (C)
DESCRIPTION: Allocates a default JavaScript Object, equivalent to 'new Object()' in JavaScript. Takes the environment and returns a napi_value representing the created object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_83

LANGUAGE: c
CODE:
```
napi_status napi_create_object(napi_env env, napi_value* result)
```

----------------------------------------

TITLE: Node.js Fatal JavaScript OOM C Stack Trace
DESCRIPTION: A C stack trace from a Node.js crash caused by a fatal JavaScript out-of-memory error during garbage collection while deserializing data. The trace shows the call stack at the time of the crash, which can be used to diagnose the memory issue.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/tools/testrunner/testproc/stack_utils/testdata/analyze_crash/deserialization.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
<--- Last few GCs --->


<--- JS stacktrace --->


#
# Fatal javascript OOM in GC during deserialization
#

Received signal 6

==== C stack trace ===============================

 [0x559eb24c1167]
 [0x7f27da846980]
 [0x7f27d9ecbfb7]
 [0x7f27d9ecd921]
 [0x559eb24bec92]
 [0x559eb192b71f]
 [0x559eb192b685]
 [0x559eb1abd785]
 [0x559eb1abc125]
 [0x559eb1ac6bfb]
 [0x559eb1ac6c91]
 [0x559eb1e5f0c8]
 [0x559eb1e604a0]
 [0x559eb1e5f99e]
 [0x559eb1ac53c8]
 [0x559eb1e6dbf8]
 [0x559eb1a5eb21]
 [0x559eb1a5ef79]
 [0x559eb1e6b9a9]
 [0x559eb194c069]
 [0x559eb194c23d]
 [0x559eb1919e3a]
 [0x559eb1919da8]
 [0x559eb24bf710]
 [0x7f27da83b6db]
 [0x7f27d9fae71f]
[end of stack trace]
Aborted (core dumped)
```

----------------------------------------

TITLE: Swapping 16-bit Buffer Byte Order - Node.js
DESCRIPTION: Shows the `buf.swap16()` method, which swaps the byte order of the buffer's contents in-place, interpreting the buffer as an array of unsigned 16-bit integers. It requires the buffer length to be a multiple of 2 and can be used for UTF-16 endianness conversion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_73

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: <Buffer 01 02 03 04 05 06 07 08>

buf1.swap16();

console.log(buf1);
// Prints: <Buffer 02 01 04 03 06 05 08 07>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap16();
// Throws ERR_INVALID_BUFFER_SIZE.
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: <Buffer 01 02 03 04 05 06 07 08>

buf1.swap16();

console.log(buf1);
// Prints: <Buffer 02 01 04 03 06 05 08 07>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap16();
// Throws ERR_INVALID_BUFFER_SIZE.
```

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from('This is little-endian UTF-16', 'utf16le');
buf.swap16(); // Convert to big-endian UTF-16 text.
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('This is little-endian UTF-16', 'utf16le');
buf.swap16(); // Convert to big-endian UTF-16 text.
```

----------------------------------------

TITLE: Creating Connected Duplex Streams using stream.duplexPair in Node.js (JS)
DESCRIPTION: This snippet demonstrates the `stream.duplexPair()` utility function, which returns an array containing two interconnected `Duplex` streams (`sideA` and `sideB`). Data written to one stream becomes readable on the other, and vice-versa, mimicking a bidirectional communication channel like a network socket. This function requires the Node.js `stream` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_55

LANGUAGE: js
CODE:
```
const [ sideA, sideB ] = duplexPair();
```

----------------------------------------

TITLE: Exporting npm_config_devdir Environment Variable on Unix with Bash
DESCRIPTION: This bash snippet demonstrates how to set the npm_config_devdir environment variable in Unix-like systems. Setting this variable tells node-gyp to use a specific SDK download directory when building. The example assigns '/tmp/.gyp' to the variable using the export command, which makes it available to child processes such as node-gyp. The snippet requires a Unix shell (bash/sh) environment.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/README.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
export npm_config_devdir=/tmp/.gyp
```

----------------------------------------

TITLE: Serializing URL Objects to JSON - WHATWG URL API - JavaScript
DESCRIPTION: Demonstrates how JSON serialization of URL objects works in Node.js. By placing URL instances in an array and using JSON.stringify, the object's .toJSON method is automatically called and the resulting value is the serialized URL string. No dependencies aside from the built-in URL object; the input is a list of URLs, output is their JSON string representation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_29

LANGUAGE: JavaScript
CODE:
```
const myURLs = [
  new URL('https://www.example.com'),
  new URL('https://test.example.org'),
];
console.log(JSON.stringify(myURLs));
// Prints ["https://www.example.com/","https://test.example.org/"]

```

----------------------------------------

TITLE: New File System Promise-based Watch Implementation
DESCRIPTION: Addition of fsPromises.watch() method, providing a promise-based API for file system watching functionality. This represents a SEMVER-MINOR change to the fs module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
fsPromises.watch()
```

----------------------------------------

TITLE: Assigning Port from Floating-Point String - WHATWG URL API - JavaScript
DESCRIPTION: Demonstrates how floating-point values or scientific notation are handled when assigned to the port property of a URL object in Node.js. The leading integer up to a decimal point is parsed as the port. This example shows that only the integer portion is used for port assignment. No dependencies are required, input is a float or exponent notation, and output is the integer portion extracted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_24

LANGUAGE: JavaScript
CODE:
```
myURL.port = 4.567e21;
console.log(myURL.port);
// Prints 4 (because it is the leading number in the string '4.567e21')

```

----------------------------------------

TITLE: Returning JavaScript Objects from C++ Addons (C++)
DESCRIPTION: Presents a C++ Node.js addon that constructs and returns a JavaScript object with a property named 'msg', which echoes the string input argument. The factory uses V8 object-creation and property-setting conventions, and replaces module.exports to expose the function directly. Expects a single argument; requires V8 and node-gyp for building.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_17

LANGUAGE: cpp
CODE:
```
// addon.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n\n  Local<Object> obj = Object::New(isolate);\n  obj->Set(context,\n           String::NewFromUtf8(isolate,\n                               \"msg\").ToLocalChecked(),\n                               args[0]->ToString(context).ToLocalChecked())\n           .FromJust();\n\n  args.GetReturnValue().Set(obj);\n}\n\nvoid Init(Local<Object> exports, Local<Object> module) {\n  NODE_SET_METHOD(module, \"exports\", CreateObject);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\n
```

----------------------------------------

TITLE: SEA Configuration with Assets Example
DESCRIPTION: JSON configuration example showing how to include assets in a Single Executable Application by specifying file paths that will be bundled into the preparation blob.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_16

LANGUAGE: json
CODE:
```
{
  "main": "/path/to/bundled/script.js",
  "output": "/path/to/write/the/generated/blob.blob",
  "assets": {
    "a.jpg": "/path/to/a.jpg",
    "b.txt": "/path/to/b.txt"
  }
}
```

----------------------------------------

TITLE: Action Handler Implementation in Commander.js
DESCRIPTION: Shows how to implement an action handler that processes command arguments and options, including debug mode and title formatting.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
program
  .argument('<name>')
  .option('-t, --title <honorific>', 'title to use before name')
  .option('-d, --debug', 'display some debugging')
  .action((name, options, command) => {
    if (options.debug) {
      console.error('Called %s with options %o', command.name(), options);
    }
    const title = options.title ? `${options.title} ` : '';
    console.log(`Thank-you ${title}${name}`);
  });
```

----------------------------------------

TITLE: Inspecting ArrayBuffers in Node.js - JavaScript
DESCRIPTION: These snippets illustrate the creation and inspection of ArrayBuffers in JavaScript, showing metadata such as byteLength, maxByteLength, resizable, and detached status. The code serves as sample output from Node.js inspectors when a developer queries a newly constructed ArrayBuffer, such as those from 'new Uint8Array().buffer' and 'new Int32Array(100).buffer'. Key parameters include the initial size of the buffer, with outputs summarizing both the buffer's properties and its memory status.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_49

LANGUAGE: JavaScript
CODE:
```
{
    result : {
        className : ArrayBuffer
        description : ArrayBuffer(0)
        objectId : <objectId>
        preview : {
            description : ArrayBuffer(0)
            overflow : false
            properties : [
                [0] : {
                    name : byteLength
                    type : number
                    value : 0
                }
                [1] : {
                    name : maxByteLength
                    type : number
                    value : 0
                }
                [2] : {
                    name : resizable
                    type : boolean
                    value : false
                }
                [3] : {
                    name : detached
                    type : boolean
                    value : false
                }
            ]
            subtype : arraybuffer
            type : object
        }
        subtype : arraybuffer
        type : object
    }
}

```

LANGUAGE: JavaScript
CODE:
```
{
    result : {
        className : ArrayBuffer
        description : ArrayBuffer(400)
        objectId : <objectId>
        preview : {
            description : ArrayBuffer(400)
            overflow : false
            properties : [
                [0] : {
                    name : byteLength
                    type : number
                    value : 400
                }
                [1] : {
                    name : maxByteLength
                    type : number
                    value : 400
                }
                [2] : {
                    name : resizable
                    type : boolean
                    value : false
                }
                [3] : {
                    name : detached
                    type : boolean
                    value : false
                }
            ]
            subtype : arraybuffer
            type : object
        }
        subtype : arraybuffer
        type : object
    }
}

```

----------------------------------------

TITLE: Basic NPM Query Syntax
DESCRIPTION: Shows the basic command syntax for npm query using CSS selectors
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-query.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm query <selector>
```

----------------------------------------

TITLE: Output: console.log with %s formatter and object with toString
DESCRIPTION: Shows the structured argument list captured when calling `console.log('%s', {toString() { return 'Test object'; }})`. The object's toString() method is called, yielding 'Test object', which is used by the %s formatter.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-formatter-expected.txt#2025-04-23_snippet_15

LANGUAGE: text
CODE:
```
log[
    [0] : {
        type : string
        value : %s
    }
    [1] : {
        type : string
        value : Test object
    }
]
```

----------------------------------------

TITLE: Using util.types.isStringObject to check for String objects
DESCRIPTION: Shows how to use util.types.isStringObject() to distinguish between primitive strings and String objects created with the String constructor.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_95

LANGUAGE: javascript
CODE:
```
util.types.isStringObject('foo');  // Returns false
util.types.isStringObject(new String('foo'));   // Returns true
```

----------------------------------------

TITLE: Referencing and Unreferencing Thread-Safe Functions in Node-API
DESCRIPTION: Use napi_ref_threadsafe_function() and napi_unref_threadsafe_function() to control whether a thread-safe function keeps the event loop alive. Referenced functions prevent the event loop from exiting, while unreferenced ones do not.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_211

LANGUAGE: C
CODE:
```
napi_status napi_ref_threadsafe_function(napi_env env, napi_threadsafe_function func);

napi_status napi_unref_threadsafe_function(napi_env env, napi_threadsafe_function func);
```

----------------------------------------

TITLE: Testing Intl.Locale Construction and Property Methods - JavaScript
DESCRIPTION: Covers creation and property/method inspection on Intl.Locale objects for properties such as baseName, calendar, calendars, caseFirst, and more, as well as maximize/minimize and toString methods. Requires ECMAScript Intl.Locale support and a valid locale string. Outputs object properties and string representations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-without-side-effects-i18n-expected.txt#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
new Intl.Locale("en-US")
someGlobalLocale.baseName
someGlobalLocale.calendar
someGlobalLocale.calendars
someGlobalLocale.caseFirst
someGlobalLocale.collation
someGlobalLocale.hourCycle
someGlobalLocale.hourCycles
someGlobalLocale.language
someGlobalLocale.numberingSystem
someGlobalLocale.numberingSystems
someGlobalLocale.numeric
someGlobalLocale.region
someGlobalLocale.script
someGlobalLocale.textInfo
someGlobalLocale.timeZones
someGlobalLocale.weekInfo
someGlobalLocale.maximize()
someGlobalLocale.minimize()
someGlobalLocale.toString()
```

----------------------------------------

TITLE: Initializing RSA Public Exponent in JavaScript
DESCRIPTION: Demonstrates how to create a Uint8Array for the RSA public exponent. This is typically set to 65537 (0x10001) unless there's a specific reason to use a different value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
new Uint8Array([1, 0, 1])
```

----------------------------------------

TITLE: Converting JavaScript BigInt to C Uint64 in N-API
DESCRIPTION: Converts a JavaScript BigInt to a C uint64_t primitive, with potential truncation indicated by lossless flag. Returns napi_bigint_expected if input is not a BigInt.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_114

LANGUAGE: c
CODE:
```
napi_status napi_get_value_bigint_uint64(napi_env env,
                                        napi_value value,
                                        uint64_t* result,
                                        bool* lossless)
```

----------------------------------------

TITLE: Using Trace Events with ES Modules
DESCRIPTION: Demonstrates how to use trace_events module with ES Modules to enable and disable tracing for specific categories.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tracing.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { createTracing } from 'node:trace_events';
const tracing = createTracing({ categories: ['node.perf'] });
tracing.enable();  // Enable trace event capture for the 'node.perf' category

// do work

tracing.disable();  // Disable trace event capture for the 'node.perf' category
```

----------------------------------------

TITLE: Testing Promise Rejection in JavaScript
DESCRIPTION: This snippet tests promise rejection behavior. It creates a promise that throws an exception in its executor function, then attaches resolve and reject handlers to observe the outcome.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
function fun() { eval("throw 'rejection';") }
var p = new Promise(function(res, rej) { fun(); res(); });
var r;
p.then(() => { r = 'resolved'; }, (e) => { r = 'rejected' + e; });
```

----------------------------------------

TITLE: Measuring HTTP Round-Trip Time in CommonJS Format
DESCRIPTION: This example demonstrates how to measure the time taken for an HTTP request-response cycle using the PerformanceObserver API in CommonJS format. It creates an HTTP server, makes a request to it, and logs the performance metrics for both outgoing and incoming messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
'use strict';
const { PerformanceObserver } = require('node:perf_hooks');
const http = require('node:http');

const obs = new PerformanceObserver((items) => {
  items.getEntries().forEach((item) => {
    console.log(item);
  });
});

obs.observe({ entryTypes: ['http'] });

const PORT = 8080;

http.createServer((req, res) => {
  res.end('ok');
}).listen(PORT, () => {
  http.get(`http://127.0.0.1:${PORT}`);
});
```

----------------------------------------

TITLE: Subscribing to Tracing Channel Events - Node.js (CommonJS)
DESCRIPTION: Shows how to subscribe multiple handlers to a tracing channel in CommonJS, registering callbacks for start, end, asyncStart, asyncEnd, and error events. Uses diagnostics_channel.tracingChannel, grouping related trace lifecycle events for streamlined diagnostics. Requires 'node:diagnostics_channel' v18.19.0 or higher.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_29

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');\n\nconst channels = diagnostics_channel.tracingChannel('my-channel');\n\nchannels.subscribe({\n  start(message) {\n    // Handle start message\n  },\n  end(message) {\n    // Handle end message\n  },\n  asyncStart(message) {\n    // Handle asyncStart message\n  },\n  asyncEnd(message) {\n    // Handle asyncEnd message\n  },\n  error(message) {\n    // Handle error message\n  },\n});
```

----------------------------------------

TITLE: Testing Promise.race Assertions in JavaScript
DESCRIPTION: Series of test assertions validating Promise.race behavior including empty parameters, array with multiple promises, array with non-promise values, and handling of undefined values.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/Promise-static-race-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
PASS result is undefined
PASS Promise.race() is rejected.
PASS Promise.race({}) is rejected.
PASS Promise.race([p4, p1, p6]) is fulfilled.
PASS result is "p1"
PASS Promise.race([p4, p6, p1]) is rejected.
PASS result is "p6"
PASS Promise.race([p9]) is fulfilled.
PASS result is "p2"
PASS Promise.race([p4,,]) is fulfilled.
PASS result is undefined
PASS Promise.race([p4,42]) is fulfilled.
PASS result is 42
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Testing Regular Expression Matching with UTF-8 and UTF-16 Characters in JavaScript
DESCRIPTION: This snippet tests regular expression matching with UTF-8 and UTF-16 characters. It includes a test for matching one or two characters including a non-ASCII character, and a test for matching an empty string.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/regexp-non-bmp-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
PASS /.{1,2}/.exec("!!" + String.fromCharCode(0xA1)).toString().length is 2
PASS /./.exec("") is null
```

----------------------------------------

TITLE: Basic Usage of StringDecoder with ES Modules
DESCRIPTION: Demonstrates the basic use of the StringDecoder class to decode Buffer objects containing UTF-8 encoded characters into strings using ES Modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/string_decoder.md#2025-04-23_snippet_2

LANGUAGE: mjs
CODE:
```
import { StringDecoder } from 'node:string_decoder';
import { Buffer } from 'node:buffer';
const decoder = new StringDecoder('utf8');

const cent = Buffer.from([0xC2, 0xA2]);
console.log(decoder.write(cent)); // Prints: ¢

const euro = Buffer.from([0xE2, 0x82, 0xAC]);
console.log(decoder.write(euro)); // Prints: €
```

----------------------------------------

TITLE: Publishing a Package with libnpmpublish and pacote - JavaScript
DESCRIPTION: This snippet illustrates how to publish an npm package from source code using libnpmpublish in conjunction with pacote for manifest and tarball generation. Required dependencies include libnpmpublish and pacote (install via npm). Key parameters are the path to source code, authentication token, and an optional custom npmVersion string. Inputs are a valid package source directory, with outputs being a published package in the registry. Ensure Node.js and required libraries are installed. Limitations include needing valid authentication and registry access.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmpublish/README.md#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
// note that pacote.manifest() and pacote.tarball() can also take
// any spec that npm can install.  a folder shown here, since that's
// far and away the most common use case.
const path = '/a/path/to/your/source/code'
const pacote = require('pacote') // see: http://npm.im/pacote
const manifest = await pacote.manifest(path)
const tarData = await pacote.tarball(path)
await libpub.publish(manifest, tarData, {
  npmVersion: 'my-pub-script@1.0.2',
  token: 'my-auth-token-here'
}, opts)
// Package has been published to the npm registry.
```

----------------------------------------

TITLE: Testing Number.toPrecision() with Precision 2 (Rounding and Decimal)
DESCRIPTION: Tests the `toPrecision()` method on 0.999 with a precision argument of 2. It verifies that the number is rounded and formatted to "1.0".
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/number-toprecision-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
(0.999).toPrecision(2)
```

----------------------------------------

TITLE: Retrieving Report Directory in Node.js
DESCRIPTION: This snippet shows how to get the directory where diagnostic reports are written using the process.report.directory property in both ECMAScript modules and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_73

LANGUAGE: JavaScript
CODE:
```
import { report } from 'node:process';

console.log(`Report directory is ${report.directory}`);
```

LANGUAGE: JavaScript
CODE:
```
const { report } = require('node:process');

console.log(`Report directory is ${report.directory}`);
```

----------------------------------------

TITLE: Viewing Array Field Values
DESCRIPTION: Shows how to retrieve all values from an array field using npm view command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-view.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm view express contributors.email
```

----------------------------------------

TITLE: Checking for Header Existence using hasHeader - Node.js HTTP/2 JavaScript
DESCRIPTION: Illustrates the use of the `response.hasHeader(name)` method to check if a specific header is currently set in the outgoing headers. The header name matching is case-insensitive, and the method returns a boolean value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_64

LANGUAGE: javascript
CODE:
```
const hasContentType = response.hasHeader('content-type');
```

----------------------------------------

TITLE: Managing Maximum Listeners for EventEmitter and EventTarget (ES Modules)
DESCRIPTION: Demonstrates how to get and set the maximum number of listeners for both EventEmitter and EventTarget instances using getMaxListeners() and setMaxListeners() functions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_38

LANGUAGE: JavaScript
CODE:
```
import { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';

{
  const ee = new EventEmitter();
  console.log(getMaxListeners(ee)); // 10
  setMaxListeners(11, ee);
  console.log(getMaxListeners(ee)); // 11
}
{
  const et = new EventTarget();
  console.log(getMaxListeners(et)); // 10
  setMaxListeners(11, et);
  console.log(getMaxListeners(et)); // 11
}
```

----------------------------------------

TITLE: Using Relative Paths with Node.js Permission Model
DESCRIPTION: Demonstration of using relative paths with the --allow-fs-read flag in Node.js permission model to restrict file system access.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_13

LANGUAGE: console
CODE:
```
node --experimental-permission --allow-fs-read=./index.js
```

----------------------------------------

TITLE: Creating Buffer from Object with Symbol.toPrimitive
DESCRIPTION: Illustrates creating a Buffer from an object that defines a `Symbol.toPrimitive` method. This method is invoked with the hint 'string', and its string return value is then used by `Buffer.from()` to create the buffer bytes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_33

LANGUAGE: Node.js (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

class Foo {
  [Symbol.toPrimitive]() {
    return 'this is a test';
  }
}

const buf = Buffer.from(new Foo(), 'utf8');
// Prints: <Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74>
```

LANGUAGE: Node.js (CJS)
CODE:
```
const { Buffer } = require('node:buffer');

class Foo {
  [Symbol.toPrimitive]() {
    return 'this is a test';
  }
}

const buf = Buffer.from(new Foo(), 'utf8');
// Prints: <Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74>
```

----------------------------------------

TITLE: Adding Custom Help Command in Commander.js
DESCRIPTION: Demonstrates how to explicitly turn on and customize the help command by supplying the name and description.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_32

LANGUAGE: javascript
CODE:
```
program.addHelpCommand('assist [command]', 'show assistance');
```

----------------------------------------

TITLE: Memory Management Example
DESCRIPTION: Demonstrates proper ownership transfer using std::unique_ptr.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/cpp-style-guide.md#2025-04-23_snippet_6

LANGUAGE: cpp
CODE:
```
std::unique_ptr<Foo> FooFactory();
void FooConsumer(std::unique_ptr<Foo> ptr);
```

----------------------------------------

TITLE: Checking Crypto Support with CommonJS
DESCRIPTION: Shows how to safely check if crypto support is available in Node.js using CommonJS require within a try-catch block.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
let crypto;
try {
  crypto = require('node:crypto');
} catch (err) {
  console.error('crypto support is disabled!');
}
```

----------------------------------------

TITLE: NPM Profile Command Syntax
DESCRIPTION: Core command syntax for managing npm profile settings, including enabling/disabling 2FA and getting/setting profile properties.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-profile.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm profile enable-2fa [auth-only|auth-and-writes]
npm profile disable-2fa
npm profile get [<key>]
npm profile set <key> <value>
```

----------------------------------------

TITLE: Catching Promise Rejection in Try-Catch Block
DESCRIPTION: An async function that uses try-catch to handle promise rejections. Used to verify the system correctly predicts caught rejections.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-promise-catch-prediction-expected.txt#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
awaitAndCreateInTry (catch-prediction.js:189:10)
```

----------------------------------------

TITLE: Setting ORIGIN via createSecureServer options
DESCRIPTION: Demonstrates how to advertise origins by providing an `origins` array in the options when creating a secure HTTP/2 server using `http2.createSecureServer()`. This automatically sends an ORIGIN frame upon session establishment. Requires using `createSecureServer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
import { createSecureServer } from 'node:http2';
const options = getSecureOptionsSomehow();
options.origins = ['https://example.com', 'https://example.org'];
const server = createSecureServer(options);
server.on('stream', (stream) => {
  stream.respond();
  stream.end('ok');
});
```

LANGUAGE: JavaScript
CODE:
```
const http2 = require('node:http2');
const options = getSecureOptionsSomehow();
options.origins = ['https://example.com', 'https://example.org'];
const server = http2.createSecureServer(options);
server.on('stream', (stream) => {
  stream.respond();
  stream.end('ok');
});
```

----------------------------------------

TITLE: Handling 'push' Event on ClientHttp2Stream - JavaScript
DESCRIPTION: Shows how to attach a listener for the 'push' event on a `ClientHttp2Stream`. This event is emitted when response headers for a Server Push stream are received from the connected peer. The listener receives the push headers and flags.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_20

LANGUAGE: js
CODE:
```
stream.on('push', (headers, flags) => {
  console.log(headers);
});
```

----------------------------------------

TITLE: Tracing Child Process Creation in Node.js
DESCRIPTION: Demonstrates how to subscribe to the 'child_process' event, which is emitted when a new process is created. The event provides access to the ChildProcess object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_46

LANGUAGE: javascript
CODE:
```
child_process
```

----------------------------------------

TITLE: Creating a DiffieHellmanGroup Instance in JavaScript
DESCRIPTION: This snippet shows how to create a DiffieHellmanGroup instance using a well-known modp group. It demonstrates the usage for both ECMAScript modules (mjs) and CommonJS modules (cjs).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_19

LANGUAGE: JavaScript
CODE:
```
const { createDiffieHellmanGroup } = await import('node:crypto');
const dh = createDiffieHellmanGroup('modp16');
```

LANGUAGE: JavaScript
CODE:
```
const { createDiffieHellmanGroup } = require('node:crypto');
const dh = createDiffieHellmanGroup('modp16');
```

----------------------------------------

TITLE: Using libnpmversion Programmatically in Node.js
DESCRIPTION: Demonstrates how to import and use the `libnpmversion` library in a Node.js script. The `npmVersion` function takes a version argument (semver string, increment type like 'major', 'minor', 'patch', or 'from-git') and an options object to control behavior like target path, allowing same version, prerelease identifiers, Git tagging/committing/signing, forcing operations, ignoring lifecycle scripts, specifying a shell, and customizing commit messages. It returns a promise that resolves with the new package version.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmversion/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
```js
const npmVersion = require('libnpmversion')

// argument can be one of:
// - any semver version string (set to that exact version)
// - 'major', 'minor', 'patch', 'pre{major,minor,patch}' (increment at
//   that value)
// - 'from-git' (set to the latest semver-lookin git tag - this skips
//   gitTagVersion, but will still sign if asked)
npmVersion(arg, {
  path: '/path/to/my/pkg', // defaults to cwd

  allowSameVersion: false, // allow tagging/etc to the current version
  preid: '', // when arg=='pre', define the prerelease string, like 'beta' etc.
  tagVersionPrefix: 'v', // tag as 'v1.2.3' when versioning to 1.2.3
  commitHooks: true, // default true, run git commit hooks, default true
  gitTagVersion: true, // default true, tag the version
  signGitCommit: false, // default false, gpg sign the git commit
  signGitTag: false, // default false, gpg sign the git tag
  force: false, // push forward recklessly if any problems happen
  ignoreScripts: false, // do not run pre/post/version lifecycle scripts
  scriptShell: '/bin/bash', // shell to run lifecycle scripts in
  message: 'v%s', // message for tag and commit, replace %s with the version
}).then(newVersion => {
  console.error('version updated!', newVersion)
})
```
```

----------------------------------------

TITLE: Registering Module Hooks with ES Modules
DESCRIPTION: Example showing how to register module customization hooks using ES Modules syntax. This demonstrates the basic setup for registering hooks that will be used to customize module loading behavior.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
// register-hooks.js
// This file can only be require()-ed if it doesn't contain top-level await.
// Use module.register() to register asynchronous hooks in a dedicated thread.
import { register } from 'node:module';
register('./hooks.mjs', import.meta.url);
```

----------------------------------------

TITLE: Authenticated ProxyAgent Request
DESCRIPTION: Example of using ProxyAgent with authentication using either Bearer token or Basic auth.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/ProxyAgent.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import { setGlobalDispatcher, request, ProxyAgent } from 'undici';

const proxyAgent = new ProxyAgent({
  uri: 'my.proxy.server',
  // token: 'Bearer xxxx'
  token: `Basic ${Buffer.from('username:password').toString('base64')}`
});
setGlobalDispatcher(proxyAgent);

const { statusCode, body } = await request('http://localhost:3000/foo');

console.log('response received', statusCode); // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')); // data foo
}
```

----------------------------------------

TITLE: Asynchronous CoffeeScript transpilation hooks
DESCRIPTION: An implementation of the 'load' hook that enables importing CoffeeScript files directly in Node.js. It identifies CoffeeScript files by extension, transpiles them to JavaScript, and determines the module format from package.json.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_39

LANGUAGE: javascript
CODE:
```
// coffeescript-hooks.mjs
import { readFile } from 'node:fs/promises';
import { findPackageJSON } from 'node:module';
import coffeescript from 'coffeescript';

const extensionsRegex = /\.(coffee|litcoffee|coffee\.md)$/;

export async function load(url, context, nextLoad) {
  if (extensionsRegex.test(url)) {
    // CoffeeScript files can be either CommonJS or ES modules. Use a custom format
    // to tell Node.js not to detect its module type.
    const { source: rawSource } = await nextLoad(url, { ...context, format: 'coffee' });
    // This hook converts CoffeeScript source code into JavaScript source code
    // for all imported CoffeeScript files.
    const transformedSource = coffeescript.compile(rawSource.toString(), url);

    // To determine how Node.js would interpret the transpilation result,
    // search up the file system for the nearest parent package.json file
    // and read its "type" field.
    return {
      format: await getPackageType(url),
      shortCircuit: true,
      source: transformedSource,
    };
  }

  // Let Node.js handle all other URLs.
  return nextLoad(url, context);
}

async function getPackageType(url) {
  // `url` is only a file path during the first iteration when passed the
  // resolved url from the load() hook
  // an actual file path from load() will contain a file extension as it's
  // required by the spec
  // this simple truthy check for whether `url` contains a file extension will
  // work for most projects but does not cover some edge-cases (such as
  // extensionless files or a url ending in a trailing space)
  const pJson = findPackageJSON(url);

  return readFile(pJson, 'utf8')
    .then(JSON.parse)
    .then((json) => json?.type)
    .catch(() => undefined);
}
```

----------------------------------------

TITLE: Writing Signed 16-bit Integer Big-Endian to Buffer (Node.js)
DESCRIPTION: This snippet demonstrates using `buf.writeInt16BE()` to write a signed 16-bit integer into a Buffer at a specified offset using big-endian byte order. The value must be a valid signed 16-bit integer and is written as two's complement.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_89

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(2);

buf.writeInt16BE(0x0102, 0);

console.log(buf);
// Prints: <Buffer 01 02>
```

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(2);

buf.writeInt16BE(0x0102, 0);

console.log(buf);
// Prints: <Buffer 01 02>
```

----------------------------------------

TITLE: Comparing Specific Package Versions
DESCRIPTION: Example of comparing two specific versions of the current package using semver version numbers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-diff.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm diff --diff=1.0.0 --diff=1.1.0
```

----------------------------------------

TITLE: Retrieving Embedded Assets in SEA using node:sea in CJS
DESCRIPTION: Demonstrates how to access assets embedded in a Single Executable Application (SEA) using the `node:sea` module. `getAsset()` retrieves the asset data, returning a copy in an ArrayBuffer or as a decoded string (if encoding is specified). `getAssetAsBlob()` returns a Blob containing the asset data without copying.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_5

LANGUAGE: cjs
CODE:
```
const { getAsset } = require('node:sea');
// Returns a copy of the data in an ArrayBuffer
const image = getAsset('a.jpg');
// Returns a string decoded from the asset as UTF8.
const text = getAsset('b.txt', 'utf8');
// Returns a Blob containing the asset without copying.
const blob = getAssetAsBlob('a.jpg');
```

----------------------------------------

TITLE: Querying System Uptime with Node.js JavaScript
DESCRIPTION: Returns the number of seconds the system has been running using os.uptime(). Recent versions of Node.js ensure the value is an integer even on Windows. This function accepts no arguments and outputs an integer (seconds).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
os.uptime()
```

----------------------------------------

TITLE: Checking Generator Function in JavaScript
DESCRIPTION: Shows how to use util.types.isGeneratorFunction() to check if a value is a generator function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_75

LANGUAGE: javascript
CODE:
```
util.types.isGeneratorFunction(function foo() {});  // Returns false
util.types.isGeneratorFunction(function* foo() {});  // Returns true
```

----------------------------------------

TITLE: Sending HTTP/2 Response with Trailers (MJS)
DESCRIPTION: Shows how to send an HTTP/2 response that includes trailing headers using ES modules. It calls `respond()` with `waitForTrailers: true`, listens for the 'wantTrailers' event, and sends trailers using `sendTrailers()` within the event handler.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_27

LANGUAGE: javascript
CODE:
```
import { createServer } from 'node:http2';
const server = createServer();
server.on('stream', (stream) => {
  stream.respond({ ':status': 200 }, { waitForTrailers: true });
  stream.on('wantTrailers', () => {
    stream.sendTrailers({ ABC: 'some value to send' });
  });
  stream.end('some data');
});
```

----------------------------------------

TITLE: Validating HTTP Header Values in CommonJS
DESCRIPTION: Shows how to use the validateHeaderValue function from Node.js HTTP module using CommonJS. Demonstrates error handling for both undefined values and invalid characters in header values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_65

LANGUAGE: cjs
CODE:
```
const { validateHeaderValue } = require('node:http');

try {
  validateHeaderValue('x-my-header', undefined);
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code === 'ERR_HTTP_INVALID_HEADER_VALUE'); // --> true
  console.error(err.message); // --> 'Invalid value "undefined" for header "x-my-header"'
}

try {
  validateHeaderValue('x-my-header', 'oʊmɪɡə');
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code === 'ERR_INVALID_CHAR'); // --> true
  console.error(err.message); // --> 'Invalid character in header content ["x-my-header"]'
}
```

----------------------------------------

TITLE: Timestamp Modification with fs.utimesSync
DESCRIPTION: Updates file timestamps synchronously. Accepts numeric values, strings, or Date objects for timestamps.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_102

LANGUAGE: javascript
CODE:
```
fs.utimesSync(path, atime, mtime)
```

----------------------------------------

TITLE: Copy and Digest a Rolling Hash - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This ESM example calculates a rolling hash by updating a SHA-256 Hash object with successive values, creating deep copies at each step, and obtaining the hex digest from each copy. Useful for intermediate hash computation without restarting from scratch. Requires async import from 'node:crypto' and Node.js v13.1.0+. The hash can only be copied before calling digest().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_32

LANGUAGE: JavaScript
CODE:
```
// Calculate a rolling hash.
const {
  createHash,
} = await import('node:crypto');

const hash = createHash('sha256');

hash.update('one');
console.log(hash.copy().digest('hex'));

hash.update('two');
console.log(hash.copy().digest('hex'));

hash.update('three');
console.log(hash.copy().digest('hex'));

// Etc.
```

----------------------------------------

TITLE: Handling HTTP Client Request Creation in Node.js
DESCRIPTION: Demonstrates how to subscribe to the 'http.client.request.created' event, which is emitted when a client creates a request object. The event provides access to the http.ClientRequest object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_43

LANGUAGE: javascript
CODE:
```
http.client.request.created
```

----------------------------------------

TITLE: Creating Buffer from Object with valueOf
DESCRIPTION: Shows how `Buffer.from()` can create a Buffer from an object that implements a `valueOf()` method returning a value suitable for Buffer creation, such as a string. The method uses the return value of `valueOf()` to construct the Buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_32

LANGUAGE: Node.js (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from(new String('this is a test'));
// Prints: <Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74>
```

LANGUAGE: Node.js (CJS)
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from(new String('this is a test'));
// Prints: <Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74>
```

----------------------------------------

TITLE: Generating V8 Heap Snapshots in Main and Worker Threads (Node.js)
DESCRIPTION: Demonstrates generating V8 heap snapshots using `v8.writeHeapSnapshot()` in both the main thread and a worker thread. It uses the `worker_threads` module for inter-thread communication to request a snapshot from the worker and receive the resulting filename. Requires `node:v8` and `node:worker_threads`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_11

LANGUAGE: js
CODE:
```
const { writeHeapSnapshot } = require('node:v8');
const {
  Worker,
  isMainThread,
  parentPort,
} = require('node:worker_threads');

if (isMainThread) {
  const worker = new Worker(__filename);

  worker.once('message', (filename) => {
    console.log(`worker heapdump: ${filename}`);
    // Now get a heapdump for the main thread.
    console.log(`main thread heapdump: ${writeHeapSnapshot()}`);
  });

  // Tell the worker to create a heapdump.
  worker.postMessage('heapdump');
} else {
  parentPort.once('message', (message) => {
    if (message === 'heapdump') {
      // Generate a heapdump for the worker
      // and return the filename to the parent.
      parentPort.postMessage(writeHeapSnapshot());
    }
  });
}
```

----------------------------------------

TITLE: Consuming Node.js Addon Functionality in JavaScript (Addition Test) (JavaScript)
DESCRIPTION: Demonstrates usage of the compiled Node.js native addon by requiring it and invoking the exported 'add' function. The snippet expects the native module to have built to './build/Release/addon' and logs the sum of two provided arguments. Useful for unit testing or verifying the correct build and integration of the C++ 'add' addon.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_14

LANGUAGE: js
CODE:
```
// test.js\nconst addon = require('./build/Release/addon');\n\nconsole.log('This should be eight:', addon.add(3, 5));\n
```

----------------------------------------

TITLE: Setting Bug Reporting Information in package.json
DESCRIPTION: Demonstrates how to configure bug reporting information in package.json, including both a URL for the issue tracker and an email address for reporting issues.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "bugs": {
    "url": "https://github.com/npm/example/issues",
    "email": "example@npmjs.com"
  }
}
```

----------------------------------------

TITLE: Writing Single-Precision Float Big-Endian to Buffer (Node.js)
DESCRIPTION: This snippet demonstrates using `buf.writeFloatBE()` to write a single-precision floating-point number into a Buffer at a specified offset using big-endian byte order. The value must be a JavaScript number.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_86

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeFloatBE(0xcafebabe, 0);

console.log(buf);
// Prints: <Buffer 4f 4a fe bb>
```

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeFloatBE(0xcafebabe, 0);

console.log(buf);
// Prints: <Buffer 4f 4a fe bb>
```

----------------------------------------

TITLE: Incrementing Prerelease to Release Version using CLI
DESCRIPTION: Illustrates how to transition a prerelease version to a stable release using the `semver` command-line tool. Using the `-i release` flag on the prerelease version `1.2.4-beta.1` results in the stable version `1.2.4` by removing the prerelease tag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
$ semver 1.2.4-beta.1 -i release
1.2.4
```

----------------------------------------

TITLE: Representing HTTP Headers in JSON
DESCRIPTION: Demonstrates the structure of HTTP message headers as represented in Node.js. Headers are stored as key-value pairs with lowercase keys.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{ "content-length": "123",
  "content-type": "text/plain",
  "connection": "keep-alive",
  "host": "example.com",
  "accept": "*/*" }
```

----------------------------------------

TITLE: Testing JSON.stringify with Cyclic Structures in JavaScript
DESCRIPTION: These functions test how JSON.stringify handles circular references in objects and arrays. They verify that proper exceptions are thrown when cyclic structures are detected.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/run-json-stringify-expected.txt#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        cycleTracker = "";
        return jsonObject.stringify(cyclicObject);
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        cycleTracker = "";
        try { jsonObject.stringify(cyclicObject); } catch(e) { cycleTracker += " -> exception" }
        return cycleTracker;
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        cycleTracker = "";
        return jsonObject.stringify(cyclicArray);
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        cycleTracker = "";
        try { jsonObject.stringify(cyclicArray); } catch { cycleTracker += " -> exception" }
        return cycleTracker;
    }
```

----------------------------------------

TITLE: Writing String Data with FileHandle.write in Node.js
DESCRIPTION: Asynchronously writes a `string` to the file associated with the FileHandle. Allows specifying a file `position` (defaults to current position if null) and `encoding` (default 'utf8'). Rejects if the input is not a string. Returns a Promise fulfilling with an object `{ bytesWritten, buffer }` (where `buffer` is the input string). Unsafe for concurrent calls; use `createWriteStream` instead. Positional writes may not work in append mode on Linux.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_17



----------------------------------------

TITLE: Creating a Hash Digest as a Stream - Node.js Crypto (JavaScript CJS)
DESCRIPTION: This snippet demonstrates creating a SHA-256 hash using the require-based CommonJS format. Data is written to the hash object, which acts as a stream; on the 'readable' event, the digest is read and output as a hexadecimal string. Requires Node.js and the 'node:crypto' module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_27

LANGUAGE: JavaScript
CODE:
```
const {
  createHash,
} = require('node:crypto');

const hash = createHash('sha256');

hash.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = hash.read();
  if (data) {
    console.log(data.toString('hex'));
    // Prints:
    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50
  }
});

hash.write('some data to hash');
hash.end();
```

----------------------------------------

TITLE: Accessing PATH Environment Variable on POSIX
DESCRIPTION: Demonstrates logging the `PATH` environment variable on a POSIX system, which typically uses colons (`:`) as delimiters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_10

LANGUAGE: js
CODE:
```
console.log(process.env.PATH);
// Prints: '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'
```

----------------------------------------

TITLE: Writing Single-Precision Float Little-Endian to Buffer (Node.js)
DESCRIPTION: This snippet demonstrates using `buf.writeFloatLE()` to write a single-precision floating-point number into a Buffer at a specified offset using little-endian byte order. The value must be a JavaScript number.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_87

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeFloatLE(0xcafebabe, 0);

console.log(buf);
// Prints: <Buffer bb fe 4a 4f>
```

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeFloatLE(0xcafebabe, 0);

console.log(buf);
// Prints: <Buffer bb fe 4a 4f>
```

----------------------------------------

TITLE: Handling Partial Multi-byte Characters with StringDecoder in CommonJS
DESCRIPTION: Shows how StringDecoder handles multi-byte UTF-8 characters that span multiple write operations using CommonJS. The decoder buffers incomplete characters until they can be fully decoded.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/string_decoder.md#2025-04-23_snippet_5

LANGUAGE: cjs
CODE:
```
const { StringDecoder } = require('node:string_decoder');
const decoder = new StringDecoder('utf8');

decoder.write(Buffer.from([0xE2]));
decoder.write(Buffer.from([0x82]));
console.log(decoder.end(Buffer.from([0xAC]))); // Prints: €
```

----------------------------------------

TITLE: Manually Entering AsyncLocalStorage Context
DESCRIPTION: These examples demonstrate using `asyncLocalStorage.enterWith(store)` to make the provided store accessible via `getStore()` for the remainder of the current synchronous execution and subsequent asynchronous calls. It contrasts with `run()` by making the context active immediately and synchronously.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_3

LANGUAGE: js
CODE:
```
const store = { id: 1 };
// Replaces previous store with the given store object
asyncLocalStorage.enterWith(store);
asyncLocalStorage.getStore(); // Returns the store object
someAsyncOperation(() => {
  asyncLocalStorage.getStore(); // Returns the same object
});
```

LANGUAGE: js
CODE:
```
const store = { id: 1 };

emitter.on('my-event', () => {
  asyncLocalStorage.enterWith(store);
});
emitter.on('my-event', () => {
  asyncLocalStorage.getStore(); // Returns the same object
});

asyncLocalStorage.getStore(); // Returns undefined
emitter.emit('my-event');
asyncLocalStorage.getStore(); // Returns the same object
```

----------------------------------------

TITLE: Setting Mock Date Time with setTime - node:test - CJS
DESCRIPTION: This snippet illustrates using `context.mock.timers.setTime()` to explicitly set the mocked current Unix timestamp for `Date` objects. It requires the `node:test` and `node:assert` modules and Date mocking must be enabled via `context.mock.timers.enable({ apis: ['Date'] })`. This example uses CJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_59

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('setTime replaces current time', (context) => {
  const now = Date.now();
  const setTime = 1000;
  // Date.now is not mocked
  assert.deepStrictEqual(Date.now(), now);

  context.mock.timers.enable({ apis: ['Date'] });
  context.mock.timers.setTime(setTime);
  // Date.now is now 1000
  assert.strictEqual(Date.now(), setTime);
});
```

----------------------------------------

TITLE: Using tracePromise with diagnostics_channel in JavaScript (CommonJS)
DESCRIPTION: Example of using the tracePromise method to trace an async function with CommonJS. This produces start/end events around the synchronous portion and asyncStart/asyncEnd events for the asynchronous portion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_35

LANGUAGE: javascript
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.tracePromise(async () => {
  // Do something
}, {
  some: 'thing',
});
```

----------------------------------------

TITLE: Checking Float64Array in JavaScript
DESCRIPTION: Demonstrates the use of util.types.isFloat64Array() to check if a value is a built-in Float64Array instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_74

LANGUAGE: javascript
CODE:
```
util.types.isFloat64Array(new ArrayBuffer());  // Returns false
util.types.isFloat64Array(new Uint8Array());  // Returns false
util.types.isFloat64Array(new Float64Array());  // Returns true
```

----------------------------------------

TITLE: Formatting Code Changes using Git and Clang-Format (Shell)
DESCRIPTION: This command utilizes `git clang-format` to automatically format only the lines of code modified in the current Git staging area or commit according to the project's defined C++ coding style (Google C++ Style Guide). It is used to ensure style consistency for contributions without unnecessarily reformatting untouched code. Requires `git` and `clang-format` to be installed and configured.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/CONTRIBUTING.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
git clang-format
```

----------------------------------------

TITLE: Opting Out of Specific Experimental Node-API Features in C
DESCRIPTION: Illustrates how to enable experimental Node-API features using `NAPI_EXPERIMENTAL` while simultaneously opting out of a specific experimental feature (`<FEATURE_NAME>`) that might affect stable APIs, by defining `NODE_API_EXPERIMENTAL_<FEATURE_NAME>_OPT_OUT` before including `node_api.h`. This allows using most experimental features while avoiding potential conflicts with stable parts of the API caused by a specific experiment.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_11

LANGUAGE: c
CODE:
```
#define NAPI_EXPERIMENTAL
#define NODE_API_EXPERIMENTAL_<FEATURE_NAME>_OPT_OUT
#include <node_api.h>
```

----------------------------------------

TITLE: Creating Event Emitter Module with module.exports in Node.js
DESCRIPTION: Demonstrates creating a module that exports an EventEmitter instance. After a timeout, the module emits a 'ready' event that can be listened to by consumers of the module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
const EventEmitter = require('node:events');

module.exports = new EventEmitter();

// Do some work, and after some time emit
// the 'ready' event from the module itself.
setTimeout(() => {
  module.exports.emit('ready');
}, 1000);
```

----------------------------------------

TITLE: Installing npm using curl and shell script
DESCRIPTION: This command downloads and executes the npm installation script directly from npmjs.com. It uses curl to fetch the script and pipes it to sh for execution.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
curl -qL https://www.npmjs.com/install.sh | sh
```

----------------------------------------

TITLE: Transferring a WritableStream using MessagePort
DESCRIPTION: Demonstrates how to transfer a WritableStream instance between contexts using a MessagePort, allowing the stream to be used in another context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_15

LANGUAGE: js
CODE:
```
const stream = new WritableStream(getWritableSinkSomehow());

const { port1, port2 } = new MessageChannel();

port1.onmessage = ({ data }) => {
  data.getWriter().write('hello');
};

port2.postMessage(stream, [stream]);
```

----------------------------------------

TITLE: Implementing Synchronous Module Hooks in Node.js
DESCRIPTION: Defines the structure for synchronous module hooks including resolve and load functions. These hooks are used to customize module resolution and loading processes in the same thread as the application code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
function resolve(specifier, context, nextResolve) {
  // Take an `import` or `require` specifier and resolve it to a URL.
}

function load(url, context, nextLoad) {
  // Take a resolved URL and return the source code to be evaluated.
}
```

----------------------------------------

TITLE: Analyzing Core Dumps with gdb - Bash
DESCRIPTION: Demonstrates how to invoke gdb on a Node.js core dump. Assumes gdb and core dump generated on the same architecture and platform as the binary. Accepts the binary path and core file as input. Outputs a gdb debugging prompt, with 'backtrace' for call stack.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
$ gdb /opt/node-debug/node core.node.8.1535359906
(gdb) backtrace

```

----------------------------------------

TITLE: Creating and Using Local Symbols in JavaScript
DESCRIPTION: This snippet demonstrates how to create and use local symbols in JavaScript to simulate private fields in a class. It shows that local symbols are unique even when created with the same string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/using-symbols.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const kField = Symbol('kField');

console.log(kField === Symbol('kField')); // false

class MyObject {
  constructor() {
    this[kField] = 'something';
  }
}

module.exports.MyObject = MyObject;
```

----------------------------------------

TITLE: Automatic Content-Length Calculation for String Responses
DESCRIPTION: This example demonstrates how to use replyContentLength method to automatically calculate and set the content-length header for string responses in Undici mocks. This eliminates the need to manually specify the content length for responses.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/foo',
  method: 'GET'
}).replyContentLength().reply(200, 'foo')

const { headers } = await request('http://localhost:3000/foo')

console.log('headers', headers) // headers { 'content-length': '3' }
```

----------------------------------------

TITLE: Resource Finalization Example (ESM)
DESCRIPTION: ESM version of the finalization example showing how to properly register cleanup callbacks for objects that may be garbage collected.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_43

LANGUAGE: javascript
CODE:
```
import { finalization } from 'node:process';

// Please make sure that the function passed to finalization.register()
// does not create a closure around unnecessary objects.
function onFinalize(obj, event) {
  // You can do whatever you want with the object
  obj.dispose();
}

function setup() {
  // This object can be safely garbage collected,
  // and the resulting shutdown function will not be called.
  // There are no leaks.
  const myDisposableObject = {
    dispose() {
      // Free your resources synchronously
    },
  };

  finalization.register(myDisposableObject, onFinalize);
}

setup();
```

----------------------------------------

TITLE: Converting CryptoKey to KeyObject in Node.js (CommonJS)
DESCRIPTION: Example showing how to convert a CryptoKey instance to a KeyObject using the KeyObject.from() method in CommonJS format. Creates an HMAC key and converts it.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_41

LANGUAGE: cjs
CODE:
```
const { KeyObject } = require('node:crypto');
const { subtle } = globalThis.crypto;

(async function() {
  const key = await subtle.generateKey({
    name: 'HMAC',
    hash: 'SHA-256',
    length: 256,
  }, true, ['sign', 'verify']);

  const keyObject = KeyObject.from(key);
  console.log(keyObject.symmetricKeySize);
  // Prints: 32 (symmetric key size in bytes)
})();
```

----------------------------------------

TITLE: Splitting POSIX PATH using path.delimiter
DESCRIPTION: Shows how to split the POSIX `PATH` environment variable string into an array of individual directory paths using the platform-specific delimiter provided by `path.delimiter` (which is `:` on POSIX).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_11

LANGUAGE: js
CODE:
```
process.env.PATH.split(path.delimiter);
// Returns: ['/usr/bin', '/bin', '/usr/sbin', '/sbin', '/usr/local/bin']
```

----------------------------------------

TITLE: Using notEqual in CommonJS
DESCRIPTION: Demonstrates how to use assert.notEqual() method in CommonJS format to test shallow, coercive inequality between values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_35

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');

assert.notEqual(1, 2);
// OK

assert.notEqual(1, 1);
// AssertionError: 1 != 1

assert.notEqual(1, '1');
// AssertionError: 1 != '1'
```

----------------------------------------

TITLE: Checking Primality Asynchronously with Node.js Crypto
DESCRIPTION: Asynchronously checks the primality of a candidate number using Miller-Rabin probabilistic tests. Accepts the candidate (as various buffer types or bigint), optional configuration for the number of checks, and a callback function. The callback receives an error object (if any) and a boolean result indicating primality with a specified low error probability. Introduced in Node.js v15.8.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_55

LANGUAGE: javascript
CODE:
```
crypto.checkPrime(candidate[, options], callback)
```

----------------------------------------

TITLE: Sending File Response with Trailers - Node.js HTTP/2 - MJS
DESCRIPTION: Demonstrates using `http2stream.respondWithFile` with the `waitForTrailers` option enabled. This allows the server to send trailing headers after the file data has been transmitted by listening for the `'wantTrailers'` event and calling `stream.sendTrailers()`, ensuring the stream does not close automatically until `sendTrailers` or `close` is called.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_35

LANGUAGE: Node.js - MJS
CODE:
```
import { createServer } from 'node:http2';
const server = createServer();
server.on('stream', (stream) => {
  stream.respondWithFile('/some/file',
                         { 'content-type': 'text/plain; charset=utf-8' },
                         { waitForTrailers: true });
  stream.on('wantTrailers', () => {
    stream.sendTrailers({ ABC: 'some value to send' });
  });
});
```

----------------------------------------

TITLE: Testing Scope of Named Function Expressions in JavaScript
DESCRIPTION: This snippet verifies that a named function expression (`Foo`) does not pollute the scope in which it is defined. It defines the function expression `Foo` and immediately attempts to call `Foo()` in the surrounding scope within a `try...catch` block. If `Foo` were accessible, calling it would not throw, and the explicit `throw "FuncExpr was stored"` would execute. The test passes if the `catch` block is entered due to `Foo` being undefined in the outer scope, and the error caught is a `ReferenceError` (not the custom string).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/named-function-expression-expected.txt#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
(function Foo(){ return 1; }); try { Foo(); throw "FuncExpr was stored"; } catch(e) { if(typeof(e)=="string") throw e; }
```

----------------------------------------

TITLE: Converting CryptoKey to KeyObject in Node.js (ESM)
DESCRIPTION: Example showing how to convert a CryptoKey instance to a KeyObject using the KeyObject.from() method in ESM format. Creates an HMAC key and converts it.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_40

LANGUAGE: mjs
CODE:
```
const { KeyObject } = await import('node:crypto');
const { subtle } = globalThis.crypto;

const key = await subtle.generateKey({
  name: 'HMAC',
  hash: 'SHA-256',
  length: 256,
}, true, ['sign', 'verify']);

const keyObject = KeyObject.from(key);
console.log(keyObject.symmetricKeySize);
// Prints: 32 (symmetric key size in bytes)
```

----------------------------------------

TITLE: Handling Recoverable Errors in REPL
DESCRIPTION: Implements error recovery logic for multi-line input in REPL evaluation function. Detects syntax errors that can be recovered from to support multi-line statements.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
function myEval(cmd, context, filename, callback) {
  let result;
  try {
    result = vm.runInThisContext(cmd);
  } catch (e) {
    if (isRecoverableError(e)) {
      return callback(new repl.Recoverable(e));
    }
  }
  callback(null, result);
}

function isRecoverableError(error) {
  if (error.name === 'SyntaxError') {
    return /^(Unexpected end of input|Unexpected token)/.test(error.message);
  }
  return false;
}
```

----------------------------------------

TITLE: Validating URL Parsing with URL.canParse API - Node.js Core - JavaScript
DESCRIPTION: This snippet demonstrates how to use the new URL.canParse API, introduced in Node.js 19, to check if specific inputs can be parsed as valid URLs according to the WHATWG specification. It shows both a valid case with a base URL and an invalid case with a relative path alone. No additional dependencies are required, as URL is a global class in Node.js. The function returns a boolean indicating whether the provided input is a valid, fully-resolved URL.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V19.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
const isValid = URL.canParse('/foo', 'https://example.org/'); // true
const isNotValid = URL.canParse('/foo'); // false
```

----------------------------------------

TITLE: Implementing Service-Detection Function for OpenSSL on Windows - C
DESCRIPTION: This C code snippet implements an exported function '_OPENSSL_isservice', which checks if the current process is running in a Windows service session by querying the session ID. If the process's session ID is zero, it is considered a service. Required headers are those supporting Windows API usage (e.g., windows.h). This function may be used by OpenSSL consumers who want fine-grained control over GUI dependency DLL loading in service applications, especially with DELAYLOAD linking.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/NOTES-WINDOWS.md#2025-04-23_snippet_4

LANGUAGE: c
CODE:
```
c
__declspec(dllexport) __cdecl BOOL _OPENSSL_isservice(void)
{
    DWORD sess;

    if (ProcessIdToSessionId(GetCurrentProcessId(), &sess))
        return sess == 0;
    return FALSE;
}

```

----------------------------------------

TITLE: Verifying Runtime.evaluate with awaitPromise: Rejected Promise with Error Object (JSON)
DESCRIPTION: This output demonstrates the result of `Runtime.evaluate` with `awaitPromise` for a promise rejected with an actual `Error` object ('MyError'). The response includes detailed `exceptionDetails` with stack trace information and the error object itself as the `result`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-async-expected.txt#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        exceptionDetails : {
            columnNumber : 11
            exception : {
                className : Error
                description : Error: MyError     at foo (<anonymous>:13:11)     at throwError (<anonymous>:15:3)
                objectId : <objectId>
                subtype : error
                type : object
            }
            exceptionId : <exceptionId>
            lineNumber : 13
            scriptId : <scriptId>
            stackTrace : {
                callFrames : [
                    [0] : {
                        columnNumber : 10
                        functionName : foo
                        lineNumber : 12
                        scriptId : <scriptId>
                        url : 
                    }
                    [1] : {
                        columnNumber : 2
                        functionName : throwError
                        lineNumber : 14
                        scriptId : <scriptId>
                        url : 
                    }
                ]
            }
            text : Uncaught (in promise) Error: MyError
        }
        result : {
            className : Error
            description : Error: MyError     at foo (<anonymous>:13:11)     at throwError (<anonymous>:15:3)
            objectId : <objectId>
            subtype : error
            type : object
        }
    }
}
```

----------------------------------------

TITLE: Comparing Custom map vs. Native Array.prototype.map via call in JavaScript
DESCRIPTION: This snippet shows test assertions comparing a custom array `map` implementation (applied to an array copy via `copyArray().map`) with the native `Array.prototype.map` method invoked using `call` on an object representation of the array (`toUnorderedObject`). The tests verify functional equivalence across different array types (simple, empty, large sparse) using a specific callback (`halveLength`). Dependencies include `copyArray`, `toUnorderedObject`, `forwarders`, `halveLength`, and various array variables (`simpleArray`, `emptyArray`, `largeSparseArray`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-enumerators-functions-expected.txt#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
copyArray(simpleArray).map(forwarders[f], halveLength, 0)
```

LANGUAGE: javascript
CODE:
```
Array.prototype.map.call(toUnorderedObject(simpleArray), forwarders[f], halveLength, 0)
```

LANGUAGE: javascript
CODE:
```
copyArray(emptyArray).map(forwarders[f], halveLength, 0)
```

LANGUAGE: javascript
CODE:
```
Array.prototype.map.call(toUnorderedObject(emptyArray), forwarders[f], halveLength, 0)
```

LANGUAGE: javascript
CODE:
```
copyArray(largeSparseArray).map(forwarders[f], halveLength, 0)
```

LANGUAGE: javascript
CODE:
```
Array.prototype.map.call(toUnorderedObject(largeSparseArray), forwarders[f], halveLength, 0)
```

----------------------------------------

TITLE: Conditionally Pausing Execution in JavaScript for Debugging
DESCRIPTION: This JavaScript function `pauseAlternating` is used within the test to conditionally trigger the debugger. It checks a boolean variable `pause` and executes the `debugger` statement if it's true. It then toggles the `pause` variable for the next invocation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-stepping-out-from-js-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
function pauseAlternating() {
  if (pause) #debugger;
  pause = !pause;
```

----------------------------------------

TITLE: NPM Query Piping Examples
DESCRIPTION: Examples of piping npm query results to other commands for filtering and processing dependencies
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-query.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
# find all dependencies with postinstall scripts & uninstall them
npm query ":attr(scripts, [postinstall])" | jq 'map(.name)|join("\n")' -r | xargs -I {} npm uninstall {}

# find all git dependencies & explain who requires them
npm query ":type(git)" | jq 'map(.name)' | xargs -I {} npm why {}
```

----------------------------------------

TITLE: Defining Program Dependencies with Relative Paths in build.info - Shell
DESCRIPTION: This snippet shows a build.info file for a subdirectory, declaring a program (openssl), its source, include directories, and dependency on a library. It illustrates the use of relative paths for source and dependency files, facilitating portability and context-aware resolution by build tools. Inputs are local program source definitions; outputs are processed build rules by tools like Configure. Limitations: relies on project directory structure; not portable unless conventions are followed.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/Configurations/README-design.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
# apps/build.info\nPROGRAMS=openssl\nSOURCE[openssl]=openssl.c\nINCLUDE[openssl]=.. ../include\nDEPEND[openssl]=../libssl
```

----------------------------------------

TITLE: Testing JSON.stringify with Special Values in JavaScript
DESCRIPTION: These functions test JSON.stringify behavior with special values like empty arrays, undefined, null, and sparse arrays. They verify the expected output format and handling of these special cases.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/run-json-stringify-expected.txt#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(new Array(10));
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify([undefined,,null,0,false]);
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({p1:undefined,p2:null,p3:0,p4:false});
    }
```

----------------------------------------

TITLE: Using util.types.isUint32Array to check for Uint32Array objects
DESCRIPTION: Shows how to use util.types.isUint32Array() to check if a value is a built-in Uint32Array instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_101

LANGUAGE: javascript
CODE:
```
util.types.isUint32Array(new ArrayBuffer());  // Returns false
util.types.isUint32Array(new Uint32Array());  // Returns true
util.types.isUint32Array(new Float64Array());  // Returns false
```

----------------------------------------

TITLE: Converting JavaScript Number to C Double in N-API
DESCRIPTION: Converts a JavaScript number to a C double primitive type. Returns napi_number_expected if input is not a number.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_112

LANGUAGE: c
CODE:
```
napi_status napi_get_value_double(napi_env env,
                                  napi_value value,
                                  double* result)
```

----------------------------------------

TITLE: Checking Basic ICU Support via `Intl` Object in JavaScript
DESCRIPTION: This snippet checks for the basic presence of ICU support by verifying the type of the global `Intl` object. If `Intl` exists and is an object, it indicates that some level of ICU support (`system-icu`, `small-icu`, or `full-icu`) is enabled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/intl.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
```js
const hasICU = typeof Intl === 'object';
```
```

----------------------------------------

TITLE: Setting Headers with Both setHeader and writeHead in Node.js
DESCRIPTION: Demonstrates the precedence rules when using both setHeader and writeHead methods. Headers set with writeHead take precedence over those set with setHeader when both methods are used on the same header fields.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_43

LANGUAGE: javascript
CODE:
```
// Returns content-type = text/plain
const server = http.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('ok');
});
```

----------------------------------------

TITLE: Reverse DNS Lookup with lookupService in CommonJS
DESCRIPTION: Shows how to perform reverse DNS lookups using the lookupService method in CommonJS format. The example resolves the localhost IP address and SSH port to their respective names.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_20

LANGUAGE: cjs
CODE:
```
const dnsPromises = require('node:dns').promises;
dnsPromises.lookupService('127.0.0.1', 22).then((result) => {
  console.log(result.hostname, result.service);
  // Prints: localhost ssh
});
```

----------------------------------------

TITLE: Querying Org Members Using libnpmorg ls() in JavaScript
DESCRIPTION: Illustrates the use of org.ls() to fetch the full roster of an npm Organization via libnpmorg. The function takes the org name and an options object containing a token. The Promise resolves to a Roster object mapping users to their roles. libnpmorg and token-based authentication are required; the result is a structured JavaScript object with username:role mappings.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmorg/README.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
await org.ls('myorg', {token: 'deadbeef'})
=>
Roster {
  zkat: 'developer',
  iarna: 'admin',
  isaacs: 'owner'
}
```

----------------------------------------

TITLE: Inspecting Objects with Symbol.toStringTag in Node.js
DESCRIPTION: Demonstrates how util.inspect() handles objects with custom Symbol.toStringTag implementations and different class constructors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
class Foo {
  get [Symbol.toStringTag]() {
    return 'bar';
  }
}

class Bar {}

const baz = Object.create(null, { [Symbol.toStringTag]: { value: 'foo' } });

util.inspect(new Foo()); // 'Foo [bar] {}'
util.inspect(new Bar()); // 'Bar {}'
util.inspect(baz);       // '[foo] {}'
```

----------------------------------------

TITLE: Running npm test with output example
DESCRIPTION: Illustrates the execution of npm test command and its output, including the version of npm and the test script being run.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-test.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm test
> npm@x.x.x test
> node test.js

(test.js output would be here)
```

----------------------------------------

TITLE: Retrieving Package Values
DESCRIPTION: Examples of retrieving various values from package.json using npm pkg get command
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-pkg.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm pkg get name
npm pkg get name version
npm pkg get scripts.test
npm pkg get contributors.email
npm pkg get contributors[0].email
npm pkg get "exports[.].require"
```

----------------------------------------

TITLE: Client Connect Event Handling in Undici
DESCRIPTION: Demonstrates how to listen for the 'connect' event on an Undici client. This example creates an HTTP server, initializes a client to connect to it, handles the connect event, makes a request, and properly cleans up resources.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Client.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.end('Hello, World!')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

client.on('connect', (origin) => {
  console.log(`Connected to ${origin}`) // should print before the request body statement
})

try {
  const { body } = await client.request({
    path: '/',
    method: 'GET'
  })
  body.setEncoding('utf-8')
  body.on('data', console.log)
  client.close()
  server.close()
} catch (error) {
  console.error(error)
  client.close()
  server.close()
}
```

----------------------------------------

TITLE: Expanding Multiple Chained Shorthands in npm CLI - Bash
DESCRIPTION: Illustrates chaining multiple single-character shorthands in npm command line usage. The CLI will expand such groupings into their corresponding configuration flags if combination is unambiguously resolved. This example expands '-gpld' to the equivalent verbose flags. Prerequisite is a valid Node.js and npm installation. Accepts npm commands and flags, outputs transformed argument list.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/config.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm ls -gpld
# same as:
npm ls --global --parseable --long --loglevel info
```

----------------------------------------

TITLE: Flushing File Data with FileHandle.sync in Node.js
DESCRIPTION: Asynchronously requests that all data for the open file descriptor associated with the FileHandle be flushed to the storage device. The specific behavior is OS and device-dependent (see POSIX fsync(2)). Returns a Promise that fulfills with `undefined` upon success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_13



----------------------------------------

TITLE: Filtering MockCallHistory by HTTP Method in JavaScript
DESCRIPTION: Filters MockCallHistoryLog entries by their HTTP method (GET, POST, etc.) using either a regular expression or a string match.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockCallHistory.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
mockAgent.getCallHistory()?.filterCallsByMethod(/POST/)
mockAgent.getCallHistory()?.filterCallsByMethod('POST')
```

----------------------------------------

TITLE: Adding Trailing Headers to Node.js HTTP Response in JavaScript
DESCRIPTION: Illustrates how to add HTTP trailing headers to a response using `response.addTrailers()`. This method requires chunked encoding to be active for the response. The example first calls `response.writeHead()` to set the initial headers, including the `Trailer` header which lists the names of the trailing headers to be expected. After writing the response body (`response.write()`), `response.addTrailers()` is called with an object containing the trailing headers, followed by `response.end()`. This implicitly uses the `http.ServerResponse` object typically passed to the request handler in `http.createServer()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_30

LANGUAGE: js
CODE:
```
```js
response.writeHead(200, { 'Content-Type': 'text/plain',
                          'Trailer': 'Content-MD5' });
response.write(fileData);
response.addTrailers({ 'Content-MD5': '7895bf4b8828b55ceaf47747b4bca667' });
response.end();
```
```

----------------------------------------

TITLE: Inspecting WASM Module Instance Structure in Node.js Logs - WASM
DESCRIPTION: Shows the structure and instance exports of the WebAssembly module being debugged, including exported globals, memory, tables, and functions. The data lists the available WASM instance members and the view from the Node.js debugger, aiding developers in understanding the module's external interface. No dependencies, but requires a precompiled WASM module and the Node.js WebAssembly runtime.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-scope-info-expected.txt#2025-04-23_snippet_1

LANGUAGE: WASM
CODE:
```
$var2: 0 (f32)
 - scope (module):
   instance: exports: "exported_global" (Global), "exported_memory" (Memory), "exported_table" (Table), "main" (Function)
   module: Module
   functions: "$A (liftoff)": (Function), "$B (liftoff)": (Function), "$C (interpreted)": (Function)
   globals: "$exported_global": 42 (i32)
   memories: "$exported_memory": (Memory)
   tables:
      $exported_table: 0: function js_func() { [native code] } (funcref), 1: function () { [native code] } (funcref), 2: null (funcref), 3: function $A (liftoff)() { [native code] } (funcref)
```

----------------------------------------

TITLE: Checking for Dependencies and Libraries in c-ares Build
DESCRIPTION: Performs checks for required libraries and functions, setting variables based on their availability.
SOURCE: https://github.com/nodejs/node/blob/main/deps/cares/CMakeLists.txt#2025-04-23_snippet_2

LANGUAGE: CMake
CODE:
```
CARES_FUNCTION_IN_LIBRARY (res_servicename resolv HAVE_RES_SERVICENAME_IN_LIBRESOLV)
IF (HAVE_RES_SERVICENAME_IN_LIBRESOLV)
	SET (HAVE_LIBRESOLV 1)
ENDIF ()

IF (APPLE)
	CHECK_C_SOURCE_COMPILES ("
	#include <stdio.h>
	#include <TargetConditionals.h>
	int main() {
#if TARGET_OS_IPHONE == 0
#error Not an iPhone target
#endif
return 0;
	}
	"
	IOS)

	CHECK_C_SOURCE_COMPILES ("
#include <stdio.h>
#include <TargetConditionals.h>
	int main() {
#if TARGET_OS_IPHONE == 0 || __IPHONE_OS_VERSION_MIN_REQUIRED < 100000
#  error Not iOS v10
#endif
return 0;
	}
	"
	IOS_V10)

	CHECK_C_SOURCE_COMPILES ("
#include <stdio.h>
#include <AvailabilityMacros.h>
#ifndef MAC_OS_X_VERSION_10_12
#  define MAC_OS_X_VERSION_10_12 101200
#endif
	int main() {
#if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_12
#  error Not MacOSX 10.12 or higher
#endif
return 0;
	}
	"
	MACOS_V1012)
ENDIF ()

IF (ZOS AND HAVE_LIBRESOLV)
	SET (CARES_USE_LIBRESOLV 1)
ENDIF()


CARES_FUNCTION_IN_LIBRARY (gethostbyname nsl HAVE_LIBNSL)
CARES_FUNCTION_IN_LIBRARY (gethostbyname socket HAVE_GHBN_LIBSOCKET)
CARES_FUNCTION_IN_LIBRARY (gethostbyname network HAVE_LIBNETWORK)
CARES_FUNCTION_IN_LIBRARY (socket socket HAVE_SOCKET_LIBSOCKET)
IF (HAVE_GHBN_LIBSOCKET OR HAVE_SOCKET_LIBSOCKET)
	SET(HAVE_LIBSOCKET TRUE)
ENDIF ()
CARES_FUNCTION_IN_LIBRARY (socket network HAVE_LIBNETWORK)
CARES_FUNCTION_IN_LIBRARY (clock_gettime rt HAVE_LIBRT)
```

----------------------------------------

TITLE: Performing Concurrent Reduction using readable.map and readable.reduce in Node.js (MJS)
DESCRIPTION: This snippet illustrates how to perform a reduction operation with concurrency by combining `readable.map` and `readable.reduce`. It first uses `readable.map` with a specified `concurrency` level to asynchronously process chunks (getting file stats via `fs.stat`) in parallel. The results (stat objects) are then piped to `readable.reduce` for the final sequential aggregation (summing sizes).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_54

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { readdir, stat } from 'node:fs/promises';
import { join } from 'node:path';

const directoryPath = './src';
const filesInDir = await readdir(directoryPath);

const folderSize = await Readable.from(filesInDir)
  .map((file) => stat(join(directoryPath, file)), { concurrency: 2 })
  .reduce((totalSize, { size }) => totalSize + size, 0);

console.log(folderSize);
```

----------------------------------------

TITLE: Forwarding reduce method with various callbacks - Node.js JavaScript
DESCRIPTION: This set of test statements demonstrates the use of Array.prototype.reduce and its functional forwarders over different array variants (simple, empty, large, sparse) and callback functions (returnIndex, increaseLength, decreaseLength, halveLength). Dependencies may include auxiliary functions like toObject, copyArray, and forwarders. Inputs are arrays and callback references; output is a validated count for correctness. Intended for robustness testing and regression checking of reduce mechanics.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-enumerators-functions-expected.txt#2025-04-23_snippet_23

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeSparseArray), forwarders[f], returnIndex, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeSparseArray), forwarders[f], returnIndex, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(simpleArray).reduce(forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(simpleArray), forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(simpleArray), forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(emptyArray).reduce(forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(emptyArray), forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(emptyArray), forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(largeEmptyArray).reduce(forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeEmptyArray), forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeEmptyArray), forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(largeSparseArray).reduce(forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeSparseArray), forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeSparseArray), forwarders[f], increaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(simpleArray).reduce(forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(simpleArray), forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(simpleArray), forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(emptyArray).reduce(forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(emptyArray), forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(emptyArray), forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(largeEmptyArray).reduce(forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeEmptyArray), forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeEmptyArray), forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(largeSparseArray).reduce(forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeSparseArray), forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeSparseArray), forwarders[f], decreaseLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(simpleArray).reduce(forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(simpleArray), forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(simpleArray), forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(emptyArray).reduce(forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(emptyArray), forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(emptyArray), forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(largeEmptyArray).reduce(forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeEmptyArray), forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeEmptyArray), forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(largeSparseArray).reduce(forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeSparseArray), forwarders[f], halveLength, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.reduce.call(toObject(largeSparseArray), forwarders[f], halveLength, 0);
```

----------------------------------------

TITLE: Checking 'this' Before Invoking Arrow Function via .call() (Node.js/JavaScript)
DESCRIPTION: This snippet continues within an IIFE called with `this` set to `'a'` via `.call('a')`. It defines an arrow function `f` containing a `debugger;` statement. A breakpoint (`#f();`) is set *before* invoking `f`. The surrounding text indicates that at this breakpoint (before `f` is called), `this` should refer to the String object `'a'` (represented by its description) as set by the outer `.call('a')`. Both `callFrame` and `evaluateOnCallFrame` are expected to show the String object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/this-in-arrow-function-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
  let f = () => { debugger; };
  #f();
}).call('a');
```

----------------------------------------

TITLE: Sending UDP Packets with Node.js dgram (ES Module) - JavaScript
DESCRIPTION: Demonstrates how to send a single UDP datagram using the Node.js 'dgram' module in ES module syntax. Utilizes Buffer to construct the message and specifies the destination port and address. The callback handles completion and closes the client socket. Dependencies: 'dgram' and 'buffer' modules. Expected input: message as Buffer, target port and host. Output: datagram sent; invokes callback with error if failed. Limitations: must be run in Node.js with ES module support.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
import dgram from 'node:dgram';\nimport { Buffer } from 'node:buffer';\n\nconst message = Buffer.from('Some bytes');\nconst client = dgram.createSocket('udp4');\nclient.send(message, 41234, 'localhost', (err) => {\n  client.close();\n});
```

----------------------------------------

TITLE: Defining Absl::StatusOr C++ Library using Bazel
DESCRIPTION: This `absl_cc_library` rule defines the `statusor` C++ library target, representing a value or an error status. It includes headers and source files, standard compiler options (`ABSL_DEFAULT_COPTS`), and dependencies on various Abseil components like base utilities, core headers, status, strings, type traits, and variant. It is marked as `PUBLIC` for external usage.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/status/CMakeLists.txt#2025-04-23_snippet_2

LANGUAGE: bazel
CODE:
```
absl_cc_library(
  NAME
    statusor
  HDRS
    "statusor.h"
  SRCS
    "statusor.cc"
    "internal/statusor_internal.h"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::base
    absl::config
    absl::core_headers
    absl::has_ostream_operator
    absl::nullability
    absl::raw_logging_internal
    absl::status
    absl::str_format
    absl::strings
    absl::type_traits
    absl::utility
    absl::variant
  PUBLIC
)
```

----------------------------------------

TITLE: Compiling and Linking with llhttp on Windows (Shell)
DESCRIPTION: Example command using clang++ to compile a C++ source file (`main.cpp`) and link it against the static llhttp library (`libllhttp.a`) on Windows. It specifies compiler options (`-Os`, `-g3`, `-Wall`, etc.), includes the path to `llhttp.h` using `-I`, provides the path to the static library file, and specifies the output executable name (`-o main.exe`). Ensure `api.c` and `http.c` object files are linked to avoid unresolved symbol errors.
SOURCE: https://github.com/nodejs/node/blob/main/deps/llhttp/README.md#2025-04-23_snippet_19

LANGUAGE: sh
CODE:
```
clang++ -Os -g3 -Wall -Wextra -Wno-unused-parameter -I/path/to/llhttp/build main.cpp /path/to/llhttp/build/libllhttp.a -o main.exe
```

----------------------------------------

TITLE: Printing Stack Traces with console.trace in Node.js (JavaScript)
DESCRIPTION: Shows how `console.trace(message, ...args)` prints a stack trace to `stderr`, prefixed with 'Trace: '. The optional `message` and any additional arguments (`...args`) are formatted using `util.format()`. This is useful for debugging to understand the sequence of calls leading to a specific point in the code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_9

LANGUAGE: js
CODE:
```
console.trace('Show me');
// Prints: (stack trace will vary based on where trace is called)
//  Trace: Show me
//    at repl:2:9
//    at REPLServer.defaultEval (repl.js:248:27)
//    at bound (domain.js:287:14)
//    at REPLServer.runBound [as eval] (domain.js:300:12)
//    at REPLServer.<anonymous> (repl.js:412:12)
//    at emitOne (events.js:82:20)
//    at REPLServer.emit (events.js:169:7)
//    at REPLServer.Interface._onLine (readline.js:210:10)
//    at REPLServer.Interface._line (readline.js:549:8)
//    at REPLServer.Interface._ttyWrite (readline.js:826:14)
```

----------------------------------------

TITLE: Creating an HMAC Digest as a Stream - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This code, using ESM and async import, creates an HMAC SHA-256 stream with a secret. Data is written to the HMAC object, and the digest is read on 'readable' event and output in hexadecimal. Particularly suited for streaming data requiring authentication. Requires 'node:crypto' and suitable secret key. Only one digest will be produced by the stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_34

LANGUAGE: JavaScript
CODE:
```
const {
  createHmac,
} = await import('node:crypto');

const hmac = createHmac('sha256', 'a secret');

hmac.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = hmac.read();
  if (data) {
    console.log(data.toString('hex'));
    // Prints:
    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e
  }
});

hmac.write('some data to hash');
hmac.end();
```

----------------------------------------

TITLE: Waiting for Executor Page Load Before Script Execution in JavaScript
DESCRIPTION: Code intended for the 'injector' page (e.g., `injector.html`) demonstrating how to ensure script execution occurs only after the executor page has loaded and signaled readiness via `pageshow`. It defines an async helper `waitForPageShow` that uses `execute_script` to poll for and await the `pageShowPromise` (defined in the executor) before executing the main test function (`mainFunction`). Requires an initialized `RemoteContext` instance (`ctx`).
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/wpt/common/dispatcher/README.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
// injector.html
const waitForPageShow = async () => {
  while (!window.pageShowPromise) {
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  await window.pageShowPromise;
};

await ctx.execute(waitForPageShow);
await ctx.execute(mainFunction);
```

----------------------------------------

TITLE: Testing Edge Cases in Class Extension and Constructor Behavior
DESCRIPTION: This snippet tests various edge cases related to class extension, including extending from null, undefined, and objects, as well as constructor return behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/class-syntax-extends-expected.txt#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
PASS Object.getPrototypeOf((class { constructor () { } }).prototype) is Object.prototype
PASS Object.getPrototypeOf((class extends null { constructor () { super(); } }).prototype) is null
PASS new (class extends undefined { constructor () { this } }) threw exception TypeError: Class extends value undefined is not a constructor or null.
PASS new (class extends undefined { constructor () { super(); } }) threw exception TypeError: Class extends value undefined is not a constructor or null.
PASS x = {}; new (class extends undefined { constructor () { return x; } }) threw exception TypeError: Class extends value undefined is not a constructor or null.
PASS y = 12; new (class extends undefined { constructor () { return y; } }) threw exception TypeError: Class extends value undefined is not a constructor or null.
PASS class x {}; new (class extends null { constructor () { return new x; } }) instanceof x is true
PASS new (class extends null { constructor () { this; } }) threw exception ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor.
PASS new (class extends null { constructor () { super(); } }) threw exception TypeError: Super constructor null of anonymous class is not a constructor.
PASS x = {}; new (class extends null { constructor () { return x } }) is x
PASS y = 12; new (class extends null { constructor () { return y; } }) threw exception TypeError: Derived constructors may only return object or undefined.
PASS class x {}; new (class extends null { constructor () { return new x; } }) instanceof x is true
```

----------------------------------------

TITLE: Handling Server Push Streams on HTTP/2 Client (ESM)
DESCRIPTION: Shows how to set up a listener for the 'stream' event on a `ClientHttp2Session`. This event is triggered when the server initiates a push stream. The example shows how to access the pushed stream and listen for its 'data' event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_53

LANGUAGE: javascript
CODE:
```
import { connect } from 'node:http2';

const client = connect('http://localhost');

client.on('stream', (pushedStream, requestHeaders) => {
  pushedStream.on('push', (responseHeaders) => {
    // Process response headers
  });
  pushedStream.on('data', (chunk) => { /* handle pushed data */ });
});

const req = client.request({ ':path': '/' });
```

----------------------------------------

TITLE: Defining Copyright and Redistribution Terms for V8 and Apple Inc.
DESCRIPTION: This code snippet provides the full copyright notice, redistribution terms, and disclaimers for the V8 project and Apple Inc. It outlines the conditions for using and redistributing the software in both source and binary forms.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-dead-min-two-args-expected.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
# Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
```

----------------------------------------

TITLE: Checking Generator Object in JavaScript
DESCRIPTION: Illustrates the use of util.types.isGeneratorObject() to check if a value is a generator object returned from a built-in generator function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_76

LANGUAGE: javascript
CODE:
```
function* foo() {}
const generator = foo();
util.types.isGeneratorObject(generator);  // Returns true
```

----------------------------------------

TITLE: Monitoring Event Loop Delay Using perf_hooks (CommonJS) - JavaScript
DESCRIPTION: Shows how to use the monitorEventLoopDelay function from Node.js's 'perf_hooks' module in a CommonJS environment. The code tracks event loop delay over time and logs histogram statistics such as min, max, mean, and percentile values. Requires Node.js v11.10.0+ and the 'node:perf_hooks' module. Useful for legacy or CommonJS-based Node.js codebases.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_19

LANGUAGE: JavaScript
CODE:
```
```cjs\nconst { monitorEventLoopDelay } = require('node:perf_hooks');\nconst h = monitorEventLoopDelay({ resolution: 20 });\nh.enable();\n// Do something.\nh.disable();\nconsole.log(h.min);\nconsole.log(h.max);\nconsole.log(h.mean);\nconsole.log(h.stddev);\nconsole.log(h.percentiles);\nconsole.log(h.percentile(50));\nconsole.log(h.percentile(99));\n```
```

----------------------------------------

TITLE: Example of explaining a package dependency chain
DESCRIPTION: Shows the output of running 'npm explain glob' in npm's source tree, displaying the dependency chain for the glob package.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-explain.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
glob@7.1.6
node_modules/glob
  glob@"^7.1.4" from the root project

glob@7.1.1 dev
node_modules/tacks/node_modules/glob
  glob@"^7.0.5" from rimraf@2.6.2
  node_modules/tacks/node_modules/rimraf
    rimraf@"^2.6.2" from tacks@1.3.0
    node_modules/tacks
      dev tacks@"^1.3.0" from the root project
```

----------------------------------------

TITLE: Initializing and Linking SourceTextModule - JavaScript ESM with vm
DESCRIPTION: Shows how to instantiate a vm.SourceTextModule in Node.js, set custom properties on import.meta during evaluation, and link/evaluate the module in a custom context. Highlights security implications of setting references from the wrong context, and recommends using vm.runInContext for safe sandboxing. This example uses JavaScript in ESM syntax and requires Node.js with --experimental-vm-modules flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
import vm from 'node:vm';

const contextifiedObject = vm.createContext({ secret: 42 });

const module = new vm.SourceTextModule(
  'Object.getPrototypeOf(import.meta.prop).secret = secret;',
  {
    initializeImportMeta(meta) {
      // Note: this object is created in the top context. As such,
      // Object.getPrototypeOf(import.meta.prop) points to the
      // Object.prototype in the top context rather than that in
      // the contextified object.
      meta.prop = {};
    },
  });
// Since module has no dependencies, the linker function will never be called.
await module.link(() => {});
await module.evaluate();

// Now, Object.prototype.secret will be equal to 42.
//
// To fix this problem, replace
//     meta.prop = {};
// above with
//     meta.prop = vm.runInContext('{}', contextifiedObject);
```

----------------------------------------

TITLE: Viewing Object Property Values
DESCRIPTION: Shows how to access property values of an object field using npm view command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-view.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
npm view express time'[4.8.0]'
```

----------------------------------------

TITLE: Accessing SEA Assets in JavaScript
DESCRIPTION: CommonJS code example showing how to access assets bundled in a Single Executable Application using the node:sea module's getAsset, getAssetAsBlob, and getRawAsset functions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_17

LANGUAGE: cjs
CODE:
```
const { getAsset, getAssetAsBlob, getRawAsset } = require('node:sea');
// Returns a copy of the data in an ArrayBuffer.
const image = getAsset('a.jpg');
// Returns a string decoded from the asset as UTF8.
const text = getAsset('b.txt', 'utf8');
// Returns a Blob containing the asset.
const blob = getAssetAsBlob('a.jpg');
// Returns an ArrayBuffer containing the raw asset without copying.
const raw = getRawAsset('a.jpg');
```

----------------------------------------

TITLE: Uninstalling Global Package Managers with npm
DESCRIPTION: Command to uninstall global installations of Yarn and pnpm package managers using npm, which is a prerequisite before installing Corepack manually.
SOURCE: https://github.com/nodejs/node/blob/main/deps/corepack/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
npm uninstall -g yarn pnpm

# That should be enough, but if you installed Yarn without going through npm it might
# be more tedious - for example, you might need to run `brew uninstall yarn` as well.
```

----------------------------------------

TITLE: Setting ALTSVC on ServerHttp2Session
DESCRIPTION: Demonstrates how to send an ALTSVC frame using `session.altsvc()` on a Node.js HTTP/2 server session. Shows examples for associating the alternative service with an origin URL or a specific stream ID. Requires an active `Http2Session` instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import { createServer } from 'node:http2';

const server = createServer();
server.on('session', (session) => {
  // Set altsvc for origin https://example.org:80
  session.altsvc('h2=":8000"', 'https://example.org:80');
});

server.on('stream', (stream) => {
  // Set altsvc for a specific stream
  stream.session.altsvc('h2=":8000"', stream.id);
});
```

LANGUAGE: JavaScript
CODE:
```
const http2 = require('node:http2');

const server = http2.createServer();
server.on('session', (session) => {
  // Set altsvc for origin https://example.org:80
  session.altsvc('h2=":8000"', 'https://example.org:80');
});

server.on('stream', (stream) => {
  // Set altsvc for a specific stream
  stream.session.altsvc('h2=":8000"', stream.id);
});
```

----------------------------------------

TITLE: Responding with File Descriptor - Node.js http2 - Basic Usage
DESCRIPTION: This snippet demonstrates how to use `http2stream.respondWithFD()` to send a file's content as an HTTP/2 response. It opens a file descriptor, gets its stats (size, modification time), constructs basic headers, calls `respondWithFD` with the file descriptor and headers, and ensures the file descriptor is closed when the stream closes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_29

LANGUAGE: JavaScript (ESM)
CODE:
```
import { createServer } from 'node:http2';
import { openSync, fstatSync, closeSync } from 'node:fs';

const server = createServer();
server.on('stream', (stream) => {
  const fd = openSync('/some/file', 'r');

  const stat = fstatSync(fd);
  const headers = {
    'content-length': stat.size,
    'last-modified': stat.mtime.toUTCString(),
    'content-type': 'text/plain; charset=utf-8',
  };
  stream.respondWithFD(fd, headers);
  stream.on('close', () => closeSync(fd));
});
```

LANGUAGE: JavaScript (CJS)
CODE:
```
const http2 = require('node:http2');
const fs = require('node:fs');

const server = http2.createServer();
server.on('stream', (stream) => {
  const fd = fs.openSync('/some/file', 'r');

  const stat = fs.fstatSync(fd);
  const headers = {
    'content-length': stat.size,
    'last-modified': stat.mtime.toUTCString(),
    'content-type': 'text/plain; charset=utf-8',
  };
  stream.respondWithFD(fd, headers);
  stream.on('close', () => fs.closeSync(fd));
});
```

----------------------------------------

TITLE: Appending Data Using File Descriptor in Node.js
DESCRIPTION: Example of using fs.appendFile with a file descriptor obtained from fs.open rather than a filename, demonstrating manual file descriptor management.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_50

LANGUAGE: javascript
CODE:
```
import { open, close, appendFile } from 'node:fs';

function closeFd(fd) {
  close(fd, (err) => {
    if (err) throw err;
  });
}

open('message.txt', 'a', (err, fd) => {
  if (err) throw err;

  try {
    appendFile(fd, 'data to append', 'utf8', (err) => {
      closeFd(fd);
      if (err) throw err;
    });
  } catch (err) {
    closeFd(fd);
    throw err;
  }
});
```

----------------------------------------

TITLE: Converting domains to Unicode using url.domainToUnicode() in Node.js
DESCRIPTION: Demonstrates the use of url.domainToUnicode() method to convert Punycode ASCII domain names to Unicode representation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_45

LANGUAGE: javascript
CODE:
```
import url from 'node:url';

console.log(url.domainToUnicode('xn--espaol-zwa.com'));
// Prints español.com
console.log(url.domainToUnicode('xn--fiq228c.com'));
// Prints 中文.com
console.log(url.domainToUnicode('xn--iñvalid.com'));
// Prints an empty string
```

----------------------------------------

TITLE: Listing User Packages with libnpmaccess in Node.js
DESCRIPTION: This snippet demonstrates importing the `libnpmaccess` library and using the asynchronous `getPackages` function to fetch and log the names of all packages accessible by the user 'zkat' on the default npm registry. It requires an `opts` object containing authentication details, specifically an npm authentication token (`_authToken`) for the target registry.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmaccess/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const access = require('libnpmaccess')
const opts = { '//registry.npmjs.org/:_authToken': 'npm_token' }

// List all packages @zkat has access to on the npm registry.
console.log(Object.keys(await access.getPackages('zkat', opts)))
```

----------------------------------------

TITLE: Observing HTTP/2 Performance Metrics (CommonJS) in Node.js
DESCRIPTION: This snippet demonstrates how to use the `PerformanceObserver` API to collect performance data for HTTP/2 sessions and streams using CommonJS syntax (`require`). It sets up an observer to listen for entries with `entryType` 'http2' and logs the type of the observed entry.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_74

LANGUAGE: cjs
CODE:
```
const { PerformanceObserver } = require('node:perf_hooks');

const obs = new PerformanceObserver((items) => {
  const entry = items.getEntries()[0];
  console.log(entry.entryType);  // prints 'http2'
  if (entry.name === 'Http2Session') {
    // Entry contains statistics about the Http2Session
  } else if (entry.name === 'Http2Stream') {
    // Entry contains statistics about the Http2Stream
  }
});
obs.observe({ entryTypes: ['http2'] });
```

----------------------------------------

TITLE: Logging Request Headers Object - Node.js HTTP/2
DESCRIPTION: Logs the `request.headers` object, showing lower-cased header names and their values. Useful for inspecting standard request headers received by the server.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_55

LANGUAGE: js
CODE:
```
console.log(request.headers);
```

----------------------------------------

TITLE: Client Destruction with Pending Request Example
DESCRIPTION: Demonstrates how to handle a scenario where a client is destroyed while a request is still pending.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.end()
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

try {
  const request = client.request({
    path: '/',
    method: 'GET'
  })
  client.destroy()
    .then(() => {
      console.log('Client destroyed')
      server.close()
    })
  await request
} catch (error) {
  console.error(error)
}
```

----------------------------------------

TITLE: Accessing Raw HTTP Headers in JavaScript
DESCRIPTION: Shows how to access the raw, unmodified HTTP headers using the rawHeaders property, which preserves the original casing and duplicate headers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
[ 'ConTent-Length', '123456',
  'content-LENGTH', '123',
  'content-type', 'text/plain',
  'CONNECTION', 'keep-alive',
  'Host', 'example.com',
  'accepT', '*/*' ]
```

----------------------------------------

TITLE: Enabling Pass Through Options in Commander.js
DESCRIPTION: Shows how to enable pass through options to only process options that come before the command-arguments.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
program.passThroughOptions();
```

----------------------------------------

TITLE: CLI Options with Default Values
DESCRIPTION: Example showing how to set default values for command-line options. This specifies a default cheese type that will be used if the option is not provided.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
program
  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');

program.parse();

console.log(`cheese: ${program.opts().cheese}`);
```

----------------------------------------

TITLE: Checking BigInt Object in JavaScript
DESCRIPTION: Shows how to use util.types.isBigIntObject() to check if a value is a BigInt object created by Object(BigInt()).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_65

LANGUAGE: javascript
CODE:
```
util.types.isBigIntObject(Object(BigInt(123)));   // Returns true
util.types.isBigIntObject(BigInt(123));   // Returns false
util.types.isBigIntObject(123);  // Returns false
```

----------------------------------------

TITLE: Executing npm pack Command in Bash
DESCRIPTION: This snippet shows the basic syntax for running the npm pack command. It creates a tarball from a specified package or the current package if no arguments are provided.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-pack.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm pack <package-spec>
```

----------------------------------------

TITLE: Displaying Custom Errors in Commander.js
DESCRIPTION: Demonstrates how to use the program.error() method to display custom error messages with optional exit codes and error codes.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_40

LANGUAGE: javascript
CODE:
```
program.error('Password must be longer than four characters');
program.error('Custom processing has failed', { exitCode: 2, code: 'my.custom.error' });
```

----------------------------------------

TITLE: Low-level Dispatch API Example
DESCRIPTION: Shows how to use the low-level dispatch API to make a GET request with custom headers and handle different response events.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.end('Hello, World!')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

const data = []

client.dispatch({
  path: '/',
  method: 'GET',
  headers: {
    'x-foo': 'bar'
  }
}, {
  onConnect: () => {
    console.log('Connected!')
  },
  onError: (error) => {
    console.error(error)
  },
  onHeaders: (statusCode, headers) => {
    console.log(`onHeaders | statusCode: ${statusCode} | headers: ${headers}`)
  },
  onData: (chunk) => {
    console.log('onData: chunk received')
    data.push(chunk)
  },
  onComplete: (trailers) => {
    console.log(`onComplete | trailers: ${trailers}`)
    const res = Buffer.concat(data).toString('utf8')
    console.log(`Data: ${res}`)
    client.close()
    server.close()
  }
})
```

----------------------------------------

TITLE: Optimized File Reading with Mixed Approach (ESM)
DESCRIPTION: Enhanced approach combining event-based processing with async/await for better performance. Uses the 'once' utility for handling stream completion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
import { once } from 'node:events';
import { createReadStream } from 'node:fs';
import { createInterface } from 'node:readline';

(async function processLineByLine() {
  try {
    const rl = createInterface({
      input: createReadStream('big-file.txt'),
      crlfDelay: Infinity,
    });

    rl.on('line', (line) => {
      // Process the line.
    });

    await once(rl, 'close');

    console.log('File processed.');
  } catch (err) {
    console.error(err);
  }
})();
```

----------------------------------------

TITLE: Half-Closing a Node.js net.Socket Connection
DESCRIPTION: Sends a FIN packet to indicate the end of writing data from this end of the connection (half-close). Optional `data` can be written before closing, with an optional `encoding` if data is a string. A `callback` function can be provided, which is invoked when the socket finishes. The server might still send data after this call. Returns the socket instance. See `writable.end()` for more details.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
socket.end([data[, encoding]][, callback])
```

----------------------------------------

TITLE: Console Trace with Various Stack Sizes
DESCRIPTION: Testing console.trace with different maximum stack size settings (0, 1, and 2), demonstrating nested call tracking and parent frame capture.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/set-max-call-stack-size-expected.txt#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
    args : [
        [0] : {
            type : string
            value : Nested call.
        }
    ]
    executionContextId : <executionContextId>
    stackTrace : {
        callFrames : [
            [0] : {
                columnNumber : 12
                functionName : bar
                lineNumber : 7
                scriptId : <scriptId>
                url : test.js
            }
            [1] : {
                columnNumber : 4
                functionName : foo
                lineNumber : 12
                scriptId : <scriptId>
                url : test.js
            }
        ]
        parent : {
            callFrames : [
                [0] : {
                    columnNumber : 4
                    functionName : executor
                    lineNumber : 16
                    scriptId : <scriptId>
                    url : test.js
                }
            ]
            description : setTimeout
        }
    }
    timestamp : <timestamp>
    type : trace
}
```

----------------------------------------

TITLE: Testing Syntax Error Propagation - JSON
DESCRIPTION: This snippet presents how a SyntaxError is propagated when the evaluated function has invalid syntax. The exceptionDetails field contains precise script and error locations, object metadata, and the descriptive text. Inputs are source code with syntax errors; outputs are error objects detailing the exception for debugging tools to consume.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/call-function-on-async-expected.txt#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        exceptionDetails : {
            columnNumber : 2
            exception : {
                className : SyntaxError
                description : SyntaxError: Unexpected token '}'
                objectId : <objectId>
                subtype : error
                type : object
            }
            exceptionId : <exceptionId>
            lineNumber : 1
            scriptId : <scriptId>
            text : Uncaught
        }
        result : {
            className : SyntaxError
            description : SyntaxError: Unexpected token '}'
            objectId : <objectId>
            subtype : error
            type : object
        }
    }
}
```

----------------------------------------

TITLE: Emitting Custom Process Warnings with process.emitWarning (options object) - JavaScript
DESCRIPTION: These samples show how to emit custom warnings using process.emitWarning with a string warning and an options object containing properties like code and detail. Only node's built-in modules are required. Calling emitWarning sends the custom warning to the process, which can be observed by adding a handler for the 'warning' event. Parameters control warning type, code, details, and other metadata.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_33

LANGUAGE: mjs
CODE:
```
import { emitWarning } from 'node:process';\n\n// Emit a warning with a code and additional detail.\nemitWarning('Something happened!', {\n  code: 'MY_WARNING',\n  detail: 'This is some additional information',\n});\n// Emits:\n// (node:56338) [MY_WARNING] Warning: Something happened!\n// This is some additional information
```

LANGUAGE: cjs
CODE:
```
const { emitWarning } = require('node:process');\n\n// Emit a warning with a code and additional detail.\nemitWarning('Something happened!', {\n  code: 'MY_WARNING',\n  detail: 'This is some additional information',\n});\n// Emits:\n// (node:56338) [MY_WARNING] Warning: Something happened!\n// This is some additional information
```

----------------------------------------

TITLE: Extracting File Extension using path.extname (Trailing Dot)
DESCRIPTION: Illustrates `path.extname()` returning just the dot ('.') when the path ends with a dot.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_17

LANGUAGE: js
CODE:
```
path.extname('index.');
// Returns: '.'
```

----------------------------------------

TITLE: Filtering MockCallHistory by Full URL in JavaScript
DESCRIPTION: Filters MockCallHistoryLog entries by their complete URL including protocol, host, port, path, hash, and query parameters using either a regular expression or a string match.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockCallHistory.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
mockAgent.getCallHistory()?.filterCallsByFullUrl(/https:\/\/localhost:3000\/\?query=value#hash/)
mockAgent.getCallHistory()?.filterCallsByFullUrl('https://localhost:3000/?query=value#hash')
```

----------------------------------------

TITLE: Testing debug and monitor methods in Node.js Command Line API
DESCRIPTION: A sequence of commands demonstrating how to use debug, undebug, monitor, and unmonitor methods in the Node.js Command Line API to control function execution behavior. The test shows the output when calling functions after applying these debugging features.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/command-line-api-with-bound-function-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
debug foo and bar
call foo and bar
undebug foo and bar
call foo and bar
monitor foo and bar
call foo and bar
unmonitor foo and bar
call foo and bar
monitor and debug bar
call bar
undebug bar
call bar
debug and unmonitor bar
call bar
```

----------------------------------------

TITLE: Using util.types.isSetIterator to check for Set iterators
DESCRIPTION: Shows how to use util.types.isSetIterator() to check if a value is an iterator returned by a built-in Set instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_93

LANGUAGE: javascript
CODE:
```
const set = new Set();
util.types.isSetIterator(set.keys());  // Returns true
util.types.isSetIterator(set.values());  // Returns true
util.types.isSetIterator(set.entries());  // Returns true
util.types.isSetIterator(set[Symbol.iterator]());  // Returns true
```

----------------------------------------

TITLE: Viewing Multiple Fields
DESCRIPTION: Illustrates how to view multiple fields in a single npm view command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-view.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
npm view express contributors.name contributors.email
```

----------------------------------------

TITLE: Defining and Inheriting Configuration Targets - Perl
DESCRIPTION: This Perl code snippet demonstrates how to define build target templates with inheritance using associative arrays. The 'inherit_from' key allows a configuration to combine properties from other templates, while code blocks (subs) can customize how values are merged. The example models how OpenSSL's configuration inheritance works and how computed attributes can be specified for a target.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/Configurations/README.md#2025-04-23_snippet_0

LANGUAGE: perl
CODE:
```
"foo" => {
        template => 1,
        haha => "ha ha",
        hoho => "ho",
        ignored => "This should not appear in the end result",
},
"bar" => {
        template => 1,
        haha => "ah",
        hoho => "haho",
        hehe => "hehe"
},
"laughter" => {
        inherit_from => [ "foo", "bar" ],
        hehe => sub { join(" ",(@_,"!!!")) },
        ignored => "",
}
```

----------------------------------------

TITLE: Testing Case-Insensitive Matching with Regular Expressions in JavaScript
DESCRIPTION: This code snippet demonstrates a series of tests for case-insensitive matching of the Swedish letters 'å' and 'Å' using regular expressions. It checks the behavior of .test(), .match(), and .replace() methods with the 'i' flag for case-insensitivity.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/regexp-char-insensitive-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS /å/i.test('/å/') is true
PASS /å/i.test('/Å/') is true
PASS /Å/i.test('/å/') is true
PASS /Å/i.test('/Å/') is true
PASS /å/i.test('P') is false
PASS /å/i.test('PASS') is false
PASS /Å/i.test('P') is false
PASS /Å/i.test('PASS') is false
PASS 'PASS'.match(/Å/i) is null
PASS 'PASS'.match(/Å/i) is null
PASS 'PASå'.replace(/å/ig, 'S') is 'PASS'
PASS 'PASå'.replace(/Å/ig, 'S') is 'PASS'
PASS 'PASÅ'.replace(/å/ig, 'S') is 'PASS'
PASS 'PASÅ'.replace(/Å/ig, 'S') is 'PASS'
PASS 'PASS'.replace(/å/ig, '%C3%A5') is 'PASS'
PASS 'PASS'.replace(/Å/ig, '%C3%A5') is 'PASS'
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Verifying encodeURIComponent/decodeURIComponent Roundtrip in JavaScript
DESCRIPTION: This snippet demonstrates testing the roundtrip consistency of JavaScript's `encodeURIComponent` and `decodeURIComponent` functions. It generates a Unicode character using `String.fromCharCode` with a specific code point, encodes it using `encodeURIComponent`, and then decodes it using `decodeURIComponent`. The surrounding text indicates these are passing test cases, implying the decoded result correctly matches the original character generated by `String.fromCharCode`. This pattern verifies the correct handling of various Unicode code points by these URI component functions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/kde/encode_decode_uri-expected.txt#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(6527)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(6778)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(7029)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(7280)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(7531)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(7782)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(8033)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(8284)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(8535)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(8786)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(9037)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(9288)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(9539)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(9790)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(10041)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(10292)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(10543)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(10794)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(11045)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(11296)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(11547)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(11798)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(12049)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(12300)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(12551)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(12802)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(13053)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(13304)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(13555)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(13806)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(14057)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(14308)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(14559)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(14810)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(15061)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(15312)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(15563)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(15814)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(16065)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(16316)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(16567)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(16818)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(17069)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(17320)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(17571)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(17822)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(18073)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(18324)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(18575)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(18826)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(19077)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(19328)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(19579)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(19830)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(20081)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(20332)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(20583)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(20834)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(21085)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(21336)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(21587)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(21838)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(22089)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(22340)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(22591)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(22842)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(23093)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(23344)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(23595)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(23846)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(24097)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(24348)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(24599)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(24850)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(25101)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(25352)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(25603)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(25854)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(26105)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(26356)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(26607)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(26858)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(27109)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(27360)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(27611)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(27862)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(28113)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(28364)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(28615)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(28866)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(29117)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(29368)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(29619)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(29870)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(30121)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(30372)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(30623)))
```

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(30874)))
```

----------------------------------------

TITLE: ArrayBuffer Transfer Example
DESCRIPTION: Demonstrates the effects of transferring an ArrayBuffer on multiple TypedArray views sharing the same buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
const ab = new ArrayBuffer(10);

const u1 = new Uint8Array(ab);
const u2 = new Uint16Array(ab);

console.log(u2.length);  // prints 5

port.postMessage(u1, [u1.buffer]);

console.log(u2.length);  // prints 0
```

----------------------------------------

TITLE: Parsing MIME Types with parseMIMEType in JavaScript
DESCRIPTION: Demonstrates using the parseMIMEType function from Undici to convert a MIME type string into a structured MIMEType object. This function implements the WHATWG 'parse a MIME type' algorithm and returns either a MIMEType object with type, subtype, parameters, and essence properties, or the string 'failure' if parsing fails.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/ContentType.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { parseMIMEType } from 'undici'

parseMIMEType('text/html; charset=gbk')
// {
//   type: 'text',
//   subtype: 'html',
//   parameters: Map(1) { 'charset' => 'gbk' },
//   essence: 'text/html'
// }
```

----------------------------------------

TITLE: Output Preview for Short TypedArray Properties Test (Runtime.evaluate)
DESCRIPTION: Details the preview structure generated by Runtime.evaluate for a short Uint8Array (length 3). It includes numeric index properties, standard TypedArray properties like 'buffer', 'byteLength', 'byteOffset', 'length', and the 'Symbol(Symbol.toStringTag)'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-with-generate-preview-expected.txt#2025-04-23_snippet_4

LANGUAGE: text
CODE:
```
{
    description : Uint8Array(3)
    overflow : false
    properties : [
        [0] : {
            name : 0
            type : number
            value : 0
        }
        [1] : {
            name : 1
            type : number
            value : 0
        }
        [2] : {
            name : 2
            type : number
            value : 0
        }
        [3] : {
            name : buffer
            subtype : arraybuffer
            type : object
            value : ArrayBuffer(3)
        }
        [4] : {
            name : byteLength
            type : number
            value : 3
        }
        [5] : {
            name : byteOffset
            type : number
            value : 0
        }
        [6] : {
            name : length
            type : number
            value : 3
        }
        [7] : {
            name : Symbol(Symbol.toStringTag)
            type : string
            value : Uint8Array
        }
    ]
    subtype : typedarray
    type : object
}
```

----------------------------------------

TITLE: Handling Hex Encoding Truncation (ESM)
DESCRIPTION: Illustrates how `Buffer.from` handles invalid or incomplete hexadecimal strings when using the 'hex' encoding in ES Module syntax, showing that decoding stops and data is truncated upon encountering a non-hex character or an odd number of final digits.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

Buffer.from('1ag123', 'hex');
// Prints <Buffer 1a>, data truncated when first non-hexadecimal value
// ('g') encountered.

Buffer.from('1a7', 'hex');
// Prints <Buffer 1a>, data truncated when data ends in single digit ('7').

Buffer.from('1634', 'hex');
// Prints <Buffer 16 34>, all data represented.
```

----------------------------------------

TITLE: Displaying Stability Index in Markdown
DESCRIPTION: This snippet demonstrates how to format and display different stability levels in the Node.js documentation using Markdown blockquotes. It includes examples for deprecated, experimental, stable, and legacy features.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/documentation.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
> Stability: 0 - Deprecated. The feature may emit warnings. Backward
> compatibility is not guaranteed.

<!-- separator -->

> Stability: 1 - Experimental. The feature is not subject to
> [semantic versioning][] rules. Non-backward compatible changes or removal may
> occur in any future release. Use of the feature is not recommended in
> production environments.
>
> Experimental features are subdivided into stages:
>
> * 1.0 - Early development. Experimental features at this stage are unfinished
>   and subject to substantial change.
> * 1.1 - Active development. Experimental features at this stage are nearing
>   minimum viability.
> * 1.2 - Release candidate. Experimental features at this stage are hopefully
>   ready to become stable. No further breaking changes are anticipated but may
>   still occur in response to user feedback. We encourage user testing and
>   feedback so that we can know that this feature is ready to be marked as
>   stable.
>
> Experimental features leave the experimental status typically either by
> graduating to stable, or are removed without a deprecation cycle.

<!-- separator -->

> Stability: 2 - Stable. Compatibility with the npm ecosystem is a high
> priority.

<!-- separator -->

> Stability: 3 - Legacy. Although this feature is unlikely to be removed and is
> still covered by semantic versioning guarantees, it is no longer actively
> maintained, and other alternatives are available.
```

----------------------------------------

TITLE: Testing Direct Property Assignment in Object Literals (JavaScript)
DESCRIPTION: A series of test cases to verify that properties in object literals are assigned directly to the object, without invoking setters or getters in the prototype chain. The tests cover various scenarios including nested prototypes and attempted setter/getter invocations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/object-literal-direct-put-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS ({a:true}).a is true
PASS ({__proto__: {a:false}, a:true}).a is true
PASS ({__proto__: {set a(v) {throw 'Should not call setter'; }}, a:true}).a is true
PASS ({__proto__: {get a() {throw 'Should not reach getter'; }}, a:true}).a is true
PASS ({__proto__: {get a() {throw 'Should not reach getter'; }, b:true}, a:true}).b is true
PASS ({__proto__: {__proto__: {a:false}}, a:true}).a is true
PASS ({__proto__: {__proto__: {set a(v) {throw 'Should not call setter'; }}}, a:true}).a is true
PASS ({__proto__: {__proto__: {get a() {throw 'Should not reach getter'; }}}, a:true}).a is true
PASS ({__proto__: {__proto__: {get a() {throw 'Should not reach getter'; }, b:true}}, a:true}).b is true
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Connecting to a TCP REPL Server using net.Socket (CJS)
DESCRIPTION: Implements a Node.js client using the `net` module to connect to the TCP REPL server running on port 1337. It pipes `process.stdin` to the socket and the socket's output to `process.stdout`, enabling interaction with the remote REPL. It also handles raw mode for terminal compatibility and uses CommonJS syntax (`require`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_28

LANGUAGE: cjs
CODE:
```
// repl-client.js
const net = require('node:net');

const sock = net.connect(1337);

process.stdin.pipe(sock);
sock.pipe(process.stdout);

sock.on('connect', () => {
  process.stdin.resume();
  process.stdin.setRawMode(true);
});

sock.on('close', () => {
  process.stdin.setRawMode(false);
  process.stdin.pause();
  sock.removeListener('close', done);
});

process.stdin.on('end', () => {
  sock.destroy();
  console.log();
});

process.stdin.on('data', (b) => {
  if (b.length === 1 && b[0] === 4) {
    process.stdin.emit('end');
  }
});
```

----------------------------------------

TITLE: Removing Certificates from macOS Keychain - Bash
DESCRIPTION: Removes previously added CA certificates by common name from the user's macOS keychain, facilitating cleanup after testing Node.js with --use-system-ca. Utilizes the 'security delete-certificate' command, requiring the exact certificate common names. Outputs are the certificates' removal from the keychain. Limitations: Only applies to macOS and uses specific user/keychain paths.
SOURCE: https://github.com/nodejs/node/blob/main/test/system-ca/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
security delete-certificate -c 'StartCom Certification Authority' \
  -t /Users/$USER/Library/Keychains/login.keychain-db
security delete-certificate -c 'NodeJS-Test-Intermediate-CA' \
  -t /Users/$USER/Library/Keychains/login.keychain-db
security delete-certificate -c 'NodeJS-Non-Trusted-Test-Intermediate-CA' \
  -t /Users/$USER/Library/Keychains/login.keychain-db
```

----------------------------------------

TITLE: Using diagnostics_channel API in Node.js (CommonJS)
DESCRIPTION: Shows the same overview of the public API for diagnostics_channel as the ESM example, but using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');

// Get a reusable channel object
const channel = diagnostics_channel.channel('my-channel');

function onMessage(message, name) {
  // Received data
}

// Subscribe to the channel
diagnostics_channel.subscribe('my-channel', onMessage);

// Check if the channel has an active subscriber
if (channel.hasSubscribers) {
  // Publish data to the channel
  channel.publish({
    some: 'data',
  });
}

// Unsubscribe from the channel
diagnostics_channel.unsubscribe('my-channel', onMessage);
```

----------------------------------------

TITLE: Testing Integer Overflow in JavaScript
DESCRIPTION: This code snippet represents a series of test cases for the 'bar' function, which is likely defined elsewhere. It tests the function with various inputs, including edge cases with large numbers, to ensure proper handling of integer overflow.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-arith-add-overflow-check-elimination-predicted-but-not-proven-int-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS bar(1, 2, {f:3}) is 6
PASS bar(2147483645, 2147483644, {f:9007199254740990}) is -8
PASS bar(2147483643, 2147483643, {f:18014398509481980}) is -16
PASS bar(2147483643, 2147483642, {f:36028797018963960}) is -16
PASS bar(2147483642, 2147483642, {f:36028797018963960}) is -16
PASS bar(2147483641, 2147483640, {f:144115188075855840}) is -32
PASS bar(2147483640, 2147483640, {f:144115188075855840}) is -64
PASS bar(2147483640, 2147483639, {f:288230376151711680}) is -64
PASS bar(2147483639, 2147483639, {f:288230376151711680}) is -64
```

----------------------------------------

TITLE: Encrypting Data Using Cipheriv as a Stream in Node.js (ES Modules)
DESCRIPTION: This snippet demonstrates how to use a Cipheriv object as a stream to encrypt data. It generates a key using scrypt, creates a random initialization vector, and then uses createCipheriv to create a cipher for encryption.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
const {
  scrypt,
  randomFill,
  createCipheriv,
} = await import('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';

// First, we'll generate the key. The key length is dependent on the algorithm.
// In this case for aes192, it is 24 bytes (192 bits).
scrypt(password, 'salt', 24, (err, key) => {
  if (err) throw err;
  // Then, we'll generate a random initialization vector
  randomFill(new Uint8Array(16), (err, iv) => {
    if (err) throw err;

    // Once we have the key and iv, we can create and use the cipher...
    const cipher = createCipheriv(algorithm, key, iv);

    let encrypted = '';
    cipher.setEncoding('hex');

    cipher.on('data', (chunk) => encrypted += chunk);
    cipher.on('end', () => console.log(encrypted));

    cipher.write('some clear text data');
    cipher.end();
  });
});
```

----------------------------------------

TITLE: Configuring EXE_SHELL for Valgrind Execution (Shell)
DESCRIPTION: This snippet demonstrates how to set the `EXE_SHELL` environment variable to wrap OpenSSL test executions with Valgrind's `memcheck` tool. It uses the `util/wrap.pl` script and passes Valgrind options `--error-exitcode=1` (exit with error code 1 on leaks), `--leak-check=full` (perform extensive memory checking), and `-q` (suppress non-error messages). This setup integrates memory checking into the standard test execution flow.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/NOTES-VALGRIND.md#2025-04-23_snippet_0

LANGUAGE: Shell
CODE:
```
EXE_SHELL=\
"`/bin/pwd`/util/wrap.pl valgrind --error-exitcode=1 --leak-check=full -q"
```

----------------------------------------

TITLE: Creating a TCP REPL Server using net.Server (MJS)
DESCRIPTION: Sets up a Node.js TCP server using the `net` module that listens on port 1337. For each incoming socket connection, it starts a full-featured REPL instance, piping the socket as input and output, enabling terminal features. The server uses ES Module syntax (`import`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_25

LANGUAGE: mjs
CODE:
```
// repl-server.js
import repl from 'node:repl';
import net from 'node:net';

net
  .createServer((socket) => {
    const r = repl.start({
      prompt: `socket ${socket.remoteAddress}:${socket.remotePort}> `,
      input: socket,
      output: socket,
      terminal: true,
      useGlobal: false,
    });
    r.on('exit', () => {
      socket.end();
    });
    r.context.socket = socket;
  })
  .listen(1337);
```

----------------------------------------

TITLE: Run Node.js with Permission Model (Disallow FS Read for Main File) (Console)
DESCRIPTION: Demonstrates running a Node.js script (`index.js`) with the Permission Model enabled (`--permission`) but without explicitly allowing file system read access to the main entry point (`index.js`). This results in an `ERR_ACCESS_DENIED` error because the Permission Model prevents reading the file itself.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_4

LANGUAGE: Console
CODE:
```
node --permission index.js
```

----------------------------------------

TITLE: Handling 'headers' Event on ClientHttp2Stream - JavaScript
DESCRIPTION: Demonstrates listening for the 'headers' event on a `ClientHttp2Stream`. This event is triggered when the server sends additional header blocks, such as 1xx informational responses. The listener receives the headers object and flags.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_19

LANGUAGE: js
CODE:
```
stream.on('headers', (headers, flags) => {
  console.log(headers);
});
```

----------------------------------------

TITLE: Using `Function.prototype.call` to Set Context and Arguments in JavaScript
DESCRIPTION: Invokes `myFunction` using the standard `Function.prototype.call` method, explicitly setting the `this` context to `myObject` and passing `'arg1'` as the first argument to `myFunction`. The output `[myObject, \"myFunction\", \"arg1\"]` confirms the `this` binding and argument passing.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-convert-this-dom-window-expected.txt#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
myFunction.call(myObject, 'arg1')
```

----------------------------------------

TITLE: Stack Traces with Native and C++ Addon Functions - Node.js Errors - JavaScript
DESCRIPTION: Demonstrates the behavior of error stack traces when involving native Node.js bindings or C++ addon functions and subsequent JavaScript function calls. Requires a native binding module named './native-binding.node'. Calls a native method that synchronously invokes a JavaScript callback, which throws an error, triggering the stack trace. The example illustrates the omission of native stack frames and the format of the resulting error trace.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_9

LANGUAGE: JavaScript
CODE:
```
const cheetahify = require('./native-binding.node');

function makeFaster() {
  // `cheetahify()` *synchronously* calls speedy.
  cheetahify(function speedy() {
    throw new Error('oh no!');
  });
}

makeFaster();
// will throw:
//   /home/gbusey/file.js:6
//       throw new Error('oh no!');
//           ^
//   Error: oh no!
//       at speedy (/home/gbusey/file.js:6:11)
//       at makeFaster (/home/gbusey/file.js:5:3)
//       at Object.<anonymous> (/home/gbusey/file.js:10:1)
//       at Module._compile (module.js:456:26)
//       at Object.Module._extensions..js (module.js:474:10)
//       at Module.load (module.js:356:32)
//       at Function.Module._load (module.js:312:12)
//       at Function.Module.runMain (module.js:497:10)
//       at startup (node.js:119:16)
//       at node.js:906:3

```

----------------------------------------

TITLE: Inspecting Proxy Object's Internal Properties - JavaScript
DESCRIPTION: Creates a Proxy for an object with 'a: 1' and a handler with property 'b: 2', then inspects Proxy via Node.js preview. Tests visibility of proxied properties, demonstrates basic proxy mechanics. Input: none; Output: Proxy showing 'a: 1'. Handler's 'b' unused. Useful for evaluating debugging output.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_33

LANGUAGE: JavaScript
CODE:
```
new Proxy({a: 1}, {b: 2})
```

----------------------------------------

TITLE: Accessing ArrayBuffer Data in N-API
DESCRIPTION: Function to retrieve the underlying data buffer of an ArrayBuffer and its length. Caution is needed as the lifetime of the data buffer is managed by the ArrayBuffer even after it's returned.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_105

LANGUAGE: c
CODE:
```
napi_status napi_get_arraybuffer_info(napi_env env,
                                      napi_value arraybuffer,
                                      void** data,
                                      size_t* byte_length)
```

----------------------------------------

TITLE: Explaining a package at a specific path
DESCRIPTION: Demonstrates how to explain a package at a specific folder path, which is useful for understanding why dependencies are duplicated to satisfy conflicting version requirements.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-explain.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ npm explain node_modules/nyc/node_modules/find-up
find-up@3.0.0 dev
node_modules/nyc/node_modules/find-up
  find-up@"^3.0.0" from nyc@14.1.1
  node_modules/nyc
    nyc@"^14.1.1" from tap@14.10.8
    node_modules/tap
      dev tap@"^14.10.8" from the root project
```

----------------------------------------

TITLE: Binding Promise Callbacks Explicitly to a Node.js Domain
DESCRIPTION: Shows how to explicitly bind a Promise handler callback to a specific domain using `domain.bind()`. Even though the `.then()` method is called within the context of `d2` (via `d2.run()`), the provided callback is bound to the promise's original domain (`d1` in this case, accessible via `p.domain`) using `p.domain.bind()`. This forces the callback logic to execute within the intended domain `d1`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/domain.md#2025-04-23_snippet_7

LANGUAGE: js
CODE:
```
const d1 = domain.create();
const d2 = domain.create();

let p;
d1.run(() => {
  p = Promise.resolve(42);
});

d2.run(() => {
  p.then(p.domain.bind((v) => {
    // running in d1
  }));
});
```

----------------------------------------

TITLE: Running Valgrind with a Suppression File for Node.js
DESCRIPTION: Command for running Valgrind with a previously created suppression file to hide known issues in Node.js. This allows developers to focus on memory leaks in their own code rather than in the Node.js runtime.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/investigating-native-memory-leaks.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
valgrind --leak-check=full \
   --suppressions=./node-12.14.1.supp \
   node hello.js
```

----------------------------------------

TITLE: Creating a TracingChannel in Node.js (ESM)
DESCRIPTION: Demonstrates how to create a TracingChannel wrapper for tracing events, either by name or by providing channel objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

const channelsByName = diagnostics_channel.tracingChannel('my-channel');

// or...

const channelsByCollection = diagnostics_channel.tracingChannel({
  start: diagnostics_channel.channel('tracing:my-channel:start'),
  end: diagnostics_channel.channel('tracing:my-channel:end'),
  asyncStart: diagnostics_channel.channel('tracing:my-channel:asyncStart'),
  asyncEnd: diagnostics_channel.channel('tracing:my-channel:asyncEnd'),
  error: diagnostics_channel.channel('tracing:my-channel:error'),
});
```

----------------------------------------

TITLE: Testing Promise Then Chain
DESCRIPTION: Demonstrates the async call chain for multiple Promise.then() calls, showing how multiple functions (foo1, foo2) are chained through promises.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/async-stack-created-frame-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
foo1 (test.js:10:2)
-- Promise.then --
promiseThen (test.js:28:14)
(anonymous) (expr.js:0:0)

foo2 (test.js:14:2)
-- Promise.then --
promiseThen (test.js:29:14)
(anonymous) (expr.js:0:0)
```

----------------------------------------

TITLE: Accessing Client Socket Information using response.socket - Node.js HTTP/2 JavaScript
DESCRIPTION: Demonstrates how to access the underlying client socket details via the `response.socket` Proxy object. This allows retrieving information like the client's remote IP address and port while applying HTTP/2 specific logic. Examples show both ES module and CommonJS usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_69

LANGUAGE: javascript
CODE:
```
import { createServer } from 'node:http2';
const server = createServer((req, res) => {
  const ip = req.socket.remoteAddress;
  const port = req.socket.remotePort;
  res.end(`Your IP address is ${ip} and your source port is ${port}.`);
}).listen(3000);
```

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');
const server = http2.createServer((req, res) => {
  const ip = req.socket.remoteAddress;
  const port = req.socket.remotePort;
  res.end(`Your IP address is ${ip} and your source port is ${port}.`);
}).listen(3000);
```

----------------------------------------

TITLE: Adding Path Alias Modules (JavaScript)
DESCRIPTION: Adds 'path/posix' and 'path/win32' alias modules. This is a minor semver change.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_31

LANGUAGE: JavaScript
CODE:
```
// Code not provided in release notes
```

----------------------------------------

TITLE: Using AsyncDispose with QuicSession in Node.js
DESCRIPTION: Implements Symbol.asyncDispose for QuicSession, which calls session.close() and returns a promise that resolves when the session has fully closed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/quic.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
session[Symbol.asyncDispose]()
```

----------------------------------------

TITLE: Converting ECDH Public Key Format using ES Modules in Node.js
DESCRIPTION: Illustrates using the static `ECDH.convertKey` method to convert a compressed ECDH public key to its uncompressed format using ES Modules. It generates a key pair, retrieves the public key in compressed hex format, converts it to uncompressed hex format using `ECDH.convertKey`, and verifies it matches the key obtained directly in uncompressed format. Requires `createECDH` and `ECDH` from `node:crypto`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_22

LANGUAGE: mjs
CODE:
```
const {
  createECDH,
  ECDH,
} = await import('node:crypto');

const ecdh = createECDH('secp256k1');
ecdh.generateKeys();

const compressedKey = ecdh.getPublicKey('hex', 'compressed');

const uncompressedKey = ECDH.convertKey(compressedKey,
                                        'secp256k1',
                                        'hex',
                                        'hex',
                                        'uncompressed');

// The converted key and the uncompressed public key should be the same
console.log(uncompressedKey === ecdh.getPublicKey('hex'));
```

----------------------------------------

TITLE: Deprecating request.connection and response.connection in Node.js HTTP Module
DESCRIPTION: The request.connection and response.connection properties are now runtime deprecated. Use request.socket and response.socket instead.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V13.md#2025-04-23_snippet_32

LANGUAGE: JavaScript
CODE:
```
const http = require('http');
http.createServer((req, res) => {
  // Use req.socket instead of req.connection
  // Use res.socket instead of res.connection
});
```

----------------------------------------

TITLE: Requiring Builtin Modules List via node:module in CommonJS - JavaScript
DESCRIPTION: This snippet loads the builtinModules list from node:module using CommonJS require syntax. Supported in Node.js v9.3.0+ and works in .cjs or .js files run as CommonJS modules. The builtinModules array can be inspected for builtin module detection and validation, with no parameters required. No extra dependencies; works in environments with CommonJS enabled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
// module.cjs\n// In a CommonJS module\nconst builtin = require('node:module').builtinModules;
```

----------------------------------------

TITLE: Suppressing Stack Frames in assert.fail Errors (Node.js, CommonJS, JavaScript)
DESCRIPTION: Illustrates use of stackStartFn to customize the starting point of the stack trace in an AssertionError using assert.fail() in CommonJS style. The snippet demonstrates stack trace truncation above the named suppressFrame function. Dependency: node:assert/strict. Parameters same as other fail examples.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_25

LANGUAGE: JavaScript
CODE:
```
const assert = require('node:assert/strict');

function suppressFrame() {
  assert.fail('a', 'b', undefined, '!==', suppressFrame);
}
suppressFrame();
// AssertionError [ERR_ASSERTION]: 'a' !== 'b'
//     at repl:1:1
//     at ContextifyScript.Script.runInThisContext (vm.js:44:33)
//     ...
```

----------------------------------------

TITLE: Local Dispatcher ProxyAgent Request
DESCRIPTION: Shows how to use ProxyAgent as a local dispatcher for specific HTTP requests.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/ProxyAgent.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { ProxyAgent, request } from 'undici'

const proxyAgent = new ProxyAgent('my.proxy.server')

const {
  statusCode,
  body
} = await request('http://localhost:3000/foo', { dispatcher: proxyAgent })

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Checking Node.js net.Socket Destroyed State Property
DESCRIPTION: A boolean property indicating if the socket connection has been destroyed. Once `true`, no further data can be transferred using this socket. See `writable.destroyed` for more details.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
socket.destroyed
```

----------------------------------------

TITLE: Signing the SEA Binary on Windows
DESCRIPTION: Signs the binary after injection on Windows using the signtool utility with SHA256 algorithm, which requires a certificate.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_12

LANGUAGE: powershell
CODE:
```
signtool sign /fd SHA256 hello.exe
```

----------------------------------------

TITLE: Creating a Pseudo Selector Node with postcss-selector-parser in JavaScript
DESCRIPTION: Creates a pseudo selector node (e.g., '::before') by calling parser.pseudo with a value. Useful for representing CSS pseudo-classes or pseudo-elements. Returns the parsed node.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
parser.pseudo({value: '::before'});
// => ::before
```

----------------------------------------

TITLE: Enhancing stream.compose to accept stream class in Node.js
DESCRIPTION: This minor semver change allows passing a stream class to the stream.compose function in Node.js, expanding its functionality for stream composition.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_25

LANGUAGE: JavaScript
CODE:
```
stream.compose(StreamClass, otherStream);
```

----------------------------------------

TITLE: Deleting a cookie with deleteCookie in Undici
DESCRIPTION: Example showing how to use the deleteCookie function to set a cookie's expiry to the unix epoch, causing browsers to delete it. It requires Headers from Undici and returns void.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Cookies.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { deleteCookie, Headers } from 'undici'

const headers = new Headers()
deleteCookie(headers, 'name')

console.log(headers.get('set-cookie')) // name=; Expires=Thu, 01 Jan 1970 00:00:00 GMT
```

----------------------------------------

TITLE: Copying Buffers (Overlapping Regions) Node.js JavaScript
DESCRIPTION: Demonstrates how `buf.copy()` handles copying data between overlapping regions within the same Buffer instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_43

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

// Create a `Buffer` and copy data from one region to an overlapping region
// within the same `Buffer`.

const buf = Buffer.allocUnsafe(26);

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf[i] = i + 97;
}

buf.copy(buf, 0, 4, 10);

console.log(buf.toString());
// Prints: efghijghijklmnopqrstuvwxyz
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

// Create a `Buffer` and copy data from one region to an overlapping region
// within the same `Buffer`.

const buf = Buffer.allocUnsafe(26);

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf[i] = i + 97;
}

buf.copy(buf, 0, 4, 10);

console.log(buf.toString());
// Prints: efghijghijklmnopqrstuvwxyz
```

----------------------------------------

TITLE: Handling Response Trailers with undici:request:trailers Channel
DESCRIPTION: Demonstrates monitoring response completion and accessing trailer information.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:request:trailers').subscribe(({ request, trailers }) => {
  // request is the same object undici:request:create
  console.log('completed', request.completed)
  // trailers are buffers.
  console.log(trailers.map((x) => x.toString()))
})
```

----------------------------------------

TITLE: Using Node.js Permission Model with Addons
DESCRIPTION: Example showing how to enable addon usage with Node.js permission model using the new --allow-addons flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_12

LANGUAGE: console
CODE:
```
node --experimental-permission --allow-addons
```

----------------------------------------

TITLE: Async Hooks API Overview - ESM
DESCRIPTION: Comprehensive example showing the main async_hooks API features including creating hooks, enabling/disabling them, and implementing various callback functions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_2

LANGUAGE: mjs
CODE:
```
import async_hooks from 'node:async_hooks';

// Return the ID of the current execution context.
const eid = async_hooks.executionAsyncId();

// Return the ID of the handle responsible for triggering the callback of the
// current execution scope to call.
const tid = async_hooks.triggerAsyncId();

// Create a new AsyncHook instance. All of these callbacks are optional.
const asyncHook =
    async_hooks.createHook({ init, before, after, destroy, promiseResolve });

// Allow callbacks of this AsyncHook instance to call. This is not an implicit
// action after running the constructor, and must be explicitly run to begin
// executing callbacks.
asyncHook.enable();

// Disable listening for new asynchronous events.
asyncHook.disable();

//
// The following are the callbacks that can be passed to createHook().
//

// init() is called during object construction. The resource may not have
// completed construction when this callback runs. Therefore, all fields of the
// resource referenced by "asyncId" may not have been populated.
function init(asyncId, type, triggerAsyncId, resource) { }

// before() is called just before the resource's callback is called. It can be
// called 0-N times for handles (such as TCPWrap), and will be called exactly 1
// time for requests (such as FSReqCallback).
function before(asyncId) { }

// after() is called just after the resource's callback has finished.
function after(asyncId) { }

// destroy() is called when the resource is destroyed.
function destroy(asyncId) { }

// promiseResolve() is called only for promise resources, when the
// resolve() function passed to the Promise constructor is invoked
// (either directly or through other means of resolving a promise).
function promiseResolve(asyncId) { }
```

----------------------------------------

TITLE: Importing the Net Module in ES Modules
DESCRIPTION: Demonstrates how to import the net module using ES Modules syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
import net from 'node:net';
```

----------------------------------------

TITLE: Creating and Exporting Data with SyntheticModule - JavaScript vm
DESCRIPTION: Demonstrates constructing a synthetic module using vm.SyntheticModule to expose non-JavaScript sources (e.g., JSON data) as ECMAScript modules. The example parses a JSON string, exports it as the default binding, and sets up the module for linking. Works in Node.js with --experimental-vm-modules flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
const vm = require('node:vm');

const source = '{ "a": 1 }';
const module = new vm.SyntheticModule(['default'], function() {
  const obj = JSON.parse(source);
  this.setExport('default', obj);
});

// Use `module` in linking...
```

----------------------------------------

TITLE: Querying Executable Paths Using which Library in Node.js
DESCRIPTION: Uses the 'which' module in Node.js to locate executables by name. The code illustrates asynchronous (callback) and promise-based usage, as well as synchronous querying with error handling and options such as 'nothrow' and custom environment variables. Dependencies include the 'which' npm package. Inputs include the name of the executable and optional options objects; outputs are the resolved paths (as string or array) or errors if not found. The code also demonstrates customizing PATH and error handling using provided callbacks.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cross-spawn/node_modules/which/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
var which = require('which')

// async usage
which('node', function (er, resolvedPath) {
  // er is returned if no "node" is found on the PATH
  // if it is found, then the absolute path to the exec is returned
})

// or promise
which('node').then(resolvedPath => { ... }).catch(er => { ... not found ... })

// sync usage
// throws if not found
var resolved = which.sync('node')

// if nothrow option is used, returns null if not found
resolved = which.sync('node', {nothrow: true})

// Pass options to override the PATH and PATHEXT environment vars.
which('node', { path: someOtherPath }, function (er, resolved) {
  if (er)
    throw er
  console.log('found at %j', resolved)
})
```

----------------------------------------

TITLE: Stripping TypeScript Types with Source URL using CommonJS
DESCRIPTION: Demonstrates using `stripTypeScriptTypes` in CommonJS with the `mode: 'strip'` and `sourceUrl` options. The provided `sourceUrl` is added as a `//# sourceURL=...` comment to the end of the stripped code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_9

LANGUAGE: cjs
CODE:
```
const { stripTypeScriptTypes } = require('node:module');
const code = 'const a: number = 1;';
const strippedCode = stripTypeScriptTypes(code, { mode: 'strip', sourceUrl: 'source.ts' });
console.log(strippedCode);
// Prints: const a         = 1\n\n//# sourceURL=source.ts;
```

----------------------------------------

TITLE: Testing Regular Expressions with Extended Characters in JavaScript
DESCRIPTION: This code snippet demonstrates a series of test cases for regular expressions using extended characters, particularly 'Ā' (U+0100). It checks various combinations of character classes and individual characters to ensure correct matching behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/regexp-extended-characters-match-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS (new RegExp("[Ā-ā]")).exec("a") is null
PASS (new RegExp("[Ā]")).exec("a") is null
PASS (new RegExp("Ā")).exec("a") is null
PASS (new RegExp("[a]")).exec("a").toString() is "a"
PASS (new RegExp("[Ā-āa]")).exec("a").toString() is "a"
PASS (new RegExp("[Āa]")).exec("a").toString() is "a"
PASS (new RegExp("a")).exec("a").toString() is "a"
PASS (new RegExp("[a-Ā]")).exec("a").toString() is "a"
PASS (new RegExp("[Ā]")).exec("Ā").toString() is "Ā"
PASS (new RegExp("[Ā-ā]")).exec("Ā").toString() is "Ā"
PASS (new RegExp("Ā")).exec("Ā").toString() is "Ā"
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Throwing Fatal Errors in Node-API
DESCRIPTION: Function to immediately terminate the process with a fatal error message and location.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_47

LANGUAGE: c
CODE:
```
NAPI_NO_RETURN void napi_fatal_error(const char* location,
                                     size_t location_len,
                                     const char* message,
                                     size_t message_len);
```

----------------------------------------

TITLE: Invoking Exported WASM Function from Node.js - JavaScript
DESCRIPTION: Demonstrates how Node.js script invokes the exported main function from the WASM instance, passing arguments to the WASM module from JavaScript. Useful as a test or entry point to verify WASM-JS interoperability and to confirm the exported API signature. Assumes that the WASM instance is already initialized and has a 'main' export.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-scope-info-expected.txt#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
Paused:
instance.exports.main(42)#

Scope:
at (anonymous) (0:25):
 - scope (global):
   -- skipped globals

exports.main returned. Test finished.
```

----------------------------------------

TITLE: Demonstrating Asynchronous Resource Creation in Node.js (CommonJS)
DESCRIPTION: Shows the creation of asynchronous resources using server creation and timeout in Node.js with CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
require('node:net').createServer().listen(function() { this.close(); });
// OR
clearTimeout(setTimeout(() => {}, 10));
```

----------------------------------------

TITLE: Checking Int32Array in JavaScript
DESCRIPTION: Illustrates how to use util.types.isInt32Array() to check if a value is a built-in Int32Array instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_79

LANGUAGE: javascript
CODE:
```
util.types.isInt32Array(new ArrayBuffer());  // Returns false
util.types.isInt32Array(new Int32Array());  // Returns true
util.types.isInt32Array(new Float64Array());  // Returns false
```

----------------------------------------

TITLE: Resource Finalization Example (CommonJS)
DESCRIPTION: Demonstrates how to use process.finalization to register cleanup callbacks for objects that may be garbage collected. Shows proper usage patterns to avoid memory leaks and closure-related issues.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_42

LANGUAGE: javascript
CODE:
```
const { finalization } = require('node:process');

// Please make sure that the function passed to finalization.register()
// does not create a closure around unnecessary objects.
function onFinalize(obj, event) {
  // You can do whatever you want with the object
  obj.dispose();
}

function setup() {
  // This object can be safely garbage collected,
  // and the resulting shutdown function will not be called.
  // There are no leaks.
  const myDisposableObject = {
    dispose() {
      // Free your resources synchronously
    },
  };

  finalization.register(myDisposableObject, onFinalize);
}

setup();
```

----------------------------------------

TITLE: Checking Float32Array in JavaScript
DESCRIPTION: Shows how to use util.types.isFloat32Array() to check if a value is a built-in Float32Array instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_73

LANGUAGE: javascript
CODE:
```
util.types.isFloat32Array(new ArrayBuffer());  // Returns false
util.types.isFloat32Array(new Float32Array());  // Returns true
util.types.isFloat32Array(new Float64Array());  // Returns false
```

----------------------------------------

TITLE: Running JavaScript Script in Node-API
DESCRIPTION: Function to execute a JavaScript string in the global scope and return its result. Does not allow access to current lexical scope or module scope.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_206

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_run_script(napi_env env,
                                        napi_value script,
                                        napi_value* result);
```

----------------------------------------

TITLE: Accessing UV Metrics Info using Node.js Performance API (CommonJS)
DESCRIPTION: This code snippet demonstrates how to use setImmediate to retrieve event loop metrics using the uvMetricsInfo property from the Node.js performance API in CommonJS format. The metrics include loop count, events processed, and events waiting.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
const { performance } = require('node:perf_hooks');

setImmediate(() => {
  console.log(performance.nodeTiming.uvMetricsInfo);
});
```

----------------------------------------

TITLE: Retrieving Callback Information with napi_get_cb_info in C
DESCRIPTION: Function used within a native callback to retrieve details about the JavaScript call, including arguments, the 'this' pointer, and user data from a callback info.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_171

LANGUAGE: c
CODE:
```
napi_status napi_get_cb_info(napi_env env,
                             napi_callback_info cbinfo,
                             size_t* argc,
                             napi_value* argv,
                             napi_value* thisArg,
                             void** data)
```

----------------------------------------

TITLE: Setting Key and Certificate for TLS Socket in Node.js
DESCRIPTION: The tlsSocket.setKeyCert() method sets the private key and certificate for a TLS socket. It takes a context object or a SecureContext as a parameter, containing at least key and cert properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
tlsSocket.setKeyCert(context)
```

----------------------------------------

TITLE: Modifying Mock Implementation (JavaScript)
DESCRIPTION: Shows how to create a mock function using `t.mock.fn()`, call it, and then dynamically change its implementation using `fn.mock.mockImplementation()` to alter its behavior for subsequent calls within a test. Requires the Node.js test runner context (`t`) and `assert`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_41

LANGUAGE: JavaScript
CODE:
```
test('changes a mock behavior', (t) => {
  let cnt = 0;

  function addOne() {
    cnt++;
    return cnt;
  }

  function addTwo() {
    cnt += 2;
    return cnt;
  }

  const fn = t.mock.fn(addOne);

  assert.strictEqual(fn(), 1);
  fn.mock.mockImplementation(addTwo);
  assert.strictEqual(fn(), 3);
  assert.strictEqual(fn(), 5);
});
```

----------------------------------------

TITLE: Demonstrating Asynchronous Resource Creation in Node.js (ES Modules)
DESCRIPTION: Illustrates the creation of asynchronous resources using server creation and timeout in Node.js with ES Modules syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
import { createServer } from 'node:net';

createServer().listen(function() { this.close(); });
// OR
clearTimeout(setTimeout(() => {}, 10));
```

----------------------------------------

TITLE: Testing Runtime.getHeapUsage in Node.js
DESCRIPTION: This code imports the runtime module, calls getHeapUsage method, and verifies that the returned object has the expected structure with properties like total_heap_size and used_heap_size.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/get-heap-usage-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
// Flags: --expose-internals
const common = require('../common');
const assert = require('assert');
const { internalBinding } = require('internal/test/binding');
const { Runtime } = internalBinding('runtime');

const heapUsage = Runtime.getHeapUsage();

assert(heapUsage);
assert('total_heap_size' in heapUsage);
assert(typeof heapUsage.total_heap_size === 'number');
assert('used_heap_size' in heapUsage);
assert(typeof heapUsage.used_heap_size === 'number');
assert('heap_size_limit' in heapUsage);
assert(typeof heapUsage.heap_size_limit === 'number');
assert('total_physical_size' in heapUsage);
assert(typeof heapUsage.total_physical_size === 'number');
assert('total_available_size' in heapUsage);
assert(typeof heapUsage.total_available_size === 'number');
assert('used_heap_size_percentage' in heapUsage);
assert(typeof heapUsage.used_heap_size_percentage === 'number');
assert('total_heap_size_executable' in heapUsage);
assert(typeof heapUsage.total_heap_size_executable === 'number');
assert('heap_size_limit_percentage' in heapUsage);
assert(typeof heapUsage.heap_size_limit_percentage === 'number');
```

----------------------------------------

TITLE: Removing a User from an npm Organization
DESCRIPTION: Shows the command to remove a user from an npm organization using npm org rm.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-org.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ npm org rm my-org mx-santos
```

----------------------------------------

TITLE: Simple AST Walking Example
DESCRIPTION: Demonstrates using the simple walk function to traverse an AST and find literal nodes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/acorn/acorn-walk/README.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const acorn = require("acorn")
const walk = require("acorn-walk")

walk.simple(acorn.parse("let x = 10"), {
  Literal(node) {
    console.log(`Found a literal: ${node.value}`)
  }
})
```

----------------------------------------

TITLE: Retrieving Context from Thread-safe Function in N-API
DESCRIPTION: Retrieves the context data associated with a thread-safe function. This API can be called from any thread using the function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_213

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status
napi_get_threadsafe_function_context(napi_threadsafe_function func,
                                     void** result);
```

----------------------------------------

TITLE: Asynchronous Iteration Method in Glob
DESCRIPTION: Returns an AsyncGenerator that iterates over the glob results asynchronously.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/glob/README.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
g.iterate()
```

----------------------------------------

TITLE: Measuring Dependency Load Time with PerformanceObserver and performance.timerify (CommonJS) - JavaScript
DESCRIPTION: Demonstrates how to profile the duration of require() calls to load dependencies using performance.timerify and PerformanceObserver in CommonJS format. Prerequisites: Node.js, 'node:perf_hooks', and 'node:module'. The require function is monkey-patched to capture timings. Output displays required module name and duration. Keeps compatibility with legacy code, and will fail if 'some-module' is unavailable.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_23

LANGUAGE: JavaScript
CODE:
```
```cjs\n'use strict';\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\nconst mod = require('node:module');\n\n// Monkey patch the require function\nmod.Module.prototype.require =\n  performance.timerify(mod.Module.prototype.require);\nrequire = performance.timerify(require);\n\n// Activate the observer\nconst obs = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  entries.forEach((entry) => {\n    console.log(`require('${entry[0]}')`, entry.duration);\n  });\n  performance.clearMarks();\n  performance.clearMeasures();\n  obs.disconnect();\n});\nobs.observe({ entryTypes: ['function'] });\n\nrequire('some-module');\n```
```

----------------------------------------

TITLE: Running HTTP Server Benchmark (JavaScript)
DESCRIPTION: Illustrates how to benchmark a simple Node.js HTTP server using the `bench.http()` method. It sets up benchmark configurations, creates an HTTP server that responds with a large chunk, starts the server, and then calls `bench.http()` to initiate the external benchmarking tool against the running server. A callback closes the server when benchmarking is done.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-and-running-benchmarks.md#_snippet_24

LANGUAGE: javascript
CODE:
```
'use strict';

const common = require('../common.js');

const bench = common.createBenchmark(main, {
  kb: [64, 128, 256, 1024],
  connections: [100, 500],
  duration: 5,
});

function main(conf) {
  const http = require('node:http');
  const len = conf.kb * 1024;
  const chunk = Buffer.alloc(len, 'x');
  const server = http.createServer((req, res) => {
    res.end(chunk);
  });

  server.listen(common.PORT, () => {
    bench.http({
      connections: conf.connections,
    }, () => {
      server.close();
    });
  });
}
```

----------------------------------------

TITLE: Creating a Directory on Windows Root with mkdir() in Node.js
DESCRIPTION: Demonstrates the error that occurs when attempting to create a directory at the root level on Windows systems. This shows a limitation of the mkdir function on Windows operating systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_62

LANGUAGE: javascript
CODE:
```
import { mkdir } from 'node:fs';

mkdir('/', { recursive: true }, (err) => {
  // => [Error: EPERM: operation not permitted, mkdir 'C:\']
});
```

----------------------------------------

TITLE: Customizing Usage Description in Commander.js
DESCRIPTION: Shows how to customize the usage description in the first line of the help output using the usage() method.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
program
  .name("my-command")
  .usage("[global options] command");
```

----------------------------------------

TITLE: Running Tests in qrcode-terminal Project with npm test (Shell)
DESCRIPTION: Provides the shell command to run the test suite using npm. Will execute any test scripts defined in the project's package.json, verifying correct behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/qrcode-terminal/README.md#2025-04-23_snippet_10

LANGUAGE: shell
CODE:
```
npm test
```

----------------------------------------

TITLE: Globbing Files Synchronously in Node.js
DESCRIPTION: Demonstrates the usage of fs.globSync() to find files matching a pattern. This method returns an array of file paths that match the given glob pattern.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_87

LANGUAGE: javascript
CODE:
```
import { globSync } from 'node:fs';

console.log(globSync('**/*.js'));
```

LANGUAGE: javascript
CODE:
```
const { globSync } = require('node:fs');

console.log(globSync('**/*.js'));
```

----------------------------------------

TITLE: Configuring DNS Servers using dns.setServers in Node.js
DESCRIPTION: This JavaScript code demonstrates how to use the `dns.setServers` function in Node.js to configure the DNS servers used for resolution. It shows passing an array of server addresses, including IPv4, IPv6, and addresses with custom ports, following RFC 5952 format. Note that this affects `dns.resolve*` and `dns.reverse`, but not `dns.lookup`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_13

LANGUAGE: js
CODE:
```
dns.setServers([
  '8.8.8.8',
  '[2001:4860:4860::8888]',
  '8.8.8.8:1053',
  '[2001:4860:4860::8888]:1053',
]);
```

----------------------------------------

TITLE: Duplex Stream from Web Streams (ES Modules)
DESCRIPTION: Example showing how to create a Duplex stream from Web Streams using ES Modules syntax
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_64

LANGUAGE: javascript
CODE:
```
import { Duplex } from 'node:stream';
import {
  ReadableStream,
  WritableStream,
} from 'node:stream/web';

const readable = new ReadableStream({
  start(controller) {
    controller.enqueue('world');
  },
});

const writable = new WritableStream({
  write(chunk) {
    console.log('writable', chunk);
  },
});

const pair = {
  readable,
  writable,
};
const duplex = Duplex.fromWeb(pair, { encoding: 'utf8', objectMode: true });

duplex.write('hello');

for await (const chunk of duplex) {
  console.log('readable', chunk);
}
```

----------------------------------------

TITLE: Copying TypedArray Bytes with Buffer.copyBytesFrom (Node.js)
DESCRIPTION: Shows how to use `Buffer.copyBytesFrom` to create a new Buffer by copying a specific range of bytes from a `TypedArray` (Uint16Array) into a new `Buffer`. It highlights that the new buffer is a copy and changes to the original TypedArray do not affect the new Buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_26

LANGUAGE: js
CODE:
```
const u16 = new Uint16Array([0, 0xffff]);
const buf = Buffer.copyBytesFrom(u16, 1, 1);
u16[1] = 0;
console.log(buf.length); // 2
console.log(buf[0]); // 255
console.log(buf[1]); // 255
```

----------------------------------------

TITLE: Checking HTTP Response Completion in Node.js
DESCRIPTION: Demonstrates how to use the complete property of an HTTP response to determine if a message was fully transmitted before a connection was terminated. This is useful for detecting interrupted connections.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_44

LANGUAGE: javascript
CODE:
```
const req = http.request({
  host: '127.0.0.1',
  port: 8080,
  method: 'POST',
}, (res) => {
  res.resume();
  res.on('end', () => {
    if (!res.complete)
      console.error(
        'The connection was terminated while the message was still being sent');
  });
});
```

----------------------------------------

TITLE: Installing Remote Tarball Package with NPM
DESCRIPTION: Example of installing a package from a remote tarball URL.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
npm install https://github.com/indexzero/forever/tarball/v0.5.6
```

----------------------------------------

TITLE: Creating and Resolving Promises with Tracked Async Hooks - JavaScript
DESCRIPTION: This snippet demonstrates how promises trigger lifecycle events in async_hooks, such as init, before, after, and promiseResolve. The code creates a promise that resolves immediately and attaches a then handler; the commentary explains which hooks are called as a result. No external dependencies are required for this demonstration, beyond a Node.js environment with async_hooks enabled. The focus is on showing the IDs and the hook order resulting from promise resolution and then chaining. The inputs are the resolved value and then handler (which does nothing). Outputs are implicit: the trace of hook calls and resource IDs.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_16

LANGUAGE: js
CODE:
```
new Promise((resolve) => resolve(true)).then((a) => {});
```

LANGUAGE: text
CODE:
```
init for PROMISE with id 5, trigger id: 1
  promise resolve 5      # corresponds to resolve(true)
init for PROMISE with id 6, trigger id: 5  # the Promise returned by then()
  before 6               # the then() callback is entered
  promise resolve 6      # the then() callback resolves the promise by returning
  after 6
```

----------------------------------------

TITLE: Writing Early Hints with HTTP Response in Node.js
DESCRIPTION: Demonstrates how to send HTTP/1.1 103 Early Hints messages to clients with Link headers for resource preloading. Shows three patterns: sending a single link, multiple links, and using a callback function after the hints are sent.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_41

LANGUAGE: javascript
CODE:
```
const earlyHintsLink = '</styles.css>; rel=preload; as=style';
response.writeEarlyHints({
  'link': earlyHintsLink,
});

const earlyHintsLinks = [
  '</styles.css>; rel=preload; as=style',
  '</scripts.js>; rel=preload; as=script',
];
response.writeEarlyHints({
  'link': earlyHintsLinks,
  'x-trace-id': 'id for diagnostics',
});

const earlyHintsCallback = () => console.log('early hints message sent');
response.writeEarlyHints({
  'link': earlyHintsLinks,
}, earlyHintsCallback);
```

----------------------------------------

TITLE: Importing Builtin Modules List via node:module in ECMAScript Module - JavaScript
DESCRIPTION: This snippet imports the builtinModules list from node:module using ECMAScript module syntax. Requires Node.js 9.3.0+ and ESM module support. The builtinModules array contains the names of all Node.js core modules and prefix-only modules. There are no input parameters, and it is intended for verifying if a module is provided by Node.js or a third party. No external dependencies are required.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
// module.mjs\n// In an ECMAScript module\nimport { builtinModules as builtin } from 'node:module';
```

----------------------------------------

TITLE: Pausing Data Reading on a Node.js net.Socket
DESCRIPTION: Pauses the reading of data from the socket. Consequently, 'data' events will not be emitted. This is useful for implementing flow control, such as throttling uploads. Returns the socket instance, allowing for method chaining.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
socket.pause()
```

----------------------------------------

TITLE: Creating JavaScript Functions from Native Code with napi_create_function in C
DESCRIPTION: Function that allows an add-on author to create a JavaScript function object in native code, providing the mechanism for JavaScript to call into the add-on's native code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_168

LANGUAGE: c
CODE:
```
napi_status napi_create_function(napi_env env,
                                 const char* utf8name,
                                 size_t length,
                                 napi_callback cb,
                                 void* data,
                                 napi_value* result);
```

----------------------------------------

TITLE: Creating a channel object in Node.js (ESM)
DESCRIPTION: Illustrates how to create a named channel object for publishing messages efficiently.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

const channel = diagnostics_channel.channel('my-channel');
```

----------------------------------------

TITLE: Using promiseHooks.createHook in ECMAScript Modules
DESCRIPTION: Registers functions to be called for different lifetime events of each promise. Takes an object with optional init, before, after, and settled callbacks. Returns a function to disable all hooks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_21

LANGUAGE: mjs
CODE:
```
import { promiseHooks } from 'node:v8';

const stopAll = promiseHooks.createHook({
  init(promise, parent) {},
});
```

----------------------------------------

TITLE: Example CycloneDX SBOM Output in JSON
DESCRIPTION: This snippet demonstrates the structure of a CycloneDX Software Bill of Materials (SBOM) generated by the npm sbom command. It includes metadata about the project and its dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-sbom.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "$schema": "http://cyclonedx.org/schema/bom-1.5.schema.json",
  "bomFormat": "CycloneDX",
  "specVersion": "1.5",
  "serialNumber": "urn:uuid:09f55116-97e1-49cf-b3b8-44d0207e7730",
  "version": 1,
  "metadata": {
    "timestamp": "2023-09-01T00:00:00.001Z",
    "lifecycles": [
      {
        "phase": "build"
      }
    ],
    "tools": [
      {
        "vendor": "npm",
        "name": "cli",
        "version": "10.1.0"
      }
    ],
    "component": {
      "bom-ref": "simple@1.0.0",
      "type": "library",
      "name": "simple",
      "version": "1.0.0",
      "scope": "required",
      "author": "John Doe",
      "description": "simple react app",
      "purl": "pkg:npm/simple@1.0.0",
      "properties": [
        {
          "name": "cdx:npm:package:path",
          "value": ""
        }
      ],
      "externalReferences": [],
      "licenses": [
        {
          "license": {
            "id": "MIT"
          }
        }
      ]
    }
  },
  "components": [
    {
      "bom-ref": "lodash@4.17.21",
      "type": "library",
      "name": "lodash",
      "version": "4.17.21",
      "scope": "required",
      "author": "John-David Dalton",
      "description": "Lodash modular utilities.",
      "purl": "pkg:npm/lodash@4.17.21",
      "properties": [
        {
          "name": "cdx:npm:package:path",
          "value": "node_modules/lodash"
        }
      ],
      "externalReferences": [
        {
          "type": "distribution",
          "url": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz"
        },
        {
          "type": "vcs",
          "url": "git+https://github.com/lodash/lodash.git"
        },
        {
          "type": "website",
          "url": "https://lodash.com/"
        },
        {
          "type": "issue-tracker",
          "url": "https://github.com/lodash/lodash/issues"
        }
      ],
      "hashes": [
        {
          "alg": "SHA-512",
          "content": "bf690311ee7b95e713ba568322e3533f2dd1cb880b189e99d4edef13592b81764daec43e2c54c61d5c558dc5cfb35ecb85b65519e74026ff17675b6f8f916f4a"
        }
      ],
      "licenses": [
        {
          "license": {
            "id": "MIT"
          }
        }
      ]
    }
  ],
  "dependencies": [
    {
      "ref": "simple@1.0.0",
      "dependsOn": [
        "lodash@4.17.21"
      ]
    },
    {
      "ref": "lodash@4.17.21",
      "dependsOn": []
    }
  ]
}
```

----------------------------------------

TITLE: Exposing a C++ Add Function to Node.js Using V8 (C++)
DESCRIPTION: Implements a native C++ addon exposing an 'add' function to JavaScript through Node.js and V8 APIs. Handles argument count and type-checking, performs addition, and sets the result for JavaScript, throwing JavaScript TypeErrors for invalid calls. Requires node-gyp and V8 headers to build; expects two numeric arguments and outputs their sum as a JavaScript Number.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_13

LANGUAGE: cpp
CODE:
```
// addon.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::Exception;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\n// This is the implementation of the \"add\" method\n// Input arguments are passed using the\n// const FunctionCallbackInfo<Value>& args struct\nvoid Add(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n\n  // Check the number of arguments passed.\n  if (args.Length() < 2) {\n    // Throw an Error that is passed back to JavaScript\n    isolate->ThrowException(Exception::TypeError(\n        String::NewFromUtf8(isolate,\n                            \"Wrong number of arguments\").ToLocalChecked()));\n    return;\n  }\n\n  // Check the argument types\n  if (!args[0]->IsNumber() || !args[1]->IsNumber()) {\n    isolate->ThrowException(Exception::TypeError(\n        String::NewFromUtf8(isolate,\n                            \"Wrong arguments\").ToLocalChecked()));\n    return;\n  }\n\n  // Perform the operation\n  double value =\n      args[0].As<Number>()->Value() + args[1].As<Number>()->Value();\n  Local<Number> num = Number::New(isolate, value);\n\n  // Set the return value (using the passed in\n  // FunctionCallbackInfo<Value>&)\n  args.GetReturnValue().Set(num);\n}\n\nvoid Init(Local<Object> exports) {\n  NODE_SET_METHOD(exports, \"add\", Add);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\n
```

----------------------------------------

TITLE: Modifying Default Cipher Suites in Runtime
DESCRIPTION: JavaScript code showing how to modify the default TLS cipher suites at runtime by updating tls.DEFAULT_CIPHERS to remove obsolete ciphers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
tls.DEFAULT_CIPHERS +=
  ':!ECDHE-RSA-AES128-SHA:!ECDHE-RSA-AES128-SHA256:!ECDHE-RSA-AES256-SHA:!ECDHE-RSA-AES256-SHA384' +
  ':!ECDHE-ECDSA-AES128-SHA:!ECDHE-ECDSA-AES128-SHA256:!ECDHE-ECDSA-AES256-SHA:!ECDHE-ECDSA-AES256-SHA384' +
  ':!kRSA';
```

----------------------------------------

TITLE: REPL Editor Mode Demo (console)
DESCRIPTION: Demonstrates entering editor mode in the Node.js REPL, defining a function, and invoking it interactively. No external modules are needed. Key parameters: User uses the '.editor' command and provides a JavaScript function, exits editor mode with Ctrl+D, and receives evaluated results. Outputs the return value of the function and a confirmation of leaving editor mode.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_7

LANGUAGE: console
CODE:
```
> .editor
// Entering editor mode (^D to finish, ^C to cancel)
function welcome(name) {
  return `Hello ${name}!`;
}

welcome('Node.js User');

// ^D
'Hello Node.js User!'
>
```

----------------------------------------

TITLE: Creating a URL from Non-String Input
DESCRIPTION: Example showing how to create a URL from an object that implements toString(), demonstrating the coercion of values to strings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
const myURL = new URL({ toString: () => 'https://example.org/' });
// https://example.org/
```

----------------------------------------

TITLE: Configuring npm version Command with Message in Bash
DESCRIPTION: Shows how to use the npm version command with a custom commit message, using %s as a placeholder for the new version number.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-version.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm version patch -m "Upgrade to %s for reasons"
```

----------------------------------------

TITLE: Custom npm exec Call with --call Flag - Bash
DESCRIPTION: Demonstrates using the npm CLI's '--call' option with 'npm exec' to run a custom command bundled with specified packages. This is useful for workflows requiring dynamic package execution in a single CLI step. Depends on npm's exec implementation, the example installs 'yo' and 'generator-node' before invoking a scaffolding command. Key parameters include '--package', '--call', and any scriptable command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/config.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm exec --package yo --package generator-node --call "yo node"
```

----------------------------------------

TITLE: Transforming TypeScript Features using ES Modules
DESCRIPTION: Shows how to use `stripTypeScriptTypes` in an ES Module with `mode: 'transform'` and `sourceMap: true`. This mode not only strips type annotations but also transforms TypeScript-specific features (like namespaces) into standard JavaScript and generates an inline source map.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_10

LANGUAGE: mjs
CODE:
```
import { stripTypeScriptTypes } from 'node:module';
const code = `
  namespace MathUtil {
    export const add = (a: number, b: number) => a + b;
  }`;
const strippedCode = stripTypeScriptTypes(code, { mode: 'transform', sourceMap: true });
console.log(strippedCode);
// Prints:
// var MathUtil;
// (function(MathUtil) {
//     MathUtil.add = (a, b)=>a + b;
// })(MathUtil || (MathUtil = {}));
// # sourceMappingURL=data:application/json;base64, ...
```

----------------------------------------

TITLE: Handling Negation and Comments in Minimatch Patterns
DESCRIPTION: Options for controlling negation behavior and comment handling in Minimatch patterns.
SOURCE: https://github.com/nodejs/node/blob/main/deps/minimatch/README.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
options.nonegate = true;
options.nocomment = true;
```

----------------------------------------

TITLE: Defining OpenSSL AFALG Engine Error Codes in Config
DESCRIPTION: A comprehensive list of error codes for the OpenSSL AF_ALG (AFALG) engine. These error codes cover various failure scenarios such as initialization failures, socket operations, memory allocation issues, and kernel support problems. Each error code has a numeric identifier and a descriptive message.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/engines/e_afalg.txt#2025-04-23_snippet_0

LANGUAGE: config
CODE:
```
AFALG_R_EVENTFD_FAILED:108:eventfd failed
AFALG_R_FAILED_TO_GET_PLATFORM_INFO:111:failed to get platform info
AFALG_R_INIT_FAILED:100:init failed
AFALG_R_IO_SETUP_FAILED:105:io setup failed
AFALG_R_KERNEL_DOES_NOT_SUPPORT_AFALG:101:kernel does not support afalg
AFALG_R_KERNEL_DOES_NOT_SUPPORT_ASYNC_AFALG:107:\
	kernel does not support async afalg
AFALG_R_MEM_ALLOC_FAILED:102:mem alloc failed
AFALG_R_SOCKET_ACCEPT_FAILED:110:socket accept failed
AFALG_R_SOCKET_BIND_FAILED:103:socket bind failed
AFALG_R_SOCKET_CREATE_FAILED:109:socket create failed
AFALG_R_SOCKET_OPERATION_FAILED:104:socket operation failed
AFALG_R_SOCKET_SET_KEY_FAILED:106:socket set key failed
```

----------------------------------------

TITLE: Measuring Memory Usage in VM Contexts
DESCRIPTION: Shows how to measure memory usage in VM contexts using both summary and detailed modes, with examples of eager execution and handling the returned Promise.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
const vm = require('node:vm');
// Measure the memory used by the main context.
vm.measureMemory({ mode: 'summary' })
  // This is the same as vm.measureMemory()
  .then((result) => {
    // The current format is:
    // {
    //   total: {
    //      jsMemoryEstimate: 2418479, jsMemoryRange: [ 2418479, 2745799 ]
    //    }
    // }
    console.log(result);
  });

const context = vm.createContext({ a: 1 });
vm.measureMemory({ mode: 'detailed', execution: 'eager' })
  .then((result) => {
    // Reference the context here so that it won't be GC'ed
    // until the measurement is complete.
    console.log(context.a);
    // {
    //   total: {
    //     jsMemoryEstimate: 2574732,
    //     jsMemoryRange: [ 2574732, 2904372 ]
    //   },
    //   current: {
    //     jsMemoryEstimate: 2438996,
    //     jsMemoryRange: [ 2438996, 2768636 ]
    //   },
    //   other: [
    //     {
    //       jsMemoryEstimate: 135736,
    //       jsMemoryRange: [ 135736, 465376 ]
    //     }
    //   ]
    // }
    console.log(result);
  });
```

----------------------------------------

TITLE: Stream-based Gzip Compression with Promise Pipeline using CommonJS
DESCRIPTION: Demonstrates compressing a file using the promise-based `pipeline` API from `node:stream/promises`. It defines an async function `do_gzip` that takes input and output file paths, creates streams, and awaits pipeline completion, handling errors with `.catch`. Uses CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_5

LANGUAGE: cjs
CODE:
```
const {
  createReadStream,
  createWriteStream,
} = require('node:fs');
const process = require('node:process');
const { createGzip } = require('node:zlib');
const { pipeline } = require('node:stream/promises');

async function do_gzip(input, output) {
  const gzip = createGzip();
  const source = createReadStream(input);
  const destination = createWriteStream(output);
  await pipeline(source, gzip, destination);
}

do_gzip('input.txt', 'input.txt.gz')
  .catch((err) => {
    console.error('An error occurred:', err);
    process.exitCode = 1;
  });
```

----------------------------------------

TITLE: Reading a File with readableWebStream Using Node.js fs/promises - JavaScript CommonJS
DESCRIPTION: Shows the Node.js CommonJS alternative for opening files via require('node:fs/promises'), obtaining a ReadableStream from filehandle.readableWebStream(), and iterating over its chunks. Used in environments using CommonJS modules syntax, with similar requirements as the ES module variant. After reading, the file should be closed to avoid resource leaks; calling readableWebStream() more than once or after closure throws an error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
const {
  open,
} = require('node:fs/promises');

(async () => {
  const file = await open('./some/file/to/read');

  for await (const chunk of file.readableWebStream())
    console.log(chunk);

  await file.close();
})();

```

----------------------------------------

TITLE: Output: console.warn with %f formatter and object throwing error in toString
DESCRIPTION: Shows the structured exception details captured when calling `console.warn('%f', {toString() { throw new Error(); }})`. An error occurs during the attempt to convert the object to a number via toString(), and the exception details are logged.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-formatter-expected.txt#2025-04-23_snippet_5

LANGUAGE: text
CODE:
```
{
    columnNumber : 33
    exception : {
        className : Error
        description : Error     at Object.toString (<anonymous>:1:40)     at parseFloat (<anonymous>)     at console.warn (<anonymous>)     at <anonymous>:1:9
        objectId : <objectId>
        subtype : error
        type : object
    }
    exceptionId : <exceptionId>
    lineNumber : 0
    scriptId : <scriptId>
    stackTrace : {
        callFrames : [
            [0] : {
                columnNumber : 39
                functionName : toString
                lineNumber : 0
                scriptId : <scriptId>
                url : 
            }
            [1] : {
                columnNumber : 8
                functionName : 
                lineNumber : 0
                scriptId : <scriptId>
                url : 
            }
        ]
    }
    text : Uncaught
}
```

----------------------------------------

TITLE: Defining Abseil C++ Container Library with Bazel Macro - Starlark
DESCRIPTION: Configures the 'algorithm_container' library using the absl_cc_library macro, specifying 'container.h' as its header file. It applies standard compiler flags and declares dependencies on absl::algorithm and other core Abseil headers including meta, nullability, and core_headers. This target is structured for modular inclusion and provides extended algorithmic utilities for containers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/algorithm/CMakeLists.txt#2025-04-23_snippet_2

LANGUAGE: Starlark
CODE:
```
absl_cc_library(
  NAME
    algorithm_container
  HDRS
    "container.h"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::algorithm
    absl::config
    absl::core_headers
    absl::meta
    absl::nullability
  PUBLIC
)
```

----------------------------------------

TITLE: Using `which` Asynchronously and Synchronously in Node.js
DESCRIPTION: Demonstrates basic asynchronous and synchronous usage of the `which` package in JavaScript. It shows how to find an executable ('node') using `await which()` and `which.sync()`. The `nothrow: true` option returns `null` instead of throwing an error if the executable is not found. Custom path variables (`path`, `pathExt`) can also be provided.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/which/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const which = require('which')

// async usage
// rejects if not found
const resolved = await which('node')

// if nothrow option is used, returns null if not found
const resolvedOrNull = await which('node', { nothrow: true })

// sync usage
// throws if not found
const resolved = which.sync('node')

// if nothrow option is used, returns null if not found
const resolvedOrNull = which.sync('node', { nothrow: true })

// Pass options to override the PATH and PATHEXT environment vars.
await which('node', { path: someOtherPath, pathExt: somePathExt })
```

----------------------------------------

TITLE: Creating Optimized UTF16 Property Keys in N-API
DESCRIPTION: Function that creates an optimized JavaScript string from a UTF16-LE-encoded C string to be used as a property key for objects. The native string is copied and optimized for property access.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_102

LANGUAGE: c
CODE:
```
napi_status NAPI_CDECL node_api_create_property_key_utf16(napi_env env,
                                                          const char16_t* str,
                                                          size_t length,
                                                          napi_value* result);
```

----------------------------------------

TITLE: Testing JSON Stringify for Date Objects and Custom toJSON/toISOString - JavaScript
DESCRIPTION: This group tests JSON.stringify for Date objects with various customizations to their toJSON and toISOString methods, verifying correct serialization or error handling. It includes cases where methods are missing, replaced, return non-string values or throw exceptions, and when properties are reset to null or undefined. Proper serialization depends on Date prototype methods, so altering or omitting these methods changes the behavior and can produce exceptions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/run-json-stringify-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(new Date(0));
    }
```

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({toJSON: Date.prototype.toJSON});
    }
```

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({toJSON: Date.prototype.toJSON, toISOString: function(){ return "custom toISOString"; }});
    }
```

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({toJSON: Date.prototype.toJSON, toISOString: function(){ return {}; }});
    }
```

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        return jsonObject.stringify({toJSON: Date.prototype.toJSON, toISOString: function(){ throw "An exception"; }});
    }
```

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        var d = new Date(0);
        d.toISOString = null;
        return jsonObject.stringify(d);
    }
```

LANGUAGE: JavaScript
CODE:
```
function (jsonObject){
        var d = new Date(0);
        d.toJSON = undefined;
        return jsonObject.stringify(d);
    }
```

----------------------------------------

TITLE: Debugger Response: Breakpoint Set Confirmation (JSON)
DESCRIPTION: This JSON object represents the response received from a debugger after successfully setting a breakpoint in Wasm code. It includes a message ID, the assigned breakpoint ID, and the actual location (script ID, line number 0, column number 33) where the breakpoint was placed within the Wasm module. Placeholders like `<messageId>`, `<scriptId>`, and `<breakpointId>` represent dynamic values specific to the test run.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-terminate-execution-on-pause-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        actualLocation : {
            columnNumber : 33
            lineNumber : 0
            scriptId : <scriptId>
        }
        breakpointId : <breakpointId>
    }
}
```

----------------------------------------

TITLE: Defining Internal Cord Library in CMake
DESCRIPTION: This snippet defines an internal C++ library for cord handling in Abseil. It specifies header and source files, compiler options, and dependencies for the cord implementation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/strings/CMakeLists.txt#2025-04-23_snippet_4

LANGUAGE: CMake
CODE:
```
absl_cc_library(
  NAME
    cord_internal
  HDRS
    "internal/cord_data_edge.h"
    "internal/cord_internal.h"
    "internal/cord_rep_btree.h"
    "internal/cord_rep_btree_navigator.h"
    "internal/cord_rep_btree_reader.h"
    "internal/cord_rep_crc.h"
    "internal/cord_rep_consume.h"
    "internal/cord_rep_flat.h"
  SRCS
    "internal/cord_internal.cc"
    "internal/cord_rep_btree.cc"
    "internal/cord_rep_btree_navigator.cc"
    "internal/cord_rep_btree_reader.cc"
    "internal/cord_rep_crc.cc"
    "internal/cord_rep_consume.cc"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::base_internal
    absl::compressed_tuple
    absl::config
    absl::container_memory
    absl::compare
    absl::core_headers
    absl::crc_cord_state
    absl::endian
    absl::inlined_vector
    absl::layout
    absl::raw_logging_internal
    absl::strings
    absl::throw_delegate
    absl::type_traits
)
```

----------------------------------------

TITLE: Testing Complex Increment/Decrement Combinations in JavaScript
DESCRIPTION: This snippet demonstrates the testing of more complex combinations of increment and decrement operators' decompilation. It includes tests with multiple increment/decrement operators used together.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/function-decompilation-operators-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
PASS decompiledFunction is 'function () {  x++ + ++y;}'
PASS decompiledFunction is 'function () {  x++ - ++y;}'
PASS decompiledFunction is 'function () {  x++ * ++y;}'
PASS decompiledFunction is 'function () {  x++ / ++y;}'
PASS decompiledFunction is 'function () {  x-- + ++y;}'
PASS decompiledFunction is 'function () {  x-- - ++y;}'
PASS decompiledFunction is 'function () {  x-- * ++y;}'
PASS decompiledFunction is 'function () {  x-- / ++y;}'
PASS decompiledFunction is 'function () {  x++ + --y;}'
PASS decompiledFunction is 'function () {  x++ - --y;}'
PASS decompiledFunction is 'function () {  x++ * --y;}'
PASS decompiledFunction is 'function () {  x++ / --y;}'
PASS decompiledFunction is 'function () {  x-- + --y;}'
PASS decompiledFunction is 'function () {  x-- - --y;}'
PASS decompiledFunction is 'function () {  x-- * --y;}'
PASS decompiledFunction is 'function () {  x-- / --y;}'
```

----------------------------------------

TITLE: Signature of Perl CBC Mode Function Generator
DESCRIPTION: Shows the function signature for `&cbc` from `cbc.pl`. This function generates assembly code for a CBC (Cipher Block Chaining) mode encryption/decryption wrapper function. It takes the name for the generated function, names of the underlying block encryption and decryption functions, a flag for byte swapping, and the parameter indices for IV, encryption flag, and up to three additional parameters to pass through to the underlying block functions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/crypto/perlasm/README.md#2025-04-23_snippet_6

LANGUAGE: perl
CODE:
```
&cbc($name,
     $encrypt_function_name,
     $decrypt_function_name,
     $true_if_byte_swap_needed,
     $parameter_number_for_iv,
     $parameter_number_for_encrypt_flag,
     $first_parameter_to_pass,
     $second_parameter_to_pass,
     $third_parameter_to_pass);
```

----------------------------------------

TITLE: Handling Warnings with process.on('warning') Without Detail - JavaScript
DESCRIPTION: These examples set up a 'warning' event handler on the process object, logging the warning's name, message, code, and stack. This is useful for capturing basic warning information when custom warnings are emitted, excluding the optional detail property seen in other examples. Only Node.js built-in modules are used, with no required configuration.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_36

LANGUAGE: mjs
CODE:
```
import process from 'node:process';\n\nprocess.on('warning', (warning) => {\n  console.warn(warning.name);\n  console.warn(warning.message);\n  console.warn(warning.code);\n  console.warn(warning.stack);\n});
```

LANGUAGE: cjs
CODE:
```
const process = require('node:process');\n\nprocess.on('warning', (warning) => {\n  console.warn(warning.name);\n  console.warn(warning.message);\n  console.warn(warning.code);\n  console.warn(warning.stack);\n});
```

----------------------------------------

TITLE: Defining Internal C++ Library crc_cpu_detect in Bazel
DESCRIPTION: Defines an internal-only Abseil C++ library named `crc_cpu_detect` using the `absl_cc_library` rule. This library is responsible for CPU feature detection relevant to CRC calculations. It includes the `internal/cpu_detect.h` header and `internal/cpu_detect.cc` source file, uses default Abseil compile options, and depends on `absl::base` and `absl::config`. Direct dependency on this target is discouraged.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/crc/CMakeLists.txt#2025-04-23_snippet_0

LANGUAGE: starlark
CODE:
```
# Internal-only target, do not depend on directly.
absl_cc_library(
  NAME
    crc_cpu_detect
  HDRS
    "internal/cpu_detect.h"
  SRCS
    "internal/cpu_detect.cc"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::base
    absl::config
)
```

----------------------------------------

TITLE: Creating Custom Test Reporter with Transform (CJS)
DESCRIPTION: Demonstrates implementing a custom test reporter using Node.js `stream.Transform` in CJS. It processes various test events emitted by a `TestsStream` and transforms them into simple string outputs, similar to the ESM version. Depends on `node:stream`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_31

LANGUAGE: cjs
CODE:
```
const { Transform } = require('node:stream');

const customReporter = new Transform({
  writableObjectMode: true,
  transform(event, encoding, callback) {
    switch (event.type) {
      case 'test:dequeue':
        callback(null, `test ${event.data.name} dequeued`);
        break;
      case 'test:enqueue':
        callback(null, `test ${event.data.name} enqueued`);
        break;
      case 'test:watch:drained':
        callback(null, 'test watch queue drained');
        break;
      case 'test:start':
        callback(null, `test ${event.data.name} started`);
        break;
      case 'test:pass':
        callback(null, `test ${event.data.name} passed`);
        break;
      case 'test:fail':
        callback(null, `test ${event.data.name} failed`);
        break;
      case 'test:plan':
        callback(null, 'test plan');
        break;
      case 'test:diagnostic':
      case 'test:stderr':
      case 'test:stdout':
        callback(null, event.data.message);
        break;
      case 'test:coverage': {
        const { totalLineCount } = event.data.summary.totals;
        callback(null, `total line count: ${totalLineCount}\n`);
        break;
      }
    }
  },
});

module.exports = customReporter;
```

----------------------------------------

TITLE: Converting JavaScript BigInt to C Int64 in N-API
DESCRIPTION: Converts a JavaScript BigInt to a C int64_t primitive, with potential truncation indicated by lossless flag. Returns napi_bigint_expected if input is not a BigInt.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_113

LANGUAGE: c
CODE:
```
napi_status napi_get_value_bigint_int64(napi_env env,
                                        napi_value value,
                                        int64_t* result,
                                        bool* lossless)
```

----------------------------------------

TITLE: Testing Array.prototype.every() with Invalid Callback Types in JavaScript
DESCRIPTION: These snippets test the every() method's behavior when provided with invalid callback types, such as numbers, strings, objects, null, and undefined.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-every-expected.txt#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every(5)
```

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every('wrong')
```

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every(new Object())
```

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every(null)
```

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every(undefined)
```

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every()
```

----------------------------------------

TITLE: Non-Event-Based Message Receiving in Node.js Worker Threads
DESCRIPTION: Example demonstrating how to receive messages from a MessagePort without using event listeners. The receiveMessageOnPort function allows synchronous-style message retrieval from a message port's queue.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { MessageChannel, receiveMessageOnPort } from 'node:worker_threads';
const { port1, port2 } = new MessageChannel();
port1.postMessage({ hello: 'world' });

console.log(receiveMessageOnPort(port2));
// Prints: { message: { hello: 'world' } }
console.log(receiveMessageOnPort(port2));
// Prints: undefined
```

LANGUAGE: javascript
CODE:
```
'use strict';

const { MessageChannel, receiveMessageOnPort } = require('node:worker_threads');
const { port1, port2 } = new MessageChannel();
port1.postMessage({ hello: 'world' });

console.log(receiveMessageOnPort(port2));
// Prints: { message: { hello: 'world' } }
console.log(receiveMessageOnPort(port2));
// Prints: undefined
```

----------------------------------------

TITLE: Generating the ICU Data Filename for the Current Node.js Version - Node.js System Information - JavaScript
DESCRIPTION: This one-line JavaScript template literal constructs the correct ICU data file name based on the runtime Node.js ICU version and the host system's endianness. It is used to programmatically determine the expected ICU data file name (e.g., icudt70l.dat) for configuration or troubleshooting purposes. This code requires access to os and process.versions objects, available in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/intl.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
`icudt${process.versions.icu.split('.')[0]}${os.endianness()[0].toLowerCase()}.dat`;
```

----------------------------------------

TITLE: Validating HTTP Header Names in ES Modules
DESCRIPTION: Demonstrates how to use the validateHeaderName function from Node.js HTTP module to validate header names. The example shows error handling when passing an empty string as a header name.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_62

LANGUAGE: mjs
CODE:
```
import { validateHeaderName } from 'node:http';

try {
  validateHeaderName('');
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code); // --> 'ERR_INVALID_HTTP_TOKEN'
  console.error(err.message); // --> 'Header name must be a valid HTTP token [""]'
}
```

----------------------------------------

TITLE: Writing Double-Precision Float Little-Endian to Buffer (Node.js)
DESCRIPTION: This snippet demonstrates using `buf.writeDoubleLE()` to write a double-precision floating-point number into a Buffer at a specified offset using little-endian byte order. The value must be a JavaScript number.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_85

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeDoubleLE(123.456, 0);

console.log(buf);
// Prints: <Buffer 77 be 9f 1a 2f dd 5e 40>
```

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeDoubleLE(123.456, 0);

console.log(buf);
// Prints: <Buffer 77 be 9f 1a 2f dd 5e 40>
```

----------------------------------------

TITLE: Testing JSON.stringify with Complex Arrays and Objects in JavaScript
DESCRIPTION: These functions test the JSON.stringify behavior with complex arrays and objects that have prototypes, with various formatting options. They verify consistent output between native and standard JSON implementations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/run-json-stringify-expected.txt#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(complexArrayWithProto, null, "  ");
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(complexArrayWithProto, null, 4);
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(complexArrayWithProto, null, "ab");
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(complexObjectWithProto, null, "  ");
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(complexObjectWithProto, null, 4);
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(complexObjectWithProto, null, "ab");
    }
```

----------------------------------------

TITLE: Excluding Node.js Benchmarks with Multiple Patterns (bash)
DESCRIPTION: Illustrates using multiple `--exclude` options with `benchmark/run.js` to prevent execution of benchmarks matching any of the listed patterns. This command runs `assert` benchmarks that do not match "deepequal-b" and do not match "deepequal-m". The output shows results for other `assert` benchmarks like `deepequal-object.js`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-and-running-benchmarks.md#_snippet_10

LANGUAGE: bash
CODE:
```
$ node benchmark/run.js --exclude "deepequal-b" --exclude "deepequal-m" assert
```

----------------------------------------

TITLE: Checking Report Signal in Node.js
DESCRIPTION: This snippet shows how to check the signal used to trigger the creation of a diagnostic report using the process.report.signal property in both ECMAScript modules and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_79

LANGUAGE: JavaScript
CODE:
```
import { report } from 'node:process';

console.log(`Report signal: ${report.signal}`);
```

LANGUAGE: JavaScript
CODE:
```
const { report } = require('node:process');

console.log(`Report signal: ${report.signal}`);
```

----------------------------------------

TITLE: Accessing Distinct HTTP Headers in Node.js
DESCRIPTION: Shows how to access headers using headersDistinct property which returns headers as arrays of strings without any join logic.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_46

LANGUAGE: javascript
CODE:
```
// Prints something like:
//
// { 'user-agent': ['curl/7.22.0'],
//   host: ['127.0.0.1:8000'],
//   accept: ['*/*'] }
console.log(request.headersDistinct);
```

----------------------------------------

TITLE: Binding AsyncLocalStorage to Channel - Node.js (CommonJS)
DESCRIPTION: Shows the CommonJS approach to binding AsyncLocalStorage to a diagnostics channel with an optional transform function. Requires 'node:diagnostics_channel' and 'node:async_hooks'. The context for AsyncLocalStorage is managed via the channel when runStores is executed. The transform can modify or annotate the context before storing. Experimental as of v18.19.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_23

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');\nconst { AsyncLocalStorage } = require('node:async_hooks');\n\nconst store = new AsyncLocalStorage();\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.bindStore(store, (data) => {\n  return { data };\n});
```

----------------------------------------

TITLE: Setting the HTTP Response Status Message in Node.js (JavaScript)
DESCRIPTION: Changes the HTTP status message accompanying the status code using statusMessage. Requires Node.js http.ServerResponse instance. If unset, Node.js provides the standard message associated with the code. Useful for custom response semantics or text.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_40

LANGUAGE: js
CODE:
```
response.statusMessage = 'Not found';

```

----------------------------------------

TITLE: Basic Retry Interceptor Configuration in Undici
DESCRIPTION: Demonstrates the configuration of the pre-built retry interceptor for Undici Client. It sets various retry options such as max retries, timeout values, and retry after flag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
const { Client, interceptors } = require("undici");
const { retry } = interceptors;

const client = new Client("http://example.com").compose(
  retry({
    maxRetries: 3,
    minTimeout: 1000,
    maxTimeout: 10000,
    timeoutFactor: 2,
    retryAfter: true,
  })
);
```

----------------------------------------

TITLE: Opening Handle Scopes in Node-API
DESCRIPTION: Function to open a new handle scope for managing object lifetimes. Returns napi_ok on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_49

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_open_handle_scope(napi_env env,
                                               napi_handle_scope* result);
```

----------------------------------------

TITLE: Specifying Multiple Man Pages in package.json (JSON)
DESCRIPTION: This `package.json` snippet shows how to specify multiple man pages using an array in the `man` field. The file `./man/foo.1` becomes `man foo`, and `./man/bar.1` becomes `man foo-bar` because its name doesn't start with the package name (`foo`). Man files must end with a number.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_9

LANGUAGE: json
CODE:
```
{
  "name": "foo",
  "version": "1.2.3",
  "description": "A packaged foo fooer for fooing foos",
  "main": "foo.js",
  "man": [
    "./man/foo.1",
    "./man/bar.1"
  ]
}
```

----------------------------------------

TITLE: Global Proxy Fetch Implementation
DESCRIPTION: Demonstrates how to use EnvHttpProxyAgent with fetch API by setting it as the global dispatcher.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/EnvHttpProxyAgent.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { setGlobalDispatcher, fetch, EnvHttpProxyAgent } from 'undici'

const envHttpProxyAgent = new EnvHttpProxyAgent()
setGlobalDispatcher(envHttpProxyAgent)

const { status, json } = await fetch('http://localhost:3000/foo')

console.log('response received', status) // response received 200

const data = await json() // data { foo: "bar" }
```

----------------------------------------

TITLE: Using util.types.isProxy to check for Proxy objects
DESCRIPTION: Demonstrates how to use util.types.isProxy() to check if a value is a Proxy instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_90

LANGUAGE: javascript
CODE:
```
const target = {};
const proxy = new Proxy(target, {});
util.types.isProxy(target);  // Returns false
util.types.isProxy(proxy);  // Returns true
```

----------------------------------------

TITLE: Tracking Asynchronous Parent Execution by Id - Chrome DevTools Protocol - JavaScript
DESCRIPTION: This snippet provides an example of a JavaScript object from the Chrome DevTools Protocol representing async call stack information linked to a parent by a unique identifier. It includes frame metadata such as column and line numbers and an explicit 'parentId' object for correlating async stack fragments. The structure is suitable for tools or tests correlating async frame ancestry and relies on proper protocol conformance.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/enable-async-stack-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
{
    callFrames : [
        [0] : {
            columnNumber : 32
            functionName : 
            lineNumber : 0
            scriptId : <scriptId>
            url : 
        }
    ]
    parentId : {
        id : <id>
    }
}
```

----------------------------------------

TITLE: Stream-based Gzip Compression with Promise Pipeline using ES Modules
DESCRIPTION: Demonstrates compressing a file using the promise-based `pipeline` API from `node:stream/promises`. It defines an async function `do_gzip` that takes input and output file paths, creates read/write streams and a Gzip transform stream, and then awaits the pipeline completion. Uses ES Module syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import {
  createReadStream,
  createWriteStream,
} from 'node:fs';
import process from 'node:process';
import { createGzip } from 'node:zlib';
import { pipeline } from 'node:stream/promises';

async function do_gzip(input, output) {
  const gzip = createGzip();
  const source = createReadStream(input);
  const destination = createWriteStream(output);
  await pipeline(source, gzip, destination);
}

await do_gzip('input.txt', 'input.txt.gz');
```

----------------------------------------

TITLE: Testing Step Over at Return in Async Functions with Node.js
DESCRIPTION: This test verifies that the stepOver operation at a return statement correctly navigates to the resumed outer generator in an async function context.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/async-function-step-out-expected.txt#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
bar (testStepIntoAtReturn.js:124:8)
-- await --
foo (testStepIntoAtReturn.js:119:14)
-- await --
test (testStepIntoAtReturn.js:113:14)
-- await --
(anonymous) (:0:0)

bar (testStepIntoAtReturn.js:125:6)
-- await --
foo (testStepIntoAtReturn.js:119:14)
-- await --
test (testStepIntoAtReturn.js:113:14)
-- await --
(anonymous) (:0:0)

foo (testStepIntoAtReturn.js:120:6)
-- await --
test (testStepIntoAtReturn.js:113:14)
-- await --
(anonymous) (:0:0)

test (testStepIntoAtReturn.js:114:8)
-- await --
(anonymous) (:0:0)

test (testStepIntoAtReturn.js:115:6)
-- await --
(anonymous) (:0:0)

floodWithTimeouts (testStepIntoAtReturn.js:105:15)
-- setTimeout --
floodWithTimeouts (testStepIntoAtReturn.js:106:10)
-- setTimeout --
floodWithTimeouts (testStepIntoAtReturn.js:106:10)
test (testStepIntoAtReturn.js:111:8)
(anonymous) (:0:0)
```

----------------------------------------

TITLE: Defining Abseil Bit Generator Reference Test in Bazel
DESCRIPTION: Defines the `random_bit_gen_ref_test` C++ test target using the `absl_cc_test` rule. This target compiles and runs the tests defined in `bit_gen_ref_test.cc`. It depends on the library under test (`absl::random_bit_gen_ref`), the core random library (`absl::random_random`), internal sequence URBG, fast type ID, and the Google Test framework (gMock and gtest_main).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/random/CMakeLists.txt#2025-04-23_snippet_2

LANGUAGE: bazel
CODE:
```
absl_cc_test(
  NAME
    random_bit_gen_ref_test
  SRCS
    "bit_gen_ref_test.cc"
  COPTS
    ${ABSL_TEST_COPTS}
  LINKOPTS
    ${ABSL_DEFAULT_LINKOPTS}
  DEPS
    absl::random_bit_gen_ref
    absl::random_random
    absl::random_internal_sequence_urbg
    absl::fast_type_id
    GTest::gmock
    GTest::gtest_main
)
```

----------------------------------------

TITLE: Capturing console.dir Output with Runtime.consoleAPICalled (JSON)
DESCRIPTION: This JSON structure represents the payload for a `Runtime.consoleAPICalled` event triggered by a `console.dir('dir')` call in Node.js. It includes the argument ('dir'), execution context, stack trace (line 7 of `test.js`), timestamp, and the event type 'dir'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-methods-expected.txt#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
    method : Runtime.consoleAPICalled
    params : {
        args : [
            [0] : {
                type : string
                value : dir
            }
        ]
        executionContextId : <executionContextId>
        stackTrace : {
            callFrames : [
                [0] : {
                    columnNumber : 10
                    functionName : testFunction
                    lineNumber : 7
                    scriptId : <scriptId>
                    url : test.js
                }
                [1] : {
                    columnNumber : 0
                    functionName : 
                    lineNumber : 0
                    scriptId : <scriptId>
                    url : 
                }
            ]
        }
        timestamp : <timestamp>
        type : dir
    }
}
```

----------------------------------------

TITLE: Testing Stream Elements with some() Method in Node.js
DESCRIPTION: Shows how to use the Readable.some() method to check if any element in a stream satisfies a condition. Examples include both synchronous predicates checking number values and asynchronous file size checks with concurrency control.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_47

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { stat } from 'node:fs/promises';

// With a synchronous predicate.
await Readable.from([1, 2, 3, 4]).some((x) => x > 2); // true
await Readable.from([1, 2, 3, 4]).some((x) => x < 0); // false

// With an asynchronous predicate, making at most 2 file checks at a time.
const anyBigFile = await Readable.from([
  'file1',
  'file2',
  'file3',
]).some(async (fileName) => {
  const stats = await stat(fileName);
  return stats.size > 1024 * 1024;
}, { concurrency: 2 });
console.log(anyBigFile); // `true` if any file in the list is bigger than 1MB
console.log('done'); // Stream has finished
```

----------------------------------------

TITLE: Testing Closure Name Interaction with Eval-declared Variable in JavaScript IIFE
DESCRIPTION: This IIFE named `closure` uses `eval` to execute `"var closure"`. This declares a new variable `closure` within the scope created by `eval` (which, in non-strict mode, might affect the function's scope). The test checks if this eval-declared `closure` has the value `undefined` and that `closure` is not a property on `this`. This explores the interaction between a function's name and variables declared via `eval`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/named-function-expression-expected.txt#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
(function closure() { eval("var closure"); return closure == undefined && !this.closure; })()
```

----------------------------------------

TITLE: Wasm Debug State at kExprLocalSet in $wasm_B
DESCRIPTION: Debugger paused at byte offset 54 within the `$wasm_B` function, corresponding to the Wasm opcode `kExprLocalSet` (0x21). The expression stack now holds the result of the previous subtraction (0 as i32), which is about to be assigned to the local variable `$var0` (currently still 1).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-set-breakpoint-expected.txt#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
Paused:
Script wasm://wasm/0c10a5fe byte offset 54: Wasm opcode 0x21 (kExprLocalSet)
Scope:
at $wasm_B (0:54):
 - scope (wasm-expression-stack):
   stack: "0": 0 (i32)
 - scope (local):
   $var0: 1 (i32)
 - scope (module):
   instance: exports: "main" (Function)
   module: Module
   functions: "$wasm_A": (Function), "$wasm_B": (Function)
at (anonymous) (0:17):
   -- skipped
```

----------------------------------------

TITLE: Result of Merging Dictionaries in GYP Input - JSON
DESCRIPTION: This snippet shows the resulting dictionary after applying merging rules to source and destination GYP dictionaries. It demonstrates policy-driven prepending, appending, and value replacement as dictated by key names and data types, with inline comments explaining merge actions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/InputFormatReference.md#2025-04-23_snippet_5

LANGUAGE: JSON
CODE:
```
{
  'target_name': 'hello',
  'sources': [
    'kitty.cc',
  ],
  'include_dirs': [
    'shared_stuff/public',  # Merged, list item prepended due to include_dirs+
    'headers',
  ],
  'link_settings': {
    'libraries': [
      '-lm',
      '-lshared_stuff',  # Merged, list item appended
    ],
    'library_dirs': [
      '/usr/lib',
    ],
  },
  'test': 1,  # Merged, int value replaced
}
```

----------------------------------------

TITLE: Cancelling File Send with Stat Check - Node.js HTTP/2 - CJS
DESCRIPTION: Illustrates using the `options.statCheck` function with `http2stream.respondWithFile` in CommonJS to prevent the file from being sent by returning `false`. This pattern is suitable for scenarios requiring conditional responses, like serving a 304 status if the client's cached version is up-to-date based on file stats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_34

LANGUAGE: Node.js - CJS
CODE:
```
const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream) => {
  function statCheck(stat, headers) {
    // Check the stat here...
    stream.respond({ ':status': 304 });
    return false; // Cancel the send operation
  }
  stream.respondWithFile('/some/file',
                         { 'content-type': 'text/plain; charset=utf-8' },
                         { statCheck });
});
```

----------------------------------------

TITLE: Creating Custom Test Reporter with Generator (CJS)
DESCRIPTION: Shows how to create a custom test reporter using an async generator function in CJS. It processes test events from a source stream and yields formatted strings, providing a CommonJS implementation of the generator-based reporter.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_33

LANGUAGE: cjs
CODE:
```
module.exports = async function * customReporter(source) {
  for await (const event of source) {
    switch (event.type) {
      case 'test:dequeue':
        yield `test ${event.data.name} dequeued\n`;
        break;
      case 'test:enqueue':
        yield `test ${event.data.name} enqueued\n`;
        break;
      case 'test:watch:drained':
        yield 'test watch queue drained\n';
        break;
      case 'test:start':
        yield `test ${event.data.name} started\n`;
        break;
      case 'test:pass':
        yield `test ${event.data.name} passed\n`;
        break;
      case 'test:fail':
        yield `test ${event.data.name} failed\n`;
        break;
      case 'test:plan':
        yield 'test plan\n';
        break;
      case 'test:diagnostic':
      case 'test:stderr':
      case 'test:stdout':
        yield `${event.data.message}\n`;
        break;
      case 'test:coverage': {
        const { totalLineCount } = event.data.summary.totals;
        yield `total line count: ${totalLineCount}\n`;
        break;
      }
    }
  }
};
```

----------------------------------------

TITLE: Creating a BalancedPool instance in Node.js Undici
DESCRIPTION: Constructor for creating a new BalancedPool instance with specified upstreams and options. The upstreams parameter can be a URL, string, or array of strings representing connection endpoints.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/BalancedPool.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## `new BalancedPool(upstreams [, options])`
```

----------------------------------------

TITLE: Implementing Asynchronous Node.js resolve Hook (MJS)
DESCRIPTION: Demonstrates an asynchronous `resolve` hook implementation using `async function` for Node.js module customization (`module.register()`). It shows conditional logic based on `Math.random()` to either short-circuit the resolution process by returning a specific URL (`shortCircuit: true`) or modify the context (adding 'another-condition') before calling the next `resolve` hook (`nextResolve`), or simply deferring to the next hook.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_32

LANGUAGE: mjs
CODE:
```
// Asynchronous version accepted by module.register().
export async function resolve(specifier, context, nextResolve) {
  const { parentURL = null } = context;

  if (Math.random() > 0.5) { // Some condition.
    // For some or all specifiers, do some custom logic for resolving.
    // Always return an object of the form {url: <string>}.
    return {
      shortCircuit: true,
      url: parentURL ?
        new URL(specifier, parentURL).href :
        new URL(specifier).href,
    };
  }

  if (Math.random() < 0.5) { // Another condition.
    // When calling `defaultResolve`, the arguments can be modified. In this
    // case it's adding another value for matching conditional exports.
    return nextResolve(specifier, {
      ...context,
      conditions: [...context.conditions, 'another-condition'],
    });
  }

  // Defer to the next hook in the chain, which would be the
  // Node.js default resolve if this is the last user-specified loader.
  return nextResolve(specifier);
}
```

----------------------------------------

TITLE: Suppressing Stack Frames in assert.fail Errors (Node.js, ECMAScript Module, JavaScript)
DESCRIPTION: Demonstrates using the stackStartFn argument to assert.fail() to suppress stack frames in an AssertionError. Shows advanced error reporting by customizing where the stack trace starts. Dependency: node:assert/strict. Accepts actual, expected, message, operator, and stackStartFn. Outputs AssertionError with a truncated stack trace above the named function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_24

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

function suppressFrame() {
  assert.fail('a', 'b', undefined, '!==', suppressFrame);
}
suppressFrame();
// AssertionError [ERR_ASSERTION]: 'a' !== 'b'
//     at repl:1:1
//     at ContextifyScript.Script.runInThisContext (vm.js:44:33)
//     ...
```

----------------------------------------

TITLE: Generating Blowfish CBC Assembly using Perl 'cbc' Function
DESCRIPTION: Demonstrates calling the Perl `&cbc` function to generate the assembly implementation for the `BF_cbc_encrypt` function. It specifies the target function name, the underlying block cipher function (`BF_encrypt` used for both encryption and decryption in this case), indicates byte swapping is needed (1), and maps the C function parameters for IV (parameter 4), encrypt flag (parameter 5), and the key schedule (parameter 3) to the `&cbc` arguments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/crypto/perlasm/README.md#2025-04-23_snippet_8

LANGUAGE: perl
CODE:
```
&cbc("BF_cbc_encrypt","BF_encrypt","BF_encrypt",1,4,5,3,-1,-1);
```

----------------------------------------

TITLE: Using util.styleText() for terminal output in Node.js (ESM)
DESCRIPTION: Shows how to use util.styleText() to format text for terminal output with color and style in ECMAScript modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_51

LANGUAGE: JavaScript
CODE:
```
import { styleText } from 'node:util';
import { stderr } from 'node:process';

const successMessage = styleText('green', 'Success!');
console.log(successMessage);

const errorMessage = styleText(
  'red',
  'Error! Error!',
  // Validate if process.stderr has TTY
  { stream: stderr },
);
console.error(errorMessage);
```

----------------------------------------

TITLE: Defining C++ Test crc32c_test in Bazel
DESCRIPTION: Defines a C++ test target named `crc32c_test` using the `absl_cc_test` rule. This target compiles and runs tests for the `absl::crc32c` library. It uses the `crc32c_test.cc` source file, default compile options, and depends on the `absl::crc32c` library itself, `absl::strings`, `absl::str_format`, and the Google Test main library (`GTest::gtest_main`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/crc/CMakeLists.txt#2025-04-23_snippet_3

LANGUAGE: starlark
CODE:
```
absl_cc_test(
  NAME
    crc32c_test
  SRCS
    "crc32c_test.cc"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::crc32c
    absl::strings
    absl::str_format
    GTest::gtest_main
)
```

----------------------------------------

TITLE: Importing Modules and JSON Files Using require() - JavaScript
DESCRIPTION: This snippet provides examples of different ways to import local modules, JSON files, and built-in/node_modules packages using require(). It demonstrates how module resolution works for relative paths and module names. It highlights parameters like path string and the ability to import both custom code and data files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_20

LANGUAGE: JavaScript
CODE:
```
// Importing a local module with a path relative to the `__dirname` or current
// working directory. (On Windows, this would resolve to .\path\myLocalModule.)
const myLocalModule = require('./path/myLocalModule');

// Importing a JSON file:
const jsonData = require('./path/filename.json');

// Importing a module from node_modules or Node.js built-in module:
const crypto = require('node:crypto');
```

----------------------------------------

TITLE: Getting the Local IP Address of a Node.js net.Socket
DESCRIPTION: A string property representing the local IP address to which the socket is bound. For example, if a server listens on '0.0.0.0' and a client connects, this property on the server's socket for that connection would show the specific local interface IP (e.g., '192.168.1.1').
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
socket.localAddress
```

----------------------------------------

TITLE: Executing npm Test Script via Node --run (Console)
DESCRIPTION: This command demonstrates how to execute the 'test' script defined in the nearest package.json file using the Node.js `--run` flag. It provides a direct way to run common development tasks configured in package.json scripts without using a package manager like npm.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_26

LANGUAGE: console
CODE:
```
$ node --run test
```

----------------------------------------

TITLE: Test output: getExceptionDetails with metadata
DESCRIPTION: Demonstrates how Runtime.getExceptionDetails includes metadata when available in the error object. The response contains the standard exception details plus an exceptionMetaData object with additional information (in this case, a foo:bar property).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/get-exception-details-expected.txt#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        exceptionDetails : {
            columnNumber : 9
            exception : {
                className : Error
                description : Error: myerror     at foo (<anonymous>:3:10)     at <anonymous>:5:1
                objectId : <objectId>
                subtype : error
                type : object
            }
            exceptionId : <exceptionId>
            exceptionMetaData : {
                foo : bar
            }
            lineNumber : 2
            scriptId : <scriptId>
            stackTrace : {
                callFrames : [
                    [0] : {
                        columnNumber : 9
                        functionName : foo
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : 
                    }
                    [1] : {
                        columnNumber : 0
                        functionName : 
                        lineNumber : 4
                        scriptId : <scriptId>
                        url : 
                    }
                ]
            }
            text : Error: myerror
        }
    }
}
```

----------------------------------------

TITLE: Hashing Data with Piped Streams - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This example illustrates hashing the contents of a file using piped streams in ESM format. It uses async 'import' for the 'node:crypto' module and imports streams from 'node:fs' and 'node:process'. File contents are piped through a SHA-256 hash, set to hex encoding, and written to stdout. Prerequisites include Node.js with ESM support and the referenced modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_28

LANGUAGE: JavaScript
CODE:
```
import { createReadStream } from 'node:fs';
import { stdout } from 'node:process';
const { createHash } = await import('node:crypto');

const hash = createHash('sha256');

const input = createReadStream('test.js');
input.pipe(hash).setEncoding('hex').pipe(stdout);
```

----------------------------------------

TITLE: Using util.callbackify for Async Function
DESCRIPTION: Demonstrates converting an async function to a callback-style function using util.callbackify.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_1

LANGUAGE: mjs
CODE:
```
import { callbackify } from 'node:util';

async function fn() {
  return 'hello world';
}
const callbackFunction = callbackify(fn);

callbackFunction((err, ret) => {
  if (err) throw err;
  console.log(ret);
});
```

LANGUAGE: cjs
CODE:
```
const { callbackify } = require('node:util');

async function fn() {
  return 'hello world';
}
const callbackFunction = callbackify(fn);

callbackFunction((err, ret) => {
  if (err) throw err;
  console.log(ret);
});
```

----------------------------------------

TITLE: Handling Unsupported Resolve Request Error in JavaScript
DESCRIPTION: Shows how to catch and log an ERR_UNSUPPORTED_RESOLVE_REQUEST error when attempting to import a bare specifier from a data: URL module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
try {
  // Trying to import the package 'bare-specifier' from a `data:` URL module:
  await import('data:text/javascript,import "bare-specifier"');
} catch (e) {
  console.log(e.code); // ERR_UNSUPPORTED_RESOLVE_REQUEST
}
```

----------------------------------------

TITLE: Retrieving User and Group IDs in Node.js
DESCRIPTION: Examples of using process.getegid(), process.geteuid(), process.getgid(), and process.getuid() to retrieve various user and group identities on POSIX platforms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_49

LANGUAGE: JavaScript
CODE:
```
import process from 'node:process';

if (process.getegid) {
  console.log(`Current gid: ${process.getegid()}`);
}
```

LANGUAGE: JavaScript
CODE:
```
const process = require('node:process');

if (process.getegid) {
  console.log(`Current gid: ${process.getegid()}`);
}
```

LANGUAGE: JavaScript
CODE:
```
import process from 'node:process';

if (process.geteuid) {
  console.log(`Current uid: ${process.geteuid()}`);
}
```

LANGUAGE: JavaScript
CODE:
```
const process = require('node:process');

if (process.geteuid) {
  console.log(`Current uid: ${process.geteuid()}`);
}
```

LANGUAGE: JavaScript
CODE:
```
import process from 'node:process';

if (process.getgid) {
  console.log(`Current gid: ${process.getgid()}`);
}
```

LANGUAGE: JavaScript
CODE:
```
const process = require('node:process');

if (process.getgid) {
  console.log(`Current gid: ${process.getgid()}`);
}
```

LANGUAGE: JavaScript
CODE:
```
import process from 'node:process';

if (process.getuid) {
  console.log(`Current uid: ${process.getuid()}`);
}
```

LANGUAGE: JavaScript
CODE:
```
const process = require('node:process');

if (process.getuid) {
  console.log(`Current uid: ${process.getuid()}`);
}
```

----------------------------------------

TITLE: Checking Email Addresses with x509.checkEmail Method in Node.js
DESCRIPTION: Validates whether a certificate matches a given email address. Supports different subject checking modes through the 'subject' option which can be 'default', 'always', or 'never'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_46

LANGUAGE: javascript
CODE:
```
x509.checkEmail(email[, options])
```

----------------------------------------

TITLE: Installing the SemVer Package using NPM
DESCRIPTION: Installs the `semver` package globally or locally using the Node Package Manager (npm). This makes the `semver` module available for Node.js projects and the `semver` command-line utility available in the shell.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install semver
```

----------------------------------------

TITLE: Handling Hex Encoding Truncation (CJS)
DESCRIPTION: Demonstrates the behavior of `Buffer.from` with the 'hex' encoding in a CommonJS environment, showing that decoding terminates and truncates the data when the input string contains invalid hexadecimal characters or an odd number of final hex digits.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

Buffer.from('1ag123', 'hex');
// Prints <Buffer 1a>, data truncated when first non-hexadecimal value
// ('g') encountered.

Buffer.from('1a7', 'hex');
// Prints <Buffer 1a>, data truncated when data ends in single digit ('7').

Buffer.from('1634', 'hex');
// Prints <Buffer 16 34>, all data represented.
```

----------------------------------------

TITLE: Executing a Specific Binary Using '--package' with npx/npm exec (Bash)
DESCRIPTION: Illustrates how to run a binary (`bar`) that doesn't necessarily match the inferred executable name of a package (`foo`). The `--package=foo` option explicitly tells `npx` or `npm exec` which package to make available in the environment before running the specified command (`bar --bar-argument`). Both `npm exec --` and `npx` achieve this.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npx.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
$ npm exec --package=foo -- bar --bar-argument
# ~ or ~
$ npx --package=foo bar --bar-argument
```

----------------------------------------

TITLE: Error Object Creation
DESCRIPTION: Tests Error constructor with and without error message. Shows runtime type information for error objects.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/deep-serialization-local-references-expected.txt#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
new Error()
new Error('qwe')
```

----------------------------------------

TITLE: Writing Variable Length Signed Integer Big-Endian to Buffer (Node.js)
DESCRIPTION: This snippet demonstrates using `buf.writeIntBE()` to write a signed integer of a specified byte length (1 to 6 bytes) into a Buffer at a given offset using big-endian byte order. The value must be a valid signed integer within the representable range for the given byte length.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_93

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(6);

buf.writeIntBE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: <Buffer 12 34 56 78 90 ab>
```

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(6);

buf.writeIntBE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: <Buffer 12 34 56 78 90 ab>
```

----------------------------------------

TITLE: Setting devdir Option Using npm config set on Unix with Bash
DESCRIPTION: This bash snippet configures the devdir option for node-gyp using npm's configuration interface, suitable for npm versions before v9. The npm config set command, optionally using --global, specifies the SDK download directory node-gyp should use (in this case, '/tmp/.gyp'). The setting persists between sessions but only applies when node-gyp is run via npm, not directly.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/README.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
npm config set [--global] devdir /tmp/.gyp
```

----------------------------------------

TITLE: Raw Inflate Decompression Functions
DESCRIPTION: Functions for raw inflate decompression without headers. Provides both async (inflateRaw) and sync (inflateRawSync) versions for working with raw compressed data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_24

LANGUAGE: JavaScript
CODE:
```
zlib.inflateRaw(buffer[, options], callback)
zlib.inflateRawSync(buffer[, options])
```

----------------------------------------

TITLE: Checking for Date Type with napi_is_date in C
DESCRIPTION: This function checks if a JavaScript object is a Date instance. It returns the result as a boolean, indicating whether the given value represents a JavaScript Date object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_136

LANGUAGE: c
CODE:
```
napi_status napi_is_date(napi_env env, napi_value value, bool* result)
```

----------------------------------------

TITLE: Using mkdirp Command-Line Interface for Recursive Directory Creation - Shell
DESCRIPTION: This snippet shows how to use the mkdirp CLI tool from a shell for creating directories recursively, including usage instructions and possible options. It outlines how to supply one or more directories, set permissions, print created directories, choose implementations, and display help/version information. Run these commands in a Unix-like shell with mkdirp installed locally or globally.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_3

LANGUAGE: Shell
CODE:
```
$ mkdirp -h\n\nusage: mkdirp [DIR1,DIR2..] {OPTIONS}\n\n  Create each supplied directory including any necessary parent directories\n  that don't yet exist.\n\n  If the directory already exists, do nothing.\n\nOPTIONS are:\n\n  -m<mode>       If a directory needs to be created, set the mode as an octal\n  --mode=<mode>  permission string.\n\n  -v --version   Print the mkdirp version number\n\n  -h --help      Print this helpful banner\n\n  -p --print     Print the first directories created for each path provided\n\n  --manual       Use manual implementation, even if native is available
```

----------------------------------------

TITLE: Checking Float16Array in JavaScript
DESCRIPTION: Illustrates the use of util.types.isFloat16Array() to check if a value is a built-in Float16Array instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_72

LANGUAGE: javascript
CODE:
```
util.types.isFloat16Array(new ArrayBuffer());  // Returns false
util.types.isFloat16Array(new Float16Array());  // Returns true
util.types.isFloat16Array(new Float32Array());  // Returns false
```

----------------------------------------

TITLE: Defining a Wrapped C++ Object for Node.js Addons - C++
DESCRIPTION: Declares the header for a Node.js-wrapped C++ class called 'MyObject'. Provides static methods to initialize the class with V8, construct instances, and access value members. Includes an inline accessor for the wrapped value and uses node::ObjectWrap for memory management. Requires inclusion in both the addon entry point and implementation files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_31

LANGUAGE: C++
CODE:
```
// myobject.h
#ifndef MYOBJECT_H
#define MYOBJECT_H

#include <node.h>
#include <node_object_wrap.h>

namespace demo {

class MyObject : public node::ObjectWrap {
 public:
  static void Init(v8::Isolate* isolate);
  static void NewInstance(const v8::FunctionCallbackInfo<v8::Value>& args);
  inline double value() const { return value_; }

 private:
  explicit MyObject(double value = 0);
  ~MyObject();

  static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
  static v8::Global<v8::Function> constructor;
  double value_;
};

}  // namespace demo

#endif
```

----------------------------------------

TITLE: Establishing SOCKS Connection using createConnection with async/await in TypeScript
DESCRIPTION: Demonstrates using `SocksClient.createConnection` with `async/await` in TypeScript to establish a SOCKS connection. It connects to 'ip-api.com:80' via a SOCKS5 proxy, sends an HTTP GET request using the established raw socket, and logs the response. Requires the 'socks' library.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/typescript/connectExample.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    host: '104.131.124.203', // Note: host is used instead of ipaddress
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api.com', // host names are supported with SOCKS v4a and SOCKS v5.
    port: 80
  },

  command: 'connect'
};

async function start() {
  try {
    const info = await SocksClient.createConnection(options);

    console.log(info.socket);
    // <Socket ...>  (this is a raw net.Socket that is established to the destination host through the given proxy servers)

    info.socket.write('GET /json HTTP/1.1\nHost: ip-api.com\n\n');
    info.socket.on('data', (data) => {
      console.log(data.toString()); // ip-api.com sees that the last proxy (104.131.124.203) is connected to it and not the origin client (you).
      /*
        HTTP/1.1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          "as":"AS14061 Digital Ocean, Inc.",
          "city":"Clifton",
          "country":"United States",
          "countryCode":"US",
          "isp":"Digital Ocean",
          "lat":40.8326,
          "lon":-74.1307,
          "org":"Digital Ocean",
          "query":"104.131.124.203",
          "region":"NJ",
          "regionName":"New Jersey",
          "status":"success",
          "timezone":"America/New_York",
          "zip":"07014"
        }
      */
    });
  } catch (err) {
    // Handle errors
  }
}

start();
```

----------------------------------------

TITLE: Retrieving the Parent Process ID (PPID) in Node.js (CJS)
DESCRIPTION: This snippet demonstrates how to obtain the Process ID (PID) of the parent process of the currently running Node.js process using the `process.ppid` property within a CommonJS module. It uses `require('node:process')` to get the `process` object, destructures the `ppid` property, and logs it.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_70

LANGUAGE: cjs
CODE:
```
const { ppid } = require('node:process');

console.log(`The parent process is pid ${ppid}`);
```

----------------------------------------

TITLE: Resolving Package Specifiers Against Self - PACKAGE_SELF_RESOLVE Algorithm
DESCRIPTION: This algorithm attempts to resolve a package name and subpath against the `exports` field of the `package.json` found in the package scope containing the parent URL. It's used for self-referencing imports within a package.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_23

LANGUAGE: Algorithm Specification (Node.js Module Resolution)
CODE:
```
PACKAGE_SELF_RESOLVE(_packageName_, _packageSubpath_, _parentURL_)

> 1. Let _packageURL_ be the result of **LOOKUP_PACKAGE_SCOPE**(_parentURL_).
> 2. If _packageURL_ is **null**, then
>    1. Return **undefined**.
> 3. Let _pjson_ be the result of **READ_PACKAGE_JSON**(_packageURL_).
> 4. If _pjson_ is **null** or if _pjson_._exports_ is **null** or
>    **undefined**, then
>    1. Return **undefined**.
> 5. If _pjson.name_ is equal to _packageName_, then
>    1. Return the result of **PACKAGE_EXPORTS_RESOLVE**(_packageURL_,
>       _packageSubpath_, _pjson.exports_, _defaultConditions_).
> 6. Otherwise, return **undefined**.
```

----------------------------------------

TITLE: Importing a Directory URL in JavaScript
DESCRIPTION: Demonstrates unsupported and supported ways of importing modules in JavaScript. Directory imports are not supported, while file imports and package imports are supported.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
import './'; // unsupported
import './index.js'; // supported
import 'package-name'; // supported
```

----------------------------------------

TITLE: Configuring Node.js with Ninja for JS Layer Modifications
DESCRIPTION: A command to configure Node.js with Ninja build system, specifically for when modifying only the JavaScript layer in the lib directory. It sets the path to built-in modules to the current directory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/building-node-with-ninja.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
./configure --ninja --node-builtin-modules-path "$(pwd)"
```

----------------------------------------

TITLE: Running Node.js Application with Valgrind
DESCRIPTION: Basic command to run a Node.js application under Valgrind for memory analysis. This will execute the specified JavaScript file and provide memory usage information.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/investigating-native-memory-leaks.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
valgrind node test.js
```

----------------------------------------

TITLE: Example of StatFs Object with BigInt Values in Node.js
DESCRIPTION: Shows the output format of a StatFs object when the bigint option is set to true, displaying all numeric values as BigInt instances rather than numbers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_107

LANGUAGE: javascript
CODE:
```
StatFs {
  type: 1397114950n,
  bsize: 4096n,
  blocks: 121938943n,
  bfree: 61058895n,
  bavail: 61058895n,
  files: 999n,
  ffree: 1000000n
}
```

----------------------------------------

TITLE: Regular Expression Creation Tests
DESCRIPTION: Tests RegExp constructor with different patterns and flags. Demonstrates both simple pattern and pattern with flags (case insensitive and global).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/deep-serialization-local-references-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
new RegExp('ab+c')
new RegExp('ab+c', 'ig')
```

----------------------------------------

TITLE: Listing npm-related files and symlinks
DESCRIPTION: This command lists all npm-related files and symlinks in standard installation directories. It's useful for identifying any remaining npm files after uninstallation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/removal.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
ls -laF /usr/local/{lib/node{,/.npm},bin,share/man} | grep npm
```

----------------------------------------

TITLE: Converting JavaScript String to UTF-8 Encoding in Node-API
DESCRIPTION: Function to convert a JavaScript string to a UTF-8 encoded C string. Handles buffer sizing and string truncation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_120

LANGUAGE: c
CODE:
```
napi_status napi_get_value_string_utf8(napi_env env,
                                       napi_value value,
                                       char* buf,
                                       size_t bufsize,
                                       size_t* result)
```

----------------------------------------

TITLE: Appending Nodes to Container in PostCSS Selector Parser
DESCRIPTION: Shows how to add a node to a container using the append method. This example adds an ID selector to an existing selector container.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
const id = parser.id({value: 'search'});
selector.append(id);
```

----------------------------------------

TITLE: Adding Date Fields for validTo and validFrom in Node.js Crypto Module
DESCRIPTION: This commit adds new Date fields 'validTo' and 'validFrom' to the crypto module, likely for certificate validation purposes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_26

LANGUAGE: JavaScript
CODE:
```
// New fields added:
validTo: Date,
validFrom: Date
```

----------------------------------------

TITLE: V8 Inspector Integration Example
DESCRIPTION: Shows how to enable V8 Inspector integration for Chrome DevTools debugging
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/debugger.md#2025-04-23_snippet_4

LANGUAGE: console
CODE:
```
$ node --inspect index.js
Debugger listening on ws://127.0.0.1:9229/dc9010dd-f8b8-4ac5-a510-c1a114ec7d29
For help, see: https://nodejs.org/en/docs/inspector
```

----------------------------------------

TITLE: Defining Multi-line Environment Variables in .env Files (Text)
DESCRIPTION: Illustrates the syntax for defining environment variables with multi-line values within a `.env` file, supported starting from Node.js 21.7.0. The value is enclosed in double quotes, and line breaks within the quotes are preserved.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_3

LANGUAGE: text
CODE:
```
MULTI_LINE="HELLO
WORLD"
```

----------------------------------------

TITLE: Executing npm prefix Command in Bash
DESCRIPTION: This snippet shows the basic usage of the npm prefix command, which prints the local prefix to standard output. The local prefix is the closest parent directory containing a package.json file or node_modules directory.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-prefix.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm prefix
```

----------------------------------------

TITLE: Illustrating Version 4 Diagnostic Report Libuv Section in JSON
DESCRIPTION: This JSON snippet shows an example of the `libuv` section within a Node.js diagnostic report (Version 4 format). It demonstrates the inclusion of new `ip4` and `ip6` keys within the `localEndpoint` and `remoteEndpoint` objects for `tcp` type handles, providing specific IPv4 or IPv6 address information alongside the host and port.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "libuv": [
    {
      "type": "tcp",
      "is_active": true,
      "is_referenced": true,
      "address": "0x000055e70fcb85d8",
      "localEndpoint": {
        "host": "localhost",
        "ip4": "127.0.0.1", // new key
        "port": 48986
      },
      "remoteEndpoint": {
        "host": "localhost",
        "ip4": "127.0.0.1", // new key
        "port": 38573
      },
      "sendBufferSize": 2626560,
      "recvBufferSize": 131072,
      "fd": 24,
      "writeQueueSize": 0,
      "readable": true,
      "writable": true
    },
    {
      "type": "tcp",
      "is_active": true,
      "is_referenced": true,
      "address": "0x000055e70fcd68c8",
      "localEndpoint": {
        "host": "ip6-localhost",
        "ip6": "::1", // new key
        "port": 52266
      },
      "remoteEndpoint": {
        "host": "ip6-localhost",
        "ip6": "::1", // new key
        "port": 38573
      },
      "sendBufferSize": 2626560,
      "recvBufferSize": 131072,
      "fd": 25,
      "writeQueueSize": 0,
      "readable": false,
      "writable": false
    }
  ]
}
```

----------------------------------------

TITLE: Accessing Node.js Crypto Constants
DESCRIPTION: These constants are specific to Node.js and provide information about the default cipher lists used by the Node.js process. They can be accessed through the crypto module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_101

LANGUAGE: JavaScript
CODE:
```
const crypto = require('crypto');

console.log(crypto.constants.defaultCoreCipherList);
console.log(crypto.constants.defaultCipherList);
```

----------------------------------------

TITLE: Executing NPM Shrinkwrap Command in Bash
DESCRIPTION: This command runs npm shrinkwrap to create or update an npm-shrinkwrap.json file. It locks down dependency versions for publication and takes precedence over package-lock.json files.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-shrinkwrap.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm shrinkwrap
```

----------------------------------------

TITLE: Creating a JavaScript Error Object with N-API in C
DESCRIPTION: This function creates a new JavaScript `Error` object without throwing it. It takes the N-API environment (`env`), an optional `napi_value` representing the error code string (`code`), and a `napi_value` representing the message string (`msg`). The created error object is returned via the `result` output parameter.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_40

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_create_error(napi_env env,
                                          napi_value code,
                                          napi_value msg,
                                          napi_value* result);
```

----------------------------------------

TITLE: Checking for subscribers using hasSubscribers (CommonJS)
DESCRIPTION: Shows the same subscriber check as the ESM example, but using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');

if (diagnostics_channel.hasSubscribers('my-channel')) {
  // There are subscribers, prepare and publish message
}
```

----------------------------------------

TITLE: Demonstrating contextification quirks in VM
DESCRIPTION: This snippet illustrates the quirks of contextification in Node.js VM module. It shows that a contextified global object cannot be frozen and is not reference-equal to the context object in the outer context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
const vm = require('node:vm');

// An undefined `contextObject` option makes the global object contextified.
const context = vm.createContext();
console.log(vm.runInContext('globalThis', context) === context);  // false
// A contextified global object cannot be frozen.
try {
  vm.runInContext('Object.freeze(globalThis);', context);
} catch (e) {
  console.log(e); // TypeError: Cannot freeze
}
console.log(vm.runInContext('globalThis.foo = 1; foo;', context));  // 1
```

----------------------------------------

TITLE: Resetting CallTracker State - Node.js assert - CommonJS (cjs)
DESCRIPTION: Demonstrates resetting the call count for a tracked function using assert.CallTracker in a CommonJS setting. After invoking the wrapped function and verifying the call count, tracker.reset() resets it and the count is verified again. Requires 'node:assert'. Input is a tracked function, output is the cleared call count after reset.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_8

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');

const tracker = new assert.CallTracker();

function func() {}
const callsfunc = tracker.calls(func);

callsfunc();
// Tracker was called once
assert.strictEqual(tracker.getCalls(callsfunc).length, 1);

tracker.reset(callsfunc);
assert.strictEqual(tracker.getCalls(callsfunc).length, 0);
```

----------------------------------------

TITLE: Dynamic Import with Hook Registration (ES Modules)
DESCRIPTION: Example showing how to register hooks and use dynamic imports in ES Modules to ensure hooks are applied to imported modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
import { register } from 'node:module';

register('http-to-https', import.meta.url);

// Because this is a dynamic `import()`, the `http-to-https` hooks will run
// to handle `./my-app.js` and any other files it imports or requires.
await import('./my-app.js');
```

----------------------------------------

TITLE: Committing Changes in Git
DESCRIPTION: Commands to stage changed files and create a new commit in Git.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
git add my/changed/files
git commit
```

----------------------------------------

TITLE: Assigning the Node.js Debugging Port with process.debugPort - JavaScript
DESCRIPTION: These snippets show how to set the process.debugPort property to specify the port used by the Node.js debugger. No external dependencies are needed beyond the built-in 'process' module. Setting process.debugPort to a port number (such as 5858) configures the port at which the debugger will listen.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_31

LANGUAGE: mjs
CODE:
```
import process from 'node:process';\n\nprocess.debugPort = 5858;
```

LANGUAGE: cjs
CODE:
```
const process = require('node:process');\n\nprocess.debugPort = 5858;
```

----------------------------------------

TITLE: Converting JavaScript String to Latin1 Encoding in Node-API
DESCRIPTION: Function to convert a JavaScript string to an ISO-8859-1 encoded C string. Handles buffer sizing and string truncation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_119

LANGUAGE: c
CODE:
```
napi_status napi_get_value_string_latin1(napi_env env,
                                         napi_value value,
                                         char* buf,
                                         size_t bufsize,
                                         size_t* result)
```

----------------------------------------

TITLE: Initializing and Loading npm Configuration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize and load the npm configuration using the @npmcli/config module. It sets up the Config object with necessary options, loads the configuration, and handles the result.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/@npmcli/config/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const Config = require('@npmcli/config')
const { shorthands, definitions, flatten } = require('@npmcli/config/lib/definitions')

const conf = new Config({
  npmPath: resolve(__dirname, '..'),
  definitions,
  shorthands,
  flatten,
  argv: process.argv,
  env: process.env,
  execPath: process.execPath,
  platform: process.platform,
  cwd: process.cwd(),
})

process.on('log', (level, ...args) => {
  console.log(level, ...args)
})

conf.load().then(() => {
  conf.validate()
  console.log('loaded ok! some-key = ' + conf.get('some-key'))
}).catch(er => {
  console.error('error loading configs!', er)
})
```

----------------------------------------

TITLE: Demonstrating Invalid This Error in URLSearchParams
DESCRIPTION: Example showing how calling URLSearchParams.has() with an invalid 'this' context (Buffer) throws ERR_INVALID_THIS error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
const urlSearchParams = new URLSearchParams('foo=bar&baz=new');

const buf = Buffer.alloc(1);
urlSearchParams.has.call(buf, 'foo');
// Throws a TypeError with code 'ERR_INVALID_THIS'
```

----------------------------------------

TITLE: Defining Asynchronous Cleanup Hook Callback Signature - N-API - C
DESCRIPTION: Declares a function pointer typedef for asynchronous cleanup hooks used with napi_add_async_cleanup_hook. The callback receives a handle and user data; after async cleanup actions, the handle must be passed to napi_remove_async_cleanup_hook. This enables asynchronous resource cleanup during environment teardown.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_29

LANGUAGE: c
CODE:
```
typedef void (*napi_async_cleanup_hook)(napi_async_cleanup_hook_handle handle,\n                                        void* data);
```

----------------------------------------

TITLE: Basic npm fund Command Syntax
DESCRIPTION: The basic syntax for using the npm fund command to retrieve funding information for packages.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-fund.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm fund [<package-spec>]
```

----------------------------------------

TITLE: Listing Supported Ciphers in Node.js Crypto Module
DESCRIPTION: The crypto.getCiphers function returns an array of names of supported cipher algorithms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_73

LANGUAGE: JavaScript
CODE:
```
const {
  getCiphers,
} = await import('node:crypto');

console.log(getCiphers()); // ['aes-128-cbc', 'aes-128-ccm', ...]
```

LANGUAGE: JavaScript
CODE:
```
const {
  getCiphers,
} = require('node:crypto');

console.log(getCiphers()); // ['aes-128-cbc', 'aes-128-ccm', ...]
```

----------------------------------------

TITLE: Adding Comments in npmrc
DESCRIPTION: This snippet illustrates how to add comments to the .npmrc file. It shows both single-line comments using '#' and ';' characters, as well as setting a scoped registry.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/npmrc.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
# last modified: 01 Jan 2016
; Set a new registry for a scoped package
@myscope:registry=https://mycustomregistry.example.org
```

----------------------------------------

TITLE: Executing Node.js with Diagnostic Report Options
DESCRIPTION: This command demonstrates how to run a Node.js application with various report generation flags enabled. It allows for uncaught exception reporting, signal-based reporting, and fatal error reporting.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
node --report-uncaught-exception --report-on-signal \
--report-on-fatalerror app.js
```

----------------------------------------

TITLE: Comparing Wildcard Pattern Keys - PATTERN_KEY_COMPARE Algorithm
DESCRIPTION: This algorithm specifies the sorting order for keys in an imports/exports map that contain a single wildcard (`*`). Keys are sorted in descending order of specificity, primarily based on the length of the portion before the wildcard.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_27

LANGUAGE: Algorithm Specification (Node.js Module Resolution)
CODE:
```
PATTERN_KEY_COMPARE(_keyA_, _keyB_)

> 1. Assert: _keyA_ contains only a single _"*"_.
> 2. Assert: _keyB_ contains only a single _"*"_.
> 3. Let _baseLengthA_ be the index of _"*"_ in _keyA_.
> 4. Let _baseLengthB_ be the index of _"*"_ in _keyB_.
> 5. If _baseLengthA_ is greater than _baseLengthB_, return -1.
> 6. If _baseLengthB_ is greater than _baseLengthA_, return 1.
> 7. If the length of _keyA_ is greater than the length of _keyB_, return -1.
> 8. If the length of _keyB_ is greater than the length of _keyA_, return 1.
> 9. Return 0.
```

----------------------------------------

TITLE: Listing Members of npm Team (Bash)
DESCRIPTION: This command lists all users who are members of a specific team (`@org:newteam`). It uses the `ls` subcommand followed by the fully qualified team name.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-team.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm team ls @org:newteam
```

----------------------------------------

TITLE: Configuring Windows Path Handling in Minimatch
DESCRIPTION: Options for handling Windows paths in Minimatch, including escape character behavior and case-insensitive matching of root paths.
SOURCE: https://github.com/nodejs/node/blob/main/deps/minimatch/README.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
options.windowsPathsNoEscape = true;
options.windowsNoMagicRoot = true;
```

----------------------------------------

TITLE: Retrieving Event Listeners in Node.js (CommonJS)
DESCRIPTION: CommonJS version of the previous example, showing how to use getEventListeners() function to retrieve listeners for both EventEmitter and EventTarget instances.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_37

LANGUAGE: JavaScript
CODE:
```
const { getEventListeners, EventEmitter } = require('node:events');

{
  const ee = new EventEmitter();
  const listener = () => console.log('Events are fun');
  ee.on('foo', listener);
  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]
}
{
  const et = new EventTarget();
  const listener = () => console.log('Events are fun');
  et.addEventListener('foo', listener);
  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]
}
```

----------------------------------------

TITLE: Retrieving Listeners for a Specific Event (JS)
DESCRIPTION: Demonstrates using `emitter.listeners(eventName)` to retrieve a copy of the array of listener functions registered for the specified event. The example shows attaching a listener to a 'connection' event on a hypothetical `server` object and then inspecting the listeners for that event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_23

LANGUAGE: js
CODE:
```
server.on('connection', (stream) => {
  console.log('someone connected!');
});
console.log(util.inspect(server.listeners('connection')));
// Prints: [ [Function] ]
```

----------------------------------------

TITLE: Non-Windows File URL Handling
DESCRIPTION: Illustrates file URL handling on non-Windows platforms, showing unsupported cases and path conversions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_116

LANGUAGE: javascript
CODE:
```
import { readFileSync } from 'node:fs';
// On other platforms:

// - WHATWG file URLs with hostname are unsupported
// file://hostname/p/a/t/h/file => throw!
readFileSync(new URL('file://hostname/p/a/t/h/file'));
// TypeError [ERR_INVALID_FILE_URL_PATH]: must be absolute

// - WHATWG file URLs convert to absolute path
// file:///tmp/hello => /tmp/hello
readFileSync(new URL('file:///tmp/hello'));
```

----------------------------------------

TITLE: Checking Report on Fatal Error Setting in Node.js
DESCRIPTION: This snippet demonstrates how to check if diagnostic reports are generated on fatal errors using the process.report.reportOnFatalError property in both ECMAScript modules and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_76

LANGUAGE: JavaScript
CODE:
```
import { report } from 'node:process';

console.log(`Report on fatal error: ${report.reportOnFatalError}`);
```

LANGUAGE: JavaScript
CODE:
```
const { report } = require('node:process');

console.log(`Report on fatal error: ${report.reportOnFatalError}`);
```

----------------------------------------

TITLE: Using npm help-search Command in Bash
DESCRIPTION: The npm help-search command allows searching npm documentation for specific terms. It takes a text argument to search for within the npm markdown documentation files.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-help-search.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm help-search <text>
```

----------------------------------------

TITLE: Associating a SOCKS Proxy and Relaying UDP in Node.js (TypeScript)
DESCRIPTION: This snippet establishes a UDP relay via a SOCKS proxy using the 'socks' library and Node.js's 'dgram' UDP socket. It shows how to create a UDP socket, set up SocksClient with 'associate' command, handle the 'established' event to receive the remote UDP port, and send UDP packets through the proxy. Key dependencies include the 'dgram' and 'socks' packages. The main parameters control the proxy server connection and the relayed UDP destination. The snippet expects IPv4 addresses, and proper SOCKS5 support on the proxy.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/typescript/associateExample.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import * as dgram from 'dgram';
import { SocksClient, SocksClientOptions } from 'socks';

// Create a local UDP socket for sending/receiving packets to/from the proxy.
const udpSocket = dgram.createSocket('udp4');
udpSocket.bind();

// Listen for incoming UDP packets from the proxy server.
udpSocket.on('message', (message, rinfo) => {
  console.log(SocksClient.parseUDPFrame(message));
  /*
  { frameNumber: 0,
    remoteHost: { host: '8.8.8.8', port: 53 }, // The remote host that replied with a UDP packet
    data: <Buffer 74 65 73 74 0a> // The data
  }
  */
});

const options: SocksClientOptions = {
  proxy: {
    host: '104.131.124.203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will be sending UDP frames to the newly opened UDP port on the server.
  // Most SOCKS servers accept 0.0.0.0 as a wildcard address to accept UDP frames from any source.
  destination: {
    host: '0.0.0.0',
    port: 0
  },

  command: 'associate'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new UDP port for UDP relaying.
client.on('established', info => {
  console.log(info);
  /*
  {
    socket: <Socket ...>,
    remoteHost: { // This is the remote port on the SOCKS proxy server to send UDP frame packets to.
      host: '104.131.124.203',
      port: 58232
    }
  }
  */

  // Send a udp frame to 8.8.8.8 on port 53 through the proxy.
  const packet = SocksClient.createUDPFrame({
    remoteHost: { host: '8.8.8.8', port: 53 },
    data: Buffer.from('hello') // A DNS lookup in the real world.
  });

  // Send packet.
  udpSocket.send(packet, info.remoteHost.port, info.remoteHost.host);
});

// SOCKS proxy failed to bind.
client.on('error', () => {
  // Handle errors
});

// Start connection
client.connect();
```

----------------------------------------

TITLE: Setting Python Version for node-gyp via Command Line - Bash
DESCRIPTION: Demonstrates how to specify a Python executable for node-gyp by using the '--python' flag on the command line. This is necessary when multiple Python versions are installed. Replace '/path/to/executable/python' with the appropriate Python binary path. This command will execute the given node-gyp command using the specified Python interpreter.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
node-gyp <command> --python /path/to/executable/python
```

----------------------------------------

TITLE: Checking 'this' After Function Execution via .call() (Node.js/JavaScript)
DESCRIPTION: This snippet executes `boo.call({})` within an immediately invoked arrow function `(() => ...)()`. A breakpoint (`#();`) is set on the final `()` that executes the outer arrow function's result (which is implicitly `undefined` as `boo.call` doesn't return anything shown here). The surrounding text indicates that at this breakpoint, `this` refers to the global object, which is the default `this` in non-strict mode when a function returned from `.call()` is invoked without a specific context.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/this-in-arrow-function-expected.txt#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
(() => boo.call({}))#();
```

----------------------------------------

TITLE: Using util.types.isUint8Array to check for Uint8Array objects
DESCRIPTION: Demonstrates how to use util.types.isUint8Array() to check if a value is a built-in Uint8Array instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_98

LANGUAGE: javascript
CODE:
```
util.types.isUint8Array(new ArrayBuffer());  // Returns false
util.types.isUint8Array(new Uint8Array());  // Returns true
util.types.isUint8Array(new Float64Array());  // Returns false
```

----------------------------------------

TITLE: Handling the 'history' Event in Node.js Readline
DESCRIPTION: Demonstrates how to listen for the 'history' event on a `readline.Interface` instance (`rl`). The listener receives the entire history array whenever it changes (e.g., a line is added or removed due to historySize or removeHistoryDuplicates). This can be used for persisting or manipulating the command history.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_7

LANGUAGE: js
CODE:
```
rl.on('history', (history) => {
  console.log(`Received: ${history}`);
});
```

----------------------------------------

TITLE: Accessing Node.js Version (ES Modules)
DESCRIPTION: Demonstrates how to access the Node.js version string using process.version in ES modules. It imports the version property and logs it to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_97

LANGUAGE: javascript
CODE:
```
import { version } from 'node:process';

console.log(`Version: ${version}`);
// Version: v14.8.0
```

----------------------------------------

TITLE: Map Object with Mixed Types
DESCRIPTION: Creates Map with various key-value pairs including strings, objects, and arrays. Demonstrates complex nested structure handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/deep-serialization-local-references-expected.txt#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
new Map([['keyString1', {valueObject1: 1}], [{keyObject2: 2}, 'valueString2'], ['keyString3', new Array()]])
```

----------------------------------------

TITLE: Generating QR Code and Displaying to Terminal with qrcode-terminal (JavaScript)
DESCRIPTION: Shows how to generate and display a QR code string in the terminal from arbitrary data using the generate method. Requires the qrcode-terminal module to be imported. Expects a string as input data, outputs the QR code directly to the terminal. No output formatting options provided in this example.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/qrcode-terminal/README.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
qrcode.generate('This will be a QRCode, eh!');
```

----------------------------------------

TITLE: Advancing Set.values() Iterator in JavaScript
DESCRIPTION: Creates a Set iterator, advances it with next(), and examines the remaining items. After advancing once, only value 2 remains in the iterator.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/internal-properties-entries-expected.txt#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
it = new Set([1,2]).values(); it.next(); it
```

----------------------------------------

TITLE: Connection Error Handling with undici:client:connectError Channel
DESCRIPTION: Shows how to handle connection failures using the diagnostics channel.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:client:connectError').subscribe(({ error, socket, connectParams, connector }) => {
  // const { host, hostname, protocol, port, servername, version } = connectParams
  // connector is a function that creates the socket
  console.log(`Connect failed with ${error.message}`)
})
```

----------------------------------------

TITLE: TypeScript Namespace Example With Runtime Code (Not Supported)
DESCRIPTION: Example of a TypeScript namespace that exports a value, which is not supported by the built-in type stripping feature and will result in an error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/typescript.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
// This namespace is exporting a value
namespace A {
   export let x = 1
}
```

----------------------------------------

TITLE: Synopsis of npm team commands (Bash)
DESCRIPTION: This snippet provides the general command signature for all `npm team` subcommands: `create`, `destroy`, `add`, `rm`, and `ls`. It outlines the required arguments such as the scope/team identifier and user, and the optional `--otp` flag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-team.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm team create <scope:team> [--otp <otpcode>]
npm team destroy <scope:team> [--otp <otpcode>]
npm team add <scope:team> <user> [--otp <otpcode>]
npm team rm <scope:team> <user> [--otp <otpcode>]
npm team ls <scope>|<scope:team>
```

----------------------------------------

TITLE: Custom Trace Event File Pattern
DESCRIPTION: Example showing how to specify custom trace event log file pattern using command line options.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tracing.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
node --trace-event-categories v8 --trace-event-file-pattern '${pid}-${rotation}.log' server.js
```

----------------------------------------

TITLE: Sorting ['123', '13'] Lexicographically in JavaScript
DESCRIPTION: This snippet tests the default `sort()` method on an array containing '123' and '13'. It converts the sorted array to a string using `toString()` and expects the result to be '123,13', demonstrating JavaScript's default lexicographical (not numerical) sorting.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/string-sort-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
["123","13"].sort().toString()
```

----------------------------------------

TITLE: Writing Big-Endian Signed 64-bit Integer (Node.js Buffer)
DESCRIPTION: Demonstrates using `buf.writeBigInt64BE()` to write a BigInt value into the buffer as a big-endian 64-bit signed integer. The example initializes a buffer and writes a hexadecimal BigInt, showing the resulting byte order. Dependencies include the `Buffer` class from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_80

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeBigInt64BE(0x0102030405060708n, 0);

console.log(buf);
// Prints: <Buffer 01 02 03 04 05 06 07 08>
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeBigInt64BE(0x0102030405060708n, 0);

console.log(buf);
// Prints: <Buffer 01 02 03 04 05 06 07 08>
```

----------------------------------------

TITLE: Monitoring Request Creation with undici:request:create Channel
DESCRIPTION: Demonstrates how to subscribe to and monitor new outgoing request creation events, including access to request properties and header manipulation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:request:create').subscribe(({ request }) => {
  console.log('origin', request.origin)
  console.log('completed', request.completed)
  console.log('method', request.method)
  console.log('path', request.path)
  console.log('headers') // array of strings, e.g: ['foo', 'bar']
  request.addHeader('hello', 'world')
  console.log('headers', request.headers) // e.g. ['foo', 'bar', 'hello', 'world']
})
```

----------------------------------------

TITLE: Testing 'this' Context in Strict Mode Reduction
DESCRIPTION: This snippet tests the behavior of 'this' in the reduce() callback when used in strict mode. It verifies that 'this' is undefined in strict mode when not explicitly set.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-reduce-expected.txt#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
[2,3].reduce(function() {'use strict'; return this;})
```

----------------------------------------

TITLE: Accessing the Main Module Information in Node.js
DESCRIPTION: Shows how to access information about the entry point module using `require.main`. The example logs the entire Module object with its properties when a script is run directly as the main module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
console.log(require.main);
```

LANGUAGE: bash
CODE:
```
node entry.js
```

LANGUAGE: javascript
CODE:
```
Module {
  id: '.',
  path: '/absolute/path/to',
  exports: {},
  filename: '/absolute/path/to/entry.js',
  loaded: false,
  children: [],
  paths:
   [ '/absolute/path/to/node_modules',
     '/absolute/path/node_modules',
     '/absolute/node_modules',
     '/node_modules' ] }
```

----------------------------------------

TITLE: Checking Report Compact Format in Node.js
DESCRIPTION: This snippet demonstrates how to check if reports are set to be written in a compact format using the process.report.compact property in both ECMAScript modules and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_72

LANGUAGE: JavaScript
CODE:
```
import { report } from 'node:process';

console.log(`Reports are compact? ${report.compact}`);
```

LANGUAGE: JavaScript
CODE:
```
const { report } = require('node:process');

console.log(`Reports are compact? ${report.compact}`);
```

----------------------------------------

TITLE: Removing All Build Artifacts with make distclean - Bash
DESCRIPTION: Removes all intermediary build artifacts and configuration results to resolve build inconsistencies or set up a clean build. Requires completed or partial build state. No arguments. Output: build directory and config files reset, requiring a new configure and full rebuild.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_22

LANGUAGE: bash
CODE:
```
make distclean

```

----------------------------------------

TITLE: Python Environment Selection and Variable Setting - Console
DESCRIPTION: Provides Windows console and PowerShell commands for setting the npm_config_python environment variable, and includes a command to list installed Python paths. Useful when configuring node-gyp on Windows to ensure the correct Python interpreter is used. 'py --list-paths' lists all available Python executables; 'set' is for CMD, and '$Env:' is used in PowerShell. Paths should be adjusted according to actual installation locations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/README.md#2025-04-23_snippet_4

LANGUAGE: console
CODE:
```
py --list-paths  # To see the installed Python versions
set npm_config_python=C:\path\to\python.exe  # CMD
$Env:npm_config_python="C:\path\to\python.exe"  # PowerShell
```

----------------------------------------

TITLE: Performing Arithmetic Between Coerced Float Strings in JavaScript
DESCRIPTION: Shows basic arithmetic operations (multiplication, division, subtraction) performed between operands derived from the same float string (`values.someFloatString`, assumed '42.42'). The tests demonstrate standard numerical results (multiplication yields ~1799.45, division yields 1, subtraction yields 0) and include variations using the unary plus operator (`+`) for explicit number coercion on one or both operands.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-transforms-expected.txt#2025-04-23_snippet_20

LANGUAGE: text
CODE:
```
PASS +values.someFloatString * values.someFloatString is values.someFloatString * values.someFloatString
PASS +values.someFloatString * values.someFloatString is 1799.4564000000003
PASS values.someFloatString * +values.someFloatString is values.someFloatString * values.someFloatString
PASS values.someFloatString * +values.someFloatString is 1799.4564000000003
PASS +values.someFloatString * +values.someFloatString is values.someFloatString * values.someFloatString
PASS +values.someFloatString * +values.someFloatString is 1799.4564000000003
PASS +values.someFloatString / values.someFloatString is values.someFloatString / values.someFloatString
PASS +values.someFloatString / values.someFloatString is 1
PASS values.someFloatString / +values.someFloatString is values.someFloatString / values.someFloatString
PASS values.someFloatString / +values.someFloatString is 1
PASS +values.someFloatString / +values.someFloatString is values.someFloatString / values.someFloatString
PASS +values.someFloatString / +values.someFloatString is 1
PASS +values.someFloatString - values.someFloatString is values.someFloatString - values.someFloatString
PASS +values.someFloatString - values.someFloatString is 0
PASS values.someFloatString - +values.someFloatString is values.someFloatString - values.someFloatString
PASS values.someFloatString - +values.someFloatString is 0
PASS +values.someFloatString - +values.someFloatString is values.someFloatString - values.someFloatString
PASS +values.someFloatString - +values.someFloatString is 0
```

----------------------------------------

TITLE: Testing Array.prototype.every() with Array Holes in JavaScript
DESCRIPTION: This snippet tests the every() method's behavior when dealing with arrays that contain holes (undefined elements).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-every-expected.txt#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
arr.every(isNotUndefined)
```

----------------------------------------

TITLE: Using Initialize Hook with MessageChannel in Node.js (CommonJS)
DESCRIPTION: Demonstrates how to use the initialize hook with a MessageChannel for communication between the main thread and the hooks thread in CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_31

LANGUAGE: javascript
CODE:
```
const assert = require('node:assert');
const { register } = require('node:module');
const { pathToFileURL } = require('node:url');
const { MessageChannel } = require('node:worker_threads');

const { port1, port2 } = new MessageChannel();

port1.on('message', (msg) => {
  assert.strictEqual(msg, 'increment: 2');
});
port1.unref();

register('./path-to-my-hooks.js', {
  parentURL: pathToFileURL(__filename),
  data: { number: 1, port: port2 },
  transferList: [port2],
});
```

----------------------------------------

TITLE: Calling Aliased Function `call` without Explicit Context in JavaScript
DESCRIPTION: Invokes `myFunction` using an aliased `call` method (`aliasedCall`) without specifying a `this` context or arguments. The `this` context defaults similarly to `Function.prototype.call()` (global object or `undefined`). The output `[this, \"myFunction\", undefined]` shows the default context and lack of arguments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-convert-this-dom-window-expected.txt#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
myFunction.aliasedCall()
```

----------------------------------------

TITLE: Generating Small Output QR Code with Options in qrcode-terminal (JavaScript)
DESCRIPTION: Illustrates generating a compact QR code by passing an options object with small: true to the generate function. The QR code will have reduced size suitable for limited terminal widths. Dependencies: qrcode-terminal; parameters include the data string and an options object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/qrcode-terminal/README.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
qrcode.generate('This will be a small QRCode, eh!', {small: true});
```

----------------------------------------

TITLE: Resolving NAPTR Records with dnsPromises.resolveNaptr() in Node.js
DESCRIPTION: This snippet shows the structure of the object returned when resolving NAPTR (Naming Authority Pointer) records using the dnsPromises.resolveNaptr() method. It includes properties such as flags, service, regexp, replacement, order, and preference.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
{
  flags: 's',
  service: 'SIP+D2U',
  regexp: '',
  replacement: '_sip._udp.example.com',
  order: 30,
  preference: 100
}
```

----------------------------------------

TITLE: Running Git Command in Package Directory using npm-explore
DESCRIPTION: This example demonstrates how to use npm-explore to run a git command in the directory of a specific package dependency. It's particularly useful for managing git submodules in the node_modules folder.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-explore.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm explore some-dependency -- git pull origin master
```

----------------------------------------

TITLE: Importing Built-in Test Reporters (CJS)
DESCRIPTION: Shows how to require the standard Node.js `node:test` reporters (tap, spec, dot, junit, lcov) using CommonJS syntax, typical for older Node.js module styles.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_29

LANGUAGE: cjs
CODE:
```
const { tap, spec, dot, junit, lcov } = require('node:test/reporters');
```

----------------------------------------

TITLE: Adjusting External Memory in Node-API
DESCRIPTION: Function to indicate externally allocated memory kept alive by JavaScript objects to the runtime. Returns napi_ok on success and takes environment, memory change amount and result parameters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_199

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_adjust_external_memory(node_api_basic_env env,
                                                    int64_t change_in_bytes,
                                                    int64_t* result);
```

----------------------------------------

TITLE: Sending HTTP/2 PING Frame - JS
DESCRIPTION: This JavaScript snippet shows how to send a PING frame to the connected peer using `session.ping()`. It demonstrates providing an 8-byte payload and handling the callback which reports acknowledgment status, duration, and the received payload.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_4

LANGUAGE: js
CODE:
```
session.ping(Buffer.from('abcdefgh'), (err, duration, payload) => {
  if (!err) {
    console.log(`Ping acknowledged in ${duration} milliseconds`);
    console.log(`With payload '${payload.toString()}'`);
  }
});
```

----------------------------------------

TITLE: Reading UInt16BE from Buffer - Node.js
DESCRIPTION: Demonstrates reading an unsigned, big-endian 16-bit integer from a Buffer using `readUInt16BE`. It shows reading from a buffer created with hex values and converting the output to hex strings for verification.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_65

LANGUAGE: JavaScript (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56]);

console.log(buf.readUInt16BE(0).toString(16));
// Prints: 1234
console.log(buf.readUInt16BE(1).toString(16));
// Prints: 3456
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56]);

console.log(buf.readUInt16BE(0).toString(16));
// Prints: 1234
console.log(buf.readUInt16BE(1).toString(16));
// Prints: 3456
```

----------------------------------------

TITLE: Creating a Reusable Header for Node-API Addon in C
DESCRIPTION: A header file for a native Node.js addon that only references the JavaScript Native API to ensure portability across different Node-API implementations. This isolates the Node.js-specific parts from the core addon functionality.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_12

LANGUAGE: c
CODE:
```
// addon.h
#ifndef _ADDON_H_
#define _ADDON_H_
#include <js_native_api.h>
napi_value create_addon(napi_env env);
#endif  // _ADDON_H_
```

----------------------------------------

TITLE: Executing Code in a New Node.js VM Context (vm.runInNewContext)
DESCRIPTION: This JavaScript snippet shows how to use `vm.runInNewContext` to compile and run code in a newly created V8 context. It depends on the `node:vm` module. The code `'count += 1; name = "kitty"'` is executed, modifying the provided `contextObject` by incrementing `count` and adding a new property `name`. The example also demonstrates creating a context without contextifying the global object using `vm.constants.DONT_CONTEXTIFY`, which allows freezing the global object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_19

LANGUAGE: js
CODE:
```
const vm = require('node:vm');

const contextObject = {
  animal: 'cat',
  count: 2,
};

vm.runInNewContext('count += 1; name = "kitty"', contextObject);
console.log(contextObject);
// Prints: { animal: 'cat', count: 3, name: 'kitty' }

// This would throw if the context is created from a contextified object.
// vm.constants.DONT_CONTEXTIFY allows creating contexts with ordinary global objects that
// can be frozen.
const frozenContext = vm.runInNewContext('Object.freeze(globalThis); globalThis;', vm.constants.DONT_CONTEXTIFY);
```

----------------------------------------

TITLE: Creating File Snapshot with Default Serialization - Node.js Test - js
DESCRIPTION: Shows how to use `t.assert.fileSnapshot` to perform snapshot testing where the snapshot is stored in a user-specified file path. The value is serialized using default test runner serializers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_66

LANGUAGE: js
CODE:
```
test('snapshot test with default serialization', (t) => {
  t.assert.fileSnapshot({ value1: 1, value2: 2 }, './snapshots/snapshot.json');
});
```

----------------------------------------

TITLE: Running Stores with Context and Callback - Node.js (ESM)
DESCRIPTION: Illustrates propagating context using runStores with a diagnostics channel and bound AsyncLocalStorage in ES Modules. Imports both 'node:diagnostics_channel' and 'node:async_hooks', binds a store with a transform to chain spans, and runs a callback within the provided context. Ensures context propagation for async code. Experimental as of v18.19.0, and susceptible to context loss in certain async edge cases.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_26

LANGUAGE: JavaScript (ESM)
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';\nimport { AsyncLocalStorage } from 'node:async_hooks';\n\nconst store = new AsyncLocalStorage();\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.bindStore(store, (message) => {\n  const parent = store.getStore();\n  return new Span(message, parent);\n});\nchannel.runStores({ some: 'message' }, () => {\n  store.getStore(); // Span({ some: 'message' })\n});
```

----------------------------------------

TITLE: Example output of npm stop command in Bash
DESCRIPTION: This snippet shows an example of running the npm stop command and its output, including the execution of the defined stop script.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-stop.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm stop

> npm@x.x.x stop
> node bar.js

(bar.js output would be here)
```

----------------------------------------

TITLE: Advancing Time with Multiple timers.tick() Calls
DESCRIPTION: This snippet shows that `context.mock.timers.tick()` can be called multiple times to incrementally advance the mocked time. A `setTimeout` is set, and the total required time is reached by calling `tick()` several times with smaller increments, still triggering the callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_51

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();
  context.mock.timers.enable({ apis: ['setTimeout'] });
  const nineSecs = 9000;
  setTimeout(fn, nineSecs);

  const threeSeconds = 3000;
  context.mock.timers.tick(threeSeconds);
  context.mock.timers.tick(threeSeconds);
  context.mock.timers.tick(threeSeconds);

  assert.strictEqual(fn.mock.callCount(), 1);
});
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();
  context.mock.timers.enable({ apis: ['setTimeout'] });
  const nineSecs = 9000;
  setTimeout(fn, nineSecs);

  const threeSeconds = 3000;
  context.mock.timers.tick(threeSeconds);
  context.mock.timers.tick(threeSeconds);
  context.mock.timers.tick(threeSeconds);

  assert.strictEqual(fn.mock.callCount(), 1);
});
```

----------------------------------------

TITLE: Resolving Bare Package Specifiers - PACKAGE_RESOLVE Algorithm
DESCRIPTION: This algorithm resolves bare package specifiers (like 'lodash' or '@scope/package') relative to a parent URL. It checks for builtins, determines the package name and subpath, attempts self-resolution via `package.json` exports, and traverses `node_modules` directories to find the package and resolve the subpath or main entry.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_22

LANGUAGE: Algorithm Specification (Node.js Module Resolution)
CODE:
```
PACKAGE_RESOLVE(_packageSpecifier_, _parentURL_)

> 1. Let _packageName_ be **undefined**.
> 2. If _packageSpecifier_ is an empty string, then
>    1. Throw an _Invalid Module Specifier_ error.
> 3. If _packageSpecifier_ is a Node.js builtin module name, then
>    1. Return the string _"node:"_ concatenated with _packageSpecifier_.
> 4. If _packageSpecifier_ does not start with _"@"_, then
>    1. Set _packageName_ to the substring of _packageSpecifier_ until the first
>       _"/"_ separator or the end of the string.
> 5. Otherwise,
>    1. If _packageSpecifier_ does not contain a _"/"_ separator, then
>       1. Throw an _Invalid Module Specifier_ error.
>    2. Set _packageName_ to the substring of _packageSpecifier_
>       until the second _"/"_ separator or the end of the string.
> 6. If _packageName_ starts with _"."_ or contains _"\\"_ or _"%"_, then
>    1. Throw an _Invalid Module Specifier_ error.
> 7. Let _packageSubpath_ be _"."_ concatenated with the substring of
>    _packageSpecifier_ from the position at the length of _packageName_.
> 8. Let _selfUrl_ be the result of
>    **PACKAGE_SELF_RESOLVE**(_packageName_, _packageSubpath_, _parentURL_).
> 9. If _selfUrl_ is not **undefined**, return _selfUrl_.
> 10. While _parentURL_ is not the file system root,
>     1. Let _packageURL_ be the URL resolution of _"node_modules/"_
>        concatenated with _packageName_, relative to _parentURL_.
>     2. Set _parentURL_ to the parent folder URL of _parentURL_.
>     3. If the folder at _packageURL_ does not exist, then
>        1. Continue the next loop iteration.
>     4. Let _pjson_ be the result of **READ_PACKAGE_JSON**(_packageURL_).
>     5. If _pjson_ is not **null** and _pjson_._exports_ is not **null** or
>        **undefined**, then
>        1. Return the result of **PACKAGE_EXPORTS_RESOLVE**(_packageURL_,
>           _packageSubpath_, _pjson.exports_, _defaultConditions_).
>     6. Otherwise, if _packageSubpath_ is equal to _"."_, then
>        1. If _pjson.main_ is a string, then
>           1. Return the URL resolution of _main_ in _packageURL_.
>     7. Otherwise,
>        1. Return the URL resolution of _packageSubpath_ in _packageURL_.
> 11. Throw a _Module Not Found_ error.
```

----------------------------------------

TITLE: Synchronous File Access Check in Node.js
DESCRIPTION: Demonstrates checking file access permissions synchronously using fs.accessSync with bitwise flags.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_83

LANGUAGE: javascript
CODE:
```
import { accessSync, constants } from 'node:fs';

try {
  accessSync('etc/passwd', constants.R_OK | constants.W_OK);
  console.log('can read/write');
} catch (err) {
  console.error('no access!');
}
```

----------------------------------------

TITLE: Default Node-Gyp Rebuild Script
DESCRIPTION: Shows the default install script configuration in package.json for packages with a binding.gyp file
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-rebuild.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
"scripts": {
    "install": "node-gyp rebuild"
}
```

----------------------------------------

TITLE: Responding with File Descriptor - Node.js http2 - With Trailers
DESCRIPTION: This snippet shows how to use `http2stream.respondWithFD()` with the `waitForTrailers` option. It opens a file descriptor, sets headers, calls `respondWithFD` with the option, listens for the `'wantTrailers'` event, sends trailing headers using `sendTrailers`, and manually closes the file descriptor on stream close, as `waitForTrailers` prevents automatic stream closure.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_30

LANGUAGE: JavaScript (ESM)
CODE:
```
import { createServer } from 'node:http2';
import { openSync, fstatSync, closeSync } from 'node:fs';

const server = createServer();
server.on('stream', (stream) => {
  const fd = openSync('/some/file', 'r');

  const stat = fstatSync(fd);
  const headers = {
    'content-length': stat.size,
    'last-modified': stat.mtime.toUTCString(),
    'content-type': 'text/plain; charset=utf-8',
  };
  stream.respondWithFD(fd, headers, { waitForTrailers: true });
  stream.on('wantTrailers', () => {
    stream.sendTrailers({ ABC: 'some value to send' });
  });

  stream.on('close', () => closeSync(fd));
});
```

LANGUAGE: JavaScript (CJS)
CODE:
```
const http2 = require('node:http2');
const fs = require('node:fs');

const server = http2.createServer();
server.on('stream', (stream) => {
  const fd = fs.openSync('/some/file', 'r');

  const stat = fs.fstatSync(fd);
  const headers = {
    'content-length': stat.size,
    'last-modified': stat.mtime.toUTCString(),
    'content-type': 'text/plain; charset=utf-8',
  };
  stream.respondWithFD(fd, headers, { waitForTrailers: true });
  stream.on('wantTrailers', () => {
    stream.sendTrailers({ ABC: 'some value to send' });
  });

  stream.on('close', () => fs.closeSync(fd));
});
```

----------------------------------------

TITLE: Verifying Call Count with CallTracker - Node.js assert - ECMAScript Module (mjs)
DESCRIPTION: Shows usage of tracker.verify() to assert that a function wrapped by CallTracker has been called the expected number of times. If not, it throws an error. Example includes wrapping a function to expect two calls, calling it once, then invoking verify to cause an error. Depends on 'node:assert'. Input is the number of actual calls; output is an error if call count does not match expectation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_9

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}

// Returns a function that wraps func() that must be called exact times
// before tracker.verify().
const callsfunc = tracker.calls(func, 2);

callsfunc();

// Will throw an error since callsfunc() was only called once.
tracker.verify();
```

----------------------------------------

TITLE: Executing Multiple Remote Scripts Concurrently in JavaScript
DESCRIPTION: Shows a pattern for efficiently executing multiple `execute_script` calls, potentially across different remote contexts (`ctx1`, `ctx2`), using `Promise.all`. This avoids waiting sequentially for each call's round-trip network latency and allows waiting for all operations to complete or reject collectively. Assumes `ctx1` and `ctx2` are initialized `RemoteContext` instances.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/wpt/common/dispatcher/README.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
await Promise.all(
  ctx1.execute_script(...),
  ctx1.execute_script(...),
  ctx2.execute_script(...),
  ctx2.execute_script(...),
  ...
)
```

----------------------------------------

TITLE: Implementing Initialize Hook for Module Customization in Node.js
DESCRIPTION: Demonstrates how to implement an initialize hook for module customization. This hook receives data from the register method and can perform initialization tasks in the hooks thread.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
// path-to-my-hooks.js

export async function initialize({ number, port }) {
  port.postMessage(`increment: ${number + 1}`);
}
```

----------------------------------------

TITLE: Subscribing to a channel in Node.js (ESM)
DESCRIPTION: Demonstrates how to subscribe to a named channel and register a message handler.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

diagnostics_channel.subscribe('my-channel', (message, name) => {
  // Received data
});
```

----------------------------------------

TITLE: Testing Returned JavaScript Functions from a C++ Addon (JavaScript)
DESCRIPTION: Shows how to receive and invoke a JavaScript function returned by a C++ native addon. After requiring the built addon and calling it as a factory, the returned function is invoked and its result is logged. Expected output is 'hello world', verifying the function returned by native code behaves as a standard JS function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_20

LANGUAGE: js
CODE:
```
// test.js\nconst addon = require('./build/Release/addon');\n\nconst fn = addon();\nconsole.log(fn());\n// Prints: 'hello world'\n
```

----------------------------------------

TITLE: Updating Corepack with npm
DESCRIPTION: Command to update Corepack to the latest version using npm. Note that installations from Windows MSI packages may require special handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/corepack/README.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
npm install -g corepack@latest
```

----------------------------------------

TITLE: Creating Optimized Latin1 Property Keys in N-API
DESCRIPTION: Function that creates an optimized JavaScript string from ISO-8859-1-encoded C string to be used as a property key. Subsequent calls with the same string pointer may benefit from a speedup in creation, depending on the engine.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_101

LANGUAGE: c
CODE:
```
napi_status NAPI_CDECL node_api_create_property_key_latin1(napi_env env,
                                                           const char* str,
                                                           size_t length,
                                                           napi_value* result);
```

----------------------------------------

TITLE: Testing Node.js Addon Object Wrapping and Summation - JavaScript
DESCRIPTION: Demonstrates usage of the custom C++ Node.js addon from JavaScript, creating two objects and computing their sum using exposed methods. Requires the addon to be built and available at './build/Release/addon'. Inputs two numbers as argument to the wrapped createObject function, and logs the summed result from the add method. Assumes Node.js environment and successful addon build.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_33

LANGUAGE: JavaScript
CODE:
```
// test.js
const addon = require('./build/Release/addon');

const obj1 = addon.createObject(10);
const obj2 = addon.createObject(20);
const result = addon.add(obj1, obj2);

console.log(result);
// Prints: 30
```

----------------------------------------

TITLE: Revoking Package Access from a Team in npm
DESCRIPTION: Command to revoke a team's access to a package in an npm organization.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/orgs.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm access revoke <org:team> [<package>]
```

----------------------------------------

TITLE: Testing JavaScript Strict Equality Comparisons
DESCRIPTION: Test cases demonstrating how JavaScript's strict equality operator (===) compares different values and types. Shows that strict equality requires both value and type to match, and illustrates behavior with primitives, objects, and special values like null and undefined.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/equality-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
new String("0") === new String("0") // false
new String("0") === new Object // false
new Object === 0 // false
0 === 0 // true
0 === -0 // true
"0" === "0" // true
null === null // true
undefined === undefined // true
false === false // true
true === true // true
```

----------------------------------------

TITLE: Demonstrating Compact Option in util.inspect()
DESCRIPTION: Shows the effect of the compact option on output formatting, including handling of long text and nested structures.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
import { inspect } from 'node:util';

const o = {
  a: [1, 2, [[
    'Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit, sed do ' +
      'eiusmod \ntempor incididunt ut labore et dolore magna aliqua.',
    'test',
    'foo']], 4],
  b: new Map([['za', 1], ['zb', 'test']]),
};
console.log(inspect(o, { compact: true, depth: 5, breakLength: 80 }));

console.log(inspect(o, { compact: false, depth: 5, breakLength: 80 }));
```

----------------------------------------

TITLE: HTTP Client Request Abort Event Handler in Node.js
DESCRIPTION: Implementation of the abort event handler for HTTP client requests, triggered when a request is aborted by the client
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_IOJS.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
const http = require('http');
const request = http.request(options);
request.on('abort', () => {
  // Handle client request abort
});
```

----------------------------------------

TITLE: Getting Environment Variable in C using libuv
DESCRIPTION: Retrieves the environment variable specified by name. Not thread-safe.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/misc.rst#2025-04-23_snippet_27

LANGUAGE: C
CODE:
```
int uv_os_getenv(const char* name, char* buffer, size_t* size)
```

----------------------------------------

TITLE: URL Resolution with Different Protocol Handling
DESCRIPTION: Examples showing how URLs with different protocols are resolved against a base URL, demonstrating different behaviors based on protocol format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
let myURL = new URL('http://Example.com/', 'https://example.org/');
// http://example.com/

myURL = new URL('https://Example.com/', 'https://example.org/');
// https://example.com/

myURL = new URL('foo://Example.com/', 'https://example.org/');
// foo://Example.com/

myURL = new URL('http:Example.com/', 'https://example.org/');
// http://example.com/

myURL = new URL('https:Example.com/', 'https://example.org/');
// https://example.org/Example.com/

myURL = new URL('foo:Example.com/', 'https://example.org/');
// foo:Example.com/
```

----------------------------------------

TITLE: Parsing URLs with the Legacy API in CommonJS
DESCRIPTION: Example showing how to parse a URL string using the legacy Node.js url.parse() method in CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_5

LANGUAGE: cjs
CODE:
```
const url = require('node:url');
const myURL =
  url.parse('https://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash');
```

----------------------------------------

TITLE: Importing TTY Module in Node.js
DESCRIPTION: Demonstrates how to require the TTY module in a Node.js application. The TTY module provides terminal-specific functionality.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tty.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const tty = require('node:tty');
```

----------------------------------------

TITLE: Getting Preferred Language with navigator.language
DESCRIPTION: Demonstrates how to use the navigator.language property to get the preferred language of the Node.js instance, which is determined by the ICU library based on the operating system's default language.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
console.log(`The preferred language of the Node.js instance has the tag '${navigator.language}'`);
```

----------------------------------------

TITLE: Defining a Class in Node-API Module
DESCRIPTION: Example of defining a class in a Node-API module, including properties and methods, so that new instances can be created in JavaScript.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_67

LANGUAGE: c
CODE:
```
napi_value Init(napi_env env, napi_value exports) {
  napi_status status;
  napi_property_descriptor properties[] = {
    { "value", NULL, NULL, GetValue, SetValue, NULL, napi_writable | napi_configurable, NULL },
    DECLARE_NAPI_METHOD("plusOne", PlusOne),
    DECLARE_NAPI_METHOD("multiply", Multiply),
  };

  napi_value cons;
  status =
      napi_define_class(env, "MyObject", New, NULL, 3, properties, &cons);
  if (status != napi_ok) return NULL;

  status = napi_create_reference(env, cons, 1, &constructor);
  if (status != napi_ok) return NULL;

  status = napi_set_named_property(env, exports, "MyObject", cons);
  if (status != napi_ok) return NULL;

  return exports;
}
```

----------------------------------------

TITLE: Checking IP Addresses with x509.checkIP Method in Node.js
DESCRIPTION: Validates whether a certificate matches a given IP address (IPv4 or IPv6). Only RFC 5280 iPAddress subject alternative names are considered and must match exactly.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_48

LANGUAGE: javascript
CODE:
```
x509.checkIP(ip)
```

----------------------------------------

TITLE: Handling Worker Exit Events
DESCRIPTION: This snippet demonstrates how to handle the 'exit' event for a worker in a Node.js cluster. It logs different messages based on how the worker process ended.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import cluster from 'node:cluster';

if (cluster.isPrimary) {
  const worker = cluster.fork();
  worker.on('exit', (code, signal) => {
    if (signal) {
      console.log(`worker was killed by signal: ${signal}`);
    } else if (code !== 0) {
      console.log(`worker exited with error code: ${code}`);
    } else {
      console.log('worker success!');
    }
  });
}
```

----------------------------------------

TITLE: Global Dispatcher Configuration with ProxyAgent
DESCRIPTION: Demonstrates setting up ProxyAgent as a global dispatcher for all requests in an application.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/ProxyAgent.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
import { ProxyAgent, setGlobalDispatcher, fetch } from 'undici';

// Define and configure the ProxyAgent
const proxyAgent = new ProxyAgent('http://localhost:8000');
setGlobalDispatcher(proxyAgent);

// Make requests without specifying the dispatcher
const response = await fetch('http://example.com');
console.log('Response status:', response.status);
console.log('Response data:', await response.text());
```

----------------------------------------

TITLE: Splitting Container Nodes in PostCSS Selector Parser
DESCRIPTION: Demonstrates how to use the container.split() method to divide a group of selector nodes based on a callback condition. This example splits a selector at each combinator node.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
// (input) => h1 h2>>h3
const list = selectors.first.split(selector => {
    return selector.type === 'combinator';
});

// (node values) => [['h1', ' '], ['h2', '>>'], ['h3']]
```

----------------------------------------

TITLE: Basic Acorn Parser Usage
DESCRIPTION: Example showing how to parse a simple JavaScript expression using Acorn.
SOURCE: https://github.com/nodejs/node/blob/main/deps/acorn/acorn/README.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
let acorn = require("acorn");
console.log(acorn.parse("1 + 1", {ecmaVersion: 2020}));
```

----------------------------------------

TITLE: Encrypting Data Using Cipheriv as a Stream in Node.js (CommonJS)
DESCRIPTION: This snippet shows how to use a Cipheriv object as a stream to encrypt data in CommonJS format. It follows the same process as the ES Modules version, generating a key, creating an initialization vector, and using createCipheriv for encryption.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
const {
  scrypt,
  randomFill,
  createCipheriv,
} = require('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';

// First, we'll generate the key. The key length is dependent on the algorithm.
// In this case for aes192, it is 24 bytes (192 bits).
scrypt(password, 'salt', 24, (err, key) => {
  if (err) throw err;
  // Then, we'll generate a random initialization vector
  randomFill(new Uint8Array(16), (err, iv) => {
    if (err) throw err;

    // Once we have the key and iv, we can create and use the cipher...
    const cipher = createCipheriv(algorithm, key, iv);

    let encrypted = '';
    cipher.setEncoding('hex');

    cipher.on('data', (chunk) => encrypted += chunk);
    cipher.on('end', () => console.log(encrypted));

    cipher.write('some clear text data');
    cipher.end();
  });
});
```

----------------------------------------

TITLE: Sending UDP Packets from a Connected Socket (ES Module) - JavaScript
DESCRIPTION: Demonstrates connecting a UDP socket before sending data with Node.js 'dgram' (ES module). The socket connects to a remote endpoint, after which data is sent without specifying port/address. Dependencies: 'dgram', 'buffer'. Sequence: create socket, connect to address/port, send Buffer, handle the callback, close socket. Input: message, remote port/address. Output: message sent via connected socket. Useful for persistent UDP conversations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
import dgram from 'node:dgram';\nimport { Buffer } from 'node:buffer';\n\nconst message = Buffer.from('Some bytes');\nconst client = dgram.createSocket('udp4');\nclient.connect(41234, 'localhost', (err) => {\n  client.send(message, (err) => {\n    client.close();\n  });\n});
```

----------------------------------------

TITLE: Testing Array.prototype.every() with Two Arguments in JavaScript
DESCRIPTION: This snippet shows how to use the every() method with a callback function and an additional predicate argument.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-every-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
[12, 5, 10, 130, 44].every(isBigEnough, predicate)
```

LANGUAGE: javascript
CODE:
```
[12, 54, 18, 130, 44].every(isBigEnough, predicate)
```

----------------------------------------

TITLE: Using describe and it aliases - Node.js Test Runner
DESCRIPTION: Illustrates the use of `describe()` and `it()` functions, which are aliases for `suite()` and `test()`, respectively, provided by the `node:test` module. These aliases offer a more familiar syntax for structuring test suites and individual tests, especially for users coming from other testing frameworks. Requires the `assert` module for assertions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_6

LANGUAGE: javascript
CODE:
```
describe('A thing', () => {
  it('should work', () => {
    assert.strictEqual(1, 1);
  });

  it('should be ok', () => {
    assert.strictEqual(2, 2);
  });

  describe('a nested thing', () => {
    it('should work', () => {
      assert.strictEqual(3, 3);
    });
  });
});
```

----------------------------------------

TITLE: Displaying Global Prefix Example in Bash
DESCRIPTION: This example shows how to use the npm prefix command with the -g flag to display the global prefix. The global prefix is the directory where global npm packages are installed.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-prefix.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm prefix -g
/usr/local
```

----------------------------------------

TITLE: Creating a TracingChannel in Node.js (CommonJS)
DESCRIPTION: Shows how to create a TracingChannel wrapper using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');

const channelsByName = diagnostics_channel.tracingChannel('my-channel');

// or...

const channelsByCollection = diagnostics_channel.tracingChannel({
  start: diagnostics_channel.channel('tracing:my-channel:start'),
  end: diagnostics_channel.channel('tracing:my-channel:end'),
  asyncStart: diagnostics_channel.channel('tracing:my-channel:asyncStart'),
  asyncEnd: diagnostics_channel.channel('tracing:my-channel:asyncEnd'),
  error: diagnostics_channel.channel('tracing:my-channel:error'),
});
```

----------------------------------------

TITLE: Creating Proxy with Custom Properties on Target and Handler - JavaScript
DESCRIPTION: Instantiates Proxy with custom properties on target ({c: 3}) and handler ({d: 4}), though handler properties do not affect proxy behavior unless they are trap methods. Input: none; Output: Proxy instance with c on target, d ignored. Primarily tests that only methods on handler matter for interception.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_32

LANGUAGE: JavaScript
CODE:
```
new Proxy({c: 3}, {d: 4})
```

----------------------------------------

TITLE: Implementing Custom Promise Rejection Handling in Node.js EventEmitter (CommonJS)
DESCRIPTION: CommonJS version of the previous example, demonstrating how to implement a custom promise rejection handler for an EventEmitter using the Symbol.for('nodejs.rejection') method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_33

LANGUAGE: JavaScript
CODE:
```
const { EventEmitter, captureRejectionSymbol } = require('node:events');

class MyClass extends EventEmitter {
  constructor() {
    super({ captureRejections: true });
  }

  [captureRejectionSymbol](err, event, ...args) {
    console.log('rejection happened for', event, 'with', err, ...args);
    this.destroy(err);
  }

  destroy(err) {
    // Tear the resource down here.
  }
}
```

----------------------------------------

TITLE: Wrapping Native Objects with napi_wrap
DESCRIPTION: Wraps a native C++ instance in a JavaScript object. Allows attaching native data to JavaScript objects with optional cleanup on garbage collection.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_179

LANGUAGE: c
CODE:
```
napi_status napi_wrap(napi_env env,
                      napi_value js_object,
                      void* native_object,
                      napi_finalize finalize_cb,
                      void* finalize_hint,
                      napi_ref* result);
```

----------------------------------------

TITLE: Importing the URL Module in CommonJS
DESCRIPTION: Shows how to import the Node.js URL module using CommonJS require syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const url = require('node:url');
```

----------------------------------------

TITLE: Importing Node.js Util Module
DESCRIPTION: Examples showing how to import the util module using both ESM and CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import util from 'node:util';
```

LANGUAGE: cjs
CODE:
```
const util = require('node:util');
```

----------------------------------------

TITLE: Marking tests as TODO - Node.js Test Runner
DESCRIPTION: Shows how to mark tests as 'TODO' using the `{ todo: true }` option or the `t.todo()` method. TODO tests represent incomplete or flaky tests; they are executed but do not affect the process exit code even if they fail.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_5

LANGUAGE: javascript
CODE:
```
// The todo option is used, but no message is provided.
test('todo option', { todo: true }, (t) => {
  // This code is executed, but not treated as a failure.
  throw new Error('this does not fail the test');
});

// The todo option is used, and a message is provided.
test('todo option with message', { todo: 'this is a todo test' }, (t) => {
  // This code is executed.
});

test('todo() method', (t) => {
  t.todo();
});

test('todo() method with message', (t) => {
  t.todo('this is a todo test and is not treated as a failure');
  throw new Error('this does not fail the test');
});
```

----------------------------------------

TITLE: Storing V8 Local Handle as Global Reference (C++)
DESCRIPTION: Illustrates how to persist a reference to a V8 object beyond the lifetime of a `HandleScope` or function call by storing a `v8::Local<v8::Object>` in a `v8::Global<v8::Object>` using the `Reset` method. This creates a strong reference, preventing the object from being garbage collected. Requires a V8 `Isolate`.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_5

LANGUAGE: C++
CODE:
```
v8::Global<v8::Object> reference;

void StoreReference(v8::Isolate* isolate, v8::Local<v8::Object> obj) {
  // Create a strong reference to `obj`.
  reference.Reset(isolate, obj);
}
```

----------------------------------------

TITLE: Handling Coercion and Offset in Buffer Indexing in Node.js (cjs)
DESCRIPTION: Demonstrates the behavior of the `indexOf()` method when provided with numbers outside the byte range or non-numeric byteOffset values in Node.js CommonJS syntax, showing how coercion affects the search.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_57

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const b = Buffer.from('abcdef');

// Passing a value that's a number, but not a valid byte.
// Prints: 2, equivalent to searching for 99 or 'c'.
console.log(b.indexOf(99.9));
console.log(b.indexOf(256 + 99));

// Passing a byteOffset that coerces to NaN or 0.
// Prints: 1, searching the whole buffer.
console.log(b.indexOf('b', undefined));
console.log(b.indexOf('b', {}));
console.log(b.indexOf('b', null));
console.log(b.indexOf('b', []));
```

----------------------------------------

TITLE: Executing Platform-Normalized pwd Command using spawn in JS
DESCRIPTION: Demonstrates how to utilize the `common.pwdCommand` array, which provides platform-independent arguments for the `pwd` command, with the `child_process.spawn` function to execute it in a cross-platform compatible way within tests. Requires the `../common` module and `node:child_process`.
SOURCE: https://github.com/nodejs/node/blob/main/test/common/README.md#2025-04-23_snippet_4

LANGUAGE: js
CODE:
```
const common = require('../common');
const { spawn } = require('node:child_process');

spawn(...common.pwdCommand, { stdio: ['pipe'] });
```

----------------------------------------

TITLE: Resolving DNS Records with dnsPromises.resolveAny() in Node.js
DESCRIPTION: This snippet demonstrates the structure of the result object returned by the dnsPromises.resolveAny() method. It shows various types of DNS records that can be resolved, including A, CNAME, MX, NS, TXT, and SOA records.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
[ { type: 'A', address: '127.0.0.1', ttl: 299 },
  { type: 'CNAME', value: 'example.com' },
  { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },
  { type: 'NS', value: 'ns1.example.com' },
  { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },
  { type: 'SOA',
    nsname: 'ns1.example.com',
    hostmaster: 'admin.example.com',
    serial: 156696742,
    refresh: 900,
    retry: 900,
    expire: 1800,
    minttl: 60 } ]
```

----------------------------------------

TITLE: Using Import Attributes in Import Statement - JavaScript ESM
DESCRIPTION: Illustrates how to use import attributes in an ESM import statement, which are accessible as part of the extra.attributes parameter in the linker. Attributes must be supported by the host environment, or an error is expected.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_9

LANGUAGE: JavaScript
CODE:
```
import foo from 'foo' with { name: 'value' };
//                         ^^^^^^^^^^^^^^^^^ the attribute
```

----------------------------------------

TITLE: YAML Metadata for Multi-version Addition and Changes in Node.js Documentation
DESCRIPTION: A complex YAML metadata comment showing both when a feature was added to multiple Node.js versions and subsequent changes. It includes PR references and descriptions of the changes.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/doc_with_yaml.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
added:
  - v5.3.0
  - v4.2.0
changes:
  - version: v4.2.0
    pr-url: https://github.com/nodejs/node/pull/3276
    description: The `error` parameter can now be an arrow function.
```

----------------------------------------

TITLE: Logging Processor Architecture in Node.js
DESCRIPTION: This code snippet shows how to log the processor architecture for which the Node.js binary was compiled, using both ECMAScript modules and CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
import { arch } from 'node:process';

console.log(`This processor architecture is ${arch}`);
```

LANGUAGE: javascript
CODE:
```
const { arch } = require('node:process');

console.log(`This processor architecture is ${arch}`);
```

----------------------------------------

TITLE: Setting V8 Runtime Flags Programmatically in Node.js
DESCRIPTION: Illustrates how to use `v8.setFlagsFromString()` to dynamically set V8 command-line flags after the Node.js process has started. This example enables V8 garbage collection tracing (`--trace_gc`) and then disables it after 60 seconds. Requires the `node:v8` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_10

LANGUAGE: js
CODE:
```
// Print GC events to stdout for one minute.
const v8 = require('node:v8');
v8.setFlagsFromString('--trace_gc');
setTimeout(() => { v8.setFlagsFromString('--notrace_gc'); }, 60e3);
```

----------------------------------------

TITLE: Creating a JavaScript Array - Node-API - C
DESCRIPTION: Declares a function to create a new JavaScript Array object from native code, returning a napi_value handle to that Array in the provided result parameter, as described in ECMAScript Section 22.1. Requires a valid napi_env environment. Returns napi_ok on success. Outputs a handle to the JS Array for further use in native code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_74

LANGUAGE: c
CODE:
```
napi_status napi_create_array(napi_env env, napi_value* result)
```

----------------------------------------

TITLE: Acorn Tokenizer Iterator Usage
DESCRIPTION: Examples showing how to use Acorn's tokenizer as an iterator in ES6 environment.
SOURCE: https://github.com/nodejs/node/blob/main/deps/acorn/acorn/README.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
for (let token of acorn.tokenizer(str)) {
  // iterate over the tokens
}

// transform code to array of tokens:
var tokens = [...acorn.tokenizer(str)];
```

----------------------------------------

TITLE: Querying OS Kernel Version with Node.js JavaScript
DESCRIPTION: Returns a string identifying the system kernel version using os.version(). The value is determined by uname(3) on POSIX and appropriate system calls on Windows. No arguments or dependencies except Node.js os module. Returns string (kernel version information).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
os.version()
```

----------------------------------------

TITLE: Setting Breakpoints in Unloaded Modules
DESCRIPTION: Example of setting breakpoints in files that haven't been loaded yet using the Node.js debugger
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/debugger.md#2025-04-23_snippet_2

LANGUAGE: console
CODE:
```
$ node inspect main.js
< Debugger listening on ws://127.0.0.1:9229/48a5b28a-550c-471b-b5e1-d13dd7165df9
< For help, see: https://nodejs.org/en/docs/inspector
<
connecting to 127.0.0.1:9229 ... ok
< Debugger attached.
<
Break on start in main.js:1
> 1 const mod = require('./mod.js');
  2 mod.hello();
  3 mod.hello();
debug> setBreakpoint('mod.js', 22)
Warning: script 'mod.js' was not loaded yet.
debug> c
break in mod.js:22
 20 // USE OR OTHER DEALINGS IN THE SOFTWARE.
 21
>22 exports.hello = function() {
 23   return 'hello from module';
 24 };
debug>
```

----------------------------------------

TITLE: Testing Regular Async Stack Trace Pattern
DESCRIPTION: Demonstrates a regular async stack trace pattern with user function, inner async, and outer async calls. Shows the standard stack trace format with line numbers and file references.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/async-chains-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
userFunction (test.js:1:36)
-- inner async --
runWithRegular (utils.js:2:12)
inner (test.js:2:28)
runWithNone (utils.js:27:2)
(anonymous) (test.js:3:10)
```

----------------------------------------

TITLE: Incrementing Reference Count in Node-API (C)
DESCRIPTION: Increments the reference count for a given reference and returns the new count.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_56

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_reference_ref(napi_env env,
                                           napi_ref ref,
                                           uint32_t* result);
```

----------------------------------------

TITLE: Example SRV Record Object Structure in Node.js DNS
DESCRIPTION: This code snippet displays the structure of a JavaScript object representing a Service (SRV) record as resolved by the `dns.resolveSrv` function in Node.js. The object includes properties such as priority, weight, port, and name.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_11

LANGUAGE: js
CODE:
```
{
  priority: 10,
  weight: 5,
  port: 21223,
  name: 'service.example.com'
}
```

----------------------------------------

TITLE: Checking Boxed Primitive in JavaScript
DESCRIPTION: Shows the usage of util.types.isBoxedPrimitive() to check if a value is any boxed primitive object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_68

LANGUAGE: javascript
CODE:
```
util.types.isBoxedPrimitive(false); // Returns false
util.types.isBoxedPrimitive(new Boolean(false)); // Returns true
util.types.isBoxedPrimitive(Symbol('foo')); // Returns false
util.types.isBoxedPrimitive(Object(Symbol('foo'))); // Returns true
util.types.isBoxedPrimitive(Object(BigInt(5))); // Returns true
```

----------------------------------------

TITLE: Defining OpenSSL Error UNABLE_TO_GET_ISSUER_CERT (Text)
DESCRIPTION: An OpenSSL error indicating that the issuer certificate for a certificate being looked up could not be found. This typically suggests an incomplete list of trusted root or intermediate certificates.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_49

LANGUAGE: text
CODE:
```
UNABLE_TO_GET_ISSUER_CERT
```

----------------------------------------

TITLE: Handling 'information' Event with Node.js HTTP (CommonJS) - JavaScript
DESCRIPTION: Shows how to handle the 'information' event on a Node.js HTTP ClientRequest using CommonJS syntax. Upon receiving a 1xx intermediate HTTP response, it logs the status code via the event listener. Requires the 'node:http' module and a server sending 1xx responses. No specific parameters beyond request options; outputs are console logs with status codes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_8

LANGUAGE: cjs
CODE:
```
const http = require('node:http');

const options = {
  host: '127.0.0.1',
  port: 8080,
  path: '/length_request',
};

// Make a request
const req = http.request(options);
req.end();

req.on('information', (info) => {
  console.log(`Got information prior to main response: ${info.statusCode}`);
});

```

----------------------------------------

TITLE: Cancelling File Send with Stat Check - Node.js HTTP/2 - MJS
DESCRIPTION: Shows how to use the `options.statCheck` function with `http2stream.respondWithFile` to cancel the file send operation by returning `false`. This is useful for implementing conditional requests, such as checking file modification times and responding with a `304 Not Modified` status instead of sending the file content.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_33

LANGUAGE: Node.js - MJS
CODE:
```
import { createServer } from 'node:http2';
const server = createServer();
server.on('stream', (stream) => {
  function statCheck(stat, headers) {
    // Check the stat here...
    stream.respond({ ':status': 304 });
    return false; // Cancel the send operation
  }
  stream.respondWithFile('/some/file',
                         { 'content-type': 'text/plain; charset=utf-8' },
                         { statCheck });
});
```

----------------------------------------

TITLE: Defining Abseil If_Constexpr Library Test - Bazel Starlark
DESCRIPTION: Defines a test target 'if_constexpr_test' using absl_cc_test, specifying 'internal/if_constexpr_test.cc' as the source. The build applies Abseil test compilation flags and depends on the if_constexpr library and GTest's gmock_main. Intended to verify the behavior of the if_constexpr component through GTest-driven tests. Requires all dependencies, particularly GTest and the internal library, to be present.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/utility/CMakeLists.txt#2025-04-23_snippet_3

LANGUAGE: Bazel Starlark
CODE:
```
absl_cc_test(
  NAME
    if_constexpr_test
  SRCS
    "internal/if_constexpr_test.cc"
  COPTS
    ${ABSL_TEST_COPTS}
  DEPS
    absl::if_constexpr
    GTest::gmock_main
)
```

----------------------------------------

TITLE: License Header Text
DESCRIPTION: Standard BSD-style license header containing copyright notices for V8 project and Apple Inc., along with terms and conditions for redistribution and disclaimer of warranties.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-dead-unreachable-code-with-chain-of-dead-unchecked-nodes-expected.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
# Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
```

----------------------------------------

TITLE: Using AsyncResource Worker Pool Example (CJS)
DESCRIPTION: Example demonstrating how to use the `WorkerPool` class (CJS version). It initializes the pool with a number of threads equal to available CPU cores, submits 10 simple addition tasks, logs the results of each task's callback, and closes the pool once all tasks are complete.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_15

LANGUAGE: cjs
CODE:
```
const WorkerPool = require('./worker_pool.js');
const os = require('node:os');

const pool = new WorkerPool(os.availableParallelism());

let finished = 0;
for (let i = 0; i < 10; i++) {
  pool.runTask({ a: 42, b: 100 }, (err, result) => {
    console.log(i, err, result);
    if (++finished === 10)
      pool.close();
  });
}
```

----------------------------------------

TITLE: Iterating Stream Data with forEach() Method in Node.js
DESCRIPTION: Shows how to use the Readable.forEach() method to process each item in a stream. The example demonstrates both synchronous iteration and asynchronous operations with DNS resolution, including concurrency control.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_45

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { Resolver } from 'node:dns/promises';

// With a synchronous predicate.
for await (const chunk of Readable.from([1, 2, 3, 4]).filter((x) => x > 2)) {
  console.log(chunk); // 3, 4
}
// With an asynchronous predicate, making at most 2 queries at a time.
const resolver = new Resolver();
const dnsResults = Readable.from([
  'nodejs.org',
  'openjsf.org',
  'www.linuxfoundation.org',
]).map(async (domain) => {
  const { address } = await resolver.resolve4(domain, { ttl: true });
  return address;
}, { concurrency: 2 });
await dnsResults.forEach((result) => {
  // Logs result, similar to `for await (const result of dnsResults)`
  console.log(result);
});
console.log('done'); // Stream has finished
```

----------------------------------------

TITLE: Creating HTTP/2 Frames for Testing in Node.js
DESCRIPTION: This snippet demonstrates how to use the http2 module to create mock HTTP/2 frames for testing. It shows the creation of a generic Frame, a HeadersFrame, and a SettingsFrame, as well as how to write these frames to a socket.
SOURCE: https://github.com/nodejs/node/blob/main/test/common/README.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const http2 = require('../common/http2');

// Generic Frame
const frame = new http2.Frame(length, type, flags, id);
socket.write(frame.data);

// HeadersFrame
const headersFrame = new http2.HeadersFrame(id, payload, padlen, final);
socket.write(headersFrame.data);

// SettingsFrame
const settingsFrame = new http2.SettingsFrame(ack);
socket.write(settingsFrame.data);

// Using kFakeRequestHeaders
const requestFrame = new http2.HeadersFrame(1, http2.kFakeRequestHeaders, 0, true);
socket.write(requestFrame.data);

// Using kFakeResponseHeaders
const responseFrame = new http2.HeadersFrame(1, http2.kFakeResponseHeaders, 0, true);
socket.write(responseFrame.data);

// Using kClientMagic
socket.write(http2.kClientMagic);
```

----------------------------------------

TITLE: Handling Nested cork() Calls on a Writable Stream in Node.js (js)
DESCRIPTION: Shows that if `writable.cork()` is called multiple times on a stream, an equal number of `writable.uncork()` calls are required to flush the buffered data. Data is only flushed after the final corresponding `uncork()` call. This example uses `process.nextTick()` to defer the uncorking calls. Requires access to the `process` global.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_24

LANGUAGE: js
CODE:
```
stream.cork();
stream.write('some ');
stream.cork();
stream.write('data ');
process.nextTick(() => {
  stream.uncork();
  // The data will not be flushed until uncork() is called a second time.
  stream.uncork();
});
```

----------------------------------------

TITLE: Testing Invalid Skip List (Not Sorted) for Step Into
DESCRIPTION: This tests error handling for `stepInto` when the skip list ranges are provided out of order (range starting at 50 before range starting at 48). Debuggers typically require sorted lists. The rejection is indicated by the error 'Input positions array is not sorted or contains duplicate values.'
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-stepping-with-skiplist-expected.txt#2025-04-23_snippet_18

LANGUAGE: json
CODE:
```
[{"scriptId":"4","start":{"lineNumber":0,"columnNumber":50},"end":{"lineNumber":0,"columnNumber":62}},{"scriptId":"4","start":{"lineNumber":0,"columnNumber":48},"end":{"lineNumber":0,"columnNumber":62}}]
```

----------------------------------------

TITLE: Transform Function for Removing Universal Selectors in JavaScript
DESCRIPTION: This snippet defines a transform function to remove universal (*) selectors from a parsed selector AST and applies it to the processor. It demonstrates passing a transformation callback to parser(), which modifies the AST before processing output. It then shows using processor.processSync on a selector string, with the output reflecting the removal of universal selectors. Requires postcss-selector-parser and an understanding of AST node traversal.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const transform = selectors => {
    selectors.walkUniversals(selector => {
        selector.remove();
    });
};

const processor = parser(transform)

// Example
const result = processor.processSync('*.class');
// => .class
```

----------------------------------------

TITLE: Verifying Output of a GYP-Built Executable (Python)
DESCRIPTION: Demonstrates using the `stdout` and `stderr` keyword arguments with `run_built_executable`. `stdout` specifies the expected standard output, and `stderr` specifies the expected standard error. The test fails if the actual output doesn't match. Setting a value to `None` disables the check for that stream (default for stdout). `stderr` defaults to `''` (expecting empty error output).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/Testing.md#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
  test.run_built_executable('program',
                            stdout="expect this output\n",
							stderr=None)
```

----------------------------------------

TITLE: Running Node.js C++ Unit Tests Directly with Filter in Bash
DESCRIPTION: Shows how to run the compiled C++ test executable (`cctest`) directly from the output directory (e.g., `out/Release/`). This method allows passing Google Test command-line flags like `--gtest_filter` directly to the executable, providing fine-grained control over test execution and facilitating debugging (e.g., running all tests within the `EnvironmentTest` suite using `EnvironmentTest.AtExit*`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-tests.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
out/Release/cctest --gtest_filter=EnvironmentTest.AtExit\*
```

----------------------------------------

TITLE: Running a Simple Test Function in Node.js - JavaScript
DESCRIPTION: Defines an empty JavaScript function named 'foo' and immediately invokes it to test execution flow, helpful for regression testing scenarios such as those referenced by browser bug reports. No external dependencies are required other than a standard Node.js JavaScript runtime. There are no inputs or outputs, and the main purpose is to verify that function creation and invocation work as expected, making it suitable for automated or regression tests.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/regress/regress-crbug-1253277-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
function foo(){}\nfoo()
```

----------------------------------------

TITLE: Linking with OpenSSL Libraries in Custom Locations - Shell
DESCRIPTION: This code snippet demonstrates the basic linker flags for an application that links against OpenSSL shared libraries located in custom directories. It uses the -L flag to specify the location of libraries and -l flags to indicate which libraries to link. Required dependencies are the OpenSSL libraries present in the provided custom path, and the application build should be run in an environment where these flags are recognized by the compiler.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/NOTES-UNIX.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
-L/whatever/path -lssl -lcrypto
```

----------------------------------------

TITLE: Creating JavaScript Symbol in Node-API (C)
DESCRIPTION: Creates a JavaScript Symbol value with an optional description. Takes the environment, an optional description string as napi_value, and returns a napi_value representing the created symbol.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_84

LANGUAGE: c
CODE:
```
napi_status napi_create_symbol(napi_env env,
                               napi_value description,
                               napi_value* result)
```

----------------------------------------

TITLE: Node.js Module Wrapper Example - JavaScript
DESCRIPTION: This snippet illustrates how Node.js internally wraps each module in a function that provides local scoping and injects special variables like exports, require, module, __filename, and __dirname. This wrapping allows top-level variables to remain module-scoped and provides access to module-related data. The wrapper is not visible to user code, but all modules are evaluated inside this function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_17

LANGUAGE: JavaScript
CODE:
```
(function(exports, require, module, __filename, __dirname) {
// Module code actually lives in here
});
```

----------------------------------------

TITLE: Making HTTP POST Request with Node.js (CommonJS)
DESCRIPTION: Example of creating an HTTP POST request to upload JSON data using CommonJS modules. The code demonstrates setting up request options, handling the response with event listeners, and writing data to the request body.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_60

LANGUAGE: javascript
CODE:
```
const http = require('node:http');

const postData = JSON.stringify({
  'msg': 'Hello World!',
});

const options = {
  hostname: 'www.google.com',
  port: 80,
  path: '/upload',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData),
  },
};

const req = http.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
  res.setEncoding('utf8');
  res.on('data', (chunk) => {
    console.log(`BODY: ${chunk}`);
  });
  res.on('end', () => {
    console.log('No more data in response.');
  });
});

req.on('error', (e) => {
  console.error(`problem with request: ${e.message}`);
});

// Write data to request body
req.write(postData);
req.end();
```

----------------------------------------

TITLE: Calculating SHA256 Checksum for a Downloaded Archive
DESCRIPTION: This shell command uses `curl` to download the specified Abseil archive ZIP file from GitHub and pipes the content directly to `sha256sum` to compute its SHA256 hash. The output hash is used in the `sha256` attribute of Bazel's `http_archive` rule to verify the integrity of the downloaded dependency.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/FAQ.md#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
curl -sL --output - https://github.com/abseil/abseil-cpp/archive/98eb410c93ad059f9bba1bf43f5bb916fc92a5ea.zip | sha256sum -
```

----------------------------------------

TITLE: Displaying V8 Output for x64,ignition_turbo Configuration
DESCRIPTION: This section shows the output generated when running the test source file ('name/to/file.js') using the V8 engine configured with the 'x64,ignition_turbo' flags. The output is similar to the 'x64,ignition' configuration but includes an additional line 'bad behavior', which represents the difference detected by the correctness fuzzer when comparing against the baseline 'x64,ignition' output.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/tools/clusterfuzz/foozzie/testdata/failure_output_arch.txt#2025-04-23_snippet_3

LANGUAGE: text
CODE:
```
1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird error
        ^
3
unknown

bad behavior
```

----------------------------------------

TITLE: Defining Test Function Using Math.sqrt and Array Access in JavaScript
DESCRIPTION: Defines a JavaScript function `foo` that takes an array `a` and an index `i`. It calculates the square root of the element at `a[i]` using `Math.sqrt` and returns the result. This function serves as the core logic being tested for DFG optimization behavior, particularly concerning potential side effects or type inferences related to array access combined with mathematical operations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-proven-sqrt-backwards-propagation-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
function foo(a, i) {
    return Math.sqrt(a[i]);
}
```

----------------------------------------

TITLE: Removing Certificates from Debian/Ubuntu CA Store - Bash
DESCRIPTION: Deletes the root and intermediate CA certificates from the Debian/Ubuntu system CA store and updates the CA database. Requires sudo access. Input: Absolute paths to the certificate files. Output: Certificates are removed from the trusted CA list. Limitation: Debian/Ubuntu-specific locations and commands; does not apply to other Unix-like systems without modification.
SOURCE: https://github.com/nodejs/node/blob/main/test/system-ca/README.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
sudo rm /usr/local/share/ca-certificates/fake-startcom-root-cert.crt \
  /usr/local/share/ca-certificates/intermediate-ca.crt \
  /usr/local/share/ca-certificates/non-trusted-intermediate-ca.crt
sudo update-ca-certificates --fresh
```

----------------------------------------

TITLE: Defining Classic N-API Finalizer Callback Signature - N-API - C
DESCRIPTION: Provides a function pointer typedef for classic N-API finalizers, used to schedule cleanup operations after garbage collection. This is typically combined with node_api_post_finalizer in newer APIs. The function receives an environment, finalization data, and a customizable hint. Should only be used for actual finalization if NAPI_EXPERIMENTAL_BASIC_ENV_OPT_OUT is defined; otherwise, use node_api_basic_finalize.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_24

LANGUAGE: c
CODE:
```
typedef void (*napi_finalize)(napi_env env,\n                              void* finalize_data,\n                              void* finalize_hint);
```

----------------------------------------

TITLE: Globbing Source Files and Defining the Static Library in CMake
DESCRIPTION: Uses `file(GLOB ...)` to find all `.c` and `.h` files within the `src/ittnotify` directory and stores them in the `ITT_SRCS` variable. Then, it defines a static library target named `ittnotify` using the collected C/H sources (`ITT_SRCS`), the public headers (`ITT_PUBLIC_HDRS`), and the potentially defined assembly source file (`ITT_PT`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/ittapi/CMakeLists.txt#2025-04-23_snippet_7

LANGUAGE: cmake
CODE:
```
file(GLOB ITT_SRCS "src/ittnotify/*.c" "src/ittnotify/*.h")

add_library(ittnotify STATIC ${ITT_SRCS} ${ITT_PUBLIC_HDRS} ${ITT_PT})
```

----------------------------------------

TITLE: Handling the 'newListener' Event in EventEmitter (MJS/CJS)
DESCRIPTION: Demonstrates the behavior of the `'newListener'` event. This event fires *before* a new listener is added. The example shows how adding another listener for the same event *within* the `'newListener'` callback results in the newly added listener being executed *before* the listener that triggered the event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_20

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}

const myEmitter = new MyEmitter();
// Only do this once so we don't loop forever
myEmitter.once('newListener', (event, listener) => {
  if (event === 'event') {
    // Insert a new listener in front
    myEmitter.on('event', () => {
      console.log('B');
    });
  }
});
myEmitter.on('event', () => {
  console.log('A');
});
myEmitter.emit('event');
// Prints:
//   B
//   A
```

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}

const myEmitter = new MyEmitter();
// Only do this once so we don't loop forever
myEmitter.once('newListener', (event, listener) => {
  if (event === 'event') {
    // Insert a new listener in front
    myEmitter.on('event', () => {
      console.log('B');
    });
  }
});
myEmitter.on('event', () => {
  console.log('A');
});
myEmitter.emit('event');
// Prints:
//   B
//   A
```

----------------------------------------

TITLE: Checking If a Module is Builtin with isBuiltin in ESM Context - JavaScript
DESCRIPTION: This snippet uses the isBuiltin function from node:module in an ECMAScript module to determine if a module name refers to a Node.js builtin module. It accepts a string argument (moduleName) and returns a boolean indicating the result. No dependencies beyond node:module itself; Node.js 16.17.0+/18.6.0+ is required. Works only in ESM-enabled code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { isBuiltin } from 'node:module';\nisBuiltin('node:fs'); // true\nisBuiltin('fs'); // true\nisBuiltin('wss'); // false
```

----------------------------------------

TITLE: Benchmarking Glob Implementations in Node.js
DESCRIPTION: This code snippet shows the execution times and result counts for different glob implementations in Node.js. It compares sync and async operations using various patterns and methods.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/glob/README.md#2025-04-23_snippet_14

LANGUAGE: plaintext
CODE:
```
node current glob syncStream    0m0.659s  200023
~~ async ~~
node fast-glob async            0m0.357s  200023
node globby async               0m0.513s  200023
node current glob async mjs     0m0.471s  200023
node current glob stream        0m0.424s  200023

--- pattern: '**/*/**/*.txt' ---
~~ sync ~~
node fast-glob sync             0m0.585s  200023
node globby sync                0m0.766s  200023
node current globSync mjs       0m0.694s  200023
node current glob syncStream    0m0.664s  200023
~~ async ~~
node fast-glob async            0m0.350s  200023
node globby async               0m0.514s  200023
node current glob async mjs     0m0.472s  200023
node current glob stream        0m0.424s  200023

--- pattern: '**/[0-9]/**/*.txt' ---
~~ sync ~~
node fast-glob sync             0m0.544s  100000
node globby sync                0m0.636s  100000
node current globSync mjs       0m0.626s  100000
node current glob syncStream    0m0.621s  100000
~~ async ~~
node fast-glob async            0m0.322s  100000
node globby async               0m0.404s  100000
node current glob async mjs     0m0.360s  100000
node current glob stream        0m0.352s  100000
```

----------------------------------------

TITLE: Creating or Retrieving Global Symbol in Node-API (C)
DESCRIPTION: Searches for an existing symbol in the global registry or creates a new one if not found. Takes environment, UTF-8 description string, length, and returns a napi_value representing the symbol.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_85

LANGUAGE: c
CODE:
```
napi_status node_api_symbol_for(napi_env env,
                                const char* utf8description,
                                size_t length,
                                napi_value* result)
```

----------------------------------------

TITLE: Illustrative Error Name Formatting with Code
DESCRIPTION: This text snippet illustrates the format used for the `name` property of JavaScript Error objects when an error code is provided using N-API `throw_` or `create_` functions. The format concatenates the original error name (e.g., 'TypeError') with the provided code enclosed in square brackets.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_32

LANGUAGE: text
CODE:
```
originalName [code]
```

----------------------------------------

TITLE: Example of StatFs Object Output in Node.js
DESCRIPTION: Demonstrates the output format of a StatFs object returned by fs.statfs() showing file system information such as block sizes, total blocks, and free blocks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_106

LANGUAGE: javascript
CODE:
```
StatFs {
  type: 1397114950,
  bsize: 4096,
  blocks: 121938943,
  bfree: 61058895,
  bavail: 61058895,
  files: 999,
  ffree: 1000000
}
```

----------------------------------------

TITLE: Formatting Text with util.styleText in Node.js (JavaScript)
DESCRIPTION: This snippet demonstrates the usage of the new util.styleText() function introduced in Node.js 21.7.0. The function styles text according to a specified color or formatting option, leveraging util.inspect.colors. To use this, Node.js v21.7.0 or later must be installed. The 'format' parameter accepts styles such as 'red', and the second parameter is the text to be formatted. The example formats the string 'Error! Error!' in red, suitable for styled console output.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
```cjs\nconst { styleText } = require('node:util');\nconst errorMessage = styleText('red', 'Error! Error!');\nconsole.log(errorMessage);\n```
```

----------------------------------------

TITLE: Asserting No Pending Interceptors
DESCRIPTION: Shows how to use assertNoPendingInterceptors() to verify that all registered interceptors have been consumed, which is useful for ensuring test completeness and correctness.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
const agent = new MockAgent()
agent.disableNetConnect()

agent
  .get('https://example.com')
  .intercept({ method: 'GET', path: '/' })
  .reply(200)

agent.assertNoPendingInterceptors()
// Throws an UndiciError with the following message:
//
// 1 interceptor is pending:
//
// ┌─────────┬────────┬───────────────────────┬──────┬─────────────┬────────────┬─────────────┬───────────┐
// │ (index) │ Method │        Origin         │ Path │ Status code │ Persistent │ Invocations │ Remaining │
// ├─────────┼────────┼───────────────────────┼──────┼─────────────┼────────────┼─────────────┼───────────┤
// │    0    │ 'GET'  │ 'https://example.com' │ '/'  │     200     │    '❌'    │      0      │     1     │
// └─────────┴────────┴───────────────────────┴──────┴─────────────┴────────────┴─────────────┴───────────┘
```

----------------------------------------

TITLE: Debug Logging in Async Hooks - CommonJS
DESCRIPTION: Example of implementing safe debug logging within async hooks using synchronous file operations in CommonJS format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_7

LANGUAGE: cjs
CODE:
```
const fs = require('node:fs');
const util = require('node:util');

function debug(...args) {
  // Use a function like this one when debugging inside an AsyncHook callback
  fs.writeFileSync('log.out', `${util.format(...args)}\n`, { flag: 'a' });
}
```

----------------------------------------

TITLE: Stopping a signal handler in libuv
DESCRIPTION: Stops the signal handle, preventing the callback from being called when the signal is received. This does not close the handle, only disables its signal handling functionality.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/signal.rst#2025-04-23_snippet_3

LANGUAGE: c
CODE:
```
int uv_signal_stop(uv_signal_t* signal)
```

----------------------------------------

TITLE: Defining Read-Only Properties in REPL Context (ECMAScript Module) in JavaScript
DESCRIPTION: Sets a string variable 'msg' and starts a REPL session, then makes the context property 'm' read-only by using Object.defineProperty(). Dependencies: Node.js with ESM support and use of 'node:repl'. The property is non-configurable which prevents reassignment or deletion in the REPL, ensuring a read-only REPL global. Input includes the prompt ('> '); output is an environment where 'm' is immutable.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import repl from 'node:repl';
const msg = 'message';

const r = repl.start('> ');
Object.defineProperty(r.context, 'm', {
  configurable: false,
  enumerable: true,
  value: msg,
});
```

----------------------------------------

TITLE: Stripping TypeScript Types with Source URL using ES Modules
DESCRIPTION: Illustrates using `stripTypeScriptTypes` in an ES Module with the `mode: 'strip'` and `sourceUrl` options. The `sourceUrl` is appended as a `//# sourceURL=` comment to the output string, useful for debugging tools.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_8

LANGUAGE: mjs
CODE:
```
import { stripTypeScriptTypes } from 'node:module';
const code = 'const a: number = 1;';
const strippedCode = stripTypeScriptTypes(code, { mode: 'strip', sourceUrl: 'source.ts' });
console.log(strippedCode);
// Prints: const a         = 1\n\n//# sourceURL=source.ts;
```

----------------------------------------

TITLE: Stack Trace: rejectAfterDelayInPromiseConstructor handled by catchInAsyncGenerator (Predicted Caught)
DESCRIPTION: Stack trace from `catch-prediction.js` showing a delayed rejection from `rejectAfterDelayInPromiseConstructor` being caught within an async generator function (`catchInAsyncGenerator`). The debugger paused on the caught rejection, and the outcome was correctly predicted as caught.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-promise-catch-prediction-expected.txt#2025-04-23_snippet_36

LANGUAGE: text
CODE:
```
(anonymous) (catch-prediction.js:10:56)
-- setTimeout --
(anonymous) (catch-prediction.js:10:39)
rejectAfterDelayInPromiseConstructor (catch-prediction.js:10:9)
gen (catch-prediction.js:391:12)
catchInAsyncGenerator (catch-prediction.js:396:18)
runWithResolution (catch-prediction.js:427:22)
-- setTimeout --
(anonymous) (catch-prediction.js:438:31)
testWrapper (catch-prediction.js:438:8)
(anonymous) (test_framework.js:0:0)
```

----------------------------------------

TITLE: Setting Timeout on ClientHttp2Stream - Node.js
DESCRIPTION: Illustrates how to use the `setTimeout` method on a `ClientHttp2Stream` instance to set a timeout. If no activity occurs within the specified milliseconds, the callback function is executed, typically used here to close the stream with a cancel code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_17

LANGUAGE: mjs
CODE:
```
import { connect, constants } from 'node:http2';
const client = connect('http://example.org:8000');
const { NGHTTP2_CANCEL } = constants;
const req = client.request({ ':path': '/' });

// Cancel the stream if there's no activity after 5 seconds
req.setTimeout(5000, () => req.close(NGHTTP2_CANCEL));
```

LANGUAGE: cjs
CODE:
```
const http2 = require('node:http2');
const client = http2.connect('http://example.org:8000');
const { NGHTTP2_CANCEL } = http2.constants;
const req = client.request({ ':path': '/' });

// Cancel the stream if there's no activity after 5 seconds
req.setTimeout(5000, () => req.close(NGHTTP2_CANCEL));
```

----------------------------------------

TITLE: Comparing isNativeError and instanceof for errors from different realms (CommonJS)
DESCRIPTION: CommonJS version of the comparison between util.types.isNativeError() and instanceof for errors from different realms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_86

LANGUAGE: javascript
CODE:
```
const { createContext, runInContext } = require('node:vm');
const { types } = require('node:util');

const context = createContext({});
const myError = runInContext('new Error()', context);
console.log(types.isNativeError(myError)); // true
console.log(myError instanceof Error); // false
```

----------------------------------------

TITLE: Resolving Hostnames with dns.lookup() in Node.js
DESCRIPTION: Demonstrates how to use dns.lookup() to resolve a hostname into IPv4 or IPv6 addresses. The example shows both ES module and CommonJS usage, with options for specifying address family and retrieving multiple addresses.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
import dns from 'node:dns';
const options = {
  family: 6,
  hints: dns.ADDRCONFIG | dns.V4MAPPED,
};
dns.lookup('example.org', options, (err, address, family) =>
  console.log('address: %j family: IPv%s', address, family));
// address: "2606:2800:21f:cb07:6820:80da:af6b:8b2c" family: IPv6

// When options.all is true, the result will be an Array.
options.all = true;
dns.lookup('example.org', options, (err, addresses) =>
  console.log('addresses: %j', addresses));
// addresses: [{"address":"2606:2800:21f:cb07:6820:80da:af6b:8b2c","family":6}]
```

LANGUAGE: JavaScript
CODE:
```
const dns = require('node:dns');
const options = {
  family: 6,
  hints: dns.ADDRCONFIG | dns.V4MAPPED,
};
dns.lookup('example.org', options, (err, address, family) =>
  console.log('address: %j family: IPv%s', address, family));
// address: "2606:2800:21f:cb07:6820:80da:af6b:8b2c" family: IPv6

// When options.all is true, the result will be an Array.
options.all = true;
dns.lookup('example.org', options, (err, addresses) =>
  console.log('addresses: %j', addresses));
// addresses: [{"address":"2606:2800:21f:cb07:6820:80da:af6b:8b2c","family":6}]
```

----------------------------------------

TITLE: Using Acorn CLI to Parse JavaScript Files
DESCRIPTION: The 'bin/acorn' utility parses JavaScript files from the command line. It accepts various options to control ECMAScript version, parsing mode, location information, and other features. The parsed syntax tree is output as JSON data.
SOURCE: https://github.com/nodejs/node/blob/main/deps/acorn/acorn/README.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
bin/acorn [options] input_file
```

----------------------------------------

TITLE: Finding Original Source Location with `sourceMap.findOrigin` in Node.js
DESCRIPTION: Describes the `sourceMap.findOrigin` method which takes a 1-indexed line and column number from generated source code and returns an object containing the corresponding location (file name, line number, column number, and optional name) in the original source file based on the associated source map. If no mapping is found, an empty object is returned. Requires Node.js v20.4.0+ or v18.18.0+.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_49

LANGUAGE: javascript
CODE:
```
sourceMap.findOrigin(lineNumber, columnNumber)
```

----------------------------------------

TITLE: Defining Endian C++ Library and Test in CMake
DESCRIPTION: Defines the 'endian' C++ library target that handles endianness operations with its dependencies and corresponding unit test. This is marked as an internal-only target that should not be directly depended upon.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/base/CMakeLists.txt#2025-04-23_snippet_5

LANGUAGE: CMake
CODE:
```
# Internal-only target, do not depend on directly.
absl_cc_library(
  NAME
    endian
  HDRS
    "internal/endian.h"
    "internal/unaligned_access.h"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::base
    absl::config
    absl::core_headers
    absl::nullability
  PUBLIC
)

absl_cc_test(
  NAME
    endian_test
  SRCS
    "internal/endian_test.cc"
  COPTS
    ${ABSL_TEST_COPTS}
  DEPS
    absl::base
    absl::config
    absl::endian
    GTest::gtest_main
)
```

----------------------------------------

TITLE: Handling 'information' Event with Node.js HTTP (ESM) - JavaScript
DESCRIPTION: Demonstrates how to listen for the 'information' event on a Node.js HTTP ClientRequest using ES module syntax. When the server sends a 1xx intermediate response, the corresponding callback is triggered with an info object containing HTTP version, status code, headers, and more. Requires Node.js 'node:http' module and a running HTTP server. Inputs are request options; the output is logging of intermediate status codes prior to the main response.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_7

LANGUAGE: mjs
CODE:
```
import { request } from 'node:http';

const options = {
  host: '127.0.0.1',
  port: 8080,
  path: '/length_request',
};

// Make a request
const req = request(options);
req.end();

req.on('information', (info) => {
  console.log(`Got information prior to main response: ${info.statusCode}`);
});

```

----------------------------------------

TITLE: JavaScript Constructor Example
DESCRIPTION: Example JavaScript code showing object construction that will be replicated using Node-API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_174

LANGUAGE: js
CODE:
```
function MyObject(param) {
  this.param = param;
}

const arg = 'hello';
const value = new MyObject(arg);
```

----------------------------------------

TITLE: Testing WebAssembly.Memory APIs - Node.js JavaScript
DESCRIPTION: Assesses creation and buffer access for WebAssembly.Memory to ensure memory objects are initialized correctly and their buffer properties can be accessed without causing side effects. Requires a valid configuration object specifying at least the 'initial' memory size. Inputs are memory configuration objects, and expected outputs are Memory instances with accessible ArrayBuffer buffers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-side-effect-free-debug-evaluate-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
// Running test: testWebAssemblyMemory
someGlobalMemory.buffer; // ok
new WebAssembly.Memory({initial: 1}); // ok
new WebAssembly.Memory({initial: 1}).buffer; // ok
```

----------------------------------------

TITLE: Running Commands in Workspaces with npm exec in Bash
DESCRIPTION: Shows how to execute a command in the context of project workspaces using the --ws flag to run across all workspaces.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm exec --ws -- eslint ./*.js
```

----------------------------------------

TITLE: Dumping OpenSSL Build Configuration using Perl/Bash
DESCRIPTION: Executes the `configdata.pm` Perl script, typically located within the OpenSSL source directory, using the `perl` interpreter with the `--dump` flag. This command outputs the configuration settings that were used when the OpenSSL library was compiled. Providing this data is necessary when reporting bugs, as it helps identify potential issues related to specific build configurations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/SUPPORT.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
perl configdata.pm --dump
```

----------------------------------------

TITLE: DNS Lookup with Options in ES Modules
DESCRIPTION: Demonstrates using the DNS lookup function with different option configurations in ES Modules format. Shows examples of IPv6 lookups with various hint flags and using the 'all' option to retrieve multiple addresses.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_17

LANGUAGE: mjs
CODE:
```
import dns from 'node:dns';
const dnsPromises = dns.promises;
const options = {
  family: 6,
  hints: dns.ADDRCONFIG | dns.V4MAPPED,
};

await dnsPromises.lookup('example.org', options).then((result) => {
  console.log('address: %j family: IPv%s', result.address, result.family);
  // address: "2606:2800:21f:cb07:6820:80da:af6b:8b2c" family: IPv6
});

// When options.all is true, the result will be an Array.
options.all = true;
await dnsPromises.lookup('example.org', options).then((result) => {
  console.log('addresses: %j', result);
  // addresses: [{"address":"2606:2800:21f:cb07:6820:80da:af6b:8b2c","family":6}]
});
```

----------------------------------------

TITLE: Creating a ReadableStream from an Async Iterable (MJS)
DESCRIPTION: This snippet demonstrates the utility method `ReadableStream.from()` to create a `ReadableStream` directly from an asynchronous iterable, such as an async generator function. It then consumes the created stream using `for await...of` to log each yielded chunk. This example uses ES Module (`import`) syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_9

LANGUAGE: mjs
CODE:
```
```mjs
import { ReadableStream } from 'node:stream/web';

async function* asyncIterableGenerator() {
  yield 'a';
  yield 'b';
  yield 'c';
}

const stream = ReadableStream.from(asyncIterableGenerator());

for await (const chunk of stream)
  console.log(chunk); // Prints: 'a', 'b', 'c'
```
```

----------------------------------------

TITLE: Retrieving Raw Listeners in Node.js EventEmitter (ES Modules)
DESCRIPTION: Demonstrates the use of emitter.rawListeners() method to get unprocessed listeners for an event, including once() wrappers. Shows how to access and execute the original listener function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_30

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter } from 'node:events';
const emitter = new EventEmitter();
emitter.once('log', () => console.log('log once'));

// Returns a new Array with a function `onceWrapper` which has a property
// `listener` which contains the original listener bound above
const listeners = emitter.rawListeners('log');
const logFnWrapper = listeners[0];

// Logs "log once" to the console and does not unbind the `once` event
logFnWrapper.listener();

// Logs "log once" to the console and removes the listener
logFnWrapper();

emitter.on('log', () => console.log('log persistently'));
// Will return a new Array with a single function bound by `.on()` above
const newListeners = emitter.rawListeners('log');

// Logs "log persistently" twice
newListeners[0]();
emitter.emit('log');
```

----------------------------------------

TITLE: Installing node-gyp via npm - Bash
DESCRIPTION: Demonstrates the command to globally install node-gyp using the npm package manager on any supported platform. Requires Node.js and npm to be installed on the system. The command uses the -g flag for global installation, making node-gyp accessible on the command line. No parameters other than the package name are required, and it expects a working npm installation. Outputs the standard npm install process to console.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install -g node-gyp
```

----------------------------------------

TITLE: Debugging Undici Core Library Output
DESCRIPTION: Demonstrates how to enable debug logging for the core Undici library using NODE_DEBUG=undici flag. Shows sample output including connection attempts, HTTP requests, and responses.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Debug.md#2025-04-23_snippet_0

LANGUAGE: sh
CODE:
```
NODE_DEBUG=undici node script.js

UNDICI 16241: connecting to nodejs.org using https:h1
UNDICI 16241: connecting to nodejs.org using https:h1
UNDICI 16241: connected to nodejs.org using https:h1
UNDICI 16241: sending request to GET https://nodejs.org//
UNDICI 16241: received response to GET https://nodejs.org// - HTTP 307
UNDICI 16241: connecting to nodejs.org using https:h1
UNDICI 16241: trailers received from GET https://nodejs.org//
UNDICI 16241: connected to nodejs.org using https:h1
UNDICI 16241: sending request to GET https://nodejs.org//en
UNDICI 16241: received response to GET https://nodejs.org//en - HTTP 200
UNDICI 16241: trailers received from GET https://nodejs.org//en
```

----------------------------------------

TITLE: Testing Non-Greedy Optional Groups with Undefined Capture in JavaScript RegExp
DESCRIPTION: Shows how the engine handles non-greedy optional groups when some patterns are not matched (e.g., /(a)??(b)??c/ in input "ac"). Demonstrates correct undefined assignment for unmatched groups in JavaScript's match method results. No prerequisites. Input: short string. Output: match array including undefined for missing subpattern.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/regexp-non-greedy-parentheses-expected.txt#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
PASS "ac".match(/(a)??(b)??c/) is ["ac", "a", undefined]
```

----------------------------------------

TITLE: Retrieving All HTTP Response Headers as an Object in Node.js (JavaScript)
DESCRIPTION: Shows how to obtain a shallow copy of the currently set HTTP response headers via getHeaders(). Requires Node.js http.ServerResponse. The returned object has lowercased header names as keys and their values, with arrays for multi-value headers. The returned object is not a plain JS object and standard object prototype methods won't apply.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_33

LANGUAGE: js
CODE:
```
response.setHeader('Foo', 'bar');
response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);

const headers = response.getHeaders();
// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }

```

----------------------------------------

TITLE: Output Preview for Object Properties Test (Runtime.evaluate)
DESCRIPTION: Shows the structured preview output generated by Runtime.evaluate for a standard JavaScript object. It details properties with types like object, function, and accessor, along with their names and values (or placeholders for complex types).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-with-generate-preview-expected.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
{
    description : Object
    overflow : false
    properties : [
        [0] : {
            name : p1
            type : object
            value : Object
        }
        [1] : {
            name : p2
            type : object
            value : Object
        }
        [2] : {
            name : p3
            type : function
            value :
        }
        [3] : {
            name : p4
            type : accessor
        }
        [4] : {
            name : p6
            type : accessor
        }
    ]
    type : object
}
```

----------------------------------------

TITLE: Defining Options for nopt Abbreviation Support in JavaScript
DESCRIPTION: Shows how to define boolean options within the 'knownOpts' object passed to 'nopt'. Defining options with distinct, longer names like 'foolhardyelephants' and 'pileofmonkeys' enables 'nopt's' built-in abbreviation support, allowing users to specify unambiguous prefixes on the command line (e.g., '--foolh', '--pil').
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/nopt/README.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
{ "foolhardyelephants" : Boolean
, "pileofmonkeys" : Boolean }
```

----------------------------------------

TITLE: Destroying a QuicStream in Node.js
DESCRIPTION: Immediately and abruptly destroys a QUIC stream. An optional error can be provided which will be associated with the destruction.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/quic.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
stream.destroy([error])
```

----------------------------------------

TITLE: Defining OpenSSL Error SELF_SIGNED_CERT_IN_CHAIN (Text)
DESCRIPTION: An OpenSSL error indicating that a self-signed certificate was found within the certificate chain, and its issuer is not in the trusted list.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_52

LANGUAGE: text
CODE:
```
SELF_SIGNED_CERT_IN_CHAIN
```

----------------------------------------

TITLE: Getting Platform Information with navigator.platform
DESCRIPTION: Demonstrates how to use the navigator.platform property to get information about the platform on which the Node.js instance is running.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
console.log(`This process is running on ${navigator.platform}`);
```

----------------------------------------

TITLE: Reading Variable-Length UIntBE from Buffer - Node.js
DESCRIPTION: Demonstrates reading a variable-length unsigned, big-endian integer (up to 48 bits) from a Buffer using `readUIntBE`. It shows reading 6 bytes from a buffer created with hex values and converting the output to a hex string. It also includes an out-of-range example based on offset and byteLength.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_69

LANGUAGE: JavaScript (ESM)
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readUIntBE(0, 6).toString(16));
// Prints: 1234567890ab
console.log(buf.readUIntBE(1, 6).toString(16));
// Throws ERR_OUT_OF_RANGE.
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);

console.log(buf.readUIntBE(0, 6).toString(16));
// Prints: 1234567890ab
console.log(buf.readUIntBE(1, 6).toString(16));
// Throws ERR_OUT_OF_RANGE.
```

----------------------------------------

TITLE: Advanced Source Filtering with Pattern Lists in GYP
DESCRIPTION: Example demonstrating pattern-based filtering using the '/' syntax to conditionally include or exclude platform-specific source files based on regular expressions and the OS variable.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/InputFormatReference.md#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
{
  'sources': [
    'io_posix.cc',
    'io_win.cc',
    'launcher_mac.cc',
    'main.cc',
    'platform_util_linux.cc',
    'platform_util_mac.mm',
  ],
  'sources/': [
    ['exclude', '_win\\.cc$'],
  ],
  'conditions': [
    ['OS!="linux"', {'sources/': [['exclude', '_linux\\.cc$']]}],
    ['OS!="mac"', {'sources/': [['exclude', '_mac\\.cc|mm?$']]}],
    ['OS=="win"', {'sources/': [
      ['include', '_win\\.cc$'],
      ['exclude', '_posix\\.cc$'],
    ]}],
  ],
}
```

----------------------------------------

TITLE: Configuring Test Target Properties
DESCRIPTION: Configures the test executable target with specific compiler flags, include directories, and output settings. Sets up build properties for x86_64 architecture with debug information and optimization flags.
SOURCE: https://github.com/nodejs/node/blob/main/tools/gyp/test/fixtures/expected-darwin/cmake/CMakeLists.txt#2025-04-23_snippet_1

LANGUAGE: cmake
CODE:
```
set(TARGET "test")
set(TOOLSET "target")
set(test__cxx_srcs "../../test.cc")
link_directories( ../../mylib
)
add_executable(test ${test__cxx_srcs})
set_target_properties(test PROPERTIES EXCLUDE_FROM_ALL "FALSE")
set_target_properties(test PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${builddir}")
set_target_properties(test PROPERTIES PREFIX "")
set_target_properties(test PROPERTIES RUNTIME_OUTPUT_NAME "test")
set_target_properties(test PROPERTIES SUFFIX "")
set_source_files_properties(${builddir}/test PROPERTIES GENERATED "TRUE")
set(test__include_dirs "${CMAKE_CURRENT_LIST_DIR}/../../include")
set_property(TARGET test APPEND PROPERTY INCLUDE_DIRECTORIES ${test__include_dirs})
set_target_properties(test PROPERTIES COMPILE_FLAGS "-fasm-blocks -mpascal-strings -Os -gdwarf-2 -arch x86_64 ")
unset(TOOLSET)
unset(TARGET)
```

----------------------------------------

TITLE: Demonstrating Mandatory Command Choice - Shell
DESCRIPTION: This illustrative snippet depicts how mandatory choices are expressed in command examples using curly braces and pipe separators. Each line begins with a shell prompt, showing that one of several options (WORD1, WORD2, or WORD3) must be selected for execution. This is a documentation convention, not an actual command sequence.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/INSTALL.md#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
$ echo { WORD1 | WORD2 | WORD3 }
```

----------------------------------------

TITLE: Verifying Runtime.evaluate with awaitPromise: Exception During Evaluation (JSON)
DESCRIPTION: This snippet shows the result when an exception (throwing the number 239) occurs *during* the initial evaluation phase of `Runtime.evaluate`, before any promise handling. It includes `exceptionDetails` for the uncaught exception.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-async-expected.txt#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        exceptionDetails : {
            columnNumber : 0
            exception : {
                description : 239
                type : number
                value : 239
            }
            exceptionId : <exceptionId>
            lineNumber : 0
            scriptId : <scriptId>
            text : Uncaught
        }
        result : {
            description : 239
            type : number
            value : 239
        }
    }
}
```

----------------------------------------

TITLE: Defining Abseil C++ Test: check_test using Bazel
DESCRIPTION: Defines a Bazel C++ test target named `check_test` using the `absl_cc_test` rule. This test compiles `check_test.cc` and `check_test_impl.inc` and depends on Abseil check, config, core headers, logging helpers, status, strings, string_view, and Google Mock/Test.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/log/CMakeLists.txt#2025-04-23_snippet_18

LANGUAGE: starlark
CODE:
```
absl_cc_test(
  NAME
    check_test
  SRCS
    "check_test.cc"
    "check_test_impl.inc"
  COPTS
    ${ABSL_TEST_COPTS}
  LINKOPTS
    ${ABSL_DEFAULT_LINKOPTS}
  DEPS
    absl::check
    absl::config
    absl::core_headers
    absl::log_internal_test_helpers
    absl::status
    absl::strings
    absl::string_view
    GTest::gmock_main
)
```

----------------------------------------

TITLE: Testing Function Returning Non-Promise Value - JSON
DESCRIPTION: Shows a test result when the function returns a regular (non-promise) value, such as the number 239. The response includes type, description, and value, validating that non-promise returns are handled and reported directly in the protocol. No exception is expected. Input: function returning a number. Output: JSON result with type and value fields.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/call-function-on-async-expected.txt#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            description : 239
            type : number
            value : 239
        }
    }
}
```

----------------------------------------

TITLE: Example GYP Build Configuration
DESCRIPTION: Sample GYP configuration demonstrating target definitions, compiler settings, conditional logic, and dependency management. Shows structure for defining a static library target with platform-specific source inclusions and dependency propagation.
SOURCE: https://github.com/nodejs/node/blob/main/tools/gyp/docs/LanguageSpecification.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  'target_defaults': {
    'defines': [
      'U_STATIC_IMPLEMENTATION',
      ['LOGFILE', 'foo.log',],
    ],
    'include_dirs': [
      '..',
    ],
  },
  'targets': [
    {
      'target_name': 'foo',
      'type': 'static_library',
      'sources': [
        'foo/src/foo.cc',
        'foo/src/foo_main.cc',
      ],
      'include_dirs': [
         'foo',
         'foo/include',
      ],
      'conditions': [
         [ 'OS==mac', { 'sources': [ 'platform_test_mac.mm' ] } ]
      ],
      'direct_dependent_settings': {
        'defines': [
          'UNIT_TEST',
        ],
        'include_dirs': [
          'foo',
          'foo/include',
        ],
      },
    },
  ],
}
```

----------------------------------------

TITLE: Converting Node.js Buffers & Strings (ESM)
DESCRIPTION: Illustrates encoding strings into Buffer objects using `Buffer.from` and decoding Buffer objects back into strings using `buf.toString` in ES Module syntax, demonstrating conversion with UTF-8, Hexadecimal, Base64, and UTF16-LE encodings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from('hello world', 'utf8');

console.log(buf.toString('hex'));
// Prints: 68656c6c6f20776f726c64
console.log(buf.toString('base64'));
// Prints: aGVsbG8gd29ybGQ=

console.log(Buffer.from('fhqwhgads', 'utf8'));
// Prints: <Buffer 66 68 71 77 68 67 61 64 73>
console.log(Buffer.from('fhqwhgads', 'utf16le'));
// Prints: <Buffer 66 00 68 00 71 00 77 00 68 00 67 00 61 00 64 00 73 00>
```

----------------------------------------

TITLE: Testing Deep Serialization of Map via CDP Runtime Methods in JavaScript
DESCRIPTION: Tests the serialization of a Map object created with `new Map([['keyString1', {valueObject1: 1}], [{keyObject2: 2}, 'valueString2'], ['keyString3', new Array()]])` using `Runtime.evaluate` and `Runtime.callFunctionOn`. Both methods are expected to return a remote object representation with type 'map' and a value containing serialized key-value pairs.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/deep-serialization-value-expected.txt#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
new Map([['keyString1', {valueObject1: 1}], [{keyObject2: 2}, 'valueString2'], ['keyString3', new Array()]])
```

----------------------------------------

TITLE: Amending Commits to Add CLA: trivial (shell)
DESCRIPTION: Provides the shell commands needed to amend a commit to include the missing 'CLA: trivial' line in the commit message for OpenSSL. Requires Git to be installed. The process involves running 'git commit --amend' to modify the commit message, saving changes, and force pushing to the relevant branch/repository to update the pull request.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/CONTRIBUTING.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
    git commit --amend
    # add the line, save and quit the editor
    git push -f [<repository> [<branch>]]
```

----------------------------------------

TITLE: Executing CI Test Scripts on Linux (Shell)
DESCRIPTION: This refers to a pattern matching shell scripts (e.g., `linux_ubuntu_latest.sh`) located in the `ci/` directory. These scripts are designed to run the project's tests under specific Linux environments, often within Docker containers, simulating the continuous integration environment. Running these scripts locally helps ensure contributions pass CI checks. Requires Docker and a Linux environment.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/CONTRIBUTING.md#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
linux_*.sh
```

----------------------------------------

TITLE: Checking HTTPS Support in ESM
DESCRIPTION: This snippet shows how to check for HTTPS support using dynamic import in ECMAScript modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
let https;
try {
  https = await import('node:https');
} catch (err) {
  console.error('https support is disabled!');
}
```

----------------------------------------

TITLE: Creating a channel object in Node.js (CommonJS)
DESCRIPTION: Shows how to create a named channel object using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');

const channel = diagnostics_channel.channel('my-channel');
```

----------------------------------------

TITLE: Synchronous Walk Method in Glob
DESCRIPTION: Returns an array containing all glob results synchronously.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/glob/README.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
g.walkSync()
```

----------------------------------------

TITLE: Using URLSearchParams Class in JavaScript
DESCRIPTION: Demonstrates various operations on URL search parameters including getting, appending, deleting, and setting parameters, as well as converting between URLSearchParams and URL objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_35

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://example.org/?abc=123');
console.log(myURL.searchParams.get('abc'));
// Prints 123

myURL.searchParams.append('abc', 'xyz');
console.log(myURL.href);
// Prints https://example.org/?abc=123&abc=xyz

myURL.searchParams.delete('abc');
myURL.searchParams.set('a', 'b');
console.log(myURL.href);
// Prints https://example.org/?a=b

const newSearchParams = new URLSearchParams(myURL.searchParams);
// The above is equivalent to
// const newSearchParams = new URLSearchParams(myURL.search);

newSearchParams.append('a', 'c');
console.log(myURL.href);
// Prints https://example.org/?a=b
console.log(newSearchParams.toString());
// Prints a=b&a=c

// newSearchParams.toString() is implicitly called
myURL.search = newSearchParams;
console.log(myURL.href);
// Prints https://example.org/?a=b&a=c
newSearchParams.delete('a');
console.log(myURL.href);
// Prints https://example.org/?a=b&a=c
```

----------------------------------------

TITLE: Importing Readline Promise API using CommonJS in Node.js
DESCRIPTION: Shows how to import the promise-based API of the `node:readline` module using the CommonJS `require` function. This is common in older Node.js codebases or projects configured for CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const readline = require('node:readline/promises');
```

----------------------------------------

TITLE: Checking 'this' During Chained Call Invocation (Node.js/JavaScript)
DESCRIPTION: This snippet defines a function `boo` that calls an assumed function `foo` using `foo.call(1)`. It assumes `foo.call(1)` returns another function, which is then immediately invoked `()`. A breakpoint (`#();`) is placed on this final invocation. The surrounding text indicates that at this breakpoint, `this` is expected to be a generic Object, likely the result of `foo.call(1)` or the context established by it.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/this-in-arrow-function-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
function boo() {
  foo.call(1)#();
}
```

----------------------------------------

TITLE: Analyzing Runtime.getProperties for Object with Getter and Setter in Node.js
DESCRIPTION: This snippet shows the structure of Runtime.getProperties output for an object with a 'title' property that has both a getter and a setter. It includes details about configurability, enumerability, and the function characteristics of the accessor methods.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/runtime-get-properties-and-accessor-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
{
    configurable : true
    enumerable : true
    get : {
        className : Function
        description : function () { [native code] }
        objectId : <objectId>
        type : function
    }
    isOwn : true
    name : title
    set : {
        className : Function
        description : function () { [native code] }
        objectId : <objectId>
        type : function
    }
}
```

----------------------------------------

TITLE: Debug Logging in Async Hooks - ESM
DESCRIPTION: Example of implementing safe debug logging within async hooks using synchronous file operations in ESM format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_6

LANGUAGE: mjs
CODE:
```
import { writeFileSync } from 'node:fs';
import { format } from 'node:util';

function debug(...args) {
  // Use a function like this one when debugging inside an AsyncHook callback
  writeFileSync('log.out', `${format(...args)}\n`, { flag: 'a' });
}
```

----------------------------------------

TITLE: Configuring Workspace Root Inclusion with 'include-workspace-root' in npm
DESCRIPTION: Describes the `--include-workspace-root` flag (Boolean, default: false). When running commands across specific (`--workspace`) or all (`--workspaces`) workspaces, this flag determines if the root project itself should also be included in the operation. If false (the default), npm operates only on the specified workspaces, excluding the root. This value is not exported to child process environments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_22

LANGUAGE: text
CODE:
```
#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command.

When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project.

This value is not exported to the environment for child processes.
```

----------------------------------------

TITLE: Testing Math.round() in JavaScript
DESCRIPTION: This snippet tests the Math.round() method with various inputs including NaN, 0, -0, positive and negative numbers, large numbers, and Infinity.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-expected.txt#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
PASS Math.round(NaN) is NaN
PASS Math.round(0) is 0
PASS Math.round(-0) is -0
PASS Math.round(0.4) is 0
PASS Math.round(-0.4) is -0
PASS Math.round(0.5) is 1
PASS Math.round(-0.5) is -0
PASS Math.round(0.6) is 1
PASS Math.round(-0.6) is -1
PASS Math.round(1) is 1
PASS Math.round(-1) is -1
PASS Math.round(1.1) is 1
PASS Math.round(-1.1) is -1
PASS Math.round(1.5) is 2
PASS Math.round(-1.5) is -1
PASS Math.round(1.6) is 2
PASS Math.round(-1.6) is -2
PASS Math.round(8640000000000000) is 8640000000000000
PASS Math.round(8640000000000000.5) is 8640000000000000
PASS Math.round(8640000000000001) is 8640000000000001
PASS Math.round(8640000000000002) is 8640000000000002
PASS Math.round(9007199254740990) is 9007199254740990
PASS Math.round(9007199254740991) is 9007199254740991
PASS Math.round(1.7976931348623157e+308) is 1.7976931348623157e+308
PASS Math.round(-8640000000000000) is -8640000000000000
PASS Math.round(-8640000000000001) is -8640000000000001
PASS Math.round(-8640000000000002) is -8640000000000002
PASS Math.round(-9007199254740990) is -9007199254740990
PASS Math.round(-9007199254740991) is -9007199254740991
PASS Math.round(-1.7976931348623157e+308) is -1.7976931348623157e+308
PASS Math.round(Infinity) is Infinity
PASS Math.round(-Infinity) is -Infinity
```

----------------------------------------

TITLE: Determining If a Node Is at a Given Source Position in JavaScript
DESCRIPTION: Shows how to call node.isAtPosition(line, column) to check if the node covers a specific source position. Returns boolean or undefined if source information is missing. Useful for source mapping in custom tools.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
// usage: node.isAtPosition(line, column)
```

----------------------------------------

TITLE: Setting the busy State on a QuicEndpoint in Node.js JavaScript
DESCRIPTION: This snippet illustrates explicit control of the 'busy' property on a QuicEndpoint instance. Setting 'endpoint.busy = true' temporarily rejects new sessions; setting it false allows them again. The example assumes a valid endpoint object, usually created via the experimental QUIC module. No significant dependencies or outputs beyond state mutation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/quic.md#2025-04-23_snippet_5

LANGUAGE: mjs
CODE:
```
// Mark the endpoint busy. New sessions will be prevented.
endpoint.busy = true;

// Mark the endpoint free. New session will be allowed.
endpoint.busy = false;
```

----------------------------------------

TITLE: Deprecating a Package Version Range
DESCRIPTION: Example of deprecating all versions of a package below a specific version, providing a message about why those versions are deprecated.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-deprecate.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm deprecate my-thing@"< 0.2.3" "critical bug fixed in v0.2.3"
```

----------------------------------------

TITLE: Handling Rejected Promises in callbackify
DESCRIPTION: Shows how callbackify handles rejected promises with null values by wrapping them in Error objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
function fn() {
  return Promise.reject(null);
}
const callbackFunction = util.callbackify(fn);

callbackFunction((err, ret) => {
  // When the Promise was rejected with `null` it is wrapped with an Error and
  // the original value is stored in `reason`.
  err && Object.hasOwn(err, 'reason') && err.reason === null;  // true
});
```

----------------------------------------

TITLE: Demonstrating Child Match Exclusion Pattern in Node.js Glob
DESCRIPTION: Example showing how includeChildMatches option affects glob pattern matching behavior, particularly when dealing with nested matches. Demonstrates potential timing issues with multiple patterns.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/glob/README.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const results = await glob([
  // likely to match first, since it's just a stat
  'a/b/c/d/e/f',

  // this pattern is more complicated! It must to various readdir()
  // calls and test the results against a regular expression, and that
  // is certainly going to take a little bit longer.
  //
  // So, later on, it encounters a match at 'a/b/c/d/e', but it's too
  // late to ignore a/b/c/d/e/f, because it's already been emitted.
  'a/[bdf]/?/[a-z]/*',
],
{ includeChildMatches: false })
```

----------------------------------------

TITLE: Creating JavaScript Strings from Latin1 Encoded Text in C
DESCRIPTION: Function to create JavaScript string values from ISO-8859-1 encoded C strings by copying the input.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_96

LANGUAGE: c
CODE:
```
napi_status napi_create_string_latin1(napi_env env,
                                      const char* str,
                                      size_t length,
                                      napi_value* result);
```

----------------------------------------

TITLE: Including Non-ABI Stable Libuv Header in C++
DESCRIPTION: Shows the `#include` directive for the libuv header (`uv.h`). Libuv APIs, included with Node.js, do not guarantee ABI stability across Node.js major versions, and direct usage can break compatibility for native addons aiming for stability.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_3

LANGUAGE: cpp
CODE:
```
#include <uv.h>
```

----------------------------------------

TITLE: Running Node.js Test Suite - PowerShell
DESCRIPTION: Runs the Node.js test suite after building using the build script and 'test' argument. Ensures that the Node.js build passes all core functionality tests. Must be executed within the Node.js source directory. Outputs test results and diagnostics to the console/log file.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_29

LANGUAGE: PowerShell
CODE:
```
.\vcbuild test
```

----------------------------------------

TITLE: Demonstrating Git URL References in Markdown
DESCRIPTION: This snippet shows various formats for referencing packages from git repositories, including full URLs, shorthands, and GitHub references.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/package-spec.md#2025-04-23_snippet_6

LANGUAGE: markdown
CODE:
```
* `https://github.com/npm/cli.git`
* `git@github.com:npm/cli.git`
* `git+ssh://git@github.com/npm/cli#v6.0.0`
* `github:npm/cli#HEAD`
* `npm/cli#c12ea07`
```

----------------------------------------

TITLE: console.table Output for Object with Object Values (JSON-like)
DESCRIPTION: Illustrates the `console.table` output for an object whose properties ('mother', 'father', 'daughter') are themselves 'Person' objects. Previews show the details of each nested 'Person' object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-table-expected.txt#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
    description : Object
    overflow : false
    properties : [
        [0] : {
            name : mother
            type : object
            value : Person
            valuePreview : {
                description : Person
                overflow : false
                properties : [
                    [0] : {
                        name : firstName
                        type : string
                        value : Jane
                    }
                    [1] : {
                        name : lastName
                        type : string
                        value : Smith
                    }
                ]
                type : object
            }
        }
        [1] : {
            name : father
            type : object
            value : Person
            valuePreview : {
                description : Person
                overflow : false
                properties : [
                    [0] : {
                        name : firstName
                        type : string
                        value : John
                    }
                    [1] : {
                        name : lastName
                        type : string
                        value : Smith
                    }
                ]
                type : object
            }
        }
        [2] : {
            name : daughter
            type : object
            value : Person
            valuePreview : {
                description : Person
                overflow : false
                properties : [
                    [0] : {
                        name : firstName
                        type : string
                        value : Emily
                    }
                    [1] : {
                        name : lastName
                        type : string
                        value : Smith
                    }
                ]
                type : object
            }
        }
    ]
    type : object
}
```

----------------------------------------

TITLE: Cloning the Official OpenSSL GitHub Mirror using Git (Shell)
DESCRIPTION: This shell command clones the public GitHub mirror of the main OpenSSL Git repository. This provides a local copy of the repository with the entire project history, suitable for testing, development, or simply browsing the code base. It requires Git to be installed.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
git clone https://github.com/openssl/openssl.git
```

----------------------------------------

TITLE: Including Node-API Header for Specific Version in C
DESCRIPTION: Demonstrates how to include the `node_api.h` header while explicitly defining `NAPI_VERSION`. This restricts the available API surface to the functions present in the specified version (version 3 in this example) and earlier, ensuring compatibility with older Node.js versions supporting that N-API version.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_9

LANGUAGE: c
CODE:
```
#define NAPI_VERSION 3
#include <node_api.h>
```

----------------------------------------

TITLE: Basic H2CClient Instantiation
DESCRIPTION: Shows how to instantiate an H2CClient without immediately connecting to the origin.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/H2CClient.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
"use strict";
import { H2CClient } from "undici";

const client = new H2CClient("http://localhost:3000");
```

----------------------------------------

TITLE: Running a Single GYP Test Script via Command Line (Bash)
DESCRIPTION: Demonstrates invoking the `gyptest.py` runner script to execute a single, specified test file (`test/hello/gyptest-all.py`). The output shows environment variables being set for the test execution context (like `PYTHONPATH` and `TESTGYP_FORMAT`) and the final test result (`PASSED`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/Testing.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
  $ python gyptest.py test/hello/gyptest-all.py
  PYTHONPATH=/home/knight/src/gyp/trunk/test/lib
  TESTGYP_FORMAT=scons
  /usr/bin/python test/hello/gyptest-all.py
  PASSED
  $
```

----------------------------------------

TITLE: setTime Does Not Trigger Existing Timers - node:test - CJS
DESCRIPTION: This snippet shows that calling `context.mock.timers.setTime()` updates the mocked `Date` object but does not trigger timers previously set with `setTimeout` or `setInterval`. Timers are only triggered by methods like `tick` or `runAll`. Requires `node:test`, `node:assert`, and enabled timer/Date mocking. This example uses CJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_61

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('runAll functions following the given order', (context) => {
  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
  const results = [];
  setTimeout(() => results.push(1), 9999);

  assert.deepStrictEqual(results, []);
  context.mock.timers.setTime(12000);
  assert.deepStrictEqual(results, []);
  // The date is advanced but the timers don't tick
  assert.strictEqual(Date.now(), 12000);
});
```

----------------------------------------

TITLE: Windows Encoded Backslash Handling
DESCRIPTION: Demonstrates error handling for file URLs containing encoded backslashes on Windows systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_118

LANGUAGE: javascript
CODE:
```
import { readFileSync } from 'node:fs';

// On Windows
readFileSync(new URL('file:///C:/path/%5C'));
readFileSync(new URL('file:///C:/path/%5c'));
/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded
\ or / characters */
```

----------------------------------------

TITLE: Checking Valid Release Types in Node-Semver
DESCRIPTION: Demonstrates how to use the RELEASE_TYPES constant to validate user input against supported release types like major, minor, patch, etc.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
const semver = require('semver');

if (semver.RELEASE_TYPES.includes(arbitraryUserInput)) {
  console.log('This is a valid release type!');
} else {
  console.warn('This is NOT a valid release type!');
}
```

----------------------------------------

TITLE: Using Initialize Hook with MessageChannel in Node.js (ESM)
DESCRIPTION: Shows how to use the initialize hook with a MessageChannel for communication between the main thread and the hooks thread in ECMAScript modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_30

LANGUAGE: javascript
CODE:
```
import assert from 'node:assert';
import { register } from 'node:module';
import { MessageChannel } from 'node:worker_threads';

const { port1, port2 } = new MessageChannel();

port1.on('message', (msg) => {
  assert.strictEqual(msg, 'increment: 2');
});
port1.unref();

register('./path-to-my-hooks.js', {
  parentURL: import.meta.url,
  data: { number: 1, port: port2 },
  transferList: [port2],
});
```

----------------------------------------

TITLE: Testing Comparison and Logical Operators in JavaScript
DESCRIPTION: This snippet demonstrates various comparison and logical operations in JavaScript, including less than, less than or equal to, logical AND, and logical OR. It tests these operations with numbers, strings, and combinations thereof.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-less-expected.txt#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
var k = 0; for (; (0<letterA) || 1; ) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
return (0<=letterA) || 1;
```

LANGUAGE: JavaScript
CODE:
```
if ((0<=letterA) || 1) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; while ((0<=letterA) || 1) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; for (; (0<=letterA) || 1; ) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
return (0<letterA) && 1;
```

LANGUAGE: JavaScript
CODE:
```
if ((0<letterA) && 1) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; while ((0<letterA) && 1) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; for (; (0<letterA) && 1; ) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
return ("a"<letterA);
```

LANGUAGE: JavaScript
CODE:
```
if (("a"<letterA)) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; while (("a"<letterA)) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; for (; ("a"<letterA); ) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
return ("a"<=letterA);
```

LANGUAGE: JavaScript
CODE:
```
if (("a"<=letterA)) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; while (("a"<=letterA)) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; for (; ("a"<=letterA); ) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
return (0<"0");
```

LANGUAGE: JavaScript
CODE:
```
if ((0<"0")) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; while ((0<"0")) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; for (; (0<"0"); ) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
return (0<="0");
```

LANGUAGE: JavaScript
CODE:
```
if ((0<="0")) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; while ((0<="0")) if (k++) return true; return false;
```

LANGUAGE: JavaScript
CODE:
```
var k = 0; for (; (0<="0"); ) if (k++) return true; return false;
```

----------------------------------------

TITLE: Directory Reading Behavior Example
DESCRIPTION: Demonstrates platform-specific behavior when attempting to read a directory using fs.readFile.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_70

LANGUAGE: javascript
CODE:
```
import { readFile } from 'node:fs';

// macOS, Linux, and Windows
readFile('<directory>', (err, data) => {
  // => [Error: EISDIR: illegal operation on a directory, read <directory>]
});

//  FreeBSD
readFile('<directory>', (err, data) => {
  // => null, <data>
});
```

----------------------------------------

TITLE: Escaping as CSS Identifier with isIdentifier Option - JavaScript
DESCRIPTION: This code shows how to escape strings for use as CSS identifiers with cssesc(), by setting the 'isIdentifier' option to true. This ensures the output conforms to CSS identifier syntax, escaping characters as needed. Multiple examples illustrate default and identifier mode behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cssesc/README.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
cssesc('123a2b');
// → '123a2b'

cssesc('123a2b', {
  'isIdentifier': true
});
// → '\\31 23a2b'
```

----------------------------------------

TITLE: Evaluating Top-Level Local Variables in Node.js Modules
DESCRIPTION: This snippet declares a top-level local variable 'x' in a Node.js module and sets a debugger breakpoint immediately after. It demonstrates how to inspect and modify variables at the module's top level.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-in-module-expected.txt#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
let x = 5;
debugger;
```

----------------------------------------

TITLE: Setting Breakpoint on Computed Properties in Class
DESCRIPTION: Demonstrates how to set a breakpoint on a computed property inside a class. The breakpoint is placed at the expression that computes the property name.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/set-breakpoint-in-class-initializer-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
function foo() {}
var bar = "bar";

class X {
  constructor() {
    this.x = 1;
  }
  [|_|bar] = 2;
  baz = foo();
}
new X();
```

----------------------------------------

TITLE: Finalization Unregister Example (CommonJS)
DESCRIPTION: Shows how to properly unregister finalization callbacks when cleanup is handled manually.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_45

LANGUAGE: javascript
CODE:
```
const { finalization } = require('node:process');

// Please make sure that the function passed to finalization.register()
// does not create a closure around unnecessary objects.
function onFinalize(obj, event) {
  // You can do whatever you want with the object
  obj.dispose();
}

function setup() {
  // This object can be safely garbage collected,
  // and the resulting shutdown function will not be called.
  // There are no leaks.
  const myDisposableObject = {
    dispose() {
      // Free your resources synchronously
    },
  };

  finalization.register(myDisposableObject, onFinalize);

  // Do something

  myDisposableObject.dispose();
  finalization.unregister(myDisposableObject);
}

setup();
```

----------------------------------------

TITLE: Testing String Concatenation with Alternating Values in JavaScript
DESCRIPTION: This code snippet tests string concatenation with a ternary operator that alternates between returning a number (42) and a string ("hello"). It verifies that JavaScript correctly converts these values to strings as expected, regardless of any potential modifications to String.prototype.valueOf.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-to-string-int-or-string-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
"" + foo(i % 2 ? 42 : "hello")
```

----------------------------------------

TITLE: Sending Multiple Buffers via UDP with Node.js dgram (CommonJS) - JavaScript
DESCRIPTION: Presents sending an array of Buffer instances as a single UDP datagram using Node.js 'dgram' in CommonJS format. Buffers are aggregated and sent; completion is handled via callback. Dependencies: 'dgram', 'buffer'. Inputs are Buffers array and target port. Intended for flexibility and performance experimentation. The callback pattern ensures socket closure after sending.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_9

LANGUAGE: JavaScript
CODE:
```
const dgram = require('node:dgram');\nconst { Buffer } = require('node:buffer');\n\nconst buf1 = Buffer.from('Some ');\nconst buf2 = Buffer.from('bytes');\nconst client = dgram.createSocket('udp4');\nclient.send([buf1, buf2], 41234, (err) => {\n  client.close();\n});
```

----------------------------------------

TITLE: V8 Heap Space Statistics Example
DESCRIPTION: Shows the structure of heap space statistics array returned by getHeapSpaceStatistics().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
[
  {
    "space_name": "new_space",
    "space_size": 2063872,
    "space_used_size": 951112,
    "space_available_size": 80824,
    "physical_space_size": 2063872
  },
  {
    "space_name": "old_space",
    "space_size": 3090560,
    "space_used_size": 2493792,
    "space_available_size": 0,
    "physical_space_size": 3090560
  },
  {
    "space_name": "code_space",
    "space_size": 1260160,
    "space_used_size": 644256,
    "space_available_size": 960,
    "physical_space_size": 1260160
  },
  {
    "space_name": "map_space",
    "space_size": 1094160,
    "space_used_size": 201608,
    "space_available_size": 0,
    "physical_space_size": 1094160
  },
  {
    "space_name": "large_object_space",
    "space_size": 0,
    "space_used_size": 0,
    "space_available_size": 1490980608,
    "physical_space_size": 0
  }
]
```

----------------------------------------

TITLE: Performing Arithmetic Operations with NaN in JavaScript
DESCRIPTION: Demonstrates that any arithmetic operation (multiplication, division, subtraction) involving `NaN` (Not a Number) in JavaScript results in `NaN`. This holds true whether `NaN` is used directly (`values.notANumber`) or coerced via unary plus (`+values.notANumber`). Operations involve a number derived from `values.someFloatString`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-transforms-expected.txt#2025-04-23_snippet_18

LANGUAGE: text
CODE:
```
PASS +values.someFloatString * values.notANumber is values.someFloatString * values.notANumber
PASS +values.someFloatString * values.notANumber is NaN
PASS values.someFloatString * +values.notANumber is values.someFloatString * values.notANumber
PASS values.someFloatString * +values.notANumber is NaN
PASS +values.someFloatString * +values.notANumber is values.someFloatString * values.notANumber
PASS +values.someFloatString * +values.notANumber is NaN
PASS +values.someFloatString / values.notANumber is values.someFloatString / values.notANumber
PASS +values.someFloatString / values.notANumber is NaN
PASS values.someFloatString / +values.notANumber is values.someFloatString / values.notANumber
PASS values.someFloatString / +values.notANumber is NaN
PASS +values.someFloatString / +values.notANumber is values.someFloatString / values.notANumber
PASS +values.someFloatString / +values.notANumber is NaN
PASS +values.someFloatString - values.notANumber is values.someFloatString - values.notANumber
PASS +values.someFloatString - values.notANumber is NaN
PASS values.someFloatString - +values.notANumber is values.someFloatString - values.notANumber
PASS values.someFloatString - +values.notANumber is NaN
PASS +values.someFloatString - +values.notANumber is values.someFloatString - values.notANumber
PASS +values.someFloatString - +values.notANumber is NaN
```

----------------------------------------

TITLE: Implementing Asynchronous Import Map Hooks
DESCRIPTION: Defines asynchronous resolve hooks for implementing import maps functionality in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_44

LANGUAGE: javascript
CODE:
```
// import-map-hooks.js
import fs from 'node:fs/promises';

const { imports } = JSON.parse(await fs.readFile('import-map.json'));

export async function resolve(specifier, context, nextResolve) {
  if (Object.hasOwn(imports, specifier)) {
    return nextResolve(imports[specifier], context);
  }

  return nextResolve(specifier, context);
}
```

----------------------------------------

TITLE: Detailed Valgrind Memory Leak Analysis Command
DESCRIPTION: Command for running a detailed memory leak analysis with Valgrind using the --leak-check=full option.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/investigating-native-memory-leaks.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
user1@minikube1:~/valgrind/node-addon-examples/1_hello_world/napi$ valgrind --leak-check=full node hello.js
```

----------------------------------------

TITLE: Running a VM Script in the Current Global Context (JavaScript)
DESCRIPTION: This example shows how to compile code that increments a global variable and then execute it multiple times within the current global context using runInThisContext.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
const vm = require('node:vm');

global.globalVar = 0;

const script = new vm.Script('globalVar += 1', { filename: 'myfile.vm' });

for (let i = 0; i < 1000; ++i) {
  script.runInThisContext();
}

console.log(globalVar);

// 1000
```

----------------------------------------

TITLE: Accessing First and Last Child Nodes in Container with JavaScript
DESCRIPTION: Compares selector.first and selector.last to the first and last elements of selector.nodes, showing their equivalence. Ensures correct access to edge child nodes in the AST structure.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
selector.first === selector.nodes[0];
selector.last === selector.nodes[selector.nodes.length - 1];
```

----------------------------------------

TITLE: Checking Report Filename in Node.js
DESCRIPTION: This snippet demonstrates how to check the filename where diagnostic reports are written using the process.report.filename property in both ECMAScript modules and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_74

LANGUAGE: JavaScript
CODE:
```
import { report } from 'node:process';

console.log(`Report filename is ${report.filename}`);
```

LANGUAGE: JavaScript
CODE:
```
const { report } = require('node:process');

console.log(`Report filename is ${report.filename}`);
```

----------------------------------------

TITLE: Creating SourceTextModule with Cached Data - JavaScript vm
DESCRIPTION: Exhibits how to generate and reuse cached compilation data with vm.SourceTextModule for performance improvements. The cached buffer from createCachedData can be reused cross instance as long as the source is unchanged. This sample is written in JavaScript, using Node.js vm APIs.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
// Create an initial module
const module = new vm.SourceTextModule('const a = 1;');

// Create cached data from this module
const cachedData = module.createCachedData();

// Create a new module using the cached data. The code must be the same.
const module2 = new vm.SourceTextModule('const a = 1;', { cachedData });
```

----------------------------------------

TITLE: Creating and Previewing a WeakMap - Node.js - JavaScript
DESCRIPTION: This snippet tests the creation of a new WeakMap instance using 'new WeakMap()' and previews its summary representation, confirming that the resulting object is a WeakMap with no entries. It has no dependencies beyond a JavaScript runtime that supports WeakMap. No properties or entries are passed, and the preview should show an empty WeakMap object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_22

LANGUAGE: JavaScript
CODE:
```
'new WeakMap()', returnByValue: false, generatePreview: true
{
    result : {
        className : WeakMap
        description : WeakMap
        objectId : <objectId>
        preview : {
            description : WeakMap
            overflow : false
            properties : [
            ]
            subtype : weakmap
            type : object
        }
        subtype : weakmap
        type : object
    }
}
```

----------------------------------------

TITLE: Limiting Mock Response Usage with the times Method
DESCRIPTION: This example shows how to limit the number of times a mock can be used with the times method. The mock will only match the specified number of requests before it is consumed, after which subsequent requests will fall through to real HTTP requests.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/foo',
  method: 'GET'
}).reply(200, 'foo').times(2)

const result1 = await request('http://localhost:3000/foo')
// Will match and return mocked data

const result2 = await request('http://localhost:3000/foo')
// Will match and return mocked data

const result3 = await request('http://localhost:3000/foo')
// Will not match and make attempt a real request
```

----------------------------------------

TITLE: Computing CRC32 Checksums with ES Modules
DESCRIPTION: Demonstrates how to compute CRC32 checksums using zlib in Node.js with ES Modules. Shows examples of checksum calculation for both UTF-8 and UTF-16LE encoded strings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
import zlib from 'node:zlib';
import { Buffer } from 'node:buffer';

let crc = zlib.crc32('hello');  // 907060870
crc = zlib.crc32('world', crc);  // 4192936109

crc = zlib.crc32(Buffer.from('hello', 'utf16le'));  // 1427272415
crc = zlib.crc32(Buffer.from('world', 'utf16le'), crc);  // 4150509955
```

----------------------------------------

TITLE: Creating Basic Custom Connector with Undici
DESCRIPTION: This example demonstrates how to create a basic custom connector using Undici's buildConnector utility with TLS validation disabled. The connector performs a custom assertion check on the socket before establishing the connection.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Connector.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
'use strict'

import { Client, buildConnector } from 'undici'

const connector = buildConnector({ rejectUnauthorized: false })
const client = new Client('https://localhost:3000', {
  connect (opts, cb) {
    connector(opts, (err, socket) => {
      if (err) {
        cb(err)
      } else if (/* assertion */) {
        socket.destroy()
        cb(new Error('kaboom'))
      } else {
        cb(null, socket)
      }
    })
  }
})
```

----------------------------------------

TITLE: Creating a Simple JavaScript File for SEA in Bash
DESCRIPTION: Creates a basic JavaScript script that logs a greeting with a command-line argument, used as the entry point for a Single Executable Application.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
echo 'console.log(`Hello, ${process.argv[2]}!`);' > hello.js
```

----------------------------------------

TITLE: Retrieving a Symbol from a Shared Library in C with libuv
DESCRIPTION: Function to retrieve a data pointer from a dynamic library. Returns 0 on success, -1 if the symbol is not found. The symbol may legally map to NULL.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/dll.rst#2025-04-23_snippet_3

LANGUAGE: c
CODE:
```
int uv_dlsym(uv_lib_t* lib, const char* name, void** ptr)
```

----------------------------------------

TITLE: Defining Synchronous Node.js resolve Hook (MJS/JS)
DESCRIPTION: Provides the function signature for a synchronous `resolve` hook used with `module.registerHooks()` in Node.js. The comment indicates its logic would be similar to the asynchronous version shown previously, handling module specifier resolution synchronously without using `async`/`await` or returning Promises. It must return the result object ({ url: ..., shortCircuit: ... }) directly.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_33

LANGUAGE: mjs
CODE:
```
// Synchronous version accepted by module.registerHooks().
function resolve(specifier, context, nextResolve) {
  // Similar to the asynchronous resolve() above, since that one does not have
  // any asynchronous logic.
}
```

----------------------------------------

TITLE: Installing GitLab Packages - npm CLI - Bash
DESCRIPTION: Presents two examples of installing packages from GitLab via npm install, allowing a repo path and optional commit-ish or semver specification. Dependencies are handled like with other git-based installs if a prepare script is available. Accepts gitlabname/repo and an optional semver or commit-ish, installing to node_modules.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
npm install gitlab:mygitlabuser/myproject
npm install gitlab:myusr/myproj#semver:^5.0
```

----------------------------------------

TITLE: Creating a JavaScript Array with Initial Length - Node-API - C
DESCRIPTION: Defines a function to instantiate a JavaScript Array with a specified initial length, outputting a napi_value to the result parameter. Requires a napi_env environment, initial length, and returns napi_ok on success. The buffer for the array may not be pre-allocated; for contiguous or externally managed buffers, napi_create_external_arraybuffer is recommended. Returns a JS Array with specified length property.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_75

LANGUAGE: c
CODE:
```
napi_status napi_create_array_with_length(napi_env env,
                                          size_t length,
                                          napi_value* result)
```

----------------------------------------

TITLE: Unix Socket Server Binding in Node.js
DESCRIPTION: Example showing how to bind a server to a Unix domain socket.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_32

LANGUAGE: javascript
CODE:
```
server.listen('/tmp/echo.sock', () => {
  console.log('server bound');
});
```

----------------------------------------

TITLE: Closing a MockPool and Cleanup
DESCRIPTION: This example shows how to properly close a MockPool instance after tests are complete. The close method de-registers the pool from its associated MockAgent and performs cleanup to prevent memory leaks and ensure proper test isolation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
import { MockAgent } from 'undici'

const mockAgent = new MockAgent()
const mockPool = mockAgent.get('http://localhost:3000')

await mockPool.close()
```

----------------------------------------

TITLE: Illustrating Version 3 Diagnostic Report Resource Usage in JSON
DESCRIPTION: This JSON snippet provides an example of the `resourceUsage` section from a Node.js diagnostic report (Version 3 format). It showcases added keys like `rss`, `free_memory`, `total_memory`, `available_memory`, and `constrained_memory`, offering more detailed memory usage information compared to previous versions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
  "resourceUsage": {
    "rss": "35766272",
    "free_memory": "1598337024",
    "total_memory": "17179869184",
    "available_memory": "1598337024",
    "constrained_memory": "36624662528"
  }
}
```

----------------------------------------

TITLE: Throwing from rejectAfterDelayInPromiseConstructor with caughtPromiseAny
DESCRIPTION: This test case creates a promise that rejects after a delay and is expected to be caught by Promise.any(). It verifies that the rejection is properly handled and caught.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-promise-catch-prediction-expected.txt#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
Throwing from rejectAfterDelayInPromiseConstructor, handling with caughtPromiseAny
```

----------------------------------------

TITLE: Executing Code in an Existing Node.js VM Context (vm.runInContext)
DESCRIPTION: This JavaScript snippet demonstrates using `vm.runInContext` to execute code within a pre-existing, contextified object. It requires the `node:vm` module. First, a context object (`contextObject`) is created and contextified using `vm.createContext`. Then, a loop runs the code `'globalVar *= 2;'` within that context multiple times, modifying the `globalVar` property. Finally, it logs the modified context object, showing the cumulative effect of the executed code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_18

LANGUAGE: js
CODE:
```
const vm = require('node:vm');

const contextObject = { globalVar: 1 };
vm.createContext(contextObject);

for (let i = 0; i < 10; ++i) {
  vm.runInContext('globalVar *= 2;', contextObject);
}
console.log(contextObject);
// Prints: { globalVar: 1024 }
```

----------------------------------------

TITLE: Chaining Module Hooks in Node.js (ESM)
DESCRIPTION: Demonstrates how to chain multiple module hooks using the register method in ECMAScript modules. The hooks are executed in a last-in, first-out (LIFO) order.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
// entrypoint.mjs
import { register } from 'node:module';

register('./foo.mjs', import.meta.url);
register('./bar.mjs', import.meta.url);
await import('./my-app.mjs');
```

----------------------------------------

TITLE: Using util.types.isSharedArrayBuffer to check for SharedArrayBuffer objects
DESCRIPTION: Demonstrates how to use util.types.isSharedArrayBuffer() to check if a value is a built-in SharedArrayBuffer instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_94

LANGUAGE: javascript
CODE:
```
util.types.isSharedArrayBuffer(new ArrayBuffer());  // Returns false
util.types.isSharedArrayBuffer(new SharedArrayBuffer());  // Returns true
```

----------------------------------------

TITLE: Enabling Network Connections for Specific Hosts
DESCRIPTION: Demonstrates how to allow real HTTP requests only for specific hosts by providing host strings to enableNetConnect(). The examples show matching both a simple domain and a domain with a specific port.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

mockAgent.enableNetConnect('example-1.com')
mockAgent.enableNetConnect('example-2.com:8080')

await request('http://example-1.com')
// A real request is made

await request('http://example-2.com:8080')
// A real request is made

await request('http://example-3.com')
// Will throw
```

----------------------------------------

TITLE: Listing Installed Package Files with installed-package-contents CLI (Node.js, Bash)
DESCRIPTION: Shows usage of the installed-package-contents command-line utility for listing files and directories installed by a Node.js package. No separate setup required if the CLI is installed globally or accessible via npx. The command takes a package path and depth flag (-d or --depth), outputting the resolved list of files and folders to stdout. Depth values define folder traversal recursion (default 1, Infinity allowed). Outputs a plain text list; empty or missing directories produce empty results.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/@npmcli/installed-package-contents/README.md#2025-04-23_snippet_1

LANGUAGE: Bash
CODE:
```
$ installed-package-contents node_modules/bundle-some -d1
node_modules/.bin/some
node_modules/bundle-some/package.json
node_modules/bundle-some/node_modules/@scope/baz
node_modules/bundle-some/node_modules/.bin/foo
node_modules/bundle-some/node_modules/foo
```

LANGUAGE: Bash
CODE:
```
Usage:
  installed-package-contents <path> [-d<n> --depth=<n>]

Lists the files installed for a package specified by <path>.

Options:
  -d<n> --depth=<n>   Provide a numeric value ("Infinity" is allowed)
                      to specify how deep in the file tree to traverse.
                      Default=1
  -h --help           Show this usage information
```

----------------------------------------

TITLE: Documenting CRL LastUpdate Field Error
DESCRIPTION: Error constant indicating an invalid time value in a Certificate Revocation List's lastUpdate field.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_67

LANGUAGE: markdown
CODE:
```
ERROR_IN_CRL_LAST_UPDATE_FIELD
```

----------------------------------------

TITLE: Inline Hook Registration via Data URL
DESCRIPTION: Example showing how to register hooks directly via command line using a data URL, avoiding the need for a separate registration file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
node --import 'data:text/javascript,import { register } from "node:module"; import { pathToFileURL } from "node:url"; register("http-to-https", pathToFileURL("./"));' ./my-app.js
```

----------------------------------------

TITLE: Testing Uint8ClampedArray Out-of-Bounds Operation
DESCRIPTION: Tests calling foo() function with an array, large index (100000000), and value (42) to verify it safely returns undefined for out-of-bounds operations. The function is called repeatedly to ensure consistent behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-uint8clampedarray-out-of-bounds-put-by-val-alias-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
foo(array, 100000000, 42)
```

----------------------------------------

TITLE: Creating Multiple Derived Error Classes in Node.js
DESCRIPTION: Demonstrates how to create multiple derived error classes from a single error key using the internal/errors module. This allows for flexible error handling with different error types.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/using-internal-errors.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
E('EXAMPLE_KEY', 'Error message', TypeError, RangeError);

// In another module
const { EXAMPLE_KEY } = require('internal/errors').codes;
// TypeError
throw new EXAMPLE_KEY();
// RangeError
throw new EXAMPLE_KEY.RangeError();
```

----------------------------------------

TITLE: Node-API Type Tag Structure (C)
DESCRIPTION: Defines a 128-bit value used for type-tagging JavaScript objects or externals, providing a stronger type check than napi_instanceof.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_21

LANGUAGE: C
CODE:
```
typedef struct {
  uint64_t lower;
  uint64_t upper;
} napi_type_tag;
```

----------------------------------------

TITLE: Evaluating Null Falsiness in JavaScript Ternary Operator
DESCRIPTION: This JavaScript snippet tests the falsiness of `null` within a ternary operator. `null` is considered falsy in JavaScript, causing the expression to evaluate to the second value, `2`, confirmed by the log 'PASS null ? 1 : 2 is 2'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/kde/conditional-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
null ? 1 : 2
```

----------------------------------------

TITLE: Streaming npm package search results with search.stream() - JavaScript
DESCRIPTION: Shows how to consume searched npm package results from libnpmsearch as a readable stream, emitting each result object individually. The stream method returns a Node.js stream that emits data events with objects conforming to the documented result format. Particularly useful for large result sets or real-time processing. Requires the Node.js runtime and the libnpmsearch library.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmsearch/README.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
search.stream('libnpm').on('data', console.log)
=>
// entry 1
{
  name: 'libnpm',
  description: 'programmatic npm API',
  ...etc
}
// entry 2
{
  name: 'libnpmsearch',
  description: 'Programmatic API for searching in npm and compatible registries',
  ...etc
}
// etc

```

----------------------------------------

TITLE: Defining the BalancedPoolOptions in Node.js Undici
DESCRIPTION: Parameter definition for BalancedPoolOptions which extends PoolOptions. Includes a factory property that allows customizing how Pool instances are created for each origin.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/BalancedPool.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
### Parameter: `BalancedPoolOptions`

Extends: [`PoolOptions`](/docs/docs/api/Pool.md#parameter-pooloptions)

* **factory** `(origin: URL, opts: Object) => Dispatcher` - Default: `(origin, opts) => new Pool(origin, opts)`
```

----------------------------------------

TITLE: Logging Raw Request Headers Array - Node.js HTTP/2
DESCRIPTION: Logs the `request.rawHeaders` array, which contains header names and values exactly as received, preserving original casing and duplicates. It's a flat array where keys and values alternate.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_57

LANGUAGE: js
CODE:
```
console.log(request.rawHeaders);
```

----------------------------------------

TITLE: Configuring Node.js Without Intl Support - Bash
DESCRIPTION: Excludes Intl (ECMA-402) support when building Node.js, resulting in a smaller binary but disabling all Intl and some String.prototype.normalize features. To be run prior to actual code compilation. Can be used for environments where minimal size is critical but locale features are not needed.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_40

LANGUAGE: Bash
CODE:
```
./configure --without-intl
```

----------------------------------------

TITLE: TypeScript Namespace Example Without Runtime Code (Supported)
DESCRIPTION: Example of a TypeScript namespace that only exports a type, which is supported by the built-in type stripping feature.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/typescript.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
// This namespace is exporting a type
namespace TypeOnly {
   export type A = string;
}
```

----------------------------------------

TITLE: Creating and Adding Wrapped C++ Objects in Node.js - C++
DESCRIPTION: Implements Node.js addon entry points in C++ for creating and manipulating wrapped C++ objects. Exposes two methods: 'createObject' for instantiating new 'MyObject' instances, and 'add' for summing values of two wrapped objects by unwrapping them. Depends on Node.js and V8 headers, and requires correct initialization via NODE_MODULE. Expects wrapped object inputs and outputs numeric results; not thread-safe for use with worker threads.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_30

LANGUAGE: C++
CODE:
```
// addon.cc
#include <node.h>
#include <node_object_wrap.h>
#include "myobject.h"

namespace demo {

using v8::Context;
using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
using v8::Number;
using v8::Object;
using v8::String;
using v8::Value;

void CreateObject(const FunctionCallbackInfo<Value>& args) {
  MyObject::NewInstance(args);
}

void Add(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = args.GetIsolate();
  Local<Context> context = isolate->GetCurrentContext();

  MyObject* obj1 = node::ObjectWrap::Unwrap<MyObject>(
      args[0]->ToObject(context).ToLocalChecked());
  MyObject* obj2 = node::ObjectWrap::Unwrap<MyObject>(
      args[1]->ToObject(context).ToLocalChecked());

  double sum = obj1->value() + obj2->value();
  args.GetReturnValue().Set(Number::New(isolate, sum));
}

void InitAll(Local<Object> exports) {
  MyObject::Init(exports->GetIsolate());

  NODE_SET_METHOD(exports, "createObject", CreateObject);
  NODE_SET_METHOD(exports, "add", Add);
}

NODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)

}  // namespace demo
```

----------------------------------------

TITLE: Defining uv_metrics_t Struct in C for libuv Metrics
DESCRIPTION: Defines the uv_metrics_t struct used to store event loop metrics. It includes counters for loop iterations, processed events, and waiting events.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/metrics.rst#2025-04-23_snippet_0

LANGUAGE: c
CODE:
```
typedef struct {
    uint64_t loop_count;
    uint64_t events;
    uint64_t events_waiting;
    /* private */
    uint64_t* reserved[13];
} uv_metrics_t;
```

----------------------------------------

TITLE: Creating and Using Global Symbols in JavaScript
DESCRIPTION: This snippet demonstrates the creation and usage of global symbols using Symbol.for() in JavaScript. It shows that global symbols with the same key are identical across different calls to Symbol.for().
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/using-symbols.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const s = Symbol.for('hello');
console.log(s === Symbol.for('hello')); // true
```

----------------------------------------

TITLE: Implementing Recursion with a Named Function Expression in JavaScript
DESCRIPTION: This snippet demonstrates recursion using a named function expression `Named`. An outer counter variable `ctr` is initialized to 3. The function `Named` decrements `ctr`; if `ctr` is still truthy (non-zero), it recursively calls itself (`Named(a,b)`) and doubles the result. Otherwise (when `ctr` reaches 0), it returns the sum of `a` and `b`. The function is assigned to `x` and called with 5 and 6. This tests the ability of a named function expression to call itself using its internal name. The surrounding text indicates this test expects the result to be 44 ( (5+6) * 2 * 2 ).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/named-function-expression-expected.txt#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
var ctr = 3; var x = (function Named(a,b){ if(--ctr) return 2 * Named(a,b); else return a + b; }); x(5,6)
```

----------------------------------------

TITLE: Using Proxy.revocable to Create and Revoke Proxy - JavaScript
DESCRIPTION: Demonstrates use of Proxy.revocable to create a revocable proxy for an object, then invokes revoke() and returns the proxy. Input: none; Output: Revoked proxy object. Shows lifecycle and revocation pattern for proxies using Proxy.revocable().
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_36

LANGUAGE: JavaScript
CODE:
```
revocable = Proxy.revocable({}, {});
revocable.revoke();
revocable.proxy
```

----------------------------------------

TITLE: Inspecting WeakSets with ShowHidden Option (CommonJS)
DESCRIPTION: Demonstrates inspecting WeakSet entries using the showHidden option in CommonJS format
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_26

LANGUAGE: javascript
CODE:
```
const { inspect } = require('node:util');

const obj = { a: 1 };
const obj2 = { b: 2 };
const weakSet = new WeakSet([obj, obj2]);

console.log(inspect(weakSet, { showHidden: true }));
```

----------------------------------------

TITLE: Stream Wrapping Example
DESCRIPTION: Shows how to wrap an old-style readable stream into a modern Readable stream interface using wrap() method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_39

LANGUAGE: javascript
CODE:
```
const { OldReader } = require('./old-api-module.js');
const { Readable } = require('node:stream');
const oreader = new OldReader();
const myReader = new Readable().wrap(oreader);

myReader.on('readable', () => {
  myReader.read(); // etc.
});
```

----------------------------------------

TITLE: Using CJS Module Lexer in CommonJS
DESCRIPTION: Demonstrates how to use the CJS Module Lexer in a CommonJS environment. It shows how to parse a module and extract exports and reexports.
SOURCE: https://github.com/nodejs/node/blob/main/deps/cjs-module-lexer/src/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const { parse } = require('cjs-module-lexer');

// `init` return a promise for parity with the ESM API, but you do not have to call it

const { exports, reexports } = parse(`
  // named exports detection
  module.exports.a = 'a';
  (function () {
    exports.b = 'b';
  })();
  Object.defineProperty(exports, 'c', { value: 'c' });
  /* exports.d = 'not detected'; */

  // reexports detection
  if (maybe) module.exports = require('./dep1.js');
  if (another) module.exports = require('./dep2.js');

  // literal exports assignments
  module.exports = { a, b: c, d, 'e': f }

  // __esModule detection
  Object.defineProperty(module.exports, '__esModule', { value: true })
`);

// exports === ['a', 'b', 'c', '__esModule']
// reexports === ['./dep1.js', './dep2.js']
```

----------------------------------------

TITLE: Using diagnostics_channel API in Node.js (ESM)
DESCRIPTION: Provides an overview of the public API for diagnostics_channel, including creating channels, subscribing, publishing, and unsubscribing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

// Get a reusable channel object
const channel = diagnostics_channel.channel('my-channel');

function onMessage(message, name) {
  // Received data
}

// Subscribe to the channel
diagnostics_channel.subscribe('my-channel', onMessage);

// Check if the channel has an active subscriber
if (channel.hasSubscribers) {
  // Publish data to the channel
  channel.publish({
    some: 'data',
  });
}

// Unsubscribe from the channel
diagnostics_channel.unsubscribe('my-channel', onMessage);
```

----------------------------------------

TITLE: Creating a Processor Instance with postcss-selector-parser in JavaScript
DESCRIPTION: This code creates a new Processor instance using the parser module. The processor is used to parse and process selector strings. No transform function or options are provided, so it uses default behavior. Input is a selector string; output is a parsed representation usable for further transformations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const processor = parser();
```

----------------------------------------

TITLE: Implementing Global Setup/Teardown with ESM - Javascript
DESCRIPTION: Provides an example of an ECMAScript Module (`setup-module.mjs`) that exports `globalSetup` and `globalTeardown` asynchronous functions. This module can be specified using the `--test-global-setup` flag to run code once before all tests and once after all tests in an ESM context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_15

LANGUAGE: Javascript
CODE:
```
// setup-module.mjs
export async function globalSetup() {
  // Setup shared resources, state, or environment
  console.log('Global setup executed');
  // Run servers, create files, prepare databases, etc.
}

export async function globalTeardown() {
  // Clean up resources, state, or environment
  console.log('Global teardown executed');
  // Close servers, remove files, disconnect from databases, etc.
}
```

----------------------------------------

TITLE: Streaming Users in an npm Team using libnpmteam in Node.js
DESCRIPTION: Demonstrates using the `team.lsUsers.stream` function to obtain a readable stream of usernames within a specific npm team. The example uses an async `for...await...of` loop to process the streamed users. Requires authentication options (`opts.token`) within the `opts` object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmteam/README.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
for await (let user of team.lsUsers.stream('@npm:cli', {token: 'myregistrytoken'})) {
  console.log(user)
}

// outputs
// iarna
// zkat
```

----------------------------------------

TITLE: Checking Instance Relationship with napi_instanceof in C
DESCRIPTION: This function implements the JavaScript instanceof operator in C. It checks if an object is an instance of a constructor function and returns the result as a boolean.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_132

LANGUAGE: c
CODE:
```
napi_status napi_instanceof(napi_env env,
                            napi_value object,
                            napi_value constructor,
                            bool* result)
```

----------------------------------------

TITLE: Writing Little-Endian Unsigned 64-bit Integer (Node.js Buffer)
DESCRIPTION: Shows how to use `buf.writeBigUInt64LE()` to write a BigInt value into the buffer as a little-endian 64-bit unsigned integer. The example initializes a buffer and writes a hexadecimal BigInt, demonstrating the resulting byte order. Dependencies include the `Buffer` class from `node:buffer`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_83

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeBigUInt64LE(0xdecafafecacefaden, 0);

console.log(buf);
// Prints: <Buffer de fa ce ca fe fa ca de>
```

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeBigUInt64LE(0xdecafafecacefaden, 0);

console.log(buf);
// Prints: <Buffer de fa ce ca fe fa ca de>
```

----------------------------------------

TITLE: Testing Number.toExponential Outputs with Various Precisions - Node.js JavaScript
DESCRIPTION: Demonstrates expected output string values from calls to Number.prototype.toExponential on both positive and negative numbers, across a wide span of precision arguments (including exceeding, minimum, and maximum values), as performed in Node.js. These tests verify correct rounding and string formatting, and help ensure precision implementation is compliant with ECMAScript. Inputs are numbers and (optionally) fraction digits; output is the resulting exponential-format string.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/kde/Number-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
Number(-.000123456).toExponential(16) // "-1.2345600000000001e-4"
Number(-.000123456).toExponential(17) // "-1.23456000000000005e-4"
Number(-.000123456).toExponential(18) // "-1.234560000000000052e-4"
Number(-.000123456).toExponential(19) // "-1.2345600000000000519e-4"
Number(-.000123456).toExponential(20) // "-1.23456000000000005188e-4"
Number(123.4567890123456789012).toExponential() // "1.2345678901234568e+2"
Number(123.4567890123456789012).toExponential(0) // "1e+2"
Number(123.4567890123456789012).toExponential(1) // "1.2e+2"
Number(123.4567890123456789012).toExponential(2) // "1.23e+2"
Number(123.4567890123456789012).toExponential(3) // "1.235e+2"
Number(123.4567890123456789012).toExponential(4) // "1.2346e+2"
Number(123.4567890123456789012).toExponential(5) // "1.23457e+2"
Number(123.4567890123456789012).toExponential(6) // "1.234568e+2"
Number(123.4567890123456789012).toExponential(7) // "1.2345679e+2"
Number(123.4567890123456789012).toExponential(8) // "1.23456789e+2"
Number(123.4567890123456789012).toExponential(9) // "1.234567890e+2"
Number(123.4567890123456789012).toExponential(10) // "1.2345678901e+2"
Number(123.4567890123456789012).toExponential(11) // "1.23456789012e+2"
Number(123.4567890123456789012).toExponential(12) // "1.234567890123e+2"
Number(123.4567890123456789012).toExponential(13) // "1.2345678901235e+2"
Number(123.4567890123456789012).toExponential(14) // "1.23456789012346e+2"
Number(123.4567890123456789012).toExponential(15) // "1.234567890123457e+2"
Number(123.4567890123456789012).toExponential(16) // "1.2345678901234568e+2"
Number(123.4567890123456789012).toExponential(17) // "1.23456789012345681e+2"
Number(123.4567890123456789012).toExponential(18) // "1.234567890123456806e+2"
Number(123.4567890123456789012).toExponential(19) // "1.2345678901234568059e+2"
Number(123.4567890123456789012).toExponential(20) // "1.23456789012345680590e+2"
Number(-123.4567890123456789012).toExponential() // "-1.2345678901234568e+2"
Number(-123.4567890123456789012).toExponential(0) // "-1e+2"
Number(-123.4567890123456789012).toExponential(1) // "-1.2e+2"
Number(-123.4567890123456789012).toExponential(2) // "-1.23e+2"
Number(-123.4567890123456789012).toExponential(3) // "-1.235e+2"
Number(-123.4567890123456789012).toExponential(4) // "-1.2346e+2"
Number(-123.4567890123456789012).toExponential(5) // "-1.23457e+2"
Number(-123.4567890123456789012).toExponential(6) // "-1.234568e+2"
Number(-123.4567890123456789012).toExponential(7) // "-1.2345679e+2"
Number(-123.4567890123456789012).toExponential(8) // "-1.23456789e+2"
Number(-123.4567890123456789012).toExponential(9) // "-1.234567890e+2"
Number(-123.4567890123456789012).toExponential(10) // "-1.2345678901e+2"
Number(-123.4567890123456789012).toExponential(11) // "-1.23456789012e+2"
Number(-123.4567890123456789012).toExponential(12) // "-1.234567890123e+2"
Number(-123.4567890123456789012).toExponential(13) // "-1.2345678901235e+2"
Number(-123.4567890123456789012).toExponential(14) // "-1.23456789012346e+2"
Number(-123.4567890123456789012).toExponential(15) // "-1.234567890123457e+2"
Number(-123.4567890123456789012).toExponential(16) // "-1.2345678901234568e+2"
Number(-123.4567890123456789012).toExponential(17) // "-1.23456789012345681e+2"
Number(-123.4567890123456789012).toExponential(18) // "-1.234567890123456806e+2"
Number(-123.4567890123456789012).toExponential(19) // "-1.2345678901234568059e+2"
Number(-123.4567890123456789012).toExponential(20) // "-1.23456789012345680590e+2"
Number(.0000000000000000000001).toExponential() // "1e-22"
Number(.0000000000000000000012).toExponential() // "1.2e-21"
Number(.0000000000000000000123).toExponential() // "1.23e-20"
Number(.0000000000000000001234).toExponential() // "1.234e-19"
Number(.0000000000000000012345).toExponential() // "1.2345e-18"
Number(.0000000000000000123456).toExponential() // "1.23456e-17"
Number(.0000000000000001234567).toExponential() // "1.234567e-16"
Number(.0000000000000012345678).toExponential() // "1.2345678e-15"
Number(.0000000000000123456789).toExponential() // "1.23456789e-14"
Number(.0000000000001234567890).toExponential() // "1.23456789e-13"
Number(.0000000000012345678901).toExponential() // "1.2345678901e-12"
Number(.0000000000123456789012).toExponential() // "1.23456789012e-11"
Number(.0000000001234567890123).toExponential() // "1.234567890123e-10"
Number(.0000000012345678901234).toExponential() // "1.2345678901234e-9"
Number(.0000000123456789012345).toExponential() // "1.23456789012345e-8"
Number(.0000001234567890123456).toExponential() // "1.234567890123456e-7"
Number(.0000012345678901234567).toExponential() // "1.2345678901234567e-6"
Number(.0000123456789012345678).toExponential() // "1.2345678901234568e-5"
Number(.0001234567890123456789).toExponential() // "1.2345678901234567e-4"
Number(.0012345678901234567890).toExponential() // "1.2345678901234567e-3"
Number(.0123456789012345678901).toExponential() // "1.2345678901234568e-2"
Number(1.234567890123456789012).toExponential() // "1.2345678901234567e+0"
Number(12.34567890123456789012).toExponential() // "1.2345678901234567e+1"
Number(123.4567890123456789012).toExponential() // "1.2345678901234568e+2"
Number(1234.567890123456789012).toExponential() // "1.234567890123457e+3"
Number(12345.67890123456789012).toExponential() // "1.2345678901234567e+4"
Number(123456.7890123456789012).toExponential() // "1.2345678901234567e+5"
Number(1234567.890123456789012).toExponential() // "1.2345678901234567e+6"
Number(12345678.90123456789012).toExponential() // "1.2345678901234567e+7"
Number(123456789.0123456789012).toExponential() // "1.2345678901234567e+8"
Number(1234567890.123456789012).toExponential() // "1.2345678901234567e+9"
Number(12345678901.23456789012).toExponential() // "1.2345678901234568e+10"
Number(123456789012.3456789012).toExponential() // "1.2345678901234567e+11"
Number(1234567890123.456789012).toExponential() // "1.2345678901234568e+12"
Number(12345678901234.56789012).toExponential() // "1.2345678901234568e+13"
Number(123456789012345.6789012).toExponential() // "1.2345678901234567e+14"
Number(1234567890123456.789012).toExponential() // "1.2345678901234568e+15"
Number(12345678901234567.89012).toExponential() // "1.2345678901234568e+16"
Number(123456789012345678.9012).toExponential() // "1.2345678901234568e+17"
Number(1234567890123456789.012).toExponential() // "1.2345678901234568e+18"
Number(12345678901234567890.12).toExponential() // "1.2345678901234567e+19"
Number(123456789012345678901.2).toExponential() // "1.2345678901234568e+20"
Number(-.0000000000000000000001).toExponential() // "-1e-22"
Number(-.0000000000000000000012).toExponential() // "-1.2e-21"
Number(-.0000000000000000000123).toExponential() // "-1.23e-20"
Number(-.0000000000000000001234).toExponential() // "-1.234e-19"
Number(-.0000000000000000012345).toExponential() // "-1.2345e-18"
Number(-.0000000000000000123456).toExponential() // "-1.23456e-17"
Number(-.0000000000000001234567).toExponential() // "-1.234567e-16"
Number(-.0000000000000012345678).toExponential() // "-1.2345678e-15"
Number(-.0000000000000123456789).toExponential() // "-1.23456789e-14"
Number(-.0000000000001234567890).toExponential() // "-1.23456789e-13"
Number(-.0000000000012345678901).toExponential() // "-1.2345678901e-12"
Number(-.0000000000123456789012).toExponential() // "-1.23456789012e-11"
Number(-.0000000001234567890123).toExponential() // "-1.234567890123e-10"
Number(-.0000000012345678901234).toExponential() // "-1.2345678901234e-9"
Number(-.0000000123456789012345).toExponential() // "-1.23456789012345e-8"
Number(-.0000001234567890123456).toExponential() // "-1.234567890123456e-7"
Number(-.0000012345678901234567).toExponential() // "-1.2345678901234567e-6"
Number(-.0000123456789012345678).toExponential() // "-1.2345678901234568e-5"
Number(-.0001234567890123456789).toExponential() // "-1.2345678901234567e-4"
Number(-.0012345678901234567890).toExponential() // "-1.2345678901234567e-3"
Number(-.0123456789012345678901).toExponential() // "-1.2345678901234568e-2"
Number(-1.234567890123456789012).toExponential() // "-1.2345678901234567e+0"
Number(-12.34567890123456789012).toExponential() // "-1.2345678901234567e+1"
Number(-123.4567890123456789012).toExponential() // "-1.2345678901234568e+2"
Number(-1234.567890123456789012).toExponential() // "-1.234567890123457e+3"
Number(-12345.67890123456789012).toExponential() // "-1.2345678901234567e+4"
```

----------------------------------------

TITLE: H2CClient Disconnect Event Example
DESCRIPTION: Shows how to handle disconnection events in an H2CClient implementation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/H2CClient.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import { createServer } from "node:http2";
import { H2CClient } from "undici";
import { once } from "events";

const server = createServer((request, response) => {
  response.destroy();
}).listen();

await once(server, "listening");

const client = new H2CClient(`http://localhost:${server.address().port}`);

client.on("disconnect", (origin) => {
  console.log(`Disconnected from ${origin}`);
});

try {
  await client.request({
    path: "/",
    method: "GET",
  });
} catch (error) {
  console.error(error.message);
  client.close();
  server.close();
}
```

----------------------------------------

TITLE: Incorrectly Setting C++ Dialect per Target in Bazel
DESCRIPTION: This Bazel `cc_library` definition shows an incorrect approach of setting the C++ standard (`-std=c++17`) via `copts` for a single target. This is discouraged because it doesn't ensure the Abseil dependency is built with the same standard, potentially leading to ABI conflicts and One Definition Rule (ODR) violations at runtime. Global build settings should be used instead.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/FAQ.md#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
# DON'T DO THIS!!!
cc_library(
    name = "my_library",
    srcs = ["my_library.cc"],
    copts = ["-std=c++17"],  # May create a mixed-mode compile!
    deps = ["@com_google_absl//absl/strings"],
)
```

----------------------------------------

TITLE: Opening Multiple Cache Instances in Undici
DESCRIPTION: Demonstrates how to open multiple cache instances with the same name using Undici's CacheStorage implementation. Shows that different instances share the same cached responses when using the same cache name.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/CacheStorage.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { caches } from 'undici'

const cache_1 = await caches.open('v1')
const cache_2 = await caches.open('v1')

// Although .open() creates a new instance,
assert(cache_1 !== cache_2)
// The same Response is matched in both.
assert.deepStrictEqual(await cache_1.match('/req'), await cache_2.match('/req'))
```

----------------------------------------

TITLE: Using util.types.isAsyncFunction in JavaScript
DESCRIPTION: Demonstrates how to use util.types.isAsyncFunction to check if a value is an async function, as seen by the JavaScript engine.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_63

LANGUAGE: javascript
CODE:
```
util.types.isAsyncFunction(function foo() {});  // Returns false
util.types.isAsyncFunction(async function foo() {});  // Returns true
```

----------------------------------------

TITLE: Verifying Call Count with CallTracker - Node.js assert - CommonJS (cjs)
DESCRIPTION: Demonstrates the use of tracker.verify() in CommonJS to enforce expected call count for a tracked function. Calling tracker.verify() throws an error if the expected and actual number of invocations differ. Requires 'node:assert'. Useful in testing to validate execution counts and trigger assertion errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_10

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');

// Creates call tracker.
const tracker = new assert.CallTracker();

function func() {}

// Returns a function that wraps func() that must be called exact times
// before tracker.verify().
const callsfunc = tracker.calls(func, 2);

callsfunc();

// Will throw an error since callsfunc() was only called once.
tracker.verify();
```

----------------------------------------

TITLE: Displaying Help Output in Commander.js
DESCRIPTION: Shows the resulting help output when using the custom help text added in the previous snippet.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_25

LANGUAGE: text
CODE:
```
Usage: custom-help [options]

Options:
  -f, --foo   enable some foo
  -h, --help  display help for command

Example call:
  $ custom-help --help
```

----------------------------------------

TITLE: Monitoring Error Events without Consuming in Node.js (CommonJS)
DESCRIPTION: This example shows how to monitor error events in Node.js EventEmitter without consuming them, using the errorMonitor symbol. It uses CommonJS modules to demonstrate error monitoring without affecting the error propagation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_15

LANGUAGE: JavaScript
CODE:
```
const { EventEmitter, errorMonitor } = require('node:events');

const myEmitter = new EventEmitter();
myEmitter.on(errorMonitor, (err) => {
  MyMonitoringTool.log(err);
});
myEmitter.emit('error', new Error('whoops!'));
// Still throws and crashes Node.js
```

----------------------------------------

TITLE: Testing Invalid Assignment in JavaScript
DESCRIPTION: Attempts to assign the value 1 to the result of the Number() constructor. This is an invalid left-hand side expression for assignment, and the test verifies that it throws a ReferenceError.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/modify-non-references-expected.txt#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
Number() = 1
```

----------------------------------------

TITLE: Establishing SOCKS Connection using Event Handlers in TypeScript
DESCRIPTION: Demonstrates creating a `SocksClient` instance and using event handlers (`established`, `error`) for flow control in TypeScript. It connects to 'ip-api.com:80' via a SOCKS5 proxy. Once the 'established' event fires, it sends an HTTP GET request using the provided socket and logs the response. Requires the 'socks' library.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/typescript/connectExample.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    ipaddress: '104.131.124.203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api.com', // host names are supported with SOCKS v4a and SOCKS v5.
    port: 80
  },

  command: 'connect'
};

const client = new SocksClient(options);

client.on('established', (info) => {
  console.log(info.socket);
  // <Socket ...>  (this is a raw net.Socket that is established to the destination host through the given proxy servers)

  info.socket.write('GET /json HTTP/1.1\nHost: ip-api.com\n\n');
  info.socket.on('data', (data) => {
    console.log(data.toString()); // ip-api.com sees that the last proxy (104.131.124.203) is connected to it and not the origin client (you).
    /*
      HTTP/1.1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        "as":"AS14061 Digital Ocean, Inc.",
        "city":"Clifton",
        "country":"United States",
        "countryCode":"US",
        "isp":"Digital Ocean",
        "lat":40.8326,
        "lon":-74.1307,
        "org":"Digital Ocean",
        "query":"104.131.124.203",
        "region":"NJ",
        "regionName":"New Jersey",
        "status":"success",
        "timezone":"America/New_York",
        "zip":"07014"
      }
    */
  });
});

// Failed to establish proxy connection to destination.
client.on('error', () => {
  // Handle errors
});

// Start connection
client.connect();
```

----------------------------------------

TITLE: Using util.types.isUint8ClampedArray to check for Uint8ClampedArray objects
DESCRIPTION: Shows how to use util.types.isUint8ClampedArray() to check if a value is a built-in Uint8ClampedArray instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_99

LANGUAGE: javascript
CODE:
```
util.types.isUint8ClampedArray(new ArrayBuffer());  // Returns false
util.types.isUint8ClampedArray(new Uint8ClampedArray());  // Returns true
util.types.isUint8ClampedArray(new Float64Array());  // Returns false
```

----------------------------------------

TITLE: Signal Handler for Trace Events
DESCRIPTION: Example of handling SIGINT signal to ensure proper trace log file generation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tracing.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
process.on('SIGINT', function onSigint() {
  console.info('Received SIGINT.');
  process.exit(130);  // Or applicable exit code depending on OS and signal
});
```

----------------------------------------

TITLE: Example TLSA Record Object Structure in Node.js DNS
DESCRIPTION: This snippet illustrates the structure of a JavaScript object representing a TLSA (Transport Layer Security Authentication) record, as resolved by the `dns.resolveTlsa` function in Node.js. The object contains properties like certUsage, selector, match, and data (represented as an ArrayBuffer).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_12

LANGUAGE: js
CODE:
```
{
  certUsage: 3,
  selector: 1,
  match: 1,
  data: [ArrayBuffer]
}
```

----------------------------------------

TITLE: Resolving TLSA Records with dnsPromises.resolveTlsa() in Node.js
DESCRIPTION: This snippet demonstrates the structure of the object returned when resolving TLSA (TLSA Certificate Association) records using the dnsPromises.resolveTlsa() method. It includes properties such as certUsage, selector, match, and data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
{
  certUsage: 3,
  selector: 1,
  match: 1,
  data: [ArrayBuffer]
}
```

----------------------------------------

TITLE: Parsing Script with Source URL and Source Mapping URL
DESCRIPTION: Tests parsing of a script with source URL followed by source mapping URL. The script contains a function declaration, a sourceURL comment, and a sourceMappingURL comment.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/script-on-after-compile-expected.txt#2025-04-23_snippet_9

LANGUAGE: JavaScript
CODE:
```
function foo10(){}//# sourceURL=source-url.js
//# sourceMappingURL=source-mapping-url-map
```

----------------------------------------

TITLE: Using promiseHooks.createHook in CommonJS
DESCRIPTION: CommonJS version of registering hook callbacks for promise lifecycle events. Takes an object with optional init, before, after, and settled callbacks. Returns a function to disable all hooks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_22

LANGUAGE: cjs
CODE:
```
const { promiseHooks } = require('node:v8');

const stopAll = promiseHooks.createHook({
  init(promise, parent) {},
});
```

----------------------------------------

TITLE: Running Android Build Tests on Linux via QEMU
DESCRIPTION: Executes the test suite (`make test`) for a statically linked Android build on a Linux host system using QEMU user-mode emulation. The `EXE_SHELL` environment variable is set to invoke the appropriate QEMU command (`qemu-<arch>`) for the target architecture. Requires QEMU user-mode tools and a build configured with `-static` (and potentially modified Makefiles).
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/NOTES-ANDROID.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
env EXE_SHELL=qemu-<arch> make test
```

----------------------------------------

TITLE: Testing Debugger Step Into Operation in JavaScript
DESCRIPTION: This snippet demonstrates the execution flow when using the stepInto command in a debugger. It shows how the debugger moves into functions and through different lines of code, including anonymous functions and timeouts.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-next-script-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
(anonymous) (:0:0)

test (foo.js:9:2)
(anonymous) (:0:0)

test (foo.js:10:2)
(anonymous) (:0:0)

test (foo.js:11:2)
(anonymous) (:0:0)

test (foo.js:12:2)
(anonymous) (:0:0)

test (foo.js:13:0)
(anonymous) (:0:0)

(anonymous) (:0:6)

(anonymous) (timeout1.js:0:8)

(anonymous) (timeout1.js:0:35)

foo (timeout2.js:19:2)

foo (timeout2.js:19:12)

(anonymous) (timeout3.js:0:8)

(anonymous) (timeout3.js:0:35)
```

----------------------------------------

TITLE: Checking String Representation and Encoding in Node.js
DESCRIPTION: This snippet demonstrates how to use the isStringOneByteRepresentation function to determine the underlying representation of a string. It defines an encoding enum and a writeString function that writes strings to a buffer based on their representation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
const { isStringOneByteRepresentation } = require('node:v8');

const Encoding = {
  latin1: 1,
  utf16le: 2,
};
const buffer = Buffer.alloc(100);
function writeString(input) {
  if (isStringOneByteRepresentation(input)) {
    buffer.writeUint8(Encoding.latin1);
    buffer.writeUint32LE(input.length, 1);
    buffer.write(input, 5, 'latin1');
  } else {
    buffer.writeUint8(Encoding.utf16le);
    buffer.writeUint32LE(input.length * 2, 1);
    buffer.write(input, 5, 'utf16le');
  }
}
writeString('hello');
writeString('你好');
```

----------------------------------------

TITLE: Testing Invalid JavaScript Regex Literal (Unterminated Bracket with Hyphen)
DESCRIPTION: This JavaScript snippet represents an invalid regular expression literal `/[-/`. It defines an incomplete character set starting with `[` and containing a hyphen `-`, without a closing bracket `]`. This pattern is expected to throw a `SyntaxError: Invalid regular expression: missing /` during compilation, testing error handling for potentially malformed ranges within character sets.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/regexp-compile-crash-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
/[-/
```

----------------------------------------

TITLE: Declaring Bounded UTF-8 Length Sequence Internal Library - CMake
DESCRIPTION: Defines the bounded_utf8_length_sequence utility as a private header-only library for calculating legal UTF-8 sequences of bounded length. This snippet restricts both scope and dependencies, aiming for lightweight reuse in string codepoints handling without external linkage.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/debugging/CMakeLists.txt#2025-04-23_snippet_11

LANGUAGE: CMake
CODE:
```
absl_cc_library(
  NAME
    bounded_utf8_length_sequence
  HDRS
    "internal/bounded_utf8_length_sequence.h"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::bits
    absl::config
)
```

----------------------------------------

TITLE: console.table Output Snippet (Incomplete Array/Object) (JSON-like)
DESCRIPTION: An incomplete snippet showing the beginning of a `console.table` output for an array. The first element (index 0) is an object with properties 'c' (value 3) and 'b' (value 2). The snippet is truncated.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-table-expected.txt#2025-04-23_snippet_12

LANGUAGE: json
CODE:
```
{
    description : Array(2)
    overflow : false
    properties : [
        [0] : {
            name : 0
            type : object
            value : Object
            valuePreview : {
                description : Object
                overflow : false
                properties : [
                    [0] : {
                        name : c
                        type : number
                        value : 3
                    }
                    [1] : {
                        name : b
                        type : number
                        value : 2
                    }
                ]
                type : object
            }
        }
        [1] : {
```

----------------------------------------

TITLE: Testing Invalid Skip List (Negative Line) for Step Over
DESCRIPTION: This tests error handling for `stepOver` with an invalid skip list where the `start` location has a negative `lineNumber` (-1). Line numbers must be non-negative. The debugger should reject this invalid configuration, as shown by the following error 'Position missing \'line\' or \'line\' < 0.'
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-stepping-with-skiplist-expected.txt#2025-04-23_snippet_10

LANGUAGE: json
CODE:
```
[{"scriptId":"4","start":{"lineNumber":-1,"columnNumber":0},"end":{"lineNumber":0,"columnNumber":62}}]
```

----------------------------------------

TITLE: Creating an ID Selector Node with postcss-selector-parser in JavaScript
DESCRIPTION: Builds an ID selector node via parser.id, using a value for the id. Returns a selector node for '#search'. Used for AST construction or selector mutation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
parser.id({value: 'search'});
// => #search
```

----------------------------------------

TITLE: Accessing PATH Environment Variable on Windows
DESCRIPTION: Demonstrates logging the `PATH` environment variable on a Windows system, which typically uses semicolons (`;`) as delimiters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_12

LANGUAGE: js
CODE:
```
console.log(process.env.PATH);
// Prints: 'C:\Windows\system32;C:\Windows;C:\Program Files\node\'
```

----------------------------------------

TITLE: Adding a User to an npm Team using libnpmteam in Node.js
DESCRIPTION: Shows how to add a specified user to a specific npm team using the `team.add` function. Requires the username, team name, and potentially authentication options within the optional `opts` object (e.g., `opts.token`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmteam/README.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
await team.add('zkat', '@npm:cli', {token: 'myregistrytoken'})
// @zkat now belongs to the @npm:cli team.
```

----------------------------------------

TITLE: Instance Type Checking in Node-API
DESCRIPTION: Code showing how to check if an object is an instance of a specific class using Node-API instanceof checks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_176

LANGUAGE: c
CODE:
```
napi_value MyClass_constructor = NULL;
status = napi_get_reference_value(env, MyClass::es_constructor, &MyClass_constructor);
assert(napi_ok == status);
bool is_instance = false;
status = napi_instanceof(env, es_this, MyClass_constructor, &is_instance);
assert(napi_ok == status);
if (is_instance) {
  // napi_unwrap() ...
} else {
  // otherwise...
}
```

----------------------------------------

TITLE: Complex Promise Testing in JavaScript Debugger
DESCRIPTION: Tests complex promise chains with async/await and multiple function calls. The |_| markers indicate statement locations, |C| for function calls, and |R| marks return positions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/get-possible-breakpoints-main-expected.txt#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
async function testPromiseComplex() {
  var nextTest;
  var testPromise = |C|new Promise(resolve => nextTest |_|= resolve|R|);
  async function main() {
    async function foo() {
      |_|await Promise.|C|resolve();
      |_|return 42;|R|
    }
    var x = |_|1;
    var y = |_|2;
    |C|returnFunction(|C|emptyFunction(), x++, --y, x => 2 |_|* x|R|, |C|returnCall())|C|().a = await |C|foo((a => 2 |_|*a|R|)|C|(5));
    |C|nextTest();
  |R|}
  |C|main();
  |_|return testPromise;|R|
}
```

----------------------------------------

TITLE: Handling Incoming HTTP/2 Request Headers (CJS)
DESCRIPTION: Sets up an HTTP/2 server using `require('node:http2')`. It listens for the 'stream' event, which provides the `stream` object and the incoming `headers` object. The example logs specific header values. The incoming headers object has a `null` prototype. This is the CommonJS equivalent of the previous snippet.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_51

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');
const server = http2.createServer();
server.on('stream', (stream, headers) => {
  console.log(headers[':path']);
  console.log(headers.ABC);
});
```

----------------------------------------

TITLE: Creating Buffer View from ArrayBuffer Range with Buffer.from (Node.js)
DESCRIPTION: Demonstrates creating a `Buffer` view on a specific segment of an `ArrayBuffer` by providing `byteOffset` and `length` arguments. This method creates a buffer that represents only a part of the underlying memory of the original ArrayBuffer. Highlights examples for both MJS and CJS module systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_29

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const ab = new ArrayBuffer(10);
const buf = Buffer.from(ab, 0, 2);

console.log(buf.length);
// Prints: 2
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const ab = new ArrayBuffer(10);
const buf = Buffer.from(ab, 0, 2);

console.log(buf.length);
// Prints: 2
```

----------------------------------------

TITLE: Testing Invalid Combinations of ObjectId and Context Ids - JSON
DESCRIPTION: Represents error responses when mutually exclusive parameters (objectId, executionContextId, uniqueContextId) are provided together, violating API constraints. The error object contains a standardized message and error code (-32602) for each invalid combination, assisting in protocol error handling and tooling diagnostics.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/call-function-on-async-expected.txt#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
{
    error : {
        code : -32602
        message : ObjectId, executionContextId and uniqueContextId must mutually exclude each other
    }
    id : <messageId>
}
```

----------------------------------------

TITLE: Test Assertion: myFunction.aliasedCall with object context and argument
DESCRIPTION: Represents a passing test case for an aliased version of `.call()` (`aliasedCall`) on `myFunction`. It checks that calling `myFunction.aliasedCall(myObject, 'arg1')` behaves like `.call()`, setting `this` to `myObject` and passing `'arg1'`. Assumes `myFunction`, `myObject`, and the alias `aliasedCall` are defined.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-convert-this-dom-window-expected.txt#2025-04-23_snippet_5

LANGUAGE: text
CODE:
```
PASS myFunction.aliasedCall(myObject, 'arg1') is [myObject, "myFunction", "arg1"]
```

----------------------------------------

TITLE: Evaluating Private Methods with Runtime.evaluate - JavaScript
DESCRIPTION: This sequence evaluates access to a private method (#method) via Runtime.evaluate(), performing method access and invalid assignment/arithmetic. Direct property access returns a function object reference, while attempts to reassign, increment, or perform arithmetic result in errors, correctly enforcing that private methods are not writable.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-private-class-member-expected.txt#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
Runtime.evaluate: `obj.#method`
{
    className : Function
    description : #method() { return "method"; }
    objectId : <objectId>
    type : function
}
```

LANGUAGE: JavaScript
CODE:
```
Runtime.evaluate: `obj.#method = 1`
{
    className : Error
    description : Error: Private method '#method' is not writable     at <anonymous>:1:13
    objectId : <objectId>
    subtype : error
    type : object
}
```

LANGUAGE: JavaScript
CODE:
```
Runtime.evaluate: `obj.#method++`
{
    className : Error
    description : Error: Private method '#method' is not writable     at <anonymous>:1:12
    objectId : <objectId>
    subtype : error
    type : object
}
```

LANGUAGE: JavaScript
CODE:
```
Runtime.evaluate: `++obj.#method`
{
    className : Error
    description : Error: Private method '#method' is not writable     at <anonymous>:1:7
    objectId : <objectId>
    subtype : error
    type : object
}
```

LANGUAGE: JavaScript
CODE:
```
Runtime.evaluate: `obj.#method -= 3`
{
    className : Error
    description : Error: Private method '#method' is not writable     at <anonymous>:1:13
    objectId : <objectId>
    subtype : error
    type : object
}
```

----------------------------------------

TITLE: Executing Arbitrary Shell Commands with npx/npm exec (Bash)
DESCRIPTION: Demonstrates using the `-c` (or `--call`) option with `npm exec` (using its alias `npm x`) and `npx` to run arbitrary shell command strings within the context of the current project. This allows executing sequences of commands like linting and then announcing success.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npx.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
$ npm x -c 'eslint && say "hooray, lint passed"'
$ npx -c 'eslint && say "hooray, lint passed"'
```

----------------------------------------

TITLE: Testing Forward Slash Escaping in RegExp Patterns
DESCRIPTION: A series of tests that verify how forward slash characters are handled in regular expression patterns, ensuring proper escaping and matching behavior against various string inputs.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/regex/toString-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
testForwardSlash("^/$", "/"); is true
testForwardSlash("^/$", "/"); is true
testForwardSlash("^\/$", "/"); is true
testForwardSlash("^\\/$", "\/"); is true
testForwardSlash("^\\\/$", "\/"); is true
testForwardSlash("^\\\\/$", "\\/"); is true
testForwardSlash("^\\\\\/$", "\\/"); is true
testForwardSlash("x/x/x", "x\/x\/x"); is true
testForwardSlash("x\/x/x", "x\/x\/x"); is true
testForwardSlash("x/x\/x", "x\/x\/x"); is true
testForwardSlash("x\/x\/x", "x\/x\/x"); is true
```

----------------------------------------

TITLE: Adding Asynchronous Cleanup Hook in Node-API
DESCRIPTION: Registers an asynchronous cleanup hook to be called when the Node.js environment exits. This function allows for asynchronous cleanup operations and provides an optional handle for later removal.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_61

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_add_async_cleanup_hook(
    node_api_basic_env env,
    napi_async_cleanup_hook hook,
    void* arg,
    napi_async_cleanup_hook_handle* remove_handle);
```

----------------------------------------

TITLE: Implementing Bank Transfer Function with Undici Request in Node.js
DESCRIPTION: This snippet defines an async function 'bankTransfer' that uses Undici's request method to make a POST request to a bank transfer endpoint. It sends recipient and amount data in the request body and includes a secret token in the headers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/mocking-request.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// bank.mjs
import { request } from 'undici'

export async function bankTransfer(recipient, amount) {
  const { body } = await request('http://localhost:3000/bank-transfer',
    {
      method: 'POST',
      headers: {
        'X-TOKEN-SECRET': 'SuperSecretToken',
      },
      body: JSON.stringify({
        recipient,
        amount
      })
    }
  )
  return await body.json()
}
```

----------------------------------------

TITLE: Listing Node.js Exit Codes in Markdown
DESCRIPTION: This snippet enumerates and describes the different exit codes used by Node.js, including their numeric values and the circumstances under which they occur. It covers codes from 0 to 14, as well as codes greater than 128 for signal exits.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_101

LANGUAGE: markdown
CODE:
```
## Exit codes

Node.js will normally exit with a `0` status code when no more async
operations are pending. The following status codes are used in other
cases:

* `1` **Uncaught Fatal Exception**: There was an uncaught exception,
  and it was not handled by a domain or an [`'uncaughtException'`][] event
  handler.
* `2`: Unused (reserved by Bash for builtin misuse)
* `3` **Internal JavaScript Parse Error**: The JavaScript source code
  internal in the Node.js bootstrapping process caused a parse error. This
  is extremely rare, and generally can only happen during development
  of Node.js itself.
* `4` **Internal JavaScript Evaluation Failure**: The JavaScript
  source code internal in the Node.js bootstrapping process failed to
  return a function value when evaluated. This is extremely rare, and
  generally can only happen during development of Node.js itself.
* `5` **Fatal Error**: There was a fatal unrecoverable error in V8.
  Typically a message will be printed to stderr with the prefix `FATAL
  ERROR`.
* `6` **Non-function Internal Exception Handler**: There was an
  uncaught exception, but the internal fatal exception handler
  function was somehow set to a non-function, and could not be called.
* `7` **Internal Exception Handler Run-Time Failure**: There was an
  uncaught exception, and the internal fatal exception handler
  function itself threw an error while attempting to handle it. This
  can happen, for example, if an [`'uncaughtException'`][] or
  `domain.on('error')` handler throws an error.
* `8`: Unused. In previous versions of Node.js, exit code 8 sometimes
  indicated an uncaught exception.
* `9` **Invalid Argument**: Either an unknown option was specified,
  or an option requiring a value was provided without a value.
* `10` **Internal JavaScript Run-Time Failure**: The JavaScript
  source code internal in the Node.js bootstrapping process threw an error
  when the bootstrapping function was called. This is extremely rare,
  and generally can only happen during development of Node.js itself.
* `12` **Invalid Debug Argument**: The `--inspect` and/or `--inspect-brk`
  options were set, but the port number chosen was invalid or unavailable.
* `13` **Unsettled Top-Level Await**: `await` was used outside of a function
  in the top-level code, but the passed `Promise` never settled.
* `14` **Snapshot Failure**: Node.js was started to build a V8 startup
  snapshot and it failed because certain requirements of the state of
  the application were not met.
* `>128` **Signal Exits**: If Node.js receives a fatal signal such as
  `SIGKILL` or `SIGHUP`, then its exit code will be `128` plus the
  value of the signal code. This is a standard POSIX practice, since
  exit codes are defined to be 7-bit integers, and signal exits set
  the high-order bit, and then contain the value of the signal code.
  For example, signal `SIGABRT` has value `6`, so the expected exit
  code will be `128` + `6`, or `134`.
```

----------------------------------------

TITLE: Checking Report on Signal Setting in Node.js
DESCRIPTION: This snippet shows how to check if diagnostic reports are generated on specific signals using the process.report.reportOnSignal property in both ECMAScript modules and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_77

LANGUAGE: JavaScript
CODE:
```
import { report } from 'node:process';

console.log(`Report on signal: ${report.reportOnSignal}`);
```

LANGUAGE: JavaScript
CODE:
```
const { report } = require('node:process');

console.log(`Report on signal: ${report.reportOnSignal}`);
```

----------------------------------------

TITLE: Creating a Nesting Selector Node with postcss-selector-parser in JavaScript
DESCRIPTION: Instantiates a nesting selector node (represented by '&') using parser.nesting. Supports custom properties via an option argument. No input yields '&'. For building nested selectors in CSS preprocessors.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
parser.nesting();
// => &
```

----------------------------------------

TITLE: Passing Arguments to Event Listeners in Node.js (CommonJS)
DESCRIPTION: This example shows how to pass arguments to event listeners and demonstrates the behavior of 'this' within listener functions using CommonJS modules. It illustrates that 'this' refers to the EventEmitter instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', function(a, b) {
  console.log(a, b, this, this === myEmitter);
  // Prints:
  //   a b MyEmitter {
  //     _events: [Object: null prototype] { event: [Function (anonymous)] },
  //     _eventsCount: 1,
  //     _maxListeners: undefined,
  //     Symbol(shapeMode): false,
  //     Symbol(kCapture): false
  //   } true
});
myEmitter.emit('event', 'a', 'b');
```

----------------------------------------

TITLE: Debugging Pause Point at Wasm Function End (kExprEnd)
DESCRIPTION: This line from the test output indicates that the debugger has paused execution within compiled WebAssembly code. The pause occurs specifically at byte offset 53 of the Wasm module, corresponding to the `kExprEnd` opcode (0x0b), typically signifying the end of a function or block.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-stepping-out-from-js-expected.txt#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
Script wasm://wasm/15df010e byte offset 53: Wasm opcode 0x0b (kExprEnd)
```

----------------------------------------

TITLE: Configuring Custom TLS Cipher List
DESCRIPTION: Examples of setting custom TLS cipher lists using command-line arguments and environment variables.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
node --tls-cipher-list='ECDHE-RSA-AES128-GCM-SHA256:!RC4' server.js

export NODE_OPTIONS=--tls-cipher-list='ECDHE-RSA-AES128-GCM-SHA256:!RC4'
node server.js
```

----------------------------------------

TITLE: Creating UTF8 Strings in N-API
DESCRIPTION: Function that creates a JavaScript string value from a UTF8-encoded C string. The native string is copied. Takes environment, string pointer, length, and outputs a JavaScript string value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_100

LANGUAGE: c
CODE:
```
napi_status napi_create_string_utf8(napi_env env,
                                    const char* str,
                                    size_t length,
                                    napi_value* result)
```

----------------------------------------

TITLE: Zstandard Compression Functions
DESCRIPTION: Experimental functions for compression using Zstandard algorithm. Provides both async (zstdCompress) and sync (zstdCompressSync) methods with customizable options.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_26

LANGUAGE: JavaScript
CODE:
```
zlib.zstdCompress(buffer[, options], callback)
zlib.zstdCompressSync(buffer[, options])
```

----------------------------------------

TITLE: Generating a SEA Preparation Blob with Node.js
DESCRIPTION: Uses the Node.js experimental SEA config flag to generate a preparation blob based on the configuration file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
node --experimental-sea-config sea-config.json
```

----------------------------------------

TITLE: Enabling AsyncHook in Node.js (ES Modules)
DESCRIPTION: Demonstrates how to create and enable an AsyncHook instance using ES Modules syntax in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import { createHook } from 'node:async_hooks';

const hook = createHook(callbacks).enable();
```

----------------------------------------

TITLE: Accessing Fast API Function from JavaScript
DESCRIPTION: JavaScript code that imports a Fast API function from a Node.js internal binding. This shows how JavaScript code would access the optimized C++ function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/adding-v8-fast-api.md#2025-04-23_snippet_2

LANGUAGE: js
CODE:
```
const { divide } = internalBinding('custom_namespace');
```

----------------------------------------

TITLE: Coercing JavaScript Value to String in Node-API
DESCRIPTION: Function to implement ECMAScript ToString() operation for converting values to string type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_130

LANGUAGE: c
CODE:
```
napi_status napi_coerce_to_string(napi_env env,
                                  napi_value value,
                                  napi_value* result)
```

----------------------------------------

TITLE: Testing Invalid Superclass Types in JavaScript
DESCRIPTION: This snippet tests the behavior when extending from invalid types like primitives or objects without a valid prototype.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/class-syntax-extends-expected.txt#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
PASS x = class extends 3 { constructor() { } }; x.__proto__ threw exception TypeError: Class extends value 3 is not a constructor or null.
PASS x = class extends "abc" { constructor() { } }; x.__proto__ threw exception TypeError: Class extends value abc is not a constructor or null.
PASS baseWithBadPrototype = function () {}; baseWithBadPrototype.prototype = 3; new baseWithBadPrototype did not throw exception.
PASS x = class extends baseWithBadPrototype { constructor() { } } threw exception TypeError: Class extends value does not have valid prototype property 3.
```

----------------------------------------

TITLE: Accessing Loop Member in uv_work_t Struct for libuv
DESCRIPTION: Defines the loop member of the uv_work_t struct, which represents the event loop that started the work request.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/threadpool.rst#2025-04-23_snippet_3

LANGUAGE: c
CODE:
```
.. c:member:: uv_loop_t* uv_work_t.loop
```

----------------------------------------

TITLE: Getting URL of Active Inspector
DESCRIPTION: Examples showing how to retrieve the URL of the active inspector using inspector.url() method. The examples demonstrate different scenarios, including when the inspector is not active.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/inspector.md#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
$ node --inspect -p 'inspector.url()'
Debugger listening on ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34
For help, see: https://nodejs.org/en/docs/inspector
ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34

$ node --inspect=localhost:3000 -p 'inspector.url()'
Debugger listening on ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a
For help, see: https://nodejs.org/en/docs/inspector
ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a

$ node -p 'inspector.url()'
undefined
```

----------------------------------------

TITLE: Running an HTTP server within a VM context
DESCRIPTION: This example shows how to run an HTTP server within a VM context. It demonstrates passing the require function to the code executed in the VM, allowing the code to access and use Node.js modules while maintaining isolation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
'use strict';
const vm = require('node:vm');

const code = `
((require) => {
  const http = require('node:http');

  http.createServer((request, response) => {
    response.writeHead(200, { 'Content-Type': 'text/plain' });
    response.end('Hello World\\n');
  }).listen(8124);

  console.log('Server running at http://127.0.0.1:8124/');
})`;

vm.runInThisContext(code)(require);
```

----------------------------------------

TITLE: Retrieving External Data Pointer in N-API
DESCRIPTION: Retrieves the external data pointer previously wrapped in a JavaScript value via napi_create_external(). Returns napi_invalid_arg if input is not an external value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_116

LANGUAGE: c
CODE:
```
napi_status napi_get_value_external(napi_env env,
                                    napi_value value,
                                    void** result)
```

----------------------------------------

TITLE: Invoking a Function's Own `call` Property/Method in JavaScript
DESCRIPTION: Executes the `call` property/method directly on the `myFunctionWithCall` function object itself, passing `myObject` and `'arg1'` as arguments *to that specific `call` method*. The `this` context inside *that* `call` method is `myFunctionWithCall`. The output `[myFunctionWithCall, \"myFunctionWithCall.call\", myObject]` likely indicates the context and arguments received by this specific `call` implementation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-convert-this-dom-window-expected.txt#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
myFunctionWithCall.call(myObject, 'arg1')
```

----------------------------------------

TITLE: Performing a Standard Function Call in JavaScript
DESCRIPTION: Executes `myFunction` directly (a standard function invocation), passing `'arg1'` as an argument. The `this` context depends on how `myFunction` was defined and called (global object in non-strict mode for simple invocations, `undefined` in strict mode/modules). The output `[this, \"myFunction\", \"arg1\"]` shows the resulting `this` context, function name, and the argument.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-convert-this-dom-window-expected.txt#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
myFunction('arg1')
```

----------------------------------------

TITLE: Dumping Custom Preview Header with Null Body Test - JSON
DESCRIPTION: Sets up a test preview header that intentionally triggers a preview body expected to be null (nullBodyTest). Used to verify that the protocol and formatting layer correctly handle null or missing values, acting as a negative test case. Requires the custom preview mechanism to support null body inspection.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/custom-preview-expected.txt#2025-04-23_snippet_5

LANGUAGE: JSON
CODE:
```
{\n    bodyGetterId : <bodyGetterId>\n    header : [\n        [0] : span\n        [1] : {\n        }\n        [2] : Null body: \n        [3] : nullBodyTest\n    ]\n}
```

----------------------------------------

TITLE: Testing Resolved Promise Return by Value - JSON
DESCRIPTION: Shows the response format for testing return of resolved promise values with 'returnByValue'. Here, the resolved promise output is an object with key 'a' set to 3. This confirms correct unwrapping of promise results by the runtime. Input: function returning Promise.resolve({a: 3}). Output: result object with value field.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/call-function-on-async-expected.txt#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            type : object
            value : {
                a : 3
            }
        }
    }
}
```

----------------------------------------

TITLE: Demonstrating GC Profiler Usage in Node.js
DESCRIPTION: This snippet shows how to use the GCProfiler class to collect garbage collection data. It creates a profiler instance, starts profiling, waits for 1 second, then stops profiling and logs the results.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
const { GCProfiler } = require('node:v8');
const profiler = new GCProfiler();
profiler.start();
setTimeout(() => {
  console.log(profiler.stop());
}, 1000);
```

----------------------------------------

TITLE: Checking TLS Session Resumption using OpenSSL
DESCRIPTION: Command to verify TLS session resumption with OpenSSL client, showing how to test if a server is properly resuming TLS sessions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
openssl s_client -connect localhost:443 -reconnect
```

----------------------------------------

TITLE: Creating a Node.js Buffer - Node-API - C
DESCRIPTION: Declares a function to allocate a new node::Buffer object with a specified size. Outputs a napi_value pointing to the Buffer and an optional data pointer to its underlying memory. This is an alternative to TypedArray for storing binary data, but TypedArrays are preferred for most use-cases. Requires a napi_env and returns napi_ok on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_77

LANGUAGE: c
CODE:
```
napi_status napi_create_buffer(napi_env env,
                               size_t size,
                               void** data,
                               napi_value* result)
```

----------------------------------------

TITLE: Iterator Internal State Structure in Node.js
DESCRIPTION: A JSON representation of an iterator's internal state, showing properties like [[IteratorHasMore]], [[IteratorIndex]], [[IteratorKind]], and [[Entries]]. This structure exposes the internal slots of a JavaScript iterator object during debugging.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/internal-properties-expected.txt#2025-04-23_snippet_14

LANGUAGE: json
CODE:
```
                name : [[IteratorHasMore]]
                value : {
                    type : boolean
                    value : true
                }
            }
            [2] : {
                name : [[IteratorIndex]]
                value : {
                    description : 0
                    type : number
                    value : 0
                }
            }
            [3] : {
                name : [[IteratorKind]]
                value : {
                    type : string
                    value : entries
                }
            }
            [4] : {
                name : [[Entries]]
                value : {
                    className : Array
                    description : Array(1)
                    objectId : <objectId>
                    subtype : array
                    type : object
                }
            }
        ]
    }
}
```

----------------------------------------

TITLE: Defining Leak Check Test Target - CMake
DESCRIPTION: Establishes a leak_check test suite for leak detection mechanisms, specifying core logging, base support, and using GTest for assertions. Ensures the leak_check library provides accurate memory diagnostics when enabled.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/debugging/CMakeLists.txt#2025-04-23_snippet_20

LANGUAGE: CMake
CODE:
```
absl_cc_test(
  NAME
    leak_check_test
  SRCS
    "leak_check_test.cc"
  COPTS
    ${ABSL_TEST_COPTS}
  LINKOPTS
    ${ABSL_DEFAULT_LINKOPTS}
  DEPS
    absl::leak_check
    absl::base
    absl::log
    GTest::gmock_main
)
```

----------------------------------------

TITLE: Demonstrating Nested Node.js Tests Filtering - Javascript
DESCRIPTION: Provides an example of a Node.js test file using nested `test` calls to illustrate how the `--test-name-pattern` command-line option filters test execution based on names and their position within the nesting hierarchy. This snippet shows a common structure for testing features.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_10

LANGUAGE: Javascript
CODE:
```
test('test 1', async (t) => {
  t.test('test 2');
  t.test('test 3');
});

test('Test 4', async (t) => {
  t.test('Test 5');
  t.test('test 6');
});
```

----------------------------------------

TITLE: Comparing Execution Order of Microtasks and NextTick in Node.js CJS
DESCRIPTION: This snippet demonstrates the execution order of promise handlers (`.then`), `queueMicrotask` callbacks, and `process.nextTick` callbacks within a CommonJS module context in Node.js. It highlights that `process.nextTick` callbacks execute before promise handlers and `queueMicrotask` callbacks in CJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_61

LANGUAGE: cjs
CODE:
```
const { nextTick } = require('node:process');

Promise.resolve().then(() => console.log('resolve'));
queueMicrotask(() => console.log('microtask'));
nextTick(() => console.log('nextTick'));
// Output:
// nextTick
// resolve
// microtask
```

----------------------------------------

TITLE: Defining Stack Consumption Test Target - CMake
DESCRIPTION: Introduces tests for the stack_consumption module, confirming correct measurement and monitoring of stack growth under various call depth scenarios. GTest is used for test execution, and core dependencies are included for completeness.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/debugging/CMakeLists.txt#2025-04-23_snippet_22

LANGUAGE: CMake
CODE:
```
absl_cc_test(
  NAME
    stack_consumption_test
  SRCS
    "internal/stack_consumption_test.cc"
  COPTS
    ${ABSL_TEST_COPTS}
  DEPS
    absl::stack_consumption
    absl::core_headers
    absl::log
    GTest::gmock_main
)
```

----------------------------------------

TITLE: Configuring Scoped Authentication in npmrc
DESCRIPTION: This example demonstrates how to properly configure authentication tokens for different registries and scopes in the .npmrc file. It shows both incorrect and correct ways to set up authentication for multiple registries and organizations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/npmrc.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
; bad config
_authToken=MYTOKEN

; good config
@myorg:registry=https://somewhere-else.com/myorg
@another:registry=https://somewhere-else.com/another
//registry.npmjs.org/:_authToken=MYTOKEN

; would apply to both @myorg and @another
//somewhere-else.com/:_authToken=MYTOKEN

; would apply only to @myorg
//somewhere-else.com/myorg/:_authToken=MYTOKEN1

; would apply only to @another
//somewhere-else.com/another/:_authToken=MYTOKEN2
```

----------------------------------------

TITLE: Setting Local HTTP/2 Window Size - CJS
DESCRIPTION: This CommonJS snippet demonstrates how to set the local endpoint's HTTP/2 window size for a session on the server side using `require('node:http2')`. It shows listening for the 'session' event on the server and calling `setLocalWindowSize()` on the created session, similar to the MJS example.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_6

LANGUAGE: cjs
CODE:
```
const http2 = require('node:http2');

const server = http2.createServer();
const expectedWindowSize = 2 ** 20;
server.on('session', (session) => {

  // Set local window size to be 2 ** 20
  session.setLocalWindowSize(expectedWindowSize);
});
```

----------------------------------------

TITLE: Defining zlib Library Targets
DESCRIPTION: Creates shared and static library targets for zlib, setting properties like DEFINE_SYMBOL and SOVERSION. Configures Intel QAT compression support if enabled.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/zlib/CMakeLists.txt#2025-04-23_snippet_21

LANGUAGE: CMake
CODE:
```
add_library(zlib SHARED ${ZLIB_SRCS} ${ZLIB_DLL_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
add_library(zlibstatic STATIC ${ZLIB_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
set_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)
set_target_properties(zlib PROPERTIES SOVERSION 1)

if (ENABLE_INTEL_QAT_COMPRESSION)
    target_include_directories(zlib PUBLIC ${QATZPP_INCLUDE_DIRS})
    target_link_libraries(zlib ${QATZPP_LIBRARY})
    target_link_libraries(zlib qat)
    target_include_directories(zlibstatic PUBLIC ${QATZPP_INCLUDE_DIRS})
    target_link_libraries(zlibstatic ${QATZPP_LIBRARY})
    target_link_libraries(zlibstatic qat)
endif()
```

----------------------------------------

TITLE: Using Repository Shorthand Syntax in package.json (JSON)
DESCRIPTION: This example showcases various shorthand syntaxes for the `repository` field in `package.json`, simplifying the specification for common hosting platforms like GitHub (`npm/example`, `github:npm/example`), Gist (`gist:11081aaa281`), Bitbucket (`bitbucket:user/repo`), and GitLab (`gitlab:user/repo`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_12

LANGUAGE: json
CODE:
```
{
  "repository": "npm/example",

  "repository": "github:npm/example",

  "repository": "gist:11081aaa281",

  "repository": "bitbucket:user/repo",

  "repository": "gitlab:user/repo"
}
```

----------------------------------------

TITLE: Generating Inspector Preview for Object with BigInt Property
DESCRIPTION: Evaluates a Javascript object literal containing a property 'a1' with a BigInt value. The evaluation options specify not returning by value (`returnByValue: false`) but generating a preview (`generatePreview: true`). The resulting JSON shows the object ID and a preview indicating a 'bigint' property named 'a1' with its string representation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_61

LANGUAGE: javascript
CODE:
```
'({a1: 1234567890123456789012345678901234567890n})', returnByValue: false, generatePreview: true
```

LANGUAGE: json
CODE:
```
{
    id : <messageId>,
    result : {
        result : {
            className : Object,
            description : Object,
            objectId : <objectId>,
            preview : {
                description : Object,
                overflow : false,
                properties : [
                    [0] : {
                        name : a1,
                        type : bigint,
                        value : 1234567890123456789012345678901234567890n
                    }
                ],
                type : object
            },
            type : object
        }
    }
}
```

----------------------------------------

TITLE: Creating Custom Error Class - JavaScript
DESCRIPTION: Defines a new error class named CustomError extending the built-in Error, creates an instance, removes its stack property, and returns the object. Requires ES6 support for class and extends syntax. Input: none; Output: instance of CustomError with no stack. Used to test error object subclassing and stack manipulation limitations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_28

LANGUAGE: JavaScript
CODE:
```
class CustomError extends Error {};
a = new CustomError();
delete a.stack;
a
```

----------------------------------------

TITLE: Testing Object Groups in Node.js Debugger
DESCRIPTION: Tests object group management in the debugger, showing how releasing an object group impacts all objects in that group.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-return-values-expected.txt#2025-04-23_snippet_12

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            className : Object
            description : Object
            objectId : <objectId>
            type : object
        }
    }
}
{
    id : <messageId>
    result : {
        result : {
            className : Object
            description : Object
            objectId : <objectId>
            type : object
        }
    }
}
{
    error : {
        code : -32000
        message : Could not find object with given id
    }
    id : <messageId>
}
{
    id : <messageId>
    result : {
        result : {
            className : Object
            description : Object
            objectId : <objectId>
            type : object
        }
    }
}
{
    error : {
        code : -32000
        message : Could not find object with given id
    }
    id : <messageId>
}
{
    error : {
        code : -32000
        message : Could not find object with given id
    }
    id : <messageId>
}
```

----------------------------------------

TITLE: Generating Inspector Preview for Object with Arrow Function Property
DESCRIPTION: Evaluates a Javascript object literal containing an arrow function property 'a'. The evaluation options specify not returning by value (`returnByValue: false`) but generating a preview (`generatePreview: true`). The resulting JSON shows the object ID and a preview indicating a 'function' property named 'a' without a specific value displayed in the preview.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_57

LANGUAGE: javascript
CODE:
```
'({a: () => 42})', returnByValue: false, generatePreview: true
```

LANGUAGE: json
CODE:
```
{
    id : <messageId>,
    result : {
        result : {
            className : Object,
            description : Object,
            objectId : <objectId>,
            preview : {
                description : Object,
                overflow : false,
                properties : [
                    [0] : {
                        name : a,
                        type : function,
                        value : 
                    }
                ],
                type : object
            },
            type : object
        }
    }
}
```

----------------------------------------

TITLE: Building libuv Shared Library in CMake
DESCRIPTION: Configures the shared library build for libuv, setting up compile definitions, include directories, linking libraries, and output name properties.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/CMakeLists.txt#2025-04-23_snippet_9

LANGUAGE: CMake
CODE:
```
if(LIBUV_BUILD_SHARED)
  add_library(uv SHARED ${uv_sources})
  target_compile_definitions(uv
    INTERFACE
      USING_UV_SHARED=1
    PRIVATE
      BUILDING_UV_SHARED=1
      ${uv_defines})
  target_compile_options(uv PRIVATE ${uv_cflags})
  target_include_directories(uv
    PUBLIC
      $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
      $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
    PRIVATE
      $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>)
  if(CMAKE_SYSTEM_NAME STREQUAL "OS390")
    target_include_directories(uv PUBLIC $<BUILD_INTERFACE:${ZOSLIB_DIR}/include>)
    set_target_properties(uv PROPERTIES LINKER_LANGUAGE CXX)
  endif()
  target_link_libraries(uv ${uv_libraries})
  set_target_properties(uv PROPERTIES OUTPUT_NAME "uv")
endif()
```

----------------------------------------

TITLE: Implementing Inheritance with ES6 Classes (CJS Alternative)
DESCRIPTION: Demonstrates the modern ES6 approach to inheritance using `class` and `extends` keywords within a CommonJS module. It shows `MyStream` extending `EventEmitter`, requiring the base class using `require`. This is the recommended alternative to `util.inherits`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_17

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');

class MyStream extends EventEmitter {
  write(data) {
    this.emit('data', data);
  }
}

const stream = new MyStream();

stream.on('data', (data) => {
  console.log(`Received data: "${data}"`);
});
stream.write('With ES6');
```

----------------------------------------

TITLE: Testing V8 Number Cell Reuse Test Cases
DESCRIPTION: Series of test assertions verifying number cell reuse behavior in V8 engine with different combinations of operands including constants, simple expressions, complex expressions, and 'this' context values.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/number-cell-reuse-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
PASS leftConstantRightSimple(2) is 0.4
PASS leftConstantRightComplex(1) is 0.2
PASS leftSimpleRightConstant(2) is 0.4
PASS leftComplexRightConstant(1) is 0.2
PASS leftThisRightSimple(2) is NaN
PASS leftThisRightSimple.call(2, 2) is 8
PASS leftThisRightComplex(2) is NaN
PASS leftThisRightComplex.call(2, 2) is 12
PASS leftSimpleRightThis(2) is NaN
PASS leftSimpleRightThis.call(2, 2) is 8
PASS leftComplexRightThis(2) is NaN
PASS leftComplexRightThis.call(2, 2) is 12
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Profiler Coverage Test Results - Precise Count Coverage
DESCRIPTION: Coverage data showing function-level statistics including function names, block coverage status, and execution count ranges. Contains detailed coverage information for multiple functions including 'fib', 'is_optimized', and 'iife'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/cpu-profiler/coverage-expected.txt#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : [
            [0] : {
                functions : [
                    [0] : {
                        functionName : 
                        isBlockCoverage : false
                        ranges : [
                            [0] : {
                                count : 1
                                endOffset : 221
                                startOffset : 0
                            }
                        ]
                    }
                ]
                scriptId : <scriptId>
                url : testPreciseCountCoverage
            }
        ]
        timestamp : <timestamp>
    }
}
```

----------------------------------------

TITLE: Managing Stream Flow Mode in Node.js
DESCRIPTION: Shows how to manipulate a PassThrough stream's flowing state by using pipe, unpipe, and event handlers. This example demonstrates how the readableFlowing property behaves when different methods are called.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_26

LANGUAGE: javascript
CODE:
```
const { PassThrough, Writable } = require('node:stream');
const pass = new PassThrough();
const writable = new Writable();

pass.pipe(writable);
pass.unpipe(writable);
// readableFlowing is now false.

pass.on('data', (chunk) => { console.log(chunk.toString()); });
// readableFlowing is still false.
pass.write('ok');  // Will not emit 'data'.
pass.resume();     // Must be called to make stream emit 'data'.
// readableFlowing is now true.
```

----------------------------------------

TITLE: Configuring Static Library Target for nghttp2
DESCRIPTION: Creates and configures the static library target for nghttp2 with version information and include directories. Specifically adds the NGHTTP2_STATICLIB definition for static linking.
SOURCE: https://github.com/nodejs/node/blob/main/deps/nghttp2/lib/CMakeLists.txt#2025-04-23_snippet_4

LANGUAGE: CMake
CODE:
```
# Static library (for unittests because of symbol visibility)
if(BUILD_STATIC_LIBS)
  add_library(${STATIC_LIB} STATIC ${NGHTTP2_SOURCES})

  set_target_properties(${STATIC_LIB} PROPERTIES
    COMPILE_FLAGS "${WARNCFLAGS}"
    VERSION ${LT_VERSION} SOVERSION ${LT_SOVERSION}
    ARCHIVE_OUTPUT_NAME nghttp2${STATIC_LIB_SUFFIX}
  )

  target_include_directories(${STATIC_LIB} INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/includes>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/includes>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
  )

  target_compile_definitions(${STATIC_LIB} PUBLIC "-DNGHTTP2_STATICLIB")

  install(TARGETS ${STATIC_LIB} EXPORT ${EXPORT_SET})
  list(APPEND nghttp2_exports ${STATIC_LIB})
endif()
```

----------------------------------------

TITLE: Initializing readlinePromises.Interface using ES Modules in Node.js
DESCRIPTION: Demonstrates how to create an instance of `readlinePromises.Interface` using ES Module (`import`) syntax. It requires importing `createInterface` from `node:readline/promises` and `stdin`, `stdout` from `node:process`. An options object specifying the `input` and `output` streams is passed to `createInterface`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_18

LANGUAGE: mjs
CODE:
```
import { createInterface } from 'node:readline/promises';
import { stdin, stdout } from 'node:process';
const rl = createInterface({
  input: stdin,
  output: stdout,
});
```

----------------------------------------

TITLE: Custom Preview Null Body Response - JSON
DESCRIPTION: Captures the protocol response indicating that the custom preview produced a null body, confirming correct null propagation. The object value and subtype should be null for validating correct handling of non-existent preview data. This edge-case check is crucial for formatter and protocol robustness.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/custom-preview-expected.txt#2025-04-23_snippet_6

LANGUAGE: JSON
CODE:
```
{\n    id : <messageId>\n    result : {\n        result : {\n            subtype : null\n            type : object\n            value : null\n        }\n    }\n}
```

----------------------------------------

TITLE: Integrating llhttp as a Shared Library using CMake (CMake)
DESCRIPTION: CMake code snippet demonstrating how to fetch and integrate the llhttp library as a shared library into a project using `FetchContent`. It declares llhttp using its release tarball URL, makes it available, and links the `llhttp_shared` target to the example project target.
SOURCE: https://github.com/nodejs/node/blob/main/deps/llhttp/README.md#2025-04-23_snippet_17

LANGUAGE: cmake
CODE:
```
FetchContent_Declare(llhttp
  URL "https://github.com/nodejs/llhttp/archive/refs/tags/release/v8.1.0.tar.gz")

FetchContent_MakeAvailable(llhttp)

# Link with the llhttp_shared target
target_link_libraries(${EXAMPLE_PROJECT_NAME} ${PROJECT_LIBRARIES} llhttp_shared ${PROJECT_NAME})
```

----------------------------------------

TITLE: Inspecting Regular Proxy Internal Properties in Node.js
DESCRIPTION: JSON response showing the internal properties of a regular Proxy object, including the handler, target, and revocation status. The response contains empty result array for actual properties.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/get-properties-on-proxy-expected.txt#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        internalProperties : [
            [0] : {
                name : [[Handler]]
                value : {
                    className : Object
                    description : Object
                    objectId : <objectId>
                    type : object
                }
            }
            [1] : {
                name : [[Target]]
                value : {
                    className : Object
                    description : Object
                    objectId : <objectId>
                    type : object
                }
            }
            [2] : {
                name : [[IsRevoked]]
                value : {
                    type : boolean
                    value : false
                }
            }
        ]
        result : [
        ]
    }
}
```

----------------------------------------

TITLE: Expected Output: Runtime.evaluate (Calling Out) with disableBreaks: false (Paused)
DESCRIPTION: Represents the expected result for a Runtime.evaluate scenario involving calling out (potentially to native code or another context) with 'disableBreaks' set to false. The preceding 'paused' indicates a breakpoint is expected to trigger. The result shows an 'undefined' evaluation outcome.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-with-disable-breaks-expected.txt#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            type : undefined
        }
    }
}
```

----------------------------------------

TITLE: Checking Register Consistency in Do-While Loop - JavaScript
DESCRIPTION: This more complex snippet verifies that property access and loop iteration do not interfere with register caching by repeatedly assigning a property value within a do-while loop. It expects the property 'c' to remain true across iterations, confirming loop invariance and register correctness.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/registerCachingAcrossBranchTargets-expected.txt#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
PASS (function(){ var i = 0; var result = false; var a = {c:true}.c; do { result = a; i++; } while (i < 2); return result; })() is true
```

----------------------------------------

TITLE: Windows Batch File Execution (CommonJS)
DESCRIPTION: Shows different methods of executing .bat and .cmd files on Windows using both exec and spawn methods with shell option. Includes handling of filenames with spaces.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_2

LANGUAGE: cjs
CODE:
```
const { exec, spawn } = require('node:child_process');

exec('my.bat', (err, stdout, stderr) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log(stdout);
});

// Script with spaces in the filename:
const bat = spawn('"my script.cmd" a b', { shell: true });
// or:
exec('"my script.cmd" a b', (err, stdout, stderr) => {
  // ...
});
```

----------------------------------------

TITLE: Testing JavaScript Arrow Operator with Comments
DESCRIPTION: A series of test cases verifying how JavaScript handles the arrow operator (-->) in different contexts, particularly when combined with single-line and multi-line comments. The tests check for proper syntax error handling and undefined behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/parser-xml-close-comment-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
PASS 'should be a syntax error' --> threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS /**/ 1 --> threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS 1 /**/ --> threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS 1/*
*/--> is 1
PASS --> is undefined.
PASS /**/--> is undefined.
PASS /*
*/--> is undefined.
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Testing Array Access Pattern with Modular Indexing
DESCRIPTION: Test output validating array access patterns between two arrays using modulo 4 indexing and sequential value checks. The doAccesses function compares values between array1 and array2 with cycling indices.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-get-by-val-clobber-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
doAccesses(array1, array2, i % 4, (i + 1) % 4, i)
array2[index]
doAccesses(array1, array1, i % 4, 0, i)
```

----------------------------------------

TITLE: Escaping CSS Strings with cssesc Function - JavaScript
DESCRIPTION: This JavaScript code demonstrates using the cssesc() function to escape characters in input strings for use in CSS. Characters outside the printable ASCII set are automatically escaped. No special options are specified, so the default string escaping (not identifier) is used. Outputs a CSS-safe string.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cssesc/README.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
cssesc('Ich ♥ Bücher');
// → 'Ich \\2665  B\\FC cher'

cssesc('foo 𝌆 bar');
// → 'foo \\1D306  bar'
```

----------------------------------------

TITLE: Validating HTTP Header Values in ES Modules
DESCRIPTION: Demonstrates how to use the validateHeaderValue function to check header values for validity. The example shows two error cases: undefined values and values with invalid characters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_64

LANGUAGE: mjs
CODE:
```
import { validateHeaderValue } from 'node:http';

try {
  validateHeaderValue('x-my-header', undefined);
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code === 'ERR_HTTP_INVALID_HEADER_VALUE'); // --> true
  console.error(err.message); // --> 'Invalid value "undefined" for header "x-my-header"'
}

try {
  validateHeaderValue('x-my-header', 'oʊmɪɡə');
} catch (err) {
  console.error(err instanceof TypeError); // --> true
  console.error(err.code === 'ERR_INVALID_CHAR'); // --> true
  console.error(err.message); // --> 'Invalid character in header content ["x-my-header"]'
}
```

----------------------------------------

TITLE: Exception Details with Runtime Enabled (Full Stack Trace)
DESCRIPTION: JSON output from the `testErrorStackTraceLimitWithRuntimeEnabled` test run. When the runtime debugger is enabled, the output includes a detailed `stackTrace` object containing an array of `callFrames`. This structure provides granular information about each function call leading to the exception, up to the default or configured `Error.stackTraceLimit`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/error-stack-trace-limit-expected.txt#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        exceptionDetails : {
            columnNumber : 4
            exception : {
                className : Error
                description : Error: Thrown from foo!     at test.js:9:11     at recurse (test.js:4:10)
                objectId : <objectId>
                subtype : error
                type : object
            }
            exceptionId : <exceptionId>
            lineNumber : 8
            scriptId : <scriptId>
            stackTrace : {
                callFrames : [
                    [0] : {
                        columnNumber : 10
                        functionName :
                        lineNumber : 8
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [1] : {
                        columnNumber : 9
                        functionName : recurse
                        lineNumber : 3
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [2] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [3] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [4] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [5] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [6] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [7] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [8] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [9] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [10] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [11] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [12] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [13] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [14] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [15] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [16] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [17] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [18] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [19] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [20] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [21] : {
                        columnNumber : 22
                        functionName : recurse
                        lineNumber : 2
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [22] : {
                        columnNumber : 2
                        functionName : foo
                        lineNumber : 7
                        scriptId : <scriptId>
                        url : test.js
                    }
                    [23] : {
                        columnNumber : 0
                        functionName :
                        lineNumber : 0
                        scriptId : <scriptId>
                        url :
                    }
                ]
            }
            text : Uncaught
        }
        result : {
            className : Error
            description : Error: Thrown from foo!     at test.js:9:11     at recurse (test.js:4:10)
            objectId : <objectId>
            subtype : error
            type : object
        }
    }
}
```

----------------------------------------

TITLE: Creating Predefined Diffie-Hellman Group in Node.js Crypto Module
DESCRIPTION: The crypto.getDiffieHellman function creates a predefined DiffieHellmanGroup key exchange object. It demonstrates obtaining a shared secret between two parties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_75

LANGUAGE: JavaScript
CODE:
```
const {
  getDiffieHellman,
} = await import('node:crypto');
const alice = getDiffieHellman('modp14');
const bob = getDiffieHellman('modp14');

alice.generateKeys();
bob.generateKeys();

const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');
const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');

/* aliceSecret and bobSecret should be the same */
console.log(aliceSecret === bobSecret);
```

LANGUAGE: JavaScript
CODE:
```
const {
  getDiffieHellman,
} = require('node:crypto');

const alice = getDiffieHellman('modp14');
const bob = getDiffieHellman('modp14');

alice.generateKeys();
bob.generateKeys();

const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');
const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');

/* aliceSecret and bobSecret should be the same */
console.log(aliceSecret === bobSecret);
```

----------------------------------------

TITLE: QUIC Session Options Configuration
DESCRIPTION: Configuration options for QUIC sessions including TLS settings, timeouts, and transport parameters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/quic.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
const sessionOptions = {
  qlog: true,                         // Enable qlog output
  sessionTicket: arrayBufferView,     // Session ticket for 0RTT resumption
  handshakeTimeout: 5000n,            // TLS handshake timeout in milliseconds
  sni: "example.com",                // Target server name
  tlsTrace: false,                    // TLS tracing output flag
  transportParams: {},                // QUIC transport parameters
  unacknowledgedPacketThreshold: 100, // Max unacknowledged packets allowed
  verifyClient: true,                 // Require TLS client certificate verification
  verifyPrivateKey: true,             // Enable private key verification
  version: 1                          // QUIC version number
}
```

----------------------------------------

TITLE: Accessing OpenSSL Engine Constants in Node.js
DESCRIPTION: These constants are used to limit engine usage to specific cryptographic operations. They can be accessed through the crypto module in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_99

LANGUAGE: JavaScript
CODE:
```
const crypto = require('crypto');

console.log(crypto.constants.ENGINE_METHOD_RSA);
console.log(crypto.constants.ENGINE_METHOD_DSA);
console.log(crypto.constants.ENGINE_METHOD_DH);
console.log(crypto.constants.ENGINE_METHOD_RAND);
console.log(crypto.constants.ENGINE_METHOD_EC);
console.log(crypto.constants.ENGINE_METHOD_CIPHERS);
console.log(crypto.constants.ENGINE_METHOD_DIGESTS);
console.log(crypto.constants.ENGINE_METHOD_PKEY_METHS);
console.log(crypto.constants.ENGINE_METHOD_PKEY_ASN1_METHS);
console.log(crypto.constants.ENGINE_METHOD_ALL);
console.log(crypto.constants.ENGINE_METHOD_NONE);
```

----------------------------------------

TITLE: Advancing Set.entries() Iterator in JavaScript
DESCRIPTION: Creates a Set entries iterator, advances it with next(), and examines the remaining items. After advancing once, only entry [2,2] remains (as entries return [value,value] pairs).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/internal-properties-entries-expected.txt#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
it = new Set([1,2]).entries(); it.next(); it
```

----------------------------------------

TITLE: Checking Named Property Existence on an Object in C using Node-API
DESCRIPTION: This function checks if a named property exists on a JavaScript object using a UTF-8 string as the key. It is equivalent to napi_has_property but with a string key. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_157

LANGUAGE: c
CODE:
```
napi_status napi_has_named_property(napi_env env,
                                    napi_value object,
                                    const char* utf8Name,
                                    bool* result);
```

----------------------------------------

TITLE: Verifying Certificate Issuance with x509.checkIssued Method in Node.js
DESCRIPTION: Checks whether this certificate was issued by another specified certificate. Returns a boolean indicating the result.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_49

LANGUAGE: javascript
CODE:
```
x509.checkIssued(otherCert)
```

----------------------------------------

TITLE: Initializing Node.js Per-Process State in C++
DESCRIPTION: This snippet demonstrates how to set up the required per-process state for Node.js, including argument parsing and V8 requirements. It initializes the Node.js process, creates a V8 platform instance, and prepares for running a Node.js instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/embedding.md#2025-04-23_snippet_0

LANGUAGE: cpp
CODE:
```
int main(int argc, char** argv) {
  argv = uv_setup_args(argc, argv);
  std::vector<std::string> args(argv, argv + argc);
  // Parse Node.js CLI options, and print any errors that have occurred while
  // trying to parse them.
  std::unique_ptr<node::InitializationResult> result =
      node::InitializeOncePerProcess(args, {
        node::ProcessInitializationFlags::kNoInitializeV8,
        node::ProcessInitializationFlags::kNoInitializeNodeV8Platform
      });

  for (const std::string& error : result->errors())
    fprintf(stderr, "%s: %s\n", args[0].c_str(), error.c_str());
  if (result->early_return() != 0) {
    return result->exit_code();
  }

  // Create a v8::Platform instance. `MultiIsolatePlatform::Create()` is a way
  // to create a v8::Platform instance that Node.js can use when creating
  // Worker threads. When no `MultiIsolatePlatform` instance is present,
  // Worker threads are disabled.
  std::unique_ptr<MultiIsolatePlatform> platform =
      MultiIsolatePlatform::Create(4);
  V8::InitializePlatform(platform.get());
  V8::Initialize();

  // See below for the contents of this function.
  int ret = RunNodeInstance(
      platform.get(), result->args(), result->exec_args());

  V8::Dispose();
  V8::DisposePlatform();

  node::TearDownOncePerProcess();
  return ret;
}
```

----------------------------------------

TITLE: Accessing Call History in MockAgent
DESCRIPTION: Demonstrates how to enable and retrieve the call history from a MockAgent, which provides detailed information about all HTTP requests made through the agent. This feature needs to be explicitly enabled with the enableCallHistory option.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent({ enableCallHistory: true })
setGlobalDispatcher(mockAgent)

await request('http://example.com', { query: { item: 1 }})

mockAgent.getCallHistory()?.firstCall()
// Returns
// MockCallHistoryLog {
//   body: undefined,
//   headers: undefined,
//   method: 'GET',
//   origin: 'http://example.com',
//   fullUrl: 'http://example.com/?item=1',
//   path: '/',
//   searchParams: { item: '1' },
//   protocol: 'http:',
//   host: 'example.com',
//   port: ''
// }
```

----------------------------------------

TITLE: SQLite Conflict Handler Return Constants
DESCRIPTION: Constants that must be returned from the onConflict handler to specify how to resolve the conflict. Options include omitting changes, replacing existing values, or aborting the operation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/sqlite.md#2025-04-23_snippet_9

LANGUAGE: SQL
CODE:
```
SQLITE_CHANGESET_OMIT
SQLITE_CHANGESET_REPLACE
SQLITE_CHANGESET_ABORT
```

----------------------------------------

TITLE: Initializing and Using Arborist in Node.js
DESCRIPTION: This snippet demonstrates how to initialize an Arborist instance with various configuration options, including path, registry, and authentication settings. It also shows how to use methods like loadActual(), loadVirtual(), buildIdealTree(), and reify() for managing node_modules trees.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/@npmcli/arborist/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const Arborist = require('@npmcli/arborist')

const arb = new Arborist({
  // options object

  // where we're doing stuff.  defaults to cwd.
  path: '/path/to/package/root',

  // url to the default registry.  defaults to npm's default registry
  registry: 'https://registry.npmjs.org',

  // scopes can be mapped to a different registry
  '@foo:registry': 'https://registry.foo.com/',

  // Auth can be provided in a couple of different ways.  If none are
  // provided, then requests are anonymous, and private packages will 404.
  // Arborist doesn't do anything with these, it just passes them down
  // the chain to pacote and npm-registry-fetch.

  // Safest: a bearer token provided by a registry:
  // 1. an npm auth token, used with the default registry
  token: 'deadbeefcafebad',
  // 2. an alias for the same thing:
  _authToken: 'deadbeefcafebad',

  // insecure options:
  // 3. basic auth, username:password, base64 encoded
  auth: 'aXNhYWNzOm5vdCBteSByZWFsIHBhc3N3b3Jk',
  // 4. username and base64 encoded password
  username: 'isaacs',
  password: 'bm90IG15IHJlYWwgcGFzc3dvcmQ=',

  // auth configs can also be scoped to a given registry with this
  // rather unusual pattern:
  '//registry.foo.com:token': 'blahblahblah',
  '//basic.auth.only.foo.com:_auth': 'aXNhYWNzOm5vdCBteSByZWFsIHBhc3N3b3Jk',
  '//registry.foo.com:always-auth': true,
})

// READING

// returns a promise.  reads the actual contents of node_modules
arb.loadActual().then(tree => {
  // tree is also stored at arb.virtualTree
})

// read just what the package-lock.json/npm-shrinkwrap says
// This *also* loads the yarn.lock file, but that's only relevant
// when building the ideal tree.
arb.loadVirtual().then(tree => {
  // tree is also stored at arb.virtualTree
  // now arb.virtualTree is loaded
  // this fails if there's no package-lock.json or package.json in the folder
  // note that loading this way should only be done if there's no
  // node_modules folder
})

// OPTIMIZING AND DESIGNING

// build an ideal tree from the package.json and various lockfiles.
arb.buildIdealTree(options).then(() => {
  // next step is to reify that ideal tree onto disk.
  // options can be:
  // rm: array of package names to remove at top level
  // add: Array of package specifiers to add at the top level.  Each of
  //   these will be resolved with pacote.manifest if the name can't be
  //   determined from the spec.  (Eg, `github:foo/bar` vs `foo@somespec`.)
  //   The dep will be saved in the location where it already exists,
  //   (or pkg.dependencies) unless a different saveType is specified.
  // saveType: Save added packages in a specific dependency set.
  //   - null (default) Wherever they exist already, or 'dependencies'
  //   - prod: definitely in 'dependencies'
  //   - optional: in 'optionalDependencies'
  //   - dev: devDependencies
  //   - peer: save in peerDependencies, and remove any optional flag from
  //     peerDependenciesMeta if one exists
  //   - peerOptional: save in peerDependencies, and add a
  //     peerDepsMeta[name].optional flag
  // saveBundle: add newly added deps to the bundleDependencies list
  // update: Either `true` to just go ahead and update everything, or an
  //   object with any or all of the following fields:
  //   - all: boolean.  set to true to just update everything
  //   - names: names of packages update (like `npm update foo`)
  // prune: boolean, default true.  Prune extraneous nodes from the tree.
  // preferDedupe: prefer to deduplicate packages if possible, rather than
  //   choosing a newer version of a dependency.  Defaults to false, ie,
  //   always try to get the latest and greatest deps.
  // legacyBundling: Nest every dep under the node requiring it, npm v2 style.
  //   No unnecessary deduplication.  Default false.

  // At the end of this process, arb.idealTree is set.
})

// WRITING

// Make the idealTree be the thing that's on disk
arb.reify({
  // write the lockfile(s) back to disk, and package.json with any updates
  // defaults to 'true'
  save: true,
}).then(() => {
  // node modules has been written to match the idealTree
})
```

----------------------------------------

TITLE: Verifying Runtime.evaluate with awaitPromise: Last Evaluated Result (JSON)
DESCRIPTION: These identical outputs likely represent subsequent evaluations or checks related to the last evaluated result within the context of the `awaitPromise` test, confirming the result remains 42. The test potentially involves checking the state after the promise resolution.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-async-expected.txt#2025-04-23_snippet_9

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            description : 42
            type : number
            value : 42
        }
    }
}
```

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            description : 42
            type : number
            value : 42
        }
    }
}
```

----------------------------------------

TITLE: AES Encryption and Decryption using Web Crypto API in JavaScript
DESCRIPTION: These functions demonstrate AES-CBC encryption and decryption using the Web Crypto API. They handle key generation, initialization vector creation, and the actual encryption and decryption processes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
const crypto = globalThis.crypto;

async function aesEncrypt(plaintext) {
  const ec = new TextEncoder();
  const key = await generateAesKey();
  const iv = crypto.getRandomValues(new Uint8Array(16));

  const ciphertext = await crypto.subtle.encrypt({
    name: 'AES-CBC',
    iv,
  }, key, ec.encode(plaintext));

  return {
    key,
    iv,
    ciphertext,
  };
}

async function aesDecrypt(ciphertext, key, iv) {
  const dec = new TextDecoder();
  const plaintext = await crypto.subtle.decrypt({
    name: 'AES-CBC',
    iv,
  }, key, ciphertext);

  return dec.decode(plaintext);
}
```

----------------------------------------

TITLE: Creating, Linking, and Evaluating Modules with vm.Module (ESM) - JavaScript
DESCRIPTION: This snippet shows how to use Node.js's vm.SourceTextModule in ECMAScript Module (ESM) syntax to create, link, and evaluate modules in a custom VM context. Dependencies are resolved by an async linker, and evaluation is performed asynchronously. Prerequisites: Node.js 12.16+ with --experimental-vm-modules flag. Inputs include source code for each module and a contextified object; outputs are side effects (e.g., console.log) or results of module evaluation. Limitations: Each 'foo' module is re-created on every import, and no module cache is implemented.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
import vm from 'node:vm';\n\nconst contextifiedObject = vm.createContext({\n  secret: 42,\n  print: console.log,\n});\n\n// Step 1\n//\n// Create a Module by constructing a new `vm.SourceTextModule` object. This\n// parses the provided source text, throwing a `SyntaxError` if anything goes\n// wrong. By default, a Module is created in the top context. But here, we\n// specify `contextifiedObject` as the context this Module belongs to.\n//\n// Here, we attempt to obtain the default export from the module "foo", and\n// put it into local binding "secret".\n\nconst bar = new vm.SourceTextModule(`\n  import s from 'foo';\n  s;\n  print(s);\n`, { context: contextifiedObject });\n\n// Step 2\n//\n// "Link" the imported dependencies of this Module to it.\n//\n// The provided linking callback (the "linker") accepts two arguments: the\n// parent module (`bar` in this case) and the string that is the specifier of\n// the imported module. The callback is expected to return a Module that\n// corresponds to the provided specifier, with certain requirements documented\n// in `module.link()`.\n//\n// If linking has not started for the returned Module, the same linker\n// callback will be called on the returned Module.\n//\n// Even top-level Modules without dependencies must be explicitly linked. The\n// callback provided would never be called, however.\n//\n// The link() method returns a Promise that will be resolved when all the\n// Promises returned by the linker resolve.\n//\n// Note: This is a contrived example in that the linker function creates a new\n// "foo" module every time it is called. In a full-fledged module system, a\n// cache would probably be used to avoid duplicated modules.\n\nasync function linker(specifier, referencingModule) {\n  if (specifier === 'foo') {\n    return new vm.SourceTextModule(`\n      // The "secret" variable refers to the global variable we added to\n      // "contextifiedObject" when creating the context.\n      export default secret;\n    `, { context: referencingModule.context });\n\n    // Using `contextifiedObject` instead of `referencingModule.context`\n    // here would work as well.\n  }\n  throw new Error(`Unable to resolve dependency: ${specifier}`);\n}\nawait bar.link(linker);\n\n// Step 3\n//\n// Evaluate the Module. The evaluate() method returns a promise which will\n// resolve after the module has finished evaluating.\n\n// Prints 42.\nawait bar.evaluate();
```

----------------------------------------

TITLE: Process Priority Constants
DESCRIPTION: Constants defining process scheduling priorities across different platforms. Maps Windows priority classes to corresponding nice values on other platforms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
PRIORITY_LOW
PRIORITY_BELOW_NORMAL
PRIORITY_NORMAL
PRIORITY_ABOVE_NORMAL
PRIORITY_HIGH
PRIORITY_HIGHEST
```

----------------------------------------

TITLE: Closing Callback Scope in Node-API (C)
DESCRIPTION: Function to close a previously opened callback scope. Can be called even if there is a pending JavaScript exception.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_196

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_close_callback_scope(napi_env env,
                                                  napi_callback_scope scope)
```

----------------------------------------

TITLE: Testing Another Side-Effect-Free Setter Function (JavaScript)
DESCRIPTION: Defines a JavaScript function `setB` that assigns the passed argument `b` to the property `b` of its `this` context. This function further verifies that modifications via setters are blocked when `sideEffectFree` is true. The surrounding text indicates this test case ('throws') fails as expected.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/call-function-on-side-effect-free-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
function setB(b) { this.b = b; }
```

----------------------------------------

TITLE: Testing Promise with Async/Await in JavaScript Debugger
DESCRIPTION: Complex test for promises with async/await and setTimeout. The |_| markers indicate statement locations, |C| for function calls, and |R| marks return positions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/get-possible-breakpoints-main-expected.txt#2025-04-23_snippet_34

LANGUAGE: javascript
CODE:
```
async function testPromiseAsyncWithCode() {
  var nextTest;
  var testPromise = |C|new Promise(resolve => nextTest |_|= resolve|R|);
  async function main() {
    async function foo() {
      var resolveNested;
      var p = |C|new Promise(resolve => resolveNested |_|= resolve|R|);
      |C|setTimeout(resolveNested, 0);
      |_|await p;
    |R|}
    |C|setTimeout(returnCall, 0);
    await |C|foo();
    await |C|foo();
    |C|nextTest();
  |R|}
  |C|main();
  |_|return testPromise;|R|
}
```

----------------------------------------

TITLE: Iterating Immediate Children of Selector Containers with each() in JavaScript
DESCRIPTION: Shows usage of selectors.each(callback) to iterate immediate child nodes. Example locates the first 'class' node and breaks out early by returning false. Callback receives selector and index. Method is safe for mutation while iterating.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_34

LANGUAGE: javascript
CODE:
```
let className;
selectors.each((selector, index) => {
    if (selector.type === 'class') {
        className = selector.value;
        return false;
    }
});
```

----------------------------------------

TITLE: Combining Install Arguments with Version Constraints - npm CLI - Bash
DESCRIPTION: Demonstrates combining multiple package install arguments, with and without version constraints, in a single npm install command. Shows how npm can install several packages at once while respecting version ranges. Example installs three packages (with one requiring a specific semver), outputting all to node_modules.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
npm install sax@">=0.1.0 <0.2.0" bench supervisor
```

----------------------------------------

TITLE: Setting C++ Standard Globally in CMake
DESCRIPTION: This CMake command sets the C++ standard requirement to C++17 for the entire project. It should be placed in the top-level `CMakeLists.txt` file to ensure consistency across all targets, including Abseil if built as part of the project. This helps avoid ABI compatibility issues.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/FAQ.md#2025-04-23_snippet_1

LANGUAGE: cmake
CODE:
```
set(CMAKE_CXX_STANDARD 17)
```

----------------------------------------

TITLE: Accessing the HTTP Response Socket in Node.js Using CommonJS (JavaScript)
DESCRIPTION: Provides an example of extracting client IP and port from the response.socket property using CommonJS (require) style. Requires Node.js. This approach is compatible with legacy Node.js codebases, providing the same network details as the ES Module version.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_38

LANGUAGE: cjs
CODE:
```
const http = require('node:http');
const server = http.createServer((req, res) => {
  const ip = res.socket.remoteAddress;
  const port = res.socket.remotePort;
  res.end(`Your IP address is ${ip} and your source port is ${port}.`);
}).listen(3000);

```

----------------------------------------

TITLE: Testing Array.prototype.filter with Various Arrays and Callbacks in JavaScript
DESCRIPTION: This snippet demonstrates the use of Array.prototype.filter method with different array types and callback functions. It tests the method's behavior with empty arrays, large empty arrays, large sparse arrays, and simple arrays, using callbacks that return false, true, the element itself, and the index.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-enumerators-functions-expected.txt#2025-04-23_snippet_14

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(simpleArray).filter(forwarders[f], returnFalse, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.filter.call(toObject(emptyArray), forwarders[f], returnFalse, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(largeEmptyArray).filter(forwarders[f], returnTrue, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.filter.call(toObject(largeSparseArray), forwarders[f], returnTrue, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(simpleArray).filter(forwarders[f], returnElem, 0);
```

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;Array.prototype.filter.call(toObject(largeSparseArray), forwarders[f], returnIndex, 0);
```

----------------------------------------

TITLE: Expected Test Output for RegExp Backtracking
DESCRIPTION: These lines represent the expected successful output messages from a test execution. The first line confirms a specific RegExp execution result (`re.exec('a')`), and the second indicates that parsing was successful. The final line signals the completion of all tests.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/regex/non-capturing-backtracking-expected.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
PASS re.exec('a') is ['a']
PASS successfullyParsed is true

TEST COMPLETE
```

----------------------------------------

TITLE: File operations with libuv in C
DESCRIPTION: Functions for common file operations like renaming, syncing, truncating, and copying files. Includes options for copy-on-write operations when copying files.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/fs.rst#2025-04-23_snippet_9

LANGUAGE: C
CODE:
```
int uv_fs_rename(uv_loop_t* loop, uv_fs_t* req, const char* path, const char* new_path, uv_fs_cb cb)
int uv_fs_fsync(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb)
int uv_fs_fdatasync(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb)
int uv_fs_ftruncate(uv_loop_t* loop, uv_fs_t* req, uv_file file, int64_t offset, uv_fs_cb cb)
int uv_fs_copyfile(uv_loop_t* loop, uv_fs_t* req, const char* path, const char* new_path, int flags, uv_fs_cb cb)
int uv_fs_sendfile(uv_loop_t* loop, uv_fs_t* req, uv_file out_fd, uv_file in_fd, int64_t in_offset, size_t length, uv_fs_cb cb)
```

----------------------------------------

TITLE: Creating HTTP Server with Socket Reuse Detection (ES Modules)
DESCRIPTION: Creates an HTTP server and demonstrates how to use the reusedSocket property. This example shows how to handle socket reuse in keepAlive scenarios using ES Modules syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
import http from 'node:http';

// Server has a 5 seconds keep-alive timeout by default
http
  .createServer((req, res) => {
    res.write('hello\n');
    res.end();
  })
  .listen(3000);

setInterval(() => {
  // Adapting a keep-alive agent
  http.get('http://localhost:3000', { agent }, (res) => {
    res.on('data', (data) => {
      // Do nothing
    });
  });
}, 5000); // Sending request on 5s interval so it's easy to hit idle timeout
```

----------------------------------------

TITLE: Declaring Abseil Demangle Internal Library - CMake
DESCRIPTION: Declares the demangle_internal library for internal C++ symbol demangling, depending on configuration and a specialized Rust demangler backend. Shares public headers for symbol manipulation but remains internal to the greater Abseil debugging stack.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/debugging/CMakeLists.txt#2025-04-23_snippet_9

LANGUAGE: CMake
CODE:
```
absl_cc_library(
  NAME
    demangle_internal
  HDRS
    "internal/demangle.h"
  SRCS
    "internal/demangle.cc"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  DEPS
    absl::config
    absl::demangle_rust
  PUBLIC
)
```

----------------------------------------

TITLE: Comparing '12' and '123' Lexicographically in JavaScript
DESCRIPTION: This snippet tests the lexicographical comparison of the strings '12' and '123' using the less than operator (`<`) in JavaScript. It expects the expression to evaluate to `true` because '1' is equal in both, but the second character '2' is less than the corresponding '2', and '12' is a prefix of '123'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/string-sort-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
"12" < "123"
```

----------------------------------------

TITLE: Typical Linking Commands for OpenSSL Build Targets - Makefile/Unix Shell
DESCRIPTION: These snippets show example linker command lines for building shared libraries, modules, and applications in the OpenSSL build system. Each command uses variable substitution to inject relevant compilation and linking flags as defined in the build configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/Configurations/README.md#2025-04-23_snippet_3

LANGUAGE: makefile
CODE:
```
{ld} $(CFLAGS) {lflags} {shared_ldflag} -o libfoo.so \
    foo/something.o foo/somethingelse.o {ex_libs}
```

LANGUAGE: makefile
CODE:
```
{ld} $(CFLAGS) {lflags} {module_ldflags} -o libeng.so \
    blah1.o blah2.o -lcrypto {ex_libs}
```

LANGUAGE: makefile
CODE:
```
{ld} $(CFLAGS) {lflags} -o app \
    app1.o utils.o -lssl -lcrypto {ex_libs}
```

----------------------------------------

TITLE: Evaluating Private Member Access in REPL Mode (throwOnSideEffect: true) in JSON
DESCRIPTION: This JSON object shows the successful result of `Runtime.evaluate` when accessing a private class member. This operation is permitted when `replMode` is true, even if `throwOnSideEffect` is also true. The evaluation returns the value 1.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-without-side-effects-expected.txt#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
{
    id : <messageId>,
    result : {
        result : {
            description : "1",
            type : "number",
            value : 1
        }
    }
}
```

----------------------------------------

TITLE: Test Assertion: myFunction.aliasedCall with undefined context and no arguments
DESCRIPTION: Represents a passing test case verifying `myFunction.aliasedCall(undefined)`. It checks that the aliased call behaves like `.call(undefined)`, defaulting `this` appropriately (represented as `this`) and the first argument being `undefined`. Assumes `myFunction` and `aliasedCall` are defined.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-convert-this-dom-window-expected.txt#2025-04-23_snippet_8

LANGUAGE: text
CODE:
```
PASS myFunction.aliasedCall(undefined) is [this, "myFunction", undefined]
```

----------------------------------------

TITLE: Subscribing to Diagnostics Channel Events - Node.js (CommonJS)
DESCRIPTION: Shows how to subscribe to a diagnostics channel using CommonJS require syntax. It loads 'node:diagnostics_channel', creates a channel instance, and registers a message handler invoked on channel publication. Suitable for Node.js v14.17.0 and later. This API is deprecated in favor of diagnostics_channel.subscribe(name, onMessage).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_19

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.subscribe((message, name) => {\n  // Received data\n});
```

----------------------------------------

TITLE: Testing Number.toPrecision() with Invalid Precision (NaN)
DESCRIPTION: Tests the `toPrecision()` method with an invalid precision argument of NaN. It verifies that a RangeError is thrown.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/number-toprecision-expected.txt#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
(1234.567).toPrecision(nan)
```

----------------------------------------

TITLE: Testing C++ Object Factory Addon in JavaScript (JavaScript)
DESCRIPTION: Demonstrates usage of the object factory C++ addon from JavaScript by calling the addon with different strings and logging the returned object's 'msg' property. Shows how C++ can instantiate JS objects and how the addons can be called identically like plain JS factories. Output should be consecutive string parameters printed as a space-separated string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_18

LANGUAGE: js
CODE:
```
// test.js\nconst addon = require('./build/Release/addon');\n\nconst obj1 = addon('hello');\nconst obj2 = addon('world');\nconsole.log(obj1.msg, obj2.msg);\n// Prints: 'hello world'\n
```

----------------------------------------

TITLE: Implementing C++ Binding with Error Context
DESCRIPTION: Example of a C++ binding implementation that uses a context object to pass error information back to JavaScript. The code demonstrates proper argument validation and error handling patterns.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/cpp-style-guide.md#2025-04-23_snippet_7

LANGUAGE: cpp
CODE:
```
void Foo(const FunctionCallbackInfo<Value>& args) {
  Environment* env = Environment::GetCurrent(args);
  // Let the JavaScript handle the actual type-checking,
  // only assertions are placed in C++
  CHECK_EQ(args.Length(), 2);
  CHECK(args[0]->IsString());
  CHECK(args[1]->IsObject());

  int err = DoSomethingWith(args[0].As<String>());
  if (err) {
    // Put the data inside the error context
    Local<Object> ctx = args[1].As<Object>();
    Local<String> key = FIXED_ONE_BYTE_STRING(env->isolate(), "code");
    ctx->Set(env->context(), key, err).FromJust();
  } else {
    args.GetReturnValue().Set(something_to_return);
  }
}

// In the initialize function
env->SetMethod(target, "foo", Foo);
```

----------------------------------------

TITLE: Evaluating Module-Level Variables in Node.js
DESCRIPTION: This snippet demonstrates the declaration and evaluation of module-level variables in Node.js. It sets a debugger breakpoint to inspect these variables and their scopes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-in-module-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
export var c = 0;
debugger;
```

----------------------------------------

TITLE: Demonstrating triggerAsyncId in Node.js Async Hooks (CommonJS)
DESCRIPTION: Shows the use of triggerAsyncId in the init callback of an AsyncHook to track the cause of resource creation in Node.js using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
const { createHook, executionAsyncId } = require('node:async_hooks');
const { stdout } = require('node:process');
const net = require('node:net');
const fs = require('node:fs');

createHook({
  init(asyncId, type, triggerAsyncId) {
    const eid = executionAsyncId();
    fs.writeSync(
      stdout.fd,
      `${type}(${asyncId}): trigger: ${triggerAsyncId} execution: ${eid}\n`);
  },
}).enable();

net.createServer((conn) => {}).listen(8080);
```

----------------------------------------

TITLE: Formatting a POSIX Path using path.format (dir/base priority)
DESCRIPTION: Demonstrates `path.format()` constructing a POSIX path. When `dir` and `base` are provided, they take priority, and `root` is ignored. The result is `${dir}${path.sep}${base}`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_21

LANGUAGE: js
CODE:
```
// If `dir`, `root` and `base` are provided,
// `${dir}${path.sep}${base}`
// will be returned. `root` is ignored.
path.format({
  root: '/ignored',
  dir: '/home/user/dir',
  base: 'file.txt',
});
// Returns: '/home/user/dir/file.txt'
```

----------------------------------------

TITLE: Writing Unsigned Little-Endian Integer to Buffer (MJS)
DESCRIPTION: Demonstrates how to write a 48-bit unsigned integer into a Node.js Buffer in little-endian format using the `writeUIntLE` method. It utilizes the `Buffer.allocUnsafe` method to create a buffer and shows the resulting byte sequence.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_101

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(6);

buf.writeUIntLE(0x1234567890ab, 0, 6);

console.log(buf);
// Prints: <Buffer ab 90 78 56 34 12>
```

----------------------------------------

TITLE: Handling HTTP/2 Client Origin Event (ESM)
DESCRIPTION: Demonstrates how to connect to an HTTP/2 server using `node:http2` and listen for the `'origin'` event on the client session. This event is emitted when an `ORIGIN` frame is received, providing an array of origin strings from the server.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_11

LANGUAGE: mjs
CODE:
```
import { connect } from 'node:http2';
const client = connect('https://example.org');

client.on('origin', (origins) => {
  for (let n = 0; n < origins.length; n++)
    console.log(origins[n]);
});
```

----------------------------------------

TITLE: Publishing ITTAPI Rust Bindings to crates.io - Shell
DESCRIPTION: This shell command publishes the compiled ittapi-rs package to crates.io using Cargo, making it available to the wider Rust community. The user must have an active crates.io account and a valid API token configured in their cargo environment. Prerequisites include a successful local build and satisfaction of package publishing requirements.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/ittapi/ittapi-rs/README.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
cargo publish
```

----------------------------------------

TITLE: Calling String.prototype.fontsize via call() with Numbers
DESCRIPTION: Tests the `fontsize` method using `Function.prototype.call`. The `this` context is set to the number `0x2A` (42), and the size argument is also `0x2A`. This verifies that the number context is converted to a string ("42") and used as the content, and the number argument is converted to a string for the `size` attribute.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/string-fontsize-expected.txt#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
String.prototype.fontsize.call(0x2A, 0x2A)
```

----------------------------------------

TITLE: Defining Demangle Rust Test Target - CMake
DESCRIPTION: Declares a GTest-driven test suite for the Rust demangling functionality to ensure robust symbol parsing. Invokes internal Rust demangling routines and checks behavior using the core Abseil configuration environment.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/debugging/CMakeLists.txt#2025-04-23_snippet_16

LANGUAGE: CMake
CODE:
```
absl_cc_test(
  NAME
    demangle_rust_test
  SRCS
    "internal/demangle_rust_test.cc"
  COPTS
    ${ABSL_TEST_COPTS}
  DEPS
    absl::demangle_rust
    absl::config
    GTest::gmock_main
)
```

----------------------------------------

TITLE: Testing Finally with Exception - JavaScript
DESCRIPTION: This IIFE tests the behavior of a `finally` block when an exception is thrown within the `try` block. It shows that the `finally` block executes after the exception occurs in `try` but before the exception is caught by a `catch` block or propagates. The test verifies that the thrown exception's value is determined *before* the `finally` block executes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/finally-codegen-failure-expected.txt#_snippet_1

LANGUAGE: JavaScript
CODE:
```
(function () { var a = 'PASS'; try { throw a; } finally { a = 'FAIL'; }})()
```

----------------------------------------

TITLE: Representing String Evaluation Result in JSON
DESCRIPTION: This JSON structure represents the result of an evaluation that yielded a string value, potentially within a Node.js debugging or inspection context. It includes a message ID, and the result specifies the type ('string') and the actual string 'value'. This could be the outcome when evaluating an expression that resolves to a primitive string.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/regress/regress-crbug-1350842-expected.txt#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            type : string
            value : tmpName
        }
    }
}
```

----------------------------------------

TITLE: Initializing Group Access List in Node.js
DESCRIPTION: Demonstrates the use of process.initgroups() to initialize the group access list for a user on POSIX platforms. This is a privileged operation requiring root access or CAP_SETGID capability.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_52

LANGUAGE: JavaScript
CODE:
```
import { getgroups, initgroups, setgid } from 'node:process';

console.log(getgroups());         // [ 0 ]
initgroups('nodeuser', 1000);     // switch user
console.log(getgroups());         // [ 27, 30, 46, 1000, 0 ]
setgid(1000);                     // drop root gid
console.log(getgroups());         // [ 27, 30, 46, 1000 ]
```

LANGUAGE: JavaScript
CODE:
```
const { getgroups, initgroups, setgid } = require('node:process');

console.log(getgroups());         // [ 0 ]
initgroups('nodeuser', 1000);     // switch user
console.log(getgroups());         // [ 27, 30, 46, 1000, 0 ]
setgid(1000);                     // drop root gid
console.log(getgroups());         // [ 27, 30, 46, 1000 ]
```

----------------------------------------

TITLE: Adding Finalizers to JavaScript Objects in Node-API (C)
DESCRIPTION: Registers a finalization callback that will be invoked when a JavaScript object is garbage collected. This allows native code to properly clean up resources associated with JavaScript objects. Multiple finalizers can be attached to a single object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_184

LANGUAGE: c
CODE:
```
napi_status napi_add_finalizer(napi_env env,
                               napi_value js_object,
                               void* finalize_data,
                               node_api_basic_finalize finalize_cb,
                               void* finalize_hint,
                               napi_ref* result);
```

----------------------------------------

TITLE: Setting User ID in Node.js (CommonJS)
DESCRIPTION: Example of using the process.setuid() method to set the user identity of the process in CommonJS format. This POSIX-only function accepts either a numeric ID or a username string and verifies the change.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_92

LANGUAGE: javascript
CODE:
```
const process = require('node:process');

if (process.getuid && process.setuid) {
  console.log(`Current uid: ${process.getuid()}`);
  try {
    process.setuid(501);
    console.log(`New uid: ${process.getuid()}`);
  } catch (err) {
    console.error(`Failed to set uid: ${err}`);
  }
}
```

----------------------------------------

TITLE: Windows Batch File Execution (ES Modules)
DESCRIPTION: Shows different methods of executing .bat and .cmd files on Windows using both exec and spawn methods with ES Modules syntax. Includes handling of filenames with spaces.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_3

LANGUAGE: mjs
CODE:
```
import { exec, spawn } from 'node:child_process';

exec('my.bat', (err, stdout, stderr) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log(stdout);
});

// Script with spaces in the filename:
const bat = spawn('"my script.cmd" a b', { shell: true });
// or:
exec('"my script.cmd" a b', (err, stdout, stderr) => {
  // ...
});
```

----------------------------------------

TITLE: Windows-Specific File URL Handling
DESCRIPTION: Shows Windows-specific file URL handling including UNC paths and drive letter conventions. Demonstrates various file URL formats and their behavior on Windows.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_115

LANGUAGE: javascript
CODE:
```
import { readFileSync } from 'node:fs';
// On Windows :

// - WHATWG file URLs with hostname convert to UNC path
// file://hostname/p/a/t/h/file => \\hostname\p\a\t\h\file
readFileSync(new URL('file://hostname/p/a/t/h/file'));

// - WHATWG file URLs with drive letters convert to absolute path
// file:///C:/tmp/hello => C:\tmp\hello
readFileSync(new URL('file:///C:/tmp/hello'));

// - WHATWG file URLs without hostname must have a drive letters
readFileSync(new URL('file:///notdriveletter/p/a/t/h/file'));
readFileSync(new URL('file:///c/p/a/t/h/file'));
// TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must be absolute
```

----------------------------------------

TITLE: Exposing Node.js Internals via Command Line in Bash
DESCRIPTION: Demonstrates running a Node.js script from the command line using `bash`, enabling access to internal bindings by passing the `--expose-internals` flag and preloading the `internal/test/binding` module with the `-r` flag. This is useful for testing or debugging internal functionalities directly.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-tests.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
node --expose-internals -r internal/test/binding lib/fs.js
```

----------------------------------------

TITLE: Reporting Script Parsing for Runtime.callFunctionOn (JavaScript)
DESCRIPTION: Illustrates the inspector's response when a valid function is called using Runtime.callFunctionOn. It shows the Debugger.scriptParsed event with function-specific details.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/script-parsed-for-runtime-evaluate-expected.txt#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
    method : Debugger.scriptParsed
    params : {
        embedderName :
        endColumn : 18
        endLine : 0
        executionContextId : <executionContextId>
        hasSourceURL : false
        hash : 5692cb5b347ea5186169fa1d9b40a614b4e013edd0bc8e5dfbabd297f94c1061
        isLiveEdit : false
        isModule : false
        length : 18
        scriptId : <scriptId>
        scriptLanguage : JavaScript
        sourceMapURL :
        startColumn : 0
        startLine : 0
        url :
    }
}
```

----------------------------------------

TITLE: Using Fast-Track Approval Comment in Node.js GitHub Actions Workflow
DESCRIPTION: A template comment that is automatically added by a GitHub Actions workflow when the 'fast-track' label is applied to a pull request. Collaborators can upvote this comment to indicate approval for fast-tracking.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/collaborator-guide.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
> To propose fast-tracking a pull request, apply the `fast-track` label. Then a
> GitHub Actions workflow will add a comment that collaborators can upvote.
>
> If someone disagrees with the fast-tracking request, remove the label. Do not
> fast-track the pull request in that case.
>
> The pull request can be fast-tracked if two collaborators approve the
> fast-tracking request. To land, the pull request itself still needs two
> collaborator approvals and a passing CI.
```

----------------------------------------

TITLE: Inspecting Native Function Description Output (JSON)
DESCRIPTION: This snippet shows the expected output format when inspecting a native JavaScript function (like `Array.prototype.map`) during the `testNativeFunctionDescription` regression test. The description indicates native code implementation. It includes the function's class name, description, object ID placeholder, and type.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/regress/regress-crbug-1207867-expected.txt#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
    className : Function
    description : function map() { [native code] }
    objectId : <objectId>
    type : function
}
```

----------------------------------------

TITLE: Creating JavaScript DataView in Node-API (C)
DESCRIPTION: Creates a JavaScript DataView object over an existing ArrayBuffer. Takes environment, byte length, ArrayBuffer, byte offset, and returns a napi_value representing the DataView.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_88

LANGUAGE: c
CODE:
```
napi_status napi_create_dataview(napi_env env,
                                 size_t byte_length,
                                 napi_value arraybuffer,
                                 size_t byte_offset,
                                 napi_value* result)
```

----------------------------------------

TITLE: Asynchronously Disposing FileHandle using Symbol.asyncDispose in Node.js (Experimental)
DESCRIPTION: Provides an experimental alias for `filehandle.close()` using the `Symbol.asyncDispose` symbol. This is intended for use with explicit resource management patterns like `using` declarations for automatic asynchronous cleanup. Returns a Promise that fulfills when the file handle is closed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_20



----------------------------------------

TITLE: Handling HTTP/2 Client Response Event (CJS)
DESCRIPTION: Demonstrates how to listen for the 'response' event on a Node.js HTTP/2 client request using CommonJS `require`. This event is emitted when response HEADERS are received from the server. The listener receives the headers object and flags.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_22

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');
const client = http2.connect('https://localhost');
const req = client.request({ ':path': '/' });
req.on('response', (headers, flags) => {
  console.log(headers[':status']);
});
```

----------------------------------------

TITLE: WebSocket Connection Closure with undici:websocket:close Channel
DESCRIPTION: Shows how to handle WebSocket connection closure events.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:websocket:close').subscribe(({ websocket, code, reason }) => {
  console.log(websocket) // the WebSocket object
  console.log(code) // the closing status code
  console.log(reason) // the closing reason
})
```

----------------------------------------

TITLE: Installing Amaro via npm
DESCRIPTION: Command to install the Amaro package using npm. This is the first step to use Amaro in a Node.js project.
SOURCE: https://github.com/nodejs/node/blob/main/deps/amaro/README.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
npm install amaro
```

----------------------------------------

TITLE: Finding Node by Source Position in Selector Container in JavaScript
DESCRIPTION: Shows how to use container.atPosition(line, column) to retrieve a node corresponding to a specific location in the parsed CSS source. Input and output comments clarify what will be returned. Assumes selector container has structure from parsing multiple lines/selectors.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_30

LANGUAGE: javascript
CODE:
```
// Input: :not(.foo),\n#foo > :matches(ol, ul)
selector.atPosition(1, 1); // => :not(.foo)
selector.atPosition(2, 1); // => \n#foo
```

----------------------------------------

TITLE: Workspace Operations
DESCRIPTION: Examples of using npm pkg commands with workspace configuration
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-pkg.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm pkg set funding=https://example.com --ws
```

----------------------------------------

TITLE: Specifying OpenSSL VPROC Prefix Variable - Bash
DESCRIPTION: These snippets assign platform-specific prefix values to the OPENSSL_VPROC_PREFIX variable for version identification in build procedures, distinguishing Itanium and x86 platforms. Use the appropriate prefix in your environment before building to embed correct versioning information.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/NOTES-NONSTOP.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
OPENSSL_VPROC_PREFIX=T0085H06
```

LANGUAGE: bash
CODE:
```
OPENSSL_VPROC_PREFIX=T0085L01
```

----------------------------------------

TITLE: Fixing NPM Config in Bash
DESCRIPTION: Command to attempt repair of invalid configuration items, typically involving authentication config attachment to the registry.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-config.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm config fix
```

----------------------------------------

TITLE: Accessing Node.js Core Modules On Demand in REPL (console)
DESCRIPTION: Demonstrates that core modules such as 'fs' are loaded automatically by Node.js REPL when referenced. The user inputs an API call on 'fs' without manually requiring it, triggering behind-the-scenes loading. Output is the result or error from the 'fs.createReadStream' invocation. No explicit dependencies in code input; works within Node.js REPL.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_9

LANGUAGE: console
CODE:
```
> fs.createReadStream('./some/file');
```

----------------------------------------

TITLE: Promise Tracing Flag
DESCRIPTION: Command line flag that enables tracing of promises for debugging and performance analysis purposes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/internal-api.md#2025-04-23_snippet_6

LANGUAGE: markdown
CODE:
```
--trace-promises
```

----------------------------------------

TITLE: Trace Categories Management Example
DESCRIPTION: Demonstrates managing multiple trace category sets using multiple Tracing objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tracing.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
const { createTracing, getEnabledCategories } = require('node:trace_events');
const t1 = createTracing({ categories: ['node', 'v8'] });
const t2 = createTracing({ categories: ['node.perf', 'node'] });
t1.enable();
t2.enable();

// Prints 'node,node.perf,v8'
console.log(getEnabledCategories());

t2.disable(); // Will only disable emission of the 'node.perf' category

// Prints 'node,v8'
console.log(getEnabledCategories());
```

----------------------------------------

TITLE: Queuing Work in libuv Thread Pool
DESCRIPTION: Defines the API function for queuing work in the libuv thread pool. It initializes a work request, specifying the work callback and after-work callback.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/threadpool.rst#2025-04-23_snippet_4

LANGUAGE: c
CODE:
```
.. c:function:: int uv_queue_work(uv_loop_t* loop, uv_work_t* req, uv_work_cb work_cb, uv_after_work_cb after_work_cb)
```

----------------------------------------

TITLE: Removing a Node from AST Using remove() in JavaScript
DESCRIPTION: Checks if a node is of type 'id' and removes it from its parent using node.remove(). Useful for dynamically editing or cleaning up selector ASTs after parsing.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
if (node.type === 'id') {
    node.remove();
}
```

----------------------------------------

TITLE: Testing Number.toPrecision() with Invalid Precision (-Infinity)
DESCRIPTION: Tests the `toPrecision()` method with an invalid precision argument of negative Infinity. It verifies that a RangeError is thrown.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/number-toprecision-expected.txt#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
(1234.567).toPrecision(negInf)
```

----------------------------------------

TITLE: Demonstrating Nested Node.js Describe/It Filtering - Javascript
DESCRIPTION: Shows a Node.js test file utilizing `describe` for grouping and `it` for individual tests to illustrate how filtering a specific `it` test requires specifying its ancestor `describe` names (separated by spaces) to ensure the pattern matches only the desired test.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_11

LANGUAGE: Javascript
CODE:
```
describe('test 1', (t) => {
  it('some test');
});

describe('test 2', (t) => {
  it('some test');
});
```

----------------------------------------

TITLE: Executing npm-stars Command in Bash
DESCRIPTION: This command allows users to view packages marked as favorites. It can be used with or without specifying a user. The command is unaware of workspaces.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-stars.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm stars [<user>]
```

----------------------------------------

TITLE: Resolving Push Rejection with Rebase
DESCRIPTION: Commands to handle the case when push is rejected due to upstream changes, including pulling with rebase and running tests.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/collaborator-guide.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
git pull upstream main --rebase
make -j4 test
git push upstream main
```

----------------------------------------

TITLE: Example Output for Certificate Pinning in Node.js HTTPS Requests - Text
DESCRIPTION: Displays sample output from an HTTPS request that prints the Common Name, certificate SHA256 fingerprint, and public key pin-sha256 for each certificate in the chain, followed by confirmation that the server certificate matched the pinned fingerprint. Useful for verifying the results of certificate pinning and debugging trust verification.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_15

LANGUAGE: Text
CODE:
```
Subject Common Name: github.com
  Certificate SHA256 fingerprint: FD:6E:9B:0E:F3:98:BC:D9:04:C3:B2:EC:16:7A:7B:0F:DA:72:01:C9:03:C5:3A:6A:6A:E5:D0:41:43:63:EF:65
  Public key ping-sha256: SIXvRyDmBJSgatgTQRGbInBaAK+hZOQ18UmrSwnDlK8=
Subject Common Name: Sectigo ECC Domain Validation Secure Server CA
  Certificate SHA256 fingerprint: 61:E9:73:75:E9:F6:DA:98:2F:F5:C1:9E:2F:94:E6:6C:4E:35:B6:83:7C:E3:B9:14:D2:24:5C:7F:5F:65:82:5F
  Public key ping-sha256: Eep0p/AsSa9lFUH6KT2UY+9s1Z8v7voAPkQ4fGknZ2g=
Subject Common Name: USERTrust ECC Certification Authority
  Certificate SHA256 fingerprint: A6:CF:64:DB:B4:C8:D5:FD:19:CE:48:89:60:68:DB:03:B5:33:A8:D1:33:6C:62:56:A8:7D:00:CB:B3:DE:F3:EA
  Public key ping-sha256: UJM2FOhG9aTNY0Pg4hgqjNzZ/lQBiMGRxPD5Y2/e0bw=
Subject Common Name: AAA Certificate Services
  Certificate SHA256 fingerprint: D7:A7:A0:FB:5D:7E:27:31:D7:71:E9:48:4E:BC:DE:F7:1D:5F:0C:3E:0A:29:48:78:2B:C8:3E:E0:EA:69:9E:F4
  Public key ping-sha256: vRU+17BDT2iGsXvOi76E7TQMcTLXAqj0+jGPdW7L1vM=
All OK. Server matched our pinned cert or public key
statusCode: 200
```

----------------------------------------

TITLE: First Object Structure with Array Properties in Node.js
DESCRIPTION: A structured representation of an object with array subtype containing nested objects. The structure includes property names, types, and preview values for debugging or inspection purposes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-table-expected.txt#2025-04-23_snippet_13

LANGUAGE: json
CODE:
```
{
    description : Array(2)
    overflow : false
    properties : [
        [0] : {
            name : 0
            type : object
            value : Object
            valuePreview : {
                description : Object
                overflow : false
                properties : [
                    [0] : {
                        name : c
                        type : number
                        value : 3
                    }
                    [1] : {
                        name : b
                        type : number
                        value : 2
                    }
                ]
                type : object
            }
        }
        [1] : {
            name : 1
            type : object
            value : Object
            valuePreview : {
                description : Object
                overflow : false
                properties : [
                    [0] : {
                        name : c
                        type : number
                        value : 3
                    }
                ]
                type : object
            }
        }
    ]
    subtype : array
    type : object
}
```

----------------------------------------

TITLE: Creating an HTTP REPL Server for curl Interaction (MJS)
DESCRIPTION: Starts an HTTP server using the `http` module on port 8000. For incoming requests, it starts a REPL instance using the request stream as input and the response stream as output, setting the content type to `multipart/octet-stream`. This allows interaction via `curl` and uses ES Module syntax (`import`). Note: This is intended for educational purposes only due to security implications.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_29

LANGUAGE: mjs
CODE:
```
import http from 'node:http';
import repl from 'node:repl';

const server = http.createServer((req, res) => {
  res.setHeader('content-type', 'multipart/octet-stream');

  repl.start({
    prompt: 'curl repl> ',
    input: req,
    output: res,
    terminal: false,
    useColors: true,
    useGlobal: false,
  });
});

server.listen(8000);
```

----------------------------------------

TITLE: Testing Function.apply with Arguments in JavaScript
DESCRIPTION: This snippet tests the behavior of Function.apply when used with the arguments object. It checks accessing specific argument indices and the length property.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/function-apply-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS argumentsApply1(1, 2, 3) is 1
PASS argumentsApply2(1, 2, 3) is 2
PASS argumentsApply3(1, 2, 3) is 3
PASS argumentsApplyLength(1, 2, 3) is 3
PASS argumentsApplyExcessArguments(1, 2, 3) is 3
PASS executedAdditionalArgument is true
```

----------------------------------------

TITLE: Deleting an Element from an Object in C using Node-API
DESCRIPTION: This function attempts to delete an element from a JavaScript object at a specific index. It takes the environment, the object to modify, the index, and a pointer to store the result of the deletion. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_161

LANGUAGE: c
CODE:
```
napi_status napi_delete_element(napi_env env,
                                napi_value object,
                                uint32_t index,
                                bool* result);
```

----------------------------------------

TITLE: Pattern Matching Example - Node-glob
DESCRIPTION: Example of pattern matching behavior that differs between implementations. Shows how .gitignore handling and pattern matching varies between libraries.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/glob/README.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
!(9).txt     // Example pattern showing differences in matching behavior
./**        // Directory matching pattern
./!(<pattern>) // Negative pattern matching example
```

----------------------------------------

TITLE: Communicating with Module Hooks using MessageChannel (ESM)
DESCRIPTION: Demonstrates how to use a MessageChannel to communicate between the main thread and module hooks in ECMAScript modules. It passes a port to the hooks for bidirectional communication.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
import { register } from 'node:module';
import { MessageChannel } from 'node:worker_threads';

const { port1, port2 } = new MessageChannel();

port1.on('message', (msg) => {
  console.log(msg);
});
port1.unref();

register('./my-hooks.mjs', {
  parentURL: import.meta.url,
  data: { number: 1, port: port2 },
  transferList: [port2],
});
```

----------------------------------------

TITLE: Adding Max Listener Warning for EventTarget in JavaScript
DESCRIPTION: Implements a warning when the maximum number of listeners is exceeded for an EventTarget. This helps detect potential memory leaks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_20

LANGUAGE: JavaScript
CODE:
```
EventTarget.prototype.addEventListener = function(type, listener, options) {
  // Check and warn if max listeners exceeded
  // Implementation details
};
```

----------------------------------------

TITLE: Creating HandleScope in C++ for V8
DESCRIPTION: HandleScope now requires an Isolate* argument. In most cases, v8::Isolate::GetCurrent() is acceptable.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_IOJS.md#2025-04-23_snippet_48

LANGUAGE: c++
CODE:
```
HandleScope scope(isolate)
```

----------------------------------------

TITLE: Filesystem Statistics with fs.statfsSync
DESCRIPTION: Retrieves mounted filesystem information synchronously. Returns StatFs object with optional bigint values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_98

LANGUAGE: javascript
CODE:
```
fs.statfsSync(path[, options])
```

----------------------------------------

TITLE: Setting QR Code Error Correction Level and Generating QR with qrcode-terminal (JavaScript)
DESCRIPTION: This snippet first sets the error correction level to 'Q', then generates and outputs a QR code with the specified level. Use setErrorLevel before generate to affect the next QR code's resilience (accepts values like 'L', 'M', 'Q', 'H'). Input is a string to encode; output is rendered to the terminal.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/qrcode-terminal/README.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
qrcode.setErrorLevel('Q');
qrcode.generate('This will be a QRCode with error level Q!');
```

----------------------------------------

TITLE: Setting Instance Data in Node-API (C)
DESCRIPTION: Function to associate data with the current Node.js environment. It allows setting data that can be retrieved later and optionally specifies a finalizer callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_15

LANGUAGE: C
CODE:
```
napi_status napi_set_instance_data(node_api_basic_env env,
                                   void* data,
                                   napi_finalize finalize_cb,
                                   void* finalize_hint);
```

----------------------------------------

TITLE: Iterating Over MIME Parameters Using MIMEType - JavaScript (CommonJS)
DESCRIPTION: Shows iteration over MIME type parameters using the params iterator from the Node.js util module's MIMEType class in CommonJS syntax. Requires the 'node:util' module. Creates a MIMEType object from a string containing parameters, iterates the params, and prints each pair. The only input required is the MIME string. Outputs are sent to the console. Node.js v18.7.0+ is needed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_35

LANGUAGE: JavaScript
CODE:
```
const { MIMEType } = require('node:util');

const { params } = new MIMEType('text/plain;foo=bar;xyz=baz');
for (const [name, value] of params) {
  console.log(name, value);
}
// Prints:
//   foo bar
//   xyz baz
```

----------------------------------------

TITLE: Setting Local Window Size in HTTP/2 Sessions (JavaScript)
DESCRIPTION: Allows setting the local window size of an HTTP/2 session. This is a minor semver change.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_28

LANGUAGE: JavaScript
CODE:
```
// Code not provided in release notes
```

----------------------------------------

TITLE: Injecting SEA Blob on Windows with Postject (PowerShell)
DESCRIPTION: Uses the postject utility to inject the preparation blob into the copied Node.js executable on Windows using PowerShell with the required sentinel fuse.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_8

LANGUAGE: powershell
CODE:
```
npx postject hello.exe NODE_SEA_BLOB sea-prep.blob `
    --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2
```

----------------------------------------

TITLE: Certificate Challenge Export CommonJS
DESCRIPTION: Shows how to export a challenge from an SPKAC certificate using CommonJS require. Returns the challenge component as a UTF-8 string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
const { Certificate } = require('node:crypto');
const spkac = getSpkacSomehow();
const challenge = Certificate.exportChallenge(spkac);
console.log(challenge.toString('utf8'));
// Prints: the challenge as a UTF8 string
```

----------------------------------------

TITLE: Ancestor AST Walking Example
DESCRIPTION: Shows how to use the ancestor walk function to trace the ancestry of nodes in the syntax tree.
SOURCE: https://github.com/nodejs/node/blob/main/deps/acorn/acorn-walk/README.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const acorn = require("acorn")
const walk = require("acorn-walk")

walk.ancestor(acorn.parse("foo('hi')"), {
  Literal(_node, _state, ancestors) {
    console.log("This literal's ancestors are:", ancestors.map(n => n.type))
  }
})
```

----------------------------------------

TITLE: Configuring a Scoped Registry using npm config in Bash
DESCRIPTION: Illustrates how to use the npm config command to associate a scope with a specific registry for future operations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scope.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm config set @myco:registry=http://reg.example.com
```

----------------------------------------

TITLE: Basic JavaScript Module Export Example
DESCRIPTION: Simple JavaScript example showing the equivalent functionality that will be implemented in C++.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports.hello = () => 'world';
```

----------------------------------------

TITLE: Creating JavaScript Objects with Node-API in C
DESCRIPTION: This snippet demonstrates the equivalent operations of the previous `node-addon-api` example using the raw C Node-API functions. It involves explicitly calling `napi_create_object`, `napi_create_string_utf8`, and `napi_set_named_property`, including manual status checking (`napi_status`) and error handling after each call. This illustrates the lower-level interaction with the Node.js runtime.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_1

LANGUAGE: cpp
CODE:
```
napi_status status;
napi_value object, string;
status = napi_create_object(env, &object);
if (status != napi_ok) {
  napi_throw_error(env, ...);
  return;
}

status = napi_create_string_utf8(env, "bar", NAPI_AUTO_LENGTH, &string);
if (status != napi_ok) {
  napi_throw_error(env, ...);
  return;
}

status = napi_set_named_property(env, object, "foo", string);
if (status != napi_ok) {
  napi_throw_error(env, ...);
  return;
}
```

----------------------------------------

TITLE: Removing User from npm Team (Bash)
DESCRIPTION: This command removes a specified user (`username`) from a team (`@org:newteam`). A confirmation message indicates successful removal.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-team.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm team rm @org:newteam username
```

----------------------------------------

TITLE: Downloading and Building a Specific OpenSSL Version with FIPS (Example: 3.0.0)
DESCRIPTION: Sequence of shell commands to download the OpenSSL 3.0.0 source tarball using `wget`, extract it using `tar`, navigate into the source directory, configure it with FIPS support enabled (`./Configure enable-fips`), build it using `make`, and return to the parent directory. This is part of the process for obtaining a validated FIPS provider.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/README-FIPS.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ wget https://www.openssl.org/source/openssl-3.0.0.tar.gz
$ tar -xf openssl-3.0.0.tar.gz
$ cd openssl-3.0.0
$ ./Configure enable-fips
$ make
$ cd ..
```

----------------------------------------

TITLE: Serializing BigInt Values with querystring.stringify() in Node.js
DESCRIPTION: Demonstrates the updated behavior of querystring.stringify() in Node.js v15.5.0 and later, which now correctly serializes BigInt values into their decimal string representation within a query string. The example shows a BigInt (2 to the power of 64) being stringified. Requires the 'querystring' module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_9

LANGUAGE: js
CODE:
```
const querystring = require('querystring');
console.log(querystring.stringify({ bigint: 2n ** 64n }));
// Prints: bigint=18446744073709551616
```

----------------------------------------

TITLE: Strict Mode Error Diff Example
DESCRIPTION: Demonstration of how strict assertion mode displays detailed error diffs when comparing arrays with different values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_1

LANGUAGE: mjs
CODE:
```
import { strict as assert } from 'node:assert';

assert.deepEqual([[[1, 2, 3]], 4, 5], [[[1, 2, '3']], 4, 5]);
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

assert.deepEqual([[[1, 2, 3]], 4, 5], [[[1, 2, '3']], 4, 5]);
```

----------------------------------------

TITLE: Creating External Buffer in Node-API (C)
DESCRIPTION: Creates a node::Buffer object initialized with external data. Takes environment, buffer length, data pointer, optional finalize callback and hint, and returns a napi_value representing the buffer. May not be supported in all runtimes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_82

LANGUAGE: c
CODE:
```
napi_status napi_create_external_buffer(napi_env env,
                                        size_t length,
                                        void* data,
                                        napi_finalize finalize_cb,
                                        void* finalize_hint,
                                        napi_value* result)
```

----------------------------------------

TITLE: Zstandard Decompression Functions
DESCRIPTION: Experimental functions for decompression using Zstandard algorithm. Includes both async (zstdDecompress) and sync (zstdDecompressSync) operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#2025-04-23_snippet_27

LANGUAGE: JavaScript
CODE:
```
zlib.zstdDecompress(buffer[, options], callback)
zlib.zstdDecompressSync(buffer[, options])
```

----------------------------------------

TITLE: Listing Collaborating Teams for a Package in npm
DESCRIPTION: Command to check which teams are collaborating on a specific package in npm.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/orgs.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
npm access ls-collaborators <pkg>
```

----------------------------------------

TITLE: Rebasing the feature branch with upstream changes
DESCRIPTION: These commands fetch the latest changes from the upstream repository and rebase the current feature branch on top of the latest stable or master branch.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/CONTRIBUTING.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ git fetch upstream
$ git rebase upstream/v1.x  # or upstream/master
```

----------------------------------------

TITLE: Overview of AsyncResource API - CJS Node.js JavaScript
DESCRIPTION: This snippet demonstrates the basic usage pattern for the `AsyncResource` class in a CommonJS environment. It shows how to require `AsyncResource` and `executionAsyncId`, instantiate an `AsyncResource`, call `runInAsyncScope` to execute code within its context, call `emitDestroy` to signal resource destruction, and retrieve the resource's `asyncId` and `triggerAsyncId`. This is functionally identical to the ESM example but uses CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_8

LANGUAGE: cjs
CODE:
```
const { AsyncResource, executionAsyncId } = require('node:async_hooks');

// AsyncResource() is meant to be extended. Instantiating a
// new AsyncResource() also triggers init. If triggerAsyncId is omitted then
// async_hook.executionAsyncId() is used.
const asyncResource = new AsyncResource(
  type, { triggerAsyncId: executionAsyncId(), requireManualDestroy: false },
);

// Run a function in the execution context of the resource. This will
// * establish the context of the resource
// * trigger the AsyncHooks before callbacks
// * call the provided function `fn` with the supplied arguments
// * trigger the AsyncHooks after callbacks
// * restore the original execution context
asyncResource.runInAsyncScope(fn, thisArg, ...args);

// Call AsyncHooks destroy callbacks.
asyncResource.emitDestroy();

// Return the unique ID assigned to the AsyncResource instance.
asyncResource.asyncId();

// Return the trigger ID for the AsyncResource instance.
asyncResource.triggerAsyncId();
```

----------------------------------------

TITLE: Testing Array Sort with Holes and Undefined Values
DESCRIPTION: Test cases demonstrating the sorting behavior of arrays and array-like objects containing holes (empty slots), undefined values, and numbers. Verifies correct sorting implementation for sparse arrays.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-sort-sparse-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
testSort([,undefined,0,1])
```

LANGUAGE: javascript
CODE:
```
testSort({length:4,1:undefined,2:0,3:1})
```

----------------------------------------

TITLE: Property Descriptor Structure in Node-API
DESCRIPTION: Definition of the property descriptor structure used to define properties with Node-API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_148

LANGUAGE: c
CODE:
```
typedef struct {
  // One of utf8name or name should be NULL.
  const char* utf8name;
  napi_value name;

  napi_callback method;
  napi_callback getter;
  napi_callback setter;
  napi_value value;

  napi_property_attributes attributes;
  void* data;
} napi_property_descriptor;
```

----------------------------------------

TITLE: Defining Classes with Conflicting Private Members in JavaScript
DESCRIPTION: A code sample that defines several classes with private members named '#name' to demonstrate conflicts in the inheritance hierarchy. The base class Klass has a private field, and subclasses implement the same private name as different types (field, method, accessor, and static field).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-private-class-member-conflict-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
class Klass {
  #name = "string";
}
class ClassWithField extends Klass {
  #name = "child";
}
class ClassWithMethod extends Klass {
  #name() {}
}
class ClassWithAccessor extends Klass {
  get #name() {}
  set #name(val) {}
}
class StaticClass extends Klass {
  static #name = "child";
}
debugger;
```

----------------------------------------

TITLE: Importing Async Hooks - CommonJS
DESCRIPTION: Example of importing the async_hooks module using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_hooks.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const async_hooks = require('node:async_hooks');
```

----------------------------------------

TITLE: Demonstrating Buffer with Resizable ArrayBuffer
DESCRIPTION: Example showing how Buffer now correctly handles resizable ArrayBuffers by updating its length when the underlying ArrayBuffer size changes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_15

LANGUAGE: JavaScript
CODE:
```
const ab = new ArrayBuffer(10, { maxByteLength: 20 });
const buffer = Buffer.from(ab);
console.log(buffer.byteLength); // 10
ab.resize(15);
console.log(buffer.byteLength); // 15
ab.resize(5);
console.log(buffer.byteLength); // 5
```

----------------------------------------

TITLE: Defining Platform-Agnostic Build Targets with GYP Syntax (Python Data Structure)
DESCRIPTION: This snippet demonstrates the structure and key configuration fields used in a .gyp build file for the Chromium project. It illustrates target defaults, target definitions, platform-specific conditions, and dependency settings. The syntax is a restricted subset of Python's data structures, closely following JSON, but allows trailing commas and comments starting with #. The main input is a dictionary containing 'target_defaults', 'targets', and platform conditionals. Each target includes fields such as 'target_name', 'type', 'sources', 'include_dirs', and may contain nested platform-specific logic through 'conditions'. The snippet's output is a list of build instructions that can be processed by the GYP tool to generate platform-native IDE/project files. Limitations include forbidden use of arbitrary Python code or statements. Requires the GYP build tool for interpretation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/LanguageSpecification.md#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
{
  'target_defaults': {
    'defines': [
      'U_STATIC_IMPLEMENTATION',
      ['LOGFILE', 'foo.log',],
    ],
    'include_dirs': [
      '..',
    ],
  },
  'targets': [
    {
      'target_name': 'foo',
      'type': 'static_library',
      'sources': [
        'foo/src/foo.cc',
        'foo/src/foo_main.cc',
      ],
      'include_dirs': [
         'foo',
         'foo/include',
      ],
      'conditions': [
         [ 'OS==mac', { 'sources': [ 'platform_test_mac.mm' ] } ]
      ],
      'direct_dependent_settings': {
        'defines': [
          'UNIT_TEST',
        ],
        'include_dirs': [
          'foo',
          'foo/include',
        ],
      },
    },
  ],
}
```

----------------------------------------

TITLE: Demonstrating Async Writable Stream Finalizer (Node.js JavaScript)
DESCRIPTION: This snippet shows an example of using an `async` function for the `final` method in a Node.js Writable stream constructor. This pattern, allowing thenables in stream implementation methods, was an undocumented feature that became deprecated due to potential conflicts when mixing promise and callback semantics.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/deprecations.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const w = new Writable({
  async final(callback) {
    await someOp();
    callback();
  },
});
```

----------------------------------------

TITLE: Unpublishing a Package from npm Registry via CLI - Bash
DESCRIPTION: This bash code snippet demonstrates the usage of the npm unpublish command to remove a package or a package version from the npm registry. It supports an optional package specification, which can indicate the name and version for deletion; otherwise, details will be inferred from the current directory's project. Requires npm CLI installed and the user must be authenticated (logged in). If no version is specified, the command targets all versions or the entire package. Inputs: optional <package-spec> argument. Output: removes specific version or entire package and associated tarball from the registry. Limitations: deleted name/version combinations cannot be reused, and entire package names are locked for 24 hours.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-unpublish.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm unpublish [<package-spec>]
```

----------------------------------------

TITLE: console.table Output for String Array (JSON-like)
DESCRIPTION: Shows the structured output of `console.table` for a simple array containing three strings: 'apples', 'oranges', and 'bananas'. It details the array's description, properties (indices 0, 1, 2 with their string values), subtype (array), and type (object).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-table-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    description : Array(3)
    overflow : false
    properties : [
        [0] : {
            name : 0
            type : string
            value : apples
        }
        [1] : {
            name : 1
            type : string
            value : oranges
        }
        [2] : {
            name : 2
            type : string
            value : bananas
        }
    ]
    subtype : array
    type : object
}
```

----------------------------------------

TITLE: Child Process Fork URL Support
DESCRIPTION: Adding URL support to child_process.fork() method to allow passing URLs as module paths when forking new Node.js processes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V17.md#2025-04-23_snippet_18

LANGUAGE: JavaScript
CODE:
```
child_process.fork(new URL('path/to/module'))
```

----------------------------------------

TITLE: Illustrating Tarball References in Markdown
DESCRIPTION: This snippet provides examples of referencing packages using tarball files or URLs, which is the format used when packages are uploaded to a registry.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/package-spec.md#2025-04-23_snippet_5

LANGUAGE: markdown
CODE:
```
* `./my-package.tgz`
* `https://registry.npmjs.org/semver/-/semver-1.0.0.tgz`
```

----------------------------------------

TITLE: Evaluating Boolean Expressions in Return Statements (JavaScript)
DESCRIPTION: These snippets test the direct evaluation of various boolean expressions using comparison (<, <=) and logical operators (&&, ||) with numeric literals (0, 1) and a variable 'Zero'. The result of the expression (true or false) is directly returned by the statement.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-less-expected.txt#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
return 1 || (0<=0);
```

LANGUAGE: javascript
CODE:
```
return 1 && (0<0);
```

LANGUAGE: javascript
CODE:
```
return 1 && (0<=0);
```

LANGUAGE: javascript
CODE:
```
return (1<0);
```

LANGUAGE: javascript
CODE:
```
return (1<=0);
```

LANGUAGE: javascript
CODE:
```
return (1<0) || 1;
```

LANGUAGE: javascript
CODE:
```
return (1<=0) || 1;
```

LANGUAGE: javascript
CODE:
```
return (1<0) && 1;
```

LANGUAGE: javascript
CODE:
```
return (1<=0) && 1;
```

LANGUAGE: javascript
CODE:
```
return 1 || (1<0);
```

LANGUAGE: javascript
CODE:
```
return 1 || (1<=0);
```

LANGUAGE: javascript
CODE:
```
return 1 && (1<0);
```

LANGUAGE: javascript
CODE:
```
return 1 && (1<=0);
```

LANGUAGE: javascript
CODE:
```
return (Zero<1);
```

LANGUAGE: javascript
CODE:
```
return (Zero<=1);
```

LANGUAGE: javascript
CODE:
```
return (Zero<1) || 1;
```

LANGUAGE: javascript
CODE:
```
return (Zero<=1) || 1;
```

LANGUAGE: javascript
CODE:
```
return (Zero<1) && 1;
```

LANGUAGE: javascript
CODE:
```
return (Zero<=1) && 1;
```

LANGUAGE: javascript
CODE:
```
return 1 || (Zero<1);
```

LANGUAGE: javascript
CODE:
```
return 1 || (Zero<=1);
```

LANGUAGE: javascript
CODE:
```
return 1 && (Zero<1);
```

LANGUAGE: javascript
CODE:
```
return 1 && (Zero<=1);
```

LANGUAGE: javascript
CODE:
```
return (Zero<0);
```

LANGUAGE: javascript
CODE:
```
return (Zero<=0);
```

LANGUAGE: javascript
CODE:
```
return (Zero<0) || 1;
```

LANGUAGE: javascript
CODE:
```
return (Zero<=0) || 1;
```

LANGUAGE: javascript
CODE:
```
return (Zero<0) && 1;
```

LANGUAGE: javascript
CODE:
```
return (Zero<=0) && 1;
```

LANGUAGE: javascript
CODE:
```
return 1 || (Zero<0);
```

LANGUAGE: javascript
CODE:
```
return 1 || (Zero<=0);
```

LANGUAGE: javascript
CODE:
```
return 1 && (Zero<0);
```

LANGUAGE: javascript
CODE:
```
return 1 && (Zero<=0);
```

LANGUAGE: javascript
CODE:
```
return (1<Zero);
```

----------------------------------------

TITLE: Requiring Native Addon (Node.js CJS)
DESCRIPTION: Demonstrates requiring a native addon module using the CommonJS `require` function. This operation is restricted by the Node.js Permission Model unless the `--allow-addons` flag is used.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
require('nodejs-addon-example');
```

----------------------------------------

TITLE: Inserting Org Members Using libnpmorg set() in JavaScript
DESCRIPTION: Illustrates use of org.set() to add a user with a specified role to an npm Organization in Node.js, using libnpmorg and an auth token. Organizational (org) and user names accept either plain or @-prefixed forms. The function returns a Promise resolving to a MembershipDetail object with org info and the user's new role. Requires libnpmorg, Node.js, and relevant permissions; outputs the membership details on success; fails if authentication or arguments are incorrect.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmorg/README.md#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
await org.set('@myorg', '@myuser', 'admin', {token: 'deadbeef'})
=>
MembershipDetail {
  org: {
    name: 'myorg',
    size: 15
  },
  user: 'myuser',
  role: 'admin'
}
```

----------------------------------------

TITLE: Example of Formatted TypeError Name with Code
DESCRIPTION: This text snippet provides a concrete example of how a JavaScript `TypeError` object's `name` property is formatted when created or thrown via N-API with the error code 'ERR_ERROR_1'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_33

LANGUAGE: text
CODE:
```
TypeError [ERR_ERROR_1]
```

----------------------------------------

TITLE: Result Count Validation Examples
DESCRIPTION: Examples showing how to validate the number of results returned from npm query commands
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-query.md#2025-04-23_snippet_4

LANGUAGE: sh
CODE:
```
$ npm query '#react' --expect-result-count=1
```

LANGUAGE: sh
CODE:
```
$ npm query ':root>:outdated(in-range).prod' --no-expect-results
```

----------------------------------------

TITLE: Starting Multiple REPL Instances in Node.js
DESCRIPTION: Demonstrates creating multiple REPL instances within a single Node.js process, sharing a global object but with separate I/O interfaces. Includes stdin, Unix socket, and TCP socket examples.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
import net from 'node:net';
import repl from 'node:repl';
import process from 'node:process';
import fs from 'node:fs';

let connections = 0;

repl.start({
  prompt: 'Node.js via stdin> ',
  useGlobal: true,
  input: process.stdin,
  output: process.stdout,
});

const unixSocketPath = '/tmp/node-repl-sock';

// If the socket file already exists let's remove it
fs.rmSync(unixSocketPath, { force: true });

net.createServer((socket) => {
  connections += 1;
  repl.start({
    prompt: 'Node.js via Unix socket> ',
    useGlobal: true,
    input: socket,
    output: socket,
  }).on('exit', () => {
    socket.end();
  });
}).listen(unixSocketPath);

net.createServer((socket) => {
  connections += 1;
  repl.start({
    prompt: 'Node.js via TCP socket> ',
    useGlobal: true,
    input: socket,
    output: socket,
  }).on('exit', () => {
    socket.end();
  });
}).listen(5001);
```

LANGUAGE: javascript
CODE:
```
const net = require('node:net');
const repl = require('node:repl');
const fs = require('node:fs');

let connections = 0;

repl.start({
  prompt: 'Node.js via stdin> ',
  useGlobal: true,
  input: process.stdin,
  output: process.stdout,
});

const unixSocketPath = '/tmp/node-repl-sock';

// If the socket file already exists let's remove it
fs.rmSync(unixSocketPath, { force: true });

net.createServer((socket) => {
  connections += 1;
  repl.start({
    prompt: 'Node.js via Unix socket> ',
    useGlobal: true,
    input: socket,
    output: socket,
  }).on('exit', () => {
    socket.end();
  });
}).listen(unixSocketPath);

net.createServer((socket) => {
  connections += 1;
  repl.start({
    prompt: 'Node.js via TCP socket> ',
    useGlobal: true,
    input: socket,
    output: socket,
  }).on('exit', () => {
    socket.end();
  });
}).listen(5001);
```

----------------------------------------

TITLE: Getting Last MockCallHistory Log in JavaScript
DESCRIPTION: Retrieves the last registered MockCallHistoryLog entry or undefined if none exists.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockCallHistory.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
mockAgent.getCallHistory()?.lastCall()
```

----------------------------------------

TITLE: Automatic Content-Length Calculation for JSON Object Responses
DESCRIPTION: This example shows how to use replyContentLength method to automatically calculate and set the content-length header for JSON object responses in Undici mocks. It calculates the length based on the stringified JSON representation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/foo',
  method: 'GET'
}).replyContentLength().reply(200, { foo: 'bar' })

const { headers } = await request('http://localhost:3000/foo')

console.log('headers', headers) // headers { 'content-length': '13' }
```

----------------------------------------

TITLE: Creating Multiple REPL Instances
DESCRIPTION: Shows how to create multiple REPL instances using both repl.start() and new REPLServer() constructor with custom options.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_19

LANGUAGE: mjs
CODE:
```
import repl from 'node:repl';

const options = { useColors: true };

const firstInstance = repl.start(options);
const secondInstance = new repl.REPLServer(options);
```

----------------------------------------

TITLE: Executing npm link Command in Bash
DESCRIPTION: Shows the basic syntax for using the npm link command, including its alias.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm link [<package-spec>]

alias: ln
```

----------------------------------------

TITLE: Getting JavaScript Array Length in N-API
DESCRIPTION: Function to retrieve the length of a JavaScript Array. Takes the environment and array value as input and returns the length as a uint32 value.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_104

LANGUAGE: c
CODE:
```
napi_status napi_get_array_length(napi_env env,
                                  napi_value value,
                                  uint32_t* result)
```

----------------------------------------

TITLE: Escaping Quotes in Strings with Quotes Option - JavaScript
DESCRIPTION: This JavaScript snippet uses the 'quotes' option in cssesc() to control how single and double quotes are escaped for CSS string literals. When wrapping in single or double quotes, occurrences of that quote will be properly escaped. Demonstrates both 'single' and 'double' quote settings.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cssesc/README.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
cssesc('Lorem ipsum "dolor" sit \'amet\' etc.');
// → 'Lorem ipsum "dolor" sit \\\'amet\\\' etc.'
// → "Lorem ipsum \"dolor\" sit \\'amet\\' etc."

cssesc('Lorem ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'single'
});
// → 'Lorem ipsum "dolor" sit \\\'amet\\\' etc.'
// → "Lorem ipsum \"dolor\" sit \\'amet\\' etc."

cssesc('Lorem ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'double'
});
// → 'Lorem ipsum \\"dolor\\" sit \'amet\' etc.'
// → "Lorem ipsum \\\"dolor\\" sit 'amet' etc."
```

----------------------------------------

TITLE: Updating Package Manager to Latest Version with Corepack CLI
DESCRIPTION: The 'corepack up' command retrieves the latest available version for the current major release line of the package manager used in the local project and updates the project to use it.
SOURCE: https://github.com/nodejs/node/blob/main/deps/corepack/README.md#2025-04-23_snippet_9

LANGUAGE: markdown
CODE:
```
### `corepack up`

Retrieve the latest available version for the current major release line of
the package manager used in the local project, and update the project to use
it.

Unlike `corepack use` this command doesn't take a package manager name nor a
version range, as it will always select the latest available version from the
range specified in `devEngines.packageManager.version`, or fallback to the
same major line. Should you need to upgrade to a new major, use an explicit
`corepack use {name}@latest` call (or simply `corepack use {name}`).
```

----------------------------------------

TITLE: HTTP CONNECT Example with Echo Server
DESCRIPTION: Demonstrates how to use HTTP CONNECT method to establish two-way communication with echo functionality.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  throw Error('should never get here')
}).listen()

server.on('connect', (req, socket, head) => {
  socket.write('HTTP/1.1 200 Connection established\r\n\r\n')

  let data = head.toString()
  socket.on('data', (buf) => {
    data += buf.toString()
  })

  socket.on('end', () => {
    socket.end(data)
  })
})

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

try {
  const { socket } = await client.connect({
    path: '/'
  })
  const wanted = 'Body'
  let data = ''
  socket.on('data', d => { data += d })
  socket.on('end', () => {
    console.log(`Data received: ${data.toString()} | Data wanted: ${wanted}`)
    client.close()
    server.close()
  })
  socket.write(wanted)
  socket.end()
} catch (error) { }
```

----------------------------------------

TITLE: Unsubscribing from Diagnostics Channel Events - Node.js (CommonJS)
DESCRIPTION: Presents the CommonJS variant for unsubscribing from a diagnostics channel. Uses 'node:diagnostics_channel', registers and then unregisters a handler function for a specific channel. The unsubscribe method returns true if the handler was found and removed, false otherwise. Deprecated in favor of diagnostics_channel.unsubscribe(name, onMessage).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_21

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const diagnostics_channel = require('node:diagnostics_channel');\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nfunction onMessage(message, name) {\n  // Received data\n}\n\nchannel.subscribe(onMessage);\n\nchannel.unsubscribe(onMessage);
```

----------------------------------------

TITLE: Stripping TypeScript Types using ES Modules (Basic)
DESCRIPTION: Demonstrates importing and using `stripTypeScriptTypes` from `node:module` in an ES Module context to remove basic TypeScript type annotations from a string. The default `mode` ('strip') is used, which only removes type syntax without transforming other TypeScript features.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_6

LANGUAGE: mjs
CODE:
```
import { stripTypeScriptTypes } from 'node:module';
const code = 'const a: number = 1;';
const strippedCode = stripTypeScriptTypes(code);
console.log(strippedCode);
// Prints: const a         = 1;
```

----------------------------------------

TITLE: Using Call History Instance Methods
DESCRIPTION: Demonstrates the various methods available on the MockAgent call history instance for retrieving, filtering, and manipulating call records.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
const mockAgent = new MockAgent()

const mockAgentHistory = mockAgent.getCallHistory()

mockAgentHistory?.calls() // returns an array of MockCallHistoryLogs
mockAgentHistory?.firstCall() // returns the first MockCallHistoryLogs or undefined
mockAgentHistory?.lastCall() // returns the last MockCallHistoryLogs or undefined
mockAgentHistory?.nthCall(3) // returns the third MockCallHistoryLogs or undefined
mockAgentHistory?.filterCalls({ path: '/endpoint', hash: '#hash-value' }) // returns an Array of MockCallHistoryLogs WHERE path === /endpoint OR hash === #hash-value
mockAgentHistory?.filterCalls({ path: '/endpoint', hash: '#hash-value' }, { operator: 'AND' }) // returns an Array of MockCallHistoryLogs WHERE path === /endpoint AND hash === #hash-value
mockAgentHistory?.filterCalls(/"data": "{}"/) // returns an Array of MockCallHistoryLogs where any value match regexp
mockAgentHistory?.filterCalls('application/json') // returns an Array of MockCallHistoryLogs where any value === 'application/json'
mockAgentHistory?.filterCalls((log) => log.path === '/endpoint') // returns an Array of MockCallHistoryLogs when given function returns true
mockAgentHistory?.clear() // clear the history
```

----------------------------------------

TITLE: Generating Prime Numbers in Node.js Crypto Module
DESCRIPTION: The crypto.generatePrime and crypto.generatePrimeSync functions generate pseudorandom prime numbers of a specified size. They support options for safe primes and additional requirements for use cases like Diffie-Hellman.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_71

LANGUAGE: JavaScript
CODE:
```
crypto.generatePrime(size[, options[, callback]])
```

LANGUAGE: JavaScript
CODE:
```
crypto.generatePrimeSync(size[, options])
```

----------------------------------------

TITLE: Coercing JavaScript Value to Object in Node-API
DESCRIPTION: Function to implement ECMAScript ToObject() operation for converting values to object type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_129

LANGUAGE: c
CODE:
```
napi_status napi_coerce_to_object(napi_env env,
                                  napi_value value,
                                  napi_value* result)
```

----------------------------------------

TITLE: Generating Small QR Code with Callback and Options in qrcode-terminal (JavaScript)
DESCRIPTION: Combines the small output option and the callback feature of generate. The method receives the small-format QR code as a string for further processing in the callback. Suitable for automated scripts needing custom handling or logging.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/qrcode-terminal/README.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
qrcode.generate('This will be a small QRCode, eh!', {small: true}, function (qrcode) {
    console.log(qrcode)
});
```

----------------------------------------

TITLE: Checking BigUint64Array in JavaScript
DESCRIPTION: Illustrates the use of util.types.isBigUint64Array() to check if a value is a BigUint64Array instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_66

LANGUAGE: javascript
CODE:
```
util.types.isBigUint64Array(new BigInt64Array());   // Returns false
util.types.isBigUint64Array(new BigUint64Array());  // Returns true
```

----------------------------------------

TITLE: Global Proxy Request Implementation
DESCRIPTION: Shows how to use EnvHttpProxyAgent with the request API using global dispatcher configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/EnvHttpProxyAgent.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import { setGlobalDispatcher, request, EnvHttpProxyAgent } from 'undici'

const envHttpProxyAgent = new EnvHttpProxyAgent()
setGlobalDispatcher(envHttpProxyAgent)

const { statusCode, body } = await request('http://localhost:3000/foo')

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Validating Funding Objects with libnpmfund.isValidFunding() in JavaScript
DESCRIPTION: This example demonstrates the `fund.isValidFunding()` function. It returns `true` if the provided input represents a valid funding source (like a URL string or certain object structures) and `false` otherwise, useful for checking the format of funding data. Assumes `isValidFunding` is imported from `libnpmfund`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmfund/README.md#2025-04-23_snippet_3

LANGUAGE: js
CODE:
```
isValidFunding({ foo: 'not a valid funding obj' })
// => false

isValidFunding('http://example.com')
// => true
```

----------------------------------------

TITLE: Importing Wasm Source for Custom Instantiation (JavaScript)
DESCRIPTION: Illustrates using `import source` to load a `.wasm` file as a `WebAssembly.Module` object rather than an instance. This allows for custom instantiation using `WebAssembly.instantiate`, enabling different imports or multiple instances. Requires the `--experimental-wasm-modules` flag.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_16

LANGUAGE: javascript
CODE:
```
import source libraryModule from './library.wasm';

const instance1 = await WebAssembly.instantiate(libraryModule, {
  custom: import1,
});

const instance2 = await WebAssembly.instantiate(libraryModule, {
  custom: import2,
});
```

----------------------------------------

TITLE: Using the Special Variable Underscore for Last Expression Result in REPL (console)
DESCRIPTION: Illustrates how the special variable '_' holds the result of the last evaluated expression in REPL. Setting '_' disables automatic assignment and persists its value. The snippet demonstrates retrieving a property from '_', modifying it, and observing behavior after reassignment. Output includes data reflecting both standard and altered REPL variable behavior.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_10

LANGUAGE: console
CODE:
```
> [ 'a', 'b', 'c' ]
[ 'a', 'b', 'c' ]
> _.length
3
> _ += 1
Expression assignment to _ now disabled.
4
> 1 + 1
2
> _
4
```

----------------------------------------

TITLE: Testing Proxy instantiation in Node.js Runtime
DESCRIPTION: Creates a new Proxy with an empty object and arrow function handler. The runtime shows how Proxy objects are represented with weak references.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/deep-serialization-local-references-expected.txt#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
new Proxy({}, ()=>{})
```

----------------------------------------

TITLE: Retrieving Brief V8 CppHeap Statistics in Node.js
DESCRIPTION: Example structure of the object returned by `v8.getCppHeapStatistics()` when the `detailLevel` parameter is set to `'brief'`. This provides only top-level allocated and used memory statistics for the entire CppHeap.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_7

LANGUAGE: js
CODE:
```
// Brief
({
  committed_size_bytes: 131072,
  resident_size_bytes: 131072,
  used_size_bytes: 128864,
  space_statistics: [],
  type_names: [],
  detail_level: 'brief',
});
```

----------------------------------------

TITLE: Comparing CITGM Results with ncu-ci (Bash)
DESCRIPTION: Installs the `@node-core/utils` package globally using `npm i -g` and then uses the `ncu-ci` command from that package to compare the results of two `citgm` (Canary In The Gold Mine) CI job runs, identified by their run IDs (10 and 11). This helps check for potential ecosystem regressions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/releases.md#_snippet_28

LANGUAGE: bash
CODE:
```
npm i -g @node-core/utils
ncu-ci citgm 10 11
```

----------------------------------------

TITLE: Error Handling in path.join
DESCRIPTION: Illustrates that `path.join()` throws a TypeError if any of the provided path segments is not a string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_31

LANGUAGE: js
CODE:
```
path.join('foo', {}, 'bar');
// Throws 'TypeError: Path must be a string. Received {}'
```

----------------------------------------

TITLE: Creating Custom Error with Message - JavaScript
DESCRIPTION: Defines CustomMsgError class inheriting from Error, creates an instance, removes the stack property, sets the message to 'foobar', and returns the object. Requires ES6 support for class/extends, assigns a custom message for further inspection. Input: none; Output: CustomMsgError instance with message set, stack removed.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_29

LANGUAGE: JavaScript
CODE:
```
class CustomMsgError extends Error {};
a = new CustomMsgError();
delete a.stack;
a.message = 'foobar';
a
```

----------------------------------------

TITLE: Implementing Recursive Function with Tail Call in JavaScript
DESCRIPTION: This snippet defines a recursive function 'f' that demonstrates tail call optimization. The function decrements its input until it reaches zero, with a debugger breakpoint when x equals 2.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/stepping-tail-call-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
function f(x) {
  if (x == 2) debugger;
  if (x-- > 0) return f(x);
}
```

----------------------------------------

TITLE: Adding Platform-Independent Source Files in GYP
DESCRIPTION: Demonstrates the common task of adding new source files to a GYP target when the files are intended to be built on all supported platforms. This involves simply adding the file paths (relative to the `.gyp` file's directory) to the 'sources' list within the target's definition. It is recommended to keep this list sorted alphabetically.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/UserDocumentation.md#2025-04-23_snippet_3

LANGUAGE: gyp
CODE:
```
  {
    'targets': [
      {
        'target_name': 'my_target',
        'type': 'executable',
        'sources': [
          '../other/file_1.cc',
          'new_file.cc',
          'subdir/file3.cc',
        ],
      },
    ],
  },
```

----------------------------------------

TITLE: SQLite Database Backup Example - ES Modules
DESCRIPTION: Example showing how to backup a SQLite database using ES Modules syntax. Demonstrates the backup function with progress tracking.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/sqlite.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
import { backup, DatabaseSync } from 'node:sqlite';

const sourceDb = new DatabaseSync('source.db');
const totalPagesTransferred = await backup(sourceDb, 'backup.db', {
  rate: 1, // Copy one page at a time.
  progress: ({ totalPages, remainingPages }) => {
    console.log('Backup in progress', { totalPages, remainingPages });
  },
});

console.log('Backup completed', totalPagesTransferred);
```

----------------------------------------

TITLE: Executing npm-star Command in Bash
DESCRIPTION: This command is used to star one or more packages in npm. It takes package specifications as arguments. Starring a package indicates interest in it and is a boolean operation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-star.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm star [<package-spec>...]
```

----------------------------------------

TITLE: HTTP Set-Cookie Header Handling
DESCRIPTION: Implements splitting of set-cookie headers when using setHeaders method to properly handle multiple cookies.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
**http**: split set-cookie when using setHeaders
```

----------------------------------------

TITLE: Output: console.error with multiple formatters (%c, %i, %c, %s)
DESCRIPTION: Shows the structured argument list for `console.error('%c%i%c%s', 'color:red', 42, 'color:green', 'Message!')`. It tests multiple formatters including style (%c), integer (%i), and string (%s) with their respective arguments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-formatter-expected.txt#2025-04-23_snippet_23

LANGUAGE: text
CODE:
```
error[
    [0] : {
        type : string
        value : %c%i%c%s
    }
    [1] : {
        type : string
        value : color:red
    }
    [2] : {
        description : 42
        type : number
        value : 42
    }
    [3] : {
        type : string
        value : color:green
    }
    [4] : {
        type : string
        value : Message!
    }
]
```

----------------------------------------

TITLE: Creating a Benchmark in JavaScript
DESCRIPTION: Demonstrates how to create a benchmark using the createBenchmark function from the common.js module. This is the basic structure for writing benchmarks in Node.js core.
SOURCE: https://github.com/nodejs/node/blob/main/benchmark/README.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
createBenchmark(fn, configs[, options])
```

----------------------------------------

TITLE: Setting IPv6 Multicast Interface Using setMulticastInterface (Linux-style) - JavaScript
DESCRIPTION: Shows configuration of the outgoing multicast interface for an IPv6 UDP socket using Node.js 'dgram'. The interface is specified with a scope name (e.g., '%eth1'). After binding the socket, 'setMulticastInterface' is called to define the default multicast interface. Dependencies: 'dgram', working knowledge of network interfaces. Inputs: port, multicast interface string with scope. Output: socket set to use the specified multicast interface for multicast packets.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
const socket = dgram.createSocket('udp6');\n\nsocket.bind(1234, () => {\n  socket.setMulticastInterface('::%eth1');\n});
```

----------------------------------------

TITLE: Filtering MockCallHistory by Host in JavaScript
DESCRIPTION: Filters MockCallHistoryLog entries by their host using either a regular expression or a string match.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockCallHistory.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
mockAgent.getCallHistory()?.filterCallsByHost(/localhost/)
mockAgent.getCallHistory()?.filterCallsByHost('localhost:3000')
```

----------------------------------------

TITLE: Getting System Time in C using libuv
DESCRIPTION: Obtains the current system time from a high-resolution real-time or monotonic clock source.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/misc.rst#2025-04-23_snippet_22

LANGUAGE: C
CODE:
```
int uv_clock_gettime(uv_clock_id clock_id, uv_timespec64_t* ts)
```

----------------------------------------

TITLE: Creating a TypeError with internal/errors.js in Node.js
DESCRIPTION: Demonstrates how to replace a standard TypeError with a custom error using the internal/errors module. This approach allows for static error codes and parameterized messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/using-internal-errors.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const err = new TypeError(`Expected string received ${type}`);
```

LANGUAGE: javascript
CODE:
```
E('FOO', 'Expected string received %s', TypeError);
```

LANGUAGE: javascript
CODE:
```
const { FOO } = require('internal/errors').codes;
// ...
const err = new FOO(type);
```

----------------------------------------

TITLE: Process Communication in Node.js
DESCRIPTION: Shows the process.send() method usage for inter-process communication, which was noted to have non-synchronous behavior contrary to documentation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_IOJS.md#2025-04-23_snippet_18

LANGUAGE: JavaScript
CODE:
```
process.send()
```

----------------------------------------

TITLE: Using the Special Variable _error for Last Error in REPL (console)
DESCRIPTION: Shows how the REPL's '_error' variable automatically references the last seen error, unless explicitly set, by manually triggering an error and then inspecting it. No external dependencies are required. Outputs the error message, demonstrating REPL-specific last error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_11

LANGUAGE: console
CODE:
```
> throw new Error('foo');
Uncaught Error: foo
> _error.message
'foo'
```

----------------------------------------

TITLE: Performing Strict Equality Comparison with napi_strict_equals in C
DESCRIPTION: This function implements the JavaScript strict equality (===) comparison in C. It compares two napi_value objects for strict equality and returns the result as a boolean.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_140

LANGUAGE: c
CODE:
```
napi_status napi_strict_equals(napi_env env,
                               napi_value lhs,
                               napi_value rhs,
                               bool* result)
```

----------------------------------------

TITLE: Getting System Error Name with util.getSystemErrorName (JS)
DESCRIPTION: Demonstrates retrieving the string name (e.g., 'ENOENT') for a numeric system error code using `util.getSystemErrorName`. The example uses `fs.access` to generate an error and then looks up the name based on `err.errno`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_12

LANGUAGE: js
CODE:
```
fs.access('file/that/does/not/exist', (err) => {
  const name = util.getSystemErrorName(err.errno);
  console.error(name);  // ENOENT
});
```

----------------------------------------

TITLE: Injecting Resources Programmatically Using Postject - Node.js JavaScript
DESCRIPTION: This JavaScript snippet shows how to use the postject npm module programmatically by requiring its 'inject' method and injecting a resource into an executable. It requires the 'postject' package to be installed as a dependency. The function 'inject' takes the target filename, resource name, and a Buffer representing the resource to inject. Inputs are the path to the binary, the section or resource name, and the resource content; it returns a Promise that resolves when injection is complete.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/postject/README.markdown#2025-04-23_snippet_2

LANGUAGE: js
CODE:
```
const { inject } = require('postject');

await inject('a.out', 'lol', Buffer.from('Hello, world!'));
```

----------------------------------------

TITLE: Viewing Package Contributors
DESCRIPTION: Shows how to view the list of contributors for a package using npm view command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-view.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
npm view npm contributors
```

----------------------------------------

TITLE: URL origin with Internationalized Domain Names
DESCRIPTION: Example demonstrating how the origin property handles Internationalized Domain Names (IDN) by converting them to Punycode.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
const idnURL = new URL('https://測試');
console.log(idnURL.origin);
// Prints https://xn--g6w251d

console.log(idnURL.hostname);
// Prints xn--g6w251d
```

----------------------------------------

TITLE: Comparing Two Package Versions Using Registry Specifiers
DESCRIPTION: Example of comparing two different versions of a package named 'abbrev' from the npm registry using the --diff flag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-diff.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm diff --diff=abbrev@1.1.0 --diff=abbrev@1.1.1
```

----------------------------------------

TITLE: Checking for ArrayBuffer Type with napi_is_arraybuffer in C
DESCRIPTION: This function checks if a JavaScript object is an ArrayBuffer. It returns the result as a boolean, indicating whether the given value is an ArrayBuffer instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_134

LANGUAGE: c
CODE:
```
napi_status napi_is_arraybuffer(napi_env env, napi_value value, bool* result)
```

----------------------------------------

TITLE: Using Custom User Conditions with Node.js CLI
DESCRIPTION: Demonstrates how to specify custom user conditions when running Node.js using the --conditions flag. This allows for environment-specific package resolution beyond the built-in conditions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
node --conditions=development index.js
```

----------------------------------------

TITLE: Handling 'trailers' Event on Http2Stream - JavaScript
DESCRIPTION: Demonstrates how to register a listener for the 'trailers' event on an `Http2Stream` instance. This event is emitted when trailing HTTP/2 header fields are received. The listener receives the headers object and associated flags.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_16

LANGUAGE: js
CODE:
```
stream.on('trailers', (headers, flags) => {
  console.log(headers);
});
```

----------------------------------------

TITLE: Performing DNS Lookup in Node.js (CommonJS)
DESCRIPTION: This snippet shows how to use the dns.lookup() method to resolve a domain name to an IP address using CommonJS modules. It demonstrates the same functionality as the ESM version but with a different import syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
const dns = require('node:dns');

dns.lookup('example.org', (err, address, family) => {
  console.log('address: %j family: IPv%s', address, family);
});
// address: "2606:2800:21f:cb07:6820:80da:af6b:8b2c" family: IPv6
```

----------------------------------------

TITLE: V8 Heap Statistics Example
DESCRIPTION: Shows the structure of heap statistics object returned by getHeapStatistics().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
{
  total_heap_size: 7326976,
  total_heap_size_executable: 4194304,
  total_physical_size: 7326976,
  total_available_size: 1152656,
  used_heap_size: 3476208,
  heap_size_limit: 1535115264,
  malloced_memory: 16384,
  peak_malloced_memory: 1127496,
  does_zap_garbage: 0,
  number_of_native_contexts: 1,
  number_of_detached_contexts: 0,
  total_global_handles_size: 8192,
  used_global_handles_size: 3296,
  external_memory: 318824
}
```

----------------------------------------

TITLE: Node-API Value Type Enumeration
DESCRIPTION: Enumeration defining the possible types of napi_value, corresponding to JavaScript value types including special types like external values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_72

LANGUAGE: c
CODE:
```
typedef enum {
  // ES6 types (corresponds to typeof)
  napi_undefined,
  napi_null,
  napi_boolean,
  napi_number,
  napi_string,
  napi_symbol,
  napi_object,
  napi_function,
  napi_external,
  napi_bigint,
} napi_valuetype;
```

----------------------------------------

TITLE: Swapping 64-bit Buffer Byte Order - Node.js
DESCRIPTION: Shows the `buf.swap64()` method, which swaps the byte order of the buffer's contents in-place, treating it as an array of 64-bit numbers. This operation requires the buffer length to be a multiple of 8.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_75

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: <Buffer 01 02 03 04 05 06 07 08>

buf1.swap64();

console.log(buf1);
// Prints: <Buffer 08 07 06 05 04 03 02 01>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap64();
// Throws ERR_INVALID_BUFFER_SIZE.
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: <Buffer 01 02 03 04 05 06 07 08>

buf1.swap64();

console.log(buf1);
// Prints: <Buffer 08 07 06 05 04 03 02 01>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap64();
// Throws ERR_INVALID_BUFFER_SIZE.
```

----------------------------------------

TITLE: Implementing a synchronous 'load' hook for custom source retrieval
DESCRIPTION: Example of a synchronous 'load' hook that performs equivalent logic to the asynchronous version. This version works with module.registerHooks() rather than module.register().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
// Synchronous version accepted by module.registerHooks().
function load(url, context, nextLoad) {
  // Similar to the asynchronous load() above, since that one does not have
  // any asynchronous logic.
}
```

----------------------------------------

TITLE: Example GC Profiler Output in JSON Format
DESCRIPTION: This JSON snippet shows an example of the output structure returned by the GCProfiler's stop() method. It includes version information, start and end times, and detailed statistics about the garbage collection process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_26

LANGUAGE: json
CODE:
```
{
  "version": 1,
  "startTime": 1674059033862,
  "statistics": [
    {
      "gcType": "Scavenge",
      "beforeGC": {
        "heapStatistics": {
          "totalHeapSize": 5005312,
          "totalHeapSizeExecutable": 524288,
          "totalPhysicalSize": 5226496,
          "totalAvailableSize": 4341325216,
          "totalGlobalHandlesSize": 8192,
          "usedGlobalHandlesSize": 2112,
          "usedHeapSize": 4883840,
          "heapSizeLimit": 4345298944,
          "mallocedMemory": 254128,
          "externalMemory": 225138,
          "peakMallocedMemory": 181760
        },
        "heapSpaceStatistics": [
          {
            "spaceName": "read_only_space",
            "spaceSize": 0,
            "spaceUsedSize": 0,
            "spaceAvailableSize": 0,
            "physicalSpaceSize": 0
          }
        ]
      },
      "cost": 1574.14,
      "afterGC": {
        "heapStatistics": {
          "totalHeapSize": 6053888,
          "totalHeapSizeExecutable": 524288,
          "totalPhysicalSize": 5500928,
          "totalAvailableSize": 4341101384,
          "totalGlobalHandlesSize": 8192,
          "usedGlobalHandlesSize": 2112,
          "usedHeapSize": 4059096,
          "heapSizeLimit": 4345298944,
          "mallocedMemory": 254128,
          "externalMemory": 225138,
          "peakMallocedMemory": 181760
        },
        "heapSpaceStatistics": [
          {
            "spaceName": "read_only_space",
            "spaceSize": 0,
            "spaceUsedSize": 0,
            "spaceAvailableSize": 0,
            "physicalSpaceSize": 0
          }
        ]
      }
    }
  ],
  "endTime": 1674059036865
}
```

----------------------------------------

TITLE: Dynamic Import using USE_MAIN_CONTEXT_DEFAULT_LOADER with vm.Script (CommonJS)
DESCRIPTION: Demonstrates using 'importModuleDynamically: constants.USE_MAIN_CONTEXT_DEFAULT_LOADER' with vm.Script in CommonJS mode to enable dynamic ESM-style 'import()' within vm-compiled scripts. Node.js built-in modules are loaded using the main context\'s loader; limitation: loaded objects are not instances of the built-in classes in the context used for evaluation. Requires Node.js 'vm' module. Inputs: Script text with import(), config options; Outputs: Promise resolving to false as Function objects do not cross contexts.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_27

LANGUAGE: cjs
CODE:
```
const { Script, constants } = require('node:vm');
const script = new Script(
  'import("node:fs").then(({readFile}) => readFile instanceof Function)',
  { importModuleDynamically: constants.USE_MAIN_CONTEXT_DEFAULT_LOADER });

// false: URL loaded from the main context is not an instance of the Function
// class in the new context.
script.runInNewContext().then(console.log);
```

----------------------------------------

TITLE: Retrieving Detailed V8 CppHeap Statistics in Node.js
DESCRIPTION: Example structure of the object returned by `v8.getCppHeapStatistics()` with the default `'detailed'` level. It includes comprehensive memory statistics, broken down by space and page, along with freelist information and object type histograms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_6

LANGUAGE: js
CODE:
```
// Detailed
({
  committed_size_bytes: 131072,
  resident_size_bytes: 131072,
  used_size_bytes: 152,
  space_statistics: [
    {
      name: 'NormalPageSpace0',
      committed_size_bytes: 0,
      resident_size_bytes: 0,
      used_size_bytes: 0,
      page_stats: [{}],
      free_list_stats: {},
    },
    {
      name: 'NormalPageSpace1',
      committed_size_bytes: 131072,
      resident_size_bytes: 131072,
      used_size_bytes: 152,
      page_stats: [{}],
      free_list_stats: {},
    },
    {
      name: 'NormalPageSpace2',
      committed_size_bytes: 0,
      resident_size_bytes: 0,
      used_size_bytes: 0,
      page_stats: [{}],
      free_list_stats: {},
    },
    {
      name: 'NormalPageSpace3',
      committed_size_bytes: 0,
      resident_size_bytes: 0,
      used_size_bytes: 0,
      page_stats: [{}],
      free_list_stats: {},
    },
    {
      name: 'LargePageSpace',
      committed_size_bytes: 0,
      resident_size_bytes: 0,
      used_size_bytes: 0,
      page_stats: [{}],
      free_list_stats: {},
    },
  ],
  type_names: [],
  detail_level: 'detailed',
});
```

----------------------------------------

TITLE: Creating Range Errors in Node-API
DESCRIPTION: Function to create a JavaScript RangeError with custom error code and message. Returns napi_ok on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_42

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_create_range_error(napi_env env,
                                                napi_value code,
                                                napi_value msg,
                                                napi_value* result);
```

----------------------------------------

TITLE: Inspecting ErrorWithCustomName with Preview in Node.js Debugger
DESCRIPTION: Represents an 'ErrorWithCustomName' object ('NamedError: bar') including a 'preview' field. The preview shows properties like the custom 'name' ('NamedError'), the 'stack', and the 'message', illustrating how custom name properties are reflected in the preview.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/custom-error-stack-expected.txt#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
    className : ErrorWithCustomName,
    description : NamedError: bar     at <anonymous>:1:23     at recurse (test.js:4:10)     at recurse (test.js:3:23)     at recurse (test.js:3:23)     at recurse (test.js:3:23)     at recurse (test.js:3:23)     at recurse (test.js:3:23)     at foo (test.js:8:3)     at <anonymous>:1:1,
    objectId : <objectId>,
    preview : {
        description : NamedError: bar     at <anonymous>:1:23     at recurse (test.js:4:10)     at recurse (test.js:3:23)     at recurse (test.js:3:23)     at recurse (test.js:3:23)     at recurse (test.js:3:23)     at recurse (test.js:3:23)     at foo (test.js:8:3)     at <anonymous>:1:1,
        overflow : false,
        properties : [
            [0] : {
                name : name,
                type : string,
                value : NamedError
            },
            [1] : {
                name : stack,
                type : string,
                value : NamedError: bar     at <anonymous>:1:23     at rec…)     at foo (test.js:8:3)     at <anonymous>:1:1
            },
            [2] : {
                name : message,
                type : string,
                value : bar
            }
        ],
        subtype : error,
        type : object
    },
    subtype : error,
    type : object
}
```

----------------------------------------

TITLE: Temporary Directory File URL Resolution
DESCRIPTION: Function that resolves paths into absolute URLs in the temporary directory. Returns the temporary directory URL when called with no arguments.
SOURCE: https://github.com/nodejs/node/blob/main/test/common/README.md#2025-04-23_snippet_15

LANGUAGE: JavaScript
CODE:
```
fileURL([...paths])
```

----------------------------------------

TITLE: Running the SEA Binary on Windows
DESCRIPTION: Demonstrates running the created Single Executable Application on Windows systems with command-line arguments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_14

LANGUAGE: console
CODE:
```
$ .\hello.exe world
Hello, world!
```

----------------------------------------

TITLE: Example NAPTR Record Object Structure in Node.js DNS
DESCRIPTION: This snippet illustrates the structure of a JavaScript object representing a NAPTR (Naming Authority Pointer) record as resolved by the `dns.resolveNaptr` function in Node.js. The object includes properties like flags, service, regexp, replacement, order, and preference.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_9

LANGUAGE: js
CODE:
```
{
  flags: 's',
  service: 'SIP+D2U',
  regexp: '',
  replacement: '_sip._udp.example.com',
  order: 30,
  preference: 100
}
```

----------------------------------------

TITLE: Implementing Custom Promise Rejection Handling in Node.js EventEmitter (ES Modules)
DESCRIPTION: Shows how to implement a custom promise rejection handler for an EventEmitter using the Symbol.for('nodejs.rejection') method. This example extends EventEmitter and overrides the rejection symbol method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_32

LANGUAGE: JavaScript
CODE:
```
import { EventEmitter, captureRejectionSymbol } from 'node:events';

class MyClass extends EventEmitter {
  constructor() {
    super({ captureRejections: true });
  }

  [captureRejectionSymbol](err, event, ...args) {
    console.log('rejection happened for', event, 'with', err, ...args);
    this.destroy(err);
  }

  destroy(err) {
    // Tear the resource down here.
  }
}
```

----------------------------------------

TITLE: Posting Deferred Finalizers in Node-API (C)
DESCRIPTION: Schedules a finalization callback to be executed asynchronously in the event loop instead of during garbage collection. This helps avoid crashing Node.js when needing to call Node-APIs that might alter GC state during finalization.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_185

LANGUAGE: c
CODE:
```
napi_status node_api_post_finalizer(node_api_basic_env env,
                                    napi_finalize finalize_cb,
                                    void* finalize_data,
                                    void* finalize_hint);
```

----------------------------------------

TITLE: Using traceSync with diagnostics_channel in JavaScript (ES Modules)
DESCRIPTION: Example of using the traceSync method to wrap a synchronous function in a trace operation with ES Modules. This produces start and end events around function execution and supports passing context data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_32

LANGUAGE: javascript
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';

const channels = diagnostics_channel.tracingChannel('my-channel');

channels.traceSync(() => {
  // Do something
}, {
  some: 'thing',
});
```

----------------------------------------

TITLE: Testing Array Prototype Methods on Non-Array Objects in JavaScript
DESCRIPTION: This snippet executes a series of tests applying Array prototype methods (such as toString, join, pop, push, reverse, shift, slice, sort, splice, and unshift) to a variety of non-array objects, including plain objects, custom constructors, and objects with array-like structure. It checks and logs the output of each operation, ensuring that behaviors conform to the ES specification, particularly regarding prototype chains and property enumeration. Dependencies include a JavaScript environment with standard Array functionality; no external libraries are required. Key inputs include objects with numerical indexes and length properties, custom objects inheriting from Array.prototype, and various method parameters; outputs are string representations or transformed objects. Certain edge behaviors, such as incorrect toLocaleString calls or property inheritance from prototypes, are carefully tested and identified by pass/fail messages.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/array-functions-non-arrays-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
# Copyright 2013 the V8 project authors. All rights reserved.\n# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# 1.  Redistributions of source code must retain the above copyright\n#     notice, this list of conditions and the following disclaimer.\n# 2.  Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY\n# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nTest some array functions on non-array objects.\n\nOn success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".\n\n\nPASS properties(['b', 'a']) is '0:b, 1:a, length:2(DontDelete, DontEnum)'\nPASS properties({ length:2, 0:'b', 1:'a' }) is '0:b, 1:a, length:2'\nPASS properties(new OneItemConstructor) is '0:a(FromPrototype), length:1(FromPrototype)'\nPASS properties(new TwoItemConstructor) is '0:b(FromPrototype), 1:a(FromPrototype), length:2(FromPrototype)'\nPASS Array.prototype.toString.call({}) is "[object Object]"\nPASS Array.prototype.toString.call(new Date) is "[object Date]"\nPASS Array.prototype.toString.call({sort: function() { return 'sort' }}) is "[object Object]"\nPASS Array.prototype.toString.call({join: function() { return 'join' }}) is "join"\nPASS Array.prototype.toString.call({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3}) is "a,b,c"\nPASS ({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3}).toString() is "a,b,c"\nPASS Array.prototype.toString.call({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3, join: function() { return 'join' }}) is "join"\nPASS ({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3, join: function() { return 'join' }}).toString() is "join"\nPASS Array.prototype.toString.call(42) is "Number.prototype.join:42"\nPASS [0, 1, 2].toString() is "array-join"\nFAIL Array.prototype.toLocaleString.call({}) should throw an exception. Was .\nPASS Array.prototype.concat.call(x = { length:2, 0:'b', 1:'a' }) is [x]\nPASS Array.prototype.join.call({}) is ''\nPASS Array.prototype.join.call(['b', 'a']) is 'b,a'\nPASS Array.prototype.join.call({ length:2, 0:'b', 1:'a' }) is 'b,a'\nPASS Array.prototype.join.call(new TwoItemConstructor) is 'b,a'\nPASS Array.prototype.pop.call({}) is undefined\nPASS Array.prototype.pop.call({ length:2, 0:'b', 1:'a' }) is 'a'\nPASS Array.prototype.pop.call({ length:2, 0:'b', 1:'a' }) is 'a'\nPASS Array.prototype.pop.call(new TwoItemConstructor) is 'a'\nPASS Array.prototype.pop.call(x = {}); properties(x) is 'length:0'\nPASS Array.prototype.pop.call(x = ['b', 'a']); properties(x) is '0:b, length:1(DontDelete, DontEnum)'\nPASS Array.prototype.pop.call(x = { length:2, 0:'b', 1:'a' }); properties(x) is '0:b, length:1'\nPASS Array.prototype.pop.call(x = new TwoItemConstructor); properties(x) is '0:b(FromPrototype), 1:a(FromPrototype), length:1'\nPASS Array.prototype.push.call({}) is 0\nPASS Array.prototype.push.call(['b', 'a']) is 2\nPASS Array.prototype.push.call({ length:2, 0:'b', 1:'a' }) is 2\nPASS Array.prototype.push.call(new TwoItemConstructor) is 2\nPASS Array.prototype.push.call(x = {}); properties(x) is 'length:0'\nPASS Array.prototype.push.call(x = ['b', 'a']); properties(x) is '0:b, 1:a, length:2(DontDelete, DontEnum)'\nPASS Array.prototype.push.call(x = { length:2, 0:'b', 1:'a' }); properties(x) is '0:b, 1:a, length:2'\nPASS Array.prototype.push.call(x = new TwoItemConstructor); properties(x) is '0:b(FromPrototype), 1:a(FromPrototype), length:2'\nPASS Array.prototype.push.call({}, 'c') is 1\nPASS Array.prototype.push.call(['b', 'a'], 'c') is 3\nPASS Array.prototype.push.call({ length:2, 0:'b', 1:'a' }, 'c') is 3\nPASS Array.prototype.push.call(new TwoItemConstructor, 'c') is 3\nPASS Array.prototype.push.call(x = {}, 'c'); properties(x) is '0:c, length:1'\nPASS Array.prototype.push.call(x = ['b', 'a'], 'c'); properties(x) is '0:b, 1:a, 2:c, length:3(DontDelete, DontEnum)'\nPASS Array.prototype.push.call(x = { length:2, 0:'b', 1:'a' }, 'c'); properties(x) is '0:b, 1:a, 2:c, length:3'\nPASS Array.prototype.push.call(x = new TwoItemConstructor, 'c'); properties(x) is '0:b(FromPrototype), 1:a(FromPrototype), 2:c, length:3'\nPASS properties(Array.prototype.reverse.call({})) is ''\nPASS properties(Array.prototype.reverse.call(['b', 'a'])) is '0:a, 1:b, length:2(DontDelete, DontEnum)'\nPASS properties(Array.prototype.reverse.call({ length:2, 0:'b', 1:'a' })) is '0:a, 1:b, length:2'\nPASS properties(Array.prototype.reverse.call(new OneItemConstructor)) is '0:a(FromPrototype), length:1(FromPrototype)'\nPASS properties(Array.prototype.reverse.call(new TwoItemConstructor)) is '0:a, 1:b, length:2(FromPrototype)'\nPASS Array.prototype.shift.call({}) is undefined\nPASS Array.prototype.shift.call(['b', 'a']) is 'b'\nPASS Array.prototype.shift.call({ length:2, 0:'b', 1:'a' }) is 'b'\nPASS Array.prototype.shift.call(new TwoItemConstructor) is 'b'\nPASS Array.prototype.shift.call(x = {}); properties(x) is 'length:0'\nPASS Array.prototype.shift.call(x = ['b', 'a']); properties(x) is '0:a, length:1(DontDelete, DontEnum)'\nPASS Array.prototype.shift.call(x = { length:2, 0:'b', 1:'a' }); properties(x) is '0:a, length:1'\nPASS Array.prototype.shift.call(x = new TwoItemConstructor); properties(x) is '0:a, 1:a(FromPrototype), length:1'\nPASS Array.prototype.slice.call({}, 0, 1) is []\nPASS Array.prototype.slice.call(['b', 'a'], 0, 1) is ['b']\nPASS Array.prototype.slice.call({ length:2, 0:'b', 1:'a' }, 0, 1) is ['b']\nPASS Array.prototype.slice.call(new TwoItemConstructor, 0, 1) is ['b']\nPASS properties(Array.prototype.sort.call({})) is ''\nPASS properties(Array.prototype.sort.call(['b', 'a'])) is '0:a, 1:b, length:2(DontDelete, DontEnum)'\nPASS properties(Array.prototype.sort.call({ length:2, 0:'b', 1:'a' })) is '0:a, 1:b, length:2'\nPASS properties(Array.prototype.sort.call(new OneItemConstructor)) is '0:a(FromPrototype), length:1(FromPrototype)'\nPASS properties(Array.prototype.sort.call(new TwoItemConstructor)) is '0:a, 1:b, length:2(FromPrototype)'\nPASS Array.prototype.splice.call({}, 0, 1) is []\nPASS Array.prototype.splice.call(['b', 'a'], 0, 1) is ['b']\nPASS Array.prototype.splice.call({ length:2, 0:'b', 1:'a' }, 0, 1) is ['b']\nPASS Array.prototype.splice.call(new TwoItemConstructor, 0, 1) is ['b']\nPASS Array.prototype.splice.call(x = {}, 0, 1); properties(x) is 'length:0'\nPASS Array.prototype.splice.call(x = ['b', 'a'], 0, 1); properties(x) is '0:a, length:1(DontDelete, DontEnum)'\nPASS Array.prototype.splice.call(x = { length:2, 0:'b', 1:'a' }, 0, 1); properties(x) is '0:a, length:1'\nPASS Array.prototype.splice.call(x = new TwoItemConstructor, 0, 1); properties(x) is '0:a, 1:a(FromPrototype), length:1'\nPASS Array.prototype.unshift.call({}) is 0\nPASS Array.prototype.unshift.call(['b', 'a']) is 2\nPASS Array.prototype.unshift.call({ length:2, 0:'b', 1:'a' }) is 2\nPASS Array.prototype.unshift.call(new TwoItemConstructor) is 2\nPASS Array.prototype.unshift.call(x = {}); properties(x) is 'length:0'\nPASS Array.prototype.unshift.call(x = ['b', 'a']); properties(x) is '0:b, 1:a, length:2(DontDelete, DontEnum)'\nPASS Array.prototype.unshift.call(x = { length:2, 0:'b', 1:'a' }); properties(x) is '0:b, 1:a, length:2'\nPASS Array.prototype.unshift.call(x = new TwoItemConstructor); properties(x) is '0:b(FromPrototype), 1:a(FromPrototype), length:2'\nPASS Array.prototype.unshift.call({}, 'c') is 1\nPASS Array.prototype.unshift.call(['b', 'a'], 'c') is 3\nPASS Array.prototype.unshift.call({ length:2, 0:'b', 1:'a' }, 'c') is 3\nPASS Array.prototype.unshift.call(new TwoItemConstructor, 'c') is 3\nPASS Array.prototype.unshift.call(x = {}, 'c'); properties(x) is '0:c, length:1'\nPASS Array.prototype.unshift.call(x = ['b', 'a'], 'c'); properties(x) is '0:c, 1:b, 2:a, length:3(DontDelete, DontEnum)'\nPASS Array.prototype.unshift.call(x = { length:2, 0:'b', 1:'a' }, 'c'); properties(x) is '0:c, 1:b, 2:a, length:3'\nPASS Array.prototype.unshift.call(x = new TwoItemConstructor, 'c'); properties(x) is '0:c, 1:b, 2:a, length:3'\nPASS successfullyParsed is true\n\nTEST COMPLETE\n
```

----------------------------------------

TITLE: Testing Variable Declarations with 'const' in JavaScript
DESCRIPTION: This snippet tests various 'const' declarations using a 'compileAndSerializeLeftmostTest' function. It includes single and multiple constant declarations with initializations, and some invalid cases without initializations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/function-toString-parentheses-expected.txt#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
compileAndSerializeLeftmostTest('const a = 1')
compileAndSerializeLeftmostTest('const a = (1, 2)')
compileAndSerializeLeftmostTest('const a, b = 1')
compileAndSerializeLeftmostTest('const a = 1, b')
compileAndSerializeLeftmostTest('const a = 1, b = 1')
compileAndSerializeLeftmostTest('const a = (1, 2), b = 1')
compileAndSerializeLeftmostTest('const a = 1, b = (1, 2)')
compileAndSerializeLeftmostTest('const a = (1, 2), b = (1, 2)')
```

----------------------------------------

TITLE: Implementing SOCKS 'bind' Command in Node.js/TypeScript
DESCRIPTION: This snippet demonstrates how to use the 'socks' library in Node.js to execute a SOCKS 'bind' command. It initializes a SocksClient with proxy details, destination set to wildcard (0.0.0.0) to accept any client, and the command set to 'bind'. Event listeners are set up for 'bound' (fired when the proxy successfully binds and listens on a new port, providing the proxy's listening host/port) and 'established' (fired when a connection is accepted on the bound port, providing the connecting client's host/port and the established socket). An error handler is also included.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/javascript/bindExample.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
```typescript
const SocksClient = require('socks').SocksClient;

const options = {
  proxy: {
    host: '104.131.124.203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will connect to the SOCKS proxy server on the newly bound port.
  // Most SOCKS servers accept 0.0.0.0 as a wildcard address to accept any client.
  destination: {
    host: '0.0.0.0',
    port: 0
  },

  command: 'bind'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new port for incoming connections.
client.on('bound', (info) => {
  console.log(info);
  /*
  {
    socket: <Socket ...>,
    remoteHost: { // This is the remote ip and port of the SOCKS proxy that is now accepting incoming connections.
      host: '104.131.124.203',
      port: 49928
    }
  }
  */
});

// This event is fired when the SOCKS server has accepted an incoming connection on the newly bound port.
client.on('established', (info) => {
  console.log(info);
  /*
  {
    socket: <Socket ...>,
    remoteHost: { // This is the remote ip and port that connected to the SOCKS proxy on the newly bound port.
      host: '1.2.3.4',
      port: 58232
    }
  }
  */

  // At this point info.socket is a regular net.Socket TCP connection between client and client2 (1.2.3.4) (the client which connected to the proxy on the newly bound port.)

  console.log(info.socket);
  // <Socket ...>  (this is a raw net.Socket that is established to the destination host through the given proxy servers)
});

// SOCKS proxy failed to bind.
client.on('error', () => {
  // Handle errors
});
```
```

----------------------------------------

TITLE: Adding AbortSignal Support to Child Process Fork
DESCRIPTION: Implementation of AbortSignal support in the child_process.fork() method, allowing for cancellation of forked processes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
// Commit 36603: support AbortSignal in fork
```

----------------------------------------

TITLE: Using expectWarning to Test Node.js Warning Messages
DESCRIPTION: Shows how to use the expectWarning function to test various types of Node.js warnings, including DeprecationWarning. This utility validates that expected warnings with specific codes and messages are properly raised during test execution.
SOURCE: https://github.com/nodejs/node/blob/main/test/common/README.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const { expectWarning } = require('../common');

expectWarning('Warning', 'Foobar is really bad');

expectWarning('DeprecationWarning', 'Foobar is deprecated', 'DEP0XXX');

expectWarning('DeprecationWarning', [
  'Foobar is deprecated', 'DEP0XXX',
]);

expectWarning('DeprecationWarning', [
  ['Foobar is deprecated', 'DEP0XXX'],
  ['Baz is also deprecated', 'DEP0XX2'],
]);

expectWarning('DeprecationWarning', {
  DEP0XXX: 'Foobar is deprecated',
  DEP0XX2: 'Baz is also deprecated',
});

expectWarning({
  DeprecationWarning: {
    DEP0XXX: 'Foobar is deprecated',
    DEP0XX1: 'Baz is also deprecated',
  },
  Warning: [
    ['Multiple array entries are fine', 'SpecialWarningCode'],
    ['No code is also fine'],
  ],
  SingleEntry: ['This will also work', 'WarningCode'],
  SingleString: 'Single string entries without code will also work',
});
```

----------------------------------------

TITLE: Comparing URL Constructor Locations in CommonJS
DESCRIPTION: Example showing how to verify that the URL constructor imported from the url module is the same as the global URL constructor in CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_11

LANGUAGE: cjs
CODE:
```
console.log(URL === require('node:url').URL); // Prints 'true'.
```

----------------------------------------

TITLE: Pausing via Direct Eval with Strict Mode in Node.js - JavaScript
DESCRIPTION: This code snippet again sets strict mode and attempts to run the template-string function containing a 'with' statement using direct eval (eval(x)). The intent is to verify that Node.js properly enforces the rule barring 'with' statements in strict mode, returning a SyntaxError rather than allowing execution. Prerequisites: Node.js, ES6+. Input: none. Output: SyntaxError exception with message on 'with' prohibition. Limitation: cannot execute due to 'with' in strict mode.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/regress/regress-crbug-1510427-expected.txt#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
'use strict';
var x = `
  (function y() {
    with ({}) {
      var z = () => { debugger; };
      z();
    }
  })();
`;
eval(x);
```

----------------------------------------

TITLE: Querying Heap Objects by Constructor (CJS) in Node.js
DESCRIPTION: Demonstrates using `v8.queryObjects()` with CommonJS (`require`) syntax to search the V8 heap for objects based on their constructor. It shows how to get the count of matching objects or an array of summary strings using the `format` option. The example illustrates behavior with inheritance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_8

LANGUAGE: cjs
CODE:
```
const { queryObjects } = require('node:v8');
class A { foo = 'bar'; }
console.log(queryObjects(A)); // 0
const a = new A();
console.log(queryObjects(A)); // 1
// [ "A { foo: 'bar' }" ]
console.log(queryObjects(A, { format: 'summary' }));

class B extends A { bar = 'qux'; }
const b = new B();
console.log(queryObjects(B)); // 1
// [ "B { foo: 'bar', bar: 'qux' }" ]
console.log(queryObjects(B, { format: 'summary' }));

// Note that, when there are child classes inheriting from a constructor,
// the constructor also shows up in the prototype chain of the child
// classes's prototype, so the child classes's prototype would also be
// included in the result.
console.log(queryObjects(A));  // 3
// [ "B { foo: 'bar', bar: 'qux' }", 'A {}', "A { foo: 'bar' }" ]
console.log(queryObjects(A, { format: 'summary' }));
```

----------------------------------------

TITLE: Exporting and Storing GPG Keys in Git for libuv Project Maintainers
DESCRIPTION: A series of commands demonstrating how to export a GPG public key, store it as a Git blob, tag it, and push the tag to the repository. This ensures maintainer keys are securely stored and associated with their identities within the project's Git repository.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/MAINTAINERS.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ gpg --armor --export saghul@gmail.com > saghul.asc
```

LANGUAGE: bash
CODE:
```
$ git hash-object -w saghul.asc
```

LANGUAGE: bash
CODE:
```
$ git tag -s pubkey-saghul abcd1234
```

LANGUAGE: bash
CODE:
```
$ git push origin pubkey-saghul
```

----------------------------------------

TITLE: Generating Inspector Preview for Object with Boolean Property
DESCRIPTION: Evaluates a Javascript object literal containing a property 'a' with a boolean value 'true'. The evaluation options specify not returning by value (`returnByValue: false`) but generating a preview (`generatePreview: true`). The resulting JSON shows the object ID and a preview indicating a 'boolean' property named 'a' with value 'true'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_59

LANGUAGE: javascript
CODE:
```
'({a: true})', returnByValue: false, generatePreview: true
```

LANGUAGE: json
CODE:
```
{
    id : <messageId>,
    result : {
        result : {
            className : Object,
            description : Object,
            objectId : <objectId>,
            preview : {
                description : Object,
                overflow : false,
                properties : [
                    [0] : {
                        name : a,
                        type : boolean,
                        value : true
                    }
                ],
                type : object
            },
            type : object
        }
    }
}
```

----------------------------------------

TITLE: Using a Custom Dispatcher with EventSource in Undici
DESCRIPTION: Shows how to create a custom Agent that modifies request headers for EventSource connections. This example extends the Agent class to inject a custom header into all requests before they are dispatched.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/EventSource.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { EventSource, Agent } from 'undici'

class CustomHeaderAgent extends Agent {
  dispatch (opts) {
    opts.headers['x-custom-header'] = 'hello world'
    return super.dispatch(...arguments)
  }
}

const eventSource = new EventSource('http://localhost:3000', {
  dispatcher: new CustomHeaderAgent()
})
```

----------------------------------------

TITLE: Generating Selection Object from Test Expansion Pattern in JSON
DESCRIPTION: Example of a selection object generated from a test expansion pattern. It includes specific values for delivery type, key, value, source context, expectation, origin, redirection, source scheme, and subresource.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/wpt/common/security-features/README.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "delivery_type": "http-rp",
  "delivery_key": "referrerPolicy",
  "delivery_value": "no-referrer-when-downgrade",
  "source_context_list": "worker-classic",

  "expectation": "stripped-referrer",
  "origin": "same-http",
  "redirection": "no-redirect",
  "source_scheme": "http",
  "subresource": "fetch"
}
```

----------------------------------------

TITLE: Setting Group ID in Node.js (CommonJS)
DESCRIPTION: Example of using the process.setgid() method to set the group identity of the process in CommonJS format. This POSIX-only function can take either a numeric group ID or a group name string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_88

LANGUAGE: javascript
CODE:
```
const process = require('node:process');

if (process.getgid && process.setgid) {
  console.log(`Current gid: ${process.getgid()}`);
  try {
    process.setgid(501);
    console.log(`New gid: ${process.getgid()}`);
  } catch (err) {
    console.error(`Failed to set gid: ${err}`);
  }
}
```

----------------------------------------

TITLE: Illustrating Folder Structure for Dependency Resolution in Bash
DESCRIPTION: This code snippet demonstrates the resulting folder structure after npm resolves and installs the dependencies for the 'foo' package, showing how dependencies are hoisted and cycles are handled.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/folders.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
foo
+-- node_modules
    +-- blerg (1.2.5) <---[A]
    +-- bar (1.2.3) <---[B]
    |   +-- node_modules
    |       +-- baz (2.0.2) <---[C]
    +-- asdf (2.3.4)
    +-- baz (1.2.3) <---[D]
    +-- quux (3.2.0) <---[E]
```

----------------------------------------

TITLE: Running Tests for the Postject Project - Shell
DESCRIPTION: This shell snippet demonstrates how to execute the project's test suite using npm. This command depends on existing npm test scripts and any required testing dependencies. Expected output is a summary of passing and failing tests.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/postject/README.markdown#2025-04-23_snippet_4

LANGUAGE: sh
CODE:
```
$ npm test
```

----------------------------------------

TITLE: Reading Symbolic Links with fsPromises.readlink in Node.js
DESCRIPTION: Asynchronously reads the contents of the symbolic link referred to by `path`. Returns a Promise that fulfills with the link string. The optional `options` argument can specify an encoding (defaults to 'utf8') or be an object with an `encoding` property. If encoding is 'buffer', a Buffer object is returned.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_30

LANGUAGE: javascript
CODE:
```
fsPromises.readlink(path[, options])
```

----------------------------------------

TITLE: Configuring Dependencies and Dependent Settings in GYP
DESCRIPTION: This example demonstrates how to set up dependencies between targets and specify settings that should be applied to dependent targets. It includes direct_dependent_settings and link_settings.
SOURCE: https://github.com/nodejs/node/blob/main/tools/gyp/docs/InputFormatReference.md#2025-04-23_snippet_13

LANGUAGE: json
CODE:
```
{
  'targets': [
    {
      'target_name': 'cruncher',
      'type': 'static_library',
      'sources': ['cruncher.cc'],
      'direct_dependent_settings': {
        'include_dirs': ['.'],  # dependents need to find cruncher.h.
      },
      'link_settings': {
        'libraries': ['-lm'],  # cruncher.cc does math.
      },
    },
    {
      'target_name': 'cruncher_test',
      'type': 'executable',
      'dependencies': ['cruncher'],
      'sources': ['cruncher_test.cc'],
    },
  ],
}
```

----------------------------------------

TITLE: Paused Generator Scope Test Results
DESCRIPTION: Output from testScopesPaused showing scope inspection results for a paused generator. Shows two variables 'a' and 'b' with their respective number values and property attributes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/suspended-generator-scopes-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
[
    [0] : {
        configurable : true
        enumerable : true
        isOwn : true
        name : a
        value : {
            description : 420
            type : number
            value : 420
        }
        writable : true
    }
    [1] : {
        configurable : true
        enumerable : true
        isOwn : true
        name : b
        value : {
            description : 42
            type : number
            value : 42
        }
        writable : true
    }
]
```

----------------------------------------

TITLE: Resolving SOA Records with dnsPromises.resolveSoa() in Node.js
DESCRIPTION: This snippet demonstrates the structure of the object returned when resolving SOA (Start of Authority) records using the dnsPromises.resolveSoa() method. It includes properties such as nsname, hostmaster, serial, refresh, retry, expire, and minttl.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
{
  nsname: 'ns.example.com',
  hostmaster: 'root.example.com',
  serial: 2013101809,
  refresh: 10000,
  retry: 2400,
  expire: 604800,
  minttl: 3600
}
```

----------------------------------------

TITLE: Testing Runtime.getIsolateId Method in V8 Inspector API
DESCRIPTION: This code establishes a connection to the V8 inspector API, sends a Runtime.getIsolateId command, and validates that the response contains a valid isolate ID. The test verifies that the isolate ID is returned as expected in the API response.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/get-isolate-id-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// Flags: --expose-internals
'use strict';
const common = require('../common');
common.skipIfInspectorDisabled();

const assert = require('assert');
const { Session } = require('inspector');

const session = new Session();
session.connect();

session.post('Runtime.getIsolateId', (err, { result }) => {
  assert.ifError(err);
  assert.strictEqual(typeof result.id, 'string');
  assert(result.id.length > 0);
});

```

----------------------------------------

TITLE: Checking the 'successfullyParsed' Flag in JavaScript
DESCRIPTION: This snippet represents a check of a boolean variable, likely named `successfullyParsed`. In the context of a test suite, this typically verifies that the test script itself was parsed and executed without syntax errors up to this point. It expects the variable to hold the value `true`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/string-sort-expected.txt#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
successfullyParsed
```

----------------------------------------

TITLE: Using stream.finished() to Monitor Stream Completion
DESCRIPTION: Demonstrates how to use the stream.finished() utility to get notified when a stream is no longer readable/writable or has experienced an error. Shows basic usage with a file read stream and error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_56

LANGUAGE: javascript
CODE:
```
const { finished } = require('node:stream');
const fs = require('node:fs');

const rs = fs.createReadStream('archive.tar');

finished(rs, (err) => {
  if (err) {
    console.error('Stream failed.', err);
  } else {
    console.log('Stream is done reading.');
  }
});

rs.resume(); // Drain the stream.
```

----------------------------------------

TITLE: Queuing Async Work Implementation in Node-API (C)
DESCRIPTION: Implementation details for queueing asynchronous work. This function adds the async work item to the Node.js work queue, allowing it to be executed in a separate thread. Once successfully scheduled, this function should not be called again with the same work item.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_190

LANGUAGE: c
CODE:
```
napi_status napi_queue_async_work(node_api_basic_env env,
                                  napi_async_work work);
```

----------------------------------------

TITLE: Building Shared Library with obj2shlib in Perl
DESCRIPTION: Function to generate build rules for shared libraries. Takes shared library name, base library name, object files and dependencies as parameters. All file paths are specified without extensions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/Configurations/README-design.md#2025-04-23_snippet_10

LANGUAGE: perl
CODE:
```
obj2shlib(shlib => "PATH/TO/shlibfile",
          lib => "PATH/TO/libfile",
          objs => [ "PATH/TO/objectfile", ... ],
          deps => [ "PATH/TO/otherlibfile", ... ]);
```

----------------------------------------

TITLE: Testing Function Stringification in JavaScript
DESCRIPTION: This code snippet demonstrates test cases for function stringification. It checks if the string representation of different function declarations matches the expected output, focusing on whitespace and newline handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/function-toString-semicolon-insertion-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
FAIL (function (){return}).toString() should be function () {return;}. Was function (){return}.
FAIL (function (){return }).toString() should be function () {return; }. Was function (){return }.
FAIL (function (){return
}).toString() should be function () {return;
}. Was function (){return
}.
FAIL (function (){}).toString() should be function () {}. Was function (){}.
FAIL (function (){ }).toString() should be function () { }. Was function (){ }.
PASS successfullyParsed is true

TEST COMPLETE
```

----------------------------------------

TITLE: Defining Source Context List Schema in JSON
DESCRIPTION: Example of a source context list schema entry that defines a template for policy deliveries and source contexts. It specifies the structure for a classic worker context with policy deliveries for both the top-level document and the worker.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/wpt/common/security-features/README.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
"worker-classic": {
  "sourceContextList": [
    {
      "sourceContextType": "top",
      "policyDeliveries": [
        "anotherPolicy"
      ]
    },
    {
      "sourceContextType": "worker-classic",
      "policyDeliveries": [
        "policy"
      ]
    }
  ],
  "subresourcePolicyDeliveries": []
}
```

----------------------------------------

TITLE: Retrieving Resident Set Size (RSS) Memory Usage in Node.js
DESCRIPTION: Shows how to use process.memoryUsage.rss() to get only the Resident Set Size value in bytes. This method is faster than using the full process.memoryUsage() when only RSS information is needed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_56

LANGUAGE: JavaScript (ESM)
CODE:
```
import { memoryUsage } from 'node:process';

console.log(memoryUsage.rss());
// 35655680
```

LANGUAGE: JavaScript (CommonJS)
CODE:
```
const { memoryUsage } = require('node:process');

console.log(memoryUsage.rss());
// 35655680
```

----------------------------------------

TITLE: Registering beforeEach Hook - Node.js Test - js
DESCRIPTION: Demonstrates how to use `t.beforeEach` to register a function that will run before each subtest within the current test. The hook function receives the subtest's context and can be used for setup or logging.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_62

LANGUAGE: js
CODE:
```
test('top level test', async (t) => {
  t.beforeEach((t) => t.diagnostic(`about to run ${t.name}`));
  t.test('This is a subtest', (t) => {
    assert.ok('some relevant assertion here');
  });
});
```

----------------------------------------

TITLE: Checking for Standard System Header Files in CMake
DESCRIPTION: Uses the `check_include_file` CMake command to determine if the standard system header files `sys/types.h`, `stdint.h`, and `stddef.h` are available on the target system. The results are stored in the cache variables HAVE_SYS_TYPES_H, HAVE_STDINT_H, and HAVE_STDDEF_H respectively.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/zlib/CMakeLists.txt#2025-04-23_snippet_4

LANGUAGE: cmake
CODE:
```
check_include_file(sys/types.h HAVE_SYS_TYPES_H)
check_include_file(stdint.h    HAVE_STDINT_H)
check_include_file(stddef.h    HAVE_STDDEF_H)
```

----------------------------------------

TITLE: Using pipeline with ES modules in Node.js streams/promises API
DESCRIPTION: Example showing how to use the pipeline function from the stream/promises API with ES modules to process a file through gzip compression. The pipeline connects read stream, gzip transform, and write stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';
import { createGzip } from 'node:zlib';

await pipeline(
  createReadStream('archive.tar'),
  createGzip(),
  createWriteStream('archive.tar.gz'),
);
console.log('Pipeline succeeded.');
```

----------------------------------------

TITLE: Setting TLS Security Level in Node.js (CommonJS)
DESCRIPTION: Shows how to set the TLS security level to 0 using CommonJS modules. It creates a TLS server and client connection with specific cipher and version settings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const { createServer, connect } = require('node:tls');
const port = 443;

createServer({ ciphers: 'DEFAULT@SECLEVEL=0', minVersion: 'TLSv1' }, function(socket) {
  console.log('Client connected with protocol:', socket.getProtocol());
  socket.end();
  this.close();
})
.listen(port, () => {
  connect(port, { ciphers: 'DEFAULT@SECLEVEL=0', maxVersion: 'TLSv1' });
});
```

----------------------------------------

TITLE: Private Methods in Node.js Internal Properties
DESCRIPTION: Shows how private methods are exposed through the [[PrivateMethods]] internal property and how they are structured in Runtime.getProperties() results.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/class-private-methods-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
{
    name : [[PrivateMethods]]
    value : {
        className : Array
        description : PrivateMethods[1]
        objectId : <objectId>
        subtype : internal#privateMethodList
        type : object
    }
}
{
    result : [
        [0] : {
            configurable : true
            enumerable : true
            isOwn : true
            name : 0
            value : {
                className : Object
                description : #inc() { this.#field++; return this.#field; }
                objectId : <objectId>
                subtype : internal#privateMethod
                type : object
            }
            writable : true
        }
    ]
}
```

----------------------------------------

TITLE: Iterating Over Allowed Node Environment Flags in JavaScript
DESCRIPTION: This snippet demonstrates how to iterate over the process.allowedNodeEnvironmentFlags Set in both ECMAScript modules and CommonJS formats. It shows the format of the flags that will be displayed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
import { allowedNodeEnvironmentFlags } from 'node:process';

allowedNodeEnvironmentFlags.forEach((flag) => {
  // -r
  // --inspect-brk
  // --abort_on_uncaught_exception
  // ...
});
```

LANGUAGE: javascript
CODE:
```
const { allowedNodeEnvironmentFlags } = require('node:process');

allowedNodeEnvironmentFlags.forEach((flag) => {
  // -r
  // --inspect-brk
  // --abort_on_uncaught_exception
  // ...
});
```

----------------------------------------

TITLE: Optimized File Reading with Mixed Approach (CommonJS)
DESCRIPTION: CommonJS version of the optimized file reading approach. Combines event handling with async/await for efficient file processing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_38

LANGUAGE: javascript
CODE:
```
const { once } = require('node:events');
const { createReadStream } = require('node:fs');
const { createInterface } = require('node:readline');

(async function processLineByLine() {
  try {
    const rl = createInterface({
      input: createReadStream('big-file.txt'),
      crlfDelay: Infinity,
    });

    rl.on('line', (line) => {
      // Process the line.
    });

    await once(rl, 'close');

    console.log('File processed.');
  } catch (err) {
    console.error(err);
  }
})();
```

----------------------------------------

TITLE: Testing Math.abs() in JavaScript
DESCRIPTION: This snippet tests the Math.abs() method with various inputs including NaN, 0, -0, positive and negative numbers, MIN_VALUE, MAX_VALUE, and Infinity.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS Math.abs(NaN) is NaN
PASS Math.abs(0) is 0
PASS Math.abs(-0) is 0
PASS Math.abs(1) is 1
PASS Math.abs(-1) is 1
PASS Math.abs(Number.MIN_VALUE) is Number.MIN_VALUE
PASS Math.abs(-Number.MIN_VALUE) is Number.MIN_VALUE
PASS Math.abs(Number.MAX_VALUE) is Number.MAX_VALUE
PASS Math.abs(-Number.MAX_VALUE) is Number.MAX_VALUE
PASS Math.abs(Infinity) is Infinity
PASS Math.abs(-Infinity) is Infinity
```

----------------------------------------

TITLE: Setting TLS Security Level in Node.js (ES Modules)
DESCRIPTION: Demonstrates how to set the TLS security level to 0 using ES modules. It creates a TLS server and client connection with specific cipher and version settings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import { createServer, connect } from 'node:tls';
const port = 443;

createServer({ ciphers: 'DEFAULT@SECLEVEL=0', minVersion: 'TLSv1' }, function(socket) {
  console.log('Client connected with protocol:', socket.getProtocol());
  socket.end();
  this.close();
})
.listen(port, () => {
  connect(port, { ciphers: 'DEFAULT@SECLEVEL=0', maxVersion: 'TLSv1' });
});
```

----------------------------------------

TITLE: Testing encodeURIComponent and decodeURIComponent with Valid Unicode Code Points
DESCRIPTION: Tests the roundtrip encoding and decoding of valid Unicode code points, verifying that decodeURIComponent(encodeURIComponent(x)) returns the original value x. This snippet shows successful passes for code points between 57596 and 65377.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/kde/encode_decode_uri-expected.txt#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
decodeURIComponent(encodeURIComponent(String.fromCharCode(57596))) is String.fromCharCode(57596)
```

----------------------------------------

TITLE: Thread Sanitizer Race Condition - Memory Copy Operation
DESCRIPTION: Stack trace showing memory copy operation in the main thread that conflicts with the atomic read, involving array element copying and concatenation operations in V8's object handling system.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/tools/testrunner/testproc/stack_utils/testdata/custom_analyzer/data_race_6.txt#2025-04-23_snippet_1

LANGUAGE: cpp
CODE:
```
__tsan_memcpy /b/s/w/ir/cache/builder/src/third_party/llvm/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp:3105:3
```

----------------------------------------

TITLE: Testing Invalid Postfix Increment in JavaScript
DESCRIPTION: Attempts a postfix increment operation on the result of the Number() constructor. This is an invalid left-hand side expression, and the test verifies that it throws a ReferenceError.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/modify-non-references-expected.txt#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
Number()++
```

----------------------------------------

TITLE: Retrieving Standard Error from the Last Command (Python)
DESCRIPTION: Shows calling the `stderr()` method on the `TestGyp` object. This returns the captured standard error output as a string from the most recently executed command invoked via methods like `.run_gyp()`, `.build_*()`, or `.run*()`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/Testing.md#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
  test.stderr()
```

----------------------------------------

TITLE: Setting a Property on an Object in C using Node-API
DESCRIPTION: This function sets a property on a JavaScript object. It takes the environment, the target object, the property key, and the value to set. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_150

LANGUAGE: c
CODE:
```
napi_status napi_set_property(napi_env env,
                              napi_value object,
                              napi_value key,
                              napi_value value);
```

----------------------------------------

TITLE: Importing Mock Errors from Undici
DESCRIPTION: Shows how to import mock error objects from the Undici package. These errors can be used for handling mock-related errors in test scenarios.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockErrors.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { mockErrors } from 'undici'
```

----------------------------------------

TITLE: Output Preview for Long TypedArray Properties Test (Runtime.evaluate)
DESCRIPTION: Demonstrates the preview generated by Runtime.evaluate for a long Uint8Array (500001 elements). The output shows only a subset of the initial numeric index properties and sets the 'overflow' flag to true, indicating that not all properties are included in the preview.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-with-generate-preview-expected.txt#2025-04-23_snippet_5

LANGUAGE: text
CODE:
```
{
    description : Uint8Array(500001)
    overflow : true
    properties : [
        [0] : {
            name : 0
            type : number
            value : 0
        }
        [1] : {
            name : 1
            type : number
            value : 0
        }
        [2] : {
            name : 2
            type : number
            value : 0
        }
        [3] : {
            name : 3
            type : number
            value : 0
        }
        [4] : {
            name : 4
            type : number
            value : 0
        }
        [5] : {
            name : 5
            type : number
            value : 0
        }
        [6] : {
            name : 6
            type : number
            value : 0
        }
        [7] : {
            name : 7
            type : number
            value : 0
        }
        [8] : {
            name : 8
            type : number
            value : 0
        }
        [9] : {
            name : 9
            type : number
            value : 0
        }
        [10] : {
            name : 10
            type : number
            value : 0
        }
        [11] : {
            name : 11
            type : number
            value : 0
        }
        [12] : {
            name : 12
            type : number
            value : 0
        }
        [13] : {
            name : 13
            type : number
            value : 0
        }
        [14] : {
            name : 14
            type : number
            value : 0
        }
        [15] : {
            name : 15
            type : number
            value : 0
        }
        [16] : {
            name : 16
            type : number
            value : 0
        }
        [17] : {
            name : 17
            type : number
            value : 0
        }
        [18] : {
            name : 18
            type : number
            value : 0
        }
        [19] : {
            name : 19
            type : number
            value : 0
        }
        [20] : {
            name : 20
            type : number
            value : 0
        }
        [21] : {
            name : 21
            type : number
            value : 0
        }
        [22] : {
            name : 22
            type : number
            value : 0
        }
        [23] : {
            name : 23
            type : number
            value : 0
        }
        [24] : {
            name : 24
            type : number
            value : 0
        }
        [25] : {
            name : 25
            type : number
            value : 0
        }
        [26] : {
            name : 26
            type : number
            value : 0
        }
        [27] : {
            name : 27
            type : number
            value : 0
        }
        [28] : {
            name : 28
            type : number
            value : 0
        }
        [29] : {
            name : 29
            type : number
            value : 0
        }
        [30] : {
            name : 30
            type : number
            value : 0
        }
        [31] : {
            name : 31
            type : number
            value : 0
        }
        [32] : {
            name : 32
            type : number
            value : 0
        }
        [33] : {
            name : 33
            type : number
            value : 0
        }
        [34] : {
            name : 34
            type : number
            value : 0
        }
        [35] : {
            name : 35
            type : number
            value : 0
        }
        [36] : {
            name : 36
            type : number
            value : 0
        }
        [37] : {
            name : 37
            type : number
            value : 0
        }
        [38] : {
            name : 38
            type : number
            value : 0
        }
        [39] : {
            name : 39
            type : number
            value : 0
        }
        [40] : {
            name : 40
            type : number
            value : 0
        }
        [41] : {
            name : 41
            type : number
            value : 0
        }
        [42] : {
            name : 42
            type : number
            value : 0
        }
        [43] : {
            name : 43
            type : number
            value : 0
        }
        [44] : {
            name : 44
            type : number
            value : 0
        }
        [45] : {
            name : 45
            type : number
            value : 0
        }
        [46] : {
            name : 46
            type : number
            value : 0
        }
        [47] : {
            name : 47
            type : number
            value : 0
        }
        [48] : {
            name : 48
            type : number
            value : 0
        }
        [49] : {
            name : 49
            type : number
            value : 0
        }
        [50] : {
            name : 50
            type : number
            value : 0
        }
        [51] : {
            name : 51
            type : number
            value : 0
        }
        [52] : {
            name : 52
            type : number
            value : 0
        }
        [53] : {
            name : 53
            type : number
            value : 0
        }
        [54] : {
            name : 54
            type : number
            value : 0
        }
        [55] : {
            name : 55
            type : number
            value : 0
        }
        [56] : {
            name : 56
            type : number
            value : 0
        }
        [57] : {
            name : 57
            type : number
            value : 0
        }
        [58] : {
            name : 58
            type : number
            value : 0
        }
        [59] : {
            name : 59
            type : number
            value : 0
        }
        [60] : {
            name : 60
            type : number
            value : 0
        }
        [61] : {
            name : 61
            type : number
            value : 0
        }
        [62] : {
            name : 62
            type : number
            value : 0
        }
        [63] : {
            name : 63
            type : number
            value : 0
        }
        [64] : {
            name : 64
            type : number
            value : 0
        }
        [65] : {
            name : 65
            type : number
            value : 0
        }
        [66] : {
            name : 66
            type : number
            value : 0
        }
        [67] : {
            name : 67
            type : number
            value : 0
        }
        [68] : {
            name : 68
            type : number
            value : 0
        }
        [69] : {
            name : 69
            type : number
            value : 0
        }
        [70] : {
            name : 70
            type : number
            value : 0
        }
        // ... (omitted properties)
    ]
    subtype : typedarray
    type : object
}
```

----------------------------------------

TITLE: Establishing SOCKS Connection using createConnection with Promises in TypeScript
DESCRIPTION: Shows how to use the Promise returned by `SocksClient.createConnection` in TypeScript. It establishes a SOCKS connection to 'ip-api.com:80' via a SOCKS5 proxy, then uses the `.then()` method to handle the successful connection, send an HTTP GET request, and log the response. Requires the 'socks' library.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/socks/docs/examples/typescript/connectExample.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    ipaddress: '104.131.124.203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api.com', // host names are supported with SOCKS v4a and SOCKS v5.
    port: 80
  },

  command: 'connect'
};

SocksClient.createConnection(options)
.then(info => {
  console.log(info.socket);
  // <Socket ...>  (this is a raw net.Socket that is established to the destination host through the given proxy servers)

  info.socket.write('GET /json HTTP/1.1\nHost: ip-api.com\n\n');
  info.socket.on('data', (data) => {
    console.log(data.toString()); // ip-api.com sees that the last proxy (104.131.124.203) is connected to it and not the origin client (you).
    /*
      HTTP/1.1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        "as":"AS14061 Digital Ocean, Inc.",
        "city":"Clifton",
        "country":"United States",
        "countryCode":"US",
        "isp":"Digital Ocean",
        "lat":40.8326,
        "lon":-74.1307,
        "org":"Digital Ocean",
        "query":"104.131.124.203",
        "region":"NJ",
        "regionName":"New Jersey",
        "status":"success",
        "timezone":"America/New_York",
        "zip":"07014"
      }
    */
  });
})
.catch(err => {
  // handle errors
});
```

----------------------------------------

TITLE: Evaluating Private Setter-Only Accessors with Runtime.evaluate - JavaScript
DESCRIPTION: This set of snippets tests behavior when reading, assigning to, and performing arithmetic on a private setter-only accessor (#setterOnly). Runtime.evaluate() returns errors for get or arithmetic operations (no getter), but successful assignment mutates the backing field. Error outputs and field state transitions are demonstrated, showing constraint enforcement in private accessors.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-private-class-member-expected.txt#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
Runtime.evaluate: `obj.#setterOnly`
{
    className : Error
    description : Error: '#setterOnly' was defined without a getter     at <anonymous>:1:1
    objectId : <objectId>
    subtype : error
    type : object
}
```

LANGUAGE: JavaScript
CODE:
```
Runtime.evaluate: `obj.#setterOnly = 1`
{
    description : 1
    type : number
    value : 1
}
```

LANGUAGE: JavaScript
CODE:
```
Runtime.evaluate: `obj.#setterOnly++`
{
    className : Error
    description : Error: '#setterOnly' was defined without a getter     at <anonymous>:1:1
    objectId : <objectId>
    subtype : error
    type : object
}
```

LANGUAGE: JavaScript
CODE:
```
Runtime.evaluate: `obj.#setterOnly -= 3`
{
    className : Error
    description : Error: '#setterOnly' was defined without a getter     at <anonymous>:1:1
    objectId : <objectId>
    subtype : error
    type : object
}
```

LANGUAGE: JavaScript
CODE:
```
Runtime.evaluate: `obj.#field`
{
    type : string
    value : setterOnlyCalled
}
```

----------------------------------------

TITLE: Implementing Warning Emission Control in Node.js
DESCRIPTION: Demonstrates how to emit warnings only once per process using a boolean flag. Shows implementation in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_38

LANGUAGE: mjs
CODE:
```
import { emitWarning } from 'node:process';

function emitMyWarning() {
  if (!emitMyWarning.warned) {
    emitMyWarning.warned = true;
    emitWarning('Only warn once!');
  }
}
emitMyWarning();
// Emits: (node: 56339) Warning: Only warn once!
emitMyWarning();
// Emits nothing
```

LANGUAGE: cjs
CODE:
```
const { emitWarning } = require('node:process');

function emitMyWarning() {
  if (!emitMyWarning.warned) {
    emitMyWarning.warned = true;
    emitWarning('Only warn once!');
  }
}
emitMyWarning();
// Emits: (node: 56339) Warning: Only warn once!
emitMyWarning();
// Emits nothing
```

----------------------------------------

TITLE: Running JavaScript in a Separate Context with Node.js VM Module
DESCRIPTION: This snippet demonstrates how to use the Node.js VM module to run JavaScript code in a separate context, showing how global variables are isolated between contexts.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
const vm = require('node:vm');

const x = 1;

const context = { x: 2 };
vm.createContext(context); // Contextify the object.

const code = 'x += 40; var y = 17;';
// `x` and `y` are global variables in the context.
// Initially, x has the value 2 because that is the value of context.x.
vm.runInContext(code, context);

console.log(context.x); // 42
console.log(context.y); // 17

console.log(x); // 1; y is not defined.
```

----------------------------------------

TITLE: Defining Abseil C++ Test: internal_fnmatch_test using Bazel
DESCRIPTION: Defines a Bazel C++ test target named `internal_fnmatch_test` using `absl_cc_test`. It compiles `internal/fnmatch_test.cc` and links against the internal Abseil `fnmatch` implementation and Google Mock/Test.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/log/CMakeLists.txt#2025-04-23_snippet_33

LANGUAGE: starlark
CODE:
```
absl_cc_test(
  NAME
    internal_fnmatch_test
  SRCS
    "internal/fnmatch_test.cc"
  COPTS
    ${ABSL_TEST_COPTS}
  LINKOPTS
    ${ABSL_DEFAULT_LINKOPTS}
  DEPS
    absl::log_internal_fnmatch
    GTest::gmock_main
)
```

----------------------------------------

TITLE: Escaping CSS Strings in Ruby with ruby-cssesc - Ruby
DESCRIPTION: This Ruby code imports the ruby-cssesc gem and utilizes the CSSEsc.escape method to escape strings for CSS identifiers. The 'is_identifier: true' option specifies that the output should be valid as a CSS identifier. Requires the ruby-cssesc gem to be installed.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cssesc/README.md#2025-04-23_snippet_4

LANGUAGE: ruby
CODE:
```
require 'ruby-cssesc'
CSSEsc.escape('I ♥ Ruby', is_identifier: true)
```

----------------------------------------

TITLE: Running MB Analyze Command with Configuration and Build Directory
DESCRIPTION: This snippet demonstrates how to use the 'mb analyze' command to determine which targets are affected by a list of files. It specifies a configuration, build directory, and input/output JSON files for analysis.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/tools/mb/docs/user_guide.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
mb analyze -c chromium_linux_rel //out/Release input.json output.json
```

----------------------------------------

TITLE: Setting Response Status Code using statusCode - Node.js HTTP/2 JavaScript
DESCRIPTION: Shows how to set the HTTP status code for a response using the `response.statusCode` property when using implicit headers. This property controls the status code sent to the client when headers are flushed and indicates the sent code after headers have gone out.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_68

LANGUAGE: javascript
CODE:
```
response.statusCode = 404;
```

----------------------------------------

TITLE: Basic Dump Interceptor Usage in Undici
DESCRIPTION: Illustrates how to use the dump interceptor in Undici to limit the size of the response body. It shows both client-level and request-level configurations for the interceptor.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
const { Client, interceptors } = require("undici");
const { dump } = interceptors;

const client = new Client("http://example.com").compose(
  dump({
    maxSize: 1024,
  })
);

// or
client.dispatch(
  {
    path: "/",
    method: "GET",
    dumpMaxSize: 1024,
  },
  handler
);
```

----------------------------------------

TITLE: Writing Signed 32-bit Integer Little-Endian to Buffer (Node.js)
DESCRIPTION: This snippet demonstrates using `buf.writeInt32LE()` to write a signed 32-bit integer into a Buffer at a specified offset using little-endian byte order. The value must be a valid signed 32-bit integer and is written as two's complement.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_92

LANGUAGE: JavaScript
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(4);

buf.writeInt32LE(0x05060708, 0);

console.log(buf);
// Prints: <Buffer 08 07 06 05>
```

LANGUAGE: JavaScript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(4);

buf.writeInt32LE(0x05060708, 0);

console.log(buf);
// Prints: <Buffer 08 07 06 05>
```

----------------------------------------

TITLE: Using `Function.prototype.call` without Explicit Context in JavaScript
DESCRIPTION: Calls `myFunction` using `Function.prototype.call` without providing a `this` argument. In this case, `this` defaults to the global object in non-strict mode or `undefined` in strict mode/modules. The output `[this, \"myFunction\", undefined]` shows the default `this` context and lack of arguments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-convert-this-dom-window-expected.txt#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
myFunction.call()
```

----------------------------------------

TITLE: Asynchronous Stack Trace with setTimeout in Node.js
DESCRIPTION: Stack trace output showing three levels of nested function calls (foo1/inner1, foo2/inner2, foo3/inner3) separated by setTimeout operations. The trace ends with an anonymous function call from expr.js.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/async-set-timeout-expected.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
inner1 (test.js:11:4)
foo1 (test.js:14:2)
-- setTimeout --
inner2 (test.js:18:4)
foo2 (test.js:20:2)
-- setTimeout --
inner3 (test.js:25:4)
foo3 (test.js:27:2)
(anonymous) (expr.js:0:0)
```

----------------------------------------

TITLE: Simplified Implementation of require Function in Node.js
DESCRIPTION: Illustrates the internal workings of require() by showing a simplified implementation that explains how module.exports and the exports shortcut work together.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_30

LANGUAGE: javascript
CODE:
```
function require(/* ... */) {
  const module = { exports: {} };
  ((module, exports) => {
    // Module code here. In this example, define a function.
    function someFunc() {}
    exports = someFunc;
    // At this point, exports is no longer a shortcut to module.exports, and
    // this module will still export an empty default object.
    module.exports = someFunc;
    // At this point, the module will now export someFunc, instead of the
    // default object.
  })(module, module.exports);
  return module.exports;
}
```

----------------------------------------

TITLE: Step Into in Branching Test - Position 5
DESCRIPTION: This snippet shows the expected debugger position (#) when using 'step into' from inside function 'c', landing at the end of 'c', as part of the 'testStepInOutBranch'. This step would likely be taken from the 'c()' call inside function 'a'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-out-expected.txt#_snippet_4

LANGUAGE: javascript
CODE:
```
function b(x) { if (x) { c(); }};
function c() {#};
a(); b(); c();
```

----------------------------------------

TITLE: Markdown Commit Link for Undici 4.16.0 Update
DESCRIPTION: Markdown formatted line from the Node.js v17.9.0 changelog, linking to commit `30dc6dd3fb`. This commit updates the undici dependency to version 4.16.0 and references pull request #42414.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V17.md#2025-04-23_snippet_9

LANGUAGE: markdown
CODE:
```
* [`30dc6dd3fb`](https://github.com/nodejs/node/commit/30dc6dd3fb) - **deps**: update undici to 4.16.0 (Node.js GitHub Bot) [#42414](https://github.com/nodejs/node/pull/42414)
```

----------------------------------------

TITLE: Creating Shared and Static Library Targets for llhttp
DESCRIPTION: Sets up shared and static library targets based on build options, applying the configuration function to each target.
SOURCE: https://github.com/nodejs/node/blob/main/deps/llhttp/CMakeLists.txt#2025-04-23_snippet_3

LANGUAGE: CMake
CODE:
```
if(BUILD_SHARED_LIBS)
  add_library(llhttp_shared SHARED
      ${llhttp_src}
  )
  add_library(llhttp::llhttp ALIAS llhttp_shared)
  config_library(llhttp_shared)
endif()

if(BUILD_STATIC_LIBS)
  add_library(llhttp_static STATIC
      ${llhttp_src}
  )
  if(BUILD_SHARED_LIBS)
    add_library(llhttp::llhttp ALIAS llhttp_shared)
  else()
    add_library(llhttp::llhttp ALIAS llhttp_static)
  endif()
  config_library(llhttp_static)
endif()

# On windows with Visual Studio, add a debug postfix so that release
# and debug libraries can coexist.
if(MSVC)
  set(CMAKE_DEBUG_POSTFIX "d")
endif()
```

----------------------------------------

TITLE: Running GYP with Additional Arguments in a Test (Python)
DESCRIPTION: Demonstrates passing extra command-line arguments to the GYP executable when invoked via the `run_gyp` method. The `arguments` parameter takes a list of strings, which are appended to the GYP command line.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/Testing.md#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
  test.run_gyp('file.gyp', arguments=['arg1', 'arg2', ...])
```

----------------------------------------

TITLE: Verifying Console Object Property Descriptor in Node.js
DESCRIPTION: This output displays the expected property descriptor for the global `console` object in a Node.js environment. The test confirms that the `console` object is configurable, non-enumerable (meaning it won't show up in `for...in` loops on the global object by default), and writable.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-spec-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
{
    configurable : true
    enumerable : false
    value : <value>
    writable : true
}
```

----------------------------------------

TITLE: Breakpoint Pause Location Output
DESCRIPTION: Shows the debug output when the program pauses at the various breakpoints, displaying the function names and file locations where execution was paused.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/set-breakpoint-in-class-initializer-expected.txt#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
Paused on location:
(anonymous) (testInitializer.js:8:3)
Paused on location:
<instance_members_initializer> (testInitializer.js:9:8)
X (testInitializer.js:5:13)
(anonymous) (testInitializer.js:11:0)
Paused on location:
X (testInitializer.js:6:4)
(anonymous) (testInitializer.js:11:0)
```

----------------------------------------

TITLE: Basic Redirect Interceptor Usage in Undici
DESCRIPTION: Shows how to use the pre-built redirect interceptor with Undici Client. The example sets a maximum of 3 redirections and enables throwing an error on max redirects.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
const { Client, interceptors } = require("undici");
const { redirect } = interceptors;

const client = new Client("http://example.com").compose(
  redirect({ maxRedirections: 3, throwOnMaxRedirects: true })
);
client.request({ path: "/" })
```

----------------------------------------

TITLE: Getting a Property from an Object in C using Node-API
DESCRIPTION: This function retrieves a property from a JavaScript object. It takes the environment, the source object, the property key, and a pointer to store the result. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_151

LANGUAGE: c
CODE:
```
napi_status napi_get_property(napi_env env,
                              napi_value object,
                              napi_value key,
                              napi_value* result);
```

----------------------------------------

TITLE: Object with Promise-valued Property - JavaScript
DESCRIPTION: Creates an object literal with a property 'a', which is set to a resolved Promise. Examines how object properties containing Promises are displayed in node previews. Input: none; Output: {a: Promise}. Useful for previewing nested async values.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_44

LANGUAGE: JavaScript
CODE:
```
({a: Promise.resolve(42)})
```

----------------------------------------

TITLE: Prohibiting Standard C++ Containers for V8 Local Handles (C++)
DESCRIPTION: Illustrates the incorrect way to store `v8::Local` handles in a standard C++ heap-allocated container. Doing so leads to undefined behavior because Local handles are stack-allocated and managed by `HandleScope`, not standard container memory management.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_0

LANGUAGE: C++
CODE:
```
// Don't do this
std::vector<v8::Local<v8::Value>> v1;
```

----------------------------------------

TITLE: Defining CMake Thread Test in CMake
DESCRIPTION: Defines a unit test for CMake-specific thread functionality. This test ensures that threading capabilities work correctly in CMake build environments, depending only on the base library.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/base/CMakeLists.txt#2025-04-23_snippet_14

LANGUAGE: CMake
CODE:
```
absl_cc_test(
  NAME
    cmake_thread_test
  SRCS
    "internal/cmake_thread_test.cc"
  COPTS
    ${ABSL_TEST_COPTS}
  DEPS
    absl::base
)
```

----------------------------------------

TITLE: Using Arrow Functions as Event Listeners in Node.js (CommonJS)
DESCRIPTION: This example shows the use of ES6 Arrow Functions as event listeners in Node.js using CommonJS modules. It demonstrates that 'this' does not reference the EventEmitter instance when using arrow functions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', (a, b) => {
  console.log(a, b, this);
  // Prints: a b {}
});
myEmitter.emit('event', 'a', 'b');
```

----------------------------------------

TITLE: Async Callback Function Signatures in Node-API (C)
DESCRIPTION: Defines the callback interfaces for asynchronous work in Node-API. The execute callback runs in a worker thread for the async operation, while the complete callback runs in the main event loop when the operation finishes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_186

LANGUAGE: c
CODE:
```
typedef void (*napi_async_execute_callback)(napi_env env,
                                            void* data);
typedef void (*napi_async_complete_callback)(napi_env env,
                                             napi_status status,
                                             void* data);
```

----------------------------------------

TITLE: Generating ECDSA Key Pair using Web Crypto API in JavaScript
DESCRIPTION: This function generates an ECDSA key pair using the Web Crypto API. It creates both public and private keys that can be used for signing and verifying operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function generateEcKey(namedCurve = 'P-521') {
  const {
    publicKey,
    privateKey,
  } = await subtle.generateKey({
    name: 'ECDSA',
    namedCurve,
  }, true, ['sign', 'verify']);

  return { publicKey, privateKey };
}
```

----------------------------------------

TITLE: Importing GPG Release Keys for c-ares
DESCRIPTION: Bash commands to import the GPG keys used to verify c-ares releases from the Ubuntu keyserver. Includes keys for both Daniel Stenberg and Brad House.
SOURCE: https://github.com/nodejs/node/blob/main/deps/cares/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 27EDEAF22F3ABCEB50DB9A125CC908FDB71E12C2 # Daniel Stenberg
gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys DA7D64E4C82C6294CB73A20E22E3D13B5411B7CA # Brad House
```

----------------------------------------

TITLE: Dynamic Import with Hook Registration (CommonJS)
DESCRIPTION: Example showing how to register hooks and use dynamic imports in CommonJS to ensure hooks are applied to imported modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
const { register } = require('node:module');
const { pathToFileURL } = require('node:url');

register('http-to-https', pathToFileURL(__filename));

// Because this is a dynamic `import()`, the `http-to-https` hooks will run
// to handle `./my-app.js` and any other files it imports or requires.
import('./my-app.js');
```

----------------------------------------

TITLE: Shared Library Generation Function Interface in OpenSSL Build Templates
DESCRIPTION: Documents the function interface for 'obj2shlib', which produces build file lines to create shared libraries from object files. Shows the calling convention and parameters.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/Configurations/README.md#2025-04-23_snippet_17

LANGUAGE: Perl
CODE:
```
obj2shlib(shlib => "PATH/TO/shlibfile",
          lib => "PATH/TO/libfile",
          objs => [ "PATH/TO/objectfile", ... ],
          deps => [ "PATH/TO/otherlibfile", ... ]);
```

----------------------------------------

TITLE: Creating and Manipulating MIME Types in JavaScript
DESCRIPTION: Demonstrates the usage of the util.MIMEType class to create, parse, and manipulate MIME types. It shows how to access and modify type, subtype, and essence properties of a MIME type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_32

LANGUAGE: javascript
CODE:
```
import { MIMEType } from 'node:util';

const myMIME = new MIMEType('text/javascript');
console.log(myMIME.type);
// Prints: text
myMIME.type = 'application';
console.log(myMIME.type);
// Prints: application
console.log(String(myMIME));
// Prints: application/javascript
```

LANGUAGE: javascript
CODE:
```
const { MIMEType } = require('node:util');

const myMIME = new MIMEType('text/javascript');
console.log(myMIME.type);
// Prints: text
myMIME.type = 'application';
console.log(myMIME.type);
// Prints: application
console.log(String(myMIME));
// Prints: application/javascript
```

----------------------------------------

TITLE: Getting File System Stats with fsPromises.statfs in Node.js
DESCRIPTION: Asynchronously retrieves the `fs.StatFs` object for the file system containing the given `path`. Returns a Promise that fulfills with the stats object. An optional `options` object can include `bigint: true` to return numeric values as `bigint`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
fsPromises.statfs(path[, options])
```

----------------------------------------

TITLE: Empty Breakpoint Locations Response in Node.js Debugger API
DESCRIPTION: JSON response message with an empty locations array, likely in response to a getPossibleBreakpoints request. This demonstrates the case where no breakpoints are available, which should be handled gracefully without crashing during lazy compilation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/get-possible-breakpoints-lazy-error-expected.txt#2025-04-23_snippet_1

LANGUAGE: JSON
CODE:
```
{
    id : <messageId>
    result : {
        locations : [
        ]
    }
}
```

----------------------------------------

TITLE: Including the ABI-Stable Node-API Header in C
DESCRIPTION: Demonstrates the correct way to include the Node-API header (`node_api.h`) to ensure Application Binary Interface (ABI) stability for a native addon across different Node.js versions. This restricts the addon to using only the stable Node-API functions defined in this header.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_5

LANGUAGE: c
CODE:
```
#include <node_api.h>
```

----------------------------------------

TITLE: Private Accessor Evaluation in Node.js Runtime
DESCRIPTION: Demonstrates evaluating private accessors including general accessor, read-only accessor, and write-only accessor. Shows the returned values when these accessors are called.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/class-private-methods-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
{
    result : {
        description : 5
        type : number
        value : 5
    }
}
{
    result : {
        description : 5
        type : number
        value : 5
    }
}
{
    result : {
        description : 0
        type : number
        value : 0
    }
}
```

----------------------------------------

TITLE: Displaying npm token list output in Bash
DESCRIPTION: This snippet demonstrates the output format of the npm token list command. It shows examples of read-only and publish tokens, including their IDs, creation dates, and IP whitelist information.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-token.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
Read only token npm_1f… with id 7f3134 created 2017-10-21

Publish token npm_af…  with id c03241 created 2017-10-02
with IP Whitelist: 192.168.0.1/24

Publish token npm_… with id e0cf92 created 2017-10-02
```

----------------------------------------

TITLE: Evaluating String Truthiness in JavaScript Ternary Operator
DESCRIPTION: This JavaScript snippet tests the truthiness of a non-empty string within a ternary operator. The string `'abc'` is considered truthy in JavaScript, causing the expression to evaluate to the first value, `1`, as shown in the log 'PASS 'abc' ? 1 : 2 is 1'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/kde/conditional-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
'abc' ? 1 : 2
```

----------------------------------------

TITLE: Reading File Stream Using Line Event (ESM)
DESCRIPTION: Alternative approach using the 'line' event handler to process file lines. This method uses event-based processing instead of async iteration.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_35

LANGUAGE: javascript
CODE:
```
import { createReadStream } from 'node:fs';
import { createInterface } from 'node:readline';

const rl = createInterface({
  input: createReadStream('sample.txt'),
  crlfDelay: Infinity,
});

rl.on('line', (line) => {
  console.log(`Line from file: ${line}`);
});
```

----------------------------------------

TITLE: Node.js Debugger Pause on Exception
DESCRIPTION: Shows the debugger output when paused on an uncaught exception. This snippet demonstrates how the debugger presents the stack trace at the point of an exception, including both JavaScript and WebAssembly frames.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-jspi-async-stack-expected.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
Debugger paused on uncaught exception
testSyncThrow (test.js:97:2)
js_func (test.js:24:17)
$wrappedWasm (wasm://wasm/fac94cc6:0:71)
$threeTimes (wasm://wasm/fac94cc6:0:78)
```

----------------------------------------

TITLE: Removing a User from an npm Team using libnpmteam in Node.js
DESCRIPTION: Example of removing a specified user from an npm team using the `team.rm` function. Requires the username, team name, and potentially authentication options within the optional `opts` object (e.g., `opts.token`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmteam/README.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
await team.rm('zkat', '@npm:cli', {token: 'myregistrytoken'})
// @zkat is no longer part of the @npm:cli team.
```

----------------------------------------

TITLE: Example Success Output for Parsing Check
DESCRIPTION: This line represents an expected output message from the test execution, confirming that the relevant code or structure was successfully parsed, indicated by a boolean 'true' status for 'successfullyParsed'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/var-shadows-arg-gc-crash-expected.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Using path.posix.basename for Consistent POSIX Path Handling
DESCRIPTION: Shows how to use `path.posix.basename()` to ensure consistent handling of POSIX-style paths, regardless of the underlying operating system. This method always treats forward slashes as separators.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_5

LANGUAGE: js
CODE:
```
path.posix.basename('/tmp/myfile.html');
// Returns: 'myfile.html'
```

----------------------------------------

TITLE: Non-Recommended Pattern for Reading Files in Node.js
DESCRIPTION: Example of a non-recommended pattern for reading from a file that introduces a race condition by checking file accessibility before opening it.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_46

LANGUAGE: javascript
CODE:
```
import { access, open, close } from 'node:fs';
access('myfile', (err) => {
  if (err) {
    if (err.code === 'ENOENT') {
      console.error('myfile does not exist');
      return;
    }

    throw err;
  }

  open('myfile', 'r', (err, fd) => {
    if (err) throw err;

    try {
      readMyData(fd);
    } finally {
      close(fd, (err) => {
        if (err) throw err;
      });
    }
  });
});
```

----------------------------------------

TITLE: Implementing _transform Method with Two Equivalent Patterns in Node.js
DESCRIPTION: Example showing two equivalent ways to implement the _transform method in a Transform stream. The first pushes data directly and calls callback, while the second passes data as the second argument to callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_98

LANGUAGE: javascript
CODE:
```
transform.prototype._transform = function(data, encoding, callback) {
  this.push(data);
  callback();
};

transform.prototype._transform = function(data, encoding, callback) {
  callback(null, data);
};
```

----------------------------------------

TITLE: Creating and Using VM Context in Node.js
DESCRIPTION: Demonstrates how to create a VM context with a custom global variable, run code within that context, and show how changes remain isolated from the main global scope.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
const vm = require('node:vm');

global.globalVar = 3;

const context = { globalVar: 1 };
vm.createContext(context);

vm.runInContext('globalVar *= 2;', context);

console.log(context);
// Prints: { globalVar: 2 }

console.log(global.globalVar);
// Prints: 3
```

----------------------------------------

TITLE: Testing Local Variable Reading in DFG
DESCRIPTION: Test script that calls bar(5) multiple times and verifies it returns 42, testing the DFG's handling of local variable reads in merged blocks. This validates that the DFG correctly handles constant folding of the first read of a local variable when merging blocks.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-constant-fold-first-local-read-after-block-merge-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
bar(5) is 42
```

----------------------------------------

TITLE: Building with Full ICU on Windows from Local Source - PowerShell
DESCRIPTION: Performs a Node.js build on Windows using a pre-extracted ICU source placed under deps/icu. Useful when custom or updated ICU versions are needed. Requires unpacked ICU to be present at the specified location prior to running the build command.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_46

LANGUAGE: PowerShell
CODE:
```
.\vcbuild full-icu
```

----------------------------------------

TITLE: Example of a good Git commit message
DESCRIPTION: This snippet demonstrates the structure of a well-formatted Git commit message, including a concise subject line, blank second line, and a detailed body wrapped at 72 columns.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/CONTRIBUTING.md#2025-04-23_snippet_3

LANGUAGE: git
CODE:
```
subsystem: explaining the commit in one line

Body of commit message is a few lines of text, explaining things
in more detail, possibly giving some background about the issue
being fixed, etc etc.

The body of the commit message can be several paragraphs, and
please do proper word-wrap and keep columns shorter than about
72 characters or so. That way `git log` will show things
nicely even when it is indented.
```

----------------------------------------

TITLE: Streaming Teams in an npm Scope using libnpmteam in Node.js
DESCRIPTION: Shows how to use the `team.lsTeams.stream` function to get a readable stream of team names belonging to a specified scope. The example iterates over the stream using an async `for...await...of` loop. Requires authentication options (e.g., `opts.token`) passed in the `opts` object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmteam/README.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
for await (let team of team.lsTeams.stream('@npm', {token: 'myregistrytoken'})) {
  console.log(team)
}

// outputs
// npm:cli
// npm:web
// npm:registry
// npm:developers
```

----------------------------------------

TITLE: Demonstrating Package Alias Format in Markdown
DESCRIPTION: This snippet shows the format for specifying package aliases, which are used to refer to packages by an alternative name.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/package-spec.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
* `<alias>@npm:<name>`
```

----------------------------------------

TITLE: Testing Object with Duplicate References in Node.js Runtime
DESCRIPTION: Creates an object with duplicate references to the same objects and a self-reference. The output demonstrates how the runtime handles and represents duplicate and circular references.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/deep-serialization-local-references-expected.txt#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
(()=>{const foo={a: []}; const bar=[1,2]; const result={1: foo, 2: foo, 3: bar, 4: bar}; result.self=result; return result; })()
```

----------------------------------------

TITLE: Throwing a JavaScript RangeError with N-API in C
DESCRIPTION: This function creates and throws a JavaScript `RangeError` object. It takes the N-API environment (`env`), an optional error code string (`code`), and the error message string (`msg`). If a code is specified, it will be attached to the error object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_37

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_throw_range_error(napi_env env,
                                               const char* code,
                                               const char* msg);
```

----------------------------------------

TITLE: Returning First Folder Created by mkdir Recursive in Node.js fs Module
DESCRIPTION: Modifies the fs.mkdir function with recursive option to return the first folder created in the directory structure.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V13.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
// No code snippet provided, refers to pull request #31530
```

----------------------------------------

TITLE: Requiring Deprecated & Experimental Modules (CommonJS) - JavaScript
DESCRIPTION: A CommonJS snippet that requires both the deprecated `node:sys` module and the experimental `node:vm` module, calling an experimental `vm` function. This example demonstrates how `--disable-warning` can be used to filter warnings by type (e.g., suppress 'ExperimentalWarning').
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_19

LANGUAGE: cjs
CODE:
```
const sys = require('node:sys');
const vm = require('node:vm');

vm.measureMemory();
```

----------------------------------------

TITLE: Using cjs-module-lexer in ESM Environment with Wasm
DESCRIPTION: Example of using the lexer in an ESM environment with WebAssembly support. The Wasm version offers approximately 1.5x faster performance without cold start issues but requires initialization before use.
SOURCE: https://github.com/nodejs/node/blob/main/deps/cjs-module-lexer/README.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { parse, init } from 'cjs-module-lexer';
// init() needs to be called and waited upon, or use initSync() to compile
// Wasm blockingly and synchronously.
await init();
const { exports, reexports } = parse(source);
```

----------------------------------------

TITLE: Inspecting Async Function Description Output (JSON)
DESCRIPTION: This snippet displays the expected output format when inspecting an asynchronous JavaScript function (`async function afun(x) { await x; }`) during the `testAsyncFunctionDescription` regression test. It correctly identifies the `className` as `AsyncFunction` and includes its source description, object ID placeholder, and type.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/regress/regress-crbug-1207867-expected.txt#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
    className : AsyncFunction
    description : async function afun(x) { await x; }
    objectId : <objectId>
    type : function
}
```

----------------------------------------

TITLE: Using sourceMap Option with util.getCallSites (CJS)
DESCRIPTION: Shows how to call `util.getCallSites` with the `sourceMap: true` option in a CommonJS environment. This option aims to provide original source locations if source maps are available. Comments highlight the expected output differences.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_11

LANGUAGE: cjs
CODE:
```
const { getCallSites } = require('node:util');

const callSites = getCallSites({ sourceMap: true });

// With sourceMap:
// Function Name: ''
// Script Name: example.js
// Line Number: 7
// Column Number: 26

// Without sourceMap:
// Function Name: ''
// Script Name: example.js
// Line Number: 2
// Column Number: 26
```

----------------------------------------

TITLE: Generating SEMVER-PATCH Changelog Entries (Console)
DESCRIPTION: Uses the `branch-diff` utility to compare the target Node.js branch (`vN.x`) against the previous major release branch (`vN-1.x`). It filters for commits that are *not* labeled `semver-major` or `semver-minor`, effectively capturing patch-level changes. The output is grouped, and release commits are excluded, assisting in compiling the patch section for a major release changelog. Requires up-to-date local copies of the branches.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/releases.md#_snippet_42

LANGUAGE: console
CODE:
```
branch-diff upstream/vN-1.x upstream/vN.x --exclude-label=semver-major,semver-minor --group --filter-release
```

----------------------------------------

TITLE: Testing Arithmetic Operations with Float Strings in JavaScript
DESCRIPTION: This snippet tests arithmetic operations between a negative number and a string representation of a float. It shows how JavaScript coerces the string to a number for these operations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-transforms-expected.txt#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
values.minusOne * +values.someFloatString
values.minusOne / +values.someFloatString
values.minusOne - +values.someFloatString
```

----------------------------------------

TITLE: Accessing Container Children Nodes in Selector AST in JavaScript
DESCRIPTION: Illustrates how to access the nodes property of a container (e.g., selector), and retrieve a node's value. selectors.at(0) is assumed to access a selector, whose nodes is an array of child components. Output shows node values and length.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
// Input: h1 h2
selectors.at(0).nodes.length   // => 3
selectors.at(0).nodes[0].value // => 'h1'
selectors.at(0).nodes[1].value // => ' '
```

----------------------------------------

TITLE: Modifying & Syncing Built-in Exports (Node.js JS)
DESCRIPTION: This snippet illustrates modifying a property (`readFileSync`) on a built-in module's default export (`fs`) and then using `module.syncBuiltinESMExports()` to update the corresponding named export. It confirms that the named export now points to the modified function on the default export object. This feature allows advanced manipulation of built-in module exports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_8

LANGUAGE: js
CODE:
```
import fs, { readFileSync } from 'node:fs';
import { syncBuiltinESMExports } from 'node:module';
import { Buffer } from 'node:buffer';

fs.readFileSync = () => Buffer.from('Hello, ESM');
syncBuiltinESMExports();

fs.readFileSync === readFileSync;
```

----------------------------------------

TITLE: OpenSSL Crypto Function Declarations
DESCRIPTION: Reference listing of OpenSSL cryptographic function declarations including encryption, hashing, ASN.1, and utility functions. Each function is followed by (3) indicating it is a section 3 manual page entry.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/util/missingcrypto111.txt#2025-04-23_snippet_1

LANGUAGE: C
CODE:
```
CRYPTO_ctr128_encrypt_ctr32(3)
CRYPTO_cts128_decrypt(3)
CRYPTO_cts128_decrypt_block(3)
CRYPTO_cts128_encrypt(3)
CRYPTO_cts128_encrypt_block(3)
CRYPTO_dup_ex_data(3)
// ... additional function declarations omitted for brevity
```

----------------------------------------

TITLE: Adding User to npm Team (Bash)
DESCRIPTION: This command adds a specified user (`username`) to an existing team (`@org:newteam`) within an organization. Successful execution confirms the user's addition to the team.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-team.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm team add @org:newteam username
```

----------------------------------------

TITLE: Checking HTTPS Support in CommonJS
DESCRIPTION: This snippet demonstrates how to check if HTTPS support is available in a Node.js build using CommonJS require.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
let https;
try {
  https = require('node:https');
} catch (err) {
  console.error('https support is disabled!');
}
```

----------------------------------------

TITLE: Connection Establishment with undici:client:connected Channel
DESCRIPTION: Demonstrates monitoring successful connection establishment events.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:client:connected').subscribe(({ socket, connectParams, connector }) => {
  // const { host, hostname, protocol, port, servername, version } = connectParams
 // connector is a function that creates the socket
})
```

----------------------------------------

TITLE: Result of Target Conditions Evaluation in GYP
DESCRIPTION: This snippet shows the result of applying the target_conditions from the previous example. The shared library target receives the additional compiler flag, while the static library remains unchanged.
SOURCE: https://github.com/nodejs/node/blob/main/tools/gyp/docs/InputFormatReference.md#2025-04-23_snippet_12

LANGUAGE: json
CODE:
```
{
  'targets': [
    {
      'target_name': 'sharing_is_caring',
      'type': 'shared_library',
      'cflags': ['-fPIC'],
    },
    {
      'target_name': 'static_in_the_attic',
      'type': 'static_library',
    },
  ]
}
```

----------------------------------------

TITLE: Tracing Module Require Calls in Node.js
DESCRIPTION: Shows how to subscribe to the 'module.require.start' event, which is emitted when require() is executed. The event provides information about the module being required and the parent module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_44

LANGUAGE: javascript
CODE:
```
require()
```

----------------------------------------

TITLE: Executing a Package with npm exec (Bash)
DESCRIPTION: Contrasting example using `npm exec` with a similar structure (`npm exec foo@latest bar --package=@npmcli/foo`). Unlike `npx`, `npm exec` parses the `--package` option first, regardless of its position relative to positional arguments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npx.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ npm exec foo@latest bar --package=@npmcli/foo
```

----------------------------------------

TITLE: Checking Element Existence on an Object in C using Node-API
DESCRIPTION: This function checks if an element exists on a JavaScript object at a specific index. It takes the environment, the object to query, the index, and a pointer to store the result. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_160

LANGUAGE: c
CODE:
```
napi_status napi_has_element(napi_env env,
                             napi_value object,
                             uint32_t index,
                             bool* result);
```

----------------------------------------

TITLE: Testing Object Comparison Edge Cases in V8
DESCRIPTION: Test suite that verifies object comparison behavior, specifically testing the comparison between object literals, null values, and object references. The test repeatedly calls a function 'foo' with different combinations of arguments to ensure consistent behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-compare-final-object-to-final-object-or-other-when-proven-final-object-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
foo({f:42}, null)  // Throws TypeError
foo(o, o)  // Returns [42, true]
```

----------------------------------------

TITLE: Testing Number.Infinity Object Structure
DESCRIPTION: Test case validating the object structure and preview properties when handling Infinity value in a Number object. Verifies className, description, preview properties and primitive value.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/regress-1321833-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
{
    className : Number
    description : Number
    objectId : 1.1.2
    preview : {
        description : Number
        overflow : false
        properties : [
            [0] : {
                name : [[PrimitiveValue]]
                type : number
                value : Infinity
            }
        ]
        type : object
    }
    type : object
}
```

----------------------------------------

TITLE: Using assert.rejects() with async function in Node.js (ESM)
DESCRIPTION: Demonstrates how to use assert.rejects() to test asynchronous functions that are expected to throw errors. This example checks for a specific TypeError with a predefined message.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_42

LANGUAGE: JavaScript
CODE:
```
import assert from 'node:assert/strict';

await assert.rejects(
  async () => {
    throw new TypeError('Wrong value');
  },
  {
    name: 'TypeError',
    message: 'Wrong value',
  },
);
```

----------------------------------------

TITLE: Testing Generator Function in JavaScript Debugger
DESCRIPTION: Tests interacting with a generator function. The |C| markers indicate function calls, |D| for debugger statement, and |R| marks the return position.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/get-possible-breakpoints-main-expected.txt#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
function testGenerator() {
  var gen = |C|idMaker();
  |C|return42();
  gen.|C|next().value;
  |D|debugger;
  gen.|C|next().value;
  |C|return42();
  gen.|C|next().value;
  |C|return42();
  gen.|C|next().value;
|R|}
```

----------------------------------------

TITLE: Verifying File Content Non-Match in GYP Tests
DESCRIPTION: Tests that a file's content does not match the expected string. The test fails if the content matches. Can use regular expressions if the TestGyp object was initialized with TestGyp.match_re.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/Testing.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
test.must_not_match('file', 'expected content\n')
```

----------------------------------------

TITLE: Testing Array Pop Cleanup in JavaScript
DESCRIPTION: This code snippet represents a test case that calls a function 'foo' with an input array [1, 2] and checks if the result is [2,42,,]. The test is repeated multiple times to ensure consistent behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-array-pop-value-clearing-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
PASS foo([1, 2]) is [2,42,,]
```

----------------------------------------

TITLE: Asserting File or Directory Existence in a Test (Python)
DESCRIPTION: Uses the `must_exist` method to check if a specified file or directory exists within the test's temporary working directory (or at an absolute path). If the path does not exist, the test fails immediately.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/Testing.md#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
  test.must_exist('file_or_dir')
```

----------------------------------------

TITLE: Case-Sensitivity of path.win32.basename Suffix (Lowercase)
DESCRIPTION: Illustrates that `path.win32.basename()`, while handling Windows paths, performs a case-sensitive comparison for the optional `suffix`. It successfully removes the lowercase '.html' suffix.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_8

LANGUAGE: js
CODE:
```
path.win32.basename('C:\\foo.html', '.html');
// Returns: 'foo'
```

----------------------------------------

TITLE: Configuring OpenSSL Build for DJGPP in Shell
DESCRIPTION: Runs the OpenSSL Configure script to prepare the build environment for the DJGPP platform. It disables thread support ('no-threads') and sets the installation prefix to '/dev/env/DJDIR'. This step requires Perl and the Text::Template module.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/NOTES-DJGPP.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
./Configure no-threads --prefix=/dev/env/DJDIR DJGPP
```

----------------------------------------

TITLE: Runtime.evaluate with Invalid Additional Parameters
DESCRIPTION: Example of an error response when using Runtime.evaluate with incorrect additional parameters. The API requires additionalParameters to only contain string or integer values.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/serialization-options-expected.txt#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
Runtime.evaluate
expression: "{key_level_1: {key_level_2: {key_level_3: 'value_level_3'}}}"
serializationOptions: {"serialization":"deep","maxDepth":999,"additionalParameters":{"INCORRECT_ADDITIONAL_PARAMETER":{}}}
{
    error : {
        code : -32602
        message : Values of serializationOptions.additionalParameters can be only of type string or integer.
    }
    id : <messageId>
}
```

----------------------------------------

TITLE: Testing Restart Frame Failure for Async Functions in Node.js Debugging
DESCRIPTION: Example of an async function that cannot be restarted during debugging. The debugger statement creates a breakpoint where the restart operation is attempted and fails with error code -32000.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/restart-frame/fails-for-resumables-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
(async function asyncFn() {
  #debugger;
})();
```

----------------------------------------

TITLE: Initializing CMake Project for c-ares Library
DESCRIPTION: Sets up the CMake project for c-ares, including version information, module paths, and required CMake modules.
SOURCE: https://github.com/nodejs/node/blob/main/deps/cares/CMakeLists.txt#2025-04-23_snippet_0

LANGUAGE: CMake
CODE:
```
CMAKE_MINIMUM_REQUIRED (VERSION 3.5.0...3.10.0)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")

INCLUDE (CheckIncludeFiles)
INCLUDE (CheckTypeSize)
INCLUDE (CheckFunctionExists)
INCLUDE (CheckSymbolExists)
INCLUDE (CheckCSourceCompiles)
INCLUDE (CheckStructHasMember)
INCLUDE (CheckLibraryExists)

PROJECT (c-ares LANGUAGES C VERSION "1.34.5" )

# Set this version before release
SET (CARES_VERSION "${PROJECT_VERSION}")

INCLUDE (GNUInstallDirs) # include this *AFTER* PROJECT(), otherwise paths are wrong.
```

----------------------------------------

TITLE: Checking for unistd.h Header File in CMake
DESCRIPTION: Uses the `check_include_file` CMake command to check for the presence of the `unistd.h` header file, which contains POSIX operating system API definitions. The result is stored in the `Z_HAVE_UNISTD_H` cache variable.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/zlib/CMakeLists.txt#2025-04-23_snippet_10

LANGUAGE: cmake
CODE:
```
#
# Check for unistd.h
#
check_include_file(unistd.h Z_HAVE_UNISTD_H)
```

----------------------------------------

TITLE: Renaming a File Asynchronously in Node.js
DESCRIPTION: This snippet demonstrates how to use the fs.rename function to asynchronously rename a file from 'oldFile.txt' to 'newFile.txt'. It includes error handling and logs a success message upon completion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_72

LANGUAGE: javascript
CODE:
```
import { rename } from 'node:fs';

rename('oldFile.txt', 'newFile.txt', (err) => {
  if (err) throw err;
  console.log('Rename complete!');
});
```

----------------------------------------

TITLE: Specify Release Blog Post Commit Message Format - Console
DESCRIPTION: Defines the required format for commit messages when submitting a pull request to the nodejs.org repository for a new release blog post. It includes the release version and a reference to the original release proposal PR.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/releases.md#_snippet_33

LANGUAGE: console
CODE:
```
Blog: vX.Y.Z release post

Refs: <full URL to your release proposal PR>
```

----------------------------------------

TITLE: Testing Function Output in JavaScript
DESCRIPTION: This snippet repeatedly tests the output of a function 'foo' with arguments (true, 5), expecting the first element of the returned array to always be 462. It demonstrates consistent behavior across multiple invocations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-constant-fold-uncaptured-variable-that-is-later-captured-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS foo(true, 5)[0] is 462
```

----------------------------------------

TITLE: Commit References
DESCRIPTION: Git commit references for security patches and dependency updates, including changes to V8, OpenSSL, and HTTP components.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V5.md#2025-04-23_snippet_37

LANGUAGE: markdown
CODE:
```
* [[`678398f250`]] - **deps**: backport a7e50a5 from upstream v8 (Ben Noordhuis)
* [[`76a552c938`]] - **deps**: backport 6df9a1d from upstream v8 (Ben Noordhuis)
* [[`533881f889`]] - **deps**: upgrade openssl sources to 1.0.2e (Shigeki Ohtsu)
* [[`12e70fafd3`]] - **http**: fix pipeline regression (Fedor Indutny)
```

----------------------------------------

TITLE: Step Into in Nested Calls Test - Position 12
DESCRIPTION: This snippet shows the expected debugger position (#) when using 'step into' from the call to 'c(d())' in function 'a', landing inside function 'd', as part of the 'testStepInOutTree' scenario.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-out-expected.txt#_snippet_17

LANGUAGE: javascript
CODE:
```
function c(x) {};
function d() {#};
a(); b(); c(); d();
```

----------------------------------------

TITLE: Testing Arguments Optimization in V8
DESCRIPTION: A test that repeatedly calls foo() with three arguments (a, b, c) and verifies the result is always 6. This tests V8's ability to optimize argument handling even when variables aren't must-aliased in small functions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-arguments-alias-one-block-overwrite-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
foo(a, b, c)
```

----------------------------------------

TITLE: Implementing Trace Method for cppgc Object - C++
DESCRIPTION: Shows how to implement the `Trace` method required by `cppgc::GarbageCollected` to enable V8's garbage collector to trace references held by the object, particularly `v8::TracedReference` members.
SOURCE: https://github.com/nodejs/node/blob/main/src/README.md#_snippet_27

LANGUAGE: C++
CODE:
```
void MyWrap::Trace(cppgc::Visitor* visitor) const {
  CppgcMixin::Trace(visitor);
  visitor->Trace(script);  // v8::TracedReference is supported by cppgc::Visitor
}

```

----------------------------------------

TITLE: Testing instanceof Operator with Invalid Right-Hand Values
DESCRIPTION: Test cases that verify instanceof operator throws TypeError when the right-hand side is not a valid constructor or object. Tests primitive values and plain objects as right-hand operands.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/instance-of-immediates-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
(1 instanceof 1)
({} instanceof 1)
(obj instanceof 1)
(1 instanceof {})
({} instanceof {})
(obj instanceof {})
```

----------------------------------------

TITLE: Promise with Large String Result - JavaScript
DESCRIPTION: Creates a Promise that resolves to a string of 101 'a' characters; useful for inspecting promise previews for long values. Input: none; Output: fulfilled Promise with long string result. Tests how node inspection handles large promise results.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_40

LANGUAGE: JavaScript
CODE:
```
Promise.resolve('a'.repeat(101))
```

----------------------------------------

TITLE: Broadcasting Messages to All Workers in Node.js Cluster (ES Modules)
DESCRIPTION: This example demonstrates how to send a message to all worker processes from the primary process using the cluster.workers object, which contains references to all active workers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
import cluster from 'node:cluster';

for (const worker of Object.values(cluster.workers)) {
  worker.send('big announcement to all workers');
}
```

----------------------------------------

TITLE: UDP Socket Cluster Example with ES Modules
DESCRIPTION: Demonstrates how to share UDP sockets across multiple cluster workers using ES Modules, showing proper multicast membership handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_2

LANGUAGE: mjs
CODE:
```
import cluster from 'node:cluster';
import dgram from 'node:dgram';

if (cluster.isPrimary) {
  cluster.fork(); // Works ok.
  cluster.fork(); // Fails with EADDRINUSE.
} else {
  const s = dgram.createSocket('udp4');
  s.bind(1234, () => {
    s.addMembership('224.0.0.114');
  });
}
```

----------------------------------------

TITLE: Getting a Named Property from an Object in C using Node-API
DESCRIPTION: This function retrieves a named property from a JavaScript object using a UTF-8 string as the key. It is equivalent to napi_get_property but with a string key. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_156

LANGUAGE: c
CODE:
```
napi_status napi_get_named_property(napi_env env,
                                    napi_value object,
                                    const char* utf8Name,
                                    napi_value* result);
```

----------------------------------------

TITLE: Output Preview for Inherited Object Properties Test (Runtime.evaluate)
DESCRIPTION: Displays the preview generated by Runtime.evaluate for an object, focusing on its inherited properties. In this case, it primarily shows the 'prototype' property of the object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-with-generate-preview-expected.txt#2025-04-23_snippet_2

LANGUAGE: text
CODE:
```
{
    description : Object
    overflow : false
    properties : [
        [0] : {
            name : prototype
            type : object
            value : Object
        }
    ]
    type : object
}
```

----------------------------------------

TITLE: Testing JSON.stringify Replace Function Tracking in JavaScript
DESCRIPTION: These functions test the behavior of the replace function in JSON.stringify, tracking the order of property visits for arrays and objects. The tests use a global replaceTracker variable to record the sequence.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/run-json-stringify-expected.txt#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        replaceTracker = "";
        jsonObject.stringify([1,2,3,,,,4,5,6], replaceFunc);
        return replaceTracker;
    }
```

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        replaceTracker = "";
        jsonObject.stringify({a:"a", b:"b", c:"c", 3: "d", 2: "e", 1: "f"}, replaceFunc);
        return replaceTracker;
    }
```

----------------------------------------

TITLE: Testing Deep Equality with assert.deepEqual - Node.js assert - CommonJS (cjs)
DESCRIPTION: Demonstrates an assert.deepEqual comparison that does not throw an error because it uses loose equality ('==') under the hood. Compares a string and boolean, showing caveats of legacy assertion mode. Requires 'node:assert'. Inputs are two primitive values with different types; output is no assertion error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_12

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
// WARNING: This does not throw an AssertionError!

assert.deepEqual('+00000000', false);
```

----------------------------------------

TITLE: Advancing Set.keys() Iterator in JavaScript
DESCRIPTION: Creates a Set keys iterator, advances it with next(), and examines the remaining items. After advancing once, only key 2 remains (in Sets, keys and values are the same).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/internal-properties-entries-expected.txt#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
it = new Set([1,2]).keys(); it.next(); it
```

----------------------------------------

TITLE: Configuring Cache Path in npmrc
DESCRIPTION: This snippet demonstrates how to set the npm cache path using an environment variable in the .npmrc file. It allows for dynamic configuration based on the user's home directory.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/npmrc.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
cache = ${HOME}/.npm-packages
```

----------------------------------------

TITLE: Creating Node.js Buffer from ArrayBuffer in Node-API (C)
DESCRIPTION: Creates a Node.js Buffer object from an existing ArrayBuffer. Takes environment, ArrayBuffer, byte offset, byte length, and returns a napi_value representing the Buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_87

LANGUAGE: c
CODE:
```
napi_status NAPI_CDECL node_api_create_buffer_from_arraybuffer(napi_env env,
                                                              napi_value arraybuffer,
                                                              size_t byte_offset,
                                                              size_t byte_length,
                                                              napi_value* result)
```

----------------------------------------

TITLE: Building llhttp Project using Make (Shell)
DESCRIPTION: Commands to build the llhttp project from source. Assumes Node.js, npm, and make are installed. `npm ci` installs dependencies defined in `package-lock.json`, and `make` executes the build process defined in the Makefile.
SOURCE: https://github.com/nodejs/node/blob/main/deps/llhttp/README.md#2025-04-23_snippet_16

LANGUAGE: sh
CODE:
```
npm ci
make
```

----------------------------------------

TITLE: Example Output for Asynchronous mkdirp
DESCRIPTION: Shows the expected console output when the asynchronous `mkdirp` example is executed, assuming the `/tmp/foo` directory already exists. It indicates that the directories starting from `/tmp/foo/bar` were created.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cacache/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
made directories, starting with /tmp/foo/bar
```

----------------------------------------

TITLE: Logging Runtime.exceptionRevoked Event in Node.js
DESCRIPTION: This snippet demonstrates the structure of a Runtime.exceptionRevoked event in Node.js. It shows the exceptionId and the reason for revoking the exception, typically when a handler is added to a rejected promise.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/sessions/runtime-evaluate-exception-expected.txt#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
    "method" : "Runtime.exceptionRevoked",
    "params" : {
        "exceptionId" : "<exceptionId>",
        "reason" : "Handler added to rejected promise"
    }
}
```

----------------------------------------

TITLE: Checkout Release Line Staging Branch - Bash
DESCRIPTION: Checks out the local copy of the staging branch for a specific Node.js release line (e.g., v1.x-staging). This is a prerequisite step before using automated tools or performing manual tasks to mark a release line as LTS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/releases.md#_snippet_35

LANGUAGE: bash
CODE:
```
git checkout v1.x-staging
```

----------------------------------------

TITLE: Running All Matching Node.js Test Files - Bash
DESCRIPTION: Shows the basic command-line syntax using the `--test` flag to invoke the Node.js test runner. When used without additional arguments, it automatically discovers and executes all files matching the default test file glob patterns.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_16

LANGUAGE: Bash
CODE:
```
node --test
```

----------------------------------------

TITLE: Setting a Named Property on an Object in C using Node-API
DESCRIPTION: This function sets a named property on a JavaScript object using a UTF-8 string as the key. It is equivalent to napi_set_property but with a string key. The function returns napi_ok if the operation succeeds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_155

LANGUAGE: c
CODE:
```
napi_status napi_set_named_property(napi_env env,
                                    napi_value object,
                                    const char* utf8Name,
                                    napi_value value);
```

----------------------------------------

TITLE: Basic Mocked HTTP Request Example
DESCRIPTION: Shows how to intercept and mock a basic HTTP request using MockAgent and global dispatcher.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')
mockPool.intercept({ path: '/foo' }).reply(200, 'foo')

const { statusCode, body } = await request('http://localhost:3000/foo')

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Testing Deep Serialization of Negative Infinity via CDP Runtime Methods in JavaScript
DESCRIPTION: Tests the serialization of negative infinity `-Infinity` using `Runtime.evaluate` and `Runtime.callFunctionOn`. Both methods are expected to return a remote object representation with type 'number' and an unserializable value representing '-Infinity'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/deep-serialization-value-expected.txt#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
-Infinity
```

----------------------------------------

TITLE: Basic GYP Test Script Structure in Python
DESCRIPTION: Sample test script showing the basic structure for testing a 'Hello World' program build configuration, including GYP execution, build verification, and output testing.
SOURCE: https://github.com/nodejs/node/blob/main/tools/gyp/docs/Testing.md#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
#!/usr/bin/env python

"""
Verifies simplest-possible build of a "Hello, world!" program
using an explicit build target of 'all'.
"""

import TestGyp

test = TestGyp.TestGyp()

test.run_gyp('hello.gyp')

test.build_all('hello.gyp')

test.run_built_executable('hello', stdout="Hello, world!\n")

test.pass_test()
```

----------------------------------------

TITLE: Sorting [' ', '-'] Lexicographically in JavaScript
DESCRIPTION: This snippet tests the default `sort()` method on an array containing a space and a hyphen. It converts the sorted array to a string and expects the result ' ,-', confirming the sort order based on character code points.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/string-sort-expected.txt#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
[" ","-"].sort().toString()
```

----------------------------------------

TITLE: Comparing a Git Repository with Local Path
DESCRIPTION: Example showing how to compare a package from a GitHub repository with a local package using npm diff.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-diff.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
npm diff --diff=https://github.com/npm/libnpmdiff --diff=./local-path
```

----------------------------------------

TITLE: Validating CA Certificate Fingerprint with Undici Connector
DESCRIPTION: This example shows how to create a custom connector that validates the CA certificate fingerprint before establishing a connection. It includes a helper function to traverse the certificate chain to find the root certificate for validation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Connector.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
'use strict'

import { Client, buildConnector } from 'undici'

const caFingerprint = 'FO:OB:AR'
const connector = buildConnector({ rejectUnauthorized: false })
const client = new Client('https://localhost:3000', {
  connect (opts, cb) {
    connector(opts, (err, socket) => {
      if (err) {
        cb(err)
      } else if (getIssuerCertificate(socket).fingerprint256 !== caFingerprint) {
        socket.destroy()
        cb(new Error('Fingerprint does not match or malformed certificate'))
      } else {
        cb(null, socket)
      }
    })
  }
})

client.request({
  path: '/',
  method: 'GET'
}, (err, data) => {
  if (err) throw err

  const bufs = []
  data.body.on('data', (buf) => {
    bufs.push(buf)
  })
  data.body.on('end', () => {
    console.log(Buffer.concat(bufs).toString('utf8'))
    client.close()
  })
})

function getIssuerCertificate (socket) {
  let certificate = socket.getPeerCertificate(true)
  while (certificate && Object.keys(certificate).length > 0) {
    // invalid certificate
    if (certificate.issuerCertificate == null) {
      return null
    }

    // We have reached the root certificate.
    // In case of self-signed certificates, `issuerCertificate` may be a circular reference.
    if (certificate.fingerprint256 === certificate.issuerCertificate.fingerprint256) {
      break
    }

    // continue the loop
    certificate = certificate.issuerCertificate
  }
  return certificate
}
```

----------------------------------------

TITLE: Checking Node.js Version Information
DESCRIPTION: Console command to view current versions of ICU-related components in Node.js including CLDR, ICU, timezone, and Unicode versions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/maintaining/maintaining-icu.md#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ node -p process.versions
```

----------------------------------------

TITLE: Creating and Using SyntheticModule in ESM Format
DESCRIPTION: Demonstrates how to create a synthetic module, set exports, link and evaluate it using ES modules syntax. The example creates a module with a single export 'x' set to value 1.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
import vm from 'node:vm';

const m = new vm.SyntheticModule(['x'], () => {
  m.setExport('x', 1);
});

await m.link(() => {});
await m.evaluate();

assert.strictEqual(m.namespace.x, 1);
```

----------------------------------------

TITLE: Testing `\B` Escape Inside RegExp Character Class in JavaScript
DESCRIPTION: This snippet tests the behavior of the `\B` (non-word boundary) metacharacter when placed inside a character class using the regex `/[\B]/gm`. Within a character class, `\B` is expected to lose its special meaning and match the literal character 'B'. The surrounding test confirms this behavior against the input 'B'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/regex/malformed-escapes-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
/[\B]/gm
```

----------------------------------------

TITLE: Extracting Version Information from configure.ac in CMake
DESCRIPTION: This snippet extracts the major version number from the configure.ac file using regex matching. It sets the UV_VERSION_MAJOR variable for use in the build process.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/CMakeLists.txt#2025-04-23_snippet_15

LANGUAGE: CMake
CODE:
```
file(STRINGS configure.ac configure_ac REGEX ^AC_INIT)
string(REGEX MATCH "([0-9]+)[.][0-9]+[.][0-9]+" PACKAGE_VERSION "${configure_ac}")
set(UV_VERSION_MAJOR "${CMAKE_MATCH_1}")
```

----------------------------------------

TITLE: HTTP/2 Server Settings Update
DESCRIPTION: Adds updateSettings functionality to HTTP/2 servers allowing dynamic updates to server settings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_43



----------------------------------------

TITLE: console.table Output for Array of Arrays (JSON-like)
DESCRIPTION: Displays the `console.table` output for an array containing three inner arrays. Each inner array's preview shows string elements (like ['John', 'Smith']). The output details the structure, including descriptions, subtypes, types, and previews for nested arrays.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-table-expected.txt#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
    description : Array(3)
    overflow : false
    properties : [
        [0] : {
            name : 0
            subtype : array
            type : object
            value : Array(2)
            valuePreview : {
                description : Array(2)
                overflow : false
                properties : [
                    [0] : {
                        name : 0
                        type : string
                        value : John
                    }
                    [1] : {
                        name : 1
                        type : string
                        value : Smith
                    }
                ]
                subtype : array
                type : object
            }
        }
        [1] : {
            name : 1
            subtype : array
            type : object
            value : Array(2)
            valuePreview : {
                description : Array(2)
                overflow : false
                properties : [
                    [0] : {
                        name : 0
                        type : string
                        value : Jane
                    }
                    [1] : {
                        name : 1
                        type : string
                        value : Doe
                    }
                ]
                subtype : array
                type : object
            }
        }
        [2] : {
            name : 2
            subtype : array
            type : object
            value : Array(2)
            valuePreview : {
                description : Array(2)
                overflow : false
                properties : [
                    [0] : {
                        name : 0
                        type : string
                        value : Emily
                    }
                    [1] : {
                        name : 1
                        type : string
                        value : Jones
                    }
                ]
                subtype : array
                type : object
            }
        }
    ]
    subtype : array
    type : object
}
```

----------------------------------------

TITLE: Initializing libnpmpublish Library - JavaScript
DESCRIPTION: This snippet demonstrates how to import the publish and unpublish functions from the libnpmpublish package in Node.js using require syntax. This is a prerequisite for utilizing the provided publishing and unpublishing APIs. No parameters are required for this import, but libnpmpublish must be installed in your project ("npm install libnpmpublish").
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmpublish/README.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { publish, unpublish } = require('libnpmpublish')
```

----------------------------------------

TITLE: Creating Proxy Around Error Object - JavaScript
DESCRIPTION: Wraps a newly instantiated Error object with a Proxy and empty handler, verifying interoperability between built-in Error and Proxy mechanisms. Input: none; Output: Proxy object around Error. Requires support for Proxy and Error.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_31

LANGUAGE: JavaScript
CODE:
```
new Proxy(new Error(), {})
```

----------------------------------------

TITLE: Evaluating Console Memory and Last Results - Node.js Command Line API - JavaScript
DESCRIPTION: This snippet demonstrates evaluation of the global 'console.memory' object and special REPL variables ('$_', '$0' ... '$4') in a Node.js debugging session with side effects disabled. It checks how reference expressions and last values are reported without triggering side effects. No dependencies are required but the context presumes a Node.js REPL or inspector. Inputs are expression evaluations; outputs are the returned or referenced values.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/command-line-api-without-side-effects-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
Expression: console.memory
42

Expression: $_
43

Expression: $0
undefined

Expression: $1
undefined

Expression: $2
undefined

Expression: $3
undefined

Expression: $4
undefined
```

----------------------------------------

TITLE: Retrieving Int64 Value from JavaScript Number in Node-API
DESCRIPTION: Function to convert a JavaScript number to a C int64_t primitive. Handles values outside safe integer range and non-finite numbers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_118

LANGUAGE: c
CODE:
```
napi_status napi_get_value_int64(napi_env env,
                                 napi_value value,
                                 int64_t* result)
```

----------------------------------------

TITLE: Connection Preparation with undici:client:beforeConnect Channel
DESCRIPTION: Shows how to monitor connection initialization before it occurs.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:client:beforeConnect').subscribe(({ connectParams, connector }) => {
  // const { host, hostname, protocol, port, servername, version } = connectParams
  // connector is a function that creates the socket
})
```

----------------------------------------

TITLE: Testing JSON.stringify with Magic Objects in JavaScript
DESCRIPTION: This function tests how JSON.stringify behaves with a special magic object that has getters. It counts the number of getter calls during the stringify operation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/run-json-stringify-expected.txt#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        getterCalls = 0;
        return jsonObject.stringify(magicObject) + " :: getter calls = " + getterCalls;
    }
```

----------------------------------------

TITLE: Listing npm Organization Teams using libnpmteam in Node.js
DESCRIPTION: Demonstrates how to use the `libnpmteam.lsTeams` function to asynchronously retrieve and log a list of all teams belonging to a specified npm organization (e.g., 'npm'). Requires the `libnpmteam` module and uses async/await syntax.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmteam/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const team = require('libnpmteam')

// List all teams for the @npm org.
console.log(await team.lsTeams('npm'))
```

----------------------------------------

TITLE: Using One-Based Prerelease Identifiers in JavaScript
DESCRIPTION: Demonstrates using the optional fourth parameter 'identifierBase' with `semver.inc` in JavaScript. Setting it to '1' makes the prerelease number start from 1 instead of the default 0, resulting in '1.2.4-beta.1'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
semver.inc('1.2.3', 'prerelease', 'beta', '1')
// '1.2.4-beta.1'
```

----------------------------------------

TITLE: Safe Promise Methods Usage in JavaScript
DESCRIPTION: This snippet shows the unsafe use of Promise.all and related methods, and provides safer alternatives using SafePromiseAll and other safe promise methods.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/primordials.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
PromiseAll([]); // unsafe

PromiseAll(new SafeArrayIterator([])); // still unsafe
SafePromiseAll([]); // still unsafe

SafePromiseAllReturnVoid([]); // safe
SafePromiseAllReturnArrayLike([]); // safe

const array = [promise];
const set = new SafeSet().add(promise);
PromiseAll(new SafeArrayIterator(array)); // unsafe
PromiseAll(set); // unsafe

SafePromiseAllReturnVoid(array); // safe
SafePromiseAllReturnArrayLike(array); // safe

SafePromiseAll(ArrayPrototypeMap(array, someFunction));
SafePromiseAll(array, someFunction); // Same as the above, but more efficient.

SafePromiseAllReturnVoid(set); // ignores set content.
SafePromiseAllReturnVoid(ArrayFrom(set)); // works

SafePromiseAllReturnArrayLike(array).then((val) => val instanceof Array); // false
SafePromiseAll(array).then((val) => val instanceof Array); // true
```

----------------------------------------

TITLE: Examining Prototype Chain of globalThis in Node.js
DESCRIPTION: This code snippet shows the prototype chain of 'globalThis' in Node.js. It demonstrates that 'globalThis' is an instance of the global object, which inherits from Object.prototype.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/internal-properties-prototype-chain-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
Prototype chain for "globalThis":
{
    className : global
    description : global
    objectId : <objectId>
    type : object
}
{
    name : [[Prototype]]
    value : {
        className : Object
        description : Object
        objectId : <objectId>
        type : object
    }
}
{
    name : [[Prototype]]
    value : {
        className : Object
        description : Object
        objectId : <objectId>
        type : object
    }
}
```

----------------------------------------

TITLE: Synchronously Creating Directories with mkdirp - Node.js - JavaScript (Sync API)
DESCRIPTION: This JavaScript code snippet illustrates the synchronous usage of the mkdirp package to create directories recursively in a Node.js environment. It requires the 'mkdirp' module and uses its sync method, returning the first created directory's path immediately. The created path is logged to the console for verification. Required: 'mkdirp' npm package. Input: directory path as a string. Output: first created directory path or undefined if all directories already exist. Use in synchronous scenarios or where callbacks/promises are not suitable.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
```js\nconst mkdirp = require('mkdirp')\n\n// return value is the first directory created\nconst made = mkdirp.sync('/tmp/foo/bar/baz')\nconsole.log(`made directories, starting with ${made}`)\n```
```

----------------------------------------

TITLE: Bundling Dependencies with bundleDependencies
DESCRIPTION: Shows how to specify packages to be bundled when publishing a package. This is useful for preserving npm packages locally or making them available through a single file download.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_25

LANGUAGE: json
CODE:
```
{
  "name": "@npm/awesome-web-framework",
  "version": "1.0.0",
  "bundleDependencies": [
    "@npm/renderized",
    "@npm/super-streams"
  ]
}
```

----------------------------------------

TITLE: Testing Step Operations in Async Functions with Promises
DESCRIPTION: This code snippet is part of a test suite for debugging async functions. It defines an async function 'foo' that returns a promise, and includes debugger breakpoints to test various stepping operations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-out-async-await-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
      p.then(() => 1);
      debugger;
      return p;

      debugger;
      return p;
    }

      debugger;
      return p;
    }

    await foo();
```

----------------------------------------

TITLE: Testing Arithmetic Operations with Infinity in JavaScript
DESCRIPTION: This snippet tests arithmetic operations involving infinity. It shows how JavaScript handles calculations with infinity, including special cases like multiplying zero by infinity.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-transforms-expected.txt#2025-04-23_snippet_7

LANGUAGE: JavaScript
CODE:
```
values.zero * +values.infinity
values.zero / +values.infinity
values.zero - +values.infinity
values.zero * +values.minusInfinity
values.zero / +values.minusInfinity
```

----------------------------------------

TITLE: Creating Package Manager Functions in Windows PowerShell
DESCRIPTION: PowerShell commands to create functions that invoke package managers through Corepack, equivalent to shell aliases for Windows environments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/corepack/README.md#2025-04-23_snippet_7

LANGUAGE: powershell
CODE:
```
echo "function yarn { corepack yarn `$args }" >> $PROFILE
echo "function yarnpkg { corepack yarnpkg `$args }" >> $PROFILE
echo "function pnpm { corepack pnpm `$args }" >> $PROFILE
echo "function pnpx { corepack pnpx `$args }" >> $PROFILE
echo "function npm { corepack npm `$args }" >> $PROFILE
echo "function npx { corepack npx `$args }" >> $PROFILE
```

----------------------------------------

TITLE: Rewording Git Commit Messages
DESCRIPTION: Example demonstrating how to use git reword to modify commit messages while maintaining the commit structure.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/collaborator-guide.md#2025-04-23_snippet_9

LANGUAGE: text
CODE:
```
reword 6928fc1 crypto: add feature A
fixup 8120c4c add test for feature A
reword 51759dc crypto: feature B
fixup 7d6f433 test for feature B
```

----------------------------------------

TITLE: Exporting Keying Material using tlsSocket.exportKeyingMaterial in JavaScript
DESCRIPTION: Demonstrates how to use the `tlsSocket.exportKeyingMaterial` method in Node.js to retrieve a specified number of bytes of keying material. This is used for validations in network protocols (e.g., IEEE 802.1X). Requires an active `tls.TLSSocket` instance. Parameters include `length` (number of bytes), `label` (string, typically from IANA Exporter Label Registry), and optional `context` (Buffer). Returns a Buffer containing the requested keying material.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
```js
const keyingMaterial = tlsSocket.exportKeyingMaterial(
  128,
  'client finished');

/*
 Example return value of keyingMaterial:
 <Buffer 76 26 af 99 c5 56 8e 42 09 91 ef 9f 93 cb ad 6c 7b 65 f8 53 f1 d8 d9
    12 5a 33 b8 b5 25 df 7b 37 9f e0 e2 4f b8 67 83 a3 2f cd 5d 41 42 4c 91
    74 ef 2c ... 78 more bytes>
*/
```
```

----------------------------------------

TITLE: Using cjs-module-lexer in CommonJS Environment
DESCRIPTION: Example of using the lexer in a CommonJS environment to parse module exports. It demonstrates detection of named exports, reexports, and property assignments, returning arrays of detected export names and reexport paths.
SOURCE: https://github.com/nodejs/node/blob/main/deps/cjs-module-lexer/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const { parse } = require('cjs-module-lexer');

// `init` return a promise for parity with the ESM API, but you do not have to call it

const { exports, reexports } = parse(`
  // named exports detection
  module.exports.a = 'a';
  (function () {
    exports.b = 'b';
  })();
  Object.defineProperty(exports, 'c', { value: 'c' });
  /* exports.d = 'not detected'; */

  // reexports detection
  if (maybe) module.exports = require('./dep1.js');
  if (another) module.exports = require('./dep2.js');

  // literal exports assignments
  module.exports = { a, b: c, d, 'e': f }

  // __esModule detection
  Object.defineProperty(module.exports, '__esModule', { value: true })
`);

// exports === ['a', 'b', 'c', '__esModule']
// reexports === ['./dep1.js', './dep2.js']
```

----------------------------------------

TITLE: Evaluating Object Literals with Preview Generation
DESCRIPTION: Response format when evaluating an object literal with generatePreview set to true. Shows the object's structure with property metadata including name, type, and value.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_68

LANGUAGE: json
CODE:
```
{
    className : Object
    description : Object
    objectId : <objectId>
    preview : {
        description : Object
        overflow : true
        properties : [
            [0] : {
                name : a1
                type : number
                value : 1
            }
            [1] : {
                name : a2
                type : number
                value : 2
            }
            [2] : {
                name : a3
                type : number
                value : 3
            }
            [3] : {
                name : a4
                type : number
                value : 4
            }
            [4] : {
                name : a5
                type : number
                value : 5
            }
        ]
        type : object
    }
    type : object
}
```

----------------------------------------

TITLE: Unsubscribing from Diagnostics Channel Events - Node.js (ESM)
DESCRIPTION: Illustrates how to unsubscribe a previously registered message handler using ES Module syntax. Depends on 'node:diagnostics_channel' and works from Node.js v14.17.0. Subscribes to a channel with a named callback and then removes it with unsubscribe, which returns a boolean indicating success. Deprecated in favor of diagnostics_channel.unsubscribe(name, onMessage).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_20

LANGUAGE: JavaScript (ESM)
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nfunction onMessage(message, name) {\n  // Received data\n}\n\nchannel.subscribe(onMessage);\n\nchannel.unsubscribe(onMessage);
```

----------------------------------------

TITLE: Testing Entries in Map and Set Objects in JavaScript
DESCRIPTION: This snippet examines the entries and size properties of Map, Set, WeakMap, and WeakSet objects, including their internal [[Entries]] representation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/object-preview-internal-properties-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
new Map([[1,2]])
new Set([1])
new WeakMap([[{}, 42]])
new WeakSet([{}])
```

----------------------------------------

TITLE: Testing String Concatenation with Function Return in JavaScript
DESCRIPTION: This code snippet tests the string coercion of a function's return value when concatenated with an empty string. The function foo() returns a value that, when coerced to a string via concatenation with an empty string, results in "42".
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-resolve-global-specific-dictionary-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
"" + foo()
```

----------------------------------------

TITLE: Using Abbreviated Options with nopt via Command Line
DESCRIPTION: Demonstrates invoking a Node.js program ('program.js') using abbreviated command-line options, a feature supported by 'nopt'. Examples show using prefixes like '--foolhar' and '--pil', as well as negated abbreviations like '--no-f', which 'nopt' resolves to the full option names ('foolhardyelephants', 'pileofmonkeys') defined in the script.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/nopt/README.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
node program.js --foolhar --pil
node program.js --no-f --pileofmon
# etc.
```

----------------------------------------

TITLE: Adding navigator.userAgent to Node.js global object
DESCRIPTION: This minor semver change adds the navigator.userAgent property to the Node.js global object, providing a way to access user agent information in Node.js environments.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_24

LANGUAGE: JavaScript
CODE:
```
console.log(navigator.userAgent);
```

----------------------------------------

TITLE: Getting JavaScript Null Object in Node-API
DESCRIPTION: Function to retrieve the JavaScript null object singleton.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_125

LANGUAGE: c
CODE:
```
napi_status napi_get_null(napi_env env, napi_value* result)
```

----------------------------------------

TITLE: Storing Options as Properties in Commander.js
DESCRIPTION: Demonstrates how to revert to the old behavior of storing option values as properties on the command for legacy code.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_38

LANGUAGE: javascript
CODE:
```
program
  .storeOptionsAsProperties()
  .option('-d, --debug')
  .action((commandAndOptions) => {
    if (commandAndOptions.debug) {
      console.error(`Called ${commandAndOptions.name()}`);
    }
  });
```

----------------------------------------

TITLE: Setting Indexed Properties in JavaScript and Node-API
DESCRIPTION: Shows how to create an array and set an indexed property in both JavaScript and Node-API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_144

LANGUAGE: javascript
CODE:
```
const arr = [];
arr[123] = 'hello';
```

LANGUAGE: c
CODE:
```
napi_status status = napi_generic_failure;

// const arr = [];
napi_value arr, value;
status = napi_create_array(env, &arr);
if (status != napi_ok) return status;

// Create a napi_value for 'hello'
status = napi_create_string_utf8(env, "hello", NAPI_AUTO_LENGTH, &value);
if (status != napi_ok) return status;

// arr[123] = 'hello';
status = napi_set_element(env, arr, 123, value);
if (status != napi_ok) return status;
```

----------------------------------------

TITLE: Whitespace Semantics Around Selector Nodes in CSS
DESCRIPTION: Shows how whitespace before and after selector nodes is preserved in node.spaces.before and node.spaces.after. Demonstrates with sample CSS, highlighting how commas and spaces between selectors are handled in the AST.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_23

LANGUAGE: css
CODE:
```
      h1     ,     h2   {}
```

----------------------------------------

TITLE: Adding Node.js Upstream Remote in Git (Shell)
DESCRIPTION: Adds the canonical Node.js repository (git@github.com:nodejs/node.git) as a Git remote named 'upstream'. This setup step is necessary for collaborators to fetch changes directly from the main project repository into their local clone or fork.
SOURCE: https://github.com/nodejs/node/blob/main/onboarding.md#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
git remote add upstream git@github.com:nodejs/node.git
```

----------------------------------------

TITLE: Using SQLite Aggregate Functions in ESM
DESCRIPTION: Demonstrates how to register and use a custom aggregate function with a SQLite database in ESM format. This example creates a 'sumint' function to calculate the total sum of values in a column.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/sqlite.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import { DatabaseSync } from 'node:sqlite';

const db = new DatabaseSync(':memory:');
db.exec(`
  CREATE TABLE t3(x, y);
  INSERT INTO t3 VALUES ('a', 4),
                        ('b', 5),
                        ('c', 3),
                        ('d', 8),
                        ('e', 1);
`);

db.aggregate('sumint', {
  start: 0,
  step: (acc, value) => acc + value,
});

db.prepare('SELECT sumint(y) as total FROM t3').get(); // { total: 21 }
```

----------------------------------------

TITLE: Configuring 'install-links' Behavior for File Dependencies in npm
DESCRIPTION: Explains the `--install-links` flag (Boolean, default: false). When set to true, dependencies specified with the `file:` protocol are packed and installed like regular package dependencies instead of being symlinked. This option specifically affects `file:` dependencies and does not change how workspaces are handled or linked.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_23

LANGUAGE: text
CODE:
```
#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink. This option has no effect on
workspaces.
```

----------------------------------------

TITLE: Getting Status Name from llhttp Status Code (C)
DESCRIPTION: Returns a constant string representing the textual name (e.g., "OK", "Not Found") of a given HTTP status code (`llhttp_status_t`). Useful for logging or processing based on the response status.
SOURCE: https://github.com/nodejs/node/blob/main/deps/llhttp/README.md#2025-04-23_snippet_5

LANGUAGE: c
CODE:
```
const char* llhttp_status_name(llhttp_status_t status)
```

----------------------------------------

TITLE: Dry run audit with JSON output
DESCRIPTION: Command to perform a dry run of audit fix to preview changes without applying them, with output in JSON format for easier parsing.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
$ npm audit fix --dry-run --json
```

----------------------------------------

TITLE: Testing Array Manipulation in JavaScript
DESCRIPTION: This snippet tests array manipulation, including setting values, changing length, and error handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/kde/Array-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
PASS var a = []; a[0] = 33; a[0] is 33
PASS var a = []; a[0] = 33; a.length is 1
PASS var a = [11, 22]; a.length = 1; String(a); is '11'
PASS var a = [11, 22]; a.length = 1; a.length; is 1
PASS caught; is true
PASS ename is 'RangeError'
PASS caught; is true
PASS ename is 'RangeError'
PASS var a = [11, 22]; a.length = 1; a[1]; is undefined.
```

----------------------------------------

TITLE: Configuring Help Display After Errors in Commander.js
DESCRIPTION: Demonstrates how to change the behavior to show full help or a custom help message after a usage error.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_26

LANGUAGE: javascript
CODE:
```
program.showHelpAfterError();
// or
program.showHelpAfterError('(add --help for additional information)');
```

----------------------------------------

TITLE: Injecting SEA Blob on macOS with Postject
DESCRIPTION: Uses the postject utility to inject the preparation blob into the copied Node.js executable on macOS with the required sentinel fuse and Mach-O segment name.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
npx postject hello NODE_SEA_BLOB sea-prep.blob \
    --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2 \
    --macho-segment-name NODE_SEA
```

----------------------------------------

TITLE: console.table Output for Array of Objects (Partial Preview) (JSON-like)
DESCRIPTION: Displays the `console.table` output for an array of 'Person' objects where the preview for each object only includes the 'firstName' property. This suggests a potential column selection was used when calling `console.table`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-table-expected.txt#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
    description : Array(3)
    overflow : false
    properties : [
        [0] : {
            name : 0
            type : object
            value : Person
            valuePreview : {
                description : Person
                overflow : false
                properties : [
                    [0] : {
                        name : firstName
                        type : string
                        value : John
                    }
                ]
                type : object
            }
        }
        [1] : {
            name : 1
            type : object
            value : Person
            valuePreview : {
                description : Person
                overflow : false
                properties : [
                    [0] : {
                        name : firstName
                        type : string
                        value : Jane
                    }
                ]
                type : object
            }
        }
        [2] : {
            name : 2
            type : object
            value : Person
            valuePreview : {
                description : Person
                overflow : false
                properties : [
                    [0] : {
                        name : firstName
                        type : string
                        value : Emily
                    }
                ]
                type : object
            }
        }
    ]
    subtype : array
    type : object
}
```

----------------------------------------

TITLE: Adding an upstream to BalancedPool in Node.js Undici
DESCRIPTION: Method to add a new upstream connection to the BalancedPool. The upstream parameter should be a string that includes only the protocol, hostname, and port.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/BalancedPool.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
### `BalancedPool.addUpstream(upstream)`

Add an upstream.

Arguments:

* **upstream** `string` - It should only include the **protocol, hostname, and port**.
```

----------------------------------------

TITLE: Compiling JavaScript Script with Syntax Error using Node.js Runtime.compileScript - JSON
DESCRIPTION: This snippet represents the JSON output for attempting to compile a JavaScript file ('foo1.js') that contains a syntax error using the Node.js Runtime.compileScript API. The compilation fails, resulting in an exceptionDetails object describing a SyntaxError, including metadata like line and column numbers, scriptId, and error text. Returned properties track the error's origin and provide a structured error report suitable for debugging purposes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/compile-script-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        exceptionDetails : {
            columnNumber : 3
            exception : {
                className : SyntaxError
                description : SyntaxError: Unexpected end of input
                objectId : <objectId>
                subtype : error
                type : object
            }
            exceptionId : <exceptionId>
            lineNumber : 1
            scriptId : <scriptId>
            text : Uncaught
        }
    }
}
```

----------------------------------------

TITLE: Requiring Deprecated Module (CommonJS) - JavaScript
DESCRIPTION: A simple example using CommonJS syntax to require the deprecated `node:sys` module. This code is used in the documentation to illustrate how the `--disable-warning` flag can selectively suppress deprecation warnings by code or type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_17

LANGUAGE: cjs
CODE:
```
const sys = require('node:sys');
```

----------------------------------------

TITLE: Checking if ArrayBuffer is Detached with napi_is_detached_arraybuffer in C
DESCRIPTION: This function checks if an ArrayBuffer is detached (has its internal data set to null). It returns the result as a boolean, indicating whether the given ArrayBuffer has been detached.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_142

LANGUAGE: c
CODE:
```
napi_status napi_is_detached_arraybuffer(napi_env env,
                                         napi_value arraybuffer,
                                         bool* result)
```

----------------------------------------

TITLE: Accessing Node by Index in Selector container using at() in JavaScript
DESCRIPTION: Uses selector.at(index) to get nodes by integer position, demonstrating equivalence with indexed access of selector.nodes. Useful for programmatically navigating or manipulating child nodes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_29

LANGUAGE: javascript
CODE:
```
selector.at(0) === selector.first;
selector.at(0) === selector.nodes[0];
```

----------------------------------------

TITLE: Testing Property Deletion on String Objects - JavaScript
DESCRIPTION: This snippet is a behavioral test for the delete operator on JavaScript string objects, examining both built-in and custom properties. No external dependencies are required, and core JavaScript is sufficient. The test checks the outcomes of deleting indexed, floating-point, string, and arbitrary properties from a string object, producing 'PASS' statements when expected results are obtained. Key parameters include various forms of property access; results show that built-in properties like length and standard indices cannot be deleted, while custom or out-of-bounds properties can be. The output consists of PASS statements for each successful assertion, ending with 'TEST COMPLETE'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/string-property-deletion-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
# This page tests deletion of properties on a string object.
#
# On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS str.length is 3
PASS delete str.length is false
PASS delete str[0] is false
PASS delete str[1] is false
PASS delete str[2] is false
PASS delete str[3] is true
PASS delete str[-1] is true
PASS delete str[4294967294] is true
PASS delete str[4294967295] is true
PASS delete str[4294967296] is true
PASS delete str[0.0] is false
PASS delete str[0.1] is true
PASS delete str['0.0'] is true
PASS delete str.foo is true
PASS successfullyParsed is true

TEST COMPLETE
```

----------------------------------------

TITLE: Testing Infinity and NaN Handling
DESCRIPTION: Tests handling of special numeric values including Infinity, -Infinity, and NaN conversions
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/numeric-conversion-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
(- 'infinity').toString()
parseInt(NaN)
parseInt(-Infinity)
parseInt(Infinity)
parseInt(-0.6).toString()
```

----------------------------------------

TITLE: Debugger Output for 'this' Evaluation in Class Method Context
DESCRIPTION: Shows the JSON output structure returned by the Node.js debugger when evaluating 'this' while paused in a class method. The response includes the class name, description, object ID, and type properties.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-callframe-this-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    className : A
    description : A
    objectId : <objectId>
    type : object
}
```

----------------------------------------

TITLE: Checking Final Boolean Variable in JavaScript Test
DESCRIPTION: Represents a final assertion in a test sequence, checking if a boolean variable named `successfullyParsed` evaluates to `true`. This likely indicates that prerequisite steps or parsing operations within the test completed without errors.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-transforms-expected.txt#2025-04-23_snippet_21

LANGUAGE: text
CODE:
```
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Debugger output showing private field access
DESCRIPTION: Shows the output of evaluating a private class member 'obj.#field' from the debugger. The result demonstrates that the debugger can access the private field value, which would normally be inaccessible from outside the class.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-private-class-member-in-module-expected.txt#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
    description : 1
    type : number
    value : 1
}
```

----------------------------------------

TITLE: Basic ProxyAgent Initialization in Node.js
DESCRIPTION: Shows different ways to initialize a ProxyAgent instance using string URI, URL object, or configuration object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/ProxyAgent.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { ProxyAgent } from 'undici'

const proxyAgent = new ProxyAgent('my.proxy.server')
// or
const proxyAgent = new ProxyAgent(new URL('my.proxy.server'))
// or
const proxyAgent = new ProxyAgent({ uri: 'my.proxy.server' })
// or
const proxyAgent = new ProxyAgent({
  uri: new URL('my.proxy.server'),
  proxyTls: {
    signal: AbortSignal.timeout(1000)
  }
})
```

----------------------------------------

TITLE: Testing Array.prototype.filter with decreaseLength callback
DESCRIPTION: This snippet tests the filter method on various array types using a decreaseLength callback. It checks the behavior on both direct array instances and object-converted arrays.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-enumerators-functions-expected.txt#2025-04-23_snippet_17

LANGUAGE: JavaScript
CODE:
```
count=0;lastIndex=-1;copyArray(simpleArray).filter(forwarders[f], decreaseLength, 0); count is 3
```

----------------------------------------

TITLE: CMake Initial Configuration and Project Setup
DESCRIPTION: Sets up initial CMake configuration including minimum version requirements, project name, and basic build settings. Configures output directories and compiler extension behaviors.
SOURCE: https://github.com/nodejs/node/blob/main/tools/gyp/test/fixtures/expected-linux/cmake/CMakeLists.txt#2025-04-23_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 2.8.8 FATAL_ERROR)
cmake_policy(VERSION 2.8.8)
project(test)
set(configuration "Default")
enable_language(ASM)
set(builddir "${CMAKE_CURRENT_BINARY_DIR}")
set(obj "${builddir}/obj")

set(CMAKE_C_OUTPUT_EXTENSION_REPLACE 1)
set(CMAKE_CXX_OUTPUT_EXTENSION_REPLACE 1)

set(CMAKE_NINJA_FORCE_RESPONSE_FILE 1)
```

----------------------------------------

TITLE: Output: console.error with %s formatter and string
DESCRIPTION: Shows the structured argument list captured when calling `console.error('%s', 'Test string')`. The string 'Test string' is passed directly to the %s formatter.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-formatter-expected.txt#2025-04-23_snippet_13

LANGUAGE: text
CODE:
```
error[
    [0] : {
        type : string
        value : %s
    }
    [1] : {
        type : string
        value : Test string
    }
]
```

----------------------------------------

TITLE: Using stream.compose() for Stream Composition
DESCRIPTION: Shows how to use stream.compose() to combine multiple streams into a Duplex stream and chain transformations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_60

LANGUAGE: javascript
CODE:
```
import { compose, Transform } from 'node:stream';

const removeSpaces = new Transform({
  transform(chunk, encoding, callback) {
    callback(null, String(chunk).replace(' ', ''));
  },
});

async function* toUpper(source) {
  for await (const chunk of source) {
    yield String(chunk).toUpperCase();
  }
}

let res = '';
for await (const buf of compose(removeSpaces, toUpper).end('hello world')) {
  res += buf;
}

console.log(res); // prints 'HELLOWORLD'
```

----------------------------------------

TITLE: V8 Main Execution Call Stack
DESCRIPTION: Stack trace showing the execution flow from main() through V8's shell execution and script running mechanisms.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/tools/testrunner/testproc/stack_utils/testdata/custom_analyzer/data_race_5.txt#2025-04-23_snippet_0

LANGUAGE: cpp
CODE:
```
v8::Shell::Main(int, char**)
v8::Shell::RunMain(v8::Isolate*, bool)
v8::SourceGroup::Execute(v8::Isolate*)
v8::Shell::ExecuteString(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)
v8::Script::Run(v8::Local<v8::Context>)
```

----------------------------------------

TITLE: Terminating Evaluation with Compiled Injected-Script-Source in Node.js
DESCRIPTION: This snippet shows the response format when terminating an evaluation where the injected-script-source is already compiled. It includes both the successful termination and the error response.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/terminate-execution-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
{
    id : <messageId>
    result : {
    }
}
{
    error : {
        code : -32000
        message : Execution was terminated
    }
    id : <messageId>
}
```

----------------------------------------

TITLE: Writing Diagnostic Message - Node.js Test - js
DESCRIPTION: Shows how to use `t.diagnostic` to output a message during test execution. These messages are collected and displayed at the end of the test's results, useful for debugging or providing context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_69

LANGUAGE: js
CODE:
```
test('top level test', (t) => {
  t.diagnostic('A diagnostic message');
});
```

----------------------------------------

TITLE: Setting Debugger Positions in Node.js
DESCRIPTION: Attempts to set debugger positions with invalid inputs, demonstrating error handling for unsorted, duplicate, or invalid position values.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/stepping-with-blackboxed-ranges-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
Try to set positions: [{"lineNumber":0,"columnNumber":0},{"lineNumber":0,"columnNumber":0}]
Input positions array is not sorted or contains duplicate values.
Try to set positions: [{"lineNumber":0,"columnNumber":1},{"lineNumber":0,"columnNumber":0}]
Input positions array is not sorted or contains duplicate values.
Try to set positions: [{"lineNumber":0,"columnNumber":-1}]
Position missing 'column' or 'column' < 0.
```

----------------------------------------

TITLE: Conditional Library Configuration with Text::Template in OpenSSL build.info
DESCRIPTION: Demonstrates conditional configuration based on template variables using Text::Template in build.info files. The example conditionally configures libraries based on whether shared libraries are disabled.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/Configurations/README.md#2025-04-23_snippet_13

LANGUAGE: Makefile
CODE:
```
IF[{- $disabled{shared} -}]
  LIBS=libcrypto
  SOURCE[libcrypto]=...
ELSE
  LIBS=libfoo
  SOURCE[libfoo]=...
ENDIF
```

----------------------------------------

TITLE: Rejecting a Value with Promise - JavaScript
DESCRIPTION: Creates a Promise that rejects immediately with value 42, leveraging Promise.reject to test rejected state and node preview. Input: none; Output: rejected Promise object. Use for error propagation and rejection inspection tests.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_38

LANGUAGE: JavaScript
CODE:
```
Promise.reject(42)
```

----------------------------------------

TITLE: Testing Deep Serialization of Small BigInt via CDP Runtime Methods in JavaScript
DESCRIPTION: Tests the serialization of the BigInt value `123n` using `Runtime.evaluate` and `Runtime.callFunctionOn`. Both methods are expected to return a remote object representation with type 'bigint' and a string value '123'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/deep-serialization-value-expected.txt#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
123n
```

----------------------------------------

TITLE: Testing Intl.getCanonicalLocales - JavaScript
DESCRIPTION: Provides a simple test call for Intl.getCanonicalLocales to check canonicalization of locale identifiers. No external dependencies beyond ECMAScript Intl support; takes a locale string input and returns a canonicalized string list.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-without-side-effects-i18n-expected.txt#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
Intl.getCanonicalLocales("en-US")
```

----------------------------------------

TITLE: Testing Number.toString() with Large Integers
DESCRIPTION: Tests the toString() method with MAX_SAFE_INTEGER (9007199254740992) and similar large numbers in different bases including binary, decimal and base-36
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/toString-number-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
Number(9007199254740992).toString();
Number(9007199254740992).toString(2);
Number(9007199254740992).toString(36);
```

----------------------------------------

TITLE: Configuring Project Package Manager with URL in package.json
DESCRIPTION: JSON configuration demonstrating how to specify a package manager using a URL to a .js file or .tgz archive with hash validation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/corepack/README.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "packageManager": "yarn@https://registry.npmjs.org/@yarnpkg/cli-dist/-/cli-dist-3.2.3.tgz#sha224.16a0797d1710d1fb7ec40ab5c3801b68370a612a9b66ba117ad9924b"
}
```

----------------------------------------

TITLE: Implementing Asynchronous getaddrinfo in C with libuv
DESCRIPTION: Implements an asynchronous version of getaddrinfo. It takes a loop, request object, callback, node, service, and hints. Returns 0 on success or an error code < 0 on failure.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/dns.rst#2025-04-23_snippet_4

LANGUAGE: c
CODE:
```
int uv_getaddrinfo(uv_loop_t* loop, uv_getaddrinfo_t* req, uv_getaddrinfo_cb getaddrinfo_cb, const char* node, const char* service, const struct addrinfo* hints)
```

----------------------------------------

TITLE: Testing Breakpoint Clearing in Node.js Debugger
DESCRIPTION: This code snippet defines a function 'foo' and calls it, followed by a debugger statement. It's used to test if breakpoints are properly cleared when the debugging agent is disabled in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/clear-breakpoints-on-disable-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
function foo() {#}

foo();#debugger;
```

----------------------------------------

TITLE: Resolving a Value with Promise - JavaScript
DESCRIPTION: Creates a Promise that resolves immediately with value 42. Tests Promise.resolve and internal description handling. Input: none; Output: fulfilled Promise. Useful for verifying Promise instantiation and result state propagation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_37

LANGUAGE: JavaScript
CODE:
```
Promise.resolve(42)
```

----------------------------------------

TITLE: Using One-Based Prerelease Identifiers with CLI
DESCRIPTION: Demonstrates the command-line equivalent for creating a one-based prerelease version. The `-n 1` flag specifies the base for the prerelease identifier, resulting in `1.2.4-beta.1`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
$ semver 1.2.3 -i prerelease --preid beta -n 1
1.2.4-beta.1
```

----------------------------------------

TITLE: Checking Hostnames with x509.checkHost Method in Node.js
DESCRIPTION: Validates whether a certificate matches a given hostname. Supports various options for controlling wildcard behavior and subject name checking. Returns the matching subject name or undefined.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_47

LANGUAGE: javascript
CODE:
```
x509.checkHost(name[, options])
```

----------------------------------------

TITLE: Evaluating Array Literals with Preview Generation
DESCRIPTION: Response format for evaluating an array [1,2,3] with generatePreview enabled. The response includes a preview of the array's contents, showing each element with its index, type, and value.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_69

LANGUAGE: javascript
CODE:
```
'([1,2,3])', returnByValue: false, generatePreview: true
```

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            className : Array
            description : Array(3)
            objectId : <objectId>
            preview : {
                description : Array(3)
                overflow : false
                properties : [
                    [0] : {
                        name : 0
                        type : number
                        value : 1
                    }
                    [1] : {
                        name : 1
                        type : number
                        value : 2
                    }
                    [2] : {
                        name : 2
                        type : number
                        value : 3
                    }
                ]
                subtype : array
                type : object
            }
            subtype : array
            type : object
        }
    }
}
```

----------------------------------------

TITLE: Sorting ['close', 'closed'] Lexicographically in JavaScript
DESCRIPTION: This snippet tests the default `sort()` method on an array containing 'close' and 'closed'. It converts the sorted array to a string and expects the result 'close,closed', following standard lexicographical order.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/string-sort-expected.txt#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
["close","closed"].sort().toString()
```

----------------------------------------

TITLE: Creating Optimized UTF8 Property Keys in N-API
DESCRIPTION: Function that creates an optimized JavaScript string from a UTF8-encoded C string to be used as a property key for objects. The native string is copied and optimized for property access.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_103

LANGUAGE: c
CODE:
```
napi_status NAPI_CDECL node_api_create_property_key_utf8(napi_env env,
                                                         const char* str,
                                                         size_t length,
                                                         napi_value* result);
```

----------------------------------------

TITLE: Declaring uv_metrics_idle_time Function in C for libuv
DESCRIPTION: Declares the uv_metrics_idle_time function used to retrieve the amount of time the event loop has been idle in the kernel's event provider. It takes a uv_loop_t pointer as an argument and returns a uint64_t value.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/metrics.rst#2025-04-23_snippet_1

LANGUAGE: c
CODE:
```
uint64_t uv_metrics_idle_time(uv_loop_t* loop)
```

----------------------------------------

TITLE: Verifying Server Identity in TLS Connections for Node.js
DESCRIPTION: The tls.checkServerIdentity() function verifies if a certificate is issued to a specific hostname. It takes a hostname and a certificate object as parameters, returning an Error object on failure or undefined on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
tls.checkServerIdentity(hostname, cert)
```

----------------------------------------

TITLE: Implementing Basic Web Worker Messaging in JavaScript
DESCRIPTION: A simple web worker implementation that receives messages, responds with 'DONE', and announces its startup. This worker script handles the basic messaging patterns required for worker communication in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/mjsunit/d8/d8-worker-script.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
onmessage = function({data:m}) {
  postMessage('DONE');
}

postMessage('Starting worker');
```

----------------------------------------

TITLE: Simple Async Function in JavaScript Debugger
DESCRIPTION: Defines a simple async function that awaits a resolved promise. The |_| marker indicates a statement location, |C| for method call, and |R| marks the return position.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/get-possible-breakpoints-main-expected.txt#2025-04-23_snippet_32

LANGUAGE: javascript
CODE:
```
async function asyncBoo() {
  |_|await Promise.|C|resolve();
|R|}
```

----------------------------------------

TITLE: Defining Node.js Error ERR_STREAM_READ_NOT_IMPLEMENTED (Text)
DESCRIPTION: Used when an attempt is made to use a readable stream that has not implemented the `readable._read()` method. This error was added in v9.0.0 and removed in v10.0.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_30

LANGUAGE: text
CODE:
```
ERR_STREAM_READ_NOT_IMPLEMENTED
```

----------------------------------------

TITLE: Defining log_structured library in CMake
DESCRIPTION: Configures the log_structured library with its headers, compiler options, linker options, and dependencies. This library provides structured logging functionality.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/third_party/abseil-cpp/absl/log/CMakeLists.txt#2025-04-23_snippet_10

LANGUAGE: CMake
CODE:
```
absl_cc_library(
  NAME
    log_structured
  HDRS
    "structured.h"
  COPTS
    ${ABSL_DEFAULT_COPTS}
  LINKOPTS
    ${ABSL_DEFAULT_LINKOPTS}
  DEPS
    absl::config
    absl::log_internal_structured
    absl::strings
  PUBLIC
)
```

----------------------------------------

TITLE: Accessing Source Map URL from VM Script (JavaScript - ESM)
DESCRIPTION: This snippet demonstrates how to access the sourceMapURL property of a VM Script when it's compiled from a source containing a source map magic comment.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/vm.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
import vm from 'node:vm';

const script = new vm.Script(`
function myFunc() {}
//# sourceMappingURL=sourcemap.json
`);

console.log(script.sourceMapURL);
// Prints: sourcemap.json
```

----------------------------------------

TITLE: Example 2: Selective Test Target Build Configuration
DESCRIPTION: Demonstrates configuring a build with specific test targets and additional compile targets. Shows how to build wtf_unittests while including blink_tests dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/tools/mb/docs/design_spec.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "files": ["WebNode.cpp"],
  "test_targets": ["wtf_unittests"],
  "additional_compile_targets": ["blink_tests"]
}
```

LANGUAGE: json
CODE:
```
{
  "status": "Found dependency",
  "compile_targets": ["webkit_unit_tests"],
  "test_targets": []
}
```

----------------------------------------

TITLE: Implementing a Readable Stream with Pre-ES6 Style - Node.js
DESCRIPTION: This snippet demonstrates how to create a custom Readable stream using pre-ES6 style constructors. It uses the util.inherits method for inheritance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_82

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');
const util = require('node:util');

function MyReadable(options) {
  if (!(this instanceof MyReadable))
    return new MyReadable(options);
  Readable.call(this, options);
}
util.inherits(MyReadable, Readable);
```

----------------------------------------

TITLE: Creating One-Time HTTP Agent in Node.js
DESCRIPTION: Shows how to create a one-time use HTTP agent with default options for a single client connection by setting the agent option to false in http.get() or http.request().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
http.get({
  hostname: 'localhost',
  port: 80,
  path: '/',
  agent: false,  // Create a new agent just for this one request
}, (res) => {
  // Do stuff with response
});
```

----------------------------------------

TITLE: Process Environment Object Example
DESCRIPTION: Shows the structure of process.env object containing user environment variables.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_39

LANGUAGE: javascript
CODE:
```
{
  TERM: 'xterm-256color',
  SHELL: '/usr/local/bin/bash',
  USER: 'maciej',
  PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',
  PWD: '/Users/maciej',
  EDITOR: 'vim',
  SHLVL: '1',
  HOME: '/Users/maciej',
  LOGNAME: 'maciej',
  _: '/usr/local/bin/node'
}
```

----------------------------------------

TITLE: Step Into in Simple Calls Test - Position 1
DESCRIPTION: This snippet shows the initial expected debugger position (#) when using 'step into' before the call to 'b()' in the 'testStepInOutSimple' scenario, landing on the call itself.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-out-expected.txt#_snippet_26

LANGUAGE: javascript
CODE:
```
function a() { #b(); c(); }
function b() { c(); }
```

----------------------------------------

TITLE: Initializing Pool Instance with URL and Options
DESCRIPTION: Creates a new Pool instance that manages multiple Client connections. Takes a URL parameter that should include protocol, hostname, and port, along with optional PoolOptions configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Pool.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
new Pool(url[, options])
```

----------------------------------------

TITLE: Testing Boolean Operations in JavaScript
DESCRIPTION: This code snippet includes a series of tests for Boolean operations in JavaScript. It checks the behavior of Boolean constructor, Boolean object methods, and primitive boolean operations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/kde/Boolean-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS Boolean() is false
PASS Boolean(true) is true
PASS Boolean(false) is false
PASS (new Boolean(true)).valueOf() is true
PASS (new Boolean(false)).valueOf() is false
PASS (new Boolean(Boolean(true))).valueOf() is true
PASS true.valueOf() === true is true
PASS false.toString() === 'false' is true
PASS successfullyParsed is true
```

----------------------------------------

TITLE: Defining Request Types Enum in libuv
DESCRIPTION: Enumeration defining the different types of requests supported by libuv. Includes common request types like connect, write, shutdown, and file system operations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/request.rst#2025-04-23_snippet_0

LANGUAGE: c
CODE:
```
typedef enum {
    UV_UNKNOWN_REQ = 0,
    UV_REQ,
    UV_CONNECT,
    UV_WRITE,
    UV_SHUTDOWN,
    UV_UDP_SEND,
    UV_FS,
    UV_WORK,
    UV_GETADDRINFO,
    UV_GETNAMEINFO,
    UV_REQ_TYPE_MAX,
} uv_req_type;
```

----------------------------------------

TITLE: Node-API Key Filter Enumeration
DESCRIPTION: Enumeration defining filters for key collection in Node-API, allowing selection of properties based on their attributes and types.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_70

LANGUAGE: c
CODE:
```
typedef enum {
  napi_key_all_properties = 0,
  napi_key_writable = 1,
  napi_key_enumerable = 1 << 1,
  napi_key_configurable = 1 << 2,
  napi_key_skip_strings = 1 << 3,
  napi_key_skip_symbols = 1 << 4
} napi_key_filter;
```

----------------------------------------

TITLE: Testing RegExp Single Character Matching in JavaScript
DESCRIPTION: This snippet tests if a RegExp with the \w character class and apostrophe correctly matches a string containing only those characters. It verifies that the match is executed in the expected order.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/regexp-character-match-out-of-order-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS /[\w']+/.exec("'_'").toString() is "'_'"
```

----------------------------------------

TITLE: Testing Two Similar Lines Close to Original Location (Case 2) in JavaScript
DESCRIPTION: Tests breakpoint restoration when there are multiple similar lines close to the original breakpoint location. This version has the breakpoint after additional code.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/restore-breakpoint-expected.txt#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
function foo() {


#boo();
}
function foo() {
boo();
newLongCode();
newCode();
#boo();



boo();
}
```

----------------------------------------

TITLE: Testing Next Script Parsed Breakpoint Handling in JavaScript
DESCRIPTION: This test case verifies how provisional breakpoints are handled when the next script is parsed. It defines a simple function with a hash symbol that represents a breakpoint location.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/provisional-breakpoint-for-anonymous-script-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
function foo(){#}
```

----------------------------------------

TITLE: Evaluating Static Private Field Access with Runtime.evaluate in JavaScript
DESCRIPTION: Demonstrates using `Runtime.evaluate` to access the static private field `#name` directly on the `StaticClass`. The evaluation succeeds and returns the value 'child' as static private members are accessed on the class itself.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/evaluate-private-class-member-conflict-expected.txt#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
Runtime.evaluate: `StaticClass.#name`
```

LANGUAGE: json
CODE:
```
{
    type : string
    value : child
}
```

----------------------------------------

TITLE: Defining Properties on JavaScript Objects with napi_define_properties in C
DESCRIPTION: Function to efficiently define multiple properties on a given object using an array of property descriptors. It sets properties one at a time as defined by the ECMAScript specification's DefineOwnProperty().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_162

LANGUAGE: c
CODE:
```
napi_status napi_define_properties(napi_env env,
                                   napi_value object,
                                   size_t property_count,
                                   const napi_property_descriptor* properties);
```

----------------------------------------

TITLE: Importing the mkdirp Function in JavaScript
DESCRIPTION: Shows the standard ES Module syntax for importing the `mkdirp` function from the 'mkdirp' module. This is typically done at the beginning of a Node.js script that needs to use the module.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cacache/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
import { mkdirp } from 'mkdirp'
```

----------------------------------------

TITLE: Testing Function Constructor with Incomplete Parentheses in JavaScript
DESCRIPTION: This code snippet tests the Function constructor's ability to detect syntax errors caused by unmatched parentheses. It expects a SyntaxError to be thrown for incomplete parenthetical expressions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/function-constructor-error-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
Function('(i + (j)')
```

LANGUAGE: JavaScript
CODE:
```
Function('return (i + (j)')
```

----------------------------------------

TITLE: Using QuicSession sendDatagram Method in Node.js
DESCRIPTION: Sends an unreliable datagram to a remote peer and returns the datagram ID. When providing an ArrayBufferView, ownership of the view is transferred to the underlying stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/quic.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
session.sendDatagram(datagram)
```

----------------------------------------

TITLE: Normalizing File Paths in Node.js
DESCRIPTION: The path.normalize() method resolves '..' and '.' segments in paths and handles consecutive separators. It returns a normalized string path with platform-appropriate separators.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_32

LANGUAGE: javascript
CODE:
```
path.normalize('/foo/bar//baz/asdf/quux/..');
// Returns: '/foo/bar/baz/asdf'
```

LANGUAGE: javascript
CODE:
```
path.normalize('C:\\temp\\\\foo\\bar\\..\\');
// Returns: 'C:\\temp\\foo\\'
```

LANGUAGE: javascript
CODE:
```
path.win32.normalize('C:////temp\\\/\\/\\/foo/bar');
// Returns: 'C:\\temp\\foo\\bar'
```

----------------------------------------

TITLE: Setting Effective User ID in Node.js (ESM)
DESCRIPTION: Demonstrates using the process.seteuid() method to set the effective user identity of the process in ESM format. This POSIX-only function accepts either a numeric ID or username string and verifies the change after execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_85

LANGUAGE: javascript
CODE:
```
import process from 'node:process';

if (process.geteuid && process.seteuid) {
  console.log(`Current uid: ${process.geteuid()}`);
  try {
    process.seteuid(501);
    console.log(`New uid: ${process.geteuid()}`);
  } catch (err) {
    console.error(`Failed to set uid: ${err}`);
  }
}
```

----------------------------------------

TITLE: Comparing '0' and 'A' Lexicographically in JavaScript
DESCRIPTION: This snippet tests the comparison between the character '0' and 'A'. It expects `"0" < "A"` to be `true` because the digit '0' has a lower code point than the uppercase letter 'A'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/string-sort-expected.txt#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
"0" < "A"
```

----------------------------------------

TITLE: Checking if a Node.js net.Socket is Pending Connection
DESCRIPTION: A boolean property that is `true` if the socket is not yet connected. This can be because `socket.connect()` has not been called, or because the connection process initiated by `socket.connect()` is still ongoing (see `socket.connecting`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
socket.pending
```

----------------------------------------

TITLE: Testing Math.asin() in JavaScript
DESCRIPTION: This snippet tests the Math.asin() method with various inputs including NaN, 0, -0, 1, -1, values outside the valid range, and Infinity.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/math-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
PASS Math.asin(NaN) is NaN
PASS Math.asin(0) is 0
PASS Math.asin(-0) is -0
PASS Math.asin(1) is -Math.asin(-1)
PASS Math.asin(1.1) is NaN
PASS Math.asin(-1.1) is NaN
PASS Math.asin(Infinity) is NaN
PASS Math.asin(-Infinity) is NaN
```

----------------------------------------

TITLE: Command Example with Optional Argument - Shell
DESCRIPTION: An example of how optional arguments are denoted in documentation, using double square brackets. 'options' is a placeholder for optional flags or arguments to the command.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/INSTALL.md#2025-04-23_snippet_11

LANGUAGE: shell
CODE:
```
[[ options ]]
```

----------------------------------------

TITLE: Demonstrating ERR_STREAM_WRAP Error in JavaScript
DESCRIPTION: This code snippet shows how to trigger the ERR_STREAM_WRAP error by setting a string decoder on a Socket instance. This prevents an abort if a string decoder is set on the Socket or if the decoder is in objectMode.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
const Socket = require('node:net').Socket;
const instance = new Socket();

instance.setEncoding('utf8');
```

----------------------------------------

TITLE: Testing ES6 Class Constructor and Method Validation
DESCRIPTION: Test cases that verify constructor behavior, static methods, getters, setters, and prototype functionality in ES6 classes. Includes validation of syntax errors and restrictions on constructor and prototype definitions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/class-syntax-expression-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
class A {
  constructor() {
    constructorCallCount++;
  }
  
  static someStaticMethod() {
    return staticMethodValue;
  }
  
  static get someStaticGetter() {
    return getterValue;
  }
  
  static set someStaticSetter(value) {
    setterValue = value;
  }
  
  someInstanceMethod() {
    return instanceMethodValue;
  }
  
  get someGetter() {
    return getterValue;
  }
  
  set someSetter(value) {
    setterValue = value;
  }
}
```

----------------------------------------

TITLE: Testing Conditional Logic
DESCRIPTION: Test cases for if statements and conditional branching
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
function returnTrue() {
  return true;
}

if (true) a = true;
if (!a) {
  a = true;
} else {
  a = false;
}
```

----------------------------------------

TITLE: Replacing REPLACEME Tags with Version (Perl, Bash)
DESCRIPTION: Provides an alternative method using Perl to perform an in-place replacement (`-pi`) of the `REPLACEME` tag with the Node.js version (`$VERSION`) in API documentation files. The `-e` flag executes the provided substitution command.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/releases.md#_snippet_27

LANGUAGE: bash
CODE:
```
perl -pi -e "s/REPLACEME/$VERSION/g" doc/api/*.md
```

----------------------------------------

TITLE: Synchronous Iteration Method in Glob
DESCRIPTION: Returns a Generator that iterates over the glob results synchronously.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/glob/README.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
g.iterateSync()
```

----------------------------------------

TITLE: Testing Custom Error Usage in Node.js
DESCRIPTION: Shows how to test the usage of custom errors in the codebase, focusing on validating the expected error code rather than the specific error message to reduce test maintenance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/using-internal-errors.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
assert.throws(() => {
  socket.bind();
}, common.expectsError({
  code: 'ERR_SOCKET_ALREADY_BOUND',
  type: Error,
}));
```

----------------------------------------

TITLE: Protocol Upgrade with Undici for WebSocket
DESCRIPTION: Example demonstrating how to upgrade an HTTP connection to a different protocol like WebSocket. It creates a server that responds with a 101 status code and proper upgrade headers, then upgrades the client connection.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.statusCode = 101
  response.setHeader('connection', 'upgrade')
  response.setHeader('upgrade', request.headers.upgrade)
  response.end()
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

try {
  const { headers, socket } = await client.upgrade({
    path: '/',
  })
  socket.on('end', () => {
    console.log(`upgrade: ${headers.upgrade}`) // upgrade: Websocket
    client.close()
    server.close()
  })
  socket.end()
} catch (error) {
  console.error(error)
  client.close()
  server.close()
}
```

----------------------------------------

TITLE: Accessing Node.js Version (CommonJS)
DESCRIPTION: Shows how to access the Node.js version string using process.version in CommonJS modules. It requires the version property and logs it to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_98

LANGUAGE: javascript
CODE:
```
const { version } = require('node:process');

console.log(`Version: ${version}`);
// Version: v14.8.0
```

----------------------------------------

TITLE: Configuring Node.js Without Intl Support - PowerShell
DESCRIPTION: Windows-specific command to disable all Intl support for Node.js. Run from source directory prior to running build. Use for custom minimal builds that exclude internationalization APIs.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_41

LANGUAGE: PowerShell
CODE:
```
.\vcbuild without-intl
```

----------------------------------------

TITLE: Compiling OpenSSL using Make in Shell
DESCRIPTION: Executes the make command to compile the OpenSSL library after it has been configured using the './Configure' script. This command should be run from the OpenSSL source directory within a BASH shell.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/NOTES-DJGPP.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
make
```

----------------------------------------

TITLE: Recursive File System Watching in Node.js
DESCRIPTION: Shows how to use the new recursive option with fs.watch to monitor file changes in a directory and its subdirectories.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V19.md#2025-04-23_snippet_9

LANGUAGE: JavaScript
CODE:
```
const watcher = fs.watch(testDirectory, { recursive: true });
watcher.on('change', function(event, filename) {
});
```

----------------------------------------

TITLE: Testing Array.reduceRight() with Regular Arrays in JavaScript
DESCRIPTION: Basic test cases for the reduceRight() method on regular arrays with and without initial values. The tests verify that reduceRight() properly accumulates values from right to left.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-reduceRight-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
[0,1,2,3].reduceRight(function(a,b){ return a + b; })
```

----------------------------------------

TITLE: Testing Self-Updating Function Call in JavaScript
DESCRIPTION: This code snippet tests if expressions of the form x = x.apply(...) are correctly handled during bytecode generation. It includes assertions to verify the expected behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/function-dot-apply-replace-base-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS bar() is 3
PASS successfullyParsed is true

TEST COMPLETE
```

----------------------------------------

TITLE: Configuring Small-ICU Support - PowerShell
DESCRIPTION: Configures Windows build for minimal ICU (English-only) support. Outputs a Node.js build optimized for size, retaining core Intl API functionality. Command must be executed before further build steps.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_39

LANGUAGE: PowerShell
CODE:
```
.\vcbuild small-icu
```

----------------------------------------

TITLE: Creating Transform Stream with Simplified Constructor in Node.js
DESCRIPTION: Example of creating a Transform stream using the simplified constructor approach, directly passing the transform implementation as an option. This is the most concise way to create simple transform streams.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_97

LANGUAGE: javascript
CODE:
```
const { Transform } = require('node:stream');

const myTransform = new Transform({
  transform(chunk, encoding, callback) {
    // ...
  },
});
```

----------------------------------------

TITLE: Queuing Async Work in Node-API (C)
DESCRIPTION: Signature for queuing an async work item for execution. This function schedules previously created async work to be executed in a worker thread, allowing non-blocking operations in native addons.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_187

LANGUAGE: c
CODE:
```
napi_status napi_queue_async_work(node_api_basic_env env,
                                  napi_async_work work);
```

----------------------------------------

TITLE: Example: Automating v20 Security Release Proposal
DESCRIPTION: An example demonstrating checking out the v20 branch and then using `git node release --prepare --security` specifically for the v20 release line.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/releases.md#_snippet_18

LANGUAGE: Bash
CODE:
```
git checkout v20.x
git node release -S --prepare --security --filterLabel v20.x
```

----------------------------------------

TITLE: Testing Array.reduceRight() with Object-Converted Arrays in JavaScript
DESCRIPTION: Test cases using the toObject() function to convert arrays into objects before calling reduceRight(). This tests the method's behavior when called on array-like objects.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-reduceRight-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
toObject([0,1,2,3]).reduceRight(function(a,b){ return a + b; })
```

----------------------------------------

TITLE: Testing Function Representation in Runtime.RemoteObject
DESCRIPTION: Tests how different types of functions (arrow functions, regular functions, named functions, async functions) are represented in Runtime.RemoteObject with different serialization options.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
'(() => 42)', returnByValue: false, generatePreview: false
{
    result : {
        className : Function
        description : () => 42
        objectId : <objectId>
        type : function
    }
}
```

----------------------------------------

TITLE: Testing Number.toString() with 32-bit Integer Bounds
DESCRIPTION: Tests toString() with numbers at the 32-bit integer boundaries (-2147483648 and 2147483647) including their decimal variants
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/toString-number-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
Number(-2147483648).toString();
Number(-2147483648).toString(2);
Number(-2147483648).toString(36);
```

----------------------------------------

TITLE: Monitoring Header Sending with undici:client:sendHeaders Channel
DESCRIPTION: Demonstrates how to track when request headers are being sent to the server.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:client:sendHeaders').subscribe(({ request, headers, socket }) => {
  // request is the same object undici:request:create
  console.log(`Full headers list ${headers.split('\r\n')}`);
})
```

----------------------------------------

TITLE: Running WPT Module Tests (Bash)
DESCRIPTION: This command executes all the Web Platform Tests for a specific module (identified by the driver file `wpt/test-url`) using the Node.js project's Python test runner script (`tools/test.py`).
SOURCE: https://github.com/nodejs/node/blob/main/test/wpt/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
tools/test.py wpt/test-url
```

----------------------------------------

TITLE: Checking Buffer Equality Node.js JavaScript
DESCRIPTION: Demonstrates how to use the `buf.equals()` method to check if two Buffer instances have the exact same byte sequence.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_45

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('ABC');
const buf2 = Buffer.from('414243', 'hex');
const buf3 = Buffer.from('ABCD');

console.log(buf1.equals(buf2));
// Prints: true
console.log(buf1.equals(buf3));
// Prints: false
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from('ABC');
const buf2 = Buffer.from('414243', 'hex');
const buf3 = Buffer.from('ABCD');

console.log(buf1.equals(buf2));
// Prints: true
console.log(buf1.equals(buf3));
// Prints: false
```

----------------------------------------

TITLE: Defining JavaScript Function with Postfix Decrement on Call
DESCRIPTION: Defines a JavaScript function 'f' where the result of calling another function 'g' is post-decremented. The surrounding text indicates a test verifying its string representation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/modify-non-references-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
function f() { g()--; }
```

----------------------------------------

TITLE: Testing encodeURI with Invalid Surrogate Pairs in JavaScript
DESCRIPTION: This snippet tests the encodeURI function with various invalid surrogate pair combinations. It expects a URIError to be thrown for each case.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/kde/encode_decode_uri-expected.txt#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
encodeURI(String.fromCharCode(55296) + String.fromCharCode(53966))
```

----------------------------------------

TITLE: Testing Empty Stack Trace Pattern
DESCRIPTION: Illustrates minimal stack trace with just the user function call. Shows how stack traces appear when async operations don't generate additional stack frames.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/async-chains-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
userFunction (test.js:1:36)
```

----------------------------------------

TITLE: Function Call Test Loop Results
DESCRIPTION: Outputs from testing bar() function calls with incrementing parameters. Shows pattern of increasing odd numbers from 1 to 299 followed by series of -1 values, validating function behavior when overwritten.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-call-function-hit-watchpoint-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
bar(i, i + 1)
```

----------------------------------------

TITLE: Dynamic Array Modification During Reduction in JavaScript
DESCRIPTION: This snippet tests reduce() behavior when the array is modified during the reduction process. It demonstrates how changing the array length affects the iteration count.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-reduce-expected.txt#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
[1, 2, 3, 4].reduce(function(a,b, i, thisObj){ thisObj.length--; callCount++; return a + b; }, 0)
```

LANGUAGE: JavaScript
CODE:
```
[1, 2, 3, 4].reduce(function(a,b, i, thisObj){ thisObj.length++; callCount++; return a + b; }, 0)
```

----------------------------------------

TITLE: Evaluate and Return Expression Result - JavaScript
DESCRIPTION: This snippet evaluates a boolean expression directly and returns the resulting boolean value. It is used throughout the tests to verify the outcome of various comparison and logical operations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-expected.txt#_snippet_12

LANGUAGE: javascript
CODE:
```
return (0===One) && 1;
```

----------------------------------------

TITLE: Defining Node.js Error ERR_WORKER_UNSUPPORTED_EXTENSION (Text)
DESCRIPTION: Thrown when the main script provided for a Node.js worker thread has an unknown or unsupported file extension. Added in v11.0.0 and removed in v16.9.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_42

LANGUAGE: text
CODE:
```
ERR_WORKER_UNSUPPORTED_EXTENSION
```

----------------------------------------

TITLE: Testing Static Private Methods with Class Inheritance
DESCRIPTION: Defines a class that extends an empty class and contains a static private method. Tests how inheritance affects the representation of private methods in the object preview.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/class-private-methods-static-preview-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
class extends class { } { static #method() { return 1; } }
```

----------------------------------------

TITLE: Setting Default Reply Trailers in Mocked HTTP Requests
DESCRIPTION: This example shows how to set default trailers in mocked HTTP responses using Undici's MockAgent. It demonstrates the defaultReplyTrailers method which adds trailers to the response that can be accessed after the request completes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockPool.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')

mockPool.intercept({
  path: '/foo',
  method: 'GET'
}).defaultReplyTrailers({ foo: 'bar' })
  .reply(200, 'foo')

const { trailers } = await request('http://localhost:3000/foo')

console.log('trailers', trailers) // trailers { foo: 'bar' }
```

----------------------------------------

TITLE: Testing Regular Expression for HTML Comments in JavaScript
DESCRIPTION: This snippet tests a regular expression designed to match HTML comments. It uses the exec() method and verifies if the result matches the expected output.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/regexp-find-first-asserted-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
PASS /\s*<!--([sS]*)//\s*-->\s*/.exec("<!--// -->").toString() is "<!--// -->,"
```

----------------------------------------

TITLE: Inspecting WebAssembly Memory Names
DESCRIPTION: Debug output showing three different memory name patterns in WebAssembly: default memory name ($memory0), exported memory name ($exported_memory), and imported memory name with module prefix ($module_name.imported_mem).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-memory-names-expected.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
name: $memory0
name: $exported_memory
name: $module_name.imported_mem
```

----------------------------------------

TITLE: Ninja Build Success Output Example
DESCRIPTION: Example console output when a Ninja build succeeds. Shows progress information in the format of finished/total build steps, providing better visibility than make into the build process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/building-node-with-ninja.md#2025-04-23_snippet_1

LANGUAGE: console
CODE:
```
ninja: Entering directory `out/Release`
[4/4] LINK node, POSTBUILDS
```

----------------------------------------

TITLE: Testing Unary Operators
DESCRIPTION: Test cases for unary operators including delete, void, typeof, ++, --, +, -, ~, and ! with various combinations of operands.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/function-toString-parentheses-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
compileAndSerialize('delete a + b')
compileAndSerialize('void a + b')
compileAndSerialize('typeof a + b')
compileAndSerialize('++a + b')
compileAndSerialize('--a + b')
```

----------------------------------------

TITLE: Adding JSON Import Assertion Support in ESM
DESCRIPTION: Introduces support for JSON import assertions in ECMAScript modules, enabling explicit JSON module imports. This is a semver-minor change that enhances the ESM implementation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V17.md#2025-04-23_snippet_37



----------------------------------------

TITLE: Setting Up Out-of-Tree Build on OpenVMS
DESCRIPTION: Commands to create a separate build directory and invoke the OpenSSL configuration from there on OpenVMS systems.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/INSTALL.md#2025-04-23_snippet_22

LANGUAGE: dcl
CODE:
```
$ set default sys$login:
$ create/dir [.tmp.openssl-build]
$ set default [.tmp.openssl-build]
$ perl D:[PATH.TO.OPENSSL.SOURCE]Configure [[ options ]]
```

----------------------------------------

TITLE: Testing Number.toString() with Decimal Values
DESCRIPTION: Validates toString() behavior with decimal numbers including 0.1, 1.1, and larger decimals in various bases
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/toString-number-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
Number(0.1).toString();
Number(0.1).toString(2);
Number(0.1).toString(36);
```

----------------------------------------

TITLE: Node-API Thread-Safe Function Call Mode Enumeration (C)
DESCRIPTION: Defines the call modes for thread-safe functions, indicating whether calls should block when the queue is full.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_20

LANGUAGE: C
CODE:
```
typedef enum {
  napi_tsfn_nonblocking,
  napi_tsfn_blocking
} napi_threadsafe_function_call_mode;
```

----------------------------------------

TITLE: Parsing Another Two-Line Script with Source URL at End
DESCRIPTION: Tests parsing of another two-line script with a source URL at the end. The script contains a function declaration on the first line and a sourceURL comment on the second line.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/script-on-after-compile-expected.txt#2025-04-23_snippet_11

LANGUAGE: JavaScript
CODE:
```
function foo12(){}
//# sourceURL=end2.js
```

----------------------------------------

TITLE: Introducing USE() Macro for Silencing Compiler Warnings in C++
DESCRIPTION: This commit introduces a USE() macro in the Node.js source code to silence compiler warnings about unused variables or parameters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V9.md#2025-04-23_snippet_9

LANGUAGE: C++
CODE:
```
introduce USE() for silencing compiler warnings
```

----------------------------------------

TITLE: Implementing Cyclic Dependencies in Node.js
DESCRIPTION: Example showing a module that requires another module which in turn requires the first module, demonstrating how Node.js handles cyclic dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_13

LANGUAGE: js
CODE:
```
console.log('b starting');
exports.done = false;
const a = require('./a.js');
console.log('in b, a.done = %j', a.done);
exports.done = true;
console.log('b done');
```

----------------------------------------

TITLE: Testing Unexpected End of Input Syntax Error in JavaScript
DESCRIPTION: Tests how the Node.js runtime handles a syntax error caused by an incomplete expression ('+++'). The test captures the exception details including line/column information and error description.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-compiler-errors-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
+++
```

----------------------------------------

TITLE: Freezing JavaScript Objects with napi_object_freeze in C
DESCRIPTION: Function to freeze a JavaScript object, preventing new properties from being added, existing properties from being removed or modified, and the object's prototype from being changed, as described in ECMA-262 specification.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_163

LANGUAGE: c
CODE:
```
napi_status napi_object_freeze(napi_env env,
                               napi_value object);
```

----------------------------------------

TITLE: Chaining registerHooks in Node.js (ESM)
DESCRIPTION: Demonstrates how to chain multiple hooks using the registerHooks method in ECMAScript modules. The hooks are executed in a last-in, first-out (LIFO) order.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
// entrypoint.mjs
import { registerHooks } from 'node:module';

const hook1 = { /* implementation of hooks */ };
const hook2 = { /* implementation of hooks */ };
// hook2 run before hook1.
registerHooks(hook1);
registerHooks(hook2);
```

----------------------------------------

TITLE: Creating External JavaScript Strings from Latin1 Text in C
DESCRIPTION: Function to create JavaScript string values from ISO-8859-1 encoded C strings without copying, with optional finalization callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_97

LANGUAGE: c
CODE:
```
napi_status
node_api_create_external_string_latin1(napi_env env,
                                       char* str,
                                       size_t length,
                                       napi_finalize finalize_callback,
                                       void* finalize_hint,
                                       napi_value* result,
                                       bool* copied);
```

----------------------------------------

TITLE: Executing npm init Command with Package Spec
DESCRIPTION: Demonstrates the basic syntax for running npm init with a package spec or scope. This command initializes a new npm package or uses a specific initializer.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-init.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm init <package-spec> (same as `npx create-<package-spec>`)
npm init <@scope> (same as `npx <@scope>/create>`)

aliases: create, innit
```

----------------------------------------

TITLE: Dynamic Library Loading Constants
DESCRIPTION: Constants used with dlopen for dynamic library loading operations. These flags control how shared libraries are loaded and symbols are resolved.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_11

LANGUAGE: JavaScript
CODE:
```
RTLD_LAZY
RTLD_NOW
RTLD_GLOBAL
RTLD_LOCAL
RTLD_DEEPBIND
```

----------------------------------------

TITLE: Stripping trailing carriage returns in jsdiff line diffing
DESCRIPTION: Introduces the optional `stripTrailingCr: true` option for functions like `diffLines` and `createTwoFilesPatch` in the jsdiff library. When enabled, this option replaces Windows-style `\r\n` line endings with Unix-style `\n` before computing the diff, similar to GNU `diff`'s `--strip-trailing-cr` flag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/diff/release-notes.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
// `diffLines`, `createTwoFilesPatch`, and other patch-creation methods now take an optional 
// `stripTrailingCr: true` option which causes Windows-style `\r\n` line endings to be replaced 
// with Unix-style `\n` line endings before calculating the diff

// Example (Conceptual - Function call not shown in source text)
// diffLines(oldTextWithCRLF, newTextWithCRLF, { stripTrailingCr: true });
```

----------------------------------------

TITLE: Package Configuration for CoffeeScript Modules
DESCRIPTION: Package.json configuration specifying module type for CoffeeScript files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_43

LANGUAGE: json
CODE:
```
{
  "type": "module"
}
```

----------------------------------------

TITLE: Inserting Nodes in Container in PostCSS Selector Parser
DESCRIPTION: Demonstrates how to insert a node before or after an existing node in a selector container. This example walks through selectors and adds a class after each non-class selector.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_38

LANGUAGE: javascript
CODE:
```
selectors.walk(selector => {
    if (selector.type !== 'class') {
        const className = parser.className({value: 'theme-name'});
        selector.parent.insertAfter(selector, className);
    }
});
```

----------------------------------------

TITLE: Displaying Node.js Debugger Paused Call Stack (Text)
DESCRIPTION: Shows the call stack trace when the debugger paused execution at the breakpoint. It lists the active function frames, starting with `foo` called from `foo.js` at line 2, column 2, followed by an anonymous frame, indicating the execution context leading to the pause.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/regress/regress-crbug-1195927-expected.txt#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
foo (foo.js:2:2)
(anonymous) (:0:0)
```

----------------------------------------

TITLE: Adding 'throws' Option to Synchronous File System Methods in JavaScript
DESCRIPTION: Adds a 'throws' option to fs.fstatSync, fs.lstatSync, and fs.statSync, allowing control over exception throwing behavior.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_23

LANGUAGE: JavaScript
CODE:
```
fs.statSync = function(path, options) {
  // Handle 'throws' option
  // Implementation details
};
```

----------------------------------------

TITLE: Clearing MockCallHistory in JavaScript
DESCRIPTION: Shows how to clear all registered MockCallHistoryLog entries, which happens automatically when calling mockAgent.close().
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockCallHistory.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
mockAgent.clearCallHistory()
// same as
mockAgent.getCallHistory()?.clear()
```

----------------------------------------

TITLE: Generating V8 Heap Snapshot
DESCRIPTION: Example of generating and streaming a V8 heap snapshot to stdout.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
// Print heap snapshot to the console
const v8 = require('node:v8');
const stream = v8.getHeapSnapshot();
stream.pipe(process.stdout);
```

----------------------------------------

TITLE: Validating Runtime.evaluate Response Structure in JSON
DESCRIPTION: This code snippet illustrates the expected response structure when calling Runtime.evaluate. It shows that the result should be an object containing properties with null values and arrays with specific elements.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/runtime-evaluate-null-property-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            type : object
            value : {
                b : null
                c : [
                    [0] : 1
                    [1] : null
                    [2] : null
                    [3] : 4
                ]
            }
        }
    }
}
```

----------------------------------------

TITLE: Getting the Node Type Using postcss-selector-parser in JavaScript
DESCRIPTION: This example demonstrates accessing the .type property of an attribute node created by parser.attribute. The returned string ('attribute') indicates the node's type. parser exposes constants for each type for convenience.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
parser.attribute({attribute: 'href'}).type;
// => 'attribute'
```

----------------------------------------

TITLE: Importing the Node.js QUIC Module (CJS) in JavaScript
DESCRIPTION: This snippet illustrates how to import the experimental 'node:quic' module using CommonJS (CJS) syntax. It is compatible with Node.js v23.8.0+ run with the '--experimental-quic' option. The require statement enables use of QUIC protocol capabilities in Node.js scripts. No input arguments or outputs are involved.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/quic.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const quic = require('node:quic');
```

----------------------------------------

TITLE: Executing npm root Command in Bash
DESCRIPTION: This snippet shows the basic usage of the npm root command to display the effective node_modules folder.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-root.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm root
```

----------------------------------------

TITLE: Adding or Changing an Admin in an npm Organization
DESCRIPTION: Demonstrates how to add a new admin or change a developer's role to admin in an npm organization.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-org.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ npm org set my-org @mx-santos admin
```

----------------------------------------

TITLE: OpenSSL FIPS Configuration Example
DESCRIPTION: Sample OpenSSL configuration file for enabling FIPS mode in Node.js. Shows the required structure and settings for FIPS provider initialization.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_98

LANGUAGE: text
CODE:
```
nodejs_conf = nodejs_init

.include /<absolute path>/fipsmodule.cnf

[nodejs_init]
providers = provider_sect

[provider_sect]
default = default_sect
# The fips section name should match the section name inside the
# included fipsmodule.cnf.
fips = fips_sect

[default_sect]
activate = 1
```

----------------------------------------

TITLE: Debugging WebSocket API Output
DESCRIPTION: Demonstrates debug logging for the WebSocket API using NODE_DEBUG=websocket flag. Shows connection establishment and request details for WebSocket connections.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Debug.md#2025-04-23_snippet_2

LANGUAGE: sh
CODE:
```
NODE_DEBUG=websocket node script.js

WEBSOCKET 18309: connecting to echo.websocket.org using https:h1
WEBSOCKET 18309: connected to echo.websocket.org using https:h1
WEBSOCKET 18309: sending request to GET https://echo.websocket.org//
WEBSOCKET 18309: connection opened <ip_address>
```

----------------------------------------

TITLE: console.table Output Detail: Preview (Very Large Array, Overflow) (JSON-like)
DESCRIPTION: Represents the overall preview structure generated by `console.table` for a very large array (1001 elements). The 'overflow' property is true, indicating the data exceeds display limits, and only the first 1000 properties are shown in the preview properties array.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-table-expected.txt#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
{
    description : Array(1001)
    overflow : true
    properties : <PropertiesArray(1000)>
    subtype : array
    type : object
}
```

----------------------------------------

TITLE: Importing StringDecoder in CommonJS (CJS)
DESCRIPTION: Shows how to import the StringDecoder class from the node:string_decoder module using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/string_decoder.md#2025-04-23_snippet_1

LANGUAGE: cjs
CODE:
```
const { StringDecoder } = require('node:string_decoder');
```

----------------------------------------

TITLE: Windows Network Error Constants
DESCRIPTION: Windows-specific error constants used for network operations and socket handling in Node.js. These constants are used to identify specific error conditions in Windows networking operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
WSAEINTR
WSAEBADF
WSAEACCES
WSAEFAULT
WSAEINVAL
WSAEMFILE
WSAEWOULDBLOCK
WSAEINPROGRESS
WSAEALREADY
```

----------------------------------------

TITLE: Creating Pending Promise and Extracting Resolver - JavaScript
DESCRIPTION: Instantiates a Promise, exposing the 'resolve' method on 'this' so that it can be settled externally. Tests Promise construction and external control over resolution. Input: none; Output: pending Promise with accessible resolve function. Demonstrates advanced Promise orchestration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_42

LANGUAGE: JavaScript
CODE:
```
new Promise(resolve => this.resolve = resolve)
```

----------------------------------------

TITLE: Implementing CLI Trace Environment Options in Node.js
DESCRIPTION: New CLI options --trace-env and --trace-env-[js|native]-stack are added to Node.js for tracing environment-related operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
--trace-env
--trace-env-[js|native]-stack
```

----------------------------------------

TITLE: Setting Effective Group ID in Node.js (CommonJS)
DESCRIPTION: Example of using the process.setegid() method to set the effective group identity of the process in CommonJS format. This POSIX-only function changes the group identity and then verifies the change.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_84

LANGUAGE: javascript
CODE:
```
const process = require('node:process');

if (process.getegid && process.setegid) {
  console.log(`Current gid: ${process.getegid()}`);
  try {
    process.setegid(501);
    console.log(`New gid: ${process.getegid()}`);
  } catch (err) {
    console.error(`Failed to set gid: ${err}`);
  }
}
```

----------------------------------------

TITLE: Handling Disabled TLS Support in ESM
DESCRIPTION: Error handling approach for when TLS/crypto support is disabled in Node.js using ESM dynamic imports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
let tls;
try {
  tls = await import('node:tls');
} catch (err) {
  console.error('tls support is disabled!');
}
```

----------------------------------------

TITLE: Building a Specific Target in a GYP Test (Python)
DESCRIPTION: Demonstrates using the `build_target` method to invoke the build tool with an explicitly named target (e.g., a specific executable or library name) defined in the build configuration generated from the specified `.gyp` file.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/Testing.md#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
  test.build_target('file.gyp', 'target')
```

----------------------------------------

TITLE: Implementing Synchronous Import Map Hooks
DESCRIPTION: Defines synchronous resolve hooks for implementing import maps functionality in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_45

LANGUAGE: javascript
CODE:
```
// import-map-sync-hooks.js
import fs from 'node:fs/promises';
import module from 'node:module';

const { imports } = JSON.parse(fs.readFileSync('import-map.json', 'utf-8'));

function resolve(specifier, context, nextResolve) {
  if (Object.hasOwn(imports, specifier)) {
    return nextResolve(imports[specifier], context);
  }

  return nextResolve(specifier, context);
}

module.registerHooks({ resolve });
```

----------------------------------------

TITLE: Setting Supplementary Group IDs in Node.js (CommonJS)
DESCRIPTION: Demonstrates the use of process.setgroups() to set the supplementary group IDs for the Node.js process in CommonJS format. This privileged operation requires root access or CAP_SETGID capability.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_90

LANGUAGE: javascript
CODE:
```
const process = require('node:process');

if (process.getgroups && process.setgroups) {
  try {
    process.setgroups([501]);
    console.log(process.getgroups()); // new groups
  } catch (err) {
    console.error(`Failed to set groups: ${err}`);
  }
}
```

----------------------------------------

TITLE: Implementing Factory Pattern for C++ Object Creation in Node.js
DESCRIPTION: This C++ code demonstrates an alternative approach using a factory pattern to create instances of the wrapped object without using the 'new' operator in JavaScript.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_26

LANGUAGE: cpp
CODE:
```
#include <node.h>
#include "myobject.h"

namespace demo {

using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
using v8::Object;
using v8::String;
using v8::Value;

void CreateObject(const FunctionCallbackInfo<Value>& args) {
  MyObject::NewInstance(args);
}

void InitAll(Local<Object> exports, Local<Object> module) {
  MyObject::Init(exports->GetIsolate());

  NODE_SET_METHOD(module, "exports", CreateObject);
}

NODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)

}  // namespace demo
```

----------------------------------------

TITLE: Formatting Certificate Authority String in .npmrc - INI
DESCRIPTION: Shows how to set a custom SSL Certificate Authority for npm registry authentication by defining the 'ca' parameter directly in the .npmrc file. The value must be in PEM format with newlines replaced by '\\n'. Requires access to the appropriate certificate and editing capabilities for .npmrc files. Accepts PEM-encoded CA certificate strings as input; output is npm reading this configuration for SSL validation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/config.md#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
ca="-----BEGIN CERTIFICATE-----\nXXXX\nXXXX\n-----END CERTIFICATE-----"
```

----------------------------------------

TITLE: Creating WeakSet with Initial Object in JavaScript
DESCRIPTION: Creates a WeakSet with an initial object {a:2}. The WeakSet contains one object and has a length property of 1.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/internal-properties-entries-expected.txt#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
new WeakSet([{a:2}])
```

----------------------------------------

TITLE: Generator Function Call with Step Position
DESCRIPTION: Shows the same generator call function with the debugging step position marked after entering the generator function.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/stepping-async-generator-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
function callGenerator() {
  return generator();#
}
```

----------------------------------------

TITLE: Displaying Default Node.js Cipher Suite
DESCRIPTION: Command to show the default TLS cipher suite configuration in Node.js using the crypto module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_5

LANGUAGE: console
CODE:
```
node -p crypto.constants.defaultCoreCipherList | tr ':' '\n'
```

----------------------------------------

TITLE: Creating an npm publish token in Bash
DESCRIPTION: This snippet shows the output of successfully creating a new publish token using the npm token create command. It displays the generated token ID.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-token.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
Created publish token a73c9572-f1b9-8983-983d-ba3ac3cc913d
```

----------------------------------------

TITLE: Checking Basic ICU Support via `process.versions.icu` in JavaScript
DESCRIPTION: This snippet provides an alternative method to detect basic ICU support by checking the `process.versions.icu` property. This property is defined as a string only when ICU is enabled in the Node.js build.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/intl.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
```js
const hasICU = typeof process.versions.icu === 'string';
```
```

----------------------------------------

TITLE: Testing Unserializable Numeric Values in Node.js Debugger
DESCRIPTION: Tests how the debugger handles unserializable numeric values like NaN, Infinity, -Infinity, and -0. The response includes special handling with unserializableValue property.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-return-values-expected.txt#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            description : NaN
            type : number
            unserializableValue : NaN
        }
    }
}
{
    id : <messageId>
    result : {
        result : {
            description : Infinity
            type : number
            unserializableValue : Infinity
        }
    }
}
{
    id : <messageId>
    result : {
        result : {
            description : -Infinity
            type : number
            unserializableValue : -Infinity
        }
    }
}
{
    id : <messageId>
    result : {
        result : {
            description : -0
            type : number
            unserializableValue : -0
        }
    }
}
```

----------------------------------------

TITLE: Defining a Cross-Platform Executable Target in GYP
DESCRIPTION: Demonstrates adding a new executable target named 'new_unit_tests' to a GYP file. It specifies the target type as 'executable', includes preprocessor definitions ('defines'), sets include directories ('include_dirs'), lists dependencies on other targets, and provides the list of source files ('sources'). This configuration applies to all platforms unless overridden by conditions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/UserDocumentation.md#2025-04-23_snippet_7

LANGUAGE: gyp
CODE:
```
  {
    'targets': [
      {
        'target_name': 'new_unit_tests',
        'type': 'executable',
        'defines': [
          'FOO',
        ],
        'include_dirs': [
          '..',
        ],
        'dependencies': [
          'other_target_in_this_file',
          'other_gyp2:target_in_other_gyp2',
        ],
        'sources': [
          'new_additional_source.cc',
          'new_unit_tests.cc',
        ],
      },
    ],
  }
```

----------------------------------------

TITLE: Specifying Single Man Page in package.json (JSON)
DESCRIPTION: This `package.json` example uses the `man` field to specify a single file (`./man/doc.1`) to be used as the man page for the package (`foo`). When installed, `man foo` will display the content of this file.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_8

LANGUAGE: json
CODE:
```
{
  "name": "foo",
  "version": "1.2.3",
  "description": "A packaged foo fooer for fooing foos",
  "main": "foo.js",
  "man": "./man/doc.1"
}
```

----------------------------------------

TITLE: Dependency Tree Example - Before Dedupe
DESCRIPTION: Shows an example of a dependency tree with duplication before running npm dedupe. In this example, package 'c' appears twice in different versions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-dedupe.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
a
+-- b <-- depends on c@1.0.x
|   `-- c@1.0.3
`-- d <-- depends on c@~1.0.9
    `-- c@1.0.10
```

----------------------------------------

TITLE: Getting and Clearing Last Exception in Node-API
DESCRIPTION: Function to retrieve and clear the last JavaScript exception. Can be called even with pending exceptions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_44

LANGUAGE: c
CODE:
```
napi_status napi_get_and_clear_last_exception(napi_env env,
                                              napi_value* result);
```

----------------------------------------

TITLE: Public signing keys format from registry
DESCRIPTION: JSON structure for public signing keys provided by registries. Shows the format used at the endpoint registry-host.tld/-/npm/v1/keys including key expiration, ID, type, and the base64-encoded public key.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "keys": [{
    "expires": null,
    "keyid": "SHA256:{{SHA256_PUBLIC_KEY}}",
    "keytype": "ecdsa-sha2-nistp256",
    "scheme": "ecdsa-sha2-nistp256",
    "key": "{{B64_PUBLIC_KEY}}"
  }]
}
```

----------------------------------------

TITLE: Example SPDX SBOM Output in JSON
DESCRIPTION: This snippet shows the structure of an SPDX Software Bill of Materials (SBOM) generated by the npm sbom command. It includes information about the project, its dependencies, and their relationships.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-sbom.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
  "spdxVersion": "SPDX-2.3",
  "dataLicense": "CC0-1.0",
  "SPDXID": "SPDXRef-DOCUMENT",
  "name": "simple@1.0.0",
  "documentNamespace": "http://spdx.org/spdxdocs/simple-1.0.0-bf81090e-8bbc-459d-bec9-abeb794e096a",
  "creationInfo": {
    "created": "2023-09-01T00:00:00.001Z",
    "creators": [
      "Tool: npm/cli-10.1.0"
    ]
  },
  "documentDescribes": [
    "SPDXRef-Package-simple-1.0.0"
  ],
  "packages": [
    {
      "name": "simple",
      "SPDXID": "SPDXRef-Package-simple-1.0.0",
      "versionInfo": "1.0.0",
      "packageFileName": "",
      "description": "simple react app",
      "primaryPackagePurpose": "LIBRARY",
      "downloadLocation": "NOASSERTION",
      "filesAnalyzed": false,
      "homepage": "NOASSERTION",
      "licenseDeclared": "MIT",
      "externalRefs": [
        {
          "referenceCategory": "PACKAGE-MANAGER",
          "referenceType": "purl",
          "referenceLocator": "pkg:npm/simple@1.0.0"
        }
      ]
    },
    {
      "name": "lodash",
      "SPDXID": "SPDXRef-Package-lodash-4.17.21",
      "versionInfo": "4.17.21",
      "packageFileName": "node_modules/lodash",
      "description": "Lodash modular utilities.",
      "downloadLocation": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "filesAnalyzed": false,
      "homepage": "https://lodash.com/",
      "licenseDeclared": "MIT",
      "externalRefs": [
        {
          "referenceCategory": "PACKAGE-MANAGER",
          "referenceType": "purl",
          "referenceLocator": "pkg:npm/lodash@4.17.21"
        }
      ],
      "checksums": [
        {
          "algorithm": "SHA512",
          "checksumValue": "bf690311ee7b95e713ba568322e3533f2dd1cb880b189e99d4edef13592b81764daec43e2c54c61d5c558dc5cfb35ecb85b65519e74026ff17675b6f8f916f4a"
        }
      ]
    }
  ],
  "relationships": [
    {
      "spdxElementId": "SPDXRef-DOCUMENT",
      "relatedSpdxElement": "SPDXRef-Package-simple-1.0.0",
      "relationshipType": "DESCRIBES"
    },
    {
      "spdxElementId": "SPDXRef-Package-simple-1.0.0",
      "relatedSpdxElement": "SPDXRef-Package-lodash-4.17.21",
      "relationshipType": "DEPENDS_ON"
    }
  ]
}
```

----------------------------------------

TITLE: Adding mkdtemp() Function to fs Module in Node.js
DESCRIPTION: This commit adds a new function fs.mkdtemp() to the fs module. The function likely creates a unique temporary directory with a generated name.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V5.md#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
// Example usage (actual implementation details not provided):
const fs = require('fs');
fs.mkdtemp('/tmp/foo-', (err, folder) => {
  if (err) throw err;
  console.log(folder);
  // Prints: /tmp/foo-itXde2
});
```

----------------------------------------

TITLE: Creating Type Errors in Node-API
DESCRIPTION: Function to create a JavaScript TypeError with custom error code and message. Returns napi_ok on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_41

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_create_type_error(napi_env env,
                                               napi_value code,
                                               napi_value msg,
                                               napi_value* result);
```

----------------------------------------

TITLE: Converting JavaScript String to UTF-16 Encoding in Node-API
DESCRIPTION: Function to convert a JavaScript string to a UTF-16LE encoded string. Handles buffer sizing and string truncation.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_121

LANGUAGE: c
CODE:
```
napi_status napi_get_value_string_utf16(napi_env env,
                                        napi_value value,
                                        char16_t* buf,
                                        size_t bufsize,
                                        size_t* result)
```

----------------------------------------

TITLE: Initializing PoolStats Class in Node.js
DESCRIPTION: Constructor for the PoolStats class which takes a Pool or BalancedPool instance as an argument to track its statistics.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/PoolStats.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## `new PoolStats(pool)`

Arguments:

* **pool** `Pool` - Pool or BalancedPool from which to return stats.
```

----------------------------------------

TITLE: Example Patch Output from libnpmdiff
DESCRIPTION: This snippet shows an example of the patch output generated by 'libnpmdiff' when comparing 'abbrev@1.1.0' and 'abbrev@1.1.1'. It uses the standard diff format to highlight changes, specifically showing the version update within the 'package.json' file.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/libnpmdiff/README.md#2025-04-23_snippet_1

LANGUAGE: patch
CODE:
```
diff --git a/package.json b/package.json
index v1.1.0..v1.1.1 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "abbrev",
-  "version": "1.1.0",
+  "version": "1.1.1",
   "description": "Like ruby's abbrev module, but in js",
   "author": "Isaac Z. Schlueter <i@izs.me>",
   "main": "abbrev.js",
```

----------------------------------------

TITLE: Subscribing to Uncaught Exception in REPL and Observing Error (JavaScript)
DESCRIPTION: Shows how the Node.js REPL restricts certain error-handling mechanisms. The code attempts to add an 'uncaughtException' listener inside a REPL session and writes a script input via repl.write(), resulting in a thrown error of type ERR_INVALID_REPL_INPUT. Dependencies: Node.js, 'node:repl' module, and knowledge of error event handling. Outputs an error message demonstrating that uncaughtException listeners cannot be used in REPL.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_6

LANGUAGE: js
CODE:
```
const r = repl.start();

r.write('process.on("uncaughtException", () => console.log("Foobar"));\n');
// Output stream includes:
//   TypeError [ERR_INVALID_REPL_INPUT]: Listeners for `uncaughtException`
//   cannot be used in the REPL

r.close();
```

----------------------------------------

TITLE: Custom Client Factory Configuration
DESCRIPTION: Example of the factory function configuration in PoolOptions, showing how to create custom Client instances. The factory function receives origin URL and options as parameters.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Pool.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
(origin, opts) => new Client(origin, opts)
```

----------------------------------------

TITLE: Analyzing Call Stack and Scope Chain in Node.js Debugging
DESCRIPTION: This code snippet represents a detailed call stack with multiple frames, each containing information about function calls, their locations, scope chains, and associated objects. It's typically used for advanced debugging and profiling in Node.js applications.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/class-fields-scopes-expected.txt#2025-04-23_snippet_0

LANGUAGE: JSON
CODE:
```
[
    [0] : {
        callFrameId : <callFrameId>
        canBeRestarted : true
        functionLocation : {
            columnNumber : 4
            lineNumber : 12
            scriptId : <scriptId>
        }
        functionName : <instance_members_initializer>
        location : {
            columnNumber : 14
            lineNumber : 13
            scriptId : <scriptId>
        }
        scopeChain : [
            [0] : {
                endLocation : {
                    columnNumber : 13
                    lineNumber : 14
                    scriptId : <scriptId>
                }
                name : <instance_members_initializer>
                object : {
                    className : Object
                    description : Object
                    objectId : <objectId>
                    type : object
                }
                startLocation : {
                    columnNumber : 4
                    lineNumber : 12
                    scriptId : <scriptId>
                }
                type : local
            }
            [1] : {
                endLocation : {
                    columnNumber : 1
                    lineNumber : 19
                    scriptId : <scriptId>
                }
                name : run
                object : {
                    className : Object
                    description : Object
                    objectId : <objectId>
                    type : object
                }
                startLocation : {
                    columnNumber : 12
                    lineNumber : 1
                    scriptId : <scriptId>
                }
                type : closure
            }
            [2] : {
                object : {
                    className : global
                    description : global
                    objectId : <objectId>
                    type : object
                }
                type : global
            }
        ]
        this : {
            className : X
            description : X
            objectId : <objectId>
            type : object
        }
        url : 
    }
    // ... more call frames ...
]
```

----------------------------------------

TITLE: Checking Report on Uncaught Exception Setting in Node.js
DESCRIPTION: This snippet demonstrates how to check if diagnostic reports are generated on uncaught exceptions using the process.report.reportOnUncaughtException property in both ECMAScript modules and CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_78

LANGUAGE: JavaScript
CODE:
```
import { report } from 'node:process';

console.log(`Report on exception: ${report.reportOnUncaughtException}`);
```

LANGUAGE: JavaScript
CODE:
```
const { report } = require('node:process');

console.log(`Report on exception: ${report.reportOnUncaughtException}`);
```

----------------------------------------

TITLE: Implementing Inheritance with util.inherits (Legacy JS)
DESCRIPTION: Provides an example of the legacy `util.inherits` function for setting up prototype-based inheritance between constructor functions. It shows inheriting `EventEmitter`'s prototype methods into `MyStream`. This method is discouraged in favor of ES6 classes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_15

LANGUAGE: js
CODE:
```
const util = require('node:util');
const EventEmitter = require('node:events');

function MyStream() {
  EventEmitter.call(this);
}

util.inherits(MyStream, EventEmitter);

MyStream.prototype.write = function(data) {
  this.emit('data', data);
};

const stream = new MyStream();

console.log(stream instanceof EventEmitter); // true
console.log(MyStream.super_ === EventEmitter); // true

stream.on('data', (data) => {
  console.log(`Received data: "${data}"`);
});
stream.write('It works!'); // Received data: "It works!"
```

----------------------------------------

TITLE: Testing instanceof Operator with Invalid Prototype Values
DESCRIPTION: Test cases that verify instanceof operator throws TypeError when constructor has non-object prototype values like primitives or null. Tests different combinations of left-hand operands.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/instance-of-immediates-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
(1 instanceof Constructor)
({} instanceof Constructor)
(obj instanceof Constructor)
```

----------------------------------------

TITLE: Example subdependency package.json in JSON
DESCRIPTION: An example of a package.json file for a subdependency, showing how it can limit the allowed versions of its own dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-update.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
"name": "dep2",
  "dependencies": {
    "dep1": "~1.1.1"
  }
}
```

----------------------------------------

TITLE: Inspecting Util Object Properties (ES Modules)
DESCRIPTION: Example showing how to inspect all properties of the util object using ES modules import.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
import util from 'node:util';

console.log(util.inspect(util, { showHidden: true, depth: null }));
```

----------------------------------------

TITLE: Setting Custom Log Directory in npm CLI
DESCRIPTION: This command demonstrates how to set a custom directory for npm logs. It installs a package while specifying the current directory as the logs directory, which is useful for debugging npm issues.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/logging.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install --logs-dir=.
```

----------------------------------------

TITLE: Importing the Net Module in CommonJS
DESCRIPTION: Shows how to require the net module using CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
const net = require('node:net');
```

----------------------------------------

TITLE: Installing GitHub Gist Packages - npm CLI - Bash
DESCRIPTION: Shows how to install a package hosted in a GitHub Gist by specifying the gist ID (and optionally, username or commit-ish) in the npm install command. The npm CLI clones the gist repository, installing dependencies and devDependencies if a prepare script exists. Accepts a gist ID or username/gistID input, and outputs the installed package in the node_modules directory.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
npm install gist:101a11beef
```

----------------------------------------

TITLE: Converting C int32_t to JavaScript Number in Node-API (C)
DESCRIPTION: Converts a C int32_t value to a JavaScript number. Takes environment, int32_t value, and returns a napi_value representing the JavaScript number.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_89

LANGUAGE: c
CODE:
```
napi_status napi_create_int32(napi_env env, int32_t value, napi_value* result)
```

----------------------------------------

TITLE: Retrieving Uint32 Value from JavaScript Number in Node-API
DESCRIPTION: Function to convert a JavaScript number to a C uint32_t primitive.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_122

LANGUAGE: c
CODE:
```
napi_status napi_get_value_uint32(napi_env env,
                                  napi_value value,
                                  uint32_t* result)
```

----------------------------------------

TITLE: Asynchronous Stream Method in Glob
DESCRIPTION: Method to stream glob results asynchronously.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/glob/README.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
g.stream()
```

----------------------------------------

TITLE: Implementing HTTPS module loading using ESM loader hooks
DESCRIPTION: Example showing how to enable importing JavaScript modules directly from HTTPS URLs. The hook fetches content from URLs starting with 'https://' and returns it as module source code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
// https-hooks.mjs
import { get } from 'node:https';

export function load(url, context, nextLoad) {
  // For JavaScript to be loaded over the network, we need to fetch and
  // return it.
  if (url.startsWith('https://')) {
    return new Promise((resolve, reject) => {
      get(url, (res) => {
        let data = '';
        res.setEncoding('utf8');
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => resolve({
          // This example assumes all network-provided JavaScript is ES module
          // code.
          format: 'module',
          shortCircuit: true,
          source: data,
        }));
      }).on('error', (err) => reject(err));
    });
  }

  // Let Node.js handle all other URLs.
  return nextLoad(url);
}
```

----------------------------------------

TITLE: Checking for DataView Type with napi_is_dataview in C
DESCRIPTION: This function checks if a JavaScript object is a DataView instance. It returns the result as a boolean, indicating whether the given value represents a JavaScript DataView object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_139

LANGUAGE: c
CODE:
```
napi_status napi_is_dataview(napi_env env, napi_value value, bool* result)
```

----------------------------------------

TITLE: Implementing Synchronous CSS Class Validator Plugin for PostCSS in JavaScript
DESCRIPTION: This snippet shows a synchronous implementation of the same CSS class validator plugin. It directly throws an error when an invalid class name is encountered. The plugin walks through rules and processes selectors synchronously, making it simpler but potentially less performant for large stylesheets.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_43

LANGUAGE: javascript
CODE:
```
let processor = (root) => {
    root.walkClasses((classNode) => {
        if (/.*[-_]/.test(classNode.value)) {
            let msg = "classes may not have underscores or dashes in them";
            throw root.error(msg, {
                index: classNode.sourceIndex,
                word: classNode.value
            });
        }
    });
};

const postcss = require("postcss");
const parser = require("postcss-selector-parser");
const selectorProcessor = parser(processor);
const plugin = postcss.plugin('classValidator', (options) => {
    return (root) => {
        root.walkRules(rule => {
            selectorProcessor.processSync(rule);
        });
    };
});
postcss(plugin()).process(`
.foo-bar {
  color: red;
}
`.trim(), {from: 'test.css'}).catch((e) => console.error(e.toString()));

// CssSyntaxError: classValidator: ./test.css:1:5: classes may not have underscores or dashes in them
//
// > 1 | .foo-bar {
//     |     ^
//   2 |   color: red;
//   3 | }
```

----------------------------------------

TITLE: File permissions and attributes with libuv in C
DESCRIPTION: Functions for checking and modifying file permissions and attributes, including access checks, chmod operations, and timestamp modifications.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/fs.rst#2025-04-23_snippet_10

LANGUAGE: C
CODE:
```
int uv_fs_access(uv_loop_t* loop, uv_fs_t* req, const char* path, int mode, uv_fs_cb cb)
int uv_fs_chmod(uv_loop_t* loop, uv_fs_t* req, const char* path, int mode, uv_fs_cb cb)
int uv_fs_fchmod(uv_loop_t* loop, uv_fs_t* req, uv_file file, int mode, uv_fs_cb cb)
int uv_fs_utime(uv_loop_t* loop, uv_fs_t* req, const char* path, double atime, double mtime, uv_fs_cb cb)
int uv_fs_futime(uv_loop_t* loop, uv_fs_t* req, uv_file file, double atime, double mtime, uv_fs_cb cb)
int uv_fs_lutime(uv_loop_t* loop, uv_fs_t* req, const char* path, double atime, double mtime, uv_fs_cb cb)
```

----------------------------------------

TITLE: Testing Instance Getter Property Descriptors
DESCRIPTION: Tests verifying that instance getters in ES6 classes are non-writable, non-enumerable, and configurable on the prototype
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/class-syntax-prototype-expected.txt#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
class A { get foo() { return 5; } };
descriptor(A.prototype, "foo").writable is undefined;
A.prototype.foo = 3;
A.prototype.foo is 5;
```

----------------------------------------

TITLE: Installing OpenSSL to Custom Location on Unix Systems
DESCRIPTION: Command for installing OpenSSL to a non-default location on Unix-based systems using the Configure script with custom prefix and openssldir options.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/INSTALL.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
$ ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl
```

----------------------------------------

TITLE: Testing Milliseconds Preservation in JavaScript Date Methods
DESCRIPTION: This code snippet tests whether the milliseconds component of a Date object is preserved when calling setHours(), setMinutes(), and setSeconds() methods without explicitly specifying milliseconds. It checks if the original millisecond value (1) is maintained after each operation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/date-preserve-milliseconds-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
PASS d.getMilliseconds() is 1
PASS d.getMilliseconds() is 1
PASS d.getMilliseconds() is 1
PASS d.getMilliseconds() is 1
PASS d.getMilliseconds() is 1
PASS d.getMilliseconds() is 1
PASS successfullyParsed is true

TEST COMPLETE
```

----------------------------------------

TITLE: Configuring Full ICU Support - Bash
DESCRIPTION: Enables Node.js to build with all ICU locales included by default, providing full ECMA-402 Intl support. Requires ICU development libraries to be available on the system. Command must be run from the top-level Node.js source directory before 'make'. Outputs configuration files for subsequent building.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_36

LANGUAGE: Bash
CODE:
```
./configure --with-intl=full-icu
```

----------------------------------------

TITLE: Handling REPL Exit Events
DESCRIPTION: Demonstrates how to handle the 'exit' event in a REPL instance when the user terminates the session.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
replServer.on('exit', () => {
  console.log('Received "exit" event from repl!');
  process.exit();
});
```

----------------------------------------

TITLE: Supporting Loading Entrypoint as URL in Node.js Module System
DESCRIPTION: This commit adds support for loading the entrypoint of a module as a URL, enhancing the flexibility of module loading in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_28

LANGUAGE: JavaScript
CODE:
```
import('file:///path/to/module.js')
```

----------------------------------------

TITLE: Testing Basic Promise Chain Functions
DESCRIPTION: Basic test functions using Promise chains with different return values and arrow functions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/get-possible-breakpoints-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
function foo(){ return Promise.resolve(); }
function boo(){ return Promise.resolve().then(() => 42); }
```

----------------------------------------

TITLE: Evaluating Undefined Falsiness in JavaScript Ternary Operator
DESCRIPTION: This JavaScript snippet tests the falsiness of `undefined` within a ternary operator. `undefined` is considered falsy in JavaScript, causing the expression to evaluate to the second value, `2`, as indicated by the log 'PASS undefined ? 1 : 2 is 2'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/kde/conditional-expected.txt#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
undefined ? 1 : 2
```

----------------------------------------

TITLE: Basic MockAgent Instantiation
DESCRIPTION: Shows how to create a basic MockAgent instance without any additional configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { MockAgent } from 'undici'

const mockAgent = new MockAgent()
```

----------------------------------------

TITLE: Defining callGenerator with active generator call - Node.js - JavaScript
DESCRIPTION: This JavaScript snippet defines the function callGenerator, which invokes and returns the result of generator(1). It demonstrates the scenario where a generator function is called, allowing a debugger to step into the generator upon invocation. There is an implicit dependency on a declared generator function named generator. The function takes no parameters and returns whatever generator(1) yields, suitable for analyzing generator entry and debugging execution flow in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/stepping-generator-parameters-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
function callGenerator() {
  return generator(1);#
}
```

----------------------------------------

TITLE: Promise Creation and Manual Resolution in Node.js (JavaScript)
DESCRIPTION: Declares a new Promise and exposes its resolve function via nextTest for later triggering. This technique is used for manual testing and external resolution of promises. Relies on the JavaScript Promises API; output is a promise object, and a reference to its resolver is assigned externally.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-expected.txt#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
var nextTest;\nvar testPromise = #new Promise(resolve => nextTest = resolve);\nasync function main() {
```

LANGUAGE: JavaScript
CODE:
```
var nextTest;\nvar testPromise = new Promise(resolve => nextTest #= resolve);\nasync function main() {
```

LANGUAGE: JavaScript
CODE:
```
var nextTest;\nvar testPromise = new Promise(resolve => nextTest = resolve#);\nasync function main() {
```

----------------------------------------

TITLE: Configuring Small-ICU (Minimal Locale) Support - Bash
DESCRIPTION: Builds Node.js with only English ICU data (small-icu), resulting in smaller binaries while retaining Intl API surface. No additional ICU download required. Full data can be added at runtime if needed. Run before building Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_38

LANGUAGE: Bash
CODE:
```
./configure --with-intl=small-icu
```

----------------------------------------

TITLE: Testing Array Spread Operation Function
DESCRIPTION: Function that tests array spread operations with an iterable object. Creates variables using spread syntax to test breakpoint locations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/array-spread-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
function testFunction() {
  var a = [_][...iterable];
  var b = [..._a, ...iterable, ...a];
}
```

----------------------------------------

TITLE: Creating a Debug Build with Ninja
DESCRIPTION: Command to configure and build Node.js in debug mode using Ninja. This produces a debug build instead of the default release build.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/building-node-with-ninja.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
./configure --ninja --debug && make
```

----------------------------------------

TITLE: Testing Basic Getter/Setter Object Declaration
DESCRIPTION: Tests the basic functionality of getters and setters using object literal syntax.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/property-getters-and-setters-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// Test results show:
// o1.b is 8
// o1.b is 11
```

----------------------------------------

TITLE: Scoped Package Initialization
DESCRIPTION: Shows how to initialize a new scoped package using npm init with default values
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/config.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
# accept all defaults, and create a package named "@foo/whatever",
# instead of just named "whatever"
npm init --scope=@foo --yes
```

----------------------------------------

TITLE: Complete SEA Configuration Example with Options
DESCRIPTION: Example JSON configuration for Single Executable Application preparation with all available options, including main script, output path, experimental warning control, snapshot usage, code cache, and assets.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_15

LANGUAGE: json
CODE:
```
{
  "main": "/path/to/bundled/script.js",
  "output": "/path/to/write/the/generated/blob.blob",
  "disableExperimentalSEAWarning": true, // Default: false
  "useSnapshot": false,  // Default: false
  "useCodeCache": true, // Default: false
  "assets": {  // Optional
    "a.dat": "/path/to/a.dat",
    "b.txt": "/path/to/b.txt"
  }
}
```

----------------------------------------

TITLE: Using promiseHooks.onSettled in CommonJS
DESCRIPTION: CommonJS version of registering a callback for when a promise is settled. The function receives the promise as an argument. Returns a function to stop the hook.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_16

LANGUAGE: cjs
CODE:
```
const { promiseHooks } = require('node:v8');

const stop = promiseHooks.onSettled((promise) => {});
```

----------------------------------------

TITLE: Retrieving Last Error Info with N-API in C
DESCRIPTION: This function retrieves extended information about the last error that occurred within the specified N-API environment. The returned structure (`napi_extended_error_info`) contains details like the error message and engine-specific data. The information is only valid until the next N-API call on the same environment, so it might need to be copied for later use. The `error_message` pointer within the structure points to a statically-defined string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_31

LANGUAGE: c
CODE:
```
napi_status
napi_get_last_error_info(node_api_basic_env env,
                         const napi_extended_error_info** result);
```

----------------------------------------

TITLE: Setting IPv6 Multicast Interface Using setMulticastInterface (Windows-style) - JavaScript
DESCRIPTION: Demonstrates configuring multicast interface on an IPv6 socket under Windows, using an interface number scope (e.g., '%2'). Bind to a port, then call 'setMulticastInterface' with the appropriate string. Dependencies: 'dgram', Windows network interface knowledge. Inputs: port, interface identifier string with numeric scope. Outcome: UDP socket's multicast packets sent using the specified interface.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
const socket = dgram.createSocket('udp6');\n\nsocket.bind(1234, () => {\n  socket.setMulticastInterface('::%2');\n});
```

----------------------------------------

TITLE: V8 Heap Code Statistics Example
DESCRIPTION: Shows the structure of heap code statistics object returned by getHeapCodeStatistics().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
{
  code_and_metadata_size: 212208,
  bytecode_and_metadata_size: 161368,
  external_script_source_size: 1410794,
  cpu_profiler_metadata_size: 0,
}
```

----------------------------------------

TITLE: Specifying CPU Architecture Compatibility
DESCRIPTION: Defines which CPU architectures the package supports using an array of architecture identifiers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_37

LANGUAGE: json
CODE:
```
{
  "cpu": [
    "x64",
    "ia32"
  ]
}
```

----------------------------------------

TITLE: Configuring Workspace Context with 'workspace' in npm
DESCRIPTION: Details the `--workspace` option (String, repeatable). This flag runs an npm command within the context of specific project workspaces, filtering execution to only those named or located at the provided paths. It can target workspace names, directory paths, or parent directory paths. For `npm init`, it can specify a non-existent folder to create a new workspace. This setting is not passed to child process environments.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_20

LANGUAGE: text
CODE:
```
#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option.

Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project.

This value is not exported to the environment for child processes.
```

----------------------------------------

TITLE: CommonJS Self-Reference Example
DESCRIPTION: Demonstrates self-referencing in CommonJS using require().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
const { something } = require('a-package/foo.js'); // Loads from ./foo.js.
```

----------------------------------------

TITLE: Promise Race Try-Catch
DESCRIPTION: Promise.race() implementation wrapped in try-catch block for error handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-promise-catch-prediction-expected.txt#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
caughtInTryPromiseRace (catch-prediction.js:279:18)
```

----------------------------------------

TITLE: Specifying Local Path Dependencies Using npm CLI
DESCRIPTION: Shows the various formats for specifying local path dependencies when using npm install commands. Local paths can be relative, absolute, or use home directory references.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_19

LANGUAGE: bash
CODE:
```
../foo/bar
~/foo/bar
./foo/bar
/foo/bar
```

----------------------------------------

TITLE: Testing Closure Name Shadowing by Parameter in JavaScript IIFE
DESCRIPTION: This IIFE is named `closure` but also accepts a parameter named `closure`. It's invoked with the argument `1`. Inside the function, it tests if the identifier `closure` refers to the parameter's value (`1`) and confirms that `closure` is not a property on `this`. This demonstrates that function parameters shadow the function's own name if they share the same identifier.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/named-function-expression-expected.txt#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
(function closure(closure) { return closure == 1 && !this.closure; })(1)
```

----------------------------------------

TITLE: Testing Arguments Mapping Behavior in Strict Mode JavaScript Functions
DESCRIPTION: Assesses how the arguments object is decoupled from named parameters in strict mode functions, ensuring changes to one do not affect the other. Includes scenarios with nested closures and local variables. All snippets are self-contained JavaScript functions accepting arguments, manipulating both arguments and parameters, and checking expected behaviors. Node.js or compatible browsers required.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/basic-strict-mode-expected.txt#2025-04-23_snippet_15

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; a = false; return a !== arguments[0]; })(true)
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; arguments[0] = false; return a !== arguments[0]; })(true)
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; a=false; return arguments; })(true)[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; arguments[0]=false; return a; })(true)
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; arguments[0]=true; return arguments; })(false)[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (){'use strict';  arguments[0]=true; return arguments; })(false)[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; arguments[0]=true; a=false; return arguments; })()[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; arguments[0]=false; a=true; return a; })()
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; arguments[0]=true; return arguments; })()[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (){'use strict';  arguments[0]=true; return arguments; })()[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; var local; (function (){local;})(); a = false; return a !== arguments[0]; })(true)
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; var local; (function (){local;})(); arguments[0] = false; return a !== arguments[0]; })(true)
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; var local; (function (){local;})(); a=false; return arguments; })(true)[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; var local; (function (){local;})(); arguments[0]=false; return a; })(true)
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; var local; (function (){local;})(); arguments[0]=true; return arguments; })(false)[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (){'use strict';  var local; (function (){local;})(); arguments[0]=true; return arguments; })(false)[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; var local; (function (){local;})(); arguments[0]=true; a=false; return arguments; })()[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; var local; (function (){local;})(); arguments[0]=true; return arguments; })()[0]
```

LANGUAGE: JavaScript
CODE:
```
(function (a){'use strict'; var local; (function (){local;})(); arguments[0]=false; a=true; return a; })()
```

----------------------------------------

TITLE: Opening a Directory with 'a+' Flag in Node.js
DESCRIPTION: This snippet demonstrates the platform-specific behavior of opening a directory using the 'a+' flag. On macOS and Linux, it results in an error, while on Windows and FreeBSD, it returns a file descriptor.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_122

LANGUAGE: javascript
CODE:
```
// macOS and Linux
fs.open('<directory>', 'a+', (err, fd) => {
  // => [Error: EISDIR: illegal operation on a directory, open <directory>]
});

// Windows and FreeBSD
fs.open('<directory>', 'a+', (err, fd) => {
  // => null, <fd>
});
```

----------------------------------------

TITLE: File and filesystem stats with libuv in C
DESCRIPTION: Functions for retrieving file and filesystem statistics. uv_fs_stat(), uv_fs_fstat(), and uv_fs_lstat() get file stats, while uv_fs_statfs() gets filesystem stats.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/fs.rst#2025-04-23_snippet_8

LANGUAGE: C
CODE:
```
int uv_fs_stat(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_fs_cb cb)
int uv_fs_fstat(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb)
int uv_fs_lstat(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_fs_cb cb)
int uv_fs_statfs(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_fs_cb cb)
```

----------------------------------------

TITLE: Configuring Client Key in PEM Format for npm Registry Access
DESCRIPTION: Shows how to set a client key in PEM format for accessing the npm registry. The key should be in PEM format with newlines replaced by the string "\n".
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/config.md#2025-04-23_snippet_8

LANGUAGE: ini
CODE:
```
key="-----BEGIN PRIVATE KEY-----\nXXXX\nXXXX\n-----END PRIVATE KEY-----"
```

----------------------------------------

TITLE: Function Returning Another Function in Node.js (JavaScript)
DESCRIPTION: Defines returnFunction, which returns the returnObject function. Used for testing passing and invoking functions as parameters and return values. Requires returnObject to be defined.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-expected.txt#2025-04-23_snippet_19

LANGUAGE: JavaScript
CODE:
```
function returnFunction() {\n  #return returnObject;\n}
```

LANGUAGE: JavaScript
CODE:
```
function returnFunction() {\n  return returnObject;#\n}
```

----------------------------------------

TITLE: Creating a Selector Node with postcss-selector-parser in JavaScript
DESCRIPTION: Instantiates an empty selector node using parser.selector. The result is an AST node representing a CSS selector, ready to be populated with children.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
parser.selector();
// => (empty)
```

----------------------------------------

TITLE: Adding 'flush' option to appendFile() functions in Node.js fs module
DESCRIPTION: This change introduces a new 'flush' option to the appendFile() functions in the Node.js fs module. It's marked as a minor semver change, indicating new functionality without breaking existing code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#2025-04-23_snippet_23

LANGUAGE: JavaScript
CODE:
```
fs.appendFile(file, data, { flush: true }, callback)
```

----------------------------------------

TITLE: Logging Key Material with Node.js TLS TLSSocket - JavaScript
DESCRIPTION: This code snippet demonstrates listening to the 'keylog' event on a tls.TLSSocket to capture and persist key material in NSS SSLKEYLOGFILE format for debugging or traffic decryption purposes. It appends the logged lines to an output file using Node.js streams. Dependencies include the 'fs' module for file writing and a tls.TLSSocket instance. The callback receives each new key line as a Buffer, to be written directly to the log file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
const logFile = fs.createWriteStream('/tmp/ssl-keys.log', { flags: 'a' });\n// ...\ntlsSocket.on('keylog', (line) => logFile.write(line));
```

----------------------------------------

TITLE: Using promiseHooks.onBefore in ECMAScript Modules
DESCRIPTION: Registers a callback function to be called before a promise continuation executes. The function receives the promise as an argument. Returns a function to stop the hook.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_17

LANGUAGE: mjs
CODE:
```
import { promiseHooks } from 'node:v8';

const stop = promiseHooks.onBefore((promise) => {});
```

----------------------------------------

TITLE: Creating a Duplex Stream using Pre-ES6 Constructor Pattern in Node.js
DESCRIPTION: Demonstrates how to create a Duplex stream using the pre-ES6 constructor pattern with util.inherits for inheritance. This approach is useful for older Node.js applications that don't use ES6 class syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_90

LANGUAGE: javascript
CODE:
```
const { Duplex } = require('node:stream');
const util = require('node:util');

function MyDuplex(options) {
  if (!(this instanceof MyDuplex))
    return new MyDuplex(options);
  Duplex.call(this, options);
}
util.inherits(MyDuplex, Duplex);
```

----------------------------------------

TITLE: Assignment and Redeclaration of Variables with Top-Level Await in REPL (console)
DESCRIPTION: Details interaction between top-level await and variable declaration/redeclaration in REPL. Demonstrates assignment, reassignment, and redeclaration errors using 'const'. No dependencies; expected input is JavaScript using top-level await and const declarations. Output showcases that 'const' redeclaration is disallowed, and reassignment works as standard assignment after initial declaration.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_13

LANGUAGE: console
CODE:
```
> const m = await Promise.resolve(123)
undefined
> m
123
> m = await Promise.resolve(234)
234
// redeclaring the constant does error
> const m = await Promise.resolve(345)
Uncaught SyntaxError: Identifier 'm' has already been declared
```

----------------------------------------

TITLE: Comparing '_' and 'a' Lexicographically in JavaScript
DESCRIPTION: This snippet tests the comparison between '_' (underscore) and 'a'. It expects `"_" < "a"` to be `true` because the underscore character's code point precedes that of the lowercase 'a'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/string-sort-expected.txt#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
"_" < "a"
```

----------------------------------------

TITLE: Including Non-ABI Stable V8 Header in C++
DESCRIPTION: Shows the `#include` directive for the V8 header (`v8.h`). Direct use of V8 APIs does not guarantee ABI stability across Node.js major versions and should be avoided if native addon compatibility across versions is a primary concern.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_4

LANGUAGE: cpp
CODE:
```
#include <v8.h>
```

----------------------------------------

TITLE: Converting C uint32_t to JavaScript Number in Node-API (C)
DESCRIPTION: Converts a C uint32_t value to a JavaScript number. Takes environment, uint32_t value, and returns a napi_value representing the JavaScript number.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_90

LANGUAGE: c
CODE:
```
napi_status napi_create_uint32(napi_env env, uint32_t value, napi_value* result)
```

----------------------------------------

TITLE: Swapping 32-bit Buffer Byte Order - Node.js
DESCRIPTION: Demonstrates the `buf.swap32()` method, which performs in-place byte order swapping on the buffer's contents, treating it as an array of unsigned 32-bit integers. This operation requires the buffer length to be a multiple of 4.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_74

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: <Buffer 01 02 03 04 05 06 07 08>

buf1.swap32();

console.log(buf1);
// Prints: <Buffer 04 03 02 01 08 07 06 05>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap32();
// Throws ERR_INVALID_BUFFER_SIZE.
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);

console.log(buf1);
// Prints: <Buffer 01 02 03 04 05 06 07 08>

buf1.swap32();

console.log(buf1);
// Prints: <Buffer 04 03 02 01 08 07 06 05>

const buf2 = Buffer.from([0x1, 0x2, 0x3]);

buf2.swap32();
// Throws ERR_INVALID_BUFFER_SIZE.
```

----------------------------------------

TITLE: Verifying Output Contains All Lines in GYP Tests
DESCRIPTION: Tests that an output string contains all of the specified lines or substrings. The test fails if any of the specified lines are missing from the output.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/gyp/docs/Testing.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
test.must_contain_all_lines(output, lines)
```

----------------------------------------

TITLE: Enabling Positional Options in Commander.js
DESCRIPTION: Demonstrates how to enable positional options to only look for program options before subcommands.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
program.enablePositionalOptions();
```

----------------------------------------

TITLE: Running Node.js with Wasm Modules Flag (Bash)
DESCRIPTION: Provides the command-line instruction to execute a Node.js ES module file (`index.mjs`) that imports a WebAssembly module. The `--experimental-wasm-modules` flag is necessary to enable this feature.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_15

LANGUAGE: bash
CODE:
```
node --experimental-wasm-modules index.mjs
```

----------------------------------------

TITLE: Running npm fund in a Standard Project
DESCRIPTION: Example output when running npm fund in a project with workspaces, showing the tree structure of dependencies looking for funding.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-fund.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npm fund
test-workspaces-fund@1.0.0
+-- https://example.com/a
| | `-- a@1.0.0
| `-- https://example.com/maintainer
|     `-- foo@1.0.0
+-- https://example.com/npmcli-funding
|   `-- @npmcli/test-funding
`-- https://example.com/org
    `-- bar@2.0.0
```

----------------------------------------

TITLE: Checking for Array Type with napi_is_array in C
DESCRIPTION: This function checks if a JavaScript value is an array. It implements the IsArray operation as defined in the ECMAScript specification and returns the result as a boolean.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_133

LANGUAGE: c
CODE:
```
napi_status napi_is_array(napi_env env, napi_value value, bool* result)
```

----------------------------------------

TITLE: Using createCommand in Commander.js
DESCRIPTION: Shows how to use the createCommand factory function to create a new command instead of using the 'new' keyword.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_39

LANGUAGE: javascript
CODE:
```
const { createCommand } = require('commander');
const program = createCommand();
```

----------------------------------------

TITLE: Testing Array.prototype.every() with Array Mutation in JavaScript
DESCRIPTION: These snippets test the every() method's behavior when the array is modified during iteration, including element removal, changing, and addition.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/array-every-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every(isBigEnoughAndPop)
```

LANGUAGE: javascript
CODE:
```
[12, 54, 18, 130, 44].every(isBigEnoughAndPop)
```

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every(isBigEnoughAndChange)
```

LANGUAGE: javascript
CODE:
```
[12, 54, 18, 130, 44].every(isBigEnoughAndChange)
```

LANGUAGE: javascript
CODE:
```
[12, 5, 8, 130, 44].every(isBigEnoughAndPush)
```

LANGUAGE: javascript
CODE:
```
[12, 54, 18, 130, 44].every(isBigEnoughAndPush)
```

----------------------------------------

TITLE: Documenting CRL NextUpdate Field Error
DESCRIPTION: Error constant indicating an invalid time value in a Certificate Revocation List's nextUpdate field.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_68

LANGUAGE: markdown
CODE:
```
ERROR_IN_CRL_NEXT_UPDATE_FIELD
```

----------------------------------------

TITLE: Using promiseHooks.onSettled in ECMAScript Modules
DESCRIPTION: Registers a callback function to be called when a promise is resolved or rejected. The function receives the promise as an argument. Returns a function to stop the hook.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_15

LANGUAGE: mjs
CODE:
```
import { promiseHooks } from 'node:v8';

const stop = promiseHooks.onSettled((promise) => {});
```

----------------------------------------

TITLE: Registering Module Hooks with CommonJS
DESCRIPTION: Example showing how to register module customization hooks using CommonJS syntax. This demonstrates the basic setup for registering hooks in CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
// register-hooks.js
const { register } = require('node:module');
const { pathToFileURL } = require('node:url');
// Use module.register() to register asynchronous hooks in a dedicated thread.
register('./hooks.mjs', pathToFileURL(__filename));
```

----------------------------------------

TITLE: Handling the 'SIGCONT' Event in Node.js Readline
DESCRIPTION: Provides an example of handling the 'SIGCONT' event on a `readline.Interface` instance (`rl`). This event is emitted when a process, previously sent to the background via `Ctrl+Z` (`SIGTSTP`), is brought back to the foreground. The listener calls `rl.prompt()` to re-display the prompt and resume the input stream. Note: This event is not supported on Windows.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#2025-04-23_snippet_10

LANGUAGE: js
CODE:
```
rl.on('SIGCONT', () => {
  // `prompt` will automatically resume the stream
  rl.prompt();
});
```

----------------------------------------

TITLE: Creating Snapshot with Custom Serialization - Node.js Test - js
DESCRIPTION: Demonstrates using `t.assert.snapshot` with custom serializers provided via the options object. An array of functions can process the value before it is used for comparison or written to the snapshot file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_68

LANGUAGE: js
CODE:
```
test('snapshot test with custom serialization', (t) => {
  t.assert.snapshot({ value3: 3, value4: 4 }, {
    serializers: [(value) => JSON.stringify(value)],
  });
});
```

----------------------------------------

TITLE: Calling Aliased Function `call` with Context and Arguments in JavaScript
DESCRIPTION: Executes `myFunction` using an aliased `call` method (`aliasedCall`), setting the `this` context to `myObject` and passing `'arg1'` as an argument. This demonstrates aliasing `Function.prototype.call`. The output `[myObject, \"myFunction\", \"arg1\"]` confirms the context and argument were passed correctly.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/dfg-convert-this-dom-window-expected.txt#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
myFunction.aliasedCall(myObject, 'arg1')
```

----------------------------------------

TITLE: Basic EnvHttpProxyAgent Instantiation
DESCRIPTION: Shows two ways to instantiate EnvHttpProxyAgent - with and without explicit proxy configuration options.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/EnvHttpProxyAgent.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { EnvHttpProxyAgent } from 'undici'

const envHttpProxyAgent = new EnvHttpProxyAgent()
// or
const envHttpProxyAgent = new EnvHttpProxyAgent({ httpProxy: 'my.proxy.server:8080', httpsProxy: 'my.proxy.server:8443', noProxy: 'localhost' })
```

----------------------------------------

TITLE: Subscribing to Diagnostics Channel Events - Node.js (ESM)
DESCRIPTION: Demonstrates subscribing to a diagnostics channel using ES Module syntax. Requires the 'node:diagnostics_channel' module and assumes the use of at least Node.js v14.17.0. The code creates a diagnostics channel and registers an onMessage handler that synchronously receives messages whenever the channel is published to. Inputs are message objects and channel names; outputs are handled within the callback. Deprecated in recent Node versions in favor of diagnostics_channel.subscribe(name, onMessage).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_18

LANGUAGE: JavaScript (ESM)
CODE:
```
import diagnostics_channel from 'node:diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.subscribe((message, name) => {\n  // Received data\n});
```

----------------------------------------

TITLE: Testing Various Object Types in JavaScript
DESCRIPTION: This snippet tests object previews for arrays, regular expressions, empty objects, and Boolean.prototype, examining their internal properties and structure.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/object-preview-internal-properties-expected.txt#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
[1,2,3]
/123/
({})
Boolean.prototype
```

----------------------------------------

TITLE: Building Node.js on Unix/macOS with GCC
DESCRIPTION: Basic commands to build Node.js from source on Unix and macOS systems. This uses GCC 12 and the make build system with parallel jobs to improve build speed.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
export CXX=g++-12
./configure
make -j4
```

----------------------------------------

TITLE: Processing Selectors with PostCSS Selector Parser
DESCRIPTION: Shows how to use the Processor API to process selector strings, including synchronous operation, asynchronous operation with promises, normalization of whitespace, and working with PostCSS Rule nodes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_41

LANGUAGE: javascript
CODE:
```
const parser = require("postcss-selector-parser");
const processor = parser();

let result = processor.processSync(' .class');
console.log(result);
// =>  .class

// Asynchronous operation
let promise = processor.process(' .class').then(result => {
    console.log(result)
    // => .class
});

// To have the parser normalize whitespace values, utilize the options
result = processor.processSync('  .class  ', {lossless: false});
console.log(result);
// => .class

// For better syntax errors, pass a PostCSS Rule node.
const postcss = require('postcss');
rule = postcss.rule({selector: ' #foo    > a,  .class  '});
processor.process(rule, {lossless: false, updateSelector: true}).then(result => {
    console.log(result);
    // => #foo>a,.class
    console.log("rule:", rule.selector);
    // => rule: #foo>a,.class
})
```

----------------------------------------

TITLE: Signing the SEA Binary on macOS
DESCRIPTION: Re-signs the binary after injection on macOS using the codesign utility to ensure it remains executable.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_11

LANGUAGE: bash
CODE:
```
codesign --sign - hello
```

----------------------------------------

TITLE: Injecting SEA Blob on Windows with Postject (Command Prompt)
DESCRIPTION: Uses the postject utility to inject the preparation blob into the copied Node.js executable on Windows using Command Prompt with the required sentinel fuse.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_9

LANGUAGE: text
CODE:
```
npx postject hello.exe NODE_SEA_BLOB sea-prep.blob ^
    --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2
```

----------------------------------------

TITLE: Debugging Pause Point with Debugger Statement in JavaScript
DESCRIPTION: A simple JavaScript function with a debugger statement that serves as a pause point for the debugging test. This function represents the current execution context that can be restarted.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/restart-frame/fails-for-non-existant-index-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
(function foo() { #debugger; })();
```

----------------------------------------

TITLE: Stream Unpipe Event Handling
DESCRIPTION: Example showing how to handle the 'unpipe' event when a Readable stream stops piping to a Writable stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
const writer = getWritableStreamSomehow();
const reader = getReadableStreamSomehow();
writer.on('unpipe', (src) => {
  console.log('Something has stopped piping into the writer.');
  assert.equal(src, reader);
});
reader.pipe(writer);
reader.unpipe(writer);
```

----------------------------------------

TITLE: Executing npm-repo Command in Bash
DESCRIPTION: This snippet shows the syntax for running the npm-repo command. It can be used with or without package names. If no package name is provided, it searches for a package.json file in the current directory.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-repo.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm repo [<pkgname> [<pkgname> ...]]
```

----------------------------------------

TITLE: Viewing the Node.js Man Page - Bash
DESCRIPTION: This command opens the man page for Node.js documentation. Requires man installed and man page built at doc/node.1. Accepts no input; displays the formatted manual in the terminal.
SOURCE: https://github.com/nodejs/node/blob/main/BUILDING.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
man doc/node.1

```

----------------------------------------

TITLE: Getting Available Memory in C using libuv
DESCRIPTION: Gets the amount of free memory that is still available to the process (in bytes), taking into account any limits imposed by the OS.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/misc.rst#2025-04-23_snippet_20

LANGUAGE: C
CODE:
```
uint64_t uv_get_available_memory(void)
```

----------------------------------------

TITLE: Node-API Extended Error Information Structure (C)
DESCRIPTION: Defines a structure containing detailed error information for Node-API operations, including error messages and codes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_18

LANGUAGE: C
CODE:
```
typedef struct {
  const char* error_message;
  void* engine_reserved;
  uint32_t engine_error_code;
  napi_status error_code;
} napi_extended_error_info;
```

----------------------------------------

TITLE: Testing Deep Serialization of Object with Duplicate References via CDP Runtime Methods
DESCRIPTION: Tests the serialization of a complex object containing duplicate references to other objects and arrays, including a self-reference, using `Runtime.evaluate`. This demonstrates how the deep serialization handles shared structures and circular references, typically by assigning object IDs and referencing them.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/deep-serialization-value-expected.txt#2025-04-23_snippet_33

LANGUAGE: javascript
CODE:
```
(()=>{const foo={a: []}; const bar=[1,2]; const result={1: foo, 2: foo, 3: bar, 4: bar}; result.self=result; return result; })()
```

----------------------------------------

TITLE: Customizing REPL Output Writer in CommonJS
DESCRIPTION: Demonstrates how to customize REPL output formatting by implementing a custom writer function that converts output to uppercase using CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/repl.md#2025-04-23_snippet_18

LANGUAGE: cjs
CODE:
```
const repl = require('node:repl');

const r = repl.start({ prompt: '> ', eval: myEval, writer: myWriter });

function myEval(cmd, context, filename, callback) {
  callback(null, cmd);
}

function myWriter(output) {
  return output.toUpperCase();
}
```

----------------------------------------

TITLE: Monitoring Worker Thread Creation in Node.js
DESCRIPTION: Shows how to subscribe to the 'worker_threads' event, which is emitted when a new thread is created. The event provides access to the Worker object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/diagnostics_channel.md#2025-04-23_snippet_47

LANGUAGE: javascript
CODE:
```
worker_threads
```

----------------------------------------

TITLE: Running Node.js Benchmark Groups with run.js (Console)
DESCRIPTION: Utilize the 'benchmark/run.js' script to execute a specified group or multiple groups of benchmarks. This provides a more structured way to run related benchmarks compared to executing individual files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-and-running-benchmarks.md#_snippet_3

LANGUAGE: Console
CODE:
```
node benchmark/run.js assert
```

LANGUAGE: Console
CODE:
```
node benchmark/run.js assert async_hooks
```

----------------------------------------

TITLE: Running Individual Node.js Benchmarks (Console)
DESCRIPTION: Execute a single Node.js benchmark file directly using the 'node' command. This is useful for quick checks or debugging. You can optionally pass parameters in the format 'key=value' to run only a subset of the benchmark's configurations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/writing-and-running-benchmarks.md#_snippet_2

LANGUAGE: Console
CODE:
```
node benchmark/buffers/buffer-tostring.js
```

LANGUAGE: Console
CODE:
```
node benchmark/buffers/buffer-tostring.js len=1024
```

----------------------------------------

TITLE: Referencing Thread-safe Function in Event Loop
DESCRIPTION: Prevents the main thread's event loop from exiting until the thread-safe function is destroyed. This API can only be called from the main thread.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_217

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status
napi_ref_threadsafe_function(node_api_basic_env env, napi_threadsafe_function func);
```

----------------------------------------

TITLE: SQLite Session Extension Implementation in Node.js
DESCRIPTION: Demonstrates basic usage of SQLite Session Extension for tracking and applying changes between databases. Shows creation of source and target databases, session management, and changeset application.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#2025-04-23_snippet_14

LANGUAGE: JavaScript
CODE:
```
const sourceDb = new DatabaseSync(':memory:');
const targetDb = new DatabaseSync(':memory:');

sourceDb.exec('CREATE TABLE data(key INTEGER PRIMARY KEY, value TEXT)');
targetDb.exec('CREATE TABLE data(key INTEGER PRIMARY KEY, value TEXT)');

const session = sourceDb.createSession();

const insert = sourceDb.prepare('INSERT INTO data (key, value) VALUES (?, ?)');
insert.run(1, 'hello');
insert.run(2, 'world');

const changeset = session.changeset();
targetDb.applyChangeset(changeset);
```

----------------------------------------

TITLE: Testing JSON.stringify with Full Character Set in JavaScript
DESCRIPTION: This function tests how JSON.stringify handles a string containing the full character set. It verifies proper escaping and encoding of special characters in the JSON output.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/run-json-stringify-expected.txt#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
function (jsonObject){
        return jsonObject.stringify(fullCharsetString);
    }
```

----------------------------------------

TITLE: Testing Invalid Prefix Increment in JavaScript
DESCRIPTION: Attempts a prefix increment operation on the result of the Number() constructor. This is an invalid left-hand side expression, and the test verifies that it throws a ReferenceError.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/modify-non-references-expected.txt#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
++Number()
```

----------------------------------------

TITLE: Output: console.info with %s formatter and Symbol
DESCRIPTION: Shows the structured argument list captured when calling `console.info('%s', Symbol('Test symbol'))`. The Symbol is converted to its string representation 'Symbol(Test symbol)' for the %s formatter.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-formatter-expected.txt#2025-04-23_snippet_14

LANGUAGE: text
CODE:
```
info[
    [0] : {
        type : string
        value : %s
    }
    [1] : {
        type : string
        value : Symbol(Test symbol)
    }
]
```

----------------------------------------

TITLE: Testing Number.toPrecision() with Invalid Precision (0)
DESCRIPTION: Tests the `toPrecision()` method with an invalid precision argument of 0. It verifies that a RangeError is thrown, as the precision must be between 1 and 100.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/number-toprecision-expected.txt#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
(1234.567).toPrecision(0)
```

----------------------------------------

TITLE: Filtering MockCallHistory by Hash in JavaScript
DESCRIPTION: Filters MockCallHistoryLog entries by their URL hash fragment using either a regular expression or a string match.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockCallHistory.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
mockAgent.getCallHistory()?.filterCallsByPath(/hash/)
mockAgent.getCallHistory()?.filterCallsByPath('#hash')
```

----------------------------------------

TITLE: Basic Usage of minimatch Function for Path Matching in JavaScript
DESCRIPTION: Shows how to use the main minimatch export to test if a file path matches a given pattern with options.
SOURCE: https://github.com/nodejs/node/blob/main/deps/minimatch/README.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
var isJS = minimatch(file, '*.js', { matchBase: true })
```

----------------------------------------

TITLE: Testing prototype chain relationships with Object.create()
DESCRIPTION: Tests that verify Object.create() properly establishes prototype chain relationships, including setting Array.prototype as the prototype and creating objects with null prototype.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/Object-create-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
PASS Object.getPrototypeOf(Object.create(Array.prototype)) is Array.prototype
PASS Object.getPrototypeOf(Object.create(null)) is null
```

----------------------------------------

TITLE: JavaScript Code Style Modernization
DESCRIPTION: Multiple changes across Node.js codebase replacing var declarations with let/const as part of code modernization efforts. This improves code quality and follows current JavaScript best practices.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V13.md#2025-04-23_snippet_16



----------------------------------------

TITLE: Defining Node.js Error ERR_TLS_RENEGOTIATION_FAILED (Text)
DESCRIPTION: Used when a TLS renegotiation request has failed for an unspecified reason. This error was added in v9.0.0 and removed in v10.0.0.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_34

LANGUAGE: text
CODE:
```
ERR_TLS_RENEGOTIATION_FAILED
```

----------------------------------------

TITLE: Context-Aware Addon Initialization
DESCRIPTION: Example of initializing a context-aware addon using NODE_MODULE_INITIALIZER macro, allowing the addon to be loaded multiple times in different contexts.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_3

LANGUAGE: cpp
CODE:
```
using namespace v8;

extern "C" NODE_MODULE_EXPORT void
NODE_MODULE_INITIALIZER(Local<Object> exports,
                        Local<Value> module,
                        Local<Context> context) {
  /* Perform addon initialization steps here. */
}
```

----------------------------------------

TITLE: Creating custom promisified functions in Node.js (ESM)
DESCRIPTION: Demonstrates how to create custom promisified functions using util.promisify.custom symbol in ECMAScript modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_48

LANGUAGE: JavaScript
CODE:
```
import { promisify } from 'node:util';

function doSomething(foo, callback) {
  // ...
}

doSomething[promisify.custom] = (foo) => {
  return getPromiseSomehow();
};

const promisified = promisify(doSomething);
console.log(promisified === doSomething[promisify.custom]);
// prints 'true'
```

----------------------------------------

TITLE: Terminate at Breakpoint Response
DESCRIPTION: JSON response structure when execution is terminated at a breakpoint. Shows the error format with code -32000 indicating terminated execution.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/terminate-execution-on-pause-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    error : {
        code : -32000
        message : Execution was terminated
    }
    id : <messageId>
}
```

----------------------------------------

TITLE: Basic String Comparison Tests
DESCRIPTION: Tests comparing string literals and variables using comparison operators with different control flow structures including while loops, for loops, and if statements.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-less-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
var k = 0; while (("a"<"b")) if (k++) return true; return false;
```

LANGUAGE: javascript
CODE:
```
var k = 0; for (; ("a"<="b"); ) if (k++) return true; return false;
```

LANGUAGE: javascript
CODE:
```
return ("a"<"b") || 1;
```

LANGUAGE: javascript
CODE:
```
if (("a"<=letterA) && 1) return true; return false;
```

----------------------------------------

TITLE: Parsing Two-Line Script with Source URL at End
DESCRIPTION: Tests parsing of a two-line script with a source URL at the end. The script contains a function declaration on the first line and a sourceURL comment on the second line.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/script-on-after-compile-expected.txt#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
function foo11(){}
//# sourceURL=end1.js
```

----------------------------------------

TITLE: Defining Node.js Error ERR_NO_LONGER_SUPPORTED (Text)
DESCRIPTION: Thrown when a Node.js API is called in a manner that is no longer supported, such as using the deprecated signature `Buffer.write(string, encoding, offset[, length])`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_24

LANGUAGE: text
CODE:
```
ERR_NO_LONGER_SUPPORTED
```

----------------------------------------

TITLE: Demonstrating Brotli Command Options in Markdown
DESCRIPTION: Illustrates different ways to specify command options for the brotli utility, showing long-form, short-form, and coalesced options.
SOURCE: https://github.com/nodejs/node/blob/main/deps/brotli/c/tools/brotli.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
* "`--decompress --stdout --suffix=.b`" works the same as
* "`-d -s -S .b`" and
* "`-dsS .b`"
```

----------------------------------------

TITLE: Getting Error Message with Buffer in Libuv
DESCRIPTION: Returns the error message for the given error code, storing the zero-terminated message in a user-supplied buffer. This prevents memory leaks when handling unknown error codes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/errors.rst#2025-04-23_snippet_2

LANGUAGE: c
CODE:
```
char* uv_strerror_r(int err, char* buf, size_t buflen)
```

----------------------------------------

TITLE: Result after defineValuePropertyForMethod in CommandLineAPI (JSON)
DESCRIPTION: Expected JSON response after invoking `defineValuePropertyForMethod` during CommandLineAPI evaluation testing in Node.js. This response shows a numeric result with a value of 14.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/clear-of-command-line-api-expected.txt#2025-04-23_snippet_5

LANGUAGE: plaintext
CODE:
```
defineValuePropertyForMethod()
```

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            description : 14
            type : number
            value : 14
        }
    }
}
```

----------------------------------------

TITLE: Result after defineAccessorPropertyForMethod in CommandLineAPI (JSON)
DESCRIPTION: Expected JSON response after invoking `defineAccessorPropertyForMethod` during CommandLineAPI evaluation testing in Node.js. This response shows a numeric result with a value of 14.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/clear-of-command-line-api-expected.txt#2025-04-23_snippet_11

LANGUAGE: plaintext
CODE:
```
defineAccessorPropertyForMethod()
```

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            description : 14
            type : number
            value : 14
        }
    }
}
```

----------------------------------------

TITLE: IPv6 Interface Name Example in C
DESCRIPTION: Example showing how to convert an interface index to an interface name using uv_if_indextoname(). This is useful for working with IPv6 scoped addresses.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/misc.rst#2025-04-23_snippet_12

LANGUAGE: c
CODE:
```
char ifname[UV_IF_NAMESIZE];
size_t size = sizeof(ifname);
uv_if_indextoname(sin6->sin6_scope_id, ifname, &size);
```

----------------------------------------

TITLE: Retrieving Supplementary Group IDs in Node.js
DESCRIPTION: Demonstrates the use of process.getgroups() to get an array of supplementary group IDs on POSIX platforms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#2025-04-23_snippet_50

LANGUAGE: JavaScript
CODE:
```
import process from 'node:process';

if (process.getgroups) {
  console.log(process.getgroups()); // [ 16, 21, 297 ]
}
```

LANGUAGE: JavaScript
CODE:
```
const process = require('node:process');

if (process.getgroups) {
  console.log(process.getgroups()); // [ 16, 21, 297 ]
}
```

----------------------------------------

TITLE: Testing Exception Handling in Strict Mode JavaScript
DESCRIPTION: This snippet checks the behavior of exception handling in strict mode, particularly focusing on variable assignments within catch blocks.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/basic-strict-mode-expected.txt#2025-04-23_snippet_20

LANGUAGE: JavaScript
CODE:
```
'use strict'; try { throw 1; } catch (e) { aGlobal = true; }
```

----------------------------------------

TITLE: Testing Runtime API without Agent Enabled in Node.js
DESCRIPTION: This snippet demonstrates the error response when trying to use Runtime API methods without enabling the Runtime agent.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/run-script-async-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    "error" : {
        "code" : -32000,
        "message" : "Runtime agent is not enabled"
    },
    "id" : "<messageId>"
}
```

----------------------------------------

TITLE: Parsing URLs with the Legacy API in ECMAScript modules
DESCRIPTION: Example showing how to parse a URL string using the legacy Node.js url.parse() method in ECMAScript modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import url from 'node:url';
const myURL =
  url.parse('https://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash');
```

----------------------------------------

TITLE: File system request utilities with libuv in C
DESCRIPTION: Utility functions for accessing information from file system request objects after operations complete.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/fs.rst#2025-04-23_snippet_13

LANGUAGE: C
CODE:
```
uv_fs_type uv_fs_get_type(const uv_fs_t* req)
ssize_t uv_fs_get_result(const uv_fs_t* req)
int uv_fs_get_system_error(const uv_fs_t* req)
void* uv_fs_get_ptr(const uv_fs_t* req)
const char* uv_fs_get_path(const uv_fs_t* req)
uv_stat_t* uv_fs_get_statbuf(uv_fs_t* req)
```

----------------------------------------

TITLE: Using promiseHooks.onAfter in CommonJS
DESCRIPTION: CommonJS version of registering a callback for after a promise continuation executes. The function receives the promise as an argument. Returns a function to stop the hook.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/v8.md#2025-04-23_snippet_20

LANGUAGE: cjs
CODE:
```
const { promiseHooks } = require('node:v8');

const stop = promiseHooks.onAfter((promise) => {});
```

----------------------------------------

TITLE: Testing Illegal Statements in Strict Mode JavaScript
DESCRIPTION: This snippet tests illegal statements like 'return', 'break', and 'continue' outside of their valid contexts in strict mode.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/basic-strict-mode-expected.txt#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
'use strict'; return
'use strict'; break
'use strict'; continue
'use strict'; for(;;)return
```

----------------------------------------

TITLE: Getting Error Message from Error Code in Libuv
DESCRIPTION: Returns the error message for the given error code. Note that this function leaks a few bytes of memory when called with an unknown error code.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/errors.rst#2025-04-23_snippet_1

LANGUAGE: c
CODE:
```
const char* uv_strerror(int err)
```

----------------------------------------

TITLE: Using minimatch.filter to Create a File Filtering Function in JavaScript
DESCRIPTION: Demonstrates how to create a filtering function with minimatch.filter that can be used with Array.filter to find files matching a specific pattern.
SOURCE: https://github.com/nodejs/node/blob/main/deps/minimatch/README.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
var javascripts = fileList.filter(minimatch.filter('*.js', { matchBase: true }))
```

----------------------------------------

TITLE: Testing Try-Finally Exception Handling in JavaScript
DESCRIPTION: This snippet demonstrates a test case for try-finally exception handling. It throws an exception within a try block and checks if the debugger pauses on the exception.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
try {
  throw 1;
} finally {
}
```

----------------------------------------

TITLE: Defining OpenSSL Error CERT_NOT_YET_VALID (Text)
DESCRIPTION: An OpenSSL error code indicating that a certificate is not yet valid because its 'notBefore' date is in the future relative to the current time.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_44

LANGUAGE: text
CODE:
```
CERT_NOT_YET_VALID
```

----------------------------------------

TITLE: Checking Map Iterator in JavaScript
DESCRIPTION: Shows how to use util.types.isMapIterator() to check if a value is an iterator returned for a built-in Map instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_81

LANGUAGE: javascript
CODE:
```
const map = new Map();
util.types.isMapIterator(map.keys());  // Returns true
util.types.isMapIterator(map.values());  // Returns true
util.types.isMapIterator(map.entries());  // Returns true
util.types.isMapIterator(map[Symbol.iterator]());  // Returns true
```

----------------------------------------

TITLE: Logging ES6 Module Function Output After Patching
DESCRIPTION: JSON output showing the result of a console.log call from the same function after the module code was patched via live editing.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/es6-module-liveedit-expected.txt#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
    type : string
    value : patched module1
}
```

----------------------------------------

TITLE: Testing Object Evaluation in Node.js Debugger
DESCRIPTION: Tests the evaluation of an object, expecting a response with the object type, class name, description, and an object ID for further interaction.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/evaluate-on-call-frame-return-values-expected.txt#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
    id : <messageId>
    result : {
        result : {
            className : Object
            description : Object
            objectId : <objectId>
            type : object
        }
    }
}
```

----------------------------------------

TITLE: Parsing Two-Line Script with Source URL
DESCRIPTION: Tests parsing of a two-line script with a source URL. The script contains a function declaration on the first line and a sourceURL comment on the second line.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/script-on-after-compile-expected.txt#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
function foo3(){}
//# sourceURL=twoline.js

```

----------------------------------------

TITLE: Filtering MockCallHistory by Port in JavaScript
DESCRIPTION: Filters MockCallHistoryLog entries by their port using either a regular expression or a string match, including empty strings for no port.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockCallHistory.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
mockAgent.getCallHistory()?.filterCallsByPort(/3000/)
mockAgent.getCallHistory()?.filterCallsByPort('3000')
mockAgent.getCallHistory()?.filterCallsByPort('')
```

----------------------------------------

TITLE: Node.js Environment Variable Definition
DESCRIPTION: Addition of NODE_PRESERVE_SYMLINKS environment variable that provides the same functionality as the --preserve-symlinks command line flag for handling symbolic links.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V7.md#2025-04-23_snippet_14

LANGUAGE: Shell
CODE:
```
NODE_PRESERVE_SYMLINKS
```

----------------------------------------

TITLE: Creating a Minimatch Object from the Minimatch Class in JavaScript
DESCRIPTION: Shows how to instantiate a Minimatch object using the Minimatch class constructor with a pattern and optional settings.
SOURCE: https://github.com/nodejs/node/blob/main/deps/minimatch/README.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
var Minimatch = require('minimatch').Minimatch
var mm = new Minimatch(pattern, options)
```

----------------------------------------

TITLE: Directory Iteration Using fsPromises.opendir
DESCRIPTION: Example of asynchronously iterating through directory contents using Node.js fs promises API with async iteration.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
import { opendir } from 'node:fs/promises';

try {
  const dir = await opendir('./');
  for await (const dirent of dir)
    console.log(dirent.name);
} catch (err) {
  console.error(err);
}
```

----------------------------------------

TITLE: Manually Creating Standard Release Proposal Branch
DESCRIPTION: Create a new Git branch for a standard release proposal (`vx.y.z-proposal`), branching off the current staging branch (`upstream/v1.x-staging`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/releases.md#_snippet_16

LANGUAGE: Bash
CODE:
```
git checkout -b v1.2.3-proposal upstream/v1.x-staging
```

----------------------------------------

TITLE: Git Configuration for Fetching All V8 Branches
DESCRIPTION: Git configuration to add to your .git/config file that enables fetching all branch-heads and tags from the V8 repository.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/README.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
fetch = +refs/branch-heads/*:refs/remotes/branch-heads/*
fetch = +refs/tags/*:refs/tags/*
```

----------------------------------------

TITLE: Installing gyp-next with pipx
DESCRIPTION: Example output of installing gyp-next using pipx, showing successful installation to a new virtual environment.
SOURCE: https://github.com/nodejs/node/blob/main/tools/gyp/README.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
Installing to a new venv 'gyp-next'
  installed package gyp-next 0.13.0, installed using Python 3.10.6
  These apps are now globally available
    - gyp
done! ✨ 🌟 ✨
```

----------------------------------------

TITLE: Configuring UDP Multicast Options in libuv
DESCRIPTION: Functions to configure various multicast options including loop, TTL, and interface settings for UDP sockets.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/udp.rst#2025-04-23_snippet_4

LANGUAGE: C
CODE:
```
int uv_udp_set_multicast_loop(uv_udp_t* handle, int on)

int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl)

int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr)
```

----------------------------------------

TITLE: Breakpoint Location Data in WebAssembly Script
DESCRIPTION: JSON object showing the location details of a breakpoint set in a WebAssembly function, including column number, line number, and script identifier.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/wasm-remove-breakpoint-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    columnNumber : 39
    lineNumber : 0
    scriptId : <scriptId>
}
```

----------------------------------------

TITLE: FormData with Blob Streaming in Undici
DESCRIPTION: Example demonstrating how to use FormData with Blob streams for file uploads using Undici.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
import { openAsBlob } from 'node:fs'

const file = await openAsBlob('./big.csv')
const body = new FormData()
body.set('file', file, 'big.csv')

await fetch('http://example.com', { method: 'POST', body })
```

----------------------------------------

TITLE: File System Watch AbortSignal Support
DESCRIPTION: Addition of AbortSignal support to the fs.watch() method, allowing for cancellation of file watching operations. This represents a SEMVER-MINOR change.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
fs.watch(path, { signal: abortSignal })
```

----------------------------------------

TITLE: Using a Native Add-on from JavaScript
DESCRIPTION: Example JavaScript code showing how to require and use a native add-on that exports a sayHello function created with napi_create_function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_170

LANGUAGE: js
CODE:
```
const myaddon = require('./addon');
myaddon.sayHello();
```

----------------------------------------

TITLE: Validating Report Files with validate Function
DESCRIPTION: Function that validates the schema of a diagnostic report file at the specified filepath. Throws an exception if validation fails.
SOURCE: https://github.com/nodejs/node/blob/main/test/common/README.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
validate(filepath)
```

----------------------------------------

TITLE: Handling Promise Rejection with Try-Catch
DESCRIPTION: Tests promise rejection handling using try-catch blocks and async/await, demonstrating caught versus uncaught rejection scenarios.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-promise-catch-prediction-expected.txt#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
rejectAfterDelayInPromiseConstructor (catch-prediction.js:10:9)
awaitInTry (catch-prediction.js:215:18)
runWithResolution (catch-prediction.js:427:22)
```

----------------------------------------

TITLE: Implementing C++ Style Comments
DESCRIPTION: Demonstrates the preferred comment style using C++ single-line comments. Comments should start with uppercase and end with a period.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/cpp-style-guide.md#2025-04-23_snippet_0

LANGUAGE: cpp
CODE:
```
// A single-line comment.

// Multi-line comments
// should also use C++
// style comments.
```

----------------------------------------

TITLE: Copying Node Executable on Windows
DESCRIPTION: Creates a copy of the Node.js executable with a custom name using Node.js itself on Windows systems, ensuring it has the required .exe extension.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_4

LANGUAGE: text
CODE:
```
node -e "require('fs').copyFileSync(process.execPath, 'hello.exe')"
```

----------------------------------------

TITLE: Testing setBreakpoint Error Response in Node.js Debugger
DESCRIPTION: Checks the error response when calling setBreakpoint before enabling the debugger. The error message confirms that the debugger agent is not enabled.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/set-breakpoint-before-enabling-expected.txt#2025-04-23_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "code": -32000,
  "message": "Debugger agent is not enabled"
}
```

----------------------------------------

TITLE: Installing git-node CLI Tool for Landing PRs
DESCRIPTION: Commands to install the @node-core/utils package globally and use the git-node command to land a pull request.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/collaborator-guide.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm install -g @node-core/utils
git node land $PRID
```

----------------------------------------

TITLE: Getting Reference Value in Node-API (C)
DESCRIPTION: Retrieves the JavaScript value associated with a reference. Returns NULL if the reference is no longer valid.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_58

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_get_reference_value(napi_env env,
                                                 napi_ref ref,
                                                 napi_value* result);
```

----------------------------------------

TITLE: Using notDeepStrictEqual in ES Modules
DESCRIPTION: Demonstrates how to use assert.notDeepStrictEqual() method in ES Modules format to test for deep strict inequality between objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#2025-04-23_snippet_32

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

assert.notDeepStrictEqual({ a: 1 }, { a: '1' });
// OK
```

----------------------------------------

TITLE: Chaining registerHooks in Node.js (CommonJS)
DESCRIPTION: Shows how to chain multiple hooks using the registerHooks method in CommonJS modules. The hooks are executed in a last-in, first-out (LIFO) order.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
// entrypoint.cjs
const { registerHooks } = require('node:module');

const hook1 = { /* implementation of hooks */ };
const hook2 = { /* implementation of hooks */ };
// hook2 run before hook1.
registerHooks(hook1);
registerHooks(hook2);
```

----------------------------------------

TITLE: Defining OpenSSL Error INVALID_PURPOSE (Text)
DESCRIPTION: An OpenSSL error indicating that the certificate presented cannot be used for the purpose currently being validated (e.g., trying to use a client certificate for server authentication).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#2025-04-23_snippet_60

LANGUAGE: text
CODE:
```
INVALID_PURPOSE
```

----------------------------------------

TITLE: Basic Process Spawn Configuration in Node.js
DESCRIPTION: Default configuration object for spawning child processes showing the basic options for current working directory and environment variables.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
const defaults = {
  cwd: undefined,
  env: process.env,
};
```

----------------------------------------

TITLE: Testing Property Access on 'this' in Strict Mode JavaScript
DESCRIPTION: This snippet tests property access on 'this' in strict mode for different types of values.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/basic-strict-mode-expected.txt#2025-04-23_snippet_1

LANGUAGE: JavaScript
CODE:
```
testThisDotAccess.call('a string')
testThisDotAccess.call(null)
testThisDotAccess.call(undefined)
testThisDotAccess.call(true)
testThisDotAccess.call(false)
testThisDotAccess.call(1)
```

----------------------------------------

TITLE: Recursive Function Stack Trace - testAny
DESCRIPTION: Stack trace showing synchronous recursive function calls with 'any' strategy, displaying multiple recursive calls to fact function
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/continue-to-location-target-call-frames-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
fact (test.js:16:2)
(anonymous) (expr.js:0:0)

fact (test.js:18:2)
fact (test.js:17:14)
fact (test.js:17:14)
fact (test.js:17:14)
(anonymous) (expr.js:0:0)
```

----------------------------------------

TITLE: Testing Number and String Comparisons in JavaScript
DESCRIPTION: Test cases comparing number 0 with string 'a' and other values using comparison operators. Tests include different combinations of logical operators and control structures to verify expected behavior.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-less-expected.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
return (0<"a");
```

LANGUAGE: javascript
CODE:
```
if ((0<="a")) return true; return false;
```

LANGUAGE: javascript
CODE:
```
var k = 0; while ((0<"a")) if (k++) return true; return false;
```

----------------------------------------

TITLE: Handling Fatal Exceptions in Node-API
DESCRIPTION: Function to trigger an 'uncaughtException' in JavaScript for unrecoverable async errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_46

LANGUAGE: c
CODE:
```
napi_status napi_fatal_exception(napi_env env, napi_value err);
```

----------------------------------------

TITLE: Checking DataView in JavaScript
DESCRIPTION: Demonstrates the use of util.types.isDataView() to check if a value is a built-in DataView instance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#2025-04-23_snippet_69

LANGUAGE: javascript
CODE:
```
const ab = new ArrayBuffer(20);
util.types.isDataView(new DataView(ab));  // Returns true
util.types.isDataView(new Float64Array());  // Returns false
```

----------------------------------------

TITLE: Recursively Walking All Container Nodes with walk() in JavaScript
DESCRIPTION: Illustrates selectors.walk(callback) to recursively visit all descendant nodes in the AST. The callback receives each node and its index. Like each(), this method is safe to use while mutating the container's nodes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/postcss-selector-parser/API.md#2025-04-23_snippet_35

LANGUAGE: javascript
CODE:
```
selectors.walk((selector, index) => {
    // all nodes
});
```

----------------------------------------

TITLE: Module Preloading Flag Implementation
DESCRIPTION: Addition of -r/--require flags for preloading modules before program execution. This feature allows modules to be loaded automatically when Node.js starts.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_IOJS.md#2025-04-23_snippet_20

LANGUAGE: JavaScript
CODE:
```
node -r ./preload.js main.js
```

----------------------------------------

TITLE: Testing String.split with Case Insensitive Regex in JavaScript
DESCRIPTION: This snippet demonstrates how to use JavaScript's String.split() function with a case-insensitive regular expression to separate a string at both lowercase and uppercase instances of a character. No external dependencies are required. The string '1s2S3' is split using /s/i, leading to an array with ['1', '2', '3'], which is then converted to a string and compared to the expected result. This validates that the 'i' flag is correctly making the split operation ignore case of the character 's'.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/string-split-ignore-case-expected.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
"PASS \"1s2S3\".split(/s/i).toString() is \"1,2,3\""
"PASS successfullyParsed is true"

"TEST COMPLETE"
```

----------------------------------------

TITLE: Testing Numeric Comparisons with Logical AND
DESCRIPTION: Test cases for comparing numeric values using the AND operator in various control structures.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/comparison-operators-greater-expected.txt#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
var k = 0;
while ((0>=0) && 1) if (k++) return true;
return false;
```

----------------------------------------

TITLE: Closing Handle Scopes in Node-API
DESCRIPTION: Function to close a handle scope. Must be called in reverse order of creation. Returns napi_ok on success.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#2025-04-23_snippet_50

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_close_handle_scope(napi_env env,
                                                napi_handle_scope scope);
```

----------------------------------------

TITLE: Overriding Exit Handling in Commander.js
DESCRIPTION: Shows how to override the default exit behavior of Commander.js and implement custom error handling using try-catch.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_41

LANGUAGE: javascript
CODE:
```
program.exitOverride();

try {
  program.parse(process.argv);
} catch (err) {
  // custom processing...
}
```

----------------------------------------

TITLE: Network Port String Support Enhancement
DESCRIPTION: Implementation allowing server.listen() to accept port numbers as strings. This is a minor semver change that adds flexibility to the port specification.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_IOJS.md#2025-04-23_snippet_19

LANGUAGE: JavaScript
CODE:
```
server.listen({ port: "1234" })
```

----------------------------------------

TITLE: Running Node.js Test Suite on Unix/macOS
DESCRIPTION: Commands to configure and run the full Node.js test suite, including code linting, on Unix-based systems.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
./configure && make -j4 test
```

----------------------------------------

TITLE: Testing console.groupEnd Method
DESCRIPTION: This code tests the console.groupEnd method which closes a console group previously created. It shows the parameter structure passed to the method when called.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/console-formatter-expected.txt#2025-04-23_snippet_31

LANGUAGE: javascript
CODE:
```
console.groupEnd()
```

----------------------------------------

TITLE: Debugger Script Source Modification Result
DESCRIPTION: JSON response from the Debugger.setScriptSource API call showing a successful modification of the source code during runtime.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/es6-module-liveedit-expected.txt#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
    status : Ok
}
```

----------------------------------------

TITLE: WebSocket Connection Opening with undici:websocket:open Channel
DESCRIPTION: Demonstrates monitoring successful WebSocket connection establishment.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:websocket:open').subscribe(({ address, protocol, extensions }) => {
  console.log(address) // address, family, and port
  console.log(protocol) // negotiated subprotocols
  console.log(extensions) // negotiated extensions
})
```

----------------------------------------

TITLE: Setting Breakpoint in Dynamic JavaScript Function
DESCRIPTION: Defines a dynamic function with a breakpoint set before a console.log statement. This allows for debugging and inspection of the function's execution.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/regress-crbug-481896-expected.txt#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
this.dynamic = function dynamic() { 
  #console.log("> dynamic");  // Break
}
```

----------------------------------------

TITLE: Compiling a new V8 fuzzer with Ninja
DESCRIPTION: Command to compile a newly created fuzzer in V8 using Ninja build system, targeting a specific debug configuration.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/fuzzer/README.md#2025-04-23_snippet_0

LANGUAGE: Bash
CODE:
```
ninja -j 1000 -C out/x64.debug/v8_simple_foo_fuzzer
```

----------------------------------------

TITLE: DNS Server Configuration in Node.js
DESCRIPTION: Demonstrates the DNS API usage for setting DNS servers, which can cause process crashes if called while a DNS query is in progress.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_IOJS.md#2025-04-23_snippet_17

LANGUAGE: JavaScript
CODE:
```
dns.setServers()
```

----------------------------------------

TITLE: Creating Writable Stream using ES6 Class
DESCRIPTION: Example showing how to create a Writable stream by extending the base class using ES6 class syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#2025-04-23_snippet_73

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

class MyWritable extends Writable {
  constructor(options) {
    // Calls the stream.Writable() constructor.
    super(options);
    // ...
  }
}
```

----------------------------------------

TITLE: Starting a signal handler in libuv
DESCRIPTION: Starts the signal handle with the given callback function, watching for the specified signal number. The callback will be invoked when the signal is received.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/docs/src/signal.rst#2025-04-23_snippet_1

LANGUAGE: c
CODE:
```
int uv_signal_start(uv_signal_t* signal, uv_signal_cb cb, int signum)
```

----------------------------------------

TITLE: Testing Class Expression Syntax
DESCRIPTION: Demonstrates class expression usage including anonymous classes and class expressions with inheritance.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/class-syntax-name-expected.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
(class A {
  constructor() {
    this.base = A;
  }
});

class A {};
(class B extends A {
  constructor() {
    super();
    this.base = A;
    this.derived = B;
  }
})
```

----------------------------------------

TITLE: Creating a new Undici Agent instance
DESCRIPTION: Constructor for creating a new Undici Agent instance with optional configuration parameters. The Agent allows dispatching requests to multiple different origins.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Agent.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
new undici.Agent([options])
```

----------------------------------------

TITLE: Testing Number.toPrecision() with Precision 1 (Exponential Notation)
DESCRIPTION: Tests the `toPrecision()` method on 1234.567 with a precision argument of 1. It verifies that the output uses exponential notation "1e+3".
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/fast/js/number-toprecision-expected.txt#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
(1234.567).toPrecision(1)
```

----------------------------------------

TITLE: Logging ES6 Module Function Output Before Patching
DESCRIPTION: JSON output showing the result of a console.log call from a function in an ES6 module before live editing was applied.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/es6-module-liveedit-expected.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
    type : string
    value : module1
}
```

----------------------------------------

TITLE: Platform Support Implementation Code - Internal Header Reference
DESCRIPTION: References the internal header file containing function prototypes that need to be implemented for new Unix platforms.
SOURCE: https://github.com/nodejs/node/blob/main/deps/uv/SUPPORTED_PLATFORMS.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
src/unix/internal.h
```

----------------------------------------

TITLE: Updating V8 Source Code
DESCRIPTION: Commands to keep your local V8 repository up to date by pulling the latest changes and syncing dependencies with gclient.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
git pull origin
gclient sync
```

----------------------------------------

TITLE: Testing Multiple Promise Then Chains
DESCRIPTION: Shows the call chain for a more complex Promise chain with multiple .then() calls and multiple function invocations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/async-stack-created-frame-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
foo1 (test.js:10:2)
-- Promise.then --
promiseThenThen (test.js:37:14)
(anonymous) (expr.js:0:0)

foo1 (test.js:10:2)
-- Promise.then --
promiseThenThen (test.js:38:14)
(anonymous) (expr.js:0:0)

foo2 (test.js:14:2)
-- Promise.then --
promiseThenThen (test.js:37:25)
(anonymous) (expr.js:0:0)
```

----------------------------------------

TITLE: Instantiating an Immediately Running Async Function - JavaScript
DESCRIPTION: Executes an immediately-invoked async function, returning its unresolved Promise object. Demonstrates how async functions always return Promises. Input: none; Output: Promise pending resolution. Used to test generator-based async syntax.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/runtime/remote-object-expected.txt#2025-04-23_snippet_39

LANGUAGE: JavaScript
CODE:
```
(async function(){})()
```

----------------------------------------

TITLE: Testing Class Expression Assignment
DESCRIPTION: Tests assigning class expressions to variables, including inheritance and scope validation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/class-syntax-name-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
var VarA = class A { constructor() {} };
var VarB = class B extends VarA {
  constructor() {
    super();
    this.base = VarA;
    this.derived = B;
    this.derivedVar = VarB;
  }
};
```

----------------------------------------

TITLE: Using Eval to Create a Function Accessing Outer Scope in JavaScript
DESCRIPTION: This snippet demonstrates using `eval` to create an anonymous function expression. An outer scope variable `z` is defined with the value 6. The `eval` executes a string containing the function expression definition, which accesses `z`. The resulting function is assigned to `x` and called with 3 and 4. The test verifies that the function created via `eval` can correctly access variables from its surrounding lexical scope. The surrounding text indicates this test expects the result to be 13 (3 + 4 + 6).
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/webkit/named-function-expression-expected.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
var z = 6; var x = eval('(function(a,b){ return a + b + z; })'); x(3,4)
```