TITLE: Defining a simple FastAPI app - Python
DESCRIPTION: This is the simplest possible FastAPI application. It imports the FastAPI class, creates an application instance, and defines a GET path operation for the root URL ('/') that returns a JSON message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating Hero Endpoint in FastAPI with SQLModel
DESCRIPTION: This FastAPI endpoint handles the creation of a new hero. It receives a `HeroCreate` model for input validation, uses it to create a `Hero` database model instance, saves it to the database via a SQLModel session, and returns the created hero, serialized according to the `HeroPublic` model specified in `response_model`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_16

LANGUAGE: Python
CODE:
```
@app.post("/heroes/", response_model=HeroPublic)
def create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):
    db_hero = Hero.model_validate(hero)
    session.add(db_hero)
    session.commit()
    session.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application - Python
DESCRIPTION: Defines a minimal FastAPI application instance and sets up two basic GET endpoints: a root path and an item path that accepts an integer path parameter and an optional string query parameter. Demonstrates using type hints for automatic data validation and documentation. Includes both synchronous (`def`) and asynchronous (`async def`) versions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/he/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining Multiple User Models in FastAPI
DESCRIPTION: This snippet defines three distinct Pydantic models for a user entity: UserIn (for receiving input, including password), UserOut (for sending output, excluding password), and UserInDB (for database representation, including a hashed password). It includes a basic FastAPI application demonstrating how to receive UserIn, process it (simulated hashing), store it as UserInDB, and return UserOut.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel


class UserIn(BaseModel):
    username: str
    password: str
    email: str
    full_name: Optional[str] = None


class UserOut(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None


class UserInDB(BaseModel):
    username: str
    hashed_password: str
    email: str
    full_name: Optional[str] = None


app = FastAPI()

def fake_password_hasher(password: str):
    return "supersecret" + password

def fake_save_user(user_in: UserInDB):
    return user_in


@app.post("/user/", response_model=UserOut)
async def create_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    stored_user_in_db = fake_save_user(user_in_db)
    return stored_user_in_db
```

----------------------------------------

TITLE: Creating Async FastAPI App Python
DESCRIPTION: This Python code is similar to the basic example but uses `async def` for the route handler functions. This is suitable when the handler function needs to perform asynchronous operations like database calls or external API requests using libraries that support `async`/`await`. It requires an ASGI server (like Uvicorn) to run.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/index.md#_snippet_2

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating Simple FastAPI Application - Python
DESCRIPTION: Provides example code for a basic FastAPI application script (`main.py`) with two GET endpoints: a root path (`/`) and an item path (`/items/{item_id}`) demonstrating path and query parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Initializing Basic FastAPI App and Endpoints (Python)
DESCRIPTION: Defines a basic FastAPI application instance and sets up two synchronous GET endpoints: the root ('/') and an item endpoint ('/items/{item_id}'). It demonstrates path parameters ('item_id') and optional query parameters ('q').
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

```

----------------------------------------

TITLE: Defining Pydantic Model for Request Body in Python
DESCRIPTION: Defines a Pydantic class `Item` inheriting from `BaseModel` with standard Python type hints for attributes, representing the structure and types of the expected JSON request body. Attributes with default values (like `None`) are considered optional.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_1

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Declaring Request Body Parameter (Python)
DESCRIPTION: Shows how to declare a parameter in a FastAPI path operation function with a type hint corresponding to a Pydantic model (`Item`). FastAPI recognizes this and expects a request body matching the model's structure, automatically handling parsing, validation, and providing the data as the parameter value.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def create_item(item: Item):
```

----------------------------------------

TITLE: Declaring Pydantic Model Request Body (Python)
DESCRIPTION: This snippet shows how to declare a request body parameter `item` using a previously defined Pydantic model `Item` in a FastAPI path operation function. FastAPI uses the model for automatic request body parsing, validation, and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining Optional Query Params (FastAPI, Python)
DESCRIPTION: Shows how to make a query parameter (`q`) optional in FastAPI by setting its default value to `None`. Using `Optional[str]` provides type hints for editor support, while FastAPI relies on the `= None` assignment to determine optionality.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running a FastAPI Development Server (Bash)
DESCRIPTION: This command runs the FastAPI application using the `fastapi dev` command-line interface. It starts a development server (Uvicorn by default) that watches for code changes and automatically reloads the application. The argument `main.py` specifies the file containing the FastAPI application instance (assuming it's named `app`). Requires the `fastapi` and `uvicorn` libraries installed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Bash
CODE:
```
fastapi dev main.py
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn Console
DESCRIPTION: This console command starts the FastAPI application using Uvicorn. It specifies the main module (`main`) and the application instance (`app`), and uses the `--reload` flag for development convenience, restarting the server on code changes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/websockets.md#_snippet_2

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Example APIRouter Path Operation - Python
DESCRIPTION: Provides a simple inline example of a path operation defined using an `APIRouter` instance. It shows the `@router.get` decorator with a path parameter and an asynchronous function definition, representative of operations within a router module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_5

LANGUAGE: Python
CODE:
```
@router.get("/{item_id}")
async def read_item(item_id: str):
    ...
```

----------------------------------------

TITLE: Defining Python Types and Pydantic Models (Python)
DESCRIPTION: Demonstrates the use of standard Python type hints for function parameters and defines a data model using Pydantic's BaseModel, showing how data structures with validation are declared in a way compatible with FastAPI. Requires the `datetime` standard library and the `pydantic` library.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application (Python)
DESCRIPTION: This snippet shows the minimal code required to create a simple FastAPI application. It imports the `FastAPI` class, creates an application instance, and defines a root path (`/`) using the `@app.get("/")` decorator with an asynchronous path operation function that returns a simple JSON dictionary. Requires the `fastapi` library installed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining Function With Basic Type Hints - Python
DESCRIPTION: Demonstrates adding basic string type hints (`str`) to function parameters. This enables code editors to provide autocompletion and type checking, improving developer productivity and reducing errors.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Defining FastAPI Endpoints and Pydantic Model - Python
DESCRIPTION: Defines a basic FastAPI application, including a Pydantic model `Item` for request body validation and serialization. It sets up three endpoints: a root GET, a GET for items with path and query parameters, and a PUT for items demonstrating how to accept a request body using the defined Pydantic model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Injecting Current User into Path Operation
DESCRIPTION: Illustrates how to declare a path operation parameter typed with the `User` model and use `Depends(get_current_user)` to automatically inject the fully resolved user object into the function, simplifying endpoint logic.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/users/me/")
async def read_users_me(current_user: User = Depends(get_current_user)): # hl[31]
    return current_user
```

----------------------------------------

TITLE: Declaring Simple Path Parameter in FastAPI Python
DESCRIPTION: This snippet shows the basic syntax for declaring a path parameter in a FastAPI path operation using Python. The value from the URL path will be passed to the function as an argument with the same name.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id):
```

----------------------------------------

TITLE: Defining and Using Basic Dependency in FastAPI
DESCRIPTION: This snippet shows how to define a simple dependency as a Python function and then use `fastapi.Depends` to inject its return value into a path operation function parameter. The dependency function itself can accept parameters like query or path parameters, which FastAPI will automatically resolve.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI

# Define the dependency function. It behaves like a small path operation.
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}

app = FastAPI()

@app.get("/items/")
# Declare the dependency in a path operation function using Annotated and Depends
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    # The result of common_parameters is available in the 'commons' parameter
    return commons
```

----------------------------------------

TITLE: Declaring Response Model via Return Type Annotation - FastAPI Python
DESCRIPTION: This snippet defines a Pydantic model `Item` and uses it directly as the function's return type annotation (`-> Item`) for a FastAPI path operation. FastAPI uses this annotation to validate, document, and filter the response data based on the `Item` model structure.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    price: float
    tags: list[str] = []


app = FastAPI()


@app.get("/items/")
async def read_items() -> list[Item]:
    return [
        {"name": "Foo", "price": 42},
        {"name": "Bar", "price": "baz"},
    ]
```

----------------------------------------

TITLE: Example Path Operation Using Current User Dependency
DESCRIPTION: Shows a complete, concise example of a FastAPI path operation function that relies on the `get_current_user` dependency to obtain the authenticated user object, demonstrating how endpoint code becomes cleaner.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#_snippet_5

LANGUAGE: python
CODE:
```
@app.get("/users/me/") # hl[30]
async def read_users_me(current_user: User = Depends(get_current_user)): # hl[31]
    return current_user # hl[32]
```

----------------------------------------

TITLE: Define and Use Nested Pydantic Models - Python
DESCRIPTION: Shows how to define a Pydantic model (`Image`) and then use it as the type for an attribute (`image: Image | None`) within another Pydantic model (`Item`). This allows defining structured nested JSON objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Image(BaseModel): # hl[7]
    url: str # hl[8]
    name: str # hl[9]

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: set[str] = set()
    image: Image | None = None # hl[18]

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Creating Basic FastAPI App Python
DESCRIPTION: This Python code defines a basic FastAPI application instance and registers two GET endpoints. The first endpoint returns a simple JSON message, and the second takes a path parameter (`item_id`) and an optional query parameter (`q`), returning them as JSON. It uses standard Python synchronous function definitions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/index.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application with GET Routes (Python)
DESCRIPTION: This snippet demonstrates how to create a minimal FastAPI application. It shows importing the FastAPI class, creating an app instance, and defining two GET endpoints ('/' and '/items/{item_id}') using the `@app.get` decorator. It illustrates handling path parameters with type hints and optional query parameters, returning JSON responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fa/docs/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Adding Pydantic Model and PUT Endpoint (Python)
DESCRIPTION: Modifies the FastAPI application to include a Pydantic `BaseModel` for data validation and a PUT endpoint ('/items/{item_id}') that accepts an `Item` object as a request body. Demonstrates data modeling, request body handling, and type validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}

```

----------------------------------------

TITLE: Running the FastAPI app - Console
DESCRIPTION: This command starts the FastAPI development server using the `fastapi dev` command. It watches the specified file (`main.py`) for changes and reloads the server automatically.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: console
CODE:
```
$ <font color="#4E9A06">fastapi</font> dev <u style="text-decoration-style:solid">main.py</u>
```

LANGUAGE: console
CODE:
```
  <span style="background-color:#009485"><font color="#D3D7CF"> FastAPI </font></span>  Starting development server 🚀

             Searching for package file structure from directories
             with <font color="#3465A4">__init__.py</font> files
             Importing from <font color="#75507B">/home/user/code/</font><font color="#AD7FA8">awesomeapp</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> module </font></span>  🐍 main.py

     <span style="background-color:#007166"><font color="#D3D7CF"> code </font></span>  Importing the FastAPI app object from the module with
             the following code:

             <u style="text-decoration-style:solid">from </u><u style="text-decoration-style:solid"><b>main</b></u><u style="text-decoration-style:solid"> import </u><u style="text-decoration-style:solid"><b>app</b></u>

      <span style="background-color:#007166"><font color="#D3D7CF"> app </font></span>  Using import string: <font color="#3465A4">main:app</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Server started at <font color="#729FCF"><u style="text-decoration-style:solid">http://127.0.0.1:8000</u></font>
   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Documentation at <font color="#729FCF"><u style="text-decoration-style:solid">http://127.0.0.1:8000/docs</u></font>

      <span style="background-color:#007166"><font color="#D3D7CF"> tip </font></span>  Running in development mode, for production use:
             <b>fastapi run</b>

             Logs:

     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Will watch for changes in these directories:
             <b>[</b><font color="#4E9A06">&apos;/home/user/code/awesomeapp&apos;</font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Uvicorn running on <font color="#729FCF"><u style="text-decoration-style:solid">http://127.0.0.1:8000</u></font> <b>(</b>Press CTRL+C
             to quit<b>)</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started reloader process <b>[</b><font color="#34E2E2"><b>383138</b></font><b>]</b> using WatchFiles
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started server process <b>[</b><font color="#34E2E2"><b>383153</b></font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Waiting for application startup.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Application startup complete.
```

----------------------------------------

TITLE: Instantiating Pydantic Models - Python
DESCRIPTION: Demonstrates how to create instances of a Pydantic BaseModel. It shows instantiation using direct keyword arguments and also using dictionary unpacking (**) which is common for data loaded from sources like JSON request bodies. Requires the Pydantic model definition from the previous snippet.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Installing FastAPI and Standard Dependencies
DESCRIPTION: This command installs the FastAPI library along with standard dependencies like Uvicorn (for the server) and other common packages, enabling you to run the basic examples shown later. Ensure you are in a virtual environment before running this command.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Importing FastAPI Request Parameter Functions - Python
DESCRIPTION: This Python snippet demonstrates the standard way to import all the primary request parameter functions (`Body`, `Cookie`, `File`, `Form`, `Header`, `Path`, `Query`) directly from the `fastapi` package. These functions are essential for defining how data is extracted from different parts of an incoming HTTP request within FastAPI route handlers or dependencies. No external dependencies are required beyond the `fastapi` library itself.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/parameters.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Body, Cookie, File, Form, Header, Path, Query
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn Console
DESCRIPTION: This console command is used to start the FastAPI application locally using the Uvicorn server. It specifies the Python module (`main`), the FastAPI application instance within that module (`app`), and enables the `--reload` flag for automatic server restart upon code changes, which is useful during development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: console
CODE:
```
uvicorn main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
<span style="color: green;">INFO</span>:     Started reloader process [28720]
<span style="color: green;">INFO</span>:     Started server process [28722]
<span style="color: green;">INFO</span>:     Waiting for application startup.
<span style="color: green;">INFO</span>:     Application startup complete.
```

----------------------------------------

TITLE: Define Response Model with Python Return Type - Python
DESCRIPTION: Defines a Pydantic model for the response data and uses a Python type hint for the function's return value to indicate the expected response structure. FastAPI uses this annotation for validation, documentation, and filtering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: str) -> Item:
    return {"name": "Foo", "price": 42}
```

----------------------------------------

TITLE: Running the FastAPI Application with Uvicorn - Console
DESCRIPTION: Command to start the FastAPI application using the Uvicorn ASGI server. It specifies the Python module (`main`) and the application instance (`app`). The `--reload` flag enables hot-reloading for development purposes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/he/docs/index.md#_snippet_3

LANGUAGE: Console
CODE:
```
$ uvicorn main:app --reload
```

----------------------------------------

TITLE: Example Standard Python List Type Hint
DESCRIPTION: Provides a simple, standalone example demonstrating the standard Python syntax for type hinting a variable as a list of strings using `List[str]` from the `typing` module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import List

my_list: List[str]
```

----------------------------------------

TITLE: Filtering Output Using Inherited Return Type Annotation - FastAPI Python
DESCRIPTION: This snippet demonstrates filtering output by using Pydantic model inheritance. It defines `BaseUser`, `UserIn` (inheriting `BaseUser` and adding password), and `UserOut` (inheriting `BaseUser`). The path operation is annotated with `UserOut` as the return type (`-> UserOut`) but returns a `UserIn` object. FastAPI uses the `UserOut` annotation to filter the response, providing both tooling support and data filtering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr


class BaseUser(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None


class UserIn(BaseUser):
    password: str


class UserOut(BaseUser):
    pass


app = FastAPI()


@app.post("/users/", response_model=UserOut)
async def create_user(user: UserIn) -> UserOut:
    return user
```

----------------------------------------

TITLE: Raising HTTPException in FastAPI Path Operation (Python)
DESCRIPTION: Demonstrates raising a HTTPException with a specific status code (404 Not Found) and detail message when a requested resource, like an item with an unknown ID, is not found. This instructs FastAPI to return the corresponding HTTP error response to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

@app.get("/items/{item_id}")
def read_item(item_id: str):
    # Example check for a non-existent item
    if item_id != "foo":
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": "The Foo Wrestlers"}
```

----------------------------------------

TITLE: Implementing OAuth2 Password Bearer Security in FastAPI
DESCRIPTION: Configures a FastAPI application to use the OAuth2 Password Bearer flow. It initializes `OAuth2PasswordBearer` with the client's token submission URL (`tokenUrl="token"`) and uses this object as a dependency (`Depends`) in a path operation. This makes FastAPI expect an `Authorization: Bearer <token>` header and automatically extracts the token string for use in the route handler.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token") # Refers to hl[8] in the source file

@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)): # Refers to hl[12] in the source file
    return {"token": token}
```

----------------------------------------

TITLE: Using Pydantic Model Attributes in FastAPI Endpoint (Full Example)
DESCRIPTION: Demonstrates a complete FastAPI endpoint that accepts a Pydantic `Item` model as a request body, accesses its attributes, potentially performs calculations, and returns the processed data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None


app = FastAPI()


@app.post("/items/")
async def create_item(item: Item):
    item_dict = item.dict()
    if item.tax:
        price_with_tax = item.price + item.tax
        item_dict.update({"price_with_tax": price_with_tax})
    return item_dict
```

----------------------------------------

TITLE: Creating a Hero Record
DESCRIPTION: Defines a FastAPI POST endpoint `/heroes/` that accepts a `Hero` model in the request body. It adds the hero to the database session, commits it, refreshes the object to get the assigned ID, and returns the created hero.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.post("/heroes/")
def create_hero(*, session: SessionDep, hero: Hero):
    session.add(hero)
    session.commit()
    session.refresh(hero)
    return hero
```

----------------------------------------

TITLE: Accessing Pydantic Model Attribute (Python)
DESCRIPTION: This snippet illustrates accessing the `price` attribute of the `item` Pydantic model object within a FastAPI endpoint. It is used to demonstrate editor support like autocompletion and type checking based on the declared model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item.price
```

----------------------------------------

TITLE: Applying GT and LE Numeric Validations to Path Parameter - FastAPI - Python
DESCRIPTION: This example demonstrates applying multiple numeric validations, `gt=0` (greater than 0) and `le=5` (less than or equal to 5), to the integer `item_id` path parameter using `Path`. This restricts the valid range for the path parameter to values greater than 0 and less than or equal to 5. It requires importing `Path`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import Path

def read_items(item_id: int = Path(gt=0, le=5)): # (1)!
```

----------------------------------------

TITLE: Writing Basic FastAPI Tests with TestClient Python
DESCRIPTION: This snippet demonstrates how to write a basic test file (`test_main.py`) for a FastAPI application located in a separate file (`main.py`). It imports the `TestClient` and the `app` object using a relative import, creates a client instance, defines a `pytest` test function, and makes a GET request to the app's endpoint. Requires the app file to be in the same package.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

# Assuming 'app' is in a 'main.py' file in the same directory/package
from .main import app

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Mixed Required, Default, and Optional Query Parameters (Python)
DESCRIPTION: This snippet demonstrates defining a route with a mix of query parameters: one required (`needy`), one with a default value (`skip`), and one explicitly optional (`limit`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_user_item(
    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None
):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item
```

----------------------------------------

TITLE: Installing Packages with pip Console
DESCRIPTION: This command installs specified Python packages directly into the active virtual environment using `pip`. The example installs FastAPI with its standard dependencies. Ensure the virtual environment is activated before running this command.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_10

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Writing Extended FastAPI Tests with TestClient Python
DESCRIPTION: This snippet provides examples of testing the extended FastAPI app with multiple endpoints and header requirements. It demonstrates testing successful requests with required headers, testing requests with invalid or missing headers (checking for 400/422 status codes), testing POST requests with JSON bodies and headers, and testing path parameters. Shows how to pass headers and JSON data to the `TestClient`. Requires the extended app and `pytest`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/testing.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

# Assuming 'app' is in a 'main.py' file in the same directory/package
from .main import app

client = TestClient(app)

def test_read_items():
    response = client.get("/items/", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}

def test_read_items_bad_token():
    response = client.get("/items/", headers={"X-Token": "invalid-token"})
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}

def test_read_nonexistent_item():
    response = client.get("/items/baz/", headers={"X-Token": "fake-super-secret-token"})
    # This endpoint doesn't exist, so expect 404
    assert response.status_code == 404

def test_create_item():
    response = client.post(
        "/items/",
        headers={"X-Token": "fake-super-secret-token"},
        json={"name": "Socks", "price": 10.0},
    )
    assert response.status_code == 200
    assert response.json() == {
        "item": {"name": "Socks", "price": 10.0},
        "message": "Item created",
    }

def test_create_item_bad_token():
    response = client.post(
        "/items/",
        headers={"X-Token": "invalid-token"},
        json={"name": "Socks", "price": 10.0},
    )
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}

def test_create_item_no_token():
     response = client.post(
        "/items/",
        json={"name": "Socks", "price": 10.0},
    )
     # Expecting 422 if X-Token is missing and required by Header()
     assert response.status_code == 422

def test_read_user():
    user_id = "testuser"
    response = client.get(f"/users/{user_id}")
    assert response.status_code == 200
    assert response.json() == {"user_id": user_id}
```

----------------------------------------

TITLE: Defining FastAPI App with Path/Query/Body (Python)
DESCRIPTION: This Python code defines a FastAPI application with routes for the root path (`/`), an item path (`/items/{item_id}`) with a GET operation accepting path/query parameters, and the same item path with a PUT operation accepting path parameters and a request body defined by a Pydantic `Item` model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining a Pydantic BaseModel - Python
DESCRIPTION: Introduces Pydantic models, showing how to define a data model by inheriting from `BaseModel` and defining fields with type hints. Pydantic uses these hints for data validation, serialization, and more.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "John Doe"
    signup_ts: datetime | None = None
    friends: list[int] = []
```

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "John Doe"
    signup_ts: Optional[datetime] = None
    friends: List[int] = []
```

----------------------------------------

TITLE: Defining Basic Pydantic Model in Python
DESCRIPTION: Defines a Pydantic model named `Image` to represent structured data. It includes fields for `url` (a required string) and `name` (an optional string), providing data validation and structure definition.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
class Image(BaseModel):
    url: str
    name: str | None = None
```

----------------------------------------

TITLE: Installing ASGI Server (Uvicorn) - Console
DESCRIPTION: Command to install an ASGI server like Uvicorn, which is necessary to run a FastAPI application. The `[standard]` extra includes commonly used dependencies for the server.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/he/docs/index.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Define Response Model with response_model Parameter - Python
DESCRIPTION: Uses the `response_model` parameter in the path operation decorator to specify the expected response structure, typically a Pydantic model. This is useful when the function's actual return type doesn't exactly match the desired output model but you want FastAPI to handle validation and filtering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float

app = FastAPI()

@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: str):
    # Function returns a dict, but response_model is Item
    return {"name": "Foo", "description": "A very nice Item", "price": 42}
```

----------------------------------------

TITLE: Using response_model to Filter Output - FastAPI Python
DESCRIPTION: This snippet defines a FastAPI path operation that accepts a `UserIn` model as input and uses the `response_model` parameter set to `UserOut`. Even though the function returns the full `UserIn` object, FastAPI uses `UserOut` to filter the response, ensuring only the fields defined in `UserOut` (excluding the password) are included.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr


class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None


class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None


app = FastAPI()


@app.post("/users/", response_model=UserOut)
async def create_user(user: UserIn):
    return user
```

----------------------------------------

TITLE: Defining a Dependency Function - Python
DESCRIPTION: Defines a Python function `common_parameters` intended for use as a dependency. It accepts optional query parameters `q` (string), `skip` (integer with default 0), and `limit` (integer with default 100). It returns a dictionary containing these parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Main Application Setup and Including Routers - Python FastAPI
DESCRIPTION: This snippet shows the central 'main' file of the FastAPI application. It imports FastAPI, creates the main app instance, optionally sets up global dependencies applied to all routes, imports the separate router modules, and finally includes the APIRouter instances from those modules into the main application using `app.include_router()`. This combines the distributed path operations into a single application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

from .dependencies import get_token_header
from .routers import items, users

app = FastAPI(dependencies=[Depends(get_token_header)])


@app.get("/")
async def root():
    return {"message": "Hello Bigger Applications!"}


app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Defining an Async FastAPI Path Operation (Python)
DESCRIPTION: Shows how to define a FastAPI path operation function using `async def`. This allows the path operation to perform asynchronous operations using `await` (like calling a database or external API), making the server more efficient by not blocking while waiting for I/O.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Return Full Input Object Before Filtering - Python
DESCRIPTION: Shows the function returning the original input object (`user_in`), which contains the password. This return is handled by FastAPI's `response_model` filtering mechanism, ensuring only fields defined in `UserOut` (specified via `response_model`) are included in the final response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

app = FastAPI()

@app.post("/user/", response_model=UserOut)
async def create_user(user_in: UserIn):
    # ... create user in DB etc.
    return user_in
```

----------------------------------------

TITLE: Implementing Partial Data Update with FastAPI PATCH and Pydantic (Python)
DESCRIPTION: This snippet illustrates the core process for performing a partial update using the HTTP PATCH method in FastAPI. It involves retrieving the current item data, creating a Pydantic model instance from it, generating an update dictionary from the input model using `model_dump(exclude_unset=True)` to include only fields explicitly set by the user, creating an updated model instance by copying the stored model and applying the update dictionary with `model_copy(update=...)`, and finally encoding the updated model using `jsonable_encoder` for storage.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-updates.md#_snippet_1

LANGUAGE: Python
CODE:
```
stored_item_data = items.get(item_id)
if stored_item_data is None:
    raise HTTPException(status_code=404, detail="Item not found")

stored_item_model = Item(**stored_item_data)
update_data = item.model_dump(exclude_unset=True)
updated_item = stored_item_model.model_copy(update=update_data)
items[item_id] = jsonable_encoder(updated_item)
return updated_item
```

----------------------------------------

TITLE: Testing Basic FastAPI App with TestClient Python
DESCRIPTION: This snippet demonstrates how to create a simple FastAPI application and test it using `fastapi.testclient.TestClient` and `pytest`. It shows importing the FastAPI app, creating a client instance, defining a `test_` prefixed function, making a GET request using the client, and asserting the response status code and JSON body. Requires `pytest` and `httpx`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/testing.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}

client = TestClient(app)

def test_read_root():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Running FastAPI Development Server - Console
DESCRIPTION: Executes the FastAPI development server using the `fastapi dev` command, targeting the `main.py` file. This command automatically detects the FastAPI app and starts the Uvicorn server with auto-reload enabled for development. The output shows the local serving address and documentation URLs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_3

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Calling an Awaitable Function (Python)
DESCRIPTION: This snippet shows how to call a function that is designed to be awaited. The `await` keyword pauses the execution of the current `async def` function until the awaited function completes, allowing other tasks to run in the meantime. This is typically used for I/O-bound operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_3

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Defining Separate Input and Output Pydantic Models - FastAPI Python
DESCRIPTION: This snippet defines two distinct Pydantic models: `UserIn` for input (including the `password` field) and `UserOut` for output (excluding the `password` field). These models are used together with the `response_model` parameter in a path operation to show how to filter sensitive data from the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr


class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None


class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None


app = FastAPI()
```

----------------------------------------

TITLE: Installing from requirements.txt with pip Console
DESCRIPTION: This command installs all packages listed in a `requirements.txt` file into the active virtual environment using `pip`. The `-r` flag specifies the file from which to read the package requirements.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_12

LANGUAGE: console
CODE:
```
$ pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Declaring Required Query Parameters Python
DESCRIPTION: Shows how to make a query parameter ('needy') required by simply declaring it in the function signature without providing a default value. If the client omits this parameter, FastAPI will return a validation error.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_user_item(item_id: str, needy: str):
    item = {"item_id": item_id, "needy": needy}
    return item
```

----------------------------------------

TITLE: Declare Basic Path Parameter in FastAPI
DESCRIPTION: This Python code defines a simple GET endpoint with a path parameter `item_id`. FastAPI automatically captures the value from the URL path and passes it as an argument to the path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring Basic Query Parameters Python
DESCRIPTION: Defines an endpoint that accepts two query parameters, 'skip' and 'limit', both typed as integers with default values of 0 and 10 respectively. FastAPI automatically parses and validates these parameters from the URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Running FastAPI with Workers (uvicorn command)
DESCRIPTION: Shows how to start a FastAPI application directly using the `uvicorn` command. The `main:app` argument specifies the module and FastAPI instance. The `--host 0.0.0.0 --port 8080` sets the listening address and port. The `--workers 4` option configures Uvicorn to launch 4 worker processes to handle requests concurrently across multiple cores. The output displays the parent and worker process IDs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
INFO:     Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
INFO:     Started parent process [27365]
INFO:     Started server process [27368]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Started server process [27369]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Started server process [27370]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Started server process [27367]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Declaring Path/Query Parameter Type - FastAPI - Python
DESCRIPTION: This snippet demonstrates declaring the expected type (`int`) for a path or query parameter (`item_id`) in a FastAPI path operation function using standard Python type hinting. FastAPI uses this declaration to automatically validate the input, provide editor support, and generate API documentation. This is a core mechanism for defining API parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Handling a Custom Exception with an Exception Handler (Python)
DESCRIPTION: Registers a custom exception handler for `UnicornException` using the `@app.exception_handler()` decorator. This handler intercepts instances of the custom exception and returns a tailored `JSONResponse` with a specific HTTP status code (e.g., 418 I'm a teapot) and a descriptive message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

# Assume UnicornException is defined as above
class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name

app = FastAPI()

@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={
            "message": f"Oops! {exc.name} did something. There goes a rainbow..."
        },
    )

# Example path operation that raises the custom exception
@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name != "yolo":
        raise UnicornException(name=name)
    return {"unicorn": name}
```

----------------------------------------

TITLE: Defining Async Path Operation Function with Await in FastAPI (Python)
DESCRIPTION: This example shows how to define a path operation function using `async def` in FastAPI. This is appropriate when the function needs to `await` asynchronous operations, such as interacting with an asynchronous database driver or external API. FastAPI will handle running this function asynchronously.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Defining Pydantic Model for Python 3.10+
DESCRIPTION: Defines a Pydantic `BaseModel` subclass `User` with type hints using Python 3.10+ syntax (`|` for `None` union, `list[int]`), demonstrating how to structure data validation models used by FastAPI. Includes imports for `datetime` and `BaseModel`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
from datetime import datetime
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "John Doe"
    signup_ts: datetime | None = None
    friends: list[int] = []
```

----------------------------------------

TITLE: Setting Status Code for Path Operation in FastAPI (Python)
DESCRIPTION: Demonstrates how to specify the HTTP status code returned by a path operation function using the `status_code` parameter in the path operation decorator. It shows using both integer values and constants from `fastapi.status`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()


@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Reading Multiple Heroes Endpoint in FastAPI with SQLModel
DESCRIPTION: This FastAPI endpoint retrieves a list of all heroes from the database. It uses a SQLModel session to query all `Hero` objects and returns them as a list. The `response_model=list[HeroPublic]` ensures that each hero in the list is validated and serialized according to the `HeroPublic` model before being returned to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_17

LANGUAGE: Python
CODE:
```
@app.get("/heroes/", response_model=list[HeroPublic])
def read_heroes(*, session: Session = Depends(get_session)):
    heroes = session.exec(select(Hero)).all()
    return heroes
```

----------------------------------------

TITLE: Using Pydantic Model Inheritance in FastAPI
DESCRIPTION: This snippet refactors the user models using inheritance. It defines a base model `UserBase` with common fields and then subclasses `UserIn`, `UserOut`, and `UserInDB` to add or modify specific fields (like `password` or `hashed_password`). This reduces duplication and improves maintainability.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel


class UserBase(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None


class UserIn(UserBase):
    password: str


class UserOut(UserBase):
    pass


class UserInDB(UserBase):
    hashed_password: str


app = FastAPI()

def fake_password_hasher(password: str):
    return "supersecret" + password

def fake_save_user(user_in: UserInDB):
    return user_in


@app.post("/user/", response_model=UserOut)
async def create_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    stored_user_in_db = fake_save_user(user_in_db)
    return stored_user_in_db
```

----------------------------------------

TITLE: Defining Lifespan Async Context Manager Python
DESCRIPTION: This snippet shows the recommended way to define application startup and shutdown logic in FastAPI using an async context manager. The code before `yield` runs on startup, and the code after `yield` runs on shutdown. It requires the `@asynccontextmanager` decorator from `contextlib`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager
from typing import AsyncIterator
from fastapi import FastAPI

# This assumes some resource like a tag_list variable exists

@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncIterator[None]:
    # Code that runs on startup
    print("Loading tag list...")
    # Simulate loading time or resource initialization
    app.state.tag_list = ["tag1", "tag2", "tag3"]
    print("Tag list loaded.")
    yield
    # Code that runs on shutdown
    print("Cleaning up tag list...")
    app.state.tag_list = []
    print("Tag list cleaned up.")
```

----------------------------------------

TITLE: Define Pydantic Input Model with Password - Python
DESCRIPTION: Defines a Pydantic model intended for incoming request data. This example includes a potentially sensitive field like `password`, highlighting the need to control which fields are returned in the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_2

LANGUAGE: python
CODE:
```
from pydantic import BaseModel, EmailStr

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None
```

----------------------------------------

TITLE: Creating a Simple FastAPI Application with async def (Python)
DESCRIPTION: Shows an alternative version of the basic FastAPI application example. This snippet uses `async def` for the endpoint functions, which is suitable for applications performing asynchronous operations or I/O-bound tasks. The functionality remains the same as the synchronous version, defining a root and an item endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declaring Typed Path Parameter (int) in FastAPI Python
DESCRIPTION: This snippet demonstrates how to add a type annotation (int) to a path parameter in a FastAPI path operation using Python. FastAPI automatically handles data conversion and validation based on the type hint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
```

----------------------------------------

TITLE: Declaring Nested Pydantic Model Field in Python
DESCRIPTION: Declares a field named `image` within a Pydantic model. This field is type-hinted as an `Image` model or `None`, enabling nested data validation and automatic documentation of the nested structure.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
image: Image | None = None
```

----------------------------------------

TITLE: Defining a GET Endpoint in FastAPI using Python
DESCRIPTION: Illustrates how to define a simple GET path operation (endpoint) in FastAPI using a decorator. This example shows the server-side counterpart to making a request and highlights FastAPI's intuitive API design, comparable to the `requests` library.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Building Docker Image - Shell
DESCRIPTION: Shows the command `docker build -t myimage .` used in the terminal to create a Docker image from the Dockerfile located in the current directory, tagging the resulting image with the specified name `myimage`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_5

LANGUAGE: Shell
CODE:
```
$ docker build -t myimage .

---> 100%
```

----------------------------------------

TITLE: Using Annotated for Type Hints with Metadata Python 3.8+
DESCRIPTION: Demonstrates using the `Annotated` type hint imported from `typing_extensions` (for Python versions below 3.9) to add metadata alongside a type hint (`str`), which can be processed by tools like FastAPI while retaining standard type checking for the base type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_25

LANGUAGE: Python
CODE:
```
from typing_extensions import Annotated

some_variable: Annotated[str, "some metadata"] = "a string"
```

----------------------------------------

TITLE: Handling Path and Body Parameters (Python)
DESCRIPTION: Shows a route function that accepts both a path parameter (`item_id`) and a request body parameter (`item`) typed with a Pydantic model. FastAPI automatically differentiates between parameters based on their type hints and where they appear (path vs. function parameter).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_6

LANGUAGE: Python
CODE:
```
async def update_item(item_id: int, item: Item):
```

----------------------------------------

TITLE: Declaring Multiple Body Parameters Python FastAPI
DESCRIPTION: Shows how to define multiple body parameters by using type hints with different Pydantic models. FastAPI automatically expects a request body where each parameter name corresponds to a key in the incoming JSON, parsing each key's value into the respective model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def update_item(item_id: int, item: Item, user: User):
```

----------------------------------------

TITLE: Creating SQLModel Session Dependency
DESCRIPTION: Defines a FastAPI dependency using `yield` to manage database sessions. It creates a new session for each request, ensures it's closed afterward, and provides an `Annotated` alias for easier use in path operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends
from sqlmodel import Session

def get_session():
    with Session(engine) as session:
        yield session

SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: Defining FastAPI Lifespan Yield Sections - Python
DESCRIPTION: Shows the core structure of the `lifespan` async function with `yield`, separating startup logic (before yield) from shutdown logic (after yield). This pattern is used for initializing and cleaning up resources during the application's lifecycle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
        print("ML models loaded")
        yield
        # Clean up the ML models and release the resources
        print("Unloading ML models...")
```

----------------------------------------

TITLE: Combining Request Body, Path, and Query Parameters in FastAPI (Python)
DESCRIPTION: Illustrates how to declare path (`item_id: int`), request body (`item: Item`), and query (`q: str | None = None`) parameters simultaneously in a single FastAPI endpoint, demonstrating FastAPI's ability to handle multiple parameter types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_5

LANGUAGE: python
CODE:
```
async def create_item(item_id: int, item: Item, q: str | None = None):
```

----------------------------------------

TITLE: Defining Multiple Pydantic User Models in FastAPI
DESCRIPTION: Demonstrates defining separate Pydantic models for different stages of user data handling (input, output, database). It shows a FastAPI endpoint accepting `UserIn`, hashing the password, creating a `UserInDB` object (using dictionary unpacking), saving it, and returning a `UserOut` object, thus controlling which fields are exposed. This approach is common for handling sensitive data like passwords differently based on context.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class UserIn(BaseModel):
    username: str
    password: str
    email: str
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: str
    full_name: str | None = None

class UserInDB(BaseModel):
    username: str
    hashed_password: str
    email: str
    full_name: str | None = None

# Helper functions (fake)
def fake_password_hasher(password: str):
    return "fakehashed" + password

def fake_save_user(user_in_db: UserInDB):
    print(f"Saving user {user_in_db.username} to DB")
    # Simulate saving to DB
    return user_in_db

@app.post("/users/", response_model=UserOut)
def create_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    user_out = fake_save_user(user_in_db)
    return user_out
```

----------------------------------------

TITLE: Pydantic Settings Reading from .env (Python)
DESCRIPTION: Configures the Pydantic `Settings` class to automatically load variables from a `.env` file. This is done by adding an inner `Config` class and setting the `env_file` attribute to the path of the `.env` file (e.g., ".env").
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_14

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

    class Config:
        env_file = ".env"
```

----------------------------------------

TITLE: Defining an HTTP GET Endpoint FastAPI Python
DESCRIPTION: This snippet shows how to define a GET endpoint `/some/url` in a FastAPI application using the `@app.get()` decorator. The function `read_url` handles incoming requests to this path and returns a simple JSON response. It requires a FastAPI application instance (`app`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Declare Class Dependency with Type Hint and Depends(Class) (Python, FastAPI)
DESCRIPTION: This snippet shows a common way to declare a class-based dependency parameter in a FastAPI path operation using a standard type hint and `Depends(Class)`. The type hint `ClassType` combined with `Depends(ClassType)` defines the dependency injection.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_4

LANGUAGE: Python
CODE:
```
commons: CommonQueryParams = Depends(CommonQueryParams)
```

----------------------------------------

TITLE: Running FastAPI App with Uvicorn (Console)
DESCRIPTION: Starts the Uvicorn ASGI server to run a FastAPI application. It specifies the application entry point (main:app) and configures the server to listen on all network interfaces (0.0.0.0) on port 80.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_2

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 80
<span style="color: green;">INFO</span>:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Running FastAPI Dev Server (Console)
DESCRIPTION: This command starts the FastAPI application in development mode using Uvicorn. It automatically detects the FastAPI app object in the specified file and enables auto-reloading on code changes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Define Separate Input and Output Models - Python
DESCRIPTION: Illustrates creating distinct Pydantic models for input (`UserIn`) and output (`UserOut`). The output model (`UserOut`) is designed to exclude sensitive fields present in the input model, improving security.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_4

LANGUAGE: python
CODE:
```
from pydantic import BaseModel, EmailStr

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None
```

----------------------------------------

TITLE: Updating Hero Endpoint in FastAPI with SQLModel
DESCRIPTION: This FastAPI endpoint updates an existing hero using an HTTP PATCH request. It takes the hero's ID and a `HeroUpdate` model. It retrieves the existing hero, converts the update model to a dictionary excluding unset fields (`exclude_unset=True`), updates the database model using `sqlmodel_update`, saves changes, and returns the updated hero validated against `HeroPublic`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_19

LANGUAGE: Python
CODE:
```
@app.patch("/heroes/{hero_id}", response_model=HeroPublic)
def update_hero(*, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate):
    db_hero = session.get(Hero, hero_id)
    if not db_hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    hero_data = hero.model_dump(exclude_unset=True)
    db_hero.sqlmodel_update(hero_data)
    session.add(db_hero)
    session.commit()
    session.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Implementing Token Header Dependency (Python 3.9+) - Python
DESCRIPTION: Shows how to define a reusable dependency function (`get_token_header`) in a separate module (`app/dependencies.py`) to extract a custom `X-Token` header using type hints with `Annotated` and `fastapi.Header`. This dependency can be applied to multiple path operations or routers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Header, Depends


async def get_token_header(x_token: Annotated[str, Header()]):
    return x_token
```

----------------------------------------

TITLE: Using Pydantic Sub-Model as Field Type (Python)
DESCRIPTION: Demonstrates how to use a previously defined Pydantic model (`Image`) as the type for a field (`image`) within another model (`Item`). This creates a nested structure in the expected JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Set
from pydantic import BaseModel

class Image(BaseModel):
    url: str
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
    image: Image | None = None
```

----------------------------------------

TITLE: Reading Multiple Hero Records
DESCRIPTION: Defines a FastAPI GET endpoint `/heroes/` to retrieve a list of hero records. It uses a `select` statement with optional offset and limit for pagination.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: Python
CODE:
```
from sqlmodel import select


@app.get("/heroes/")
def read_heroes(session: SessionDep, offset: int = 0, limit: int = 100):
    statement = select(Hero).offset(offset).limit(limit)
    heroes = session.exec(statement).all()
    return heroes
```

----------------------------------------

TITLE: Using Annotated for Type Hints with Metadata Python 3.9+
DESCRIPTION: Demonstrates using the `Annotated` type hint from the standard `typing` module (Python 3.9+) to add arbitrary metadata alongside a type hint (`str`). The actual type is the first parameter, and subsequent parameters are metadata ignored by Python but usable by tools like FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_24

LANGUAGE: Python
CODE:
```
from typing import Annotated

some_variable: Annotated[str, "some metadata"] = "a string"
```

----------------------------------------

TITLE: Defining Pydantic Request Body Model (Python)
DESCRIPTION: Defines a Pydantic model named `Item` that inherits from `BaseModel`. This model specifies the expected data fields, their types, and whether they are optional (using `None` as a default value) for an incoming JSON request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Declaring Dependency in Path Operation - Python
DESCRIPTION: Demonstrates how to declare a dependency in a FastAPI path operation function. The `commons` parameter is assigned `Depends(common_parameters)`, indicating that the `common_parameters` function should be called and its return value injected into this parameter when the path is accessed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Adding CORSMiddleware to FastAPI Application (Python)
DESCRIPTION: This snippet demonstrates how to add the CORSMiddleware to a FastAPI application. It shows how to import the necessary classes, define a list of allowed origins, and configure the middleware with parameters like `allow_origins`, `allow_credentials`, `allow_methods`, and `allow_headers` to control cross-origin requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/cors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "http://localhost:8080",
    "http://localhost",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Combining Required, Default, and Optional Query Parameters Python
DESCRIPTION: Demonstrates defining multiple query parameters with different characteristics: 'needy' (required, str), 'skip' (optional with default, int), and 'limit' (optional, int).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_user_item(
    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None
):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item
```

----------------------------------------

TITLE: Writing Async Tests with Pytest and AsyncClient
DESCRIPTION: This snippet demonstrates how to write asynchronous tests for a FastAPI application using `pytest.mark.anyio` and `httpx.AsyncClient`. It allows calling `async def` functions within the test, including sending asynchronous HTTP requests to the app and performing other async operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#_snippet_1

LANGUAGE: Python
CODE:
```
import pytest
from httpx import AsyncClient
from main import app

@pytest.mark.anyio
async def test_read_root():
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Defining Query Params with Defaults (FastAPI, Python)
DESCRIPTION: Demonstrates how to define query parameters (`skip`, `limit`) for a FastAPI endpoint and assign default integer values. FastAPI automatically parses the string values from the URL query string and converts them to the specified Python types if possible, using the defaults if parameters are missing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Defining Types and Pydantic Model (Python)
DESCRIPTION: Shows the definition of a simple Python function parameter with a type hint (str) and the definition of a Pydantic BaseModel subclass (User) with type-annotated attributes (id, name, joined). Pydantic models are used by FastAPI for request body parsing, response serialization, and data validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Installing Uvicorn with Standard Dependencies (Console)
DESCRIPTION: Installs the Uvicorn ASGI server along with standard dependencies, including uvloop for performance improvements. This command uses the pip package manager.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Defining a Non-Async Path Operation (Python)
DESCRIPTION: This snippet shows an alternative way to define a path operation function using a standard `def` instead of `async def`. FastAPI can handle both asynchronous and synchronous functions. Using `def` is suitable for functions that perform blocking I/O operations or are otherwise synchronous, although `async def` is generally preferred for web APIs to allow the server to handle multiple requests concurrently. Requires the `fastapi` library installed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining Async Endpoints in FastAPI (Python)
DESCRIPTION: Presents an alternative implementation of the root and item endpoints using `async def` functions. This structure is necessary for endpoints that perform asynchronous operations (like database calls or external API requests) to avoid blocking the event loop.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

```

----------------------------------------

TITLE: Applying Scopes to FastAPI Path Operations/Dependencies (Python)
DESCRIPTION: Demonstrates using `Security` instead of `Depends` to declare dependencies that require specific OAuth2 scopes. The `scopes` parameter accepts a list of required scope strings, which FastAPI uses internally and for API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_2

LANGUAGE: Python
CODE:
```
@router.get("/users/me/items/")
async def read_own_items(
    current_user: schemas.User = Security(get_current_active_user, scopes=["items"])
):
    return [{"item_id": "Foo", "owner": "current_user"}, {"item_id": "Bar", "owner": "current_user"}]

async def get_current_active_user(
    security_scopes: SecurityScopes,
    current_user: schemas.User = Security(get_current_user, scopes=["me"]),
):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user
```

----------------------------------------

TITLE: Declaring Model Attributes with Pydantic Field - Python
DESCRIPTION: Demonstrates how to incorporate `pydantic.Field` into a Pydantic model definition to apply validation, add metadata (like title, description, max_length), and specify default values for model attributes. This structure is analogous to using `Query`, `Path`, or `Body` in FastAPI path operation parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-fields.md#_snippet_1

LANGUAGE: python
CODE:
```
name: str
description: Annotated[str | None, Field(default=None, title="The description of the item", max_length=300)] = None
price: float = Field(gt=0)
tax: Annotated[float | None, Field(default=None, description="The tax percentage to apply")] = None
```

----------------------------------------

TITLE: Declare Class Dependency with Annotated and Depends(Class) (Python, FastAPI)
DESCRIPTION: This snippet shows one way to declare a class-based dependency parameter in a FastAPI path operation using type hints and `Annotated`. `Annotated[ClassType, Depends(ClassType)]` explicitly specifies the dependency type and the callable dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]
```

----------------------------------------

TITLE: Applying GT and LT Numeric Validations to Float Path Parameter - FastAPI - Python
DESCRIPTION: This snippet illustrates applying numeric validations `gt=0` (greater than 0) and `lt=1` (less than 1) to a path parameter `item_id` that is typed as a `float`. This ensures the floating-point value is strictly between 0 and 1. It requires importing `Path`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import Path

def read_items(item_id: float = Path(gt=0, lt=1)): # (1)! (2)!
```

----------------------------------------

TITLE: Defining Dependency Class (Python, FastAPI)
DESCRIPTION: This snippet defines a Python class intended for use as a FastAPI dependency. The `__init__` method accepts parameters that FastAPI's dependency injection system can solve, such as query or path parameters, allowing the class instance to hold these values.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

class CommonQueryParams:
    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Building a FastAPI Docker Image Dockerfile
DESCRIPTION: Defines the instructions for building a Docker image for the FastAPI application, starting from the official Python image, copying dependencies and code, installing packages, and setting the command to run the application using 'fastapi run'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
# (1)!
FROM python:3.9

# (2)!
WORKDIR /code

# (3)!
COPY ./requirements.txt /code/requirements.txt

# (4)!
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (5)!
COPY ./app /code/app

# (6)!
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: Reading Single Hero Endpoint in FastAPI with SQLModel
DESCRIPTION: This FastAPI endpoint retrieves a single hero by its ID. It queries the database using a SQLModel session for a `Hero` with the specified `hero_id`. If found, it returns the hero serialized according to the `response_model=HeroPublic`; otherwise, it raises an HTTP 404 error.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_18

LANGUAGE: Python
CODE:
```
@app.get("/heroes/{hero_id}", response_model=HeroPublic)
def read_hero(*, hero_id: int, session: Session = Depends(get_session)):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: Sending Async Requests to FastAPI with HTTPX AsyncClient
DESCRIPTION: This snippet demonstrates how to use `httpx.AsyncClient` within an asynchronous test function to send requests to the FastAPI application. The `async with` statement handles client lifecycle, and `await ac.get("/")` sends an asynchronous GET request.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#_snippet_3

LANGUAGE: Python
CODE:
```
async with AsyncClient(app=app, base_url="http://test") as ac:
    response = await ac.get("/")
assert response.status_code == 200
```

----------------------------------------

TITLE: Running FastAPI App with Uvicorn Command (Console)
DESCRIPTION: Demonstrates running the application via the `uvicorn` command, specifying the module (`main`) and app object (`app`) using the `module:app` format. It includes options to specify the host (`0.0.0.0` for all IPs) and port (`80`). This method is commonly used for production deployments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/manually.md#_snippet_2

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 80

<span style="color: green;">INFO</span>:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Defining Pydantic Model for Python 3.8+
DESCRIPTION: Defines a Pydantic `BaseModel` subclass `User` with type hints compatible with Python 3.8+, using `Optional` and `List` from the `typing` module to specify field types and default values, similar to the 3.9+ version. Includes imports for necessary types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_23

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "John Doe"
    signup_ts: Optional[datetime] = None
    friends: List[int] = []
```

----------------------------------------

TITLE: Raising HTTPException for Not Found (FastAPI) - Python
DESCRIPTION: Demonstrates how to raise an `HTTPException` with a 404 status code and a detail message if a requested item is not found. When raised, FastAPI intercepts the exception, stops processing the current request, and returns a JSON response with the specified status code and detail.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
raise HTTPException(status_code=404, detail="Item not found")
```

----------------------------------------

TITLE: Async Path Operation Calling Awaited Function in FastAPI (Python)
DESCRIPTION: This FastAPI path operation function is defined with `async def` because it needs to `await` the result of another asynchronous function or an awaitable object. Using `async def` allows FastAPI to manage this I/O-bound task efficiently, preventing the main event loop from blocking while waiting for the result.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Mixing Required Path and Required Query - FastAPI - Python
DESCRIPTION: This snippet demonstrates defining a function that takes both a required path parameter (`item_id`) declared with `Path(...)` and a required query parameter (`q`), which defaults to a `Query` parameter when no other type is specified. It shows how to declare both types as required in a basic function signature.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Path

def read_items(item_id: int = Path(...), q: str):
```

----------------------------------------

TITLE: Configuring APIRouter with Metadata and Dependencies - Python FastAPI
DESCRIPTION: This snippet demonstrates how to add configuration like a URL prefix, tags, standard responses, and dependencies directly to the APIRouter instance. These configurations are then applied to all path operations defined on this specific router, reducing code repetition. Path operations defined on the router specify their paths relative to the router's prefix.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends

from ..dependencies import get_token_header

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


@router.get("/{item_id}", responses={403: {"description": "Operation forbidden"}})
async def read_item(item_id: str):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Get Current User Dependency (JWT)
DESCRIPTION: Implements a FastAPI dependency `get_current_user` that extracts the JWT from the request's Authorization header (using OAuth2PasswordBearer), decodes and verifies the token using the secret key and algorithm, extracts the username from the token data, and returns the user object or raises an HTTPException if the token is invalid or the user is not found.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_7

LANGUAGE: python
CODE:
```
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

# Define the OAuth2 scheme pointing to the token endpoint
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Dependency to get the current user from the JWT
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        # Decode and verify the JWT
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    # Simulate fetching user from database based on username
    user = fake_users_db.get(token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Define Model with List of Nested Models - Python
DESCRIPTION: Shows how to define a Pydantic model (`Item`) with an attribute (`images`) that is a list (`list`) where each element is an instance of another Pydantic model (`Image`). This corresponds to a JSON body containing an array of objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, HttpUrl

app = FastAPI()

class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: set[str] = set()
    images: list[Image] | None = None # hl[18]

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Building Docker Image with Multiple Uvicorn Workers (Dockerfile)
DESCRIPTION: This Dockerfile builds a container image for a FastAPI application. It copies dependencies, installs them using pip, copies the application code, and then uses the `fastapi run` command with the `--workers 4` option to start the application with four Uvicorn worker processes inside the container. This approach is discussed for simpler scenarios where external process/container orchestration is not used.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_14

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

# (1)!
CMD ["fastapi", "run", "app/main.py", "--port", "80", "--workers", "4"]
```

----------------------------------------

TITLE: Declaring Pydantic Model as Request Body Parameter in FastAPI
DESCRIPTION: Declares a function parameter `item` with a type hint of the Pydantic `Item` model. FastAPI automatically recognizes this as a request body and will parse, validate, and provide the data as an `Item` object.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_2

LANGUAGE: python
CODE:
```
async def create_item(item: Item):
```

----------------------------------------

TITLE: Setting Response Status Code with Integer in FastAPI
DESCRIPTION: This snippet shows how to set a specific HTTP status code for a path operation by providing a literal integer to the `status_code` parameter in the decorator. The example sets the status code to 201 (Created) for a POST request, indicating successful creation of a resource.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-status-code.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.post("/items/", status_code=201)
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Importing FastAPI Class Python
DESCRIPTION: This snippet demonstrates the standard way to import the main FastAPI class from the 'fastapi' library in Python, which is the first step in creating a new FastAPI web application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/fastapi.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Defining Main FastAPI Application and Route - Python
DESCRIPTION: This snippet shows the basic definition of a main FastAPI application instance and a simple root path operation using the `@app.get("/")` decorator. This application will act as the host for sub-applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/sub-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Adding Generic ASGI Middleware - FastAPI - Python
DESCRIPTION: Demonstrates the standard way to add any ASGI-compliant middleware to a FastAPI application using `app.add_middleware`. It shows how to initialize the FastAPI app and then register the middleware class along with any necessary configuration arguments. This method ensures proper integration with FastAPI's error handling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware # Assuming 'unicorn' exists for example purposes

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: Mixing Multiple Body and Query Parameters in FastAPI Python
DESCRIPTION: This snippet demonstrates a FastAPI endpoint that accepts multiple parameters from different parts of the request: multiple Pydantic models (`item`, `user`) and a singular value (`importance`) from the body, and an optional string (`q`) from the query parameters. FastAPI correctly identifies and processes parameters based on their type annotations and default values or explicit function usage like `Body()`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(),
    q: str | None = None
):
    results = {"item_id": item_id}
    results.update({"item": item.model_dump()})
    results.update({"user": user.model_dump()})
    results.update({"importance": importance})
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Installing FastAPI with Standard Extras (Shell)
DESCRIPTION: Provides the command-line instruction to install the FastAPI library using pip, including the '[standard]' extra which typically pulls in necessary dependencies like an ASGI server (e.g., Uvicorn) for running the application. The command needs to be run in a virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Installing FastAPI with Standard Extras (Shell)
DESCRIPTION: This command installs FastAPI with a curated set of standard optional dependencies using pip. This is often a more lightweight installation compared to `[all]` and is frequently recommended for production environments, providing essential functionalities without pulling in unnecessary libraries.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_2

LANGUAGE: shell
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Creating a Simple FastAPI Application (Python)
DESCRIPTION: Demonstrates a basic FastAPI application structure. It imports necessary components, initializes the app, and defines two simple GET endpoints using decorators: a root path '/' returning a JSON object and an item path '/items/{item_id}' that takes a path parameter and an optional query parameter, using type hints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application (Synchronous)
DESCRIPTION: This Python code creates a minimal FastAPI application with two synchronous GET endpoints. The root endpoint ('/') returns a simple JSON message, and the '/items/{item_id}' endpoint takes a path parameter and an optional query parameter, returning them in a JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining Async Path Operation (FastAPI Python)
DESCRIPTION: Shows how to define a FastAPI path operation function using `async def`. This is necessary when the function needs to perform asynchronous operations using `await`, such as calling an asynchronous library (`some_library`) that handles I/O-bound tasks efficiently. The function waits for the library's result and returns it.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Use Output Model with response_model Parameter - Python
DESCRIPTION: Applies the `UserOut` model (which excludes sensitive data) using the `response_model` parameter in the path operation decorator. FastAPI uses this model to filter the data returned by the function before sending the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

app = FastAPI()

@app.post("/user/", response_model=UserOut)
async def create_user(user_in: UserIn):
    # ... create user in DB etc.
    return user_in
```

----------------------------------------

TITLE: Protecting Path with Security and Scopes - FastAPI Python
DESCRIPTION: Demonstrates how to apply authorization to a specific path operation by using the `Security` dependency. The `Security` dependency takes the dependency function (`get_current_active_user` in this case) and a list of required `scopes`. FastAPI ensures that the authenticated user holds all the listed scopes before allowing access to the endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Security
# Assume Item model is defined
# Assume get_current_active_user dependency is defined

router = APIRouter()

@router.get("/users/me/items/", response_model=list[Item])
# Uses Security with the dependency and specifies required scopes
async def read_own_items(current_user: User = Security(get_current_active_user, scopes=["items"])): # Pass required scopes
    # Endpoint logic that requires the 'items' scope
    return current_user.items
```

----------------------------------------

TITLE: Defining Multiple Nested Pydantic Models (Python)
DESCRIPTION: Defines a hierarchy of Pydantic models (`Image`, `Item`, `Offer`) where models contain lists of other models. This demonstrates how FastAPI/Pydantic handles validation and documentation for complex, multi-level nested data structures.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
class Image(BaseModel):
    url: HttpUrl
    name: str | None = None

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: set[str] = set()
    images: list[Image] | None = None

class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: list[Item]
```

----------------------------------------

TITLE: Importing TestClient - FastAPI - Python
DESCRIPTION: This snippet shows how to import the `TestClient` class from the `fastapi.testclient` module. This class is the primary tool for programmatically testing FastAPI applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/testclient.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
```

----------------------------------------

TITLE: Using Pydantic HttpUrl Type for Validation (Python)
DESCRIPTION: Shows how to import and use a specialized Pydantic type like `HttpUrl` for stricter validation of string fields that are expected to be valid URLs. This type hint provides both validation and documentation benefits.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Set
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str
```

----------------------------------------

TITLE: Setting Response Status Code with fastapi.status in FastAPI
DESCRIPTION: This snippet demonstrates using constants from the `fastapi.status` module to set the HTTP status code for a path operation. This approach improves readability and leverages editor autocomplete. The example sets the status code to 201 (Created) using `status.HTTP_201_CREATED` for a POST request.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-status-code.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()

@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Declaring Integer Path Parameter (Python)
DESCRIPTION: This snippet shows how to declare a path parameter `item_id` with a type hint `int` in a FastAPI path operation function. FastAPI uses this type hint for automatic data validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Using Depends() Shortcut with Annotated and Type Hint (Python, FastAPI)
DESCRIPTION: This snippet demonstrates using the `Depends()` shortcut with `Annotated` and a type hint for injecting a class dependency. When `Depends()` is used without arguments for a parameter typed with `Annotated[ClassType, ...]`, FastAPI assumes the dependency callable is `ClassType` itself.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from typing import Annotated, Union

app = FastAPI()

class CommonQueryParams:
    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit

@app.get("/items/")
async def read_items(commons: Annotated[CommonQueryParams, Depends()]):
    return {"q": commons.q, "skip": commons.skip, "limit": commons.limit}
```

----------------------------------------

TITLE: Setting Status Code with fastapi.status Python FastAPI
DESCRIPTION: This snippet shows how to set the HTTP status code for a FastAPI path operation using a named constant from the `fastapi.status` module (`status.HTTP_201_CREATED`). Using constants like these improves code readability and reduces the chance of errors compared to using raw numeric values.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()


@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"name": name, "status": "created"}
```

----------------------------------------

TITLE: Password Hashing and Verification Utilities (Passlib)
DESCRIPTION: Imports `CryptContext` from `passlib` to create a context for handling password hashing, specifically using the bcrypt algorithm. Includes utility functions `hash_password` to hash a plain password and `verify_password` to check if a given plain password matches a stored hash.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: python
CODE:
```
from passlib.context import CryptContext

# Define the hashing context using bcrypt
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def hash_password(password: str):
    # Hashes the given plain password
    return pwd_context.hash(password)


def verify_password(plain_password: str, hashed_password: str):
    # Verifies a plain password against a hashed one
    return pwd_context.verify(plain_password, hashed_password)
```

----------------------------------------

TITLE: Writing Asynchronous Test pytest httpx Python
DESCRIPTION: Provides the full test file for the FastAPI application, demonstrating how to use `pytest.mark.anyio` to mark an asynchronous test function and how to use `httpx.AsyncClient` within an `async with` block to make asynchronous requests to the app instance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_1

LANGUAGE: Python
CODE:
```
from httpx import AsyncClient
import pytest

from main import app

@pytest.mark.anyio
async def test_read_main():
    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Defining Optional Query Parameters in FastAPI (Python)
DESCRIPTION: This snippet shows how to define a query parameter that is optional and has no specific default value other than `None`. Using `str | None` (Python 3.10+) or `Optional[str]` allows explicitly indicating the parameter might be `None` if not provided.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Complete Dockerfile for Single-File App - Dockerfile
DESCRIPTION: Provides a complete Dockerfile example for a FastAPI application contained in a single file (`main.py`). It sets up the environment, copies the requirements and the single source file, installs dependencies, and uses the exec form of `CMD` to run the application directly from `main.py`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_13

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)!
COPY ./main.py /code/

# (2)!
CMD ["fastapi", "run", "main.py", "--port", "80"]
```

----------------------------------------

TITLE: Defining Query Parameters with Defaults in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to define query parameters in a FastAPI route function. Parameters declared without being part of the path are treated as query parameters. Providing a default value makes the parameter optional.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Defining Python Function Types and Pydantic Model - Python
DESCRIPTION: Defines a Python function with standard type hints for parameter annotation and a Pydantic BaseModel for structured data with typing. Shows how FastAPI utilizes standard Python features like type hints and Pydantic for its functionality (like data validation and documentation). Requires `datetime` and `pydantic`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declareer een variabele als een str
# en krijg editorondersteuning in de functie
def main(user_id: str):
    return user_id


# Een Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Updating FastAPI Application with PUT Endpoint and Pydantic Model
DESCRIPTION: This Python code modifies the initial FastAPI application to include a Pydantic `BaseModel` for data validation and a PUT endpoint. The `/items/{item_id}` PUT route expects a path parameter and a request body conforming to the `Item` model, demonstrating how FastAPI handles request body data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Activating Virtual Environment Linux/macOS/Windows Bash Console
DESCRIPTION: This command activates the virtual environment in Unix-like shells (Linux, macOS) and Windows Bash environments. It sources the activation script located within the `.venv/bin` directory, modifying the shell's PATH to prioritize executables from the environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_3

LANGUAGE: console
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn (Console)
DESCRIPTION: This command demonstrates how to start a FastAPI application using the uvicorn ASGI server from the terminal. The `main:app` argument specifies the Python module (`main`) and the FastAPI application instance (`app`). The `--reload` flag is typically used during development to automatically restart the server when code changes are detected.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_0

LANGUAGE: console
CODE:
```
uvicorn main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
<span style="color: green;">INFO</span>:     Started reloader process [28720]
<span style="color: green;">INFO</span>:     Started server process [28722]
<span style="color: green;">INFO</span>:     Waiting for application startup.
<span style="color: green;">INFO</span>:     Application startup complete.
```

----------------------------------------

TITLE: Running FastAPI application with Uvicorn (Console)
DESCRIPTION: Command to start the FastAPI application server using Uvicorn. The `--reload` flag enables hot-reloading for development, restarting the server upon code changes. The command specifies the module (`main`) and the FastAPI application instance (`app`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Console
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Run FastAPI using Gunicorn with Uvicorn Workers (Console)
DESCRIPTION: Starts the FastAPI application (`main:app`) using Gunicorn. Gunicorn serves as the master process, managing 4 worker processes (`--workers 4`), each running a `uvicorn.workers.UvicornWorker`. The application listens on all available network interfaces (`0.0.0.0`) on port 80.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: console
CODE:
```
gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80
```

----------------------------------------

TITLE: Type Hinting List Elements
DESCRIPTION: Demonstrates type hinting a variable or parameter as a list containing elements of a specific type, like `str`. This is done using `List` from the `typing` module for older Python versions or the built-in `list` for newer versions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import List

def process_items(items: List[str]):
    for item in items:
        print(item)
```

LANGUAGE: Python
CODE:
```
def process_items(items: list[str]):
    for item in items:
        print(item)
```

----------------------------------------

TITLE: Defining an Asynchronous Function (Python)
DESCRIPTION: Functions defined with `async def` are asynchronous and can use the `await` keyword internally. They are designed for operations that involve waiting (like network requests or file I/O) without blocking the program's execution, enabling concurrency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Defining Multiple UploadFile Parameters with Metadata in FastAPI Python
DESCRIPTION: Defines a parameter `files` as a list of `UploadFile` objects, wrapping the list type hint with `File()` to add metadata for the entire parameter. This allows uploading multiple files under the same name while providing documentation in the API schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_8

LANGUAGE: Python
CODE:
```
async def create_upload_files(files: list[UploadFile] = File(description="Multiple files as UploadFile")):
    # Process list of UploadFile objects with metadata
    for file in files:
        print(f"Received file: {file.filename}")
        contents = await file.read()
```

----------------------------------------

TITLE: Declaring Multiple UploadFile with File Dependency Attributes Python
DESCRIPTION: Similar to single optional files, you can apply the `File()` dependency with extra parameters (like description) when declaring a list of `UploadFile` instances for multiple file uploads.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_8

LANGUAGE: Python
CODE:
```
files: List[UploadFile] = File(..., description="Multiple files as UploadFile"),
```

----------------------------------------

TITLE: Defining Required Query Parameters in FastAPI (Python)
DESCRIPTION: To make a query parameter required, simply declare it without providing a default value. FastAPI will automatically validate its presence and type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_user_item(item_id: str, needy: str):
    return {"item_id": item_id, "needy": needy}
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn Directly: Python
DESCRIPTION: This Python snippet demonstrates a common pattern for making a script executable directly while also allowing it to be imported as a module. By including `uvicorn.run()` inside the `if __name__ == "__main__"` block, the Uvicorn server starts only when the script is run as the main program, which is essential for debugging with IDEs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
import uvicorn

app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Ordering Parameters (Annotated) - FastAPI Python
DESCRIPTION: This example demonstrates the same router function using `Annotated`. With `Annotated`, the order of parameters does not matter for Python's default value rules, allowing a required query parameter `q` to appear after the path parameter `item_id` defined with `Path` and `Annotated`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Path, Query

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(
    item_id: Annotated[int, Path(title="The ID of the item to get")],
    q: Annotated[str | None, Query(alias="item-query")] = None,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Running FastAPI Dev Server - Console
DESCRIPTION: Command to start the FastAPI application development server using `fastapi dev main.py`. This command runs the server with live reloading enabled, typically for local development. The included output shows the server starting and the local address.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/advanced/websockets.md#_snippet_1

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Defining Sync Path Operation (FastAPI Python)
DESCRIPTION: Illustrates defining a FastAPI path operation function using a standard synchronous `def`. This approach is suitable when the function calls synchronous libraries (like many database libraries currently) that do not support `await`, or if the function performs CPU-bound tasks. FastAPI runs these in a thread pool to avoid blocking the main event loop.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Unpacking Dictionary and Adding Arguments in Python
DESCRIPTION: This snippet demonstrates combining dictionary unpacking (`**user_in.dict()`) with additional explicit keyword arguments (`hashed_password=hashed_password`) when calling a constructor. This technique is useful for adding or overriding specific fields while inheriting others from a source dictionary or model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
UserInDB(**user_in.dict(), hashed_password=hashed_password)
```

----------------------------------------

TITLE: Including APIRouter with Custom Parameters in FastAPI App
DESCRIPTION: This snippet demonstrates how to include an existing APIRouter (like the admin_router) into the main FastAPI application instance. It applies global parameters such as a path prefix, tags for documentation, required dependencies, and specific responses to all routes defined within the included router.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_12

LANGUAGE: Python
CODE:
```
# Assume admin_router is imported from admin.py
# from .internal.admin import router as admin_router

# Assume get_token_header dependency is defined
# from .dependencies import get_token_header

from fastapi import Depends, FastAPI, HTTPException

# Dummy dependency function example (replace with actual dependency if needed)
async def get_token_header(x_token: str = Depends()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token

# Assuming admin_router is defined (conceptual content from first snippet)
router = APIRouter()
@router.get("/items/")
async def read_items(): return [{"item_id": "AdminFoo"}]
admin_router = router

app = FastAPI()

# Include the admin router with custom parameters
app.include_router(
    admin_router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)

# Other routes or router includes below
```

----------------------------------------

TITLE: Declaring Optional Query Parameters Python
DESCRIPTION: Shows how to make a query parameter optional by giving it a default value of 'None'. If the parameter 'q' is not included in the URL, its value inside the function will be None.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining Multiple Files as list[UploadFile] (Python)
DESCRIPTION: This snippet demonstrates accepting multiple files as a list of `UploadFile` objects. Annotating the parameter as `list[UploadFile]` with `File()` allows processing multiple potentially large files efficiently using `UploadFile`'s features and async methods.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_7

LANGUAGE: Python
CODE:
```
async def create_upload_files(files: list[UploadFile] = File()):
```

----------------------------------------

TITLE: Multi-Stage Docker Build with Poetry
DESCRIPTION: Provides a multi-stage Dockerfile for projects managed with Poetry. The first stage installs Poetry and exports dependencies to `requirements.txt`. The second (final) stage uses this `requirements.txt` to install dependencies efficiently via pip, copies the application code, and sets the default command to run Uvicorn, making the final image smaller as Poetry is not included.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_10

LANGUAGE: Dockerfile
CODE:
```
# (1)
FROM python:3.9 as requirements-stage

# (2)
WORKDIR /tmp

# (3)
RUN pip install poetry

# (4)
COPY ./pyproject.toml ./poetry.lock* /tmp/

# (5)
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# (6)
FROM python:3.9

# (7)
WORKDIR /code

# (8)
COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

# (9)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (10)
COPY ./app /code/app

# (11)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Add Multiple String Validations with Annotated in FastAPI
DESCRIPTION: This snippet extends the use of `Annotated` and `Query` to include multiple string validation constraints (`min_length` and `max_length`) on an optional query parameter `q`. Multiple validation parameters are simply passed to the `Query` instance within `Annotated`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(min_length=3, max_length=50)] = None):
    if q:
        return {"q": q}
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Implementing Partial Updates with PATCH (FastAPI, Python)
DESCRIPTION: This snippet outlines the standard pattern for handling partial updates with FastAPI's PATCH method and Pydantic models. It fetches the existing item, creates an update dictionary from the incoming model excluding default/unset values (`exclude_unset=True`), updates the existing model with the new data (`copy(update=...)`), and finally prepares the result using `jsonable_encoder` for persistence.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-updates.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi.encoders import jsonable_encoder
from fastapi import APIRouter, Body
from pydantic import BaseModel

router = APIRouter()

class Item(BaseModel):
    name: str | None = None
    description: str | None = None
    price: float | None = None
    tax: float | None = None

# Simulate storage
stored_items = {
    "foo": {"name": "Foo", "price": 32.0, "tax": 20.5},
    "bar": {"name": "Bar", "price": 6.0, "tax": 10.5}
}

# Assume item_id and item: Item are parameters of a PATCH route
# This function simulates the core logic referencing lines 30-37
def update_item_patch(item_id: str, item: Item = Body(...)):
    # Retrieve existing item (simulated)
    if item_id not in stored_items:
         # Handle item not found (e.g., raise HTTPException)
         pass # Placeholder for error handling

    stored_item_data = stored_items[item_id]
    stored_item_model = Item(**stored_item_data)

    # Create update dictionary from incoming model, excluding unset fields
    # This corresponds to the concept mentioned for hl[34]
    # Only fields that were explicitly sent in the request body are included
    update_data = item.model_dump(exclude_unset=True)

    # Update the stored model with the new data from the update dictionary
    # This corresponds to the concept mentioned for hl[35]
    # model_copy creates a new model instance with updated data
    updated_item = stored_item_model.model_copy(update=update_data)

    # Prepare the updated item for storage (e.g., database)
    # This corresponds to part of the overall process hl[30:37]
    # jsonable_encoder converts the Pydantic model into a dict with JSON-compatible types
    item_to_store = jsonable_encoder(updated_item)

    # Simulate saving the updated item data
    stored_items[item_id] = item_to_store

    # Return the updated item (optional, but common)
    return item_to_store

```

----------------------------------------

TITLE: Defining Union Response Model with FastAPI and Pydantic
DESCRIPTION: Shows how to use `typing.Union` (or `|` in Python 3.10+) with FastAPI's `response_model` parameter. This allows an endpoint to return a response that can conform to the schema of one of several specified Pydantic models, useful for APIs that return different object types based on logic. FastAPI will automatically generate the corresponding OpenAPI `anyOf` schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class CarItem(BaseModel):
    model: str = "Car"
    color: str
    wheel_count: int

class PlaneItem(BaseModel):
    model: str = "Plane"
    color: str
    wing_count: int

@app.get("/items/{item_id}", response_model=Union[PlaneItem, CarItem])
def read_item(item_id: str):
    # Dummy logic to return different types
    if item_id.endswith("car"):
        return {"model": "Car", "color": "red", "wheel_count": 4}
    else:
        return {"model": "Plane", "color": "blue", "wing_count": 2}
```

----------------------------------------

TITLE: Calling Async Library Function (Python)
DESCRIPTION: Demonstrates the syntax for calling a function from an asynchronous third-party library. The `await` keyword is used to pause execution until the library function completes its I/O operation and returns a result. This call must be placed within a function defined using `async def`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
results = await some_library()
```

----------------------------------------

TITLE: Apply lru_cache to Settings Dependency Function
DESCRIPTION: This Python code shows the `get_settings` dependency function decorated with `@lru_cache(maxsize=1)`. This decorator caches the result of the function call, ensuring that the `Settings` object is initialized and the `.env` file is read only once when the dependency is first needed, improving performance by avoiding redundant file I/O on subsequent requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_14

LANGUAGE: Python
CODE:
```
from functools import lru_cache
from typing import Annotated

from fastapi import Depends, FastAPI

from .config import Settings


@lru_cache(maxsize=1)
def get_settings():
    print("Loading settings...") # Added print for demonstration
    return Settings()


settings = Annotated[Settings, Depends(get_settings)]


app = FastAPI()


@app.get("/info")
async def info(settings: settings):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Path Parameter > and <= Validation (Annotated) - FastAPI Python
DESCRIPTION: This example demonstrates applying multiple numeric validations to an integer path parameter `item_id` using `Annotated` and `Path`. The arguments `gt=0` and `le=1000` require the value to be strictly greater than 0 and less than or equal to 1000.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(
    item_id: Annotated[int, Path(title="The ID of the item to get", gt=0, le=1000)],
):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Caching Settings Loading with lru_cache (Python)
DESCRIPTION: Applies the `@lru_cache` decorator to the `get_settings` dependency function. This caches the result of the function call, ensuring that the settings are loaded from the environment or `.env` file only once during the application's lifetime, improving performance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_15

LANGUAGE: Python
CODE:
```
from functools import lru_cache
from fastapi import Depends, FastAPI

from .config import Settings

app = FastAPI()


@lru_cache()
def get_settings():
    return Settings()


@app.get("/items/")
async def read_items(settings: Settings = Depends(get_settings)):
    return {"app_name": settings.app_name, "items_per_user": settings.items_per_user}
```

----------------------------------------

TITLE: Example requirements.txt Content requirements.txt
DESCRIPTION: This is an example demonstrating the format of a `requirements.txt` file. Each line typically lists a package name, optionally followed by version specifiers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_14

LANGUAGE: requirements.txt
CODE:
```
fastapi[standard]==0.113.0
pydantic==2.8.0
```

----------------------------------------

TITLE: Starting FastAPI Development Server (Console)
DESCRIPTION: Demonstrates how to run a FastAPI application in development mode using the `fastapi dev` command. It requires the application code to be saved in `main.py` and starts a server that watches for file changes, providing live reloading.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

  FastAPI  Starting development server 🚀

             Searching for package file structure from directories
             with __init__.py files
             Importing from /home/user/code/awesomeapp

   module  🐍 main.py

     code  Importing the FastAPI app object from the module with
             the following code:

             from main import app

      app  Using import string: main:app

   server  Server started at http://127.0.0.1:8000
   server  Documentation at http://127.0.0.1:8000/docs

      tip  Running in development mode, for production use:
             fastapi run

             Logs:

     INFO  Will watch for changes in these directories:
             ['/home/user/code/awesomeapp']
     INFO  Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C
             to quit)
     INFO  Started reloader process [383138] using WatchFiles
     INFO  Started server process [383153]
     INFO  Waiting for application startup.
     INFO  Application startup complete.
```

----------------------------------------

TITLE: Defining Multiple User Models with Pydantic in Python
DESCRIPTION: Illustrates how to define distinct Pydantic models for handling user data in different contexts within a FastAPI application: UserIn for request body (includes plain password), UserOut for response (excludes password), and UserInDB for internal use (includes hashed password). Shows a basic POST route that receives UserIn, processes it (including a fake password hash), and returns UserOut.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

def fake_password_hasher(password: str):
    return "hashed" + password

def fake_save_user(user_in: "UserInDB"):
    return user_in

class UserIn(BaseModel):
    username: str
    password: str
    email: str
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: str
    full_name: str | None = None

class UserInDB(BaseModel):
    username: str
    hashed_password: str
    email: str
    full_name: str | None = None

@app.post("/users/", response_model=UserOut)
async def create_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    fake_save_user(user_in_db)
    return user_in_db
```

----------------------------------------

TITLE: Copy Requirements File for Caching - Dockerfile
DESCRIPTION: Copies the `requirements.txt` file into the Docker image first. This leverages Docker's build cache, as this file changes less frequently than the application code. Subsequent steps that depend only on this file (like installing dependencies) can then also use the cache, speeding up builds.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
COPY ./requirements.txt /code/requirements.txt
```

----------------------------------------

TITLE: Adding GZip Middleware - FastAPI - Python
DESCRIPTION: Demonstrates adding the `GZipMiddleware` to a FastAPI application. This middleware automatically compresses responses using GZip for clients that support it (indicated by the `Accept-Encoding` header). It can be configured with parameters like `minimum_size` (default 500 bytes) or `compresslevel` (default 9) to optimize compression behavior. Requires importing the middleware from `fastapi.middleware.gzip` or `starlette.middleware.gzip`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.gzip import GZipMiddleware

app = FastAPI()

app.add_middleware(GZipMiddleware, minimum_size=500)
```

----------------------------------------

TITLE: Implement Settings Dependency with Caching
DESCRIPTION: This Python code defines a FastAPI dependency function `get_settings` that instantiates the `Settings` class. The `@lru_cache(maxsize=1)` decorator ensures that the `Settings` object is created only once upon the first call and the same instance is reused for all subsequent calls, avoiding repeated loading of environment variables.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_9

LANGUAGE: Python
CODE:
```
from functools import lru_cache
from typing import Annotated

from fastapi import Depends, FastAPI

from .config import Settings


@lru_cache(maxsize=1)
def get_settings():
    return Settings()


settings = Annotated[Settings, Depends(get_settings)]


app = FastAPI()


@app.get("/info")
async def info(settings: settings):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Switching and Running Python in Correct Virtual Environment Console
DESCRIPTION: Navigates to a project directory, deactivates the currently active virtual environment, activates the correct project-specific environment located in `.venv/`, and then successfully runs a Python script (`main.py`). This demonstrates the standard workflow for switching between projects and their isolated environments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_27

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

// You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project 😎
$ deactivate

// Activate the virtual environment in prisoner-of-azkaban/.venv 🚀
$ source .venv/bin/activate

// Now when you run python, it will find the package sirius installed in this virtual environment ✨
$ python main.py

I solemnly swear 🐺
```

----------------------------------------

TITLE: Running Pytest Tests from the Console
DESCRIPTION: This snippet shows the standard console command used to execute tests written with the Pytest framework. It will discover and run the tests in the specified file structure.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#_snippet_4

LANGUAGE: console
CODE:
```
pytest
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application (Asynchronous)
DESCRIPTION: This Python code demonstrates creating the same minimal FastAPI application using asynchronous (`async def`) endpoint functions. This is suitable for applications where I/O-bound operations are expected, leveraging Python's async capabilities.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running the FastAPI Application in Development Mode
DESCRIPTION: This console command uses the FastAPI CLI to run the `main.py` application using Uvicorn. The `dev` command is intended for local development, automatically enabling features like code reloading when changes are detected.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_3

LANGUAGE: console
CODE:
```
fastapi dev main.py
```

----------------------------------------

TITLE: Path Parameter >= Validation (Annotated) - FastAPI Python
DESCRIPTION: This snippet shows how to apply a numeric validation to a path parameter `item_id` using `Annotated` and the `Path` object. The `ge=1` argument ensures that the integer value for `item_id` must be greater than or equal to 1.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(item_id: Annotated[int, Path(title="The ID of the item to get", ge=1)]):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Configuring Base API Metadata in FastAPI
DESCRIPTION: This snippet demonstrates how to set core API metadata fields like title, description, version, terms of service, contact information, and license details by passing corresponding arguments to the `FastAPI` constructor. This information is used to generate the OpenAPI specification and the interactive documentation UIs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Cool API",
    description="This is a very fancy API, with auto docs for everyone!",
    version="2.5.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://x-force.example.com/contact/",
        "email": "dp@x-force.example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn Workers using uvicorn CLI
DESCRIPTION: Shows how to launch a FastAPI application directly using the `uvicorn` command, specifying the application import path (`main:app`), host, port, and importantly, the number of worker processes (4) via the `--workers` option for multiprocessing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
<font color="#A6E22E">INFO</font>:     Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit)
<font color="#A6E22E">INFO</font>:     Started parent process [<font color="#A1EFE4"><b>27365</b></font>]
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27368</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27369</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27370</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27367</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.

```

----------------------------------------

TITLE: Importing HTTPException and WebSocketException - FastAPI - Python
DESCRIPTION: This code snippet shows how to import the necessary exception classes, `HTTPException` and `WebSocketException`, directly from the `fastapi` library. These classes are essential for raising standard HTTP and WebSocket errors respectively within your FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/exceptions.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException, WebSocketException
```

----------------------------------------

TITLE: Defining Pydantic Sub-Model (Python)
DESCRIPTION: Defines a simple Pydantic model (`Image`) that can be used as a nested structure within other models. This encapsulates related fields together.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Image(BaseModel):
    url: str
    name: str
```

----------------------------------------

TITLE: Setting Status Code Numerically Python FastAPI
DESCRIPTION: This snippet demonstrates setting the HTTP status code for a FastAPI path operation using a direct numeric value (`201`) via the `status_code` parameter in the `@app.post` decorator. This indicates a 'Created' status for the successful creation of a resource.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post("/items/", status_code=201)
async def create_item(name: str):
    return {"name": name, "status": "created"}
```

----------------------------------------

TITLE: Using Pydantic Model Inheritance for User Models
DESCRIPTION: Illustrates reducing code duplication by defining a base Pydantic model `UserBase` with common fields. Other models (`UserIn`, `UserOut`, `UserInDB`) inherit from `UserBase` and add or modify specific fields, making model definitions DRY (Don't Repeat Yourself). This inheritance is automatically understood by Pydantic and FastAPI for validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class UserBase(BaseModel):
    username: str
    email: str
    full_name: str | None = None

class UserIn(UserBase):
    password: str

class UserOut(UserBase):
    pass

class UserInDB(UserBase):
    hashed_password: str

# Rest of the fake functions and endpoint would typically follow, 
# similar to the previous example but using these new models.
```

----------------------------------------

TITLE: Declaring Pydantic Model Examples (Pydantic v2)
DESCRIPTION: Demonstrates how to add example data to a Pydantic model's JSON schema using the `model_config` attribute with the `json_schema_extra` key, specifically for Pydantic v2. This data is used by tools like Swagger UI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Any
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2
                }
            ]
        }
    }
```

----------------------------------------

TITLE: Installing Uvicorn Server (console)
DESCRIPTION: Provides the command-line instruction to install the Uvicorn ASGI server with standard dependencies. Uvicorn is commonly used to run FastAPI applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
pip install "uvicorn[standard]"

```

----------------------------------------

TITLE: Defining List Response Model with FastAPI and Pydantic
DESCRIPTION: Demonstrates using `typing.List` (or `list` in Python 3.9+) with FastAPI's `response_model` to specify that the endpoint will return a list where each item conforms to a particular Pydantic model (`Item`). This provides automatic documentation and validation for endpoints returning arrays of structured objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

@app.get("/items/", response_model=List[Item])
def read_items():
    return [
        {"name": "item1", "price": 1.5},
        {"name": "item2", "price": 2.5},
    ]
```

----------------------------------------

TITLE: Adding GZip Compression Middleware - Python
DESCRIPTION: This snippet demonstrates adding the `GZipMiddleware` to a FastAPI application. This middleware automatically compresses responses with GZip if the client indicates support via the `Accept-Encoding` header, reducing bandwidth usage. It can be configured with a `minimum_size` to avoid compressing very small responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.gzip import GZipMiddleware

app = FastAPI()

app.add_middleware(GZipMiddleware, minimum_size=500)
```

----------------------------------------

TITLE: Float Path Parameter > and < Validation (Annotated) - FastAPI Python
DESCRIPTION: This snippet shows how numeric validations work for `float` path parameters using `Annotated` and `Path`. The `gt=0` and `lt=5` arguments validate that the float value for `item_id` must be strictly greater than 0 and strictly less than 5.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(
    item_id: Annotated[float, Path(title="The ID of the item to get", gt=0, lt=5)],
):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining a FastAPI Dependency with a Sub-dependency (query_or_cookie_extractor) - Python
DESCRIPTION: Creates a dependency function ('query_or_cookie_extractor') that itself depends on 'query_extractor'. It also retrieves an optional 'last_query' cookie. It returns the query parameter if present, otherwise the cookie value.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends, Cookie

def query_or_cookie_extractor(
    q: str = Depends(query_extractor),
    last_query: str | None = Cookie(default=None)
):
    if not q:
        return last_query
    return q
```

----------------------------------------

TITLE: Defining Optional Query Parameter in FastAPI (Python)
DESCRIPTION: Shows a basic FastAPI path operation with an optional string query parameter `q`. It demonstrates how to define an optional parameter using `str | None` (Python 3.10+) or `Union[str, None]` and setting the default value to `None`. FastAPI automatically recognizes this as a query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(q: str | None = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Copy Application Code - Dockerfile
DESCRIPTION: Copies the application source code directory (`./app`) into the Docker image. This step is placed later in the Dockerfile because the application code changes frequently. Placing it after dependency installation maximizes the chance that the earlier, time-consuming dependency installation step can utilize the build cache.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_10

LANGUAGE: Dockerfile
CODE:
```
COPY ./app /code/app
```

----------------------------------------

TITLE: Using Class Dependencies with Implicit Depends in FastAPI Endpoint (Type Hint)
DESCRIPTION: Demonstrates the shorthand syntax for integrating a class-based dependency using a type hint and an empty `Depends()`. FastAPI infers the dependency class from the type hint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

app = FastAPI()

class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit

@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends()):
    # FastAPI infers the dependency from the type hint
    return {"q": commons.q, "skip": commons.skip, "limit": commons.limit}
```

----------------------------------------

TITLE: Defining Multiple Files Parameter (UploadFile) in FastAPI Python
DESCRIPTION: Defines a parameter `files` as a list of `UploadFile` objects to handle uploading multiple files under the same form field name. Each item in the list is an `UploadFile` instance, providing an asynchronous interface and metadata for individual files.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_7

LANGUAGE: Python
CODE:
```
async def create_upload_files(files: list[UploadFile]):
    # Process list of UploadFile objects
    for file in files:
        print(f"Received file: {file.filename}")
        contents = await file.read()
```

----------------------------------------

TITLE: Declaring Multiple File Parameters FastAPI Python
DESCRIPTION: These snippets show how to accept multiple files simultaneously in a single endpoint by declaring the parameter type as a `List` of `bytes` or `UploadFile`. FastAPI will handle the multiple files provided in the form data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_7

LANGUAGE: Python
CODE:
```
async def create_files(files: List[bytes] = File()):
```

LANGUAGE: Python
CODE:
```
async def create_upload_files(files: List[UploadFile]):
```

----------------------------------------

TITLE: Creating a FastAPI Async Lifespan Context Manager - Python
DESCRIPTION: Defines an async function decorated with `@asynccontextmanager` that serves as the application's lifespan manager. Code before `yield` runs on startup, and code after `yield` runs on shutdown, enabling resource management.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    print("Loading ML models...")
    ml_models["research"] = "Fake research model"
    ml_models["marketing"] = "Fake marketing model"
    print("ML models loaded")
    yield
    # Clean up the ML models and release the resources
    print("Unloading ML models...")
```

----------------------------------------

TITLE: Verifying Required Scopes Against Provided Token Scopes (Python)
DESCRIPTION: Implements the core authorization logic by iterating through the scopes required (`security_scopes.scopes`) and checking if each one is present in the list of scopes extracted from the valid token (`token_data.scopes`). If any required scope is missing, an `HTTPException` is raised.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_6

LANGUAGE: Python
CODE:
```
# ... inside dependency function ...
for scope in security_scopes.scopes:
    if scope not in token_data.scopes:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Not enough permissions",
            headers={"WWW-Authenticate": f"Bearer scope=\"{security_scopes.scope_str}\""},
        )
return user
```

----------------------------------------

TITLE: Marking a Test Function as Asynchronous with Pytest
DESCRIPTION: This snippet highlights the use of the `@pytest.mark.anyio` marker and the `async def` keyword to define a Pytest test function that can execute asynchronous code. This is essential for using libraries like `httpx.AsyncClient` or interacting with async databases within tests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#_snippet_2

LANGUAGE: Python
CODE:
```
@pytest.mark.anyio
async def test_read_root():
```

----------------------------------------

TITLE: Setting Response Status Code Python FastAPI
DESCRIPTION: Demonstrates how to set a specific HTTP status code for a FastAPI route using a constant from the `status` module. The `@app.get()` decorator's `status_code` parameter is used with `status.HTTP_418_IM_A_TEAPOT` to explicitly set the response status for the `/items/` endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/status.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()


@app.get("/items/", status_code=status.HTTP_418_IM_A_TEAPOT)
def read_items():
    return [{"name": "Plumbus"}, {"name": "Portal Gun"}]
```

----------------------------------------

TITLE: Declaring Root List of Pydantic Models in FastAPI Parameter (Python)
DESCRIPTION: Declares an API endpoint parameter named `images` as a list where each item must be an `Image` Pydantic model. FastAPI uses this type hint to validate the entire request body as an array of `Image` objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_13

LANGUAGE: Python
CODE:
```
images: list[Image]
```

----------------------------------------

TITLE: Using Background Tasks with Dependency Injection - Python
DESCRIPTION: Illustrates how `BackgroundTasks` instances are automatically handled by FastAPI's dependency injection system. By declaring `BackgroundTasks` as a type-hinted parameter in a path operation function (or a dependency), FastAPI injects the correct instance, which can then be used to add tasks that will run after the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, BackgroundTasks

app = FastAPI()

def write_notification(email: str, message=""):
    # This function would typically write to a file, send email, etc.
    # For the example, let's simulate writing to a log file.
    with open("log.txt", mode="a") as log:
         log.write(f"Notification for {email}: {message}\n")


@app.post("/send-notification-di/{email}")
async def send_notification_di(
    email: str,
    background_tasks: BackgroundTasks # FastAPI injects the instance here
):
    background_tasks.add_task(write_notification, email, message="some notification")
    return {"message": "Notification will be sent in the background"}
```

----------------------------------------

TITLE: Using Settings with FastAPI Dependency Injection (Python)
DESCRIPTION: Demonstrates how to use the `get_settings` function as a dependency in a FastAPI path operation function. The settings object is injected into the route handler, making configuration easily accessible where needed within the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

from .config import get_settings
from .config import Settings

app = FastAPI()


@app.get("/items/")
async def read_items(settings: Settings = Depends(get_settings)):
    return {"app_name": settings.app_name, "items_per_user": settings.items_per_user}
```

----------------------------------------

TITLE: Importing APIRouter Class (Python)
DESCRIPTION: This Python snippet shows the standard import statement for the `APIRouter` class. Importing `APIRouter` from the `fastapi` package is the prerequisite for defining modular API routes and endpoints that can be included in a main FastAPI application. It assumes FastAPI is installed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/apirouter.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import APIRouter

```

----------------------------------------

TITLE: Defining get_current_user Dependency Signature
DESCRIPTION: Introduces the signature for the `get_current_user` dependency function, showing how it receives the raw token string by depending on the pre-configured `oauth2_scheme`, preparing for token processing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#_snippet_2

LANGUAGE: python
CODE:
```
# ... utility function definition ...

async def get_current_user(token: str = Depends(oauth2_scheme)): # hl[25]
    # ... rest of the function ...
```

----------------------------------------

TITLE: Overriding Request Validation Handler (FastAPI) - Python
DESCRIPTION: Shows how to override the default handler for `RequestValidationError`, which occurs when incoming request data fails Pydantic validation. The custom handler intercepts the error and returns a plain text response instead of the default JSON, demonstrating how to change the format of validation error responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import PlainTextResponse\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return PlainTextResponse(str(exc))
```

----------------------------------------

TITLE: Mixing Required, Default, and Optional Query Params (FastAPI, Python)
DESCRIPTION: Demonstrates combining required (`needy`), parameters with default values (`skip`), and optional parameters (`limit`) in a single FastAPI endpoint. This showcases FastAPI's ability to handle complex query parameter configurations based on type hints and default value assignments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: str, needy: str, skip: int = 0, limit: Optional[int] = None):
    # Example logic - not specified in text, just demonstrate usage
    item = {"item_id": item_id, "needy": needy, "skip": skip}
    if limit is not None:
        item.update({"limit": limit})
    return item
```

----------------------------------------

TITLE: Creating Database Tables on Startup
DESCRIPTION: Registers the `create_db_and_tables` function to run when the FastAPI application starts up, ensuring the database schema is initialized.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: Python
CODE:
```
app = FastAPI()


@app.on_event("startup")
def on_startup():
    create_db_and_tables()
```

----------------------------------------

TITLE: Defining FastAPI App with Tags
DESCRIPTION: This Python snippet demonstrates how to organize multiple route operations in a FastAPI application using the `tags` parameter in the route decorators. Tags are used in the OpenAPI specification to group related endpoints, which can influence how clients are generated, often creating separate service classes per tag.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    price: float
    is_offer: bool | None = None


class ResponseMessage(BaseModel):
    message: str


app = FastAPI()


@app.get("/items/", tags=["items"])
def read_items():
    return [{"name": "Portal Gun", "price": 42}]


@app.post("/items/", response_model=ResponseMessage, tags=["items"])
def create_item(item: Item):
    return {"message": f"Item '{item.name}' received"}


@app.get("/users/", tags=["users"])
def read_users():
    return [{"username": "Rick"}]


@app.post("/users/", tags=["users"])
def create_user(user: dict):
    return user
```

----------------------------------------

TITLE: Pinning Pydantic Version Range in requirements.txt
DESCRIPTION: This snippet illustrates how to specify a version range for the `pydantic` dependency in `requirements.txt`. It requires Pydantic version 1.2.0 or later, but strictly less than 2.0.0, ensuring compatibility with the 1.x major series used by earlier FastAPI versions and preventing updates to the potentially breaking 2.x series.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_2

LANGUAGE: txt
CODE:
```
pydantic>=1.2.0,<2.0.0
```

----------------------------------------

TITLE: Formatting FastAPI Authentication Exception with Scopes (Python)
DESCRIPTION: Illustrates creating an `HTTPException` for authentication errors, including the `WWW-Authenticate` header required by OAuth2. The header value includes the scopes (`security_scopes.scope_str`) that were required but not provided or validated.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_4

LANGUAGE: Python
CODE:
```
credentials_exception = HTTPException(
    status_code=status.HTTP_401_UNAUTHORIZED,
    detail="Could not validate credentials",
    headers={"WWW-Authenticate": f"Bearer scope=\"{security_scopes.scope_str}\""},
)
```

----------------------------------------

TITLE: Defining List of Pydantic Sub-Models (Python)
DESCRIPTION: Explains how to define a model field (`images`) that is expected to be a list of instances of another Pydantic model (`Image`) using the `List[Image]` type hint. This allows for an array of complex objects in the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Set, List
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
    images: List[Image] | None = None
```

----------------------------------------

TITLE: Validating Query Min/Max Length with Annotated (Python)
DESCRIPTION: Demonstrates adding both minimum (`min_length`) and maximum (`max_length`) length constraints to an optional string query parameter `q` using `Annotated` with `Query`. FastAPI enforces these length restrictions if the parameter is present.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(min_length=3, max_length=50)] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Declaring List of Strings Parameter in FastAPI/Pydantic (Python)
DESCRIPTION: Declares a request body parameter named 'tags' in FastAPI/Pydantic that is validated as a list containing only string elements. This provides strict type checking, data coercion, and automatic documentation for the list's elements.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
tags: List[str]
```

----------------------------------------

TITLE: Running Uvicorn with Proxy Headers in Dockerfile CMD
DESCRIPTION: This Dockerfile CMD instruction specifies the command to run when the container starts. It launches the Uvicorn server to host the FastAPI application located at `app.main:app`. The `--proxy-headers` flag is included to ensure that Uvicorn correctly processes headers forwarded by a reverse proxy (like `X-Forwarded-For`, `X-Forwarded-Proto`, etc.). The application is bound to all network interfaces (`0.0.0.0`) and listens on port 80.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_11

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Defining HeroBase Data Model
DESCRIPTION: Defines a `HeroBase` class using SQLModel as a base data model (not a table). It includes fields common to multiple Hero representations: `name` and `age`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import List, Union

from fastapi import FastAPI, HTTPException
from sqlmodel import Field, SQLModel, create_engine, Session, select


class HeroBase(SQLModel):
    name: str = Field(index=True)
    age: Union[int, None] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Defining Pydantic BaseSettings Class (Python)
DESCRIPTION: Defines a `Settings` class that inherits from `pydantic_settings.BaseSettings`. Type-hinted attributes (`app_name`, `admin_email`, `items_per_user`) automatically map to environment variables (e.g., `APP_NAME`) and are validated and cast to the specified types upon instantiation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_5

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Declare Path Parameter with Enum Type
DESCRIPTION: This Python code defines a GET endpoint where the `model_name` path parameter is type-hinted with the custom `ModelName` Enum. FastAPI will validate that the incoming path parameter value is one of the Enum members and provide dropdown options in the documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: Python
CODE:
```
from enum import Enum

from fastapi import FastAPI


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


app = FastAPI()


@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name == ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeNet the Great!"}

    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Defining Sub-FastAPI Application and Route - Python
DESCRIPTION: This snippet defines an independent FastAPI application instance (`subapi`) that will be mounted later. It includes a path operation (`@subapi.get("/path")`) specific to this sub-application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/sub-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
subapi = FastAPI()

@subapi.get("/path")
async def read_path():
    return {"message": "Read Path"}
```

----------------------------------------

TITLE: Configure Pydantic v2 to Read .env File
DESCRIPTION: This Python code modifies the Pydantic v2 `Settings` class to load configuration from a specified `.env` file by setting the `env_file` key within the `model_config` attribute. Variables in the `.env` file take precedence over environment variables if both are set.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_12

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field


class Settings(BaseSettings):
    model_config = SettingsConfigDict(env_file=".env")

    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Implementing Custom Exception Handler (FastAPI) - Python
DESCRIPTION: Defines and registers a custom exception handler for a specific, non-standard application exception (`UnicornException`). The handler function takes the request and the exception as arguments and returns a custom `JSONResponse`, allowing for tailored error messages and status codes for application-specific errors.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_3

LANGUAGE: Python
CODE:
```
class UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request,\n                                    exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},\n    )\n\n@app.get("/unicorns/{name}")\nasync def read_unicorn(name: str):\n    if name != "yolo":\n        raise UnicornException(name)\n    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Combining Request Body and Path Parameters in FastAPI (Python)
DESCRIPTION: Shows how to declare both a path parameter (`item_id: int`) and a request body parameter (`item: Item`) in the same FastAPI path operation function. FastAPI automatically distinguishes and handles both types of parameters correctly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_4

LANGUAGE: python
CODE:
```
async def create_item(item_id: int, item: Item):
```

----------------------------------------

TITLE: Returning Dictionary Response - FastAPI - Python
DESCRIPTION: This snippet demonstrates how to return a standard Python dictionary from a FastAPI path operation function. FastAPI automatically converts this dictionary into a JSON response, handling the serialization of keys and values based on their types. It shows accessing attributes (`name`, `price`) of an input model (`item`) and combining them with a path parameter (`item_id`) for the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Declaring Request Body Type - FastAPI - Python
DESCRIPTION: This snippet shows how to declare the expected type (`Item`, typically a Pydantic model) for a request body parameter (`item`) in a FastAPI path operation function. FastAPI uses this type hint to automatically read and validate the incoming JSON body, provide editor support, and generate API documentation, including the expected schema. The `Item` type must be defined elsewhere (e.g., using Pydantic).
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Using Pydantic Model as Request Body (FastAPI, Python)
DESCRIPTION: This snippet demonstrates using the `Item` Pydantic model as the request body for a FastAPI POST endpoint. When used as input, fields with default values (like `description`) are considered optional in the generated OpenAPI schema, as the client is not required to send them.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str
    description: Union[str, None] = None

app = FastAPI()

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Defining a Simple FastAPI Application
DESCRIPTION: This snippet shows a basic FastAPI application definition with a single asynchronous GET endpoint. It serves as the target application for the asynchronous tests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Include APIRouter in Another APIRouter - Python
DESCRIPTION: This snippet demonstrates how to include the path operations from one `APIRouter` instance (`other_router`) into another (`router`). This should be done before including the main `router` in a `FastAPI` application to ensure all nested routes are registered.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_21

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Defining OAuth2 Scheme with Scopes - FastAPI Python
DESCRIPTION: Defines the OAuth2PasswordBearer scheme, specifying the token URL where clients can obtain tokens and listing the available scopes with brief descriptions. These scopes are used for authorization to control access to specific resources. Requires the `OAuth2PasswordBearer` class from `fastapi.security.oauth2`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="token",
    scopes={
        "me": "Read information about the current user.",
        "items": "Read items."
    }
)
```

----------------------------------------

TITLE: Deleting Hero Endpoint in FastAPI with SQLModel
DESCRIPTION: This FastAPI endpoint handles the deletion of a hero by its ID. It retrieves the hero using a SQLModel session. If the hero exists, it deletes it from the session, commits the transaction, and returns the deleted hero (or confirmation) validated against the `HeroPublic` model; otherwise, it raises an HTTP 404 error.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_20

LANGUAGE: Python
CODE:
```
@app.delete("/heroes/{hero_id}", response_model=HeroPublic)
def delete_hero(*, session: Session = Depends(get_session), hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return hero
```

----------------------------------------

TITLE: Testing FastAPI Endpoints with Headers and Data (Python)
DESCRIPTION: Provides examples of testing FastAPI endpoints using `TestClient` that require specific headers or accept JSON request bodies. It shows how to pass headers via the `headers` parameter and JSON data via the `json` parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from .main import app

client = TestClient(app)

def test_read_item():
    response = client.get("/items/2", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == {"item_id": 2}

def test_create_item():
     response = client.post(
         "/items/",
         json={"name": "Foo Bar", "price": 12.3},
         headers={"X-Token": "fake-super-secret-token"},
     )
     assert response.status_code == 200
     assert response.json() == {"name": "Foo Bar", "price": 12.3}

def test_create_item_bad_token():
     response = client.post(
         "/items/",
         json={"name": "Foo Bar", "price": 12.3},
         headers={"X-Token": "invalid-token"},
     )
     assert response.status_code == 400
     assert response.json() == {"detail": "X-Token header invalid"}

def test_read_item_bad_token():
     response = client.get("/items/2", headers={"X-Token": "invalid-token"})
     assert response.status_code == 400
     assert response.json() == {"detail": "X-Token header invalid"}
```

----------------------------------------

TITLE: Defining User Paths with APIRouter - Python
DESCRIPTION: Demonstrates how to create a set of path operations specifically for user-related endpoints within a separate module (`app/routers/users.py`) using FastAPI's `APIRouter`. It shows importing `APIRouter`, creating an instance, and decorating asynchronous functions with `@router.get` for various user-related paths.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()


@router.get("/users/")
async def read_users():
    return ["Rick", "Morty"]


@router.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@router.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Example Install FastAPI with Standard Extras
DESCRIPTION: An example command showing how to install the FastAPI package along with its standard dependencies using pip. This command is presented as an illustration and not meant to be run immediately.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_19

LANGUAGE: console
CODE:
```
// Don't run this now, it's just an example 🤓
$ pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Raising HTTPException for Client Errors
DESCRIPTION: Demonstrates how to raise an HTTPException within a path operation function. Raising the exception immediately stops the execution of the current request and returns an HTTP response with the specified status code (404 Not Found) and detail message to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
raise HTTPException(status_code=404, detail="Item not found")
```

----------------------------------------

TITLE: Importing Router Modules (Relative) - Python
DESCRIPTION: This snippet demonstrates importing entire modules containing APIRouter instances using relative imports. From the 'app/main.py' module, `.routers` refers to the 'app/routers/' package, and `items, users` imports the 'app/routers/items.py' and 'app/routers/users.py' modules, making their contents accessible via `items.some_variable` or `users.some_variable`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
from .routers import items, users
```

----------------------------------------

TITLE: Adding HTTPS Redirect Middleware - Python
DESCRIPTION: This snippet demonstrates how to add the `HTTPSRedirectMiddleware` to a FastAPI application. This middleware automatically intercepts incoming HTTP and WebSocket requests and redirects them to their secure HTTPS and WSS counterparts, enhancing security by ensuring encrypted communication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)
```

----------------------------------------

TITLE: Using Defined Tags in FastAPI Path Operations
DESCRIPTION: Assign path operations (like GET, POST, etc.) to specific tags defined in the `openapi_tags` metadata. This is achieved by adding the `tags` parameter to the path operation decorator (e.g., `@app.get` or `@app.post`). The `tags` parameter takes a list of strings, where each string is the name of a tag.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

# Assuming app and tags_metadata are defined as above

@app.get("/items/", tags=["items"])
async def read_items():
    return [{"name": "Foo", "id": "foo"}]


@app.get("/users/", tags=["users"])
async def read_users():
    return [{"name": "Bar", "id": "bar"}]
```

----------------------------------------

TITLE: Accept Pure List Body in FastAPI Endpoint - Python
DESCRIPTION: Shows how to declare a FastAPI endpoint that expects the top-level request body to be a JSON array (Python `list`) where each element conforms to a specified Pydantic model (`Image`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, HttpUrl

app = FastAPI()

class Image(BaseModel):
    url: HttpUrl
    name: str

@app.post("/images/multiple/")
async def create_multiple_images(images: list[Image]): # hl[13]
    return images
```

----------------------------------------

TITLE: Declaring Form Fields with Pydantic in FastAPI (Python)
DESCRIPTION: Defines a Pydantic model to structure expected form data (e.g., username, password). Shows how to receive this model's data automatically extracted from the request's form body within a FastAPI path operation function using `fastapi.Form` or `Annotated` with `Form()`. Requires the `python-multipart` dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-form-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Form
from pydantic import BaseModel

app = FastAPI()

# Define the Pydantic Model for form data
class User(BaseModel):
    username: str
    password: str

@app.post("/login/")
# Receive the Pydantic model data from the form body
async def login(*, user: Annotated[User, Form()]):
    return {"message": f"User {user.username} logged in successfully"}
```

----------------------------------------

TITLE: Implementing Full Data Update with FastAPI PUT and jsonable_encoder (Python)
DESCRIPTION: This snippet shows how to handle a full data replacement using the HTTP PUT method in FastAPI. It demonstrates converting the incoming Pydantic model (`item`) into a JSON-compatible format using `jsonable_encoder` before storing it, typically in a database or dictionary like `items`. This process completely replaces the existing item data with the new data provided in the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-updates.md#_snippet_0

LANGUAGE: Python
CODE:
```
update_item_encoded = jsonable_encoder(item)
items[item_id] = update_item_encoded
return update_item_encoded
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn Workers using fastapi CLI
DESCRIPTION: Demonstrates how to start a FastAPI application using the `fastapi run` command, specifically configuring it to use 4 worker processes. The `--workers` option instructs Uvicorn to launch multiple processes, enabling better utilization of multi-core CPUs and improving concurrency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/deployment/server-workers.md#_snippet_0

LANGUAGE: console
CODE:
```
$ <pre> <font color="#4E9A06">fastapi</font> run --workers 4 <u style="text-decoration-style:single">main.py</u>
<font color="#3465A4">INFO    </font> Using path <font color="#3465A4">main.py</font>
<font color="#3465A4">INFO    </font> Resolved absolute path <font color="#75507B">/home/user/code/awesomeapp/</font><font color="#AD7FA8">main.py</font>
<font color="#3465A4">INFO    </font> Searching for package file structure from directories with <font color="#3465A4">__init__.py</font> files
<font color="#3465A4">INFO    </font> Importing from <font color="#75507B">/home/user/code/</font><font color="#AD7FA8">awesomeapp</font>

 ╭─ <font color="#8AE234"><b>Python module file</b></font> ─╮
 │                      │
 │  🐍 main.py          │
 │                      │
 ╰──────────────────────╯

<font color="#3465A4">INFO    </font> Importing module <font color="#4E9A06">main</font>
<font color="#3465A4">INFO    </font> Found importable FastAPI app

 ╭─ <font color="#8AE234"><b>Importable FastAPI app</b></font> ─╮
 │                          │
 │  <span style="background-color:#272822"><font color="#FF4689">from</font></span><span style="background-color:#272822"><font color="#F8F8F2"> main </font></span><span style="background-color:#272822"><font color="#FF4689">import</font></span><span style="background-color:#272822"><font color="#F8F8F2"> app</font></span><span style="background-color:#272822">  </span>  │
 │                          │
 ╰──────────────────────────╯

<font color="#3465A4">INFO    </font> Using import string <font color="#8AE234"><b>main:app</b></font>

 <font color="#4E9A06">╭─────────── FastAPI CLI - Production mode ───────────╮</font>
 <font color="#4E9A06">│                                                     │</font>
 <font color="#4E9A06">│  Serving at: http://0.0.0.0:8000                    │</font>
 <font color="#4E9A06">│                                                     │</font>
 <font color="#4E9A06">│  API docs: http://0.0.0.0:8000/docs                 │</font>
 <font color="#4E9A06">│                                                     │</font>
 <font color="#4E9A06">│  Running in production mode, for development use:   │</font>
 <font color="#4E9A06">│                                                     │</font>
 <font color="#4E9A06">│  </font><font color="#8AE234"><b>fastapi dev</b></font><font color="#4E9A06">                                        │</font>
 <font color="#4E9A06">│                                                     │</font>
 <font color="#4E9A06">╰─────────────────────────────────────────────────────╯</font>

<font color="#4E9A06">INFO</font>:     Uvicorn running on <b>http://0.0.0.0:8000</b> (Press CTRL+C to quit)
<font color="#4E9A06">INFO</font>:     Started parent process [<font color="#34E2E2"><b>27365</b></font>]
<font color="#4E9A06">INFO</font>:     Started server process [<font color="#06989A">27368</font>]
<font color="#4E9A06">INFO</font>:     Waiting for application startup.
<font color="#4E9A06">INFO</font>:     Application startup complete.
<font color="#4E9A06">INFO</font>:     Started server process [<font color="#06989A">27369</font>]
<font color="#4E9A06">INFO</font>:     Waiting for application startup.
<font color="#4E9A06">INFO</font>:     Application startup complete.
<font color="#4E9A06">INFO</font>:     Started server process [<font color="#06989A">27370</font>]
<font color="#4E9A06">INFO</font>:     Waiting for application startup.
<font color="#4E9A06">INFO</font>:     Application startup complete.
<font color="#4E9A06">INFO</font>:     Started server process [<font color="#06989A">27367</font>]
<font color="#4E9A06">INFO</font>:     Waiting for application startup.
<font color="#4E9A06">INFO</font>:     Application startup complete.

```

----------------------------------------

TITLE: Declaring Dependency Functions for Path Operations - Python
DESCRIPTION: These Python functions are examples of dependencies that can be added to a path operation's `dependencies` list. They can access headers (`Header()`), raise `HTTPException` on failure, and return values (although returned values from `dependencies` are not passed to the path operation function). They are processed before the path operation executes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import Header, HTTPException

def verify_x_key(x_key: str = Header()):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key

def verify_x_token(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token
```

----------------------------------------

TITLE: Install Uvicorn and Gunicorn Dependencies (Console)
DESCRIPTION: Installs the necessary Python packages, Uvicorn with the 'standard' extra for performance, and Gunicorn. Gunicorn will act as the master process manager for the Uvicorn workers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install "uvicorn[standard]" gunicorn
```

----------------------------------------

TITLE: Defining Basic SQLModel Table
DESCRIPTION: Defines a `Hero` class using SQLModel which represents a table in the database. It includes fields for name, age, and a primary key ID, specifying database constraints and types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List, Union

from fastapi import FastAPI
from sqlmodel import Field, SQLModel, create_engine


class Hero(SQLModel, table=True):
    id: Union[int, None] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    age: Union[int, None] = Field(default=None, index=True)
    secret_name: str
```

----------------------------------------

TITLE: Building FastAPI Docker Image (Annotated) - Dockerfile
DESCRIPTION: Defines the Docker build process for a FastAPI application using a multi-file structure ('/app'), with step-by-step annotations explaining each instruction (FROM, WORKDIR, COPY, RUN, CMD) and the concept of Docker layer caching for optimization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_3

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Defining Optional Body Parameter in FastAPI Python
DESCRIPTION: This snippet demonstrates a FastAPI path operation function that accepts a path parameter, an optional query parameter (implicitly), and an optional body parameter of a Pydantic model type. The body parameter is made optional by assigning it a default value of `None`. FastAPI automatically handles the optional body data, expecting the Item model structure directly in the body if provided.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item | None = None):
    results = {"item_id": item_id}
    if item:
        results.update(item.model_dump())
    return results
```

----------------------------------------

TITLE: Defining a Simple FastAPI Dependency (query_extractor) - Python
DESCRIPTION: Defines a basic dependency function that extracts an optional 'q' query parameter from the request and returns it. This serves as a simple building block for more complex dependencies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
def query_extractor(q: str | None = None):
    return q
```

----------------------------------------

TITLE: Defining a Background Task Function - Python
DESCRIPTION: Define a standard Python function (sync or async) that will perform the background task. This function can accept arguments as needed by the task. In this example, it simulates sending an email by writing to a file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#_snippet_1

LANGUAGE: Python
CODE:
```
def write_notification(email: str, message=""):
    with open("log.txt", mode="a") as email_file:
        content = f"notification for {email}: {message}\n"
        email_file.write(content)
```

----------------------------------------

TITLE: Defining Path Operations with APIRouter - Python FastAPI
DESCRIPTION: After initializing an APIRouter instance, you use it the same way you would use a FastAPI application instance to define path operations. This snippet shows example GET and POST endpoints defined using the 'router' object. Parameters, response models, and other features work identically to defining them on the main FastAPI app.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()


@router.get("/users/")
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]


@router.get("/users/me")
async def read_user_me():
    return {"username": "fakecurrentuser"}


@router.get("/users/{username}")
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Using BackgroundTasks with Dependency Injection - FastAPI Python
DESCRIPTION: Declare `BackgroundTasks` as a parameter in dependencies and path operations. FastAPI merges all tasks added via different injected `BackgroundTasks` objects (e.g., from a dependency and the path operation itself) and runs them after the response is sent.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#_snippet_3

LANGUAGE: Python
CODE:
```
def get_query_background_tasks(background_tasks: BackgroundTasks, q: str | None = None):
    background_tasks.add_task(write_log, f"Query: {q}\n")
async def send_notification(
    email: str, background_tasks: BackgroundTasks, q_tasks: BackgroundTasks = Depends(get_query_background_tasks)
):
```

----------------------------------------

TITLE: Define Password Hashing and User Utilities (Python)
DESCRIPTION: Initializes a `Passlib` context for password hashing, defines a fake user database including a hashed password, and provides utility functions (`verify_password`, `get_user`, `authenticate_user`) to verify passwords and retrieve user details.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: python
CODE:
```
from passlib.context import CryptContext
from typing import Union

# Define a PassLib context for password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# This is a fake users database, replace with a real DB
fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "email": "johndoe@example.com",
        "full_name": "John Doe",
        "disabled": False,
        # The password "secret" encrypted with Bcrypt
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
    }
}

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_user(db, username: str):
    if username in db:
        user_dict = db[username]
        return user_dict
    return None

def authenticate_user(db, username: str, password: str):
    user = get_user(db, username)
    if not user:
        return False
    if not verify_password(password, user["hashed_password"]):
        return False
    return user
```

----------------------------------------

TITLE: Define Pydantic v2 Settings Class
DESCRIPTION: This Python code defines a configuration class `Settings` that inherits from `BaseSettings` (from `pydantic_settings`). Attributes are declared with type annotations; Pydantic automatically reads corresponding environment variables (case-insensitive), validates types, and applies default values if variables are not set. `Field` can be used for additional validation or configuration.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_2

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Handling Body, Path, and Query Parameters (Python)
DESCRIPTION: Defines a route function that receives a path parameter (`item_id`), a request body parameter (`item` typed with a Pydantic model), and an optional query parameter (`q`). FastAPI automatically determines the source of each parameter based on its type hint and definition context.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_7

LANGUAGE: Python
CODE:
```
async def update_item(item_id: int, item: Item, q: str | None = None):
```

----------------------------------------

TITLE: Declare Required Query Parameter with Annotated Validation in FastAPI
DESCRIPTION: This snippet demonstrates how to make a query parameter required while applying validation (`min_length`) using `Annotated` and `Query`. A parameter is required if it does not have a default value defined.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str, Query(min_length=3)]):
     return {"q": q}
```

----------------------------------------

TITLE: Testing FastAPI App and Triggering Events with TestClient - Python
DESCRIPTION: This snippet demonstrates how to use FastAPI's `TestClient` within a `with` statement to test an application. The `with client:` context manager ensures that the `startup` event handler is called before entering the block and the `shutdown` event handler is called upon exiting the block, providing a realistic testing environment for applications with event handlers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/testing-events.md#_snippet_1

LANGUAGE: Python
CODE:
```
with client:
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Simulating Token Decoding and User Fetching
DESCRIPTION: Presents a placeholder utility function `fake_decode_token` to simulate the process of decoding a token and retrieving associated user data, and shows how `get_current_user` calls this utility.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#_snippet_3

LANGUAGE: python
CODE:
```
def fake_decode_token(token):
    # Simulate decoding token and returning user data
    # This is just a placeholder
    return {"username": "johndoe", "email": "johndoe@example.com"} # hl[19:22]

async def get_current_user(token: str = Depends(oauth2_scheme)):
    user_data = fake_decode_token(token) # hl[26]
    # Simulate fetching user from data
    user = User(**user_data)
    return user # hl[27]
```

----------------------------------------

TITLE: Reading a Single Hero Record by ID
DESCRIPTION: Defines a FastAPI GET endpoint `/heroes/{hero_id}` to retrieve a single hero record by its ID. It uses a `select` statement filtered by the provided ID.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException


@app.get("/heroes/{hero_id}")
def read_hero(*, hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: Importing Security Tools in FastAPI (Python)
DESCRIPTION: This Python snippet imports various security classes from the `fastapi.security` module. These classes provide different security schemes like API Key authentication, HTTP authentication (Basic, Bearer, Digest), OAuth2, and OpenID Connect, which can be used with FastAPI dependencies for securing API endpoints and integrating with OpenAPI documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/security/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.security import (
    APIKeyCookie,
    APIKeyHeader,
    APIKeyQuery,
    HTTPAuthorizationCredentials,
    HTTPBasic,
    HTTPBasicCredentials,
    HTTPBearer,
    HTTPDigest,
    OAuth2,
    OAuth2AuthorizationCodeBearer,
    OAuth2PasswordBearer,
    OAuth2PasswordRequestForm,
    OAuth2PasswordRequestFormStrict,
    OpenIdConnect,
    SecurityScopes,
)
```

----------------------------------------

TITLE: Providing Body Parameter Examples in FastAPI (Python)
DESCRIPTION: This snippet shows how to provide examples for the request body parameter in a FastAPI path operation using the `Body` factory function and its `examples` parameter. This allows defining multiple named examples that will be displayed in the interactive API documentation UI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/schema-extra-example.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Body
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

class User(BaseModel):
    username: str
    full_name: str | None = None

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        ...,
        examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
            "invalid": {
                "summary": "Invalid data is rejected",
                "value": {
                    "name": "Bar",
                    "price": "twenty five",
                },
                "description": "Price should be a number.",
            },
        },
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Declaring Response Model via response_model Parameter - FastAPI Python
DESCRIPTION: This snippet defines a Pydantic model `Item` and uses it in the `response_model` parameter of the `@app.get` decorator (`response_model=Item`). This is an alternative to using the return type annotation, particularly useful when the function's actual return value differs from the desired response model, ensuring FastAPI still validates and filters the output.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    price: float
    tags: list[str] = []


app = FastAPI()


items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {"name": "Bar", "price": "62", "description": "The Bar Fighters"},
    "baz": {"name": "Baz", "price": 50.2, "rating": 5},
}


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Mounting Static Files Application using FastAPI/Python
DESCRIPTION: This snippet demonstrates the basic setup to serve static files (like CSS, JS, images) from a local directory (`directory="static"`) by mounting a `StaticFiles` instance at a specific URL path (`"/static"`) within a FastAPI application. It requires importing `FastAPI` and `StaticFiles` from `fastapi.staticfiles` to configure the application instance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/static-files.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")

# You can add other routes here
# @app.get("/")
# async def read_root():
#     return {"message": "Hello World"}
```

----------------------------------------

TITLE: Mounting Static Files in FastAPI Python
DESCRIPTION: This snippet demonstrates how to mount `StaticFiles` to serve content from the 'static' directory at the '/static' URL path. It requires the `fastapi` and `starlette` libraries. The first argument to `app.mount` is the base URL path, the second is the `StaticFiles` instance pointing to the local directory, and the optional third argument is an internal name.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/static-files.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")
```

----------------------------------------

TITLE: Defining Sync Path Operation Function with Blocking Call in FastAPI (Python)
DESCRIPTION: This example shows how to define a path operation function using standard `def` in FastAPI. This is suitable for functions that perform CPU-bound tasks or call synchronous, blocking libraries without `await` support. FastAPI will run this function in a separate thread to avoid blocking the main event loop.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Testing Settings Dependency Override (Python)
DESCRIPTION: Shows how to test a FastAPI application that uses a settings dependency. It uses `app.dependency_overrides` to replace the `get_settings` dependency with a custom function that returns test settings, allowing for isolated testing of components.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_12

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from .config import Settings, get_settings
from .main import app

def get_settings_override():
    return Settings(
        admin_email="test@example.com", app_name="Test App", items_per_user=5
    )


app.dependency_overrides[get_settings] = get_settings_override

client = TestClient(app)

def test_read_items():
    response = client.get("/items/")
    assert response.status_code == 200
    assert response.json() == {
        "app_name": "Test App",
        "items_per_user": 5,
    }

```

----------------------------------------

TITLE: Defining Optional Query Parameter in FastAPI
DESCRIPTION: This snippet defines a basic asynchronous path operation function with an optional query parameter `q`. By setting the type hint to `str | None` (or `Union[str, None]` for older Python versions) and providing a default value of `None`, FastAPI recognizes the parameter as optional.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def read_items(q: str | None = None):
```

----------------------------------------

TITLE: Deleting a Hero Record by ID
DESCRIPTION: Defines a FastAPI DELETE endpoint `/heroes/{hero_id}` to remove a hero record from the database by its ID. It retrieves the hero, deletes it, commits the change, and returns a success message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_9

LANGUAGE: Python
CODE:
```
@app.delete("/heroes/{hero_id}")
def delete_hero(*, session: SessionDep, hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Using Settings from Separate config.py (Python)
DESCRIPTION: Imports the `Settings` class from the `config` module (assuming `config.py` is in the Python path). It then creates a global `settings` instance in the main application file (`main.py`), demonstrating how to access configuration defined in a separate module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_9

LANGUAGE: Python
CODE:
```
from config import Settings
from fastapi import FastAPI


settings = Settings()

app = FastAPI()


@app.get("/items/")
async def read_items():
    return {"app_name": settings.app_name, "items_per_user": settings.items_per_user}
```

----------------------------------------

TITLE: Running Docker Container - Shell
DESCRIPTION: Demonstrates the command `docker run -d --name mycontainer -p 80:80 myimage` to start a new Docker container named `mycontainer` in detached mode, mapping host port 80 to container port 80, based on the previously built `myimage`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_6

LANGUAGE: Shell
CODE:
```
$ docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: Running FastAPI with Workers (fastapi command)
DESCRIPTION: Demonstrates how to start a FastAPI application (`main.py`) using the `fastapi run` command. The `--workers 4` option tells Uvicorn to launch 4 worker processes, enabling the application to utilize multiple CPU cores for handling requests concurrently. The output shows the parent process and the individual worker process IDs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/server-workers.md#_snippet_0

LANGUAGE: Console
CODE:
```
$ fastapi run --workers 4 main.py

  FastAPI  Starting production server 🚀

             Searching for package file structure from directories with
             __init__.py files
             Importing from /home/user/code/awesomeapp

    module  🐍 main.py

      code  Importing the FastAPI app object from the module with the
              following code:

              from main import app

       app  Using import string: main:app

    server  Server started at http://0.0.0.0:8000
    server  Documentation at http://0.0.0.0:8000/docs

             Logs:

      INFO  Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to
              quit)
      INFO  Started parent process [27365]
      INFO  Started server process [27368]
      INFO  Started server process [27369]
      INFO  Started server process [27370]
      INFO  Started server process [27367]
      INFO  Waiting for application startup.
      INFO  Waiting for application startup.
      INFO  Waiting for application startup.
      INFO  Waiting for application startup.
      INFO  Application startup complete.
      INFO  Application startup complete.
      INFO  Application startup complete.
      INFO  Application startup complete.
```

----------------------------------------

TITLE: Validating Query Pattern with Annotated (Python)
DESCRIPTION: Shows how to apply a regular expression `pattern` constraint to an optional string query parameter `q` using `Annotated` with `Query`. The parameter must match the specified regex pattern (here, exactly "^fixedquery$") if provided.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(min_length=3, max_length=50, pattern="^fixedquery$")] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Dynamically Set HTTP Status Code with Response Parameter in Python
DESCRIPTION: This Python snippet shows how to include the `Response` object as a parameter in a FastAPI path operation function. By accessing and modifying the `status_code` attribute of this `Response` object, the application can dynamically determine and set the HTTP status code for the response returned by the endpoint, overriding any default or decorator-set status code. This method is useful for returning specific status codes like 201 upon resource creation or other context-dependent codes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/response-change-status-code.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

# Assume some logic might decide the status code here
# For this example, we set it explicitly to 201 Created
@app.get("/items/")
def create_item(response: Response):
    # Perform some logic, e.g., create an item in the database
    # If creation is successful, set the status code to 201
    response.status_code = 201 # Setting status code dynamically
    return {"message": "Item created successfully!"} # Return response body
```

----------------------------------------

TITLE: Using Class Dependency in Path Operation (Python, FastAPI)
DESCRIPTION: This snippet demonstrates how to inject an instance of a class dependency into a FastAPI path operation function. The class is declared as a parameter type hint, and `Depends(Class)` tells FastAPI to create and provide an instance of that class by solving its `__init__` parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from typing import Union

app = FastAPI()

class CommonQueryParams:
    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit

@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):
    return {"q": commons.q, "skip": commons.skip, "limit": commons.limit}
```

----------------------------------------

TITLE: Setting Response Status Code with Status Constant (FastAPI/Python)
DESCRIPTION: This snippet demonstrates how to configure the HTTP status code for a FastAPI path operation. It uses `status.HTTP_201_CREATED` from `fastapi.status` (which mirrors `starlette.status`) to set the response code to 201 instead of the default 200. This code is also included in the generated OpenAPI schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()


@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Defining Item Paths with APIRouter Configuration - Python
DESCRIPTION: Demonstrates how to create a set of path operations for item-related endpoints (`app/routers/items.py`) using `APIRouter`, applying common configurations like `prefix`, `tags`, `dependencies`, and `responses` directly to the router instance to avoid repetition in individual path decorators.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends

from ..dependencies import get_token_header

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]


@router.get("/{item_id}")
async def read_item(item_id: str):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring Query Parameters with a Pydantic Model - FastAPI - Python
DESCRIPTION: This snippet demonstrates defining a set of related query parameters using a Pydantic BaseModel. The model is then used as a dependency in a FastAPI path operation function via `fastapi.Query`. FastAPI automatically extracts query parameters from the request and validates them against the Pydantic model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
from pydantic import BaseModel

app = FastAPI()

# Define a Pydantic model for query parameters
class PaginationParams(BaseModel):
    limit: int = 10
    offset: int = 0

# Use the Pydantic model with Query in a path operation
@app.get("/items/")
async def read_items(params: PaginationParams = Query(...)): # highlighted line 17
    # The 'params' object is an instance of PaginationParams
    return {"limit": params.limit, "offset": params.offset}
```

----------------------------------------

TITLE: Pinning FastAPI to Exact Version in requirements.txt
DESCRIPTION: This snippet demonstrates how to specify an exact version (0.112.0) for the `fastapi` package, including the 'standard' extras, using the '==' operator in a `requirements.txt` file or similar dependency declaration. This ensures only that specific version is installed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/versions.md#_snippet_0

LANGUAGE: txt
CODE:
```
fastapi[standard]==0.112.0
```

----------------------------------------

TITLE: Including/Excluding Fields in FastAPI Response using Set Python
DESCRIPTION: Shows how to use `response_model_include` and `response_model_exclude` parameters with a `set` of field names in FastAPI path operations. `response_model_include` returns only the specified fields, while `response_model_exclude` omits the specified fields from the Pydantic response model output.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_16

LANGUAGE: Python
CODE:
```
from typing import List, Union
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: float = 10.5
    tags: List[str] = []

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {
        "name": "Bar",
        "description": "The bartenders",
        "price": 62,
        "tax": 20.2,
    },
    "baz": {
        "name": "Baz",
        "description": None,
        "price": 50.2,
        "tax": 10.5,
        "tags": [],
    },
}

@app.get(
    "/items/{item_id}",
    response_model=Item,
    response_model_include={"name", "description"},
)
async def read_item_include(item_id: str):
    return items[item_id]

@app.get(
    "/items2/{item_id}",
    response_model=Item,
    response_model_exclude={"tax"},
)
async def read_item_exclude(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Combining Path and Query Params (FastAPI, Python)
DESCRIPTION: Explains how to declare and use both path parameters (`item_id`) and multiple query parameters (`q`, `skip`, `limit`) within the same FastAPI path operation function. FastAPI differentiates path parameters from query parameters based on their presence in the defined path string.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_items(item_id: str, q: Optional[str] = None, skip: int = 0, limit: int = 10):
     # Example logic - not specified in text, just demonstrate usage
     item = {"item_id": item_id, "skip": skip, "limit": limit}
     if q:
         item.update({"q": q})
     return item
```

----------------------------------------

TITLE: Generate JWT Access Token Utility (Python)
DESCRIPTION: Defines constants for JWT secret key, algorithm, and expiration time. Includes a Pydantic model `TokenData` for the token payload and a function `create_access_token` to generate a signed JWT with an optional expiration delta.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: python
CODE:
```
from datetime import datetime, timedelta
from typing import Union
from jose import JWTError, jwt
from pydantic import BaseModel

# to get a string like this run:
# openssl rand -hex 32
SECRET_KEY = "your-secret-key" # CHANGE THIS TO A SECURE RANDOM KEY
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

class TokenData(BaseModel):
    username: Union[str, None] = None

def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Defining Required Query Params (FastAPI, Python)
DESCRIPTION: Shows how to define a required query parameter (`needy`) in FastAPI by declaring it with a type hint but without a default value. If a request is made without this required parameter, FastAPI automatically returns a validation error.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: str, needy: str):
     return {"item_id": item_id, "needy": needy}
```

----------------------------------------

TITLE: Using Nested and Pydantic Dataclasses with FastAPI
DESCRIPTION: This comprehensive snippet illustrates several advanced use cases for dataclasses with FastAPI, including nested dataclasses, using `pydantic.dataclasses` as a drop-in replacement for standard dataclasses, using dataclasses in `response_model` for lists or single objects, and using lists of dataclasses in the request body. It also shows combining sync (`def`) and async (`async def`) endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from typing import List
from dataclasses import field
from pydantic.dataclasses import dataclass # Using pydantic's version

# Define nested dataclasses, potentially using pydantic.dataclasses
@dataclass
class Item:
    name: str
    price: float = field(default=None) # Example of using field
    tags: List[str] = field(default_factory=list) # Using default_factory

@dataclass
class Author:
    name: str
    items: List[Item]

app = FastAPI()

# Endpoint using nested dataclass as response_model
@app.get("/author/{author_id}", response_model=Author)
def read_author(author_id: int):
    return Author(
        name="Jane Doe",
        items=[
            Item(name="Book A", price=10.0, tags=["fiction"]),
            Item(name="Book B", price=15.0, tags=["non-fiction"]),
        ],
    )

# Endpoint using list of dataclasses in request body
@app.post("/items/bulk/")
def create_bulk_items(items: List[Item]):
    # Process the list of items
    return {"created_count": len(items)}

# Endpoint using list of dataclasses as response_model
@app.get("/items/", response_model=List[Item])
def read_items():
    # Returning a list of dicts, FastAPI converts using response_model
    return [
        {"name": "Item 1", "price": 10.0},
        {"name": "Item 2", "price": 20.0},
    ]

# Example of a synchronous endpoint
@app.get("/sync-endpoint/")
def sync_endpoint():
    return {"message": "This is a sync endpoint"}
```

----------------------------------------

TITLE: Specifying List Response Model in FastAPI Python
DESCRIPTION: Shows how to declare that an API endpoint will return a list of objects, all conforming to a specific Pydantic model. Using typing.List[Item] (or list[Item] in Python 3.9+) ensures validation and documentation indicate that the response body is an array of Item objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import List # Or list in Python 3.9+
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

@app.get("/items/", response_model=List[Item]) # Use List even in 3.9+ for value
async def read_items():
    return [{"name": "Item A", "price": 10.5}, {"name": "Item B", "price": 20.3}]
```

----------------------------------------

TITLE: Declaring Additional 404 Response with Model in FastAPI Python
DESCRIPTION: This snippet demonstrates how to add an extra response for status code 404 using the `responses` parameter in a FastAPI path operation decorator. It associates the 404 response with a Pydantic model (`Message`) which FastAPI uses to generate the corresponding JSON schema in the OpenAPI documentation, alongside the primary 200 response model (`Item`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Response
from fastapi.responses import JSONResponse
from pydantic import BaseModel


class Item(BaseModel):
    id: str
    value: str


class Message(BaseModel):
    message: str


app = FastAPI()


@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={
        404: {
            "description": "The item was not found",
            "model": Message
            }
        }
)
async def read_item(item_id: str):
    if item_id != "foo":
        return JSONResponse(status_code=404, content={"message": "Item not found"})
    return {"id": "foo", "value": "there goes my hero"}
```

----------------------------------------

TITLE: Creating SQLModel Engine
DESCRIPTION: Creates a SQLModel engine instance, which manages connections to the database. This example connects to a SQLite database file named `database.db` and disables the same-thread check for compatibility with FastAPI's async nature.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_2

LANGUAGE: Python
CODE:
```
DATABASE_FILE = "database.db"
DATABASE_URL = f"sqlite:///{DATABASE_FILE}"

engine = create_engine(DATABASE_URL, echo=True, connect_args={"check_same_thread": False})
```

----------------------------------------

TITLE: Handling Multiple Pydantic Models in FastAPI Body Python
DESCRIPTION: This snippet shows how to define a FastAPI endpoint that accepts a request body containing multiple structured objects defined by Pydantic models (`Item` and `User`). FastAPI automatically parses the body, expecting keys corresponding to the parameter names (`item` and `user`), and validates each nested object according to its model definition.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item, user: User):
    results = {"item_id": item_id}
    results.update({"item": item.model_dump()})
    results.update({"user": user.model_dump()})
    return results
```

----------------------------------------

TITLE: Defining Enum for Predefined Path Parameter Values in Python
DESCRIPTION: This snippet shows how to define a Python Enum class that inherits from `str` and `Enum`. This allows you to define a set of predefined, valid string values that a path parameter can accept.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_7

LANGUAGE: Python
CODE:
```
from enum import Enum

# ... other imports

class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Defining HeroCreate Model with SQLModel in Python
DESCRIPTION: This snippet defines the `HeroCreate` SQLModel class, used for validating data received from clients when creating a new hero. It includes all fields from `HeroBase` plus the `secret_name`, which is stored in the database but not returned in API responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_14

LANGUAGE: Python
CODE:
```
class HeroCreate(HeroBase):
    secret_name: str
```

----------------------------------------

TITLE: Use Global Settings Object in FastAPI
DESCRIPTION: This Python snippet shows a basic FastAPI application using a globally available `settings` object (an instance of the Pydantic `Settings` class) to access configuration values like `app_name` and `admin_email` within a path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
# Assuming settings object is imported or defined globally
# from your_settings_module import settings

app = FastAPI()


@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Define Settings Class in Separate Module (config.py)
DESCRIPTION: This Python code shows the structure of the Pydantic `Settings` class definition placed in a separate file named `config.py`, intended to organize application configuration away from the main application file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_6

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Validating Required Scopes in Dependency - FastAPI Python
DESCRIPTION: A dependency function (`get_current_user`) that uses `SecurityScopes` to receive the combined set of scopes required by the path operation and its dependency chain. It retrieves the authenticated user's scopes from the token and checks if all required scopes are present in the user's granted scopes. If not, it raises an `HTTPException` with a `WWW-Authenticate` header indicating the missing scopes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi.security import SecurityScopes, OAuth2PasswordBearer
from fastapi import Depends, HTTPException, status

# Assume oauth2_scheme is defined
# Assume TokenData model and token decoding logic exist
# Assume function to retrieve user based on username exists

async def get_current_user(
    security_scopes: SecurityScopes, # Receives scopes from Security()
    token: str = Depends(oauth2_scheme) # Gets token from header
):
    # Placeholder: Decode token to get username and granted scopes
    # try:
    #    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    #    username: str = payload.get("sub")
    #    user_scopes = payload.get("scopes", []) # Get scopes from token payload
    #    if username is None:
    #        raise credential_exception # Or raise HTTPException
    #    token_data = TokenData(scopes=user_scopes, username=username)
    # except JWTError:
    #    raise credential_exception # Or raise HTTPException

    # Placeholder: Retrieve user from database
    # user = get_user(fake_users_db, username=token_data.username)
    # if user is None:
    #    raise credential_exception # Or raise HTTPException

    # Validate required scopes against user's granted scopes (from token_data.scopes)
    # Assuming 'user_scopes' is the list of scopes obtained from the token
    user_scopes = token_data.scopes # Access scopes from the validated TokenData
    for scope in security_scopes.scopes: # Iterate through scopes required by the path/dependencies
        if scope not in user_scopes:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Not enough permissions",
                headers={"WWW-Authenticate": f"Bearer scope=\"{security_scopes.scope_str}\""}, # Indicate missing scopes
            )

    # return user # Return the authenticated user object
```

----------------------------------------

TITLE: Adding Tags to Path Operations (FastAPI/Python)
DESCRIPTION: This snippet shows how to assign tags to FastAPI path operations using the `tags` parameter, which takes a list of strings. These tags are used by the automatic documentation interfaces (like Swagger UI/ReDoc) to group related endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post(
    "/items/",
    tags=["items"],
)
async def create_item(name: str):
    return {"name": name}
```

LANGUAGE: Python
CODE:
```
@app.get("/users/", tags=["users"])
async def get_users():
    return ["Rick", "Morty"]
```

----------------------------------------

TITLE: Defining FastAPI path parameters with extra types - Python
DESCRIPTION: This snippet shows part of a FastAPI path operation function demonstrating the use of various extra data types like UUID, datetime, date, and timedelta as function parameters. FastAPI/Pydantic automatically handles the parsing and validation of incoming request data (e.g., from body or query) into these specific Python types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-data-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import datetime, date, timedelta
from uuid import UUID
    end_date: Union[date, None] = Body(default=None),
    repeat_at: Union[time, None] = Body(default=None), # Assuming time is imported
    process_after: Union[timedelta, None] = Body(default=None),
    # Assuming some query params too, though not explicitly listed for these types
    # e.g., name: Union[str, None] = Query(default=None)
```

----------------------------------------

TITLE: Initializing APIRouter in a Module - Python FastAPI
DESCRIPTION: This snippet demonstrates how to create an APIRouter instance within a module intended for handling a specific set of related path operations (like user endpoints). You import APIRouter from fastapi and then create an instance, typically named 'router', which will be used to define routes within this file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()
```

----------------------------------------

TITLE: Configure CMD in Shell Form (Avoid) - Dockerfile
DESCRIPTION: Shows the shell form of the `CMD` instruction in a Dockerfile. This form runs the command inside a shell, which can prevent proper signal handling (like SIGTERM for graceful shutdown) and is generally discouraged for application entrypoints. This is presented as an example to avoid.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
CMD fastapi run app/main.py --port 80
```

----------------------------------------

TITLE: Declare Typed Path Parameter in FastAPI
DESCRIPTION: This Python code defines a GET endpoint with a path parameter `item_id` type-hinted as `int`. FastAPI uses this type hint for automatic data parsing and validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Building FastAPI Docker Image (Standard) - Dockerfile
DESCRIPTION: Defines the Docker build process for a FastAPI application using a multi-file structure (typically with app code in an '/app' directory). It sets the working directory, copies requirements, installs dependencies, copies the app code, and sets the default command to run the Uvicorn server.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Running the FastAPI Application
DESCRIPTION: This command starts the FastAPI development server using `fastapi dev`, which automatically reloads the application on code changes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_10

LANGUAGE: console
CODE:
```
$ fastapi dev main.py
<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Importing Routers with Absolute Import Python
DESCRIPTION: This Python import statement demonstrates an alternative, absolute way to import the `items` and `users` submodules. It specifies the full package path starting from the project root (`app`). Both relative and absolute imports can work depending on the context and configuration.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_13

LANGUAGE: Python
CODE:
```
from app.routers import items, users

```

----------------------------------------

TITLE: Importing Router Submodule Absolute Python
DESCRIPTION: Demonstrates an absolute import statement to access the `items` submodule located within the `app.routers` subpackage from another module (e.g., `app.main`). Requires the `app` directory structure to be a valid Python package.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from app.routers import items
```

----------------------------------------

TITLE: Defining Multiple Files as list[bytes] (Python)
DESCRIPTION: This snippet shows how to accept multiple files associated with the same form field. By annotating the parameter as `list[bytes]` and using `File()`, FastAPI receives all files as a list of byte contents. This is suitable for receiving multiple small files simultaneously.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_6

LANGUAGE: Python
CODE:
```
async def create_upload_files(files: list[bytes] = File()):
```

----------------------------------------

TITLE: Excluding Unset Fields in FastAPI Response Python
DESCRIPTION: Applies the `response_model_exclude_unset=True` parameter to a FastAPI path operation decorator. When serializing the `response_model`, this tells FastAPI (via Pydantic's `exclude_unset`) to omit fields from the JSON output if their values were not explicitly set when the model instance was created, even if the model definition provides a default value for that field.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import List, Union
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: float = 10.5
    tags: List[str] = []

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {
        "name": "Bar",
        "description": "The bartenders",
        "price": 62,
        "tax": 20.2,
    },
    "baz": {
        "name": "Baz",
        "description": None,
        "price": 50.2,
        "tax": 10.5,
        "tags": [],
    },
}

@app.get("/items/{item_id}", response_model=Item, response_model_exclude_unset=True)
async def read_item(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Defining Hero Table Model with Inheritance
DESCRIPTION: Defines the main `Hero` class, which is a database table model (`table=True`). It inherits from `HeroBase` to include `name` and `age`, and adds table-specific fields: a primary key `id` and `secret_name`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import List, Union

from fastapi import FastAPI, HTTPException
from sqlmodel import Field, SQLModel, create_engine, Session, select


class HeroBase(SQLModel):
    name: str = Field(index=True)
    age: Union[int, None] = Field(default=None, index=True)


class Hero(HeroBase, table=True):
    id: Union[int, None] = Field(default=None, primary_key=True)
    secret_name: str
```

----------------------------------------

TITLE: Forbidding Extra Query Parameters with Pydantic Model Config - FastAPI - Python
DESCRIPTION: This example shows how to restrict the allowed query parameters when using a Pydantic model by configuring the model to `forbid` extra fields. Adding `model_config = ConfigDict(extra='forbid')` to the Pydantic model definition will cause FastAPI to return a validation error if unexpected query parameters are sent in the request.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
from pydantic import BaseModel, ConfigDict # Import ConfigDict

app = FastAPI()

# Define a Pydantic model and forbid extra fields
class PaginationParams(BaseModel):
    model_config = ConfigDict(extra='forbid') # highlighted line 10

    limit: int = 10
    offset: int = 0

# Use the Pydantic model with Query in a path operation
@app.get("/items/")
async def read_items(params: PaginationParams = Query(...)):
    # The 'params' object is an instance of PaginationParams
    return {"limit": params.limit, "offset": params.offset}
```

----------------------------------------

TITLE: Using ORJSONResponse with response_class in FastAPI (Python)
DESCRIPTION: Demonstrates how to specify ORJSONResponse as the response class for a path operation using the `response_class` parameter. This allows FastAPI to use the `orjson` library for faster JSON serialization, provided `orjson` is installed. The function returns a standard Python dict which FastAPI will then serialize using the specified class.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()

@app.get("/json", response_class=ORJSONResponse)
def read_json():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Encoding Data with jsonable_encoder for JSONResponse in FastAPI
DESCRIPTION: When returning a JSONResponse directly instead of letting FastAPI handle the data, you need to manually encode data types that are not natively JSON compatible (like Pydantic models, datetime, UUID, etc.) using jsonable_encoder before passing them to the JSONResponse constructor. This ensures the content is suitable for JSON serialization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/response-directly.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonable_encoder
from datetime import datetime

app = FastAPI()

class MyData:
    def __init__(self, name: str, timestamp: datetime):
        self.name = name
        self.timestamp = timestamp

@app.get("/items")
async def read_items():
    # Create data that needs encoding
    item_data = MyData(name="test", timestamp=datetime.utcnow())
    # Encode the data using jsonable_encoder
    json_compatible_data = jsonable_encoder(item_data)
    # Return JSONResponse with encoded data
    return JSONResponse(content=json_compatible_data)
```

----------------------------------------

TITLE: Initializing Main FastAPI App and Root Path Op (Python)
DESCRIPTION: Initializes the main FastAPI application instance named `app`. It also begins the definition of a GET path operation for the root route (`/`) of this main application, demonstrating how to define a basic endpoint. This snippet requires the `FastAPI` class to be imported.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_main():
```

----------------------------------------

TITLE: Marking Path Operation as Deprecated in FastAPI (Python)
DESCRIPTION: Demonstrates how to mark a path operation as deprecated by setting the `deprecated` parameter to `True` in the decorator. This indicates that the endpoint is obsolete but still available, and it is visually marked as deprecated in the generated documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/", deprecated=True)
async def read_items():
    return [{"item": "Foo"}]
```

----------------------------------------

TITLE: Adding Summary and Description Parameters (FastAPI/Python)
DESCRIPTION: This snippet shows how to provide a brief `summary` and a more detailed `description` directly to the path operation decorator. Both are included in the OpenAPI schema and displayed in the interactive documentation UI, providing clear information about the endpoint's purpose.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post(
    "/items/",
    tags=["items"],
    summary="Create an item",
    description="Create an item with all the information, name, description, price and tax.",
)
async def create_item(name: str):
    """
    Create an item with all the information:

    - **name**: each item must have a name
    - **description**: a long description
    - **price**: required
    - **tax**: if the item has tax, you can add it
    """
    return {"name": name}
```

----------------------------------------

TITLE: Declaring Optional Header Parameter with Default Value in FastAPI
DESCRIPTION: This snippet demonstrates how to define a path operation function that accepts an optional header parameter named `x_token`. By using `Header(default=None)` and the `str | None` type hint, the header is treated as optional, defaulting to `None` if not present in the request. It extracts the value as a string.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/header-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Header

app = FastAPI()

@app.get("/")
async def read_items(x_token: str | None = Header(default=None)):
    return {"X-Token": x_token}
```

----------------------------------------

TITLE: Returning RedirectResponse Object Directly in FastAPI
DESCRIPTION: Demonstrates performing an HTTP redirect by returning a `RedirectResponse` object directly from a path operation. The response will have a 307 status code (Temporary Redirect) by default and include the `Location` header pointing to the specified URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer")
async def redirect_typer():
    return RedirectResponse("https://typer.tiangolo.com")
```

----------------------------------------

TITLE: Including One APIRouter in Another in Python
DESCRIPTION: This snippet illustrates how an APIRouter instance can include another APIRouter. This allows for building complex, nested routing structures within your FastAPI application. Parameters can also be applied during this nested inclusion.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_14

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Initializing FastAPI Application and Route - Python
DESCRIPTION: This snippet shows the basic setup for a FastAPI application, including necessary imports and defining a simple route. This minimal application structure is required to generate an OpenAPI schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/extending-openapi.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, APIRouter
from fastapi.openapi.utils import get_openapi

app = FastAPI()

@app.get("/items/")
async def read_items():
    return [{"name": "Foo"}]
```

----------------------------------------

TITLE: Defining and Registering Custom Exception Handler
DESCRIPTION: Illustrates how to define a custom exception class and register a specific handler function for it using the `@app.exception_handler()` decorator. The handler function intercepts the exception and returns a custom JSON response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from starlette.requests import Request

class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name

app = FastAPI()

@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={
            "message": f"Oops! {exc.name} did something. There goes a rainbow..."
        },
    )

@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Declaring Optional File Parameters FastAPI Python
DESCRIPTION: These snippets illustrate how to make file parameters optional using `Optional` from the `typing` module and setting the default value to `File(None)`. This works for both `bytes` and `UploadFile` types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def create_file(file: Optional[bytes] = File(None)):
```

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: Optional[UploadFile] = File(None)):
```

----------------------------------------

TITLE: Defining Optional File as UploadFile (Python)
DESCRIPTION: This snippet shows how to make a file parameter of type `UploadFile` optional using the type union (`| None`) and `File(default=None)`. This allows handling routes where a file upload might be optional, leveraging the features of `UploadFile` when present. Requires Python 3.10+ syntax.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: UploadFile | None = File(default=None)):
```

----------------------------------------

TITLE: Including Singular Value in FastAPI Body with Models Python
DESCRIPTION: This snippet illustrates how to include a simple data type, like an integer (`importance`), within the request body alongside Pydantic models (`item`, `user`) in a FastAPI path operation. By using the `Body()` function with the singular parameter, it is explicitly designated as a field within the request body rather than a query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item, user: User, importance: int = Body()):
    results = {"item_id": item_id}
    results.update({"item": item.model_dump()})
    results.update({"user": user.model_dump()})
    results.update({"importance": importance})
    return results
```

----------------------------------------

TITLE: Run FastAPI Application Development Server (Console)
DESCRIPTION: Executes the FastAPI application using the `fastapi dev` command. This starts a development server (Uvicorn) with auto-reload enabled, making the API available for testing and allowing access to the interactive documentation at the specified local host and port.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Console
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Mounting Sub FastAPI App to Path (Python)
DESCRIPTION: Uses the `app.mount()` method to attach the previously defined `subapi` instance to the main `app`. The sub-application will handle all requests under the specified path prefix `/subapi`. This is the core step to integrate the independent sub-application into the main application's routing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_2

LANGUAGE: python
CODE:
```
subapi = FastAPI()
# ... (lines 12-18 are assumed to be here)
app.mount("/subapi", subapi)
```

----------------------------------------

TITLE: Adding HTTPS Redirect Middleware - FastAPI - Python
DESCRIPTION: Shows how to add the `HTTPSRedirectMiddleware` to a FastAPI application. This middleware automatically redirects incoming HTTP requests to HTTPS, ensuring that all communication occurs over a secure connection. It requires importing the middleware from `fastapi.middleware.httpsredirect` or `starlette.middleware.httpsredirect`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)
```

----------------------------------------

TITLE: Pinning Pydantic to Major Version Range
DESCRIPTION: This snippet demonstrates how to pin the `pydantic` package to a specific major version range (2.x.x) using '>=' and '<'. This ensures compatibility with FastAPI v2 while allowing minor and patch updates within the Pydantic v2 series, preventing an automatic upgrade to Pydantic v3 which might introduce breaking changes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/versions.md#_snippet_3

LANGUAGE: txt
CODE:
```
pydantic>=2.7.0,<3.0.0
```

----------------------------------------

TITLE: Install python-multipart Dependency - Console
DESCRIPTION: Installs the `python-multipart` library using pip. This library is required by FastAPI to correctly parse `multipart/form-data` requests, which are used for receiving both file uploads and standard form fields in the same request.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Installing Python Multipart Dependency
DESCRIPTION: This command installs the `python-multipart` library, which is a required dependency for FastAPI to parse and handle incoming form data from client requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-forms.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Declare Required Parameter Allowing None with Annotated in FastAPI
DESCRIPTION: This snippet shows how to declare a query parameter that is required (no default value) but is allowed to accept `None` as a valid value. This is achieved using `Annotated`, specifying `str | None` as the type, and not providing a default value.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query()]): # Use Union for Python < 3.10
    return {"q": q}
```

----------------------------------------

TITLE: Defining FastAPI App with Parameters and Headers (Python)
DESCRIPTION: Presents a more complex FastAPI application featuring endpoints that accept path parameters and request bodies, and require a custom header (`X-Token`) for authentication using a dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends, Header, HTTPException
from typing import Union

app = FastAPI()

async def verify_token(x_token: Union[str, None] = Header(default=None)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")

@app.get("/items/{item_id}")
async def read_item(item_id: int, x_token: str = Depends(verify_token)):
    return {"item_id": item_id}

@app.post("/items/")
async def create_item(item: dict, x_token: str = Depends(verify_token)):
     return item
```

----------------------------------------

TITLE: Setting Dynamic Status Code with FastAPI Response Parameter (Python)
DESCRIPTION: This snippet demonstrates how to include a `Response` parameter in a FastAPI path operation function to control the HTTP status code dynamically. By assigning a value to `response.status_code`, the default status code for the operation (specified by `status_code` parameter in `@app.post`, if any) is overridden for that specific response. The `response_model` functionality remains active for the returned data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/response-change-status-code.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

# Assume an 'Item' Pydantic model is defined elsewhere
# e.g., class Item(BaseModel): name: str

@app.post("/items/")
async def create_item(item: Item, response: Response):
    # Imagine logic here to determine if item was created or already exists
    item_created = True # Placeholder for actual logic

    if item_created:
        response.status_code = 201 # Set status code to CREATED (201)
        return {"message": "Item created successfully", "item": item}
    else:
        # By default, if not explicitly set, status will be 200 (OK)
        return {"message": "Item already exists", "item": item}
```

----------------------------------------

TITLE: Creating a Basic FastAPI APIRouter in Python
DESCRIPTION: This snippet shows the basic structure of creating an APIRouter instance. This router can contain multiple path operations and is intended to be included in a larger FastAPI application. It is defined without global parameters at this stage.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends

# Assume get_token_header is defined elsewhere, e.g., in dependencies.py
# from .dependencies import get_token_header

router = APIRouter()

@router.get("/items/")
async def read_items():
    """
    Read items from the admin section.
    """
    return [{"item_id": "AdminFoo"}]

@router.get("/users/")
async def read_users():
    """
    Read users from the admin section.
    """
    return [{"user_id": "AdminBar"}]
```

----------------------------------------

TITLE: Running FastAPI App with Hypercorn (Console)
DESCRIPTION: Starts the Hypercorn ASGI server to run a FastAPI application. It specifies the application entry point (main:app) and configures the server to bind to all network interfaces (0.0.0.0) on port 80.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_3

LANGUAGE: console
CODE:
```
$ hypercorn main:app --bind 0.0.0.0:80

Running on 0.0.0.0:8080 over http (CTRL + C to quit)
```

----------------------------------------

TITLE: Using Pydantic Dataclasses with Nested Models Python
DESCRIPTION: Illustrates using `pydantic.dataclasses` for creating dataclasses with enhanced features like validation and nesting. This example defines two `pydantic.dataclass` models (`Item` and `Author`, where `Author` contains a list of `Item`s) and uses the nested structure as a `response_model` in a FastAPI path operation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/dataclasses.md#_snippet_2

LANGUAGE: Python
CODE:
```
from dataclasses import field
from typing import List, Optional

from fastapi import FastAPI
from pydantic import BaseModel
from pydantic.dataclasses import dataclass as pydantic_dataclass

@pydantic_dataclass
class Item:
    name: str = field(default="Anonymous Item")
    price: float = field(default=0.0)
    tags: list[str] = field(default_factory=list)

@pydantic_dataclass
class Author:
    name: str
    items: List[Item] = field(default_factory=list)

app = FastAPI()

@app.post("/authors/", response_model=Author)
async def create_author(author: Author):
    return author
```

----------------------------------------

TITLE: Adding Trusted Host Middleware - Python
DESCRIPTION: This snippet shows how to add the `TrustedHostMiddleware` to a FastAPI application, specifying a list of allowed hostnames. This middleware validates the incoming `Host` header against the provided list, rejecting requests with untrusted hostnames to mitigate potential Host Header poisoning vulnerabilities.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.trustedhost import TrustedHostMiddleware

app = FastAPI()

app.add_middleware(TrustedHostMiddleware, allowed_hosts=["example.com", "*.example.com"])
```

----------------------------------------

TITLE: Defining UploadFile Parameter in FastAPI Python
DESCRIPTION: Defines a path operation parameter named `file` with the type hint `UploadFile`. `UploadFile` provides an asynchronous file-like interface, automatically handling larger files by spooling to disk and offering metadata like filename and content type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: UploadFile):
    # Process file using async methods or file.file
    contents = await file.read()
    print(f"Filename: {file.filename}")
```

----------------------------------------

TITLE: Using HTMLResponse with response_class in FastAPI (Python)
DESCRIPTION: Shows how to declare HTMLResponse as the expected response class for an endpoint using the `response_class` parameter. The function returns a string containing HTML content, which FastAPI automatically wraps in the HTMLResponse object, setting the `Content-Type` header to `text/html` and documenting it in OpenAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look, HTML!</h1>
        </body>
    </html>
    """
```

----------------------------------------

TITLE: Using AsyncClient for Asynchronous Requests httpx Python
DESCRIPTION: Demonstrates how to instantiate and use `httpx.AsyncClient` within an `async with` statement in an asynchronous test function. This client is capable of making `await`able HTTP requests to the FastAPI application instance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_4

LANGUAGE: Python
CODE:
```
async with AsyncClient(app=app, base_url="http://test") as client:
    response = await client.get("/")
```

----------------------------------------

TITLE: Passing Lifespan to FastAPI App Python
DESCRIPTION: This snippet demonstrates how to pass the defined async context manager function (e.g., `lifespan`) to the `FastAPI` application constructor using the `lifespan` parameter. This connects the lifecycle function to the application instance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
# Assuming the lifespan function is defined as shown previously

# Pass the lifespan function to the FastAPI app
app = FastAPI(lifespan=lifespan)

# Define routes and other app components below this line
```

----------------------------------------

TITLE: Install Dependencies with Caching - Dockerfile
DESCRIPTION: Installs Python dependencies listed in `requirements.txt` using pip within the Docker build process. By placing this step after copying only `requirements.txt`, Docker can use the cache if the requirements haven't changed, significantly reducing build time. The `--no-cache-dir` flag saves space.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

----------------------------------------

TITLE: Defining Python Dependencies requirements.txt
DESCRIPTION: Specifies the required Python packages and their version constraints for the FastAPI application, typically saved in a `requirements.txt` file for installation using pip.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_1

LANGUAGE: Text
CODE:
```
fastapi[standard]>=0.113.0,<0.114.0
pydantic>=2.7.0,<3.0.0
```

----------------------------------------

TITLE: Add Query Parameter Validation with Annotated in FastAPI
DESCRIPTION: This snippet demonstrates how to use `Annotated` and `Query` to add validation (specifically `max_length`) to an optional query parameter `q`. The `Query` instance with validation parameters is included within `Annotated`, while the optional status is maintained by the function parameter's default value of `None`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(max_length=50)] = None):
    if q:
        return {"q": q}
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Declaring BackgroundTasks Parameter - FastAPI Python
DESCRIPTION: Import `BackgroundTasks` and declare it as a parameter with type annotation in your path operation function. FastAPI will automatically provide an instance of `BackgroundTasks` for you to add tasks to.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import BackgroundTasks, FastAPI

app = FastAPI()

def write_notification(email: str, message=""):
    with open("log.txt", mode="a") as email_file:
        content = f"notification for {email}: {message}\n"
        email_file.write(content)

@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
    pass
```

----------------------------------------

TITLE: Documenting and Overriding Response by returning HTMLResponse
DESCRIPTION: This example combines using `response_class` for OpenAPI documentation and returning a `Response` object directly for implementation control. Setting `response_class=HTMLResponse` documents the endpoint as returning HTML, while the function's return value (`HTMLResponse(...)`) is used as the actual response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse, Response

app = FastAPI()

def generate_html_response():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return generate_html_response()
```

----------------------------------------

TITLE: Defining HeroUpdate Model with SQLModel in Python
DESCRIPTION: This snippet defines the `HeroUpdate` SQLModel class, used for validating data received when updating an existing hero. It includes optional fields mirroring `HeroCreate` (or `HeroBase` plus `secret_name`), allowing clients to send only the fields they wish to change. Fields are re-declared with `None` defaults to make them optional.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_15

LANGUAGE: Python
CODE:
```
class HeroUpdate(HeroBase):
    name: str | None = None
    age: int | None = None
    secret_name: str | None = None
```

----------------------------------------

TITLE: Adding Dependencies to Path Operation Decorator - Python
DESCRIPTION: This snippet shows how to add a list of dependencies (`dependencies=[Depends(...)]`) directly to the path operation decorator (`@app.get`, `@app.post`, etc.). These dependencies will be executed before the path operation function, but their return values will not be passed to the path operation function parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_0

LANGUAGE: python
CODE:
```
@app.get("/items/", dependencies=[Depends(verify_x_key), Depends(verify_x_token)])
async def read_items():
    return [{"item": "Portal Gun"}, {"item": "Plumbus"}]
```

----------------------------------------

TITLE: Define Pydantic Model with List Attribute - Python
DESCRIPTION: Defines a Pydantic `BaseModel` with an attribute annotated as a generic Python `list`. FastAPI and Pydantic will interpret this as an array in the request body, but the type of items within the list is not strictly enforced by the type hint alone.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: list # hl[12]

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Initializing FastAPI Background Tasks - Python
DESCRIPTION: Imports the necessary components from FastAPI, including `FastAPI` and `BackgroundTasks`. It also defines the signature for a path operation function that accepts an instance of `BackgroundTasks` as a dependency, allowing it to manage background tasks for requests to this endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, BackgroundTasks

app = FastAPI()

# Function defined later
def write_notification(email: str, message=""): pass

@app.post("/send-notification/{email}")
async def send_notification(
    email: str,
    background_tasks: BackgroundTasks
):
```

----------------------------------------

TITLE: Adding Trusted Host Middleware - FastAPI - Python
DESCRIPTION: Illustrates adding the `TrustedHostMiddleware` to a FastAPI application. This middleware protects against HTTP Host Header attacks by validating the `Host` header against a list of allowed hostnames, specified via the `allowed_hosts` parameter. Requests with invalid host headers receive a 400 response. Requires importing the middleware from `fastapi.middleware.trustedhost` or `starlette.middleware.trustedhost`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.trustedhost import TrustedHostMiddleware

app = FastAPI()

app.add_middleware(TrustedHostMiddleware, allowed_hosts=["example.com", "*.example.com"])
```

----------------------------------------

TITLE: Defining Form Parameters in FastAPI Endpoint
DESCRIPTION: Defines endpoint parameters `username` and `password` using `fastapi.Form`. This tells FastAPI to parse the request body as form data and assign the corresponding values to these parameters, allowing for validation and documentation generation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-forms.md#_snippet_1

LANGUAGE: python
CODE:
```
async def login(username: str = Form(...), password: str = Form(...)):
```

----------------------------------------

TITLE: Referencing Including Routers Placeholder Python
DESCRIPTION: This snippet is a placeholder referencing Python code from `app/main.py`. The associated text explains how to integrate the `APIRouter` instances from the imported `items` and `users` submodules into the main `FastAPI` application instance using the `app.include_router()` method, highlighting these calls on lines 10-11 of the referenced content.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_16

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/main.py!}

```

----------------------------------------

TITLE: Importing HTTPException in Python
DESCRIPTION: Imports the HTTPException class from the FastAPI framework, which is the standard way to raise HTTP errors that map to specific HTTP status codes and responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException
```

----------------------------------------

TITLE: Defining Function Dependencies in FastAPI
DESCRIPTION: Shows a Python function intended to be used as a FastAPI dependency. It defines common query parameters and returns them as a dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Type Hinting Multiple Possible Types (Union)
DESCRIPTION: Explains how to indicate that a variable or parameter can accept values of more than one type using `Union` from the `typing` module or the pipe operator (`|`) in Python 3.10+. This is useful for flexible functions or data structures.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Union

def process_item(item: Union[int, str]):
    print(item)
```

LANGUAGE: Python
CODE:
```
def process_item(item: int | str):
    print(item)
```

----------------------------------------

TITLE: Instantiating Pydantic Models (Python)
DESCRIPTION: Illustrates how to create instances of a Pydantic model (`User`, defined elsewhere) using standard Python object instantiation. Shows two methods: passing keyword arguments directly and using dictionary unpacking (`**`) to pass data from a dictionary. Requires the Pydantic model definition.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Defining Response with List of Models in FastAPI
DESCRIPTION: This snippet shows how to declare that a FastAPI endpoint will return a list where each element conforms to a specific Pydantic model. It uses `typing.List` (or `list` in Python 3.9+) combined with the model type (`List[Item]`) in the `response_model` argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    price: float


app = FastAPI()


@app.get("/items/", response_model=List[Item])
async def read_items():
    return [
        {"name": "Portal Gun", "price": 42.0},
        {"name": "Plumbus", "price": 32.0},
    ]
```

----------------------------------------

TITLE: Adding ASGI Middleware with FastAPI - Python
DESCRIPTION: This snippet shows the recommended way to add ASGI middleware in FastAPI using `app.add_middleware`. It demonstrates passing the middleware class directly along with any required keyword arguments, allowing FastAPI to handle the middleware instantiation and integration correctly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: Defining Asynchronous Endpoint FastAPI Python
DESCRIPTION: Defines a simple FastAPI application instance and an asynchronous GET endpoint at the root ('/'). This endpoint returns a JSON message asynchronously.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}
```

----------------------------------------

TITLE: Declaring FastAPI Response Model with Union in Python
DESCRIPTION: Explains how to specify that an endpoint's response can conform to one of several possible Pydantic models using typing.Union (or | in Python 3.10+). This is translated to OpenAPI's anyOf schema, allowing the API documentation to accurately represent multiple potential response structures based on conditions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union # Or | in Python 3.10+
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class CarItem(BaseModel):
    car_model: str
    max_speed: float

class PlaneItem(BaseModel):
    plane_model: str
    max_altitude: float = 0

@app.get("/items/{item_id}", response_model=Union[PlaneItem, CarItem]) # Use Union even in 3.10+ for value
async def read_item(item_id: str):
    # Example logic to return different types
    if item_id == "plane":
        return {"plane_model": "Boeing 747", "max_altitude": 45000}
    elif item_id == "car":
        return {"car_model": "Ferrari", "max_speed": 200}
    return {} # Or raise HTTPException
```

----------------------------------------

TITLE: Adding Tags to Path Operations in FastAPI (Python)
DESCRIPTION: Explains how to assign one or more tags (as a list of strings) to a path operation using the `tags` parameter. These tags are used for grouping endpoints in the generated API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/", tags=["items"])
async def get_items():
    return [{"name": "Foo"}, {"name": "Bar"}]


@app.get("/users/", tags=["users"])
async def get_users():
    return [{"name": "Baz"}, {"name": "Qux"}]


@app.get("/items/me", tags=["users", "items"])
async def get_current_user():
    return {"name": "live-user"}
```

----------------------------------------

TITLE: Grouping Endpoints with Tags in FastAPI (Python)
DESCRIPTION: This Python snippet demonstrates adding `tags` to FastAPI path operation decorators (`@app.post`, `@app.get`). Tags are used to group related endpoints in the OpenAPI documentation, which commonly leads to the generation of separate 'service' classes (e.g., `ItemsService`, `UsersService`) in the generated client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Body
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float

class User(BaseModel):
    username: str
    email: str

app = FastAPI()

@app.post("/items/", tags=["items"])
async def create_item(item: Item = Body(...)):
    return {"message": f"Item {item.name} created"}

@app.get("/items/{item_id}", tags=["items"])
async def read_item(item_id: int):
    return {"item_id": item_id}

@app.post("/users/", tags=["users"])
async def create_user(user: User = Body(...)):
    return {"message": f"User {user.username} created"}
```

----------------------------------------

TITLE: Using FileResponse in FastAPI (Python)
DESCRIPTION: Demonstrates how to import and use `FileResponse` directly in a FastAPI path operation function to serve a file from a given path. Requires `fastapi` and the file at the specified path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_12

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()


@app.get("/file")
def read_file():
    return FileResponse("path/to/your/file.png")
```

----------------------------------------

TITLE: Using Pydantic Settings Object (Python)
DESCRIPTION: Shows how to create an instance of the `Settings` class defined using Pydantic's `BaseSettings`. This `settings` object holds the configuration values loaded from environment variables, accessible as typed attributes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_6

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()

print(settings.app_name)
print(settings.admin_email)
print(settings.items_per_user)
```

----------------------------------------

TITLE: Mount Static Files Directory in FastAPI (Self-Hosting)
DESCRIPTION: This code imports `StaticFiles` and mounts a `StaticFiles` instance to the `/static` URL path in the FastAPI application. This serves files from the local `static/` directory, making them accessible via the `/static/...` URL, which is necessary for self-hosting the docs UI assets locally within your application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.staticfiles import StaticFiles

# ... FastAPI app created ...

app.mount("/static", StaticFiles(directory="static"), name="static")
```

----------------------------------------

TITLE: Defining an Asynchronous Function in Python
DESCRIPTION: This example shows how to define a function using `async def`. Functions defined this way can use the `await` keyword internally and must be called using `await` from another `async def` function. They are used for operations that can be paused and resumed, typically I/O-bound tasks.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Combining response_class and Returning Response Object in FastAPI
DESCRIPTION: Demonstrates how to use both the `response_class` parameter (for documentation and headers) and return a `Response` object directly from the function. This allows FastAPI to document the route correctly (e.g., as `text/html`) while using the specific `Response` instance returned by the function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response
from fastapi.responses import HTMLResponse

app = FastAPI()


def generate_html_response():
    html_content = """
    <html>
        <body>
            <h1>Hello World!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return generate_html_response()

```

----------------------------------------

TITLE: Implementing Token Header Dependency (Python 3.8+) - Python
DESCRIPTION: Shows how to define a reusable dependency function (`get_token_header`) in a separate module (`app/dependencies.py`) to extract a custom `X-Token` header using type hints and default values with `fastapi.Header` for Python 3.8+ compatibility. This dependency can be applied to multiple path operations or routers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Header, Depends


async def get_token_header(x_token: str = Header()):
    return x_token
```

----------------------------------------

TITLE: Defining Bytes File Parameter in FastAPI Python
DESCRIPTION: Defines a path operation parameter named `file` with the type hint `bytes` and uses `File(...)` to signify it's a required file upload from form data. When using `bytes`, FastAPI reads the entire file content into memory, suitable for small files.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: bytes = File(...)):
    # Process file content as bytes
    pass
```

----------------------------------------

TITLE: Defining Basic FastAPI App Python
DESCRIPTION: This snippet shows the structure of a minimal FastAPI application file (`main.py`). It imports `FastAPI`, creates an app instance, and defines a simple GET endpoint (`/`) that returns a JSON message. This app is intended to be imported and tested by a separate test file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_main():
    return {"msg": "Hello World"}
```

----------------------------------------

TITLE: Returning Data from PUT Endpoint (Python)
DESCRIPTION: This line shows how the PUT path operation function returns a dictionary. FastAPI automatically serializes this dictionary into a JSON response, demonstrating access to attributes of the validated `item` request body object and the `item_id` path parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Overriding Request Validation Error Handler
DESCRIPTION: Shows how to override the default exception handler for `RequestValidationError`, which is raised when input data fails validation (e.g., Pydantic model validation). The custom handler here returns a plain text response instead of the default JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.exceptions import RequestValidationError
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return PlainTextResponse(str(exc), status_code=status.HTTP_422_UNPROCESSABLE_ENTITY)
```

----------------------------------------

TITLE: Declaring Cookie Parameters in FastAPI
DESCRIPTION: Demonstrates how to define a cookie parameter named 'ads_id' within a path operation function using the `Cookie` dependency. It shows how to provide a type hint and set a default value (None in this case), following the same pattern as `Query` and `Path` parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/cookie-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
def read_items(ads_id: str | None = Cookie(default=None)): pass
```

----------------------------------------

TITLE: Using Function Docstring for Path Operation Description (FastAPI/Python)
DESCRIPTION: This snippet shows how FastAPI automatically reads the docstring of the path operation function and uses it as the `description` in the OpenAPI schema and documentation. Docstrings can contain Markdown, which FastAPI will render correctly, making this suitable for lengthy or formatted descriptions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post(
    "/items/",
    tags=["items"],
    summary="Create an item",
)
async def create_item(name: str):
    """
    Create an item with all the information:

    - **name**: each item must have a name
    - **description**: a long description
    - **price**: required
    - **tax**: if the item has tax, you can add it
    """
    return {"name": name}
```

----------------------------------------

TITLE: Defining File Parameter as bytes (Python)
DESCRIPTION: This snippet demonstrates defining a route parameter `file` annotated with `bytes`. When using `bytes`, FastAPI automatically reads the entire file content into memory. This is suitable for small files but can consume significant memory for large uploads. The `File()` dependency is used to explicitly mark the parameter as a file from form data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: bytes = File()):
```

----------------------------------------

TITLE: Declaring Union Types (Python 3.10+) - Python
DESCRIPTION: Demonstrates the newer, simplified syntax available in Python 3.10 and later for declaring that a variable can be one of several types, using the vertical bar (`|`) to separate the possible types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_11

LANGUAGE: python
CODE:
```
def process_item(item: int | str): pass
```

----------------------------------------

TITLE: Declaring Path Parameter with Enum Type in FastAPI Python
DESCRIPTION: This snippet shows how to use the custom Enum class (ModelName) as the type annotation for a path parameter in a FastAPI path operation. FastAPI will validate that the path parameter value is one of the predefined Enum members.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
```

----------------------------------------

TITLE: Creating a JWT Access Token
DESCRIPTION: Defines the `create_access_token` utility function. It takes data (like username) and an optional expiration delta, calculates the expiration time, encodes the data and expiration into a JWT using the defined secret key and algorithm, and returns the encoded token.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_6

LANGUAGE: python
CODE:
```
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    # Encode the payload into a JWT
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Adding Summary and Description to Path Operation in FastAPI (Python)
DESCRIPTION: Explains how to provide a short `summary` and a longer `description` for a path operation using the respective parameters in the decorator. These details are displayed in the generated API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post(
    "/items/",
    summary="Create an item",
    description="Create an item with all the information, name, description, price, tax and a tag",
)
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Defining Dict Response Model with FastAPI
DESCRIPTION: Shows how to use `typing.Dict` (or `dict` in Python 3.9+) with FastAPI's `response_model` when the endpoint returns a dictionary where the key and value types are known (e.g., `Dict[str, float]`), but the exact keys are not fixed like they would be in a Pydantic model. This is useful for flexible dictionary responses where the schema is partially known.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Dict

from fastapi import FastAPI

app = FastAPI()

@app.get("/items/", response_model=Dict[str, float])
def read_items():
    return {"item1": 1.5, "item2": 2.5}
```

----------------------------------------

TITLE: Returning FileResponse Object Directly in FastAPI
DESCRIPTION: Illustrates returning a `FileResponse` object directly from a path operation to serve a static file. This automatically handles aspects like setting appropriate headers (`Content-Length`, `Last-Modified`, `ETag`) and managing file transfer efficiently.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_12

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()

@app.get("/favicon.ico")
async def favicon():
    return FileResponse("favicon.ico")
```

----------------------------------------

TITLE: Defining a Simple FastAPI Application (Python)
DESCRIPTION: Shows a basic FastAPI application instance (`app = FastAPI()`) that will be used for testing. This application has a single GET endpoint returning a JSON message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_main():
    return {"msg": "Hello World"}
```

----------------------------------------

TITLE: Marking Path Operation as Deprecated (FastAPI/Python)
DESCRIPTION: This snippet shows how to mark a path operation as deprecated by setting the `deprecated` parameter to `True`. This indicates that the endpoint is obsolete and might be removed in the future, and it will be visually marked in the interactive documentation UIs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()


@app.post(
    "/items/",
    tags=["items"],
    summary="Create an item",
    deprecated=True,
)
async def create_item(name: str):
    """
    Create an item with all the information:

    - **name**: each item must have a name
    - **description**: a long description
    - **price**: required
    - **tax**: if the item has tax, you can add it
    """
    return {"name": name}
```

----------------------------------------

TITLE: Reading Env Var in Python with os.getenv
DESCRIPTION: Python script demonstrating how to use `os.getenv()` from the built-in `os` module to read an environment variable. It shows how to provide a default value (e.g., "World") that is used if the variable is not set in the environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/environment-variables.md#_snippet_2

LANGUAGE: python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Reusing Default Exception Handlers (Python)
DESCRIPTION: Demonstrates how to import and call the default FastAPI exception handlers (`http_exception_handler`, `request_validation_exception_handler`) from within your own custom handlers. This allows you to add custom logic (like logging or metrics) before or after the standard error handling while still utilizing FastAPI's default response formatting.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, HTTPException
from fastapi.exceptions import RequestValidationError
from fastapi.exception_handlers import http_exception_handler, request_validation_exception_handler
from starlette.exceptions import HTTPException as StarletteHTTPException
from pydantic import BaseModel

app = FastAPI()

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(
    request: Request,
    exc: RequestValidationError
):
    print("My custom validation exception handler before calling default")
    # Call the default handler to return the standard validation error response
    return await request_validation_exception_handler(request, exc)

@app.exception_handler(StarletteHTTPException)
async def custom_http_exception_handler(
    request: Request,
    exc: StarletteHTTPException
):
    print("My custom http exception handler before calling default")
    # Call the default handler to return the standard HTTP exception response
    return await http_exception_handler(request, exc)

# Example path operation that triggers validation error
class Item(BaseModel):
    title: str
    size: int

@app.post("/items/")
async def create_item(item: Item):
    return item

# Example path operation that triggers HTTP exception
@app.get("/items/{item_id}")
def read_item(item_id: str):
    if item_id != "foo":
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": "The Foo Wrestlers"}
```

----------------------------------------

TITLE: Oauth2 Token Endpoint
DESCRIPTION: Defines a FastAPI POST endpoint `/token` that implements the OAuth2 Password Flow. It takes form data (username and password), authenticates the user using `authenticate_user`, creates an access token using `create_access_token` if authentication is successful, and returns the access token and token type (bearer).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_8

LANGUAGE: python
CODE:
```
from fastapi import APIRouter
from fastapi.security import OAuth2PasswordRequestForm

# Assuming fake_users_db is defined elsewhere
# Assuming authenticate_user and create_access_token are defined above
# Assuming ACCESS_TOKEN_EXPIRE_MINUTES is defined above

router = APIRouter()

# Endpoint to generate JWT tokens
@router.post("/token")
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    # Authenticate the user credentials
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    # Create an access token with user's username as the subject (sub)
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={
            "sub": user["username"]
        },
        expires_delta=access_token_expires
    )
    # Return the token in the required format
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: FastAPI Dependency for Current User (Python)
DESCRIPTION: Defines an `OAuth2PasswordBearer` scheme and an `async` dependency function `get_current_user` that extracts, decodes, and validates the JWT token from the request header. It retrieves the user based on the token payload and raises an HTTP exception if validation fails.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from pydantic import BaseModel
from datetime import datetime
from typing import Union

# Assume SECRET_KEY, ALGORITHM, TokenData, fake_users_db are defined elsewhere

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Need a Pydantic model for the User (could be same as User model)
class User(BaseModel):
    username: str
    email: Union[str, None] = None
    full_name: Union[str, None] = None
    disabled: Union[bool, None] = None

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    # Retrieve user from the fake database using the username from the token
    user_data = fake_users_db.get(token_data.username)
    if user_data is None:
         raise credentials_exception
    # Create a User model instance
    user = User(**user_data)

    return user
```

----------------------------------------

TITLE: Importing App for Testing with TestClient (Python)
DESCRIPTION: Demonstrates how to import the FastAPI application instance (`app`) from your main application module into a separate test file. The imported `app` instance is then used to initialize the `TestClient`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from .main import app

client = TestClient(app)

# Test functions go here...
```

----------------------------------------

TITLE: Forbidding Extra Form Fields with Pydantic in FastAPI (Python)
DESCRIPTION: Demonstrates how to configure a Pydantic model used for form data to reject any fields that are not explicitly defined in the model structure. This is achieved by adding `model_config = ConfigDict(extra='forbid')` to the Pydantic model definition (requires Pydantic v2+ and `ConfigDict`). If extra fields are sent, the client receives a validation error.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-form-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Form
from pydantic import BaseModel, ConfigDict # Import ConfigDict

app = FastAPI()

class User(BaseModel):
    username: str
    password: str

    # Configure the model to forbid extra fields
    model_config = ConfigDict(extra='forbid')

@app.post("/login/")
async def login(*, user: Annotated[User, Form()]):
    return {"message": f"User {user.username} logged in successfully"}
```

----------------------------------------

TITLE: Using RedirectResponse via response_class in FastAPI
DESCRIPTION: This snippet shows how to use `RedirectResponse` with the `response_class` parameter. When configured this way, the path operation function should return the URL string. FastAPI automatically wraps the URL in a `RedirectResponse` using the default 307 status code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer", response_class=RedirectResponse)
async def redirect_typer():
    return "https://typer.tiangolo.com"
```

----------------------------------------

TITLE: Defining FastAPI Startup Event Handler - Python
DESCRIPTION: This snippet defines a function that will be executed when the FastAPI application starts up. The `@app.on_event("startup")` decorator registers the function as a startup event handler. This is useful for initializing resources like database connections or loading configuration.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/testing-events.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.on_event("startup")
def startup_event():
    print("Starting up...")
    # Maybe some resource initialization
```

----------------------------------------

TITLE: Defining File Parameter as UploadFile (Python)
DESCRIPTION: This snippet shows how to define a route parameter `file` annotated with `UploadFile`. `UploadFile` is recommended for larger files as it spools content to disk when exceeding a memory threshold, conserving memory. It also provides file-like async methods and metadata.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: UploadFile):
```

----------------------------------------

TITLE: Declaring File Parameter FastAPI Python using UploadFile
DESCRIPTION: This snippet shows how to declare a file parameter using the `UploadFile` type hint. `UploadFile` handles files efficiently, spooling large files to disk instead of keeping the entire content in memory, and provides asynchronous file-like methods.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: UploadFile):
```

----------------------------------------

TITLE: Building Docker Image for Bigger FastAPI App
DESCRIPTION: This Dockerfile is similar to the standard build but is adapted for larger FastAPI applications where the main application code resides in a subdirectory (e.g., `./app/app`). It copies the application dependencies and then copies the contents of the local `./app` directory into the `/app/app` directory within the container.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

----------------------------------------

TITLE: Defining Settings Class and Dependency Function (Python)
DESCRIPTION: Defines the `Settings` class and introduces a `get_settings` function. This function is designed to act as a dependency provider, encapsulating the creation or retrieval of the settings object, which is useful for dependency injection frameworks like FastAPI's.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_10

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

def get_settings():
    return Settings()
```

----------------------------------------

TITLE: Set Non-None Default Value with Annotated Validation in FastAPI
DESCRIPTION: This snippet shows how to set a default value other than `None` for an optional query parameter while applying validation (`min_length`) using `Annotated` and `Query`. The default value is set directly as the function parameter's default.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(min_length=3)] = "fixedquery"): # Use Union for Python < 3.10
    if q:
        return {"q": q}
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Setting Response Cookies with Response Parameter in FastAPI
DESCRIPTION: Demonstrates how to set cookies by declaring a parameter of type `Response` in a FastAPI path operation function. The `set_cookie` method is called on this temporary response object. FastAPI extracts the cookies from this object and adds them to the final response sent to the client, even if the function returns another value or uses a `response_model`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/response-cookies.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

# ... other code ...

def create_cookie_parameter(response: Response):
    response.set_cookie(key="fakesession", value="fake-cookie-value")
# ... rest of function ...
```

----------------------------------------

TITLE: Installing Python Dependencies - Shell
DESCRIPTION: Demonstrates the standard command-line execution of `pip install -r requirements.txt` to install all necessary Python packages listed in the requirements file for the FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ pip install -r requirements.txt
---> 100%
Successfully installed fastapi pydantic uvicorn
```

----------------------------------------

TITLE: Using TestClient for Basic FastAPI Testing (Python)
DESCRIPTION: Demonstrates the fundamental setup for testing a simple FastAPI application using `TestClient`. It shows how to instantiate the client with the app instance and make a basic GET request within a pytest function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_main():
    return {"msg": "Hello World"}

from fastapi.testclient import TestClient

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Using FileResponse with response_class in FastAPI (Python)
DESCRIPTION: Illustrates how to specify `FileResponse` using the `response_class` parameter for a path operation, allowing the function to simply return the file path string. Requires `fastapi`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_13

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()


@app.get("/file-path", response_class=FileResponse)
def read_file_path():
    return "path/to/your/other_file.png"
```

----------------------------------------

TITLE: Building Docker Image (Single File) - Dockerfile
DESCRIPTION: Defines the Docker build process for a FastAPI application where the main application file (`main.py`) resides at the root of the project directory, adjusting the `COPY` and `CMD` instructions to reflect this single-file structure.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_7

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)
COPY ./main.py /code/

# (2)
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Documenting and Returning HTMLResponse Directly in FastAPI (Python)
DESCRIPTION: Demonstrates how to combine using `response_class=HTMLResponse` in the decorator with returning an HTMLResponse object directly from the function. This approach ensures the response is documented correctly in OpenAPI (`text/html`) while allowing manual control over the response details within the function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

def generate_html_response():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look, HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)

@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return generate_html_response()
```

----------------------------------------

TITLE: Declaring Dictionary with Typed Keys and Values in FastAPI/Pydantic (Python)
DESCRIPTION: Declares a request body parameter `weights` that is validated as a dictionary. The keys are strictly validated as integers and the values as floating-point numbers, providing strong typing for dictionary structures.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_14

LANGUAGE: Python
CODE:
```
weights: dict[int, float]
```

----------------------------------------

TITLE: Using Docstrings for Path Operation Description in FastAPI (Python)
DESCRIPTION: Demonstrates that FastAPI automatically uses the function's docstring as the `description` for the path operation if no explicit `description` parameter is provided in the decorator. Markdown formatting in the docstring is supported.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post("/items/")
async def create_item(name: str):
    """
    Create an item with all the information.

    - **name**: Item name
    - **description**: Item description
    - **price**: Item price
    - **tax**: Item tax
    - **tags**: List of tags for the item
    """
    return {"name": name}
```

----------------------------------------

TITLE: Importing HTTPException
DESCRIPTION: Import the FastAPI and HTTPException classes from the fastapi module. HTTPException is used to raise standard HTTP errors that FastAPI will handle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException
```

----------------------------------------

TITLE: Validating Query Max Length with Annotated (Python)
DESCRIPTION: Shows how to use `Annotated` to add `Query` metadata with a `max_length` constraint to an optional string query parameter `q`. This ensures the parameter, if provided, does not exceed 50 characters. FastAPI handles validation and error reporting.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(max_length=50)] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Illustrating Path Operation Order in FastAPI Python
DESCRIPTION: This snippet shows two path operations: one with a fixed path '/users/me' and another with a path parameter '/users/{user_id}'. It demonstrates that the fixed path operation must be declared before the parameterized one to ensure it gets matched correctly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Importing HTTPException (FastAPI) - Python
DESCRIPTION: Imports the `HTTPException` class from the `fastapi` library, which is used to raise standard HTTP errors within path operations or dependencies. This is the primary mechanism in FastAPI for signaling HTTP-level errors to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException
```

----------------------------------------

TITLE: Initializing FastAPI with OpenAPI Metadata - Python
DESCRIPTION: This snippet demonstrates how to add standard OpenAPI metadata fields like title, description, version, terms of service, contact information, and license information by passing them as arguments when initializing the FastAPI application instance. This metadata is displayed in the automatically generated API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    description="This is a very long description \
    with many lines \
    to test newlines in documentation",
    version="2.5.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://x-force.example.com/contact/",
        "email": "dp@x-force.example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)
```

----------------------------------------

TITLE: Configuring Core API Metadata in FastAPI
DESCRIPTION: Configure the main metadata for your FastAPI application that appears in the OpenAPI schema and documentation UIs. This includes setting the title, description, version, terms of service URL, contact information dictionary, and license information dictionary (using a URL). These parameters are passed directly to the FastAPI instance constructor.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Cool API",
    description="This is a very fancy API that has all the superpowers you desire",
    version="2.5.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://x-force.example.com/contact/",
        "email": "dp@x-force.example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)
```

----------------------------------------

TITLE: Sharing Annotated Dependencies with Type Aliases in FastAPI
DESCRIPTION: To reduce code repetition when using the same dependency in multiple path operations, you can define a type alias combining the return type, `Annotated`, and `Depends`. This alias can then be reused as the type annotation for the dependency parameter in various path operations, preserving type hints for tooling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI

# Define the dependency function
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}

# Define a type alias for the dependency using Annotated
CommonsDep = Annotated[dict, Depends(common_parameters)]

app = FastAPI()

@app.get("/items/")
# Use the type alias to declare the dependency
async def read_items(commons: CommonsDep):
    return commons

@app.get("/users/")
# Use the same type alias in another path operation
async def read_users(commons: CommonsDep):
    return commons
```

----------------------------------------

TITLE: Define Path Operation Parameters with File and Form - Python
DESCRIPTION: Demonstrates defining parameters in a FastAPI path operation function (`create_file`) to receive an uploaded file (`file` as `bytes`, `fileb` as `UploadFile`) and form data (`token` as `str`) using `File` and `Form` respectively. This allows handling mixed file and data uploads.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#_snippet_2

LANGUAGE: python
CODE:
```
def create_file(
 file: bytes = File(),
 fileb: UploadFile = File(),
 token: str = Form()
):
```

----------------------------------------

TITLE: Using Class Dependencies with Explicit Depends in FastAPI Endpoint
DESCRIPTION: Demonstrates how to integrate a class-based dependency into a FastAPI path operation function, explicitly referencing the class within the `Depends()` call.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

app = FastAPI()

class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit

@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):
    return {"q": commons.q, "skip": commons.skip, "limit": commons.limit}
```

----------------------------------------

TITLE: Installing from requirements.txt with uv pip install Console
DESCRIPTION: When using the `uv` tool, this command installs all packages specified in a `requirements.txt` file into the active virtual environment. It's the `uv` equivalent of `pip install -r`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_13

LANGUAGE: console
CODE:
```
$ uv pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Defining Required Path and Optional Query - FastAPI - Python
DESCRIPTION: This example shows how to define a path operation function with a required path parameter (`item_id`) using `Path(...)` and an optional query parameter (`title`) with a default value of `None`. It illustrates the syntax for mixing required path parameters and optional query parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
def read_items(item_id: int = Path(...), title: str | None = None):
```

----------------------------------------

TITLE: Resetting FastAPI Dependency Overrides - Python
DESCRIPTION: This snippet demonstrates how to reset all dependency overrides that have been set on a FastAPI application instance. By assigning an empty dictionary to `app.dependency_overrides`, all previously mapped original dependencies and their override functions are removed, restoring the application's default dependency resolution behavior.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/testing-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
app.dependency_overrides = {}
```

----------------------------------------

TITLE: Declaring Pydantic Field Examples
DESCRIPTION: Shows how to declare examples for individual fields within a Pydantic model using the `examples` argument of the `Field()` function. These examples are included in the field's JSON schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Any
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str = Field(examples=["Foo"])
    description: str | None = Field(default=None, examples=["A very nice Item"])
    price: float = Field(examples=[35.4])
    tax: float | None = Field(default=None, examples=[3.2])
```

----------------------------------------

TITLE: Declaring Optional Body Parameter Python FastAPI
DESCRIPTION: Demonstrates how to define a body parameter using a Pydantic model and make it optional by providing a default value of `None`. FastAPI will attempt to parse the request body into the specified model if present, otherwise, the parameter will be `None`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def update_item(item_id: int, item: Union[Item, None] = None):
```

----------------------------------------

TITLE: Setting Headers by Returning JSONResponse Directly in FastAPI Python
DESCRIPTION: Shows how to set custom headers by returning a `fastapi.responses.JSONResponse` object directly from a path operation function. The headers are provided as a dictionary to the `headers` parameter when initializing the `JSONResponse`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/response-headers.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/items/")
async def read_items():
    return JSONResponse(content={"item_id": "Foo"}, headers={"x-cat-breed": "persian"})
```

----------------------------------------

TITLE: Importing File and UploadFile types (Python)
DESCRIPTION: This snippet shows the required import statement to use `File` and `UploadFile` for handling file uploads in a FastAPI application. These types are necessary annotations for defining file parameters in route functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, File, UploadFile
```

----------------------------------------

TITLE: Returning Generic Response Object Directly in FastAPI
DESCRIPTION: Shows how to return a basic `Response` object directly, providing control over content, status code, headers, and media type. This offers maximum flexibility but bypasses FastAPI's automatic data serialization (like Pydantic models) and some documentation features.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/legacy/")
def get_legacy_data():
    data = "<legacy>Legacy Data</legacy>"
    return Response(content=data, media_type="application/xml")
```

----------------------------------------

TITLE: Using RedirectResponse with custom status_code via response_class
DESCRIPTION: This example demonstrates using `RedirectResponse` via `response_class` while also specifying a custom HTTP status code for the redirect, such as 302 Found. The path operation returns the target URL string, and FastAPI creates the `RedirectResponse` with the specified status.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse
from starlette.status import HTTP_302_FOUND

app = FastAPI()


@app.get("/typer", response_class=RedirectResponse, status_code=HTTP_302_FOUND)
async def redirect_typer():
    return "https://typer.tiangolo.com"
```

----------------------------------------

TITLE: Using PlainTextResponse with response_class in FastAPI
DESCRIPTION: Configures a route to return plain text content using `PlainTextResponse` via the `response_class` parameter. FastAPI will set the `Content-Type` header to `text/plain` and handle the string return value as plain text.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.get("/", response_class=PlainTextResponse)
async def main():
    return "Hello World"
```

----------------------------------------

TITLE: Define Arbitrarily Deeply Nested Pydantic Models - Python
DESCRIPTION: Illustrates how to define multiple layers of nested Pydantic models (`Image` nested in `Item`, which is nested in `Offer`) to represent complex, multi-level JSON structures.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, HttpUrl

app = FastAPI()

class Image(BaseModel): # hl[7]
    url: HttpUrl
    name: str

class Item(BaseModel): # hl[12]
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: set[str] = set()
    images: list[Image] | None = None # hl[21]

class Offer(BaseModel): # hl[18]
    name: str
    description: str | None = None
    price: float
    items: list[Item] # hl[25]

@app.post("/offers/")
async def create_offer(offer: Offer):
    return offer
```

----------------------------------------

TITLE: Customizing FastAPI Unique Operation ID Generation
DESCRIPTION: This Python snippet shows how to provide a custom function to the FastAPI application instance via the `generate_unique_id_function` parameter. This function takes an `APIRoute` object and returns a string to be used as the OpenAPI `operationId`, allowing for cleaner names in generated clients compared to the default generation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.routing import APIRoute


def generate_unique_id(route: APIRoute):
    return f"{route.tags[0]}-{route.name}"


app = FastAPI(generate_unique_id_function=generate_unique_id)
```

----------------------------------------

TITLE: Configure CMD for TLS Proxy - Dockerfile
DESCRIPTION: Sets the command to run the FastAPI application behind a TLS termination proxy (like Nginx or Traefik) in the Dockerfile. The `--proxy-headers` option tells Uvicorn to trust headers from the proxy, indicating that the application is running behind HTTPS. Uses the recommended exec form.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_7

LANGUAGE: Dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--proxy-headers", "--port", "80"]
```

----------------------------------------

TITLE: Declaring Optional Types (Python 3.10+) - Python
DESCRIPTION: Illustrates the Python 3.10+ syntax for declaring a variable that can be a specific type or `None`, using the vertical bar (`|`) syntax.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_13

LANGUAGE: python
CODE:
```
def process_name(name: str | None): pass
```

----------------------------------------

TITLE: Importing Annotated and Query (Python 3.10+)
DESCRIPTION: Demonstrates importing `Annotated` from the standard `typing` library and `Query` from `fastapi` for use in defining and validating API parameters with metadata in Python 3.10 and later.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query
```

----------------------------------------

TITLE: Define Settings Class for Dependency Injection
DESCRIPTION: This Python code defines the Pydantic `Settings` class structure in a `config.py` file, specifically omitting the creation of a default global instance, preparing the class to be instantiated and provided via a dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_8

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50
```

----------------------------------------

TITLE: Define Enum for Path Parameter Values
DESCRIPTION: This Python code defines a standard Python Enum `ModelName` that inherits from `str` and `Enum`. This allows defining a fixed set of valid string values for a path parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_7

LANGUAGE: Python
CODE:
```
from enum import Enum

class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Setting Response Cookies by Returning Response Object Directly in FastAPI
DESCRIPTION: Illustrates how to set cookies by creating a response object (e.g., `JSONResponse`) directly within a FastAPI path operation function. The `set_cookie` method is called on the response object before it is returned. When returning a response directly, you must ensure the data type is appropriate and handle any filtering that would normally be done by a `response_model`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/response-cookies.md#_snippet_1

LANGUAGE: python
CODE:
```
response = JSONResponse(content=content)
response.set_cookie(key="fakesession", value="fake-cookie-value")
return response
```

----------------------------------------

TITLE: Type Hinting Optional Values (Union with None)
DESCRIPTION: Shows how to specify that a variable or parameter can be of a certain type or `None`. This is done using `Optional[SomeType]` from `typing` (equivalent to `Union[SomeType, None]`) or `SomeType | None` in Python 3.10+.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str] = None):
    if name is not None:
        print(f"Hey {name}")
    else:
        print("Hello World")
```

LANGUAGE: Python
CODE:
```
def say_hi(name: str | None = None):
    if name is not None:
        print(f"Hey {name}")
    else:
        print("Hello World")
```

----------------------------------------

TITLE: Defining Path Operation on APIRouter Python
DESCRIPTION: Illustrates how to define a GET path operation with a path parameter using the `@router.get()` decorator on an APIRouter instance. This snippet is intended to be part of a module where `router` is an instance of `APIRouter`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
@router.get("/{item_id})\nasync def read_item(item_id: str):\n    ...
```

----------------------------------------

TITLE: Annotating Function with Specific Response Subclass - FastAPI Python
DESCRIPTION: This snippet shows a FastAPI path operation that returns a `RedirectResponse` object and annotates the function with the specific `RedirectResponse` type (`-> RedirectResponse`). FastAPI also automatically handles this case, providing more precise type information for development tools, and bypasses Pydantic validation/filtering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse


app = FastAPI()


@app.get("/portal")
async def get_portal() -> RedirectResponse:
    return RedirectResponse(url="https://fastapi.tiangolo.com")
```

----------------------------------------

TITLE: Defining Input Pydantic Model with Sensitive Data - FastAPI Python
DESCRIPTION: This snippet defines a Pydantic model `UserIn` intended for accepting user input. It includes potentially sensitive fields like `password` and uses `EmailStr` for email validation. This model is used in subsequent examples to illustrate the need for filtering sensitive information from API responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_2

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel, EmailStr


class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None
```

----------------------------------------

TITLE: Applying GE Numeric Validation to Path Parameter - FastAPI - Python
DESCRIPTION: This snippet applies a numeric validation `ge=1` (greater than or equal to 1) to the `item_id` path parameter declared using `Path`. This validation ensures that the integer value passed in the path must be 1 or greater. It requires importing `Path`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import Path

def read_items(item_id: int = Path(ge=1)): # (1)!
```

----------------------------------------

TITLE: Run FastAPI using Uvicorn with Multi-Process Support (Console)
DESCRIPTION: Runs the FastAPI application (`main:app`) directly using Uvicorn's built-in multi-process feature. It starts 4 worker processes (`--workers 4`) and listens on all network interfaces (`--host 0.0.0.0`) on port 8080 (`--port 8080`). This offers multi-process scaling without requiring Gunicorn.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#_snippet_2

LANGUAGE: console
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: Instantiating a Pydantic Model (Python)
DESCRIPTION: Shows two ways to create instances of the User Pydantic model: directly passing keyword arguments and unpacking a dictionary of data using the ** operator. This highlights how data dictionaries can be easily validated and converted into typed model objects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Importing Dependency with Two Dot Relative Import Python
DESCRIPTION: This relative import statement correctly imports the function `get_token_header` from the `dependencies` module found in the parent package (`app/`), relative to the current file's location (`app/routers/items.py`). This demonstrates the proper use of `..` for accessing modules one directory level up in the package structure.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
from ..dependencies import get_token_header

```

----------------------------------------

TITLE: Using StreamingResponse for Generator Content in FastAPI
DESCRIPTION: Demonstrates using `StreamingResponse` to stream content generated by an asynchronous generator function. This is useful for sending large amounts of data incrementally without loading it all into memory at once, such as server-sent events or large file downloads.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_10

LANGUAGE: Python
CODE:
```
import time
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()

async def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes"
        time.sleep(0.5)


@app.get("/stream")
async def main():
    return StreamingResponse(fake_video_streamer())
```

----------------------------------------

TITLE: Running FastAPI Development Server - Shell
DESCRIPTION: This command starts the FastAPI development server using the 'fastapi dev' command. It typically watches for changes in the specified main application file (main.py in this example) and reloads automatically.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/websockets.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Running FastAPI Development Server Console
DESCRIPTION: This console command starts the FastAPI development server using the `fastapi dev` utility, specifying `app/main.py` as the main application file to run. It outputs confirmation that the server is running and provides the local host address.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_20

LANGUAGE: console
CODE:
```
fastapi dev app/main.py

```

----------------------------------------

TITLE: Define Pydantic Model with Typed List Attribute - Python
DESCRIPTION: Defines a Pydantic `BaseModel` with an attribute annotated as a list of strings (`list[str]`). FastAPI and Pydantic will validate that the incoming array contains only string elements.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: list[str] # hl[12]

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Defining UploadFile with Metadata (Python)
DESCRIPTION: This snippet illustrates adding additional metadata, such as a description, to an `UploadFile` parameter using the `File()` dependency function. The description is typically used by documentation generators (like OpenAPI/Swagger UI) to provide more context about the parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: UploadFile = File(description="A file read as UploadFile")):
```

----------------------------------------

TITLE: Caching Function Output with lru_cache in Python
DESCRIPTION: This Python function `say_hi` is decorated with `@lru_cache`, a feature from Python's `functools` module. The decorator caches the return value for each unique combination of `name` and `salutation` arguments. When called with arguments previously used, the cached result is returned instantly without executing the function body again, optimizing performance for repetitive calls.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_15

LANGUAGE: Python
CODE:
```
@lru_cache
def say_hi(name: str, salutation: str = "Ms."):
    return f"Hello {salutation} {name}"
```

----------------------------------------

TITLE: Using ORJSONResponse with response_class in FastAPI
DESCRIPTION: Demonstrates how to explicitly set the response class for a specific path operation to `ORJSONResponse` using the `response_class` parameter. This allows FastAPI to use the `orjson` library for faster JSON serialization, while still handling automatic documentation and Pydantic model serialization.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()


@app.get("/items/", response_class=ORJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Returning Different Status Codes using JSONResponse in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to conditionally return different HTTP status codes (like 200 OK or 201 Created) from a FastAPI path operation. By returning a JSONResponse object directly instead of just data, you can manually set the status_code attribute. This bypasses FastAPI's default response handling and serialization for that specific return.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/additional-status-codes.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status
from fastapi.responses import JSONResponse

app = FastAPI()

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {"name": "Bar", "description": "The bartenders", "price": 62.0,
            "tax": 20.2},
    "baz": {"name": "Baz", "description": "Empty Baz", "price": 50.2,
            "tax": 10.5}
}


@app.put("/items/{item_id}")
async def update_item(item_id: str, item: dict):
    if item_id in items:
        items[item_id].update(item)
        return JSONResponse(content=items[item_id], status_code=status.HTTP_200_OK)
    else:
        items[item_id] = item
        return JSONResponse(content=items[item_id], status_code=status.HTTP_201_CREATED)
```

----------------------------------------

TITLE: Use Settings from Separate Module (main.py)
DESCRIPTION: This Python code demonstrates a FastAPI application importing and utilizing the globally defined `settings` object from a separate module (`config.py`) within a path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from . import config


app = FastAPI()


@app.get("/info")
async def info():
    return {
        "app_name": config.settings.app_name,
        "admin_email": config.settings.admin_email,
        "items_per_user": config.settings.items_per_user,
    }
```

----------------------------------------

TITLE: Adding Process Time Header Middleware in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to create an HTTP middleware in FastAPI using the `@app.middleware("http")` decorator. The middleware measures the time taken to process a request from start to finish and adds a custom 'X-Process-Time' header containing this duration to the response. It requires `fastapi` and the standard `time` module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/middleware.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
import time

app = FastAPI()

@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    start_time = time.perf_counter()
    response = await call_next(request)
    process_time = time.perf_counter() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response

@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Using StreamingResponse with a generator in FastAPI
DESCRIPTION: This snippet shows how to use `StreamingResponse` to stream content using a Python generator. The generator yields chunks of data (strings or bytes), and `StreamingResponse` sends them incrementally as the HTTP response body. This is useful for large responses that should not be buffered entirely in memory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_10

LANGUAGE: Python
CODE:
```
import time

from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()


def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes"
        time.sleep(1)


@app.get("/", response_class=StreamingResponse)
async def main():
    return StreamingResponse(fake_video_streamer())
```

----------------------------------------

TITLE: Using jsonable_encoder for Pydantic Models and Datetime in Python
DESCRIPTION: This snippet demonstrates how to use FastAPI's `jsonable_encoder` to convert a Pydantic model instance containing a `datetime` field into a JSON-compatible Python dictionary. This is useful for scenarios like storing data in databases that only accept JSON-compatible types. The `datetime` object is converted to an ISO 8601 formatted string.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/encoder.md#_snippet_0

LANGUAGE: python
CODE:
```
from datetime import datetime
from pydantic import BaseModel
from fastapi.encoders import jsonable_encoder

class Item(BaseModel):
    title: str
    timestamp: datetime
    description: str | None = None

item = Item(title="Foo", timestamp=datetime.utcnow(), description="Bar")

# Convert the Pydantic model instance to a JSON-compatible dict
json_compatible_item_data = jsonable_encoder(item)

print(json_compatible_item_data)

# The output will be a dict where the timestamp is a string, e.g.:
# {'title': 'Foo', 'timestamp': '2023-10-27T10:30:00.123456', 'description': 'Bar'}
```

----------------------------------------

TITLE: Assigning Tags to Path Operations - Python
DESCRIPTION: This snippet demonstrates how to assign the defined tags (like 'items' and 'users' from `openapi_tags`) to specific path operations. By adding the `tags` parameter to the path operation decorator (`@app.get`, `@app.post`, etc.) with a list of tag names, the operation will be grouped under those tags in the documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

# ... app initialized with openapi_tags ...

@app.get("/items/", tags=["items"])
async def read_items():
    return [{"name": "Foo"}]


@app.get("/users/", tags=["users"])
async def read_users():
    return [{"name": "Bar"}]
```

----------------------------------------

TITLE: Including Singular Value in Body Python FastAPI
DESCRIPTION: Illustrates how to include a singular value (like an integer or string) as part of the request body alongside Pydantic models. Using the `Body` function tells FastAPI to expect this parameter directly as a key in the top-level JSON body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def update_item(item_id: int, item: Item, user: User, importance: int = Body()):
```

----------------------------------------

TITLE: Returning RedirectResponse Object Directly in FastAPI (Python)
DESCRIPTION: Shows how to return a RedirectResponse object directly from a path operation function. This performs an HTTP redirect to the specified URL. By default, it uses a 307 Temporary Redirect status code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer")
async def redirect_typer():
    return RedirectResponse("https://typer.tiangolo.com")
```

----------------------------------------

TITLE: Returning Encoded Data in JSONResponse using FastAPI
DESCRIPTION: Demonstrates returning a Pydantic model within a `JSONResponse` directly. It uses `jsonable_encoder` to manually convert the Pydantic model instance to a JSON-compatible dictionary before passing it to the `JSONResponse`, as FastAPI skips automatic encoding when a `Response` object is returned.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/response-directly.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float
    tags: list[str] = []

app = FastAPI()


@app.post("/items/")
async def create_item(item: Item):
    json_compatible_item_data = jsonable_encoder(item)
    return JSONResponse(content=json_compatible_item_data)
```

----------------------------------------

TITLE: Adding a Task to BackgroundTasks - FastAPI Python
DESCRIPTION: Inside the path operation function, use the `.add_task()` method of the `background_tasks` object to register the function you want to run in the background. Pass the task function, followed by positional arguments, and then keyword arguments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#_snippet_2

LANGUAGE: Python
CODE:
```
background_tasks.add_task(write_notification, email, message="some notification")
```

----------------------------------------

TITLE: Using Pydantic Model as Response Model (FastAPI, Python)
DESCRIPTION: This snippet shows a FastAPI GET endpoint that is annotated to return an `Item` model using `response_model=Item`. When a model with a default value is used as a response, Pydantic v2 marks that field as required in the OpenAPI schema because the default value guarantees it will always be present in the output (as `null` if not set explicitly).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str
    description: Union[str, None] = None

app = FastAPI()

@app.get("/some-item/", response_model=Item)
async def get_some_item():
    # Return an item without explicitly setting description
    # FastAPI/Pydantic will ensure description is in the output (as null)
    return {"name": "Example Item"}
```

----------------------------------------

TITLE: Importing Annotated and Query (Python 3.8+)
DESCRIPTION: Shows how to import `Annotated` from `typing_extensions` (required before Python 3.9) and `Query` from `fastapi` for adding metadata and validation to API parameters in Python versions 3.8 and later. `typing_extensions` is typically included with FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_2

LANGUAGE: python
CODE:
```
from typing import Union
from typing_extensions import Annotated

from fastapi import FastAPI, Query
```

----------------------------------------

TITLE: FastAPI Token Endpoint Logic (Python)
DESCRIPTION: Defines the `/token` POST endpoint using `OAuth2PasswordRequestForm` for input. It authenticates the user using the provided credentials, creates a JWT access token with a specific expiration time using the utility function, and returns the token and token type in the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status, APIRouter
from fastapi.security import OAuth2PasswordRequestForm
from datetime import timedelta
from typing import Union
from pydantic import BaseModel

# Assume create_access_token, ACCESS_TOKEN_EXPIRE_MINUTES, authenticate_user, fake_users_db are available

# Define Token model for response
class Token(BaseModel):
    access_token: str
    token_type: str

# Assume app is initialized (e.g., app = FastAPI())
app = FastAPI()

@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    # Authenticate the user
    user = authenticate_user(fake_users_db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    # Create the access token with expiration
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]}, expires_delta=access_token_expires
    )
    # Return the token
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Defining Function Parameter with Union Type Python 3.10+
DESCRIPTION: Demonstrates defining the `say_hi` function using the Python 3.10+ `|` syntax for type unions, specifically allowing `str` or `None` for the `name` parameter, which is functionally equivalent to `Optional[str]` but arguably more explicit.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_18

LANGUAGE: Python
CODE:
```
def say_hi(name: str | None):
    print(f"Hi {name}")
```

----------------------------------------

TITLE: Using a Nested Dependency in a FastAPI Path Operation - Python
DESCRIPTION: Demonstrates how to use the 'query_or_cookie_extractor' dependency in a path operation function. FastAPI automatically resolves its sub-dependency ('query_extractor') first before calling 'query_or_cookie_extractor'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends

router = APIRouter()

@router.get("/items/")
async def read_query(
    query_or_cookie: str = Depends(query_or_cookie_extractor)
):
    return {"q_or_c": query_or_cookie}
```

----------------------------------------

TITLE: Install pytest Framework
DESCRIPTION: Installs the pytest testing framework using pip. Pytest is used to discover and execute test functions written for the application, providing a standard way to run tests and report results.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Console
CODE:
```
pip install pytest
```

----------------------------------------

TITLE: Previewing FastAPI Dockerfile Dockerfile
DESCRIPTION: Provides an early look at the complete Dockerfile structure for building a FastAPI application image, demonstrating the key steps involved from base image selection to defining the command to run the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["fastapi", "run", "app/main.py", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["fastapi", "run", "app/main.py", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Marking Asynchronous Test Function pytest Python
DESCRIPTION: Illustrates the `@pytest.mark.anyio` decorator, which is applied to an `async def` test function to signal that it requires an asynchronous event loop provided by the `anyio` library for execution within pytest.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_3

LANGUAGE: Python
CODE:
```
@pytest.mark.anyio
```

----------------------------------------

TITLE: Correct Path Order (Fixed before Parameter)
DESCRIPTION: This Python code defines two path operations: a fixed path `/users/me` and a path parameter `/users/{user_id}`. Declaring the fixed path first ensures it is matched specifically before the parameterized path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Customizing OpenAPI Schema URL in FastAPI
DESCRIPTION: This snippet demonstrates how to change the default URL (`/openapi.json`) where the OpenAPI schema is served by setting the `openapi_url` parameter in the `FastAPI` constructor. Setting this parameter to `None` disables the schema and consequently the documentation UIs that rely on it.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#_snippet_4

LANGUAGE: python
CODE:
```
app = FastAPI(openapi_url="/api/v1/openapi.json")
```

----------------------------------------

TITLE: Returning HTMLResponse object directly in FastAPI
DESCRIPTION: Instead of using `response_class`, this snippet shows how to return an `HTMLResponse` object directly from the path operation function. The content and media type are handled by the created `HTMLResponse` instance. Note that this method does not automatically document the response media type in OpenAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/")
async def read_items():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)
```

----------------------------------------

TITLE: Importing FastAPI Response Class Python
DESCRIPTION: This snippet demonstrates how to import the `Response` class directly from the `fastapi` library. Importing this class is necessary to use it as a dependency in path operations or to instantiate and return it directly for customizing HTTP responses like headers and cookies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/response.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Response
```

----------------------------------------

TITLE: Overriding Starlette HTTPException Handler (FastAPI) - Python
DESCRIPTION: Illustrates how to override the default handler for `HTTPException` originating from Starlette (or FastAPI's subclass). This handler intercepts all `HTTPException` instances, allowing you to modify the default JSON response format, like returning plain text instead, for all standard HTTP errors raised via `HTTPException`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_5

LANGUAGE: Python
CODE:
```
from starlette.exceptions import HTTPException as StarletteHTTPException\nfrom starlette.responses import PlainTextResponse\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request: Request, exc: StarletteHTTPException):\n    return PlainTextResponse(str(exc.detail))
```

----------------------------------------

TITLE: Building Docker Image with Uvicorn Gunicorn FastAPI Base
DESCRIPTION: This Dockerfile demonstrates how to build a Docker image for a FastAPI application using the `tiangolo/uvicorn-gunicorn-fastapi` base image. It copies the application's dependencies (`requirements.txt`), installs them using pip, and then copies the application code into the image.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Declare Class Dependency with Depends() Shortcut and Type Hint (Python, FastAPI)
DESCRIPTION: This snippet shows the parameter declaration syntax using the `Depends()` shortcut with a standard type hint `ClassType = Depends()`. FastAPI infers the dependency callable is `ClassType` itself from the type hint when `Depends()` is empty.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_9

LANGUAGE: Python
CODE:
```
commons: CommonQueryParams = Depends()
```

----------------------------------------

TITLE: Defining a Dependency Function - Python FastAPI
DESCRIPTION: This snippet shows a simple dependency function that can be used across multiple path operations or routers. It takes a header as input and performs a check, raising an HTTPException if the condition is not met. Such dependency functions help centralize shared logic like authentication or validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException


async def get_token_header(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
```

----------------------------------------

TITLE: Declare Class Dependency with Depends() Shortcut and Annotated (Python, FastAPI)
DESCRIPTION: This snippet shows the parameter declaration syntax using the `Depends()` shortcut with `Annotated[ClassType, Depends()]`. This is the preferred concise way to declare a class dependency when using `Annotated`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_8

LANGUAGE: Python
CODE:
```
commons: Annotated[CommonQueryParams, Depends()]
```

----------------------------------------

TITLE: Override Settings Dependency for Testing (Pytest)
DESCRIPTION: This Python test code demonstrates how to use FastAPI's `dependency_overrides` within a Pytest fixture to provide a custom `Settings` object for testing. This allows tests to run with specific, predictable configuration values without relying on actual environment variables.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from main import app, get_settings, Settings


def test_info():
    app.dependency_overrides[get_settings] = lambda: Settings(
        admin_email="testing@example.com"
    )
    client = TestClient(app)
    response = client.get("/info")
    assert response.status_code == 200
    assert response.json() == {
        "app_name": "Awesome API",
        "admin_email": "testing@example.com",
        "items_per_user": 50,
    }
```

----------------------------------------

TITLE: Defining Deeply Nested Pydantic Models (Python)
DESCRIPTION: Illustrates how to create multiple levels of nested Pydantic models (`Image`, `Item`, `Offer`), where one model contains a list of another model, which in turn contains an optional list of a third model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import Set, List
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
    images: List[Image] | None = None

class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]
```

----------------------------------------

TITLE: Returning RedirectResponse object directly in FastAPI
DESCRIPTION: This example demonstrates performing an HTTP redirect by returning a `RedirectResponse` object directly from the path operation. The target URL is passed to the `RedirectResponse` constructor. By default, it uses a 307 Temporary Redirect status code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer")
async def redirect_typer():
    return RedirectResponse(url="https://typer.tiangolo.com")
```

----------------------------------------

TITLE: Using Enum for Path Operation Tags in FastAPI (Python)
DESCRIPTION: Illustrates how to use a Python `Enum` class to define available tags for path operations. This practice helps maintain consistency and provides auto-completion benefits when assigning tags, especially in larger applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_2

LANGUAGE: Python
CODE:
```
from enum import Enum
from fastapi import FastAPI

class Tags(str, Enum):
    items = "items"
    users = "users"


app = FastAPI()


@app.get("/items/", tags=[Tags.items])
async def get_items():
    return [{"name": "Foo"}, {"name": "Bar"}]


@app.get("/users/", tags=[Tags.users])
async def get_users():
    return [{"name": "Baz"}, {"name": "Qux"}]
```

----------------------------------------

TITLE: Customizing OpenAPI Schema URL in FastAPI
DESCRIPTION: Change the default URL where the OpenAPI schema (openapi.json) is served. By default, it's served at `/openapi.json`. You can set a different path using the `openapi_url` parameter when creating the FastAPI application instance. Setting `openapi_url=None` disables the schema completely, which also disables the documentation UIs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(openapi_url="/api/v1/openapi.json")
```

----------------------------------------

TITLE: Applying Tags to FastAPI Path Operations
DESCRIPTION: This snippet shows how to associate defined tags with specific path operations using the `tags` parameter in route decorators like `@app.get()`. This groups the related endpoints under the specified tags in the documentation UI, using the metadata defined via `openapi_tags`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#_snippet_3

LANGUAGE: python
CODE:
```
@app.get("/items/", tags=["items"])
async def read_items():
    return [{"name": "Foo"}]


@app.get("/users/", tags=["users"])
async def read_users():
    return [{"name": "Baz"}]
```

----------------------------------------

TITLE: Importing CORSMiddleware in Python
DESCRIPTION: Imports the `CORSMiddleware` class from the `fastapi.middleware.cors` module. This middleware is essential for handling Cross-Origin Resource Sharing (CORS) requests, allowing or restricting requests from different origins.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/middleware.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.middleware.cors import CORSMiddleware
```

----------------------------------------

TITLE: Declaring Path Parameter with Metadata (Annotated) - FastAPI Python
DESCRIPTION: This example demonstrates how to declare a path parameter `item_id` using `Annotated` with the `Path` object to add metadata, specifically a `title` attribute, providing a description for the parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(item_id: Annotated[int, Path(title="The ID of the item to get")]) flash message on successful registration for the user as registered successfully. if the user is already registered flash message user already registered.:
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Creating Custom Response Class in FastAPI (Python)
DESCRIPTION: Defines a custom response class inheriting from `Response`. It overrides the `render` method to serialize content using `orjson.dumps` with the `OPT_INDENT_2` option for indented JSON, returning the result as bytes. Requires `fastapi` and `orjson`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_14

LANGUAGE: Python
CODE:
```
from fastapi.responses import Response
import orjson


class CustomORJSONResponse(Response):
    media_type = "application/json"

    def render(self, content: any) -> bytes:
        # Use orjson.dumps with indentation option
        return orjson.dumps(content, option=orjson.OPT_INDENT_2)

# Example usage (assuming an app instance exists)
# @app.get("/orjson-custom")
# def read_orjson_custom():
#     return CustomORJSONResponse({"message": "Hello World"})
```

----------------------------------------

TITLE: Defining Optional File as bytes (Python)
DESCRIPTION: This snippet demonstrates how to make a file parameter of type `bytes` optional using Python's type union (`| None`). By setting the default value to `None` with `File(default=None)`, the endpoint can be called without a file, receiving `None` instead. Requires Python 3.10+ syntax.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: bytes | None = File(default=None)):
```

----------------------------------------

TITLE: Defining a Background Task Function - Python
DESCRIPTION: Defines a standard Python function (`def` or `async def`) that will be executed in the background by `BackgroundTasks`. These functions can accept any required parameters. This example shows a simple function signature intended to write a notification.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#_snippet_1

LANGUAGE: Python
CODE:
```
def write_notification(email: str, message=""):
```

----------------------------------------

TITLE: Using RedirectResponse with Custom Status and response_class in FastAPI (Python)
DESCRIPTION: Shows how to specify RedirectResponse using the `response_class` parameter and set a custom HTTP status code (e.g., 308 Permanent Redirect) using the `status_code` parameter in the decorator. The function returns the target URL string, which FastAPI uses for the redirect with the specified status.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse
from starlette.status import HTTP_308_PERMANENT_REDIRECT

app = FastAPI()

@app.get("/typer", response_class=RedirectResponse, status_code=HTTP_308_PERMANENT_REDIRECT)
async def redirect_typer():
    return "https://typer.tiangolo.com"
```

----------------------------------------

TITLE: Configuring OpenAPI Server URL with root_path
DESCRIPTION: Demonstrates how the `root_path` configured in the FastAPI application is used to set the server URL in the generated OpenAPI schema (Swagger UI), allowing the browser frontend to correctly target the API when accessed via a proxy with a path prefix. This snippet shows the resulting JSON structure.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    // More stuff here
    "servers": [
        {
            "url": "/api/v1"
        }
    ],
    "paths": {
            // More stuff here
    }
}
```

----------------------------------------

TITLE: Using PlainTextResponse via response_class in FastAPI
DESCRIPTION: This example demonstrates returning plain text content using `PlainTextResponse`. By setting `response_class=PlainTextResponse` in the decorator, FastAPI ensures the response's `Content-Type` is `text/plain` and the returned string is sent as the response body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()


@app.get("/", response_class=PlainTextResponse)
async def main():
    return "Hello World"
```

----------------------------------------

TITLE: Instantiating Callable Dependency Class (Python)
DESCRIPTION: Shows how to create an instance of the dependency class, passing the necessary arguments defined in its `__init__` method (e.g., the fixed content string "bar"). This pre-configured instance is then passed to `Depends()` for injection.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/advanced-dependencies.md#_snippet_2

LANGUAGE: Python
CODE:
```
checker = FixedContentQueryChecker(fixed_content="bar")
```

----------------------------------------

TITLE: Importing FastAPI Request Class - Python
DESCRIPTION: This snippet demonstrates the standard way to import the `Request` class directly from the `fastapi` library. This class is used to access the raw request object within FastAPI path operations or dependencies for advanced handling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/request.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Request
```

----------------------------------------

TITLE: Raising HTTPException with Custom Header (FastAPI) - Python
DESCRIPTION: Shows how to include custom headers in the response when raising an `HTTPException`. This can be useful for adding security tokens, error identifiers, or other metadata relevant to the error, typically requiring a 4xx or 5xx status code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_2

LANGUAGE: Python
CODE:
```
raise HTTPException(status_code=400,\n    detail="That's an invalid item ID",\n    headers={"X-Error": "There goes my error"}\n)
```

----------------------------------------

TITLE: Using StreamingResponse with a file-like object generator
DESCRIPTION: This example demonstrates streaming content from a file-like object using `StreamingResponse`. A generator function `iterfile` is defined using `yield from` within a `with` block to read the file in chunks and ensure it's closed afterwards. This avoids loading the entire file into memory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()


def iterfile():
    with open("large-file.txt", mode="rb") as file_like:
        yield from file_like


@app.get("/items/")
async def read_items():
    return StreamingResponse(iterfile(), media_type="image/png")
```

----------------------------------------

TITLE: Adding .gitignore for Virtual Environment Console
DESCRIPTION: This command creates or overwrites a `.gitignore` file inside the `.venv` directory and adds a single '*' character to it. This tells Git to ignore all files and directories within the virtual environment directory, preventing it from being committed to the repository.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_8

LANGUAGE: console
CODE:
```
$ echo "*" > .venv/.gitignore
```

----------------------------------------

TITLE: Running Uvicorn with root-path Argument
DESCRIPTION: This console command starts the Uvicorn server running a FastAPI application, specifying a `root_path` argument. This informs the application about the path prefix that a reverse proxy will add, allowing it to generate correct URLs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_0

LANGUAGE: console
CODE:
```
$ uvicorn main:app --root-path /api/v1
[32mINFO[0m:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Overriding HTTPException Error Handler
DESCRIPTION: Demonstrates how to override the default handler for `HTTPException` (using the Starlette version alias for broader coverage). The custom handler example returns a plain text response with the error detail instead of the default JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
from starlette.exceptions import HTTPException as StarletteHTTPException

app = FastAPI()

@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)
```

----------------------------------------

TITLE: Using Enums for Tags in Path Operations (FastAPI/Python)
DESCRIPTION: This snippet illustrates how to define tags using a Python `Enum` class for better consistency and type hinting, especially in larger applications. The `tags` parameter accepts a list containing the Enum members. The Enum values are used as the tag names in the documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_2

LANGUAGE: Python
CODE:
```
from enum import Enum

from fastapi import FastAPI


class Tags(Enum):
    items = "items"
    users = "users"
```

LANGUAGE: Python
CODE:
```
@app.post(
    "/items/",
    tags=[Tags.items],
)
async def create_item(name: str):
    return {"name": name}
```

LANGUAGE: Python
CODE:
```
@app.get("/users/", tags=[Tags.users])
async def get_users():
    return ["Rick", "Morty"]
```

----------------------------------------

TITLE: Handling HTTPException with PlainText Response Handler (Python)
DESCRIPTION: Registers a custom handler for `HTTPException` (specifically the Starlette base class to catch all variants) using `@app.exception_handler()`. This handler overrides the default JSON response for HTTP errors, returning a simple `PlainTextResponse` containing only the error detail message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse
from starlette.exceptions import HTTPException as StarletteHTTPException

app = FastAPI()

# Register handler for Starlette's HTTPException to catch FastAPI's and others
@app.exception_handler(StarletteHTTPException)
async def custom_http_exception_handler(
    request: Request,
    exc: StarletteHTTPException
):
    # Return plain text response with the error detail and status code
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)

# Example path operation that raises an HTTPException
@app.get("/items/{item_id}")
def read_item(item_id: str):
    if item_id != "foo":
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": "The Foo Wrestlers"}
```

----------------------------------------

TITLE: Handling Request Validation Errors with Custom Handler (Python)
DESCRIPTION: Registers a custom exception handler for `RequestValidationError`, which is raised by Pydantic when the incoming request data fails validation. This handler demonstrates accessing the validation errors (`exc.errors()`) and the original request body (`exc.body`) to create a custom JSON response for the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_5

LANGUAGE: Python
CODE:
```
import json
from fastapi import FastAPI, Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(
    request: Request,
    exc: RequestValidationError
):
    # Print error details and body for debugging/logging
    print(f"OMG! The client sent invalid data: {exc}")
    print(f"Request body: {exc.body}")

    # Return a custom JSON response including errors and original body
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content=jsonable_encoder({
            "detail": exc.errors(),
            "body": exc.body
        }),
    )

# Example schema with validation (size must be int)
class Item(BaseModel):
    title: str
    size: int

# Example path operation that could trigger validation errors on request body
@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Pinning Exact FastAPI Version in requirements.txt
DESCRIPTION: This snippet shows how to specify an exact version for the `fastapi` package in a `requirements.txt` file. This ensures that your application uses only the specified version, providing maximum consistency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_0

LANGUAGE: txt
CODE:
```
fastapi==0.45.0
```

----------------------------------------

TITLE: Encoding Pydantic Models and Datetime using jsonable_encoder (Python)
DESCRIPTION: This Python snippet demonstrates the use of `jsonable_encoder` to convert a Pydantic `BaseModel` instance and a `datetime` object into JSON-compatible Python types. The Pydantic model is converted into a dictionary, and the `datetime` object is converted into an ISO 8601 formatted string. It requires the `fastapi.encoders` and `pydantic` libraries.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/encoder.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import datetime
from pydantic import BaseModel
from fastapi.encoders import jsonable_encoder

class Item(BaseModel):
    title: str
    timestamp: datetime
    description: str | None = None

item = Item(title="Foo", timestamp=datetime.utcnow(), description="Bar")

item_jsonable = jsonable_encoder(item)

datetime_jsonable = jsonable_encoder(datetime.utcnow())

print(item_jsonable)
print(datetime_jsonable)

# The encoded item is a Python dict
print(type(item_jsonable))
# The encoded datetime is a Python str
print(type(datetime_jsonable))
```

----------------------------------------

TITLE: Example .env file content (.env)
DESCRIPTION: Provides a sample of the contents of a `.env` file. This file lists configuration variables and their values, typically used for local development to set environment variables easily without modifying system-wide settings.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_13

LANGUAGE: bash
CODE:
```
ADMIN_EMAIL="deadpool@example.com"
APP_NAME="ChimichangApp"
```

----------------------------------------

TITLE: Defining Optional UploadFile Parameter in FastAPI Python
DESCRIPTION: Defines an optional file upload parameter using `UploadFile` by providing a default value of `None`. This allows the endpoint to accept a file for this parameter but does not require it, using standard Python optional type hinting.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: UploadFile | None = None):
    if file:
        # Process the optional file
        contents = await file.read()
        print(f"Received optional file: {file.filename}")
    else:
        print("No file uploaded")
```

----------------------------------------

TITLE: Accessing Body in Validation Handler (FastAPI) - Python
DESCRIPTION: Demonstrates how to access the original request body (`exc.body`) within a custom `RequestValidationError` handler. This is useful for debugging and logging, allowing you to include the invalid input data in the error response returned to the client, aiding debugging during development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\n
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors(), "body": exc.body},
    )
```

----------------------------------------

TITLE: Query Parameter Type Conversion (Boolean) in FastAPI (Python)
DESCRIPTION: This snippet demonstrates FastAPI's automatic type conversion for boolean query parameters. Various string values (like '1', 'true', 'on', 'yes') are automatically interpreted as `True`, otherwise `False`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, short: bool = False):
    item = {"item_id": item_id}
    if not short:
        item.update(
            {"description": "This is an amazing item that has a long description"}
        )
    return item
```

----------------------------------------

TITLE: Defining Metadata for API Tags in FastAPI
DESCRIPTION: This snippet illustrates how to create metadata for API tags using the `openapi_tags` parameter in the `FastAPI` constructor. It accepts a list of dictionaries, where each dictionary defines a tag's name, description (supporting Markdown), and optional external documentation links. This metadata enhances the documentation UI by providing descriptions for grouped endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#_snippet_2

LANGUAGE: python
CODE:
```
tags_metadata = [
    {
        "name": "users",
        "description": "Operations with users. The **login** logic goes here.",
    },
    {
        "name": "items",
        "description": "Manage items. So _fancy_ items.",
        "externalDocs": {
            "description": "Items external docs",
            "url": "https://fastapi.tiangolo.com/",
        },
    },
]

app = FastAPI(openapi_tags=tags_metadata)
```

----------------------------------------

TITLE: Importing FastAPI Response Classes - Python
DESCRIPTION: This snippet shows how to import the most common custom response classes available in the `fastapi.responses` module. These classes are used to explicitly control the type and content of the HTTP response from a FastAPI path operation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/responses.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.responses import (
    FileResponse,
    HTMLResponse,
    JSONResponse,
    ORJSONResponse,
    PlainTextResponse,
    RedirectResponse,
    Response,
    StreamingResponse,
    UJSONResponse,
)
```

----------------------------------------

TITLE: Returning JSONResponse with jsonable_encoder (Python)
DESCRIPTION: Demonstrates manually encoding data using jsonable_encoder before wrapping it in a JSONResponse object. This is useful when you need to return a JSONResponse directly (e.g., for custom headers) but your data requires conversion (like Pydantic models, datetime objects, etc.) to be JSON-compatible.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/response-directly.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
```

LANGUAGE: Python
CODE:
```
item = {"live": "now"}
    return JSONResponse(content=jsonable_encoder(item))
```

----------------------------------------

TITLE: Accessing Required Scopes in FastAPI Dependency (Python)
DESCRIPTION: Shows how to inject the `SecurityScopes` object into a dependency function's signature. This object provides access to the list of all scopes required by the current dependency and its dependents, allowing for dynamic scope validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def get_current_user(
    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)
):
```

----------------------------------------

TITLE: Defining Class Dependencies in FastAPI
DESCRIPTION: Shows a Python class intended to be used as a FastAPI dependency. Dependency parameters are defined as parameters of the class's `__init__` method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_2

LANGUAGE: Python
CODE:
```
class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Using Body with Default Value Python FastAPI
DESCRIPTION: Shows how the `Body` function can be used to define parameters that are included in the request body and also have a default value, making them optional. This is similar to how default values work with `Query` or `Path` parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
q: str | None = Body(None)
```

----------------------------------------

TITLE: Declaring Header Parameter with Default in FastAPI Python
DESCRIPTION: Demonstrates how to define a header parameter, such as `user_agent`, within a path operation function signature. It uses `Header` with a type hint and shows how to set a default value.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
user_agent: str | None = Header(default=None)
```

----------------------------------------

TITLE: Adding Field Parameter Examples in Pydantic (Python)
DESCRIPTION: This snippet demonstrates adding extra JSON Schema information, such as an `example`, directly to individual fields of a Pydantic model using additional keyword arguments within the `Field` factory function. These parameters are annotations for documentation purposes, not validation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/schema-extra-example.md#_snippet_1

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str = Field(example="Foo")
    description: str | None = Field(default=None, example="A very nice Item")
    price: float = Field(example=35.4)
    tax: float | None = Field(default=None, example=3.2)
```

----------------------------------------

TITLE: Import File and Form Classes - Python
DESCRIPTION: Imports the `File` and `Form` classes from the `fastapi` library. These classes are used to declare function parameters that should receive uploaded files and form data, respectively, within a path operation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import File, Form
```

----------------------------------------

TITLE: Applying Global Dependencies to FastAPI App (Python)
DESCRIPTION: This snippet demonstrates how to add dependencies that apply to all path operations in a FastAPI application. Dependencies are passed as a list to the `dependencies` parameter when creating the `FastAPI` instance. It shows example header dependencies (`verify_token`, `verify_key`) being applied globally to protect all routes, like the `/items/` endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/global-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends, Header, HTTPException

async def verify_token(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token

async def verify_key(x_key: str = Header()):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key

app = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])

@app.get("/items/")
async def read_items():
    return [{"item": "Foo"}, {"item": "Bar"}]
```

----------------------------------------

TITLE: Declaring Body Parameter Example (JSON Schema)
DESCRIPTION: Illustrates how to add a single example to the JSON schema of a request body parameter using the `examples` argument in FastAPI's `Body()` function. This example appears in the API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import Body, FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        examples=[
            {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2
            }
        ]
    )
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Excluding Path Operation from OpenAPI Schema - Python/FastAPI
DESCRIPTION: Illustrates how to prevent a specific path operation from being included in the generated OpenAPI schema and automatic documentation by setting the `include_in_schema` parameter to `False`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/", include_in_schema=False)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Defining Simple FastAPI App for OpenAPI Spec
DESCRIPTION: This snippet shows a basic FastAPI application that defines Pydantic models for request and response bodies. This structure allows FastAPI to generate a comprehensive OpenAPI specification, including schemas for data models, which is essential for client generation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    price: float
    is_offer: bool | None = None


class ResponseMessage(BaseModel):
    message: str


app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.post("/items/", response_model=ResponseMessage)
def create_item(item: Item):
    return {"message": f"Item '{item.name}' received"}
```

----------------------------------------

TITLE: Defining Callable Dependency `__call__` Method (Python)
DESCRIPTION: Defines the `__call__` method for a class intended for use as a FastAPI dependency. This method is executed by FastAPI to resolve the dependency, taking parameters (like `q` in this case) from the request and returning the value to be injected into the route operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/advanced-dependencies.md#_snippet_1

LANGUAGE: Python
CODE:
```
... # __init__ method precedes
    def __call__(self, q: str | None = None):
        # The logic FastAPI will run
        # For demonstration, just return a dict including q and the fixed content
        return {"q": q, "fixed_content": self.fixed_content}
```

----------------------------------------

TITLE: Reading UploadFile File Content Synchronously Python
DESCRIPTION: If you are inside a standard `def` path operation function (not `async`), you can access the underlying synchronous file-like object via the `.file` attribute of the `UploadFile` instance and use its synchronous `read()` method.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_4

LANGUAGE: Python
CODE:
```
contents = myfile.file.read()
```

----------------------------------------

TITLE: Using Dataclasses as Response Model in FastAPI
DESCRIPTION: This example shows how to use a standard Python dataclass in the `response_model` parameter of a FastAPI path operation. FastAPI will use the dataclass to define the response schema in the API documentation and automatically serialize the returned data according to this schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from dataclasses import dataclass

@dataclass
class Item:
    name: str
    price: float
    is_offered: bool = False

app = FastAPI()

@app.get("/items/{item_id}", response_model=Item)
def read_item(item_id: int):
    return Item(name="Foo", price=50.5)
```

----------------------------------------

TITLE: Ordering Parameters using * (Annotated) - FastAPI Python
DESCRIPTION: This example shows the Annotated version equivalent to using `*`. While `*` can still be used, it is unnecessary when using `Annotated` because `Annotated` doesn't rely on Python's default parameter value rules for ordering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(
    *, # This * is NOT needed with Annotated, just showing the old way for contrast
    q: str,
    item_id: Annotated[int, Path(title="The ID of the item to get")],
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Create Test Path Operation in FastAPI (Self-Hosting Example)
DESCRIPTION: This defines a simple `/items/{item_id}` GET endpoint, identical to the one in the custom CDN example. It serves as a functional API endpoint for testing the self-hosted Swagger UI and ReDoc documentation, allowing verification that the docs load correctly from local files and interact with the API schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Install FastAPI with all Extras
DESCRIPTION: This command installs FastAPI along with all optional dependencies, including 'pydantic-settings', providing a convenient way to get started with all common features.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ pip install "fastapi[all]"
```

----------------------------------------

TITLE: Defining Request Body with Dataclass Python
DESCRIPTION: Demonstrates how to define a request body using a standard Python `dataclass`. FastAPI automatically validates the incoming request data against the structure and types defined in the dataclass when used as a parameter in a path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/dataclasses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from dataclasses import dataclass

@dataclass
class Item:
    name: str
    price: float
    tags: list[str] = []


app = FastAPI()


@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Pinning FastAPI Version Range in requirements.txt
DESCRIPTION: This snippet demonstrates how to specify a version range for `fastapi` in `requirements.txt`. It requires a version greater than or equal to 0.45.0 but strictly less than 0.46.0, allowing for patch releases within the 0.45.x series while avoiding potential breaking changes in 0.46.0 or later.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_1

LANGUAGE: txt
CODE:
```
fastapi>=0.45.0,<0.46.0
```

----------------------------------------

TITLE: Declaring Single Optional Header Parameter Python
DESCRIPTION: Defines an optional path operation parameter named `user_agent` that receives the value of the `User-Agent` request header using `Header`, providing a default value of `None`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
user_agent: str | None = Header(default=None)
```

----------------------------------------

TITLE: Reusing Default Exception Handlers
DESCRIPTION: Illustrates how to import and reuse FastAPI's default exception handlers (`http_exception_handler`, `request_validation_exception_handler`) within custom handlers. This allows adding custom logic (like logging) before calling the standard handler to produce the default response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_14

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.exception_handlers import http_exception_handler, request_validation_exception_handler
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

app = FastAPI()

@app.exception_handler(StarletteHTTPException)
async def custom_http_exception_handler(request: Request, exc: StarletteHTTPException):
    print(f"OMG! An HTTP error!: {exc.status_code} {exc.detail}")
    return await http_exception_handler(request, exc)

@app.exception_handler(RequestValidationError)
async def custom_validation_exception_handler(request: Request, exc: RequestValidationError):
    print(f"OMG! The client sent invalid data!: {exc.errors()}")
    return await request_validation_exception_handler(request, exc)
```

----------------------------------------

TITLE: Declare Cookie Parameters with a Pydantic Model in FastAPI (Python)
DESCRIPTION: This Python snippet demonstrates how to group related cookie parameters by declaring them as fields within a Pydantic model. Each field is marked with `Cookie(...)` or `Cookie(...)` with a default value, instructing FastAPI to extract these values from the request cookies and validate them according to the model definition.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/cookie-param-models.md#_snippet_0

LANGUAGE: python
CODE:
```
# Code derived from tutorial001_an_py310.py hl[9:12,16]
from typing import Optional

from fastapi import FastAPI, Cookie
from pydantic import BaseModel # Line 9

class Client(BaseModel): # Line 11
    name: str = Cookie(...) # Line 12
    orders: Optional[int] = Cookie(None)

app = FastAPI()

@app.get("/clients/") # Line 16
async def read_client(client: Client):
    return {"client_name": client.name, "client_orders": client.orders}
```

----------------------------------------

TITLE: Unpacking Dictionary with Additional Keyword Arguments in Python
DESCRIPTION: This snippet shows how to combine dictionary unpacking (`**user_in.dict()`) with additional explicit keyword arguments (`hashed_password=hashed_password`). This allows merging data from a dictionary with specific, potentially computed, values when instantiating an object.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
UserInDB(**user_in.dict(), hashed_password=hashed_password)
```

----------------------------------------

TITLE: Raising HTTPException with Custom Headers
DESCRIPTION: Shows how to include custom HTTP headers in the error response when raising an HTTPException. This is useful for specific scenarios like security headers in authentication errors.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_4

LANGUAGE: Python
CODE:
```
raise HTTPException(status_code=401, detail="Not authenticated", headers={
    "WWW-Authenticate": "Basic"
})
```

----------------------------------------

TITLE: Accept Dictionary Body with Typed Keys/Values - Python
DESCRIPTION: Demonstrates defining a FastAPI endpoint that accepts a request body as a dictionary (`dict`) with specific types for keys (`int`) and values (`float`). Pydantic handles conversion of string keys (as per JSON standard) to the target type.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.post("/weights/")
async def create_weights(weights: dict[int, float]): # hl[7]
    return weights
```

----------------------------------------

TITLE: Declaring UploadFile with File Dependency Attributes Python
DESCRIPTION: You can use the `File()` dependency explicitly with `UploadFile` to add extra configuration, such as a description for documentation, to the parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_6

LANGUAGE: Python
CODE:
```
file: UploadFile = File(..., description="A file read as UploadFile"),
```

----------------------------------------

TITLE: Using Dataclasses as Request Body in FastAPI
DESCRIPTION: This snippet demonstrates defining a standard Python dataclass and using it directly as the type annotation for a request body parameter in a FastAPI path operation function. FastAPI, through Pydantic, automatically handles data validation and parsing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from dataclasses import dataclass

@dataclass
class Item:
    name: str
    price: float
    is_offered: bool = False

app = FastAPI()

@app.post("/items/")
def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Creating Database Tables
DESCRIPTION: Defines a function to create all database tables based on the defined SQLModel table models using the configured engine.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: Python
CODE:
```
def create_db_and_tables():
    SQLModel.metadata.create_all(engine)
```

----------------------------------------

TITLE: Implicit Class Dependency Syntax with Type Hint (FastAPI)
DESCRIPTION: Highlights the recommended shorthand syntax for declaring a dependency: use a type hint for editor support and an empty `Depends()` for conciseness. FastAPI infers the dependency from the type hint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_7

LANGUAGE: Python
CODE:
```
commons: CommonQueryParams = Depends()
```

----------------------------------------

TITLE: Using UJSONResponse with response_class in FastAPI
DESCRIPTION: Sets the response class for a route to `UJSONResponse` using the `response_class` parameter. This utilizes the `ujson` library for JSON serialization, which can be faster than the default `JSONResponse` in some cases, but note its potentially less Pythonic handling of edge cases compared to `orjson`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()


@app.get("/items/", response_class=UJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Importing Header from FastAPI Python
DESCRIPTION: Imports the necessary `FastAPI` class and the `Header` function from the `fastapi` library to define header parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Header
```

----------------------------------------

TITLE: Declaring List of Pydantic Models Field in Python
DESCRIPTION: Declares a field within a Pydantic model that expects a list where each item is an `Image` model, or the list itself can be `None`. This enables validation and documentation for arrays of nested models.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_9

LANGUAGE: Python
CODE:
```
images: list[Image] | None = None
```

----------------------------------------

TITLE: Defining FastAPI Path Operation Accepting List of Models as Root Body (Python)
DESCRIPTION: Shows how to define a FastAPI path operation function where the expected request body is not a single model, but a list of Pydantic models (`List[Image]`). FastAPI automatically handles parsing and validating the root array.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import List
from fastapi import FastAPI
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str

app = FastAPI()

@app.post("/images/")
async def create_images(images: List[Image]):
    return images
```

----------------------------------------

TITLE: Returning Custom XML Response in FastAPI
DESCRIPTION: To return content with a specific media type other than the default JSON, you can use the base Response class. Provide the content as a string and specify the desired media type in the media_type parameter. This example shows how to return an XML string.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/response-directly.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import Response

app = FastAPI()

@app.get("/legacy-xml")
async def get_legacy_xml():
    xml_content = """<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<message>Hello, world!</message>"""
    # Return the custom Response with XML content and media type
    return Response(content=xml_content, media_type="application/xml")
```

----------------------------------------

TITLE: Importing File Handling Classes FastAPI Python
DESCRIPTION: This snippet shows the necessary imports from the `fastapi` library to handle file uploads within your application's path operations. Both `File` and `UploadFile` are imported for declaring file parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, File, UploadFile
```

----------------------------------------

TITLE: Defining Non-Cached Dependency FastAPI Python
DESCRIPTION: This Python snippet defines an asynchronous dependency function `needy_dependency`. It relies on another dependency, `get_value`, using the `Depends` injection mechanism. By setting `use_cache=False` within the `Depends` call, it explicitly disables the default caching for `get_value` within this specific dependency, ensuring that `get_value` is executed every time `needy_dependency` is called during a request.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/sub-dependencies.md#_snippet_0

LANGUAGE: python
CODE:
```
async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):
    return {"fresh_value": fresh_value}
```

----------------------------------------

TITLE: Unpacking Dictionary into Pydantic Model Constructor in Python
DESCRIPTION: This snippet illustrates how to use the `**` operator to unpack a dictionary (`user_dict`) into keyword arguments when calling a Pydantic model constructor (`UserInDB`). This is a convenient way to create a new model instance from the contents of a dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
UserInDB(**user_dict)
```

----------------------------------------

TITLE: Declaring List of Strings (Python 3.9+) - Python
DESCRIPTION: Shows the simplified syntax available in Python 3.9 and later for declaring a list where all elements are of a specific type (e.g., list of strings) using the standard `list` type and square brackets.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_5

LANGUAGE: python
CODE:
```
def process_items(items: list[str]): pass
```

----------------------------------------

TITLE: Using HTMLResponse via response_class in FastAPI
DESCRIPTION: This example shows how to make a FastAPI path operation return HTML content. It involves importing `HTMLResponse` and setting it as the `response_class` in the `@app.get()` decorator. The function then returns a string containing the HTML content.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
```

----------------------------------------

TITLE: Defining Token Data Model with Scopes - FastAPI Python
DESCRIPTION: Creates a Pydantic model (`TokenData`) to represent the structure of the data stored within the authentication token's payload. It includes the username and a list of scopes (`scopes`) granted to the user, used for data validation after decoding the token. Requires `BaseModel` from `pydantic` and `Union` from `typing`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_1

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
from typing import Union

class TokenData(BaseModel):
    username: Union[str, None] = None
    scopes: list[str] = []
```

----------------------------------------

TITLE: Returning Generic Response Object Directly in FastAPI (Python)
DESCRIPTION: Shows the basic usage of returning a generic `Response` object directly from a path operation. This provides maximum flexibility for returning content with a specific media type (like XML), status code, and headers, bypassing FastAPI's automatic serialization and documentation features.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/legacy/")
def get_legacy_data():
    data = """<?xml version=\"1.0\"?>
<shampoo>
<Header>
    AplicacionKhronos
</Header>
<Body>
    <Version>1</Version>
    <Servicio>WSDL</Servicio>
    <Datos>
        <DocIdentidad>10072X</DocIdentidad>
        <Dosificaciones>1</Dosificaciones>
    </Datos>
</Body>
</shampoo>
"""
    return Response(content=data, media_type="application/xml")
```

----------------------------------------

TITLE: Defining User Model with Pydantic
DESCRIPTION: Defines a standard Pydantic BaseModel class representing user data, suitable for use within the application to structure and validate user information retrieved during authentication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#_snippet_1

LANGUAGE: python
CODE:
```
from pydantic import BaseModel # hl[5]

# ... other imports ...

class User(BaseModel): # hl[12]
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None # hl[16]
```

----------------------------------------

TITLE: Installing OpenAPI Client Generator (npm)
DESCRIPTION: This console command installs the `@hey-api/openapi-ts` package using npm, saving it as a development dependency. This command-line tool is essential for automatically generating a TypeScript client library from an OpenAPI specification file or URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_1

LANGUAGE: console
CODE:
```
$ npm install @hey-api/openapi-ts --save-dev

---> 100%
```

----------------------------------------

TITLE: Defining Response Model with Dataclass Python
DESCRIPTION: Shows how to use a standard Python `dataclass` with the `response_model` parameter of a path operation decorator (`@app.post`, `@app.get`, etc.). This instructs FastAPI to serialize the function's return value according to the dataclass structure and updates the OpenAPI documentation (Swagger UI).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/dataclasses.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from dataclasses import dataclass

@dataclass
class Item:
    name: str
    price: float
    tags: list[str] = []


app = FastAPI()


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Getting Token in Path Operation (Initial)
DESCRIPTION: This snippet shows an initial FastAPI path operation that receives a raw token string directly from an OAuth2PasswordBearer dependency, demonstrating the first step in securing an endpoint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#_snippet_0

LANGUAGE: python
CODE:
```
@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)): # hl[12]
    return {"token": token}
```

----------------------------------------

TITLE: Defining Function Parameter with Optional String Python
DESCRIPTION: Defines a Python function `say_hi` with a single parameter `name` explicitly typed as `Optional[str]`. Despite using `Optional`, the parameter is still required if no default value is provided.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_15

LANGUAGE: Python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str]):
    print(f"Hi {name}")
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application Python
DESCRIPTION: Provides a minimal FastAPI application with two basic endpoints (`/` and `/items/{item_id}`) to serve as the application code that will be packaged into the Docker image.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Define Pydantic Model with Set Attribute - Python
DESCRIPTION: Defines a Pydantic `BaseModel` with an attribute annotated as a set of strings (`set[str]`). FastAPI and Pydantic will ensure the incoming array is converted to a set of unique strings.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: set[str] # hl[12]

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Running FastAPI with Custom App Name Console
DESCRIPTION: This console command demonstrates how to run a FastAPI application when the application instance is named something other than the default `app` (e.g., `my_awesome_api`). The Uvicorn command format remains `module:instance_name`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: console
CODE:
```
uvicorn main:my_awesome_api --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Applying Dependencies via FastAPI Path Decorator
DESCRIPTION: This Python snippet shows how to apply dependencies directly to a FastAPI path operation decorator using the `dependencies` parameter (corresponding to highlight line 19). It takes a list of `Depends()` calls for dependency functions like `verify_key` and `verify_token`. These dependencies are executed before the path operation function, but their return values are not passed as function arguments, fulfilling the use case described.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

# Assume app = FastAPI() is defined and dependency functions
# verify_key and verify_token are defined elsewhere.

@app.get(
    "/items/",
    dependencies=[Depends(verify_key), Depends(verify_token)] # Highlight Line 19
)
async def read_items():
    """
    This path operation requires X-Key and X-Token headers via dependencies,
    but doesn't need their values.
    """
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]
```

----------------------------------------

TITLE: Implementing Token Header Dependency (Python 3.8+ Non-Annotated) - Python
DESCRIPTION: Shows how to define a reusable dependency function (`get_token_header`) in a separate module (`app/dependencies.py`) to extract a custom `X-Token` header using default values with `fastapi.Header` for Python 3.8+ without using `Annotated`. This dependency can be applied to multiple path operations or routers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import Header, Depends


async def get_token_header(x_token: str = Header()):
    return x_token
```

----------------------------------------

TITLE: Validating FastAPI Token Data and Scopes with Pydantic (Python)
DESCRIPTION: Updates the `TokenData` Pydantic model to include a `scopes` field and shows how to extract and validate the token payload against this model within a dependency. This ensures the expected data structure (username and list of scopes) is present and valid.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_5

LANGUAGE: Python
CODE:
```
class TokenData(BaseModel):
    username: str | None = None
    scopes: list[str] = []

# ... inside dependency function ...
try:
    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    username: str = payload.get("sub")
    scopes: list[str] = payload.get("scopes", [])
    token_data = schemas.TokenData(scopes=scopes, username=username)
except (JWTError, ValidationError):
    raise credentials_exception
user = fake_users_db.get(token_data.username)
if user is None:
    raise credentials_exception
```

----------------------------------------

TITLE: Use Specific Pydantic Types in Nested Models - Python
DESCRIPTION: Demonstrates using Pydantic's built-in specialized types, like `HttpUrl`, within a nested model (`Image`). This provides specific validation for attributes (e.g., ensuring a string is a valid URL).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, HttpUrl # hl[2]

app = FastAPI()

class Image(BaseModel):
    url: HttpUrl # hl[8]
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: set[str] = set()
    image: Image | None = None

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Returning Input Model Containing Sensitive Data - FastAPI Python
DESCRIPTION: This snippet defines a FastAPI path operation that accepts a `UserIn` model as input (parameter `user: UserIn`) and returns the same object, also annotated with `UserIn` as the return type (`-> UserIn`). This demonstrates a potential security risk where sensitive input data (like a password) is returned directly in the response without filtering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr


class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None


app = FastAPI()


@app.post("/users/")
async def create_user(user: UserIn) -> UserIn:
    return user
```

----------------------------------------

TITLE: Adding a Background Task to the Queue - Python
DESCRIPTION: Demonstrates how to use the `.add_task()` method of the `BackgroundTasks` instance (injected into the path operation function) to schedule a function to be run after the response is sent. The method takes the task function as the first argument, followed by any positional arguments, and then keyword arguments for the task function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#_snippet_2

LANGUAGE: Python
CODE:
```
background_tasks.add_task(write_notification, email, message="some notification")
```

----------------------------------------

TITLE: Defining Multiple Files Parameter (bytes) in FastAPI Python
DESCRIPTION: Defines a parameter `files` as a list of `bytes` using `File(...)` to handle uploading multiple files under the same form field name. Each uploaded file's content will be read fully into memory as a separate byte sequence in the list.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_6

LANGUAGE: Python
CODE:
```
async def create_upload_files(files: list[bytes] = File(...)):
    # Process list of file contents
    for content in files:
        print(f"Received file content length: {len(content)}")
```

----------------------------------------

TITLE: Defining List with Specific Type Hint in Pydantic (Python)
DESCRIPTION: Illustrates how to declare a model field as a list containing elements of a specific type (here, `str`) using the `List[str]` type hint from the `typing` module. This enables validation and documentation of list contents.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import List
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: List[str]
```

----------------------------------------

TITLE: Use Model Inheritance for Response Type and Filtering - Python
DESCRIPTION: Demonstrates using Pydantic model inheritance (`UserIn` inherits from `BaseUser`). The function's return type annotation is set to the base class (`-> BaseUser`), allowing static type checkers to validate the function's return while FastAPI/Pydantic correctly filters the response based on the base model fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_7

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

class BaseUser(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

class UserIn(BaseUser):
    password: str

class UserOut(BaseUser):
    pass # UserOut is same as BaseUser, implicitly

app = FastAPI()

@app.post("/user/")
async def create_user(user_in: UserIn) -> BaseUser:
    # ... create user in DB etc.
    return user_in
```

----------------------------------------

TITLE: Importing FastAPI UploadFile Class - Python
DESCRIPTION: This line imports the `UploadFile` class directly from the `fastapi` library. `UploadFile` is used to define path operation parameters that will receive uploaded files from the request.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/uploadfile.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import UploadFile
```

----------------------------------------

TITLE: Running FastAPI App with root_path (Console)
DESCRIPTION: Demonstrates how to start a FastAPI application using the `fastapi run` command (assuming the FastAPI CLI is installed) and explicitly setting the `--root-path` command-line option. This tells the application its expected path prefix when accessed via a proxy. The output shows the Uvicorn server starting.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ fastapi run main.py --root-path /api/v1

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Adding Root Endpoint to FastAPI App
DESCRIPTION: This snippet shows a basic path operation defined directly on the main FastAPI application instance ('app'). Routes defined this way do not inherit the global parameters (like prefix, dependencies, etc.) applied to *included* routers unless explicitly added.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_13

LANGUAGE: Python
CODE:
```
# Assume app is already created and routers included
# from .main import app

from fastapi import FastAPI

app = FastAPI() # Assuming this is a simplified view, or perhaps after router includes

@app.get("/")
async def read_root():
    """
    Root endpoint for the application.
    """
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Directly Unpacking Pydantic Model Dict in Python
DESCRIPTION: This snippet shows a concise pattern of directly unpacking the result of the `.dict()` method from one Pydantic model instance (`user_in`) into the constructor of another Pydantic model (`UserInDB`). This allows transferring data between models efficiently.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
UserInDB(**user_in.dict())
```

----------------------------------------

TITLE: Importing File and UploadFile in FastAPI Python
DESCRIPTION: Imports the necessary `File` and `UploadFile` classes from the `fastapi` library. These are used to type hint and define parameters that will receive uploaded files sent as form data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, File, UploadFile
```

----------------------------------------

TITLE: Running FastAPI with uvicorn in main block (Simulated)
DESCRIPTION: Demonstrates a basic FastAPI application definition and how to run it using `uvicorn.run` within the `if __name__ == "__main__":` block. This pattern allows the Python script to be executed directly to start the server. Requires the `fastapi` and `uvicorn` libraries installed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/debugging.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
import uvicorn

app = FastAPI()

@app.get("/")
async def read_root():
    return {"Hello": "World"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Declaring Variable with Custom Class Type Hint Python
DESCRIPTION: Shows how to declare a variable `one_person` and provide a type hint indicating that it should be an instance of the custom `Person` class, followed by creating an instance and assigning it.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_20

LANGUAGE: Python
CODE:
```
one_person: Person = Person(name="John Doe")
```

----------------------------------------

TITLE: Converting Pydantic Model to Dictionary in Python
DESCRIPTION: This snippet demonstrates calling the `.dict()` method on a Pydantic model instance (`user_in`) to obtain a standard Python dictionary containing the model's data. The `print()` call shows the resulting dictionary structure.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
user_dict = user_in.dict()
print(user_dict)
```

----------------------------------------

TITLE: Reading Environment Variable with os.getenv (Python)
DESCRIPTION: A simple Python script snippet that reads an environment variable named `MY_NAME` using `os.getenv()`. It provides a default value ('World') to be used if the environment variable is not set, demonstrating a safe way to access configuration.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_2

LANGUAGE: Python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Installing Uvicorn ASGI Server (Console)
DESCRIPTION: Installs the Uvicorn ASGI server using pip, including extra standard dependencies like `uvloop` for improved asynchronous performance. This is necessary if not using the built-in `fastapi run` or if wanting to manage the server installation manually.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/manually.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Importing Path Parameter Class - FastAPI - Python
DESCRIPTION: This snippet demonstrates the necessary import statement to use the `Path` class from the FastAPI library. The `Path` class is used for declaring path parameters within your path operation functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Path
```

----------------------------------------

TITLE: Converting Pydantic Model to Dictionary in Python
DESCRIPTION: This snippet shows how to use the `.dict()` method (or `.model_dump()` in Pydantic v2) available on Pydantic model instances to convert the model's data into a standard Python dictionary. The resulting dictionary contains the model's fields and their current values.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
user_dict = user_in.dict()
```

----------------------------------------

TITLE: Instantiating Pydantic Model in Python
DESCRIPTION: This snippet demonstrates how to create an instance of a Pydantic model, UserIn, by passing keyword arguments corresponding to its defined fields. This is a standard way to instantiate Pydantic models from raw Python data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
user_in = UserIn(username="john", password="secret", email="john.doe@example.com")
```

----------------------------------------

TITLE: Using UJSONResponse with response_class in FastAPI (Python)
DESCRIPTION: Demonstrates using UJSONResponse via the `response_class` parameter for faster JSON serialization using the `ujson` library (requires installation). Similar to ORJSONResponse, the function returns a Python dict, which FastAPI serializes using UJSONResponse.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()

@app.get("/json", response_class=UJSONResponse)
def read_json():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Declaring File Parameter FastAPI Python using bytes
DESCRIPTION: This snippet demonstrates how to declare a file parameter in a FastAPI path operation function using the `bytes` type hint along with the `File` dependency. When using `bytes`, FastAPI reads the entire file content into memory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def create_file(file: bytes = File()):
```

----------------------------------------

TITLE: Authenticate User Utility
DESCRIPTION: Provides an example utility function `authenticate_user` that simulates checking user credentials against a fake database. It retrieves a user by username and verifies the provided password using the `verify_password` function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: python
CODE:
```
def authenticate_user(username: str, password: str):
    # Simulate fetching user from a database (e.g., fake_users_db)
    user = fake_users_db.get(username)
    if not user:
        return False
    # Verify the plain password against the stored hashed password
    if not verify_password(password, user["hashed_password"]):
        return False
    return user
```

----------------------------------------

TITLE: Declaring Pydantic Model Examples (Pydantic v1)
DESCRIPTION: Demonstrates how to add example data to a Pydantic model's JSON schema using the internal `Config` class and the `schema_extra` attribute, specifically for Pydantic v1. This data is used by tools like Swagger UI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Any
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    class Config:
        schema_extra: dict[str, Any] = {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2
                }
            ]
        }
```

----------------------------------------

TITLE: Running FastAPI with OpenAPI Disabled via Env Var
DESCRIPTION: Demonstrates how to start the FastAPI application (`uvicorn main:app`) while setting the `OPENAPI_URL` environment variable to an empty string (`OPENAPI_URL=`). This configuration, when used with the Python code snippet that reads this variable via settings, effectively disables the OpenAPI endpoint and related documentation UIs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/conditional-openapi.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ OPENAPI_URL= uvicorn main:app
```

----------------------------------------

TITLE: Accessing Pydantic Model Data (Python)
DESCRIPTION: Demonstrates accessing individual fields of the validated Pydantic model instance (`item`) received as a function parameter. Once validated, the data is available directly as attributes of the model object, providing type hints for editor support.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_5

LANGUAGE: Python
CODE:
```
print(item.price)
```

----------------------------------------

TITLE: Defining Sub FastAPI App Instance and Path Op Return (Python)
DESCRIPTION: Creates a separate FastAPI application instance named `subapi` which will serve as a sub-application. It includes the `return` statement for a path operation defined within this sub-application, illustrating the response payload for an endpoint. This snippet represents the definition of the sub-app but omits the full path operation decorator and function signature.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_1

LANGUAGE: python
CODE:
```
subapi = FastAPI()

return {"message": "Hello World from sub app"}
# ... (lines 15-16 from source file)
```

----------------------------------------

TITLE: Defining Response with Union of Models in FastAPI
DESCRIPTION: This snippet demonstrates how to declare that a FastAPI endpoint can return one of several different Pydantic models using `typing.Union` (or the `|` operator in Python 3.10+ for type hints, but `Union` is needed when passed as a value to `response_model`). This allows the API to return different response structures based on the data returned by the path operation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class CarItem(BaseModel):
    model: str
    description: Union[str, None] = None
    type: str = "car"


class PlaneItem(BaseModel):
    model: str
    description: Union[str, None] = None
    type: str = "plane"
    range: int


app = FastAPI()


@app.get("/items/{item_id}", response_model=Union[PlaneItem, CarItem])
async def read_item(item_id: str):
    if item_id == "car":
        return {"model": "Z", "description": "Fast car"}
    elif item_id == "plane":
        return {"model": "A", "description": "Fast plane", "range": 1000}
    return {"model": "default", "description": "Neither car nor plane"}
```

----------------------------------------

TITLE: Disabling Root Path Auto-Server (Python)
DESCRIPTION: Initializes a FastAPI application with a `root_path` and custom `servers`. By setting the `root_path_in_servers` parameter to `False`, this configuration explicitly prevents FastAPI from automatically adding the `root_path` value (`/api/v1`) as a server entry in the generated OpenAPI schema's `servers` list.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"},
    ],
    root_path="/api/v1",
    root_path_in_servers=False
)
```

----------------------------------------

TITLE: Mounting Sub-Application in Main App - Python
DESCRIPTION: This snippet demonstrates how to mount the previously defined `subapi` instance onto the main `app` instance. The sub-application is mounted at the path `/subapi`, meaning all its routes will be accessible under `/subapi/...`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/sub-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
subapi = FastAPI()
# ... other subapi definitions ...

app.mount("/subapi", subapi)
```

----------------------------------------

TITLE: Defining UploadFile Parameter with Metadata in FastAPI Python
DESCRIPTION: Defines an `UploadFile` parameter and wraps it with `File()` to include additional schema metadata, such as a description. This metadata is used to improve the generated API documentation (e.g., in Swagger UI or OpenAPI).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def create_upload_file(file: UploadFile = File(description="A file read as UploadFile")):
    # Process the file
    contents = await file.read()
    print(f"Filename: {file.filename}")
```

----------------------------------------

TITLE: Including/Excluding Fields in FastAPI Response using List Python
DESCRIPTION: Illustrates that FastAPI's `response_model_include` and `response_model_exclude` parameters also accept a `list` of field names. FastAPI internally converts the list to a set and performs the inclusion or exclusion of fields from the Pydantic response model output accordingly, behaving identically to using a set directly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_17

LANGUAGE: Python
CODE:
```
from typing import List, Union
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: float = 10.5
    tags: List[str] = []

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {
        "name": "Bar",
        "description": "The bartenders",
        "price": 62,
        "tax": 20.2,
    },
    "baz": {
        "name": "Baz",
        "description": None,
        "price": 50.2,
        "tax": 10.5,
        "tags": [],
    },
}

@app.get(
    "/items/{item_id}",
    response_model=Item,
    response_model_include=["name", "description"],
)
async def read_item_include(item_id: str):
    return items[item_id]

@app.get(
    "/items2/{item_id}",
    response_model=Item,
    response_model_exclude=["tax"],
)
async def read_item_exclude(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Importing StaticFiles Class - FastAPI Python
DESCRIPTION: This snippet shows the required import statement to use the `StaticFiles` class in a FastAPI application. The `StaticFiles` class is used to mount directories that contain static assets like CSS, JavaScript, or images, making them accessible via HTTP.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/staticfiles.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.staticfiles import StaticFiles
```

----------------------------------------

TITLE: Defining Metadata for API Tags in FastAPI
DESCRIPTION: Provide additional metadata for the tags used to group path operations in your API. This is done by creating a list of dictionaries, where each dictionary represents a tag and contains its `name`, optional `description` (which supports Markdown), and optional `externalDocs`. This list is passed to the `openapi_tags` parameter of the FastAPI instance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

tags_metadata = [
    {
        "name": "users",
        "description": "Operations with users. The **login** logic happens here.",
    },
    {
        "name": "items",
        "description": "Manage items. So _fancy_ they have their own docs.",
        "externalDocs": {
            "description": "Items external docs",
            "url": "https://fastapi.tiangolo.com/tutorial/metadata/",
        },
    },
]

app = FastAPI(openapi_tags=tags_metadata)
```

----------------------------------------

TITLE: Importing Jinja2Templates Class Python
DESCRIPTION: This snippet shows how to import the `Jinja2Templates` class from the `fastapi.templating` module. This class is required to set up and render Jinja2 templates within a FastAPI application. Importing it is the first step before configuring template directories and rendering responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/templating.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.templating import Jinja2Templates
```

----------------------------------------

TITLE: Defining Structured Documentation for Tags - Python
DESCRIPTION: This snippet shows how to define detailed descriptions and external documentation links for specific tags using the `openapi_tags` parameter during FastAPI initialization. It accepts a list of dictionaries, where each dictionary describes a tag, including its name, description (which can contain markdown), and optional external documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

tags_metadata = [
    {
        "name": "users",
        "description": "Operations with users. The **login** logic is also here.",
    },
    {
        "name": "items",
        "description": "Manage items with tags:\n\n**fat**: Has a lot of fat\n**lean**: Contains little fat",
        "externalDocs": {
            "description": "Items external docs",
            "url": "https://fastapi.tiangolo.com/",
        },
    },
]

app = FastAPI(openapi_tags=tags_metadata)
```

----------------------------------------

TITLE: Implementing WebSocket Endpoint with Dependencies FastAPI Python
DESCRIPTION: This example demonstrates using dependencies like `Path` and `Query` within a WebSocket endpoint. It includes a dependency function (`get_token`) that validates a query parameter and the endpoint function that uses this dependency along with a path parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/websockets.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, WebSocket, WebSocketException, Depends, status
from typing import Annotated

app = FastAPI()


async def get_token(token: Annotated[str | None, Query()] = None):
    if token is None:
        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION, reason="Missing token")
    return token


@app.websocket("/items/{item_id}")
async def websocket_endpoint(websocket: WebSocket, item_id: str, token: Annotated[str | None, Depends(get_token)]):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}, item_id: {item_id}, token: {token}")
```

----------------------------------------

TITLE: Boolean Query Parameter Type Conversion Python
DESCRIPTION: Demonstrates FastAPI's automatic type conversion for boolean query parameters. Various string inputs (like '1', 'True', 'true', 'on', 'yes') for the 'short' parameter are converted to the Python boolean value True.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#_snippet_2

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):
    item = {"item_id": item_id}
    if q:
        item.update({"q": q})
    if not short:
        item.update(
            {"description": "This is an amazing item that has a long description"}
        )
    return item
```

----------------------------------------

TITLE: Preparing Data for Storage with jsonable_encoder (FastAPI, Python)
DESCRIPTION: This snippet demonstrates using FastAPI's `jsonable_encoder` utility within a PUT request handler. It converts complex data types (like Pydantic models or datetime objects) into types that can be serialized to JSON or stored easily, ensuring data consistency before persistence in a database or other storage.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-updates.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.encoders import jsonable_encoder
from fastapi import APIRouter, Body
from pydantic import BaseModel

router = APIRouter()

class Item(BaseModel):
    name: str | None = None
    description: str | None = None
    price: float | None = None
    tax: float | None = None

# Simulate storage
stored_items = {
    "foo": {"name": "Foo", "price": 32.0, "tax": 20.5},
    "bar": {"name": "Bar", "price": 6.0, "tax": 10.5}
}

# Assume item_id and item: Item are parameters of a PUT route
# This function simulates the core logic referencing lines 30-35
def update_item_put(item_id: str, item: Item = Body(...)):
    # In a real app, you would fetch the existing item
    if item_id not in stored_items:
         # Handle item not found (e.g., raise HTTPException)
         pass # Placeholder for error handling

    # For PUT, the incoming 'item' often replaces the stored data directly
    # Prepare the incoming item data for storage using jsonable_encoder
    # This utility converts types like Pydantic models, datetime, etc.
    # into types that can be serialized to JSON or stored.
    item_to_store = jsonable_encoder(item)

    # Simulate saving the updated item data
    stored_items[item_id] = item_to_store

    # Return the stored item data
    return item_to_store

```

----------------------------------------

TITLE: Defining FastAPI OAuth2 Scopes Scheme (Python)
DESCRIPTION: Defines the OAuth2 Password Bearer scheme with specific scopes (`me`, `items`) and their descriptions. This declaration makes the scopes available in the API documentation for authorization flows.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_0

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="token", scopes={"me": "Read information about the current user.", "items": "Read items."}
)
```

----------------------------------------

TITLE: Returning HTMLResponse Object Directly in FastAPI
DESCRIPTION: Illustrates returning an `HTMLResponse` object directly from a path operation function. When you return a `Response` object subclass, FastAPI uses that specific response object for the final response. However, note that this approach may bypass some automatic documentation or data handling features compared to using `response_class`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/items/")
async def read_items():
    return HTMLResponse(content="<h1>Hello World</h1>")
```

----------------------------------------

TITLE: Using StreamingResponse with File-Like Objects in FastAPI
DESCRIPTION: Shows how to use `StreamingResponse` with a generator that reads from a file-like object. The generator yields chunks of data from the file, and `StreamingResponse` sends them incrementally. The `with` statement ensures the file is closed after streaming finishes, even if the client disconnects.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()

def open_file():
    with open("large_file.txt", "rb") as f:
        yield from f

@app.get("/file")
def get_large_file():
    return StreamingResponse(open_file(), media_type="text/plain")

```

----------------------------------------

TITLE: Defining HeroPublic Data Model
DESCRIPTION: Defines a `HeroPublic` class using SQLModel (as a data model, not a table). It inherits from `HeroBase` and re-declares `id` as a non-optional `int`, serving as the public-facing response model that excludes sensitive fields like `secret_name`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import List, Union

from fastapi import FastAPI, HTTPException
from sqlmodel import Field, SQLModel, create_engine, Session, select


class HeroBase(SQLModel):
    name: str = Field(index=True)
    age: Union[int, None] = Field(default=None, index=True)


class Hero(HeroBase, table=True):
    id: Union[int, None] = Field(default=None, primary_key=True)
    secret_name: str


class HeroPublic(HeroBase):
    id: int
```

----------------------------------------

TITLE: Configuring FastAPI Servers and Root Path (Python)
DESCRIPTION: Configures a FastAPI application instance with a specific `root_path` to simulate deployment behind a proxy. It also provides a list of custom `servers` URLs for different environments (staging and production), which FastAPI will include in the generated OpenAPI schema, automatically adding the `root_path` as the first server entry.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"},
    ],
    root_path="/api/v1"
)
```

----------------------------------------

TITLE: Declaring Arbitrary Dict Response in FastAPI Python
DESCRIPTION: Demonstrates how to specify a response body that is a dictionary with keys and values of a particular type (e.g., str keys and float values) without defining a rigid Pydantic model. This is suitable for responses with dynamic or unpredictable field names.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Dict # Or dict in Python 3.9+
from fastapi import FastAPI

app = FastAPI()

@app.get("/prices/", response_model=Dict[str, float]) # Use Dict even in 3.9+ for value
async def read_prices():
    return {"apple": 1.2, "banana": 0.8, "orange": 1.5}
```

----------------------------------------

TITLE: Registering Lifespan Context Manager with FastAPI - Python
DESCRIPTION: Shows how to assign the custom `lifespan` async context manager function to the `lifespan` parameter when creating the `FastAPI` application instance. This integrates the defined startup and shutdown logic into the app's lifecycle.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_5

LANGUAGE: Python
CODE:
```
app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Declaring Body Parameter Multiple OpenAPI Examples
DESCRIPTION: Demonstrates how to add multiple OpenAPI-specific examples with detailed metadata (summary, description, value) to a request body parameter using the `openapi_examples` argument in FastAPI's `Body()`. This method is supported by Swagger UI for displaying multiple examples in the documentation UI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import Body, FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        openapi_examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2
                }
            },
            "bad_name": {
                "summary": "An example with a bad name",
                "description": "An item with a name that is too long will get rejected.",
                "value": {
                    "name": "Too long Fooooo",
                    "price": 35.4
                }
            },
            "no_tax": {
                "summary": "A no tax example",
                "description": "An item without taxes.",
                "value": {
                    "name": "Bar",
                    "price": 10.2
                }
            }
        }
    )
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Declaring Tuple and Set Types (Python 3.9+) - Python
DESCRIPTION: Demonstrates the Python 3.9+ syntax for declaring type hints for `tuple` with specific types for each element and `set` with a specific type for all elements, using standard types and square brackets.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_7

LANGUAGE: python
CODE:
```
def process_items(items_t: tuple[int, int, str], items_s: set[bytes]): pass
```

----------------------------------------

TITLE: Declaring Additional Media Type Response in FastAPI Python
DESCRIPTION: Demonstrates how to define an additional response with a different media type, such as `image/png`, using the `responses` parameter. This is added alongside the default `application/json` defined by `response_model`. The note highlights that returning this response requires using a specific response class like `FileResponse` directly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from fastapi.responses import FileResponse
from pydantic import BaseModel


class Item(BaseModel):
    id: str
    value: str


app = FastAPI()


@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={
        200: {
            "content": {
                "image/png": {}},
            "description": "Return the JSON item or an image."
        }
    }
)
async def read_item(item_id: str, img: Union[bool, None] = None):
    if img:
        return FileResponse("image.png")
    return {"id": "foo", "value": "there goes my hero"}
```

----------------------------------------

TITLE: Running Uvicorn for Traefik Example
DESCRIPTION: This console command starts the Uvicorn server running the FastAPI application for the Traefik example, using the `--root-path` argument to inform the application about the expected path prefix.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_6

LANGUAGE: console
CODE:
```
$ uvicorn main:app --root-path /api/v1

[32mINFO[0m:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Using FileResponse with response_class in FastAPI
DESCRIPTION: Demonstrates using `FileResponse` via the `response_class` parameter in the route decorator. When used this way, the path operation function should return the file path (string) instead of a `FileResponse` object. FastAPI then constructs the `FileResponse` internally.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_13

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()

@app.get("/favicon.ico", response_class=FileResponse)
async def favicon():
    return "favicon.ico"
```

----------------------------------------

TITLE: Default Request Validation Error JSON Response Example
DESCRIPTION: The default JSON response format returned by FastAPI's built-in handler for `RequestValidationError`. It provides details about the location, message, and type of validation errors.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_8

LANGUAGE: JSON
CODE:
```
{
    "detail": [
        {
            "loc": [
                "path",
                "item_id"
            ],
            "msg": "value is not a valid integer",
            "type": "type_error.integer"
        }
    ]
}
```

----------------------------------------

TITLE: Comparing Enum Path Parameter Value in Python
DESCRIPTION: Inside the path operation function, the path parameter typed with an Enum will be an enumeration member. This snippet shows how to compare the received Enum member with a specific member from the Enum class.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_9

LANGUAGE: Python
CODE:
```
if model_name is ModelName.alexnet:
```

----------------------------------------

TITLE: Setting Default Response Class for FastAPI App (Python)
DESCRIPTION: Configures the main FastAPI application instance (`FastAPI`) to use a specific response class, such as `ORJSONResponse`, as the default for all path operations unless individually overridden. Requires `fastapi` and the specified default response class.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_15

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

# Set ORJSONResponse as the default for the entire app
app = FastAPI(default_response_class=ORJSONResponse)

# Any path operation here will use ORJSONResponse by default
# @app.get("/items/")
# async def read_items():
#     return [{"item_id": "Foo"}, {"item_id": "Bar"}]
```

----------------------------------------

TITLE: Install PassLib with Bcrypt (Console)
DESCRIPTION: Installs the `passlib` Python package along with the `bcrypt` extra, which provides the recommended password hashing algorithm. PassLib is used for securely hashing and verifying user passwords.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "passlib[bcrypt]"

---> 100%
```

----------------------------------------

TITLE: Defining Header Parameter with Underscore Conversion Disabled in FastAPI
DESCRIPTION: This snippet illustrates how to prevent FastAPI's default behavior of converting underscores (`_`) in Python variable names to hyphens (`-`) when looking up the header value. Setting `convert_underscores=False` on the `Header` dependency ensures the header is looked up exactly as specified by the variable name (`user_agent`), which is useful for non-standard headers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/header-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Header

app = FastAPI()

@app.get("/user-agent/")
async def get_user_agent(user_agent: str | None = Header(default=None, convert_underscores=False)):
    return {"User-Agent": user_agent}
```

----------------------------------------

TITLE: Reusing Default Exception Handlers (FastAPI) - Python
DESCRIPTION: Explains how to import and reuse FastAPI's built-in default exception handlers within a custom handler. This allows you to perform custom logic (like logging) before passing the exception to the default handler for the standard FastAPI response, combining custom behavior with default formatting.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status\nfrom fastapi.responses import JSONResponse\nfrom fastapi.exceptions import RequestValidationError, HTTPException\nfrom fastapi.exception_handlers import ( \n    http_exception_handler as fastapi_http_exception_handler,\n    request_validation_exception_handler as fastapi_request_validation_exception_handler,\n)\n\napp = FastAPI()\n\n@app.exception_handler(HTTPException)\nasync def custom_http_exception_handler(request: Request, exc: HTTPException):\n    print(f"Oh no! An HTTP error occurred: {exc.status_code}")\n    return await fastapi_http_exception_handler(request, exc)\n\n@app.exception_handler(RequestValidationError)\nasync def custom_validation_exception_handler(request: Request, exc: RequestValidationError):\n    print(f"Oh no! The client sent invalid data: {exc.errors()}")\n    return await fastapi_request_validation_exception_handler(request, exc)
```

----------------------------------------

TITLE: Initializing FastAPI with Conditional OpenAPI URL
DESCRIPTION: Defines application settings using Pydantic's BaseSettings, including an openapi_url setting with a default value. The FastAPI application is then initialized using the value from this setting, allowing the OpenAPI endpoint and documentation UIs to be disabled or changed based on the environment variable OPENAPI_URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/conditional-openapi.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings
from fastapi import FastAPI

class Settings(BaseSettings):
    # Default OpenAPI URL
    openapi_url: str = "/openapi.json"

# Instantiate settings, loads from env vars like OPENAPI_URL
settings = Settings()

# Initialize the FastAPI app, using the openapi_url from settings
# If settings.openapi_url is an empty string, OpenAPI will be disabled
app = FastAPI(openapi_url=settings.openapi_url)
```

----------------------------------------

TITLE: Converting Query Params to Boolean (FastAPI, Python)
DESCRIPTION: Illustrates FastAPI's automatic conversion of query parameter string values (like "1", "true", "on", "yes", case-insensitive) into Python boolean (`bool`) values. This simplifies handling boolean flags passed via the URL query string.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: str, short: bool = False):
    if short:
        return {"item_id": item_id, "short": short}
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Add Regular Expression Validation with Annotated in FastAPI
DESCRIPTION: This snippet demonstrates how to add a regular expression `pattern` validation to a query parameter using `Annotated` and `Query`. The `pattern` parameter takes a regex string that the query parameter value must match.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(min_length=3, max_length=50, pattern="^fixedquery$")] = None):
    if q:
        return {"q": q}
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Run FastAPI Docker Container - Console
DESCRIPTION: Executes the `docker run` command in the console to start a container based on the `myimage` image. The container is run in detached mode (`-d`), named `mycontainer`, and maps port 80 on the host to port 80 in the container (`-p 80:80`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_12

LANGUAGE: console
CODE:
```
docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: Synchronous Request with TestClient (Comparison)
DESCRIPTION: This snippet shows the syntax used to send a synchronous request when using the `TestClient` in a regular `def` test function. It is provided for comparison to illustrate the change in syntax when switching to `AsyncClient` in `async def` tests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#_snippet_5

LANGUAGE: Python
CODE:
```
response = client.get('/')
```

----------------------------------------

TITLE: Adding Response Description for Path Operation in FastAPI (Python)
DESCRIPTION: Explains how to add a description specifically for the expected response of a path operation using the `response_description` parameter. This description appears in the API documentation alongside the response details.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post(
    "/items/",
    response_description="The created item",
)
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Installing Passlib for Password Hashing
DESCRIPTION: Installs the `passlib` library with the `bcrypt` dependency. Passlib is used to handle password hashing and verification securely, supporting various hashing schemes like bcrypt.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "passlib[bcrypt]"

```

----------------------------------------

TITLE: Handling Exceptions with Request Access Setup in Python
DESCRIPTION: Illustrates the structure of a handler function (potentially part of a custom route or middleware) that wraps the core logic in a try/except block. This pattern ensures that the original Request object remains in scope and accessible for inspection, such as reading the body, even if an exception occurs during request processing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#_snippet_2

LANGUAGE: Python
CODE:
```
    try:
        # Process request, potentially call original route handler
        ...
    except Exception as e:
```

----------------------------------------

TITLE: Accessing Value of Enum Path Parameter in Python
DESCRIPTION: To get the actual string value of an Enum path parameter (which inherited from str), you can access the `.value` attribute of the enumeration member. This snippet shows how to compare the value.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_10

LANGUAGE: Python
CODE:
```
if model_name.value == "lenet":
```

----------------------------------------

TITLE: Importing Router Modules (Absolute) - Python
DESCRIPTION: This snippet demonstrates importing entire modules containing APIRouter instances using absolute imports. `app.routers` refers to the 'app/routers/' package starting from the project's base package ('app'). `items, users` imports the 'app/routers/items.py' and 'app/routers/users.py' modules.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_8

LANGUAGE: Python
CODE:
```
from app.routers import items, users
```

----------------------------------------

TITLE: Starlette Path Convertor Syntax for Paths
DESCRIPTION: This snippet shows the special Starlette syntax (`:path`) used in the URL path string to tell the router that this specific path parameter should match an entire path, including directories and filenames with slashes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_13

LANGUAGE: none
CODE:
```
/files/{file_path:path}
```

----------------------------------------

TITLE: Importing status Module Python FastAPI
DESCRIPTION: Imports the `status` module from `fastapi`. This module, provided by Starlette, contains named constants for various HTTP and WebSocket status codes, making it easier to reference them by name rather than remembering integer values.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/status.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import status
```

----------------------------------------

TITLE: Modifying OpenAPI Schema Programmatically (Python)
DESCRIPTION: This Python script demonstrates how to load a saved OpenAPI schema JSON file, iterate through its paths and operations, and modify fields like `operationId`. This allows for fine-grained control over the schema structure before feeding it to a client generator, enabling cleaner or more specific client code than possible with default generation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_6

LANGUAGE: python
CODE:
```
import json

def modify_openapi_schema(schema_path: str):
    with open(schema_path, 'r') as f:
        schema = json.load(f)

    # Example modification: simplify operationId
    for path, methods in schema.get('paths', {}).items():
        for method, operation in methods.items():
            if 'operationId' in operation:
                # Example: remove tag prefix from operationId
                # Assuming operationId is like "tag-operation_name"
                parts = operation['operationId'].split('-', 1)
                if len(parts) > 1:
                    operation['operationId'] = parts[1]
                else:
                     # Fallback or keep original if no tag prefix
                     operation['operationId'] = operation['operationId'].replace('-', '_')


    with open(schema_path, 'w') as f:
        json.dump(schema, f, indent=2)

# Example usage (assuming schema is saved as openapi.json)
# modify_openapi_schema('./openapi.json')
```

----------------------------------------

TITLE: Defining Extended FastAPI App with Headers Python
DESCRIPTION: This snippet shows a more complex FastAPI application with multiple endpoints (`/items/`, `/users/{user_id}`). It includes GET and POST methods for `/items/` that require an `X-Token` header, demonstrating dependency injection for headers (`Header()`) and error handling (`HTTPException`). This app is designed to be tested with requests including headers and JSON bodies.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Header, HTTPException

app = FastAPI()

@app.get("/items/")
async def read_items(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}

@app.post("/items/")
async def create_item(item: dict, x_token: str = Header()):
     if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
     return {"item": item, "message": "Item created"}

@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Reading UploadFile Content Asynchronously Python
DESCRIPTION: Inside an `async` path operation function, you can use the `read()` method of the `UploadFile` object to asynchronously read the file's content. This method should be awaited.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#_snippet_3

LANGUAGE: Python
CODE:
```
contents = await myfile.read()
```

----------------------------------------

TITLE: Importing Context Manager and Defining Lifespan Function Structure - Python
DESCRIPTION: Imports the necessary `asynccontextmanager` from `contextlib` and sets up the definition of the `lifespan` async function. This snippet provides the initial imports and function signature required for defining the lifespan logic.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_2

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager
from typing import Dict

from fastapi import FastAPI

# This will be our "database" of ML models
# We'll use a dictionary to store them
ml_models: Dict[str, str] = {}

# This is our async context manager function
@asynccontextmanager
async def lifespan(app: FastAPI):
```

----------------------------------------

TITLE: Handling Duplicate Headers as a List in FastAPI
DESCRIPTION: This snippet shows how to define a parameter that can receive multiple values for the same HTTP header. By using a type hint of `list[str]` (or `list`), FastAPI automatically collects all occurrences of the specified header (`x_token`) into a Python list of strings, allowing you to access all values sent by the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/header-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Header

app = FastAPI()

@app.get("/duplicate-header/")
async def read_duplicate_header(x_token: list[str] | None = Header(default=None)):
    return {"X-Token values": x_token}
```

----------------------------------------

TITLE: Declaring Multiple Header Parameter Python
DESCRIPTION: Defines a path operation parameter `x_token` that expects potentially multiple `X-Token` headers, receiving all values as a list of strings by using `list[str]` as the type hint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
x_token: list[str] | None = Header(default=None)
```

----------------------------------------

TITLE: Importing TrustedHostMiddleware in Python
DESCRIPTION: Imports the `TrustedHostMiddleware` class from the `fastapi.middleware.trustedhost` module. This middleware protects against HTTP Host header attacks by only allowing requests from specified, trusted hostnames.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/middleware.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi.middleware.trustedhost import TrustedHostMiddleware
```

----------------------------------------

TITLE: Combining Response Information in FastAPI Python
DESCRIPTION: Shows how to provide combined response information by using both the `response_model` and the `responses` parameter for the same status code (e.g., 200 or 404). This allows adding details like a custom `description` or `example` in the `responses` dictionary, which FastAPI merges with the schema derived from the `response_model` for the same status code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    id: str
    value: str


app = FastAPI()


@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={
        404: {"description": "The item was not found"},
        200: {
            "description": "The item with the requested ID",
            "content": {
                "application/json": {
                    "example": {"id": "bar", "value": "The Barters"}
                }
            }
        }
    }
)
async def read_item(item_id: str):
    if item_id != "foo":
        return {"id": "bar", "value": "The Barters"}
    return {"id": "foo", "value": "The Foo Fighters"}
```

----------------------------------------

TITLE: Docker CMD with Proxy Headers - Dockerfile
DESCRIPTION: Shows an alternative `CMD` instruction for a Dockerfile to run Uvicorn with the `--proxy-headers` flag enabled, which is necessary when the container is running behind a proxy server like Nginx or Traefik to correctly handle headers like `X-Forwarded-For`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Importing BackgroundTasks Python
DESCRIPTION: This snippet shows the required import statement to make the `BackgroundTasks` class available for use in your FastAPI application. It must be imported from the `fastapi` package.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/background.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import BackgroundTasks
```

----------------------------------------

TITLE: Configuring Documentation UI URLs - Python
DESCRIPTION: This snippet shows how to customize the URLs for the interactive documentation UIs provided by FastAPI (Swagger UI and ReDoc). You can change the Swagger UI URL using `docs_url` and the ReDoc URL using `redoc_url`, or disable either UI entirely by setting its URL parameter to `None`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(docs_url="/documentation", redoc_url=None)

@app.get("/items/")
async def read_items():
    return [{"name": "Foo"}]
```

----------------------------------------

TITLE: Configuring Documentation UI URLs in FastAPI
DESCRIPTION: This snippet shows how to customize the URLs for the Swagger UI (`docs_url`) and ReDoc (`redoc_url`) documentation interfaces using parameters in the `FastAPI` constructor. It also demonstrates how to disable a specific documentation UI by setting its respective URL parameter to `None`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#_snippet_5

LANGUAGE: python
CODE:
```
app = FastAPI(docs_url="/documentation", redoc_url=None)
```

----------------------------------------

TITLE: Pinning FastAPI to Minor Version Range in requirements.txt
DESCRIPTION: This snippet shows how to define a version range for `fastapi` (including 'standard' extras) that includes all patch versions within a specific minor release (0.112.x) but excludes the next minor version. Using '>=' and '<', it allows receiving bug fixes while preventing potential breaking changes from a new minor release.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/versions.md#_snippet_1

LANGUAGE: txt
CODE:
```
fastapi[standard]>=0.112.0,<0.113.0
```

----------------------------------------

TITLE: Returning JSONResponse with Custom Status Code in FastAPI Python
DESCRIPTION: This snippet shows how to return a JSONResponse object with a custom HTTP status code from a FastAPI path operation. It includes examples of handling different scenarios like a resource not being found (404), a creation request for an existing resource (409), successful resource retrieval (200), and successful resource creation (201), by setting the status_code parameter of the JSONResponse.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/additional-status-codes.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.responses import JSONResponse

app = FastAPI()

# Simulate a simple in-memory store state
stores = {"existent_store": True} # Using a dict to easily check existence

@app.get("/stores/{store_name}")
async def read_store(store_name: str):
    # Check if the store exists
    if store_name not in stores:
        # If not found, return 404 Not Found
        return JSONResponse(
            content={
                "message": "Store not found"
            },
            status_code=404
        )
    # If found, return 200 OK (default for dict return or JSONResponse with no status_code)
    # Explicitly returning 200 using JSONResponse:
    return JSONResponse(
        content={
            "message": f"Store '{store_name}' details"
        },
        status_code=200
    )

@app.post("/stores/")
async def create_store(store_name: str): # Simplified input
    # Check if store already exists (matching the "not new store" scenario)
    if store_name in stores:
        # If exists, return 409 Conflict
        return JSONResponse(
            content={
                "message": f"Store '{store_name}' already exists"
            },
            status_code=409
        )
    # Simulate creation (matching the "write them" scenario)
    stores[store_name] = True
    # Return 201 Created
    return JSONResponse(
        content={
            "message": f"Store '{store_name}' created successfully"
        },
        status_code=201
    )
```

----------------------------------------

TITLE: Activate Virtual Environment (Windows PowerShell)
DESCRIPTION: Activates a Python virtual environment located in a '.venv' directory in the current project folder using Windows PowerShell. This script modifies the PowerShell session's environment variables.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_21

LANGUAGE: console
CODE:
```
$ .venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Importing FastAPI Header Dependency
DESCRIPTION: This snippet shows the basic import statement required to use the `Header` dependency function from the `fastapi` library. This dependency is essential for declaring parameters that should be extracted from request headers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/tutorial/header-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Header
```

----------------------------------------

TITLE: Returning Custom Response with XML Content (Python)
DESCRIPTION: Shows how to return non-JSON content, such as XML, by creating a generic Response object. You provide the content as a string or bytes and explicitly set the appropriate media type. This bypasses all automatic data handling by FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/response-directly.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi.responses import Response
```

LANGUAGE: Python
CODE:
```
return Response(content=xml_content, media_type="application/xml")
```

----------------------------------------

TITLE: Installing websockets Library - Console
DESCRIPTION: Command to install the `websockets` Python library using pip. This library is required to add WebSocket support to a FastAPI application. The output shown simulates a successful installation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/advanced/websockets.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install websockets

---> 100%
```

----------------------------------------

TITLE: Typed Path Parameter (int) JSON Response Example
DESCRIPTION: This JSON snippet shows the expected response when accessing the path operation with an integer path parameter like '/items/3'. FastAPI converts the string from the URL into a Python integer before passing it to the function and returning it.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "item_id": 3
}
```

----------------------------------------

TITLE: Typed Path Parameter (int) JSON Error Response Example
DESCRIPTION: This JSON snippet shows the automatic validation error returned by FastAPI (powered by Pydantic) when a path parameter declared as an integer receives a non-integer value, like 'foo'. The detail includes the type of error, location, message, and invalid input.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "detail": [
    {
      "type": "int_parsing",
      "loc": [
        "path",
        "item_id"
      ],
      "msg": "Input should be a valid integer, unable to parse string as an integer",
      "input": "foo",
      "url": "https://errors.pydantic.dev/2.1/v/int_parsing"
    }
  ]
}
```

----------------------------------------

TITLE: Importing Starlette HTTPException Alias (FastAPI) - Python
DESCRIPTION: Shows the standard practice of importing `HTTPException` from `starlette.exceptions` and aliasing it as `StarletteHTTPException`. This is recommended when defining handlers that should catch both FastAPI's and Starlette's `HTTPException`, ensuring broad coverage while still using FastAPI's version when *raising* the exception in your code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#_snippet_7

LANGUAGE: Python
CODE:
```
from starlette.exceptions import HTTPException as StarletteHTTPException
```

----------------------------------------

TITLE: Rendering Jinja2 Template in FastAPI (Python)
DESCRIPTION: Demonstrates setting up Jinja2Templates pointing to a template directory, mounting static files, defining a FastAPI route, accepting a `Request` object and path parameters, and returning a `TemplateResponse` rendering an HTML file with data passed in the context dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/templates.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates # This is the highlighted line 4 or close to it

app = FastAPI()

# This is the highlighted line 11 or close to it
app.mount("/static", StaticFiles(directory="static"), name="static")

# This is the highlighted line 15 or close to it
templates = Jinja2Templates(directory="templates")

@app.get("/items/{id}", response_class=HTMLResponse)
async def read_item(request: Request, id: str): # This is the highlighted line 17/18 or close to it
    return templates.TemplateResponse("item.html", {"request": request, "id": id}) # This is the highlighted line 18 or close to it
```

----------------------------------------

TITLE: Defining Pydantic Model with Defaults Python
DESCRIPTION: Defines a Pydantic `BaseModel` (`Item`) intended for use as a FastAPI response model. It includes fields with default values (`description`, `tax`, `tags`), illustrating how these defaults are handled when the model is used to serialize response data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import List, Union
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: float = 10.5
    tags: List[str] = []

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {
        "name": "Bar",
        "description": "The bartenders",
        "price": 62,
        "tax": 20.2,
    },
    "baz": {
        "name": "Baz",
        "description": None,
        "price": 50.2,
        "tax": 10.5,
        "tags": [],
    },
}
```

----------------------------------------

TITLE: Setting Headers via Response Parameter in FastAPI Python
DESCRIPTION: Demonstrates how to use a `Response` parameter injected into a path operation function to set custom HTTP headers. The header is added to the `response.headers` dictionary of the temporary response object provided by FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/response-headers.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/items/")
async def read_items(response: Response):
    response.headers["x-cat-breed"] = "persian"
    return {"item_id": "Foo"}
```

----------------------------------------

TITLE: Processing Multiple UploadFile Filenames (Python)
DESCRIPTION: This snippet shows a simple example of how to iterate through a list of `UploadFile` objects received in an endpoint. It accesses the `filename` attribute of each `UploadFile` to collect the names of the uploaded files, returning them in a dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_8

LANGUAGE: Python
CODE:
```
return {"filenames": [file.filename for file in files]}
```

----------------------------------------

TITLE: Using Local OpenAPI Schema for Client Generation (package.json JSON)
DESCRIPTION: This JSON snippet updates the `generate-client` script in `package.json` to change the `--input` parameter from a live URL to a local file path (`./openapi.json`). This configuration is used when you want to generate the client from a saved or programmatically modified OpenAPI schema file, rather than fetching it directly from a running FastAPI server.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_7

LANGUAGE: json
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input ./openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Install WebSockets Library - Console
DESCRIPTION: Installs the `websockets` library using pip. This library is required to enable WebSocket functionality in FastAPI applications. It should be run in an active Python virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/websockets.md#_snippet_0

LANGUAGE: Console
CODE:
```
$ pip install websockets
```

----------------------------------------

TITLE: Returning a generic Response object directly in FastAPI
DESCRIPTION: This snippet shows how to return the base `Response` class directly from a path operation. You must provide the `content`, `status_code`, `headers`, and `media_type` manually. This gives full control but requires manual data handling and doesn't provide automatic documentation unless `response_class` is also set.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()


@app.get("/plain-text")
async def main():
    return Response(content="Hello World", media_type="text/plain")
```

----------------------------------------

TITLE: Renaming Starlette HTTPException for Clarity
DESCRIPTION: Shows how to import Starlette's `HTTPException` under an alias (`StarletteHTTPException`) to distinguish it from FastAPI's `HTTPException` when registering exception handlers, allowing the handler to catch exceptions raised by either.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_10

LANGUAGE: Python
CODE:
```
from starlette.exceptions import HTTPException as StarletteHTTPException
```

----------------------------------------

TITLE: Importing Security Function - FastAPI Python
DESCRIPTION: This snippet demonstrates how to import the `Security` function from the `fastapi` library. `Security` is used similarly to `Depends` but allows for the declaration of OAuth2 scopes, which is useful for advanced security scenarios.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/dependencies.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import Security
```

----------------------------------------

TITLE: Using Asynchronous Python Context Manager
DESCRIPTION: This example shows how to use an asynchronous context manager with the `async with` statement, relevant when working with asynchronous operations like the `lifespan` function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_3

LANGUAGE: Python
CODE:
```
async with lifespan(app):
    await do_stuff()
```

----------------------------------------

TITLE: Run pytest Tests
DESCRIPTION: Executes the pytest command in the terminal. Pytest automatically discovers test files and functions (typically starting with 'test_') and runs them, displaying the test results (passed, failed, errors, etc.).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Console
CODE:
```
pytest
```

----------------------------------------

TITLE: Relative Import Example (Single Dot) - Python
DESCRIPTION: This snippet shows a relative import using a single dot (`.`). It instructs Python to look for the module or object in the same package as the current module. In the context of 'app/routers/items.py', `.dependencies` would look for 'dependencies.py' within the 'app/routers/' directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from .dependencies import get_token_header
```

----------------------------------------

TITLE: Adding ReDoc x-logo Extension to FastAPI OpenAPI Schema
DESCRIPTION: Modifies the generated `openapi_schema` dictionary within the `custom_openapi` function. It adds a `x-logo` object to the top-level `info` section of the schema, providing a URL for a custom logo to be displayed in documentation interfaces like ReDoc.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/extending-openapi.md#_snippet_2

LANGUAGE: Python
CODE:
```
# Inside custom_openapi() after calling get_openapi()
openapi_schema["info"]["x-logo"] = {
    "url": "https://fastapi.tiangolo.com/img/logo-fastapi.png"
}
```

----------------------------------------

TITLE: Declaring Set of Strings Parameter in FastAPI/Pydantic (Python)
DESCRIPTION: Imports the `Set` type hint and declares a parameter `tags` as a set containing only string elements in FastAPI/Pydantic. This ensures uniqueness of items and provides validation and documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Set
# ... other code ...
tags: Set[str]
```

----------------------------------------

TITLE: Running Uvicorn with Inline Environment Variables (Console)
DESCRIPTION: Demonstrates launching a Uvicorn server to run a FastAPI application (`main:app`) while setting multiple environment variables (`ADMIN_EMAIL`, `APP_NAME`) inline for that command. These variables are then picked up by the application's Pydantic Settings.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_7

LANGUAGE: console
CODE:
```
$ ADMIN_EMAIL="deadpool@example.com" APP_NAME="ChimichangApp" uvicorn main:app
<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Incorrect Path Order (Parameter before Fixed)
DESCRIPTION: This Python code defines the same two path operations as before, but with the parameterized path `/users/{user_id}` declared first. This is incorrect as the parameterized path would match `/users/me`, preventing the fixed path operation from ever being reached.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}
```

----------------------------------------

TITLE: Activating Virtual Environment Windows PowerShell Console
DESCRIPTION: This command activates the virtual environment specifically for Windows PowerShell. It executes the activation script located within the `.venv\Scripts` directory, updating the session's environment variables.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_4

LANGUAGE: console
CODE:
```
$ .venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Implementing Basic WebSocket Endpoint FastAPI Python
DESCRIPTION: This complete snippet shows how to define a basic WebSocket endpoint in FastAPI. It imports necessary classes, defines the route using the `@app.websocket` decorator, accepts the connection, and then enters a loop to receive text messages and send them back to the connected client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/websockets.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, WebSocket

app = FastAPI()


@app.websocket("/")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Installing Packages with uv pip install Console
DESCRIPTION: If using the `uv` tool, this command installs specified Python packages into the active virtual environment. It functions similarly to `pip install` but uses `uv`'s backend for potentially faster installations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_11

LANGUAGE: console
CODE:
```
$ uv pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Using RedirectResponse with response_class and status_code in FastAPI
DESCRIPTION: Extends the previous example by explicitly setting the `status_code` parameter in the decorator alongside `response_class=RedirectResponse`. This overrides the default 307 status code for the redirect, allowing you to specify codes like 301 (Permanent Redirect) or 303 (See Other).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer", response_class=RedirectResponse, status_code=301)
async def redirect_typer():
    return "https://typer.tiangolo.com"
```

----------------------------------------

TITLE: Using HTMLResponse with response_class in FastAPI
DESCRIPTION: Shows how to configure a FastAPI route to return HTML content by setting the `response_class` parameter to `HTMLResponse`. FastAPI will then set the `Content-Type` header to `text/html` and ensure the response is documented correctly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return "<h1>Hello World</h1>"
```

----------------------------------------

TITLE: Importing GZipMiddleware in Python
DESCRIPTION: Imports the `GZipMiddleware` class from the `fastapi.middleware.gzip` module. This middleware is used to compress responses sent by the application using the gzip algorithm, potentially reducing bandwidth usage.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/middleware.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi.middleware.gzip import GZipMiddleware
```

----------------------------------------

TITLE: Installing Jinja2 Dependency (Console)
DESCRIPTION: Installs the Jinja2 template engine library using the pip package manager within a console environment. This is a required step to use Jinja2 templates with FastAPI/Starlette.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/templates.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install jinja2

---> 100%
```

----------------------------------------

TITLE: FastAPI Calling Dependency Instance `__call__` (Python)
DESCRIPTION: Illustrates how FastAPI internally calls the `__call__` method of the injected dependency instance (`checker`) when resolving the dependency for a route operation, passing relevant request parameters like the query string `q` from the incoming request.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/advanced-dependencies.md#_snippet_3

LANGUAGE: Python
CODE:
```
checker(q="somequery")
```

----------------------------------------

TITLE: Accessing Request Object in FastAPI Python
DESCRIPTION: This snippet demonstrates how to declare the `Request` object as a parameter in a FastAPI path operation function. It shows accessing client information from the request object while also handling a standard path parameter. Data accessed directly from the `Request` object (like client host or body) is not automatically validated or documented by FastAPI, unlike parameters declared normally.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/using-request-directly.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int, request: Request):
    client_host = request.client.host
    print(f"Client host: {client_host}")
    # You could read the body here, but it won't be validated by FastAPI
    # body = await request.body()
    return {"item_id": item_id, "client_host": client_host}
```

----------------------------------------

TITLE: Adding Custom OpenAPI Extension via openapi_extra - Python/FastAPI
DESCRIPTION: Shows how to add a custom OpenAPI extension (prefixed with `x-`) to the generated OpenAPI schema for a specific path operation using the `openapi_extra` parameter. The dictionary provided is merged with the auto-generated operation object.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/", openapi_extra={
    "x-aperture-labs-portal": "blue",
})
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Importing Routers with Relative Import Python
DESCRIPTION: This Python import statement uses a single dot relative import to bring in the `items` and `users` submodules from the `routers` subpackage. This is the correct way to import these modules from `app/main.py` within the `app` package structure.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_12

LANGUAGE: Python
CODE:
```
from .routers import items, users

```

----------------------------------------

TITLE: Using Synchronous Python Context Manager
DESCRIPTION: This is a standard Python example showing how to use a synchronous context manager with the `with` statement. The `open()` function is a common example.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_2

LANGUAGE: Python
CODE:
```
with open("file.txt") as file:
    file.read()
```

----------------------------------------

TITLE: Importing FastAPI app from another script
DESCRIPTION: Shows how another Python script might import the FastAPI `app` instance defined in `myapp.py`. In this case, the `__name__` variable inside `myapp.py` is set to the module name (`"myapp"`), and the code within `if __name__ == "__main__":` is *not* executed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/debugging.md#_snippet_2

LANGUAGE: Python
CODE:
```
from myapp import app

# Some more code
```

----------------------------------------

TITLE: Embedding Single Pydantic Model in FastAPI Body Python
DESCRIPTION: This snippet shows how to explicitly require a single Pydantic model body parameter (`item`) to be wrapped within a JSON object using the parameter's name as the key. By setting `embed=True` in the `Body()` function for a single body parameter, FastAPI expects the request body to have a structure like `{"item": {...}}` instead of the model's fields directly at the top level.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item = Body(embed=True)):
    results = {"item_id": item_id}
    results.update(item.model_dump())
    return results
```

----------------------------------------

TITLE: Returning FastAPI Response Object Directly - FastAPI Python
DESCRIPTION: This snippet shows a FastAPI path operation that returns a `RedirectResponse` object directly. The function is annotated with the base `Response` type (`-> Response`). FastAPI automatically handles responses that are instances of `Response` or its subclasses without applying Pydantic validation or filtering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response
from fastapi.responses import RedirectResponse


app = FastAPI()


@app.get("/portal")
async def get_portal() -> Response:
    return RedirectResponse(url="https://fastapi.tiangolo.com")
```

----------------------------------------

TITLE: Using StreamingResponse in FastAPI (Python)
DESCRIPTION: Illustrates how to use StreamingResponse to stream content from an async generator or iterator. The path operation function returns a StreamingResponse object initialized with the generator and a specified `media_type`, allowing for large responses or continuous data streams without loading everything into memory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import io
import time

app = FastAPI()

async def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes"
        time.sleep(0.5)

@app.get("/stream")
async def main():
    return StreamingResponse(fake_video_streamer(), media_type="video/mp4")
```

----------------------------------------

TITLE: Activate Virtual Environment (Linux/macOS)
DESCRIPTION: Activates a Python virtual environment located in a '.venv' directory in the current project folder on Linux or macOS. This command modifies the shell's environment variables, primarily the PATH.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_20

LANGUAGE: console
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Example User Data Response (JSON)
DESCRIPTION: This JSON snippet shows an example response body returned by the `/users/me` endpoint when an authenticated user (specifically 'johndoe' in this example) successfully retrieves their profile data. It includes typical user fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#_snippet_1

LANGUAGE: json
CODE:
```
{ 
  "username": "johndoe",
  "email": "johndoe@example.com",
  "full_name": "John Doe",
  "disabled": false,
  "hashed_password": "fakehashedsecret"
}
```

----------------------------------------

TITLE: Importing Router Submodules Absolute Python
DESCRIPTION: Demonstrates an absolute import statement to import multiple submodules (`items`, `users`) from the `app.routers` subpackage into another module (e.g., `app.main`). Requires the `app` directory to be importable as a package.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
from app.routers import items, users
```

----------------------------------------

TITLE: Unpacking Dictionary into Class/Function Arguments in Python
DESCRIPTION: This snippet illustrates how to use the `**` operator to unpack a dictionary's key-value pairs as keyword arguments when calling a class constructor or function. This is useful for passing data from a dictionary directly to parameters that match the dictionary keys.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
UserInDB(**user_dict)
```

----------------------------------------

TITLE: Using ORJSONResponse via response_class in FastAPI
DESCRIPTION: This snippet demonstrates how to configure a FastAPI path operation to use `ORJSONResponse` for potentially faster JSON serialization. It requires installing the `orjson` library. By setting `response_class=ORJSONResponse`, FastAPI automatically serializes the returned dictionary using orjson.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()


@app.get("/items/", response_class=ORJSONResponse)
async def read_items():
    return [{
        "item_id": "Foo"
    }]
```

----------------------------------------

TITLE: Using PlainTextResponse with response_class in FastAPI (Python)
DESCRIPTION: Explains how to use PlainTextResponse by specifying it in the `response_class` parameter of the path operation decorator. The function returns a simple string, which FastAPI wraps in PlainTextResponse, setting the `Content-Type` to `text/plain` and documenting it.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.get("/message", response_class=PlainTextResponse)
def read_message():
    return "Hello World"
```

----------------------------------------

TITLE: Executing Python Script Using External PowerShell Env Var
DESCRIPTION: Demonstrates running the Python script in a PowerShell terminal first without the environment variable set (showing the default output), then setting the variable using `$Env:`, and running the script again to show it successfully reads the external variable.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/environment-variables.md#_snippet_4

LANGUAGE: powershell
CODE:
```
python main.py

Hello World from Python

$Env:MY_NAME = "Wade Wilson"

python main.py

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Accessing root_path from Request Scope in FastAPI
DESCRIPTION: This Python snippet shows how to define a simple FastAPI endpoint that accesses the `root_path` from the request scope. The `root_path` is automatically populated by the server (like Uvicorn) based on the `--root-path` command-line argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI()


@app.get("/")
def read_root(request: Request):
    # Access the root_path from the request scope
    return {"message": "Hello World", "root_path": request.scope.get("root_path")}
```

----------------------------------------

TITLE: Importing Pydantic BaseModel in Python
DESCRIPTION: Imports the necessary `BaseModel` class from the Pydantic library to define data models for request bodies in FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body.md#_snippet_0

LANGUAGE: python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: Relative Import Example (Double Dots) - Python
DESCRIPTION: This snippet shows a relative import using double dots (`..`). It instructs Python to look for the module or object in the parent package of the current module's package. In the context of 'app/routers/items.py', `..dependencies` would look for 'dependencies.py' in the 'app/' directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_5

LANGUAGE: Python
CODE:
```
from ..dependencies import get_token_header
```

----------------------------------------

TITLE: Using RedirectResponse with response_class Returning URL in FastAPI (Python)
DESCRIPTION: Demonstrates using RedirectResponse via the `response_class` parameter while the path operation function returns a string representing the target URL. FastAPI automatically creates the RedirectResponse object using the returned string as the URL, defaulting to a 307 status code.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer", response_class=RedirectResponse)
async def redirect_typer():
    return "https://typer.tiangolo.com"
```

----------------------------------------

TITLE: Configuring OpenAPI Servers Manually in FastAPI
DESCRIPTION: This Python snippet shows how to provide a custom list of servers via the `servers` argument when initializing the FastAPI application. The application will still prepend the `root_path` (if set) to the *first* server URL in the list by default.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_7

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

# Provide a custom list of servers
app = FastAPI(
    root_path="/api/v1", # root_path is still used and prepended to the first server by default
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"},
    ]
)


@app.get("/")
def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Using RedirectResponse with response_class in FastAPI
DESCRIPTION: Shows how to use `RedirectResponse` via the `response_class` parameter. When used this way, FastAPI expects the path operation function to return a string (the URL to redirect to). The `RedirectResponse` class is then used internally to construct the actual HTTP redirect response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer", response_class=RedirectResponse)
async def redirect_typer():
    return "https://typer.tiangolo.com"
```

----------------------------------------

TITLE: Declaring String Types for Function Parameters - Python
DESCRIPTION: Adds basic string type hints (`: str`) to the function parameters. This simple addition enables editors to provide better autocompletion and type checking for the arguments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_1

LANGUAGE: python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    return first_name.title() + " " + last_name.title()
```

----------------------------------------

TITLE: Creating Custom GzipRequest Class in Python
DESCRIPTION: This snippet defines a custom `GzipRequest` class that inherits from `starlette.requests.Request`. It overrides the `body()` method to automatically decompress the request body if the `Content-Encoding` header is set to `gzip`, allowing route handlers to receive the decompressed body directly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#_snippet_0

LANGUAGE: Python
CODE:
```
import gzip
from starlette.requests import Request


class GzipRequest(Request):
    async def body(self) -> bytes:
        if not hasattr(self, "_body"):
            body = await super().body()
            if "gzip" in self.headers.get("Content-Encoding", ""):
                body = gzip.decompress(body)
            self._body = body
        return self._body
```

----------------------------------------

TITLE: Declare List Type Annotation (Before Python 3.9) - Python
DESCRIPTION: Demonstrates the syntax for type hinting a list with a specific type parameter before Python 3.9, requiring the import of `List` from the `typing` module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import List

my_list: List[str]
```

----------------------------------------

TITLE: Sample Dictionary Data with Explicit Defaults Python
DESCRIPTION: A Python dictionary representing sample data for an item. This data explicitly includes values for fields that have defaults in the Pydantic model (`description`, `tax`). When serialized using a response model (especially with `exclude_unset`), these fields will be included because their values were explicitly provided in the source data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_14

LANGUAGE: Python
CODE:
```
{
    "name": "Bar",
    "description": "The bartenders",
    "price": 62,
    "tax": 20.2
}
```

----------------------------------------

TITLE: Example .env File Content
DESCRIPTION: This shows the typical structure of a `.env` file, used to define environment variables in a simple key-value format. Pydantic Settings can be configured to read values from such a file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_11

LANGUAGE: Config
CODE:
```
ADMIN_EMAIL="deadpool@example.com"
APP_NAME="ChimichangApp"
```

----------------------------------------

TITLE: Mixing Required Path and Required Query with Keyword Arguments - FastAPI - Python
DESCRIPTION: This example shows how to declare a required path parameter (`item_id`) followed by `*` and then a required query parameter (`q`) explicitly using `Query(...)`. The `*` forces `q` to be a keyword-only argument, allowing this specific order with required `Path` and `Query` parameters. It requires importing both `Path` and `Query`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import Path, Query

def read_items(item_id: int = Path(...), *, q: str = Query(...)): # (1)! (2)!
```

----------------------------------------

TITLE: Declaring Body Parameter Multiple Examples (JSON Schema)
DESCRIPTION: Shows how to add multiple examples as a list to the JSON schema of a request body parameter using the `examples` argument in FastAPI's `Body()` function. While included in the schema, tools like Swagger UI may not display all of them directly from this source.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import Body, FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        examples=[
            {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2
            },
            {
                "name": "Bar",
                "price": 10.2
            }
        ]
    )
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Defining a Custom Exception Class (Python)
DESCRIPTION: Defines a simple custom exception class `UnicornException` that inherits from Python's base `Exception`. This allows the application to raise specific types of errors relevant to its domain logic.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_3

LANGUAGE: Python
CODE:
```
class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name
```

----------------------------------------

TITLE: Declaring Union Types (Python 3.8+) - Python
DESCRIPTION: Shows the standard syntax for Python 3.8 and earlier for declaring that a variable can be one of several types using `Union` imported from the `typing` module, listing the possible types in square brackets.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_12

LANGUAGE: python
CODE:
```
from typing import Union

def process_item(item: Union[int, str]): pass
```

----------------------------------------

TITLE: Declaring Header Parameter for Multiple Values in FastAPI Python
DESCRIPTION: Illustrates how to declare a header parameter, such as `x_token`, that might appear multiple times in the request. By using a Python `list` type hint (e.g., `list[str]`), FastAPI will automatically collect all header values into a list.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
x_token: list[str] | None = Header(default=None)
```

----------------------------------------

TITLE: Reusing Predefined Responses with Unpacking in FastAPI Python
DESCRIPTION: Demonstrates how to define common response dictionaries (e.g., `responses_404`) and reuse them across multiple path operations by using Python's dictionary unpacking (`**`) within the `responses` parameter. This allows combining the reusable responses with endpoint-specific custom responses in a clean way.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response
from fastapi.responses import JSONResponse
from pydantic import BaseModel


class Message(BaseModel):
    message: str


responses_404 = {
    404: {
        "description": "The item was not found",
        "model": Message
        }
}

app = FastAPI()


@app.get(
    "/items/{item_id}",
    responses={
        **responses_404,
        200: {
            "description": "The item with the requested ID"
            }
        }
)
async def read_item(item_id: str):
    if item_id != "foo":
        return JSONResponse(status_code=404, content={"message": "Item not found"})
    return {"id": "foo", "value": "The Foo Fighters"}
```

----------------------------------------

TITLE: Running Python Command via Bash PATH Example
DESCRIPTION: Illustrates how the operating system uses the `PATH` environment variable to find executable programs. Shows running the `python` command directly and running it via its explicit path, demonstrating the lookup behavior.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/environment-variables.md#_snippet_6

LANGUAGE: bash
CODE:
```
python

/opt/custompython/bin/python
```

----------------------------------------

TITLE: Making a GET Request using Requests in Python
DESCRIPTION: Demonstrates how the Python `requests` library provides a simple and intuitive API for making HTTP requests as a client. This snippet shows a basic GET request to a specified URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/alternatives.md#_snippet_0

LANGUAGE: Python
CODE:
```
response = requests.get("http://example.com/some/url")
```

----------------------------------------

TITLE: Performing date/time manipulation with FastAPI parameters - Python
DESCRIPTION: Inside a FastAPI path operation, this snippet demonstrates how to perform standard Python operations, such as adding a `timedelta` object to a `datetime` object. This is possible because FastAPI/Pydantic has already converted the incoming request data into the correct native Python types, allowing direct manipulation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-data-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
    start_datetime_plus_timedelta = None
    if start_datetime and process_after:
```

----------------------------------------

TITLE: Explicit Class Dependency Syntax without Type Hint (FastAPI)
DESCRIPTION: Shows the syntax for declaring a dependency parameter without a type hint, explicitly providing the dependency class to `Depends()`. The lack of type hint limits editor support.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_5

LANGUAGE: Python
CODE:
```
commons = Depends(CommonQueryParams)
```

----------------------------------------

TITLE: Declaring Request Parameter in FastAPI Path Operation (Python)
DESCRIPTION: Demonstrates how to declare a parameter with the type `Request` in a FastAPI path operation function. This instructs FastAPI to pass the incoming Starlette Request object directly to that parameter, providing access to its attributes and methods.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/using-request-directly.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Request

# This is how you declare it:
async def some_path_operation(request: Request):
    # You can now access request attributes like:
    # client_host = request.client.host
    # headers = request.headers
    pass
```

----------------------------------------

TITLE: Customizing Documentation UI URLs in FastAPI
DESCRIPTION: Modify the URLs for the built-in documentation user interfaces (Swagger UI and ReDoc). Swagger UI is served at `/docs` by default, and its URL can be changed with `docs_url`. ReDoc is served at `/redoc` by default, and its URL can be changed with `redoc_url`. Setting `docs_url=None` or `redoc_url=None` disables the respective UI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(docs_url="/documentation", redoc_url=None)
```

----------------------------------------

TITLE: Installing FastAPI Dependencies (console)
DESCRIPTION: Provides the command-line instruction to install FastAPI with its standard dependencies, including frameworks required for serving like Uvicorn or Hypercorn. It uses `pip` for package management.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install "fastapi[standard]"

```

----------------------------------------

TITLE: Installing Pytest for Testing (Bash)
DESCRIPTION: Provides the terminal command to install the `pytest` testing framework using pip. `pytest` is a dependency required to discover and run the test functions written for the FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_5

LANGUAGE: Bash
CODE:
```
pip install pytest
```

----------------------------------------

TITLE: Importing Routers Directly and Name Collision Example Python
DESCRIPTION: This snippet illustrates a potential pitfall when importing multiple objects with the same name (like `router`) directly from different submodules. The second import (`from .routers.users import router`) will overwrite the first (`from .routers.items import router`), leading to a name collision where only the last imported object is accessible by the name `router`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_14

LANGUAGE: Python
CODE:
```
from .routers.items import router
from .routers.users import router

```

----------------------------------------

TITLE: Enum Path Parameter JSON Output
DESCRIPTION: This JSON snippet shows the expected response when accessing an endpoint with an Enum path parameter, for example `/models/alexnet`. FastAPI automatically serializes the Enum member (`ModelName.alexnet`) to its string value ('alexnet') in the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_9

LANGUAGE: JSON
CODE:
```
{
  "model_name": "alexnet",
  "message": "Deep Learning FTW!"
}
```

----------------------------------------

TITLE: Defining List Field in Pydantic Model (Python)
DESCRIPTION: Demonstrates defining a model field as a standard Python `list`. While this allows any elements, it doesn't provide type checking or documentation for the list's contents.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: list
```

----------------------------------------

TITLE: Setting Custom Route Class on APIRouter Python
DESCRIPTION: Shows how to configure an APIRouter to use a specific custom APIRoute subclass ('TimedRoute' in this example) for all the path operations defined within that router. This applies the custom route's behavior to a group of endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#_snippet_4

LANGUAGE: Python
CODE:
```
router = APIRouter(prefix="/items", tags=["items"], route_class=TimedRoute)
```

----------------------------------------

TITLE: Changing Swagger UI Syntax Highlighting Theme - Python
DESCRIPTION: Shows how to change the color theme for syntax highlighting in Swagger UI by providing a dictionary with the 'syntaxHighlight.theme' key and the desired theme name (e.g., 'obsidian') to the `swagger_ui_parameters` argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#_snippet_1

LANGUAGE: Python
CODE:
```
swagger_ui_parameters={
    "syntaxHighlight.theme": "obsidian"
}
```

----------------------------------------

TITLE: Unpacking Dictionary into Model Instance (Python)
DESCRIPTION: This Python snippet demonstrates how the `**user_dict` syntax is used to unpack a dictionary's key-value pairs, passing them as keyword arguments when creating an instance of the `UserInDB` Pydantic model from user data retrieved from a dictionary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#_snippet_0

LANGUAGE: Python
CODE:
```
UserInDB(
 username = user_dict["username"],
 email = user_dict["email"],
 full_name = user_dict["full_name"],
 disabled = user_dict["disabled"],
 hashed_password = user_dict["hashed_password"],
)
```

----------------------------------------

TITLE: Handling Request Validation Errors in Custom Route Python
DESCRIPTION: This snippet demonstrates how a custom route handler can catch `RequestValidationError`. Inside the `except` block, it shows how to reconstruct the request object using its `scope` and `receive` attributes. This is useful for inspecting the raw request body or headers after a validation error occurs, although using a custom exception handler is often simpler.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#_snippet_2

LANGUAGE: Python
CODE:
```
from starlette.requests import Request
from fastapi.exceptions import RequestValidationError


# Inside a custom route handler or middleware...
async def handle_request(request):
    try:
        # Process the request, potentially triggering validation error
        ...
    except RequestValidationError as exc:
        # Reconstruct the request object
        request = Request(request.scope, request.receive)
        # Now you can inspect request.body(), request.headers, etc.
        print(await request.body())
        # Handle the error, return response, etc.
        ...
```

----------------------------------------

TITLE: Instantiating ASGI Middleware (Typical Way) - Python
DESCRIPTION: This snippet demonstrates a common pattern for using third-party ASGI middleware by directly instantiating it and passing the main application instance during initialization. It shows how middleware often wraps the application to process requests before they reach the app.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_0

LANGUAGE: Python
CODE:
```
from unicorn import UnicornMiddleware

app = SomeASGIApp()

new_app = UnicornMiddleware(app, some_config="rainbow")
```

----------------------------------------

TITLE: Defining Response with Arbitrary Dictionary in FastAPI
DESCRIPTION: This snippet demonstrates using `typing.Dict` (or `dict` in Python 3.9+) to specify that a FastAPI endpoint will return an arbitrary dictionary, without needing a predefined Pydantic model for the dictionary structure. This is useful when keys are not known beforehand or vary.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import Dict

from fastapi import FastAPI

app = FastAPI()


@app.get("/keywords/", response_model=Dict[str, float])
async def read_keywords():
    return {"foo": 4.2, "bar": 7}
```

----------------------------------------

TITLE: Demonstrating Incorrect Same-Package Relative Import Python
DESCRIPTION: Provides an example of a relative import using a single dot (`.`), which attempts to import `get_token_header` from a `dependencies` module *within the current package* (`app/routers`). This is shown to be incorrect for accessing `app/dependencies.py`. Dependencies: Relative import rules in Python.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from .dependencies import get_token_header
```

----------------------------------------

TITLE: Importing Dependency with Parent Relative Import Python
DESCRIPTION: Demonstrates the correct use of a two-dot relative import (`..`) to import `get_token_header` from the `dependencies` module. This signifies importing from a module (`dependencies`) located in the parent package (`app/`). Dependencies: Relative import rules in Python.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from ..dependencies import get_token_header
```

----------------------------------------

TITLE: Returning JSONResponse with jsonable_encoder in FastAPI Python
DESCRIPTION: Demonstrates how to return a `JSONResponse` directly. It manually uses `jsonable_encoder` to convert a Pydantic model instance (`item`) into a JSON-compatible Python data structure before passing it to the `JSONResponse` constructor. This is useful when you need to customize the response while still serving JSON, handling cases like items not found with a 404 status.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/response-directly.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonable_encoder

from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: list[str] = []

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {"name": "Bar", "tax": 20.5},
    "baz": {"description": "Droppped the ball", "price": 42.0},
}

app = FastAPI() # Assume app is initialized elsewhere

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        return JSONResponse(status_code=404, content={"message": "Item not found"})

    item = items[item_id]
    
    # Use jsonable_encoder here
    json_compatible_item_data = jsonable_encoder(item)

    # Return JSONResponse directly
    return JSONResponse(content=json_compatible_item_data)
```

----------------------------------------

TITLE: Implement Path Converter in FastAPI
DESCRIPTION: This Python code defines a GET endpoint with a path parameter `file_path` using the `:path` converter. This allows the `file_path` parameter to capture the entire remaining path, including slashes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}
```

----------------------------------------

TITLE: Importing FastAPI App Module: Python
DESCRIPTION: This Python snippet illustrates how another script would import the FastAPI application instance (`app`) from the main script file (`myapp.py`). When a script is imported as a module, its `__name__` variable is set to the module's name (e.g., `"myapp"`), causing the `if __name__ == "__main__"` block containing `uvicorn.run()` to be skipped.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#_snippet_2

LANGUAGE: Python
CODE:
```
from myapp import app
```

----------------------------------------

TITLE: Disabling Separate OpenAPI Schemas (FastAPI, Python)
DESCRIPTION: This snippet demonstrates how to initialize the FastAPI application with `separate_input_output_schemas=False`. This parameter disables the Pydantic v2 feature that generates distinct OpenAPI schemas for input and output models, forcing FastAPI to use a single schema for models with default values, treating such fields as not required.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str
    description: Union[str, None] = None

app = FastAPI(separate_input_output_schemas=False)
```

----------------------------------------

TITLE: Installing FastAPI with All Extras (Console)
DESCRIPTION: This command uses pip to install the FastAPI library along with all its optional dependencies, also known as 'extras'. This provides a comprehensive installation covering most common use cases and integrations directly, often suitable for getting started or for full development environments.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_1

LANGUAGE: console
CODE:
```
pip install "fastapi[all]"

---> 100%
```

----------------------------------------

TITLE: Returning Enum Path Parameter Values in FastAPI Python
DESCRIPTION: FastAPI automatically converts Enum members back to their string values when they are returned in a JSON response (e.g., within a dictionary). This snippet shows example return statements.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_11

LANGUAGE: Python
CODE:
```
return {"model_name": model_name, "message": "Deep Learning FTW!"}
# ... or ...
return {"model_name": model_name, "message": "LeNet the great!"}
# ... or ...
return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Install HTTPX for TestClient
DESCRIPTION: Installs the httpx library using pip. This library is a required dependency for Starlette's TestClient, which is used for testing FastAPI applications by making HTTP requests against the application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/testing.md#_snippet_0

LANGUAGE: Console
CODE:
```
pip install httpx
```

----------------------------------------

TITLE: Setting License Identifier in FastAPI Metadata
DESCRIPTION: This snippet shows how to specify the license information for the API using an SPDX identifier instead of a URL within the `license_info` dictionary. This method is supported in OpenAPI 3.1.0 and later versions. The code shows the specific line within the `license_info` dictionary as an example.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#_snippet_1

LANGUAGE: python
CODE:
```
        "identifier": "Apache-2.0", # Changed from tutorial001.py
```

----------------------------------------

TITLE: Importing Validation Components in FastAPI
DESCRIPTION: This snippet shows the necessary imports to use `Annotated` for adding metadata and `Query` for declaring query parameters with validation in FastAPI. `Annotated` is imported from `typing` and `Query` from `fastapi`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query
```

----------------------------------------

TITLE: Importing Depends Function - FastAPI Python
DESCRIPTION: This snippet shows the standard way to import the `Depends` function directly from the `fastapi` library. `Depends` is the primary tool for defining and managing dependencies in FastAPI applications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/dependencies.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Example URL Overriding Default Query Parameter
DESCRIPTION: This URL shows how to override a default query parameter. The `skip` parameter is set to 20, while the `limit` parameter retains its default value of 10.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_2

LANGUAGE: URL
CODE:
```
http://127.0.0.1:8000/items/?skip=20
```

----------------------------------------

TITLE: Importing Router Objects Directly (Relative) - Python
DESCRIPTION: This snippet shows importing the specific `router` object (the APIRouter instance) directly from the router modules using relative imports. While possible, this approach can lead to naming conflicts if multiple modules export an object with the same name (like `router`) and you try to import them into the same scope.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_9

LANGUAGE: Python
CODE:
```
from .routers.items import router
from .routers.users import router
```

----------------------------------------

TITLE: Referencing Direct Path Operation Placeholder Python
DESCRIPTION: This snippet is a placeholder referencing Python code from `app/main.py`. The accompanying text shows that it's possible to define path operations directly on the main `FastAPI` application instance (`app`) itself, in addition to organizing them within `APIRouter`s, highlighting this example definition on lines 21-23 in the referenced content.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_19

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/main.py!}

```

----------------------------------------

TITLE: Example Inactive User Error Response (JSON)
DESCRIPTION: This JSON snippet illustrates the error response body returned when an authenticated user who is marked as disabled attempts to access an endpoint that requires an 'active' user, as enforced by the `get_current_active_user` dependency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#_snippet_3

LANGUAGE: json
CODE:
```
{ 
  "detail": "Inactive user"
}
```

----------------------------------------

TITLE: Declaring Optional Types (Python 3.8+) - Python
DESCRIPTION: Shows the standard syntax for Python 3.8 and earlier for declaring a variable that can be a specific type or `None` using `Optional` imported from the `typing` module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_14

LANGUAGE: python
CODE:
```
from typing import Optional

def process_name(name: Optional[str]): pass
```

----------------------------------------

TITLE: Raising HTTPException with Custom Headers (Python)
DESCRIPTION: Shows how to include custom headers in the HTTP response when raising an HTTPException. The 'headers' parameter takes a dictionary of string key-value pairs to be added to the response headers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

@app.get("/items/{item_id}")
def read_item(item_id: str):
    if item_id != "foo":
        raise HTTPException(
            status_code=404,
            detail="Item not found",
            headers={
                "X-Error": "There goes my error",
                "X-Another-Header": "Some other value"
            },
        )
    return {"item": "The Foo Wrestlers"}
```

----------------------------------------

TITLE: Configuring Traefik Path Stripping and Routing (TOML)
DESCRIPTION: Configures a Traefik middleware to strip the `/api/v1` prefix from incoming requests. It defines a router that matches paths starting with `/api/v1` and applies this middleware before forwarding requests to the 'app' service, which points to the FastAPI application running on `http://127.0.0.1:8000`. This allows testing the stripped path prefix scenario locally.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_3

LANGUAGE: TOML
CODE:
```
[http]
  [http.middlewares]

    [http.middlewares."api-stripprefix".stripPrefix]
      prefixes = ["/api/v1"]

  [http.routers]

    [http.routers."app-http"]
      entryPoints = ["http"]
      service = "app"
      rule = "PathPrefix(`/api/v1`)"
      middlewares = ["api-stripprefix"]

  [http.services]

    [http.services.app]
      [http.services.app.loadBalancer]
        [[http.services.app.loadBalancer.servers]]
          url = "http://127.0.0.1:8000"
```

----------------------------------------

TITLE: Defining Models and Endpoint in FastAPI (Python)
DESCRIPTION: This Python snippet shows a basic FastAPI application defining Pydantic models for request/response data (`Item`, `ResponseMessage`) and a simple POST endpoint (`/items/`) that accepts an `Item` and returns a `ResponseMessage`. This application serves as the backend source for the OpenAPI specification used in client generation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float

class ResponseMessage(BaseModel):
    message: str

app = FastAPI()

@app.post("/items/", response_model=ResponseMessage)
async def create_item(item: Item):
    return {"message": f"Item {item.name} created with price {item.price}"}
```

----------------------------------------

TITLE: Defining FastAPI Dependency Functions for Decorators
DESCRIPTION: These Python functions serve as example dependencies intended for use within the `dependencies` parameter of FastAPI path operation decorators. They demonstrate how to declare requirements (like headers), raise HTTP exceptions upon failure for invalid input, and can optionally return values which will not be consumed by the path operation function itself when used in the `dependencies` list.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException, Depends, FastAPI

# Assume app = FastAPI() is defined elsewhere

def verify_key(x_key: str = Header()):
    # Lines 8, 13: Declare requirements (headers)
    if x_key != "fake-super-secret-key":
        # Lines 10, 15: Raise exceptions
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    # Lines 11, 16: Return values (even if unused by path op)
    return x_key

def verify_token(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token

# Example of how these might be used in a decorator follows in another snippet.
```

----------------------------------------

TITLE: Generate Random Secret Key (Console)
DESCRIPTION: Uses the `openssl` command to generate a secure, random 32-byte hexadecimal string. This string should be used as the `SECRET_KEY` for signing JWT tokens.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: console
CODE:
```
$ openssl rand -hex 32

09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
```

----------------------------------------

TITLE: FastAPI Default Swagger UI Parameters - Python
DESCRIPTION: Displays the default dictionary of configuration parameters that FastAPI uses for Swagger UI. These parameters are defined in the FastAPI source code and can be overridden by providing custom values via the `swagger_ui_parameters` argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#_snippet_2

LANGUAGE: Python
CODE:
```
DEFAULT_SWAGGER_UI_PARAMETERS: Dict[str, Any] = {
    "dom_id": "#swagger-ui",
    "layout": "StandaloneLayout",
    "deepLinking": True,
    "showPersistentCommands": False,
    "displayOAS3": True,
    "filter": True,
    "syntaxHighlight.activated": True,
    "syntaxHighlight.theme": "agate",
    "tryItOutEnabled": True
}
```

----------------------------------------

TITLE: Installing Uvicorn with Standard Extras (Shell)
DESCRIPTION: This command specifically installs the uvicorn ASGI server along with its standard optional dependencies using pip. Uvicorn is the recommended server to run FastAPI applications, and installing it separately allows for more granular control over dependencies compared to installing it via FastAPI's extras.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/index.md#_snippet_3

LANGUAGE: shell
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Example URL for Boolean Query Parameter (True)
DESCRIPTION: This URL demonstrates passing a value that FastAPI interprets as `True` for a boolean query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_5

LANGUAGE: URL
CODE:
```
http://127.0.0.1:8000/items/foo?short=true
```

----------------------------------------

TITLE: Install FastAPI OAuth2 Form Data Dependency (Console)
DESCRIPTION: Installs the `python-multipart` package using pip, which is necessary for FastAPI's OAuth2 password flow to correctly parse form data containing the username and password. This dependency is included in the `fastapi[standard]` install but needs manual installation if using `pip install fastapi`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Ordering Parameters using * (Non-Annotated) - FastAPI Python
DESCRIPTION: This snippet illustrates an older trick for ordering parameters without `Annotated`. By including `*` as the first parameter, subsequent parameters are treated as keyword-only arguments, bypassing Python's rule about required parameters preceding defaulted ones.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(*, q: str, item_id: Path(default=None, title="The ID of the item to get")):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Setting root_path Programmatically in FastAPI App
DESCRIPTION: This Python snippet demonstrates how to set the `root_path` directly when initializing the FastAPI application instance. This achieves the same result as using the `--root-path` command-line argument for the server.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

# Set the root_path directly when creating the app
app = FastAPI(root_path="/api/v1")


@app.get("/")
def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Running Pytest Tests (Bash)
DESCRIPTION: Shows the terminal command to execute the tests discovered by `pytest` in the current or specified directory. `pytest` automatically finds files starting with `test_` and functions within them starting with `test_`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_6

LANGUAGE: Bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Using Pydantic Model Inheritance in FastAPI Python
DESCRIPTION: Demonstrates how to reduce code duplication by defining a base Pydantic model (UserBase) with common attributes. Specialized models (UserIn, UserOut, UserInDB) inherit from UserBase, only defining the fields specific to their use case (e.g., adding password or hashed_password), improving maintainability.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

def fake_password_hasher(password: str):
    return "hashed" + password

def fake_save_user(user_in: "UserInDB"):
    return user_in

class UserBase(BaseModel):
    username: str
    email: str
    full_name: str | None = None

class UserIn(UserBase):
    password: str

class UserOut(UserBase):
    pass # Inherits all from UserBase

class UserInDB(UserBase):
    hashed_password: str

@app.post("/users/", response_model=UserOut)
async def create_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    fake_save_user(user_in_db)
    return user_in_db
```

----------------------------------------

TITLE: Serve Custom Docs UI HTML with Custom CDN URLs in FastAPI
DESCRIPTION: This code imports necessary functions to generate Swagger UI and ReDoc HTML pages and defines path operations (`/docs`, `/redoc`, `/swagger-ui-redirect`) that return these pages. It configures the HTML to load JavaScript and CSS files from specified custom CDN URLs (`https://unpkg.com/`), overriding the default locations used by FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.openapi.docs import (
    get_redoc_html,
    get_swagger_ui_html,
    get_swagger_ui_oauth2_redirect_html,
)

# ... FastAPI app created with docs_url=None, redoc_url=None ...

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title,
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js",
        swagger_css_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css",
    )

@app.get("/swagger-ui-redirect")
async def custom_swagger_ui_redirect():
    return get_swagger_ui_oauth2_redirect_html()

@app.get("/redoc", include_in_schema=False)
async def redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=app.title,
        redoc_js_url="https://unpkg.com/redoc@2/bundles/redoc.standalone.js",
    )
```

----------------------------------------

TITLE: Resetting FastAPI Dependency Overrides - Python
DESCRIPTION: This Python snippet demonstrates how to reset or clear all dependency overrides that have been set on a FastAPI application instance. Clearing overrides is typically performed after a test or test suite runs to ensure that subsequent tests start with the application's default dependencies and avoid unintended side effects from previous test overrides.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/testing-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
app.dependency_overrides = {}
```

----------------------------------------

TITLE: Using Path Parameter Containing Paths in FastAPI Python
DESCRIPTION: This snippet shows how to use the Starlette `:path` convertor syntax within a FastAPI path operation decorator. The `file_path` parameter will capture the remainder of the URL path, including any slashes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_14

LANGUAGE: Python
CODE:
```
@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
```

----------------------------------------

TITLE: Handling WebSocket Disconnect Exception Python
DESCRIPTION: This code snippet shows the `except` block used to catch the `WebSocketDisconnect` exception. This exception is raised when a WebSocket client disconnects, allowing you to perform cleanup or send a final message to the client or others.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/websockets.md#_snippet_4

LANGUAGE: python
CODE:
```
except WebSocketDisconnect:
        await websocket.send_text("Client left the chat")
```

----------------------------------------

TITLE: Defining Set with Specific Type Hint in Pydantic (Python)
DESCRIPTION: Shows how to define a model field as a set of unique elements of a specific type (here, `str`) using `Set[str]` from the `typing` module. Pydantic will automatically convert incoming list data to a set, ensuring uniqueness.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Set
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str]
```

----------------------------------------

TITLE: Including Scopes in FastAPI JWT Token (Python)
DESCRIPTION: Shows how to add the scopes received in the request (from `OAuth2PasswordRequestForm`) to the data payload when creating a JWT access token. This allows the scopes granted to the user to be stored and later retrieved from the token for permission checks.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#_snippet_1

LANGUAGE: Python
CODE:
```
access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
access_token = create_access_token(
    data={"sub": user.username, "scopes": form_data.scopes}, expires_delta=access_token_expires
)
return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Import Starlette HTTPException for Handlers (Python)
DESCRIPTION: Demonstrates how to import the `HTTPException` class specifically from `starlette.exceptions`, aliasing it as `StarletteHTTPException`. This is crucial when registering custom exception handlers to ensure they catch exceptions raised by Starlette's internal components or extensions, providing consistent error handling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from starlette.exceptions import HTTPException as StarletteHTTPException
```

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn (console)
DESCRIPTION: Shows the command to start the FastAPI application using the Uvicorn server. It specifies the Python module ('main') and the FastAPI instance variable ('app'), and uses the '--reload' flag for development convenience, enabling automatic server restart on code changes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_4

LANGUAGE: console
CODE:
```
uvicorn main:app --reload

```

----------------------------------------

TITLE: Running FastAPI Dev Server with Dependencies - Console
DESCRIPTION: Command to start the FastAPI development server using `fastapi dev main.py` to test the WebSocket endpoint configured with dependencies. This command runs the application and the output confirms the server is running locally.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ko/docs/advanced/websockets.md#_snippet_2

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Preprocessing OpenAPI JSON (Python Script)
DESCRIPTION: This Python script demonstrates how to load an OpenAPI specification JSON file, iterate through its paths and operations, and modify the `operationId` values. It specifically targets operation IDs that start with a tag name followed by a hyphen and removes that prefix to simplify names for client generation tools.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#_snippet_6

LANGUAGE: Python
CODE:
```
import json
import re


def main():
    with open("openapi.json", "r") as f:
        openapi = json.load(f)

    for path, path_data in openapi["paths"].items():
        for method, method_data in path_data.items():
            if "operationId" in method_data:
                operation_id = method_data["operationId"]
                # Assumes operationId format like 'tag-operation_name'
                match = re.match(r"^([^\-]+)-", operation_id)
                if match:
                    tag = match.group(1)
                    # Check if the operation actually has this tag
                    if "tags" in method_data and tag in method_data["tags"]:
                         # Remove the tag prefix
                        new_operation_id = re.sub(f"^{tag}-", "", operation_id, 1)
                        method_data["operationId"] = new_operation_id

    with open("openapi.json", "w") as f:
        json.dump(openapi, f, indent=2)


if __name__ == "__main__":
    main()
```

----------------------------------------

TITLE: Configuring Client Generation Script in package.json (JSON)
DESCRIPTION: This JSON snippet shows the `scripts` section of a frontend project's `package.json` file. It defines a `generate-client` script that executes the installed `openapi-ts` command, pointing it to the FastAPI application's live OpenAPI schema endpoint, specifying the output directory (`./src/client`), and selecting the `axios` library for HTTP requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Python Dictionary Unpacking Result Example
DESCRIPTION: Shows the resulting dictionary after applying the unpacking operation (`**`) as demonstrated in the previous example, illustrating how keys and values from `old_dict` are included along with the new key-value pair.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#_snippet_6

LANGUAGE: Python
CODE:
```
{
    "old key": "old value",
    "second old key": "second old value",
    "new key": "new value",
}
```

----------------------------------------

TITLE: Configure Pydantic v1 to Read .env File
DESCRIPTION: This Python code modifies the Pydantic v1 `Settings` class to load configuration from a specified `.env` file by defining an inner `Config` class with the `env_file` attribute. Variables in the `.env` file take precedence over environment variables if both are set.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_13

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings, Field


class Settings(BaseSettings):
    class Config:
        env_file = ".env"

    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Defining Main Endpoint Triggering Callback - Python
DESCRIPTION: This snippet shows a standard FastAPI endpoint definition (`/invoices/`) that receives an `Invoice` object and expects a `callback_url` query parameter. It includes the Pydantic model definition and the initial route setup before explicitly adding callback documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/openapi-callbacks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, APIRouter
from pydantic import BaseModel, Field, HttpUrl

app = FastAPI()

# ... (other imports and models)

class Invoice(BaseModel):
    id: str
    title: str
    customer: str
    total: str

class InvoiceEvent(BaseModel):
    description: str
    paid: bool

class InvoiceEventReceived(BaseModel):
    ok: bool = True

invoices_callback_router = APIRouter()

@app.post(
    "/invoices/",
    summary="Create an invoice and schedule a callback",
    callbacks=invoices_callback_router.routes,
)
async def create_invoice(*,
    body: Invoice,
    callback_url: HttpUrl = Field(
        ..., description="URL to receive invoice events"
    ),
):
```

----------------------------------------

TITLE: Creating Custom TimedRoute Class in Python
DESCRIPTION: Defines a custom APIRoute subclass that adds response timing. It overrides 'get_route_handler' to wrap the original handler in a function that records the start time, executes the original handler, calculates the elapsed time, adds an 'X-Response-Time' header to the response, and returns the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#_snippet_5

LANGUAGE: Python
CODE:
```
import time
from fastapi.routing import APIRoute
from fastapi.responses import Response
from fastapi import Request


class TimedRoute(APIRoute):
    def get_route_handler(self):
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request):
            before = time.time()
            response: Response = await original_route_handler(request)
            duration = time.time() - before
            response.headers["X-Response-Time"] = str(duration)
            return response

        return custom_route_handler
```

----------------------------------------

TITLE: Defining Pydantic Settings in config.py (Python)
DESCRIPTION: Places the Pydantic `Settings` class definition into a separate file named `config.py`. This is a common practice for organizing configuration in larger Python or FastAPI applications, making the main application file cleaner.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_8

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50
```

----------------------------------------

TITLE: Disabling Dependency Caching in FastAPI (Annotated) - Python
DESCRIPTION: Shows how to explicitly disable caching for a dependency using `use_cache=False` within the `Depends` function, utilizing Python 3.8+ `Annotated` type hints. This forces the dependency function to be called every time it is required.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):
    return {"fresh_value": fresh_value}
```

----------------------------------------

TITLE: Returning Custom XML Response in FastAPI Python
DESCRIPTION: Shows how to return a custom response with a specific media type, in this case, XML. It creates an XML string and wraps it in a `Response` object, explicitly setting the `media_type` to "application/xml". This bypasses all automatic data conversion and is useful for serving non-standard content types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/response-directly.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/legacy/")
def get_legacy_data():
    data = """<?xml version="1.0"?>
    <shampoo>
    <Header>
        <data>abc</data>
    </Header>
    <Body>
        <data>def</data>
    </Body>
    </shampoo>
    """
    return Response(content=data, media_type="application/xml")
```

----------------------------------------

TITLE: Specifying Core Dependencies
DESCRIPTION: This snippet specifies the main project dependencies using pip's requirements file format. It includes references to other requirements files, editable installs, and specific package versions or version ranges required for various development tasks like documentation generation (MkDocs, mkdocstrings), code formatting (black), and general utilities.
SOURCE: https://github.com/fastapi/fastapi/blob/master/requirements-docs.txt#_snippet_0

LANGUAGE: Python requirements
CODE:
```
-e .
-r requirements-docs-tests.txt
mkdocs-material==9.6.1
mdx-include >=1.4.1,<2.0.0
mkdocs-redirects>=1.2.1,<1.3.0
typer == 0.12.5
pyyaml >=5.3.1,<7.0.0
# For Material for MkDocs, Chinese search
jieba==0.42.1
# For image processing by Material for MkDocs
pillow==11.1.0
# For image processing by Material for MkDocs
cairosvg==2.7.1
mkdocstrings[python]==0.26.1
griffe-typingdoc==0.2.7
# For griffe, it formats with black
black==25.1.0
mkdocs-macros-plugin==1.3.7
markdown-include-variants==0.0.4
```

----------------------------------------

TITLE: Importing HTTPSRedirectMiddleware in Python
DESCRIPTION: Imports the `HTTPSRedirectMiddleware` class from the `fastapi.middleware.httpsredirect` module. This middleware automatically redirects incoming HTTP requests to their HTTPS equivalents, ensuring secure connections.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/middleware.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware
```

----------------------------------------

TITLE: Using an Async Python Context Manager - Python
DESCRIPTION: Demonstrates the usage of an async context manager with the `async with` statement. This pattern is similar to standard context managers but designed for asynchronous operations, allowing `await` within the block.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_4

LANGUAGE: Python
CODE:
```
async with lifespan(app):
    await do_stuff()
```

----------------------------------------

TITLE: Configuring npm Script for Client Generation
DESCRIPTION: This JSON snippet shows how to add a custom script named `generate-client` to your `package.json` file. This script utilizes the installed `openapi-ts` CLI to fetch the OpenAPI spec from a running FastAPI application, specify an output directory for the generated code, and select the HTTP client library (`axios`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Disable Default Docs UI in FastAPI (Custom CDN)
DESCRIPTION: This code disables the default Swagger UI and ReDoc documentation endpoints provided by FastAPI by setting their URLs to `None` during application initialization. This is the first step when you want to serve these static assets from a custom location, like a different CDN, and define your own endpoints for the docs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_0

LANGUAGE: Python
CODE:
```
app = FastAPI(docs_url=None, redoc_url=None)
```

----------------------------------------

TITLE: Calling Required Optional Parameter Function With None Python
DESCRIPTION: Shows that calling the `say_hi` function and explicitly passing `None` as the value for the `name` parameter is valid according to the `Optional[str]` type hint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_17

LANGUAGE: Python
CODE:
```
say_hi(name=None)  # This works, None is valid 🎉
```

----------------------------------------

TITLE: Defining Pydantic Model with Default Value (Python)
DESCRIPTION: This snippet defines a basic Pydantic model named `Item`. It includes a standard required string field `name` and an optional string field `description` which has a default value of `None`. This default value is key to how Pydantic v2 generates different OpenAPI schemas for input and output.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
```

----------------------------------------

TITLE: Declaring Root Level List of Pydantic Models Parameter (Python 3.9+)
DESCRIPTION: Declares the entire request body parameter as a list where each element must conform to the `Image` Pydantic model, using the native `list` type hint for Python 3.9+. This allows sending an array of complex objects directly as the request payload.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_12

LANGUAGE: Python
CODE:
```
images: list[Image]
```

----------------------------------------

TITLE: Example Python Context Manager with 'with'
DESCRIPTION: This standard Python code snippet demonstrates the use of the `with` statement and a context manager (the object returned by `open()`) to ensure a resource (a file) is properly handled and closed automatically upon exiting the `with` block. This pattern illustrates the underlying concept that FastAPI's yield dependencies utilize for automatic setup and teardown.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
with open("./somefile.txt") as f:
    contents = f.read()
    print(contents)
```

----------------------------------------

TITLE: Importing the Depends Function - Python
DESCRIPTION: Imports the `Depends` object from the `fastapi` module. This object is used to declare dependencies in FastAPI path operation functions, enabling dependency injection.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Demonstrating Router Variable Name Collision on Import Python
DESCRIPTION: Illustrates how importing variables with the same name (`router`) directly from two different submodules (`items` and `users`) leads to a name collision, where the second import overwrites the first. This explains why importing the modules themselves (`import items, users`) is preferred in this case. Dependencies: Python import mechanics.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
from .routers.items import router\nfrom .routers.users import router
```

----------------------------------------

TITLE: Correcting Type Mismatch Using Type Hints - Python
DESCRIPTION: Shows how type hints help identify potential type errors (like concatenating `str` and `int`) and how to correct them by explicitly converting types where necessary. The example casts an integer to a string before concatenation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_3

LANGUAGE: Python
CODE:
```
def process_items(name: str, age: int, price: float, is_active: bool):
    print(name.title() + " " + str(age))
    print(f"Item: {name}, Age: {age}, Price: {price}, Active: {is_active}")
```

----------------------------------------

TITLE: Using Pydantic HttpUrl Type in Model Field (Python)
DESCRIPTION: Imports the `HttpUrl` type from Pydantic and uses it to type-hint the `url` field in a model. This provides specialized validation to ensure the value is a valid HTTP or HTTPS URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_8

LANGUAGE: Python
CODE:
```
from pydantic import HttpUrl

# ... model definition ...
    url: HttpUrl
```

----------------------------------------

TITLE: Disabling Dependency Caching in FastAPI (Non-Annotated) - Python
DESCRIPTION: Illustrates how to disable caching for a dependency by setting `use_cache=False` in `Depends`, using standard Python type hints (pre-Annotated style). This ensures the dependency is re-evaluated on every call.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):
    return {"fresh_value": fresh_value}
```

----------------------------------------

TITLE: Returning Custom XML Response in FastAPI
DESCRIPTION: Shows how to return non-JSON content, specifically XML, by creating the XML content as a string and returning it within a generic `Response` object. It's necessary to specify the `media_type` parameter to indicate the content type (text/xml) to the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/response-directly.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()


@app.get("/legacy/")
def get_legacy_data():
    data = """<?xml version="1.0"?>
    <shampoo>
    <Header>
        <Status>Success</Status>
    </Header>
    <Body>
        <ItemName>Shampoo Hat</ItemName>
        <ItemPrice>34.99</ItemPrice>
    </Body>
    </shampoo>"""
    return Response(content=data, media_type="application/xml")
```

----------------------------------------

TITLE: Using UJSONResponse via response_class in FastAPI
DESCRIPTION: This snippet shows how to configure a FastAPI path operation to use `UJSONResponse` as an alternative JSON serializer. It requires installing the `ujson` library. Similar to `ORJSONResponse`, setting `response_class=UJSONResponse` automatically serializes the returned dictionary using ujson.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()


@app.get("/items/", response_class=UJSONResponse)
async def read_items():
    return [{
        "item_id": "Foo"
    }]
```

----------------------------------------

TITLE: Example Pinning Older FastAPI Minor Version Range
DESCRIPTION: This snippet provides another example of pinning FastAPI to an older minor version range (0.45.x) using '>=' and '<'. This illustrates the recommended strategy of pinning to a minor version range to get patch updates (bug fixes) without automatically upgrading to a potentially breaking new minor release.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/versions.md#_snippet_2

LANGUAGE: txt
CODE:
```
fastapi>=0.45.0,<0.46.0
```

----------------------------------------

TITLE: Run FastAPI Development Server - Console
DESCRIPTION: Starts the FastAPI development server using the `fastapi dev` command, assuming the main application file is named `main.py`. This command is part of the `fastapi` CLI and includes auto-reloading for convenience during development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/websockets.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Customizing Operation ID Generation in FastAPI (Python)
DESCRIPTION: This Python snippet defines a custom function `generate_unique_id` that takes an `APIRoute` object and returns a string. This function is assigned to the `FastAPI` instance's `generate_unique_id_function` parameter, allowing control over the `operationId` generated for each path operation in the OpenAPI schema, thereby influencing the method names in the generated client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, APIRoute
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float

def generate_unique_id(route: APIRoute):
    return route.tags[0] + "-" + route.name

app = FastAPI(generate_unique_id_function=generate_unique_id)

@app.post("/items/", tags=["items"])
async def create_item(item: Item):
    return {"message": f"Item {item.name} created"}
```

----------------------------------------

TITLE: Defining Startup Event Handler Python
DESCRIPTION: This snippet shows the older way to define startup logic using the `@app.on_event("startup")` decorator. The decorated function will run once when the application starts. It can be `async def` or `def`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

database = {}

@app.on_event("startup")
async def startup_event():
    print("Initializing database...")
    # Simulate database connection or data loading
    database["data"] = "initial data"
    print("Database initialized.")
```

----------------------------------------

TITLE: Generated OpenAPI schema (partial) - JSON
DESCRIPTION: FastAPI automatically generates an OpenAPI schema describing your API. This is a partial view of the JSON output accessible at '/openapi.json', showing the OpenAPI version, basic info, and paths.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {



...

```

----------------------------------------

TITLE: Running Python Program in Virtual Environment Console
DESCRIPTION: After activating the virtual environment and installing dependencies, this command executes a Python script (`main.py`). Because the environment is active, the script will use the Python interpreter and packages installed within the `.venv` directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_15

LANGUAGE: console
CODE:
```
$ python main.py

Hello World
```

----------------------------------------

TITLE: Python Dictionary Unpacking Example
DESCRIPTION: Provides a basic Python example illustrating the use of the dictionary unpacking operator (`**`). This feature allows merging dictionaries and is presented as a technique for reusing predefined response dictionaries when defining FastAPI path operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#_snippet_5

LANGUAGE: Python
CODE:
```
old_dict = {
    "old key": "old value",
    "second old key": "second old value",
}
new_dict = {**old_dict, "new key": "new value"}
```

----------------------------------------

TITLE: Importing Dependency with Three Dot Relative Import Python
DESCRIPTION: This relative import statement attempts to import the function `get_token_header` from a module named `dependencies` located two package levels above the current file (`app/routers/items.py`). It is shown as an incorrect import for the given project structure because there is no package directory above `app/`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_8

LANGUAGE: Python
CODE:
```
from ...dependencies import get_token_header

```

----------------------------------------

TITLE: Running Hypercorn with Trio Worker Class (Console)
DESCRIPTION: Starts the Hypercorn ASGI server running a FastAPI application and explicitly sets the worker class to use the Trio async framework. This allows the application to leverage Trio's capabilities.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_5

LANGUAGE: console
CODE:
```
$ hypercorn main:app --worker-class trio
```

----------------------------------------

TITLE: Python Dictionary for Template Context
DESCRIPTION: A Python dictionary used to pass data (context) to the Jinja2 template. The keys in this dictionary become variables accessible within the template. Here, the `id` variable is provided.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/templates.md#_snippet_2

LANGUAGE: Python
CODE:
```
{"id": id}
```

----------------------------------------

TITLE: Importing FastAPI WebSocketDisconnect Exception - Python
DESCRIPTION: Imports the `WebSocketDisconnect` exception from the `fastapi` package. This specific exception is raised automatically when a WebSocket client disconnects, enabling developers to catch this event and perform necessary cleanup or logging.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/websockets.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import WebSocketDisconnect
```

----------------------------------------

TITLE: Demonstrating Incorrect Two-Level Parent Relative Import Python
DESCRIPTION: Shows a relative import using three dots (`...`), attempting to import `get_token_header` from a `dependencies` module located two packages above the current one. This example illustrates an invalid import path for the given file structure. Dependencies: Relative import rules in Python.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from ...dependencies import get_token_header
```

----------------------------------------

TITLE: Explicit Class Dependency Syntax with Type Hint (FastAPI)
DESCRIPTION: Shows the syntax for declaring a dependency parameter with a type hint and explicitly providing the dependency class to `Depends()`. This syntax is valid but the type hint can sometimes allow a shorter form.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_4

LANGUAGE: Python
CODE:
```
commons: CommonQueryParams = Depends(CommonQueryParams)
```

----------------------------------------

TITLE: Implementing Actual Callback Request Example - Python
DESCRIPTION: Provides a simple example of how the application's code might send an actual HTTP request to the external callback URL using a library like `httpx`. This code is the *implementation* of the callback, distinct from the documentation of the callback endpoint itself.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#_snippet_1

LANGUAGE: Python
CODE:
```
callback_url = "https://example.com/api/v1/invoices/events/"
httpx.post(callback_url, json={
    "description": "Invoice paid",
    "paid": True
})
```

----------------------------------------

TITLE: Importing Path and Annotated - FastAPI Python
DESCRIPTION: This snippet shows the necessary imports for defining path parameters with validations and metadata using FastAPI, including the `Path` object and `Annotated` from the `typing` module.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path
from typing import Annotated
```

----------------------------------------

TITLE: Running Python Command via PowerShell PATH Example
DESCRIPTION: Illustrates how the operating system uses the `PATH` environment variable to find executable programs in PowerShell. Shows running the `python` command directly and running it via its explicit path, demonstrating the lookup behavior.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/environment-variables.md#_snippet_7

LANGUAGE: powershell
CODE:
```
python

C:\opt\custompython\bin\python
```

----------------------------------------

TITLE: Referencing Router Import Avoiding Collision Placeholder Python
DESCRIPTION: This snippet is a placeholder referencing Python code from `app/main.py`. The surrounding text highlights (line 5) the method of importing the entire `items` and `users` submodules directly (e.g., `import items, users`) instead of just the `router` variable from each. This approach is recommended to prevent name collisions when multiple imported modules expose objects with identical names.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_15

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/main.py!}

```

----------------------------------------

TITLE: Setting and Echoing Environment Variables (Unix/Linux Console)
DESCRIPTION: Demonstrates how to set a temporary environment variable named `MY_NAME` using the `export` command in a Unix-like shell and then retrieve and print its value using the `echo` command.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_0

LANGUAGE: console
CODE:
```
// You could create an env var MY_NAME with
$ export MY_NAME="Wade Wilson"

// Then you could use it with other programs, like
$ echo "Hello $MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Define Pydantic v1 Settings Class
DESCRIPTION: This Python code defines a configuration class `Settings` that inherits from `BaseSettings` (from `pydantic`). Attributes are declared with type annotations; Pydantic automatically reads corresponding environment variables (case-insensitive), validates types, and applies default values if variables are not set. `Field` can be used for additional validation or configuration.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_3

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings, Field


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Generating URL with url_for in Jinja
DESCRIPTION: Demonstrates how to use the `url_for` function within a Jinja template to dynamically generate URLs for path operations. It takes the name of the path operation (`'read_item'`) and its arguments (`id=id`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/templates.md#_snippet_4

LANGUAGE: jinja
CODE:
```
<a href="{{ url_for('read_item', id=id) }}">
```

----------------------------------------

TITLE: Defining Custom YAML Request Schema using Pydantic & openapi_extra (v2) - Python/FastAPI
DESCRIPTION: Shows how to define a YAML request body schema for documentation using Pydantic v2 and `openapi_extra`, even though the application reads the body as bytes and manually parses and validates the YAML content using Pydantic's `model_validate`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Any

import yaml
from fastapi import FastAPI, Request
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float


@app.post("/items/", openapi_extra={
    "requestBody": {
        "content": {
            "application/x-yaml": {
                "schema": Item.model_json_schema()
            }
        }
    }
})
async def create_item(request: Request) -> Any:
    data_bytes = await request.body()
    data_str = data_bytes.decode()
    data = yaml.safe_load(data_str)
    item = Item.model_validate(data)
    print(item)
    return {"status": "ok"}
```

----------------------------------------

TITLE: Import Dependencies for Re-using Default Exception Handlers (Python)
DESCRIPTION: Shows the necessary import statements to create custom exception handlers that can leverage or integrate with FastAPI's built-in exception handling logic. This includes importing the default handlers (`http_exception_handler`, `request_validation_exception_handler`) from `fastapi.exception_handlers`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse, PlainTextResponse
from starlette.exceptions import HTTPException as StarletteHTTPException
from fastapi.exception_handlers import (
    http_exception_handler,
    request_validation_exception_handler,
)
```

----------------------------------------

TITLE: Example URL Missing Required Query Parameter
DESCRIPTION: This URL demonstrates calling an endpoint that requires the `needy` query parameter but does not provide it, resulting in a validation error.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_8

LANGUAGE: URL
CODE:
```
http://127.0.0.1:8000/items/foo-item
```

----------------------------------------

TITLE: Configure openapi-ts Script in package.json
DESCRIPTION: This JSON snippet shows how to add a script called `generate-client` to your frontend project's `package.json`. This script uses the installed `openapi-ts` tool to fetch the OpenAPI schema from a running FastAPI application (at `http://localhost:8000/openapi.json`) and generate client code into the `./src/client` directory using the `axios` library.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Returning HTMLResponse Object Directly in FastAPI (Python)
DESCRIPTION: Illustrates returning an HTMLResponse object directly from a path operation function. This gives the developer full control over the response content, headers, and status code. However, FastAPI will not automatically process `response_model` or document the specific media type in OpenAPI when the response is returned directly this way.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/items/")
async def read_items():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look, HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)
```

----------------------------------------

TITLE: Importing HTTPConnection Class in FastAPI
DESCRIPTION: This snippet shows how to import the `HTTPConnection` class from `fastapi.requests`. This class is used to define dependencies that are compatible with both HTTP and WebSocket connections, offering a unified interface compared to `Request` or `WebSocket` individually.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/httpconnection.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.requests import HTTPConnection
```

----------------------------------------

TITLE: Type Hinting Tuple and Set Elements
DESCRIPTION: Explains how to type hint `tuple` and `set` collections with specific element types. Tuples can specify types for each fixed element, while sets specify the type for all elements.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Tuple, Set

def process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):
    print(items_t)
    print(items_s)
```

LANGUAGE: Python
CODE:
```
def process_items(items_t: tuple[int, int, str], items_s: set[bytes]):
    print(items_t)
    print(items_s)
```

----------------------------------------

TITLE: Declare Class Dependency with Annotated Any and Depends(Class) (Python, FastAPI)
DESCRIPTION: This snippet demonstrates declaring a class dependency using `Annotated` with `Any` as the type hint, while still specifying the dependency callable using `Depends(Class)`. This approach relies solely on `Depends()` for injection, sacrificing type hints for the parameter variable itself.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_5

LANGUAGE: Python
CODE:
```
commons: Annotated[Any, Depends(CommonQueryParams)]
```

----------------------------------------

TITLE: Install openapi-ts CLI Tool
DESCRIPTION: This command installs the `openapi-ts` command-line interface tool as a development dependency in your frontend project. It is used to generate TypeScript client code from an OpenAPI schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: console
CODE:
```
npm install @hey-api/openapi-ts --save-dev
```

----------------------------------------

TITLE: Declare List Type Annotation (Python 3.9+) - Python
DESCRIPTION: Demonstrates the standard Python 3.9+ syntax for type hinting a list with a specific type parameter (e.g., `list[str]`). This indicates a list where all elements are expected to be strings.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
my_list: list[str]
```

----------------------------------------

TITLE: Declaring Root Level List of Pydantic Models Parameter (Python < 3.9)
DESCRIPTION: Declares the entire request body parameter as a list where each element must conform to the `Image` Pydantic model, using the `List` type hint for Python < 3.9. This allows sending an array of complex objects directly as the request payload.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_11

LANGUAGE: Python
CODE:
```
images: List[Image]
```

----------------------------------------

TITLE: Importing Pydantic Field for Model Attributes - Python
DESCRIPTION: Shows the necessary import statement to use the `Field` class from the Pydantic library. Unlike FastAPI's parameter functions, `Field` is imported directly from `pydantic` itself.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-fields.md#_snippet_0

LANGUAGE: python
CODE:
```
from pydantic import Field
```

----------------------------------------

TITLE: Receiving Scopes in Token Form Request - FastAPI Python
DESCRIPTION: Shows that the standard `OAuth2PasswordRequestForm` provided by FastAPI automatically includes a `scopes` field. When a client sends a token request using the 'password' flow, the requested scopes are available in the `scopes` attribute of the received `form_data` object (as a list of strings).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi.security import OAuth2PasswordRequestForm
from fastapi import Depends, APIRouter

router = APIRouter()

@router.post("/token")
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    # The requested scopes are available in form_data.scopes
    requested_scopes = form_data.scopes # This is a list of strings

    # ... Authentication logic (check username/password) ...
    # ... Generate token, making sure to include the scopes the user is *actually* granted
    # ... based on their permissions and the requested scopes.

    # return token_response # Return access token and token type
```

----------------------------------------

TITLE: Executing Python Script with/without Environment Variable (Console)
DESCRIPTION: Illustrates running the Python script that uses `os.getenv`. It shows the output when the `MY_NAME` environment variable is unset (default used) and when it is set via `export` before execution, demonstrating how the script's behavior changes based on the environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_3

LANGUAGE: console
CODE:
```
// Here we don't set the env var yet
$ python main.py

// As we didn't set the env var, we get the default value

Hello World from Python

// But if we create an environment variable first
$ export MY_NAME="Wade Wilson"

// And then call the program again
$ python main.py

// Now it can read the environment variable

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Using Callable Dependency Instance with Depends (Python)
DESCRIPTION: Demonstrates how to use the pre-instantiated callable class instance (`checker`) within a route operation function's parameters using `Depends()`. FastAPI will execute the `__call__` method of this instance to obtain the value to inject into the `fixed_content_included` parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/advanced-dependencies.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(fixed_content_included: dict = Depends(checker)):
    # Use fixed_content_included here
    return fixed_content_included
```

----------------------------------------

TITLE: Documenting Callback Endpoint Structure - Python
DESCRIPTION: Defines the Pydantic models for the callback request and response and a dummy API endpoint using the dedicated callback router. This endpoint definition serves purely for documenting the expected structure and types of the callback API that the client should implement; it does not contain actual implementation logic for the FastAPI server.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/openapi-callbacks.md#_snippet_3

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class InvoiceEvent(BaseModel):
    description: str
    paid: bool

class InvoiceEventReceived(BaseModel):
    ok: bool = True

@invoices_callback_router.post(
    "/invoices/{invoice_id}/events/",
    summary="Invoice event callback",
    response_model=InvoiceEventReceived,
)
async def invoice_event_callback(invoice_id: str, body: InvoiceEvent):
    pass
```

----------------------------------------

TITLE: Linking Static File in Jinja2 Template (Jinja2)
DESCRIPTION: This Jinja2 template snippet shows how to use the `url_for()` function within the template to generate a URL for a static file (`styles.css`) managed by FastAPI's `StaticFiles`, allowing the template to correctly link to static assets.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/templates.md#_snippet_3

LANGUAGE: jinja
CODE:
```
<!DOCTYPE html>
<html>
<head>
    <title>Item {{ id }}</title>
    <link rel="stylesheet" href="{{ url_for('static', path='/static/styles.css') }}"> {# Highlighted line 4 #}
</head>
<body>
    <h1>Item ID: {{ id }}</h1> {# Highlighted line 7 #}
</body>
</html>
```

----------------------------------------

TITLE: Declaring Header Parameter Disabling Underscore Conversion in FastAPI Python
DESCRIPTION: Shows how to declare a header parameter like `x_token` using `Header` and explicitly disable the default conversion of underscores (`_`) in the variable name to hyphens (`-`) in the header name by setting the `convert_underscores` parameter to `False`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
x_token: str | None = Header(default=None, convert_underscores=False)
```

----------------------------------------

TITLE: Relative Import Example (Triple Dots) - Python
DESCRIPTION: This snippet shows a relative import using triple dots (`...`). It instructs Python to go up two levels in the package hierarchy. In the example structure, attempting this from 'app/routers/items.py' would try to find 'dependencies.py' outside the top-level 'app/' package, which would likely fail in this application structure but illustrates the mechanism.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
from ...dependencies import get_token_header
```

----------------------------------------

TITLE: Instantiating Pydantic Model in Python
DESCRIPTION: This snippet shows how to create an instance of a Pydantic model (`UserIn`) by passing keyword arguments corresponding to the model's fields. This is a standard way to populate a model instance with data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
user_in = UserIn(username="john", password="secret", email="john.doe@example.com")
```

----------------------------------------

TITLE: Timing Attack Example Length Comparison
DESCRIPTION: Another conceptual comparison snippet demonstrating a timing attack vulnerability. Even if the strings are close, a standard comparison might take slightly longer than comparing completely different strings, potentially revealing information about the correct credentials' length or characters. This is used to explain the need for constant-time comparison.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/http-basic-auth.md#_snippet_2

LANGUAGE: python
CODE:
```
if "stanleyjobsox" == "stanleyjobson" and "love123" == "swordfish":
    ...
```

----------------------------------------

TITLE: Running FastAPI with Conditional OpenAPI URL (Console)
DESCRIPTION: Demonstrates how to run the FastAPI application from the command line, passing an environment variable (`OPENAPI_URL`) that the application is configured to use to conditionally enable or disable the OpenAPI endpoint. This environment variable directly influences the `openapi_url` parameter used when initializing the `FastAPI` instance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/conditional-openapi.md#_snippet_0

LANGUAGE: Console
CODE:
```
OPENAPI_URL= uvicorn main:app

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Showing Path Operation Redefinition Issue in FastAPI Python
DESCRIPTION: This snippet shows what happens when the same path is defined multiple times. FastAPI (Starlette) only uses the first defined path operation that matches, making subsequent definitions for the exact same path redundant or ineffective.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}


@app.get("/users/{user_id}")
async def read_user_again(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Using Function Name as operationId by Iterating Routes - Python/FastAPI
DESCRIPTION: Shows how to iterate through all registered application routes after definition and programmatically set their `operation_id` to the name of the corresponding path operation function using `APIRoute.name`. Requires ensuring unique function names.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.routing import APIRoute

app = FastAPI()


@app.get("/items/")
async def read_items():
    return [{"item_id": "Foo"}]


def custom_generate_unique_id(route: APIRoute):
    return route.name


app.generate_unique_id_function = custom_generate_unique_id

# This must be done *after* adding all path operations
```

----------------------------------------

TITLE: Setting Custom Route Class for APIRouter in Python
DESCRIPTION: This example shows how to apply a custom `APIRoute` class, such as `TimedRoute`, to all routes defined within a specific `APIRouter`. By setting the `route_class` parameter during `APIRouter` instantiation, all decorated path operations within this router will use the custom route class.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

# Assuming TimedRoute is defined elsewhere

router = APIRouter(route_class=TimedRoute)
```

----------------------------------------

TITLE: Generating, Modifying, and Caching OpenAPI Schema - Python
DESCRIPTION: This function defines the custom logic for generating and modifying the OpenAPI schema. It first checks if a schema is already cached on the app, generates the default schema using `get_openapi`, adds a custom `x-logo` extension to the info object, caches the modified schema on the app instance, and finally returns the schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/extending-openapi.md#_snippet_1

LANGUAGE: python
CODE:
```
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema

    openapi_schema = get_openapi(
        title="Custom title",
        version="2.5.0",
        routes=app.routes,
    )
    openapi_schema["info"]["x-logo"] = {
        "url": "https://fastapi.tiangolo.com/img/logo-circle.png"
    }
    app.openapi_schema = openapi_schema
    return app.openapi_schema
```

----------------------------------------

TITLE: Accessing Invalid Request Body in Validation Handler
DESCRIPTION: Shows how to access the raw request body (`exc.body`) within a custom `RequestValidationError` handler. This can be useful for logging or providing detailed feedback to the client about the invalid input.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_12

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    title: str
    size: int

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content=jsonable_encoder({
            "detail": exc.errors(),
            "body": exc.body
            })
    )

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: lru_cache Example with Arguments (Python)
DESCRIPTION: Provides a simple illustrative function `say_hi` decorated with `@lru_cache`. This demonstrates how `lru_cache` caches results based on the function's arguments, returning a stored result for repeated calls with the same arguments instead of re-executing the function body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_16

LANGUAGE: Python
CODE:
```
@lru_cache
def say_hi(name: str, salutation: str = "Ms."):
    return f"Hello {salutation} {name}"
```

----------------------------------------

TITLE: Defining Main Callback Trigger Path Operation - FastAPI
DESCRIPTION: Defines the main `/invoices/` path operation in a FastAPI application. It accepts an `Invoice` body and an optional `callback_url` query parameter using Pydantic's `Url` type. Crucially, it uses the `callbacks` argument to link the documentation of the expected callback endpoint defined in `invoices_callback_router`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, APIRouter
from pydantic import BaseModel, Url

app = FastAPI()

# Assume other models like Invoice are defined
class Invoice(BaseModel):
    id: str
    title: str | None = None
    customer: str
    total: str

# Assume callback router is defined elsewhere for documenting the external API
invoices_callback_router = APIRouter() # Simplified for this snippet's context

@app.post("/invoices/", callbacks=invoices_callback_router.routes) # hl[35]
def create_invoice(invoice: Invoice, callback_url: Url | None = None): # hl[36:38]
    """ # hl[39]
    Create an invoice and optionally trigger a callback. # hl[40]

    This path operation documents the callback that your API *might* make # hl[42]
    to the external API at the callback_url. # hl[43]
    """ # hl[44]
    # Here goes the code to actually create the invoice,
    # send it to the customer, collect money, etc.
    # and finally, make the *actual* callback request
    # to the external API at callback_url.

    # For example (this part is just an example, not the documented callback):
    # if callback_url:
    #     import httpx
    #     httpx.post(
    #         callback_url / f"invoices/{invoice.id}",
    #         json={"description": "Payment received", "paid": True},
    #     )

    return {"message": "Invoice received"} # hl[53]
```

----------------------------------------

TITLE: Defining Callable Method for Dependency in Python
DESCRIPTION: This snippet shows how to make an instance of a Python class callable by defining the `__call__` method. In FastAPI, this method is used to resolve parameters and sub-dependencies of the instance dependency and provides the value passed to the path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/advanced-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
    def __call__(self, q: str | None = None):
        if not self.fixed_content:
            return False
        if q and self.fixed_content in q:
            return True
        return False
```

----------------------------------------

TITLE: Defining Custom OpenAPI Generator Function in FastAPI
DESCRIPTION: Starts the definition of a `custom_openapi` function and includes the call to `fastapi.openapi.utils.get_openapi`. This call generates the base OpenAPI schema dictionary based on the application's routes and provided metadata (title, version) before any custom modifications are made.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/extending-openapi.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi.openapi.utils import get_openapi

def custom_openapi():
    # Caching check comes before this in the full function
    openapi_schema = get_openapi(
        title="Custom title",
        version="2.5.0",
        routes=app.routes,
    )
    # Modification and caching follow this in the full function
    # The actual return statement will be at the end of the complete function
```

----------------------------------------

TITLE: Importing Starlette HTTPException with Alias (Python)
DESCRIPTION: Imports the base `HTTPException` class from Starlette, aliasing it as `StarletteHTTPException`. This is done because FastAPI's `HTTPException` inherits from Starlette's, and handlers registered for the Starlette class will also catch exceptions raised by FastAPI or other Starlette-based components.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#_snippet_7

LANGUAGE: Python
CODE:
```
from starlette.exceptions import HTTPException as StarletteHTTPException
```

----------------------------------------

TITLE: Creating and Using a Custom Response Class in FastAPI
DESCRIPTION: Explains how to create a custom response class by inheriting from `fastapi.Response` and overriding the `render` method. The `render` method must take `content` (any data) and return `bytes`. This allows for highly customized response handling, such as using specific serialization libraries with custom options, as shown here with `orjson.OPT_INDENT_2` for indented JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_14

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import Response
import orjson

class CustomORJSONResponse(Response):
    media_type = "application/json"

    def render(self, content: any) -> bytes:
        return orjson.dumps(
            content,
            option=orjson.OPT_INDENT_2
        )

app = FastAPI()

@app.get("/items/", response_class=CustomORJSONResponse)
async def read_items():
    return [{"item_id": "Foo", "value": "Bar"}]
```

----------------------------------------

TITLE: Mixing Path and Query Parameters Python
DESCRIPTION: Illustrates how to define both path parameters ('item_id') and query parameters ('q', 'short') in the same route function. FastAPI automatically distinguishes between them based on their declaration location (path segment vs. function parameters).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/users/{user_id}/items/{item_id}")
async def read_user_item(
    user_id: int,
    item_id: str,
    q: Union[str, None] = None,
    short: bool = False,
):
    item = {"item_id": item_id, "owner_id": user_id}
    if q:
        item.update({"q": q})
    if not short:
        item.update(
            {"description": "This is an amazing item that has a long description"}
        )
    return item
```

----------------------------------------

TITLE: Setting a Default Response Class for the FastAPI Application
DESCRIPTION: Shows how to set a default response class for the entire FastAPI application instance using the `default_response_class` parameter during initialization. This is useful when you want most or all routes to use a specific response type (like `ORJSONResponse`) without specifying it in every decorator.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#_snippet_15

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI(default_response_class=ORJSONResponse)

@app.get("/items/")
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Accessing Request Body in Exception Handler Python
DESCRIPTION: Demonstrates how to read the raw request body asynchronously ('await request.body()') within the 'except' block of a handler. This is possible because the Request instance is still available when an exception is caught, allowing for logging or custom error responses based on the request content.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#_snippet_3

LANGUAGE: Python
CODE:
```
        # Access and use the request body in the exception handler
        raw_body = await request.body()
        print(f"Exception occurred with body: {raw_body}")
```

----------------------------------------

TITLE: Creating APIRouter for Callback Documentation - FastAPI
DESCRIPTION: Illustrates how to create a dedicated `APIRouter` instance. This router will contain the path operations that describe the endpoints the *external API* is expected to implement to receive callbacks, serving purely for documentation purposes in the OpenAPI schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter # hl[3]

# ... other imports and app instance ...

invoices_callback_router = APIRouter() # hl[25]

# ... callback path operations defined here ...
```

----------------------------------------

TITLE: Parameterizing Dependency Constructor with __init__ in Python
DESCRIPTION: This snippet demonstrates using the `__init__` method in a Python class to define parameters for instances of the dependency class. These parameters (like `fixed_content`) allow creating parameterized versions of the dependency instance, which FastAPI itself does not interact with directly but are used during instance creation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/advanced-dependencies.md#_snippet_1

LANGUAGE: Python
CODE:
```
class FixedContentQueryChecker:
    def __init__(self, fixed_content: str):
```

----------------------------------------

TITLE: Example Authentication Error Response (JSON)
DESCRIPTION: This JSON snippet provides an example response body for an HTTP 401 Unauthorized error. This specific error is returned by FastAPI's security dependencies (like `get_current_user`) when a user attempts to access a protected resource without valid credentials.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#_snippet_2

LANGUAGE: json
CODE:
```
{ 
  "detail": "Not authenticated"
}
```

----------------------------------------

TITLE: Unpacking and Merging Dictionaries in Python
DESCRIPTION: This Python snippet demonstrates how to use the dictionary unpacking operator (`**`) to merge key-value pairs from an existing dictionary (`old_dict`) into a new dictionary (`new_dict`). This technique is useful for creating new dictionaries based on existing ones, often used in FastAPI to reuse and customize common response definitions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#_snippet_2

LANGUAGE: Python
CODE:
```
old_dict = {
    "old key": "old value",
    "second old key": "second old value",
}
new_dict = {**old_dict, "new key": "new value"}
```

----------------------------------------

TITLE: Install Specific Package Version (Harry v1)
DESCRIPTION: Installs a specific version of the 'harry' package (version 1) into the currently active Python environment using pip.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_17

LANGUAGE: console
CODE:
```
$ pip install "harry==1"
```

----------------------------------------

TITLE: Defining Pydantic Model for Python 3.9+
DESCRIPTION: Defines a Pydantic `BaseModel` subclass `User` with type hints compatible with Python 3.9+, using `Optional` and `List` from the `typing` module to specify field types and default values. Includes imports for necessary types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_22

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "John Doe"
    signup_ts: Optional[datetime] = None
    friends: List[int] = []
```

----------------------------------------

TITLE: Multiple Path and Query Parameters in FastAPI (Python)
DESCRIPTION: This snippet illustrates combining both path parameters and multiple query parameters in a single route function. FastAPI correctly identifies each parameter based on its declaration relative to the path string.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/users/{user_id}/items/{item_id}")
async def read_user_item(
    user_id: int,
    item_id: str,
    q: Union[str, None] = None,
    short: bool = False,
):
    item = {"item_id": item_id, "owner_id": user_id}
    if q:
        item.update({"q": q})
    if not short:
        item.update(
            {"description": "This is an amazing item that has a long description"}
        )
    return item
```

----------------------------------------

TITLE: Traefik Routes Configuration File (routes.toml)
DESCRIPTION: This TOML file defines routing rules for Traefik. It sets up a middleware to strip the `/api/v1` prefix, creates a router that matches paths starting with `/api/v1`, applies the strip prefix middleware, and forwards the requests to a service listening on `http://127.0.0.1:8000`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_4

LANGUAGE: toml
CODE:
```
[http]
  [http.middlewares]

    [http.middlewares."api-stripprefix".stripPrefix]
      prefixes = ["/api/v1"]

  [http.routers]

    [http.routers."app-http"]
      entryPoints = ["http"]
      service = "app"
      rule = "PathPrefix(`/api/v1`)"
      middlewares = ["api-stripprefix"]

  [http.services]

    [http.services.app]
      [http.services.app.loadBalancer]
        [[http.services.app.loadBalancer.servers]]
          url = "http://127.0.0.1:8000"
```

----------------------------------------

TITLE: Generated OpenAPI Components Schemas JSON Example
DESCRIPTION: Presents the `components/schemas` section of the generated OpenAPI specification. This section defines the reusable data structures (Pydantic models like Message, Item, ValidationError, HTTPValidationError) referenced by the responses object, including their types, properties, and required fields.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "components": {
        "schemas": {
            "Message": {
                "title": "Message",
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "title": "Message",
                        "type": "string"
                    }
                }
            },
            "Item": {
                "title": "Item",
                "required": [
                    "id",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string"
                    },
                    "value": {
                        "title": "Value",
                        "type": "string"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Importing Router Submodules Relative Python
DESCRIPTION: Shows a relative import statement using a single dot (`.`) to import multiple submodules (`items`, `users`) from the `routers` subpackage within the same top-level package (`app`). This is common practice for imports within a package. Dependencies: Python packaging structure (`__init__.py` files).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_5

LANGUAGE: Python
CODE:
```
from .routers import items, users
```

----------------------------------------

TITLE: Fixing Type Error by Type Conversion - Python
DESCRIPTION: Corrects the previous example by explicitly converting the integer variable (`age`) to a string (`str(age)`) before concatenation, satisfying the type checker and preventing runtime errors.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_3

LANGUAGE: python
CODE:
```
def get_full_name(name: str, age: int):
    return name + str(age)
```

----------------------------------------

TITLE: Executing Python script from console
DESCRIPTION: Command to execute a Python script directly from the terminal. When run this way, the `__name__` variable inside the script is set to `"__main__"`, triggering the code within the `if __name__ == "__main__":` block.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/debugging.md#_snippet_1

LANGUAGE: console
CODE:
```
$ python myapp.py
```

----------------------------------------

TITLE: Displaying Variable in Jinja2 Template (Jinja2)
DESCRIPTION: An example Jinja2 HTML template (`item.html`) that demonstrates how to access a variable (`id`) passed from the FastAPI route context using the `{{ variable_name }}` syntax to display dynamic data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/templates.md#_snippet_2

LANGUAGE: jinja
CODE:
```
<!DOCTYPE html>
<html>
<head>
    <title>Item {{ id }}</title>
    <link rel="stylesheet" href="{{ url_for('static', path='/static/styles.css') }}"> {# Highlighted line 4 #}
</head>
<body>
    <h1>Item ID: {{ id }}</h1> {# Highlighted line 7 #}
</body>
</html>
```

----------------------------------------

TITLE: Disabling Response Model FastAPI Python
DESCRIPTION: This snippet demonstrates how to disable the `response_model` for a FastAPI path operation by setting `response_model=None`. This allows you to keep complex or non-standard return type annotations for editor support and type checking without FastAPI attempting to validate or document the response based on a Pydantic model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI, Response
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

@app.get("/items/", response_model=None)
async def read_items() -> Union[Response, Item]:
    # This function might return either a Response or an Item
    return {"name": "Foo", "price": 42}
```

----------------------------------------

TITLE: JWT Constants and Model (Python-JOSE)
DESCRIPTION: Defines constants for the JWT secret key, algorithm (HS256), and access token expiration time. Also defines a Pydantic model `TokenData` to represent the data stored within the JWT payload.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: python
CODE:
```
from jose import JWTError, jwt
from datetime import datetime, timedelta
from typing import Optional
from pydantic import BaseModel

# Replace with your actual secret key from openssl
SECRET_KEY = "your-secret-key-here"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Pydantic model for the JWT payload data
class TokenData(BaseModel):
    username: Optional[str] = None
```

----------------------------------------

TITLE: Running pytest Tests Shell
DESCRIPTION: Shows the command-line instruction to execute the tests using the `pytest` runner. This command will discover and run test functions in the current directory or configured test path.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ pytest
```

----------------------------------------

TITLE: Using a Parameterized Callable Instance as FastAPI Dependency
DESCRIPTION: This snippet illustrates how to use the previously created parameterized dependency instance (`checker`) directly with `FastAPI.Depends()`. FastAPI will internally call the `checker` instance's `__call__` method (passing query parameters like `q`), and its return value will be assigned to the `fixed_content_included` parameter in the path operation function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/advanced-dependencies.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(
    fixed_content_included: bool = Depends(checker)
):
```

----------------------------------------

TITLE: Installing Required Dependency for FastAPI Forms (Shell)
DESCRIPTION: Command line instruction to install the `python-multipart` library using pip. This library is a necessary dependency for FastAPI to correctly parse incoming form data from client requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-form-models.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Upgrading pip in Virtual Environment Console
DESCRIPTION: After activating the virtual environment, this command upgrades the `pip` package installer to the latest version using the Python interpreter within the environment. This is recommended to avoid potential installation issues.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_7

LANGUAGE: console
CODE:
```
$ python -m pip install --upgrade pip

---> 100%
```

----------------------------------------

TITLE: Example JSON Output Excluding Unset Fields
DESCRIPTION: This JSON snippet shows the expected response for an item when `response_model_exclude_unset=True` is used and the data source (`items["foo"]` in the corresponding Python code) does not explicitly provide values for fields with defaults (`description`, `tax`, `tags`). Only the explicitly present fields (`name`, `price`) are included in the output.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_13

LANGUAGE: JSON
CODE:
```
{
    "name": "Foo",
    "price": 50.2
}
```

----------------------------------------

TITLE: JSON Output for Missing Required Query Parameter Error
DESCRIPTION: This JSON shows the standard Pydantic/FastAPI error response when a required query parameter is missing from the request.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_9

LANGUAGE: JSON
CODE:
```
{
  "detail": [
    {
      "type": "missing",
      "loc": [
        "query",
        "needy"
      ],
      "msg": "Field required",
      "input": null,
      "url": "https://errors.pydantic.dev/2.1/v/missing"
    }
  ]
}
```

----------------------------------------

TITLE: Overriding Default FastAPI OpenAPI Method
DESCRIPTION: Assigns the custom `custom_openapi` function to the `app.openapi` attribute of the FastAPI application instance. This replaces the default method used by FastAPI to generate and serve the documentation endpoints (`/openapi.json`, `/docs`, `/redoc`), ensuring that the custom logic is used instead.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/extending-openapi.md#_snippet_4

LANGUAGE: Python
CODE:
```
app.openapi = custom_openapi
```

----------------------------------------

TITLE: Generated OpenAPI Responses Object JSON Example
DESCRIPTION: Shows a fragment of the generated OpenAPI 3.1 specification, specifically the `responses` object for a path operation. It illustrates how declared responses (like 404) with associated schemas (referenced) are represented alongside standard responses (200, 422).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "responses": {
        "404": {
            "description": "Additional Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Message"
                    }
                }
            }
        },
        "200": {
            "description": "Successful Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Item"
                    }
                }
            }
        },
        "422": {
            "description": "Validation Error",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Using a Standard Python Context Manager - Python
DESCRIPTION: Provides a basic example of a standard Python context manager using the `with` statement, illustrated with the `open()` function. It shows how resources are managed within a block, ensuring cleanup upon exiting.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_3

LANGUAGE: Python
CODE:
```
with open("file.txt") as file:
    file.read()
```

----------------------------------------

TITLE: Reading File with Context Manager Python
DESCRIPTION: This snippet demonstrates using the standard Python `with` statement with the `open()` function. The `open()` function returns a context manager that ensures the file object (`f`) is automatically closed when the `with` block is exited, regardless of whether the block completes successfully or an exception occurs. The file content is read into the `contents` variable and then printed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
with open("./somefile.txt") as f:
    contents = f.read()
    print(contents)
```

----------------------------------------

TITLE: Timing Attack Illustration - Python
DESCRIPTION: This simple Python code snippet serves as an example to explain the concept of timing attacks. It shows how a standard string comparison (`==`) might return `False` faster if the first few characters don't match, potentially leaking information about the correct prefix to an attacker measuring response times.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#_snippet_1

LANGUAGE: Python
CODE:
```
if "johndoe" == "stanleyjobson" and "love123" == "swordfish":
    ...
```

----------------------------------------

TITLE: Timing Attack Example Insecure String Comparison
DESCRIPTION: Illustrates a conceptual comparison vulnerability to timing attacks. A standard `==` comparison might return `False` quickly if the first characters don't match, allowing an attacker to deduce information character by character based on response time. This is shown as part of an explanation for why `secrets.compare_digest` is needed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/http-basic-auth.md#_snippet_1

LANGUAGE: python
CODE:
```
if "johndoe" == "stanleyjobson" and "love123" == "swordfish":
    ...
```

----------------------------------------

TITLE: Installing Websockets Library - Shell
DESCRIPTION: This command installs the 'websockets' Python library, which is required to add WebSocket functionality to a FastAPI application. It is recommended to run this command within a virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/websockets.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install websockets

---> 100%
```

----------------------------------------

TITLE: OpenAPI Callback Path Expression Syntax - OpenAPI 3
DESCRIPTION: Illustrates the syntax used within an OpenAPI 3 callback path string. It allows referencing parts of the original request sent to your API, such as query parameters (`{$callback_url}`) or fields within the request body (`{$request.body.id}`), to construct the dynamic callback URL that the external API should implement.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#_snippet_4

LANGUAGE: Python
CODE:
```
"{$callback_url}/invoices/{$request.body.id}"
```

----------------------------------------

TITLE: Setting and Echoing Environment Variables (PowerShell Console)
DESCRIPTION: Shows how to set a temporary environment variable named `MY_NAME` using the `$Env:` syntax in Windows PowerShell and then retrieve and print its value using the `echo` command.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_1

LANGUAGE: console
CODE:
```
// Create an env var MY_NAME
$ $Env:MY_NAME = "Wade Wilson"

// Use it with other programs, like
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Mounting WSGI App (Flask) in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to integrate a WSGI application, specifically a minimal Flask app, into a FastAPI application. It uses the `WSGIMiddleware` from `fastapi.middleware.wsgi` to wrap the Flask app instance and then mounts it onto the `/v1/` path within the main FastAPI application instance. This allows the FastAPI application to handle requests on other paths (like `/v2`) while delegating requests under `/v1/` to the Flask application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/wsgi.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.wsgi import WSGIMiddleware
from flask import Flask

# Create a Flask app
flask_app = Flask(__name__)

@flask_app.route("/")
def flask_main():
    return "Hello, World from Flask!"

# Create a FastAPI app
app = FastAPI()

# Mount the Flask app using WSGIMiddleware
app.mount("/v1", WSGIMiddleware(flask_app))

@app.get("/v2")
def read_main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Importing WSGIMiddleware in Python
DESCRIPTION: Imports the `WSGIMiddleware` class from the `fastapi.middleware.wsgi` module. This middleware allows you to mount a traditional WSGI application (like Flask or Django) within your modern ASGI application powered by FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/middleware.md#_snippet_4

LANGUAGE: python
CODE:
```
from fastapi.middleware.wsgi import WSGIMiddleware
```

----------------------------------------

TITLE: Defining Custom TimedRoute for Response Header in Python
DESCRIPTION: This code defines a `TimedRoute` class inheriting from `fastapi.routing.APIRoute`. It wraps the original route handler to measure the execution time of the path operation. After the handler returns a response, it adds an `X-Response-Time` header to the response, indicating how long the processing took.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#_snippet_4

LANGUAGE: Python
CODE:
```
import time
from fastapi.routing import APIRoute
from starlette.responses import Response


class TimedRoute(APIRoute):
    def get_route_handler(self):
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request):
            before = time.time()
            response: Response = await original_route_handler(request)
            duration = time.time() - before
            response.headers["X-Response-Time"] = str(duration)
            return response

        return custom_route_handler
```

----------------------------------------

TITLE: Example OpenAPI Components Schemas JSON
DESCRIPTION: Provides the `components/schemas` section of the generated OpenAPI schema. This section defines reusable JSON schemas for the Pydantic models used in responses (`Message`, `Item`) and validation errors (`ValidationError`, `HTTPValidationError`). These schemas are referenced by `$ref` from the `responses` object and other parts of the OpenAPI document.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "components": {
        "schemas": {
            "Message": {
                "title": "Message",
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "title": "Message",
                        "type": "string"
                    }
                }
            },
            "Item": {
                "title": "Item",
                "required": [
                    "id",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string"
                    },
                    "value": {
                        "title": "Value",
                        "type": "string"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Defining Dictionary Field with Specific Key/Value Types in Pydantic (Python)
DESCRIPTION: Explains how to define a model field (`weights`) as a dictionary (`Dict`) where both the key type (`int`) and value type (`float`) are specified. Pydantic handles conversion of string keys from JSON if they represent integers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import Dict
from fastapi import FastAPI

app = FastAPI()

@app.post("/weights/")
async def create_weights(weights: Dict[int, float]):
    return weights
```

----------------------------------------

TITLE: Calling OAuth2PasswordBearer Dependency (Python)
DESCRIPTION: This is a conceptual example showing that the `oauth2_scheme` object, an instance of `OAuth2PasswordBearer`, is a 'callable'. It is typically used within FastAPI route operations via `Depends()` to inject the security scheme's outcome (like the token string).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
oauth2_scheme(some, parameters)
```

----------------------------------------

TITLE: Insecure Credential Comparison Example - Python
DESCRIPTION: This code snippet illustrates a common, but insecure, way to compare a submitted username and password against expected values. It is used in the text to explain the vulnerability of timing attacks, where comparison might stop early based on character mismatch, potentially revealing information to attackers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#_snippet_0

LANGUAGE: Python
CODE:
```
if not (credentials.username == "stanleyjobson") or not (credentials.password == "swordfish"):
    # Return some error
    ...
```

----------------------------------------

TITLE: Installing python-multipart for File Uploads Console
DESCRIPTION: This command installs the necessary `python-multipart` library, which is required for parsing 'form data' including file uploads in FastAPI. It's recommended to install this inside a virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#_snippet_0

LANGUAGE: Console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Attaching Callback Routes to Main Endpoint - Python
DESCRIPTION: This snippet shows how to add the routes defined in the `invoices_callback_router` to the `callbacks` parameter of the main API endpoint (`/invoices/`) that triggers the callback. This links the callback documentation to the primary operation in the OpenAPI schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/openapi-callbacks.md#_snippet_5

LANGUAGE: Python
CODE:
```
callbacks=invoices_callback_router.routes
```

----------------------------------------

TITLE: Declaring Basic Types - Python
DESCRIPTION: Demonstrates declaring variables with fundamental Python types like `int`, `float`, `bool`, and `bytes` using type annotations. This illustrates the straightforward syntax for basic type hints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_4

LANGUAGE: python
CODE:
```
def process_items(size: int, price: float, is_active: bool, data: bytes): pass
```

----------------------------------------

TITLE: Ordering Parameters (Non-Annotated) - FastAPI Python
DESCRIPTION: This snippet shows a router function where a required query parameter `q` is declared before a path parameter `item_id` defined with `Path`. Without `Annotated`, Python requires parameters without defaults (like `q`) to come before parameters with defaults (like `item_id` when using Path(default=...)).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(q: str, item_id: Path(default=None, title="The ID of the item to get")):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Use Path Converter for Slashes
DESCRIPTION: This string shows the syntax for defining a path parameter that includes slashes as part of its value. Adding `:path` after the parameter name tells FastAPI (via Starlette) to capture the remainder of the path, including slashes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_10

LANGUAGE: other
CODE:
```
/files/{file_path:path}
```

----------------------------------------

TITLE: Defining FastAPI Webhook - Python
DESCRIPTION: This snippet defines a webhook named 'new-subscription' using the `@app.webhooks.post()` decorator in FastAPI. It requires importing FastAPI and Pydantic's BaseModel. It defines the expected structure of the request body using a Pydantic model (`SubscriptionData`). The defined webhook will be included in the application's OpenAPI schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/openapi-webhooks.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class SubscriptionData(BaseModel):
    id: str
    name: str

@app.webhooks.post("new-subscription")
def new_subscription(body: SubscriptionData):
    """
    Receive a notification for a new subscription.
    """
    # Process the webhook data
    print(f"Received new subscription: {body.id} - {body.name}")
    # Webhooks typically don't return HTTP responses,
    # but the function needs to be defined.
    # The actual sending logic is elsewhere.
    pass
```

----------------------------------------

TITLE: Serve Custom Docs UI HTML with Local Static File URLs in FastAPI
DESCRIPTION: This code imports functions to generate docs HTML and defines path operations (`/docs`, `/redoc`, `/swagger-ui-redirect`) that return the documentation pages. It configures the HTML to load JavaScript and CSS files from local paths (`/static/...`) that are served by the previously mounted `StaticFiles` instance, enabling self-hosting of the docs UI assets.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.openapi.docs import (
    get_redoc_html,
    get_swagger_ui_html,
    get_swagger_ui_oauth2_redirect_html,
)

# ... FastAPI app created with docs_url=None, redoc_url=None ...
# ... StaticFiles mounted ...

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title,
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="/static/swagger-ui-bundle.js",
        swagger_css_url="/static/swagger-ui.css",
    )

@app.get("/swagger-ui-redirect")
async def custom_swagger_ui_redirect():
    return get_swagger_ui_oauth2_redirect_html()

@app.get("/redoc", include_in_schema=False)
async def redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=app.title,
        redoc_js_url="/static/redoc.standalone.js",
    )
```

----------------------------------------

TITLE: Making Synchronous Request TestClient Python
DESCRIPTION: Shows the syntax for making a synchronous HTTP request using FastAPI's built-in `TestClient`. This client is typically used in regular synchronous test functions (`def`) and does not support or require `await`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_5

LANGUAGE: Python
CODE:
```
response = client.get('/')
```

----------------------------------------

TITLE: Swagger UI JavaScript Presets Example - JavaScript
DESCRIPTION: Provides an example of JavaScript-only configurations for Swagger UI, specifically showing the 'presets' array which includes JavaScript objects. These cannot be passed directly from Python and require custom JavaScript rendering.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
presets: [
    SwaggerUIBundle.presets.apis,
    SwaggerUIBundle.SwaggerUIStandalonePreset
]
```

----------------------------------------

TITLE: Forbid Extra Cookie Parameters with Pydantic Config (Python)
DESCRIPTION: This Python snippet demonstrates how to configure a Pydantic model to reject any cookie parameters not explicitly defined in the model. By setting `model_config['extra'] = 'forbid'`, the model ensures strict validation, returning an error response if unexpected cookies are included in the request. Requires Pydantic v2 and `ConfigDict`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/cookie-param-models.md#_snippet_1

LANGUAGE: python
CODE:
```
# Code derived from tutorial002_an_py39.py hl[10]
from typing import Optional
from fastapi import FastAPI, Cookie
from pydantic import BaseModel
from pydantic import ConfigDict # Required for model_config

class Client(BaseModel):
    name: str = Cookie(...)
    orders: Optional[int] = Cookie(None)
    model_config = ConfigDict(extra='forbid') # Line 10

app = FastAPI()

@app.get("/clients/")
async def read_client(client: Client):
    return {"client_name": client.name, "client_orders": client.orders}
```

----------------------------------------

TITLE: Declaring Pydantic Model Schema Extra (Python)
DESCRIPTION: This snippet shows how to add extra JSON Schema information, specifically an `example`, to a Pydantic model using the `Config` inner class and the `schema_extra` attribute. This information is directly added to the model's generated JSON schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    class Config:
        schema_extra = {
            "example": {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            }
        }
```

----------------------------------------

TITLE: Setting Environment Variable Inline for Single Command (Console)
DESCRIPTION: Shows how to set an environment variable (`MY_NAME`) directly on the command line before executing the Python script. The variable is only available to that specific command process and not persisted in the shell session.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/settings.md#_snippet_4

LANGUAGE: console
CODE:
```
// Create an env var MY_NAME in line for this program call
$ MY_NAME="Wade Wilson" python main.py

// Now it can read the environment variable

Hello Wade Wilson from Python

// The env var no longer exists afterwards
$ python main.py

Hello World from Python
```

----------------------------------------

TITLE: Deactivating Virtual Environment Console
DESCRIPTION: This command deactivates the currently active virtual environment. It reverts the shell's environment variables (like PATH) to their state before the environment was activated, so subsequent `python` or package commands will use the system's global Python installation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_16

LANGUAGE: console
CODE:
```
$ deactivate
```

----------------------------------------

TITLE: Run FastAPI Server with Environment Variables
DESCRIPTION: This console command demonstrates how to run a FastAPI application (`main.py`) while setting multiple environment variables (`ADMIN_EMAIL`, `APP_NAME`) directly before the execution command. These variables will be picked up by the Pydantic `Settings` class.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_5

LANGUAGE: Console
CODE:
```
$ ADMIN_EMAIL="deadpool@example.com" APP_NAME="ChimichangApp" fastapi run main.py
```

----------------------------------------

TITLE: Install Specific Package Version (Harry v3)
DESCRIPTION: Installs a specific version of the 'harry' package (version 3) into the currently active Python environment using pip. This demonstrates a dependency conflict if attempting to install globally after version 1.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_18

LANGUAGE: console
CODE:
```
$ pip install "harry==3"
```

----------------------------------------

TITLE: Disable Default Docs UI in FastAPI (Self-Hosting)
DESCRIPTION: Similar to the custom CDN setup, this code disables the default Swagger UI and ReDoc documentation endpoints by setting their URLs to `None` during application initialization. This is a prerequisite when you plan to serve these static assets yourself using `StaticFiles` and manually define the documentation endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_4

LANGUAGE: Python
CODE:
```
app = FastAPI(docs_url=None, redoc_url=None)
```

----------------------------------------

TITLE: Embedding Single Body Parameter Python FastAPI
DESCRIPTION: Demonstrates how to explicitly instruct FastAPI to embed a single body parameter under a key matching the parameter name, even if it's the only body parameter. This is achieved using `Body(embed=True)`. By default, a single body parameter is not embedded.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def update_item(item_id: int, item: Item = Body(embed=True)):
```

----------------------------------------

TITLE: Defining and Using Custom Class Type Hints - Python
DESCRIPTION: Illustrates how to define a simple Python class and then use that class as a type hint for a function parameter. This allows editors to provide autocompletion and checks based on the class definition.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_9

LANGUAGE: Python
CODE:
```
class Person:
    def __init__(self, name: str):
        self.name = name

def get_person_name(person: Person):
    return person.name
```

----------------------------------------

TITLE: Installing FastAPI Python Package
DESCRIPTION: Provides the command to install the FastAPI library and its standard dependencies using pip. It requires a Python environment and pip to be installed. The command should be run in a terminal, ideally within a virtual environment.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/index.md#_snippet_0

LANGUAGE: shell
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Declaring Dictionary Types (Python 3.9+) - Python
DESCRIPTION: Illustrates the simplified Python 3.9+ syntax for declaring a dictionary type hint, specifying the types for both keys and values using the standard `dict` type and square brackets.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_9

LANGUAGE: python
CODE:
```
def process_prices(prices: dict[str, float]): pass
```

----------------------------------------

TITLE: Defining Simple Python Class as a Type
DESCRIPTION: Defines a basic Python class `Person` with an `__init__` method that takes a `name` parameter, serving as an example of a custom class that can be used as a type hint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_19

LANGUAGE: Python
CODE:
```
class Person:
    def __init__(self, name: str):
        self.name = name
```

----------------------------------------

TITLE: OpenAPI Spec with Custom Servers (JSON)
DESCRIPTION: This JSON snippet shows the generated OpenAPI specification including the custom `servers` list provided during FastAPI app initialization. Note that the `root_path` value is automatically added as the first server entry.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_8

LANGUAGE: json
CODE:
```
{
    "openapi": "3.0.2",
    "servers": [
        {
            "url": "/api/v1"
        },
        {
            "url": "https://stag.example.com",
            "description": "Staging environment"
        },
        {
            "url": "https://prod.example.com",
            "description": "Production environment"
        }
    ],
    "paths": {}
}
```

----------------------------------------

TITLE: Comparing Credentials Insecurely Python
DESCRIPTION: This snippet shows a standard string comparison (`==`) for username and password. While functionally correct, this approach is vulnerable to timing attacks because the comparison might terminate early if the strings differ at the beginning, revealing information about the correct credentials based on the response time. The recommended secure method is `secrets.compare_digest`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/security/http-basic-auth.md#_snippet_0

LANGUAGE: python
CODE:
```
if not (credentials.username == "stanleyjobson") or not (credentials.password == "swordfish"):
    # Return some error
    ...
```

----------------------------------------

TITLE: Run Client Generation Script
DESCRIPTION: This console command executes the `generate-client` script defined in the `package.json` file. This triggers the `openapi-ts` command to generate the TypeScript client code based on the configuration provided in the script.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#_snippet_2

LANGUAGE: console
CODE:
```
npm run generate-client
```

----------------------------------------

TITLE: Defining Callback Endpoint Documentation - FastAPI
DESCRIPTION: Shows the definition of a path operation within the callback router. This operation defines the expected request body (`InvoiceEvent`) and response model (`InvoiceEventReceived`) using Pydantic for the external API endpoint that receives the callback. The function body is typically `pass` as this code is only for documentation purposes.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#_snippet_3

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel # Assumed import for BaseModel

class InvoiceEvent(BaseModel): # hl[16:18]
    description: str
    paid: bool

class InvoiceEventReceived(BaseModel): # hl[21:22]
    ok: bool

# Assumes invoices_callback_router is defined
@invoices_callback_router.post( # hl[28]
    "{$callback_url}/invoices/{$request.body.id}", # hl[29]
    response_model=InvoiceEventReceived, # hl[30]
) # hl[31]
def receive_invoice_event(body: InvoiceEvent): # hl[32]
    pass
```

----------------------------------------

TITLE: Creating a Parameterized Dependency Instance in Python
DESCRIPTION: This snippet shows how to create an instance of the `FixedContentQueryChecker` class, passing a specific value (`"bar"`) to its `__init__` constructor. This creates a parameterized dependency instance (`checker`) that is configured with `"bar"` as its `fixed_content` attribute.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/advanced-dependencies.md#_snippet_2

LANGUAGE: Python
CODE:
```
checker = FixedContentQueryChecker(fixed_content="bar")
```

----------------------------------------

TITLE: Using Multiple Basic Type Hints in Function - Python
DESCRIPTION: Illustrates type hinting function parameters with various basic Python types like `str`, `int`, `float`, and `bool`. This makes the expected types of inputs explicit, aiding in type checking and preventing runtime errors from incorrect data types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
def process_items(name: str, age: int, price: float, is_active: bool):
    # Example usage (note: direct concatenation of str and int will cause error)
    print(f"Item: {name}, Age: {age}, Price: {price}, Active: {is_active}")
```

----------------------------------------

TITLE: Creating Virtual Environment with uv Console
DESCRIPTION: If the `uv` tool is installed, this command provides an alternative way to create a virtual environment. By default, it creates the environment in a `.venv` directory, but a different name can be specified as an argument.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_2

LANGUAGE: console
CODE:
```
$ uv venv
```

----------------------------------------

TITLE: Visualizing Dependency Reuse - Mermaid
DESCRIPTION: A Mermaid diagram illustrating how a single dependency function (`common_parameters`) can be reused by multiple FastAPI path operations (`read_items`, `/users/`). Arrows indicate that the path operations depend on the common parameters function.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Mermaid
CODE:
```
graph TB

common_parameters(["common_parameters"])
read_items["/items/"]
read_users["/users/"]

common_parameters --> read_items
common_parameters --> read_users
```

----------------------------------------

TITLE: Configuring API License Metadata with Identifier
DESCRIPTION: Set the license information for your FastAPI application using an SPDX license identifier instead of a URL. This option is available since OpenAPI 3.1.0 and FastAPI 0.99.0. The `license_info` parameter is a dictionary passed to the FastAPI instance constructor, containing the required `name` and the `identifier` field.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    # ... other metadata ...
    license_info={
        "name": "Apache 2.0",
        "identifier": "Apache-2.0"
    },
)
```

----------------------------------------

TITLE: Validation Error Response Including Request Body Example
DESCRIPTION: An example JSON response from a custom `RequestValidationError` handler that includes both the validation error details and the original invalid request body for debugging or client feedback.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_13

LANGUAGE: JSON
CODE:
```
{
  "detail": [
    {
      "loc": [
        "body",
        "size"
      ],
      "msg": "value is not a valid integer",
      "type": "type_error.integer"
    }
  ],
  "body": {
    "title": "towel",
    "size": "XL"
  }
}
```

----------------------------------------

TITLE: Example JSON Output from Item Endpoint (JSON)
DESCRIPTION: Displays a sample JSON response structure returned by the '/items/{item_id}' endpoint when accessed with a path parameter (e.g., '5') and an optional query parameter (e.g., 'somequery').
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/index.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{"item_id": 5, "q": "somequery"}

```

----------------------------------------

TITLE: Running Python in Wrong Virtual Environment Console
DESCRIPTION: Navigates to a project directory and attempts to run a Python script (`main.py`) while a different virtual environment (presumably from `philosophers-stone`) is active. This demonstrates the failure case where the required package (`sirius`) is missing in the current environment, resulting in an ImportError.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_26

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

$ python main.py

// Error importing sirius, it's not installed 😱
Traceback (most recent call last):
    File "main.py", line 1, in <module>
        import sirius
```

----------------------------------------

TITLE: Setting Response Description Parameter (FastAPI/Python)
DESCRIPTION: This snippet demonstrates using the `response_description` parameter in the path operation decorator to provide a specific description for the expected response of the endpoint. This description is distinct from the overall path operation description and is shown in the documentation for the response section.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()


@app.post(
    "/items/",
    tags=["items"],
    summary="Create an item",
    response_description="The created item",
)
async def create_item(name: str):
    """
    Create an item with all the information:

    - **name**: each item must have a name
    - **description**: a long description
    - **price**: required
    - **tax**: if the item has tax, you can add it
    """
    return {"name": name}
```

----------------------------------------

TITLE: Executing npm Script to Generate Client
DESCRIPTION: This shell command shows how to run the `generate-client` script defined in the `package.json`. Executing this command triggers `openapi-ts` to fetch the OpenAPI spec from the specified URL and generate the client code in the configured output directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#_snippet_3

LANGUAGE: Shell
CODE:
```
npm run generate-client
```

----------------------------------------

TITLE: Check Active Python Environment (Windows PowerShell)
DESCRIPTION: Uses the 'Get-Command' cmdlet in PowerShell to determine the path of the 'python' executable that will be used. This command confirms if the Python interpreter from a virtual environment is active.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_24

LANGUAGE: console
CODE:
```
$ Get-Command python
```

----------------------------------------

TITLE: Defining Shutdown Event Handler Python
DESCRIPTION: This snippet shows the older way to define shutdown logic using the `@app.on_event("shutdown")` decorator. The decorated function will run once when the application shuts down. If the function involves synchronous I/O (like file operations), it should be `def`, otherwise it can be `async def`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/events.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
import os

app = FastAPI()

@app.on_event("shutdown")
def shutdown_event():
    print("Shutting down...")
    # Simulate cleanup, like writing to a log file
    with open("log.txt", mode="a") as log_file:
        log_file.write("Application shutdown\n")
    print("Shutdown complete.")
```

----------------------------------------

TITLE: Setting and Using Env Var in Bash
DESCRIPTION: Demonstrates how to create an environment variable using `export` and access its value using the `$` prefix in a Bash terminal. Shows a basic example with a greeting message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/environment-variables.md#_snippet_0

LANGUAGE: bash
CODE:
```
export MY_NAME="Wade Wilson"
echo "Hello $MY_NAME"
```

----------------------------------------

TITLE: Running Client Generation Script (npm)
DESCRIPTION: This console command executes the `generate-client` script defined in the project's `package.json`. Running this command invokes the `openapi-ts` tool with the configured parameters, triggering the automatic generation of the TypeScript client library code based on the provided OpenAPI schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_3

LANGUAGE: console
CODE:
```
$ npm run generate-client

frontend-app@1.0.0 generate-client /home/user/code/frontend-app
> openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios
```

----------------------------------------

TITLE: Declaring Tuple and Set Types (Python 3.8+) - Python
DESCRIPTION: Shows the Python 3.8+ syntax for declaring type hints for `tuple` and `set` using `Tuple` and `Set` imported from the `typing` module with internal type parameters in square brackets.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_8

LANGUAGE: python
CODE:
```
from typing import Tuple, Set

def process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]): pass
```

----------------------------------------

TITLE: Installing FastAPI with Standard Extras (Console)
DESCRIPTION: Installs the FastAPI library along with its default standard dependencies (like Uvicorn and Starlette) using the pip package manager. It is recommended to do this within a virtual environment for project isolation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Defining Dependency Function Returning Dict (Python, FastAPI)
DESCRIPTION: This snippet shows a traditional FastAPI dependency defined as a function that accepts parameters and returns a dictionary. This approach provides dependency injection but lacks strong type hints for the returned data, limiting editor support.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

def common_parameters(q: Union[str, None] = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Declaring Untyped List Parameter in FastAPI/Pydantic (Python)
DESCRIPTION: Declares a request body parameter named 'tags' as a standard Python `list`. This allows flexible input but provides no validation or documentation for the types of items within the list.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
tags: list
```

----------------------------------------

TITLE: Importing List from typing (Python)
DESCRIPTION: Shows the standard Python way to import the `List` type hint from the `typing` module, which is necessary for declaring lists with specific item types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List
```

----------------------------------------

TITLE: Example FastAPI GET Response - JSON
DESCRIPTION: Shows the expected JSON response from the `/items/{item_id}` endpoint when accessed with a path parameter and an optional query parameter, e.g., `/items/5?q=somequery`. The response includes the item ID and the query parameter value.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_4

LANGUAGE: json
CODE:
```
{"item_id": 5, "q": "somequery"}
```

----------------------------------------

TITLE: Checking Virtual Environment with which Python Console
DESCRIPTION: Used in Linux, macOS, and Windows Bash, this command checks which `python` executable is being used. If the virtual environment is active, it should output the path to the `python` binary inside the project's `.venv` directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_5

LANGUAGE: console
CODE:
```
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Changing the OpenAPI Schema URL - Python
DESCRIPTION: This snippet illustrates how to change the default URL (`/openapi.json`) where the OpenAPI schema is served. By setting the `openapi_url` parameter when creating the FastAPI application instance, you can customize the endpoint for the schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(openapi_url="/api/v1/openapi.json")

@app.get("/items/")
async def read_items():
    return [{"name": "Foo"}]
```

----------------------------------------

TITLE: Implementing Custom APIRoute with GzipRequest in Python
DESCRIPTION: This code defines a `GzipRoute` class, inheriting from `fastapi.routing.APIRoute`. It overrides `get_route_handler()` to wrap the original handler, ensuring that the incoming `Request` object is replaced with an instance of the custom `GzipRequest` class. This allows the route handler to benefit from the custom request body handling logic.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi.routing import APIRoute


class GzipRoute(APIRoute):
    def get_route_handler(self):
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request):
            request = GzipRequest(request.scope, request.receive)
            return await original_route_handler(request)

        return custom_route_handler
```

----------------------------------------

TITLE: Setting OpenAPI operationId on Path Operation - Python/FastAPI
DESCRIPTION: Demonstrates how to explicitly set the `operation_id` parameter for a specific FastAPI path operation. This value must be unique across all operations to avoid conflicts in the generated OpenAPI schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/", operation_id="some_cool_id")
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Disabling Header Underscore Conversion Python
DESCRIPTION: Configures a header parameter `user_agent` to explicitly disable FastAPI's default automatic conversion of underscores in the parameter name (`user_agent`) to hyphens (`user-agent`) in the expected header name, by setting `convert_underscores=False`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
user_agent: str | None = Header(default=None, convert_underscores=False)
```

----------------------------------------

TITLE: Defining Callable Dependency `__init__` Method (Python)
DESCRIPTION: Defines the `__init__` method for a class intended for use as a FastAPI dependency. This method is used to initialize the class instance with specific parameters (like `fixed_content`) when you create the dependency instance manually, before passing it to `Depends()`. FastAPI does not call this method automatically.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/advanced-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
class FixedContentQueryChecker:
    def __init__(self, fixed_content: str):
        self.fixed_content = fixed_content
    # ... __call__ method follows ...
```

----------------------------------------

TITLE: Type Hinting Dictionary Keys and Values
DESCRIPTION: Shows how to type hint a `dict` by specifying the expected type for its keys and values using `Dict` from `typing` or the built-in `dict`. The key type is specified first, followed by the value type in square brackets.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Dict

def process_items(prices: Dict[str, float]):
    for key, value in prices.items():
        print(f"{key}: {value}")
```

LANGUAGE: Python
CODE:
```
def process_items(prices: dict[str, float]):
    for key, value in prices.items():
        print(f"{key}: {value}")
```

----------------------------------------

TITLE: Importing WebSocket Classes from fastapi.websockets - Python
DESCRIPTION: Imports the `WebSocketDisconnect` exception and the `WebSocketState` enum from the `fastapi.websockets` submodule. This provides an alternative, more specific import path for these related WebSocket components compared to importing directly from the top-level `fastapi` package.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/websockets.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi.websockets import WebSocketDisconnect, WebSocketState
```

----------------------------------------

TITLE: Type Hinting List with Item Type in Python (Prior to 3.9)
DESCRIPTION: Shows how to type-hint a variable as a list of strings in Python versions older than 3.9. It requires importing `List` from the `typing` module and using the `List[str]` syntax.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import List

my_list: List[str]
```

----------------------------------------

TITLE: Installing Python Dependencies pip
DESCRIPTION: Demonstrates how to install the Python package dependencies listed in the `requirements.txt` file using the pip package manager via a console command.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_2

LANGUAGE: console
CODE:
```
$ pip install -r requirements.txt
---> 100%
Successfully installed fastapi pydantic
```

----------------------------------------

TITLE: Installing SQLModel
DESCRIPTION: This command installs the `sqlmodel` library using pip, which is necessary to work with SQL databases as described in the tutorial.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install sqlmodel
---> 100%
```

----------------------------------------

TITLE: Executing Python Script Using External Bash Env Var
DESCRIPTION: Demonstrates running the Python script in a Bash terminal first without the environment variable set (showing the default output), then setting the variable using `export`, and running the script again to show it successfully reads the external variable.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/environment-variables.md#_snippet_3

LANGUAGE: bash
CODE:
```
python main.py

Hello World from Python

export MY_NAME="Wade Wilson"

python main.py

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Installing FastAPI Package - Console
DESCRIPTION: Command to install the FastAPI library using pip, the standard Python package installer. This is the first step required to use the framework.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/he/docs/index.md#_snippet_0

LANGUAGE: Console
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: HTTPException 404 Error Response Example
DESCRIPTION: An example of the JSON error response returned by FastAPI when an HTTPException with status code 404 is raised. The 'detail' field contains the message provided when raising the exception.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "detail": "Item not found"
}
```

----------------------------------------

TITLE: Creating Custom GzipRoute Class in Python
DESCRIPTION: Creates a custom APIRoute subclass that overrides the 'get_route_handler()' method. The overridden method returns a function that intercepts the incoming request, converts it into an instance of the custom GzipRequest class, and then passes the GzipRequest instance to the original path operation handler.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi.routing import APIRoute


class GzipRoute(APIRoute):
    def get_route_handler(self):
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request):
            request = GzipRequest(request.scope, request.receive)
            return await original_route_handler(request)

        return custom_route_handler
```

----------------------------------------

TITLE: Example OpenAPI Responses JSON
DESCRIPTION: Illustrates the structure of the `responses` object in the generated OpenAPI schema for a path operation. It shows entries for the default 200 (Success), the explicitly defined 404 (Additional Response), and the automatic 422 (Validation Error), referencing shared schemas defined in `components/schemas`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "responses": {
        "404": {
            "description": "Additional Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Message"
                    }
                }
            }
        },
        "200": {
            "description": "Successful Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Item"
                    }
                }
            }
        },
        "422": {
            "description": "Validation Error",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Example API Response JSON (JSON)
DESCRIPTION: This JSON object represents the expected successful response format when accessing the `/items/{item_id}` endpoint with a path parameter and an optional query parameter. It shows the structure of the data returned by the API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/index.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{"item_id": 5, "q": "somequery"}
```

----------------------------------------

TITLE: Example JSON Request Body (JSON)
DESCRIPTION: A sample JSON payload that fully conforms to the defined `Item` Pydantic model, including both required fields (`name`, `price`) and optional fields (`description`, `tax`). This is an example of data a client might send in a POST or PUT request.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "Foo",
    "description": "An optional description",
    "price": 45.2,
    "tax": 3.5
}
```

----------------------------------------

TITLE: Defining a Synchronous Function (Python)
DESCRIPTION: Functions defined with the standard `def` keyword are synchronous. They execute line by line and block the program's execution until they are complete. They cannot use the `await` keyword and are suitable for CPU-bound operations or simple tasks.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_5

LANGUAGE: Python
CODE:
```
# This is not asynchronous
def get_sequential_burgers(number: int):
    # Do some sequential stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Install PyJWT Library (Console)
DESCRIPTION: Installs the `pyjwt` Python package using pip. This package is required for generating and verifying JSON Web Tokens (JWT) used for authentication.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install pyjwt

---> 100%
```

----------------------------------------

TITLE: JSON Response Returning Enum Values Example
DESCRIPTION: This JSON snippet shows the expected response when a path operation returns a dictionary containing Enum members. The Enum members are automatically converted to their string values in the final JSON.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_12

LANGUAGE: JSON
CODE:
```
{
  "model_name": "alexnet",
  "message": "Deep Learning FTW!"
}
```

----------------------------------------

TITLE: Generated OpenAPI Servers Array (JSON)
DESCRIPTION: Shows the `servers` array section of the OpenAPI 3.1.0 schema generated by FastAPI based on the previous configuration. It illustrates how FastAPI automatically adds the configured `root_path` (`/api/v1`) as the initial server URL entry when custom `servers` are provided, followed by the user-defined server entries.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    // More stuff here
    "servers": [
        {
            "url": "/api/v1"
        },
        {
            "url": "https://stag.example.com",
            "description": "Staging environment"
        },
        {
            "url": "https://prod.example.com",
            "description": "Production environment"
        }
    ],
    "paths": {
            // More stuff here
    }
}
```

----------------------------------------

TITLE: Executing Python Script with Inline Bash Env Var
DESCRIPTION: Shows how to set an environment variable specifically for a single program invocation in Bash by prefixing the command with the variable assignment. Subsequent calls without the inline assignment revert to the default, proving the variable's scope was limited.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/environment-variables.md#_snippet_5

LANGUAGE: bash
CODE:
```
MY_NAME="Wade Wilson" python main.py

Hello Wade Wilson from Python

python main.py

Hello World from Python
```

----------------------------------------

TITLE: Use Input Model as Return Type Annotation - Python
DESCRIPTION: Shows a path operation where the function's return type annotation is set to the input model (`UserIn`). If this model contains sensitive fields, returning the raw result could expose them unless filtered by `response_model` or an appropriate return type annotation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

app = FastAPI()

@app.post("/user/")
async def create_user(user: UserIn) -> UserIn:
    return user
```

----------------------------------------

TITLE: FastAPI Default Response JSON
DESCRIPTION: This snippet shows the expected JSON response returned by the basic FastAPI application when accessing the root URL (`/`) with a GET request. It's a simple JSON object containing a single key-value pair with the key 'message' and value 'Hello World'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: json
CODE:
```
{"message": "Hello World"}
```

----------------------------------------

TITLE: Example Partial JSON Body (JSON)
DESCRIPTION: Another sample JSON payload for the `Item` model, demonstrating that optional fields (`description`, `tax`) can be omitted from the request body when they have a default value like `None` defined in the Pydantic model.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "name": "Foo",
    "price": 45.2
}
```

----------------------------------------

TITLE: Declaring Invalid Union Return Type FastAPI Python
DESCRIPTION: This Python snippet shows a function with a return type annotation that is a union including a non-Pydantic type (`dict`). FastAPI's `response_model` validation fails in this case because it cannot automatically generate a Pydantic model for arbitrary types like `dict` within a union like this.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/items/")
async def read_items() -> Union[Response, dict]:
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Sample Dictionary Data Matching Defaults Python
DESCRIPTION: A Python dictionary representing sample data for an item. This data explicitly includes values for fields that have defaults in the Pydantic model (`description`, `tax`, `tags`), and the values happen to match the default values defined in the model. FastAPI/Pydantic correctly interprets these as explicitly set values, ensuring they are included in the serialized response even with options like `exclude_unset`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#_snippet_15

LANGUAGE: Python
CODE:
```
{
    "name": "Baz",
    "description": None,
    "price": 50.2,
    "tax": 10.5,
    "tags": []
}
```

----------------------------------------

TITLE: Defining Custom Request Body Schema with openapi_extra - Python/FastAPI
DESCRIPTION: Illustrates how to manually define the request body schema in the OpenAPI documentation using `openapi_extra`, even if FastAPI's automatic parsing and validation are not used. The example shows reading the body as bytes and defining a schema for it.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Any

from fastapi import FastAPI, Request

app = FastAPI()

def magic_data_reader(data: bytes):
    # In a real app, this would parse the bytes and validate the data
    # For example, parsing a custom binary format
    # or reading a file upload
    # and validating it against a schema
    print("Reading magic data")
    return {"status": "ok"}


@app.post("/items/", openapi_extra={
    "requestBody": {
        "content": {
            "application/json": {
                "schema": {
                    "$ref": "#/components/schemas/Item"
                }
            }
        },
        "required": True,
    },
    "x-another-field": "test",
})
async def create_item(request: Request) -> Any:
    data = await request.body()
    magic_data_reader(data)
    return {"status": "ok"}
```

----------------------------------------

TITLE: Awaiting an Asynchronous Call in Python
DESCRIPTION: This snippet shows the basic syntax `await function_call()` used to pause the current asynchronous function until the awaited function completes. This is necessary when calling functions defined with `async def` or returning awaitable objects, typically for I/O-bound operations like network requests or database queries.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
results = await some_library()
```

----------------------------------------

TITLE: FastAPI Generated OpenAPI JSON
DESCRIPTION: This is a snippet of the automatically generated OpenAPI specification provided by FastAPI at the `/openapi.json` endpoint. This JSON document describes the entire API, including available paths, HTTP methods, parameters, responses, and data schemas. It is used by documentation tools like Swagger UI and ReDoc.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: json
CODE:
```
{
    "openapi": "3.0.2",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {



...

```

----------------------------------------

TITLE: Defining a FastAPI Shutdown Event Handler (Deprecated) - Python
DESCRIPTION: Shows the deprecated method of using the `@app.on_event("shutdown")` decorator to define a function that runs once when the application is shutting down. This was used for cleanup tasks before the lifespan parameter was introduced.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.on_event("shutdown")
```

----------------------------------------

TITLE: Activate Virtual Environment (Windows Bash)
DESCRIPTION: Activates a Python virtual environment located in a '.venv' directory for users running Bash on Windows (like Git Bash). This command modifies the shell's environment variables.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_22

LANGUAGE: console
CODE:
```
$ source .venv/Scripts/activate
```

----------------------------------------

TITLE: Simple Function Without Type Hints - Python
DESCRIPTION: Illustrates a basic Python function that takes two string arguments and concatenates them without using type hints. This example serves as a baseline to show the benefits gained by adding type annotations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_0

LANGUAGE: python
CODE:
```
def get_full_name(first_name, last_name):
    return first_name.title() + " " + last_name.title()
```

----------------------------------------

TITLE: Defining Function Without Type Hints - Python
DESCRIPTION: Shows a basic Python function definition without any type hints for its parameters or return value. This example is used to demonstrate the lack of editor support and difficulty in inferring parameter types.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Visualizing Dependency Chains - Mermaid
DESCRIPTION: A Mermaid diagram depicting a complex dependency graph. It shows different authentication/authorization dependencies (`current_user`, `active_user`, `admin_user`, `paying_user`) forming a chain, and how various path operations (`/items/public/`, `/items/private/`, etc.) depend on specific points in this chain.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_4

LANGUAGE: Mermaid
CODE:
```
graph TB

current_user(["current_user"])
active_user(["active_user"])
admin_user(["admin_user"])
paying_user(["paying_user"])

public["/items/public/"]
private["/items/private/"]
activate_user["/users/{user_id}/activate"]
pro_items["/items/pro/"]

current_user --> active_user
active_user --> admin_user
active_user --> paying_user

current_user --> public
active_user --> private
admin_user --> activate_user
paying_user --> pro_items
```

----------------------------------------

TITLE: Configuring MkDocs Inheritance (YAML)
DESCRIPTION: This YAML snippet shows a minimal configuration for a language-specific `mkdocs.yml` file. The `INHERIT` directive tells MkDocs to load and override settings from the specified parent configuration file, in this case, the English version (`../en/mkdocs.yml`), simplifying the setup for new translations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_12

LANGUAGE: yaml
CODE:
```
INHERIT: ../en/mkdocs.yml
```

----------------------------------------

TITLE: Custom Exception Handler Response Example
DESCRIPTION: An example of the JSON response generated by the custom `unicorn_exception_handler` when a `UnicornException` is raised. It returns a 418 status code and a custom message.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
"message": "Oops! yolo did something. There goes a rainbow..."
}
```

----------------------------------------

TITLE: Installing Hypercorn (Console)
DESCRIPTION: Installs the Hypercorn ASGI server using the pip package manager. Hypercorn supports HTTP/2 and is compatible with different worker families.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install hypercorn
```

----------------------------------------

TITLE: Installing openapi-ts CLI with npm
DESCRIPTION: This shell command demonstrates how to install the `@hey-api/openapi-ts` package using npm, adding it as a development dependency to your frontend project. This tool is used to generate TypeScript client code from an OpenAPI specification.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#_snippet_1

LANGUAGE: Shell
CODE:
```
npm install @hey-api/openapi-ts --save-dev
```

----------------------------------------

TITLE: Check Active Python Environment (Linux/macOS/Bash)
DESCRIPTION: Uses the 'which' command to determine the path of the 'python' executable that will be used when the 'python' command is invoked. This is a common way to check if a virtual environment is active.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_23

LANGUAGE: console
CODE:
```
$ which python
```

----------------------------------------

TITLE: Example Error Response for Forbidden Extra Cookie (JSON)
DESCRIPTION: This JSON snippet shows the standard validation error format returned by FastAPI when a request includes a cookie parameter that is not defined in the Pydantic model, and the model is configured to forbid extra fields (e.g., using `model_config['extra'] = 'forbid'`). It specifies the error type, location, message, and the value of the forbidden input.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/cookie-param-models.md#_snippet_2

LANGUAGE: json
CODE:
```
{
    "detail": [
        {
            "type": "extra_forbidden",
            "loc": ["cookie", "santa_tracker"],
            "msg": "Extra inputs are not permitted",
            "input": "good-list-please"
        }
    ]
}
```

----------------------------------------

TITLE: Importing Form Class in FastAPI Python
DESCRIPTION: Imports the `Form` class from the `fastapi` library. This class is essential for declaring function parameters that should retrieve data from the request body as form-urlencoded key-value pairs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/request-forms.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Form
```

----------------------------------------

TITLE: Overriding Default Swagger UI Parameters - Python
DESCRIPTION: Illustrates how to override a default Swagger UI parameter, such as 'deepLinking', by providing a dictionary with the parameter name and the new value to the `swagger_ui_parameters` argument when creating the FastAPI app.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#_snippet_3

LANGUAGE: Python
CODE:
```
swagger_ui_parameters={
    "deepLinking": False
}
```

----------------------------------------

TITLE: Declaring List of Strings (Python 3.8+) - Python
DESCRIPTION: Shows the standard syntax for Python 3.8 and earlier for declaring a list where all elements are of a specific type using `List` imported from the `typing` module and square brackets.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_6

LANGUAGE: python
CODE:
```
from typing import List

def process_items(items: List[str]): pass
```

----------------------------------------

TITLE: Run FastAPI Tests and Generate Coverage Report (HTML) using Bash Script
DESCRIPTION: Executes a bash script to run all project tests and generate an HTML test coverage report. The report is saved in the `./htmlcov/` directory, allowing interactive exploration of code coverage.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_2

LANGUAGE: console
CODE:
```
$ bash scripts/test-cov-html.sh
```

----------------------------------------

TITLE: Importing Header in FastAPI Python
DESCRIPTION: This snippet shows the necessary import statement to use the `Header` class from the `fastapi` library, which is required for defining header parameters in your API path operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Header
```

----------------------------------------

TITLE: Installing Python-JOSE for JWT
DESCRIPTION: Installs the `python-jose` library with the `cryptography` dependency, which is required for generating and verifying JSON Web Tokens (JWTs) in Python.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "python-jose[cryptography]"

```

----------------------------------------

TITLE: Running FastAPI App with fastapi run Command (Console)
DESCRIPTION: Describes using the convenient `fastapi run` command to start the application. It automatically finds and runs the app, typically using Uvicorn as the underlying server, displaying startup logs including the address and documentation link.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/manually.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi run main.py

  <span style="background-color:#009485"><font color="#D3D7CF"> FastAPI </font></span>  Starting production server 🚀

             Searching for package file structure from directories
             with <font color="#3465A4">__init__.py</font> files
             Importing from <font color="#75507B">/home/user/code/</font><font color="#AD7FA8">awesomeapp</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> module </font></span>  🐍 main.py

     <span style="background-color:#007166"><font color="#D3D7CF"> code </font></span>  Importing the FastAPI app object from the module with
             the following code:

             <u style="text-decoration-style:solid">from </u><u style="text-decoration-style:solid"><b>main</b></u><u style="text-decoration-style:solid"> import </u><u style="text-decoration-style:solid"><b>app</b></u>

      <span style="background-color:#007166"><font color="#D3D7CF"> app </font></span>  Using import string: <font color="#3465A4">main:app</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Server started at <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000</u></font>
   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Documentation at <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000/docs</u></font>

             Logs:

     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started server process <b>[</b><font color="#34E2E2"><b>2306215</b></font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Waiting for application startup.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Application startup complete.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Uvicorn running on <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000</u></font> <b>(</b>Press CTRL+C
             to quit<b>)</b>
```

----------------------------------------

TITLE: Preprocessing OpenAPI JSON (Node.js Script)
DESCRIPTION: This Node.js script provides an alternative implementation to preprocess an OpenAPI specification JSON file. Similar to the Python version, it loads the JSON, iterates through paths and operations, and modifies `operationId` values to remove tag prefixes for cleaner generated client method names.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
const fs = require('fs');
const path = require('path');

const openapiFilePath = path.join(__dirname, 'openapi.json');

fs.readFile(openapiFilePath, 'utf8', (err, data) => {
    if (err) {
        console.error('Error reading openapi.json:', err);
        return;
    }

    try {
        const openapi = JSON.parse(data);

        for (const path in openapi.paths) {
            for (const method in openapi.paths[path]) {
                const methodData = openapi.paths[path][method];
                if (methodData.operationId) {
                    const operationId = methodData.operationId;
                    // Assumes operationId format like 'tag-operation_name'
                    const match = operationId.match(/^([^\-]+)-/);
                    if (match) {
                        const tag = match[1];
                        // Check if the operation actually has this tag
                        if (methodData.tags && methodData.tags.includes(tag)) {
                            // Remove the tag prefix
                            const newOperationId = operationId.replace(`${tag}-`, '');
                            methodData.operationId = newOperationId;
                        }
                    }
                }
            }
        }

        fs.writeFile(openapiFilePath, JSON.stringify(openapi, null, 2), 'utf8', (err) => {
            if (err) {
                console.error('Error writing modified openapi.json:', err);
                return;
            }
            console.log('openapi.json processed successfully.');
        });

    } catch (parseErr) {
        console.error('Error parsing openapi.json:', parseErr);
    }
});
```

----------------------------------------

TITLE: Importing FastAPI WebSocket Class - Python
DESCRIPTION: Imports the core `WebSocket` class directly from the `fastapi` package. This class is the primary tool for defining and interacting with individual WebSocket connections in FastAPI endpoints, allowing sending and receiving messages.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/reference/websockets.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import WebSocket
```

----------------------------------------

TITLE: Create Test Path Operation in FastAPI (Custom CDN Example)
DESCRIPTION: This defines a simple `/items/{item_id}` GET endpoint. Its purpose in this context is to provide a functional API endpoint that can be tested and visualized within the customized Swagger UI or ReDoc documentation, verifying that the custom docs setup functions correctly and interacts with the API schema.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Function with Mixed Types (Intended Error) - Python
DESCRIPTION: Shows a function with mixed type hints (`str` and `int`) that attempts to concatenate them directly, demonstrating how type hints help editors detect potential runtime errors before execution.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_2

LANGUAGE: python
CODE:
```
def get_full_name(name: str, age: int):
    return name + age
```

----------------------------------------

TITLE: Incorrectly Calling Async Function Synchronously (Python)
DESCRIPTION: This demonstrates an incorrect attempt to call a function defined with `async def` using a standard synchronous call without `await`. Async functions must be awaited from within another async context.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/async.md#_snippet_6

LANGUAGE: Python
CODE:
```
# This won't work, because get_burgers was defined with: async def
burgers = get_burgers(2)
```

----------------------------------------

TITLE: Preprocess OpenAPI JSON Script (JavaScript)
DESCRIPTION: This JavaScript (Node.js) script demonstrates how to load an OpenAPI JSON file, iterate through its path operations, and modify the `operationId` for each operation by removing the first part (assuming it's a tag prefix) to create cleaner method names in the generated client code. The modified schema is then saved to a new file (`openapi.json`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#_snippet_3

LANGUAGE: Javascript
CODE:
```
const fs = require('fs');

const openapi = JSON.parse(fs.readFileSync('openapi.json', 'utf8'));

for (const path in openapi.paths) {
    for (const method in openapi.paths[path]) {
        const operation = openapi.paths[path][method];
        if (operation.operationId) {
            const parts = operation.operationId.split('-');
            if (parts.length > 1) {
                // Remove the first part (e.g., tag)
                operation.operationId = parts.slice(1).join('-');
            }
        }
    }
}

fs.writeFileSync('openapi.json', JSON.stringify(openapi, null, 2));
```

----------------------------------------

TITLE: Starting FastAPI Development Server - Console
DESCRIPTION: This command initiates the FastAPI development server using the `fastapi-cli`. It takes the path to the main application file as an argument and runs the application with auto-reload enabled, suitable for local development.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/fastapi-cli.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Implementing OpenAPI Schema Caching in FastAPI
DESCRIPTION: Adds caching logic to the `custom_openapi` function. It first checks if the schema is already stored in `app.openapi_schema`. If present, it returns the cached version immediately. After generating and modifying the schema, it assigns it to `app.openapi_schema` to be cached for subsequent requests before returning it.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/extending-openapi.md#_snippet_3

LANGUAGE: Python
CODE:
```
# Inside custom_openapi()
# Check cache
if app.openapi_schema:
    return app.openapi_schema

# ... generation and modification happen here ...

# Cache and return
app.openapi_schema = openapi_schema # Assume openapi_schema has been generated and modified
return app.openapi_schema
```

----------------------------------------

TITLE: Validating Query Max Length with Query Default (Python)
DESCRIPTION: Illustrates an older method (pre-FastAPI 0.95.0) of adding validation to an optional string query parameter `q` by using `Query(default=None, max_length=50)` as the parameter's default value. This ensures the parameter respects the maximum length constraint if provided.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, max_length=50)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Run FastAPI Development Server with Uvicorn (Example App)
DESCRIPTION: Starts a development server using `fastapi dev` (which uses Uvicorn internally) for a specific example application file (e.g., `tutorial001.py`). By default, it runs on port `8000`, avoiding conflicts with the documentation server on `8008`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_7

LANGUAGE: console
CODE:
```
$ fastapi dev tutorial001.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: OLD: Add Query Parameter Validation using Query Default in FastAPI
DESCRIPTION: This snippet shows the older approach (pre-FastAPI 0.95.0) for adding validation (`max_length`) to a query parameter by using `Query` as the parameter's default value. The `default` parameter of `Query` is used to set the actual default value for the function parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: str | None = Query(default=None, max_length=50)): # Use Union for Python < 3.10
    if q:
        return {"q": q}
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Example URL with Required Query Parameter
DESCRIPTION: This URL shows the correct way to call the endpoint by including the required `needy` query parameter.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_10

LANGUAGE: URL
CODE:
```
http://127.0.0.1:8000/items/foo-item?needy=sooooneedy
```

----------------------------------------

TITLE: Initializing APIRouter for Callbacks Documentation - Python
DESCRIPTION: Initializes a new `APIRouter` instance specifically intended to hold and document the callback endpoints. This router's routes will later be attached to the main API endpoint's definition.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/openapi-callbacks.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

invoices_callback_router = APIRouter()
```

----------------------------------------

TITLE: Initializing New Language Docs (Console)
DESCRIPTION: This console command executes the `docs.py` script located in the `scripts/` directory with the `new-lang` argument, followed by the language code (e.g., `ht` for Creole). It initializes the directory structure for the new language translation within the `docs/` folder, creating essential starting files like `mkdocs.yml` and `index.md`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_11

LANGUAGE: console
CODE:
```
python ./scripts/docs.py new-lang ht
```

----------------------------------------

TITLE: Navigate to English Documentation Directory (cd)
DESCRIPTION: Changes the current directory in the terminal to the location of the main English documentation files.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_4

LANGUAGE: console
CODE:
```
$ cd docs/en/
```

----------------------------------------

TITLE: Basic Path Parameter JSON Output
DESCRIPTION: This JSON snippet shows the expected response when accessing the `/items/foo` endpoint defined with a basic string path parameter `item_id`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "item_id": "foo"
}
```

----------------------------------------

TITLE: Generating a Random Secret Key
DESCRIPTION: Uses the `openssl` command-line tool to generate a random 32-byte hexadecimal string. This string is intended to be used as a strong secret key for signing JWTs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: console
CODE:
```
$ openssl rand -hex 32

```

----------------------------------------

TITLE: Defining Callback URL with OpenAPI Key Expression - OpenAPI Expression
DESCRIPTION: This snippet shows the OpenAPI 3.0 Key Expression syntax used to dynamically construct the callback URL. It references the `callback_url` parameter from the original request and the `id` property from its request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/openapi-callbacks.md#_snippet_4

LANGUAGE: OpenAPI Expression
CODE:
```
"{$callback_url}/invoices/{$request.body.id}"
```

----------------------------------------

TITLE: Installing WebSockets Library Console
DESCRIPTION: This console command installs the `websockets` library, which is required to use WebSockets with FastAPI. It is a necessary prerequisite before implementing WebSocket endpoints to handle WebSocket connections.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/websockets.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install websockets

---> 100%
```

----------------------------------------

TITLE: Using Depends(Class) Without Explicit Type Hint (Python, FastAPI)
DESCRIPTION: This snippet shows a FastAPI path operation function that injects a class-based dependency using `Depends(Class)` without providing an explicit type hint for the parameter variable. FastAPI still creates the dependency instance, but editors may not provide type-specific assistance.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from typing import Any, Union

app = FastAPI()

class CommonQueryParams:
    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit

@app.get("/items/")
async def read_items(commons = Depends(CommonQueryParams)):
    return {"q": commons.q, "skip": commons.skip, "limit": commons.limit}
```

----------------------------------------

TITLE: Example of Python Callable Object
DESCRIPTION: Illustrates the concept of a 'callable' in Python using a simple class definition with an `__init__` method and subsequent object instantiation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Cat:
    def __init__(self, name: str):
        self.name = name

fluffy = Cat(name="Mr Fluffy")
```

----------------------------------------

TITLE: Traefik Main Configuration File (traefik.toml)
DESCRIPTION: This TOML file configures the Traefik reverse proxy. It defines an HTTP entry point on port 9999 and specifies that route configurations should be loaded from a separate file (`routes.toml`).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_3

LANGUAGE: toml
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Example OpenAPI Schema Output (JSON)
DESCRIPTION: This JSON snippet shows the beginning of the OpenAPI schema automatically generated by FastAPI based on the defined path operations. This schema describes the API structure, endpoints, and data formats, and is used by tools like Swagger UI and ReDoc to generate interactive documentation. The full schema provides detailed information about all defined paths, operations, parameters, and responses.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {



...

```

----------------------------------------

TITLE: Checking Virtual Environment with Get-Command Python Console
DESCRIPTION: Used in Windows PowerShell, this command checks which `python` executable is being used. If the virtual environment is active, it should output the path to the `python` binary inside the project's `.venv\Scripts` directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_6

LANGUAGE: console
CODE:
```
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Creating Custom GzipRequest Class in Python
DESCRIPTION: Defines a custom Request subclass that overrides the 'body()' method to decompress the request body using gzip if the 'Content-Encoding' header indicates 'gzip'. It falls back to the default behavior if the header is not present, allowing the same route to handle both compressed and uncompressed requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#_snippet_0

LANGUAGE: Python
CODE:
```
import gzip
from fastapi import Request


class GzipRequest(Request):
    async def body(self) -> bytes:
        if not hasattr(self, "_body"):
            body = await super().body()
            if "gzip" in self.headers.get("Content-Encoding", ""):
                body = gzip.decompress(body)
            self._body = body
        return self._body
```

----------------------------------------

TITLE: Configure openapi-ts Script Using Local JSON
DESCRIPTION: This updated `package.json` snippet modifies the `generate-client` script to use a local `openapi.json` file as input instead of fetching it directly from the running server. This is useful after preprocessing the JSON file to modify operation IDs or make other adjustments before generating the client.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input ./openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Running Traefik with Configuration File
DESCRIPTION: This console command starts the Traefik reverse proxy, pointing it to the main configuration file (`traefik.toml`) which in turn loads the routing rules.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_5

LANGUAGE: console
CODE:
```
$ ./traefik --configFile=traefik.toml

INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml
```

----------------------------------------

TITLE: Installing Hypercorn with Trio Support (Console)
DESCRIPTION: Installs the Hypercorn ASGI server including dependencies required for using the Trio async framework. This allows Hypercorn workers to be based on Trio instead of the default Asyncio.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/deployment/manually.md#_snippet_4

LANGUAGE: console
CODE:
```
$ pip install "hypercorn[trio]"
```

----------------------------------------

TITLE: Type Hinting List with Item Type in Python (3.9+)
DESCRIPTION: Demonstrates the modern Python 3.9+ syntax for type-hinting a variable as a list specifically containing strings. This syntax is more concise than using `typing.List`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
my_list: list[str]
```

----------------------------------------

TITLE: OpenAPI Components Schemas JSON Structure
DESCRIPTION: This JSON snippet shows an example of the OpenAPI `components/schemas` object generated by FastAPI. It defines reusable data models (like Message, Item, ValidationError, HTTPValidationError) that are referenced by the response objects, providing structure for the expected JSON payloads documented in the API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "components": {
        "schemas": {
            "Message": {
                "title": "Message",
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "title": "Message",
                        "type": "string"
                    }
                }
            },
            "Item": {
                "title": "Item",
                "required": [
                    "id",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string"
                    },
                    "value": {
                        "title": "Value",
                        "type": "string"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Declaring Dictionary Types (Python 3.8+) - Python
DESCRIPTION: Shows the Python 3.8+ syntax for declaring a dictionary type hint using `Dict` imported from the `typing` module, specifying the types for keys and values as type parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_10

LANGUAGE: python
CODE:
```
from typing import Dict

def process_prices(prices: Dict[str, float]): pass
```

----------------------------------------

TITLE: Import List from Typing Module - Python
DESCRIPTION: Imports the `List` type from Python's standard `typing` module. This is necessary for type hinting lists with specific item types in Python versions before 3.9.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List # hl[1]
```

----------------------------------------

TITLE: Disabling Swagger UI Syntax Highlighting - Python
DESCRIPTION: Demonstrates how to disable syntax highlighting in the Swagger UI documentation generated by FastAPI by setting the 'syntaxHighlight' parameter to False when creating the FastAPI app or calling `get_swagger_ui_html()`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#_snippet_0

LANGUAGE: Python
CODE:
```
swagger_ui_parameters={
    "syntaxHighlight": False
}
```

----------------------------------------

TITLE: Combining Dictionaries using Unpacking in Python
DESCRIPTION: Demonstrates how to merge key-value pairs from an existing dictionary into a new dictionary using the `**` dictionary unpacking operator in Python. This technique is presented as a way to combine predefined configuration dictionaries with custom values.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#_snippet_2

LANGUAGE: Python
CODE:
```
old_dict = {
    "old key": "old value",
    "second old key": "second old value",
}
new_dict = {**old_dict, "new key": "new value"}
```

----------------------------------------

TITLE: OLD: Add Regex Validation (Deprecated) with Annotated in FastAPI
DESCRIPTION: This snippet shows the deprecated way to add regular expression validation using the `regex` parameter instead of `pattern` in `Query`, while still using `Annotated`. This parameter name was used in Pydantic v1 and older FastAPI versions (before 0.100.0).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(min_length=3, max_length=50, regex="^fixedquery$")] = None): # Use Union for Python < 3.10
    if q:
        return {"q": q}
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Initializing FastAPI App with Route
DESCRIPTION: Sets up a basic FastAPI application instance and defines a simple GET endpoint at "/items/". This represents the standard application setup before any OpenAPI customization is applied.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/extending-openapi.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/")
async def read_items():
    return [{"name": "Foo"}]
```

----------------------------------------

TITLE: Making an HTTP GET Request Python Requests
DESCRIPTION: This snippet demonstrates how to perform a basic HTTP GET request to a URL using the `requests` library. It highlights the simplicity of the client-side operation with `requests`. It requires the `requests` library to be installed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/alternatives.md#_snippet_0

LANGUAGE: Python
CODE:
```
response = requests.get("http://example.com/some/url")
```

----------------------------------------

TITLE: Referencing Including Router with Custom Config Placeholder Python
DESCRIPTION: This snippet is a placeholder referencing Python code from `app/main.py`. The text explains how to include the shared `admin` `APIRouter` into the main application while applying custom configurations (like a URL prefix, tags, dependencies, and responses) via parameters passed to `app.include_router()`, highlighting lines 14-17 in the referenced content. This allows customization without altering the original router file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_18

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/main.py!}

```

----------------------------------------

TITLE: Successful Item Response Example
DESCRIPTION: An example of a successful JSON response returned by the API for an existing item (e.g., 'foo'). The status code would typically be 200 OK.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "item": "The Foo Wrestlers"
}
```

----------------------------------------

TITLE: Defining Custom YAML Request Schema using Pydantic & openapi_extra (v1) - Python/FastAPI
DESCRIPTION: Shows how to define a YAML request body schema for documentation using Pydantic v1 and `openapi_extra`, even though the application reads the body as bytes and manually parses and validates the YAML content using Pydantic's `parse_obj`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Any

import yaml
from fastapi import FastAPI, Request
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float


@app.post("/items/", openapi_extra={
    "requestBody": {
        "content": {
            "application/x-yaml": {
                "schema": Item.schema()
            }
        }
    }
})
async def create_item(request: Request) -> Any:
    data_bytes = await request.body()
    data_str = data_bytes.decode()
    data = yaml.safe_load(data_str)
    item = Item.parse_obj(data)
    print(item)
    return {"status": "ok"}
```

----------------------------------------

TITLE: Setting and Using Env Var in PowerShell
DESCRIPTION: Shows how to create an environment variable using `$Env:` prefix for assignment and access in a PowerShell terminal. Provides an example demonstrating setting and echoing a variable.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/environment-variables.md#_snippet_1

LANGUAGE: powershell
CODE:
```
$Env:MY_NAME = "Wade Wilson"
echo "Hello $Env:MY_NAME"
```

----------------------------------------

TITLE: Typed Path Parameter JSON Output (Validation Error)
DESCRIPTION: This JSON snippet shows the validation error response returned by FastAPI when accessing the `/items/foo` endpoint defined with the `item_id` path parameter type-hinted as `int`. Since 'foo' cannot be parsed as an integer, FastAPI automatically returns a detailed error.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "detail": [
    {
      "loc": [
        "path",
        "item_id"
      ],
      "msg": "value is not a valid integer",
      "type": "type_error.integer"
    }
  ]
}
```

----------------------------------------

TITLE: Typed Path Parameter JSON Output (Parsing)
DESCRIPTION: This JSON snippet shows the response when accessing the `/items/3` endpoint defined with the `item_id` path parameter type-hinted as `int`. FastAPI automatically parses the string '3' into a Python integer 3 in the response.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "item_id": 3
}
```

----------------------------------------

TITLE: OpenAPI Responses Object JSON Structure
DESCRIPTION: This JSON snippet shows an example of the OpenAPI `responses` object generated by FastAPI when using the `responses` parameter in a path operation. It illustrates how different HTTP status codes are defined, each with a description and content types linking to schemas defined elsewhere in the document.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "responses": {
        "404": {
            "description": "Additional Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Message"
                    }
                }
            }
        },
        "200": {
            "description": "Successful Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Item"
                    }
                }
            }
        },
        "422": {
            "description": "Validation Error",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Install FastAPI Development Requirements using pip
DESCRIPTION: Installs the necessary dependencies and the local FastAPI code in editable mode (`-e`) within the activated virtual environment. This allows for immediate testing of changes made to the local source code without reinstallation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install -r requirements.txt

---> 100%
```

----------------------------------------

TITLE: Replacing Default OpenAPI Method - Python
DESCRIPTION: This line assigns the `custom_openapi` function to the `app.openapi` attribute. This overrides the default method FastAPI uses to generate the schema when the `/openapi.json` path is accessed, ensuring that the custom logic is executed instead.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/extending-openapi.md#_snippet_2

LANGUAGE: python
CODE:
```
app.openapi = custom_openapi
```

----------------------------------------

TITLE: Defining a Standard Synchronous Function in Python
DESCRIPTION: This example shows how to define a function using the standard `def` keyword. These functions run synchronously, blocking the execution of the current thread until they finish. They cannot use `await` and are suitable for CPU-bound tasks or calling traditional blocking libraries.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
# This is not asynchronous
def get_sequential_burgers(number: int):
    # Do some sequential stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Simple Path Parameter JSON Response Example
DESCRIPTION: This JSON snippet shows the expected response when accessing the path operation with a simple string path parameter like '/items/foo'. The path parameter value is returned in the JSON body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "item_id": "foo"
}
```

----------------------------------------

TITLE: Example URL with Default Query Parameters
DESCRIPTION: This URL demonstrates calling the endpoint with default query parameters. Accessing `/items/` without explicitly providing `skip` or `limit` is equivalent to using their default values of 0 and 10.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_1

LANGUAGE: URL
CODE:
```
http://127.0.0.1:8000/items/
```

----------------------------------------

TITLE: Disabling Automatic root_path Server in OpenAPI Spec
DESCRIPTION: This Python snippet shows how to disable the automatic inclusion of the `root_path` as a server entry in the OpenAPI specification by setting `root_path_in_servers=False` when initializing the FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_9

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

# Disable automatic root_path server entry
app = FastAPI(
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"},
    ],
    root_path_in_servers=False # Prevent root_path from being added to servers list
)


@app.get("/")
def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Example Error Response for Forbidden Extra Headers JSON
DESCRIPTION: This JSON snippet illustrates the structure of the error response returned by FastAPI when a client sends headers not defined in a Pydantic model configured to forbid extra fields. It identifies the forbidden header ("tool") and the location ("header").
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/header-param-models.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "detail": [
        {
            "type": "extra_forbidden",
            "loc": ["header", "tool"],
            "msg": "Extra inputs are not permitted",
            "input": "plumbus"
        }
    ]
}
```

----------------------------------------

TITLE: WebSocket Disconnect Message Example Text
DESCRIPTION: This is an example of the text message sent to other clients when one client disconnects from a WebSocket connection, as implemented in the handling code. It shows a typical format for such notification messages.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/websockets.md#_snippet_5

LANGUAGE: text
CODE:
```
Client #1596980209979 left the chat
```

----------------------------------------

TITLE: Importing List Type Hint in Python (Prior to 3.9)
DESCRIPTION: Imports the `List` type hint from Python's standard `typing` module. This is necessary for providing type information for lists and their contents in Python versions before 3.9.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List
```

----------------------------------------

TITLE: Example Basic JSON Response
DESCRIPTION: This JSON snippet shows the typical response body returned by the simple "Hello World" root endpoint defined in the basic FastAPI application. FastAPI automatically serializes Python dictionaries and other compatible types into JSON responses by default.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "message": "Hello World"
}
```

----------------------------------------

TITLE: Overridden Request Validation Error Text Response Example
DESCRIPTION: An example of the plain text output generated by the custom `validation_exception_handler` that overrides the default handler for `RequestValidationError`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#_snippet_9

LANGUAGE: text
CODE:
```
1 validation error
path -> item_id
  value is not a valid integer (type=type_error.integer)
```

----------------------------------------

TITLE: Root path successful response - JSON
DESCRIPTION: This is the expected JSON output when accessing the root URL ('/') of the running FastAPI application defined in the basic example.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{"message": "Hello World"}
```

----------------------------------------

TITLE: Example .gitignore Content gitignore
DESCRIPTION: This is an example of the content inside the `.gitignore` file created by the previous command. The single asterisk `*` is a wildcard that tells Git to ignore everything within the directory containing this `.gitignore` file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_9

LANGUAGE: gitignore
CODE:
```
*
```

----------------------------------------

TITLE: Importing Dependency with Single Dot Relative Import Python
DESCRIPTION: This relative import statement attempts to import the function `get_token_header` from a module named `dependencies` located within the *same* package as the current file (`app/routers/items.py`). It illustrates an incorrect import path for accessing a module in the parent directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
from .dependencies import get_token_header

```

----------------------------------------

TITLE: Truncating Docstring for OpenAPI using Form Feed - Python/FastAPI
DESCRIPTION: Demonstrates using the `\f` (form feed) character within a path operation function's docstring to indicate where FastAPI should truncate the description used in the generated OpenAPI schema. The text after `\f` is ignored by OpenAPI but can be used by other tools like Sphinx.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post("/items/")
async def create_item(
    name: str,
    item_id: str,
    price: float,
    is_ten: bool = False,
    quantity: int | None = None,
):
    """
    Create an item

    This is an advanced description for other tools. \f

    These are the parameters:

    - **name**: The name of the item
    - **item_id**: The ID of the item
    - **price**: The price of the item
    - **is_ten**: Is the item a ten?
    - **quantity**: The quantity of the item
    """
    return {
        "name": name,
        "item_id": item_id,
        "price": price,
        "is_ten": is_ten,
        "quantity": quantity,
    }
```

----------------------------------------

TITLE: Referencing Router Code with Custom Config Placeholder Python
DESCRIPTION: This snippet is a placeholder syntax used in documentation to reference external Python code, specifically from `app/routers/items.py`. The surrounding text describes how this code defines an `APIRouter` and includes a path operation configured with custom tags, responses, and dependencies, highlighting lines 30-31 within the referenced file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_9

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/routers/items.py!}

```

----------------------------------------

TITLE: Referencing Shared Admin Router Placeholder Python
DESCRIPTION: This snippet is a placeholder referencing Python code from `app/internal/admin.py`. The surrounding text describes this file as containing a simple `APIRouter` intended to be a reusable component shared across different projects or parts of an organization, highlighting its creation on line 3 within the referenced file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_17

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/internal/admin.py!}

```

----------------------------------------

TITLE: FastAPI 404 Response for Disabled Docs
DESCRIPTION: Shows the standard JSON response returned by FastAPI when a client attempts to access an endpoint (like `/openapi.json`, `/docs`, or `/redoc`) that does not exist. This is the expected outcome when the OpenAPI feature is disabled using the conditional configuration method described in the text.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/conditional-openapi.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "detail": "Not Found"
}
```

----------------------------------------

TITLE: 404 Not Found Response for Disabled Docs (JSON)
DESCRIPTION: Shows the expected JSON response received when attempting to access the standard documentation endpoints (`/openapi.json`, `/docs`, or `/redoc`) after they have been effectively disabled or configured with a different URL by setting the `openapi_url` to `None` or an empty string, typically controlled by an environment variable.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/conditional-openapi.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "detail": "Not Found"
}
```

----------------------------------------

TITLE: Serving Built Documentation (Console)
DESCRIPTION: This command uses the `docs.py` script with the `serve` argument to start a simple local HTTP server. This server is intended for previewing the multi-language documentation that has already been built using the `build-all` command, serving content from the `./site/` directory, typically at `http://127.0.0.1:8008`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_14

LANGUAGE: console
CODE:
```
python ./scripts/docs.py serve
```

----------------------------------------

TITLE: Defining Traefik Entry Points and Providers (TOML)
DESCRIPTION: Configures Traefik to listen for HTTP traffic on port 9999 and use `routes.toml` as a file provider for dynamic configuration. This sets up the basic structure for routing incoming requests for the local testing setup.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_2

LANGUAGE: TOML
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Executing FastAPI Script from Console: Console
DESCRIPTION: This console command shows the standard way to run a Python script from the command line. When executed like this, the Python interpreter sets the `__name__` variable of the script to `"__main__"`, triggering the code block within the `if __name__ == "__main__"` condition.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#_snippet_1

LANGUAGE: console
CODE:
```
$ python myapp.py
```

----------------------------------------

TITLE: Example Rendered HTML Output
DESCRIPTION: Shows the expected HTML output after the Jinja template processes the `{{ id }}` variable with a value of `42` from the context.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/templates.md#_snippet_3

LANGUAGE: html
CODE:
```
Item ID: 42
```

----------------------------------------

TITLE: Example Client Callback Implementation - Python
DESCRIPTION: This Python snippet demonstrates how a client (the calling API) might implement the callback logic. It shows a conceptual example of receiving a callback URL and sending a POST request to it using the httpx library.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/openapi-callbacks.md#_snippet_1

LANGUAGE: Python
CODE:
```
callback_url = "https://example.com/api/v1/invoices/events/"
httpx.post(callback_url, json={"description": "Invoice paid", "paid": True})
```

----------------------------------------

TITLE: Starting Traefik with TOML Configuration (Console)
DESCRIPTION: Shows the console command to start the Traefik proxy, pointing it to the `traefik.toml` configuration file. This initiates the proxy server using the defined entry points and loads the routing rules from `routes.toml` via the file provider.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_4

LANGUAGE: Console
CODE:
```
$ ./traefik --configFile=traefik.toml

INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml
```

----------------------------------------

TITLE: Defining a FastAPI Startup Event Handler (Deprecated) - Python
DESCRIPTION: Illustrates the deprecated method of using the `@app.on_event("startup")` decorator to define a function that executes once before the application starts. This was previously used for initial setup tasks.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/events.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.on_event("startup")
```

----------------------------------------

TITLE: Creating a GitHub Discussion description for translations - Markdown
DESCRIPTION: Provides a template for the description of a new GitHub Discussion created to track translation progress for a specific language. It includes a title and a formatted link to relevant pull requests requiring review, using a language-specific label.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/management-tasks.md#_snippet_1

LANGUAGE: Markdown
CODE:
```
## Bosnian translations

This is the issue to track translations of the docs to Bosnian. 🚀

Here are the [PRs to review with the label \`lang-bs\`](https://github.com/fastapi/fastapi/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Alang-bs+label%3A%22awaiting-review%22). 🤓
```

----------------------------------------

TITLE: Displaying Context Variable in Jinja Template
DESCRIPTION: Shows how to display a variable named `id` from the context dictionary passed to the template. The `{{ var_name }}` syntax is used to render the value.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/templates.md#_snippet_1

LANGUAGE: jinja
CODE:
```
Item ID: {{ id }}
```

----------------------------------------

TITLE: Referencing Main App Initialization Placeholder Python
DESCRIPTION: This snippet is a placeholder referencing Python code from `app/main.py`. The accompanying text describes this file's role in initializing the main `FastAPI` application instance and potentially declaring global dependencies that apply across the entire application, highlighting lines 1, 3, and 7 in the referenced content.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_10

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/main.py!}

```

----------------------------------------

TITLE: Configure CMD in Exec Form - Dockerfile
DESCRIPTION: Sets the command to run the FastAPI application using the `fastapi run` command in the Dockerfile. Uses the exec form (`["executable", "arg1", "arg2"]`) which is recommended for graceful shutdown and proper signal handling, ensuring lifespan events are triggered.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: Serve FastAPI Documentation Locally (Live Reload) using Python Script (English)
DESCRIPTION: Runs a Python script to build and serve the project documentation locally with live reloading enabled. It serves the English documentation on `http://127.0.0.1:8008`, updating automatically when source or documentation files are changed.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_3

LANGUAGE: console
CODE:
```
$ python ./scripts/docs.py live

[INFO] Serving on http://127.0.0.1:8008
[INFO] Start watching changes
[INFO] Start detecting changes
```

----------------------------------------

TITLE: Build FastAPI Docker Image - Console
DESCRIPTION: Executes the `docker build` command in the console to create a Docker image from the Dockerfile in the current directory (`.`). The image is tagged with the name `myimage`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/deployment/docker.md#_snippet_11

LANGUAGE: console
CODE:
```
docker build -t myimage .
```

----------------------------------------

TITLE: Calling Required Optional Parameter Function Incorrectly Python
DESCRIPTION: Demonstrates calling the `say_hi` function without providing a value for the `name` parameter, resulting in a `TypeError` because the parameter is required despite its `Optional` type hint.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/python-types.md#_snippet_16

LANGUAGE: Python
CODE:
```
say_hi()  # Oh, no, this throws an error! 😱
```

----------------------------------------

TITLE: Serve FastAPI Documentation Locally (Live Reload) for Specific Language (e.g., Spanish) using Python Script
DESCRIPTION: Runs the Python documentation script to build and serve the documentation for a specific language, identified by its 2-letter code (e.g., 'es' for Spanish). It serves the translated documentation on `http://127.0.0.1:8008` with live reloading.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_8

LANGUAGE: console
CODE:
```
// Use the command "live" and pass the language code as a CLI argument
$ python ./scripts/docs.py live es

<span style="color: green;">[INFO]</span> Serving on http://127.0.0.1:8008
<span style="color: green;">[INFO]</span> Start watching changes
<span style="color: green;">[INFO]</span> Start detecting changes
```

----------------------------------------

TITLE: Serve MkDocs Documentation Locally (Manual) in Spanish Directory
DESCRIPTION: Manually serves the documentation located in the current directory (Spanish translations) using MkDocs, listening on `http://127.0.0.1:8008`. This provides a manual alternative to the `scripts/docs.py` script for translated docs.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_10

LANGUAGE: console
CODE:
```
$ mkdocs serve --dev-addr 127.0.0.1:8008
```

----------------------------------------

TITLE: Install Typer CLI Completion
DESCRIPTION: Installs command-line completion for Typer CLI, which is used by some development scripts like `./scripts/docs.py`. Completion takes effect after restarting the terminal.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_6

LANGUAGE: console
CODE:
```
$ typer --install-completion

zsh completion installed in /home/user/.bashrc.
Completion will take effect once you restart the terminal.
```

----------------------------------------

TITLE: Format FastAPI Code using Bash Script
DESCRIPTION: Runs a bash script that automatically formats the Python code according to project standards. This includes sorting imports and applying consistent code style.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_1

LANGUAGE: console
CODE:
```
$ bash scripts/format.sh
```

----------------------------------------

TITLE: Validating Query Regex (Deprecated) with Annotated (Python)
DESCRIPTION: Demonstrates the deprecated use of the `regex` parameter within `Query` (instead of `pattern`) with `Annotated` for applying a regular expression constraint to an optional string query parameter `q`. This method is outdated since Pydantic v2/FastAPI v0.100.0 and should be updated to use `pattern`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#_snippet_7

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(min_length=3, max_length=50, regex="^fixedquery$")] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Creating Virtual Environment with venv Console
DESCRIPTION: This command uses the built-in `venv` module to create a new virtual environment. It runs `python` with the `-m` flag to execute the `venv` module as a script, specifying `.venv` as the directory name where the environment will be created.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_1

LANGUAGE: console
CODE:
```
$ python -m venv .venv
```

----------------------------------------

TITLE: Serve MkDocs Documentation Locally (Manual) in English Directory
DESCRIPTION: Manually serves the documentation located in the current directory using MkDocs, listening on `http://127.0.0.1:8008`. This is an alternative to using the `scripts/docs.py` helper script.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_5

LANGUAGE: console
CODE:
```
$ mkdocs serve --dev-addr 127.0.0.1:8008
```

----------------------------------------

TITLE: Installing Jinja2 Dependency (Console)
DESCRIPTION: This command installs the Jinja2 template engine library using pip, which is a required dependency for using Jinja2 templates with FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/templates.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install jinja2
```

----------------------------------------

TITLE: Example Static CSS File (CSS)
DESCRIPTION: A simple CSS file (`styles.css`) provided as an example of a static asset. This file can be served by FastAPI's `StaticFiles` and referenced by templates, demonstrating the integration of static content.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/templates.md#_snippet_4

LANGUAGE: css
CODE:
```
body {
    font-family: sans-serif;
    line-height: 1.6;
    margin: 20px; /* Highlighted line 4 */
    background-color: #f0f0f0;
}
```

----------------------------------------

TITLE: Configuring mkdocs inheritance for translations - YAML
DESCRIPTION: Specifies that the language-specific mkdocs.yml file should inherit its configuration settings from the main English version. This is a standard requirement for new translation Pull Requests to maintain consistency.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/management-tasks.md#_snippet_0

LANGUAGE: YAML
CODE:
```
INHERIT: ../en/mkdocs.yml
```

----------------------------------------

TITLE: Rendering Individual GitHub Sponsors List - Jinja2
DESCRIPTION: This Jinja2 template snippet iterates through sponsor data provided in the `github_sponsors` variable. It groups sponsors and displays each individual sponsor's avatar and login name as a link, skipping any user login found in the `sponsors_badge.logins` list. Requires `github_sponsors` (an object with a 'sponsors' property containing groups of users) and `sponsors_badge.logins` (a list of logins to exclude).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/fastapi-people.md#_snippet_0

LANGUAGE: Jinja2
CODE:
```
{% if github_sponsors %}
{% for group in github_sponsors.sponsors %}

<div class="user-list user-list-center">

{% for user in group %}
{% if user.login not in sponsors_badge.logins %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a></div>

{% endif %}
{% endfor %}

</div>

{% endfor %}
{% endif %}
```

----------------------------------------

TITLE: Example Rendered HTML Link from url_for
DESCRIPTION: Shows the resulting HTML link generated by the `{{ url_for('read_item', id=id) }}` call when `id` is `42`. The link points to the expected URL for the `read_item` path operation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/templates.md#_snippet_5

LANGUAGE: html
CODE:
```
<a href="/items/42">
```

----------------------------------------

TITLE: Install pydantic-settings Package
DESCRIPTION: This command installs the 'pydantic-settings' package, which is required for using Pydantic's `BaseSettings` functionality to manage application settings, typically read from environment variables.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/settings.md#_snippet_0

LANGUAGE: Console
CODE:
```
$ pip install pydantic-settings
```

----------------------------------------

TITLE: Printing a Python Dictionary
DESCRIPTION: This snippet demonstrates printing a Python dictionary to standard output. When called after converting a Pydantic model, it displays the dictionary representation of the model's data.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
print(user_dict)
```

----------------------------------------

TITLE: Building All Language Docs (Console)
DESCRIPTION: Executing this command runs the `docs.py` script with the `build-all` argument. This triggers the process of building the documentation for every language configured in the project. It generates separate MkDocs sites for each language and then combines them into a final output structure typically located in the `./site/` directory.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_13

LANGUAGE: console
CODE:
```
python ./scripts/docs.py build-all
```

----------------------------------------

TITLE: Specifying httpx Dependency Version (Dependency File)
DESCRIPTION: Defines the required version range for the 'httpx' library, which is used specifically for mkdocstrings and project tests. The version must be greater than or equal to 0.23.0 and less than 0.28.0.
SOURCE: https://github.com/fastapi/fastapi/blob/master/requirements-docs-tests.txt#_snippet_0

LANGUAGE: Dependency File
CODE:
```
httpx >=0.23.0,<0.28.0
```

----------------------------------------

TITLE: Changing Directory in Console
DESCRIPTION: Changes the current working directory in the console to a specified path. This is a fundamental command often used when navigating to a project's root directory before performing other operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_25

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban
```

----------------------------------------

TITLE: Navigate to Spanish Documentation Directory (cd)
DESCRIPTION: Changes the current directory in the terminal to the location of the Spanish documentation translation files.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/contributing.md#_snippet_9

LANGUAGE: console
CODE:
```
$ cd docs/es/
```

----------------------------------------

TITLE: Importing Cookie from FastAPI
DESCRIPTION: Imports the necessary `Cookie` class from the `fastapi` library, along with `FastAPI`, to enable the definition of cookie parameters in your application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/cookie-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Cookie
```

----------------------------------------

TITLE: Importing Pydantic BaseModel (Python)
DESCRIPTION: Imports the fundamental `BaseModel` class from the `pydantic` library, which serves as the base class for defining data models used for request body validation and data serialization in FastAPI.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: JSON Output for Successful Request with Required Parameter
DESCRIPTION: This JSON shows the successful response when the required query parameter `needy` is provided in the URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#_snippet_11

LANGUAGE: JSON
CODE:
```
{
    "item_id": "foo-item",
    "needy": "sooooneedy"
}
```

----------------------------------------

TITLE: Loading Mailjet Embedded Form Script (HTML)
DESCRIPTION: Includes the necessary JavaScript file from Mailjet (`pas-nc-embedded-v1.js`) which is likely required for the embedded form within the iframe to function correctly or handle interactions. It specifies the script type and the source URL.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/newsletter.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<script type="text/javascript" src="https://app.mailjet.com/pas-nc-embedded-v1.js"></script>
```

----------------------------------------

TITLE: Specifying ruff Dependency Version (Dependency File)
DESCRIPTION: Specifies the exact required version for the 'ruff' library. This dependency is used for linting the project code and for generating documentation versions. The version must be exactly 0.11.2.
SOURCE: https://github.com/fastapi/fastapi/blob/master/requirements-docs-tests.txt#_snippet_1

LANGUAGE: Dependency File
CODE:
```
ruff ==0.11.2
```

----------------------------------------

TITLE: Creating Project Directories Console
DESCRIPTION: This sequence of console commands demonstrates how to create a standard directory structure for a new project within a 'code' directory in your home folder. It involves navigating, creating the parent 'code' directory (if it doesn't exist), and then creating and entering the specific project directory 'awesome-project'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/virtual-environments.md#_snippet_0

LANGUAGE: console
CODE:
```
// Go to the home directory
$ cd
// Create a directory for all your code projects
$ mkdir code
// Enter into that code directory
$ cd code
// Create a directory for this project
$ mkdir awesome-project
// Enter into that project directory
$ cd awesome-project
```

----------------------------------------

TITLE: Referencing Router Import Placeholder Python
DESCRIPTION: This snippet is a placeholder referencing Python code from `app/main.py`. The text surrounding it explains the process of importing submodules (`items` and `users`) that contain `APIRouter` instances into the main application file, using relative imports as shown on lines 4-5 of the referenced content.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_11

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/main.py!}

```

----------------------------------------

TITLE: Embedding Mailjet Newsletter Form (HTML)
DESCRIPTION: Embeds a Mailjet newsletter signup form using an iframe. It configures the iframe's appearance and behavior with attributes like data type, frame border, scrolling, margins, source URL, width, and height to properly display the embedded form.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/newsletter.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<iframe data-w-type="embedded" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://xr4n4.mjt.lu/wgt/xr4n4/hj5/form?c=40a44fa4" width="100%" style="height: 800px;"></iframe>
```