TITLE: Customizing Design Tokens with ConfigProvider in React
DESCRIPTION: This snippet demonstrates how to customize the Ant Design theme by modifying Design Tokens using the ConfigProvider component. It shows how to change the primary color and border radius globally.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Button, ConfigProvider, Space } from 'antd';
import React from 'react';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      token: {
        // Seed Token
        colorPrimary: '#00b96b',
        borderRadius: 2,

        // Alias Token
        colorBgContainer: '#f6ffed',
      },
    }}
  >
    <Space>
      <Button type="primary">Primary</Button>
      <Button>Default</Button>
    </Space>
  </ConfigProvider>
);

export default App;
```

----------------------------------------

TITLE: Creating an Ant Design Form with Input and InputNumber (TSX)
DESCRIPTION: This snippet demonstrates setting up a basic form using Ant Design's `Form`, `Form.Item`, `Input`, and `InputNumber` components in a React/TSX environment. It defines fields for 'Name' (using `Input`) and 'Price' (using `InputNumber`) within a product editing context.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
<Form>
  <Form.Item label="Name" name="name">
    <Input />
  </Form.Item>

  <Form.Item label="Price" name="price">
    <InputNumber />
  </Form.Item>
</Form>
```

----------------------------------------

TITLE: Basic Ant Design Component Usage in React
DESCRIPTION: Demonstrates basic usage of Ant Design components including Button, Space, and DatePicker with version display.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/getting-started.en-US.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { Button, Space, DatePicker, version } from 'antd';

const App = () => (
  <div style={{ padding: '0 24px' }}>
    <h1>antd version: {version}</h1>
    <Space>
      <DatePicker />
      <Button type="primary">Primary Button</Button>
    </Space>
  </div>
);

export default App;
```

----------------------------------------

TITLE: Implementing Ant Design Table with TypeScript
DESCRIPTION: A complete example of using the Ant Design Table component with TypeScript. The code demonstrates how to define column types, data interfaces, and use both the standard and JSX-style Table implementations.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Table } from 'antd';
import type { TableColumnsType } from 'antd';

interface User {
  key: number;
  name: string;
}

const columns: TableColumnsType<User> = [
  {
    key: 'name',
    title: 'Name',
    dataIndex: 'name',
  },
];

const data: User[] = [
  {
    key: 0,
    name: 'Jack',
  },
];

const Demo: React.FC = () => (
  <>
    <Table<User> columns={columns} dataSource={data} />
    {/* JSX style usage */}
    <Table<User> dataSource={data}>
      <Table.Column<User> key="name" title="Name" dataIndex="name" />
    </Table>
  </>
);

export default Demo;
```

----------------------------------------

TITLE: Initializing Ant Design Table with DataSource and Columns in React (JSX)
DESCRIPTION: This snippet demonstrates how to set up an Ant Design Table component in React by defining a dataSource array and a columns array. The dataSource holds objects representing each row of data, while the columns array defines how each property of the data will be rendered, including title and keys. No additional dependencies are required aside from Ant Design and React; the Table will render rows for each provided item and columns as specified. Useful for quickly displaying tabular data with custom column definitions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
const dataSource = [
  {
    key: '1',
    name: 'Mike',
    age: 32,
    address: '10 Downing Street',
  },
  {
    key: '2',
    name: 'John',
    age: 42,
    address: '10 Downing Street',
  },
];

const columns = [
  {
    title: 'Name',
    dataIndex: 'name',
    key: 'name',
  },
  {
    title: 'Age',
    dataIndex: 'age',
    key: 'age',
  },
  {
    title: 'Address',
    dataIndex: 'address',
    key: 'address',
  },
];

<Table dataSource={dataSource} columns={columns} />;
```

----------------------------------------

TITLE: Importing and Using Ant Design Button (TSX)
DESCRIPTION: Import the Button component from the 'antd' library and use it within a React functional component in a Next.js page file (e.g., src/app/page.tsx). This demonstrates basic component integration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.zh-CN.md#_snippet_1

LANGUAGE: TSX
CODE:
```
import React from 'react';
import { Button } from 'antd';

const Home = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default Home;
```

----------------------------------------

TITLE: Updating Component APIs for Controlled Visibility in React (JSX)
DESCRIPTION: Demonstrates migrating various Ant Design components (Modal, Tag, Table, Slider) from `visible`-based props (like `visible`, `filterDropdownVisible`, `tooltipVisible`) to the unified `open` prop or nested `tooltip.open` for controlling visibility in v5. For Tag, visibility control is removed, requiring conditional rendering instead.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: diff
CODE:
```
  import { Modal, Tag, Table, Slider } from 'antd';

  const App: React.FC = () => {
    const [visible, setVisible] = useState(true);

    return (
      <>
-       <Modal visible={visible}>content</Modal>
+       <Modal open={visible}>content</Modal>

-       <Tag visible={visible}>tag</Tag>
+       {visible && <Tag>tag</Tag>}

        <Table
          data={[]}
          columns={[
            {
              title: 'Name',
              dataIndex: 'name',
-             filterDropdownVisible: visible,
+             filterDropdownOpen: visible,
            }
          ]}
        />

-       <Slider tooltipVisible={visible} />
+       <Slider tooltip={{ open: visible }} />
      </>
    );
  }

  export default App;
```

----------------------------------------

TITLE: Using Ant Design Table in TypeScript
DESCRIPTION: This snippet demonstrates how to use the Ant Design Table component with TypeScript. It shows defining types for data and columns (`User`, `TableColumnsType`), creating sample data and column definitions, and rendering the Table component with explicit type parameters.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.zh-CN.md#_snippet_4

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Table } from 'antd';
import type { TableColumnsType } from 'antd';

interface User {
  key: number;
  name: string;
}

const columns: TableColumnsType<User> = [
  {
    key: 'name',
    title: 'Name',
    dataIndex: 'name',
  },
];

const data: User[] = [
  {
    key: 0,
    name: 'Jack',
  },
];

const Demo: React.FC = () => (
  <>
    <Table<User> columns={columns} dataSource={data} />
    {/* 使用 JSX 风格的 API */}
    <Table<User> dataSource={data}>
      <Table.Column<User> key="name" title="Name" dataIndex="name" />
    </Table>
  </>
);

export default Demo;
```

----------------------------------------

TITLE: ConfigProvider Integration with App Component
DESCRIPTION: Shows how to use App component with ConfigProvider for theme configuration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<ConfigProvider theme={{ ... }}>
  <App>
    ...
  </App>
</ConfigProvider>
```

----------------------------------------

TITLE: Basic Ant Design Components Example (React)
DESCRIPTION: A simple React example demonstrating the use of Ant Design's DatePicker and Button components within a basic layout. It also shows how to display the installed antd version.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/getting-started.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
const sandpackConfig = {
  autorun: true,
};

import React from 'react';
import { Button, Space, DatePicker, version } from 'antd';

const App = () => (
  <div style={{ padding: '0 24px' }}>
    <h1>antd version: {version}</h1>
    <Space>
      <DatePicker />
      <Button type="primary">Primary Button</Button>
    </Space>
  </div>
);

export default App;
```

----------------------------------------

TITLE: Configuring Ant Design Locale with ConfigProvider (jsx)
DESCRIPTION: Demonstrates how to set the locale for Ant Design components globally using ConfigProvider. Requires importing the desired locale object from 'antd/locale' and configuring dayjs with the corresponding locale to ensure all date-related texts are localized.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.en-US.md#_snippet_0

LANGUAGE: jsx
CODE:
```
// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.
// Make sure you import the relevant dayjs file as well, otherwise the locale won't change for all texts (e.g. range picker months)
import locale from 'antd/locale/zh_CN';
import dayjs from 'dayjs';

import 'dayjs/locale/zh-cn';

dayjs.locale('zh-cn');

<ConfigProvider locale={locale}>
  <DatePicker defaultValue={dayjs('2015-01-01', 'YYYY-MM-DD')} />
</ConfigProvider>;
```

----------------------------------------

TITLE: Applying Global Locale Settings with ConfigProvider (JSX)
DESCRIPTION: This React snippet demonstrates how to configure the global locale for an Ant Design application. It imports the `ConfigProvider` component and a specific locale object (`fr_FR` for French) and then wraps the root `App` component with `ConfigProvider`, passing the imported locale object to the `locale` prop. This ensures all applicable Ant Design components within the `App` render using French text and formatting.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/i18n.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { ConfigProvider } from 'antd';
import frFR from 'antd/locale/fr_FR';

return (
  <ConfigProvider locale={frFR}>
    <App />
  </ConfigProvider>
);
```

----------------------------------------

TITLE: App Component Usage in v5
DESCRIPTION: Demonstrates the new App component approach in Ant Design v5 that simplifies context management by providing a centralized location for context holders.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
const Demo = () => {
  const { message } = App.useApp();

  React.useEffect(() => {
    message.success('Hello World');
  }, []);

  // ...
};
```

----------------------------------------

TITLE: Creating contextHolder with Modal.useModal in Ant Design
DESCRIPTION: This snippet demonstrates how to use Modal.useModal to create a contextHolder that can read context in Ant Design. It emphasizes that only hooks methods support Promise await operations.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/hooks.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
Modal.useModal()
```

----------------------------------------

TITLE: Implementing and Using the Aggregate Form Item Component (TSX)
DESCRIPTION: Provides the complete implementation of the `Aggregate` component, which wraps `Form.Item` to handle multiple `names`. It uses `getValueProps` to aggregate values for the child component, `getValueFromEvent` to split and set values back into the FormStore, and applies `transform` to rules for correct validation. The example demonstrates its usage with both `Cascader` and `DatePicker.RangePicker` within an Ant Design Form, simplifying the handling of combined fields like address or date ranges. Dependencies include `react`, `antd`, and `dayjs`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
/**
 * defaultShowCode: true
 */
import React from 'react';
import type { FormItemProps } from 'antd';
import { Button, Cascader, DatePicker, Form as OriginForm } from 'antd';
import dayjs from 'dayjs';

interface AggregateProps<V = any> extends FormItemProps<V> {
  names?: FormItemProps<V>['name'][];
}

const Aggregate = (props: AggregateProps) => {
  const form = OriginForm.useFormInstance();

  const { names = [], rules = [], ...rest } = props;
  const [firstName, ...resetNames] = names;

  return (
    <>
      <OriginForm.Item
        name={firstName}
        // Convert the values of names into an array passed to children
        getValueProps={() => {
          const value = names.map((name) => form.getFieldValue(name));
          if (value.every((v) => v === undefined)) {
            return undefined;
          }
          return { value };
        }}
        getValueFromEvent={(values) => {
          // Set the form store values for names
          const fieldData = names.map((name, index) => ({ name, value: values?.[index] }));
          form.setFields(fieldData);
          return values?.[0];
        }}
        rules={rules.map((rule) => {
          if (typeof rule === 'object' && rule) {
            return {
              ...rule,
              transform: () => {
                // Set the values of the names fields for the rule value
                const values = names.map((name) => form.getFieldValue(name));
                return values;
              },
            };
          }
          return rule;
        })}
        {...rest}
      />
      {/*  Bind other fields so they can getFieldValue to get values and setFields to set values */}
      {resetNames.map((name) => (
        <OriginForm.Item key={name?.toString()} name={name} noStyle />
      ))}
    </>
  );
};

const data = {
  province: 'Beijing',
  city: 'Haidian',
  startTime: dayjs(),
  endTime: dayjs().add(1, 'month'),
};

const options = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [{ value: 'hangzhou', label: 'Hangzhou' }],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [{ value: 'nanjing', label: 'Nanjing' }],
  },
];

const Form = Object.assign(OriginForm, { Aggregate });

export default () => (
  <Form initialValues={data} onFinish={(value) => console.log(value)}>
    <Form.Aggregate label="Address" names={['province', 'city']} rules={[{ required: true }]}>
      <Cascader options={options} placeholder="Please select" />
    </Form.Aggregate>

    <Form.Item label="Address (use Default)" name="defaultAddress">
      <Cascader options={options} placeholder="Please select" />
    </Form.Item>

    {/* Similarly, it also applies <DatePicker.RangePicker /> */}
    <Form.Aggregate label="Date" names={['startTime', 'endTime']}>
      <DatePicker.RangePicker />
    </Form.Aggregate>

    <Form.Item>
      <Button htmlType="submit" type="primary">
        Submit
      </Button>
    </Form.Item>
  </Form>
);
```

----------------------------------------

TITLE: Using message.useMessage with React Context - TSX
DESCRIPTION: This snippet demonstrates how to use the `message.useMessage` hook to obtain an API instance and a context holder node. By rendering the `contextHolder` within specific React context providers, the API instance gains access to the context values available at that rendering location, enabling context-aware message calls.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/message/index.en-US.md#_snippet_1

LANGUAGE: tsx
CODE:
```
const [api, contextHolder] = message.useMessage();

return (
  <Context1.Provider value="Ant">
    {/* contextHolder is inside Context1 which means api will get value of Context1 */}
    {contextHolder}
    <Context2.Provider value="Design">
      {/* contextHolder is outside Context2 which means api will **not** get value of Context2 */}
    </Context2.Provider>
  </Context1.Provider>
);
```

----------------------------------------

TITLE: Avoiding Style Conflicts with ConfigProvider prefixCls for Ant Design v5 (TypeScript)
DESCRIPTION: This React TypeScript snippet demonstrates configuring the prefixCls property in Ant Design v5's ConfigProvider to isolate its CSS classes. By setting prefixCls=\"ant5\", it prevents style conflicts between v4 and v5 components rendered on the same page. Dependencies include React and antd-v5, and the main input is the custom prefixCls value. The output is namespaced class names for v5 components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_19

LANGUAGE: TypeScript
CODE:
```
import React from 'react';
import { ConfigProvider as ConfigProvider5 } from 'antd-v5';

export default () => (
  <ConfigProvider5 prefixCls="ant5">
    <MyApp />
  </ConfigProvider5>
);
```

----------------------------------------

TITLE: Extracting Inline Styles for Ant Design SSR in React/TSX
DESCRIPTION: Demonstrates how to capture Ant Design styles generated during server-side rendering using `@ant-design/cssinjs` and embed them directly into the HTML output. It involves creating a cache, wrapping the application with `StyleProvider`, rendering the app to a string using `renderToString`, and extracting the CSS text from the cache with `extractStyle`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import type Entity from '@ant-design/cssinjs/es/Cache';
import { renderToString } from 'react-dom/server';

const App = () => {
  // SSR Render
  const cache = React.useMemo<Entity>(() => createCache(), []);
  const html = renderToString(
    <StyleProvider cache={cache}>
      <MyApp />
    </StyleProvider>,
  );

  // Grab style from cache
  const styleText = extractStyle(cache);

  // Mix with style
  return `
    <!DOCTYPE html>
    <html>
      <head>
        ${styleText}
      </head>
      <body>
        <div id="root">${html}</div>
      </body>
    </html>
  `;
};

export default App;
```

----------------------------------------

TITLE: Validating Ant Design Form Item using Rules (JSX)
DESCRIPTION: Illustrates the recommended approach for handling constraints in Ant Design forms by applying validation `rules` to the `Form.Item` wrapper instead of relying solely on component-level props. This separates display from validation logic.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.zh-CN.md#_snippet_8

LANGUAGE: JSX
CODE:
```
<img height="160" alt="Form rules" src="https://github.com/ant-design/ant-design/assets/5378891/52b35fb3-a800-447f-85b3-684d9a65c8d1">
```

----------------------------------------

TITLE: Implementing On-Demand CSS Extraction in Next.js _document.tsx
DESCRIPTION: Illustrates how to implement the 'Extract on demand' CSS strategy within a Next.js application's custom `_document.tsx`. It overrides `getInitialProps`, creates a `@ant-design/cssinjs` cache, wraps the `App` component with `StyleProvider` during `renderPage` to capture styles used on the server. After rendering, it calls the custom `doExtraStyle` function (from the previous snippet) with the cache to generate and save the required CSS file, and finally injects a `<link>` tag referencing the generated, hash-named CSS file into the HTML `<Head>`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_10

LANGUAGE: tsx
CODE:
```
// _document.tsx
import { createCache, StyleProvider } from '@ant-design/cssinjs';
import type { DocumentContext } from 'next/document';
import Document, { Head, Html, Main, NextScript } from 'next/document';

import { doExtraStyle } from '../scripts/genAntdCss';

export default class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const cache = createCache();
    let fileName = '';
    const originalRenderPage = ctx.renderPage;
    ctx.renderPage = () =>
      originalRenderPage({
        enhanceApp: (App) => (props) => (
          <StyleProvider cache={cache}>
            <App {...props} />
          </StyleProvider>
        ),
      });

    const initialProps = await Document.getInitialProps(ctx);
    // 1.1 extract style which had been used
    fileName = doExtraStyle({
      cache,
    });
    return {
      ...initialProps,
      styles: (
        <>
          {initialProps.styles}
          {/* 1.2 inject css */}
          {fileName && <link rel="stylesheet" href={`/${fileName}`} />}
        </>
      ),
    };
  }

  render() {
    return (
      <Html lang="en">
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}
```

----------------------------------------

TITLE: Configuring Ant Design SSR Styles with App Router (TSX)
DESCRIPTION: Implement server-side rendering (SSR) style extraction for Ant Design components in Next.js App Router by wrapping the application's children with `AntdRegistry` in the root layout file (app/layout.tsx). This requires installing `@ant-design/nextjs-registry`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.zh-CN.md#_snippet_2

LANGUAGE: TSX
CODE:
```
import React from 'react';
import { AntdRegistry } from '@ant-design/nextjs-registry';

const RootLayout = ({ children }: React.PropsWithChildren) => (
  <html lang="en">
    <body>
      <AntdRegistry>{children}</AntdRegistry>
    </body>
  </html>
);

export default RootLayout;
```

----------------------------------------

TITLE: Optimized Context with useMemo
DESCRIPTION: Shows how to optimize context value creation using useMemo to prevent unnecessary child re-renders.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/render-times.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
const context = React.useMemo(() => ({ prop1, prop2 }), [prop1, prop2]);

return (
  <MyContext.Provider value={context}>
    <Child />
  </MyContext.Provider>
);
```

----------------------------------------

TITLE: Specifying rowKey for Unique Item Identification in Ant Design Transfer (JSX)
DESCRIPTION: Shows how to explicitly provide a key extraction function via the rowKey prop in the Transfer component when provided data items lack a key property. This ensures each item is uniquely identified according to React's list rendering requirements. Depends on Ant Design's Transfer component and requires the data items to have a unique 'uid' property. Input: function taking a record and returning the uid; Output: Transfer renders with uniquely keyed items. Failure to provide unique keys will raise warnings or cause improper rendering.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/transfer/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
// eg. your primary key is `uid`
return <Transfer rowKey={(record) => record.uid} />;
```

----------------------------------------

TITLE: Configuring Ant Design Component Tokens with ConfigProvider (React/TSX)
DESCRIPTION: This snippet demonstrates how to use Ant Design's ConfigProvider component to apply custom token values to specific components. It shows how to set the `colorPrimary` token for the Radio and Checkbox components within the `theme.components` object.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Checkbox, ConfigProvider, Radio } from 'antd';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      components: {
        Radio: {
          colorPrimary: '#00b96b',
        },
        Checkbox: {
          colorPrimary: '#ff4d4f',
        },
      },
    }}
  >
    <Radio>Radio</Radio>
    <Checkbox>Checkbox</Checkbox>
  </ConfigProvider>
);

export default App;
```

----------------------------------------

TITLE: Configuring Primary Color Seed Token in Ant Design Theme (TSX)
DESCRIPTION: This snippet demonstrates defining a basic theme object in Ant Design by setting the `colorPrimary` property within the `token` object. `colorPrimary` is a Seed Token, meaning it's a foundational value from which other theme colors are derived automatically by Ant Design's internal algorithms.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_8

LANGUAGE: tsx
CODE:
```
const theme = {
  token: {
    colorPrimary: '#1890ff',
  },
};
```

----------------------------------------

TITLE: Defining a GitHub Actions CI/CD Workflow (YAML)
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow triggered by push and pull request events on the master branch. It includes a single job 'CI' running on Ubuntu, which checks out code, sets up Node.js (v16) and pnpm (v7.0.0), installs dependencies, runs linters, builds the project, uploads build artifacts, and deploys the './dist' directory to GitHub Pages (only on master push). It utilizes several standard GitHub Actions like `actions/checkout`, `oven-sh/setup-bun`, `pnpm/action-setup`, `actions/upload-artifact`, and `peaceiris/actions-gh-pages`. Write permissions for contents are required, and the `GITHUB_TOKEN` secret is necessary for deployment.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/github-actions-workflow.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
# zh: Event 设置为 master 分支的 pull request 事件和 push 事件
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: write

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (检出代码)
        uses: actions/checkout@v4

      - name: Setup Node.js (设置 node 版本)
        uses: oven-sh/setup-bun@v2
        with:
          node-version: 16

      - name: Install pnpm (安装 pnpm)
        uses: pnpm/action-setup@v2
        with:
          version: 7.0.0

      - name: Install dependencies (安装依赖)
        run: pnpm install

      - name: lint (代码检查)
        run: pnpm run lint

      # en: The template does not contain test cases. If you need to use test cases, you can uncomment it
      # zh: 初始化模板中不包含测试用例，如需使用测试用例，可取消注释
      # - name: Test (测试)
      #   run: pnpm run test

      - name: Build (构建)
        run: pnpm run build

      - name: Upload build artifacts (上传构建产物)
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist

      - name: Deploy to GitHub Pages (部署到 GitHub Pages)
        uses: peaceiris/actions-gh-pages@v3
        # en: Only deploy when the push event of the master branch is triggered
        # zh: 仅在触发 master 分支的 push 事件时部署
        if: github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
```

----------------------------------------

TITLE: Hook-based Message Implementation
DESCRIPTION: Shows the new hooks-based approach for displaying messages, which properly handles context and configuration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
const Demo = () => {
  const [messageApi, contextHolder] = message.useMessage();

  const info = () => {
    messageApi.info('Hello, Ant Design!');
  };

  return (
    <>
      {/* Different insert holder position will get different context */}
      {contextHolder}
      <Button type="primary" onClick={info}>
        Display normal message
      </Button>
    </>
  );
};
```

----------------------------------------

TITLE: Customizing Ant Design Theme using ConfigProvider in React (TSX)
DESCRIPTION: Illustrates how to customize the Ant Design theme by wrapping components with `ConfigProvider`. This example modifies the primary color (`colorPrimary`) token to '#00b96b', changing the appearance of the enclosed primary button.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-farm.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button, ConfigProvider } from 'antd';

export function Main() {
  return (
    <ConfigProvider theme={{ token: { colorPrimary: '#00b96b' } }}>
      <Button type="primary">Button</Button>
    </ConfigProvider>
  );
}
```

----------------------------------------

TITLE: Using 'use client' Directive for Client-Side Rendering in Next.js
DESCRIPTION: This example shows how to use the 'use client' directive to make a page fully client-rendered in Next.js, avoiding issues with Ant Design components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
'use client';

// This is not real world code, just for explain
export default () => {
  return (
    <div className="App">
      <Form>
        <Form.Item>
          <Button type="primary">Button</Button>
        </Form.Item>
      </Form>
    </div>
  );
};
```

----------------------------------------

TITLE: Configuring Ant Design Component Tokens using ConfigProvider (React)
DESCRIPTION: This React code demonstrates how to customize Ant Design component tokens globally for specific components. It uses the `ConfigProvider` component to wrap parts of the application and applies custom theme settings via the `theme.components` prop. In this example, it sets a custom `colorPrimary` for both `Radio` and `Checkbox` components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Checkbox, ConfigProvider, Radio } from 'antd';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      components: {
        Radio: {
          colorPrimary: '#00b96b',
        },
        Checkbox: {
          colorPrimary: '#ff4d4f',
        },
      },
    }}
  >
    <Radio>Radio</Radio>
    <Checkbox>Checkbox</Checkbox>
  </ConfigProvider>
);

export default App;
```

----------------------------------------

TITLE: Importing and Using Ant Design Button (TSX)
DESCRIPTION: This TSX snippet shows how to import the `Button` component from the 'antd' library and render it within a React functional component. It requires 'antd' and 'react' to be installed as dependencies. The button is rendered with the 'primary' type and the text 'Button'. This code should be placed in a React component file, typically src/main.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-farm.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button } from 'antd';

export function Main() {
  return (
    <div>
      <Button type="primary">Button</Button>
    </div>
  );
}
```

----------------------------------------

TITLE: Rendering Tree with Async Loading in React JSX
DESCRIPTION: Example demonstrating how to render a Tree component with asynchronously loaded data. This pattern is recommended when loading tree nodes dynamically to avoid performance issues.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree/index.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
{
  this.state.treeData.length ? (
    <Tree>
      {this.state.treeData.map((data) => (
        <TreeNode />
      ))}
    </Tree>
  ) : (
    'loading tree'
  );
}
```

----------------------------------------

TITLE: Rewrite Next.js _document.tsx for Ant Design SSR Styles
DESCRIPTION: Modifies the default Next.js `_document.tsx` to integrate Ant Design's `cssinjs` for server-side style extraction. This prevents style flickering by injecting the necessary CSS into the HTML head during the initial render. It uses `createCache`, `extractStyle`, and `StyleProvider` from `@ant-design/cssinjs`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#_snippet_3

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import Document, { Head, Html, Main, NextScript } from 'next/document';
import type { DocumentContext } from 'next/document';

const MyDocument = () => (
  <Html lang="en">
    <Head />
    <body>
      <Main />
      <NextScript />
    </body>
  </Html>
);

MyDocument.getInitialProps = async (ctx: DocumentContext) => {
  const cache = createCache();
  const originalRenderPage = ctx.renderPage;
  ctx.renderPage = () =>
    originalRenderPage({
      enhanceApp: (App) => (props) => (
        <StyleProvider cache={cache}>
          <App {...props} />
        </StyleProvider>
      ),
    });

  const initialProps = await Document.getInitialProps(ctx);
  const style = extractStyle(cache, true);
  return {
    ...initialProps,
    styles: (
      <>
        {initialProps.styles}
        <style dangerouslySetInnerHTML={{ __html: style }} />
      </>
    ),
  };
};

export default MyDocument;
```

----------------------------------------

TITLE: Integrating antd CSS-in-JS in Next.js _document.tsx
DESCRIPTION: This snippet modifies the default _document.tsx to use @ant-design/cssinjs for server-side style extraction. It creates a cache, wraps the App rendering with StyleProvider, extracts the generated styles, and injects them into the <head> of the HTML document. This ensures antd styles are present on the initial server render.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.zh-CN.md#_snippet_3

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import Document, { Head, Html, Main, NextScript } from 'next/document';
import type { DocumentContext } from 'next/document';

const MyDocument = () => (
  <Html lang="en">
    <Head />
    <body>
      <Main />
      <NextScript />
    </body>
  </Html>
);

MyDocument.getInitialProps = async (ctx: DocumentContext) => {
  const cache = createCache();
  const originalRenderPage = ctx.renderPage;
  ctx.renderPage = () =>
    originalRenderPage({
      enhanceApp: (App) => (props) => (
        <StyleProvider cache={cache}>
          <App {...props} />
        </StyleProvider>
      ),
    });

  const initialProps = await Document.getInitialProps(ctx);
  const style = extractStyle(cache, true);
  return {
    ...initialProps,
    styles: (
      <>
        {initialProps.styles}
        <style dangerouslySetInnerHTML={{ __html: style }} />
      </>
    ),
  };
};

export default MyDocument;
```

----------------------------------------

TITLE: Rendering Dynamic Fields with Form.List (TSX)
DESCRIPTION: This snippet shows the basic usage of `Form.List` to manage an array of form fields dynamically. It uses a render prop function that receives the current `fields` array and allows mapping over it to render a `Form.Item` and an `Input` for each field entry. The `{...field}` spread includes necessary props like `key`, `name`, and `fieldKey` for each item.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
<Form.List>
  {(fields) =>
    fields.map((field) => (
      <Form.Item {...field}>
        <Input />
      </Form.Item>
    ))
  }
</Form.List>
```

----------------------------------------

TITLE: Importing and Using Ant Design v4 and v5 Components Simultaneously via Alias in React (TSX)
DESCRIPTION: Example React component demonstrating how to import components from both the standard `antd` (v4) and the aliased `antd-v5` package simultaneously within the same file, using different import names (e.g., `Button4`, `Button5`).
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_17

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button as Button4 } from 'antd'; // v4
import { Button as Button5 } from 'antd-v5'; // v5

export default () => (
  <>
    <Button4 />
    <Button5 />
  </>
);
```

----------------------------------------

TITLE: Using Ant Design Modal Hook for Context Access
DESCRIPTION: Illustrates the usage of the `Modal.useModal()` hook to obtain a `modal` instance and a `contextHolder`. The `modal` instance is used to open modals (e.g., `modal.confirm`) within a React effect, and the `contextHolder` must be rendered within the component tree to provide context to the created modals.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.zh-CN.md#_snippet_2

LANGUAGE: jsx
CODE:
```
const [modal, contextHolder] = Modal.useModal();

React.useEffect(() => {
  modal.confirm({
    // ...
  });
}, []);

return <div>{contextHolder}</div>;
```

----------------------------------------

TITLE: Install Ant Design Package
DESCRIPTION: Add the Ant Design library as a dependency to your project using various package managers like npm, yarn, pnpm, or bun.
SOURCE: https://github.com/ant-design/ant-design/blob/master/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install antd
```

LANGUAGE: bash
CODE:
```
yarn add antd
```

LANGUAGE: bash
CODE:
```
pnpm add antd
```

LANGUAGE: bash
CODE:
```
bun add antd
```

----------------------------------------

TITLE: Using Ant Design Components in React
DESCRIPTION: Demonstrates how to import and use basic Ant Design components like Button and DatePicker within a React functional component written in TSX.
SOURCE: https://github.com/ant-design/ant-design/blob/master/README.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Button, DatePicker } from 'antd';

export default () => (
  <>
    <Button type="primary">PRESS ME</Button>
    <DatePicker placeholder="select date" />
  <>
);
```

----------------------------------------

TITLE: Configuring Internationalization with ConfigProvider and dayjs in JSX
DESCRIPTION: This snippet demonstrates how to configure internationalization for Ant Design components globally using `ConfigProvider` and `dayjs`. It shows importing the necessary locale files for Ant Design and `dayjs`, setting the `dayjs` locale, and wrapping components with `ConfigProvider` to apply the locale. This is the recommended approach for setting languages other than the default en-US.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
// 默认语言为 en-US，如果你需要设置其他语言，推荐在入口文件全局设置 locale
// 确保还导入相关的 dayjs 文件，否则所有文本的区域设置都不会更改（例如范围选择器月份）
import locale from 'antd/locale/zh_CN';
import dayjs from 'dayjs';

import 'dayjs/locale/zh-cn';

dayjs.locale('zh-cn');

<ConfigProvider locale={locale}>
  <DatePicker defaultValue={dayjs('2015-01-01', 'YYYY-MM-DD')} />
</ConfigProvider>;
```

----------------------------------------

TITLE: Using Ant Design Form.useFormInstance Hook (TSX)
DESCRIPTION: Illustrates how to use the Form.useFormInstance hook within a child component to access the form instance provided by the parent Form, avoiding prop drilling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_9

LANGUAGE: TSX
CODE:
```
const Sub = () => {
  const form = Form.useFormInstance();

  return <Button onClick={() => form.setFieldsValue({})} />;
};

export default () => {
  const [form] = Form.useForm();

  return (
    <Form form={form}>
      <Sub />
    </Form>
  );
};
```

----------------------------------------

TITLE: Converting DOM Interaction and Assertions from Enzyme to Testing Library - JavaScript
DESCRIPTION: The snippet illustrates how to replace Enzyme's component instance/manipulation and assertion APIs with native DOM operations and fireEvent in React Testing Library. It swaps out methods like find and props for querySelector and evaluates element presence to match assertions. Input parameters include DOM selectors and component containers, and the output is assertion results for component visibility or state.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_2

LANGUAGE: diff
CODE:
```
    expect(ref.current.getPopupDomNode()).toBe(null);\n--  popover.find('span').simulate('click');\n--  expect(popover.find('Trigger PopupInner').props().visible).toBeTruthy();\n\n++  expect(container.querySelector('.ant-popover-inner-content')).toBeFalsy();\n++  fireEvent.click(popover.container.querySelector('span'));\n++  expect(container.querySelector('.ant-popover-inner-content')).toBeTruthy();
```

----------------------------------------

TITLE: Using Checkbox Inside Form.Item - JSX/TSX
DESCRIPTION: This JSX/TSX snippet demonstrates integrating a controlled Ant Design Checkbox within a Form.Item, using valuePropName to map the form field to Checkbox's checked property. For React and Ant Design projects, this ensures proper form data binding to Checkbox state during validation and submission. Requires Ant Design's Form and Checkbox components and assumes a form context. The 'name' defines the form field, and valuePropName specifies to use 'checked' instead of the default 'value' prop; no explicit outputs except correct form integration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/checkbox/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<Form.Item name="fieldA" valuePropName="checked">
  <Checkbox />
</Form.Item>
```

----------------------------------------

TITLE: Dynamic Theme Switching in Ant Design React
DESCRIPTION: This snippet shows how to implement dynamic theme switching in Ant Design. It uses a ColorPicker to allow users to change the primary color of the theme in real-time.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_4

LANGUAGE: jsx
CODE:
```
import { Button, ConfigProvider, Space, Input, ColorPicker, Divider } from 'antd';
import React from 'react';

const App: React.FC = () => {
  const [primary, setPrimary] = React.useState('#1677ff');

  return (
    <>
      <ColorPicker showText value={primary} onChange={(color) => setPrimary(color.toHexString())} />
      <Divider />
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: primary,
          },
        }}
      >
        <Space>
          <Input placeholder="Please Input" />
          <Button type="primary">Submit</Button>
        </Space>
      </ConfigProvider>
    </>
  );
}

export default App;
```

----------------------------------------

TITLE: Hooks-based Message API Usage
DESCRIPTION: Shows the new hooks-based approach for message components in Ant Design v4, which properly maintains context by using contextHolder.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
const Demo = () => {
  const [messageApi, contextHolder] = message.useMessage();

  const info = () => {
    messageApi.info('Hello, Ant Design!');
  };

  return (
    <>
      {/* Different insert holder position will get different context */}
      {contextHolder}
      <Button type="primary" onClick={info}>
        Display normal message
      </Button>
    </>
  );
};
```

----------------------------------------

TITLE: Defining a Primary Button using Type (JSX)
DESCRIPTION: This JSX snippet demonstrates creating an Ant Design primary button using the `type="primary"` prop. This is presented as a shorthand syntax for a standard filled primary button.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Button type="primary">click</Button>
```

----------------------------------------

TITLE: Referencing Basic InputNumber Example (TSX)
DESCRIPTION: This tag references an external file (`./demo/basic.tsx`) that contains a basic usage example of the Ant Design InputNumber component in a React/TypeScript application. It demonstrates the fundamental implementation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
<code src="./demo/basic.tsx">Basic</code>
```

----------------------------------------

TITLE: Migrating Rendering from Enzyme to React Testing Library - JavaScript
DESCRIPTION: This code snippet demonstrates the transition from Enzyme's mount API to React Testing Library's render function for rendering components in tests. The updated approach expects the use of container objects for querying DOM elements. Prerequisites include @testing-library/react, and the code assumes the presence of React components and a testing environment like Jest. The primary parameters are the rendered components, with outputs that grant access to the DOM structure for assertions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_0

LANGUAGE: diff
CODE:
```
--  import { mount } from 'enzyme';\n++  import { render } from '@testing-library/react';\n\n--  const wrapper = mount(\n++  const { container } = render(\n      <ConfigProvider getPopupContainer={getPopupContainer}>\n        <Slider />\n      </ConfigProvider>,\n    );
```

----------------------------------------

TITLE: Correctly Nesting Form.Item Children with HOC in Ant Design Form (JSX)
DESCRIPTION: Provides the correct approach to handle nested form controls within `Form.Item` by using a Higher-Order Component (HOC) or wrapper component (`MyInput`) that explicitly passes down the necessary form props (`{...props}`) to the actual form control (`Input`).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_20

LANGUAGE: jsx
CODE:
```
const MyInput = (props) => (
  <div>
    <h3>I am a wrapped Input</h3>
    <Input {...props} />
  </div>
);

<Form.Item name="input">
  <MyInput />
</Form.Item>;
```

----------------------------------------

TITLE: Async Modal Confirmation with Promise in React
DESCRIPTION: Shows how to use modal.confirm as a Promise, allowing for await operations. The function returns true for 'onOk' and false for 'onCancel'.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// Return `true` when click `onOk` and `false` when click `onCancel`
const confirmed = await modal.confirm({ ... });
```

----------------------------------------

TITLE: Using AntdRegistry for SSR Styles in Next.js App Router
DESCRIPTION: Wrap the application content with `AntdRegistry` in the root layout file (`app/layout.tsx`) to handle server-side rendering of Ant Design styles and prevent page flicker when using the Next.js App Router.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#_snippet_2

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { AntdRegistry } from '@ant-design/nextjs-registry';

const RootLayout = ({ children }: React.PropsWithChildren) => (
  <html lang="en">
    <body>
      <AntdRegistry>{children}</AntdRegistry>
    </body>
  </html>
);

export default RootLayout;
```

----------------------------------------

TITLE: Implementing Select Component with Options in React
DESCRIPTION: Demonstrates the recommended usage of the Select component with options array. This approach offers better performance and simpler code style.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
return <Select options={[{ value: 'sample', label: <span>sample</span> }]} />;
```

----------------------------------------

TITLE: Importing and Using an Ant Design Button in React (TSX)
DESCRIPTION: Demonstrates how to import the `Button` component from the `antd` library and render it within a React functional component (`Main`). This example shows a basic primary button after installing antd via npm/yarn/pnpm/bun.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-farm.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button } from 'antd';

export function Main() {
  return (
    <div>
      <Button type="primary">Button</Button>
    </div>
  );
}
```

----------------------------------------

TITLE: Accessing Form Instance in Child Components using Form.useFormInstance Hook (TSX)
DESCRIPTION: This snippet demonstrates the `Form.useFormInstance` hook, which allows child components nested within a `<Form>` to access the parent Form's instance without needing it to be passed down as a prop. The `Sub` component uses this hook to get the `form` instance and call its `setFieldsValue` method.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
const Sub = () => {
  const form = Form.useFormInstance();

  return <Button onClick={() => form.setFieldsValue({})} />;
};

export default () => {
  const [form] = Form.useForm();

  return (
    <Form form={form}>
      <Sub />
    </Form>
  );
};
```

----------------------------------------

TITLE: Replacing Deprecated Ant Design BackTop Component with FloatButton in v5
DESCRIPTION: Shows the migration path for the `BackTop` component, which is deprecated in Ant Design v5. The example replaces the `BackTop` import and usage with the equivalent `FloatButton.BackTop` component within a React functional component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_4

LANGUAGE: diff
CODE:
```
- import { BackTop } from 'antd';
+ import { FloatButton } from 'antd';

  const App: React.FC = () => (
    <div>
-     <BackTop />
+     <FloatButton.BackTop />
    </div>
  );

  export default App;
```

----------------------------------------

TITLE: Marking Component as Client for Next.js App Router (TSX)
DESCRIPTION: This snippet demonstrates a simpler alternative workaround for the Next.js App Router sub-component access issue. By adding the `'use client';` directive at the top of the file, the entire component is marked for client-side rendering, bypassing the server component restrictions and allowing direct use of Ant Design sub-components like `Form.Item`. It depends on `antd/Form` and `antd/Button`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.zh-CN.md#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client';

// 非真实代码，仅做逻辑说明
export default () => (
  <div className="App">
    <Form>
      <Form.Item>
        <Button type="primary">Button</Button>
      </Form.Item>
    </Form>
  </div>
);
```

----------------------------------------

TITLE: Importing and Using Badge Component in React
DESCRIPTION: Example demonstrations of Badge component usage including basic implementation, standalone usage, overflow count handling, dot display, dynamic changes, clickable badges, offset positioning, size variations, status indicators, colorful badges, and ribbon styles.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/no-wrapper.tsx">Standalone</code>
<code src="./demo/overflow.tsx">Overflow Count</code>
<code src="./demo/dot.tsx">Red badge</code>
<code src="./demo/change.tsx">Dynamic</code>
<code src="./demo/link.tsx">Clickable</code>
<code src="./demo/offset.tsx">Offset</code>
<code src="./demo/size.tsx">Size</code>
<code src="./demo/status.tsx">Status</code>
<code src="./demo/colorful.tsx">Colorful Badge</code>
<code src="./demo/ribbon.tsx">Ribbon</code>
<code src="./demo/ribbon-debug.tsx" debug>Ribbon Debug</code>
<code src="./demo/mix.tsx" debug>Mixed usage</code>
<code src="./demo/title.tsx" debug>Title</code>
<code src="./demo/colorful-with-count-debug.tsx" debug>Colorful Badge support count Debug</code>
<code src="./demo/component-token.tsx" debug>Component Token</code>
```

----------------------------------------

TITLE: Initializing Popup Container with Custom getContainer - React TypeScript
DESCRIPTION: This snippet illustrates a typical pattern for creating pop-up containers in React using a ref to an element, and invoking a getContainer function during the component's mounting phase. The useEffect hook simulates calling getContainer when the referenced DOM node is available. This demonstrates the foundational method by which floating UI components ascertain their mounting DOM node. Dependencies include React, and key parameters include eleRef for the element reference. The expected behavior is that getContainer returns an HTML element under which the popup will be rendered.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.en-US.md#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Fake Code. Just for Demo\nconst PopupWrapper = () => {\n  const eleRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    // It's much complex with timing in real world. You can view the source for more detail:\n    // https://github.com/react-component/portal/blob/master/src/Portal.tsx\n    const container: HTMLElement = getContainer(eleRef.current);\n\n    // ...\n  }, []);\n\n  return (\n    <div ref={eleRef}>\n      {...}\n    </div>\n  );\n}\n
```

----------------------------------------

TITLE: Awaiting Ant Design Modal Hook Confirmation Result
DESCRIPTION: Demonstrates how the `modal` instance obtained from `Modal.useModal()` supports awaiting the result of confirmation modals. The `await` operation resolves with `true` if the 'OK' button is clicked and `false` if the 'Cancel' button is clicked.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.zh-CN.md#_snippet_3

LANGUAGE: tsx
CODE:
```
//点击 `onOk` 时返回 `true`，点击 `onCancel` 时返回 `false`
const confirmed = await modal.confirm({ ... });
```

----------------------------------------

TITLE: Handling Form Validation Results with validateFields (JSX)
DESCRIPTION: This snippet shows how to use the `validateFields` method of the Form instance, which returns a Promise. It demonstrates handling both successful validation (resolving with form `values`) and validation failure (rejecting with an `errorInfo` object containing values, error fields, and an outOfDate flag).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_6

LANGUAGE: jsx
CODE:
```
validateFields()
  .then((values) => {
    /*
  values:
    {
      username: 'username',
      password: 'password',
    }
  */
  })
  .catch((errorInfo) => {
    /*
    errorInfo:
      {
        values: {
          username: 'username',
          password: 'password',
        },
        errorFields: [
          { name: ['password'], errors: ['Please input your Password!'] },
        ],
        outOfDate: false,
      }
    */
  });
```

----------------------------------------

TITLE: Getting Form.Item Status with useStatus
DESCRIPTION: Illustrates the usage of `Form.Item.useStatus` within a custom input component (`CustomInput`) to retrieve the validation status (`status`) and error messages (`errors`) of the parent `Form.Item`. This allows styling or displaying feedback based on validation results.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_12

LANGUAGE: tsx
CODE:
```
const CustomInput = ({ value, onChange }) => {
  const { status, errors } = Form.Item.useStatus();
  return (
    <input
      value={value}
      onChange={onChange}
      className={`custom-input-${status}`}
      placeholder={(errors.length && errors[0]) || ''}
    />
  );
};

export default () => (
  <Form>
    <Form.Item name="username">
      <CustomInput />
    </Form.Item>
  </Form>
);
```

----------------------------------------

TITLE: Customizing Link Color via Alias Token in Ant Design Theme (TSX)
DESCRIPTION: This snippet illustrates customizing the color of link elements by setting the `colorLink` Alias Token within the `token` object of the Ant Design theme. Alias Tokens are used to control the style of specific UI elements or component states, often acting as aliases for Map Tokens but allowing targeted overrides.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_10

LANGUAGE: tsx
CODE:
```
const theme = {
  token: {
    colorLink: '#1890ff',
  },
};
```

----------------------------------------

TITLE: Importing and Using Basic Icons (JSX)
DESCRIPTION: Demonstrates how to import and render standard Ant Design icons from the `@ant-design/icons` package. It shows examples of outlined, filled, and two-tone themes, including how to specify the `twoToneColor`. Required dependency: `@ant-design/icons`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#_snippet_0

LANGUAGE: JSX
CODE:
```
import { StarOutlined, StarFilled, StarTwoTone } from '@ant-design/icons';

<StarOutlined />
<StarFilled />
<StarTwoTone twoToneColor="#eb2f96" />
```

----------------------------------------

TITLE: Configuring Ant Design Message Globally (JavaScript)
DESCRIPTION: This snippet demonstrates how to set global configuration options for the Ant Design Message component using the `message.config` method. It allows customizing properties such as the distance from the top (`top`), the default auto-dismiss duration (`duration`), the maximum number of messages displayed concurrently (`maxCount`), enabling RTL mode (`rtl`), and setting a custom CSS prefix class (`prefixCls`).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/message/index.en-US.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
message.config({
  top: 100,
  duration: 2,
  maxCount: 3,
  rtl: true,
  prefixCls: 'my-message'
});
```

----------------------------------------

TITLE: Implementing Dynamic Progress Bar in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to create a dynamic progress bar using Ant Design's Progress component in a React application. It utilizes the useState hook to manage the progress state and useEffect to simulate progress changes over time.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/dynamic.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Progress } from 'antd';
import React, { useState, useEffect } from 'react';

const App: React.FC = () => {
  const [percent, setPercent] = useState<number>(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setPercent((prevPercent) => {
        const newPercent = prevPercent + 1;
        if (newPercent >= 100) {
          clearInterval(timer);
        }
        return newPercent;
      });
    }, 100);
    return () => clearInterval(timer);
  }, []);

  return <Progress percent={percent} />;
};

export default App;
```

----------------------------------------

TITLE: Basic Card Usage in JSX
DESCRIPTION: Demonstrates the basic implementation of a Card component with a title and content.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/card/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Card title="Card title">Card content</Card>
```

----------------------------------------

TITLE: Using message.useMessage Hook for Context (TypeScript/React)
DESCRIPTION: This snippet shows how to use the message.useMessage hook to obtain an API instance and a contextHolder node. The contextHolder must be placed within the component tree where context is needed, allowing message calls made via the api instance to access that context (e.g., from ConfigProvider or custom contexts). This is necessary when static methods cannot access required context information.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/message/index.zh-CN.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const [api, contextHolder] = message.useMessage();

return (
  <Context1.Provider value="Ant">
    {/* contextHolder 在 Context1 内，它可以获得 Context1 的 context */}
    {contextHolder}
    <Context2.Provider value="Design">
      {/* contextHolder 在 Context2 外，因而不会获得 Context2 的 context */}
    </Context2.Provider>
  </Context1.Provider>
);
```

----------------------------------------

TITLE: Presenting Flex Layout Basic Usage - Ant Design - TypeScript/TSX
DESCRIPTION: This snippet references the "basic.tsx" file containing a sample demonstrating the basic usage of the Flex component in Ant Design. It likely showcases default alignment and arrangement for elements inside a Flex container. It depends on React, Ant Design v5.10.0+ Flex component, and TSX syntax. Inputs typically include Flex properties via props; outputs are rendered component layouts. Limitations depend on those of the Flex and its documented API.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/basic.tsx\">Basic</code>
```

----------------------------------------

TITLE: Binding Ant Design Switch in Form.Item with valuePropName (TSX)
DESCRIPTION: Demonstrates how to correctly bind the Ant Design Switch component within a Form.Item. Since Form.Item defaults to binding the 'value' property and Switch uses 'checked' for its state, you must use the 'valuePropName' prop set to 'checked' on Form.Item.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/switch/index.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
<Form.Item name="fieldA" valuePropName="checked">
  <Switch />
</Form.Item>
```

----------------------------------------

TITLE: Implementing React Suspense for Routing and Loading (React)
DESCRIPTION: This snippet demonstrates a common pattern for integrating React Suspense with routing. It shows how a `Suspense` component can wrap route definitions (`Routs`) to provide a loading fallback (`<Loading />`) while route components are being fetched or prepared, typically for lazy-loaded routes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.zh-CN.md#_snippet_3

LANGUAGE: tsx
CODE:
```
<BrowserRoutes>
  <Routs>
    <Suspense fallback={<Loading />} />
  </Routs>
</BrowserRoutes>
```

----------------------------------------

TITLE: Context Re-render Issue Example
DESCRIPTION: Demonstrates a common pitfall where unnecessary re-renders occur due to new context object creation on each render.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/render-times.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
const MyContext = React.createContext<{ prop1: string; prop2: string }>();

const Child = React.memo(() => {
  const { prop1 } = React.useContext(MyContext);
  return <>{prop1}</>;
});

const Root = ({ prop1, prop2 }) => {
  const [count, setCount] = React.useState(0);

  // Some logic to trigger rerender
  React.useEffect(() => {
    setCount(1);
  }, []);

  return (
    <MyContext.Provider value={{ prop1, prop2 }}>
      <Child />
    </MyContext.Provider>
  );
};
```

----------------------------------------

TITLE: Specifying rowKey for Ant Design Table
DESCRIPTION: These snippets show how to use the `rowKey` prop in the Ant Design Table component. This is necessary when the `dataSource` items do not have a default `key` property. `rowKey` can be a string specifying the key property name or a function that returns the key for each record.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.zh-CN.md#_snippet_5

LANGUAGE: jsx
CODE:
```
// 比如你的数据主键是 uid
return <Table rowKey="uid" />;
```

LANGUAGE: jsx
CODE:
```
// 或
return <Table rowKey={(record) => record.uid} />;
```

----------------------------------------

TITLE: Integrating Switch with Form.Item in Ant Design (React, TSX)
DESCRIPTION: This snippet demonstrates how to properly bind Ant Design's Switch component to a form field within Form.Item by setting the valuePropName prop to 'checked'. This ensures that the Switch's checked state is synchronized with form values, as Form.Item binds by default to a 'value' prop. Dependencies include React, antd's Form and Switch components, and TypeScript support for .tsx files. The input is a form field definition, and the output is a functional switch toggle integrated with form state. Constraints: This setup is necessary because Switch's controlling prop is 'checked', not 'value'.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/switch/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: TSX
CODE:
```
```tsx | pure\n<Form.Item name=\"fieldA\" valuePropName=\"checked\">\n  <Switch />\n</Form.Item>\n```
```

----------------------------------------

TITLE: Configuring Row and Header Row Event Handlers in Ant Design Table (JSX)
DESCRIPTION: This snippet illustrates how to attach event handlers to rows and header rows in an Ant Design Table using the onRow and onHeaderRow props in React. Through the onRow callback, developers can provide custom event handlers for actions such as clicking, double clicking, right-click/context menu, mouse enter, and mouse leave for table rows. Similarly, onHeaderRow allows adding events to header rows (e.g., click). Requires Ant Design Table and React. Parameters include 'record' and 'rowIndex' for rows, 'columns' and 'index' for header rows. This allows granular interaction support in table UIs.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Table
  onRow={(record, rowIndex) => {
    return {
      onClick: (event) => {}, // click row
      onDoubleClick: (event) => {}, // double click row
      onContextMenu: (event) => {}, // right button click row
      onMouseEnter: (event) => {}, // mouse enter row
      onMouseLeave: (event) => {}, // mouse leave row
    };
  }}
  onHeaderRow={(columns, index) => {
    return {
      onClick: () => {}, // click header row
    };
  }}
/>
```

----------------------------------------

TITLE: Configuring Webpack to Use Moment.js via Plugin in Ant Design v5 (JavaScript)
DESCRIPTION: Shows how to add the `AntdMomentWebpackPlugin` to the Webpack configuration's `plugins` array. This forces Ant Design v5 to use Moment.js instead of its default Day.js.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_13

LANGUAGE: javascript
CODE:
```
// webpack-config.js
import AntdMomentWebpackPlugin from '@ant-design/moment-webpack-plugin';

module.exports = {
  // ...
  plugins: [new AntdMomentWebpackPlugin()],
};
```

----------------------------------------

TITLE: Generating and Caching Per-Request CSS Files with Hashing in TypeScript
DESCRIPTION: Implements the 'Part Static Extract Style' approach for finer-grained control. After extracting styles (`styleText`) for a specific server request (using `extractStyle` as shown earlier), it generates an MD5 hash of the style content using Node.js `crypto`. This hash forms part of a unique CSS filename. The code checks if a file with this name exists using Node.js `fs`; if not, it writes the `styleText` to the file. This creates cacheable, on-demand CSS files specific to page content or user themes. Requires Node.js `crypto` and `fs` modules.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
import { createHash } from 'crypto';

// Get Style content like above
const styleText = extractStyle(cache);

const hash = createHash('md5').update(styleText).digest('hex');
const cssFileName = `css-${hash.substring(0, 8)}.css`;

if (!fs.existsSync(cssFileName)) {
  fs.writeFileSync(cssFileName, styleText);
}
```

----------------------------------------

TITLE: Customizing Ant Design Theme with ConfigProvider
DESCRIPTION: Example of how to customize the Ant Design theme using ConfigProvider. This snippet shows how to change the primary color of the theme.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-rsbuild.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { ConfigProvider } from 'antd';

const App: React.FC = () => (
  <ConfigProvider theme={{ token: { colorPrimary: '#00b96b' } }}>
    <MyApp />
  </ConfigProvider>
);

export default App;
```

----------------------------------------

TITLE: Importing Skeleton Component Examples in React
DESCRIPTION: This code snippet demonstrates how to import and use various examples of the Skeleton component in a React application. It includes basic usage, complex combinations, active animations, and different element types.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/skeleton/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/complex.tsx">Complex combination</code>
<code src="./demo/active.tsx">Active Animation</code>
<code src="./demo/element.tsx">Button/Avatar/Input/Image/Node</code>
<code src="./demo/children.tsx">Contains sub component</code>
<code src="./demo/list.tsx">List</code>
<code src="./demo/componentToken.tsx" debug>Custom component token</code>
```

----------------------------------------

TITLE: Rendering Tooltip Without Blinking Using State - React JSX - JavaScript
DESCRIPTION: Demonstrates how to render an Ant Design Tooltip in React such that it does not flicker or blink when its content changes, by binding the open state to the user variable. The title is conditionally set to a user's name. This pattern helps ensure stable UI when user data is loading or becomes undefined. Dependencies include React and Ant Design Tooltip. Input expects a user object; output is a Tooltip that gracefully updates its display.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tooltip/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
// `title` will not blink when `user` is empty\n<Tooltip open={user} title={user?.name} />
```

----------------------------------------

TITLE: Consuming Design Tokens in Ant Design React
DESCRIPTION: This snippet shows how to consume Design Tokens in a React component using the useToken hook provided by Ant Design. It applies token values to style a custom div element.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_6

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { Button, theme } from 'antd';

const { useToken } = theme;

const App: React.FC = () => {
  const { token } = useToken();

  return (
    <div
      style={{
        backgroundColor: token.colorPrimaryBg,
        padding: token.padding,
        borderRadius: token.borderRadius,
        color: token.colorPrimaryText,
        fontSize: token.fontSize,
      }}
    >
      Consume Design Token
    </div>
  );
};

export default App;
```

----------------------------------------

TITLE: Basic Button Color and Variant Usage - React/TypeScript
DESCRIPTION: Examples showing how to use type and color/variant properties in Button component. Demonstrates equivalent configurations between type and color/variant combinations.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Button type="primary">click</Button>

// Equivalent to:
<Button color="primary" variant="solid">
  click
</Button>
```

----------------------------------------

TITLE: Configuring Form Validation Messages Directly
DESCRIPTION: Demonstrates how to configure custom validation messages for an Ant Design Form component by passing a `validateMessages` object directly to the Form's props.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_0

LANGUAGE: jsx
CODE:
```
const validateMessages = {
  required: "'${name}' is required!",
  // ...
};

<Form validateMessages={validateMessages} />;
```

----------------------------------------

TITLE: Watching Unregistered Form Fields with Form.useWatch and preserve Option (TSX)
DESCRIPTION: This snippet demonstrates using `Form.useWatch` with the `preserve: true` option. This allows the hook to watch and retrieve the value of a field ('age') even if it's not associated with a registered `Form.Item`. The value is logged to the console, and it updates when `setFieldValue` is called.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_9

LANGUAGE: tsx
CODE:
```
const Demo = () => {
  const [form] = Form.useForm();

  const age = Form.useWatch('age', { form, preserve: true });
  console.log(age);

  return (
    <div>
      <Button onClick={() => form.setFieldValue('age', 2)}>Update</Button>
      <Form form={form}>
        <Form.Item name="name">
          <Input />
        </Form.Item>
      </Form>
    </div>
  );
};
```

----------------------------------------

TITLE: 抽屉表单
DESCRIPTION: Provides an example of embedding a form component inside the Drawer.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
./demo/form-in-drawer.tsx
```

----------------------------------------

TITLE: Using Preset Theme Algorithms in Ant Design React
DESCRIPTION: This example shows how to use preset theme algorithms in Ant Design, such as the dark algorithm. It demonstrates switching between different algorithms and combining multiple algorithms.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { Button, ConfigProvider, Input, Space, theme } from 'antd';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      // 1. Use dark algorithm
      algorithm: theme.darkAlgorithm,

      // 2. Combine dark algorithm and compact algorithm
      // algorithm: [theme.darkAlgorithm, theme.compactAlgorithm],
    }}
  >
    <Space>
      <Input placeholder="Please Input" />
      <Button type="primary">Submit</Button>
    </Space>
  </ConfigProvider>
);

export default App;
```

----------------------------------------

TITLE: Static Ant Design Style Export Script with Mixed Themes (TSX)
DESCRIPTION: A Node.js script extending the basic static export to include styles for multiple themes by wrapping the component node during extraction with Ant Design's `ConfigProvider`. This approach allows the generated CSS file to contain styles relevant to different themes that might be used throughout the application. Requires `@ant-design/static-style-extract`, `fs`, `react`, and `antd`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_4

LANGUAGE: tsx
CODE:
```
import fs from 'fs';
import React from 'react';
import { extractStyle } from '@ant-design/static-style-extract';
import { ConfigProvider } from 'antd';

const outputPath = './public/antd.min.css';

const testGreenColor = '#008000';
const testRedColor = '#ff0000';

const css = extractStyle((node) => (
  <>
    <ConfigProvider
      theme={{
        token: {
          colorBgBase: testGreenColor,
        },
      }}
    >
      {node}
    </ConfigProvider>
    <ConfigProvider
      theme={{
        token: {
          colorPrimary: testGreenColor,
        },
      }}
    >
      <ConfigProvider
        theme={{
          token: {
            colorBgBase: testRedColor,
          },
        }}
      >
        {node}
      </ConfigProvider>
    </ConfigProvider>
  </>
));

fs.writeFileSync(outputPath, css);
```

----------------------------------------

TITLE: Initializing Pagination Component in JSX
DESCRIPTION: Basic usage of the Pagination component with onChange event handler and total prop. This snippet demonstrates how to set up a simple pagination control.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/pagination/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Pagination onChange={onChange} total={50} />
```

----------------------------------------

TITLE: Enabling CSS Variables in Ant Design (React 18)
DESCRIPTION: This snippet shows how to enable CSS variable mode globally in an Ant Design application using the ConfigProvider component in React 18. In React 18, the unique key required for style isolation is automatically generated using `useId`, simplifying the configuration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/css-variables.zh-CN.md#_snippet_0

LANGUAGE: TSX
CODE:
```
<ConfigProvider theme={{ cssVar: true }}>
  <App />
</ConfigProvider>
```

----------------------------------------

TITLE: Defining a Primary Button using Color and Variant (JSX)
DESCRIPTION: This JSX snippet shows the equivalent way to create an Ant Design primary button using the `color="primary"` and `variant="solid"` props. The documentation explains that this provides more explicit control and is functionally identical to using `type="primary"`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Button color="primary" variant="solid">
  click
</Button>
```

----------------------------------------

TITLE: Defining TypeScript Type for Ant Design DatePicker disabledTime Prop
DESCRIPTION: This TypeScript code defines the type alias `DisabledTime`. It represents a function that accepts the currently selected date (`now` as a Dayjs object) and returns an object. This object can contain optional functions (`disabledHours`, `disabledMinutes`, `disabledSeconds`, `disabledMilliseconds`) which return arrays of numbers representing the time units to be disabled. These functions receive the preceding selected time units as arguments, allowing for context-aware time disabling in the Ant Design DatePicker.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
type DisabledTime = (now: Dayjs) => {
  disabledHours?: () => number[];
  disabledMinutes?: (selectedHour: number) => number[];
  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];
  disabledMilliseconds?: (
    selectedHour: number,
    selectedMinute: number,
    selectedSecond: number,
  ) => number[];
};
```

----------------------------------------

TITLE: Custom itemRender with react-router
DESCRIPTION: This example demonstrates how to use the `itemRender` prop with `react-router`'s `Link` component to customize the rendering of each breadcrumb item, allowing integration with client-side routing.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.zh-CN.md#_snippet_4

LANGUAGE: jsx
CODE:
```
import { Link } from 'react-router';

const items = [
  {
    path: '/index',
    title: 'home',
  },
  {
    path: '/first',
    title: 'first',
    children: [
      {
        path: '/general',
        title: 'General',
      },
      {
        path: '/layout',
        title: 'Layout',
      },
      {
        path: '/navigation',
        title: 'Navigation',
      },
    ],
  },
  {
    path: '/second',
    title: 'second',
  },
];

function itemRender(currentRoute, params, items, paths) {
  const isLast = currentRoute?.path === items[items.length - 1]?.path;

  return isLast ? (
    <span>{currentRoute.title}</span>
  ) : (
    <Link to={`/${paths.join('/')}`}>{currentRoute.title}</Link>
  );
}

return <Breadcrumb itemRender={itemRender} items={items} />;
```

----------------------------------------

TITLE: DatePicker API - onOk
DESCRIPTION: 点击确定按钮的回调。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_55

LANGUAGE: typescript
CODE:
```
onOk: function()
```

----------------------------------------

TITLE: Interactive DatePicker Component Example
DESCRIPTION: Shows implementation of an interactive DatePicker component with message feedback and state management using hooks.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/getting-started.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import React, { useState } from 'react';
import { DatePicker, message } from 'antd';
import { createRoot } from 'react-dom/client';

import './index.css';

const App = () => {
  const [date, setDate] = useState(null);
  const [messageApi, contextHolder] = message.useMessage();
  const handleChange = (value) => {
    messageApi.info(`Selected Date: ${value ? value.format('YYYY-MM-DD') : 'None'}`);
    setDate(value);
  };
  return (
    <div style={{ width: 400, margin: '100px auto' }}>
      <DatePicker onChange={handleChange} />
      <div style={{ marginTop: 16 }}>
        Selected Date: {date ? date.format('YYYY-MM-DD') : 'None'}
      </div>
      {contextHolder}
    </div>
  );
};

createRoot(document.getElementById('root')).render(<App />);
```

----------------------------------------

TITLE: React Context Loss with Static Methods
DESCRIPTION: Demonstrates how static methods lose React context when called, causing context values to fallback to defaults instead of receiving provider values.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
const Context = React.createContext('default');

const MyContent = () => React.useContext(Context);

const Wrapper = () => {
  React.useEffect(() => {
    // Static function is out of context.
    // We can only get `default` instead of `Hello World`
    message.success(<MyContent />);
  }, []);

  return null;
};

const Demo = () => (
  <Context.Provider value="Hello World">
    <Wrapper />
  </Context.Provider>
);
```

----------------------------------------

TITLE: Customizing Component-Specific Tokens in Ant Design React
DESCRIPTION: This snippet illustrates how to customize component-specific tokens in Ant Design. It shows how to enable the algorithm for Button and Input components and override their primary colors independently.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { ConfigProvider, Button, Space, Input, Divider } from 'antd';

const App: React.FC = () => (
  <>
    <ConfigProvider
      theme={{
        components: {
          Button: {
            colorPrimary: '#00b96b',
            algorithm: true, // Enable algorithm
          },
          Input: {
            colorPrimary: '#eb2f96',
            algorithm: true, // Enable algorithm
          }
        },
      }}
    >
      <Space>
        <div style={{ fontSize: 14 }}>Enable algorithm: </div>
        <Input placeholder="Please Input" />
        <Button type="primary">Submit</Button>
      </Space>
    </ConfigProvider>
    <Divider />
    <ConfigProvider
      theme={{
        components: {
          Button: {
            colorPrimary: '#00b96b',
          },
          Input: {
            colorPrimary: '#eb2f96',
          }
        },
      }}
    >
      <Space>
        <div style={{ fontSize: 14 }}>Disable algorithm: </div>
        <Input placeholder="Please Input" />
        <Button type="primary">Submit</Button>
      </Space>
    </ConfigProvider>
  </>
);

export default App;
```

----------------------------------------

TITLE: Basic Layout Structure in JSX
DESCRIPTION: Demonstrates the basic structure of a Layout component with Header, Sider, Content, and Footer elements. This snippet shows how to nest Layout components to create complex page structures.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Layout>
  <Header>header</Header>
  <Layout>
    <Sider>left sidebar</Sider>
    <Content>main content</Content>
    <Sider>right sidebar</Sider>
  </Layout>
  <Footer>footer</Footer>
</Layout>
```

----------------------------------------

TITLE: Rendering Ant Design v4 and v5 Components Together in React (TypeScript)
DESCRIPTION: This React TypeScript snippet shows how to import and use Button components from both antd (v4) and antd-v5 in one codebase. By aliasing imports, developers can render legacy and modern UI components side by side. The dependencies are React, antd, and antd-v5. Inputs are the respective imported Button components; the output is JSX with both button instances.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_18

LANGUAGE: TypeScript
CODE:
```
import React from 'react';
import { Button as Button4 } from 'antd'; // v4
import { Button as Button5 } from 'antd-v5'; // v5

export default () => (
  <>
    <Button4 />
    <Button5 />
  </>
);
```

----------------------------------------

TITLE: Managing getContainer State and Cleanup in React 18 StrictMode - React TypeScript
DESCRIPTION: This snippet shows how to manage the popup container element using React state and useEffect to ensure nodes are created and cleaned up properly in React 18 StrictMode or when getContainer changes. If getContainer is provided, it's called and the result is set as state; otherwise, a div is appended to body, set in state, and removed on cleanup. This approach is necessary for supporting dynamic getContainer switching and proper memory/resource management. Dependencies include React, and input is the optional getContainer function. Outputs are the side effects on the DOM and the managed container reference.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.en-US.md#2025-04-23_snippet_3

LANGUAGE: TypeScript
CODE:
```
// Fake Code. Just for Demo\nconst SomeComponent = ({ getContainer }) => {\n  const [myContainer, setMyContainer] = React.useState<HTMLElement | null>(null);\n\n  React.useEffect(() => {\n    if (getContainer) {\n      setMyContainer(getContainer());\n      return;\n    }\n\n    const div = document.createElement('div');\n    document.body.appendChild(div);\n    setMyContainer(div);\n\n    return () => {\n      document.body.removeChild(div);\n    };\n  }, [getContainer]);\n\n  return <PopupWrapper getContainer={() => myContainer} />;\n};\n
```

----------------------------------------

TITLE: Rendering Dynamic Fields with Form.List in Ant Design (JSX)
DESCRIPTION: Shows the basic structure of using `Form.List` to manage a dynamic list of form fields. The `children` prop is a render function that receives an array of `fields` objects, each representing an item in the list. Mapping over this array allows rendering multiple `Form.Item` components for array-based data.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_5

LANGUAGE: JSX
CODE:
```
<Form.List>
  {(fields) => (
    <div>
      {fields.map((field) => (
        <Form.Item {...field}>
          <Input />
        </Form.Item>
      ))}
    </div>
  )}
</Form.List>
```

----------------------------------------

TITLE: Using Timeline with items prop (>=5.2.0)
DESCRIPTION: This is the recommended way to use the Ant Design Timeline component from version 5.2.0 onwards. It uses the `items` prop to configure the timeline nodes for better performance.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/timeline/index.zh-CN.md#_snippet_0

LANGUAGE: JSX
CODE:
```
// >=5.2.0 可用，推荐的写法 ✅
const items = [{ children: 'sample', label: 'sample' }];
return <Timeline items={items} />;
```

----------------------------------------

TITLE: Rewrite Next.js _app.tsx for Ant Design ConfigProvider
DESCRIPTION: Wraps the main application component in `pages/_app.tsx` with Ant Design's `ConfigProvider`. This component applies the specified theme configuration (defined in `theme/themeConfig.ts`) to all Ant Design components rendered within the application, ensuring consistent styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#_snippet_5

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { ConfigProvider } from 'antd';
import type { AppProps } from 'next/app';

import theme from './theme/themeConfig';

const App = ({ Component, pageProps }: AppProps) => (
  <ConfigProvider theme={theme}>
    <Component {...pageProps} />
  </ConfigProvider>
);

export default App;
```

----------------------------------------

TITLE: Accessing Context with useConfig (JSX)
DESCRIPTION: Shows how to use the `ConfigProvider.useConfig()` hook to access configuration values (like component size or disabled state) from the nearest parent `ConfigProvider`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.zh-CN.md#_snippet_3

LANGUAGE: jsx
CODE:
```
const {
  componentDisabled, // 5.3.0+
  componentSize // 5.3.0+
} = ConfigProvider.useConfig();
```

----------------------------------------

TITLE: Accessing Context Values with ConfigProvider.useConfig() (JSX)
DESCRIPTION: Demonstrates how to use the `ConfigProvider.useConfig()` hook to access context values provided by parent providers, such as the component disabled state or size.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_3

LANGUAGE: jsx
CODE:
```
const {
  componentDisabled, // 5.3.0+
  componentSize, // 5.3.0+
} = ConfigProvider.useConfig();
```

----------------------------------------

TITLE: Disabling Date and Time Range in Ant Design DatePicker (JS)
DESCRIPTION: Provides JavaScript functions to restrict date and time selection within a specific range, like `2024-01-01 09:00` to `2024-01-02 17:00`. `disabledDate` checks the overall date range using `info.type` for panel optimization, while `disabledTime` conditionally disables hours based on whether the selected date is the start or end date of the range.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.zh-CN.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const disabledDate = (date, info) => {
  if (info.type === 'date') {
    return date.isBefore('2024-01-01', 'day') || date.isAfter('2024-01-02', 'day');
  }
  return !date.isSame('2024-01-01', info.type);
};

const disabledTime = (date) => {
  if (date.isSame('2024-01-01', 'day')) {
    return {
      disabledHours: () => Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour < 9),
    };
  }

  if (date.isSame('2024-01-02', 'day')) {
    return {
      disabledHours: () => Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour > 17),
    };
  }

  // 只需要考虑开始和结束时间，范围外的本身已经被 `disabledDate` 禁用了
  return {};
};
```

----------------------------------------

TITLE: Global App Context Initialization (tsx)
DESCRIPTION: Provides an example of initializing and exporting the `message`, `modal`, and `notification` instances using `App.useApp` in a central entry component. This allows accessing these static methods globally without needing `App.useApp` in every component, useful in contexts like Redux.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
// Entry component
import { App } from 'antd';
import type { MessageInstance } from 'antd/es/message/interface';
import type { ModalStaticFunctions } from 'antd/es/modal/confirm';
import type { NotificationInstance } from 'antd/es/notification/interface';

let message: MessageInstance;
let notification: NotificationInstance;
let modal: Omit<ModalStaticFunctions, 'warn'>;

export default () => {
  const staticFunction = App.useApp();
  message = staticFunction.message;
  modal = staticFunction.modal;
  notification = staticFunction.notification;
  return null;
};

export { message, notification, modal };
```

----------------------------------------

TITLE: Configuring Ant Design Table Row Keys
DESCRIPTION: Demonstrates how to specify primary keys for Table rows using the rowKey prop. This is necessary when the default key property is not available in the data source.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
// primary key is uid
return <Table rowKey="uid" />;
// or
return <Table rowKey={(record) => record.uid} />;
```

----------------------------------------

TITLE: Tracking StrictMode Hook Execution and Lifecycle | TypeScript/React
DESCRIPTION: Illustrates console logging from render, useMemo, useEffect, and cleanup phases inside a React component wrapped in StrictMode. Used to observe effect and cleanup call order, especially how Render and Memo can be executed more than once. Outputs timing info to the console for developer inspection; expects no external dependencies.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_2

LANGUAGE: TSX
CODE:
```
const My = () => {\n  console.log('render');\n\n  useMemo(() => {\n    console.log('memo');\n  }, []);\n\n  useEffect(() => {\n    console.log('effect');\n\n    return () => {\n      console.log('effect cleanup');\n    };\n  }, []);\n};\n\n<StrictMode>\n  <My />\n</StrictMode>;\n\n// Console:\n// - render\n// - memo\n// - render\n// - memo\n// - effect\n// - effect cleanup\n// - effect
```

----------------------------------------

TITLE: Consuming Global App Context Instance (tsx)
DESCRIPTION: Illustrates how to use the globally exported `message` instance (initialized via `App.useApp` in another file) within a different component. It shows calling the `message.success` method directly, bypassing the need for the `useApp` hook in this specific component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
// sub page
import React from 'react';
import { Button, Space } from 'antd';

import { message } from './store';

export default () => {
  const showMessage = () => {
    message.success('Success!');
  };

  return (
    <Space>
      <Button type="primary" onClick={showMessage}>
        Open message
      </Button>
    </Space>
  );
};
```

----------------------------------------

TITLE: Basic CI/CD Workflow Configuration with GitHub Actions
DESCRIPTION: GitHub Actions workflow configuration for a React project that handles linting, building, testing and deployment to GitHub Pages. Includes setup for pnpm package manager and artifact uploads.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/github-actions-workflow.en-US.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: write

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          node-version: 16

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.0.0

      - name: Install dependencies
        run: pnpm install

      - name: lint
        run: pnpm run lint

      - name: Build
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
```

----------------------------------------

TITLE: Enabling CSS Variables with ConfigProvider in React 18
DESCRIPTION: Demonstrates how to enable CSS variable mode globally in a React 18 application using the ConfigProvider component from Ant Design.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/css-variables.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<ConfigProvider theme={{ cssVar: true }}>
  <App />
</ConfigProvider>
```

----------------------------------------

TITLE: Getting Multiple Field Values with getFieldsValue (NamePath)
DESCRIPTION: Example demonstrating how to use `form.getFieldsValue` with an array of nested `NamePath` arrays to retrieve the values of multiple specified fields ('user.age' and 'preset.account').
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_14

LANGUAGE: tsx
CODE:
```
// multiple path
form.getFieldsValue([
  ['user', 'age'],
  ['preset', 'account'],
]);
```

----------------------------------------

TITLE: Accessing Form.Item Validation Status with Form.Item.useStatus Hook (TSX)
DESCRIPTION: This snippet illustrates the `Form.Item.useStatus` hook, used within a custom input component (`CustomInput`) wrapped by `Form.Item`. It retrieves the validation `status` ('error', 'warning', 'success', 'validating') and `errors`/`warnings` arrays of the parent `Form.Item`, allowing the custom input to react visually (e.g., applying CSS classes, showing error messages) based on the validation state.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_10

LANGUAGE: tsx
CODE:
```
const CustomInput = ({ value, onChange }) => {
  const { status, errors } = Form.Item.useStatus();
  return (
    <input
      value={value}
      onChange={onChange}
      className={`custom-input-${status}`}
      placeholder={(errors.length && errors[0]) || ''}
    />
  );
};

export default () => (
  <Form>
    <Form.Item name="username">
      <CustomInput />
    </Form.Item>
  </Form>
);
```

----------------------------------------

TITLE: Accessing App Context with useApp (tsx)
DESCRIPTION: Demonstrates how to use the `App.useApp` hook within a functional component (`MyPage`) to access static methods for message, notification, and modal components. The component using `App.useApp` must be rendered as a child of the Ant Design `App` component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { App } from 'antd';

const MyPage: React.FC = () => {
  const { message, notification, modal } = App.useApp();
  message.success('Good!');
  notification.info({ message: 'Good' });
  modal.warning({ title: 'Good' });
  // ....
  // other message, notification, modal static function
  return <div>Hello word</div>;
};

const MyApp: React.FC = () => (
  <App>
    <MyPage />
  </App>
);

export default MyApp;
```

----------------------------------------

TITLE: Initializing Virtual Table in React
DESCRIPTION: Basic usage of virtual scrolling in Ant Design Table component with scroll configuration for both horizontal and vertical directions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/virtual-table.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<Table virtual scroll={{ x: 2000, y: 500 }} {...otherProps} />
```

----------------------------------------

TITLE: Basic Static Ant Design Style Export Script (TSX)
DESCRIPTION: A Node.js script written in TSX that utilizes `@ant-design/static-style-extract` to generate a single CSS file containing all default Ant Design component styles. The script executes the extraction and writes the resulting CSS content to a specified output file path. Requires `@ant-design/static-style-extract` and `fs`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_3

LANGUAGE: tsx
CODE:
```
// scripts/genAntdCss.tsx
import fs from 'fs';
import { extractStyle } from '@ant-design/static-style-extract';

const outputPath = './public/antd.min.css';

const css = extractStyle();

fs.writeFileSync(outputPath, css);
```

----------------------------------------

TITLE: Subscribing to Form Field Values with Form.useWatch Hook (TSX)
DESCRIPTION: This snippet shows how to use the `Form.useWatch` hook to subscribe to changes in a specific form field ('username') and retrieve its current value. This value can then be used directly within the component for reactive updates, such as triggering a data fetch (`useSWR`) based on the username.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_8

LANGUAGE: tsx
CODE:
```
const Demo = () => {
  const [form] = Form.useForm();
  const userName = Form.useWatch('username', form);

  const { data: options } = useSWR(`/api/user/${userName}`, fetcher);

  return (
    <Form form={form}>
      <Form.Item name="username">
        <AutoComplete options={options} />
      </Form.Item>
    </Form>
  );
};
```

----------------------------------------

TITLE: Basic Usage with items (Ant Design >= 5.3.0)
DESCRIPTION: This is the recommended way to use the Breadcrumb component in Ant Design versions 5.3.0 and later, by providing an array of item objects to the `items` prop.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
return <Breadcrumb items={[{ title: 'sample' }]} />;
```

----------------------------------------

TITLE: Configuring Global Notification Settings - JavaScript
DESCRIPTION: This snippet demonstrates how to globally configure the default settings for Ant Design notifications. It sets the default placement, bottom offset, auto-close duration, and enables RTL mode for all future notifications created via static methods.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/notification/index.zh-CN.md#_snippet_0

LANGUAGE: javascript
CODE:
```
notification.config({
  placement: 'bottomRight',
  bottom: 50,
  duration: 3,
  rtl: true
});
```

----------------------------------------

TITLE: Integrating Ant Design Typography Link with React Router
DESCRIPTION: Demonstrates how to use the Ant Design `Typography.Link` component as the custom rendering component for `react-router-dom`'s `Link`. This approach allows leveraging Ant Design's styling and features while managing navigation through react-router.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/typography/index.en-US.md#_snippet_3

LANGUAGE: TSX
CODE:
```
<Link to="/" component={Typography.Link} />
```

----------------------------------------

TITLE: Customizing Ant Design Theme with ConfigProvider (TSX)
DESCRIPTION: Wrap your application or a part of it with `ConfigProvider` to customize the Ant Design theme, such as changing the primary color using the `token` property.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-rsbuild.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { ConfigProvider } from 'antd';

const App: React.FC = () => (
  <ConfigProvider theme={{ token: { colorPrimary: '#00b96b' } }}>
    <MyApp />
  </ConfigProvider>
);
```

----------------------------------------

TITLE: Configuring Radio.Group Options (Recommended & Not Recommended) - TypeScript
DESCRIPTION: This snippet demonstrates two ways to configure options within an Ant Design Radio.Group component using React/TypeScript. The first approach, using the `options` prop with an array of value/label objects, is recommended for its conciseness and ease of management. The second approach, nesting individual Radio components, is shown as a less recommended alternative for this structure.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/radio/index.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
// 使用 Radio.Group 组件时，推荐的写法 ✅
return (
  <Radio.Group
    value={value}
    options={[
      { value: 1, label: 'A' },
      { value: 2, label: 'B' },
      { value: 3, label: 'C' },
    ]}
  />
);

// 不推荐的写法 🙅🏻‍♀️
return (
  <Radio.Group value={value}>
    <Radio value={1}>A</Radio>
    <Radio value={2}>B</Radio>
    <Radio value={3}>C</Radio>
  </Radio.Group>
);
```

----------------------------------------

TITLE: Importing and Using Day.js with TimePicker in React (JSX)
DESCRIPTION: This snippet demonstrates the integration of the Day.js library (with its customParseFormat plugin) into a React component that renders Ant Design's TimePicker. Dependencies include the 'dayjs' package, the 'customParseFormat' plugin, and the Ant Design TimePicker component. Key parameters are the 'defaultValue', set here to a specific time using Day.js formatting. The input expects a Day.js object and uses the 'HH:mm:ss' format; output is a TimePicker initialized with the given default value.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/time-picker/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\n\ndayjs.extend(customParseFormat)\n\n<TimePicker defaultValue={dayjs('13:30:56', 'HH:mm:ss')} />;
```

----------------------------------------

TITLE: Block Button Property Demo in Ant Design
DESCRIPTION: Demonstrates how to use the block property on Button components to make them fill their parent container width. The block property is particularly useful for responsive designs and mobile interfaces where full-width buttons are common.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/demo/block.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Button block>Block Button</Button>
```

----------------------------------------

TITLE: Basic App Component Usage in React
DESCRIPTION: Demonstrates the basic implementation of App component with message, notification and modal functionality through useApp hook.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { App } from 'antd';

const MyPage: React.FC = () => {
  const { message, notification, modal } = App.useApp();
  message.success('Good!');
  notification.info({ message: 'Good' });
  modal.warning({ title: 'Good' });
  // ....
  // other message, notification, modal static function
  return <div>Hello word</div>;
};

const MyApp: React.FC = () => (
  <App>
    <MyPage />
  </App>
);

export default MyApp;
```

----------------------------------------

TITLE: App Component Usage with Hooks
DESCRIPTION: Demonstrates the new App component approach in v5 that simplifies message API usage while maintaining proper context.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
const Demo = () => {
  const { message } = App.useApp();

  React.useEffect(() => {
    message.success('Hello World');
  }, []);

  // ...
};
```

----------------------------------------

TITLE: Defining Custom antd Theme Configuration
DESCRIPTION: This snippet defines a simple theme configuration object using the ThemeConfig type from antd. It sets basic token values like fontSize and colorPrimary. This configuration object will be used later with ConfigProvider to apply the custom theme globally.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.zh-CN.md#_snippet_4

LANGUAGE: ts
CODE:
```
// theme/themeConfig.ts
import type { ThemeConfig } from 'antd';

const theme: ThemeConfig = {
  token: {
    fontSize: 16,
    colorPrimary: '#52c41a',
  },
};

export default theme;
```

----------------------------------------

TITLE: Suspense Routing with Fallback Loader | TypeScript/React
DESCRIPTION: Shows Suspense with a fallback loader in a React router context. This pattern is used for code splitting and on-demand page loading; during asynchronous routing/loading, Suspense displays the fallback until the page is ready. No dependencies listed but meaningful within a framework such as UmiJS, React-Router.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_3

LANGUAGE: TSX
CODE:
```
<BrowserRoutes>\n  <Routs>\n    <Suspense fallback={<Loading />} />\n  </Routs>\n</BrowserRoutes>
```

----------------------------------------

TITLE: Updating and Destroying Static Ant Design Modal Instances
DESCRIPTION: Demonstrates how to use the instance returned by static Modal methods like `Modal.info()` to update its configuration dynamically using an object or a function (v4.8.0+), and how to programmatically close the modal using the `destroy()` method.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
const modal = Modal.info();

modal.update({
  title: '修改的标题',
  content: '修改的内容'
});

// 在 4.8.0 或更高版本中，可以通过传入函数的方式更新弹窗
modal.update((prevConfig) => ({
  ...prevConfig,
  title: `${prevConfig.title}（新）`
}));

modal.destroy();
```

----------------------------------------

TITLE: Ant Design DatePicker with Locale and Message API (React)
DESCRIPTION: This React example shows how to use the Ant Design DatePicker with Chinese locale configuration using ConfigProvider and dayjs. It also demonstrates using the message API to display selected date information and managing the selected date state.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/getting-started.zh-CN.md#_snippet_1

LANGUAGE: jsx
CODE:
```
import React, { useState } from 'react';
import { ConfigProvider, DatePicker, message } from 'antd';
// 由于 antd 组件的默认文案是英文，所以需要修改为中文
import dayjs from 'dayjs';
import { createRoot } from 'react-dom/client';

import 'dayjs/locale/zh-cn';

import zhCN from 'antd/locale/zh_CN';

import './index.css';

dayjs.locale('zh-cn');

const App = () => {
  const [date, setDate] = useState(null);
  const [messageApi, contextHolder] = message.useMessage();
  const handleChange = (value) => {
    messageApi.info(`您选择的日期是: ${value ? value.format('YYYY年MM月DD日') : '未选择'}`);
    setDate(value);
  };
  return (
    <ConfigProvider locale={zhCN}>
      <div style={{ width: 400, margin: '100px auto' }}>
        <DatePicker onChange={handleChange} />
        <div style={{ marginTop: 16 }}>
          当前日期：{date ? date.format('YYYY年MM月DD日') : '未选择'}
        </div>
      </div>
      {contextHolder}
    </ConfigProvider>
  );
};

createRoot(document.getElementById('root')).render(<App />);
```

----------------------------------------

TITLE: SSR Rendering and Inline Style Extraction with @ant-design/cssinjs (TSX)
DESCRIPTION: Demonstrates how to perform server-side rendering of a React application using `renderToString` and extract the generated Ant Design styles from the `@ant-design/cssinjs` cache. The extracted styles are then included directly within the HTML head tag for inline styling. Requires `@ant-design/cssinjs`, `react`, and `react-dom/server`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import type Entity from '@ant-design/cssinjs/es/Cache';
import { renderToString } from 'react-dom/server';

const App = () => {
  // SSR Render
  const cache = React.useMemo<Entity>(() => createCache(), []);
  const html = renderToString(
    <StyleProvider cache={cache}>
      <MyApp />
    </StyleProvider>,
  );

  // Grab style from cache
  const styleText = extractStyle(cache);

  // Mix with style
  return `
    <!DOCTYPE html>
    <html>
      <head>
        ${styleText}
      </head>
      <body>
        <div id="root">${html}</div>
      </body>
    </html>
  `;
};

export default App;
```

----------------------------------------

TITLE: Using Ant Design Select with options prop (>= 5.11.0)
DESCRIPTION: Demonstrates the recommended way to use the Ant Design Select component by passing an array of option objects to the `options` prop. This method is available from version 5.11.0 onwards and offers better performance and data organization compared to using `Select.Option` children.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
return <Select options={[{ value: 'sample', label: <span>sample</span> }]} />;
```

----------------------------------------

TITLE: Using the Cascader Component with Options and onChange (JSX)
DESCRIPTION: This snippet demonstrates the core usage of the Cascader React component by providing it with the required 'options' property and an 'onChange' event handler. The 'options' array should be structured following the component's expected hierarchy, potentially using the Option interface. Dependencies include React and Ant Design components. The Cascader accepts additional props as documented, and the primary output is the rendered selector UI with cascading options.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/cascader/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Cascader options={options} onChange={onChange} />
```

----------------------------------------

TITLE: Utility Function for On-Demand Ant Design CSS Extraction with Hashing
DESCRIPTION: Presents a utility function `doExtraStyle` (likely intended for `scripts/genAntdCss.tsx`) designed for the 'Extract on demand' strategy. It takes a CSS-in-JS cache (`@ant-design/cssinjs`), extracts the CSS content using `extractStyle(cache, true)`, generates an MD5 hash based on the content using Node.js `crypto`, and saves the CSS to a uniquely named file (e.g., `antd.min.<hash>.css`) in a specified directory. It returns the relative path to the generated file, suitable for linking in HTML.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_9

LANGUAGE: tsx
CODE:
```
// scripts/genAntdCss.tsx
import { createHash } from 'crypto';
import fs from 'fs';
import path from 'path';
import { extractStyle } from '@ant-design/cssinjs';
import type Entity from '@ant-design/cssinjs/lib/Cache';

export interface DoExtraStyleOptions {
  cache: Entity;
  dir?: string;
  baseFileName?: string;
}

export const doExtraStyle = (opts: DoExtraStyleOptions) => {
  const { cache, dir = 'antd-output', baseFileName = 'antd.min' } = opts;

  const baseDir = path.resolve(__dirname, '../../static/css');

  const outputCssPath = path.join(baseDir, dir);

  if (!fs.existsSync(outputCssPath)) {
    fs.mkdirSync(outputCssPath, { recursive: true });
  }

  const css = extractStyle(cache, true);

  if (!css) {
    return '';
  }

  const md5 = createHash('md5');
  const hash = md5.update(css).digest('hex');
  const fileName = `${baseFileName}.${hash.substring(0, 8)}.css`;
  const fullpath = path.join(outputCssPath, fileName);

  const res = `_next/static/css/${dir}/${fileName}`;

  if (fs.existsSync(fullpath)) {
    return res;
  }

  fs.writeFileSync(fullpath, css);

  return res;
};
```

----------------------------------------

TITLE: Demonstrating setFieldsValue null TS Error (TSX)
DESCRIPTION: This snippet shows a minimal example demonstrating a TypeScript error that occurs when attempting to set a form field value to `null` using `form.setFieldsValue` on a type explicitly defined to allow `null`, *if* `strictNullChecks` is enabled in the project's `tsconfig.json`. It uses `antd/Form` and `useForm`. The input is an object with a field set to `null`, and the output is a TypeScript compilation error when `strictNullChecks: true`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
// This is not real world code, just for explain
import { Form } from 'antd';

type Test = {
  value: string[] | null;
};

export default () => {
  const [form] = Form.useForm<Test>();

  form.setFieldsValue({
    value: null, // Error: 不能将类型“null”分配给类型“string[] | undefined”。
  });
};
```

----------------------------------------

TITLE: Using Form.List Dependencies in Ant Design Form (TSX)
DESCRIPTION: Demonstrates how to correctly specify dependencies for fields within an Ant Design `Form.List`. The dependency path must include the list name, the item index (or placeholder), and the field name within the item.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_18

LANGUAGE: tsx
CODE:
```
<Form.List name="users">
  {(fields) =>
    fields.map((field) => (
      <React.Fragment key={field.key}>
        <Form.Item name={[field.name, 'name']} {...someRest1} />
        <Form.Item name={[field.name, 'age']} {...someRest1} />
      </React.Fragment>
    ))
  }
</Form.List>
```

----------------------------------------

TITLE: Configuring Form Validate Messages via Ant Design ConfigProvider (TSX)
DESCRIPTION: Illustrates the common pattern for providing custom validation messages to Ant Design forms using the global ConfigProvider. This configuration is passed via the 'form' prop's 'validateMessages' property.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
<ConfigProvider form={{ validateMessages }} />
```

----------------------------------------

TITLE: Injecting On-Demand Extracted Styles in Next.js _document.tsx (TSX)
DESCRIPTION: Illustrates how to integrate the on-demand style extraction utility (`doExtraStyle`) into a custom Next.js `_document.tsx`. It uses `createCache` and `StyleProvider` within `getInitialProps` to collect styles during SSR, calls `doExtraStyle` to generate the CSS file after rendering, and injects a `<link>` tag referring to the generated file into the document's `<head>`. This approach allows for sending only the CSS required by the components rendered on a specific page during SSR. Requires `@ant-design/cssinjs`, `next/document`, and the `doExtraStyle` utility function.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_10

LANGUAGE: tsx
CODE:
```
// _document.tsx
import { createCache, StyleProvider } from '@ant-design/cssinjs';
import type { DocumentContext } from 'next/document';
import Document, { Head, Html, Main, NextScript } from 'next/document';

import { doExtraStyle } from '../scripts/genAntdCss';

export default class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const cache = createCache();
    let fileName = '';
    const originalRenderPage = ctx.renderPage;
    ctx.renderPage = () =>
      originalRenderPage({
        enhanceApp: (App) => (props) => (
          <StyleProvider cache={cache}>
            <App {...props} />
          </StyleProvider>
        ),
      });

    const initialProps = await Document.getInitialProps(ctx);
    // 1.1 extract style which had been used
    fileName = doExtraStyle({
      cache,
    });
    return {
      ...initialProps,
      styles: (
        <>
          {initialProps.styles}
          {/* 1.2 inject css */}
          {fileName && <link rel="stylesheet" href={`/${fileName}`} />}
        </>
      ),
    };
  }

  render() {
    return (
      <Html lang="en">
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}
```

----------------------------------------

TITLE: PNPM Cache Configuration for GitHub Actions
DESCRIPTION: Configuration snippet for implementing pnpm caching in GitHub Actions to optimize dependency installation speed. Creates and uses a cache based on pnpm-lock.yaml file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/github-actions-workflow.en-US.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
- name: create pnpm-lock.yaml
  run: pnpm install --frozen-lockfile --ignore-scripts

- name: Get pnpm store directory
  id: pnpm-cache
  shell: bash
  run: |
    echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

- name: Setup pnpm cache
  uses: actions/cache@v4
  with:
    path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
    restore-keys: |
      ${{ runner.os }}-pnpm-store-
```

----------------------------------------

TITLE: Implementing Global Loading Indicators with Async Dismissal in Ant Design
DESCRIPTION: This code demonstrates how to display a global loading indicator that automatically dismisses itself after a set time. It uses Ant Design's message component to create loading notifications with different content types.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/message/demo/loading.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Button, message } from 'antd';

const App: React.FC = () => {
  const success = () => {
    const hide = message.loading('Action in progress..', 0);
    // Dismiss manually and asynchronously
    setTimeout(hide, 2500);
  };

  return (
    <Button onClick={success}>Display a loading indicator</Button>
  );
};

export default App;
```

----------------------------------------

TITLE: Handling Upload onChange Callback in Ant Design Upload (React JSX)
DESCRIPTION: This snippet defines the structure of the object returned by the Upload component's onChange callback. It demonstrates access to current file details, the file list, and the event payload, enabling detailed state tracking for the upload process. No external dependencies are required; all types are provided by Ant Design's Upload component integration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: React JSX
CODE:
```
{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}
```

----------------------------------------

TITLE: Setting Grid Layout for Ant Design List Component
DESCRIPTION: This snippet shows how to configure the List component to display items in a grid layout. The 'grid' property is used to enable the grid, and the 'column' attribute determines the number of columns in the grid.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/demo/grid.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## zh-CN

可以通过设置 `List` 的 `grid` 属性来实现栅格列表，`column` 可设置期望显示的列数。

## en-US

Create a grid layout by setting the `grid` property of List.
```

----------------------------------------

TITLE: Handling Ant Design Form validateFields Promise (JSX)
DESCRIPTION: Shows how to handle the Promise returned by the form.validateFields() method. The .then() block receives form values on success, while .catch() gets detailed error information on failure.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_7

LANGUAGE: JSX
CODE:
```
validateFields()
  .then((values) => {
    /*
  values:
    {
      username: 'username',
      password: 'password',
    }
  */
  })
  .catch((errorInfo) => {
    /*
    errorInfo:
      {
        values: {
          username: 'username',
          password: 'password',
        },
        errorFields: [
          { name: ['password'], errors: ['Please input your Password!'] },
        ],
        outOfDate: false,
      }
    */
  });
```

----------------------------------------

TITLE: Styling Ant Design Icons (JSX)
DESCRIPTION: Shows how to apply inline styles to Ant Design icon components to control properties like `fontSize` and `color`. This is the recommended way to style icons when using the modern SVG component approach. Required dependency: `@ant-design/icons`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#_snippet_1

LANGUAGE: JSX
CODE:
```
import { MessageOutlined } from '@ant-design/icons';

<MessageOutlined style={{ fontSize: '16px', color: '#08c' }} />;
```

----------------------------------------

TITLE: Breadcrumb Integration with Browser History
DESCRIPTION: Example demonstrating how to integrate Breadcrumb with browser history using React Router, including custom item rendering and path handling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { Link } from 'react-router';

const items = [
  {
    path: '/index',
    title: 'home',
  },
  {
    path: '/first',
    title: 'first',
    children: [
      {
        path: '/general',
        title: 'General',
      },
      {
        path: '/layout',
        title: 'Layout',
      },
      {
        path: '/navigation',
        title: 'Navigation',
      },
    ],
  },
  {
    path: '/second',
    title: 'second',
  },
];

function itemRender(currentRoute, params, items, paths) {
  const isLast = currentRoute?.path === items[items.length - 1]?.path;

  return isLast ? (
    <span>{currentRoute.title}</span>
  ) : (
    <Link to={`/${paths.join("/")}`}>{currentRoute.title}</Link>
  );
}

return <Breadcrumb itemRender={itemRender} items={items} />;
```

----------------------------------------

TITLE: Using Notification Hooks with React Context
DESCRIPTION: This example demonstrates how to use the useNotification hook to access context information like ConfigProvider settings. It creates an API instance and contextHolder node to connect with parent contexts.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/notification/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
const [api, contextHolder] = notification.useNotification();

return (
  <Context1.Provider value="Ant">
    {/* contextHolder is inside Context1 which means api will get value of Context1 */}
    {contextHolder}
    <Context2.Provider value="Design">
      {/* contextHolder is outside Context2 which means api will **not** get value of Context2 */}
    </Context2.Provider>
  </Context1.Provider>
);
```

----------------------------------------

TITLE: Basic Pagination Example in JSX
DESCRIPTION: A simple example showing how to use the Pagination component with onChange callback and total items count.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/pagination/index.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Pagination onChange={onChange} total={50} />
```

----------------------------------------

TITLE: Upload File Object Structure in Ant Design Upload (React JSX)
DESCRIPTION: This snippet shows the shape of the 'file' object passed to the onChange callback, detailing properties such as uid, name, status, response, linkProps, and xhr. This clarifies the available file metadata and upload-state for making logic decisions in event handlers. No dependencies are needed, but values correspond to those managed by Ant Design's internal Upload logic and browser file APIs.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: React JSX
CODE:
```
{\n   uid: 'uid',      // unique identifier, negative is recommended, to prevent interference with internally generated id\n   name: 'xx.png',   // file name\n   status: 'done' | 'uploading' | 'error' | 'removed', // Intercepted file by beforeUpload doesn't have a status field.\n   response: '{"status": "success"}', // response from server\n   linkProps: '{"download": "image"}', // additional HTML props of file link\n   xhr: 'XMLHttpRequest{ ... }', // XMLHttpRequest Header\n}
```

----------------------------------------

TITLE: Binding Switch/Checkbox Value with valuePropName (TSX)
DESCRIPTION: Demonstrates how to use the `valuePropName` prop on `Form.Item` to bind the form value to a different prop than the default `value`, specifically for components like `Switch` or `Checkbox` which use `checked`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_16

LANGUAGE: tsx
CODE:
```
<Form.Item name="fieldA" valuePropName="checked">
  <Switch />
</Form.Item>
```

----------------------------------------

TITLE: Adding Alert Component JSX (React Diff)
DESCRIPTION: Shows the change required in the component's render method to replace a simple text display with an Ant Design Alert component showing the selected date.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/getting-started.zh-CN.md#_snippet_3

LANGUAGE: diff
CODE:
```
  <DatePicker onChange={value => this.handleChange(value)} />
  <div style={{ marginTop: 16 }}>
-   当前日期：{date ? date.format('YYYY-MM-DD') : '未选择'}
+   <Alert message="当前日期" description={date ? date.format('YYYY年MM月DD日') : '未选择'} />
  </div>
```

----------------------------------------

TITLE: Implementing Manual Modal Instance Management with Ant Design in React
DESCRIPTION: This code demonstrates how to create, update, and destroy Modal instances programmatically using Ant Design. It showcases two different ways to manage modals: one using the Modal.info() method with manual updates via the returned instance, and another using React's useState hook for controlling modal visibility.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/manual.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Button, Modal } from 'antd';
import { useState } from 'react';

const App: React.FC = () => {
  const [modal, contextHolder] = Modal.useModal();

  const countDown = () => {
    let secondsToGo = 5;

    const instance = modal.success({
      title: 'This is a notification message',
      content: `This modal will be destroyed after ${secondsToGo} second.`,
    });

    const timer = setInterval(() => {
      secondsToGo -= 1;
      instance.update({
        content: `This modal will be destroyed after ${secondsToGo} second.`,
      });
    }, 1000);

    setTimeout(() => {
      clearInterval(timer);
      instance.destroy();
    }, secondsToGo * 1000);
  };

  const [modal2Open, setModal2Open] = useState(false);

  return (
    <>
      <Button onClick={countDown}>Open modal to close in 5s</Button>
      <Button type="primary" onClick={() => setModal2Open(true)}>
        Open Modal with 1s delay destroy
      </Button>
      <Modal
        title="Modal with 1s delay destroy"
        open={modal2Open}
        onOk={() => setModal2Open(false)}
        onCancel={() => setModal2Open(false)}
        afterClose={() => console.log('Modal 2 afterClose')}
        destroyOnClose
      >
        <p>Some contents...</p>
        <p>Some contents...</p>
        <p>Some contents...</p>
      </Modal>
      {contextHolder}
    </>
  );
};

export default App;
```

----------------------------------------

TITLE: Importing Static CSS File in Next.js _app.tsx (TSX)
DESCRIPTION: Illustrates how to import the generated static Ant Design CSS file (e.g., `antd.min.css`) within a Next.js `_app.tsx` file. This ensures that the pre-exported styles are loaded globally for the entire application, typically placed alongside other global stylesheets. Includes `StyleProvider` but relies on the imported CSS.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_6

LANGUAGE: tsx
CODE:
```
import { StyleProvider } from '@ant-design/cssinjs';
import type { AppProps } from 'next/app';

import '../public/antd.min.css'; // 添加这行
import '../styles/globals.css';

export default function App({ Component, pageProps }: AppProps) {
  return (
    <StyleProvider hashPriority="high">
      <Component {...pageProps} />
    </StyleProvider>
  );
}
```

----------------------------------------

TITLE: Configuring Vertical Space in Ant Design
DESCRIPTION: This example shows how to use the Space component to create vertical spacing between elements.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<code src="./demo/vertical.tsx">Vertical Space</code>
```

----------------------------------------

TITLE: Comparing Recommended and Deprecated Timeline Usage in Ant Design (React/JSX)
DESCRIPTION: This JSX snippet demonstrates two ways to use the Ant Design Timeline component. The recommended approach (for versions >= 5.2.0) uses the `items` prop with an array of objects for better performance and simpler code. The older method (for versions < 5.2.0, deprecated in >= 5.2.0) involves nesting `Timeline.Item` components directly as children. Requires React and the Ant Design library.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/timeline/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
// works when >=5.2.0, recommended ✅
const items = [{ children: 'sample', label: 'sample' }];
return <Timeline items={items} />;

// works when <5.2.0, deprecated when >=5.2.0 🙅🏻‍♀️
return (
  <Timeline onChange={onChange}>
    <Timeline.Item>Sample</Timeline.Item>
  </Timeline>
);
```

----------------------------------------

TITLE: Manually Extracting CSS-in-JS Styles with @ant-design/cssinjs in TypeScript
DESCRIPTION: Demonstrates the standard CSS-in-JS pattern for SSR style extraction. It uses `createCache` from `@ant-design/cssinjs` to initialize a style cache. The React application (`MyApp`) is wrapped with `StyleProvider`, passing the cache. `renderToString` from `react-dom/server` renders the app, populating the cache. Finally, `extractStyle` retrieves the collected CSS text from the cache. This allows inserting the styles into the HTML head but doesn't provide browser caching.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import { renderToString } from 'react-dom/server';

const cache = createCache();

// HTML Content
const html = renderToString(
  <StyleProvider cache={cache}>
    <MyApp />
  </StyleProvider>,
);

// Style Content
const styleText = extractStyle(cache);
```

----------------------------------------

TITLE: Jest Configuration for Ant Design
DESCRIPTION: Configuration settings for running Jest tests with Ant Design components using ts-jest transformer.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/getting-started.en-US.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
"transform": { "^.+\\.(ts|tsx|js|jsx)?$": "ts-jest" }
```

----------------------------------------

TITLE: Configuring Row and Header Row Events in Ant Design Table (JSX)
DESCRIPTION: This snippet demonstrates how to use the `onRow` and `onHeaderRow` props of the Ant Design Table component to attach event handlers (like click, double click, mouse enter/leave) to individual table rows and the header row, respectively. The `onRow` prop receives the record data and index, while `onHeaderRow` receives the columns array and index.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.zh-CN.md#_snippet_0

LANGUAGE: JSX
CODE:
```
<Table
  onRow={(record) => {
    return {
      onClick: (event) => {}, // 点击行
      onDoubleClick: (event) => {},
      onContextMenu: (event) => {},
      onMouseEnter: (event) => {}, // 鼠标移入行
      onMouseLeave: (event) => {},
    };
  }}
  onHeaderRow={(columns, index) => {
    return {
      onClick: () => {}, // 点击表头行
    };
  }}
/>
```

----------------------------------------

TITLE: Context Loss with Static Methods in React
DESCRIPTION: Demonstrates how static methods fail to access React context values, instead defaulting to initial values regardless of Provider settings.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
const Context = React.createContext('default');

const MyContent = () => React.useContext(Context);

const Wrapper = () => {
  React.useEffect(() => {
    // Static function is out of context.
    // We can only get `default` instead of `Hello World`.
    message.success(<MyContent />);
  }, []);

  return null;
};

const Demo = () => (
  <Context.Provider value="Hello World">
    <Wrapper />
  </Context.Provider>
);
```

----------------------------------------

TITLE: DatePicker API - multiple
DESCRIPTION: 是否为多选，不支持 `showTime`。从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_46

LANGUAGE: typescript
CODE:
```
multiple: boolean
```

----------------------------------------

TITLE: Implementing disabledDate in Ant Design DatePicker for a Specific Date Range
DESCRIPTION: This TSX function `disabledDate` implements date range restriction for an Ant Design DatePicker. When the panel type is 'date', it disables dates strictly before '2024-01-01' or strictly after '2024-01-02' using Day.js's `isBefore` and `isAfter` methods with 'day' precision. For other panel types (like month or year), it checks if the panel unit contains '2024-01-01' using `isSame` with the corresponding `info.type` precision; if not, the panel unit (e.g., the whole month) is disabled.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
const disabledDate = (date, info) => {
  if (info.type === 'date') {
    return date.isBefore('2024-01-01', 'day') || date.isAfter('2024-01-02', 'day');
  }
  return !date.isSame('2024-01-01', info.type);
};
```

----------------------------------------

TITLE: Creating Moment-based DatePicker with generatePicker in TypeScript
DESCRIPTION: This snippet demonstrates how to create a custom DatePicker component in TypeScript using Ant Design's `DatePicker.generatePicker` utility. It utilizes `momentGenerateConfig` from `rc-picker` to configure the picker for use with the Moment.js library, specifying `Moment` as the date type.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { DatePicker } from 'antd';
import type { Moment } from 'moment';
import momentGenerateConfig from 'rc-picker/lib/generate/moment';

const MyDatePicker = DatePicker.generatePicker<Moment>(momentGenerateConfig);

export default MyDatePicker;
```

----------------------------------------

TITLE: Using Custom SVG Icons (JSX)
DESCRIPTION: Demonstrates how to import an SVG file as a React component (assuming Webpack/Vite is configured) and pass it to the `component` prop of the Ant Design `Icon` component. This allows rendering custom SVG graphics as icons. Required dependencies: `react`, `@ant-design/icons`, `react-dom`, and bundler setup (`@svgr/webpack` or `vite-plugin-svgr`).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#_snippet_7

LANGUAGE: JSX
CODE:
```
import React from 'react';
import Icon from '@ant-design/icons';
import MessageSvg from 'path/to/message.svg'; // path to your '*.svg' file.

// import MessageSvg from 'path/to/message.svg?react'; // use vite path to your '*.svg?react' file.
import ReactDOM from 'react-dom/client';

// in create-react-app:
// import { ReactComponent as MessageSvg } from 'path/to/message.svg';

ReactDOM.createRoot(mountNode).render(<Icon component={MessageSvg} />);
```

----------------------------------------

TITLE: Custom Rendering of Transfer List with Render Props in Ant Design (JSX)
DESCRIPTION: Demonstrates how to use the Transfer component with a render prop (`children`) to provide custom rendering of the transfer list. This approach allows developers to inject their own component for rendering list items using props provided by Transfer. Dependencies include Ant Design's Transfer component and React. The example expects `props` to contain Transfer's configuration, and `YourComponent` should handle the listProps for correct behavior. Inputs: Transfer props; Outputs: Rendered custom list. Ensure children render function receives and applies all provided props.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/transfer/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Transfer {...props}>{(listProps) => <YourComponent {...listProps} />}</Transfer>
```

----------------------------------------

TITLE: Getting Single Field Value with getFieldsValue (NamePath)
DESCRIPTION: Example demonstrating how to use `form.getFieldsValue` with a nested array `NamePath` to retrieve the value of a single specific field ('user.age').
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_13

LANGUAGE: tsx
CODE:
```
// Single path
form.getFieldsValue([['user', 'age']]);
```

----------------------------------------

TITLE: Defining Column Sorter Function in Ant Design Table (JavaScript)
DESCRIPTION: Specifies a function for the `sorter` property in an Ant Design table column definition to enable local data sorting. The function receives two row data objects (`rowA`, `rowB`) as arguments for comparison and should return a negative, zero, or positive value.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/head.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
sorter: function(rowA, rowB) { ... }
```

----------------------------------------

TITLE: Conditionally Re-rendering Form.Item using shouldUpdate Function (JSX)
DESCRIPTION: This snippet shows how to use a function with the `shouldUpdate` prop on `Form.Item`. The function receives the previous and current form values (`prevValues`, `curValues`) and returns `true` if the item should re-render, or `false` otherwise. This allows for fine-grained control over updates, useful for conditionally rendering fields based on other field values, as shown here where an 'other' input appears based on the 'additional' field.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Form.Item shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}>
  {() => {
    return (
      <Form.Item name="other">
        <Input />
      </Form.Item>
    );
  }}
</Form.Item>
```

----------------------------------------

TITLE: Importing Generated Ant Design CSS in Next.js _app.tsx
DESCRIPTION: Shows how to import the pre-generated Ant Design CSS file (e.g., `../public/antd.min.css`) into the main application component (`_app.tsx`) of a Next.js project as part of the 'Whole Export' strategy. It also includes wrapping the application with `@ant-design/cssinjs`'s `StyleProvider`, potentially for handling dynamic styles added client-side, setting `hashPriority` to `high`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
import { StyleProvider } from '@ant-design/cssinjs';
import type { AppProps } from 'next/app';

import '../public/antd.min.css'; // add this line
import '../styles/globals.css';

export default function App({ Component, pageProps }: AppProps) {
  return (
    <StyleProvider hashPriority="high">
      <Component {...pageProps} />
    </StyleProvider>
  );
}
```

----------------------------------------

TITLE: Configuring Direction with ConfigProvider (TSX)
DESCRIPTION: Demonstrates how to wrap your application or a part of it with ConfigProvider to set the layout direction, such as right-to-left (rtl), affecting all descendant Ant Design components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { ConfigProvider } from 'antd';

// ...
const Demo: React.FC = () => (
  <ConfigProvider direction="rtl">
    <App />
  </ConfigProvider>
);

export default Demo;
```

----------------------------------------

TITLE: Context Provider Setup for Modal in React
DESCRIPTION: Illustrates how to set up context providers with Modal.useModal(). The contextHolder placement determines which contexts are accessible to the modal.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
const [modal, contextHolder] = Modal.useModal();

// then call modal.confirm instead of Modal.confirm

return (
  <Context1.Provider value="Ant">
    {/* contextHolder is in Context1, which means modal will get context of Context1 */}
    {contextHolder}
    <Context2.Provider value="Design">
      {/* contextHolder is out of Context2, which means modal will not get context of Context2 */}
    </Context2.Provider>
  </Context1.Provider>
);
```

----------------------------------------

TITLE: Global App Component Integration with Redux
DESCRIPTION: Shows how to implement App component in a global context with Redux, including entry component setup and usage in sub-pages.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// Entry component
import { App } from 'antd';
import type { MessageInstance } from 'antd/es/message/interface';
import type { ModalStaticFunctions } from 'antd/es/modal/confirm';
import type { NotificationInstance } from 'antd/es/notification/interface';

let message: MessageInstance;
let notification: NotificationInstance;
let modal: Omit<ModalStaticFunctions, 'warn'>;

export default () => {
  const staticFunction = App.useApp();
  message = staticFunction.message;
  modal = staticFunction.modal;
  notification = staticFunction.notification;
  return null;
};

export { message, modal, notification };
```

LANGUAGE: tsx
CODE:
```
// sub page
import React from 'react';
import { Button, Space } from 'antd';

import { message } from './store';

export default () => {
  const showMessage = () => {
    message.success('Success!');
  };

  return (
    <Space>
      <Button type="primary" onClick={showMessage}>
        Open message
      </Button>
    </Space>
  );
};
```

----------------------------------------

TITLE: Conceptual Static Style Extraction in TSX
DESCRIPTION: Illustrates the concept of static style extraction for SSR. All required Ant Design components are rendered within a `StyleProvider` to populate a cache, from which the complete CSS is extracted. This pre-bakes styles but requires rendering all components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
const cache = createCache();

// HTML Content
renderToString(
  <StyleProvider cache={cache}>
    <Button />
    <Switch />
    <Input />
    {/* Rest antd components */}
  </StyleProvider>,
);

// Style Content
const styleText = extractStyle(cache);
```

----------------------------------------

TITLE: Handling Async Logic with filterTreeNode in TreeSelect Component
DESCRIPTION: Example showing how to implement custom async loading logic in a TreeSelect component using the filterTreeNode prop instead of loadData when searching. This approach prevents network blocking during user input.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree-select/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<TreeSelect
  filterTreeNode={(input, treeNode) => {
    const match = YOUR_LOGIC_HERE;

    if (match && !treeNode.isLeaf && !treeNode.children) {
      // Do some loading logic
    }

    return match;
  }}
/>
```

----------------------------------------

TITLE: Initializing Dayjs Locale and Basic Ant Design Calendar (JSX)
DESCRIPTION: Demonstrates configuring the global locale for the `dayjs` library, which Ant Design Calendar relies on for internationalization. It then shows a basic instance of the `<Calendar>` component, highlighting how to attach custom render logic (`cellRender`) and handle user interactions via `onPanelChange` and `onSelect` callbacks. This provides a foundational setup for a locale-aware calendar.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/calendar/index.zh-CN.md#_snippet_0

LANGUAGE: JSX
CODE:
```
// 默认语言为 en-US，所以如果需要使用其他语言，推荐在入口文件全局设置 locale
// import dayjs from 'dayjs';
// import 'dayjs/locale/zh-cn';
// dayjs.locale('zh-cn');

<Calendar cellRender={cellRender} onPanelChange={onPanelChange} onSelect={onSelect} />
```

----------------------------------------

TITLE: Defining Ant Design DatePicker Format Type (TypeScript)
DESCRIPTION: Defines the possible types for the `format` property used in Ant Design date pickers. It allows for simple string formats, functions that return a string based on a Dayjs object, arrays of these types, or an object specifying a format string and an optional type like 'mask'. Requires the Dayjs type.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.en-US.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Dayjs } from 'dayjs';

type Generic = string;
type GenericFn = (value: Dayjs) => string;

export type FormatType =
  | Generic
  | GenericFn
  | Array<Generic | GenericFn>
  | {
      format: string;
      type?: 'mask';
    };
```

----------------------------------------

TITLE: Basic Layout Structure with Ant Design
DESCRIPTION: Demonstrates a typical complex layout structure using Ant Design's Layout components, including nested Layouts, Header, multiple Siders, Content, and Footer.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/index.zh-CN.md#_snippet_0

LANGUAGE: JSX
CODE:
```
<Layout>
  <Header>header</Header>
  <Layout>
    <Sider>left sidebar</Sider>
    <Content>main content</Content>
    <Sider>right sidebar</Sider>
  </Layout>
  <Footer>footer</Footer>
</Layout>
```

----------------------------------------

TITLE: Rendering Trees with Asynchronously Loaded Data in JSX
DESCRIPTION: This code snippet demonstrates the recommended approach for rendering trees when loading data asynchronously. It uses conditional rendering to show a loading state when data is not yet available.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
{
  this.state.treeData.length ? (
    <Tree>
      {this.state.treeData.map((data) => (
        <TreeNode />
      ))}
    </Tree>
  ) : (
    'loading tree'
  );
}
```

----------------------------------------

TITLE: Nested Themes in Ant Design React
DESCRIPTION: This example demonstrates how to create nested themes in Ant Design using multiple ConfigProvider components. It shows how child themes can inherit and override parent theme properties.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_5

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { Button, ConfigProvider, Space } from 'antd';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      token: {
        colorPrimary: '#1677ff',
      },
    }}
  >
    <Space>
      <Button type="primary">Theme 1</Button>
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: '#00b96b',
          },
        }}
      >
        <Button type="primary">Theme 2</Button>
      </ConfigProvider>
    </Space>
  </ConfigProvider>
);

export default App;
```

----------------------------------------

TITLE: Transforming Validation Value with rules.transform (TSX)
DESCRIPTION: Explains how to use the transform function within Ant Design Form.Item rules. This function allows modifying the value used for validation. In this case, it retrieves the values of multiple aggregated fields (names) from the FormStore and provides them as an array to the validation rules, ensuring validation operates on the combined data.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.zh-CN.md#_snippet_3

LANGUAGE: tsx
CODE:
```
rules={[{
  transform: () => {
    const values = names.map((name) => form.getFieldValue(name));
    return values;
  },
}]}
```

----------------------------------------

TITLE: Applying Custom antd Theme in Next.js _app.tsx
DESCRIPTION: This snippet modifies the default _app.tsx to wrap the main Component with antd's ConfigProvider. It imports the custom theme configuration defined in theme/themeConfig.ts and passes it to the theme prop of ConfigProvider, applying the custom theme to all antd components within the application.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.zh-CN.md#_snippet_5

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { ConfigProvider } from 'antd';
import type { AppProps } from 'next/app';

import theme from './theme/themeConfig';

const App = ({ Component, pageProps }: AppProps) => (
  <ConfigProvider theme={theme}>
    <Component {...pageProps} />
  </ConfigProvider>
);

export default App;
```

----------------------------------------

TITLE: Merging Custom and Inherited ClassNames (TSX)
DESCRIPTION: This TSX snippet enhances the previous `GeekProvider` example by correctly handling scenarios where a `className` might already be configured for the Button component in an ancestor `ConfigProvider`. It retrieves the existing `button?.className` from the context, uses the `classnames` utility to merge it with the dynamically generated class (`styles.btn`), and applies the combined string to the Button component, ensuring both inherited and custom styles can coexist.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { ConfigProvider } from 'antd';
import classNames from 'classnames';

const GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {
  const { button, getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);
  const btnPrefixCls = getPrefixCls('btn');
  const { styles } = useButtonStyle(btnPrefixCls);
  return (
    <ConfigProvider button={{ className: classNames(button?.className, styles.btn) }}>
      {props.children}
    </ConfigProvider>
  );
};

export default GeekProvider;
```

----------------------------------------

TITLE: Integrating Ant Design Button Component in React App
DESCRIPTION: Example of how to import and use an Ant Design Button component in a React application. This code modifies the src/App.js file to include the antd Button.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { Button } from 'antd';

const App = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default App;
```

----------------------------------------

TITLE: Using Ant Design Color Palettes in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to import and utilize the color palettes from the `@ant-design/colors` package after installation. It specifically imports the `blue` color object, logs the array of blue shades, and accesses the primary blue color (`#1677FF`) via the `primary` property. This allows developers to consistently apply Ant Design's color scheme in their applications.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/colors.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: js
CODE:
```
import { blue } from '@ant-design/colors';

console.log(blue); // ['#E6F4FF', '#BAE0FF', '#91CAFF', '#69B1FF', '#4096FF', '#1677FF', '#0958D9', '#003EB3', '#002C8C', '#001D66']
console.log(blue.primary); // '#1677FF'
```

----------------------------------------

TITLE: Define Ant Design Custom Theme Configuration (TypeScript)
DESCRIPTION: Creates a TypeScript file to define a custom theme configuration object for Ant Design components. This configuration, of type `ThemeConfig`, can be used to override default token values like font size and primary color, allowing for consistent branding across the application.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#_snippet_4

LANGUAGE: ts
CODE:
```
// theme/themeConfig.ts
import type { ThemeConfig } from 'antd';

const theme: ThemeConfig = {
  token: {
    fontSize: 16,
    colorPrimary: '#52c41a',
  },
};

export default theme;
```

----------------------------------------

TITLE: Using Ant Design DatePicker in React
DESCRIPTION: Demonstrates a minimal example of integrating and using the Ant Design DatePicker component within a functional React component. It shows the necessary imports and rendering of the component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/introduce.en-US.md#_snippet_2

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { DatePicker } from 'antd';

const App = () => {
  return <DatePicker />;
};

export default App;
```

----------------------------------------

TITLE: Overriding Specific Map Token in Ant Design Theme (TSX)
DESCRIPTION: This snippet shows how to directly override a specific Map Token, `colorPrimaryBg`, within the `token` object of the Ant Design theme configuration. Map Tokens are derived from Seed Tokens but can be individually customized for finer-grained theme control. This example sets a specific background color associated with the primary color.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_9

LANGUAGE: tsx
CODE:
```
const theme = {
  token: {
    colorPrimaryBg: '#e6f7ff',
  },
};
```

----------------------------------------

TITLE: ConfigProvider
DESCRIPTION: Demonstrates how the Drawer component interacts with Ant Design's ConfigProvider for global configuration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
./demo/config-provider.tsx
```

----------------------------------------

TITLE: Destroying All Modal Dialogs on Router Change
DESCRIPTION: Example demonstrating how to destroy all confirmation modal dialogs when the router changes. This is useful to automatically clean up modal dialogs without keeping references to each one.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import { browserHistory } from 'react-router';

// router change
browserHistory.listen(() => {
  Modal.destroyAll();
});
```

----------------------------------------

TITLE: Extracting Ref Type with GetRef and Using forwardRef - React (TSX)
DESCRIPTION: Exemplifies how to use Ant Design's GetRef utility in conjunction with React's forwardRef to extract the ref type from both a library component and a custom component. This snippet imports GetRef and Select from antd, uses TypeScript to extract the ref type, and shows usage with a custom div element via forwardRef. Inputs are component references; outputs are either library (BaseSelectRef) or intrinsic ref type (HTMLDivElement). Dependencies are React and Ant Design; implementation is for typing assistance only.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
import React, { forwardRef } from 'react';
import type { GetRef, Select } from 'antd';

type SelectRefType = GetRef<typeof Select>; // BaseSelectRef

const Div = forwardRef<HTMLDivElement>((_, ref) => <div ref={ref} />);
type DomRefType = GetRef<typeof Div>; // HTMLDivElement
```

----------------------------------------

TITLE: Installing Ant Design v5 Compatibility Packages using npm
DESCRIPTION: These commands install `@ant-design/compatible` (specifically the v5-compatible-v4 version using a tag) and `@ant-design/pro-components` using npm. These packages provide components like `Comment` and `PageHeader` that were moved from the core `antd` library in v5, allowing for their continued use during migration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
npm install --save @ant-design/compatible@v5-compatible-v4
npm install --save @ant-design/pro-components
```

----------------------------------------

TITLE: Binding Checkbox in Form.Item with valuePropName (TSX)
DESCRIPTION: Demonstrates how to correctly bind an Ant Design Checkbox within a Form.Item when the default value binding (`value`) is not suitable. By setting `valuePropName` to `checked`, the Form.Item will manage the `checked` property of the Checkbox instead of the default `value` property.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/checkbox/index.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
<Form.Item name="fieldA" valuePropName="checked">
  <Checkbox />
</Form.Item>
```

----------------------------------------

TITLE: Configuring Component ClassNames via ConfigProvider (TSX)
DESCRIPTION: This snippet demonstrates how to use Ant Design's ConfigProvider to apply custom CSS class names to specific components (Button, Checkbox, Divider) globally within its scope. This allows for targeted styling beyond the limitations of Design Tokens.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<ConfigProvider
  button={{ className: 'my-button' }}
  checkbox={{ className: 'my-checkbox' }}
  divider={{ className: 'my-divider' }}
/>
```

----------------------------------------

TITLE: Configuring Form Validation Messages Globally via ConfigProvider
DESCRIPTION: Shows how to set global validation message templates for Ant Design Forms using the `ConfigProvider` component, allowing for uniform configuration across multiple forms.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_1

LANGUAGE: jsx
CODE:
```
const validateMessages = {
  required: "'${name}' is Required!",
  // ...
};

<ConfigProvider form={{ validateMessages }}>
  <Form />
</ConfigProvider>;
```

----------------------------------------

TITLE: Fetching and Deleting Products with React Query in TSX
DESCRIPTION: Implements a React component (`src/pages/products.tsx`) that uses `useQuery` to fetch product data from `/api/products` and `useMutation` with `axios` to handle product deletion via `DELETE /api/products/:id`, invalidating the cache upon completion.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
import React from 'react';
import axios from 'axios';
import { useMutation, useQuery, useQueryClient } from 'umi';

import styles from './products.less';
import ProductList from '@/components/ProductList';

export default function Page() {
  const queryClient = useQueryClient();
  const productsQuery = useQuery(['products'], {
    queryFn() {
      return axios.get('/api/products').then((res) => res.data);
    },
  });
  const productsDeleteMutation = useMutation({
    mutationFn(id: string) {
      return axios.delete(`/api/products/${id}`);
    },
    onSettled: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
    },
  });
  if (productsQuery.isLoading) return null;
  return (
    <div>
      <h1 className={styles.title}>Page products</h1>
      <ProductList
        products={productsQuery.data.data}
        onDelete={(id) => {
          productsDeleteMutation.mutate(id);
        }}
      />
    </div>
  );
}
```

----------------------------------------

TITLE: Customizing Dropdown Option Rendering with optionRender in Ant Design
DESCRIPTION: This code snippet demonstrates how to use the optionRender prop to customize the rendering of dropdown options in Ant Design components. It allows for greater flexibility in styling and structuring the options displayed in dropdowns.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/option-render.md#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
import { Select, Space } from 'antd';

const { Option } = Select;

const handleChange = (value) => {
  console.log(`selected ${value}`);
};

const App = () => (
  <Select
    style={{ width: 120 }}
    onChange={handleChange}
    optionRender={(option) => (
      <Space>
        <span role="img" aria-label={option.data.label}>
          {option.data.emoji}
        </span>
        {option.data.desc}
      </Space>
    )}
    options={[
      {
        value: 'happy',
        label: 'Happy',
        desc: 'happy',
        emoji: '😄',
      },
      {
        value: 'sad',
        label: 'Sad',
        desc: 'sad',
        emoji: '😢',
      },
    ]}
  />
);

export default App;
```

----------------------------------------

TITLE: Importing and Using Ant Design Button in React (TSX)
DESCRIPTION: Modify the main application component (`src/App.tsx`) to import the `Button` component from `antd` and render it. This demonstrates basic component usage.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-rsbuild.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button } from 'antd';

const App: React.FC = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default App;
```

----------------------------------------

TITLE: DatePicker Common API - locale
DESCRIPTION: 国际化配置。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_16

LANGUAGE: typescript
CODE:
```
locale: object
```

----------------------------------------

TITLE: DatePicker Common API - presets
DESCRIPTION: 预设时间范围快捷选择, 自 5.8.0 起 value 支持函数返回值。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_30

LANGUAGE: typescript
CODE:
```
presets: { label: React.ReactNode, value: Dayjs | (() => Dayjs) }[]
```

----------------------------------------

TITLE: Replacing Moment.js Locale Import with Day.js Locale in JavaScript
DESCRIPTION: Demonstrates how to switch from importing and setting Moment.js locales to using Day.js locales, reflecting Ant Design v5's move from Moment.js to Day.js as the default date library.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_11

LANGUAGE: diff
CODE:
```
-   import moment from 'moment';
+   import dayjs from 'dayjs';
-   import 'moment/locale/zh-cn';
+   import 'dayjs/locale/zh-cn';

-   moment.locale('zh-cn');
+   dayjs.locale('zh-cn');
```

----------------------------------------

TITLE: Defining Ant Design Table Columns with Exported Types in TSX
DESCRIPTION: This snippet demonstrates the standard way to define columns for an Ant Design Table component using the exported `TableColumnsType`. It imports React, the Table component, and its associated type from 'antd', defines a `columns` array conforming to `TableColumnsType`, and renders the Table component with these columns.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
```tsx
import React from 'react';
import { Table, type TableColumnsType } from 'antd';

const columns: TableColumnsType = [
  {
    title: 'Name',
    dataIndex: 'name',
    key: 'name',
  },
];

export default () => <Table columns={columns} />;
```
```

----------------------------------------

TITLE: Initializing Ant Design Descriptions with items prop (TSX)
DESCRIPTION: Demonstrates the recommended way to configure the Ant Design Descriptions component using the `items` prop, available in versions 5.8.0 and later. An array of item objects is defined, each containing a `key`, `label`, and `children` property to structure the description list.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/descriptions/index.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
// >= 5.8.0 可用，推荐的写法 ✅

const items: DescriptionsProps['items'] = [
  {
    key: '1',
    label: 'UserName',
    children: <p>Zhou Maomao</p>,
  },
  {
    key: '2',
    label: 'Telephone',
    children: <p>1810000000</p>,
  },
  {
    key: '3',
    label: 'Live',
    children: <p>Hangzhou, Zhejiang</p>,
  },
  {
    key: '4',
    label: 'Remark',
    children: <p>empty</p>,
  },
  {
    key: '5',
    label: 'Address',
    children: <p>No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China</p>,
  },
];

<Descriptions title="User Info" items={items} />;
```

----------------------------------------

TITLE: Configuring antd-moment-webpack-plugin in JavaScript
DESCRIPTION: This snippet demonstrates how to configure the `@ant-design/moment-webpack-plugin` in a Webpack configuration file (`webpack-config.js`). Adding this plugin automatically replaces Ant Design's default Day.js dependency with Moment.js during the build process, without requiring changes to the component usage code.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_5

LANGUAGE: js
CODE:
```
// webpack-config.js
const AntdMomentWebpackPlugin = require('@ant-design/moment-webpack-plugin');

module.exports = {
  // ...
  plugins: [new AntdMomentWebpackPlugin()],
};
```

----------------------------------------

TITLE: Generating date-fns DatePicker Ant Design TSX
DESCRIPTION: This example demonstrates creating a custom Ant Design DatePicker component that uses the `date-fns` library. It utilizes the `DatePicker.generatePicker` helper function with the specific `dateFnsGenerateConfig` provided by `rc-picker`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.zh-CN.md#_snippet_6

LANGUAGE: tsx
CODE:
```
import { DatePicker } from 'antd';
import dateFnsGenerateConfig from 'rc-picker/es/generate/dateFns';

const MyDatePicker = DatePicker.generatePicker<Date>(dateFnsGenerateConfig);

export default MyDatePicker;
```

----------------------------------------

TITLE: Creating Moment-based Calendar with generateCalendar in TypeScript
DESCRIPTION: This snippet illustrates creating a custom Calendar component in TypeScript using Ant Design's `Calendar.generateCalendar` utility. Similar to the DatePicker example, it uses `momentGenerateConfig` to ensure the Calendar component works with the Moment.js library.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import { Calendar } from 'antd';
import type { Moment } from 'moment';
import momentGenerateConfig from 'rc-picker/es/generate/moment';

const MyCalendar = Calendar.generateCalendar<Moment>(momentGenerateConfig);

export default MyCalendar;
```

----------------------------------------

TITLE: Configuring an Ant Design Table - React (TSX)
DESCRIPTION: Shows how to define TypeScript-typed columns for an Ant Design Table component using TableColumnsType. This snippet imports the Table from antd, builds a columns array with proper typing, and then renders the Table component with these columns provided. The main dependency is Ant Design, and the key parameter is the columns definition array, which must conform to TableColumnsType. The output is a rendered Table with the specified columns, and the main constraint is TypeScript type compatibility.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Table, type TableColumnsType } from 'antd';

const columns: TableColumnsType = [
  {
    title: 'Name',
    dataIndex: 'name',
    key: 'name',
  },
];

export default () => <Table columns={columns} />;
```

----------------------------------------

TITLE: Implementing ProductList Component in React
DESCRIPTION: React component for displaying a list of products using Ant Design Table and Popconfirm components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button, Popconfirm, Table } from 'antd';
import type { TableProps } from 'antd';

interface DataType {
  id: string;
  name: string;
}

const ProductList: React.FC<{ products: DataType[]; onDelete: (id: string) => void }> = ({
  onDelete,
  products,
}) => {
  const columns: TableProps<DataType>['columns'] = [
    {
      title: 'Name',
      dataIndex: 'name',
    },
    {
      title: 'Actions',
      render(text, record) {
        return (
          <Popconfirm title="Delete?" onConfirm={() => onDelete(record.id)}>
            <Button>Delete</Button>
          </Popconfirm>
        );
      },
    },
  ];
  return <Table rowKey="id" dataSource={products} columns={columns} />;
};

export default ProductList;
```

----------------------------------------

TITLE: Rendering Basic Ant Design Card - JSX
DESCRIPTION: This snippet demonstrates the fundamental usage of the Ant Design `Card` component in JSX. It shows how to render a simple card with a defined title and content passed as children. This is the most basic way to structure a card container.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/card/index.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
<Card title="卡片标题">卡片内容</Card>
```

----------------------------------------

TITLE: Rendering Status Tag in Ant Design (React, TSX)
DESCRIPTION: This snippet demonstrates how to use Tag to represent different statuses (such as processing, success, warning, error) by color and/or icon. Requires Ant Design's Tag component and passing appropriate props for visual status cues. Useful for dashboards and status displays.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/status.tsx\">Status Tag</code>
```

----------------------------------------

TITLE: Defining CountConfig Interface - TypeScript
DESCRIPTION: This TypeScript snippet defines the CountConfig interface utilized within the Input component, specifying properties for character counting behaviors, display strategies, and formatting. It illustrates how developers can customize character count logic beyond the HTML maxLength attribute, supporting user-defined counting strategies, warning thresholds, and custom formatting of overflowed values. Key parameters include 'max' (limit), 'strategy' (custom counter), 'show' (display strategy), and 'exceedFormatter' (overflow handler); the snippet expects users to implement custom functions for some properties if special logic is needed, and is relevant only in the context of character-limited inputs.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface CountConfig {
  // Max character count. Different from the native `maxLength`, it will be marked warning but not truncated
  max?: number;
  // Custom character count, for example, the standard emoji length is greater than 1, you can customize the counting strategy to change it to 1
  strategy?: (value: string) => number;
  // Same as `showCount`
  show?: boolean | ((args: { value: string; count: number; maxLength?: number }) => ReactNode);
  // Custom clipping logic when the number of characters exceeds `count.max`, no clipping when not configured
  exceedFormatter?: (value: string, config: { max: number }) => string;
}
```

----------------------------------------

TITLE: Adjusting Space Size in Ant Design
DESCRIPTION: This code demonstrates how to customize the size of spacing between elements using the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<code src="./demo/size.tsx">Space Size</code>
```

----------------------------------------

TITLE: Getting Component Ref Type using GetRef
DESCRIPTION: Demonstrates how to extract the ref type from an Ant Design component using the GetRef utility type. This is useful for accessing ref definitions of components that are not directly exposed.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/_util/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Select } from 'antd';
import type { GetRef } from 'antd';

type SelectRefType = GetRef<typeof Select>; // BaseSelectRef
```

----------------------------------------

TITLE: Dynamic Row Span Example in React
DESCRIPTION: Example demonstrating dynamic row span configuration using onCell prop with state management.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/virtual-table.en-US.md#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
const Demo = () => {
  const [spanCount, setSpanCount] = useState(3);

  const columns = [{
    dataIndex: 'group',
    onCell: (_, index) => ({
      rowSpan: index % spanCount === 0 ? spanCount : 0,
    }),
  }];

  React.useEffect(() => {
    setSpanCount(5);
  }, []);

  return <Table columns={columns} {...props} />;
};
```

----------------------------------------

TITLE: 组件 Token
DESCRIPTION: Demonstrates how to customize the Drawer's appearance using Ant Design's Design Tokens.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
./demo/component-token.tsx
```

----------------------------------------

TITLE: Configuring Ant Design Menu for Responsive Flex Layout in JSX
DESCRIPTION: This JSX snippet demonstrates how to wrap the Ant Design Menu component within a flex container to enable responsive collapsing. It sets `minWidth: 0` and `flex: "auto"` on the Menu's style to allow it to shrink correctly within the flex layout.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/index.en-US.md#_snippet_2

LANGUAGE: jsx
CODE:
```
<div style={{ flex }}>
  <div style={{ ... }}>Some Content</div>
  <Menu style={{ minWidth: 0, flex: "auto" }} />
</div>
```

----------------------------------------

TITLE: Handling Array-to-Object Conversion in Ant Design Form with Cascader (TSX)
DESCRIPTION: Demonstrates how to handle the conversion of an array value (like [province, city]) from a Cascader into separate object properties (province, city) for initialValues and onFinish in an Ant Design Form. It shows how to transform the data structure between the UI component's expectation and the desired backend format.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Cascader, Form } from 'antd';

const data = { province: 'Beijing', city: 'Haidian' };
const options = [
  { value: 'zhejiang', label: 'Zhejiang', children: [{ value: 'hangzhou', label: 'Hangzhou' }] },
  { value: 'jiangsu', label: 'Jiangsu', children: [{ value: 'nanjing', label: 'Nanjing' }] }
];
const createUser = (values) => console.log(values);

const Demo = () => (
  <Form
    initialValues={{ province: [data.province, data.city] }}
    onFinish={(values) => {
      const { province, ...rest } = values;
      createUser({ province: province[0], city: province[1], ...rest });
    }}
  >
    <Form.Item label="Address" name="province">
      <Cascader options={options} placeholder="Please select" />
    </Form.Item>
  </Form>
);
export default Demo;
```

----------------------------------------

TITLE: Customizing Ant Design Theme with ConfigProvider (TSX)
DESCRIPTION: This TSX snippet illustrates how to use the `ConfigProvider` component from 'antd' to customize the theme. It wraps the `Button` component and sets a custom primary color ('#00b96b') within the `token` property of the `theme` configuration object. Requires 'antd' and 'react'. This demonstrates applying theme changes to wrapped components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-farm.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button, ConfigProvider } from 'antd';

export function Main() {
  return (
    <ConfigProvider theme={{ token: { colorPrimary: '#00b96b' } }}>
      <Button type="primary">Button</Button>
    </ConfigProvider>
  );
}
```

----------------------------------------

TITLE: Generating Mixed Theme Ant Design CSS using static-style-extract
DESCRIPTION: Demonstrates generating a CSS file that supports mixed themes using `@ant-design/static-style-extract`. It involves wrapping the extraction node with nested `ConfigProvider` components, each defining parts of the different themes (e.g., setting `colorBgBase` and `colorPrimary` differently) required in the application.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_8

LANGUAGE: tsx
CODE:
```
import { extractStyle } from '@ant-design/static-style-extract';
import { ConfigProvider } from 'antd';

const cssText = extractStyle((node) => (
  <>
    <ConfigProvider
      theme={{
        token: {
          colorBgBase: 'green ',
        },
      }}
    >
      {node}
    </ConfigProvider>
    <ConfigProvider
      theme={{
        token: {
          colorPrimary: 'blue',
        },
      }}
    >
      <ConfigProvider
        theme={{
          token: {
            colorBgBase: 'red ',
          },
        }}
      >
        {node}
      </ConfigProvider>
    </ConfigProvider>
  </>
));
```

----------------------------------------

TITLE: Applying Dark and Compact Algorithms to Ant Design Theme (TSX)
DESCRIPTION: This snippet demonstrates how to apply multiple pre-defined theme algorithms, specifically `darkAlgorithm` and `compactAlgorithm`, to an Ant Design theme. Algorithms transform Seed Tokens into Map Tokens according to specific rules (e.g., dark mode, compact spacing). Requires importing `theme` from `antd` to access the algorithms.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_11

LANGUAGE: tsx
CODE:
```
import { theme } from 'antd';

const { darkAlgorithm, compactAlgorithm } = theme;

const theme = {
  algorithm: [darkAlgorithm, compactAlgorithm],
};
```

----------------------------------------

TITLE: Simulating User Events: Enzyme simulate vs React Testing Library fireEvent Diff
DESCRIPTION: Compares how user interactions are simulated in tests. Enzyme uses `simulate(event)` on a found element, while React Testing Library uses `fireEvent.event(element)` on a standard DOM element found via standard selectors. This emphasizes RTl's focus on interacting with the DOM like a user would.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_1

LANGUAGE: diff
CODE:
```
--- a/old-test.js
+++ b/new-test.js
@@ -1,5 +1,5 @@
- import { mount } from 'enzyme';
+ import { render, fireEvent } from '@testing-library/react';
 
  // ... rendering code
 
- wrapper.find('.ant-handle').simulate('click');
+ fireEvent.click(container.querySelector('.ant-handle'));

```

----------------------------------------

TITLE: Generating Full Ant Design CSS File using static-style-extract
DESCRIPTION: Presents a basic TypeScript script (`scripts/genAntdCss.tsx`) that utilizes `@ant-design/static-style-extract` to generate a single CSS file containing all base styles for Ant Design components. The generated CSS is written to a specified output path (e.g., `./public/antd.min.css`) using the Node.js `fs` module.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// scripts/genAntdCss.tsx
import fs from 'fs';
import { extractStyle } from '@ant-design/static-style-extract';

const outputPath = './public/antd.min.css';

const css = extractStyle();

fs.writeFileSync(outputPath, css);
```

----------------------------------------

TITLE: Dot Badge
DESCRIPTION: Shows the usage of the Badge as a simple red dot indicator without a number. Code referenced from ./demo/dot.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
./demo/dot.tsx
```

----------------------------------------

TITLE: Importing and Using Ant Design Button Component in React
DESCRIPTION: React component example showing how to import and use the Button component from Ant Design. This snippet demonstrates the basic usage of an Ant Design component in a Vite-powered React application.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { Button } from 'antd';

const App = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default App;
```

----------------------------------------

TITLE: Implementing disabledTime in Ant Design DatePicker for a Specific Date-Time Range
DESCRIPTION: This TSX function `disabledTime` works with the `disabledDate` for a specific date-time range (`2024-01-01 09:00:00` to `2024-01-02 17:00:00`) in an Ant Design DatePicker. It takes the current date (`date`) being considered for time selection. If the date is '2024-01-01', it disables hours before 9 AM. If the date is '2024-01-02', it disables hours after 5 PM (17:00). For any dates between these (already permitted by `disabledDate`), it returns an empty object, enabling all times. It relies on Day.js for date comparisons.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
const disabledTime = (date) => {
  if (date.isSame('2024-01-01', 'day')) {
    return {
      disabledHours: () => Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour < 9),
    };
  }

  if (date.isSame('2024-01-02', 'day')) {
    return {
      disabledHours: () => Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour > 17),
    };
  }

  // Only need to consider the start and end time
  // the range itself has been disabled by `disabledDate`
  return {};
};
```

----------------------------------------

TITLE: Customizing Luxon DatePicker Config Ant Design TSX
DESCRIPTION: This example shows how to customize the default Luxon configuration used by a generated Ant Design DatePicker. It demonstrates spreading the default config and overriding specific methods, such as `getWeekFirstDay`, to alter the component's behavior based on Luxon's features.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.zh-CN.md#_snippet_8

LANGUAGE: tsx
CODE:
```
import { DatePicker } from 'antd';
import type { DateTime } from 'luxon';
import luxonGenerateConfig from 'rc-picker/lib/generate/luxon';

const customLuxonConfig = {
  ...luxonGenerateConfig,
  getWeekFirstDay(locale) {
    // 在这里编写你的自定义实现
  },
};

const MyDatePicker = DatePicker.generatePicker<DateTime>(customLuxonConfig);

export default MyDatePicker;
```

----------------------------------------

TITLE: Wrapping Ant Design Sub-Components for Next.js App Router (TSX)
DESCRIPTION: This code provides a workaround for using Ant Design sub-components (`Typography.Title`, `Paragraph`, etc.) in Next.js App Router environments where directly accessing them via dot notation in server components is restricted. It creates a client-side wrapper component (`'use client'`) that re-exports the sub-components via `React.forwardRef`, allowing them to be used in client-rendered parts of the application. It depends on `antd/Typography` and React.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.zh-CN.md#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client';

import React from 'react';
import { Typography as OriginTypography } from 'antd';
import type { LinkProps } from 'antd/es/typography/Link';
import type { ParagraphProps } from 'antd/es/typography/Paragraph';
import type { TextProps } from 'antd/es/typography/Text';
import type { TitleProps } from 'antd/es/typography/Title';

const Title = React.forwardRef<HTMLElement, TitleProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Title ref={ref} {...props} />,
);

const Paragraph = React.forwardRef<HTMLElement, ParagraphProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Paragraph ref={ref} {...props} />,
);

const Link = React.forwardRef<HTMLElement, LinkProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Link ref={ref} {...props} />,
);

const Text = React.forwardRef<HTMLElement, TextProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Text ref={ref} {...props} />,
);

export { Title, Link, Text, Paragraph };
```

----------------------------------------

TITLE: Generating Luxon DatePicker Ant Design TSX
DESCRIPTION: This snippet illustrates how to create an Ant Design DatePicker component that is configured to work with the Luxon library. It uses `DatePicker.generatePicker` along with the `luxonGenerateConfig` generator provided by `rc-picker`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.zh-CN.md#_snippet_7

LANGUAGE: tsx
CODE:
```
import { DatePicker } from 'antd';
import type { DateTime } from 'luxon';
import luxonGenerateConfig from 'rc-picker/lib/generate/luxon';

const MyDatePicker = DatePicker.generatePicker<DateTime>(luxonGenerateConfig);

export default MyDatePicker;
```

----------------------------------------

TITLE: DatePicker API - format
DESCRIPTION: 展示的日期格式，配置参考 dayjs#format。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_45

LANGUAGE: typescript
CODE:
```
format: formatType
```

----------------------------------------

TITLE: Removing babel-plugin-import from Babel Configuration (JSON/JavaScript)
DESCRIPTION: Illustrates removing the `babel-plugin-import` configuration for `antd` from a Babel config file (e.g., `.babelrc`), as it's no longer necessary with Ant Design v5's CSS-in-JS approach which handles automatic tree-shaking.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_9

LANGUAGE: diff
CODE:
```
"plugins": [
- ["import", { "libraryName": "antd", "libraryDirectory": "lib"}, "antd"],
]
```

----------------------------------------

TITLE: Watching Form Field Value with useWatch (Basic)
DESCRIPTION: Demonstrates how to use `Form.useWatch` to get the real-time value of a specific form field ('username') and use it to fetch data with `useSWR`. The hook is provided with the form instance.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_10

LANGUAGE: tsx
CODE:
```
const Demo = () => {
  const [form] = Form.useForm();
  const userName = Form.useWatch('username', form);

  const { data: options } = useSWR(`/api/user/${userName}`, fetcher);

  return (
    <Form form={form}>
      <Form.Item name="username">
        <AutoComplete options={options} />
      </Form.Item>
    </Form>
  );
};
```

----------------------------------------

TITLE: Customizing Search in Ant Design Select Component using filterOption
DESCRIPTION: This snippet demonstrates how to use the filterOption prop in Ant Design's Select component to customize the search functionality. It allows for more control over how options are filtered based on the input search value.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/search-filter-option.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Select } from 'antd';
import React from 'react';

const { Option } = Select;

const handleChange = (value) => {
  console.log(`selected ${value}`);
};

const App = () => (
  <Select
    showSearch
    style={{ width: 200 }}
    placeholder="Search to Select"
    optionFilterProp="children"
    onChange={handleChange}
    filterOption={(input, option) =>
      (option?.label ?? '').toLowerCase().includes(input.toLowerCase())
    }
    options={[
      {
        value: 'jack',
        label: 'Jack',
      },
      {
        value: 'lucy',
        label: 'Lucy',
      },
      {
        value: 'tom',
        label: 'Tom',
      },
    ]}
  />
);

export default App;
```

----------------------------------------

TITLE: Customizing Luxon Configuration for Ant Design DatePicker
DESCRIPTION: This snippet illustrates how to customize the behavior of the Luxon-based DatePicker. It involves spreading the default `luxonGenerateConfig` and overriding specific functions, such as `getWeekFirstDay`, to tailor the date handling logic according to specific requirements, while still using Luxon as the underlying library.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_8

LANGUAGE: tsx
CODE:
```
import { DatePicker } from 'antd';
import type { DateTime } from 'luxon';
import luxonGenerateConfig from 'rc-picker/lib/generate/luxon';

const customLuxonConfig = {
  ...luxonGenerateConfig,
  getWeekFirstDay(locale) {
    // Your custom implementation goes here
  },
};

const MyDatePicker = DatePicker.generatePicker<DateTime>(customLuxonConfig);

export default MyDatePicker;
```

----------------------------------------

TITLE: Updating Ant Design Select Component API for Popup Classname in v5
DESCRIPTION: Explains that Ant Design v5 standardizes the prop for applying custom CSS classes to component popups using `popupClassName`. This example shows replacing the deprecated `dropdownClassName` prop with `popupClassName` for the `Select` component within a React functional component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_1

LANGUAGE: diff
CODE:
```
  import { Select } from 'antd';

  const App: React.FC = () => (
    <Select
-     dropdownClassName="my-select-popup"
+     popupClassName="my-select-popup"
    />
  );

  export default App;
```

----------------------------------------

TITLE: Using Mentions with options prop (>=5.1.0)
DESCRIPTION: Demonstrates the recommended way to use the Ant Design Mentions component by passing an array of options directly to the `options` prop. This method is available from version 5.1.0 onwards and offers better performance and data organization compared to the older approach.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/index.zh-CN.md#_snippet_0

LANGUAGE: JSX
CODE:
```
// >=5.1.0 可用，推荐的写法 ✅
const options = [{ value: 'sample', label: 'sample' }];
return <Mentions options={options} />;
```

----------------------------------------

TITLE: Flex Alignment Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file showing how to use the 'align' prop on the Row component for vertical alignment of columns within an Ant Design grid layout. The actual code implementing this example resides in the './demo/flex-align.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: html
CODE:
```
<code src="./demo/flex-align.tsx">Alignment</code>
```

----------------------------------------

TITLE: Customizing Rate Component Characters with Render Function in React
DESCRIPTION: This snippet shows the type definition for a render function that can be used to customize each character in the Rate component. It takes RateProps as an argument and returns a ReactNode, allowing for flexible and dynamic character rendering.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/rate/demo/character-function.md#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
(RateProps) => ReactNode
```

----------------------------------------

TITLE: Setting Up and Running Vite React Project
DESCRIPTION: Commands to navigate into the project directory, install dependencies, and start the development server.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ cd antd-demo
$ npm install
$ npm run dev
```

----------------------------------------

TITLE: Setting Global Two-Tone Color (JavaScript)
DESCRIPTION: Illustrates using the static methods `setTwoToneColor` and `getTwoToneColor` from `@ant-design/icons`. These functions allow you to globally configure the primary color used for all two-tone icons in the application. Required dependency: `@ant-design/icons`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { getTwoToneColor, setTwoToneColor } from '@ant-design/icons';

setTwoToneColor('#eb2f96');
getTwoToneColor(); // #eb2f96
```

----------------------------------------

TITLE: DatePicker Common API - placeholder
DESCRIPTION: 输入框提示文字。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_25

LANGUAGE: typescript
CODE:
```
placeholder: string | [string, string]
```

----------------------------------------

TITLE: Updating Ant Design Component APIs for Controlled Visibility in v5
DESCRIPTION: Shows the API changes in Ant Design v5 for controlling the visibility of popup-like components within a React functional component. It demonstrates replacing `visible` with `open` for `Modal`, conditionally rendering `Tag` instead of using its `visible` prop, replacing `filterDropdownVisible` with `filterDropdownOpen` in `Table` columns, and consolidating `tooltipVisible` into the `tooltip.open` property for `Slider`. Requires React and useState.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_2

LANGUAGE: diff
CODE:
```
  import { Modal, Tag, Table, Slider } from 'antd';

  const App: React.FC = () => {
    const [visible, setVisible] = useState(true);

    return (
      <>
-       <Modal visible={visible}>content</Modal>
+       <Modal open={visible}>content</Modal>

-       <Tag visible={visible}>tag</Tag>
+       {visible && <Tag>tag</Tag>}

        <Table
          data={[]}
          columns={[
            {
              title: 'Name',
              dataIndex: 'name',
-             filterDropdownVisible: visible,
+             filterDropdownOpen: visible,
            }
          ]}
        />

-       <Slider tooltipVisible={visible} />
+       <Slider tooltip={{ open: visible }} />
      </>
    );
  }

  export default App;
```

----------------------------------------

TITLE: Rendering Components: Enzyme mount vs React Testing Library render Diff
DESCRIPTION: This code snippet shows the core difference in rendering components between Enzyme's `mount` method and React Testing Library's `render` method. It highlights the change in import statement and the return value (`wrapper` vs `container`), demonstrating the switch to a testing approach focused on the rendered DOM.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_0

LANGUAGE: diff
CODE:
```
--- a/old-test.js
+++ b/new-test.js
@@ -1,8 +1,8 @@
- import { mount } from 'enzyme';
+ import { render } from '@testing-library/react';
 import { ConfigProvider, Slider } from 'antd';
 
- const wrapper = mount(
+ const { container } = render(
       <ConfigProvider getPopupContainer={getPopupContainer}>
         <Slider />
       </ConfigProvider>,

```

----------------------------------------

TITLE: Handling Inter-Form Communication with Form.Provider (JSX)
DESCRIPTION: This snippet demonstrates using `Form.Provider` to enable communication between multiple Form components. It captures the `onFormFinish` event, allowing actions to be performed when a specific named form (e.g., 'form1') within the provider's scope is submitted.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_5

LANGUAGE: jsx
CODE:
```
<Form.Provider
  onFormFinish={(name) => {
    if (name === 'form1') {
      // Do something...
    }
  }}
>
  <Form name="form1">...</Form>
  <Form name="form2">...</Form>
</Form.Provider>
```

----------------------------------------

TITLE: Creating date-fns-based DatePicker with generatePicker in TypeScript
DESCRIPTION: This snippet shows how to create a custom DatePicker component compatible with the `date-fns` library. It uses Ant Design's `DatePicker.generatePicker` along with `dateFnsGenerateConfig` from `rc-picker`, specifying the native `Date` object as the date type.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
import { DatePicker } from 'antd';
import dateFnsGenerateConfig from 'rc-picker/lib/generate/dateFns';

const MyDatePicker = DatePicker.generatePicker<Date>(dateFnsGenerateConfig);

export default MyDatePicker;
```

----------------------------------------

TITLE: Configuring Global Notification Settings in JavaScript
DESCRIPTION: This code shows how to configure global default options for all notification components using the notification.config method. It sets placement, position, duration, and enables RTL mode.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/notification/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: js
CODE:
```
notification.config({
  placement: 'bottomRight',
  bottom: 50,
  duration: 3,
  rtl: true,
});
```

----------------------------------------

TITLE: Configuring Calendar Locale in JSX
DESCRIPTION: Example showing how to set up and configure the Calendar component with localization settings using dayjs
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/calendar/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.
// import dayjs from 'dayjs';
// import 'dayjs/locale/zh-cn';
// dayjs.locale('zh-cn');

<Calendar cellRender={cellRender} onPanelChange={onPanelChange} onSelect={onSelect} />
```

----------------------------------------

TITLE: Defining Ant Design Descriptions Items (TSX)
DESCRIPTION: Illustrates two methods for populating the Ant Design `Descriptions` component. The first method (recommended for v5.8.0+) uses the `items` prop with an array of objects, each defining a `key`, `label`, and `children`. The second (deprecated for v5.8.0+) method uses nested `<Descriptions.Item>` components directly within the `<Descriptions>` tag. Both examples render a 'User Info' description list. Requires React and Ant Design library.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/descriptions/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
// works when >= 5.8.0, recommended ✅

const items: DescriptionsProps['items'] = [
  {
    key: '1',
    label: 'UserName',
    children: <p>Zhou Maomao</p>,
  },
  {
    key: '2',
    label: 'Telephone',
    children: <p>1810000000</p>,
  },
  {
    key: '3',
    label: 'Live',
    children: <p>Hangzhou, Zhejiang</p>,
  },
  {
    key: '4',
    label: 'Remark',
    children: <p>empty</p>,
  },
  {
    key: '5',
    label: 'Address',
    children: <p>No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China</p>,
  },
];

<Descriptions title="User Info" items={items} />;

// works when <5.8.0 , deprecated when >=5.8.0 🙅🏻‍♀️

<Descriptions title="User Info">
  <Descriptions.Item label="UserName">Zhou Maomao</Descriptions.Item>
  <Descriptions.Item label="Telephone">1810000000</Descriptions.Item>
  <Descriptions.Item label="Live">Hangzhou, Zhejiang</Descriptions.Item>
  <Descriptions.Item label="Remark">empty</Descriptions.Item>
  <Descriptions.Item label="Address">
    No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China
  </Descriptions.Item>
</Descriptions>;
```

----------------------------------------

TITLE: Implementing Ant Design Collapse using items prop and Panel components in TSX
DESCRIPTION: This snippet demonstrates two methods for creating an Ant Design Collapse component. The first (recommended for version >= 5.6.0) uses the `items` prop, which takes an array of objects defining each panel's `key`, `label`, and `children`. The second method (deprecated in >= 5.6.0) uses nested `Collapse.Panel` components, defining `header` and `key` props directly on the `Panel`. Both examples initialize the collapse with the first panel active using `defaultActiveKey={['1']}`. It requires the `Collapse` component and potentially `CollapseProps` type from Ant Design.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/collapse/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
// works when >= 5.6.0, recommended ✅
const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

const items: CollapseProps['items'] = [
  {
    key: '1',
    label: 'This is panel header 1',
    children: <p>{text}</p>,
  },
  {
    key: '2',
    label: 'This is panel header 2',
    children: <p>{text}</p>,
  },
  {
    key: '3',
    label: 'This is panel header 3',
    children: <p>{text}</p>,
  },
];

<Collapse items={items} defaultActiveKey={['1']} />;

// works when <5.6.0 , deprecated when >=5.6.0  🙅🏻‍♀️

<Collapse defaultActiveKey={['1']} onChange={onChange}>
  <Panel header="This is panel header 1" key="1">
    <p>{text}</p>
  </Panel>
  <Panel header="This is panel header 2" key="2">
    <p>{text}</p>
  </Panel>
  <Panel header="This is panel header 3" key="3">
    <p>{text}</p>
  </Panel>
</Collapse>;
```

----------------------------------------

TITLE: Providing Default getContainer for Pop-ups - React TypeScript
DESCRIPTION: This snippet defines a default getContainer function that creates a new div, appends it to document.body, and returns the div. It then showcases passing getContainer as a prop to a PopupWrapper component. This pattern helps standardize where pop-ups are rendered and ensures that containers are attached to the DOM before use. React must be available, and the PopupWrapper component must accept a getContainer prop. Parameters involve customizing getContainer for various rendering scenarios.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.en-US.md#2025-04-23_snippet_1

LANGUAGE: TypeScript
CODE:
```
// Fake Code. Just for Demo\nconst defaultGetContainer = () => {\n  const div = document.createElement('div');\n  document.body.appendChild(div);\n  return div;\n};\n\nconst SomeComponent = ({ getContainer = defaultGetContainer }) => (\n  <PopupWrapper getContainer={getContainer} />\n);\n
```

----------------------------------------

TITLE: Creating Icons from Iconfont.cn (JSX)
DESCRIPTION: Demonstrates how to use the `createFromIconfontCN` utility from `@ant-design/icons` to generate a custom icon component. This component renders icons from a specified script URL hosted on iconfont.cn. Required dependencies: `react`, `@ant-design/icons`, `react-dom`. Input is the `scriptUrl` option.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#_snippet_4

LANGUAGE: JSX
CODE:
```
import React from 'react';
import { createFromIconfontCN } from '@ant-design/icons';
import ReactDOM from 'react-dom/client';

const MyIcon = createFromIconfontCN({
  scriptUrl: '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js', // generate in iconfont.cn
});

ReactDOM.createRoot(mountNode).render(<MyIcon type="icon-example" />);
```

----------------------------------------

TITLE: 无遮罩
DESCRIPTION: Shows how to disable the overlay mask using the `mask={false}` prop.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
./demo/no-mask.tsx
```

----------------------------------------

TITLE: Initializing Mentions Component in React/JSX
DESCRIPTION: Demonstrates the recommended usage of the Mentions component with options prop, and the deprecated usage with Mentions.Option child components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
// works when >=5.1.0, recommended ✅
const options = [{ value: 'sample', label: 'sample' }];
return <Mentions options={options} />;

// works when <5.1.0, deprecated when >=5.1.0 🙅🏻‍♀️
return (
  <Mentions onChange={onChange}>
    <Mentions.Option value="sample">Sample</Mentions.Option>
  </Mentions>
);
```

----------------------------------------

TITLE: Ant Design Table Column Group Configuration (React/TS)
DESCRIPTION: Defines the configuration object for grouping multiple columns under a common header in the Ant Design Table component. It primarily requires a title and an array of child columns.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.zh-CN.md#_snippet_2

LANGUAGE: typescript
CODE:
```
interface ColumnGroupType<RecordType> extends ColumnType<RecordType> {
  children: ColumnsType<RecordType>;
}
```

----------------------------------------

TITLE: Integrating Ant Design CSS Generation into Next.js Build Process
DESCRIPTION: Illustrates how to modify the `scripts` section of a `package.json` file (specifically for a Next.js project) to automatically run the CSS generation script (`scripts/genAntdCss.tsx`) using `ts-node`. The script is executed before starting the development server (`predev`) and before building the production application (`prebuild`), ensuring the CSS file is up-to-date.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
// package.json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "predev": "ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx",
    "prebuild": "cross-env NODE_ENV=production ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx"
  }
}
```

----------------------------------------

TITLE: Configuring Steps Component size to small JSX
DESCRIPTION: To render a compact, "mini" version of the Ant Design Steps component, set the `size` prop to the string value "small". This modifies the component's visual appearance to be smaller.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/steps/demo/small-size.md#_snippet_0

LANGUAGE: JSX
CODE:
```
<Steps size="small">
```

----------------------------------------

TITLE: Using getValueProps for Aggregate Field Transformation (TSX)
DESCRIPTION: Illustrates the conceptual use of `getValueProps` within a `Form.Item`. This function retrieves values for multiple specified `names` from the form instance (`form.getFieldValue(name)`) and combines them into a single array to be passed as the `value` prop to the child input component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
getValueProps={() => ({ value: names.map((name) => form.getFieldValue(name)) })}
```

----------------------------------------

TITLE: Forcing Form.Item Re-render on Any Form Change using shouldUpdate (JSX)
DESCRIPTION: This snippet demonstrates using the `shouldUpdate` prop set to `true` on a `Form.Item`. This configuration forces the `Form.Item` to re-render whenever any value within the parent Form changes. The child component must be returned by a function for `shouldUpdate` to work correctly. This example displays the current form values in a <pre> tag.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Form.Item shouldUpdate>
  {() => {
    return <pre>{JSON.stringify(form.getFieldsValue(), null, 2)}</pre>;
  }}
</Form.Item>
```

----------------------------------------

TITLE: Using Render Prop for Custom List Rendering (JSX)
DESCRIPTION: Demonstrates using the `children` render prop to customize the rendering of the Transfer component's source and target lists. The function receives `listProps` containing list data, selection state, and control functions, enabling the creation of a custom list component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/transfer/index.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
<Transfer {...props}>{(listProps) => <YourComponent {...listProps} />}</Transfer>
```

----------------------------------------

TITLE: Implementing disabledTime in Ant Design DatePicker for Working Hours (9-5)
DESCRIPTION: This TSX function `disabledTime` is intended for the `disabledTime` prop of an Ant Design DatePicker, complementing the weekend disabling from `disabledDate`. It returns an object specifying disabled hours. The `disabledHours` function generates an array of numbers from 0 to 23 and filters it to keep only hours outside the 9 AM (inclusive) to 5 PM (exclusive) range, effectively disabling time selection outside standard working hours.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
const disabledTime = () => ({
  disabledHours: () => {
    return Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour < 9 || hour > 17);
  },
});
```

----------------------------------------

TITLE: Installing Ant Design Moment.js Webpack Plugin using npm
DESCRIPTION: This command installs the `@ant-design/moment-webpack-plugin` as a development dependency using npm. This plugin allows projects migrating to Ant Design v5 to continue using Moment.js instead of the default Day.js, by configuring it within their Webpack setup.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_13

LANGUAGE: bash
CODE:
```
npm install --save-dev @ant-design/moment-webpack-plugin
```

----------------------------------------

TITLE: Merging Remote Changes
DESCRIPTION: Series of commands to sync with upstream master and rebase local changes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-collaborator.en-US.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
git checkout master
```

LANGUAGE: bash
CODE:
```
git pull upstream master
```

LANGUAGE: bash
CODE:
```
git checkout fix-branch
```

LANGUAGE: bash
CODE:
```
git rebase master
```

LANGUAGE: bash
CODE:
```
git push origin fix-branch
```

----------------------------------------

TITLE: Defining Tree Props in TypeScript
DESCRIPTION: Comprehensive TypeScript interface definition for TreeSelect component props, including options for customization, selection behavior, styling, and event handling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree-select/index.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
| 参数 | 说明 | 类型 | 默认值 | 版本 |
| --- | --- | --- | --- | --- |
| allowClear | 自定义清除按钮 | boolean \| { clearIcon?: ReactNode } | false | 5.8.0: 支持对象形式 |
| autoClearSearchValue | 当多选模式下值被选择，自动清空搜索框 | boolean | true |  |
| defaultOpen | 是否默认展开下拉菜单 | boolean | - |  |
| defaultValue | 指定默认选中的条目 | string \| string\[] | - |  |
| disabled | 是否禁用 | boolean | false |  |
| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |
| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean \| number | true | 5.5.0 |
| dropdownRender | 自定义下拉框内容 | (originNode: ReactNode, props) => ReactNode | - |  |
| dropdownStyle | 下拉菜单的样式 | object | - |  |
| fieldNames | 自定义节点 label、value、children 的字段 | object | { label: `label`, value: `value`, children: `children` } | 4.17.0 |
```

----------------------------------------

TITLE: 基础抽屉
DESCRIPTION: Demonstrates a basic implementation of the Drawer component sliding from the right edge.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
./demo/basic-right.tsx
```

----------------------------------------

TITLE: Configuring Form Validation Messages via ConfigProvider in TSX
DESCRIPTION: This snippet shows how to use the `ConfigProvider` component in Ant Design to globally configure custom validation messages for Form components. The `form` prop accepts an object with a `validateMessages` property.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<ConfigProvider form={{ validateMessages }} />
```

----------------------------------------

TITLE: Creating Luxon-based DatePicker with generatePicker in TypeScript
DESCRIPTION: This snippet demonstrates creating a custom DatePicker component compatible with the Luxon library. It uses `DatePicker.generatePicker` from Ant Design and `luxonGenerateConfig` from `rc-picker`, specifying `DateTime` (from Luxon) as the date type. This enables using Luxon for date handling within Ant Design.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
import { DatePicker } from 'antd';
import type { DateTime } from 'luxon';
import luxonGenerateConfig from 'rc-picker/lib/generate/luxon';

const MyDatePicker = DatePicker.generatePicker<DateTime>(luxonGenerateConfig);

export default MyDatePicker;
```

----------------------------------------

TITLE: Running Ant Design v5 Codemod using npx/pnpm (Shell)
DESCRIPTION: Provides commands using `npx` or `pnpm` to execute the `@ant-design/codemod-v5` tool, which automatically refactors code (in the specified `src` directory) to align with Ant Design v5 changes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
# 使用 npx 直接运行
npx -p @ant-design/codemod-v5 antd5-codemod src

# 或者使用 pnpm 直接运行
pnpm --package=@ant-design/codemod-v5 dlx antd5-codemod src
```

----------------------------------------

TITLE: Refactoring Ant Design Form.Item for Multiple Elements using Diff
DESCRIPTION: This diff illustrates how to modify an Ant Design `Form.Item` to accommodate additional elements, such as descriptive text, alongside the primary input control. The original structure with the input as a direct child is replaced by nesting a `Form.Item` with the `noStyle` prop around the `Input` to handle data binding, while the outer `Form.Item` manages the label and overall layout, now including a `<span>`. This pattern is necessary because `Form.Item` only binds to its direct child.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/demo/complex-form-control.md#2025-04-23_snippet_0

LANGUAGE: diff
CODE:
```
- <Form.Item label="Field" name="field">
-   <Input />
- </Form.Item>
+ <Form.Item label="Field">
+   <Form.Item name="field" noStyle><Input /></Form.Item> // that will bind input
+   <span>description</span>
+ </Form.Item>
```

----------------------------------------

TITLE: Updating BackTop Component Usage with FloatButton in React (JSX)
DESCRIPTION: Illustrates replacing the deprecated `BackTop` component with the new `FloatButton.BackTop` component introduced in Ant Design v5.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: diff
CODE:
```
- import { BackTop } from 'antd';
+ import { FloatButton } from 'antd';

  const App: React.FC = () => (
    <>
-     <BackTop />
+     <FloatButton.BackTop />
    </>
  );

  export default App;
```

----------------------------------------

TITLE: Creating a Custom ProLayout Component with Umi in TypeScript (React)
DESCRIPTION: This snippet provides a TypeScript React component for 'src/layouts/index.tsx', implementing a custom application layout using Ant Design's ProLayout. It utilizes Umi's useAppData and useLocation hooks to supply menu configuration and highlighting logic. The menuItemRender customizes navigation by enabling <Link> routing for menu items. Dependencies required are '@ant-design/pro-components' and 'umi'. The component receives its route definitions from Umi and renders child pages through <Outlet />. Inputs include route data and location; the output is a rendered layout with navigation and content switching. Intended for use as the application's root layout.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_11

LANGUAGE: tsx
CODE:
```
import { ProLayout } from '@ant-design/pro-components';
import { Link, Outlet, useAppData, useLocation } from 'umi';

export default function Layout() {
  const { clientRoutes } = useAppData();
  const location = useLocation();
  return (
    <ProLayout
      route={clientRoutes[0]}
      location={location}
      title="Umi x Ant Design"
      menuItemRender={(menuItemProps, defaultDom) => {
        if (menuItemProps.isUrl || menuItemProps.children) {
          return defaultDom;
        }
        if (menuItemProps.path && location.pathname !== menuItemProps.path) {
          return (
            <Link to={menuItemProps.path} target={menuItemProps.target}>
              {defaultDom}
            </Link>
          );
        }
        return defaultDom;
      }}
    >
      <Outlet />
    </ProLayout>
  );
}
```

----------------------------------------

TITLE: Manual Handling of Aggregate Fields in Ant Design Form (TSX)
DESCRIPTION: Demonstrates the standard approach to handling aggregate fields (like province and city) in an Ant Design Form using `Cascader`. It requires manual data transformation within `initialValues` to combine fields for the component and within `onFinish` to split the component's value back into separate fields before submission.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Cascader, Form } from 'antd';

const data = { province: 'Beijing', city: 'Haidian' };
const options = [
  { value: 'zhejiang', label: 'Zhejiang', children: [{ value: 'hangzhou', label: 'Hangzhou' }] },
  { value: 'jiangsu', label: 'Jiangsu', children: [{ value: 'nanjing', label: 'Nanjing' }] },
];
const createUser = (values) => console.log(values);

const Demo = () => (
  <Form
    initialValues={{ province: [data.province, data.city] }}
    onFinish={(values) => {
      const { province, ...rest } = values;
      createUser({ province: province[0], city: province[1], ...rest });
    }}
  >
    <Form.Item label="Address" name="province">
      <Cascader options={options} placeholder="Please select" />
    </Form.Item>
  </Form>
);
export default Demo;
```

----------------------------------------

TITLE: Documenting Basic Layout Structure in Markdown
DESCRIPTION: This snippet contains Markdown documentation for a basic 'header-content-footer' layout in Ant Design. It describes the layout structure, navigation placement, content organization, and discusses the advantages and limitations of this layout pattern.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/demo/top.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

最基本的『上-中-下』布局。

一般主导航放置于页面的顶端，从左自右依次为：logo、一级导航项、辅助菜单（用户、设置、通知等）。通常将内容放在固定尺寸（例如：1200px）内，整个页面排版稳定，不受用户终端显示器影响；上下级的结构符合用户上下浏览的习惯，也是较为经典的网站导航模式。页面上下切分的方式提高了主工作区域的信息展示效率，但在纵向空间上会有一些牺牲。此外，由于导航栏水平空间的限制，不适合那些一级导航项很多的信息结构。

## en-US

The most basic "header-content-footer" layout.

Generally, the mainnav is placed at the top of the page, and includes the logo, the first level navigation, and the secondary menu (users, settings, notifications) from left to right in it. We always put contents in a fixed size navigation (eg: `1200px`), the layout of the whole page is stable, it's not affected by the viewing area.

Top-bottom structure is conformed with the top-bottom viewing habit, it's a classical navigation pattern of websites. This pattern demonstrates efficiency in the main workarea, while using some vertical space. And because the horizontal space of the navigation is limited, this pattern is not suitable for cases when the first level navigation contains many elements or links.
```

----------------------------------------

TITLE: Extracting Props Type with GetProps Utility - TypeScript
DESCRIPTION: Illustrates how to extract the props type of a sub-component (such as Checkbox.Group) using Ant Design's GetProps utility type. This snippet uses TypeScript's typeof operator in conjunction with GetProps to determine the prop types. Dependencies include Ant Design's Checkbox and GetProps. Input is a component reference, and output is its props type. This is purely for compile-time type checking.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.en-US.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import type { Checkbox, GetProps } from 'antd';

type CheckboxGroupType = GetProps<typeof Checkbox.Group>;
```

----------------------------------------

TITLE: Checking strictNullChecks in tsconfig.json (JSON)
DESCRIPTION: This snippet displays the relevant part of a `tsconfig.json` file where the `strictNullChecks` compiler option is configured. When set to `true`, TypeScript enforces stricter null and undefined checks, which can cause errors like the one shown in the previous `setFieldsValue` example if not handled properly in type definitions or value assignments.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.zh-CN.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "strictNullChecks": true
}
```

----------------------------------------

TITLE: Enabling Umi React Query Plugin (.umirc.ts Diff)
DESCRIPTION: Modifies the Umi configuration file (`.umirc.ts`) to include the `@umijs/plugins/dist/react-query` plugin and its configuration object, enabling react-query integration in the Umi project.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.zh-CN.md#_snippet_1

LANGUAGE: diff
CODE:
```
import { defineConfig } from "umi";

export default defineConfig({
+  plugins: ['@umijs/plugins/dist/react-query'],
+  reactQuery: {},
  routes: [
    { path: "/", component: "index" },
    { path: "/docs", component: "docs" },
    { path: "/products", component: "products" },
  ],
  npmClient: 'pnpm',
});
```

----------------------------------------

TITLE: Implementing Nested Modals in Ant Design React
DESCRIPTION: This code snippet demonstrates how to create nested modal dialogs using Ant Design components in a React application. It shows the setup of state management for multiple modals and the structure of nested Modal components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/nested.md#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
import React, { useState } from 'react';
import { Button, Modal } from 'antd';

const App: React.FC = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isNestedModalOpen, setIsNestedModalOpen] = useState(false);

  const showModal = () => {
    setIsModalOpen(true);
  };

  const handleOk = () => {
    setIsModalOpen(false);
  };

  const handleCancel = () => {
    setIsModalOpen(false);
  };

  const showNestedModal = () => {
    setIsNestedModalOpen(true);
  };

  const handleNestedOk = () => {
    setIsNestedModalOpen(false);
  };

  const handleNestedCancel = () => {
    setIsNestedModalOpen(false);
  };

  return (
    <>
      <Button type="primary" onClick={showModal}>
        Open Modal
      </Button>
      <Modal title="Modal" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>
        <Button onClick={showNestedModal}>Open Nested Modal</Button>
        <Modal
          title="Nested Modal"
          open={isNestedModalOpen}
          onOk={handleNestedOk}
          onCancel={handleNestedCancel}
        >
          This is a nested modal.
        </Modal>
      </Modal>
    </>
  );
};

export default App;
```

----------------------------------------

TITLE: Adding Separators with Space Component
DESCRIPTION: Example of using separators between elements in the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
<code src="./demo/split.tsx">分隔符</code>
```

----------------------------------------

TITLE: Setting Custom Icons via Form `feedbackIcons` Prop (Ant Design/React)
DESCRIPTION: This snippet demonstrates setting custom feedback icons globally for an Ant Design `Form` component using the `feedbackIcons` prop. The `icons` variable passed to this prop should contain the custom icon definitions. These icons will be applied to child `Form.Item` components that have the `hasFeedback` attribute.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/demo/custom-feedback-icons.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Form feedbackIcons={icons}>
```

----------------------------------------

TITLE: Disabling Working Hours in Ant Design DatePicker (JS)
DESCRIPTION: Provides JavaScript functions to disable dates and times outside standard working hours (weekdays 9:00-17:00) in the Ant Design DatePicker. The `disabledDate` checks if the day is a weekday using `info.type` for optimization, and `disabledTime` disables hours before 9 AM and after 5 PM.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.zh-CN.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const disabledDate = (date, info) => {
  if (info.type === 'date') {
    return date.day() === 0 || date.day() === 6;
  }
  return false;
};

const disabledTime = () => ({
  disabledHours: () => {
    return Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour < 9 || hour > 17);
  },
});
```

----------------------------------------

TITLE: Aligning Elements with Space Component
DESCRIPTION: This example illustrates how to align child elements within the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
<code src="./demo/align.tsx">Align</code>
```

----------------------------------------

TITLE: Implementing Compact Mode for Form Components using Space.Compact in React
DESCRIPTION: This code snippet demonstrates how to use Space.Compact from Ant Design to create a compact layout for form components. It showcases various form elements like Input, Select, and Button arranged in a tightly connected manner with merged borders.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/compact.md#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
import React from 'react';
import { Button, Input, Select, Space } from 'antd';

const { Search } = Input;

const App: React.FC = () => (
  <>
    <Space.Compact block>
      <Input style={{ width: '20%' }} defaultValue="0571" />
      <Input style={{ width: '30%' }} defaultValue="26888888" />
    </Space.Compact>
    <br />
    <Space.Compact block>
      <Input style={{ width: 'calc(100% - 200px)' }} defaultValue="https://ant.design" />
      <Button type="primary">Submit</Button>
    </Space.Compact>
    <br />
    <Space.Compact block>
      <Search addonBefore="https://" placeholder="input search text" allowClear />
    </Space.Compact>
    <br />
    <Space.Compact block>
      <Select defaultValue="Zhejiang">
        <Select.Option value="Zhejiang">Zhejiang</Select.Option>
        <Select.Option value="Jiangsu">Jiangsu</Select.Option>
      </Select>
      <Input style={{ width: '50%' }} defaultValue="Xihu District, Hangzhou" />
    </Space.Compact>
    <br />
    <Space.Compact block>
      <Input style={{ width: '50%' }} defaultValue="default value" />
      <Input.TextArea style={{ width: '50%' }} defaultValue="default value" />
    </Space.Compact>
    <br />
    <Space.Compact block>
      <Input style={{ width: '30%' }} defaultValue="input content" />
      <Input.TextArea style={{ width: '70%' }} defaultValue="textarea content" />
    </Space.Compact>
    <br />
    <Space.Compact block>
      <Search addonBefore="https://" placeholder="input search text" allowClear />
      <Button type="primary">Submit</Button>
    </Space.Compact>
  </>
);

export default App;
```

----------------------------------------

TITLE: Implementing Wrapping with Space Component
DESCRIPTION: This code shows how to enable wrapping of child elements within the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
<code src="./demo/wrap.tsx">Wrap</code>
```

----------------------------------------

TITLE: Setting Modal Dialog Width in Ant Design
DESCRIPTION: This snippet provides instructions in both Chinese and English on how to use the 'width' property to customize the width of modal dialogs in Ant Design.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/width.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## zh-CN

使用 `width` 来设置模态对话框的宽度。

## en-US

Use `width` to set the width of the modal dialog.
```

----------------------------------------

TITLE: Implementing Button-Style Radio Group in React with Ant Design
DESCRIPTION: This code snippet shows how to create a radio button group with button styling using Ant Design's Radio component in a React application. It demonstrates different sizes and disabled states for the radio buttons.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/radio/demo/radiobutton.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Radio } from 'antd';

const App: React.FC = () => (
  <>
    <Radio.Group defaultValue="a" buttonStyle="solid">
      <Radio.Button value="a">Hangzhou</Radio.Button>
      <Radio.Button value="b">Shanghai</Radio.Button>
      <Radio.Button value="c">Beijing</Radio.Button>
      <Radio.Button value="d">Chengdu</Radio.Button>
    </Radio.Group>
    <Radio.Group defaultValue="a" style={{ marginTop: 16 }}>
      <Radio.Button value="a">Hangzhou</Radio.Button>
      <Radio.Button value="b">Shanghai</Radio.Button>
      <Radio.Button value="c">Beijing</Radio.Button>
      <Radio.Button value="d">Chengdu</Radio.Button>
    </Radio.Group>
    <Radio.Group disabled defaultValue="a" style={{ marginTop: 16 }}>
      <Radio.Button value="a">Hangzhou</Radio.Button>
      <Radio.Button value="b">Shanghai</Radio.Button>
      <Radio.Button value="c">Beijing</Radio.Button>
      <Radio.Button value="d">Chengdu</Radio.Button>
    </Radio.Group>
    <Radio.Group defaultValue="a" buttonStyle="solid" style={{ marginTop: 16 }}>
      <Radio.Button value="a">Hangzhou</Radio.Button>
      <Radio.Button value="b" disabled>
        Shanghai
      </Radio.Button>
      <Radio.Button value="c">Beijing</Radio.Button>
      <Radio.Button value="d">Chengdu</Radio.Button>
    </Radio.Group>
    <Radio.Group size="large" defaultValue="a" style={{ marginTop: 16 }}>
      <Radio.Button value="a">Hangzhou</Radio.Button>
      <Radio.Button value="b">Shanghai</Radio.Button>
      <Radio.Button value="c">Beijing</Radio.Button>
      <Radio.Button value="d">Chengdu</Radio.Button>
    </Radio.Group>
    <Radio.Group size="small" defaultValue="a" style={{ marginTop: 16 }}>
      <Radio.Button value="a">Hangzhou</Radio.Button>
      <Radio.Button value="b">Shanghai</Radio.Button>
      <Radio.Button value="c">Beijing</Radio.Button>
      <Radio.Button value="d">Chengdu</Radio.Button>
    </Radio.Group>
  </>
);

export default App;
```

----------------------------------------

TITLE: Configuring Ant Design Radio.Group using options vs children (TSX)
DESCRIPTION: This snippet illustrates two methods for setting up an Ant Design `Radio.Group`. The first, recommended approach uses the `options` prop with an array of objects to define the radio buttons. The second, non-recommended approach renders individual `Radio` components as children within the `Radio.Group`. The recommended method is generally preferred for simplicity and maintainability.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/radio/index.en-US.md#_snippet_0

LANGUAGE: tsx
CODE:
```
// When use Radio.Group, recommended ✅
return (
  <Radio.Group
    value={value}
    options={[
      { value: 1, label: "A" },
      { value: 2, label: "B"},
      { value: 3, label: "C" },
    ]}
  />
);

// No recommended 🙅🏻‍♀️
return (
  <Radio.Group value={value}>
    <Radio value={1}>A</Radio>
    <Radio value={2}>B</Radio>
    <Radio value={3}>C</Radio>
  </Radio.Group>
);
```

----------------------------------------

TITLE: Retrieving Specific Nested Field Values using getFieldsValue (TSX)
DESCRIPTION: This snippet demonstrates how to use the `getFieldsValue` method of a Form instance to retrieve values for specific, potentially nested, fields. It shows the syntax for requesting a single nested path (`[['user', 'age']]`) and multiple nested paths (`[['user', 'age'], ['preset', 'account']]`).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_11

LANGUAGE: tsx
CODE:
```
// 单个路径
form.getFieldsValue([['user', 'age']]);

// 多个路径
form.getFieldsValue([
  ['user', 'age'],
  ['preset', 'account'],
]);
```

----------------------------------------

TITLE: 额外操作
DESCRIPTION: Demonstrates adding extra actions or content to the top-right corner of the Drawer header.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
./demo/extra.tsx
```

----------------------------------------

TITLE: Nested Theme Configuration in React
DESCRIPTION: Example of nested theme configuration using ConfigProvider to set different color themes for buttons
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/css-var-plan.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<ConfigProvider theme={{ token: { colorPrimary: 'blue' } }}>
  <Button>Button 1</Button>
  <ConfigProvider theme={{ token: { colorPrimary: 'green' } }}>
    <Button>Button 2</Button>
  </ConfigProvider>
</ConfigProvider>
```

----------------------------------------

TITLE: Getting Component Types in TypeScript
DESCRIPTION: Demonstrates how to access internal type definitions and props from Ant Design components using utility types
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import type { Checkbox, CheckboxProps, GetProp, GetProps, GetRef, Input } from 'antd';

// Get Props
type CheckboxGroupProps = GetProps<typeof Checkbox.Group>;

// Get Prop
type CheckboxValue = GetProp<CheckboxProps, 'value'>;

// Get Ref
type InputRef = GetRef<typeof Input>;
```

----------------------------------------

TITLE: Installing Refine with Ant Design Preset using Package Managers
DESCRIPTION: Commands for creating a new Refine project with Ant Design preset using npm, yarn, or pnpm. This initializes a project with predefined Ant Design configurations and example pages.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-refine.en-US.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm create refine-app@latest -- --preset refine-antd
```

LANGUAGE: bash
CODE:
```
$ yarn create refine-app@latest -- --preset refine-antd
```

LANGUAGE: bash
CODE:
```
$ pnpm create refine-app@latest -- --preset refine-antd
```

----------------------------------------

TITLE: A/B Toggle Component Lifecycle Tracing under StrictMode | TypeScript/React
DESCRIPTION: An interactive React app showing two components (A and B) toggled with a button, each logging useMemo, useEffect, and cleanup phases. Designed to illustrate lifecycle ordering in React StrictMode and how style insertion/removal can be affected by reference counting and effect run timing. No external dependencies except React.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_7

LANGUAGE: TSX
CODE:
```
import React from 'react';\n\nconst A = () => {\n  React.useMemo(() => {\n    console.log('A render');\n  }, []);\n\n  React.useEffect(() => {\n    console.log('A mounted');\n    return () => {\n      console.log('A unmounted');\n    };\n  }, []);\n\n  return <div>A</div>;\n};\n\nconst B = () => {\n  React.useMemo(() => {\n    console.log('B render');\n  }, []);\n\n  React.useEffect(() => {\n    console.log('B mounted');\n    return () => {\n      console.log('B unmounted');\n    };\n  }, []);\n\n  return <div>B</div>;\n};\n\nexport default function App() {\n  const [show, setShow] = React.useState(true);\n\n  const toggle = () => {\n    setShow((prev) => !prev);\n  };\n\n  return (\n    <div>\n      <button onClick={toggle}>toggle</button>\n      <div>{show ? <A /> : <B />}</div>\n    </div>\n  );\n}
```

----------------------------------------

TITLE: Implementing ProLayout for Page Layout in TSX
DESCRIPTION: Creates a layout component (`src/layouts/index.tsx`) using `ProLayout`, integrating Umi's route data (`useAppData`) and location (`useLocation`) to configure the layout and menu, and customizes menu item rendering to use Umi's `Link` component for navigation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.zh-CN.md#_snippet_4

LANGUAGE: tsx
CODE:
```
import { ProLayout } from '@ant-design/pro-components';
import { Link, Outlet, useAppData, useLocation } from 'umi';

export default function Layout() {
  const { clientRoutes } = useAppData();
  const location = useLocation();
  return (
    <ProLayout
      route={clientRoutes[0]}
      location={location}
      title="Umi x Ant Design"
      menuItemRender={(menuItemProps, defaultDom) => {
        if (menuItemProps.isUrl || menuItemProps.children) {
          return defaultDom;
        }
        if (menuItemProps.path && location.pathname !== menuItemProps.path) {
          return (
            <Link to={menuItemProps.path} target={menuItemProps.target}>
              {defaultDom}
            </Link>
          );
        }
        return defaultDom;
      }}
    >
      <Outlet />
    </ProLayout>
  );
}
```

----------------------------------------

TITLE: Customizing Select Dropdown Closure Behavior with dropdownRender in Ant Design (TypeScript/TSX)
DESCRIPTION: This TypeScript/TSX snippet shows how to use the Select component's dropdownRender prop to render custom dropdown content and prevent the dropdown from closing when interacting with elements inside it. By handling the onMouseDown event and calling e.preventDefault() and e.stopPropagation(), focus is preserved and closing is disabled. Requires React and Ant Design to be installed, and all event logic must occur within the custom dropdown node. No input or output values are required; this directly modifies dropdown interactivity.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: TSX
CODE:
```
```tsx\n<Select\n  dropdownRender={() => (\n    <div\n      onMouseDown={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n    >\n      Some Content\n    </div>\n  )}\n/>\n```
```

----------------------------------------

TITLE: Implementing disabledDate in Ant Design DatePicker to Disable Weekends
DESCRIPTION: This TSX function `disabledDate` is designed for the `disabledDate` prop of an Ant Design DatePicker. It takes the current date (`date`) and panel information (`info`) as arguments. If the current panel view is 'date' (`info.type === 'date'`), it checks if the day is Sunday (`date.day() === 0`) or Saturday (`date.day() === 6`) using Day.js methods and returns `true` to disable weekends. For other panel types (month, year, etc.), it returns `false`, allowing selection.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
const disabledDate = (date, info) => {
  if (info.type === 'date') {
    return date.day() === 0 || date.day() === 6;
  }
  return false;
};
```

----------------------------------------

TITLE: Basic ConfigProvider Usage with Direction (TSX)
DESCRIPTION: Demonstrates wrapping an application with `ConfigProvider` to set a global text direction (right-to-left). Requires React and Ant Design's `ConfigProvider` component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { ConfigProvider } from 'antd';

// ...
const Demo: React.FC = () => (
  <ConfigProvider direction="rtl">
    <App />
  </ConfigProvider>
);

export default Demo;
```

----------------------------------------

TITLE: CSS Logical Properties Transformation
DESCRIPTION: Implementation of StyleProvider with legacyLogicalPropertiesTransformer to handle CSS logical properties compatibility.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
import { legacyLogicalPropertiesTransformer, StyleProvider } from '@ant-design/cssinjs';

// `transformers` provides a way to transform CSS properties
export default () => (
  <StyleProvider transformers={[legacyLogicalPropertiesTransformer]}>
    <MyApp />
  </StyleProvider>
);
```

----------------------------------------

TITLE: Attempted Conditional rc-field-form FormProvider Rendering in ConfigProvider (TSX)
DESCRIPTION: This code shows a proposed but ineffective optimization to conditionally render rc-field-form's FormProvider based on the presence of validateMessages. This approach fails because Tree Shaking is a static analysis process and cannot determine the runtime value of validateMessages.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
// Sample only. Not real world code.
import { FormProvider } from 'rc-field-form';

const ConfigProvider = ({ validateMessages, children }) => {
  let node = children;

  if (validateMessages) {
    node = <FormProvider validateMessages={merge(...)}>{node}</FormProvider>;
  }

  return node;
};
```

----------------------------------------

TITLE: Updating and Closing Modal Dialog with Reference
DESCRIPTION: Example showing how to update and close a modal dialog using the reference returned by Modal.method(). Demonstrates updating title and content, and finally destroying the modal.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
const modal = Modal.info();

modal.update({
  title: 'Updated title',
  content: 'Updated content',
});

// on 4.8.0 or above, you can pass a function to update modal
modal.update((prevConfig) => ({
  ...prevConfig,
  title: `${prevConfig.title} (New)`,
}));

modal.destroy();
```

----------------------------------------

TITLE: Creating a Wrapper Component for Ant Design Typography in Next.js
DESCRIPTION: This code demonstrates how to create a wrapper component for Ant Design Typography to avoid issues with Next.js App Router.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
'use client';

import React from 'react';
import { Typography as OriginTypography } from 'antd';
import type { LinkProps } from 'antd/es/typography/Link';
import type { ParagraphProps } from 'antd/es/typography/Paragraph';
import type { TextProps } from 'antd/es/typography/Text';
import type { TitleProps } from 'antd/es/typography/Title';

const Title = React.forwardRef<HTMLElement, TitleProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Title ref={ref} {...props} />,
);

const Paragraph = React.forwardRef<HTMLElement, ParagraphProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Paragraph ref={ref} {...props} />,
);

const Link = React.forwardRef<HTMLElement, LinkProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Link ref={ref} {...props} />,
);

const Text = React.forwardRef<HTMLElement, TextProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Text ref={ref} {...props} />,
);

export { Title, Link, Text, Paragraph };
```

----------------------------------------

TITLE: Replacing Moment.js Locale Setup with Day.js for Ant Design v5
DESCRIPTION: Shows the code changes required to switch from Moment.js locale handling to Day.js locale handling, aligning with Ant Design v5's default date library (Day.js). It involves changing the import statement for the library (`dayjs` instead of `moment`), importing the corresponding Day.js locale data (e.g., `dayjs/locale/zh-cn`), and updating the locale initialization call (`dayjs.locale('zh-cn')`).
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_12

LANGUAGE: diff
CODE:
```
-   import moment from 'moment';
+   import dayjs from 'dayjs';
-   import 'moment/locale/zh-cn';
+   import 'dayjs/locale/zh-cn';

-   moment.locale('zh-cn');
+   dayjs.locale('zh-cn');
```

----------------------------------------

TITLE: Dynamic Add & Remove Tags in Ant Design (React, TSX)
DESCRIPTION: This snippet demonstrates how to dynamically add or remove Tag components within a React application using Ant Design. It relies on handling state and the onClose event. Dependencies include React state management and Ant Design Tag. Useful for interactive UIs where users can modify categories/tags at runtime.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/control.tsx\">Add & Remove Dynamically</code>
```

----------------------------------------

TITLE: Updating Import Statements for Moved Ant Design Components in v5
DESCRIPTION: Explains that the `PageHeader` and `Comment` components are no longer part of the core `antd` package in v5. This diff shows how to update the import statements in a React component to use `@ant-design/pro-components` for `PageHeader` and `@ant-design/compatible` for `Comment`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_3

LANGUAGE: diff
CODE:
```
- import { PageHeader, Comment } from 'antd';
+ import { Comment } from '@ant-design/compatible';
+ import { PageHeader } from '@ant-design/pro-components';

  const App: React.FC = () => (
    <>
      <PageHeader />
      <Comment />
    </>
  );

  export default App;
```

----------------------------------------

TITLE: Implementing Modal with Loading State in React using Ant Design
DESCRIPTION: This example demonstrates how to use the Modal component with loading state functionality. It uses the 'confirmLoading' prop to show a loading indicator on the confirm button while an asynchronous operation is in progress.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/loading.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import React, { useState } from 'react';
import { Button, Modal } from 'antd';

const App: React.FC = () => {
  const [open, setOpen] = useState(false);
  const [confirmLoading, setConfirmLoading] = useState(false);
  const [modalText, setModalText] = useState('Content of the modal');

  const showModal = () => {
    setOpen(true);
  };

  const handleOk = () => {
    setModalText('The modal will be closed after two seconds');
    setConfirmLoading(true);
    setTimeout(() => {
      setOpen(false);
      setConfirmLoading(false);
    }, 2000);
  };

  const handleCancel = () => {
    console.log('Clicked cancel button');
    setOpen(false);
  };

  return (
    <>
      <Button type="primary" onClick={showModal}>
        Open Modal with async logic
      </Button>
      <Modal
        title="Title"
        open={open}
        onOk={handleOk}
        confirmLoading={confirmLoading}
        onCancel={handleCancel}
      >
        <p>{modalText}</p>
      </Modal>
    </>
  );
};

export default App;
```

----------------------------------------

TITLE: Wrapping Component to Force Controlled Mode (JSX)
DESCRIPTION: Provides an example of wrapping a standard HTML input component to ensure it always operates in controlled mode by providing a default empty string value when the prop is `undefined`. This pattern can be used within `Form.Item` to handle components that don't correctly respond to `setFieldsValue` with `undefined`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_17

LANGUAGE: jsx
CODE:
```
const MyInput = ({
  // Force use controlled mode
  value = '',
  ...rest
}) => <input value={value} {...rest} />;

<Form.Item name="my">
  <MyInput />
</Form.Item>;
```

----------------------------------------

TITLE: Customizing Expand/Collapse Icons in Ant Design Tree Component
DESCRIPTION: This example shows how to use the switcherIcon prop to customize the expand/collapse icons of a Tree component. It implements a functional component that renders a Tree with custom icons based on the node's expanded state.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree/demo/switcher-icon.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { CarryOutOutlined, FormOutlined } from '@ant-design/icons';
import { Tree } from 'antd';

const treeData = [
  {
    title: 'parent 1',
    key: '0-0',
    icon: <CarryOutOutlined />,
    children: [
      {
        title: 'parent 1-0',
        key: '0-0-0',
        icon: <CarryOutOutlined />,
        children: [
          { title: 'leaf', key: '0-0-0-0', icon: <CarryOutOutlined /> },
          {
            title: (
              <>
                <div>multiple line title</div>
                <div>multiple line title</div>
              </>
            ),
            key: '0-0-0-1',
            icon: <CarryOutOutlined />,
          },
        ],
      },
      {
        title: 'parent 1-1',
        key: '0-0-1',
        icon: <CarryOutOutlined />,
        children: [{ title: 'leaf', key: '0-0-1-0', icon: <CarryOutOutlined /> }],
      },
      {
        title: 'parent 1-2',
        key: '0-0-2',
        icon: <CarryOutOutlined />,
        children: [
          { title: 'leaf', key: '0-0-2-0', icon: <CarryOutOutlined /> },
          {
            title: 'leaf',
            key: '0-0-2-1',
            icon: <CarryOutOutlined />,
            switcherIcon: <FormOutlined />,
          },
        ],
      },
    ],
  },
];

const App: React.FC = () => (
  <Tree
    showIcon
    defaultExpandAll
    defaultSelectedKeys={['0-0-0']}
    switcherIcon={({ expanded }) => (expanded ? <CarryOutOutlined /> : <FormOutlined />)}
    treeData={treeData}
  />
);

export default App;
```

----------------------------------------

TITLE: Conditionally Updating Form.Item with shouldUpdate Function in Ant Design (JSX)
DESCRIPTION: Illustrates using a function for the `shouldUpdate` prop to control when a `Form.Item` re-renders based on specific value changes. The function receives previous and current form values, allowing granular update logic. This example updates the item only when the 'additional' field changes, conditionally rendering another `Form.Item`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_3

LANGUAGE: JSX
CODE:
```
<Form.Item shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}>
  {() => {
    return (
      <Form.Item name="other">
        <Input />
      </Form.Item>
    );
  }}
</Form.Item>
```

----------------------------------------

TITLE: Correct SSR @layer Style Order (HTML)
DESCRIPTION: Illustrates the correct order for injecting styles in an SSR scenario when using `@layer`. The `@layer` definition (`@layer xxx, antd;`) must appear *before* the styles assigned to those layers (`@layer antd { ... }`) to ensure proper priority.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.zh-CN.md#_snippet_6

LANGUAGE: html
CODE:
```
<head>
  <!-- css 文件中包含 @layer xxx, antd; -->
  <link rel="stylesheet" href="/b9a0m0b9o0o3.css" />
  <!-- or 直接书写 @layer xxx, antd; 在 html 中 -->
  <style>
    @layer xxx, antd;
  </style>

  <!-- SSR 注入样式 -->
  <style>
    @layer antd {
      /** ... */
    }
  </style>
</head>
```

----------------------------------------

TITLE: Split Context Implementation
DESCRIPTION: Example of splitting a single context into multiple contexts to minimize re-render scope.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/render-times.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
const MyContext1 = React.createContext<{ prop1: string }>();
const MyContext2 = React.createContext<{ prop2: string }>();

// Child
const { prop1 } = React.useContext(MyContext1);

// Root
<MyContext1.Provider value={context1}>
  <MyContext2.Provider value={context2}>
    <Child />
  </MyContext2.Provider>
</MyContext1.Provider>;
```

----------------------------------------

TITLE: Fixing Modal getPopupContainer error with ConfigProvider
DESCRIPTION: Provides a fix for the `triggerNode is undefined` error in Modal when `getPopupContainer` is set globally via ConfigProvider. The fix involves checking if the node exists before returning its parent node, falling back to `document.body` if the node is undefined.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_37

LANGUAGE: diff
CODE:
```
<ConfigProvider
-  getPopupContainer={triggerNode => triggerNode.parentNode}
+  getPopupContainer={node => {
+    if (node) {
+      return node.parentNode;
+    }
+    return document.body;
+  }}
>
  <App />
</ConfigProvider>
```

----------------------------------------

TITLE: Configuring Vite for SVG Icons (JavaScript)
DESCRIPTION: Provides a Vite configuration snippet showing how to use `vite-plugin-svgr` to enable importing `.svg` files directly as React components. This setup is necessary to use custom SVG icons with Ant Design in a Vite project. Required dependencies: `vite`, `vite-plugin-svgr`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
// vite.config.js
export default defineConfig(() => ({
  // ... other config
  plugins: [svgr({ svgrOptions: { icon: true } })],
}));
```

----------------------------------------

TITLE: Disabling Hashed Class Names with CSS Variables in Ant Design
DESCRIPTION: This snippet illustrates how to disable the default hashed class names in Ant Design when CSS variables are enabled. Disabling hashing is possible because CSS variables handle dynamic styling, making the unique class names redundant if only one version of antd is used. This can help reduce the final CSS bundle size.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/css-variables.zh-CN.md#_snippet_2

LANGUAGE: TSX
CODE:
```
<ConfigProvider theme={{ cssVar: true, hashed: false }}>
  <App />
</ConfigProvider>
```

----------------------------------------

TITLE: Using defaultFileList in Upload Component (React/JSX)
DESCRIPTION: This code snippet shows how to use the defaultFileList prop with the Upload component from Ant Design to display files that have already been uploaded when a page initializes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/demo/defaultFileList.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## zh-CN

使用 `defaultFileList` 设置已上传的内容。

## en-US

Use `defaultFileList` for uploaded files when page init.
```

----------------------------------------

TITLE: Using getContainer in a React Popup Component (Demo)
DESCRIPTION: Illustrates how a `PopupWrapper` component might conceptually use the `getContainer` function within a React `useEffect` hook to obtain the DOM node for rendering a portal. It notes that the real-world implementation is more complex regarding timing.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
// Fake Code. Just for Demo
const PopupWrapper = () => {
  const eleRef = React.useRef<HTMLDivElement>(null);

  React.useEffect(() => {
    // It's much complex with timing in real world. You can view the source for more detail:
    // https://github.com/react-component/portal/blob/master/src/Portal.tsx
    const container: HTMLElement = getContainer(eleRef.current);

    // ...
  }, []);

  return (
    <div ref={eleRef}>
      {...}
    </div>
  );
}
```

----------------------------------------

TITLE: Enabling Ant Design @layer for CSS Compatibility (TSX)
DESCRIPTION: Shows how to enable the `@layer` feature for Ant Design styles using the `layer` prop on `StyleProvider`. This is necessary to manage style priority when integrating with other CSS libraries like Tailwind CSS. Requires wrapping with `ConfigProvider`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import { StyleProvider } from '@ant-design/cssinjs';

export default () => (
  <StyleProvider layer>
    <ConfigProvider>
      <MyApp />
    </ConfigProvider>
  </StyleProvider>
);
```

----------------------------------------

TITLE: Accessing Current Sort Order within Ant Design Sorter Function (JavaScript)
DESCRIPTION: Illustrates the extended signature for a column's `sorter` function in Ant Design. When a `sortOrder` or `defaultSortOrder` is active (set to 'ascend' or 'descend'), the function can accept a third parameter (`sortOrder`) which holds the value representing the current sorting direction.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/head.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
function(a, b, sortOrder) { ... }
```

----------------------------------------

TITLE: Importing and Using Antd Button in Next.js Page
DESCRIPTION: Modify the main page file (`src/app/page.tsx`) to import the `Button` component from `antd` and render it within a simple React component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button } from 'antd';

const Home = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default Home;
```

----------------------------------------

TITLE: Customizing Rating Characters in Ant Design React
DESCRIPTION: This code snippet demonstrates how to replace the default star icon in Ant Design's Rating component with various alternative characters, including letters, numbers, icons, and Chinese characters.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/rate/demo/character.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Rate } from 'antd';
import { HeartOutlined } from '@ant-design/icons';

ReactDOM.render(
  <>
    <Rate character={<HeartOutlined />} allowHalf />
    <br />
    <Rate character="A" allowHalf style={{ fontSize: 36 }} />
    <br />
    <Rate character="好" allowHalf />
  </>,
  mountNode,
);
```

----------------------------------------

TITLE: Embedding Grid Properties in Responsive Breakpoint Props - Ant Design - Markdown
DESCRIPTION: This snippet demonstrates the equivalent shorthand and object syntax for specifying responsive props in Ant Design\'s grid system. By using xs={6}, the span property is set directly, while xs={{ span: 6 }} provides an object-based approach for passing multiple grid properties. No dependencies are required beyond Ant Design. Both forms are used to configure grid columns responsively, with object syntax allowing additional options like pull, push, offset, and order.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/responsive-more.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
`xs={6}` is equivalent to `xs={{span: 6}}`.
```

----------------------------------------

TITLE: Implementing Breadcrumb Component in React
DESCRIPTION: Examples showing different ways to implement the Breadcrumb component, including the recommended approach for version 5.3.0 and above, and deprecated methods for earlier versions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
// works when >=5.3.0, recommended ✅
return <Breadcrumb items={[{ title: 'sample' }]} />;

// works when <5.3.0, deprecated when >=5.3.0 🙅🏻‍♀️
return (
  <Breadcrumb>
    <Breadcrumb.Item>sample</Breadcrumb.Item>
  </Breadcrumb>
);

// or

return <Breadcrumb routes={[{ breadcrumbName: 'sample' }]} />;
```

----------------------------------------

TITLE: Setting Custom Separator in Ant Design Breadcrumb Component
DESCRIPTION: Demonstrates how to customize the Breadcrumb component separator by setting the separator property to '>' instead of using the default separator.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/demo/separator.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## zh-CN

使用 `separator=">"` 可以自定义分隔符。

## en-US

The separator can be customized by setting the separator property: `separator=">"`. 
```

----------------------------------------

TITLE: Implementing Basic Ant Design Form (JSX)
DESCRIPTION: Sets up a basic form using Ant Design's `Form` and `Form.Item` components, including an `Input` for a text field and an `InputNumber` for a numeric field. This provides context for discussing form validation and component constraints.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.zh-CN.md#_snippet_6

LANGUAGE: JSX
CODE:
```
<Form>
  <Form.Item label="Name" name="name">
    <Input />
  </Form.Item>

  <Form.Item label="Price" name="price">
    <InputNumber />
  </Form.Item>
</Form>
```

----------------------------------------

TITLE: Merging Existing Class Names when Applying Theme Styles - Ant Design TSX
DESCRIPTION: Demonstrates how to correctly apply a custom theme class via `ConfigProvider` while preserving any existing `className` that might already be present on the component's configuration. Using a utility like `classnames`, this snippet ensures that the new theme class is added alongside any default or previously configured classes, maintaining component styling integrity.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.zh-CN.md#_snippet_3

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { ConfigProvider } from 'antd';
import classNames from 'classnames';

const GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {
  const { button, getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);
  const btnPrefixCls = getPrefixCls('btn');
  const { styles } = useButtonStyle(btnPrefixCls); // Assuming useButtonStyle is defined as in the previous snippet
  return (
    <ConfigProvider button={{ className: classNames(button?.className, styles.btn) }}>
      {props.children}
    </ConfigProvider>
  );
};

export default GeekProvider;
```

----------------------------------------

TITLE: Configuring Ant Design reset.css @layer (LESS)
DESCRIPTION: Shows how to assign the Ant Design `reset.css` to a specific `@layer` (e.g., `reset`) to prevent it from being overridden by the Ant Design styles that have been assigned to the `antd` layer.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.zh-CN.md#_snippet_4

LANGUAGE: less
CODE:
```
@layer reset, antd;

@import url(reset.css) layer(reset);
```

----------------------------------------

TITLE: Using Ant Design Colors in JavaScript
DESCRIPTION: This code demonstrates how to import and use the blue color palette from the @ant-design/colors package. It logs the entire blue palette array and the primary blue color.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/colors.en-US.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { blue } from '@ant-design/colors';

console.log(blue); // ['#E6F4FF', '#BAE0FF', '#91CAFF', '#69B1FF', '#4096FF', '#1677FF', '#0958D9', '#003EB3', '#002C8C', '#001D66']
console.log(blue.primary); // '#1677FF'
```

----------------------------------------

TITLE: Implementing a Default getContainer Function (Demo)
DESCRIPTION: Shows a common default implementation for the `getContainer` function that creates a new `div` element and appends it directly to the `document.body`. This default is then used as a prop for a sample `SomeComponent`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
// Fake Code. Just for Demo
const defaultGetContainer = () => {
  const div = document.createElement('div');
  document.body.appendChild(div);
  return div;
};

const SomeComponent = ({ getContainer = defaultGetContainer }) => (
  <PopupWrapper getContainer={getContainer} />
);
```

----------------------------------------

TITLE: Generating Custom Themed Ant Design CSS using static-style-extract
DESCRIPTION: Provides a focused example script using `@ant-design/static-style-extract` and `ConfigProvider` to generate an Ant Design CSS file tailored to a specific custom theme. It demonstrates overriding a theme token (e.g., `colorPrimary` to 'red') within the `ConfigProvider` during the style extraction process.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
import { extractStyle } from '@ant-design/static-style-extract';
import { ConfigProvider } from 'antd';

const cssText = extractStyle((node) => (
  <ConfigProvider
    theme={{
      token: {
        colorPrimary: 'red',
      },
    }}
  >
    {node}
  </ConfigProvider>
));
```

----------------------------------------

TITLE: Specifying Custom Data Key with rowKey (JSX)
DESCRIPTION: Shows how to use the `rowKey` prop to specify a custom function that extracts the unique key for each data item from the `dataSource`. This is essential for proper list rendering and component behavior when the default 'key' property is not present or needs to be overridden.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/transfer/index.zh-CN.md#_snippet_1

LANGUAGE: jsx
CODE:
```
// 比如你的数据主键是 uid\nreturn <Transfer rowKey={(record) => record.uid} />;
```

----------------------------------------

TITLE: Customizing Tag Close Button in Ant Design (React, TSX)
DESCRIPTION: This snippet demonstrates how to provide a custom close icon or close action for Ant Design's Tag component in React. It uses the 'closeIcon' prop and may adjust visibility or behavior of the close button. Required dependencies are Ant Design's Tag and optionally custom icon components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_10

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/customize.tsx\" debug>Customize close</code>
```

----------------------------------------

TITLE: Implementing Editable Typography Components with Ant Design in JSX
DESCRIPTION: This code demonstrates how to create editable Typography components in Ant Design. The example shows various configuration options including editing triggers, custom text areas, and different kinds of editable components (Text, Title, Paragraph).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/typography/demo/editable.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { CheckOutlined, HighlightOutlined, SmileFilled, SmileOutlined } from '@ant-design/icons';
import { Radio, Typography } from 'antd';
import React, { useState } from 'react';
const { Paragraph, Text, Title } = Typography;
const App = () => {
  const [editableStr, setEditableStr] = useState('This is an editable text.');
  const [editableStrWithSuffix, setEditableStrWithSuffix] = useState('This is a loooooooooooooooooooooooooooooooong editable text with suffix.');
  const [editableStrWithSuffixStartPart, setEditableStrWithSuffixStartPart] = useState(
    'This is a loooooooooooooooooooooooooooooooong editable text with suffix.',
  );
  const [customIconStr, setCustomIconStr] = useState('Custom Edit icon and replace tooltip text.');
  const [clickTriggerStr, setClickTriggerStr] = useState(
    'Text or icon as trigger - click to start editing.',
  );
  const [chooseTrigger, setChooseTrigger] = useState('icon');
  const [customEnterIconStr, setCustomEnterIconStr] = useState(
    'Editable text with a custom enter icon in edit field.',
  );
  const [noEnterIconStr, setNoEnterIconStr] = useState(
    'Editable text with no enter icon in edit field.',
  );
  const [hideTooltipStr, setHideTooltipStr] = useState('Hide Edit tooltip.');
  const [lengthLimitedStr, setLengthLimitedStr] = useState(
    'This is an editable text with limited length.',
  );
  const radioToState = (input) => {
    switch (input) {
      case 'text':
        return ['text'];
      case 'both':
        return ['icon', 'text'];
      case 'icon':
      default:
        return ['icon'];
    }
  };
  const stateToRadio = (state) => {
    if (state.includes('text')) {
      return state.includes('icon') ? 'both' : 'text';
    }
    return 'icon';
  };
  return (
    <>
      <Paragraph
        editable={{
          onChange: setEditableStr,
        }}
      >
        {editableStr}
      </Paragraph>
      <Paragraph
        copyable
        editable={{
          onChange: setEditableStrWithSuffix,
        }}
        ellipsis={{
          suffix: '--William Shakespeare',
        }}
      >
        {editableStrWithSuffix}
      </Paragraph>
      <Paragraph
        copyable
        editable={{
          onChange: setEditableStrWithSuffixStartPart,
          text: editableStrWithSuffixStartPart,
        }}
        ellipsis={{
          suffix: '-- William Shakespeare',
          symbol: 'more',
        }}
      >
        {editableStrWithSuffixStartPart.length >  100
          ? `${editableStrWithSuffixStartPart.slice(0, 100)}...`
          : editableStrWithSuffixStartPart}
      </Paragraph>
      <Paragraph
        editable={{
          icon: <HighlightOutlined />,
          tooltip: 'click to edit text',
          onChange: setCustomIconStr,
        }}
      >
        {customIconStr}
      </Paragraph>
      <Paragraph
        editable={{
          tooltip: 'click to edit text',
          onChange: setClickTriggerStr,
          triggerType: radioToState(chooseTrigger),
        }}
      >
        {clickTriggerStr}
      </Paragraph>
      <Radio.Group
        onChange={(e) => setChooseTrigger(e.target.value)}
        value={stateToRadio(radioToState(chooseTrigger))}
      >
        <Radio value="icon">icon</Radio>
        <Radio value="text">text</Radio>
        <Radio value="both">both</Radio>
      </Radio.Group>
      <Paragraph>
        <ul>
          <li>
            <Text
              editable={{
                onChange: setCustomEnterIconStr,
                enterIcon: <SmileFilled style={{ color: '#1677ff' }} />,
              }}
            >
              {customEnterIconStr}
            </Text>
          </li>
          <li>
            <Text
              editable={{
                onChange: setNoEnterIconStr,
                enterIcon: null,
              }}
            >
              {noEnterIconStr}
            </Text>
          </li>
        </ul>
      </Paragraph>
      <Paragraph
        editable={{
          tooltip: false,
          onChange: setHideTooltipStr,
        }}
      >
        {hideTooltipStr}
      </Paragraph>
      <Title
        level={1}
        editable={{
          onChange: setLengthLimitedStr,
          maxLength: 50,
          autoSize: {
            maxRows: 5,
            minRows: 3,
          },
        }}
      >
        {lengthLimitedStr}
      </Title>
    </>
  );
};
export default App;
```

----------------------------------------

TITLE: Adding Alert Component Import (React Diff)
DESCRIPTION: Shows the change required in the import statement to include the Ant Design Alert component alongside existing imports.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/getting-started.zh-CN.md#_snippet_2

LANGUAGE: diff
CODE:
```
- import { ConfigProvider, DatePicker, message } from 'antd';
+ import { ConfigProvider, DatePicker, message, Alert } from 'antd';
```

----------------------------------------

TITLE: DatePicker Common API - panelRender
DESCRIPTION: 自定义渲染面板。从 4.5.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_23

LANGUAGE: typescript
CODE:
```
panelRender: (panelNode: React.ReactNode) => ReactNode
```

----------------------------------------

TITLE: Disabling Tab Closing in Ant Design Tabs (JSX)
DESCRIPTION: This JSX prop usage demonstrates how to disable the closing functionality for a Tab pane within the Ant Design Tabs component, specifically when using the card style. Setting the `closable` prop to `false` prevents the user from closing that tab. This requires the Ant Design library and React.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tabs/demo/editable-card.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
closable={false}
```

----------------------------------------

TITLE: Cleaning and Reinstalling Dependencies (npm)
DESCRIPTION: Provides the commands to clean the Git working directory (removing untracked files and directories, including `node_modules`) and then reinstall dependencies using npm. This is the recommended way to ensure you have the latest patch versions of dependencies when lock files are ignored and `~` is used for versioning.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/contributor-development-maintenance-guide.en-US.md#_snippet_1

LANGUAGE: bash
CODE:
```
git clean -fdx
npm i
```

----------------------------------------

TITLE: Configuring Static Components with ConfigProvider.config() (TSX)
DESCRIPTION: Illustrates how to use the static `ConfigProvider.config()` method to apply configuration settings (like theme or prefixCls) to static components such as Modal, Message, and Notification.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_2

LANGUAGE: tsx
CODE:
```
ConfigProvider.config({
  // 5.13.0+
  holderRender: (children) => (
    <ConfigProvider
      prefixCls="ant"
      iconPrefixCls="anticon"
      theme={{ token: { colorPrimary: 'red' } }}
    >
      {children}
    </ConfigProvider>
  ),
});
```

----------------------------------------

TITLE: Extracting Component Ref Types with GetRef in TSX
DESCRIPTION: This snippet demonstrates the `GetRef` utility type for easily obtaining the ref type of components. It shows how to get the specific ref type for an antd `Select` component (`BaseSelectRef`) and also for a standard HTML element (`HTMLDivElement`) wrapped in `React.forwardRef`. This utility abstracts away the need to know the exact underlying ref type provided by the component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.zh-CN.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
```tsx
import React, { forwardRef } from 'react';
import type { GetRef, Select } from 'antd';

type SelectRefType = GetRef<typeof Select>; // BaseSelectRef

const Div = forwardRef<HTMLDivElement>((_, ref) => <div ref={ref} />);
type DomRefType = GetRef<typeof Div>; // HTMLDivElement
```
```

----------------------------------------

TITLE: Disabling Motion in Ant Design React Components
DESCRIPTION: This example demonstrates how to disable motion effects in Ant Design components by setting the 'motion' token to false. It compares the behavior of components with and without motion enabled.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_3

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { Checkbox, Col, ConfigProvider, Flex, Radio, Row, Switch } from 'antd';

const App: React.FC = () => {
  const [checked, setChecked] = React.useState<boolean>(false);
  const timerRef = React.useRef<ReturnType<typeof setInterval>>();
  React.useEffect(() => {
    timerRef.current = setInterval(() => {
      setChecked((prev) => !prev);
    }, 500);
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, []);

  const nodes = (
    <Flex gap="small">
      <Checkbox checked={checked}>Checkbox</Checkbox>
      <Radio checked={checked}>Radio</Radio>
      <Switch checked={checked} />
    </Flex>
  );

  return (
    <Row gutter={[24, 24]}>
      <Col span={24}>{nodes}</Col>
      <Col span={24}>
        <ConfigProvider theme={{ token: { motion: false } }}>{nodes}</ConfigProvider>
      </Col>
    </Row>
  );
};

export default App;
```

----------------------------------------

TITLE: Styling Editable Row Validation Feedback in Ant Design Table - CSS
DESCRIPTION: This CSS snippet customizes the appearance and positioning of validation messages for editable rows in an Ant Design table. It sets the ".ant-form-item-explain" element to absolute positioning with a reduced font size, ensuring validation feedback appears directly below the input row. No additional dependencies are required beyond standard Ant Design CSS; ensure the class selectors align with your project structure. This style assumes the presence of ".editable-row" container elements in the table and specifically targets child validation messages.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/edit-row.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.editable-row .ant-form-item-explain {
  position: absolute;
  top: 100%;
  font-size: 12px;
}
```

----------------------------------------

TITLE: Destroying All Static Ant Design Modals on Route Change
DESCRIPTION: Shows how to use `Modal.destroyAll()` to close all currently open static modals created by methods like `Modal.info`, `success`, etc. This is typically used in router listeners to prevent modals from persisting across page navigations.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.zh-CN.md#_snippet_1

LANGUAGE: jsx
CODE:
```
import { browserHistory } from 'react-router';

// router change
browserHistory.listen(() => {
  Modal.destroyAll();
});
```

----------------------------------------

TITLE: Basic Snapshot Testing with React Testing Library and Jest - JavaScript
DESCRIPTION: Shows the standard approach for generating DOM snapshots using React Testing Library and Jest. It renders the component using `render`, accesses the root DOM node (`container.firstChild`), and compares it against a previously saved snapshot using `toMatchSnapshot`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_5

LANGUAGE: javascript
CODE:
```
it('yyy', () => {
      const { container } = render(<Demo />);
      expect(container.firstChild).toMatchSnapshot();
    });
```

----------------------------------------

TITLE: Importing and Using Space Component in React
DESCRIPTION: This code snippet demonstrates basic usage of the Space component to set spacing between child elements.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<code src="./demo/base.tsx">Basic Usage</code>
```

----------------------------------------

TITLE: Creating a Multi-Name Form Item Component in Ant Design React
DESCRIPTION: This code defines a React component `Aggregate` that wraps Ant Design's `Form.Item`. It accepts an array of `names` and synchronizes the values of these fields using `getValueProps`, `getValueFromEvent`, and `rules.transform`. This allows a single visual form item (like a `Cascader` or `RangePicker`) to update multiple distinct fields in the form's store. It requires `antd`, `react`, and `dayjs`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.zh-CN.md#_snippet_4

LANGUAGE: tsx
CODE:
```
/**
 * defaultShowCode: true
 */
import React from 'react';
import type { FormItemProps } from 'antd';
import { Button, Cascader, DatePicker, Form as OriginForm } from 'antd';
import dayjs from 'dayjs';

interface AggregateProps<V = any> extends FormItemProps<V> {
  names?: FormItemProps<V>['name'][];
}

const Aggregate = (props: AggregateProps) => {
  const form = OriginForm.useFormInstance();

  const { names = [], rules = [], ...rest } = props;
  const [firstName, ...resetNames] = names;

  return (
    <>
      <OriginForm.Item
        name={firstName}
        // 将 names 的值转成数组传给 children
        getValueProps={() => {
          const value = names.map((name) => form.getFieldValue(name));
          if (value.every((v) => v === undefined)) {
            return undefined;
          }
          return { value };
        }}
        getValueFromEvent={(values) => {
          // 将 form store 分别设置给 names
          const fieldData = names.map((name, index) => ({ name, value: values?.[index] }));
          form.setFields(fieldData);
          return values?.[0];
        }}
        rules={rules.map((rule) => {
          if (typeof rule === 'object' && rule) {
            return {
              ...rule,
              transform: () => {
                // 将 names 字段的值设置给 rule value
                const values = names.map((name) => form.getFieldValue(name));
                return values;
              },
            };
          }
          return rule;
        })}
        {...rest}
      />
      {/* 绑定其他字段，使其可以 getFieldValue 获取值、setFields 设置值 */}
      {resetNames.map((name) => (
        <OriginForm.Item key={name?.toString()} name={name} noStyle />
      ))}
    </>
  );
};

const data = {
  province: 'Beijing',
  city: 'Haidian',
  startTime: dayjs(),
  endTime: dayjs().add(1, 'month'),
};

const options = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [{ value: 'hangzhou', label: 'Hangzhou' }],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [{ value: 'nanjing', label: 'Nanjing' }],
  },
];

const Form = Object.assign(OriginForm, { Aggregate });

export default () => (
  <Form initialValues={data} onFinish={(value) => console.log(value)}>
    <Form.Aggregate label="Address" names={['province', 'city']} rules={[{ required: true }]}>
      <Cascader options={options} placeholder="Please select" />
    </Form.Aggregate>

    <Form.Item label="Address (use Default)" name="defaultAddress">
      <Cascader options={options} placeholder="Please select" />
    </Form.Item>

    {/* 同理，也适用于 DatePicker.RangePicker */}
    <Form.Aggregate label="Date" names={['startTime', 'endTime']}>
      <DatePicker.RangePicker />
    </Form.Aggregate>

    <Form.Item>
      <Button htmlType="submit" type="primary">
        提交
      </Button>
    </Form.Item>
  </Form>
);
```

----------------------------------------

TITLE: Implementing Colorful Badges with Count in React and Ant Design
DESCRIPTION: This code snippet demonstrates how to create badges with various colors and numerical counts using Ant Design's Badge component in a React application. It showcases different color presets and custom color usage along with count display.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/demo/colorful-with-count-debug.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import React from 'react';
import { Badge, Divider, Space } from 'antd';

const App: React.FC = () => (
  <>
    <Space>
      <Badge color="pink" text="pink" count={5} />
      <Badge color="red" text="red" count={5} />
      <Badge color="yellow" text="yellow" count={5} />
      <Badge color="orange" text="orange" count={5} />
      <Badge color="cyan" text="cyan" count={5} />
      <Badge color="green" text="green" count={5} />
      <Badge color="blue" text="blue" count={5} />
      <Badge color="purple" text="purple" count={5} />
      <Badge color="geekblue" text="geekblue" count={5} />
      <Badge color="magenta" text="magenta" count={5} />
      <Badge color="volcano" text="volcano" count={5} />
      <Badge color="gold" text="gold" count={5} />
      <Badge color="lime" text="lime" count={5} />
    </Space>
    <Divider />
    <Space>
      <Badge color="#f50" text="#f50" count={5} />
      <Badge color="#2db7f5" text="#2db7f5" count={5} />
      <Badge color="#87d068" text="#87d068" count={5} />
      <Badge color="#108ee9" text="#108ee9" count={5} />
    </Space>
  </>
);

export default App;
```

----------------------------------------

TITLE: Polyfilling useInsertionEffect with useLayoutEffect Fallback | TypeScript/React
DESCRIPTION: Demonstrates use of a polyfilled hook, assigning useInsertionEffect if available, otherwise falling back to useLayoutEffect (for React 17 compatibility). Intended for environments that may lack the newer React hook while maintaining similar semantics. The core logic remains identical to previous example and is used for style insertion/clean-up.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_5

LANGUAGE: TSX
CODE:
```
const useMergedInsertionEffect = useInsertionEffect || useLayoutEffect;\n\nuseMergedInsertionEffect(() => {\n  // Same as above\n}, [hash]);
```

----------------------------------------

TITLE: Adding Saturation Overlay to Hue Panel in CSS
DESCRIPTION: This CSS snippet further layers the color panel with a horizontal white-to-transparent gradient for saturation, in addition to the vertical brightness overlay. Utilizing two linear-gradients in background-image enables simultaneous brightness and saturation control. The input parameter is the angle and color stops for each gradient. The outcome is an interactive color panel reflecting both brightness and saturation changes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.en-US.md#2025-04-23_snippet_2

LANGUAGE: css
CODE:
```
background-color: rgb(0, 106, 255);
background-image: linear-gradient(0deg, rgb(0, 0, 0), transparent),
  linear-gradient(90deg, rgb(255, 255, 255), rgba(255, 255, 255, 0));
```

----------------------------------------

TITLE: Ant Design Table Pagination Configuration (React/TS)
DESCRIPTION: Defines the configuration object for the pagination feature of the Ant Design Table component. It allows specifying the position of the pagination controls and accepts all standard Ant Design Pagination component properties.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.zh-CN.md#_snippet_3

LANGUAGE: typescript
CODE:
```
interface TablePaginationConfig extends PaginationProps {
  position?: ('topLeft' | 'topCenter' | 'topRight' | 'bottomLeft' | 'bottomCenter' | 'bottomRight')[];
  // ... inherits all PaginationProps
}
```

----------------------------------------

TITLE: Configuring Sort Directions for Ant Design Table Columns (JavaScript)
DESCRIPTION: Sets the available sorting directions for table columns using the `sortDirections` property, typically an array containing 'ascend' and 'descend'. This example allows toggling between ascending and descending order. Setting this on the Table props applies it to all columns.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/head.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
sortDirections: ['ascend', 'descend']
```

----------------------------------------

TITLE: Importing Popover Controlled Close Example in React
DESCRIPTION: Imports an example showing how to control the closing of the Popover dialog.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
<code src="./demo/control.tsx">Controlling the close of the dialog</code>
```

----------------------------------------

TITLE: Using antd Button in a Next.js Page
DESCRIPTION: This simple snippet shows how to import and use an antd Button component within a standard React functional component that serves as a Next.js page. It renders a primary button inside a div. This confirms that antd components can be used directly after the necessary setup in _document.tsx and _app.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.zh-CN.md#_snippet_6

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button } from 'antd';

const Home = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default Home;
```

----------------------------------------

TITLE: Configuring Tailwind CSS v3 @layer Order (LESS)
DESCRIPTION: Provides the configuration for `global.css` when using Tailwind CSS v3 alongside Ant Design with `@layer` enabled. It defines the `@layer` order to ensure Tailwind's base styles come before Ant Design's styles.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.zh-CN.md#_snippet_2

LANGUAGE: less
CODE:
```
@layer tailwind-base, antd;

@layer tailwind-base {
  @tailwind base;
}
@tailwind components;
@tailwind utilities;
```

----------------------------------------

TITLE: Styling a Fixed Footer Wrapper in Ant Design Drawer using CSS
DESCRIPTION: This CSS rule targets an element with the class `site-form-in-drawer-wrapper`. It positions this element absolutely at the bottom right of its container (likely the Drawer), sets its width to 100%, adds padding, aligns text to the right, gives it a white background, and adds a top border. This is typically used to create a fixed footer area within the Drawer for buttons or other actions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/demo/form-in-drawer.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.site-form-in-drawer-wrapper {\n  position: absolute;\n  inset-inline-end: 0;\n  bottom: 0;\n  width: 100%;\n  padding: 10px 16px;\n  text-align: right;\n  background: #fff;\n  border-top: 1px solid #e9e9e9;\n}
```

----------------------------------------

TITLE: Customizing Sort Directions Cycle in Ant Design Table (JavaScript)
DESCRIPTION: Provides an example value for the `sortDirections` property to customize the sorting cycle. This specific configuration cycles through ascending, descending, and back to ascending order, effectively preventing the column from returning to its default unsorted state upon subsequent clicks.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/head.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
['ascend', 'descend', 'ascend']
```

----------------------------------------

TITLE: Updating Multiple Fields from Single Event with getValueFromEvent (TSX)
DESCRIPTION: Illustrates using getValueFromEvent in Ant Design Form.Item to handle the value emitted by the child component's event. It takes the aggregated value (an array values) and uses form.setFields to update multiple corresponding fields (names) in the FormStore, effectively distributing the single UI value across multiple form fields.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
getValueFromEvent={(values) => {
    form.setFields(names.map((name, index) => ({ name, value: values[index] })));
    return values[0];
}}
```

----------------------------------------

TITLE: Implementing Copyable Typography in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to use the copyable feature of Ant Design's Typography component. It showcases various configurations including default behavior, custom copy text, customized icon, and customized tooltips.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/typography/demo/copyable.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Typography } from 'antd';

const { Paragraph, Text } = Typography;

export default () => (
  <>
    <Paragraph copyable>This is a copyable text.</Paragraph>
    <Paragraph copyable={{ text: 'Hello, Ant Design!' }}>Replace copy text.</Paragraph>
    <Paragraph
      copyable={{
        icon: [
          <SmileOutlined key="copy-icon" />,
          <SmileFilled key="copied-icon" />,
        ],
        tooltips: ['click here', 'you clicked!!'],
      }}
    >
      Custom Copy icon and tooltips text.
    </Paragraph>
    <Paragraph copyable={{ tooltips: false }}>Hide Copy tooltips.</Paragraph>
    <Text copyable>Copyable Text</Text>
  </>
);
```

----------------------------------------

TITLE: Styling Editable Table Cells (CSS)
DESCRIPTION: This CSS snippet defines styles for editable cells in a table. It sets the cell position to relative, styles the value wrapper with padding and a pointer cursor, and adds a border effect on hover to indicate that the cell is editable. These styles are likely intended for use with an Ant Design table component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/edit-cell.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.editable-cell {
  position: relative;
}

.editable-cell-value-wrap {
  padding: 5px 12px;
  cursor: pointer;
}

.editable-row:hover .editable-cell-value-wrap {
  padding: 4px 11px;
  border: 1px solid #d9d9d9;
  border-radius: 2px;
}
```

----------------------------------------

TITLE: Styling Margins for Extra Tab Actions in CSS
DESCRIPTION: This CSS code defines styles for a demo button used as an extra action within Ant Design Tabs. It sets a default end margin (right margin in LTR) and adjusts it to a start margin (left margin in LTR) when the layout direction is Right-To-Left (`.ant-row-rtl`). This ensures consistent spacing for extra controls regardless of text direction.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tabs/demo/extra.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.tabs-extra-demo-button {
  margin-inline-end: 16px;
}

.ant-row-rtl .tabs-extra-demo-button {
  margin-inline-end: 0;
  margin-inline-start: 16px;
}
```

----------------------------------------

TITLE: Managing getContainer Node with State and Effects (Demo)
DESCRIPTION: Presents the updated approach for managing the container node using React `useState` and `useEffect`. This handles the React 18 Strict Mode behavior by ensuring proper cleanup and also enables support for dynamically changing the `getContainer` prop.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
// Fake Code. Just for Demo
const SomeComponent = ({ getContainer }) => {
  const [myContainer, setMyContainer] = React.useState<HTMLElement | null>(null);

  React.useEffect(() => {
    if (getContainer) {
      setMyContainer(getContainer());
      return;
    }

    const div = document.createElement('div');
    document.body.appendChild(div);
    setMyContainer(div);

    return () => {
      document.body.removeChild(div);
    };
  }, [getContainer]);

  return <PopupWrapper getContainer={() => myContainer} />;
};
```

----------------------------------------

TITLE: Implementing Alert Banner in Ant Design React
DESCRIPTION: This code snippet shows how to create an Alert component that displays as a banner at the top of a page. By default, it includes an icon and has a 'warning' type.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/demo/banner.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Alert message="Warning text" banner />
```

----------------------------------------

TITLE: Implementing Rate Component with Descriptive Text in React JSX
DESCRIPTION: This code snippet shows how to use the Rate component from Ant Design with added descriptive text. It demonstrates setting up tooltips for each star rating and displaying the selected rating description.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/rate/demo/text.md#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
import { Rate } from 'antd';

const desc = ['terrible', 'bad', 'normal', 'good', 'wonderful'];

ReactDOM.render(
  <>
    <Rate tooltips={desc} />
    <span className="ant-rate-text">{desc[value - 1]}</span>
  </>,
  mountNode,
);
```

----------------------------------------

TITLE: Customizing Form.Item Props with getValueProps (TSX)
DESCRIPTION: Shows how to use the getValueProps prop of Ant Design Form.Item to customize the props passed to the child component. In this example, it maps multiple field values (names) from the FormStore into a single array value prop for the child component, facilitating the aggregation of multiple fields into one UI control.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
getValueProps={() => ({ value: names.map((name) => form.getFieldValue(name)) })}
```

----------------------------------------

TITLE: Extracting Static Styles for Multiple Themes with @ant-design/static-style-extract in TypeScript
DESCRIPTION: Demonstrates extending the static style extraction to support multiple themes simultaneously. A custom rendering function is passed to `extractStyle`. This function receives the prepared set of components (`node`) and wraps it multiple times with `ConfigProvider`, applying a different theme (`theme1`, `theme2`, `theme3`) each time. This ensures that styles specific to each theme are included in the final extracted CSS output.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
// `node` is the components set we prepared
const css = extractStyle((node) => (
  <>
    <ConfigProvider theme={theme1}>{node}</ConfigProvider>
    <ConfigProvider theme={theme2}>{node}</ConfigProvider>
    <ConfigProvider theme={theme3}>{node}</ConfigProvider>
  </>
));
```

----------------------------------------

TITLE: Watching Unregistered Field with useWatch (preserve)
DESCRIPTION: Shows how to use `Form.useWatch` with the `preserve: true` option to watch the value of a field ('age') that is not currently registered within a `Form.Item`. This allows tracking values set programmatically.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_11

LANGUAGE: tsx
CODE:
```
const Demo = () => {
  const [form] = Form.useForm();

  const age = Form.useWatch('age', { form, preserve: true });
  console.log(age);

  return (
    <div>
      <Button onClick={() => form.setFieldValue('age', 2)}>Update</Button>
      <Form form={form}>
        <Form.Item name="name">
          <Input />
        </Form.Item>
      </Form>
    </div>
  );
};

```

----------------------------------------

TITLE: Setting Custom Icons via Form.Item `hasFeedback` Prop (Ant Design/React)
DESCRIPTION: This snippet shows how to pass custom feedback icons directly to an Ant Design `Form.Item` component using the `hasFeedback` prop. The prop takes an object containing an `icons` key, where the value represents the custom icon definitions. For this to take effect, the `Form.Item` must also have the `hasFeedback` attribute present.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/demo/custom-feedback-icons.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
hasFeedback={{ icons: ... }}
```

----------------------------------------

TITLE: Configuring @layer Support
DESCRIPTION: Example of enabling @layer support in Ant Design using StyleProvider and ConfigProvider components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import { StyleProvider } from '@ant-design/cssinjs';
import { ConfigProvider } from 'antd';

export default () => (
  <StyleProvider layer>
    <ConfigProvider>
      <MyApp />
    </ConfigProvider>
  </StyleProvider>
);
```

----------------------------------------

TITLE: Implementing Quick Page Jump in Ant Design Pagination Component (JSX)
DESCRIPTION: This code snippet demonstrates how to create a pagination component with a quick jump feature using Ant Design in React. It allows users to enter a page number and quickly navigate to that page.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/pagination/demo/jump.md#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
import { Pagination } from 'antd';

const App = () => (
  <Pagination
    total={85}
    showSizeChanger
    showQuickJumper
    showTotal={(total) => `Total ${total} items`}
  />
);

export default App;
```

----------------------------------------

TITLE: Applying Custom Classes with ConfigProvider (Basic) - Ant Design TSX
DESCRIPTION: Demonstrates how to use Ant Design's `ConfigProvider` component to apply custom CSS class names (`className`) to multiple child components like `button`, `checkbox`, and `divider`. This provides a centralized way to inject theme-specific styling hooks into standard components, offering flexibility beyond the standard Design Token system.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
<ConfigProvider
  button={{ className: 'my-button' }}
  checkbox={{ className: 'my-checkbox' }}
  divider={{ className: 'my-divider' }}
/>
```

----------------------------------------

TITLE: Styling Category Search Dropdown in Ant Design
DESCRIPTION: CSS styles that customize the appearance of an Ant Design dropdown menu for category-based search. Includes styling for group titles, borders, padding, text alignment, and scroll height limits.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/auto-complete/demo/certain-category.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.certain-category-search-dropdown .ant-select-dropdown-menu-item-group-title {
  color: #666;
  font-weight: bold;
}

.certain-category-search-dropdown .ant-select-dropdown-menu-item-group {
  border-bottom: 1px solid #f6f6f6;
}

.certain-category-search-dropdown .ant-select-dropdown-menu-item {
  padding-inline-start: 16px;
}

.certain-category-search-dropdown .ant-select-dropdown-menu-item.show-all {
  text-align: center;
  cursor: default;
}

.certain-category-search-dropdown .ant-select-dropdown-menu {
  max-height: 300px;
}
```

----------------------------------------

TITLE: Configuring DayJS Locale
DESCRIPTION: Shows how to properly configure DayJS localization for date-related Ant Design components
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
import dayjs from 'dayjs';

import 'dayjs/locale/zh-cn';

dayjs.locale('zh-cn');
```

----------------------------------------

TITLE: Using Compact Mode for Form Components
DESCRIPTION: This code snippet shows how to use the compact mode of the Space component for form elements.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
<code src="./demo/compact.tsx">Compact Mode for form component</code>
```

----------------------------------------

TITLE: Styling Alert Banner with Custom Colors in Ant Design React
DESCRIPTION: This snippet shows how to apply custom styling to the Alert banner, including setting a specific background color and text color.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/demo/banner.md#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<Alert message="Warning text" banner style={{ backgroundColor: '#f8a1a1', color: '#fff' }} />
```

----------------------------------------

TITLE: Setting Icons for Segmented Items in Ant Design React
DESCRIPTION: This code snippet demonstrates how to set icons for Segmented Items using the Ant Design React library. It showcases the usage of the Segmented component with custom icons for each option.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/segmented/demo/with-icon.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { AppstoreOutlined, BarsOutlined } from '@ant-design/icons';
import { Segmented, Space } from 'antd';

const App: React.FC = () => (
  <Space direction="vertical">
    <Segmented
      options={[
        {
          label: 'List',
          value: 'List',
          icon: <BarsOutlined />,
        },
        {
          label: 'Kanban',
          value: 'Kanban',
          icon: <AppstoreOutlined />,
        },
      ]}
    />
    <Segmented
      options={[
        {
          label: 'List',
          value: 'List',
          icon: <BarsOutlined />,
        },
        {
          label: 'Kanban',
          value: 'Kanban',
          icon: <AppstoreOutlined />,
        },
      ]}
      defaultValue="Kanban"
    />
  </Space>
);

export default App;
```

----------------------------------------

TITLE: Adjusting Virtual Scrolling for Custom Option Styles in Select (TSX)
DESCRIPTION: Shows how to configure the virtual scrolling parameters `listItemHeight` and `listHeight` for the Ant Design Select component to resolve scrolling issues caused by custom option styles.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.zh-CN.md#_snippet_3

LANGUAGE: tsx
CODE:
```
<Select listItemHeight={10} listHeight={250} />
```

----------------------------------------

TITLE: Setting Default Spin Indicator in TypeScript
DESCRIPTION: This code snippet shows how to set a default spin indicator globally using the static method Spin.setDefaultIndicator. It allows customization of the default spinning element across the application.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
Spin.setDefaultIndicator(indicator: ReactNode)
```

----------------------------------------

TITLE: Removing Direct Ant Design Less Imports (Less)
DESCRIPTION: Shows the removal of direct `@import` statements for Ant Design's internal less files (like theme files) as they are no longer needed or available in v5 due to the switch to CSS-in-JS.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_8

LANGUAGE: diff
CODE:
```
// Your less file
--  @import (reference) '~antd/es/style/themes/index';
or
--  @import '~antd/es/style/some-other-less-file-ref';
```

----------------------------------------

TITLE: Styling Avatar Group with CSS
DESCRIPTION: This CSS snippet provides custom styling for the avatar group display. It sets a specific width for the demo container and adds right margin to Avatar components within the group.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/avatar/demo/group.md#2025-04-23_snippet_1

LANGUAGE: css
CODE:
```
.ant-avatar-group .ant-avatar {
  margin-right: 8px;
}

.ant-row-rtl .ant-avatar-group .ant-avatar {
  margin-right: 0;
  margin-left: 8px;
}
```

----------------------------------------

TITLE: Configuring Global Message Settings (JavaScript)
DESCRIPTION: This snippet demonstrates how to globally configure the Ant Design Message component using the message.config method. It sets properties like the distance from the top, default duration, maximum number of messages displayed concurrently, RTL mode, and a custom CSS class prefix. This configuration affects all subsequent message calls unless overridden locally.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/message/index.zh-CN.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
message.config({
  top: 100,
  duration: 2,
  maxCount: 3,
  rtl: true,
  prefixCls: 'my-message'
});
```

----------------------------------------

TITLE: On-Demand Ant Design Style Extraction Utility Function (TSX)
DESCRIPTION: A utility function `doExtraStyle` designed to extract styles from a provided `@ant-design/cssinjs` cache during SSR. It generates a unique filename based on the CSS content's hash, writes the CSS to a specified directory, and returns the public path for linking the generated file in the HTML. This enables generating specific CSS bundles per page or route based on rendered components. Requires `crypto`, `fs`, `path`, `@ant-design/cssinjs`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_9

LANGUAGE: tsx
CODE:
```
// scripts/genAntdCss.tsx
import { createHash } from 'crypto';
import fs from 'fs';
import path from 'path';
import { extractStyle } from '@ant-design/cssinjs';
import type Entity from '@ant-design/cssinjs/lib/Cache';

export interface DoExtraStyleOptions {
  cache: Entity;
  dir?: string;
  baseFileName?: string;
}

export const doExtraStyle = (opts: DoExtraStyleOptions) => {
  const { cache, dir = 'antd-output', baseFileName = 'antd.min' } = opts;

  const baseDir = path.resolve(__dirname, '../../static/css');

  const outputCssPath = path.join(baseDir, dir);

  if (!fs.existsSync(outputCssPath)) {
    fs.mkdirSync(outputCssPath, { recursive: true });
  }

  const css = extractStyle(cache, true);

  if (!css) {
    return '';
  }

  const md5 = createHash('md5');
  const hash = md5.update(css).digest('hex');
  const fileName = `${baseFileName}.${hash.substring(0, 8)}.css`;
  const fullpath = path.join(outputCssPath, fileName);

  const res = `_next/static/css/${dir}/${fileName}`;

  if (fs.existsSync(fullpath)) {
    return res;
  }

  fs.writeFileSync(fullpath, css);

  return res;
};
```

----------------------------------------

TITLE: Removing babel-plugin-import Configuration for Ant Design in Babel Config
DESCRIPTION: Demonstrates how to update Babel configuration (e.g., in `.babelrc` or `babel.config.js`) for Ant Design v5 by removing the `babel-plugin-import` entry specifically configured for the `antd` library. This plugin is obsolete in v5 because CSS-in-JS handles on-demand style importing.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_10

LANGUAGE: diff
CODE:
```
"plugins": [
- ["import", { "libraryName": "antd", "libraryDirectory": "lib"}, "antd"],
]
```

----------------------------------------

TITLE: Basic Usage
DESCRIPTION: Demonstrates the fundamental usage of the Badge component. Code referenced from ./demo/basic.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
./demo/basic.tsx
```

----------------------------------------

TITLE: Styling Custom Preview Mask with CSS in Ant Design
DESCRIPTION: This snippet customizes the appearance of the preview mask in Ant Design components by setting a larger font size and full opacity for the mask element, and further increases the font size specifically for Ant Design icons within the mask. No external dependencies are needed aside from a working Ant Design setup. The main selectors are ".customize-mask" for the mask wrapper and ".customize-mask .anticon" for embedded icons; the code should be applied in a stylesheet loaded alongside your Ant Design-based application. No runtime parameters are required, and the styles globally affect all elements matching these selectors.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/demo/preview-mask.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.customize-mask {
  font-size: 20px;
  opacity: 1;
}
.customize-mask .anticon {
  font-size: 32px;
}
```

----------------------------------------

TITLE: 信息预览抽屉
DESCRIPTION: A practical example showing a Drawer used to display user profile information.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
./demo/user-profile.tsx
```

----------------------------------------

TITLE: Configuring Content Security Policy (TSX)
DESCRIPTION: Shows how to configure Content Security Policy (CSP) for components that use dynamic styles, such as the wave effect, by providing a nonce.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
<ConfigProvider csp={{ nonce: 'YourNonceCode' }}>
  <Button>My Button</Button>
</ConfigProvider>
```

----------------------------------------

TITLE: Handling Null Values in Form's setFieldsValue with TypeScript
DESCRIPTION: This example shows a TypeScript error when setting a form field to null, and explains the relation to the strictNullChecks compiler option.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// This is not real world code, just for explain
import { Form } from 'antd';

type Test = {
  value: string[] | null;
};

export default () => {
  const [form] = Form.useForm<Test>();

  form.setFieldsValue({
    value: null, // Error: Type "null" cannot be assigned to type "string[] | undefined".
  });
};
```

----------------------------------------

TITLE: Implementing Avatar Group Display with Ant Design in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a group of avatars using Ant Design components. It includes examples of different avatar styles, sizes, and tooltips.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/avatar/demo/group.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Avatar, Divider, Tooltip } from 'antd';
import React from 'react';

const App: React.FC = () => (
  <>
    <Avatar.Group>
      <Avatar src="https://xsgames.co/randomusers/avatar.php?g=pixel" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="Ant User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1677ff' }}>A</Avatar>
    </Avatar.Group>
    <Divider />
    <Avatar.Group maxCount={2} maxStyle={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>
      <Avatar src="https://xsgames.co/randomusers/avatar.php?g=pixel" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="Ant User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1677ff' }}>A</Avatar>
    </Avatar.Group>
    <Divider />
    <Avatar.Group
      maxCount={2}
      size="large"
      maxStyle={{ color: '#f56a00', backgroundColor: '#fde3cf' }}
    >
      <Avatar src="https://xsgames.co/randomusers/avatar.php?g=pixel" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="Ant User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1677ff' }}>A</Avatar>
    </Avatar.Group>
  </>
);

export default App;
```

----------------------------------------

TITLE: Defining Ant Design Form Rule Type (TSX)
DESCRIPTION: Defines the type for a validation rule in Ant Design Form. A rule can be a static configuration object (`RuleConfig`) or a function that receives the form instance and returns a `RuleConfig`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_15

LANGUAGE: tsx
CODE:
```
type Rule = RuleConfig | ((form: FormInstance) => RuleConfig);
```

----------------------------------------

TITLE: Demonstrating Basic Usage of Ant Design Tour Component in TypeScript/React
DESCRIPTION: This code snippet ('./demo/basic.tsx') provides a basic demonstration of using the Ant Design Tour component in a React application with TypeScript. It shows how to initialize and render a step-by-step guide for users. Developers must have React and Ant Design installed. Key parameters include the steps, open state, and configuration for displaying the guide. The demo is intended as a starting example; it outputs an interactive Tour popup and does not cover advanced customization.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
<code src=\"./demo/basic.tsx\">Basic</code>
```

----------------------------------------

TITLE: Incorrectly Nesting Form.Item Children in Ant Design Form (JSX)
DESCRIPTION: Shows an example of incorrectly wrapping the form control component (`Input`) inside another element (`div`) within `Form.Item`, which prevents `value` and `onChange` props from being correctly injected. This pattern will not work as expected.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_19

LANGUAGE: jsx
CODE:
```
<Form.Item name="input">
  <div>
    <h3>I am a wrapped Input</h3>
    <Input />
  </div>
</Form.Item>
```

----------------------------------------

TITLE: Handling Async Loading in TreeSelect Search
DESCRIPTION: Code example showing how to implement custom filtering logic with async loading for TreeSelect when searching. This demonstrates handling of loading states and implementing custom matching logic.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree-select/index.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: TypeScript
CODE:
```
<TreeSelect
  filterTreeNode={(input, treeNode) => {
    const match = YOUR_LOGIC_HERE;

    if (match && !treeNode.isLeaf && !treeNode.children) {
      // Do some loading logic
    }

    return match;
  }}
/>
```

----------------------------------------

TITLE: Demonstrating Badge Component with Combined Properties in React
DESCRIPTION: This code snippet shows various examples of the Badge component using combinations of count, status, color, and dot properties. It demonstrates different styling options and badge configurations in a grid layout.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/demo/mix.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { Badge, Space, Divider } from 'antd';

const App: React.FC = () => (
  <>
    <Space>
      <Badge count={5} status="success" />
      <Badge count={5} status="warning" />
      <Badge count={5} status="error" />
      <Badge count={5} color="#faad14" />
      <Badge count={5} color="#52c41a" />
      <Badge count={5} color="#eb2f96" />
      <Badge count={5} color="#f50" />
    </Space>

    <Divider />

    <Space>
      <Badge dot status="success" />
      <Badge dot status="warning" />
      <Badge dot status="error" />
      <Badge dot color="#faad14" />
      <Badge dot color="#52c41a" />
      <Badge dot color="#eb2f96" />
      <Badge dot color="#f50" />
    </Space>

    <Divider />

    <Space>
      <Badge dot status="success">
        Success
      </Badge>
      <Badge dot status="warning">
        Warning
      </Badge>
      <Badge dot status="error">
        Error
      </Badge>
      <Badge dot color="#faad14">
        #faad14
      </Badge>
      <Badge dot color="#52c41a">
        #52c41a
      </Badge>
      <Badge dot color="#eb2f96">
        #eb2f96
      </Badge>
      <Badge dot color="#f50">
        #f50
      </Badge>
    </Space>

    <Divider />

    <Space>
      <Badge count={5} status="success">
        Success
      </Badge>
      <Badge count={5} status="warning">
        Warning
      </Badge>
      <Badge count={5} status="error">
        Error
      </Badge>
      <Badge count={5} color="#faad14">
        #faad14
      </Badge>
      <Badge count={5} color="#52c41a">
        #52c41a
      </Badge>
      <Badge count={5} color="#eb2f96">
        #eb2f96
      </Badge>
      <Badge count={5} color="#f50">
        #f50
      </Badge>
    </Space>
  </>
);

export default App;
```

----------------------------------------

TITLE: Configuring Ant Design Warning Aggregation via ConfigProvider
DESCRIPTION: Shows how to use the `warning` prop on Ant Design's `ConfigProvider` component with `strict: false` to aggregate multiple deprecation warnings into a single console message, improving clarity and reducing console noise during upgrades.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<ConfigProvider warning={{ strict: false }} />
```

----------------------------------------

TITLE: Defining the Cascader Option Interface (TypeScript)
DESCRIPTION: This TypeScript interface specifies the acceptable structure for individual option objects within the Cascader component's 'options' prop. Each Option must have a 'value' which can be a string or number, and may include a display 'label', a 'disabled' flag, nested 'children', and an 'isLeaf' boolean to force parent/leaf node behavior during lazy loading. Use this structure to ensure typed data passed to the Cascader, and note that React and Ant Design's typings should be available when implementing advanced field customization.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/cascader/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
interface Option {
  value: string | number;
  label?: React.ReactNode;
  disabled?: boolean;
  children?: Option[];
  // Determines if this is a leaf node(effective when `loadData` is specified).
  // `false` will force trade TreeNode as a parent node.
  // Show expand icon even if the current node has no children.
  isLeaf?: boolean;
}
```

----------------------------------------

TITLE: Basic Usage of Ant Design Empty Component in JSX
DESCRIPTION: This snippet demonstrates the basic implementation of the Ant Design `Empty` component in a React application using JSX. It shows how to render the component and optionally include child elements, like a `Button`, to provide user actions within the empty state placeholder. Requires React and the Ant Design library.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/empty/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Empty>
  <Button>Create</Button>
</Empty>
```

----------------------------------------

TITLE: Customizing Icons in Ant Design Components (JSX)
DESCRIPTION: This example shows how to use custom React nodes as icons in Ant Design components. It demonstrates the flexibility of icon customization in the library.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/notification/demo/custom-icon.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { SmileOutlined } from '@ant-design/icons';
import { Button } from 'antd';

ReactDOM.render(
  <Button icon={<SmileOutlined />}>Custom Icon</Button>,
  mountNode,
);
```

----------------------------------------

TITLE: Migrating Simulated Events from Enzyme to React Testing Library - JavaScript
DESCRIPTION: This snippet shows how to replace Enzyme's simulate method for event handling with React Testing Library's fireEvent. The example adapts a simulated click on a slider handle element to use fireEvent.click, querying the DOM for the target. Dependencies include @testing-library/react, and the test expects compatible React component markup. Inputs are DOM selectors for the target element, and output is the triggered event for further assertions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_1

LANGUAGE: diff
CODE:
```
++  import { fireEvent } from '@testing-library/react';\n\n--  wrapper.find('.ant-handle').simulate('click');\n++  fireEvent.click(container.querySelector('.ant-handle'));
```

----------------------------------------

TITLE: Vertical Compact Layout
DESCRIPTION: Demonstration of a compact layout in the vertical direction.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
<code src="./demo/compact-button-vertical.tsx">垂直方向紧凑布局</code>
```

----------------------------------------

TITLE: Customizing Ant Design Trigger in JSX
DESCRIPTION: This code snippet shows how to hide the default trigger in Ant Design components by setting the trigger prop to null. This allows for the use of a custom trigger instead of the default one.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/demo/custom-trigger.md#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
trigger={null}
```

----------------------------------------

TITLE: Rendering Colorful Tag Variants in Ant Design (React, TSX)
DESCRIPTION: This snippet illustrates how to display tags with different background colors using Ant Design in React. The demo requires Ant Design and demonstrates setting the \"color\" prop on the Tag component to customize its appearance. Useful for categorization by color dimension.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/colorful.tsx\">Colorful Tag</code>
```

----------------------------------------

TITLE: Static Consumption of Design Tokens in Ant Design
DESCRIPTION: This example demonstrates how to statically consume Design Tokens outside of the React lifecycle using the getDesignToken function. It shows how to get global tokens and how to use them with custom configurations.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
import type { ThemeConfig } from 'antd';
import { theme } from 'antd';
import { createRoot } from 'react-dom/client';

const { getDesignToken, useToken } = theme;

const config: ThemeConfig = {
  token: {
    colorPrimary: '#1890ff',
  },
};

// By static function
const globalToken = getDesignToken(config);

// By hook
const App = () => {
  const { token } = useToken();
  return null;
};

// Example for rendering
createRoot(document.getElementById('#app')).render(
  <ConfigProvider theme={config}>
    <App />
  </ConfigProvider>,
);
```

----------------------------------------

TITLE: Extracting Static Styles using `@ant-design/static-style-extract` in TSX
DESCRIPTION: Demonstrates using the `@ant-design/static-style-extract` package to simplify the static extraction of Ant Design component styles for SSR. This helper package internally renders common components, extracts their styles, and returns the combined CSS, which can then be saved to a file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
import { extractStyle } from '@ant-design/static-style-extract';
import fs from 'fs';

// `extractStyle` containers all the antd component
// excludes popup like component which is no need in ssr: Modal, message, notification, etc.
const css = extractStyle();

fs.writeFile(...);
```

----------------------------------------

TITLE: Static Style Extraction with Custom Theme Configuration (TSX)
DESCRIPTION: Example demonstrating how to use `extractStyle` in conjunction with Ant Design's `ConfigProvider` to bake styles specific to a custom theme configuration into a static CSS output. The `ConfigProvider` wraps the rendering node with the desired theme token overrides before extraction. Requires `@ant-design/static-style-extract`, `react`, and `antd`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_7

LANGUAGE: tsx
CODE:
```
import { extractStyle } from '@ant-design/static-style-extract';
import { ConfigProvider } from 'antd';

const cssText = extractStyle((node) => (
  <ConfigProvider
    theme={{
      token: {
        colorPrimary: 'red',
      },
    }}
  >
    {node}
  </ConfigProvider>
));
```

----------------------------------------

TITLE: Get Ref Type Definition using Ant Design GetRef (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `GetRef` utility type from Ant Design to obtain the type definition for a component's ref property. It shows an example using the `Select` component to derive its specific ref type (`BaseSelectRef`). Requires the `antd` library and TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/_util/index.zh-CN.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Select } from 'antd';
import type { GetRef } from 'antd';

type SelectRefType = GetRef<typeof Select>; // BaseSelectRef
```

----------------------------------------

TITLE: Configuring Webpack for SVG Icons (JavaScript)
DESCRIPTION: Provides a Webpack configuration snippet showing how to use `babel-loader` and `@svgr/webpack` to enable importing `.svg` files directly as React components. This setup is necessary to use custom SVG icons with Ant Design. Required dependencies: `webpack`, `babel-loader`, `@svgr/webpack`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
// webpack.config.js
module.exports = {
  // ... other config
  test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
  use: [
    {
      loader: 'babel-loader',
    },
    {
      loader: '@svgr/webpack',
      options: {
        babel: false,
        icon: true,
      },
    },
  ],
};
```

----------------------------------------

TITLE: Extracting Component Props using GetProps
DESCRIPTION: Shows how to get the complete props type definition from an Ant Design component using the GetProps utility type. This example demonstrates getting the props type from Checkbox.Group.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/_util/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Checkbox } from 'antd';
import type { GetProps } from 'antd';

type CheckboxGroupType = GetProps<typeof Checkbox.Group>;
```

----------------------------------------

TITLE: Compact Button Layout
DESCRIPTION: Example of creating a compact layout specifically for buttons.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
<code src="./demo/compact-buttons.tsx">Button 紧凑布局</code>
```

----------------------------------------

TITLE: Importing and Using Ant Design Button Component in React
DESCRIPTION: Example of how to import and use the Ant Design Button component in a React application. This snippet modifies the src/App.tsx file to include the Button component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-rsbuild.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button } from 'antd';

const App: React.FC = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default App;
```

----------------------------------------

TITLE: Manually Collecting Styles for SSR using TSX
DESCRIPTION: Shows the standard approach for collecting CSS-in-JS styles during server-side rendering using `@ant-design/cssinjs`. The application is wrapped in `StyleProvider` with a `cache`, rendered to string, and then styles are extracted from the cache. This avoids inline duplication but requires manual handling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import { renderToString } from 'react-dom/server';

const cache = createCache();

// HTML Content
const html = renderToString(
  <StyleProvider cache={cache}>
    <MyApp />
  </StyleProvider>,
);

// Style Content
const styleText = extractStyle(cache);
```

----------------------------------------

TITLE: Preventing Select Dropdown Close on Click in dropdownRender (TSX)
DESCRIPTION: Demonstrates how to prevent the Ant Design Select dropdown from closing when clicking elements within the custom `dropdownRender` content by stopping the default mousedown event.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
<Select
  dropdownRender={() => (
    <div
      onMouseDown={(e) => {
        e.preventDefault();
        e.stopPropagation();
      }}
    >
      Some Content
    </div>
  )}
/>
```

----------------------------------------

TITLE: Customizing Component Token for Tag in Ant Design (React, TSX)
DESCRIPTION: This snippet demonstrates how to customize the component's design token for Tag in Ant Design. It requires familiarity with the Ant Design token system and may involve adjusting styles or theme variables for Tag. Useful for adapting the Tag appearance to specific design requirements.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_12

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/component-token.tsx\" debug>Component Token</code>
```

----------------------------------------

TITLE: 自定义位置
DESCRIPTION: Shows how to customize the placement of the Drawer (top, right, bottom, or left).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
./demo/placement.tsx
```

----------------------------------------

TITLE: Removing babel-plugin-import Configuration in Umi for Ant Design v5
DESCRIPTION: Details that `babel-plugin-import` is deprecated in Ant Design v5 due to CSS-in-JS handling on-demand imports. This diff shows how to update the Umi configuration file (`config/config.ts` or `.umirc.ts`) by removing the `import: true` line within the `antd` section.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_0

LANGUAGE: diff
CODE:
```
// config/config.ts
export default {
  antd: {
-   import: true,
  },
};
```

----------------------------------------

TITLE: Documenting Custom Segmented Item Rendering in Ant Design
DESCRIPTION: This markdown snippet provides instructions in both Chinese and English on how to use ReactNode to customize the rendering of individual Segmented Items in Ant Design's Segmented component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/segmented/demo/custom.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

使用 ReactNode 自定义渲染每一个 Segmented Item。

## en-US

Custom each Segmented Item by ReactNode.
```

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Commands to run the Ant Design website locally for development purposes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npm start
```

LANGUAGE: bash
CODE:
```
$ yarn start
```

----------------------------------------

TITLE: Using Ant Design Form.Provider with onFormFinish (JSX)
DESCRIPTION: Demonstrates how to use Form.Provider to link multiple forms. The onFormFinish prop triggers a callback when a sub-form (identified by its name) is submitted, enabling coordinated actions between forms.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_6

LANGUAGE: JSX
CODE:
```
<Form.Provider
  onFormFinish={(name) => {
    if (name === 'form1') {
      // Do something...
    }
  }}
>
  <Form name="form1">...</Form>
  <Form name="form2">...</Form>
</Form.Provider>
```

----------------------------------------

TITLE: Applying Absolute Positioning to Ant Design Affix (JSX)
DESCRIPTION: This snippet demonstrates applying absolute positioning directly to the Affix component using the style prop. This is the recommended way if absolute positioning is required for the fixed element's placement, rather than applying it to the children of Affix.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/affix/index.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
<Affix style={{ position: 'absolute', top: y, left: x }}>...</Affix>
```

----------------------------------------

TITLE: Disabling Button Click Wave Effect via ConfigProvider (JSX)
DESCRIPTION: This JSX snippet demonstrates how to disable the default click wave animation effect for Ant Design buttons. It wraps the `Button` component within a `ConfigProvider` and sets the `wave.disabled` property to `true`. This configuration applies to the enclosed button and potentially other descendant components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<ConfigProvider wave={{ disabled: true }}>
  <Button>click</Button>
</ConfigProvider>
```

----------------------------------------

TITLE: Generating Moment.js DatePicker Ant Design TSX
DESCRIPTION: This snippet shows how to create a custom Ant Design DatePicker component using Moment.js instead of the default Day.js. It imports the necessary modules and uses the `DatePicker.generatePicker` helper with the Moment.js configuration generator.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import { DatePicker } from 'antd';
import type { Moment } from 'moment';
import momentGenerateConfig from 'rc-picker/lib/generate/moment';

const MyDatePicker = DatePicker.generatePicker<Moment>(momentGenerateConfig);

export default MyDatePicker;
```

----------------------------------------

TITLE: Customizing Validation Messages with messageVariables in Ant Design (JSX)
DESCRIPTION: Demonstrates using the `messageVariables` prop on `Form.Item` to provide custom variables for validation messages. These variables can be referenced within the `rules` message string using `${variableName}` syntax. This allows for dynamic or context-specific error messages.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_4

LANGUAGE: JSX
CODE:
```
<Form>
  <Form.Item
    messageVariables={{ another: 'good' }}
    label="user"
    rules={[{ required: true, message: '${another} is required' }]}
  >
    <Input />
  </Form.Item>
  <Form.Item
    messageVariables={{ label: 'good' }}
    label={<span>user</span>}
    rules={[{ required: true, message: '${label} is required' }]}
  >
    <Input />
  </Form.Item>
</Form>
```

----------------------------------------

TITLE: Using Icon in Tag Component in Ant Design (React, TSX)
DESCRIPTION: This snippet illustrates how to add icons inside a Tag component in React using Ant Design. It requires importing Ant Design icons and passing them via the 'icon' prop. Icons help visually distinguish tags with additional context or semantics.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/icon.tsx\">Icon</code>
```

----------------------------------------

TITLE: Advanced Responsive Grid Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file providing a more complex example of responsive design techniques using the Ant Design grid system's breakpoint props. The actual code implementing this example resides in the './demo/responsive-more.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_10

LANGUAGE: html
CODE:
```
<code src="./demo/responsive-more.tsx">More responsive</code>
```

----------------------------------------

TITLE: Initializing Ant Design TimePicker with defaultValue (JSX)
DESCRIPTION: This snippet demonstrates how to initialize the Ant Design `TimePicker` component using a default value from the `dayjs` library. It requires importing `dayjs` and the `customParseFormat` plugin, extending `dayjs` with the plugin, and then passing a parsed `dayjs` object to the `defaultValue` prop of the `TimePicker`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/time-picker/index.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat'

dayjs.extend(customParseFormat)
<TimePicker defaultValue={dayjs('13:30:56', 'HH:mm:ss')} />;
```

----------------------------------------

TITLE: Disabling babel-plugin-import in Umi Configuration for Ant Design v5
DESCRIPTION: Shows how to explicitly disable the automatic `babel-plugin-import` configuration for Ant Design within a Umi project's configuration file (`config/config.ts` or `.umirc.ts`) by setting `antd.import` to `false`. This is necessary when migrating to Ant Design v5.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_11

LANGUAGE: diff
CODE:
```
// config/config.ts or .umirc
export default {
  antd: {
-   import: true,
+   import: false,
  },
};
```

----------------------------------------

TITLE: DatePicker Common API - allowClear
DESCRIPTION: 自定义清除按钮。从 5.8.0 版本开始支持对象类型。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_1

LANGUAGE: typescript
CODE:
```
allowClear: boolean | { clearIcon?: ReactNode }
```

----------------------------------------

TITLE: Configuring Content Security Policy with ConfigProvider (TSX)
DESCRIPTION: Shows how to use the `csp` prop to configure Content Security Policy, providing a nonce for dynamic styles used by components like the wave effect.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_1

LANGUAGE: tsx
CODE:
```
<ConfigProvider csp={{ nonce: 'YourNonceCode' }}>
  <Button>My Button</Button>
</ConfigProvider>
```

----------------------------------------

TITLE: Get Props Type Definition using Ant Design GetProps (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `GetProps` utility type from Ant Design to get the complete props type definition for a component or a component's sub-component. The example obtains the props type for the `Checkbox.Group` component. Requires the `antd` library and TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/_util/index.zh-CN.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Checkbox } from 'antd';
import type { GetProps } from 'antd';

type CheckboxGroupType = GetProps<typeof Checkbox.Group>;
```

----------------------------------------

TITLE: Disabling Wave Effect - React/TypeScript
DESCRIPTION: Shows how to disable the click wave effect for buttons using ConfigProvider configuration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<ConfigProvider wave={{ disabled: true }}>
  <Button>click</Button>
</ConfigProvider>
```

----------------------------------------

TITLE: DatePicker Common API - format
DESCRIPTION: 设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 dayjs#format。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_10

LANGUAGE: typescript
CODE:
```
format: formatType
```

----------------------------------------

TITLE: Extracting All Ant Design Styles using @ant-design/static-style-extract in TypeScript
DESCRIPTION: Shows the practical implementation of static style extraction using the dedicated `@ant-design/static-style-extract` package. The `extractStyle` function from this package internally renders all standard Ant Design components (excluding popups not needed for initial SSR), collects their styles, and returns the combined CSS string. This CSS can then be written to a file using Node.js `fs` module for static serving. Dependencies include `@ant-design/static-style-extract` and Node.js `fs`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
import { extractStyle } from '@ant-design/static-style-extract';
import fs from 'fs';

// `extractStyle` containers all the antd component
// excludes popup like component which is no need in ssr: Modal, message, notification, etc.
const css = extractStyle();

fs.writeFile(...);
```

----------------------------------------

TITLE: Compact Layout with Space.Compact
DESCRIPTION: Demonstration of using Space.Compact for a compact layout combination.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
<code src="./demo/compact.tsx">紧凑布局组合</code>
```

----------------------------------------

TITLE: Updating Form.Item with shouldUpdate (true) in Ant Design (JSX)
DESCRIPTION: Shows how setting `shouldUpdate` to `true` on a `Form.Item` forces it to re-render on any form update. The child render function accesses the current form values to display them. This is useful for custom rendering areas that need to react to any form state change.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_2

LANGUAGE: JSX
CODE:
```
<Form.Item shouldUpdate>
  {() => {
    return <pre>{JSON.stringify(form.getFieldsValue(), null, 2)}</pre>;
  }}
</Form.Item>
```

----------------------------------------

TITLE: Extracting Static Styles for Hybrid Themes in TSX
DESCRIPTION: Shows how to use `@ant-design/static-style-extract` to generate a single CSS file containing styles for multiple Ant Design themes (hybrid themes). It involves passing a function to `extractStyle` that wraps the component set (`node`) with `ConfigProvider` for each required theme.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
// `node` is the components set we prepared
const css = extractStyle((node) => (
  <>
    <ConfigProvider theme={theme1}>{node}</ConfigProvider>
    <ConfigProvider theme={theme2}>{node}</ConfigProvider>
    <ConfigProvider theme={theme3}>{node}</ConfigProvider>
  </>
));
```

----------------------------------------

TITLE: Extracting Ant Design Select Option Type with GetProp
DESCRIPTION: This snippet illustrates how to use the `GetProp` utility type to extract the type of a specific prop's elements, specifically the options for a Select component. It shows that `GetProp` can accept either the component's props type (`SelectProps`) or the component type itself (`typeof Select`) as the first argument. The `[number]` index is used to get the type of a single option from the array type returned by `GetProp`. `GetProp` handles nullability internally.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
```tsx
import type { GetProp, Select, SelectProps } from 'antd';

// Both of this can work
type SelectOptionType1 = GetProp<SelectProps, 'options'>[number];
type SelectOptionType2 = GetProp<typeof Select, 'options'>[number];
```
```

----------------------------------------

TITLE: Get Single Prop Type using Ant Design GetProp (TypeScript)
DESCRIPTION: This snippet demonstrates using the `GetProp` utility type from Ant Design to extract the type definition of a specific prop from a component or its props type. It shows two equivalent ways to get the type of the `options` prop from the `Select` component and then access the type of a single item in the options array. Requires the `antd` library and TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/_util/index.zh-CN.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Select } from 'antd';
import type { GetProp, SelectProps } from 'antd';

// 以下两种都可以生效
type SelectOptionType1 = GetProp<SelectProps, 'options'>[number];
type SelectOptionType2 = GetProp<typeof Select, 'options'>[number];
```

----------------------------------------

TITLE: Configuring Theme to Disable Motion in Ant Design
DESCRIPTION: This snippet demonstrates how to disable motion effects globally in Ant Design components by configuring the theme token.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
import { ConfigProvider } from 'antd';

<ConfigProvider theme={{ token: { motion: false } }}>
  <App />
</ConfigProvider>;
```

----------------------------------------

TITLE: Setting Common Props Ant Design Modal TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Modal component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and optional `classNames` and `styles` for fine-grained control, plus an optional `closeIcon` (React.ReactNode).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, classNames?: [ModalProps["classNames"]](/components/modal#api), styles?: [ModalProps["styles"]](/components/modal#api), closeIcon?: React.ReactNode }
```

----------------------------------------

TITLE: Static Style Extraction with Multiple Mixed Theme Configurations (TSX)
DESCRIPTION: Example showing how to use `extractStyle` with multiple nested or sibling `ConfigProvider` instances to bake styles for different or mixed theme configurations into a static CSS file. This is useful for generating a single CSS file that can support various theme variations used across the application. Requires `@ant-design/static-style-extract`, `react`, and `antd`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_8

LANGUAGE: tsx
CODE:
```
import { extractStyle } from '@ant-design/static-style-extract';
import { ConfigProvider } from 'antd';

const cssText = extractStyle((node) => (
  <>
    <ConfigProvider
      theme={{
        token: {
          colorBgBase: 'green ',
        },
      }}
    >
      {node}
    </ConfigProvider>
    <ConfigProvider
      theme={{
        token: {
          colorPrimary: 'blue',
        },
      }}
    >
      <ConfigProvider
        theme={{
          token: {
            colorBgBase: 'red ',
          },
        }}
      >
        {node}
      </ConfigProvider>
    </ConfigProvider>
  </>
));
```

----------------------------------------

TITLE: Migrating Snapshot Testing from Enzyme to React Testing Library - JavaScript
DESCRIPTION: This snippet contrasts Enzyme's wrapper-based snapshot testing with snapshots using React Testing Library. It switches from wrapping the result of mount and render() to snapshotting the DOM from container.firstChild. The test is written in a Jest test block and requires @testing-library/react. Inputs are JSX elements for rendering, with outputs being DOM structure snapshots.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_5

LANGUAGE: diff
CODE:
```
--  import { mount } from 'enzyme';\n++  import { render } from '@testing-library/react';\n\n    describe('xxx', () => {\n      it('yyy', () => {\n--      const wrapper = mount(<Demo />);\n++      const { container } = render(<Demo />);\n--      expect(wrapper.render()).toMatchSnapshot();\n++      expect(container.firstChild).toMatchSnapshot();\n      });\n    });
```

----------------------------------------

TITLE: Rendering Custom Indicator for Ant Design Tour in TypeScript/React
DESCRIPTION: This snippet ('./demo/indicator.tsx') demonstrates how to render a custom indicator (step markers or progress indicators) within the Ant Design Tour component. It relies on React and Ant Design. The code customizes the indicator via a callback function, using 'indicatorsRender', to control its display based on the current and total steps. The output is a Tour component with a tailored indicator.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: TypeScript
CODE:
```
<code src=\"./demo/indicator.tsx\">Custom indicator</code>
```

----------------------------------------

TITLE: Configuring Webpack less-loader for Ant Design v5 Theme Variables
DESCRIPTION: Demonstrates how to configure Webpack's `less-loader` to inject Ant Design theme variables when Less is still used in a project migrating to v5. It uses helper functions from `antd` and `@ant-design/compatible` to convert v5 design tokens into legacy Less variables (`v5Vars`) and passes them to `less-loader` via the `modifyVars` option. An example for v4 variables (`v4Vars`) is also shown.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
const { theme } = require('antd/lib');
const { convertLegacyToken, defaultTheme } = require('@ant-design/compatible/lib');

const { defaultAlgorithm, defaultSeed } = theme;

const mapV5Token = defaultAlgorithm(defaultSeed);
const v5Vars = convertLegacyToken(mapV5Token);
const mapV4Token = theme.getDesignToken(defaultTheme);
const v4Vars = convertLegacyToken(mapV4Token);

// Webpack Config
module.exports = {
  // ... other config
  loader: 'less-loader',
  options: {
    lessOptions: {
      modifyVars: v5Vars, // or v4Vars
    },
  },
};
```

----------------------------------------

TITLE: Badge Size
DESCRIPTION: Demonstrates different size options for the Badge component. Code referenced from ./demo/size.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
./demo/size.tsx
```

----------------------------------------

TITLE: Using Affix with Absolute Positioning in React
DESCRIPTION: Demonstrates how to use the Affix component with absolute positioning. This is an exception to the rule that children of Affix should not have absolute positioning.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/affix/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Affix style={{ position: 'absolute', top: y, left: x }}>...</Affix>
```

----------------------------------------

TITLE: Custom Offset
DESCRIPTION: Illustrates how to adjust the position of the Badge relative to its wrapper. Code referenced from ./demo/offset.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
./demo/offset.tsx
```

----------------------------------------

TITLE: Customizing Validation Messages with messageVariables in Form.Item (JSX)
DESCRIPTION: This snippet demonstrates using the `messageVariables` prop on `Form.Item` to customize placeholder variables within validation rule messages. It shows two examples: one replacing a custom variable `${another}` and another replacing the default `${label}` variable with a custom value 'good'. This allows for more dynamic and context-specific validation feedback.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
<Form>
  <Form.Item
    messageVariables={{ another: 'good' }}
    label="user"
    rules={[{ required: true, message: '${another} is required' }]}
  >
    <Input />
  </Form.Item>
  <Form.Item
    messageVariables={{ label: 'good' }}
    label={<span>user</span>}
    rules={[{ required: true, message: '${label} is required' }]}
  >
    <Input />
  </Form.Item>
</Form>
```

----------------------------------------

TITLE: Auto-wrapping with Space Component
DESCRIPTION: Demonstration of auto-wrapping behavior in the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
<code src="./demo/wrap.tsx">自动换行</code>
```

----------------------------------------

TITLE: Setup Ant Design Development Environment
DESCRIPTION: Provides commands to clone the Ant Design repository, navigate into the directory, install project dependencies, and start the local development server.
SOURCE: https://github.com/ant-design/ant-design/blob/master/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
git clone git@github.com:ant-design/ant-design.git
```

LANGUAGE: bash
CODE:
```
cd ant-design
```

LANGUAGE: bash
CODE:
```
npm install
```

LANGUAGE: bash
CODE:
```
npm start
```

----------------------------------------

TITLE: Displaying Checkable Tag Component in Ant Design (React, TSX)
DESCRIPTION: This snippet shows how to use the CheckableTag component to render selectable tags in React using Ant Design. It is dependent on Ant Design's Tag.CheckableTag component. The main props include 'checked' and 'onChange' facilitating interactive toggling. This implementation allows users to select or deselect tagging options.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/checkable.tsx\">Checkable</code>
```

----------------------------------------

TITLE: Configuring Static Methods (TSX)
DESCRIPTION: Illustrates how to use `ConfigProvider.config()` to apply global configuration (like theme or prefix) to static methods of components like Modal, Message, and Notification.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
ConfigProvider.config({
  // 5.13.0+
  holderRender: (children) => (
    <ConfigProvider
      prefixCls="ant"
      iconPrefixCls="anticon"
      theme={{ token: { colorPrimary: 'red' } }}
    >
      {children}
    </ConfigProvider>
  )
});
```

----------------------------------------

TITLE: Extending Select Option Type - TypeScript
DESCRIPTION: Demonstrates how to use TypeScript utility types together with Ant Design's SelectProps to extract a single option's type. This approach uses NonNullable to ensure that the extracted type filters out null and undefined, providing the type for a Select option. Dependencies include Ant Design's SelectProps and understanding of complex TypeScript type manipulations. Input is a generic SelectProps type, and the output is the type of a single option. No runtime effect; only for typing.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import type { SelectProps } from 'antd';

type SelectOption<T> = NonNullable<SelectProps<T>['options']>[number];
```

----------------------------------------

TITLE: Configuring Non-modal Ant Design Tour in TypeScript/React
DESCRIPTION: This code snippet ('./demo/non-modal.tsx') demonstrates the use of the Ant Design Tour component without a modal overlay, allowing background interaction during the user guide. It requires React and Ant Design as dependencies. The demo shows how disabling or customizing mask and interaction props alters the Tour's behavior, enabling a more flexible user experience. Outputs a non-blocking Tour overlay.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: TypeScript
CODE:
```
<code src=\"./demo/non-modal.tsx\">Non-modal</code>
```

----------------------------------------

TITLE: Creating Moment-based TimePicker in TypeScript
DESCRIPTION: This snippet shows how to create a custom TimePicker component in TypeScript. It leverages the previously defined custom `DatePicker` component (`./DatePicker`), passes down the props, and specifically sets the `picker` prop to `"time"` to render it as a time picker. It uses `React.forwardRef` to correctly handle refs.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
import * as React from 'react';
import type { PickerTimeProps } from 'antd/es/date-picker/generatePicker';
import type { Moment } from 'moment';

import DatePicker from './DatePicker';

export interface TimePickerProps extends Omit<PickerTimeProps<Moment>, 'picker'> {}

const TimePicker = React.forwardRef<any, TimePickerProps>((props, ref) => (
  <DatePicker {...props} picker="time" mode={undefined} ref={ref} />
));

TimePicker.displayName = 'TimePicker';

export default TimePicker;
```

----------------------------------------

TITLE: Updating Select Component API for Popup ClassName in React (JSX)
DESCRIPTION: Shows the migration from the deprecated `dropdownClassName` prop to the new `popupClassName` prop for specifying custom CSS classes on the Select component's popup dropdown in Ant Design v5.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: diff
CODE:
```
  import { Select } from 'antd';

  const App: React.FC = () => (
    <Select
-     dropdownClassName="my-select-popup"
+     popupClassName="my-select-popup"
    />
  );

  export default App;
```

----------------------------------------

TITLE: Testing Deprecated Component Warnings with React Testing Library & Jest - JavaScript
DESCRIPTION: This snippet demonstrates a Jest unit test using React Testing Library to ensure that rendering a deprecated component (BackTop) triggers a console error with the expected warning. It spies on console.error, renders the component, asserts the warning, and restores the mock. Dependencies include Jest and @testing-library/react. Inputs are the component to render; outputs are validation of console error invocations.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_3

LANGUAGE: diff
CODE:
```
    describe('BackTop', () => {\n++    it('should console Error', () => {\n++        const errSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n++        render(<BackTop />);\n++        expect(errSpy).toHaveBeenCalledWith(\n++          'Warning: [antd: BackTop] `BackTop` is deprecated. Please use `FloatButton.BackTop` instead.',\n++        );\n++      errSpy.mockRestore();\n++    });\n    });
```

----------------------------------------

TITLE: Comparing useInsertionEffect and useLayoutEffect Timing (React)
DESCRIPTION: This snippet illustrates the execution order of `useLayoutEffect` and `useInsertionEffect` in React 18. `useInsertionEffect` runs before `useLayoutEffect`, which is crucial for CSS-in-JS libraries to inject styles before DOM measurements or layout effects occur. It shows that 'insertion effect' is logged before 'layout effect'.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
useLayoutEffect(() => {
  console.log('layout effect');
}, []);

useInsertionEffect(() => {
  console.log('insertion effect');
}, []);

// Console:
// - insertion effect
// - layout effect
```

----------------------------------------

TITLE: Tracing useLayoutEffect vs useInsertionEffect Timing in React | TypeScript/React
DESCRIPTION: Demonstrates the priority order of useInsertionEffect and useLayoutEffect in React 18 with console logs. Shows that useInsertionEffect is called before useLayoutEffect regardless of the order written in code. No external dependencies; logs to console only. Inputs/outputs are side-effects in the console for timing validation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_0

LANGUAGE: TSX
CODE:
```
useLayoutEffect(() => {\n  console.log('layout effect');\n}, []);\n\nuseInsertionEffect(() => {\n  console.log('insertion effect');\n}, []);\n\n// Console:\n// - insertion effect\n// - layout effect
```

----------------------------------------

TITLE: Applying Margins and RTL Adjustments to Ant Design Components in CSS
DESCRIPTION: This CSS snippet defines styles for Ant Design components within a demo context (`.button-demo`). It sets margins for buttons (`.ant-btn`) and button groups (`.ant-btn-group`) using the logical property `margin-inline-end` for better RTL support. It resets specific margins within button groups for consistent spacing. Additionally, it styles a custom `.head-example` element and provides specific margin adjustments for `.ant-badge` in both LTR and RTL (`.ant-badge-rtl`) scenarios using logical properties.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/demo/direction.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.button-demo .ant-btn,
.button-demo .ant-btn-group {
  margin-inline-end: 8px;
  margin-bottom: 12px;
}
.button-demo .ant-btn-group > .ant-btn,
.button-demo .ant-btn-group > span > .ant-btn {
  margin-inline-end: 0;
  margin-inline-start: 0;
}

.head-example {
  display: inline-block;
  width: 42px;
  height: 42px;
  vertical-align: middle;
  background: #eee;
  border-radius: 4px;
}

.ant-badge:not(.ant-badge-not-a-wrapper) {
  margin-inline-end: 20px;
}

.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {
  margin-inline-end: 0;
  margin-inline-start: 20px;
}
```

----------------------------------------

TITLE: Configuring Webpack for Less Variable Compatibility in Ant Design v5 Migration (JavaScript)
DESCRIPTION: JavaScript code snippet demonstrating how to configure `less-loader` in Webpack. It uses `@ant-design/compatible` to convert v5 design tokens back to legacy less variables (`v5Vars` or optionally `v4Vars`) and inject them using `modifyVars`, aiding projects that relied heavily on Ant Design's v4 less variables.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_7

LANGUAGE: js
CODE:
```
const { theme } = require('antd/lib');
const { convertLegacyToken, defaultTheme } = require('@ant-design/compatible/lib');

const { defaultAlgorithm, defaultSeed } = theme;

const mapV5Token = defaultAlgorithm(defaultSeed);
const v5Vars = convertLegacyToken(mapV5Token);
const mapV4Token = theme.getDesignToken(defaultTheme);
const v4Vars = convertLegacyToken(mapV4Token);

// Webpack Config
module.exports = {
  // ... other config
  loader: 'less-loader',
  options: {
    lessOptions: {
      modifyVars: v5Vars, // or v4Vars
    },
  },
};
```

----------------------------------------

TITLE: Enabling Responsive Ant Design Menu in Flex Layout (JSX)
DESCRIPTION: Demonstrates wrapping the Ant Design Menu component in a flex container with `minWidth: 0` and `flex: "auto"` styles to ensure it responds correctly and truncates content within a flex layout.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/index.zh-CN.md#_snippet_1

LANGUAGE: jsx
CODE:
```
<div style={{ flex }}>
  <div style={{ ... }}>Some Content</div>
  <Menu style={{ minWidth: 0, flex: "auto" }} />
</div>
```

----------------------------------------

TITLE: Fallback Suffix with Conditional Rendering - JSX
DESCRIPTION: This JSX snippet demonstrates a best-practice workaround for maintaining input focus in Ant Design's Input component when dynamically changing prefix, suffix, or showCount props. It uses a conditional to provide a fallback empty <span /> element when a suffix is not set, preventing React from recreating the input DOM node and thus preserving focus. The code assumes 'condition' is a runtime boolean and 'Icon' is a predefined icon component, and should be used when dynamic elements could otherwise disrupt DOM stability.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: JSX
CODE:
```
const suffix = condition ? <Icon type="smile" /> : <span />;

<Input suffix={suffix} />;
```

----------------------------------------

TITLE: Pseudocode for Style Insertion Tracking with useMemo/useEffect | TypeScript/React
DESCRIPTION: Simulates a CSS-in-JS style insertion refcounting hook for React 17 by counting usages in useMemo and cleanup in useEffect. Pseudocode and not for direct use; the counter parameter is a shared object to track references per hash. Key actions: insert style in render phase if not present; cleanup on effect teardown.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_1

LANGUAGE: TSX
CODE:
```
// pseudocode. Not used in real world\nfunction useStyleInsertion(hash: string, counter: Record<string, number>) {\n  useMemo(() => {\n    if (!counter[hash]) {\n      // Insert only when current style not inserted\n    }\n\n    counter[hash] += 1;\n  }, [hash]);\n\n  useEffect(\n    () => () => {\n      counter[hash] -= 1;\n\n      if (!counter[hash]) {\n        // Remove if set to clear on destroy\n      }\n    },\n    [hash],\n  );\n}
```

----------------------------------------

TITLE: Configuring StyleProvider for :where Selector Support
DESCRIPTION: Example showing how to configure StyleProvider to handle :where selector compatibility by setting hashPriority to high.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import { StyleProvider } from '@ant-design/cssinjs';

// Config `hashPriority` to `high` instead of default `low`
// Which will remove `:where` wrapper
export default () => (
  <StyleProvider hashPriority="high">
    <MyApp />
  </StyleProvider>
);
```

----------------------------------------

TITLE: Extracting Ant Design Checkbox Group Props Type with GetProps
DESCRIPTION: This snippet demonstrates using the `GetProps` utility type from antd to obtain the complete props type definition for a nested component, `Checkbox.Group`. It imports `Checkbox` and `GetProps`, then defines `CheckboxGroupType` by applying `GetProps` to `typeof Checkbox.Group`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
```tsx
import type { Checkbox, GetProps } from 'antd';

type CheckboxGroupType = GetProps<typeof Checkbox.Group>;
```
```

----------------------------------------

TITLE: Theme Switching CSS Variables
DESCRIPTION: CSS implementation for theme switching using light and dark mode classes as selectors
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/css-var-plan.en-US.md#2025-04-23_snippet_2

LANGUAGE: css
CODE:
```
/* Using custom classes as selectors */
.light .css-hash {
  --color-text: rgba(0, 0, 0, 0.85);
}

.dark .css-hash {
  --color-text: rgba(255, 255, 255, 0.88);
}
```

----------------------------------------

TITLE: Applying Custom Mask Styles to Ant Design Tour in TypeScript/React
DESCRIPTION: The './demo/mask.tsx' code snippet presents how to apply custom mask styles to the highlighted region of the Ant Design Tour. Dependencies include React and Ant Design. By adjusting mask and style props, this demo showcases changing the color and appearance of the overlay mask. Key inputs include mask style and color, and the output is a visually distinct Tour effect. No advanced logic is present.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: TypeScript
CODE:
```
<code src=\"./demo/mask.tsx\">Custom mask style</code>
```

----------------------------------------

TITLE: Handling Dynamic prefixCls with CSS-in-JS (TSX)
DESCRIPTION: This TSX snippet demonstrates creating a custom provider (`GeekProvider`) that uses CSS-in-JS (`antd-style`) to apply styles while correctly handling potentially dynamic `prefixCls` values from Ant Design's `ConfigProvider.ConfigContext`. It retrieves the current prefix for the button component (`btnPrefixCls`), incorporates it into the generated CSS, and applies the resulting class name to the Button component via a nested `ConfigProvider`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// This is an example of using `antd-style`, you can use any CSS-in-JS library.
import React from 'react';
import { ConfigProvider } from 'antd';
import { createStyles } from 'antd-style';

const useButtonStyle = createStyles(({ css }, prefixCls: string) => {
  return {
    btn: css`
      background: red;
      .${prefixCls}-icon {
        color: green;
      }
    `,
  };
});

const GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {
  const { getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);
  const btnPrefixCls = getPrefixCls('btn');
  const { styles } = useButtonStyle(btnPrefixCls);
  return <ConfigProvider button={{ className: styles.btn }}>{props.children}</ConfigProvider>;
};

export default GeekProvider;
```

----------------------------------------

TITLE: Configuring Radio Options in Ant Design (Chinese)
DESCRIPTION: This snippet explains in Chinese how to render radio buttons by configuring the 'options' parameter and set the radio type using the 'optionType' parameter in Ant Design.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/radio/demo/radiogroup-options.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

通过配置 `options` 参数来渲染单选框。也可通过 `optionType` 参数来设置 Radio 类型。
```

----------------------------------------

TITLE: Importing React 19 Compatibility Package for Ant Design
DESCRIPTION: This snippet shows how to import the compatibility package for Ant Design v5 to work with React 19. It should be included at the entry point of the application.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/v5-for-19.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import '@ant-design/v5-patch-for-react-19';
```

----------------------------------------

TITLE: Vertical Spacing with Space Component
DESCRIPTION: Example of using the Space component to create vertical spacing between elements.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
<code src="./demo/vertical.tsx">垂直间距</code>
```

----------------------------------------

TITLE: Defining DisabledTime Type in Ant Design
DESCRIPTION: Defines the TypeScript type signature for the `disabledTime` function in Ant Design's DatePicker. It specifies the function signature, which takes a Dayjs object and returns an object containing functions to disable hours, minutes, seconds, and milliseconds, allowing for granular control over time selection.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.zh-CN.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
type DisabledTime = (now: Dayjs) => {
  disabledHours?: () => number[];
  disabledMinutes?: (selectedHour: number) => number[];
  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];
  disabledMilliseconds?: (
    selectedHour: number,
    selectedMinute: number,
    selectedSecond: number,
  ) => number[];
};
```

----------------------------------------

TITLE: Using transform in Rules for Aggregate Field Validation (TSX)
DESCRIPTION: Illustrates the conceptual use of the `transform` function within a `Form.Item`'s `rules`. This function allows validation logic to access the aggregated value. It retrieves the current values of all associated `names` from the form instance (`form.getFieldValue(name)`) and returns them as an array, which is then used by the validation rule.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
rules={[{
  transform: () => {
    const values = names.map((name) => form.getFieldValue(name));
    return values;
  },
}]}
```

----------------------------------------

TITLE: Referencing InputNumber Focus Method Example (TSX)
DESCRIPTION: References `./demo/focus.tsx`, demonstrating how to programmatically focus the Ant Design InputNumber component using its `focus()` method (options updated in v5.22.0) in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_13

LANGUAGE: markdown
CODE:
```
<code src="./demo/focus.tsx" version="5.22.0">Focus</code>
```

----------------------------------------

TITLE: Implementing px2rem Transformation
DESCRIPTION: Configuration for px to rem unit conversion using px2remTransformer with customizable root value.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
import { px2remTransformer, StyleProvider } from '@ant-design/cssinjs';

const px2rem = px2remTransformer({
  rootValue: 32, // 32px = 1rem; @default 16
});

export default () => (
  <StyleProvider transformers={[px2rem]}>
    <MyApp />
  </StyleProvider>
);
```

----------------------------------------

TITLE: Setting Common Props Ant Design Switch TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Switch component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_18

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Installing Ant Design v5 Alongside v4 using npm/yarn/pnpm Alias (Bash)
DESCRIPTION: Provides commands for npm, yarn, and pnpm to install Ant Design v5 under an alias (`antd-v5`) while keeping v4 installed as the default `antd`. This enables gradual migration or coexistence of both versions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
$ npm install --save antd-v5@npm:antd@5
# or
$ yarn add antd-v5@npm:antd@5
# or
$ pnpm add antd-v5@npm:antd@5
```

----------------------------------------

TITLE: Status Dot
DESCRIPTION: Shows how to use the Badge as a status indicator with predefined colors. Code referenced from ./demo/status.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
./demo/status.tsx
```

----------------------------------------

TITLE: Setting Common Props Ant Design Timeline TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Timeline component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_27

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Enabling CSS Variables in Ant Design (React 17 or 16)
DESCRIPTION: This snippet demonstrates enabling CSS variable mode for Ant Design when using React 17 or 16. Unlike React 18, older versions require manually providing a unique `key` within the `cssVar` configuration object to ensure proper style isolation and prevent theme conflicts.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/css-variables.zh-CN.md#_snippet_1

LANGUAGE: TSX
CODE:
```
<ConfigProvider theme={{ cssVar: { key: 'app' } }}>
  <App />
</ConfigProvider>
```

----------------------------------------

TITLE: Switching to Ant Design v4 Theme with @ant-design/compatible in JavaScript
DESCRIPTION: This React snippet demonstrates how to restore the Ant Design v4 theming style in a v5 project using the @ant-design/compatible package. It imports default and dark themes from @ant-design/compatible and applies the defaultTheme using ConfigProvider. Dependencies include @ant-design/compatible, antd, and React. It renders a primary button and a vertical radio group leveraging the legacy theme styles. Inputs are the imported components and outputs are the themed UI elements.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_15

LANGUAGE: JavaScript
CODE:
```
const sandpackConfig = {
  dependencies: {
    '@ant-design/compatible': 'v5-compatible-v4',
  },
};

import {
  defaultTheme,   // Default theme
  darkTheme,      // Dark theme
} from '@ant-design/compatible';
import { ConfigProvider, Button, Radio, Space } from 'antd';

export default () => (
  <ConfigProvider theme={defaultTheme}>
    <Space direction="vertical">
      <Button type="primary">Button</Button>
      <Radio.Group>
        <Radio value={1}>A</Radio>
        <Radio value={2}>B</Radio>
        <Radio value={3}>C</Radio>
        <Radio value={4}>D</Radio>
      </Radio.Group>
    </Space>
  </ConfigProvider>
);
```

----------------------------------------

TITLE: Defining Preview Toolbar Customization Info in TypeScript
DESCRIPTION: TypeScript interface `ToolbarRenderInfoType` specifies the data passed to the `toolbarRender` function for customizing the image preview toolbar. It includes predefined icon nodes, action callbacks (like zoom, rotate, flip, reset, close), the current transform state, image index/total, and image details (`ImgInfo`).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
{
  icons: {
    flipYIcon: React.ReactNode;
    flipXIcon: React.ReactNode;
    rotateLeftIcon: React.ReactNode;
    rotateRightIcon: React.ReactNode;
    zoomOutIcon: React.ReactNode;
    zoomInIcon: React.ReactNode;
  };
  actions: {
    onActive?: (index: number) => void; // 5.21.0 之后支持
    onFlipY: () => void;
    onFlipX: () => void;
    onRotateLeft: () => void;
    onRotateRight: () => void;
    onZoomOut: () => void;
    onZoomIn: () => void;
    onReset: () => void; // 5.17.3 之后支持
    onClose: () => void;
  };
  transform: TransformType,
  current: number;
  total: number;
  image: ImgInfo
}
```

----------------------------------------

TITLE: Defining a Structured Ref Interface in TypeScript (Ant Design Mobile Example)
DESCRIPTION: Defines a TypeScript interface `SampleRef`, used as an example from Ant Design Mobile, which standardizes component refs by providing both the `nativeElement` (DOM element) and common methods like `focus` and `blur`. This illustrates a convention for handling refs in composite components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.en-US.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
export interface SampleRef {
  nativeElement: HTMLElement;
  focus(): void;
  blur(): void;
}
```

----------------------------------------

TITLE: Hide CollapsePanel Arrow - JSX
DESCRIPTION: Demonstrates how to hide the default arrow icon in the Ant Design CollapsePanel component by setting the `showArrow` prop to `false`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/collapse/demo/noarrow.md#_snippet_0

LANGUAGE: jsx
CODE:
```
showArrow={false}
```

----------------------------------------

TITLE: 加载中
DESCRIPTION: Illustrates how to use the `loading` property to display a loading state within the Drawer.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
./demo/loading.tsx
```

----------------------------------------

TITLE: Implementing Custom Loading Indicator with Ant Design in React
DESCRIPTION: This code snippet demonstrates how to create a custom loading indicator using Ant Design's Spin component in a React application. It uses the Space component for layout and implements a custom indicator with an animated loading icon.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/demo/custom-indicator.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Spin, Space } from 'antd';
import { LoadingOutlined } from '@ant-design/icons';

const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;

const App: React.FC = () => (
  <Space size="middle">
    <Spin indicator={antIcon} />
  </Space>
);

export default App;
```

----------------------------------------

TITLE: Hiding Dropdown Arrow in Ant Design (English)
DESCRIPTION: This snippet explains in English how to use the 'arrow' property to hide the arrow in an Ant Design dropdown component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/arrow.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
## en-US

Hide arrow by `arrow`.
```

----------------------------------------

TITLE: Using Ant Design Icon with Custom Component Prop (JSX)
DESCRIPTION: Demonstrates using the `<Icon />` component from Ant Design with the `component` prop. This prop accepts a React component (represented here as `{...}`) which should render an `<svg>` element, allowing for the creation of reusable custom icons.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/demo/custom.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
<Icon component={...} />
```

----------------------------------------

TITLE: DatePicker Common API - variant
DESCRIPTION: 形态变体。`outlined` | `borderless` | `filled` 从 5.13.0 版本开始支持，`underlined` 从 5.24.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_37

LANGUAGE: typescript
CODE:
```
variant: 'outlined' | 'borderless' | 'filled' | 'underlined'
```

----------------------------------------

TITLE: Positioning Modal Dialogs in Ant Design
DESCRIPTION: This snippet demonstrates two methods for positioning modal dialogs in Ant Design: using the 'centered' prop for automatic centering, and using custom styles like 'style.top' for precise positioning.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/position.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## zh-CN

使用 `centered` 或类似 `style.top` 的样式来设置对话框位置。

## en-US

You can use `centered`,`style.top` or other styles to set position of modal dialog.
```

----------------------------------------

TITLE: Ant Design Table Column Configuration (React/TS)
DESCRIPTION: Defines the configuration object for a single column in the Ant Design Table component. It includes properties for data mapping, rendering, filtering, sorting, alignment, and styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.zh-CN.md#_snippet_1

LANGUAGE: typescript
CODE:
```
interface ColumnType<RecordType> {
  title?: React.ReactNode | ((props: { sortOrder?: SortOrder; sortColumn?: ColumnType<RecordType>; filters?: ColumnFilterItem[] }) => React.ReactNode);
  key?: React.Key;
  dataIndex?: string | string[];
  render?: (value: any, record: RecordType, index: number) => React.ReactNode;
  align?: 'left' | 'right' | 'center';
  className?: string;
  width?: string | number;
  fixed?: 'left' | 'right' | boolean;
  sorter?: CompareFn<RecordType> | boolean | { compare?: CompareFn<RecordType>; multiple?: number };
  filters?: ColumnFilterItem[];
  onFilter?: (value: string | number | boolean, record: RecordType) => boolean;
  // ... many other properties
}
```

----------------------------------------

TITLE: Disabling Link Interaction During Dragging with CSS
DESCRIPTION: This CSS rule targets anchor tags (`<a>`) within an element having the class `is-dragging`. It sets `pointer-events` to `none`, effectively disabling clicks and other pointer interactions on these links while the parent element is being dragged. This prevents unintended navigation or actions when sorting items via drag-and-drop, typically used when integrating libraries like `dnd-kit`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/demo/drag-sorting.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
```css
.is-dragging a {
  pointer-events: none;
}
```
```

----------------------------------------

TITLE: Implementing unstableSetRender for React 19 Compatibility with Ant Design
DESCRIPTION: This code demonstrates how to use the unstableSetRender method to make Ant Design v5 compatible with React 19. It's recommended for special scenarios like umd or micro-frontends when the compatibility package can't be used.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/v5-for-19.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: js
CODE:
```
import { unstableSetRender } from 'antd';
import { createRoot } from 'react-dom/client';

unstableSetRender((node, container) => {
  container._reactRoot ||= createRoot(container);
  const root = container._reactRoot;
  root.render(node);
  return async () => {
    await new Promise((resolve) => setTimeout(resolve, 0));
    root.unmount();
  };
});
```

----------------------------------------

TITLE: Updating Imports to Use Custom Moment Components
DESCRIPTION: This diff shows the changes needed in a consuming file (e.g., `src/App.tsx`) to switch from using the default Ant Design DatePicker/Calendar and Day.js to the custom Moment.js-based components created earlier. It involves changing the import paths and switching the date formatting library from `dayjs` to `moment`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_4

LANGUAGE: diff
CODE:
```
- import { DatePicker, Calendar } from 'antd';
- import format from 'dayjs';

+ import { DatePicker, TimePicker, Calendar } from './components';
+ import format from 'moment';
```

----------------------------------------

TITLE: Example package.json with Ant Design v4 and v5 Alias (JSON)
DESCRIPTION: Shows how the `dependencies` section of a `package.json` file looks after installing Ant Design v5 using the alias `antd-v5` via `npm install antd-v5@npm:antd@5`. It lists both `antd` (pointing to v4) and `antd-v5` (pointing to v5).
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_16

LANGUAGE: json
CODE:
```
{
  "antd": "4.x",
  "antd-v5": "npm:antd@5"
}
```

----------------------------------------

TITLE: Rendering Successful Result Component in Ant Design (JSX/TypeScript)
DESCRIPTION: This snippet demonstrates how to use the Result component from Ant Design to display a successful outcome. It includes examples in both Chinese and English, showcasing the component's internationalization capabilities.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/result/demo/success.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Result } from 'antd';

const SuccessResult = () => (
  <Result
    status="success"
    title="操作成功"
    subTitle="Your operation has been completed successfully."
  />
);

export default SuccessResult;
```

----------------------------------------

TITLE: Conditionally Using useInsertionEffect or useLayoutEffect (React)
DESCRIPTION: This snippet shows how to create a compatibility layer to use `useInsertionEffect` if available (React 18+) or fall back to `useLayoutEffect` for older React versions. This allows libraries to utilize the preferred timing of `useInsertionEffect` while remaining compatible with previous React releases, although this specific fallback was later found to have timing issues in React 17 for certain use cases.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.zh-CN.md#_snippet_5

LANGUAGE: tsx
CODE:
```
const useMergedInsertionEffect = useInsertionEffect || useLayoutEffect;

useMergedInsertionEffect(() => {
  // Same as above
}, [hash]);
```

----------------------------------------

TITLE: Attempting Conditional FormProvider Rendering in ConfigProvider (TSX)
DESCRIPTION: This snippet illustrates an unsuccessful attempt to optimize bundle size by conditionally rendering `FormProvider` only when `validateMessages` is provided. This approach fails because Tree Shaking is a static analysis process performed at compile time, and it cannot determine the runtime value of `validateMessages`. Therefore, the dependency on `FormProvider` remains regardless of the condition.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
// Sample only. Not real world code.
import { FormProvider } from 'rc-field-form';

const ConfigProvider = ({ validateMessages, children }) => {
  let node = children;

  if (validateMessages) {
    node = <FormProvider validateMessages={merge(...)}>{node}</FormProvider>;
  }

  return node;
};
```

----------------------------------------

TITLE: Overriding Default Overflow Style in Ant Design Watermark (TSX)
DESCRIPTION: This snippet illustrates how to override the default `overflow: hidden` style applied to the Ant Design `Watermark` component's container since version 5.18.0. By setting the `style` prop to `{ overflow: 'visible' }`, developers can modify the default behavior which was introduced to prevent users from hiding the watermark using browser developer tools. This requires React and the Ant Design library.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/watermark/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<Watermark style={{ overflow: 'visible' }} />
```

----------------------------------------

TITLE: Managing Style Reference Counting with useInsertionEffect (React Pseudocode)
DESCRIPTION: This pseudocode demonstrates an improved approach for managing CSS-in-JS style lifecycles using React 18's `useInsertionEffect`. It uses `useInsertionEffect` to increment the counter and conditionally insert styles, and its cleanup function is used to decrement the counter and conditionally remove styles. This hook's timing is better suited for style injection before rendering.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.zh-CN.md#_snippet_4

LANGUAGE: tsx
CODE:
```
// pseudocode. Not used in real world
useInsertionEffect(() => {
  if (!counter[hash]) {
    // Insert only when current style not inserted
  }
  counter[hash] += 1;

  return () => {
    counter[hash] -= 1;

    if (!counter[hash]) {
      // Remove if set to clear on destroy
    }
  };
}, [hash]);
```

----------------------------------------

TITLE: Defining RangeDisabledTime Type for Time Range Picker (TypeScript)
DESCRIPTION: This TypeScript code defines the 'RangeDisabledTime' function type, which is used in the Time Range Picker component to disable selectable times for either the start or end fields. The function receives a Dayjs instance and a string indicating which endpoint ('start' or 'end') it applies to, then returns callback functions to disable specific hours, minutes, and seconds. This allows for conditional temporal constraints based on the context of the range being selected. No external dependencies are required except TypeScript and Day.js typings.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/time-picker/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
type RangeDisabledTime = (\n  now: Dayjs,\n  type = 'start' | 'end',\n) => {\n  disabledHours?: () => number[];\n  disabledMinutes?: (selectedHour: number) => number[];\n  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];\n};
```

----------------------------------------

TITLE: Queuing DOM Creation in Nested Portals - React Portal Queue Context (TypeScript pseudocode)
DESCRIPTION: This code models queueing the append of DOM nodes for nested portals so that children are appended after parents. It uses React useState to maintain a queue, and useLayoutEffect to process and clear it. The queueCreate function adds a callback to the front of the queue, ensuring children are handled first. Inputs: void callback functions; Outputs: DOM nodes inserted in correct order. Works in nested modal/portal scenarios.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
// pseudocode\nconst [queue, setQueue] = useState<VoidFunction[]>([]);\n\nfunction queueCreate(appendFn: VoidFunction) {\n  setQueue((origin) => {\n    const newQueue = [appendFn, ...origin];\n    return newQueue;\n  });\n}\n\nuseLayoutEffect(() => {\n  if (queue.length) {\n    queue.forEach((appendFn) => appendFn());\n    setQueue([]);\n  }\n}, [queue]);
```

----------------------------------------

TITLE: Getting Single Prop Type using GetProp
DESCRIPTION: Demonstrates how to extract a specific prop type from an Ant Design component using the GetProp utility. This utility includes NonNullable handling and can work with both direct component references and prop interfaces.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/_util/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Select } from 'antd';
import type { GetProp, SelectProps } from 'antd';

// Both of these can work
type SelectOptionType1 = GetProp<SelectProps, 'options'>[number];
type SelectOptionType2 = GetProp<typeof Select, 'options'>[number];
```

----------------------------------------

TITLE: Composing Multiple Flex Features - Ant Design - TypeScript/TSX
DESCRIPTION: This snippet references "combination.tsx", which likely combines various Flex features such as alignment, gap, and wrapping to exhibit more advanced or real-world use cases. The demo shows how multiple Flex properties can be coordinated for complex layouts. React and Flex component are required. Inputs are combinations of documented flex-related props; output is a composed UI example.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/combination.tsx\">combination</code>
```

----------------------------------------

TITLE: Demonstrating Flex Alignment Variations - Ant Design - TypeScript/TSX
DESCRIPTION: This snippet references the "align.tsx" file, which provides examples for configuring alignment within the Flex component. It likely demonstrates usage of the "align" prop alongside justify-content and align-items concepts. Requires React, Ant Design Flex, and familiarity with CSS Flexbox properties. Main inputs include alignment properties; output is visually-aligned UI elements in the rendered Flex container.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/align.tsx\">align</code>
```

----------------------------------------

TITLE: TypeScript Configuration for Node Scripts (JSON)
DESCRIPTION: TypeScript configuration file (`tsconfig.node.json`) specifically tailored for compiling Node.js scripts, such as the one used for static style extraction. It sets compiler options like `module`, `jsx`, and `esModuleInterop` suitable for a Node environment.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "strictNullChecks": true,
    "module": "NodeNext",
    "jsx": "react",
    "esModuleInterop": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"]
}
```

----------------------------------------

TITLE: Applying Max Value Constraint to Ant Design InputNumber (Diff)
DESCRIPTION: This diff snippet shows how to add a maximum value constraint to the Ant Design `InputNumber` component within the previously defined form. The `max={99}` prop is added to limit the acceptable number input, relevant to a scenario where product prices cannot exceed $99.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_5

LANGUAGE: diff
CODE:
```
--  <InputNumber />
++  <InputNumber max={99} />
```

----------------------------------------

TITLE: Inverse Colorful Tag Demo in Ant Design (React, TSX)
DESCRIPTION: This snippet provides an example of rendering inverse colored tags using Ant Design. It depends on the Tag component from Ant Design and demonstrates setting colors with the inverse option for alternative contrast. It is mainly used in scenarios requiring enhanced visual distinction.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/colorful-inverse.tsx\" debug>Inverse Colorful Tag</code>
```

----------------------------------------

TITLE: Package Scripts for Static Style Export Integration (JSON)
DESCRIPTION: Excerpt from a `package.json` file showcasing how to integrate the static style generation script (`scripts/genAntdCss.tsx`) into the build and development workflows of a project. It uses `predev` and `prebuild` hooks to automatically run the script before starting development or production builds, executing it with `ts-node` and the specified TypeScript configuration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "predev": "ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx",
    "prebuild": "cross-env NODE_ENV=production ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx"
  }
}
```

----------------------------------------

TITLE: Configuring CSS Prefix for Aliased Ant Design v5 to Avoid Style Conflicts in React (TSX)
DESCRIPTION: Shows how to wrap the application part using Ant Design v5 (imported via alias as `antd-v5`) with its specific `ConfigProvider5`. Setting the `prefixCls` prop (e.g., to "ant5") prevents CSS style conflicts between v4 and v5 components rendering on the same page.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_18

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { ConfigProvider as ConfigProvider5 } from 'antd-v5';

export default () => (
  <ConfigProvider5 prefixCls="ant5">
    <MyApp />
  </ConfigProvider5>
);
```

----------------------------------------

TITLE: Installing Ant Design Compatibility Packages via npm (Bash)
DESCRIPTION: Commands to install the `@ant-design/compatible` package (for v4 components like Comment) and `@ant-design/pro-components` (for PageHeader) when migrating to Ant Design v5.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm install --save @ant-design/compatible@v5-compatible-v4
npm install --save @ant-design/pro-components
```

----------------------------------------

TITLE: DatePicker Common API - disabledDate
DESCRIPTION: 不可选择的日期。`info` 参数从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_9

LANGUAGE: typescript
CODE:
```
disabledDate: (currentDate: dayjs, info: { from?: dayjs, type: Picker }) => boolean
```

----------------------------------------

TITLE: Implementing CSS-based Line Ellipsis in TypeScript React
DESCRIPTION: Basic CSS implementation of text ellipsis using webkit-line-clamp property to limit text to specific number of lines.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<div
  style={{
    display: '-webkit-box',
    overflow: 'hidden',
    WebkitBoxOrient: 'vertical',
    webkitLineClamp: 3,
  }}
>
  {text}
</div>
```

----------------------------------------

TITLE: Implementing useRenderTimes Hook in TypeScript
DESCRIPTION: A custom React hook that tracks component render times and changed props during development. Uses useDebugValue for React Dev Tools visualization.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/render-times.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';

function useRenderTimes<T>(props: T) {
  // Render times
  const timesRef = React.useRef(0);
  timesRef.current += 1;

  // Cache for prev props
  const cacheProps = React.useRef(props);
  const changedPropKeys = getDiff(props, cacheProps.current); // Some compare logic

  React.useDebugValue(timesRef.current);
  React.useDebugValue(changedPropKeys);

  cacheProps.current = props;
}

export default process.env.NODE_ENV !== 'production' ? useRenderTimes : () => {};
```

----------------------------------------

TITLE: Setting Tab Position Prop
DESCRIPTION: Configures the position of the tab bar. Accepts 'left', 'right', 'top', or 'bottom'. Note that 'left' and 'right' automatically switch to 'top' on mobile devices.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tabs/demo/position.md#_snippet_0

LANGUAGE: jsx
CODE:
```
tabPosition="left|right|top|bottom"
```

----------------------------------------

TITLE: Configuring Space Size
DESCRIPTION: Demonstration of setting different sizes for the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
<code src="./demo/size.tsx">间距大小</code>
```

----------------------------------------

TITLE: Importing Ant Design React 19 Compatibility Package
DESCRIPTION: This code snippet shows how to import the compatibility package for Ant Design v5 to work with React 19. It should be added at the entry point of the application.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/v5-for-19.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import '@ant-design/v5-patch-for-react-19';
```

----------------------------------------

TITLE: Dynamic Count
DESCRIPTION: Demonstrates how to dynamically change the count displayed in the Badge. Code referenced from ./demo/change.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
./demo/change.tsx
```

----------------------------------------

TITLE: Initializing Vite Project and Installing Dependencies
DESCRIPTION: Commands to create a new Vite project named 'antd-demo', navigate into the project directory, install dependencies, and start the development server.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.en-US.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ cd antd-demo
$ npm install
$ npm run dev
```

----------------------------------------

TITLE: Animating Tag Appearance in Ant Design (React, TSX)
DESCRIPTION: This snippet demonstrates adding animation to Tag component presentation in a React application using Ant Design. It showcases animated transitions during tag entry, exit, or when properties change. This enhances user experience in dynamic interfaces. Relies on Tag and potentially animation libraries or built-in CSS transitions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/animation.tsx\">Animate</code>
```

----------------------------------------

TITLE: Implementing Consistent Refs with useImperativeHandle and Proxy in React/Ant Design
DESCRIPTION: Demonstrates using the `useImperativeHandle` React hook combined with a JavaScript `Proxy` to expose a customized ref from a component. This pattern allows adding methods (like `focus`, `blur`) or intercepting property access while maintaining compatibility with accessing the underlying DOM node (`divRef.current`), addressing `ref` inconsistencies in composite components like Table.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
useImperativeHandle(
  ref,
  () =>
    new Proxy(divRef.current, {
      get(target, key) {
        // ...
      },
    }),
);
```

----------------------------------------

TITLE: Adding Splits Between Elements in Space
DESCRIPTION: This example demonstrates how to add split elements between child components in the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
<code src="./demo/split.tsx">Split</code>
```

----------------------------------------

TITLE: Initializing and Starting a Farm Project (Bash)
DESCRIPTION: Commands to navigate into the newly created Farm project directory, install project dependencies using npm, and start the development server. This assumes a project named 'farm-project' has been created using 'npm create farm@latest' (or yarn/pnpm/bun equivalents) and the React template was selected.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-farm.en-US.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ cd farm-project
$ npm install
$ npm start
```

----------------------------------------

TITLE: Using getValueFromEvent for Aggregate Field Update (TSX)
DESCRIPTION: Illustrates the conceptual use of `getValueFromEvent` within a `Form.Item`. This function receives the aggregated value array (`values`) from the child component's change event. It then uses `form.setFields` to update the corresponding individual fields in the FormStore based on the `names` array. It returns the first value (`values[0]`) as the value for the primary `name` associated with the `Form.Item`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
getValueFromEvent={(values) => {
    form.setFields(names.map((name, index) => ({ name, value: values[index] })));
    return values[0];
}}
```

----------------------------------------

TITLE: Linking Dynamically Generated Hashed CSS File in HTML
DESCRIPTION: Shows the final step for the 'Part Static Extract Style' method. The dynamically generated, hashed CSS filename (calculated in the previous TypeScript snippet and available as `hashCssFileUrl`) is included in the HTML `<head>` using a standard `<link rel="stylesheet">` tag. This instructs the browser to load the specific CSS file corresponding to the rendered page content (`html`), allowing the browser to cache this file based on its unique hashed name.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_7

LANGUAGE: html
CODE:
```
<!doctype html>
<html>
  <head>
    <link rel="stylesheet" href="${hashCssFileUrl}" />
  </head>
  <body>
    <div id="root">${html}</div>
  </body>
</html>
```

----------------------------------------

TITLE: DatePicker API - showTime
DESCRIPTION: 增加时间选择功能。可以是一个布尔值或 TimePicker Options 对象。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_50

LANGUAGE: typescript
CODE:
```
showTime: Object | boolean
```

----------------------------------------

TITLE: 自定义内部样式
DESCRIPTION: Explains how to use the `classNames` prop to apply custom CSS classes to specific semantic parts of the Drawer structure.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_9

LANGUAGE: TypeScript
CODE:
```
./demo/classNames.tsx
```

----------------------------------------

TITLE: Configuring Global Wave Effect with ConfigProvider in Ant Design (TypeScript/React)
DESCRIPTION: This snippet demonstrates how to configure the global click wave effect for all child components in an Ant Design application by supplying a custom 'showEffect' function to the 'wave' property of the ConfigProvider. The 'showEffect' callback is invoked with the target DOM node, component type, and theme token, which enables context-aware custom animation. Prerequisites: ConfigProvider from Ant Design v5 or later. Inputs include the React child tree and a custom effect function; output is the themed component tree with custom wave effects.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/happy-work.en-US.md#2025-04-23_snippet_2

LANGUAGE: TSX
CODE:
```
<ConfigProvider wave={{ showEffect }}>
  <Button />
</ConfigProvider>
```

----------------------------------------

TITLE: Borderless Tag Layout Demo in Ant Design (React, TSX)
DESCRIPTION: This snippet extends the borderless Tag usage by incorporating it within various layouts for more advanced UI arrangement. It requires Ant Design's Tag with 'bordered' prop turned off, and demonstrates its interaction or arrangement with other components or layouts.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_9

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/borderlessLayout.tsx\" debug>borderless in layout</code>
```

----------------------------------------

TITLE: Bug Fix Implementation
DESCRIPTION: Solution implementation using appendedRef to control queue creation behavior for enabled Modals.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
// pseudocode
const appendedRef = useRef(false);

const queueCreate = !appendedRef.current
  ? (appendFn: VoidFunction) => {
      // same code
    }
  : undefined;

function append() {
  // This is not real world code, just for explain
  document.body.appendChild(document.createElement('div'));
  appendedRef.current = true;
}

// ...

return <PortalContext value={queueCreate}>{children}</PortalContext>;
```

----------------------------------------

TITLE: Disabling Ant Design Form Label Focus Behavior (Diff/JSX)
DESCRIPTION: Illustrates how to disable the default behavior where clicking a `Form.Item` label focuses the associated form control. This is achieved by setting the `htmlFor` prop to `null` on the `Form.Item`. Note that disabling this behavior is generally not recommended for accessibility.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_21

LANGUAGE: diff
CODE:
```
diff
- <Form.Item name="switch" label="Switch">
+ <Form.Item name="switch" label="Switch" htmlFor={null}>
    <Switch />
  </Form.Item>
```

----------------------------------------

TITLE: Demonstrating Redundant Inline Style Injection in HTML
DESCRIPTION: Illustrates a major drawback of simple inline style injection where the same component styles (e.g., for Button) are repeated for each instance of the component. This leads to significant HTML bloat, especially when many components are used, making the approach impractical for larger applications.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
<div>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World 1</button>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World 2</button>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World 3</button>
</div>
```

----------------------------------------

TITLE: DatePicker Common Method - blur
DESCRIPTION: 移除焦点。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_40

LANGUAGE: typescript
CODE:
```
blur(): void
```

----------------------------------------

TITLE: Updating Imports for Relocated PageHeader and Comment Components in React (JSX)
DESCRIPTION: Shows how to update import statements for `PageHeader` and `Comment` components, which were moved from the core `antd` package to `@ant-design/pro-components` and `@ant-design/compatible` respectively in v5.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: diff
CODE:
```
- import { PageHeader, Comment } from 'antd';
+ import { Comment } from '@ant-design/compatible';
+ import { PageHeader } from '@ant-design/pro-components';
  // 如果是蚂蚁内网用户建议从 @alipay/tech-ui 引入
  // import { PageHeader } from '@alipay/tech-ui';

  const App: React.FC = () => (
    <>
      <PageHeader />
      <Comment />
    </>
  );

  export default App;
```

----------------------------------------

TITLE: Calendar Week Number Configuration - Ant Design
DESCRIPTION: Shows how to enable week number display in a fullscreen calendar by setting the showWeek prop to true. This configuration adds an additional column showing the week number for each row in the calendar.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/calendar/demo/week.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## zh-CN

通过将 `showWeek` 属性设置为 `true`，在全屏日历中显示周数。

## en-US

Show week number in fullscreen calendar by setting `showWeek` prop to `true`.
```

----------------------------------------

TITLE: DatePicker Common API - suffixIcon
DESCRIPTION: 自定义的选择框后缀图标。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_34

LANGUAGE: typescript
CODE:
```
suffixIcon: ReactNode
```

----------------------------------------

TITLE: Deriving Property Type with GetProp Utility - TypeScript
DESCRIPTION: Shows how to use Ant Design's GetProp utility type to extract the type of a specific property (like 'options') from either component props or a component itself. The example demonstrates two ways to derive the property type for a Select component's options, both using GetProp and array indexing. Dependencies are Ant Design's GetProp, Select, and SelectProps. Outputs the type of a single option; inputs are either the full props type or the component reference.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.en-US.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import type { GetProp, Select, SelectProps } from 'antd';

// Both of this can work
type SelectOptionType1 = GetProp<SelectProps, 'options'>[number];
type SelectOptionType2 = GetProp<typeof Select, 'options'>[number];
```

----------------------------------------

TITLE: Styling Custom Class Applied by ConfigProvider - CSS/Less
DESCRIPTION: Provides a simple CSS/Less rule targeting the custom class `.my-button` that was applied to a button component via `ConfigProvider`. This illustrates how external CSS can be used to style components based on the custom classes provided through the configuration context, in this case, changing the background color.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.zh-CN.md#_snippet_1

LANGUAGE: less
CODE:
```
.my-button {
  background: red;
}
```

----------------------------------------

TITLE: Handling Image Load Errors - Ant Design Watermark - TypeScript JSX
DESCRIPTION: Demonstrates how to provide a fallback text `content` when an image `image` is specified for the watermark. This ensures the watermark is still displayed even if the image fails to load, a feature supported since version 5.2.3. It shows basic usage with height, width, content, and image props wrapping a dummy div.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/watermark/index.zh-CN.md#_snippet_0

LANGUAGE: typescript jsx
CODE:
```
<Watermark
  height={30}
  width={130}
  content="Ant Design"
  image="https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*lkAoRbywo0oAAAAAAAAAAAAADrJ8AQ/original"
>
  <div style={{ height: 500 }} />
</Watermark>
```

----------------------------------------

TITLE: Implementing Draggable Tag in Ant Design (React, TSX)
DESCRIPTION: This snippet adds drag-and-drop capabilities to Tag components using Ant Design in React. It integrates drag event handlers or leverages a compatible drag-and-drop library. This enhances interactivity by enabling users to reorder or move tags in the UI.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_11

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/draggable.tsx\">Draggable Tag</code>
```

----------------------------------------

TITLE: Applying Custom Styles using ClassNames (Less)
DESCRIPTION: This Less snippet shows how to define styles for a custom class name (`.my-button`) that was previously applied to an Ant Design Button component using ConfigProvider. It targets the button with the custom class and sets its background color.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.en-US.md#2025-04-23_snippet_1

LANGUAGE: less
CODE:
```
.my-button {
  background: red;
}
```

----------------------------------------

TITLE: Illustrating Custom Component Usage for Visual Cues (TSX)
DESCRIPTION: This snippet repeats the usage of the `MyStr` component with `value="Hello World"` and `maxLen={5}`. In this context, it serves as an example where, instead of truncating the value, a developer might add visual cues like a Tooltip to indicate the value exceeds the intended display length, adhering to the "To be what you see" principle.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
// Same demo we've seen before
<MyStr value="Hello World" maxLen={5}>
```

----------------------------------------

TITLE: Nesting Space Compact Components
DESCRIPTION: This code snippet shows how to nest Space Compact components for more complex layouts.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_10

LANGUAGE: tsx
CODE:
```
<code src="./demo/compact-nested.tsx" debug>Nested Space Compact</code>
```

----------------------------------------

TITLE: Enabling CSS Variables with ConfigProvider in React 17 or 16
DESCRIPTION: Shows how to enable CSS variable mode in React 17 or 16 applications, requiring a manual key setting for theme isolation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/css-variables.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<ConfigProvider theme={{ cssVar: { key: 'app' } }}>
  <App />
</ConfigProvider>
```

----------------------------------------

TITLE: 多层抽屉
DESCRIPTION: Demonstrates opening multiple Drawers on top of each other.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
./demo/multi-level-drawer.tsx
```

----------------------------------------

TITLE: Implementing Flex Gap Style in Space
DESCRIPTION: This code shows how to use flex gap styling within the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_12

LANGUAGE: tsx
CODE:
```
<code src="./demo/gap-in-line.tsx" debug>Flex gap style</code>
```

----------------------------------------

TITLE: Generating Moment.js Calendar Ant Design TSX
DESCRIPTION: Similar to the DatePicker, this snippet demonstrates creating a custom Ant Design Calendar component configured to use Moment.js. It imports the Calendar component and the Moment.js configuration generator, then applies the configuration using `Calendar.generateCalendar`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Calendar } from 'antd';
import type { Moment } from 'moment';
import momentGenerateConfig from 'rc-picker/es/generate/moment';

const MyCalendar = Calendar.generateCalendar<Moment>(momentGenerateConfig);

export default MyCalendar;
```

----------------------------------------

TITLE: Configuring Vite Build for Multiple Formats - Javascript
DESCRIPTION: This snippet shows the Vite build configuration used in the `antd-mobile` project's build process. It specifies the build mode, log level, global definitions, CSS target, library formats (`es`, `cjs`, `umd`), Rollup output options, and minification settings. This configuration object is passed to the `vite.build` function.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.zh-CN.md#_snippet_0

LANGUAGE: Javascript
CODE:
```
{
    root: process.cwd(),
    mode: env,
    logLevel: 'silent',
    define: { 'process.env.NODE_ENV': `"${env}"` },
    build: {
      cssTarget: 'chrome61',
      lib: {
        formats,
        ...
      },
      rollupOptions: {
       output: {
          dir: './lib/bundle',
          globals: {
            'react': 'React',
            'react-dom': 'ReactDOM',
          },
        },
      },
      minify: isProd ? 'esbuild' : false,
    },
  }
```

----------------------------------------

TITLE: DatePicker Common API - cellRender
DESCRIPTION: 自定义单元格的内容。从 5.4.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_5

LANGUAGE: typescript
CODE:
```
cellRender: (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode
```

----------------------------------------

TITLE: 预设宽度
DESCRIPTION: Shows how to use the `size` prop ('default' or 'large') to set standard widths or heights.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
./demo/size.tsx
```

----------------------------------------

TITLE: Configuring Vertical Compact Mode
DESCRIPTION: This code demonstrates how to use the vertical compact mode in the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_8

LANGUAGE: tsx
CODE:
```
<code src="./demo/compact-button-vertical.tsx">Vertical Compact Mode</code>
```

----------------------------------------

TITLE: Styling Calendar Events and Month Notes with CSS
DESCRIPTION: Provides CSS rules to style event lists and month notes, typically within a custom Ant Design Calendar. It resets list styles for `.events`, styles `ant-badge-status` elements within events for proper text display and overflow handling, and sets font sizes and alignment for `.notes-month` elements used for displaying month-specific content.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/calendar/demo/notice-calendar.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.events {
  margin: 0;
  padding: 0;
  list-style: none;
}
.events .ant-badge-status {
  width: 100%;
  overflow: hidden;
  font-size: 12px;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.notes-month {
  font-size: 28px;
  text-align: center;
}
.notes-month section {
  font-size: 28px;
}
```

----------------------------------------

TITLE: Creating Moment.js TimePicker Ant Design TSX
DESCRIPTION: This code defines a custom TimePicker component that wraps the Moment.js-based DatePicker created earlier. It uses React.forwardRef to pass refs and sets the `picker` prop to 'time' to configure the DatePicker behavior.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import * as React from 'react';
import type { PickerTimeProps } from 'antd/es/date-picker/generatePicker';
import type { Moment } from 'moment';

import DatePicker from './DatePicker';

export interface TimePickerProps extends Omit<PickerTimeProps<Moment>, 'picker'> {}

const TimePicker = React.forwardRef<any, TimePickerProps>((props, ref) => (
  <DatePicker {...props} picker="time" mode={undefined} ref={ref} />
));

TimePicker.displayName = 'TimePicker';

export default TimePicker;
```

----------------------------------------

TITLE: Illustrating Potential prefixCls Issue in Nested Styles (Less)
DESCRIPTION: This Less snippet highlights a potential issue when styling nested elements within a component that has a custom class applied via ConfigProvider. If Ant Design's global `prefixCls` is changed (e.g., from 'ant-' to 'abc-'), targeting nested elements using the default prefix (like `.ant-btn-icon`) within the custom class scope (`.my-button`) will fail.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.en-US.md#2025-04-23_snippet_2

LANGUAGE: less
CODE:
```
.my-button {
  // OPS. It's `abc-btn-icon` now.
  .ant-btn-icon {
    background: red;
  }
}
```

----------------------------------------

TITLE: Applying Ant Design v4 Theme using Compatibility Package in React (JSX)
DESCRIPTION: Example demonstrating how to use the `ConfigProvider` from `antd` along with theme objects (`defaultTheme`, `darkTheme`) imported from `@ant-design/compatible`. This allows applying the visual styles of Ant Design v4 to v5 components for a consistent look during migration. Requires `@ant-design/compatible` dependency.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_14

LANGUAGE: jsx
CODE:
```
const sandpackConfig = {
  dependencies: {
    '@ant-design/compatible': 'v5-compatible-v4',
  },
};

import {
  defaultTheme,   // 默认主题
  darkTheme,      // 暗色主题
} from '@ant-design/compatible';
import { ConfigProvider, Button, Radio, Space } from 'antd';

export default () => (
  <ConfigProvider theme={defaultTheme}>
    <Space direction="vertical">
      <Button type="primary">Button</Button>
      <Radio.Group>
        <Radio value={1}>A</Radio>
        <Radio value={2}>B</Radio>
        <Radio value={3}>C</Radio>
        <Radio value={4}>D</Radio>
      </Radio.Group>
    </Space>
  </ConfigProvider>
);
```

----------------------------------------

TITLE: Installing Ant Design Colors Package
DESCRIPTION: This snippet shows how to install the @ant-design/colors package using npm. This package provides programmatic access to Ant Design's color palettes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/colors.en-US.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install @ant-design/colors
```

----------------------------------------

TITLE: Basic Usage with routes (Alternative)
DESCRIPTION: An alternative way to provide route information to the Breadcrumb component using the `routes` prop, where each route object has a `breadcrumbName`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.zh-CN.md#_snippet_2

LANGUAGE: jsx
CODE:
```
return <Breadcrumb routes={[{ breadcrumbName: 'sample' }]} />;
```

----------------------------------------

TITLE: DatePicker Common API - needConfirm
DESCRIPTION: 是否需要确认按钮，为 `false` 时失去焦点即代表选择。当设置 `multiple` 时默认为 `false`。从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_20

LANGUAGE: typescript
CODE:
```
needConfirm: boolean
```

----------------------------------------

TITLE: useBreakpoint Hook Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file demonstrating the usage of the 'useBreakpoint' hook provided by Ant Design to conditionally render or apply styles based on the current screen breakpoint. The actual code implementing this example resides in the './demo/useBreakpoint.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_12

LANGUAGE: html
CODE:
```
<code src="./demo/useBreakpoint.tsx">useBreakpoint Hook</code>
```

----------------------------------------

TITLE: Providing Fallback Text for Image Watermark in Ant Design (TypeScript JSX)
DESCRIPTION: This snippet demonstrates configuring an Ant Design `Watermark` component with both an `image` URL and fallback text `content`. If the specified image fails to load, the text "Ant Design" is displayed as the watermark, ensuring a watermark is always present even with image loading issues. This requires React and the Ant Design library (version 5.2.3+ for this specific fallback behavior).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/watermark/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: typescript jsx
CODE:
```
<Watermark
  height={30}
  width={130}
  content="Ant Design"
  image="https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*lkAoRbywo0oAAAAAAAAAAAAADrJ8AQ/original"
>
  <div style={{ height: 500 }} />
</Watermark>
```

----------------------------------------

TITLE: Virtual List Extra Render Implementation
DESCRIPTION: Implementation of extraRender function for handling row spans in virtual scrolling context, managing visible range calculations.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/virtual-table.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
const extraRender = ({ start, end }) => {
  const startRecord = flattenData[start];
  columns.forEach((col) => {
    const { rowSpan } = col.onCell(startRecord, start);
  });

  const endRecord = flattenData[end];
  columns.forEach((col) => {
    const { rowSpan } = col.onCell(endRecord, end);
  });
};
```

----------------------------------------

TITLE: Demonstrating Badge showZero Property in React
DESCRIPTION: This example shows how to use the Badge component from Ant Design with zero count values. It demonstrates the default behavior where badges are hidden when count is 0, and how to override this using the showZero property to display badges even with a zero count.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/demo/basic.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
import { Badge, Space, Switch } from 'antd';
import { useState } from 'react';

const App: React.FC = () => {
  const [show, setShow] = useState(true);

  return (
    <Space>
      <Switch
        checked={show}
        onChange={() => {
          setShow(!show);
        }}
      />
      <Badge count={show ? 11 : 0} />
      <Badge count={show ? 109 : 0} style={{ backgroundColor: '#52c41a' }} />
      <Badge count={show ? 11 : 0} showZero />
    </Space>
  );
};

export default App;
```

----------------------------------------

TITLE: Demonstrating useLayoutEffect Timing Conflict with Style Injection (React)
DESCRIPTION: This snippet highlights a potential timing issue when using `useLayoutEffect` for both DOM measurement (e.g., getting element dimensions) and injecting styles. It shows that a `useLayoutEffect` intended to read DOM properties might execute *before* another `useLayoutEffect` responsible for applying styles, leading to incorrect measurement results because the necessary styles haven't taken effect yet.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.zh-CN.md#_snippet_6

LANGUAGE: tsx
CODE:
```
// Some logic measure DOM size
useLayoutEffect(() => {
  // This is not correct since style is not applied
  const { clientHeight } = nodeRef.current;
}, []);

// Inject style
useLayoutEffect(() => {
  // ...
}, [hash]);
```

----------------------------------------

TITLE: Exporting Custom Date Components in TypeScript
DESCRIPTION: This index file (`src/components/index.tsx`) exports the previously created custom Calendar, DatePicker, and TimePicker components, making them easily importable from a single module.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
export { default as Calendar } from './Calendar';
export { default as DatePicker } from './DatePicker';
export { default as TimePicker } from './TimePicker';
```

----------------------------------------

TITLE: Well-Formatted React Component Example
DESCRIPTION: Example showing properly formatted React/TypeScript code with correct imports, typing, and component structure.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Menu } from 'antd';

const Demo: React.FC = () => {
  const [collapsed, setCollapsed] = useState<boolean>(false);

  const toggle = () => setCollapsed(!collapsed);

  return <Menu>...</Menu>;
};

export default Demo;
```

----------------------------------------

TITLE: TypeScript Configuration for Strict Null Checks
DESCRIPTION: JSON configuration snippet showing the TypeScript compiler option for strict null checks, which can affect how null values are handled in forms.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "strictNullChecks": true
}
```

----------------------------------------

TITLE: Exporting Custom Moment.js Components TSX
DESCRIPTION: This index file provides a centralized export for the custom Ant Design components (Calendar, DatePicker, TimePicker) that have been configured to use Moment.js. Importing from this file simplifies usage elsewhere in the project.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.zh-CN.md#_snippet_3

LANGUAGE: tsx
CODE:
```
export { default as Calendar } from './Calendar';
export { default as DatePicker } from './DatePicker';
export { default as TimePicker } from './TimePicker';
```

----------------------------------------

TITLE: Adjusting Select List Item and Container Height in Ant Design (TypeScript/TSX)
DESCRIPTION: This TypeScript/TSX example shows how to tweak the internal listItemHeight and listHeight props to ensure the Select component's virtual scroll works correctly with custom rendered Option heights. This should only be used if the default 24px item height is not appropriate for your custom options and you need a different height (here 10px per item and a 250px list container). Dependencies are React and Ant Design; use only when customizing option heights, to avoid inconsistent scroll or rendering behavior.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: TSX
CODE:
```
```tsx\n<Select listItemHeight={10} listHeight={250} />\n```
```

----------------------------------------

TITLE: Describing Animation Principles using Ant Design Components in React (JSX)
DESCRIPTION: This React component illustrates three core animation principles (Natural, Performant, Concise) by mapping descriptive objects into Ant Design's Row and Col layout components. It demonstrates rendering structured content with images and text, using arrays and .map(). Dependencies include React, Ant Design's Row and Col components, and relevant CSS classes (e.g., 'principle'). Input consists of a 'text' array containing principle objects; output is a grid-styled visual summary of animation guidelines. The component is typically used in documentation sites or design guideline pages to exemplify interactive UI best practices.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/motion.en-US.md#2025-04-23_snippet_0

LANGUAGE: jsx
CODE:
```
/**
 * inline: true
 */

import { Col, Row } from 'antd';

const text = [
  {
    title: 'Natural',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/LyTPSGknLUlxiVdwMWyu.gif',
    content:
      'The animation should based on law of nature. This assures the animation is smooth by its nature and intuitive to its users.',
  },
  {
    title: 'Performant',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/SQOZVQVIossbXpzDmihu.gif',
    content:
      'The animation should have a transition time as minimal as possible so that it serves its purpose in the most effective way.',
  },
  {
    title: 'Concise',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/OkIXkscKxywYLSrilPIf.gif',
    content:
      'The animation should be meaningful and justified. An over fancy animation will frustrate its users, and therefore should always be avoided.',
  },
];

function Principle() {
  const childrenToRender = text.map((item) => (
    <Col key={item.title} sm={24} md={8}>
      <div className="principle">
        <div>
          <img src={item.img} width="80%" />
        </div>
        <h4>{item.title}</h4>
        <p>{item.content}</p>
      </div>
    </Col>
  ));
  return (
    <div className="motion-principle-wrapper">
      <Row gutter={{ md: 32, sm: 0 }} className="principle-wrapper">
        {childrenToRender}
      </Row>
    </div>
  );
}

export default Principle;
```

----------------------------------------

TITLE: Testing Deprecated Component Warnings with Jest and React Testing Library
DESCRIPTION: This Jest test case demonstrates how to verify that a deprecated Ant Design component (`BackTop`) logs a specific warning to the console when rendered. It uses `jest.spyOn` to intercept console errors, renders the component with React Testing Library, and asserts the warning message.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_3

LANGUAGE: javascript
CODE:
```
it('should console Error', () => {
        const errSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
        render(<BackTop />);
        expect(errSpy).toHaveBeenCalledWith(
          'Warning: [antd: BackTop] `BackTop` is deprecated. Please use `FloatButton.BackTop` instead.',
        );
      errSpy.mockRestore();
    });
```

----------------------------------------

TITLE: Generating Hashed CSS Files for Part Static Extraction in TSX
DESCRIPTION: Implements the 'Part Static Extract Style' approach where styles collected during SSR are hashed and saved to a file. It uses Node.js `crypto` to generate an MD5 hash of the extracted CSS (`styleText`) and `fs` to write the CSS to a uniquely named file (`css-<hash>.css`) if it doesn't already exist, enabling browser caching.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
import { createHash } from 'crypto';

// Get Style content like above
const styleText = extractStyle(cache);

const hash = createHash('md5').update(styleText).digest('hex');
const cssFileName = `css-${hash.substring(0, 8)}.css`;

if (!fs.existsSync(cssFileName)) {
  fs.writeFileSync(cssFileName, styleText);
}
```

----------------------------------------

TITLE: Implementing Products Page with React Query
DESCRIPTION: React component for the products page, using react-query for data fetching and mutation, and integrating the ProductList component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_9

LANGUAGE: tsx
CODE:
```
import React from 'react';
import axios from 'axios';
import { useMutation, useQuery, useQueryClient } from 'umi';

import styles from './products.less';
import ProductList from '@/components/ProductList';

export default function Page() {
  const queryClient = useQueryClient();
  const productsQuery = useQuery(['products'], {
    queryFn() {
      return axios.get('/api/products').then((res) => res.data);
    },
  });
  const productsDeleteMutation = useMutation({
    mutationFn(id: string) {
      return axios.delete(`/api/products/${id}`);
    },
    onSettled: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
    },
  });
  if (productsQuery.isLoading) return null;
  return (
    <div>
      <h1 className={styles.title}>Page products</h1>
      <ProductList
        products={productsQuery.data.data}
        onDelete={(id) => {
          productsDeleteMutation.mutate(id);
        }}
      />
    </div>
  );
}
```

----------------------------------------

TITLE: Importing Popover Hover with Click Example in React
DESCRIPTION: Imports an example demonstrating a Popover that combines hover and click interactions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
<code src="./demo/hover-with-click.tsx">Hover with click popover</code>
```

----------------------------------------

TITLE: Listening for Anchor Link Changes in React
DESCRIPTION: Demo import for an example showing how to listen for anchor link changes using the onChange handler.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_6

LANGUAGE: tsx
CODE:
```
<code src="./demo/onChange.tsx">Listening for anchor link change</code>
```

----------------------------------------

TITLE: Documenting Spin Component Usage in Chinese
DESCRIPTION: This snippet explains in Chinese how to embed content directly into the Spin component to transform an existing container into a loading state.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/demo/nested.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

可以直接把内容内嵌到 `Spin` 中，将现有容器变为加载状态。
```

----------------------------------------

TITLE: 渲染在当前 DOM
DESCRIPTION: Shows how to render the Drawer within a specific DOM node instead of the body.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
./demo/render-in-current.tsx
```

----------------------------------------

TITLE: Configuring Radio Options in Ant Design (English)
DESCRIPTION: This snippet explains in English how to render radio buttons by configuring the 'options' parameter and set the radio type using the 'optionType' parameter in Ant Design.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/radio/demo/radiogroup-options.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
## en-US

Render radios by configuring `options`. Radio type can also be set through the `optionType` parameter.
```

----------------------------------------

TITLE: Referencing InputNumber Formatter Example (TSX)
DESCRIPTION: References `./demo/formatter.tsx`, showing how to format the displayed value in the Ant Design InputNumber component using the `formatter` prop in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: markdown
CODE:
```
<code src="./demo/formatter.tsx">Formatter</code>
```

----------------------------------------

TITLE: Rendering Basic Tag Component in Ant Design (React, TSX)
DESCRIPTION: This snippet renders a basic Tag component using Ant Design in a React (TSX) environment. It requires importing the Tag component from the Ant Design library. The basic usage demonstrates simply displaying a tag with default styling. No props are required, and the Tag will display its child text as content. No dependencies beyond Ant Design are required.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/basic.tsx\">Basic</code>
```

----------------------------------------

TITLE: Defining Option Interface - TypeScript
DESCRIPTION: This code defines the Option interface, which represents the structure of selectable choices within a Checkbox Group in Ant Design. Implementers must ensure the presence of a string label and value, with an optional boolean disabled flag. It is crucial for strongly typing props, customizing option rendering, and enabling type-safe handling of group checkbox data. This interface has no dependencies but is used as a prop type in Checkbox Groups; inputs are static objects adhering to this structure.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/checkbox/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
interface Option {
  label: string;
  value: string;
  disabled?: boolean;
}
```

----------------------------------------

TITLE: Rendering Borderless Tag in Ant Design (React, TSX)
DESCRIPTION: This snippet shows how to use the Tag component without borders, enhancing visual subtlety. It demonstrates setting the 'bordered' prop to false in Ant Design's Tag component. Useful for low-key labeling or Apple-style tags.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_8

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/borderless.tsx\">borderless</code>
```

----------------------------------------

TITLE: DatePicker Common API - prefix
DESCRIPTION: 自定义前缀。从 5.22.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_28

LANGUAGE: typescript
CODE:
```
prefix: ReactNode
```

----------------------------------------

TITLE: Demonstrating Semantic DOM for Popconfirm in TypeScript
DESCRIPTION: This code snippet shows how to implement semantic DOM structure for the Popconfirm component, which is important for accessibility and proper rendering.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popconfirm/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: TypeScript
CODE:
```
<code src="./demo/_semantic.tsx" simplify="true"></code>
```

----------------------------------------

TITLE: Updating Jest Snapshots (npm)
DESCRIPTION: Shows the command to run unit tests and update Jest snapshots. This is necessary when intentional changes are made to components or demos that cause snapshot differences. Running this command updates the stored snapshot files to match the new output, resolving snapshot test failures in CI.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/contributor-development-maintenance-guide.en-US.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm run test -u
```

----------------------------------------

TITLE: Aligning Elements with Space Component
DESCRIPTION: Example showing how to align elements using the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
<code src="./demo/align.tsx">对齐</code>
```

----------------------------------------

TITLE: DatePicker Common API - mode
DESCRIPTION: 日期面板的状态。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_19

LANGUAGE: typescript
CODE:
```
mode: 'time' | 'date' | 'month' | 'year' | 'decade'
```

----------------------------------------

TITLE: Decoupling Dependencies: ConfigProvider Using Proxy Context in TSX
DESCRIPTION: This snippet presents the solution to the Tree Shaking problem. Instead of directly using `FormProvider` from `rc-field-form`, the `ConfigProvider` now uses a dedicated proxy context (`ValidateMessageContext`) to pass down the merged validation messages. This removes the direct dependency on `FormProvider` within `ConfigProvider`, allowing `rc-field-form` to be tree-shaken if not used elsewhere.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// Sample only. Not real world code.
import { ValidateMessageContext } from '../form/context.ts';

const ConfigProvider = ({ validateMessages, children }) => {
  const mergedValidateMessages = ...

  return (
    // Just use the proxy context
    <ValidateMessageContext value={mergedValidateMessages}>
      <SomeOtherProvider>{children}</SomeOtherProvider>
    </ValidateMessageContext>
  );
};
```

----------------------------------------

TITLE: Generating Themed Ant Design CSS File using static-style-extract
DESCRIPTION: Demonstrates an enhanced script using `@ant-design/static-style-extract` and Ant Design's `ConfigProvider` to generate a CSS file that includes styles for multiple custom themes or theme variations. It wraps the extraction process with `ConfigProvider` instances configured with different theme tokens (e.g., `colorBgBase`, `colorPrimary`) and writes the combined CSS to the output path.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
import fs from 'fs';
import React from 'react';
import { extractStyle } from '@ant-design/static-style-extract';
import { ConfigProvider } from 'antd';

const outputPath = './public/antd.min.css';

const testGreenColor = '#008000';
const testRedColor = '#ff0000';

const css = extractStyle((node) => (
  <>
    <ConfigProvider
      theme={{
        token: {
          colorBgBase: testGreenColor,
        },
      }}
    >
      {node}
    </ConfigProvider>
    <ConfigProvider
      theme={{
        token: {
          colorPrimary: testGreenColor,
        },
      }}
    >
      <ConfigProvider
        theme={{
          token: {
            colorBgBase: testRedColor,
          },
        }}
      >
        {node}
      </ConfigProvider>
    </ConfigProvider>
  </>
));

fs.writeFileSync(outputPath, css);
```

----------------------------------------

TITLE: Integrating HappyProvider from Ant Design Happy Work Theme in TypeScript/React
DESCRIPTION: This snippet demonstrates how to wrap your React application (or individual components) with the HappyProvider component from the @ant-design/happy-work-theme package. The provider applies the happy work theme to all nested Ant Design components, altering their appearance and interaction according to the theme's design. Required dependency: @ant-design/happy-work-theme. Expected input is your component tree as children; output is the themed application. Ensure you have installed the dependency and are using React with TypeScript/TSX.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/happy-work.en-US.md#2025-04-23_snippet_0

LANGUAGE: TSX
CODE:
```
import { HappyProvider } from '@ant-design/happy-work-theme';

export default () => (
  <HappyProvider>
    <Button />
  </HappyProvider>
);
```

----------------------------------------

TITLE: Styling Search Results in Tree Component with CSS
DESCRIPTION: Applies a highlighted orange color (#f50) to search results within a tree component. This CSS class is used to visually distinguish matched search terms in a searchable tree implementation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree/demo/search.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.site-tree-search-value {
  color: #f50;
}
```

----------------------------------------

TITLE: Setting Common Props Ant Design Popconfirm TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Popconfirm component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and optional `classNames` and `styles` for fine-grained control.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_32

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, classNames?:[Popconfirm["classNames"]](/components/popconfirm#api), styles?: [Popconfirm["styles"]](/components/popconfirm#api) }
```

----------------------------------------

TITLE: Implementing Scroll Container Detection and Event Handling
DESCRIPTION: Function to collect scroll containers and set up scroll event listeners for both target and popup elements to handle dynamic positioning.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tooltip-align.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
function collectScroll(ele: HTMLElement) {
  const scrollList: HTMLElement[] = [];
  let current = ele?.parentElement;

  while (current) {
    if (isScrollContainer(current)) {
      scrollList.push(ele);
    }

    current = current.parentElement;
  }

  return scrollList;
}

const targetScrollList = collectScroll(targetEle);
const popupScrollList = collectScroll(popupEle);

// We merge the list in real world. Here just for sample
[window, ...targetScrollList, ...popupScrollList].forEach((ele) => {
  ele.addEventListener(...);
});
```

----------------------------------------

TITLE: Comparing Yarn Lock Files for Dependency Changes
DESCRIPTION: GitHub Actions step that runs on build failure to compare yarn.lock files and identify dependency changes using diff-yarn-lock.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/mock-project-build.en-US.md#2025-04-23_snippet_2

LANGUAGE: yaml
CODE:
```
- name: 🎨 Diff Report
  if: ${{ failure() }}
  run: npx diff-yarn-lock --source=~tmpProj/yarn.lock --target=~tmpProj/yarn.lock.failed
```

----------------------------------------

TITLE: Setting Common Props Ant Design Popover TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Popover component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and optional `classNames` and `styles` for fine-grained control.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_31

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, classNames?:[Popover["classNames"]](/components/popover#api), styles?: [Popover["styles"]](/components/popover#api) }
```

----------------------------------------

TITLE: Filtering Ant Design Calendar onSelect by Source (TSX)
DESCRIPTION: This snippet demonstrates how to use the `onSelect` callback of the Ant Design Calendar component to react differently based on the source of the selection event. By accessing the `info.source` property, the code can specifically detect if a date was selected directly from the calendar panel ('date') and execute conditional logic, such as logging the selection source. This allows for fine-grained control over selection handling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/calendar/index.zh-CN.md#_snippet_1

LANGUAGE: TSX
CODE:
```
<Calendar
  onSelect={(date, { source }) => {
    if (source === 'date') {
      console.log('Panel Select:', source);
    }
  }}
/>
```

----------------------------------------

TITLE: DatePicker API - defaultPickerValue
DESCRIPTION: 默认面板日期，每次面板打开时会被重置到该日期。从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_42

LANGUAGE: typescript
CODE:
```
defaultPickerValue: dayjs
```

----------------------------------------

TITLE: Escaping Template Literals in Validation Messages (JavaScript)
DESCRIPTION: This snippet illustrates how to prevent the `${}` syntax from being interpreted as a variable placeholder in Ant Design Form validation messages. By prefixing the syntax with double backslashes (`\\${}`), the literal string `${label}` is displayed instead of being replaced by the field's label.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
{ required: true, message: '${label} is convert, \\${label} is not convert' }

// good is convert, ${label} is not convert
```

----------------------------------------

TITLE: Applying Prefix-Aware Styles with CSS-in-JS & ConfigProvider (antd-style) - Ant Design TSX
DESCRIPTION: Shows how to integrate `ConfigProvider.ConfigContext` with a CSS-in-JS library (`antd-style`) to create styles that are aware of the dynamic `prefixCls`. This allows styles to correctly target nested elements (e.g., `.ant-btn-icon`) even if the global prefix changes, ensuring theme styles remain effective and robust against prefix customization.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
// This is an example of using `antd-style`, you can use any CSS-in-JS library.
import React from 'react';
import { ConfigProvider } from 'antd';
import { createStyles } from 'antd-style';

const useButtonStyle = createStyles(({ css }, prefixCls: string) => {
  return {
    btn: css`
      background: red;
      .${prefixCls}-icon {
        color: green;
      }
    `,
  };
});

const GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {
  const { getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);
  const btnPrefixCls = getPrefixCls('btn');
  const { styles } = useButtonStyle(btnPrefixCls);
  return <ConfigProvider button={{ className: styles.btn }}>{props.children}</ConfigProvider>;
};

export default GeekProvider;
```

----------------------------------------

TITLE: Customizing Input Group Styles - Ant Design - CSS
DESCRIPTION: This CSS snippet customizes the appearance of grouped input elements in Ant Design by modifying background colors and border widths for different interactive and RTL scenarios. No dependencies are required aside from Ant Design's DOM structure and class names, which must match the selectors (e.g., .site-input-group-wrapper, .ant-input-rtl). Inputs such as hover or focus on specified elements trigger style adjustments, while outputs are visible changes to border behavior and backgrounds. Note that this CSS assumes that the respective DOM node hierarchy and class names are present in the project's markup.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input/demo/group.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
.site-input-group-wrapper .site-input-split {
  background-color: #fff !important;
}

.site-input-group-wrapper .site-input-right {
  border-left-width: 0;
}

.site-input-group-wrapper .site-input-right:hover,
.site-input-group-wrapper .site-input-right:focus {
  border-left-width: 1px;
}

.site-input-group-wrapper .ant-input-rtl.site-input-right {
  border-right-width: 0;
}

.site-input-group-wrapper .ant-input-rtl.site-input-right:hover,
.site-input-group-wrapper .ant-input-rtl.site-input-right:focus {
  border-right-width: 1px;
}
```

----------------------------------------

TITLE: Custom Jest Snapshot Serializer: Print Function with pretty-format - TypeScript
DESCRIPTION: This snippet shows the `print` function of a custom Jest snapshot serializer. It utilizes `pretty-format` with specific DOM plugins to obtain the formatted HTML string and then filters out empty lines and trailing whitespace. This custom logic ensures consistent snapshot output across React versions by ignoring differences caused by empty nodes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_10

LANGUAGE: typescript
CODE:
```
const htmlContent = format(element, {
  plugins: [plugins.DOMCollection, plugins.DOMElement],
});

expect.addSnapshotSerializer({
  test: '//...', // Simplified test
  print: (element) => {
    const filtered = htmlContent
      .split(/[\n\r]+/)
      .filter((line) => line.trim())
      .map((line) => line.replace(/\s+$/, ''))
      .join('\n');
    return filtered;
  },
});
```

----------------------------------------

TITLE: Configuring Arrow Pointing to Center (JavaScript)
DESCRIPTION: This snippet shows the configuration required within the `arrow` prop to make the component's arrow point directly at the center of its target element. Set `pointAtCenter` to `true` inside the `arrow` object.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popconfirm/demo/placement.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
arrow: { pointAtCenter: true }
```

----------------------------------------

TITLE: Closure Issue with React.memo
DESCRIPTION: Demonstrates a scenario where React.memo fails to prevent re-renders due to closure usage in render props.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/render-times.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
import React from 'react';

const MyComponent = React.memo(({ valueRender }: { valueRender: () => React.ReactElement }) =>
  valueRender(),
);

const App = () => {
  const countRef = React.useRef(0);
  const [, forceUpdate] = React.useState({});

  React.useEffect(() => {
    countRef.current += 1;
    forceUpdate({});
  }, []);

  // In real world, class component often meet this by `this.state`
  const valueRender = React.useCallback(() => countRef.current, []);

  return <MyComponent valueRender={valueRender} />;
};
```

----------------------------------------

TITLE: Global Configuration Hack Example
DESCRIPTION: Shows how Ant Design previously handled global configurations like locale through a hacky global variable approach, highlighting why this solution is not robust.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
// Sample. Not real world code.
let globalLocale = null;

const ConfigProvider = (props) => {
  if (props.locale) {
    globalLocale = props.locale;
  }

  // ...
};

Modal.confirm = (props) => {
  // ...

  ReactDOM.render(
    <ConfigProvider locale={globalLocale}>
      <Modal {...modalProps} />
    </ConfigProvider>,
  );
};
```

----------------------------------------

TITLE: Styling Custom Toolbar Wrapper and Icons with CSS
DESCRIPTION: This CSS code defines styles for a custom toolbar container (`.toolbar-wrapper`) and its icons (`.anticon`). It sets visual properties like background color, padding, border-radius, and text color for the wrapper. It also styles the icons within the toolbar, defining their padding, cursor behavior, and appearance for hover and disabled states, likely using Ant Design's icon class convention.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/demo/toolbarRender.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.toolbar-wrapper {
  padding: 0px 24px;
  color: #fff;
  font-size: 20px;
  background-color: rgba(0, 0, 0, 0.1);
  border-radius: 100px;
}

.toolbar-wrapper .anticon {
  padding: 12px;
  cursor: pointer;
}

.toolbar-wrapper .anticon[disabled] {
  cursor: not-allowed;
  opacity: 0.3;
}

.toolbar-wrapper .anticon:hover {
  opacity: 0.3;
}
```

----------------------------------------

TITLE: Specifying Time Picker Format in Ant Design (Markdown)
DESCRIPTION: This snippet demonstrates how to use the 'format' prop to customize the text display in Ant Design's Time Picker component. It includes explanations in both Chinese and English.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/format.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

`format` 属性指定格式。

## en-US

You can set a custom text by setting the `format` prop.
```

----------------------------------------

TITLE: Configuring Webpack to Use Moment.js with Ant Design v5 Plugin
DESCRIPTION: Demonstrates the Webpack configuration required to use the `@ant-design/moment-webpack-plugin`. By importing the plugin and adding an instance of it to the `plugins` array in the Webpack configuration file (`webpack-config.js`), the build process will replace Day.js with Moment.js for Ant Design components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
// webpack-config.js
import AntdMomentWebpackPlugin from '@ant-design/moment-webpack-plugin';

module.exports = {
  // ...
  plugins: [new AntdMomentWebpackPlugin()],
};
```

----------------------------------------

TITLE: Referencing InputNumber Out-of-Range Behavior Example (TSX)
DESCRIPTION: References `./demo/out-of-range.tsx`, demonstrating the behavior of the Ant Design InputNumber component when values potentially go outside the defined `min` and `max` range in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_10

LANGUAGE: markdown
CODE:
```
<code src="./demo/out-of-range.tsx">Out of range</code>
```

----------------------------------------

TITLE: Disabling Tab Transition for Editable Cards in Ant Design (CSS)
DESCRIPTION: This CSS snippet sets the transition property to none for Ant Design tab elements when the tabs are in 'editable-card' mode. It specifically targets descendants of .ant-tabs-editable with a .ant-tabs-nav and .ant-tabs-tab structure to remove transition effects, which helps achieve a snappier drag-and-drop interaction when using the dnd-kit library. There are no additional dependencies, but this should be used in conjunction with Ant Design styles and the dnd-kit integration code as described in surrounding documentation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tabs/demo/custom-tab-bar-node.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
/* set transition to none when type=\"editable-card\" */\n.ant-tabs-editable > .ant-tabs-nav .ant-tabs-tab {\n  transition: none;\n}\n
```

----------------------------------------

TITLE: Setting Common Props Ant Design Notification TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Notification component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and an optional `closeIcon` (React.ReactNode).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode }
```

----------------------------------------

TITLE: Using innerHTML to Compare Rendered Output in Test Snapshots - TypeScript
DESCRIPTION: This TypeScript snippet suggests directly comparing the innerHTML of a selected element with a Jest snapshot to account for DOM differences between React versions. It employs querySelector to locate the element with the specified class name. Dependencies include Jest and a DOM-environment testing setup. The input is the result of a render call, and outputs are assertion results when comparing the innerHTML to the expected snapshot.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
expect(container.querySelector('.className').innerHTML).toMatchSnapshot();
```

----------------------------------------

TITLE: Adding a Custom Jest Snapshot Serializer for HTML Elements in TypeScript
DESCRIPTION: This TypeScript snippet shows how to begin adding a custom Jest snapshot serializer using `expect.addSnapshotSerializer`. The `test` function checks if the element passed to the serializer is an instance of `HTMLElement`. If it returns true, Jest will use the custom `print` function (defined elsewhere) for serializing this element, allowing for customized snapshot formatting.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
expect.addSnapshotSerializer({
  // Determine whether it is a dom element, if yes, go to our own serialization logic
  // The code has been simplified, more logic is needed for real judgment, you can refer to setupAfterEnv.ts of antd
  test: (element) => element instanceof HTMLElement,
  // ...
});
```

----------------------------------------

TITLE: Measuring Text Height with Reference Span in TypeScript React
DESCRIPTION: Implementation of text height measurement using a reference span element for calculating line height.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<div>
  {text}
  {measuring && <span ref={measureRef}>&nbsp;</span>}
</div>
```

----------------------------------------

TITLE: Disabling babel-plugin-import in Umi Configuration (TypeScript)
DESCRIPTION: Shows how to disable the automatic `babel-plugin-import` for Ant Design within a UmiJS project configuration (`config/config.ts` or `.umirc.ts`) by setting `antd.import` to `false`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_10

LANGUAGE: diff
CODE:
```
// config/config.ts or .umirc
export default {
  antd: {
-   import: true,
+   import: false,
  },
};
```

----------------------------------------

TITLE: DatePicker API - pickerValue
DESCRIPTION: 面板日期，可以用于受控切换面板所在日期。配合 `onPanelChange` 使用。从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_47

LANGUAGE: typescript
CODE:
```
pickerValue: dayjs
```

----------------------------------------

TITLE: Implementing unstableSetRender for React 19 Compatibility
DESCRIPTION: This code demonstrates how to use the unstableSetRender method to modify the rendering method of ReactDOM, allowing Ant Design v5 to work with React 19. This method is recommended only for special scenarios like umd or micro-applications.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/v5-for-19.en-US.md#2025-04-23_snippet_1

LANGUAGE: js
CODE:
```
import { unstableSetRender } from 'antd';
import { createRoot } from 'react-dom/client';

unstableSetRender((node, container) => {
  container._reactRoot ||= createRoot(container);
  const root = container._reactRoot;
  root.render(node);
  return async () => {
    await new Promise((resolve) => setTimeout(resolve, 0));
    root.unmount();
  };
});
```

----------------------------------------

TITLE: Implementing Button Compact Mode
DESCRIPTION: This example illustrates the compact mode specifically for button components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
<code src="./demo/compact-buttons.tsx">Button Compact Mode</code>
```

----------------------------------------

TITLE: Importing Semantic DOM Example in TypeScript
DESCRIPTION: This snippet imports an example of semantic DOM usage for the List component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
<code src="./demo/_semantic.tsx" simplify="true"></code>
```

----------------------------------------

TITLE: Defining Ant Design Menu Divider Item (TS)
DESCRIPTION: Example of defining a menu item as a divider using the `type: 'divider'` property, as required for `MenuDividerType`. This is typically used within popup menus.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/index.zh-CN.md#_snippet_0

LANGUAGE: ts
CODE:
```
const dividerItem = {
  type: 'divider', // Must have
};
```

----------------------------------------

TITLE: Configuring dayjs weekStart Locale (JavaScript)
DESCRIPTION: Demonstrates how to modify the starting day of the week for a specific locale (e.g., 'zh-cn') using the dayjs library and its `updateLocale` plugin. This is useful for aligning the calendar display with regional conventions. It requires importing dayjs, the specific locale, and the `updateLocale` plugin.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.en-US.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import dayjs from 'dayjs';

import 'dayjs/locale/zh-cn';

import updateLocale from 'dayjs/plugin/updateLocale';

dayjs.extend(updateLocale);
dayjs.updateLocale('zh-cn', {
  weekStart: 0,
});
```

----------------------------------------

TITLE: Hiding Dropdown Arrow in Ant Design (Chinese)
DESCRIPTION: This snippet explains in Chinese how to use the 'arrow' property to hide the arrow in an Ant Design dropdown component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/arrow.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

通过 `arrow` 属性隐藏箭头。
```

----------------------------------------

TITLE: DatePicker Common API - disabled
DESCRIPTION: 禁用。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_8

LANGUAGE: typescript
CODE:
```
disabled: boolean
```

----------------------------------------

TITLE: Setting up Umi Mock Data for Products (TypeScript)
DESCRIPTION: Defines mock product data and configures GET and DELETE API endpoints (`/api/products`, `/api/products/:id`) using Umi's `defineMock` function to simulate backend responses locally.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.zh-CN.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { defineMock } from 'umi';

type Product = {
  id: string;
  name: string;
};

let products: Product[] = [
  { id: '1', name: 'Umi' },
  { id: '2', name: 'Ant Design' },
  { id: '3', name: 'Ant Design Pro' },
  { id: '4', name: 'Dva' },
];

export default defineMock({
  'GET /api/products': (_, res) => {
    res.send({
      status: 'ok',
      data: products,
    });
  },
  'DELETE /api/products/:id': (req, res) => {
    products = products.filter((item) => item.id !== req.params.id);
    res.send({ status: 'ok' });
  },
});
```

----------------------------------------

TITLE: DatePicker API - renderExtraFooter
DESCRIPTION: 在面板中添加额外的页脚。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_48

LANGUAGE: typescript
CODE:
```
renderExtraFooter: (mode: PanelMode) => React.ReactNode
```

----------------------------------------

TITLE: Disabling Ant Design Component Animation using ConfigProvider (JSX)
DESCRIPTION: This snippet demonstrates how to globally disable motion animations for Ant Design components. It uses the `ConfigProvider` component to set the `motion` property to `false` within the theme's `token`. This requires the Ant Design library. The expected output is rendering the `App` component with animations disabled.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import { ConfigProvider } from 'antd';

<ConfigProvider theme={{ token: { motion: false } }}>
  <App />
</ConfigProvider>;
```

----------------------------------------

TITLE: Accessing DOM Elements and Assertions: Enzyme vs React Testing Library Diff
DESCRIPTION: Illustrates the change from Enzyme's component-aware `find` and `props` APIs to standard DOM querying (`querySelector`) and assertions with RTl. It shows how the testing approach shifts from inspecting component instances to verifying the state of the rendered DOM as a user perceives it.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_2

LANGUAGE: diff
CODE:
```
--- a/old-test.js
+++ b/new-test.js
@@ -1,7 +1,8 @@
  // ... rendering code
 
     expect(ref.current.getPopupDomNode()).toBe(null);
--  popover.find('span').simulate('click');
---  expect(popover.find('Trigger PopupInner').props().visible).toBeTruthy();
+
+ expect(container.querySelector('.ant-popover-inner-content')).toBeFalsy();
+ fireEvent.click(popover.container.querySelector('span'));
+ expect(container.querySelector('.ant-popover-inner-content')).toBeTruthy();

```

----------------------------------------

TITLE: Referencing FloatButton Badge Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/badge.tsx') demonstrating how to attach a Badge (using the 'badge' prop, available since v5.4.0) to the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_10

LANGUAGE: html
CODE:
```
<code src="./demo/badge.tsx" iframe="360">badge</code>
```

----------------------------------------

TITLE: Disabling Hash in CSS Variable Mode
DESCRIPTION: Demonstrates how to disable the hash feature when using CSS variables, which can further reduce style size if only one antd version is used.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/css-variables.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<ConfigProvider theme={{ cssVar: true, hashed: false }}>
  <App />
</ConfigProvider>
```

----------------------------------------

TITLE: Displaying Progress Bar with Auto-Updating Option in Markdown
DESCRIPTION: This snippet demonstrates how to set up a progress bar with both fixed and auto-updating progress options. When 'percent="auto"' is set, it creates an indeterminate progress bar that continuously updates.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/demo/percent.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

展示进度，当设置 `percent="auto"` 时会预估一个永远不会停止的进度条。

## en-US

Show the progress. When `percent="auto"` is set, an indeterminate progress will be displayed.
```

----------------------------------------

TITLE: Setting Badge Dot Offset Format
DESCRIPTION: Shows the array format for specifying custom badge dot positioning using left and top offset values from the default position.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/demo/offset.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
[left, top]
```

----------------------------------------

TITLE: Semantic DOM Structure
DESCRIPTION: Illustrates the semantic DOM structure of the Badge component. Code referenced from ./demo/_semantic.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
./demo/_semantic.tsx
```

----------------------------------------

TITLE: Defining a MenuDivider in TypeScript
DESCRIPTION: This snippet shows how to define a menu divider object for the Ant Design Menu component. It requires the `type` property set to 'divider' and is typically used in vertical popup or dropdown menus.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/index.en-US.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const dividerItem = {
  type: 'divider', // Must have
};
```

----------------------------------------

TITLE: Using Wave Component for Custom Click Effect Animation in Ant Design (TypeScript/React)
DESCRIPTION: This snippet shows how to apply the standalone Wave component from Ant Design around a button element to enable a click-triggered wave (box-shadow) effect. It is intended for cases where you want custom wave animations on individual elements. Dependencies: the Wave component from Ant Design. The input is a child component; on click, the Wave component wraps the target in an animated effect. Designed for React apps with TypeScript/TSX support.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/happy-work.en-US.md#2025-04-23_snippet_1

LANGUAGE: TSX
CODE:
```
// Sample code.
const Button = (
  <Wave>
    <button />
  </Wave>
);
```

----------------------------------------

TITLE: Styling Profile Description Items in Ant Design Drawer (CSS)
DESCRIPTION: This CSS snippet defines styles for various elements used to display profile or description details, likely within an Ant Design Drawer component. It targets wrapper elements, paragraphs containing description text, and inline labels, setting properties like margins, colors, font sizes, and line heights to ensure consistent and readable presentation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/demo/user-profile.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.site-description-item-profile-wrapper {
  margin-bottom: 7px;
  color: rgba(0, 0, 0, 0.65);
  font-size: 14px;
  line-height: 1.5715;
}

.ant-drawer-body p.site-description-item-profile-p {
  display: block;
  margin-bottom: 16px;
  color: rgba(0, 0, 0, 0.85);
  font-size: 16px;
  line-height: 1.5715;
}

.site-description-item-profile-p-label {
  display: inline-block;
  margin-inline-end: 8px;
  color: rgba(0, 0, 0, 0.85);
}
```

----------------------------------------

TITLE: Configuring Moment.js Webpack Plugin JS
DESCRIPTION: This snippet shows how to configure the `@ant-design/moment-webpack-plugin` in a Webpack configuration file. This plugin automatically replaces Day.js with Moment.js in Ant Design components during the build process without requiring manual code changes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.zh-CN.md#_snippet_5

LANGUAGE: js
CODE:
```
// webpack-config.js
const AntdMomentWebpackPlugin = require('@ant-design/moment-webpack-plugin');

module.exports = {
  // ...
  plugins: [new AntdMomentWebpackPlugin()],
};
```

----------------------------------------

TITLE: Grid Playground Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file offering an interactive playground or demonstration area for experimenting with various features of the Ant Design grid system. The actual code implementing this example resides in the './demo/playground.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_11

LANGUAGE: html
CODE:
```
<code src="./demo/playground.tsx">Playground</code>
```

----------------------------------------

TITLE: SeparatorType Definition Example
DESCRIPTION: This TypeScript snippet shows how to define an item object specifically as a separator within the `items` array, using the `type: 'separator'` property.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.zh-CN.md#_snippet_3

LANGUAGE: ts
CODE:
```
const item = {
  type: 'separator', // Must have
  separator: '/',
};
```

----------------------------------------

TITLE: Setting Up Local Repository for Language Contribution (Bash)
DESCRIPTION: These Bash commands outline the initial Git steps required to contribute a new language pack to the Ant Design project. It involves cloning the user's fork, navigating into the directory, adding the official Ant Design repository as an upstream remote, and creating a new feature branch based on the upstream `feature` branch to isolate the contribution work.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/i18n.en-US.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
git clone git@github.com:<your organization>/ant-design.git
cd ant-design/
git remote add upstream git@github.com:ant-design/ant-design.git
git checkout -b <your new branch name> upstream/feature
```

----------------------------------------

TITLE: Installing Ant Design Color Package via npm
DESCRIPTION: This command installs the `@ant-design/colors` package using the Node Package Manager (npm). This package provides JavaScript variables for the Ant Design color palettes, allowing developers to easily use the defined colors in their projects. Requires Node.js and npm (or a compatible package manager) to be installed.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/colors.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
npm install @ant-design/colors
```

----------------------------------------

TITLE: Referencing FloatButton Group Placement Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/placement.tsx') demonstrating the 'placement' prop for customizing menu animation placement in Ant Design FloatButton.Group (available since v5.21.0). The demo is intended to be displayed in an iframe with a width of 380px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_8

LANGUAGE: html
CODE:
```
<code src="./demo/placement.tsx" iframe="380" version="5.21.0">placement</code>
```

----------------------------------------

TITLE: Referencing FloatButton Description Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/description.tsx') demonstrating how to add a description to the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: html
CODE:
```
<code src="./demo/description.tsx" iframe="360">Description</code>
```

----------------------------------------

TITLE: Linking Hashed CSS File in HTML Template
DESCRIPTION: Shows the server-side HTML template part of the 'Part Static Extract Style' method. A `<link>` tag is added to the `<head>` section to reference the dynamically generated, hashed CSS file URL (`hashCssFileUrl`). The rendered application HTML (`html`) is injected into the `<body>`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_7

LANGUAGE: html
CODE:
```
<!doctype html>
<html>
  <head>
    <link rel="stylesheet" href="${hashCssFileUrl}" />
  </head>
  <body>
    <div id="root">${html}</div>
  </body>
</html>
```

----------------------------------------

TITLE: Demonstrating Modal Hook Position Bug
DESCRIPTION: Example showing how contextHolder placement affects Modal.confirm popup positioning when placed inside vs outside the Modal component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button, Modal } from 'antd';

export default () => {
  const [modal, contextHolder] = Modal.useModal();

  return (
    <div>
      <Modal open>
        <Button
          onClick={() => {
            modal.confirm({ title: 'Hello World' });
          }}
        >
          Confirm
        </Button>

        {/* 🚨 BUG when put here */}
        {contextHolder}
      </Modal>

      {/* ✅ Work as expect when put here */}
      {/* {contextHolder} */}
    </div>
  );
};
```

----------------------------------------

TITLE: Defining List Component API in Markdown
DESCRIPTION: This snippet defines the API for the List component, including properties like bordered, dataSource, footer, grid, header, itemLayout, loading, loadMore, locale, pagination, renderItem, rowKey, size, and split.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| bordered | Toggles rendering of the border around the list | boolean | false |  |
| dataSource | DataSource array for list | any\[] | - |  |
| footer | List footer renderer | ReactNode | - |  |
| grid | The grid type of list. You can set grid to something like {gutter: 16, column: 4} | [object](#list-grid-props) | - |  |
| header | List header renderer | ReactNode | - |  |
| itemLayout | The layout of list | `horizontal` \| `vertical` | `horizontal` |  |
| loading | Shows a loading indicator while the contents of the list are being fetched | boolean \| [SpinProps](/components/spin/#api) ([more](https://github.com/ant-design/ant-design/issues/8659)) | false |  |
| loadMore | Shows a load more content | ReactNode | - |  |
| locale | The i18n text including empty text | object | {emptyText: `No Data`} |  |
| pagination | Pagination [config](/components/pagination/), hide it by setting it to false | boolean \| object | false |  |
| renderItem | Customize list item when using `dataSource` | (item: T, index: number) => ReactNode | - |  |
| rowKey | Item's unique value, could be an Item's key which holds a unique value of type `React.Key` or function that receives Item and returns a `React.Key` | `keyof` T \| (item: T) => `React.Key` | `"key"` |  |
| size | Size of list | `default` \| `large` \| `small` | `default` |  |
| split | Toggles rendering of the split under the list item | boolean | true |  |
```

----------------------------------------

TITLE: Describing Dynamic Mode Switching in English
DESCRIPTION: This markdown snippet explains the purpose of the example in English. It specifies that the demonstration will show how to switch between inline and vertical modes dynamically.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/demo/switch-mode.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
## en-US

Show the dynamic switching mode (between `inline` and `vertical`).
```

----------------------------------------

TITLE: Defining Ant Design Typography Ellipsis Configuration Interface
DESCRIPTION: Specifies the structure of the `EllipsisConfig` interface used to control text truncation and expansion in Typography components. It defines properties for maximum rows, expandability, suffix, custom symbols, tooltips, and callbacks for ellipsis and expansion events.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/typography/index.en-US.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
interface EllipsisConfig {
  rows: number;
  /** `collapsible` added in `5.16.0` */
  expandable: boolean | 'collapsible';
  suffix: string;
  /** render function added in `5.16.0` */
  symbol: ReactNode | ((expanded: boolean) => ReactNode);
  tooltip: ReactNode | TooltipProps;
  /** added in `5.16.0` */
  defaultExpanded: boolean;
  /** added in `5.16.0` */
  expanded: boolean;
  /** `info` added in `5.16.0` */
  onExpand: (event: MouseEvent, info: { expanded: boolean }) => void;
  onEllipsis: (ellipsis: boolean) => void;
}
```

----------------------------------------

TITLE: Importing Rate Component Examples in React
DESCRIPTION: These code snippets import various examples of the Rate component, demonstrating different features and use cases.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/rate/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/half.tsx">Half star</code>
<code src="./demo/text.tsx">Show copywriting</code>
<code src="./demo/disabled.tsx">Read only</code>
<code src="./demo/clear.tsx">Clear star</code>
<code src="./demo/character.tsx">Other Character</code>
<code src="./demo/character-function.tsx">Customize character</code>
<code src="./demo/component-token.tsx" debug>Component Token</code>
```

----------------------------------------

TITLE: Using Custom Component with Value (JSX)
DESCRIPTION: Shows how to use the `MyStr` component, passing a simple string literal 'Hello World' to its `value` prop. This is a straightforward example of the component's intended usage.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.zh-CN.md#_snippet_2

LANGUAGE: JSX
CODE:
```
<MyStr value="Hello World" />
```

----------------------------------------

TITLE: Ant Design Sider Breakpoint Widths
DESCRIPTION: Defines the default pixel widths corresponding to the responsive breakpoints used by the Ant Design Layout.Sider component for responsive layout behavior.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/index.zh-CN.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
{
  xs: '480px',
  sm: '576px',
  md: '768px',
  lg: '992px',
  xl: '1200px',
  xxl: '1600px',
}
```

----------------------------------------

TITLE: Testing Pretty-Format Behavior with Empty DOM Elements in TypeScript
DESCRIPTION: This TypeScript code demonstrates a simple test case using Jest. It creates a div, appends an empty string (which creates an empty text node) and an anchor element, then uses `toMatchSnapshot()` to see how `pretty-format` serializes it. It also logs `innerHTML` for comparison, helping to isolate the impact of empty elements on snapshot serialization.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
const holder = document.createElement('div');
holder.append('');
holder.append(document.createElement('a'));
expect(holder).toMatchSnapshot();
console.log(holder.innerHTML);
```

----------------------------------------

TITLE: CSS Height Measurement in TypeScript/React
DESCRIPTION: Code snippet showing how to measure text height using CSS for ellipsis calculation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<div ref={measureRef} style={ellipsisStyle}>
  {text}
</div>;

const cssHeight = measureRef.current.clientHeight;
```

----------------------------------------

TITLE: Customizing Tour Placement with Ant Design in TypeScript/React
DESCRIPTION: This code snippet ('./demo/placement.tsx') illustrates how to configure the placement of the Ant Design Tour popup relative to its targeted element. It depends on React and Ant Design. The code demo focuses on the placement property, showing all supported alignment positions. Input steps provide various 'placement', and the output displays Tour popups at different positions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: TypeScript
CODE:
```
<code src=\"./demo/placement.tsx\">Placement</code>
```

----------------------------------------

TITLE: Defining Font Family Variable in CSS
DESCRIPTION: This CSS snippet declares a font-family variable listing preferred system and fallback fonts for consistent cross-platform typography in Ant Design. It assumes a LESS or CSS preprocessor environment where variables can be used and referenced throughout the application's stylesheets. The input is not a standalone selector, but a variable definition that should be imported and used elsewhere, ensuring user interfaces default to available system fonts with relevant emoji and language support. Output is the availability of the '@font-family' variable in other styles.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/font.en-US.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
@font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
  'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
  'Noto Color Emoji';
```

----------------------------------------

TITLE: Defining the Default Font Family Stack in CSS for Ant Design
DESCRIPTION: This CSS snippet specifies the recommended `font-family` stack for Ant Design, defined within a CSS preprocessor variable likely. It prioritizes system UI fonts like '-apple-system' and 'BlinkMacSystemFont' for a native look and feel across operating systems, followed by common cross-platform fonts ('Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif) as fallbacks. It also includes specific fonts for rendering emojis consistently across platforms.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/font.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
@font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
  'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
  'Noto Color Emoji';
```

----------------------------------------

TITLE: Use Ant Design Button Component in Next.js Page (TSX)
DESCRIPTION: Demonstrates how to import and use a basic Ant Design component, the `Button`, within a Next.js page component. This example shows a simple usage after the necessary `_document.tsx` and `_app.tsx` setup is complete.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#_snippet_6

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Button } from 'antd';

const Home = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default Home;
```

----------------------------------------

TITLE: DatePicker Common API - onPanelChange
DESCRIPTION: 日历面板切换的回调。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_39

LANGUAGE: typescript
CODE:
```
onPanelChange: function(value: dayjs, mode: PanelMode)
```

----------------------------------------

TITLE: Calendar Panel Selection in TypeScript
DESCRIPTION: Example demonstrating how to handle panel selection events with TypeScript in the Calendar component
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/calendar/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<Calendar
  onSelect={(date, { source }) => {
    if (source === 'date') {
      console.log('Panel Select:', source);
    }
  }}
/>
```

----------------------------------------

TITLE: Diverse Child Elements
DESCRIPTION: Debug example demonstrating various child elements in Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
<code src="./demo/debug.tsx" debug>多样的 Child</code>
```

----------------------------------------

TITLE: Demonstrating Semantic DOM in Space Component
DESCRIPTION: This example illustrates the use of semantic DOM elements within the Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_13

LANGUAGE: tsx
CODE:
```
<code src="./demo/_semantic.tsx" simplify="true"></code>
```

----------------------------------------

TITLE: Next.js App Router Error with Ant Design Subcomponents
DESCRIPTION: This snippet shows an error message that may occur when using Ant Design subcomponents with Next.js App Router.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
Error: Cannot access .Option on the server. You cannot dot into a client module from a server component. You can only pass the imported name through.
```

----------------------------------------

TITLE: Controlling Modal Animation Origin with mousePosition in Ant Design (Chinese)
DESCRIPTION: This snippet explains in Chinese how to use the mousePosition prop to control the animation origin of a modal dialog in Ant Design.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/custom-mouse-position.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

通过 `mousePosition` 控制弹框动画原点.
```

----------------------------------------

TITLE: Configuring Warning Behavior in Ant Design
DESCRIPTION: Shows how to configure warning behavior using ConfigProvider to aggregate deprecation messages.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<ConfigProvider warning={{ strict: false }} />
```

----------------------------------------

TITLE: Defining a MenuItemGroup in TypeScript
DESCRIPTION: This snippet demonstrates how to define a menu item group object for the Ant Design Menu component. It requires the `type` property set to 'group' and includes a label and an array for child menu items.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/index.en-US.md#_snippet_0

LANGUAGE: typescript
CODE:
```
const groupItem = {
  type: 'group', // Must have
  label: 'My Group',
  children: [],
};
```

----------------------------------------

TITLE: Styling Popover Content in CSS
DESCRIPTION: This CSS snippet removes the default margin from paragraph elements within the Ant Design popover content. It ensures a more compact and consistent appearance of text inside the popover.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/basic.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
.ant-popover-content p {
  margin: 0;
}
```

----------------------------------------

TITLE: Configuring Gap Between Flex Items - Ant Design - TypeScript/TSX
DESCRIPTION: This references the "gap.tsx" file, demonstrating how the Ant Design Flex component handles custom gaps/spaces between items using the "gap" prop. The example likely highlights supported gap values and their visual impact. Prerequisites include React and Flex component usage. It accepts gap as a prop (small/middle/large/string/number) and visually affects space between children.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/gap.tsx\">gap</code>
```

----------------------------------------

TITLE: Documenting maxCount Prop Usage in Select Component (Markdown)
DESCRIPTION: Explains how to use the `maxCount` prop in Ant Design's Select component to limit the maximum number of selectable items. When the limit is exceeded, remaining options become disabled.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/maxCount.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

你可以通过设置 `maxCount` 约束最多可选中的数量，当超出限制时会变成禁止选中状态。

## en-US

You can set the `maxCount` prop to control the max number of items can be selected. When the limit is exceeded, the options will become disabled.
```

----------------------------------------

TITLE: Overriding Default Overflow Style - Ant Design Watermark - TSX
DESCRIPTION: Illustrates how to override the default `overflow: hidden` style applied to the watermark container using the `style` prop. This counteracts the default behavior added in version 5.18.0, allowing users to customize or restore the overflow property as needed.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/watermark/index.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
<Watermark style={{ overflow: 'visible' }} />
```

----------------------------------------

TITLE: Setting Common Props Ant Design Menu TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Menu component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and an optional `expandIcon` which can be a ReactNode or a function returning one.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, expandIcon?: ReactNode | props => ReactNode }
```

----------------------------------------

TITLE: Styling Ant Design Numeric Input Tooltip CSS
DESCRIPTION: CSS rules targeting a custom numeric input component that uses Ant Design's Tooltip. It sets a minimum width and height for the tooltip's inner container (`.ant-tooltip-inner`) to prevent layout issues, especially with empty or short content, or potential arrow overflow. It also defines the font size for a title element (`.numeric-input-title`) within the numeric input.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input/demo/tooltip.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
/* to prevent the arrow overflow the popup container,
or the height is not enough when content is empty */
.numeric-input .ant-tooltip-inner {
  min-width: 32px;
  min-height: 37px;
}

.numeric-input .numeric-input-title {
  font-size: 14px;
}
```

----------------------------------------

TITLE: Grid Sort/Order Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file demonstrating using the 'order' prop on Col components to control the visual order of columns within an Ant Design grid, independent of their source order. The actual code implementing this example resides in the './demo/sort.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: html
CODE:
```
<code src="./demo/sort.tsx">Grid sort</code>
```

----------------------------------------

TITLE: Setting Draggable Range Track in Ant Design (English)
DESCRIPTION: This snippet provides instructions in English on how to make a range track draggable in Ant Design. It explains that setting the `range.draggableTrack` property enables the draggable functionality for the range track.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/demo/draggableTrack.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
## en-US

Make range track draggable by setting `range.draggableTrack`.
```

----------------------------------------

TITLE: Enabling Flex Container Wrap Behavior - Ant Design - TypeScript/TSX
DESCRIPTION: This snippet points to "wrap.tsx", which demonstrates wrapping behavior in a Flex container, configurable via the "wrap" property. It shows how child elements flow across multiple lines when they exceed container width. Dependencies include React and the Flex component. The prop "wrap" determines single vs. multiline layout. Output is a multi-line flex layout if necessary.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/wrap.tsx\">Wrap</code>
```

----------------------------------------

TITLE: Using Plain Text Style with Ant Design Divider in React/TSX
DESCRIPTION: References a demo file (`./demo/plain.tsx`) showing the use of the `plain` prop for rendering divider text without heading styles in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: html
CODE:
```
<code src="./demo/plain.tsx">Text without heading style</code>
```

----------------------------------------

TITLE: Colorful Badge
DESCRIPTION: Illustrates how to use custom colors for the Badge component. Code referenced from ./demo/colorful.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
./demo/colorful.tsx
```

----------------------------------------

TITLE: Styling Highlighted Area of Ant Design Tour in TypeScript/React
DESCRIPTION: The './demo/gap.tsx' code snippet shows how to customize the gap and highlight style around the target element in the Ant Design Tour component. React and Ant Design are required. By passing 'gap' properties such as 'offset' and 'radius', the code demonstrates altering the position and shape of the highlight. Results in a more refined or branded user experience.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: TypeScript
CODE:
```
<code src=\"./demo/gap.tsx\">Custom highlighted area style</code>
```

----------------------------------------

TITLE: Setting Common Props Ant Design Skeleton TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Skeleton component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Controlling Modal Animation Origin with mousePosition in Ant Design (English)
DESCRIPTION: This snippet explains in English how to pass the mousePosition prop to control the animation origin position of a modal dialog in Ant Design.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/custom-mouse-position.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
## en-US

pass `mousePosition` to control modal's animation origin position
```

----------------------------------------

TITLE: Semantic DOM Example for Badge Component
DESCRIPTION: Simplified code demonstration for semantic DOM usage with Badge component, showing how to apply custom class names and styles to different parts of the Badge.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<code src="./demo/_semantic.tsx" simplify="true"></code>
```

----------------------------------------

TITLE: Defining Basic React Component Interface (TypeScript)
DESCRIPTION: Defines a TypeScript interface for a simple React functional component that accepts a string `value` prop. This sets up the basic expected properties for the component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.zh-CN.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface StrProps {
  value: string;
}
```

----------------------------------------

TITLE: Configure Ant Design Arrow to Point at Center
DESCRIPTION: This configuration object is used with the `arrow` prop in Ant Design components (like Tooltip or Popover) to make the arrow point directly at the center of the target element rather than the edge.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/dropdown/demo/arrow-center.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
{ pointAtCenter: true }
```

----------------------------------------

TITLE: Using Modal.useModal() with Context in React
DESCRIPTION: Demonstrates how to use Modal.useModal() hook to create a modal with context. The contextHolder is inserted into the component tree to ensure proper context inheritance.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
const [modal, contextHolder] = Modal.useModal();

React.useEffect(() => {
  modal.confirm({
    // ...
  });
}, []);

return <div>{contextHolder}</div>;
```

----------------------------------------

TITLE: Mixed Measurement Implementation for Text Ellipsis
DESCRIPTION: Combined approach using CSS for height measurement and JavaScript for text truncation to handle mixed line heights accurately.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<div ref={measureRef} style={ellipsisStyle}>
  {text}
</div>;

const cssHeight = measureRef.current.clientHeight;
```

LANGUAGE: tsx
CODE:
```
// pseudocode. Not used in real world
<div ref={walkingMeasureRef}>{text.slice(0, walkingMeasureIndex)}</div>;

if (walkingMeasureRef.current.clientHeight > cssHeight) {
  // Not meet the requirement
}
```

----------------------------------------

TITLE: Defining Ant Design Form ValidateConfig Interface (TSX)
DESCRIPTION: Defines the TypeScript interface for the configuration object used with the validateFields method. It includes optional properties like validateOnly, recursive, and dirty to control validation behavior.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#_snippet_8

LANGUAGE: TSX
CODE:
```
export interface ValidateConfig {
  // New in 5.5.0. Only validate content and not show error message on UI.
  validateOnly?: boolean;
  // New in 5.9.0. Recursively validate the provided `nameList` and its sub-paths.
  recursive?: boolean;
  // New in 5.11.0. Validate dirty fields (touched + validated).
  // It's useful to validate fields only when they are touched or validated.
  dirty?: boolean;
}
```

----------------------------------------

TITLE: Segmented Component API Declaration
DESCRIPTION: TypeScript interface definitions for the Segmented component properties including block, defaultValue, disabled, onChange, options, size, vertical, value, shape, and name properties.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/segmented/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
interface SegmentedProps {
  block?: boolean;  // Option to fit width to its parent's width
  defaultValue?: string | number;  // Default selected value
  disabled?: boolean;  // Disable all segments
  onChange?: (value: string | number) => void;  // Callback function for state changes
  options?: string[] | number[] | SegmentedItemType[];  // Set children optional
  size?: 'large' | 'middle' | 'small';  // The size of the Segmented
  vertical?: boolean;  // Orientation
  value?: string | number;  // Currently selected value
  shape?: 'default' | 'round';  // shape of Segmented
  name?: string;  // The name property of all input[type="radio"] children
}
```

----------------------------------------

TITLE: DatePicker Common API - status
DESCRIPTION: 设置校验状态。从 4.19.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_32

LANGUAGE: typescript
CODE:
```
status: 'error' | 'warning'
```

----------------------------------------

TITLE: Building Bundles Concurrently with Vite in Gulp Task (TypeScript)
DESCRIPTION: This asynchronous function demonstrates launching multiple Vite builds (one per environment) in parallel using Promise.all within a gulp task context. Dependencies are Vite, Node.js, and the project's custom configuration function getViteConfigForPackage. It takes a callback cb, generates configurations for both development and production, and triggers all builds concurrently. Input is the callback and environment list, and the expected output is multiple built bundles. A key limitation is the potential for race conditions or file write conflicts if outputs overlap.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.en-US.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
async function buildBundles(cb) {
  const envs = ['development', 'production'];
  const configs = envs.map((env) =>
    getViteConfigForPackage({
      env,
      formats: ['es', 'cjs', 'umd'],
      external: ['react', 'react-dom'],
    }),
  );

  await Promise.all(configs.map((config) => vite.build(config)));
  cb && cb();
}
```

----------------------------------------

TITLE: Conceptualizing Static Style Extraction by Rendering All Components in TypeScript
DESCRIPTION: Outlines the conceptual basis for static style extraction. This approach involves rendering all necessary Ant Design components (Button, Switch, Input, etc.) within a `StyleProvider` context during a build or server setup phase. This populates the cache with styles for all components, allowing `extractStyle` to retrieve the complete CSS, which can then be saved to a static file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
const cache = createCache();

// HTML Content
renderToString(
  <StyleProvider cache={cache}>
    <Button />
    <Switch />
    <Input />
    {/* Rest antd components */}
  </StyleProvider>,
);

// Style Content
const styleText = extractStyle(cache);
```

----------------------------------------

TITLE: Creating a Horizontal Divider in React/TSX
DESCRIPTION: References a demo file (`./demo/horizontal.tsx`) showcasing the implementation of a default horizontal divider using the Ant Design `Divider` component in a React/TypeScript application.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
<code src="./demo/horizontal.tsx">Horizontal</code>
```

----------------------------------------

TITLE: Creating a Vertical Divider in React/TSX
DESCRIPTION: References a demo file (`./demo/vertical.tsx`) illustrating how to create a vertical divider, likely by setting the `type` prop to `vertical`, using the Ant Design `Divider` component in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: html
CODE:
```
<code src="./demo/vertical.tsx">Vertical</code>
```

----------------------------------------

TITLE: Forcing Tooltip Content Refresh on Close - React JSX - JavaScript
DESCRIPTION: Shows how to force Ant Design Tooltip to update its content immediately when closed, avoiding cached output, by setting the 'fresh' property. Used to solve scenarios where updated tooltip content should be immediately reflected even if tooltip is hidden. Requires React and Ant Design Tooltip. Inputs are a user object and boolean open state; outputs a Tooltip that does not cache content when closed.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tooltip/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Tooltip open={user} title={user?.name} fresh />
```

----------------------------------------

TITLE: Replacing href in History with Anchor in React
DESCRIPTION: Demo import for an example demonstrating the replace functionality for href in browser history, displayed in an iframe with a height of 200px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_7

LANGUAGE: tsx
CODE:
```
<code src="./demo/replace.tsx" iframe="200">Replace href in history</code>
```

----------------------------------------

TITLE: Shadow DOM Integration
DESCRIPTION: Example of integrating Ant Design within Shadow DOM using StyleProvider with container configuration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
import { StyleProvider } from '@ant-design/cssinjs';
import { createRoot } from 'react-dom/client';

const shadowRoot = someEle.attachShadow({ mode: 'open' });
const container = document.createElement('div');
shadowRoot.appendChild(container);
const root = createRoot(container);

root.render(
  <StyleProvider container={shadowRoot}>
    <MyApp />
  </StyleProvider>,
);
```

----------------------------------------

TITLE: Configuring Upward Suggestion Placement in Ant Design (English)
DESCRIPTION: This code snippet demonstrates how to change the placement of suggestions to expand upwards in Ant Design, explained in English.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/demo/placement.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
## en-US

Change the suggestions placement.
```

----------------------------------------

TITLE: Component Token Usage
DESCRIPTION: Demonstrates usage related to component tokens for styling the Badge. Code referenced from ./demo/component-token.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
./demo/component-token.tsx
```

----------------------------------------

TITLE: Configuring Ant Design StyleProvider for Shadow DOM (TSX)
DESCRIPTION: Demonstrates how to use `@ant-design/cssinjs`'s `StyleProvider` with the `container` prop to specify where styles should be injected when rendering Ant Design components within a Shadow DOM. Requires creating a container element inside the shadow root.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.zh-CN.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import { StyleProvider } from '@ant-design/cssinjs';
import { createRoot } from 'react-dom/client';

const shadowRoot = someEle.attachShadow({ mode: 'open' });
const container = document.createElement('div');
shadowRoot.appendChild(container);
const root = createRoot(container);

root.render(
  <StyleProvider container={shadowRoot}>
    <MyApp />
  </StyleProvider>,
);
```

----------------------------------------

TITLE: Defining TransformAction Type Alias in TypeScript
DESCRIPTION: Defines the TypeScript type alias `TransformAction`, listing the possible actions that can trigger a transformation change in the Ant Design Image preview, such as flipping, rotating, zooming, closing, navigating, or dragging.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
type TransformAction =
  | 'flipY'
  | 'flipX'
  | 'rotateLeft'
  | 'rotateRight'
  | 'zoomIn'
  | 'zoomOut'
  | 'close'
  | 'prev'
  | 'next'
  | 'wheel'
  | 'doubleClick'
  | 'move'
  | 'dragRebound';
```

----------------------------------------

TITLE: Customizing Component Token for Anchor in React
DESCRIPTION: Debug demo import for customizing component tokens, displayed in an iframe with a height of 800px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_9

LANGUAGE: tsx
CODE:
```
<code src="./demo/component-token.tsx" iframe="800" debug>Component Token</code>
```

----------------------------------------

TITLE: Controlling QR Code Status in Ant Design
DESCRIPTION: The 'status' prop can be used to control the state of a QR code component. It accepts four values: 'active', 'expired', 'loading', and 'scanned'. This allows for dynamic updating of the QR code's appearance based on its current state.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/qr-code/demo/status.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## zh-CN

可以通过 `status` 的值控制二维码的状态，提供了 `active`、`expired`、`loading`、`scanned` 四个值。

## en-US

The status can be controlled by the value `status`, four values ​​of `active`, `expired`, `loading`, `scanned` are provided.
```

----------------------------------------

TITLE: Overflow Count
DESCRIPTION: Illustrates how the Badge displays a capped number when the count exceeds a limit. Code referenced from ./demo/overflow.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
./demo/overflow.tsx
```

----------------------------------------

TITLE: Creating a Category Form Component with Refine and Ant Design
DESCRIPTION: Example of a React component using Refine's hooks and Ant Design components to create a form for adding a new category. It demonstrates the integration of Refine's form handling with Ant Design's Form and Input components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-refine.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
import { Create, useForm } from '@refinedev/antd';
import { Form, Input } from 'antd';

export const CategoryCreate = () => {
  const { formProps, saveButtonProps } = useForm();

  return (
    <Create saveButtonProps={saveButtonProps}>
      <Form {...formProps} layout="vertical">
        <Form.Item label={'Title'} name={['title']} rules={[{ required: true }]}>
          <Input />
        </Form.Item>
      </Form>
    </Create>
  );
};
```

----------------------------------------

TITLE: Initializing Umi Project with pnpm
DESCRIPTION: Commands to create a new Umi project using pnpm package manager and select project template options.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ mkdir myapp && cd myapp
$ pnpm create umi
```

----------------------------------------

TITLE: Installing Dependencies for Ant Design Whole Style Export Script
DESCRIPTION: Shows the command to install development dependencies (`ts-node`, `tslib`, `cross-env`) required for running the TypeScript script that generates the full Ant Design CSS file using the 'Whole Export' method. These packages enable running TypeScript files directly in Node.js and managing environment variables.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm install ts-node tslib cross-env --save-dev
```

----------------------------------------

TITLE: Setting Common Props Ant Design Select TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Select component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and an optional `showSearch` (boolean).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_16

LANGUAGE: TypeScript
CODE:
```
{ className?: string, showSearch?: boolean, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Setting Common Props Ant Design Radio TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Radio component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Importing Space Component in TypeScript
DESCRIPTION: Basic usage example of the Space component, imported from the Ant Design library.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
<code src="./demo/base.tsx">基本用法</code>
```

----------------------------------------

TITLE: Incorrect SSR @layer Style Order (HTML)
DESCRIPTION: Illustrates an incorrect order for injecting styles in an SSR scenario when using `@layer`. The `@layer` definition (`@layer xxx, antd;`) must appear *before* the styles assigned to those layers (`@layer antd { ... }`).
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.zh-CN.md#_snippet_5

LANGUAGE: html
CODE:
```
<head>
  <!-- SSR 注入样式 -->
  <style>
    @layer antd {
      /** ... */
    }
  </style>

  <!-- css 文件中包含 @layer xxx, antd; -->
  <link rel="stylesheet" href="/b9a0m0b9o0o3.css" />
  <!-- or 直接书写 @layer xxx, antd; 在 html 中 -->
  <style>
    @layer xxx, antd;
  </style>
</head>
```

----------------------------------------

TITLE: Starting Farm Project Development Server (Bash)
DESCRIPTION: This bash snippet shows the commands to navigate into the 'farm-project' directory, install node modules using npm, and then start the development server. It assumes a project named 'farm-project' was created by the previous initialization step and requires Node.js and npm installed.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-farm.zh-CN.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ cd farm-project
$ npm install
$ npm start
```

----------------------------------------

TITLE: Defining Image Preview Transform Actions in TypeScript
DESCRIPTION: TypeScript type alias `TransformAction` enumerates the possible user or system actions (like zooming, rotating, closing, dragging) that can trigger a change in the image preview's transformation state. It's used in the `onTransform` callback to identify the action performed.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
type TransformAction =
  | 'flipY'
  | 'flipX'
  | 'rotateLeft'
  | 'rotateRight'
  | 'zoomIn'
  | 'zoomOut'
  | 'close'
  | 'prev'
  | 'next'
  | 'wheel'
  | 'doubleClick'
  | 'move'
  | 'dragRebound'
  | 'reset';
```

----------------------------------------

TITLE: Setting Common Props Ant Design Tag TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Tag component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and an optional `closeIcon` (React.ReactNode).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_26

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode }
```

----------------------------------------

TITLE: Custom Title
DESCRIPTION: Demonstrates setting a custom title attribute for the Badge. Code referenced from ./demo/title.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
./demo/title.tsx
```

----------------------------------------

TITLE: Illustrating ConfigProvider's Direct Dependency on rc-field-form's FormProvider in TSX
DESCRIPTION: This simplified example demonstrates how `ConfigProvider` internally uses `FormProvider` from the `rc-field-form` library to provide the `validateMessages` functionality. This direct dependency causes `rc-field-form` code to be included in the bundle whenever `ConfigProvider` is used, potentially hindering Tree Shaking if Forms are not explicitly used elsewhere.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
// Sample only. Not real world code.
import { FormProvider } from 'rc-field-form';

const ConfigProvider = ({ validateMessages, children }) => {
  const mergedValidateMessages = React.useMemo(
    () => merge(antdDefaultValidateMessages, validateMessages),
    [validateMessages],
  );

  return (
    <FormProvider validateMessages={mergedValidateMessages}>
      <SomeOtherProvider>{children}</SomeOtherProvider>
    </FormProvider>
  );
};
```

----------------------------------------

TITLE: Styling Ant Design Grid Rows for Alignment Demo (CSS)
DESCRIPTION: This CSS rule targets Ant Design grid rows (elements containing the class `ant-row`) that are descendants of an element with the ID `grid-demo-flex-align`. It sets a light, semi-transparent gray background (`rgba(128, 128, 128, 0.08)`) for these rows, likely to enhance visibility in a demo showcasing vertical alignment features.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/flex-align.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
#grid-demo-flex-align [class~='ant-row'] {
  background: rgba(128, 128, 128, 0.08);
}
```

----------------------------------------

TITLE: Adding Route Names for ProLayout Menu (.umirc.ts Diff)
DESCRIPTION: Updates the Umi configuration (`.umirc.ts`) by adding a `name` property to each route definition, providing necessary metadata for ProLayout to render navigation menus correctly.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.zh-CN.md#_snippet_3

LANGUAGE: diff
CODE:
```
import { defineConfig } from "umi";

export default defineConfig({
  routes: [
-    { path: "/", component: "index" },
+    { path: "/", component: "index", name: "home" },
-    { path: "/docs", component: "docs" },
+    { path: "/docs", component: "docs", name: "docs" },
-    { path: "/products", component: "products" },
+    { path: "/products", component: "products", name: "products" },
  ],
  plugins: ["@umijs/plugins/dist/react-query"],
  reactQuery: {},
  npmClient: "pnpm",
});
```

----------------------------------------

TITLE: Flex Typesetting Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file illustrating using flexbox properties ('justify', 'align') on the Row component for horizontal arrangement (typesetting) of columns in an Ant Design grid. The actual code implementing this example resides in the './demo/flex.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: html
CODE:
```
<code src="./demo/flex.tsx">Typesetting</code>
```

----------------------------------------

TITLE: Styling Icon Wrapper for Slider in CSS
DESCRIPTION: This CSS snippet defines styles for positioning icons beside a slider. It sets up a wrapper with padding and positions icons absolutely on either end. The styles also include color changes for active state and ensure proper alignment for right-to-left languages.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/demo/icon-slider.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
.icon-wrapper {
  position: relative;
  padding: 0 30px;
}

.icon-wrapper .anticon {
  position: absolute;
  top: -2px;
  width: 16px;
  height: 16px;
  color: rgba(0, 0, 0, 0.25);
  font-size: 16px;
  line-height: 1;
}

.icon-wrapper .icon-wrapper-active {
  color: rgba(0, 0, 0, 0.45);
}

.icon-wrapper .anticon:first-child {
  inset-inline-start: 0;
}

.icon-wrapper .anticon:last-child {
  inset-inline-end: 0;
}
```

----------------------------------------

TITLE: Styling the Dynamic Delete Button (CSS)
DESCRIPTION: Provides CSS rules to style a dynamic delete button element. It sets the button's relative positioning, margins, default color, font size, cursor type, and adds a smooth transition effect. Styles are also defined for the hover state (changing color) and the disabled state (changing cursor and reducing opacity), enhancing user interaction feedback.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/demo/dynamic-form-item.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.dynamic-delete-button {
  position: relative;
  top: 4px;
  margin: 0 8px;
  color: #999;
  font-size: 24px;
  cursor: pointer;
  transition: all 0.3s;
}
.dynamic-delete-button:hover {
  color: #777;
}
.dynamic-delete-button[disabled] {
  cursor: not-allowed;
  opacity: 0.5;
}

```

----------------------------------------

TITLE: Setting Common Props Ant Design Tooltip TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Tooltip component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and optional `classNames` and `styles` for fine-grained control.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_30

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, classNames?:[Tooltip["classNames"]](/components/tooltip#api), styles?: [Tooltip["styles"]](/components/tooltip#api) }
```

----------------------------------------

TITLE: Importing Popover Trigger Types Example in React
DESCRIPTION: Imports an example showing three different ways to trigger the Popover component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<code src="./demo/triggerType.tsx">Three ways to trigger</code>
```

----------------------------------------

TITLE: Importing Popover Placement Example in React
DESCRIPTION: Imports an example demonstrating various placement options for the Popover component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<code src="./demo/placement.tsx">Placement</code>
```

----------------------------------------

TITLE: Local Visual Regression Testing Command
DESCRIPTION: Command for running visual regression tests locally before submitting a PR. Provides interactive prompts for selecting specific components to test.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/visual-regression.en-US.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm run test:visual-regression:local # Follow the prompts to select components for visual regression testing
```

----------------------------------------

TITLE: Configuring TypeScript for Ant Design CSS Generation Script
DESCRIPTION: Provides the `tsconfig.node.json` configuration necessary for `ts-node` to correctly compile and execute the TypeScript script (`scripts/genAntdCss.tsx`) responsible for generating the Ant Design CSS file. It specifies compiler options suitable for a Node.js environment, including module resolution (`NodeNext`) and JSX support.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "strictNullChecks": true,
    "module": "NodeNext",
    "jsx": "react",
    "esModuleInterop": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"]
}
```

----------------------------------------

TITLE: Installing Ant Design in Vite React Project
DESCRIPTION: Commands to install the Ant Design library using npm, yarn, pnpm, or bun package managers.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ npm install antd --save
$ yarn add antd
$ pnpm install antd --save
$ bun add antd
```

----------------------------------------

TITLE: React Component Demonstrating NodeList Differences in React 17 vs 18 - TSX
DESCRIPTION: A simple React component that renders a div containing a paragraph. It uses a ref to access the div's `childNodes` in a `useEffect` hook and logs them. This component is used to empirically show how React 18 omits empty text nodes that React 17 includes in the DOM's child list, explaining the root cause of snapshot differences.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_8

LANGUAGE: tsx
CODE:
```
import React, { useEffect, useRef, version } from 'react';

const App: React.FC = () => {
  const holderRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    console.log(holderRef.current?.childNodes);
  }, []);
  return (
    <div ref={holderRef}>
      <p>{version}</p>
    </div>
  );
};

export default App;
```

----------------------------------------

TITLE: Rendering List Grid with Fragment and Wrapped Items in React
DESCRIPTION: This code snippet showcases the List component with grid prop, demonstrating its behavior with Fragment and custom-wrapped List.Item components. It tests the grid layout in various edge cases.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/demo/grid-test.md#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
import { List } from 'antd';
import React, { Fragment } from 'react';

const data = [
  { title: 'Title 1' },
  { title: 'Title 2' },
  { title: 'Title 3' },
  { title: 'Title 4' },
  { title: 'Title 5' },
  { title: 'Title 6' },
];

const ListItem = ({ children }) => <List.Item>{children}</List.Item>;

const Demo = () => (
  <List
    grid={{
      gutter: 16,
      column: 4,
    }}
    dataSource={data}
    renderItem={(item) => (
      <>
        <List.Item>
          <div>{item.title}</div>
        </List.Item>
        <Fragment>
          <List.Item>
            <div>{item.title}</div>
          </List.Item>
        </Fragment>
        <ListItem>
          <div>{item.title}</div>
        </ListItem>
      </>
    )}
  />
);

export default Demo;
```

----------------------------------------

TITLE: Illustrating React 17 Component Unmount/Mount Order (React)
DESCRIPTION: This full React example demonstrates the order of operations when switching between components (`A` and `B`) in React 17 StrictMode (and potentially in other scenarios like transitions). It shows that when transitioning from `A` to `B`, `B` renders and its mount effect can occur *before* `A`'s unmount cleanup effect. This timing difference is problematic for shared resources managed with reference counting based on `useEffect` cleanup.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.zh-CN.md#_snippet_7

LANGUAGE: tsx
CODE:
```
import React from 'react';

const A = () => {
  React.useMemo(() => {
    console.log('A render');
  }, []);

  React.useEffect(() => {
    console.log('A mounted');
    return () => {
      console.log('A unmounted');
    };
  }, []);

  return <div>A</div>;
};

const B = () => {
  React.useMemo(() => {
    console.log('B render');
  }, []);

  React.useEffect(() => {
    console.log('B mounted');
    return () => {
      console.log('B unmounted');
    };
  }, []);

  return <div>B</div>;
};

export default function App() {
  const [show, setShow] = React.useState(true);

  const toggle = () => {
    setShow((prev) => !prev);
  };

  return (
    <div>
      <button onClick={toggle}>toggle</button>
      <div>{show ? <A /> : <B />}</div>
    </div>
  );
};

// Console:
// B render
// B render
// A unmounted
// B mounted
// B unmounted
// B mounted
```

----------------------------------------

TITLE: Describing Popup Positioning in English
DESCRIPTION: Explains in English that the popup will be shifted if there's not enough space after flipping to ensure it's fully displayed.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/debug-flip-shift.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
## en-US

Shift the popup if not enough space after flip.
```

----------------------------------------

TITLE: DatePicker Common API - maxDate
DESCRIPTION: 最大日期，同样会限制面板的切换范围。从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_18

LANGUAGE: typescript
CODE:
```
maxDate: dayjs
```

----------------------------------------

TITLE: DatePicker API - defaultValue
DESCRIPTION: 默认日期，如果开始时间或结束时间为 `null` 或者 `undefined`，日期范围将是一个开区间。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_43

LANGUAGE: typescript
CODE:
```
defaultValue: dayjs
```

----------------------------------------

TITLE: Style Insertion with useInsertionEffect Refcounting | TypeScript/React (Pseudocode)
DESCRIPTION: Pseudocode showing useInsertionEffect for style reference-counting: increments on insertion, decrements/removes styles on cleanup. Intended to solve timing issues present in render-phase or useMemo-based insertion under Suspense or StrictMode. No actual style code, purely shows hook lifecycle and reference counting.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_4

LANGUAGE: TSX
CODE:
```
// pseudocode. Not used in real world\nuseInsertionEffect(() => {\n  if (!counter[hash]) {\n    // Insert only when current style not inserted\n  }\n  counter[hash] += 1;\n\n  return () => {\n    counter[hash] -= 1;\n\n    if (!counter[hash]) {\n      // Remove if set to clear on destroy\n    }\n  };\n}, [hash]);
```

----------------------------------------

TITLE: Updating Layout to Include Products Link
DESCRIPTION: Diff showing the addition of a navigation link to the products page in the global layout file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_5

LANGUAGE: diff
CODE:
```
<li>
  <Link to="/docs">Docs</Link>
</li>
+ <li>
+   <Link to="/products">Products</Link>
+ </li>
```

----------------------------------------

TITLE: Configuring Vite Build Options for Bundling (Vite/TypeScript)
DESCRIPTION: This configuration object (likely for Vite in JavaScript/TypeScript) specifies build settings for CSS targets, library formats, rollup output options, external dependencies, and minification strategies. Dependencies include Vite, Rollup, and compatible CSS bundlers. The main parameters are root directory, build mode, external packages (react, react-dom), output directory, and minification toggle based on production. Input is the environment and build formats, output is a bundle placed in './lib/bundle'. Limitations include its project-specific nature and assumption of certain directory structures.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
{
    root: process.cwd(),
    mode: env,
    logLevel: 'silent',
    define: { 'process.env.NODE_ENV': `"${env}"` },
    build: {
      cssTarget: 'chrome61',
      lib: {
        formats,
        ...
      },
      rollupOptions: {
       output: {
          dir: './lib/bundle',
          globals: {
            'react': 'React',
            'react-dom': 'ReactDOM',
          },
        },
      },
      minify: isProd ? 'esbuild' : false,
    },
  }
```

----------------------------------------

TITLE: Modifying Umi Route Configuration for ProLayout in JavaScript (Diff Format)
DESCRIPTION: This snippet demonstrates how to enhance Umi's route configuration objects to include a 'name' property for each route. Adding the 'name' field allows ProLayout to render menus based on these routes. Dependencies include a Umi project setup, '@umijs/plugins/dist/react-query', and the pnpm package manager. Key parameters modified are the 'name' fields for each route object. The expected outcome is dynamically generated, named menu items in the application's layout. No additional constraints are imposed, but this should be placed in the Umi configuration file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_10

LANGUAGE: Diff
CODE:
```
import { defineConfig } from "umi";

export default defineConfig({
  routes: [
-    { path: "/", component: "index" },
+    { path: "/", component: "index", name: "home" },
-    { path: "/docs", component: "docs" },
+    { path: "/docs", component: "docs", name: "docs" },
-    { path: "/products", component: "products" },
+    { path: "/products", component: "products", name: "products" },
  ],
  plugins: ["@umijs/plugins/dist/react-query"],
  reactQuery: {},
  npmClient: "pnpm",
});
```

----------------------------------------

TITLE: Customizing Alert Banner in Ant Design React
DESCRIPTION: This example demonstrates how to customize the Alert banner by setting a different type and removing the default icon.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/demo/banner.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
<Alert message="Very long warning text warning text text text text text text text" banner closable />
```

----------------------------------------

TITLE: Defining DisabledTime Type for Custom Disabled Time Logic (TypeScript)
DESCRIPTION: This TypeScript snippet defines the 'DisabledTime' function type, which configures the times that cannot be selected in the TimePicker component. It accepts a Dayjs object and returns an object of callback functions to disable specific hours, minutes, seconds, or milliseconds. No dependencies are required other than TypeScript and Day.js typings. The function allows fine-grained control over disabled values based on the currently selected time, and the 'disabledMilliseconds' property requires Ant Design version 5.14.0 or higher.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/time-picker/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
type DisabledTime = (now: Dayjs) => {\n  disabledHours?: () => number[];\n  disabledMinutes?: (selectedHour: number) => number[];\n  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];\n  disabledMilliseconds?: (\n    selectedHour: number,\n    selectedMinute: number,\n    selectedSecond: number,\n  ) => number[];\n};
```

----------------------------------------

TITLE: Starting Umi Development Server
DESCRIPTION: Command to start the Umi development server and view the application in a browser.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ npm run dev
```

----------------------------------------

TITLE: QRCode Status Type Definition
DESCRIPTION: TypeScript type definition for the StatusRenderInfo interface used in QRCode component for custom status rendering.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/qr-code/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
type StatusRenderInfo = {
  status: QRStatus;
  locale: Locale['QRCode'];
  onRefresh?: () => void;
};
```

----------------------------------------

TITLE: Handling Diverse Child Elements in Space
DESCRIPTION: This example demonstrates how the Space component handles various types of child elements.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_11

LANGUAGE: tsx
CODE:
```
<code src="./demo/debug.tsx" debug>Diverse Child</code>
```

----------------------------------------

TITLE: Illustrating StrictMode Component Lifecycle in React 18 (React)
DESCRIPTION: This snippet shows how React 18's StrictMode intentionally double-invokes render and effect cycles during development. It demonstrates that the component renders twice, the `useMemo` callback runs twice, and the `useEffect` mount and cleanup callbacks are called sequentially (`effect`, `effect cleanup`, `effect`) to help developers ensure their effects are properly cleaned up.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.zh-CN.md#_snippet_2

LANGUAGE: tsx
CODE:
```
const My = () => {
  console.log('render');

  useMemo(() => {
    console.log('memo');
  }, []);

  useEffect(() => {
    console.log('effect');

    return () => {
      console.log('effect cleanup');
    };
  }, []);
};

<StrictMode>
  <My />
</StrictMode>;

// Console:
// - render
// - memo
// - render
// - memo
// - effect
// - effect cleanup
// - effect
```

----------------------------------------

TITLE: Setting Draggable Range Track in Ant Design (Chinese)
DESCRIPTION: This snippet demonstrates how to configure a draggable range track in Ant Design components using Chinese language. It specifies that the `range.draggableTrack` property can be set to make the entire range scale draggable.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/demo/draggableTrack.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

可以设置 `range.draggableTrack`，使得范围刻度整体可拖拽。
```

----------------------------------------

TITLE: DatePicker API - showTime.defaultValue
DESCRIPTION: 设置用户选择日期时默认的时分秒。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_51

LANGUAGE: typescript
CODE:
```
showTime.defaultValue: dayjs
```

----------------------------------------

TITLE: Manually Extracting Ant Design Select Option Type with TypeScript
DESCRIPTION: This snippet shows a traditional TypeScript method for extracting the type of a single option from the `options` prop of an Ant Design Select component. It uses the `NonNullable` utility type and indexed access (`[number]`) on the `options` property of `SelectProps` to derive the `SelectOption` type. This illustrates the complexity the new utility types aim to reduce.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
```tsx
import type { SelectProps } from 'antd';

type SelectOption<T> = NonNullable<SelectProps<T>['options']>[number];
```
```

----------------------------------------

TITLE: Styling Resizable Columns for Ant Design Table with react-resizable (CSS)
DESCRIPTION: This CSS snippet provides styles for integrating column resizing functionality using react-resizable in Ant Design tables. It targets the primary resizable column container and the resizing handle to ensure proper positioning (using relative and absolute positioning), cursor display (col-resize), and interaction layering (z-index 1). Dependencies include the Ant Design table component and installation of react-resizable. The main parameters are the CSS selectors for the table demo and handle elements. The expected effect is visually styled, interactable resize handles on columns. This CSS should be included alongside the JavaScript logic that applies react-resizable to table columns.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/resizable-column.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
#table-demo-resizable-column .react-resizable {
  position: relative;
  background-clip: padding-box;
}

#table-demo-resizable-column .react-resizable-handle {
  position: absolute;
  inset-inline-end: -5px;
  bottom: 0;
  z-index: 1;
  width: 10px;
  height: 100%;
  cursor: col-resize;
}

```

----------------------------------------

TITLE: Installing Ant Design v5 using npm
DESCRIPTION: This command uses npm (Node Package Manager) to install and save Ant Design version 5.x as a project dependency. It updates the `antd` package entry in `package.json` and downloads the necessary library files.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm install --save antd@5.x
```

----------------------------------------

TITLE: Text Measurement Implementation in TypeScript/React
DESCRIPTION: Implementation of text measurement using a span element to calculate line height for ellipsis.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<div>
  {text}
  {measuring && <span ref={measureRef}>&nbsp;</span>}
</div>
```

----------------------------------------

TITLE: Observing React Child Node Differences Between Versions with TSX
DESCRIPTION: This TSX code defines a simple React functional component. It uses `useRef` to get a reference to the div element and `useEffect` to log its `childNodes` after the component mounts. The purpose is to experimentally compare the `childNodes` list generated by React 17 versus React 18, demonstrating that React 18 omits empty text nodes that React 17 includes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_11

LANGUAGE: tsx
CODE:
```
import React, { useEffect, useRef, version } from 'react';

const App: React.FC = () => {
  const holderRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    console.log(holderRef.current?.childNodes);
  }, []);
  return (
    <div ref={holderRef}>
      <p>{version}</p>
    </div>
  );
};

export default App;
```

----------------------------------------

TITLE: Running Ant Design v5 Codemod Tool using npx or pnpm
DESCRIPTION: Provides shell commands to execute the `antd5-codemod` tool on a specified source directory (`src`) using either `npx` or `pnpm`. This tool automates some of the code modifications required when migrating from Ant Design v4 to v5. Requires Node.js and either npx or pnpm.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
# Run directly through npx
npx -p @ant-design/codemod-v5 antd5-codemod src

# Or run directly through pnpm
pnpm --package=@ant-design/codemod-v5 dlx antd5-codemod src
```

----------------------------------------

TITLE: Setting Common Props Ant Design Space TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Space component. Includes `size` (string literal or number), standard `className` (string) and `style` (React.CSSProperties) for styling, and optional `classNames` and `styles` for fine-grained control.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_19

LANGUAGE: TypeScript
CODE:
```
{ size: `small` | `middle` | `large` | `number`, className?: string, style?: React.CSSProperties, classNames?: [SpaceProps["classNames"]](/components/space#api), styles?: [SpaceProps["styles"]](/components/space#api) }
```

----------------------------------------

TITLE: Setting Common Props Ant Design Slider TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Slider component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and optional `classNames` and `styles` for fine-grained control.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_17

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, classNames?: [SliderProps["classNames"]](/components/slider#api), styles?: [SliderProps["styles"]](/components/slider#api) }
```

----------------------------------------

TITLE: Configuring Dependency Version with Tilde (~) in package.json
DESCRIPTION: Demonstrates how to specify a dependency version using the `~` prefix in `package.json`. This allows patch version updates when reinstalling dependencies, which is useful for projects like Ant Design that rely on frequent updates from `react-component` libraries. This approach avoids manual version upgrades after patch releases.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/contributor-development-maintenance-guide.en-US.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "rc-cascader": "~3.9.0"
  }
}
```

----------------------------------------

TITLE: Basic CSS Ellipsis Implementation in TypeScript/React
DESCRIPTION: Basic CSS implementation of text ellipsis using webkit-line-clamp property to limit text to specific number of lines.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<div
  style={{
    display: '-webkit-box',
    overflow: 'hidden',
    WebkitBoxOrient: 'vertical',
    webkitLineClamp: 3,
  }}
>
  {text}
</div>
```

----------------------------------------

TITLE: Comparing Snapshot Output and innerHTML for Empty Elements
DESCRIPTION: This snippet shows the output generated by the previous TypeScript test case. The Jest snapshot includes an empty line representing the empty text node serialized by `pretty-format`, while the `console.log` output of `innerHTML` does not show this empty node. This highlights the discrepancy investigated.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_10

LANGUAGE: snap
CODE:
```
// snapshot
exports[`debug exports modules correctly 1`] = `
<div>

  <a />
</div>
`;

// console.log
<a></a>
```

----------------------------------------

TITLE: Describing Popup Positioning in Chinese
DESCRIPTION: Explains in Chinese that if there's not enough space after flipping the popup, it will be shifted to ensure full visibility.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/debug-flip-shift.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

翻转后如果不够则偏移以供完全的展示。
```

----------------------------------------

TITLE: Workaround for Safari Folder Upload File Selection - JSX
DESCRIPTION: This code snippet shows how to set the 'accept' attribute on the Upload component to mitigate an issue in Safari where users can still select individual files during a folder upload. The pattern used is designed not to match typical file extensions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/index.zh-CN.md#_snippet_0

LANGUAGE: JSX
CODE:
```
accept: `.${'n'.repeat(100)}`;
```

----------------------------------------

TITLE: Defining Basic Image Information Structure in TypeScript
DESCRIPTION: TypeScript interface `ImgInfo` defines the structure for holding basic metadata about an image, including its URL, alt text, width, and height. This information is passed to customization callbacks like `toolbarRender` and `imageRender`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
{
  url: string;
  alt: string;
  width: string | number;
  height: string | number;
}
```

----------------------------------------

TITLE: Defining Image Preview Transform State in TypeScript
DESCRIPTION: TypeScript interface `TransformType` defines the structure for representing the transformation state of a previewed image, including its position (x, y), rotation, scale, and flip status (flipX, flipY). This state is used in callbacks like `onTransform` and `toolbarRender`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
{
  x: number;
  y: number;
  rotate: number;
  scale: number;
  flipX: boolean;
  flipY: boolean;
}
```

----------------------------------------

TITLE: Clickable Badge
DESCRIPTION: Shows how to make the Badge interactive or clickable. Code referenced from ./demo/link.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
./demo/link.tsx
```

----------------------------------------

TITLE: Configuring Safari Folder Upload Accept Property in JSX
DESCRIPTION: Workaround for Safari folder upload selection issue by setting an accept property with an impossible file extension match pattern.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: jsx
CODE:
```
accept: `.${'n'.repeat(100)}`;
```

----------------------------------------

TITLE: DatePicker Common API - defaultOpen
DESCRIPTION: 是否默认展开控制弹层。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_7

LANGUAGE: typescript
CODE:
```
defaultOpen: boolean
```

----------------------------------------

TITLE: Ant Design Form Component Consuming Proxy Context and Using rc-field-form (TSX)
DESCRIPTION: This code shows the Ant Design Form component side of the refactored solution. It consumes the validation messages from the new proxy ValidateMessageContext provided by ConfigProvider and then passes them to rc-field-form's FormProvider, keeping the direct rc-field-form dependency contained within the Form component itself.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.zh-CN.md#_snippet_4

LANGUAGE: tsx
CODE:
```
// Sample only. Not real world code.
import Form, { FormProvider } from 'rc-field-form';

import { ValidateMessageContext } from './context';

export default (props) => {
  const validateMessages = React.useContext(ValidateMessageContext);

  return (
    <FormProvider validateMessages={validateMessages}>
      <Form {...props} />
    </FormProvider>
  );
};

```

----------------------------------------

TITLE: Styling Back-to-Top Component in CSS
DESCRIPTION: This CSS snippet defines the basic styling for a back-to-top component. It sets the color of the component to a semi-transparent dark gray.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/back-top/demo/basic.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
.site-back-top-basic {
  color: rgba(64, 64, 64, 0.6);
}
```

----------------------------------------

TITLE: Building a Umi Application for Production (Bash)
DESCRIPTION: This bash snippet shows how to build a UmiJS application for production deployment using npm scripts. The command triggers Umi's build process, which bundles all assets and outputs them to the 'dist/' directory. Prerequisites include completion of application development, having the Umi CLI installed, and runnable npm scripts. The script outputs compilation status and lists resultant file sizes. The command must be executed in the project root directory.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
$ npm run build
info  - Umi v4.0.46
✔ Webpack
  Compiled successfully in 5.31s
info  - File sizes after gzip:
  122.45 kB  dist/umi.js
  575 B      dist/src__pages__products.async.js
  312 B      dist/src__pages__index.async.js
  291 B      dist/layouts__index.async.js
  100 B      dist/layouts__index.chunk.css
  55 B       dist/src__pages__products.chunk.css
event - Build index.html
```

----------------------------------------

TITLE: Creating Mock Data for Products API
DESCRIPTION: TypeScript file defining mock data and API endpoints for products using Umi's mock functionality.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_7

LANGUAGE: ts
CODE:
```
import { defineMock } from 'umi';

type Product = {
  id: string;
  name: string;
};

let products: Product[] = [
  { id: '1', name: 'Umi' },
  { id: '2', name: 'Ant Design' },
  { id: '3', name: 'Ant Design Pro' },
  { id: '4', name: 'Dva' },
];

export default defineMock({
  'GET /api/products': (_, res) => {
    res.send({
      status: 'ok',
      data: products,
    });
  },
  'DELETE /api/products/:id': (req, res) => {
    products = products.filter((item) => item.id !== req.params.id);
    res.send({ status: 'ok' });
  },
});
```

----------------------------------------

TITLE: DatePicker API - value
DESCRIPTION: 日期。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_53

LANGUAGE: typescript
CODE:
```
value: dayjs
```

----------------------------------------

TITLE: DatePicker Common API - minDate
DESCRIPTION: 最小日期，同样会限制面板的切换范围。从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_17

LANGUAGE: typescript
CODE:
```
minDate: dayjs
```

----------------------------------------

TITLE: Defining Common Properties in Ant Design Components
DESCRIPTION: Markdown table defining common properties available across Ant Design components. Currently documents the rootClassName property which allows adding a custom className to the root element of components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/common-props.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
| Property      | Description                   | Type   | Default |
| ------------- | ----------------------------- | ------ | ------- |
| rootClassName | ClassName on the root element | string | -       |
```

----------------------------------------

TITLE: Configuring Upward Suggestion Placement in Ant Design (Chinese)
DESCRIPTION: This code snippet demonstrates how to change the placement of suggestions to expand upwards in Ant Design, explained in Chinese.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/demo/placement.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

向上展开建议。
```

----------------------------------------

TITLE: Configuring Tailwind CSS v4 @layer Order (LESS)
DESCRIPTION: Provides the configuration for `global.css` when using Tailwind CSS v4 alongside Ant Design with `@layer` enabled. It defines the `@layer` order, placing `antd` appropriately within the sequence.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.zh-CN.md#_snippet_3

LANGUAGE: less
CODE:
```
@layer theme, base, antd, components, utilities;

@import 'tailwindcss';
```

----------------------------------------

TITLE: Demonstrating Timing Issue: useLayoutEffect for DOM Measurement vs Style Injection | TypeScript/React
DESCRIPTION: Shows how useLayoutEffect used for measuring DOM size can run before a subsequent useLayoutEffect that injects styles. This can lead to measurement based on stale or absent styles, causing incorrect layout calculations. Used to illustrate ordering caveat when manipulating DOM and styles programmatically.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_6

LANGUAGE: TSX
CODE:
```
// Some logic measure DOM size\nuseLayoutEffect(() => {\n  // This is not correct since style is not applied\n  const { clientHeight } = nodeRef.current;\n}, []);\n\n// Inject style\nuseLayoutEffect(() => {\n  // ...\n}, [hash]);
```

----------------------------------------

TITLE: Updating Umi Configuration for New Route
DESCRIPTION: Diff showing the addition of a new route for the 'products' page in the Umi configuration file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_4

LANGUAGE: diff
CODE:
```
import { defineConfig } from "umi";

export default defineConfig({
  routes: [
    { path: "/", component: "index" },
    { path: "/docs", component: "docs" },
+    { path: "/products", component: "products" },
  ],
  npmClient: "pnpm",
});
```

----------------------------------------

TITLE: Adding Max Constraint to Ant Design InputNumber (Diff) (JSX)
DESCRIPTION: Shows a diff demonstrating the addition of a `max={99}` prop directly to the Ant Design `InputNumber` component. This change attempts to enforce a maximum value constraint at the component level.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.zh-CN.md#_snippet_7

LANGUAGE: JSX
CODE:
```
--  <InputNumber />
++  <InputNumber max={99} />
```

----------------------------------------

TITLE: Link Props API Table in Markdown
DESCRIPTION: Markdown table describing the API props for the Link component, which is a legacy way to configure Anchor links before the items prop was introduced.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.zh-CN.md#2025-04-23_snippet_4

LANGUAGE: markdown
CODE:
```
| 参数   | 说明                           | 类型      | 默认值 | 版本 |
| ------ | ------------------------------ | --------- | ------ | ---- |
| href   | 锚点链接                       | string    | -      |      |
| target | 该属性指定在何处显示链接的资源 | string    | -      |      |
| title  | 文字内容                       | ReactNode | -      |      |
```

----------------------------------------

TITLE: Referencing InputNumber Wheel Control Example (TSX)
DESCRIPTION: References `./demo/change-on-wheel.tsx`, demonstrating how to enable or disable value changes via mouse wheel (`changeOnWheel` prop) for the Ant Design InputNumber component (introduced in v5.14.0) in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_7

LANGUAGE: markdown
CODE:
```
<code src="./demo/change-on-wheel.tsx" version="5.14.0">Wheel</code>
```

----------------------------------------

TITLE: Referencing InputNumber Variant Examples (TSX)
DESCRIPTION: References `./demo/variant.tsx`, showcasing different visual variants (`outlined`, `borderless`, `filled`, `underlined`) of the Ant Design InputNumber component (introduced in v5.13.0) using React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_8

LANGUAGE: markdown
CODE:
```
<code src="./demo/variant.tsx" version="5.13.0">Variants</code>
```

----------------------------------------

TITLE: Configuring Tooltip Arrow in Ant Design (JSX)
DESCRIPTION: This snippet shows how to set the `arrow` property on a Tooltip component to make the arrow point at the center of the target element. The `pointAtCenter` option is set to true within the arrow object.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/arrow-point-at-center.md#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
arrow={{ pointAtCenter: true }}
```

----------------------------------------

TITLE: Running React 16 Tests
DESCRIPTION: Commands to install React 16 dependencies and run component-specific tests.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-collaborator.en-US.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm run install-react-16
npm run test component/XXX
```

----------------------------------------

TITLE: Refactored Ant Design ConfigProvider Using Proxy Context (TSX)
DESCRIPTION: This code illustrates the revised implementation of ConfigProvider that solves the Tree Shaking issue. It uses a new proxy context (ValidateMessageContext) to pass validation messages, effectively decoupling ConfigProvider's direct dependency on rc-field-form's FormProvider.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.zh-CN.md#_snippet_3

LANGUAGE: tsx
CODE:
```
// Sample only. Not real world code.
import { ValidateMessageContext } from '../form/context.ts';

const ConfigProvider = ({ validateMessages, children }) => {
  const mergedValidateMessages = ...

  return (
    // Just use the proxy context
    <ValidateMessageContext value={mergedValidateMessages}>
      <SomeOtherProvider>{children}</SomeOtherProvider>
    </ValidateMessageContext>
  );
};
```

----------------------------------------

TITLE: Applying Variants to Ant Design Divider in React/TSX
DESCRIPTION: References a demo file (`./demo/variant.tsx`) that demonstrates using the `variant` prop (e.g., 'dashed', 'dotted', 'solid') to change the line style of the Ant Design `Divider` in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_6

LANGUAGE: html
CODE:
```
<code src="./demo/variant.tsx">Variant</code>
```

----------------------------------------

TITLE: Referencing InputNumber Addon Example (TSX)
DESCRIPTION: References `./demo/addon.tsx`, demonstrating how to add elements before (`addonBefore`) or after (`addonAfter`) the Ant Design InputNumber component in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
<code src="./demo/addon.tsx">Pre / Post tab</code>
```

----------------------------------------

TITLE: Image Fallback Props Reference in Ant Design
DESCRIPTION: Demonstrates the fallback mechanism when an image fails to load. The system follows a priority sequence: first checking if src is a ReactElement, then falling back to icon prop, and finally displaying children content.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/avatar/demo/fallback.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
src - ReactElement\nicon\nchildren
```

----------------------------------------

TITLE: Displaying Ant Design Deprecation Warning
DESCRIPTION: Example of the standard warning message format displayed in the console when an Ant Design prop is deprecated, indicating the old prop and suggesting the new one. This warning signals historical API debt being addressed.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.en-US.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
Warning: [antd: XXX] `old prop` is deprecated. Please use `new prop` instead.
```

----------------------------------------

TITLE: Setting Base Background Color for Hue in CSS
DESCRIPTION: This CSS snippet sets the panel's background color to a specific RGB value, representing a color with maximum saturation and brightness. There are no external dependencies. The key parameter is the rgb() value, and the output is a solid background color. This sets the foundation for subsequent overlays to represent the HSV color model.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.en-US.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
background-color: rgb(0, 106, 255);
```

----------------------------------------

TITLE: DatePicker API - onChange
DESCRIPTION: 时间发生变化的回调。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_54

LANGUAGE: typescript
CODE:
```
onChange: function(date: dayjs, dateString: string)
```

----------------------------------------

TITLE: Displaying Informational Alert Using Ant Design Alert Component - JSX
DESCRIPTION: This snippet demonstrates how to render an informational banner alert using the Ant Design Alert component in JSX. It communicates to developers that the listed APIs are shared across Tooltip, Popconfirm, and Popover components. This snippet depends on Ant Design's core library and should be used within a React or compatible JSX-rendering environment. The Alert receives properties for message text, alert type, and banner styling; no inputs or outputs beyond the rendered UI element are expected.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tooltip/shared/sharedProps.en-US.md#2025-04-23_snippet_0

LANGUAGE: JSX
CODE:
```
<Antd component="Alert" message="The following APIs are shared by Tooltip, Popconfirm, Popover." type="info" banner="true"></Antd>
```

----------------------------------------

TITLE: Removing Ant Design Internal Less Imports in Custom Stylesheets for v5
DESCRIPTION: Illustrates the necessary change in custom Less files when migrating to Ant Design v5. Since v5 removes internal Less files and variables, direct `@import` statements referencing `antd/es/style/themes/index` or other internal Ant Design Less files must be removed. Theme values should be accessed via CSS-in-JS or the variable injection method.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_9

LANGUAGE: diff
CODE:
```
// Your less file
--  @import (reference) '~antd/es/style/themes/index';
or
--  @import '~antd/es/style/some-other-less-file-ref';
```

----------------------------------------

TITLE: Extracted CSS Styles Example
DESCRIPTION: Shows an example of the final CSS output extracted from the CSS-in-JS cache on the server side. These styles are then served as a static CSS file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.zh-CN.md#_snippet_0

LANGUAGE: css
CODE:
```
:where(.bAMbOo).ant-btn {
  color: red;
}
:where(.bAMbOo).ant-spin {
  color: blue;
}
```

----------------------------------------

TITLE: Generated CSS Output Example
DESCRIPTION: Shows the CSS output generated from the cache structure after processing.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.en-US.md#2025-04-23_snippet_1

LANGUAGE: css
CODE:
```
:where(.bAMbOo).ant-btn {
  color: red;
}
:where(.bAMbOo).ant-spin {
  color: blue;
}
```

----------------------------------------

TITLE: Defining Alert Types in Ant Design
DESCRIPTION: Shows the four available alert types in Ant Design: success, info, warning, and error. These types can be specified when implementing the Alert component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/demo/style.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## zh-CN

共有四种样式 `success`、`info`、`warning`、`error`。

## en-US

There are 4 types of Alert: `success`, `info`, `warning`, `error`.
```

----------------------------------------

TITLE: Calculating Saturation and Brightness from Pointer Offset in TypeScript
DESCRIPTION: This TypeScript code calculates the saturation and brightness based on the anchor (pointer) offset and the size of the color panel. It assumes references to DOM containers and targets via containerRef and targetRef, requiring access to their bounding rectangles. 'offset.x' and 'offset.y' are pointer positions; output is normalized saturation (0-1) and brightness (0-1). The calculation accounts for the anchor's center, enabling accurate real-time synching between user input and color selection.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.en-US.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
...
const { width, height } = containerRef.current.getBoundingClientRect();
const { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();
const centerOffsetX = targetWidth / 2;
const centerOffsetY = targetHeight / 2;
// Saturation
const saturation = (offset.x + centerOffsetX) / width;
// Brightness
const bright = 1 - (offset.y + centerOffsetY) / height;
```

----------------------------------------

TITLE: DatePicker Common API - style
DESCRIPTION: 自定义输入框样式。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_33

LANGUAGE: typescript
CODE:
```
style: CSSProperties
```

----------------------------------------

TITLE: Importing Popover Component Token Example in React
DESCRIPTION: Imports a debug example demonstrating the use of component tokens with the Popover.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_10

LANGUAGE: tsx
CODE:
```
<code src="./demo/component-token.tsx" debug>Component Token</code>
```

----------------------------------------

TITLE: Utilizing Component Tokens with Ant Design Divider in React/TSX
DESCRIPTION: References a demo file (`./demo/component-token.tsx`) showing advanced customization of the Ant Design `Divider` using Design Tokens in React/TypeScript. Marked as 'debug'.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: html
CODE:
```
<code src="./demo/component-token.tsx" debug>Component Token</code>
```

----------------------------------------

TITLE: Running Rsbuild Development Server (Bash)
DESCRIPTION: After initializing the project and installing dependencies, navigate into the project directory and start the development server using npm.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-rsbuild.zh-CN.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ cd demo
$ npm run dev
```

----------------------------------------

TITLE: CSS Styling for Ant Design Empty Component Built-in Images
DESCRIPTION: This CSS code defines styles for the container elements used to display the built-in images (`PRESENTED_IMAGE_SIMPLE` and `PRESENTED_IMAGE_DEFAULT`) associated with the Ant Design `Empty` component. It sets background images, dimensions, and other background properties to ensure the predefined images render correctly.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/empty/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: css
CODE:
```
.site-empty-buildIn-img {
  background-repeat: no-repeat;
  background-size: contain;
}
.site-empty-buildIn-simple {
  width: 55px;
  height: 35px;
  background-image: url("https://user-images.githubusercontent.com/507615/54591679-b0ceb580-4a65-11e9-925c-ad15b4eae93d.png");
}
.site-empty-buildIn-default {
  width: 121px;
  height: 116px;
  background-image: url("https://user-images.githubusercontent.com/507615/54591670-ac0a0180-4a65-11e9-846c-e55ffce0fe7b.png");
}
```

----------------------------------------

TITLE: Installing and Initializing Vite React Project
DESCRIPTION: Commands to create a new Vite React project named 'antd-demo' using npm, yarn, pnpm, or bun package managers.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm create vite antd-demo
$ yarn create vite antd-demo
$ pnpm create vite antd-demo
$ bun create vite antd-demo
```

----------------------------------------

TITLE: Alert Component API Properties
DESCRIPTION: Table describing the API properties available for the Alert component, including action, afterClose, banner, closable, description, icon, message, showIcon, type, and onClose properties.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| action | The action of Alert | ReactNode | - | 4.9.0 |
| afterClose | Called when close animation is finished | () => void | - |  |
| banner | Whether to show as banner | boolean | false |  |
| closable | The config of closable, >=5.15.0: support `aria-*` | boolean \| ({ closeIcon?: React.ReactNode } & React.AriaAttributes) | `false` |  |
| description | Additional content of Alert | ReactNode | - |  |
| icon | Custom icon, effective when `showIcon` is true | ReactNode | - |  |
| message | Content of Alert | ReactNode | - |  |
| showIcon | Whether to show icon | boolean | false, in `banner` mode default is true |  |
| type | Type of Alert styles, options: `success`, `info`, `warning`, `error` | string | `info`, in `banner` mode default is `warning` |  |
| onClose | Callback when Alert is closed | (e: MouseEvent) => void | - |  |
```

----------------------------------------

TITLE: Defining the ShowEffect Callback Type for Custom Wave Effect in Ant Design (TypeScript)
DESCRIPTION: Defines the TypeScript type signature for the showEffect function used by ConfigProvider's wave property, specifying how Ant Design communicates the target DOM node, the component identifier, and the current global theme token. Dependencies: access to appropriate type definitions, including HTMLElement and GlobalToken. Inputs include the clicked target element and info metadata; the function handles the effect as needed. No outputs are enforced; implementation is developer-defined.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/happy-work.en-US.md#2025-04-23_snippet_3

LANGUAGE: TypeScript
CODE:
```
type ShowEffect = (target: HTMLElement, info: { component: string; token: GlobalToken }) => void;
```

----------------------------------------

TITLE: Defining Basic React Component Implementation (TypeScript)
DESCRIPTION: Implements a basic React functional component `MyStr` that takes a `value` prop according to the `StrProps` interface and renders it within a div element. This component demonstrates simple value display.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.zh-CN.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
function MyStr({ value }: StrProps) {
  return <div>{value}</div>;
}
```

----------------------------------------

TITLE: Implementing Custom HTML Element Serialization Logic in Jest (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates the implementation of the `print` function for a custom Jest snapshot serializer. It first uses `pretty-format` with DOM plugins to get the standard serialization. Then, it processes the resulting string: splitting it into lines, filtering out lines that are empty after trimming, removing trailing whitespace from remaining lines, and joining them back with newlines. This normalization aims to create consistent snapshots despite underlying differences (like empty nodes from React 17 vs 18).
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
const htmlContent = format(element, {
  plugins: [plugins.DOMCollection, plugins.DOMElement],
});

expect.addSnapshotSerializer({
  test: '//...',
  print: (element) => {
    const filtered = htmlContent
      .split(/[\n\r]+/)
      .filter((line) => line.trim())
      .map((line) => line.replace(/\s+$/, ''))
      .join('\n');
    return filtered;
  },
});
```

----------------------------------------

TITLE: Managing Style Reference Counting with useMemo and useEffect (React Pseudocode)
DESCRIPTION: This pseudocode demonstrates an older approach to managing CSS-in-JS style lifecycles using React hooks. It uses `useMemo` to increment a counter and conditionally insert styles during the render phase and `useEffect` with a cleanup function to decrement the counter and conditionally remove styles on unmount. The `hash` parameter represents the unique style key, and `counter` tracks references.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
// pseudocode. Not used in real world
function useStyleInsertion(hash: string, counter: Record<string, number>) {
  useMemo(() => {
    if (!counter[hash]) {
      // Insert only when current style not inserted
    }

    counter[hash] += 1;
  }, [hash]);

  useEffect(
    () => () => {
      counter[hash] -= 1;

      if (!counter[hash]) {
        // Remove if set to clear on destroy
      }
    },
    [hash],
  );
}
```

----------------------------------------

TITLE: Setting TreeNode Properties in TreeSelect
DESCRIPTION: Definition of available props for TreeNode components within the TreeSelect. These properties allow customization of individual tree nodes, including disabling options, setting leaf state, and defining values.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree-select/index.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: TypeScript
CODE:
```
| 参数            | 说明                                               | 类型      | 默认值 | 版本 |
| --------------- | -------------------------------------------------- | --------- | ------ | ---- |
| checkable       | 当树为 Checkbox 时，设置独立节点是否展示 Checkbox  | boolean   | -      |      |
| disableCheckbox | 禁掉 Checkbox                                      | boolean   | false  |      |
| disabled        | 是否禁用                                           | boolean   | false  |      |
| isLeaf          | 是否是叶子节点                                     | boolean   | false  |      |
| key             | 此项必须设置（其值在整个树范围内唯一）             | string    | -      |      |
| selectable      | 是否可选                                           | boolean   | true   |      |
| title           | 树节点显示的内容                                   | ReactNode | `---`  |      |
| value           | 默认根据此属性值进行筛选（其值在整个树范围内唯一） | string    | -      |      |
```

----------------------------------------

TITLE: Using Native HTML Input with Max Length (HTML/JSX)
DESCRIPTION: Illustrates the behavior of a native HTML input element when provided with a `value` that exceeds its `maxLength` attribute. It shows that the native input typically displays the full value but prevents further input beyond the limit, contrasting with the intuitive component behavior.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.zh-CN.md#_snippet_5

LANGUAGE: HTML/JSX
CODE:
```
<input value="Hello World" maxLength={5} />
```

----------------------------------------

TITLE: Adding Optional Max Length Prop Interface (TypeScript)
DESCRIPTION: Extends the `StrProps` interface to include an optional `maxLen` prop of type number. This modification introduces the concept of a constraint that the component might need to consider.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.zh-CN.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
interface StrProps {
  value: string;
  maxLen?: number;
}
```

----------------------------------------

TITLE: Referencing FloatButton BackTop Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/back-top.tsx') demonstrating the usage of the Ant Design FloatButton.BackTop component for scrolling to the top of the page. The demo is intended to be displayed in an iframe with a width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_9

LANGUAGE: html
CODE:
```
<code src="./demo/back-top.tsx" iframe="360">BackTop</code>
```

----------------------------------------

TITLE: Executing Sequential Vite Builds with For...Of Loop - Javascript
DESCRIPTION: This snippet shows the corrected approach to running the Vite builds in the `gulpfile.js`. Instead of using `Promise.all` for concurrent execution, it iterates through the generated configurations using a `for...of` loop and `await`s each `vite.build` call sequentially. This ensures that file writing operations, particularly for shared assets like `style.css`, do not conflict, resolving the CI build issue.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.zh-CN.md#_snippet_2

LANGUAGE: Javascript
CODE:
```
for (const config of configs) {
  await vite.build(config);
}
```

----------------------------------------

TITLE: Setting Common Props Ant Design Progress TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Progress component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Result Component API Definition in TypeScript
DESCRIPTION: API specification for the Result component showing available properties and their types.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/result/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
interface ResultProps {
  extra?: ReactNode;
  icon?: ReactNode;
  status?: 'success' | 'error' | 'info' | 'warning' | '404' | '403' | '500';
  subTitle?: ReactNode;
  title?: ReactNode;
}
```

----------------------------------------

TITLE: SegmentedItemType Interface Definition
DESCRIPTION: TypeScript interface definition for individual Segmented items, including properties for label, value, icon, disabled state, and additional CSS classes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/segmented/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
interface SegmentedItemType {
  label?: ReactNode;  // Display text for Segmented item
  value?: string | number;  // Value for Segmented item
  icon?: ReactNode;  // Display icon for Segmented item
  disabled?: boolean;  // Disabled state of segmented item
  className?: string;  // The additional css class
}
```

----------------------------------------

TITLE: Defining TransformType Interface in TypeScript
DESCRIPTION: Defines the TypeScript interface `TransformType` used to describe the transformation state (position, rotation, scale, flip) of an image within the Ant Design Image preview.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
{
  x: number;
  y: number;
  rotate: number;
  scale: number;
  flipX: boolean;
  flipY: boolean;
}
```

----------------------------------------

TITLE: Setting Common Props Ant Design Tree TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Tree component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_34

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Setting Common Props Ant Design Tour TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Tour component. Includes an optional `closeIcon` (React.ReactNode).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_29

LANGUAGE: TypeScript
CODE:
```
{ closeIcon?: React.ReactNode }
```

----------------------------------------

TITLE: Unlinking rc-component Package in Ant Design (Bash)
DESCRIPTION: Removes a locally linked rc-component package (e.g., rc-field-form) from the Ant Design project and reinstalls the official version from npm. This is necessary to avoid potential issues when running tests after local linking and verification.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/contributor-development-maintenance-guide.en-US.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm unlink "rc-field-form" --no-save
npm i
```

----------------------------------------

TITLE: Theme Isolation CSS Implementation
DESCRIPTION: CSS implementation showing how theme styles are isolated using hash classes and CSS variables
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/css-var-plan.en-US.md#2025-04-23_snippet_1

LANGUAGE: css
CODE:
```
:where(.css-hash1).ant-btn {
  background-color: var(--color-primary);
}

:where(.css-hash2).ant-btn {
  background-color: var(--color-primary);
}

.css-hash1 {
  --color-primary: blue;
}

.css-hash2 {
  --color-primary: green;
}
```

----------------------------------------

TITLE: Using a Custom Component with an Out-of-Range Value (TSX)
DESCRIPTION: This snippet demonstrates using the `MyStr` component with a `value` ('Hello World') that exceeds the specified `maxLen` (5). The surrounding text discusses the potential (but often incorrect) intuition to display a truncated value ('Hello').
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<MyStr value="Hello World" maxLen={5}>
```

----------------------------------------

TITLE: Importing Autoplay Example
DESCRIPTION: Reference to an example demonstrating automatic scrolling functionality
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
<code src="./demo/autoplay.tsx">Scroll automatically</code>
```

----------------------------------------

TITLE: Referencing InputNumber Size Examples (TSX)
DESCRIPTION: This tag references an external file (`./demo/size.tsx`) showcasing different sizes (`large`, `middle`, `small`) available for the Ant Design InputNumber component using React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
<code src="./demo/size.tsx">Sizes</code>
```

----------------------------------------

TITLE: Referencing InputNumber Status Example (TSX)
DESCRIPTION: References `./demo/status.tsx`, demonstrating how to set validation statuses (`error`, `warning`) on the Ant Design InputNumber component using the `status` prop in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_12

LANGUAGE: markdown
CODE:
```
<code src="./demo/status.tsx">Status</code>
```

----------------------------------------

TITLE: Importing List Component Examples in TypeScript
DESCRIPTION: These code snippets import various examples of the List component, including simple list, basic list, load more functionality, vertical layout, pagination, grid layout, responsive grid, infinite scrolling, and virtual list.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
<code src="./demo/simple.tsx">Simple list</code>
<code src="./demo/basic.tsx">Basic list</code>
<code src="./demo/loadmore.tsx">Load more</code>
<code src="./demo/vertical.tsx">Vertical</code>
<code src="./demo/pagination.tsx">Pagination Settings</code>
<code src="./demo/grid.tsx">Grid</code>
<code src="./demo/grid-test.tsx" debug>Test Grid</code>
<code src="./demo/responsive.tsx">Responsive grid list</code>
<code src="./demo/infinite-load.tsx">Scrolling loaded</code>
<code src="./demo/virtual-list.tsx">virtual list</code>
<code src="./demo/component-token.tsx" debug>custom component token</code>
```

----------------------------------------

TITLE: Defining Ant Design Typography Editable Configuration Type
DESCRIPTION: Outlines the configuration object for enabling and customizing the editable feature of Typography components. It includes options for icons, tooltips, text content, validation (maxLength, autoSize), and various event handlers for the editing lifecycle.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/typography/index.en-US.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
{
  icon: ReactNode,
  tooltip: ReactNode,
  editing: boolean,
  maxLength: number,
  autoSize: boolean | { minRows: number, maxRows: number },
  text: string,
  onChange: function(string),
  onCancel: function,
  onStart: function,
  onEnd: function,
  triggerType: ('icon' | 'text')[],
  enterIcon: ReactNode,
  tabIndex: number,
}
```

----------------------------------------

TITLE: DatePicker Common Method - focus
DESCRIPTION: 获取焦点。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_41

LANGUAGE: typescript
CODE:
```
focus(): void
```

----------------------------------------

TITLE: Cloning Ant Design Repository
DESCRIPTION: Command to clone the forked Ant Design repository to local machine. Requires replacing [yourGithubAccount] with actual GitHub username.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-collaborator.en-US.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/[yourGithubAccount]/ant-design.git
```

----------------------------------------

TITLE: Referencing Basic FloatButton Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/basic.tsx') demonstrating the basic usage of the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
<code src="./demo/basic.tsx" iframe="360">Basic</code>
```

----------------------------------------

TITLE: Reproducing Modal ContextHolder Placement Bug - Ant Design Modal (TypeScript/React)
DESCRIPTION: This code demonstrates how placing `contextHolder` inside or outside an Ant Design Modal affects modal confirmation popup behavior. It uses React functional components and Ant Design imports, where the key operation is triggering `modal.confirm` and observing placement differences depending on the DOM context. Required dependencies: `antd` library, React. Inputs: user's click. Outputs: Modal confirmation dialog. The limitation is the effect of contextHolder's placement on popup positioning.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react';\nimport { Button, Modal } from 'antd';\n\nexport default () => {\n  const [modal, contextHolder] = Modal.useModal();\n\n  return (\n    <div>\n      <Modal open>\n        <Button\n          onClick={() => {\n            modal.confirm({ title: 'Hello World' });\n          }}\n        >\n          Confirm\n        </Button>\n\n        {/* 🚨 BUG when put here */}\n        {contextHolder}\n      </Modal>\n\n      {/* ✅ Work as expect when put here */}\n      {/* {contextHolder} */}\n    </div>\n  );\n};
```

----------------------------------------

TITLE: DatePicker Common API - autoFocus
DESCRIPTION: 自动获取焦点。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_2

LANGUAGE: typescript
CODE:
```
autoFocus: boolean
```

----------------------------------------

TITLE: Setting Common Props Ant Design Spin TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Spin component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and an optional `indicator` (React.ReactElement).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_21

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, indicator?: React.ReactElement }
```

----------------------------------------

TITLE: Installing Ant Design v5 as an Aliased Dependency via Package Manager (Bash)
DESCRIPTION: These shell commands install Ant Design v5 alongside v4 in a project using npm, yarn, or pnpm. The alias antd-v5 references the v5 package while allowing the v4 package to remain as antd, facilitating parallel use without version conflicts. A prerequisite is a JavaScript/React project with package managers set up.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_16

LANGUAGE: Bash
CODE:
```
$ npm install --save antd-v5@npm:antd@5
# or
$ yarn add antd-v5@npm:antd@5
# or
$ pnpm add antd-v5@npm:antd@5
```

----------------------------------------

TITLE: StatusRenderInfo Type Definition - TypeScript
DESCRIPTION: Defines the structure of the information object passed to the `statusRender` prop of the Ant Design QRCode component. It includes the current QR code status, locale-specific text, and an optional callback function for refreshing the QR code.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/qr-code/index.zh-CN.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
type StatusRenderInfo = {
  status: QRStatus;
  locale: Locale['QRCode'];
  onRefresh?: () => void;
};
```

----------------------------------------

TITLE: Defining Ant Design Typography Copyable Configuration Type
DESCRIPTION: Describes the structure and properties of the configuration object used for the `copyable` feature of the Ant Design Typography component. It lists properties like `text`, `onCopy`, `icon`, `tooltips`, `format`, and `tabIndex` with their expected types.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/typography/index.en-US.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
{
  text: string | (() => string | Promise<string>),
  onCopy: function(event),
  icon: ReactNode,
  tooltips: false | [ReactNode, ReactNode],
  format: 'text/plain' | 'text/html',
  tabIndex: number,
}
```

----------------------------------------

TITLE: Using Custom Moment.js Components Ant Design Diff
DESCRIPTION: This code diff shows how to modify an existing file (e.g., App.tsx) to replace the default Ant Design date components with the custom Moment.js-based components created using `generatePicker` and `generateCalendar`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.zh-CN.md#_snippet_4

LANGUAGE: diff
CODE:
```
- import { DatePicker, Calendar } from 'antd';
- import format from 'dayjs';

+ import { DatePicker, TimePicker, Calendar } from './components';
+ import format from 'moment';
```

----------------------------------------

TITLE: Documenting Spin Component Usage in English
DESCRIPTION: This snippet explains in English how embedding content into the Spin component will set it into a loading state, providing guidance for React developers.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/demo/nested.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
## en-US

Embedding content into `Spin` will set it into loading state.
```

----------------------------------------

TITLE: Styling Space Alignment Container and Blocks in CSS
DESCRIPTION: This CSS snippet defines styles for a flexible container and aligned blocks. It creates a layout for demonstrating different alignment options, with a container that wraps its content and individual blocks with mock content.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/align.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
.space-align-container {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
}
.space-align-block {
  flex: none;
  margin: 8px 4px;
  padding: 4px;
  border: 1px solid #40a9ff;
}
.space-align-block .mock-block {
  display: inline-block;
  padding: 32px 8px 16px;
  background: rgba(150, 150, 150, 0.2);
}
```

----------------------------------------

TITLE: Implementing Record Flattening Logic - Initial Version
DESCRIPTION: Original implementation of data flattening function for handling tree-structured data, which had performance issues due to array spreading operations.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/virtual-table.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
function flatten<T extends { children?: T[] }>(data: T[] = []) {
  let tmpList: T[] = [];

  for (let i = 0; i < data.length; i += 1) {
    const record = data[i];
    tmpList = [...tmpList, record, ...flatten(record.children)];
  }

  return tmpList;
}
```

----------------------------------------

TITLE: Installing Dependencies for Static Style Export (Bash)
DESCRIPTION: Command to install necessary development dependencies (`ts-node`, `tslib`, `cross-env`) required for running TypeScript build scripts used to export Ant Design styles to a static CSS file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.zh-CN.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install ts-node tslib cross-env --save-dev
```

----------------------------------------

TITLE: Illustrating API Inconsistency in Ant Design Select/TreeSelect
DESCRIPTION: Demonstrates historical differences in prop names (`inputValue` vs. `searchValue`) used to control the search input value in Ant Design's `Select` (combobox mode) and `TreeSelect` components before v4 unification. This highlights how different implementations led to API divergence.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
// Select in combobox mode, the search box is the input box, `inputValue` looks reasonable
<Select inputValue="search" />

// TreeSelect's search box is in the popup layer, `searchValue` is also reasonable
<TreeSelect searchValue="search" />
```

----------------------------------------

TITLE: Comparing Select and TreeSelect API Implementation
DESCRIPTION: Demonstrates the inconsistency in API naming between Select and TreeSelect components for search functionality.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
// Select 在 combobox 模式下，搜索框就是输入框，`inputValue` 看起来很合理
<Select inputValue="search" />

// TreeSelect 的搜索框在弹出层，`searchValue` 也很合理
<TreeSelect searchValue="search" />
```

----------------------------------------

TITLE: DatePicker Common API - getPopupContainer
DESCRIPTION: 定义浮层的容器，默认为 body 上新建 div。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_14

LANGUAGE: typescript
CODE:
```
getPopupContainer: function(trigger: HTMLElement) => HTMLElement
```

----------------------------------------

TITLE: Getting DOM Element Offset for Positioning - rc-dialog/util.ts (TypeScript pseudocode)
DESCRIPTION: This pseudocode provides the utility function from rc-dialog for obtaining the offset (left, top) of a DOM element using getBoundingClientRect. It's used to position elements relative to the viewport. This function requires a DOM Element as input and returns an object containing left and top positions. Dependencies: browser DOM APIs. Limitation: returns accurate data only if the element is attached to the document.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
// pseudocode\nfunction offset(el: Element) {\n  const { left, top } = el.getBoundingClientRect();\n  return { left, top };\n}
```

----------------------------------------

TITLE: Setting Common Props Ant Design Rate TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Rate component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Setting Common Props Ant Design Segmented TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Segmented component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Setting Common Props Ant Design Splitter TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Splitter component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_20

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Setting Common Props Ant Design Result TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Result component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Optimized Record Flattening Implementation
DESCRIPTION: Improved version of the flattening function that avoids unnecessary array allocations and reduces garbage collection overhead.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/virtual-table.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
function flatten<T extends { children?: T[] }>(data: T[] = [], list: T[] = []) {
  for (let i = 0; i < data.length; i += 1) {
    const record = data[i];
    list.push(record);
    flatten(record.children, list);
  }

  return list;
}
```

----------------------------------------

TITLE: Using Custom Component with Max Length Prop (JSX)
DESCRIPTION: Demonstrates using the updated `MyStr` component with both a `value` ('Hello World') and the new `maxLen` prop set to 5. This highlights the scenario where the value exceeds the specified constraint.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.zh-CN.md#_snippet_4

LANGUAGE: JSX
CODE:
```
<MyStr value="Hello World" maxLen={5}>
```

----------------------------------------

TITLE: Styling Input Addons with CSS in Ant Design
DESCRIPTION: This CSS snippet defines width styles for select elements used as addons before and after an input field in Ant Design. It sets specific widths to ensure proper alignment and sizing of the addon elements.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/compact-debug.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
.select-before {
  width: 90px;
}

.select-after {
  width: 80px;
}
```

----------------------------------------

TITLE: Calculating Scale Ratios for Popup Elements
DESCRIPTION: Code demonstrating how to calculate scale ratios for popup elements using getBoundingClientRect and offset dimensions to handle transformed elements correctly.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tooltip-align.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
const popupRect = popupEle.getBoundingClientRect();
const { offsetWidth, offsetHeight } = popupEle;

const scaleX = popupRect.width / offsetWidth;
const scaleY = popupRect.height / offsetHeight;
```

----------------------------------------

TITLE: Installing Moment Webpack Plugin for Ant Design v5 Compatibility (Bash)
DESCRIPTION: Command to install the `@ant-design/moment-webpack-plugin` as a development dependency. This plugin allows projects to continue using Moment.js instead of Day.js with Ant Design v5 if immediate migration is not feasible.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
npm install --save-dev @ant-design/moment-webpack-plugin
```

----------------------------------------

TITLE: Displaying Design Tokens for InputNumber Component
DESCRIPTION: This custom tag renders a table displaying the specific design tokens available for customizing the appearance of the Ant Design `InputNumber` component. It relies on the documentation system's component rendering capabilities.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_17

LANGUAGE: markdown
CODE:
```
<ComponentTokenTable component="InputNumber"></ComponentTokenTable>
```

----------------------------------------

TITLE: Caching Yarn Lock File in GitHub Actions
DESCRIPTION: GitHub Actions cache configuration for storing and retrieving yarn.lock files between builds, enabling dependency change detection.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/mock-project-build.en-US.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
- uses: actions/cache@v4
  with:
    path: ~tmpProj/yarn.lock
    key: primes-${{ runner.os }}-${{ github.run_id }}
    restore-keys: mock-proj-lock-file
```

----------------------------------------

TITLE: Configuring GitHub Actions Scheduled Workflow for Ant Design
DESCRIPTION: GitHub Actions workflow configuration that runs every 30 minutes to check build stability. Uses workflow_dispatch for manual triggers and scheduled cron jobs.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/mock-project-build.en-US.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'
```

----------------------------------------

TITLE: Setting Common Props Ant Design Mentions TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Mentions component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Setting Common Props Ant Design Tabs TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Tabs component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, optional `indicator` configuration, and optional `moreIcon`, `addIcon`, and `removeIcon` (ReactNode).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_25

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, indicator?: { size?: GetIndicatorSize, align?: `start` | `center` | `end` }, moreIcon?: ReactNode, addIcon?: ReactNode, removeIcon?: ReactNode }
```

----------------------------------------

TITLE: Defining ImgInfo Interface in TypeScript
DESCRIPTION: Defines the TypeScript interface `ImgInfo` used within the Ant Design Image component's preview rendering functions (`imageRender`, `toolbarRender`). It provides basic information about the image being previewed, including its URL, alt text, width, and height.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
{
  url: string;
  alt: string;
  width: string | number;
  height: string | number;
}
```

----------------------------------------

TITLE: Setting Common Props Ant Design Steps TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Steps component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_23

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Tree Scrolling Method Implementation in TypeScript
DESCRIPTION: This code snippet shows the signature of the scrollTo method available on the Tree component. It allows programmatic scrolling to specific items in a virtual scrolling tree.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
scrollTo({ key: string | number; align?: 'top' | 'bottom' | 'auto'; offset?: number })
```

----------------------------------------

TITLE: Original Ant Design ConfigProvider Wrapping rc-field-form FormProvider (TSX)
DESCRIPTION: This sample code demonstrates the previous implementation of ConfigProvider in Ant Design, where it directly imported and wrapped rc-field-form's FormProvider. This direct dependency caused rc-field-form to be included in the bundle even when not fully used, hindering Tree Shaking.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
// Sample only. Not real world code.
import { FormProvider } from 'rc-field-form';

const ConfigProvider = ({ validateMessages, children }) => {
  const mergedValidateMessages = React.useMemo(
    () => merge(antdDefaultValidateMessages, validateMessages),
    [validateMessages],
  );

  return (
    <FormProvider validateMessages={mergedValidateMessages}>
      <SomeOtherProvider>{children}</SomeOtherProvider>
    </FormProvider>
  );
};
```

----------------------------------------

TITLE: DatePicker Common API - prevIcon
DESCRIPTION: 自定义上一个图标。从 4.17.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_29

LANGUAGE: typescript
CODE:
```
prevIcon: ReactNode
```

----------------------------------------

TITLE: AutoComplete Component Methods
DESCRIPTION: Available methods for programmatically controlling the AutoComplete component focus state.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/auto-complete/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
| Name    | Description  | Version |
| ------- | ------------ | ------- |
| blur()  | Remove focus |         |
| focus() | Get focus    |         |
```

----------------------------------------

TITLE: Separator Type Definition in TypeScript
DESCRIPTION: TypeScript interface definition for the Breadcrumb separator type, showing the required properties and their types.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: ts
CODE:
```
const item = {
  type: 'separator', // Must have
  separator: '/',
};
```

----------------------------------------

TITLE: Importing Popconfirm Component Examples in TypeScript
DESCRIPTION: These code snippets demonstrate how to import and use various examples of the Popconfirm component, including basic usage, localization, placement, and advanced features.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popconfirm/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: TypeScript
CODE:
```
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/locale.tsx">Locale text</code>
<code src="./demo/placement.tsx">Placement</code>
<code src="./demo/shift.tsx" iframe="300">Auto Shift</code>
<code src="./demo/dynamic-trigger.tsx">Conditional trigger</code>
<code src="./demo/icon.tsx">Customize icon</code>
<code src="./demo/async.tsx">Asynchronously close</code>
<code src="./demo/promise.tsx">Asynchronously close on Promise</code>
<code src="./demo/render-panel.tsx" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>
<code src="./demo/wireframe.tsx" debug>Wireframe</code>
```

----------------------------------------

TITLE: Importing Basic Carousel Example
DESCRIPTION: Reference to a basic implementation example of the Carousel component
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
<code src="./demo/basic.tsx">Basic</code>
```

----------------------------------------

TITLE: Initializing Ant Design Descriptions with Descriptions.Item children (TSX)
DESCRIPTION: Shows the older method for configuring the Ant Design Descriptions component by nesting `Descriptions.Item` components as children. This approach is available in versions prior to 5.8.0 but is not recommended for versions 5.8.0 and above.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/descriptions/index.zh-CN.md#_snippet_1

LANGUAGE: tsx
CODE:
```
// <5.8.0 可用，>=5.8.0 时不推荐 🙅🏻‍♀️

<Descriptions title="User Info">
  <Descriptions.Item label="UserName">Zhou Maomao</Descriptions.Item>
  <Descriptions.Item label="Telephone">1810000000</Descriptions.Item>
  <Descriptions.Item label="Live">Hangzhou, Zhejiang</Descriptions.Item>
  <Descriptions.Item label="Remark">empty</Descriptions.Item>
  <Descriptions.Item label="Address">
    No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China
  </Descriptions.Item>
</Descriptions>;
```

----------------------------------------

TITLE: Basic Usage with Breadcrumb.Item (Ant Design < 5.3.0)
DESCRIPTION: This method uses nested `Breadcrumb.Item` components and is available in versions prior to 5.3.0. It is not recommended for newer versions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.zh-CN.md#_snippet_1

LANGUAGE: jsx
CODE:
```
return (
  <Breadcrumb>
    <Breadcrumb.Item>sample</Breadcrumb.Item>
  </Breadcrumb>
);
```

----------------------------------------

TITLE: Configuring Jest Snapshot Serializers for Enzyme Snapshots - JavaScript
DESCRIPTION: This code snippet provides the configuration for using enzyme-to-json as a snapshot serializer in Jest, enabling snapshot testing of Enzyme wrapper objects. It must be placed in jest.config.js, and requires enzyme-to-json to be installed. There are no inputs other than the configuration object, and the effect is that Jest will serialize Enzyme wrappers as plain JSON snapshots.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
// jest.config.js\nmodule.exports = {\n  // ...\n  snapshotSerializers: ['enzyme-to-json/serializer'],\n};
```

----------------------------------------

TITLE: rc-portal DOM Node Appending with useLayoutEffect - Portal Mount Logic (TypeScript pseudocode)
DESCRIPTION: This snippet demonstrates how rc-portal ensures a portal DOM node is appended to the document body when a component mounts using React's useLayoutEffect. The code conditionally queues or directly executes the append operation to guarantee correct mount order. Required dependencies: React, browser DOM. The append function creates and inserts a div into document.body. If queueCreate is set, append is delayed to maintain parent-child ordering.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// pseudocode\nfunction append() {\n  // This is not real world code, just for explain\n  document.body.appendChild(document.createElement('div'));\n}\n\nuseLayoutEffect(() => {\n  if (queueCreate) {\n    queueCreate(append);\n  } else {\n    append();\n  }\n}, []);
```

----------------------------------------

TITLE: Global Locale Implementation for Static Methods
DESCRIPTION: Shows the hack implementation of how Ant Design handled localization with static methods using global variables.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
// Sample. Not real world code.
let globalLocale = null;

const ConfigProvider = (props) => {
  if (props.locale) {
    globalLocale = props.locale;
  }

  // ...
};

Modal.confirm = (props) => {
  // ...

  ReactDOM.render(
    <ConfigProvider locale={globalLocale}>
      <Modal {...modalProps} />
    </ConfigProvider>,
  );
};
```

----------------------------------------

TITLE: Custom Jest Snapshot Serializer: Test Function - TypeScript
DESCRIPTION: This snippet shows the `test` function part of a custom Jest snapshot serializer. It defines which types of values the serializer should handle; in this specific case, it targets `HTMLElement` instances, allowing custom formatting rules to be applied only to DOM nodes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_9

LANGUAGE: typescript
CODE:
```
expect.addSnapshotSerializer({
  // 判断⼀下是否是 dom 元素，如果是的就⾛我们⾃⼰的序列化逻辑
  // 代码简化过，真实判断需要更多逻辑，可以参考 antd 的 setupAfterEnv.ts
  test: (element) => element instanceof HTMLElement,
  // ...
});
```

----------------------------------------

TITLE: Defining List.Item API in Markdown
DESCRIPTION: This snippet defines the API for the List.Item component, including properties like actions, classNames, extra, and styles.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| actions | The actions content of list item. If `itemLayout` is `vertical`, shows the content on bottom, otherwise shows content on the far right | Array&lt;ReactNode> | - |  |
| classNames | Semantic structure className | [`Record<actions \| extra, string>`](#semantic-dom) | - | 5.18.0 |
| extra | The extra content of list item. If `itemLayout` is `vertical`, shows the content on right, otherwise shows content on the far right | ReactNode | - |  |
| styles | Semantic DOM style | [`Record<actions \| extra, CSSProperties>`](#semantic-dom) | - | 5.18.0 |
```

----------------------------------------

TITLE: DatePicker Common API - nextIcon
DESCRIPTION: 自定义下一个图标。从 4.17.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_21

LANGUAGE: typescript
CODE:
```
nextIcon: ReactNode
```

----------------------------------------

TITLE: Updating Umi Configuration for React Query
DESCRIPTION: Diff showing the addition of react-query plugin to the Umi configuration file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_8

LANGUAGE: diff
CODE:
```
import { defineConfig } from "umi";

export default defineConfig({
+  plugins: ['@umijs/plugins/dist/react-query'],
+  reactQuery: {},
  routes: [
    { path: "/", component: "index" },
    { path: "/docs", component: "docs" },
    { path: "/products", component: "products" },
  ],
  npmClient: 'pnpm',
});
```

----------------------------------------

TITLE: Documenting Popconfirm Basic Usage in Ant Design (Markdown)
DESCRIPTION: This snippet provides documentation for the basic usage of the Popconfirm component in Ant Design. It explains that the component supports title and description props, with the description prop being supported from version 5.1.0.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popconfirm/demo/basic.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

最简单的用法，支持确认标题和描述。

> `description` 在 `5.1.0` 版本中支持。

## en-US

The basic example supports the title and description props of confirmation.

> `description` is supported in version `5.1.0`.
```

----------------------------------------

TITLE: Configuring Jest for Enzyme Snapshots - JavaScript
DESCRIPTION: This Jest configuration snippet shows how the `enzyme-to-json/serializer` was used to serialize Enzyme wrappers for snapshot testing. This dependency was necessary to convert Enzyme's internal representation into a format suitable for Jest snapshots.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// jest.config.js
module.exports = {
  // ...
  snapshotSerializers: ['enzyme-to-json/serializer'],
};
```

----------------------------------------

TITLE: Executing Concurrent Vite Builds with Promise.all - Javascript
DESCRIPTION: This function demonstrates the original problematic implementation for building bundles in the `gulpfile.js`. It generates Vite configurations for multiple environments and formats. It uses `Promise.all` to run all the generated Vite build tasks concurrently, which was identified as the root cause of file writing conflicts and the intermittent CI build failure.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.zh-CN.md#_snippet_1

LANGUAGE: Javascript
CODE:
```
async function buildBundles(cb) {
  const envs = ['development', 'production'];
  const configs = envs.map((env) =>
    getViteConfigForPackage({
      env,
      formats: ['es', 'cjs', 'umd'],
      external: ['react', 'react-dom'],
    }),
  );

  await Promise.all(configs.map((config) => vite.build(config)));
  cb && cb();
}
```

----------------------------------------

TITLE: Styling Icons with Old API (JSX)
DESCRIPTION: An example using the older `Icon` component API (`type` and `theme` props) to apply inline styles for size and color. This method is generally superseded by importing specific theme components (e.g., `MessageOutlined`). Required dependency: `@ant-design/icons`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#_snippet_2

LANGUAGE: JSX
CODE:
```
<Icon type="message" style={{ fontSize: '16px', color: '#08c' }} theme="outlined" />
```

----------------------------------------

TITLE: Checking Dependency Versions in package.json
DESCRIPTION: This JSON snippet displays relevant development dependencies from a `package.json` file. It confirms the versions of `pretty-format` (^29.0.0) and `@testing-library/react` (^13.0.0) being used, which was part of the investigation into the source of snapshot inconsistencies.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_8

LANGUAGE: json
CODE:
```
{
  "devDependencies": {
    "pretty-format": "^29.0.0",
    "@testing-library/react": "^13.0.0"
  }
}
```

----------------------------------------

TITLE: Styling Ant Design Space Container (CSS)
DESCRIPTION: This CSS snippet styles the Ant Design `Space` component within a specific demo container identified by `#collapse-demo-collapsible`. It sets the width of the `Space` component to 100% to ensure it occupies the available horizontal space. This is likely used to control the layout within a collapsible element example.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/collapse/demo/collapsible.md#_snippet_0

LANGUAGE: CSS
CODE:
```
#collapse-demo-collapsible .ant-space {
  width: 100%;
}
```

----------------------------------------

TITLE: Referencing InputNumber Controls/Icon Debug Example (TSX)
DESCRIPTION: References a debug-specific example file (`./demo/controls.tsx`) demonstrating customization of the increment/decrement controls (using the `controls` prop) for the Ant Design InputNumber component in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_14

LANGUAGE: markdown
CODE:
```
<code src="./demo/controls.tsx" debug>Icon</code>
```

----------------------------------------

TITLE: Displaying Ant Design Motion Principles with React
DESCRIPTION: This React functional component `Principle` renders a grid layout using Ant Design's `Row` and `Col` to display the three core Ant Design motion principles. It iterates over a hardcoded array `text` containing data for each principle (title, image URL, content) and creates a column for each, showcasing an image, title, and description. It's designed as a demo component for documentation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/motion.zh-CN.md#_snippet_0

LANGUAGE: jsx
CODE:
```
/**
 * inline: true
 */

import { Col, Row } from 'antd';

const text = [
  {
    title: '自然',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/LyTPSGknLUlxiVdwMWyu.gif',
    content: '自然运动规律，保证视觉连贯，让用户感知到动作是成立的',
  },
  {
    title: '高效',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/SQOZVQVIossbXpzDmihu.gif',
    content: '尽量节省过渡的时间，快速完成过渡的动画效果',
  },
  {
    title: '克制',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/OkIXkscKxywYLSrilPIf.gif',
    content: '做有意义的动效，不去做太多的修饰而干扰用户',
  },
];

function Principle() {
  const childrenToRender = text.map((item) => (
    <Col key={item.title} sm={24} md={8}>
      <div className="principle">
        <div>
          <img src={item.img} width="80%" />
        </div>
        <h4>{item.title}</h4>
        <p>{item.content}</p>
      </div>
    </Col>
  ));
  return (
    <div className="motion-principle-wrapper">
      <Row gutter={{ md: 32, sm: 0 }} className="principle-wrapper">
        {childrenToRender}
      </Row>
    </div>
  );
}

export default Principle;
```

----------------------------------------

TITLE: Consuming Proxy Context in Form Component for Validation Messages (TSX)
DESCRIPTION: This snippet shows how the Ant Design Form component consumes the `ValidateMessageContext` (provided by `ConfigProvider`) to get the validation messages. It then uses the actual `FormProvider` from `rc-field-form` internally, wrapping the base `Form` component. This ensures that the dependency on `rc-field-form` is localized to the Form component itself, rather than being tied to `ConfigProvider`, facilitating better Tree Shaking.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
// Sample only. Not real world code.
import Form, { FormProvider } from 'rc-field-form';

import { ValidateMessageContext } from './context';

export default (props) => {
  const validateMessages = React.useContext(ValidateMessageContext);

  return (
    <FormProvider validateMessages={validateMessages}>
      <Form {...props} />
    </FormProvider>
  );
};
```

----------------------------------------

TITLE: Initializing Rsbuild Project and Starting Development Server
DESCRIPTION: Commands to create a new Rsbuild project with React template and start the development server.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-rsbuild.en-US.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ cd demo
$ npm run dev
```

----------------------------------------

TITLE: Generating New Page in Umi
DESCRIPTION: Command to generate a new page named 'products' using Umi CLI.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ npx umi g page products
```

----------------------------------------

TITLE: Adding Brightness Overlay to Hue Panel in CSS
DESCRIPTION: This snippet expands the color panel's CSS by introducing a vertical black-to-transparent linear gradient as a brightness overlay over the base hue color. It has no dependencies, modifies the background-image property, and leverages the stacking of CSS gradients. Key parameters are gradient angles and color stops. The output is a color panel where the user can vary brightness vertically.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.en-US.md#2025-04-23_snippet_1

LANGUAGE: css
CODE:
```
background-color: rgb(0, 106, 255);
background-image: linear-gradient(0deg, rgb(0, 0, 0), transparent);
```

----------------------------------------

TITLE: DatePicker API - showWeek
DESCRIPTION: DatePicker 下展示当前周。从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_52

LANGUAGE: typescript
CODE:
```
showWeek: boolean
```

----------------------------------------

TITLE: Colorful Badge with Count Debug
DESCRIPTION: Debug example showing colorful badges with count display. Code referenced from ./demo/colorful-with-count-debug.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
./demo/colorful-with-count-debug.tsx
```

----------------------------------------

TITLE: Styling Ant Design Tree Transfer Component's First List in CSS
DESCRIPTION: This CSS snippet targets the first list element (`.ant-transfer-list:first-child`) within a container having the class `.tree-transfer` (likely an Ant Design Transfer component using a Tree). It overrides the default flex behavior (`flex: none;`) and sets a fixed width of 50% (`width: 50%;`), adjusting the layout to better accommodate a tree structure within the transfer list.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/transfer/demo/tree-transfer.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
<style>
.tree-transfer .ant-transfer-list:first-child {
  flex: none;
  width: 50%;
}
</style>
```

----------------------------------------

TITLE: CSS Cache Path Definition
DESCRIPTION: LESS code showing how the cache paths are stored in CSS for client-side extraction.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.en-US.md#2025-04-23_snippet_3

LANGUAGE: less
CODE:
```
// Just example. Not real world code
.cssinjs-cache-path {
  content: 'bAMbOo|Button:LItTlE;bAMbOo|Spin:liGHt';
}
```

----------------------------------------

TITLE: Installing Additional Dependencies for Umi Project
DESCRIPTION: Commands to install additional packages including Ant Design, Axios, and Pro Components for the Umi project.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ pnpm i @umijs/plugins -D
$ pnpm i antd axios @ant-design/pro-components -S
```

----------------------------------------

TITLE: Text Truncation Logic in TypeScript/React
DESCRIPTION: Pseudocode demonstrating the logic for text truncation based on height measurement.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// pseudocode. Not used in real world
<div ref={walkingMeasureRef}>{text.slice(0, walkingMeasureIndex)}</div>;

if (walkingMeasureRef.current.clientHeight > cssHeight) {
  // Not meet the requirement
}
```

----------------------------------------

TITLE: Documenting Skeleton Usage in List Components (Markdown)
DESCRIPTION: This Markdown snippet provides multilingual documentation for using skeleton loading placeholders within list components. It includes both Chinese (zh-CN) and English (en-US) descriptions of the functionality.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/skeleton/demo/list.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

在列表组件中使用加载占位符。

## en-US

Use skeleton in list component.
```

----------------------------------------

TITLE: Styling Error Icon in Ant Design Demo
DESCRIPTION: This CSS snippet defines the styling for an error icon in an Ant Design demo result. It sets the color of the icon to red, providing a visual indication of an error state.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/result/demo/error.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
.site-result-demo-error-icon {
  color: red;
}
```

----------------------------------------

TITLE: Nested App Component Usage
DESCRIPTION: Demonstrates nested usage of App components, though not recommended unless necessary.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<App>
  <Space>
    ...
    <App>...</App>
  </Space>
</App>
```

----------------------------------------

TITLE: Explaining Progress Value Position Customization in Ant Design (Markdown)
DESCRIPTION: This snippet provides explanations in both Chinese and English on how to use the 'percentPosition' prop to adjust the position of the progress value in Ant Design progress bars. It mentions that the value can be placed inside, outside, or at the bottom of the progress bar.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/info-position.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

改变进度数值位置，可使用 `percentPosition` 调整，使进度条数值在进度条内部、外部或底部。

## en-US

Change the position of the progress value, you can use `percentPosition` to adjust it so that the progress bar value is inside, outside or at the bottom of the progress bar.
```

----------------------------------------

TITLE: Installing Ant Design v5 via npm (Bash)
DESCRIPTION: Command to install the latest version of Ant Design v5 using npm and save it as a project dependency.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm install --save antd@5.x
```

----------------------------------------

TITLE: DatePicker Common API - dateRender
DESCRIPTION: 自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_4

LANGUAGE: typescript
CODE:
```
dateRender: (currentDate: dayjs, today: dayjs) => React.ReactNode
```

----------------------------------------

TITLE: Defining a Simple String Display React Component (TSX)
DESCRIPTION: This snippet defines a basic React functional component named `MyStr` using TypeScript (TSX). It accepts a `value` prop of type string via the `StrProps` interface and renders this value within a `div` element. An example usage `<MyStr value="Hello World" />` demonstrates how to pass the string value.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
interface StrProps {
  value: string;
}

function MyStr({ value }: StrProps) {
  return <div>{value}</div>;
}
<MyStr value="Hello World" />;
```

----------------------------------------

TITLE: DatePicker API - disabledTime
DESCRIPTION: 不可选择的时间。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_44

LANGUAGE: typescript
CODE:
```
disabledTime: function(date: dayjs) => { disabledHours?: () => number[], disabledMinutes?: (selectedHour: number) => number[], disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[] }
```

----------------------------------------

TITLE: DatePicker Common API - preserveInvalidOnBlur
DESCRIPTION: 失去焦点是否要清空输入框内无效内容。从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_12

LANGUAGE: typescript
CODE:
```
preserveInvalidOnBlur: boolean
```

----------------------------------------

TITLE: Adding Brightness Gradient to Color Panel CSS
DESCRIPTION: Overlays a linear gradient from black to transparent onto the base color. This gradient controls the perceived brightness or value (V) dimension of the color panel, making the bottom darker and the top brighter.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.zh-CN.md#_snippet_1

LANGUAGE: css
CODE:
```
background-color: rgb(0, 106, 255);
background-image: linear-gradient(0deg, rgb(0, 0, 0), transparent);
```

----------------------------------------

TITLE: Workaround for Snapshot Differences: Comparing innerHTML - TypeScript
DESCRIPTION: This snippet shows a temporary workaround used during the migration to handle inconsistent DOM snapshots between React versions. By comparing the `innerHTML` string of a specific element, which was found to be consistent across React versions, it bypassed initial issues with `pretty-format`'s handling of DOM structure differences.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_6

LANGUAGE: typescript
CODE:
```
expect(container.querySelector('.className').innerHTML).toMatchSnapshot();
```

----------------------------------------

TITLE: Illustrating Pretty-Format HTML Serialization Difference
DESCRIPTION: This snippet shows an example of how `pretty-format` might serialize an HTML structure compared to its original form, specifically highlighting the potential introduction of extra whitespace around text nodes. This difference is relevant when comparing snapshots generated under potentially different formatting conditions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_7

LANGUAGE: html
CODE:
```
<div>
  <span>Hello</span>
  <p>World</p>
</div>
↓
<div>
  <span> Hello </span>
  <p>World</p>
</div>
```

----------------------------------------

TITLE: Using Timeline with Timeline.Item children (<5.2.0)
DESCRIPTION: This is the older way to use the Ant Design Timeline component, valid before version 5.2.0. It is deprecated in >=5.2.0 and will be removed in a future major version. It uses `Timeline.Item` components as children.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/timeline/index.zh-CN.md#_snippet_1

LANGUAGE: JSX
CODE:
```
// <5.2.0 可用，>=5.2.0 时不推荐 🙅🏻‍♀️
return (
  <Timeline onChange={onChange}>
    <Timeline.Item>Sample</Timeline.Item>
  </Timeline>
);
```

----------------------------------------

TITLE: Layout Directive for Resource Cards
DESCRIPTION: This HTML div element, likely processed by a custom Markdown renderer or site generator, acts as a directive to apply specific styling or layout (using the class 'next-block-use-cards') to the subsequent block, which is expected to be a <ResourceCards> component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/resources.en-US.md#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
<div class="next-block-use-cards"></div>
```

----------------------------------------

TITLE: Building Bundles Sequentially with Vite for Race Condition Prevention (TypeScript)
DESCRIPTION: This for-loop alternately executes each Vite build configuration one after another, instead of concurrently, to avoid output file conflicts. Requires Vite, Node.js, and precomputed configuration objects. The configs array holds all build variants. Each build is awaited before starting the next. Inputs are the configs array of build configurations; outputs are discrete, non-overlapping build artifacts. This approach prevents write collisions but can increase build time.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.en-US.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
for (const config of configs) {
  await vite.build(config);
}
```

----------------------------------------

TITLE: Bypassing Queue for Open Modals - Portal DOM Immediate Append (TypeScript pseudocode)
DESCRIPTION: This snippet modifies the portal behavior to immediately append the container DOM node if the modal is already open, bypassing the queue for active dialogs. It uses useRef to prevent repeated appends, and alters queueCreate's presence based on the appended state. Inputs: is-open flag, callback function. Outputs: directly injected portal DOM node when appropriate. Eliminates positioning bug due to async queue timing. Limitations: for open Modals only.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
// pseudocode\nconst appendedRef = useRef(false);\n\nconst queueCreate = !appendedRef.current\n  ? (appendFn: VoidFunction) => {\n      // same code\n    }\n  : undefined;\n\nfunction append() {\n  // This is not real world code, just for explain\n  document.body.appendChild(document.createElement('div'));\n  appendedRef.current = true;\n}\n\n// ...\n\nreturn <PortalContext value={queueCreate}>{children}</PortalContext>;
```

----------------------------------------

TITLE: Deprecated Select Component Implementation in React
DESCRIPTION: Shows the deprecated usage of the Select component with child Option elements. This approach is not recommended for versions 5.11.0 and above.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: jsx
CODE:
```
return (
  <Select onChange={onChange}>
    <Select.Option value="sample">Sample</Select.Option>
  </Select>
);
```

----------------------------------------

TITLE: DatePicker Common API - superNextIcon
DESCRIPTION: 自定义 `>>` 切换图标。从 4.17.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_35

LANGUAGE: typescript
CODE:
```
superNextIcon: ReactNode
```

----------------------------------------

TITLE: Demonstrating CSS-in-JS Cache Structure in Ant Design
DESCRIPTION: Example showing the cache structure used in @ant-design/cssinjs to store component styles and their corresponding hash values.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
// e.g. Real world path is much more complex
{
  "bAMbOo|Button": ["LItTlE", ":where(.bAMbOo).ant-btn { color: red }"],
  "bAMbOo|Spin": ["liGHt", ":where(.bAMbOo).ant-spin { color: blue }"]
}
```

----------------------------------------

TITLE: Defining ComponentsConfig Structure in Markdown
DESCRIPTION: This snippet defines the structure of ComponentsConfig in a markdown table format. It explains the properties, their types, and default values for configuring Ant Design components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
| 属性 | 说明 | 类型 | 默认值 |
| --- | --- | --- | --- |
| `Component` (可以是任意 antd 组件名，如 `Button`) | 用于修改 Component Token 以及覆盖该组件消费的 Alias Token | `ComponentToken & AliasToken & { algorithm: boolean \| (token: SeedToken) => MapToken` \| `((token: SeedToken) => MapToken)[]}` | - |
```

----------------------------------------

TITLE: Illustrating Inline CSS-in-JS Style Injection in HTML
DESCRIPTION: Shows an early approach where CSS-in-JS styles (using `:where` and generated class names like `css-bAmBOo`) are injected directly into the HTML using `<style>` tags adjacent to the corresponding element during SSR. This method avoids extra requests but lacks caching, can increase HTML size, and may cause issues with `:nth` selectors.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
<div>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World</button>
</div>
```

----------------------------------------

TITLE: Illustrating Inline Style Injection in HTML
DESCRIPTION: Demonstrates the initial inline style approach used in Ant Design v5 alpha for SSR. A `<style>` tag containing component-specific CSS is injected directly before the corresponding HTML element. This method ensures styles are available immediately but can lead to duplication and larger HTML files.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
<div>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World</button>
</div>
```

----------------------------------------

TITLE: Using Ant Design Select with Option children (Deprecated >= 5.11.0)
DESCRIPTION: Shows the older method of using the Ant Design Select component by defining options as `Select.Option` children. While still functional in 5.x, this approach is deprecated from version 5.11.0 and will be removed in version 6.0. It is less performant and less flexible than the `options` prop method.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.zh-CN.md#_snippet_1

LANGUAGE: jsx
CODE:
```
return (
  <Select onChange={onChange}>
    <Select.Option value="sample">Sample</Select.Option>
  </Select>
);
```

----------------------------------------

TITLE: Defining Smaller Circular Progress Bar in Markdown
DESCRIPTION: This snippet describes a smaller circular progress bar component in both Chinese and English. It serves as documentation or example description for the component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/circle-mini.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

小一号的圈形进度。

## en-US

A smaller circular progress bar.
```

----------------------------------------

TITLE: Applying Scale Transformations to Offset Calculations
DESCRIPTION: Snippet showing how to apply calculated scale ratios to position offsets for proper alignment of transformed elements.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tooltip-align.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
// Some logic for align offset calculation
// const baseOffsetX = ...
// const baseOffsetY = ...

const scaledOffsetX = baseOffsetX / scaleX;
const scaledOffsetY = baseOffsetY / scaleY;
```

----------------------------------------

TITLE: Responsive Grid Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file showing how to create responsive layouts using breakpoint-specific props (xs, sm, md, lg, xl, xxl) on Col components in the Ant Design grid system. The actual code implementing this example resides in the './demo/responsive.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_8

LANGUAGE: html
CODE:
```
<code src="./demo/responsive.tsx">Responsive</code>
```

----------------------------------------

TITLE: Styling Timeline Icon Font Size with CSS
DESCRIPTION: This CSS rule targets elements with the class `timeline-clock-icon`. It sets the `font-size` property to `16px`, adjusting the size of the custom icon used within a timeline component. This allows for visual customization of timeline item markers.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/timeline/demo/custom.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.timeline-clock-icon {
  font-size: 16px;
}
```

----------------------------------------

TITLE: Styling Multiple Mini Pagination Components with CSS
DESCRIPTION: CSS styles to add margin between multiple pagination instances in a demo. It targets all pagination components except the last one within the #pagination-demo-mini container and adds a bottom margin of 24px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/pagination/demo/mini.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
#pagination-demo-mini .ant-pagination:not(:last-child) {
  margin-bottom: 24px;
}
```

----------------------------------------

TITLE: Describing Standard Progress Bar in Chinese and English
DESCRIPTION: This snippet provides brief descriptions of a standard progress bar in both Chinese (zh-CN) and English (en-US). It's likely used as documentation or comments for associated code examples.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/line.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

标准的进度条。

## en-US

A standard progress bar.
```

----------------------------------------

TITLE: Client-side HashMap Extraction
DESCRIPTION: Demonstrates how the client-side code retrieves the embedded cache path and hash information from the CSS file using `getComputedStyle` on a specially crafted DOM element.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.zh-CN.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// Just example. Not real world code
const measure = document.createElement('div');
measure.className = 'cssinjs-cache-path';
document.body.appendChild(measure);

// Now let's parse the `content`
const { content } = getComputedStyle(measure);
```

----------------------------------------

TITLE: Nested Compact Layout
DESCRIPTION: Debug example showing nested compact layouts.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
<code src="./demo/compact-nested.tsx" debug>紧凑布局嵌套</code>
```

----------------------------------------

TITLE: Responsive Flex Grid Example using Ant Design in React/TypeScript (v5.14.0+)
DESCRIPTION: This snippet represents a link to an external file demonstrating creating responsive layouts that also utilize flexbox alignment and justification properties within the Ant Design grid system, applicable from version 5.14.0. The actual code implementing this example resides in the './demo/responsive-flex.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_9

LANGUAGE: html
CODE:
```
<code src="./demo/responsive-flex.tsx" version="5.14.0">Flex Responsive</code>
```

----------------------------------------

TITLE: Styling Elements in Ant Design Grid Demo Playground with CSS
DESCRIPTION: This CSS snippet targets elements within an HTML container identified by `#grid-demo-playground`. It styles Ant Design columns (`.ant-col`) by removing default backgrounds/borders and setting specific styles (height, background, etc.) for their direct child `div` elements. It also styles `pre` elements, commonly used for displaying code examples, within this playground context, including specific styles for code blocks marked with `.demo-code`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/playground.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
#grid-demo-playground [class~='ant-col'] {
  background: transparent;
  border: 0;
}
#grid-demo-playground [class~='ant-col'] > div {
  height: 120px;
  font-size: 14px;
  line-height: 120px;
  background: #0092ff;
  border-radius: 4px;
}
#grid-demo-playground pre {
  padding: 8px 16px;
  font-size: 14px;
  background: #f9f9f9;
  border-radius: 6px;
}
#grid-demo-playground pre.demo-code {
  direction: ltr;
}
#grid-demo-playground .ant-col {
  padding: 0;
}
```

----------------------------------------

TITLE: Running Test Suite
DESCRIPTION: Commands to execute the complete test suite for the project.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ npm test
```

LANGUAGE: bash
CODE:
```
$ yarn test
```

----------------------------------------

TITLE: Compiling TypeScript Code
DESCRIPTION: Commands to compile TypeScript code to the lib and es directories.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ npm run compile
```

LANGUAGE: bash
CODE:
```
$ yarn compile
```

----------------------------------------

TITLE: Debugging Input Addon in Compact Mode
DESCRIPTION: This example is for debugging purposes, focusing on input addons in compact mode.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_9

LANGUAGE: tsx
CODE:
```
<code src="./demo/compact-debug.tsx" debug>Input addon debug</code>
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: Navigate into the newly created Next.js project directory and start the development server using npm. This command launches the application locally, typically accessible at http://localhost:3000.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.zh-CN.md#_snippet_0

LANGUAGE: Bash
CODE:
```
$ cd antd-demo
$ npm run dev
```

----------------------------------------

TITLE: Styling Load More Demo List in CSS
DESCRIPTION: This CSS snippet sets a minimum height for a demo list that implements the 'Load More' functionality. It ensures the list has a reasonable initial size before more items are loaded.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/demo/loadmore.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
.demo-loadmore-list {
  min-height: 350px;
}
```

----------------------------------------

TITLE: Styling Graduated Slider Demo in CSS
DESCRIPTION: CSS styles for a demo of a graduated slider. It sets margins for headings and bottom margin for sliders with marks.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/demo/mark.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
#slider-demo-mark h4 {
  margin: 0 0 16px;
}
#slider-demo-mark .ant-slider-with-marks {
  margin-bottom: 44px;
}
```

----------------------------------------

TITLE: Specifying Dropdown Placement in Ant Design (Markdown)
DESCRIPTION: This snippet provides instructions in Chinese and English on how to use the 'placement' prop to manually set the position of dropdown popups in Ant Design components. It's a multilingual documentation entry for a feature of Ant Design.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/placement.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

可以通过 `placement` 手动指定弹出的位置。

## en-US

You can manually specify the position of the popup via `placement`.
```

----------------------------------------

TITLE: Embedding the Dark Mode Color Palette Generator Tool in Ant Design - JavaScript (React/JSX)
DESCRIPTION: This snippet inserts the <ColorPaletteToolDark> React component, supplying an interactive tool for generating and previewing dark mode color palettes. It requires the Ant Design React library and any related color generation utility code. Users can select a primary color and a page background, and the tool generates a dark mode-adapted color set as output. The tool is designed to work within documentation environments supporting JSX components and does not function as standalone code outside such environments.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/dark.en-US.md#2025-04-23_snippet_1

LANGUAGE: JavaScript (React/JSX)
CODE:
```
<ColorPaletteToolDark></ColorPaletteToolDark>
```

----------------------------------------

TITLE: Client-side Cache Path Extraction
DESCRIPTION: JavaScript code demonstrating how to extract the cache path information on the client side using getComputedStyle.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
// Just example. Not real world code
const measure = document.createElement('div');
measure.className = 'cssinjs-cache-path';
document.body.appendChild(measure);

// Now let's parse the `content`
const { content } = getComputedStyle(measure);
```

----------------------------------------

TITLE: Element Offset Calculation Utility
DESCRIPTION: Utility function to get element's coordinate position using getBoundingClientRect.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
// pseudocode
function offset(el: Element) {
  const { left, top } = el.getBoundingClientRect();
  return { left, top };
}
```

----------------------------------------

TITLE: Component Reference Interface Definition
DESCRIPTION: TypeScript interface definition for component references showing standardized structure with native element access.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
export interface SampleRef {
  nativeElement: HTMLElement;
  focus(): void;
  blur(): void;
}
```

----------------------------------------

TITLE: Importing Fade Effect Example
DESCRIPTION: Reference to an example showing fade transition effects
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
<code src="./demo/fade.tsx">Fade in</code>
```

----------------------------------------

TITLE: Implementing Proxy-based Reference Handling
DESCRIPTION: Shows how to use Proxy to intercept and handle component references while maintaining backwards compatibility.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.zh-CN.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
useImperativeHandle(
  ref,
  () =>
    new Proxy(divRef.current, {
      get(target, key) {
        // ...
      },
    }),
);
```

----------------------------------------

TITLE: Column Offset Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file showing how to use the 'offset' prop on the Col component to shift columns to the right within an Ant Design grid layout. The actual code implementing this example resides in the './demo/offset.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: html
CODE:
```
<code src="./demo/offset.tsx">Column offset</code>
```

----------------------------------------

TITLE: Rendering Dark Mode Color Palettes Using Ant Design React Components - JavaScript (React/JSX)
DESCRIPTION: This snippet embeds the <ColorPalettes> React component with the dark property set to true, demonstrating Ant Design's dark mode color palettes. The component depends on the Ant Design React library and any styles or props it requires. No direct parameters are passed except the dark mode toggle; it visually renders selectable color palettes suitable for dark themed interfaces. Outputs are interactive UI elements within the documentation interface; use is limited to environments where JSX is supported (e.g., within Ant Design styleguides or Storybook).
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/dark.en-US.md#2025-04-23_snippet_0

LANGUAGE: JavaScript (React/JSX)
CODE:
```
<ColorPalettes dark={true}></ColorPalettes>
```

----------------------------------------

TITLE: Basic Grid Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file demonstrating the basic usage of the Ant Design Row and Col components to create a simple grid layout. The actual code implementing this example resides in the './demo/basic.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
<code src="./demo/basic.tsx">Basic Grid</code>
```

----------------------------------------

TITLE: Setting Scroll Offset for Anchor in React
DESCRIPTION: Demo import for an example showing how to set custom scroll offset for an anchor component, displayed in an iframe with a height of 200px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
<code src="./demo/targetOffset.tsx" iframe="200">Set Anchor scroll offset</code>
```

----------------------------------------

TITLE: HashMap Structure for Style Path and Hash
DESCRIPTION: Demonstrates the simplified HashMap structure containing only paths and hash values for style lookup.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
{
  "bAMbOo|Button": "LItTlE",
  "bAMbOo|Spin": "liGHt"
}
```

----------------------------------------

TITLE: Importing Arrows Example
DESCRIPTION: Reference to an example demonstrating switching arrows functionality, available from version 5.17.0
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
<code src="./demo/arrows.tsx" version="5.17.0">Arrows for switching</code>
```

----------------------------------------

TITLE: Demonstrating pretty-format vs innerHTML Difference with Empty Nodes - TypeScript
DESCRIPTION: A small test case to demonstrate how `pretty-format` (used by Jest snapshots) can perceive differences due to empty nodes (like empty text nodes) that do not affect the `innerHTML` string. This snippet creates a div, appends an empty string and an anchor, and then shows the snapshot output versus the console output of innerHTML.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.zh-CN.md#_snippet_7

LANGUAGE: typescript
CODE:
```
const holder = document.createElement('div');
holder.append('');
holder.append(document.createElement('a'));
expect(holder).toMatchSnapshot();
console.log(holder.innerHTML);
```

----------------------------------------

TITLE: Referencing Disabled InputNumber Example (TSX)
DESCRIPTION: References `./demo/disabled.tsx`, showing how to disable the Ant Design InputNumber component using the `disabled` prop in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
<code src="./demo/disabled.tsx">Disabled</code>
```

----------------------------------------

TITLE: Referencing InputNumber Keyboard Behavior Example (TSX)
DESCRIPTION: References `./demo/keyboard.tsx`, demonstrating the keyboard interaction behavior (`keyboard` prop) of the Ant Design InputNumber component in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_6

LANGUAGE: markdown
CODE:
```
<code src="./demo/keyboard.tsx">Keyboard</code>
```

----------------------------------------

TITLE: Referencing High Precision InputNumber Example (TSX)
DESCRIPTION: References `./demo/digit.tsx`, demonstrating handling high precision decimals with the Ant Design InputNumber component, likely using `stringMode` or `precision` props in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: markdown
CODE:
```
<code src="./demo/digit.tsx">High precision decimals</code>
```

----------------------------------------

TITLE: Result Component Demo Imports
DESCRIPTION: Demo code references for different Result component scenarios including success, info, warning, and error states.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/result/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
<code src="./demo/success.tsx">Success</code>
<code src="./demo/info.tsx">Info</code>
<code src="./demo/warning.tsx">Warning</code>
<code src="./demo/403.tsx">403</code>
<code src="./demo/404.tsx">404</code>
<code src="./demo/500.tsx">500</code>
<code src="./demo/error.tsx">Error</code>
<code src="./demo/customIcon.tsx">Custom icon</code>
<code src="./demo/component-token.tsx" debug>Component Token</code>
```

----------------------------------------

TITLE: Calculating Hue and Alpha from Slider Position TypeScript
DESCRIPTION: Calculates either the hue or the alpha (opacity) value based on the horizontal position of a slider element within its container. It requires the dimensions of the container and the slider, and the slider's offset position. The hue calculation maps the position to a 0-360 degree range, while alpha maps it to a 0-1 range.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.zh-CN.md#_snippet_4

LANGUAGE: typescript
CODE:
```
...
const { width, height } = containerRef.current.getBoundingClientRect();
const { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();
const centerOffsetX = targetWidth / 2;
const centerOffsetY = targetHeight / 2;
// 色相
const hue = ((offset.x + centerOffsetX) / width) * 360;
// 不透明度
const alpha = (offset.x + centerOffsetX) / width;
```

----------------------------------------

TITLE: Ribbon Debug
DESCRIPTION: Debug example for the Ribbon Badge component. Code referenced from ./demo/ribbon-debug.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
./demo/ribbon-debug.tsx
```

----------------------------------------

TITLE: Styling Ant Design Rows with Custom Background - CSS
DESCRIPTION: This CSS snippet sets a subtle background color for all elements with class 'ant-row' that are descendants of the #grid-demo-flex-order container. The style creates a light gray background using an RGBA value, helping visually distinguish grid rows. No external dependencies are required—this can be placed in any stylesheet loaded after Ant Design's base styles. Ensure selectors are scoped appropriately to avoid affecting unrelated elements. The snippet does not alter order directly but demonstrates preparation for further order-based layout changes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/flex-order.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
#grid-demo-flex-order [class~='ant-row'] {
  background: rgba(128, 128, 128, 0.08);
}
```

----------------------------------------

TITLE: Running Visual Regression Tests in Ant Design
DESCRIPTION: Command to run visual regression tests and generate screenshots. Screenshots are saved in the imageSnapshots directory. Supports testing specific components by passing the component path as an argument.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/visual-regression.en-US.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm run test:image # Screenshots will be saved in the imageSnapshots directory. For specific component screenshots, use: npm run test:image -- components/button
```

----------------------------------------

TITLE: Installing Dependencies in Ant Design
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install
```

LANGUAGE: bash
CODE:
```
$ yarn
```

----------------------------------------

TITLE: Calculating Hue and Alpha from Slider Offset in TypeScript
DESCRIPTION: This TypeScript snippet determines the hue (in degrees, 0-360) and alpha (opacity, 0-1) based on slider pointer positions. It expects that containerRef and targetRef point to the slider and handle respectively, and 'offset.x' is the pointer's X-axis offset. 'hue' maps linear offset to degrees while 'alpha' normalizes the offset to a 0-1 range. This translation is central to updating the displayed color's tone and transparency in response to user interaction.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.en-US.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
...
const { width, height } = containerRef.current.getBoundingClientRect();
const { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();
const centerOffsetX = targetWidth / 2;
const centerOffsetY = targetHeight / 2;
// Hue
const hue = ((offset.x + centerOffsetX) / width) * 360;
// Opacity
const alpha = (offset.x + centerOffsetX) / width;
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Navigate into the created Next.js project directory and start the development server using npm.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ cd antd-demo
$ npm run dev
```

----------------------------------------

TITLE: Styling Example Gutter Boxes (CSS)
DESCRIPTION: This CSS snippet defines styles for elements with the class 'gutter-box'. It applies vertical padding (8px top/bottom, 0px left/right) and a blue background color (#00a0e9), typically used to visually represent columns within an Ant Design grid layout when demonstrating the 'gutter' property.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/gutter.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.gutter-box {\n  padding: 8px 0;\n  background: #00a0e9;\n}
```

----------------------------------------

TITLE: Styling Colorful Badges with CSS in Ant Design
DESCRIPTION: This CSS snippet provides custom styling for the colorful badges used in the Ant Design Badge component. It sets the border-radius to create circular badges and adjusts the positioning of the count indicator.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/demo/colorful-with-count-debug.md#2025-04-23_snippet_1

LANGUAGE: css
CODE:
```
.ant-badge-color-pink {
  background: pink;
  color: #fff;
}

.ant-badge .ant-badge-count {
  border-radius: 10px;
  top: -4px;
  right: -8px;
}
```

----------------------------------------

TITLE: Styling Ant Design Grid Demo Rows with CSS
DESCRIPTION: This CSS snippet targets elements with the class 'ant-row' that are descendants of an element with the ID 'grid-demo-flex'. It applies a light, semi-transparent grey background (rgba(128, 128, 128, 0.08)) to these rows, likely used within an Ant Design demonstration to visually distinguish the grid rows.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/flex.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
#grid-demo-flex [class~='ant-row'] {
  background: rgba(128, 128, 128, 0.08);
}
```

----------------------------------------

TITLE: Using Mentions with Mentions.Option children (<5.1.0)
DESCRIPTION: Shows the older, deprecated method of using the Ant Design Mentions component by defining options as `Mentions.Option` children. This approach is not recommended for versions 5.1.0 and above and will be removed in version 6.0.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/index.zh-CN.md#_snippet_1

LANGUAGE: JSX
CODE:
```
// <5.1.0 可用，>=5.1.0 时不推荐 🙅🏻‍♀️
return (
  <Mentions onChange={onChange}>
    <Mentions.Option value="sample">Sample</Mentions.Option>
  </Mentions>
);
```

----------------------------------------

TITLE: Documenting Debug Component Usage in Markdown
DESCRIPTION: This snippet provides documentation for a debug-only component in both Chinese and English. It warns developers not to use this component in production environments.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/render-panel.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

调试用组件，请勿直接使用。

## en-US

Debug usage. Do not use in your production.
```

----------------------------------------

TITLE: Setting Common Props Ant Design Typography TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Typography component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_35

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Setting Common Props Ant Design Transfer TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Transfer component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and an optional `selectionsIcon` (React.ReactNode).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_33

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, selectionsIcon?: React.ReactNode }
```

----------------------------------------

TITLE: Setting Common Props Ant Design Pagination TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Pagination component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and an optional `showSizeChanger` (boolean).
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_9

LANGUAGE: TypeScript
CODE:
```
{ showSizeChanger?: boolean, className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Running Code Style Checks
DESCRIPTION: Commands to execute code linting and style checking.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ npm run lint
```

LANGUAGE: bash
CODE:
```
$ yarn lint
```

----------------------------------------

TITLE: Building UMD Bundle
DESCRIPTION: Commands to create UMD build of the Ant Design library.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
$ npm run dist
```

LANGUAGE: bash
CODE:
```
$ yarn dist
```

----------------------------------------

TITLE: Styling a Wrapper for Ghost Buttons (CSS)
DESCRIPTION: This CSS snippet defines styles for an element with the class `site-button-ghost-wrapper`. It applies padding and a specific background color, likely used within the documentation page itself to showcase ghost buttons effectively against a contrasting background.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: css
CODE:
```
.site-button-ghost-wrapper {
  padding: 16px;
  background: rgb(190, 200, 200);
}
```

----------------------------------------

TITLE: Importing Popover Auto Shift Example in React
DESCRIPTION: Imports an example demonstrating the auto-shift feature of the Popover component in an iframe.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
<code src="./demo/shift.tsx" iframe="300">Auto Shift</code>
```

----------------------------------------

TITLE: Importing Dot Duration Example
DESCRIPTION: Reference to an example showing progress of dots functionality, available from version 5.24.0
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
<code src="./demo/dot-duration.tsx" version="5.24.0">Progress of dots</code>
```

----------------------------------------

TITLE: Importing Splitter Examples in Markdown
DESCRIPTION: These code snippets import various examples of the Splitter component, demonstrating different features and use cases.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/splitter/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
<code src="./demo/size.tsx">Basic</code>
<code src="./demo/control.tsx">Control mode</code>
<code src="./demo/vertical.tsx">Vertical</code>
<code src="./demo/collapsible.tsx">Collapsible</code>
<code src="./demo/multiple.tsx">Multiple panels</code>
<code src="./demo/group.tsx">Complex combination</code>
<code src="./demo/nested-in-tabs.tsx" debug>Nested in tabs</code>
<code src="./demo/lazy.tsx" version="5.23.0">Lazy</code>
<code src="./demo/debug.tsx" debug>Debug</code>
```

----------------------------------------

TITLE: Importing Position Example
DESCRIPTION: Reference to an example showing different position configurations for the Carousel
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
<code src="./demo/position.tsx">Position</code>
```

----------------------------------------

TITLE: Poor Issue Description Example
DESCRIPTION: Example demonstrating an overly brief and unhelpful issue description versus a detailed and informative one.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.en-US.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
Style compilation error
```

----------------------------------------

TITLE: SSR Cache HashMap CSS Content Example
DESCRIPTION: Illustrates how the path and hash mapping from the SSR cache is embedded within a CSS rule's `content` property for client-side extraction. This is a simplified example.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.zh-CN.md#_snippet_1

LANGUAGE: less
CODE:
```
// Just example. Not real world code
.cssinjs-cache-path {
  content: 'bAMbOo|Button:LItTlE;bAMbOo|Spin:liGHt';
}
```

----------------------------------------

TITLE: Flex Gap Styling
DESCRIPTION: Debug example showing Flex gap styles in Space component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
<code src="./demo/gap-in-line.tsx" debug>Flex gap 样式</code>
```

----------------------------------------

TITLE: Debugging Input Prefix/Suffix
DESCRIPTION: Debug example for Input component with prefix and suffix in compact layout.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
<code src="./demo/compact-debug.tsx" debug>调试 Input 前置/后置标签</code>
```

----------------------------------------

TITLE: DatePicker Common API - superPrevIcon
DESCRIPTION: 自定义 `<<` 切换图标。从 4.17.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_36

LANGUAGE: typescript
CODE:
```
superPrevIcon: ReactNode
```

----------------------------------------

TITLE: Starting a Refine Project with Ant Design
DESCRIPTION: Commands for navigating into the newly created project directory and starting the development server. This launches the Refine application with Ant Design components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-refine.en-US.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ cd antd-demo
$ npm run dev
```

----------------------------------------

TITLE: DatePicker Common API - order
DESCRIPTION: 多选、范围时是否自动排序。从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_11

LANGUAGE: typescript
CODE:
```
order: boolean
```

----------------------------------------

TITLE: DatePicker Common API - picker
DESCRIPTION: 设置选择器类型。`quarter` 从 4.1.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_24

LANGUAGE: typescript
CODE:
```
picker: 'date' | 'week' | 'month' | 'quarter' | 'year'
```

----------------------------------------

TITLE: Using ImagePreview Component for Textual Description (HTML/JSX)
DESCRIPTION: This snippet demonstrates using the custom `<ImagePreview>` component to wrap textual content rather than an image. The text describes various types of elements (lines, wireframes, colors, etc.) that can be repetitive in UI design. This usage might be intended for layout consistency or specific styling provided by the component within the Ant Design documentation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/repetition.en-US.md#2025-04-23_snippet_4

LANGUAGE: html
CODE:
```
<ImagePreview>
The repetitive element may be a thick rule(line), a wireframe, color, design elements, particular format, spatial relationships, etc.
</ImagePreview>
```

----------------------------------------

TITLE: Displaying an Image with a Custom Preview Component (HTML/JSX)
DESCRIPTION: This snippet embeds an image (`<img>`) showing an "Example of repetitive wireframe" within a custom `<ImagePreview>` component. The image source is specified via the `src` attribute, and it includes alternative text (`alt`) and a CSS class (`preview-img`) for styling. The `<ImagePreview>` component likely provides enhanced viewing capabilities like zooming or lightbox functionality within the Ant Design documentation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/repetition.en-US.md#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
<ImagePreview>
<img class="preview-img" alt="Example of repetitive wireframe" src="https://gw.alipayobjects.com/zos/rmsportal/VkUeJYlTTseLCyUGeXZV.png">
</ImagePreview>
```

----------------------------------------

TITLE: Displaying an Image Example of Repetitive Formats (HTML/JSX)
DESCRIPTION: This snippet displays an image showing an "Example of repetitive of formats" within the `<ImagePreview>` component. It follows the same pattern as the previous image snippets, utilizing `src`, `alt`, and `class` attributes within the custom component structure used in the Ant Design documentation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/repetition.en-US.md#2025-04-23_snippet_3

LANGUAGE: html
CODE:
```
<ImagePreview>
<img class="preview-img" alt="Example of repetitive of formats" src="https://gw.alipayobjects.com/zos/rmsportal/DYDGrgkbdFEbcVRuJcjH.png">
</ImagePreview>
```

----------------------------------------

TITLE: Alert ErrorBoundary API Properties
DESCRIPTION: Table describing the API properties available for the Alert.ErrorBoundary component, including description and message properties.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
| Property    | Description                      | Type      | Default           | Version |
| ----------- | -------------------------------- | --------- | ----------------- | ------- |
| description | Custom error description to show | ReactNode | {{ error stack }} |         |
| message     | Custom error message to show     | ReactNode | {{ error }}       |         |
```

----------------------------------------

TITLE: Referencing Usage Demos with Source Codes in Ant Design React Markdown
DESCRIPTION: These snippets demonstrate how to include external TypeScript/React demo files in the documentation, associating each code example with a visible demo and a label. Dependencies include the Ant Design Slider component and a Markdown environment that supports code snippet references. Each snippet links to a demo that illustrates a specific behavior or feature, providing readers with practical implementation samples without directly embedding the source; inputs are the demo file paths, and outputs are rendered code blocks or interactive demos.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
<code src="./demo/basic.tsx">Basic</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/input-number.tsx">Slider with InputNumber</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/icon-slider.tsx">Slider with icon</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/tip-formatter.tsx">Customize tooltip</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/event.tsx">Event</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/mark.tsx">Graduated slider</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/vertical.tsx">Vertical</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/show-tooltip.tsx">Control visible of ToolTip</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/reverse.tsx">Reverse</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/draggableTrack.tsx">Draggable track</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/multiple.tsx">Multiple handles</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/editable.tsx" version="5.20.0">Dynamic edit nodes</code>
```

LANGUAGE: Markdown
CODE:
```
<code src="./demo/component-token.tsx" debug>Component Token</code>
```

----------------------------------------

TITLE: Grid Gutter Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file illustrating how to use the 'gutter' prop on the Row component to add spacing between columns in an Ant Design grid. The actual code implementing this example resides in the './demo/gutter.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
<code src="./demo/gutter.tsx">Grid Gutter</code>
```

----------------------------------------

TITLE: Mixed Usage
DESCRIPTION: Shows various combinations and mixed usages of Badge features. Code referenced from ./demo/mix.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
./demo/mix.tsx
```

----------------------------------------

TITLE: Referencing FloatButton Badge Debug Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/badge-debug.tsx') for debugging badge dot functionality on the Ant Design FloatButton component. This demo includes the 'debug' attribute and is intended for an iframe width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_11

LANGUAGE: html
CODE:
```
<code src="./demo/badge-debug.tsx" iframe="360" debug>debug dot</code>
```

----------------------------------------

TITLE: Referencing FloatButton Group Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/group.tsx') demonstrating the usage of the Ant Design FloatButton.Group component. The demo is intended to be displayed in an iframe with a width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: html
CODE:
```
<code src="./demo/group.tsx" iframe="360">FloatButton Group</code>
```

----------------------------------------

TITLE: DatePicker Common API - popupClassName
DESCRIPTION: 额外的弹出日历 className。从 4.23.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_13

LANGUAGE: typescript
CODE:
```
popupClassName: string
```

----------------------------------------

TITLE: Flex Order Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file demonstrating controlling the order of columns using the 'order' prop on Col components within a flex-based Ant Design grid layout. The actual code implementing this example resides in the './demo/flex-order.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_6

LANGUAGE: html
CODE:
```
<code src="./demo/flex-order.tsx">Order</code>
```

----------------------------------------

TITLE: Referencing FloatButton Tooltip Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/tooltip.tsx') demonstrating the integration of a tooltip with the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: html
CODE:
```
<code src="./demo/tooltip.tsx" iframe="360">FloatButton with tooltip</code>
```

----------------------------------------

TITLE: Importing Basic Popover Example in React
DESCRIPTION: Imports a basic example of the Popover component usage.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<code src="./demo/basic.tsx">Basic</code>
```

----------------------------------------

TITLE: Documenting Debug Component Usage in Markdown
DESCRIPTION: This code snippet provides documentation for a debug-only component in both Chinese (zh-CN) and English (en-US). It warns users not to use this component directly in production environments.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/demo/render-panel.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

调试用组件，请勿直接使用。

## en-US

Debug usage. Do not use in your production.
```

----------------------------------------

TITLE: Logging Gulp Build Stages and Error Reporting (Log/Shell)
DESCRIPTION: This multiline log output captures the sequence of build steps and error reporting from the gulp-based CI process in antd-mobile. Dependencies include gulp and various tasks like buildES, buildCJS, buildStyle, among others. The key parameters are task names and their timing, with a specific focus on the 'build2xCSS' stage where a CssSyntaxError occurs. Input is the execution of the gulpfile, while output is a log with success/failure indicators and error redirection. Limitations include its dependency on the specific project structure and the fact that it is illustrative rather than executable code.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.en-US.md#2025-04-23_snippet_0

LANGUAGE: log
CODE:
```
[09:44:16] Using gulpfile ~/work/ant-design-mobile/ant-design-mobile/gulpfile.js
[09:44:16] Starting 'default'...
[09:44:16] Starting 'clean'...
[09:44:17] Finished 'clean' after 286 ms
[09:44:17] Starting 'buildES'...
[09:44:26] Finished 'buildES' after 8.77 s
[09:44:26] Starting 'buildCJS'...
[09:44:27] Finished 'buildCJS' after 1.72 s
[09:44:27] Starting 'buildDeclaration'...
[09:44:27] Starting 'buildStyle'...
[09:44:28] Finished 'buildStyle' after 682 ms
[09:44:34] Finished 'buildDeclaration' after 6.5 s
[09:44:34] Starting 'copyAssets'...
[09:44:34] Finished 'copyAssets' after 2.37 ms
[09:44:34] Starting 'copyMetaFiles'...
[09:44:34] Finished 'copyMetaFiles' after 4.64 ms
[09:44:34] Starting 'generatePackageJSON'...
[09:44:34] Finished 'generatePackageJSON' after 2.72 ms
[09:44:34] Starting 'buildBundles'...
[09:44:45] Finished 'buildBundles' after 11 s
[09:44:45] Starting 'init2xFolder'...
[09:44:46] Finished 'init2xFolder' after 811 ms
[09:44:46] Starting 'build2xCSS'...
[09:44:46] 'build2xCSS' errored after 126 ms
[09:44:46] CssSyntaxError in plugin "gulp-postcss"
```

----------------------------------------

TITLE: DatePicker Common API - popupStyle
DESCRIPTION: 额外的弹出日历样式。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_27

LANGUAGE: typescript
CODE:
```
popupStyle: CSSProperties
```

----------------------------------------

TITLE: DatePicker Common API - onOpenChange
DESCRIPTION: 弹出日历和关闭日历的回调。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_38

LANGUAGE: typescript
CODE:
```
onOpenChange: function(open: boolean)
```

----------------------------------------

TITLE: Configuring package.json for Parallel Ant Design Versions (JSON)
DESCRIPTION: This snippet shows the necessary package.json configuration for using both Ant Design v4 and v5 concurrently. The antd field stays at 4.x for legacy code, and antd-v5 is explicitly assigned to npm:antd@5, ensuring the proper version resolution. This configuration enables selective imports and versioned usage within the project.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_17

LANGUAGE: JSON
CODE:
```
{
  "antd": "4.x",
  "antd-v5": "npm:antd@5"
}
```

----------------------------------------

TITLE: DatePicker Common API - inputReadOnly
DESCRIPTION: 设置输入框为只读（避免在移动设备上打开虚拟键盘）。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_15

LANGUAGE: typescript
CODE:
```
inputReadOnly: boolean
```

----------------------------------------

TITLE: DatePicker Common API - className
DESCRIPTION: 选择器 className。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_3

LANGUAGE: typescript
CODE:
```
className: string
```

----------------------------------------

TITLE: DatePicker Common API - open
DESCRIPTION: 控制弹层是否展开。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_22

LANGUAGE: typescript
CODE:
```
open: boolean
```

----------------------------------------

TITLE: DatePicker Common API - placement
DESCRIPTION: 选择框弹出的位置。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_26

LANGUAGE: typescript
CODE:
```
placement: 'bottomLeft' | 'bottomRight' | 'topLeft' | 'topRight'
```

----------------------------------------

TITLE: Implementing Horizontal Anchor in React
DESCRIPTION: Demo import for a horizontal anchor component example, displayed in an iframe with a height of 200px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
<code src="./demo/horizontal.tsx" iframe="200">Horizontal Anchor</code>
```

----------------------------------------

TITLE: Adding Saturation Gradient to Color Panel CSS
DESCRIPTION: Overlays a second linear gradient, from white to transparent, onto the base color and brightness gradient. This gradient controls the perceived saturation (S) dimension, making the left side less saturated (closer to gray/white) and the right side more saturated. Together with the brightness gradient, this completes the HSV color panel visual representation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.zh-CN.md#_snippet_2

LANGUAGE: css
CODE:
```
background-color: rgb(0, 106, 255);
background-image: linear-gradient(0deg, rgb(0, 0, 0), transparent),
  linear-gradient(90deg, rgb(255, 255, 255), rgba(255, 255, 255, 0));
```

----------------------------------------

TITLE: 滚动锁定调试
DESCRIPTION: Likely related to debugging issues with body scrolling when the Drawer is open.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
./demo/scroll-debug.tsx
```

----------------------------------------

TITLE: Describing Placement Options in Ant Design (Markdown)
DESCRIPTION: This snippet provides a brief description of the placement options available in Ant Design components. It includes both Chinese (zh-CN) and English (en-US) versions of the description.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/placement.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

位置有十二个方向。

## en-US

There are 12 `placement` options available.
```

----------------------------------------

TITLE: Calculating Transform Origin Using Mouse Position - rc-dialog (TypeScript pseudocode)
DESCRIPTION: This pseudocode snippet illustrates how rc-dialog calculates the CSS transformation origin for dialog animations using mouse position and the dialog DOM element's offset. The `offset` function (external) determines the dialog element's offset within the page. Dependencies: rc-dialog, knowledge of React and DOM APIs. Inputs: mousePosition, dialogElement. Outputs: a string representing the transformOrigin to be used for animation styles. Required that dialogElement is present in DOM for correct calculation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
// pseudocode\nconst elementOffset = offset(dialogElement);\nconst transformOrigin = `${mousePosition.x - elementOffset.left}px ${\n  mousePosition.y - elementOffset.top\n}px`;
```

----------------------------------------

TITLE: Setting Base Color for Color Panel CSS
DESCRIPTION: Applies a solid background color (blue in this case) to an element, serving as the starting point for the color panel display. This color typically represents the base hue at maximum saturation and value/brightness before gradients are applied.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.zh-CN.md#_snippet_0

LANGUAGE: css
CODE:
```
background-color: rgb(0, 106, 255);
```

----------------------------------------

TITLE: Debugging Flex Layouts - Ant Design - TypeScript/TSX
DESCRIPTION: This snippet points to "debug.tsx", flagged as a debug example, designed to illustrate or test Flex layout behavior, possibly by showing layout boundaries, live props, or advanced diagnostics. Involves React and Ant Design Flex with special parameters or visualization aids to help developers understand or troubleshoot flexbox issues. Input can include flexible debugging props; output is a visual or inspected layout demonstration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_5

LANGUAGE: tsx
CODE:
```
<code src=\"./demo/debug.tsx\" debug>debug</code>
```

----------------------------------------

TITLE: Portal DOM Append Implementation
DESCRIPTION: Implementation of DOM node creation and appending logic in rc-portal.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
// pseudocode
function append() {
  // This is not real world code, just for explain
  document.body.appendChild(document.createElement('div'));
}

useLayoutEffect(() => {
  if (queueCreate) {
    queueCreate(append);
  } else {
    append();
  }
}, []);
```

----------------------------------------

TITLE: Queue Creation Implementation
DESCRIPTION: Implementation of queue management for handling nested portal creation order.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
// pseudocode
const [queue, setQueue] = useState<VoidFunction[]>([]);

function queueCreate(appendFn: VoidFunction) {
  setQueue((origin) => {
    const newQueue = [appendFn, ...origin];
    return newQueue;
  });
}

useLayoutEffect(() => {
  if (queue.length) {
    queue.forEach((appendFn) => appendFn());
    setQueue([]);
  }
}, [queue]);
```

----------------------------------------

TITLE: Embedding Design Resource Cards
DESCRIPTION: This custom component tag `<ResourceCards>` is used within the Markdown file to render a structured list of design resources. The content within the tags follows a specific format (likely Markdown list items) which the component parses to display resource cards, typically containing an icon, title, description, link, and source.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/resources.en-US.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
<ResourceCards>
- Sketch Symbols
  - https://gw.alipayobjects.com/zos/basement_prod/048ee28f-2c80-4d15-9aa3-4f5ddac50465.svg
  - Sketch Symbols for Desktop
  - https://github.com/ant-design/ant-design/releases/download/5.13.3/AntDesign5.0_UI.KIT_202401.sketch
  - Official
- Mobile Components
  - https://gw.alipayobjects.com/zos/basement_prod/c0c3852c-d245-4330-886b-cb02ef49eb6d.svg
  - Sketch Symbols File for Mobile
  - https://gw.alipayobjects.com/os/bmw-prod/d6266aef-25b7-4892-b275-ce214121831c.sketch
  - Official
- Ant Design Pro
  - https://gw.alipayobjects.com/zos/basement_prod/5edc7f4d-3302-4710-963b-7b6c77ea8d06.svg
  - Common Templates and Pages
  - https://gw.alipayobjects.com/os/bmw-prod/22208f9d-f8c5-4d7c-b87a-fec290e96527.sketch
  - Official
- Ant Design Chart
  - https://gw.alipayobjects.com/zos/basement_prod/a9dc586a-fe0a-4c7d-ab4f-f5ed779b963d.svg
  - Sketch Symbols for Chart
  - https://gw.alipayobjects.com/os/bmw-prod/704968a5-2641-484e-9f65-c2735b2c0287.sketch
  - Official
- Kitchen
  - https://gw.alipayobjects.com/zos/basement_prod/d475d063-2754-4442-b9db-5d164e06acc9.svg
  - A Sketch plugin collection
  - http://kitchen.alipay.com
  - Official
- Ant Design Landing
  - https://gw.alipayobjects.com/zos/basement_prod/b443f4be-5116-49b7-873f-a7c8502b8f0e.svg
  - Landing Templates
  - https://landing.ant.design/docs/download-cn
  - Official
- Figma Resources
  - https://gw.alipayobjects.com/zos/basement_prod/7b9ed3f2-6f05-4ddb-bac3-d55feb71e0ac.svg
  - Always up-to-date Ant Design Figma resources
  - https://www.antforfigma.com
- Figma Open Source Library
  - https://gw.alipayobjects.com/zos/basement_prod/7b9ed3f2-6f05-4ddb-bac3-d55feb71e0ac.svg
  - Free open source Figma library with complete accurate to code components
  - https://www.figma.com/community/file/831698976089873405
- AntBlocks UI for Figma
  - https://uploads-ssl.webflow.com/64dc925e7cb893427a5c9cdc/64e4610f7818dcc7501057ad_antblocks-ui-card-img.svg
  - High-quality, responsive, and customizable React components built on Ant Design
  - https://www.antblocksui.com/#figma
- Ruyi Design Assistant
  - https://github.com/ant-design/ant-design/assets/507615/45201521-37d0-4360-b81e-a1260dedad7a
  - Figma Plugin,Design using Antd code component library and deliver component code that is friendly to developers
  - https://www.figma.com/community/plugin/1192146318523533547
- UI Kit for Adobe XD
  - https://uploads-ssl.webflow.com/5ecbd337fe499992c9ed75ba/5f2a7a30f3e817085cec5ac9_ant-xd-svg.svg
  - Library of components for Desktop
  - https://www.antforxd.com
- MockingBot
  - https://cdn.modao.cc/logo_mockingbot.svg
  - Rich component resources
  - https://modao.cc/square/ant-design
- JiShi Design
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*dxzdQYWlmjMAAAAAAAAAAAAAARQnAQ
  - Use fully components and templates on JiShi Design
  - https://js.design/antd
- MasterGo
  - https://mastergo-local-default.oss-cn-beijing.aliyuncs.com/ant-design-mastergo.svg
  - Use fully components and templates on MasterGo
  - https://mastergo.com/community/?utm_source=antdesign&utm_medium=link&utm_campaign=resource&cata_name=AntDesign
- Ant for Plasmic
  - https://user-images.githubusercontent.com/7129/149994038-76214796-cd6a-4e80-b0a4-117e8edac050.png
  - Drag/drop live Ant components and manipulate props in this React visual builder
  - https://www.plasmic.app/ant-design
</ResourceCards>
```

----------------------------------------

TITLE: Displaying SeedToken Table in Markdown
DESCRIPTION: This snippet uses a custom component to display the SeedToken table in the documentation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
<TokenTable type="seed"></TokenTable>
```

----------------------------------------

TITLE: Importing Splitter Component Demos in Markdown
DESCRIPTION: These code snippets import various demo components for the Splitter, showcasing different functionalities such as basic usage, controlled mode, vertical layout, collapsible panels, and multiple panels.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/splitter/index.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
<code src="./demo/size.tsx">基本用法</code>
<code src="./demo/control.tsx">受控模式</code>
<code src="./demo/vertical.tsx">垂直方向</code>
<code src="./demo/collapsible.tsx">可折叠</code>
<code src="./demo/multiple.tsx">多面板</code>
<code src="./demo/group.tsx">复杂组合</code>
<code src="./demo/nested-in-tabs.tsx" debug>标签页中嵌套</code>
<code src="./demo/lazy.tsx" version="5.23.0">延迟渲染模式</code>
<code src="./demo/debug.tsx" debug>调试</code>
```

----------------------------------------

TITLE: Referencing InputNumber Style Override Debug Example (TSX)
DESCRIPTION: References a debug-specific example file (`./demo/debug-token.tsx`) demonstrating how to override component styles, likely using design tokens, for the Ant Design InputNumber component in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_16

LANGUAGE: markdown
CODE:
```
<code src="./demo/debug-token.tsx" debug>Override Component Style</code>
```

----------------------------------------

TITLE: Displaying MapToken Table in Markdown
DESCRIPTION: This snippet uses a custom component to display the MapToken table in the documentation, noting that it inherits all SeedToken properties.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
<TokenTable type="map"></TokenTable>
```

----------------------------------------

TITLE: Displaying Deprecation Warning in Ant Design
DESCRIPTION: Example of a deprecation warning message shown when using outdated Ant Design props.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
Warning: [antd: XXX] `old prop` is deprecated. Please use `new prop` instead.
```

----------------------------------------

TITLE: Embedding Reference Book Cards
DESCRIPTION: Similar to the design resources section, this use of the `<ResourceCards>` custom component renders a structured list of reference books. The content within the tags provides the data (icon URL, title, description, link, and a color hint like #C7EBD6) for each book card.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/resources.en-US.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
<ResourceCards>
- About Face 4 #C7EBD6
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*GA-CRIRqKjgAAAAAAAAAAABkARQnAQ
  - The Interactive Design Guide for Digital Products and System
  - https://www.wiley.com/en-sg/About+Face%3A+The+Essentials+of+Interaction+Design%2C+4th+Edition-p-9781118766576
- Designing Web Interfaces #009C94
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*KK2xSJu0M80AAAAAAAAAAABkARQnAQ
  - Best Practice, Patterns and Principles for Web Interface
  - http://shop.oreilly.com/product/9780596516253.do
- Designing Interfaces #9489CF
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*slN2QpTvIs0AAAAAAAAAAABkARQnAQ
  - Interface Design Guidelines
  - https://www.amazon.com/Designing-Interfaces-Patterns-Effective-Interaction/dp/1449379702/ref=pd_sbs_14_t_1/131-2623973-6077764?_encoding=UTF8&pd_rd_i=1449379702&pd_rd_r=ebe12a8d-435f-474b-a593-72aadf26c45a&pd_rd_w=18rob&pd_rd_wg=bhRFl&pf_rd_p=5cfcfe89-300f-47d2-b1ad-a4e27203a02a&pf_rd_r=8V8CD0EE336ZZEG15DEN&psc=1&refRID=8V8CD0EE336ZZEG15DEN
- Non-Designer's Design Book, The, 4th Edition #FAF0CD
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*1HbNSIju7pEAAAAAAAAAAABkARQnAQ
  - Basic Principles of Good Design
  - http://www.peachpit.com/store/non-designers-design-book-9780133966152
- The Design of Everyday Things #F8F3D1
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*4woBSLvOjfMAAAAAAAAAAABkARQnAQ
  - About the People-oriented Design Philosophy
  - https://jnd.org/the-design-of-everyday-things-revised-and-expanded-edition/
- Emotional Design #E8EEB4
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*6ZQJQoKRORsAAAAAAAAAAABkARQnAQ
  - Explain the Role of Emotional Factors in Design
  - https://www.amazon.com/Emotional-Design-Love-Everyday-Things/dp/0465051367
- Web Form Design #C2DAED
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*VhhwRo7axKQAAAAAAAAAAABkARQnAQ
  - The Essence of Form Design
  - https://rosenfeldmedia.com/books/web-form-design/
</ResourceCards>
```

----------------------------------------

TITLE: Adding a Title to an Ant Design Divider in React/TSX
DESCRIPTION: References a demo file (`./demo/with-text.tsx`) demonstrating how to embed a title within the Ant Design `Divider` component, typically using the `children` prop, in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
<code src="./demo/with-text.tsx">Divider with title</code>
```

----------------------------------------

TITLE: Setting Common Props Ant Design Table TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Table component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling, and an optional `expandable` configuration object.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_24

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties, expandable?: { expandIcon?: props => React.ReactNode } }
```

----------------------------------------

TITLE: Adjusting Margins for Ant Design Table Demo Form Items using CSS
DESCRIPTION: This CSS rule targets Ant Design form items (`.ant-form-item`) specifically within a container having the class `.table-demo-control-bar`. It applies a right margin of 16px (`margin-inline-end`) and a bottom margin of 8px (`margin-bottom`) to control the spacing around these form items, likely used for configuration options in a table demonstration.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/dynamic-settings.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
.table-demo-control-bar .ant-form-item {
  margin-inline-end: 16px !important;
  margin-bottom: 8px !important;
}
```

----------------------------------------

TITLE: Setting Common Props Ant Design Statistic TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Statistic component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_22

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Setting Common Props Ant Design Upload TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Upload component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_36

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: AutoComplete API Properties Table
DESCRIPTION: Table defining the available properties for the AutoComplete component, including types, defaults, and version information.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/auto-complete/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| allowClear | Show clear button | boolean \| { clearIcon?: ReactNode } | false | 5.8.0: Support Object type |
| autoFocus | If get focus when component mounted | boolean | false |  |
| backfill | If backfill selected item the input when using keyboard | boolean | false |  |
```

----------------------------------------

TITLE: Using Basic Anchor Component in React
DESCRIPTION: Demo import for a basic anchor component example, which is displayed in an iframe with a height of 200px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
<code src="./demo/basic.tsx" iframe="200">Basic</code>
```

----------------------------------------

TITLE: Customizing Message Display Duration in Ant Design (Markdown)
DESCRIPTION: This snippet provides instructions in both Chinese and English on how to change the default message display duration in Ant Design from 3 seconds to 10 seconds. It uses Markdown formatting to present the information.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/message/demo/duration.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

自定义时长 `10s`，默认时长为 `3s`。

## en-US

Customize message display duration from default `3s` to `10s`.
```

----------------------------------------

TITLE: Referencing InputNumber Prefix/Suffix Example (TSX)
DESCRIPTION: References `./demo/presuffix.tsx`, showing how to add prefix and suffix icons or text to the Ant Design InputNumber component using the `prefix` and `suffix` props in React/TypeScript.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_11

LANGUAGE: markdown
CODE:
```
<code src="./demo/presuffix.tsx">Prefix / Suffix</code>
```

----------------------------------------

TITLE: Running Local Visual Regression Tests (Bash)
DESCRIPTION: Initiates a local visual regression test process for developers contributing to Ant Design. The command prompts the user to select specific components to test, facilitating early detection of visual regressions before submitting a pull request.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/visual-regression.zh-CN.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm run test:visual-regression:local # 按照提示选择组件进行视觉回归测试
```

----------------------------------------

TITLE: Setting Common Props Ant Design Message TypeScript
DESCRIPTION: Defines the common properties for the Ant Design Message component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Customizing Styles for Ant Design Divider in React/TSX
DESCRIPTION: References a demo file (`./demo/customize-style.tsx`) demonstrating how to apply custom CSS styles using the `style` or `className` props on the Ant Design `Divider` component in React/TypeScript. Marked as 'debug'.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: html
CODE:
```
<code src="./demo/customize-style.tsx" debug>Style Customization</code>
```

----------------------------------------

TITLE: Setting Common Props Ant Design TimePicker TypeScript
DESCRIPTION: Defines the common properties for the Ant Design TimePicker component. Includes standard `className` (string) and `style` (React.CSSProperties) for styling.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#_snippet_28

LANGUAGE: TypeScript
CODE:
```
{ className?: string, style?: React.CSSProperties }
```

----------------------------------------

TITLE: Defining ToolbarRenderInfoType Interface in TypeScript
DESCRIPTION: Defines the TypeScript interface `ToolbarRenderInfoType` which specifies the structure of the information object passed to the `toolbarRender` function in the Ant Design Image preview. It includes available icons, action handlers, the current transform state, the current image index (in group preview), and image details.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
{
  icons: {
    flipYIcon: React.ReactNode;
    flipXIcon: React.ReactNode;
    rotateLeftIcon: React.ReactNode;
    rotateRightIcon: React.ReactNode;
    zoomOutIcon: React.ReactNode;
    zoomInIcon: React.ReactNode;
  };
  actions: {
    onActive?: (index: number) => void; // support after 5.21.0
    onFlipY: () => void;
    onFlipX: () => void;
    onRotateLeft: () => void;
    onRotateRight: () => void;
    onZoomOut: () => void;
    onZoomIn: () => void;
    onReset: () => void; // support after 5.17.3
    onClose: () => void;
  };
  transform: TransformType,
  current: number;
  image: ImgInfo
}
```

----------------------------------------

TITLE: Documenting Alert Component Usage in Markdown
DESCRIPTION: This snippet provides multilingual documentation for the simplest usage of an Alert component. It includes descriptions in both Chinese (zh-CN) and English (en-US) to explain the basic implementation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/rate/demo/basic.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

最简单的用法。

## en-US

The simplest usage.
```

----------------------------------------

TITLE: Defining List.Item.Meta API in Markdown
DESCRIPTION: This snippet defines the API for the List.Item.Meta component, including properties like avatar, description, and title.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
| Property    | Description                  | Type      | Default | Version |
| ----------- | ---------------------------- | --------- | ------- | ------- |
| avatar      | The avatar of list item      | ReactNode | -       |         |
| description | The description of list item | ReactNode | -       |         |
| title       | The title of list item       | ReactNode | -       |         |
```

----------------------------------------

TITLE: Setting Progress Bar Linecap Style - Markdown
DESCRIPTION: Example showing how to use strokeLinecap property to modify the progress bar endpoints from rounded to butt style
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/linecap.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
strokeLinecap="butt"
```

----------------------------------------

TITLE: AnchorItem Props API Table in Markdown
DESCRIPTION: Markdown table describing the API props for the AnchorItem configuration, including key, href, target, title, and children options.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
| 参数 | 说明 | 类型 | 默认值 | 版本 |
| --- | --- | --- | --- | --- |
| key | 唯一标志 | string \| number | - |  |
| href | 锚点链接 | string | - |  |
| target | 该属性指定在何处显示链接的资源 | string | - |  |
| title | 文字内容 | ReactNode | - |  |
| children | 嵌套的 Anchor Link，`注意：水平方向该属性不支持` | [AnchorItem](#anchoritem)\[] | - |  |
| replace | 替换浏览器历史记录中的项目 href 而不是推送它 | boolean | false | 5.7.0 |
```

----------------------------------------

TITLE: Documentation Table for Shared Tooltip APIs - Markdown
DESCRIPTION: This Markdown snippet provides a structured table documenting the shared properties for Tooltip, Popconfirm, and Popover within Ant Design. It systematically itemizes each property with its description, expected type(s), default value, and availability version, following Ant Design's documentation conventions. Intended for developer reference, the table covers parameter purposes, version history, and migration notes including deprecated attributes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tooltip/shared/sharedProps.en-US.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| align | This value will be merged into placement's config, please refer to the settings [dom-align](https://github.com/yiminghe/dom-align) | object | - |  |
| arrow | Change arrow's visible state and change whether the arrow is pointed at the center of target. | boolean \| { pointAtCenter: boolean } | true | 5.2.0 |
| autoAdjustOverflow | Whether to adjust popup placement automatically when popup is off screen | boolean | true |  |
| color | The background color | string | - | 4.3.0 |
| defaultOpen | Whether the floating tooltip card is open by default | boolean | false | 4.23.0 |
| destroyTooltipOnHide | Whether destroy tooltip when hidden | boolean | false |  |
| fresh | Tooltip will cache content when it is closed by default. Setting this property will always keep updating | boolean | false | 5.10.0 |
| getPopupContainer | The DOM container of the tip, the default behavior is to create a `div` element in `body` | (triggerNode: HTMLElement) => HTMLElement | () => document.body |  |
| mouseEnterDelay | Delay in seconds, before tooltip is shown on mouse enter | number | 0.1 |  |
| mouseLeaveDelay | Delay in seconds, before tooltip is hidden on mouse leave | number | 0.1 |  |
| ~~overlayClassName~~ | Class name of the tooltip card, please use `classNames={{ root: '' }}` instead | string | - |  |
| ~~overlayStyle~~ | Style of the tooltip card, please use `styles={{ root: {} }}` | React.CSSProperties | - |  |
| ~~overlayInnerStyle~~ | Style of the tooltip inner content, please use `styles={{ body: {} }}` | React.CSSProperties | - |  |
| placement | The position of the tooltip relative to the target, which can be one of `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string | `top` |  |
| trigger | Tooltip trigger mode. Could be multiple by passing an array | `hover` \| `focus` \| `click` \| `contextMenu` \| Array&lt;string> | `hover` |  |
| open | Whether the floating tooltip card is open or not. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open)) | boolean | false | 4.23.0 |
| zIndex | Config `z-index` of Tooltip | number | - |  |
| onOpenChange | Callback executed when visibility of the tooltip card is changed | (open: boolean) => void | - | 4.23.0 |
```

----------------------------------------

TITLE: Styling Demo Elements for Ant Design
DESCRIPTION: Custom CSS styles for the Ant Design demo, specifically targeting images within elements with the class 'antd-demo-dynamic-option'. It sets the width and height of images to 20px and adds right margin.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/demo/async.md#2025-04-23_snippet_0

LANGUAGE: CSS
CODE:
```
.antd-demo-dynamic-option img {
  width: 20px;
  height: 20px;
  margin-inline-end: 8px;
}
```

----------------------------------------

TITLE: Importing Popover Arrow Example in React
DESCRIPTION: Imports an example showing the Popover component with an arrow.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
<code src="./demo/arrow.tsx">Arrow</code>
```

----------------------------------------

TITLE: Proper Code Formatting Example in React TSX
DESCRIPTION: Example showing properly formatted React/TypeScript code with correct spacing and structure
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Menu } from 'antd';

const Demo: React.FC = () => {
  const [collapsed, setCollapsed] = useState<boolean>(false);

  const toggle = () => setCollapsed(!collapsed);

  return <Menu>...</Menu>;
};

export default Demo;
```

----------------------------------------

TITLE: Dialog Content Position Calculation
DESCRIPTION: Pseudocode showing how rc-dialog calculates popup position using mouse coordinates and element offset.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
// pseudocode
const elementOffset = offset(dialogElement);
const transformOrigin = `${mousePosition.x - elementOffset.left}px ${
  mousePosition.y - elementOffset.top
}px`;
```

----------------------------------------

TITLE: Basic Avatar Component Import Examples
DESCRIPTION: Collection of demo imports showing different Avatar component usage patterns
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/avatar/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/type.tsx">Type</code>
<code src="./demo/dynamic.tsx">Autoset Font Size</code>
<code src="./demo/badge.tsx">With Badge</code>
<code src="./demo/group.tsx">Avatar.Group</code>
<code src="./demo/toggle-debug.tsx" debug>Calculate text style when hiding</code>
<code src="./demo/responsive.tsx">Responsive Size</code>
<code src="./demo/fallback.tsx" debug>Fallback</code>
<code src="./demo/component-token.tsx" debug>Component Token</code>
```

----------------------------------------

TITLE: Importing Progress Component Demo Files
DESCRIPTION: Example imports of various Progress component demonstration files showing different implementations and variations.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
<code src="./demo/line.tsx">Progress bar</code>
<code src="./demo/circle.tsx">Circular progress bar</code>
<code src="./demo/line-mini.tsx">Mini size progress bar</code>
<code src="./demo/circle-micro.tsx">Responsive circular progress bar</code>
<code src="./demo/circle-mini.tsx">Mini size circular progress bar</code>
<code src="./demo/dynamic.tsx">Dynamic</code>
<code src="./demo/format.tsx">Custom text format</code>
<code src="./demo/dashboard.tsx">Dashboard</code>
<code src="./demo/segment.tsx">Progress bar with success segment</code>
<code src="./demo/linecap.tsx">Stroke Linecap</code>
<code src="./demo/gradient-line.tsx">Custom line gradient</code>
<code src="./demo/steps.tsx">Progress bar with steps</code>
<code src="./demo/circle-steps.tsx" version="5.16.0">Circular progress bar with steps</code>
<code src="./demo/size.tsx">Progress size</code>
<code src="./demo/info-position.tsx" version="5.18.0">Change progress value position</code>
```

----------------------------------------

TITLE: Referencing FloatButton Type Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/type.tsx') demonstrating different types (`default`, `primary`) of the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
<code src="./demo/type.tsx" iframe="360">Type</code>
```

----------------------------------------

TITLE: Customizing onClick Event for Anchor in React
DESCRIPTION: Demo import for an example showing how to customize the onClick event for an anchor component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
<code src="./demo/onClick.tsx">Customize the onClick event</code>
```

----------------------------------------

TITLE: Customizing Anchor Highlight in React
DESCRIPTION: Demo import for an example showing how to customize the highlight behavior of an anchor component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
<code src="./demo/customizeHighlight.tsx">Customize the anchor highlight</code>
```

----------------------------------------

TITLE: Anchor Props API Table in Markdown
DESCRIPTION: Markdown table describing the API props for the Anchor component, including parameters like affix, bounds, getContainer, and other configuration options.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.zh-CN.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
| 参数 | 说明 | 类型 | 默认值 | 版本 |
| --- | --- | --- | --- | --- |
| affix | 固定模式 | boolean \| Omit<AffixProps, 'offsetTop' \| 'target' \| 'children'> | true | object: 5.19.0 |
| bounds | 锚点区域边界 | number | 5 |  |
| getContainer | 指定滚动的容器 | () => HTMLElement | () => window |  |
| getCurrentAnchor | 自定义高亮的锚点 | (activeLink: string) => string | - |  |
| offsetTop | 距离窗口顶部达到指定偏移量后触发 | number |  |  |
| showInkInFixed | `affix={false}` 时是否显示小方块 | boolean | false |  |
| targetOffset | 锚点滚动偏移量，默认与 offsetTop 相同，[例子](#anchor-demo-targetoffset) | number | - |  |
| onChange | 监听锚点链接改变 | (currentActiveLink: string) => void | - |  |
| onClick | `click` 事件的 handler | (e: MouseEvent, link: object) => void | - |  |
| items | 数据化配置选项内容，支持通过 children 嵌套 | { key, href, title, target, children }\[] [具体见](#anchoritem) | - | 5.1.0 |
| direction | 设置导航方向 | `vertical` \| `horizontal` | `vertical` | 5.2.0 |
| replace | 替换浏览器历史记录中项目的 href 而不是推送它 | boolean | false | 5.7.0 |
```

----------------------------------------

TITLE: Defining Skeleton Component Examples in Markdown
DESCRIPTION: This snippet defines sections in Chinese and English to demonstrate various skeleton components in Ant Design. It includes buttons, avatars, input fields, images, and custom nodes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/skeleton/demo/element.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

骨架按钮、头像、输入框、图像和自定义节点。

## en-US

Skeleton Button, Avatar, Input, Image and Node.
```

----------------------------------------

TITLE: Describing Layout with Top Navigation and Sidebar in Markdown
DESCRIPTION: Provides descriptions in Chinese and English for a layout component that includes both top navigation and sidebar. This layout style is commonly used in application websites and is distinguished by not having margins on both sides.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/demo/top-side-2.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

同样拥有顶部导航及侧边栏，区别是两边未留边距，多用于应用型的网站。

## en-US

Both the top navigation and the sidebar, commonly used in application site.
```

----------------------------------------

TITLE: Defining Audio Element in HTML
DESCRIPTION: Defines an HTML audio element with a source pointing to an MP3 file, intended for providing pronunciation audio.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/introduce.en-US.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<audio id="antd-audio">
  <source src="https://mdn.alipayobjects.com/huamei_iwk9zp/afts/file/A*ChCdRJ0w8SUAAAAAAAAAAAAADgCCAQ" type="audio/mpeg">
</audio>
```

----------------------------------------

TITLE: DatePicker Common API - components
DESCRIPTION: 自定义面板。从 5.14.0 版本开始支持。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_6

LANGUAGE: typescript
CODE:
```
components: Record<Panel | 'input', React.ComponentType>
```

----------------------------------------

TITLE: Describing Dynamic Mode Switching in Chinese
DESCRIPTION: This markdown snippet introduces the concept of dynamic mode switching in Chinese. It briefly states that the example will demonstrate how to switch modes dynamically.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/demo/switch-mode.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

展示动态切换模式。
```

----------------------------------------

TITLE: Referencing FloatButton Group Menu Mode Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/group-menu.tsx') demonstrating the menu mode configuration of the Ant Design FloatButton.Group component. The demo is intended to be displayed in an iframe with a width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_6

LANGUAGE: html
CODE:
```
<code src="./demo/group-menu.tsx" iframe="360">Menu mode</code>
```

----------------------------------------

TITLE: Using Legacy JSX Anchor in React
DESCRIPTION: Debug demo import for a deprecated JSX implementation of the anchor component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_8

LANGUAGE: tsx
CODE:
```
<code src="./demo/legacy-anchor.tsx" debug>Deprecated JSX demo</code>
```

----------------------------------------

TITLE: DatePicker Common API - size
DESCRIPTION: 输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_31

LANGUAGE: typescript
CODE:
```
size: 'large' | 'middle' | 'small'
```

----------------------------------------

TITLE: DatePicker API - showNow
DESCRIPTION: 显示当前日期时间的快捷选择。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_49

LANGUAGE: typescript
CODE:
```
showNow: boolean
```

----------------------------------------

TITLE: Configuring Document Metadata using Frontmatter (YAML)
DESCRIPTION: This snippet uses YAML frontmatter to define metadata for the documentation page. It sets the group to "Design Patterns", type to "Principles", order to 4, and the main title to "Repetition". This metadata is likely used by a static site generator or documentation system (like Dumi used in Ant Design) to organize and display the content correctly.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/repetition.en-US.md#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
---
group: Design Patterns
type: Principles
order: 4
title: Repetition
---
```

----------------------------------------

TITLE: Updating Locale Test Snapshots with Jest (Bash)
DESCRIPTION: This Bash command is used during the process of adding a new language pack to Ant Design. It runs the Jest test suite specifically for the locale components (`components/locale`) in snapshot update mode (`-u`), ensuring that the test snapshots reflect the changes introduced by the new locale. This command should be run from the project root after making code changes and installing dependencies.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/i18n.en-US.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm run test -- components/locale -u
```

----------------------------------------

TITLE: Referencing FloatButton Shape Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/shape.tsx') demonstrating different shapes (`circle`, `square`) of the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: html
CODE:
```
<code src="./demo/shape.tsx" iframe="360">Shape</code>
```

----------------------------------------

TITLE: Referencing Controlled FloatButton Group Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/controlled.tsx') demonstrating how to control the open state of an Ant Design FloatButton.Group component using the 'open' prop. The demo is intended to be displayed in an iframe with a width of 360px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_7

LANGUAGE: html
CODE:
```
<code src="./demo/controlled.tsx" iframe="360">Controlled mode</code>
```

----------------------------------------

TITLE: Describing Pagination Usage in List Component (Markdown)
DESCRIPTION: This snippet provides explanations in Chinese and English about how to use and set the pagination property for a List component. It's likely part of documentation or a README file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/demo/pagination.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

可通过 `pagination` 属性使用列表分页，并进行设置。

## en-US

List pagination can be used and set through the `pagination` property.
```

----------------------------------------

TITLE: Documenting Vertical Space.Compact for Buttons in Ant Design
DESCRIPTION: This markdown snippet provides descriptions in Chinese and English for the vertical compact layout feature in Ant Design. It specifies that this layout is currently only supported for Button combinations.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/compact-button-vertical.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

垂直方向的紧凑布局，目前仅支持 Button 组合。

## en-US

Vertical Mode for Space.Compact, support Button only.
```

----------------------------------------

TITLE: Describing Circular Progress Bar in English
DESCRIPTION: Markdown description in English explaining a circular progress bar that supports steps and color segments. It specifies the default gap between segments as 2px.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/circle-steps.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
## en-US

A circular progress bar that support steps and color segments, default gap is 2px.
```

----------------------------------------

TITLE: Importing Component Token Example
DESCRIPTION: Reference to a debug example for component token configuration
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
<code src="./demo/component-token.tsx" debug>Component Token</code>
```

----------------------------------------

TITLE: Styling Markdown Recommendation Tables in CSS
DESCRIPTION: This CSS snippet styles markdown tables (`.markdown table`). It targets the first cell (`td:first-child`) to set a specific width and font weight, likely for the category column. It also styles anchor tags (`a`) within table cells, adding right margin and a pipe separator (`::after`) between consecutive links, enhancing readability when multiple recommendations are listed.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/recommendation.en-US.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
<style>
.markdown table td:first-child {
  width: 20%;
  font-weight: 500;
}
.markdown table td > a:not(:last-child) {
  margin-inline-end: 18px;
}
.markdown table td > a:not(:last-child)::after {
  position: absolute;
  margin: 0 6px 0 8px;
  color: #bbb;
  content: '|';
  pointer-events: none;
}
</style>
```

----------------------------------------

TITLE: Updating Interface to Add Optional Max Length Property (TSX)
DESCRIPTION: This snippet shows an update to the `StrProps` interface, adding an optional `maxLen` property of type number. This modification allows the `MyStr` component (or others using this interface) to potentially receive a maximum length constraint.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
interface StrProps {
  value: string;
  maxLen?: number;
}
```

----------------------------------------

TITLE: Unformatted React Component Example
DESCRIPTION: Example showing poorly formatted React/TypeScript code with improper indentation and spacing versus well-formatted code.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.en-US.md#2025-04-23_snippet_1

LANGUAGE: tsx
CODE:
```
renderBatchButton() {

return(



<Dropdown overlay={this. renderExportMenu("2")}>





export warehouse order

);

}


renderExportMenu(category) {

let exportFile=({key})=>{

console. log(key)

}

let items=[];

if(this.props.global.template_list){

items=this.props.global.template_list.map((item)=>{

if(category===item.category){

return <Menu.Item key={item.id}>{item.name}</Menu.Item>;

}

});

}
```

----------------------------------------

TITLE: DatePicker API - onPanelChange
DESCRIPTION: 日期面板变化时的回调。
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.zh-CN.md#_snippet_56

LANGUAGE: typescript
CODE:
```
onPanelChange: function(value: dayjs, mode: PanelMode)
```

----------------------------------------

TITLE: Creating Static Anchor in React
DESCRIPTION: Demo import for a static anchor component example without iframe wrapping.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: tsx
CODE:
```
<code src="./demo/static.tsx" >Static Anchor</code>
```

----------------------------------------

TITLE: Describing Panel Configuration in Ant Design (Markdown)
DESCRIPTION: This snippet provides descriptions in Chinese and English for a specific panel configuration. It explains that the second panel has a width of 0 and the third panel cannot be resized.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/splitter/demo/debug.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

面板 2 宽度为 0，面板 3 禁止调整大小。

## en-US

Panel 2 width is 0, panel 3 is not resizable.
```

----------------------------------------

TITLE: Embedding Resource Articles
DESCRIPTION: This custom component tag `<ResourceArticles>` is likely used within the Markdown file to fetch and display a curated list of articles related to Ant Design. The component handles the data fetching and rendering logic, presenting the articles in a predefined format.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/resources.en-US.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
<ResourceArticles></ResourceArticles>
```

----------------------------------------

TITLE: Structuring Detail Page Content with HTML and Markdown
DESCRIPTION: This snippet demonstrates how to structure content for a detail page design pattern using a combination of HTML and Markdown. It includes sections for design goals, principles, and typical templates.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/detail-page.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
---
group: Design Patterns
type: Template Document
order: 3
title: Detail Page
---

Detail Pages display the complete data to users. Users can edit the information or do other operations.

## Design Goals

To increase the information viewing and searching efficiency. To raise the convenience of operation.

## Design Principles

<div class="design-inline-cards">
  <div>
    <img src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*3CfhSZLxsIEAAAAAAAAAAABkARQnAQ" />
    <div>
      <h4>Direct</h4>
      <p>Try to display the information as flat as possible. Do not hide or fold up the content if not necessary.</p>
    </div>
  </div>
  <div>
    <img src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*lN6IRbhv8fIAAAAAAAAAAABkARQnAQ" />
    <div>
      <h4>Clear hierarchy</h4>
      <p>In order to decrease the information complexity on each page, put information in levels and groups, following the principle of proximity.</p>
    </div>
  </div>
  <div>
    <img src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*jXDwQ6NF7dIAAAAAAAAAAABkARQnAQ" />
    <div>
      <h4>Concise</h4>
      <p>Reduce the use of complex structures, try to use similar layouts and modules to reduce the interference of structural differences to users, and let them focus on information itself.</p>
    </div>
  </div>
</div>

## Typical Templates

### Basic Layouts

<ImagePreview>
<img class="preview-img no-padding" src="https://gw.alipayobjects.com/zos/antfincdn/pCRKNg9k17/1bd63a4b-d1f4-4e07-b22a-d473846ffa4c.png">
</ImagePreview>

Basic Detail Pages directly show all the information at the same level of hierarchy. We suggest such method of displaying data.
```

----------------------------------------

TITLE: Displaying Images with HTML Div
DESCRIPTION: Uses an HTML div with the class 'pic-plus' to arrange two images side-by-side, separated by a '+' symbol, likely for visual representation of combining concepts or logos.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/introduce.en-US.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<div class="pic-plus">
  <img width="150" draggable="false" src="https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg" />
  <span>+</span>
  <img width="160" draggable="false" src="https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg" />
</div>
```

----------------------------------------

TITLE: Ribbon Badge
DESCRIPTION: Demonstrates the usage of the Badge.Ribbon sub-component. Code referenced from ./demo/ribbon.tsx.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.zh-CN.md#_snippet_9

LANGUAGE: TypeScript
CODE:
```
./demo/ribbon.tsx
```

----------------------------------------

TITLE: Semantic DOM Structure
DESCRIPTION: Illustrates the semantic DOM structure of the Drawer component, likely used in conjunction with `classNames` and `styles` props.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
./demo/_semantic.tsx
```

----------------------------------------

TITLE: Using Native HTML Input with maxLength Attribute (TSX/JSX)
DESCRIPTION: This snippet shows a standard HTML `<input>` element rendered within a TSX/JSX context. It uses the `value` attribute to set the initial text and the `maxLength` attribute (set to 5) to restrict user input, not to truncate the initially displayed value.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_3

LANGUAGE: tsx
CODE:
```
<input value="Hello World" maxLength={5} />
```

----------------------------------------

TITLE: Displaying Processing Results in Markdown
DESCRIPTION: This snippet provides multilingual descriptions for a component that displays processing results. It includes both Chinese (zh-CN) and English (en-US) versions of the description.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/result/demo/info.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

展示处理结果。

## en-US

Show processing results.
```

----------------------------------------

TITLE: Showing Inline Style Duplication in HTML
DESCRIPTION: Highlights the drawback of the basic inline style method in SSR. When multiple instances of the same component (like Button) are rendered, the corresponding `<style>` block is repeated for each instance, unnecessarily increasing the HTML size.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
<div>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World 1</button>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World 2</button>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World 3</button>
</div>
```

----------------------------------------

TITLE: Linking Semantic DOM Demo with Optional Simplification Toggle in Ant Design React Markdown
DESCRIPTION: This code snippet includes a special embedded code demo representing the semantic structure of the Slider component. The 'simplify' attribute, when present, toggles a simplified or focused version of the semantic demo. Dependencies include the semantic demo file and Markdown that interprets such custom tags. Inputs include file path and attributes; output renders a visual or interactive demo explaining the Slider's DOM semantics, constrained to the simplified view if 'simplify' is true.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/index.en-US.md#2025-04-23_snippet_1

LANGUAGE: Markdown
CODE:
```
<code src="./demo/_semantic.tsx" simplify="true"></code>
```

----------------------------------------

TITLE: Displaying an Image Example of Repetitive Design Elements (HTML/JSX)
DESCRIPTION: Similar to the previous snippet, this embeds an image illustrating "Example of repetitive design elements" using the `<ImagePreview>` component. It uses the same structure, including `src`, `alt`, and `class` attributes for the `<img>` tag, likely rendering within the Ant Design documentation's style.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/repetition.en-US.md#2025-04-23_snippet_2

LANGUAGE: html
CODE:
```
<ImagePreview>
<img class="preview-img" alt="Example of repetitive design elements" src="https://gw.alipayobjects.com/zos/rmsportal/HXvcTaEbEWWFaQbiEpLg.png">
</ImagePreview>
```

----------------------------------------

TITLE: Demonstrating React 18 StrictMode Nested Containers - HTML
DESCRIPTION: This HTML snippet demonstrates the resulting DOM structure when using React 18 StrictMode, where multiple mount containers can be created and only one is utilized, while earlier ones remain empty. This visual example aids understanding of how component mounting and effect cleanup produces additional DOM nodes, directly related to the React concurrency model. No dependencies beyond a React-rendered application structure. Inputs and outputs are static; this snippet is for illustrative purposes only.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.en-US.md#2025-04-23_snippet_2

LANGUAGE: HTML
CODE:
```
<body>\n  <div id=\"root\">...</div>\n\n  <!-- Empty -->\n  <div className=\"sample-holder\"></div>\n\n  <!-- Real in use -->\n  <div className=\"sample-holder\">\n    <div className=\"ant-component-wrapper\">...</div>\n  </div>\n</body>\n
```

----------------------------------------

TITLE: Embedding Image Preview in Markdown for Drag and Drop Picture/File Example
DESCRIPTION: This snippet demonstrates how to embed an image preview for a drag and drop picture/file interface. It uses HTML-like tags within the Markdown.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/direct.en-US.md#2025-04-23_snippet_4

LANGUAGE: markdown
CODE:
```
<ImagePreview>
<img class="preview-img" alt="Example of Drag and Drop picture/file" src="https://gw.alipayobjects.com/zos/rmsportal/wuAOmxmpXkcZlHzTbIvY.png">
</ImagePreview>
```

----------------------------------------

TITLE: Importing Spin Component Examples in TypeScript
DESCRIPTION: These code snippets demonstrate how to import various examples of the Spin component in TypeScript. Each example showcases different features and use cases of the Spin component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
<code src="./demo/basic.tsx">Basic Usage</code>
```

LANGUAGE: typescript
CODE:
```
<code src="./demo/size.tsx">Size</code>
```

LANGUAGE: typescript
CODE:
```
<code src="./demo/nested.tsx">Embedded mode</code>
```

LANGUAGE: typescript
CODE:
```
<code src="./demo/tip.tsx">Customized description</code>
```

LANGUAGE: typescript
CODE:
```
<code src="./demo/delayAndDebounce.tsx">Delay</code>
```

LANGUAGE: typescript
CODE:
```
<code src="./demo/custom-indicator.tsx">Custom spinning indicator</code>
```

LANGUAGE: typescript
CODE:
```
<code src="./demo/percent.tsx" version="5.18.0">Progress</code>
```

LANGUAGE: typescript
CODE:
```
<code src="./demo/fullscreen.tsx">Fullscreen</code>
```

----------------------------------------

TITLE: Calculating Saturation and Brightness from Anchor Position TypeScript
DESCRIPTION: Calculates the saturation and brightness values based on the horizontal and vertical position of a selection anchor within the color panel container. It requires the dimensions of the container and the anchor, and the anchor's offset position relative to the container. The calculation maps the anchor's position to the 0-1 range for saturation and brightness.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.zh-CN.md#_snippet_3

LANGUAGE: typescript
CODE:
```
...
const { width, height } = containerRef.current.getBoundingClientRect();
const { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();
const centerOffsetX = targetWidth / 2;
const centerOffsetY = targetHeight / 2;
// 饱和度
const saturation = (offset.x + centerOffsetX) / width;
// 明度
const bright = 1 - (offset.y + centerOffsetY) / height;
```

----------------------------------------

TITLE: Importing Popover Wireframe Example in React
DESCRIPTION: Imports a debug example showing a wireframe version of the Popover component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_9

LANGUAGE: tsx
CODE:
```
<code src="./demo/wireframe.tsx" debug>Wireframe</code>
```

----------------------------------------

TITLE: Importing Internal Popover Panel Example in React
DESCRIPTION: Imports a debug example for an internal Popover panel component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_8

LANGUAGE: tsx
CODE:
```
<code src="./demo/render-panel.tsx" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>
```

----------------------------------------

TITLE: Importing Popover Semantic DOM Example in React
DESCRIPTION: Imports a simplified example demonstrating the semantic DOM structure of the Popover component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_11

LANGUAGE: tsx
CODE:
```
<code src="./demo/_semantic.tsx" simplify="true"></code>
```

----------------------------------------

TITLE: Referencing InputNumber Filled Variant Debug Example (TSX)
DESCRIPTION: References a debug-specific example file (`./demo/filled-debug.tsx`) related to the 'filled' variant of the Ant Design InputNumber component in React/TypeScript. Intended for internal debugging.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_9

LANGUAGE: markdown
CODE:
```
<code src="./demo/filled-debug.tsx" debug>Filled Debug</code>
```

----------------------------------------

TITLE: Embedding Image Preview in Markdown for Click-to-Edit Example
DESCRIPTION: This snippet demonstrates how to embed an image preview in Markdown, showing different states of a click-to-edit interface. It includes a description of each state and uses HTML-like tags within the Markdown.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/direct.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
<ImagePreview>
<img class="preview-img" alt="Example of click to edit" description="Status 1: Common browsing mode, do not distinguish between editable  and  non-editable lines；<br>Status 2: On mouse hover, the background is backlit with yellow. A tool tip invites the user to 'Click to edit'；<br>Status 3: Once the user clicks on the title, the form elements 「Input box」, 「OK」 and 「Cancel」 appear, and the cursor is positioned in the 「input box」." src="https://gw.alipayobjects.com/zos/rmsportal/EXKwsvUkIUNkHBSsOlRi.png">
</ImagePreview>
```

----------------------------------------

TITLE: Embedding Image Preview in Markdown for Drag and Drop List Example
DESCRIPTION: This snippet shows how to embed an image preview for a drag and drop list interface. It includes a description of different states and uses HTML-like tags within the Markdown.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/direct.en-US.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
<ImagePreview>
<img class="preview-img" alt="Example of Drag and Drop List" description="Status 1: On mouse hover,a removable 「icon」 appears.；<br>Status 2： When hovering over the 「icon」, the pointer changes into a 「hand」, click-and-drag operation can be used；<br>Status 3：Drag  target to the placeable block. When  blue stroke appears, inform  user that object can be placed in the block." src="https://gw.alipayobjects.com/zos/rmsportal/xZWSNecZhGXaAVluxOAK.png">
</ImagePreview>
```

----------------------------------------

TITLE: Documenting Nested Space.Compact Usage in Ant Design
DESCRIPTION: This markdown snippet provides documentation for nested Space.Compact usage in Ant Design. It includes descriptions in both Chinese (zh-CN) and English (en-US) to explain the concept of compact layout in nested scenarios.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/compact-nested.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

嵌套使用的紧凑布局。

## en-US

Nested `Space.Compact`.
```

----------------------------------------

TITLE: Embedding Image Preview in Markdown for Multi-Field Inline Edit Example
DESCRIPTION: This snippet demonstrates how to embed an image preview for a multi-field inline edit interface. It includes a description of the edit mode and uses HTML-like tags within the Markdown.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/direct.en-US.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
<ImagePreview>
<img class="preview-img" alt="Example of Multi-Field Inline Edit" description="Edit mode without destroying integrity can enlarge the space in order to put down the 「Input box」 and other form elements. Besides, when switching the edit mode in the Table, it is necessary to ensure that each column does not beat." src="https://gw.alipayobjects.com/zos/rmsportal/ukbXcTHrgPmTfHmCassD.png">
</ImagePreview>
```

----------------------------------------

TITLE: Using ComponentOverview JSX Component in Markdown
DESCRIPTION: This code snippet demonstrates the usage of the ComponentOverview JSX component within a Markdown file. The component is likely responsible for rendering a visual overview of all available Ant Design components on the page.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/overview/index.en-US.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
<ComponentOverview></ComponentOverview>
```

----------------------------------------

TITLE: Importing Popover Arrow Point at Center Example in React
DESCRIPTION: Imports a debug example for the Popover component with the arrow pointing at the center.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_4

LANGUAGE: tsx
CODE:
```
<code src="./demo/arrow-point-at-center.tsx" debug>Arrow.pointAtCenter</code>
```

----------------------------------------

TITLE: Describing Input Variants in Ant Design
DESCRIPTION: This snippet outlines the three available input variants in Ant Design: outlined, filled, and borderless. It provides both Chinese and English descriptions for internationalization purposes.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/filled-debug.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

可选 `outlined` `filled` `borderless` 三种形态。

## en-US

There are `outlined` `filled` and `borderless`, totally three variants to choose from.
```

----------------------------------------

TITLE: Basic Anchor Structure in Markdown
DESCRIPTION: Markdown structure showing component category, title, subtitle, description, and other metadata for the Anchor component documentation.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
---
category: Components
title: Anchor
subtitle: 锚点
description: 用于跳转到页面指定位置。
cover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*ufP1TLS5VvIAAAAAAAAAAAAADrJ8AQ/original
coverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*_9_eTrgvHNQAAAAAAAAAAAAADrJ8AQ/original
demo:
group:
  title: 导航
  order: 3
---
```

----------------------------------------

TITLE: Displaying AliasToken Table in Markdown
DESCRIPTION: This snippet uses a custom component to display the AliasToken table in the documentation, noting that it inherits all SeedToken and MapToken properties.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.zh-CN.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
<TokenTable type="alias"></TokenTable>
```

----------------------------------------

TITLE: Adding Status to Select Component in Ant Design (Markdown)
DESCRIPTION: This snippet shows how to use the 'status' prop to add error or warning states to the Select component in Ant Design. It includes descriptions in both Chinese and English.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/status.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

使用 `status` 为 Select 添加状态，可选 `error` 或者 `warning`。

## en-US

Add status to Select with `status`, which could be `error` or `warning`.
```

----------------------------------------

TITLE: Documenting Debug Component Usage in Markdown
DESCRIPTION: This snippet provides documentation for a debug-only component in both Chinese and English. It warns developers not to use this component in production environments.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/notification/demo/render-panel.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

调试用组件，请勿直接使用。

## en-US

Debug usage. Do not use in your production.
```

----------------------------------------

TITLE: Referencing Internal InputNumber Panel Debug Example (TSX)
DESCRIPTION: References an internal, debug-only example file (`./demo/render-panel.tsx`) related to the internal rendering panel of the Ant Design InputNumber component in React/TypeScript. Not intended for public use.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_15

LANGUAGE: markdown
CODE:
```
<code src="./demo/render-panel.tsx" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>
```

----------------------------------------

TITLE: Rendering and Debugging Internal Tour Panel in Ant Design using TypeScript/React
DESCRIPTION: This advanced code snippet ('./demo/render-panel.tsx') is referenced for internal or debug purposes, as indicated by the label '_InternalPanelDoNotUseOrYouWillBeFired'. It displays the internal panel rendering logic of Ant Design Tour. It depends on React and Ant Design. The code may expose panel internals for testing or diagnostic purposes not recommended for production use. Output is a specialized, potentially unstable panel view.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_6

LANGUAGE: TypeScript
CODE:
```
<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>
```

----------------------------------------

TITLE: Specifying Dropdown Placement in Ant Design (Markdown)
DESCRIPTION: This snippet provides documentation in Chinese and English on how to use the 'placement' prop to manually set the position of dropdown popups in Ant Design. It highlights the flexibility of controlling popup positioning.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/placement-debug.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

可以通过 `placement` 手动指定弹出的位置。

## en-US

You can manually specify the position of the popup via `placement`.
```

----------------------------------------

TITLE: Displaying Multilingual Debug Component Warning in Markdown
DESCRIPTION: This snippet shows a warning message in both Chinese (zh-CN) and English (en-US) about a debug component that should only be used for debugging purposes and not in production environments.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/popconfirm/demo/render-panel.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

调试用组件，请勿直接使用。

## en-US

Debug usage. Do not use in your production.
```

----------------------------------------

TITLE: Bilingual Documentation for Horizontal Anchors
DESCRIPTION: Documentation in both Chinese and English explaining horizontal anchor alignment functionality in Ant Design.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/demo/horizontal.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
## zh-CN

横向 Anchor。

## en-US

Horizontally aligned anchors
```

----------------------------------------

TITLE: Describing Input Variants in Ant Design (Markdown)
DESCRIPTION: This snippet outlines the three available variants for input components in Ant Design: outlined, filled, and borderless. It provides both Chinese and English descriptions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/auto-complete/demo/variant.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

可选 `outlined` `filled` `borderless` 三种形态。

## en-US

There are `outlined` `filled` and `borderless`, totally three variants to choose from.
```

----------------------------------------

TITLE: Embedding Image Preview in Markdown for Text Link/Icon Edit Example
DESCRIPTION: This snippet shows how to embed an image preview for a text link/icon edit interface. It includes a description of different states and uses HTML-like tags within the Markdown.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/direct.en-US.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
<ImagePreview>
<img class="preview-img" alt="Example of Text link/Icon Edit" description="Status 1: Text link/icon appears near the editable line.；<br>Status 2: Once the mouse clicks 「edit」,the form elements 「Input box」, 「Ok」 and 「Cancel」 appear, and the cursor is positioned in the 「input box」.
" src="https://gw.alipayobjects.com/zos/rmsportal/qiAYBQKcQnmavxHzkeaK.png">
</ImagePreview>
```

----------------------------------------

TITLE: Defining Multilingual Debug Usage Instructions in Markdown
DESCRIPTION: This snippet demonstrates how to provide debug usage instructions in multiple languages using Markdown headers. It includes both Chinese (zh-CN) and English (en-US) versions.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/demo/extra-style.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

调试使用

## en-US

Debug usage
```

----------------------------------------

TITLE: Referencing Internal FloatButton Panel Render Demo (TSX)
DESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/render-panel.tsx') demonstrating an internal panel rendering mechanism ('_InternalPanelDoNotUseOrYouWillBeFired') related to the FloatButton component. This is marked as a debug example and intended for internal use only.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_12

LANGUAGE: html
CODE:
```
<code src="./demo/render-panel.tsx" debug>\_InternalPanelDoNotUseOrYouWillBeFired</code>
```

----------------------------------------

TITLE: Switching and Pulling Fix Branch
DESCRIPTION: Commands to pull latest changes and switch to the fix branch for development.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-collaborator.en-US.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
git pull
git checkout fix-branch
```

----------------------------------------

TITLE: Describing Circular Progress Bar in Chinese
DESCRIPTION: Markdown description in Chinese explaining a circular progress bar with step support and color segment display. It mentions the default gap of 2px between segments.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/circle-steps.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

步骤进度圈，支持颜色分段展示，默认间隔为 2px。
```

----------------------------------------

TITLE: Defining Multilingual Description for Horizontal Top Navigation Menu
DESCRIPTION: This Markdown snippet provides descriptions for a horizontal top navigation menu component in Chinese (zh-CN) and English (en-US). It is typically used in documentation or example files to explain the purpose of the component.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/demo/horizontal.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

水平的顶部导航菜单。

## en-US

Horizontal top navigation menu.
```

----------------------------------------

TITLE: Flex Stretch Example using Ant Design in React/TypeScript
DESCRIPTION: This snippet represents a link to an external file illustrating how columns can stretch to fill available space using flex properties within the Ant Design grid system. The actual code implementing this example resides in the './demo/flex-stretch.tsx' file.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_7

LANGUAGE: html
CODE:
```
<code src="./demo/flex-stretch.tsx">Flex Stretch</code>
```

----------------------------------------

TITLE: Documenting Tree Component Node Manipulation in Markdown
DESCRIPTION: This snippet provides multilingual documentation for a tree component example. It explains how to add nodes by clicking and remove nodes through dragging or key presses, in both Chinese and English.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/demo/editable.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

点击添加节点，拖出或者按键删除节点。

## en-US

Click to add a node, drag out or press the key to delete the node.
```

----------------------------------------

TITLE: Code Demo References in Markdown
DESCRIPTION: Markdown code block references to various demo examples of the Anchor component, including basic usage, horizontal layout, static positioning, and custom events.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
<!-- prettier-ignore -->
<code src="./demo/basic.tsx" iframe="200">基本</code>
<code src="./demo/horizontal.tsx" iframe="200">横向 Anchor</code>
<code src="./demo/static.tsx">静态位置</code>
<code src="./demo/onClick.tsx">自定义 onClick 事件</code>
<code src="./demo/customizeHighlight.tsx">自定义锚点高亮</code>
<code src="./demo/targetOffset.tsx" iframe="200">设置锚点滚动偏移量</code>
<code src="./demo/onChange.tsx">监听锚点链接改变</code>
<code src="./demo/replace.tsx" iframe="200">替换历史中的 href</code>
<code src="./demo/legacy-anchor.tsx" debug>废弃的 JSX 示例</code>
<code src="./demo/component-token.tsx" iframe="800" debug>组件 Token</code>
```

----------------------------------------

TITLE: Adding Remote Upstream and Pulling Latest Code
DESCRIPTION: Commands to add the original Ant Design repository as upstream remote and pull the latest master branch.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-collaborator.en-US.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
cd ant-design
git remote add upstream https://github.com/ant-design/ant-design
```

LANGUAGE: bash
CODE:
```
git pull upstream master
```

----------------------------------------

TITLE: Running Ant Design Image Tests (Bash)
DESCRIPTION: Executes the image snapshot tests for Ant Design components using `jest-puppeteer`. Screenshots are saved in `imageSnapshots`. An optional argument allows testing a specific component, e.g., `npm run test:image -- components/button`.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/visual-regression.zh-CN.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run test:image # 截图将会保存在 imageSnapshots 目录下, 指定组件截图可以使用 npm run test:image -- components/button
```

----------------------------------------

TITLE: Adding pnpm Cache Steps to a GitHub Actions Workflow (YAML)
DESCRIPTION: This YAML snippet demonstrates adding steps to a GitHub Actions workflow to implement pnpm dependency caching. It first ensures the `pnpm-lock.yaml` file exists using `pnpm install --frozen-lockfile --ignore-scripts`. It then retrieves the pnpm store path using `pnpm store path` and stores it in an output variable `STORE_PATH`. Finally, it uses the `actions/cache@v4` action to cache this store path. The cache `key` is composed using the runner's OS, a static string 'pnpm-store-', and the hash of the `pnpm-lock.yaml` file, ensuring the cache is invalidated only when dependencies change. A `restore-key` is also provided for partial cache matches.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/github-actions-workflow.zh-CN.md#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
# ...
- name: create pnpm-lock.yaml (创建 pnpm-lock.yaml)
  run: pnpm install --frozen-lockfile --ignore-scripts

- name: Get pnpm store directory (获取 pnpm store 目录)
  id: pnpm-cache
  shell: bash
  run: |
    echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

- name: Setup pnpm cache (设置 pnpm 缓存)
  uses: actions/cache@v4
  with:
    path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
    restore-keys: |
      ${{ runner.os }}-pnpm-store-

# ...
```

----------------------------------------

TITLE: Incorrect Code Formatting Example in React TSX
DESCRIPTION: Example demonstrating poorly formatted React/TypeScript code with inconsistent spacing and structure
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.zh-CN.md#2025-04-23_snippet_0

LANGUAGE: tsx
CODE:
```
renderBatchButton() {

return(



<Dropdown overlay={this.renderExportMenu("2")}>





导出出库单

);

}


renderExportMenu(category) {

let exportFile=({key})=>{

console.log(key)

}

let items=[];

if(this.props.global.template_list){

items=this.props.global.template_list.map((item)=>{

if(category===item.category){

return <Menu.Item key={item.id}>{item.name}</Menu.Item>;

}

});

}
```

----------------------------------------

TITLE: _InternalPanelDoNotUseOrYouWillBeFired
DESCRIPTION: Refers to an internal API (`drawerRender`) for custom panel rendering, marked as internal and not for public use.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/index.zh-CN.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
./demo/render-panel.tsx
```

----------------------------------------

TITLE: Documenting Debug Component Usage in Ant Design (Markdown)
DESCRIPTION: This snippet provides multilingual documentation for a debugging component in Ant Design. It warns users in both Chinese and English that the component is for debug purposes only and should not be used in production environments.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/render-panel.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

调试用组件，请勿直接使用。

## en-US

Debug usage. Do not use in your production.
```

----------------------------------------

TITLE: Documenting Sticky Header Component Usage in Markdown
DESCRIPTION: Provides a brief description of the sticky header component's purpose in both Chinese and English. It explains that the component is typically used to fix the top navigation, making page switching more convenient.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/demo/fixed.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

一般用于固定顶部导航，方便页面切换。

## en-US

Sticky Header is generally used to fix the top navigation to facilitate page switching.
```

----------------------------------------

TITLE: Displaying Multilingual Component Description in Markdown
DESCRIPTION: This snippet provides a simple description of the component's usage in both Chinese (zh-CN) and English (en-US). It uses Markdown headers to separate the language sections.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/segmented/demo/basic.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

最简单的用法。

## en-US

The most basic usage.
```

----------------------------------------

TITLE: Bad Practice Example in Markdown
DESCRIPTION: A markdown block containing an example of counterproductive feedback about a project's perceived disadvantages.
SOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.en-US.md#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
Although this project is a product of a large company, it has disadvantages compared with competing products in the following aspects, and I personally do not recommend using it.
```

----------------------------------------

TITLE: Describing Auto Line Wrap Feature in Markdown
DESCRIPTION: This snippet provides brief descriptions of the auto line wrap feature in both Chinese and English using Markdown syntax. It demonstrates how to structure multilingual documentation for Ant Design components.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/wrap.md#2025-04-23_snippet_0

LANGUAGE: Markdown
CODE:
```
## zh-CN

自动换行。

## en-US

Auto wrap line.
```

----------------------------------------

TITLE: AutoComplete Component Demo Links
DESCRIPTION: Code source references for various AutoComplete component demonstrations and examples.
SOURCE: https://github.com/ant-design/ant-design/blob/master/components/auto-complete/index.en-US.md#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
<!-- prettier-ignore -->
<code src="./demo/basic.tsx">Basic Usage</code>
<code src="./demo/options.tsx">Customized</code>
<code src="./demo/custom.tsx">Customize Input Component</code>
```